{
    "rich_cli": [],
    "rich_cli.__main__": [
        "rich.measure",
        "click",
        "rich.console.Console.__init__",
        "typing",
        "rich_cli.__main__.ForceWidth",
        "operator",
        "click.decorators.command",
        "rich.console",
        "rich.text",
        "click.decorators.argument.decorator",
        "click.types.Choice.__init__",
        "rich_cli.__main__.RichCommand",
        "pygments.util",
        "<builtin>.sorted",
        "click.decorators.option.decorator",
        "rich.markup",
        "click.decorators.option",
        "rich_cli.__main__.run",
        "click.decorators.argument"
    ],
    "operator": [
        "operator.methodcaller",
        "operator.attrgetter",
        "operator.itemgetter"
    ],
    "operator.attrgetter": [],
    "operator.itemgetter": [],
    "operator.methodcaller": [],
    "typing": [
        "typing._TypingEmpty",
        "typing.BinaryIO",
        "abc",
        "types",
        "typing.SupportsAbs",
        "typing.SupportsInt",
        "operator",
        "re",
        "typing._TypedDictMeta",
        "typing.ForwardRef",
        "typing._Immutable",
        "typing._SpecialForm.__init__",
        "typing._VariadicGenericAlias",
        "typing.Generic",
        "typing.Protocol",
        "typing.SupportsComplex",
        "typing._Final",
        "typing.re",
        "functools",
        "typing.NamedTuple",
        "typing._ProtocolMeta",
        "typing.TextIO",
        "typing.TypeVar.__init__",
        "typing.TypedDict",
        "typing.SupportsFloat",
        "typing.SupportsIndex",
        "typing.IO",
        "typing._SpecialForm",
        "typing.SupportsBytes",
        "typing.SupportsRound",
        "typing._GenericAlias",
        "typing.TypeVar",
        "typing._alias",
        "collections.abc",
        "typing.io",
        "collections",
        "typing._TypingEllipsis",
        "typing.NamedTupleMeta",
        "contextlib"
    ],
    "abc": [
        "abc.abstractproperty",
        "abc.abstractclassmethod",
        "_py_abc",
        "abc.ABC",
        "abc.abstractstaticmethod"
    ],
    "abc.abstractclassmethod": [],
    "abc.abstractstaticmethod": [],
    "abc.abstractproperty": [],
    "_py_abc": [
        "_weakrefset",
        "_py_abc.ABCMeta"
    ],
    "_weakrefset": [
        "_weakrefset._IterationGuard",
        "_weakrefset.WeakSet"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset.WeakSet": [],
    "_py_abc.ABCMeta": [],
    "abc.ABC": [],
    "collections": [
        "collections.ChainMap",
        "collections.UserDict",
        "reprlib",
        "collections._OrderedDictKeysView",
        "collections.abc",
        "collections._OrderedDictItemsView",
        "collections.UserList",
        "heapq",
        "collections.OrderedDict",
        "keyword",
        "operator",
        "collections.UserString",
        "collections.Counter",
        "collections._OrderedDictValuesView",
        "collections._Link"
    ],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "heapq": [
        "doctest",
        "_heapq",
        "<builtin>.print",
        "doctest.testmod"
    ],
    "_heapq": [],
    "doctest": [
        "doctest._DocTestSuite",
        "re",
        "unittest",
        "doctest.DocFileCase",
        "doctest._TestClass",
        "doctest._SpoofOut",
        "doctest.DebugRunner",
        "linecache",
        "doctest.DocTest",
        "traceback",
        "doctest._test",
        "doctest.DocTestCase",
        "doctest.SkipDocTestCase",
        "doctest.OutputChecker",
        "doctest.DocTestFinder",
        "doctest.register_optionflag",
        "doctest.Example",
        "collections.namedtuple",
        "inspect",
        "os",
        "io",
        "doctest.DocTestParser",
        "doctest.DocTestFailure",
        "__future__",
        "collections",
        "doctest.DocTestRunner",
        "doctest.UnexpectedException",
        "difflib",
        "doctest._OutputRedirectingPdb"
    ],
    "__future__": [
        "__future__._Feature",
        "__future__._Feature.__init__"
    ],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "difflib": [
        "re.compile",
        "collections",
        "collections.namedtuple",
        "difflib._test",
        "heapq",
        "difflib.HtmlDiff",
        "difflib.Differ",
        "re",
        "difflib.SequenceMatcher"
    ],
    "collections.namedtuple": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.str",
        "<builtin>.repr",
        "<builtin>.ValueError",
        "<str>.split",
        "<builtin>.dict",
        "collections.<lambda1>",
        "<builtin>.list",
        "<builtin>.classmethod",
        "<builtin>.exec",
        "<builtin>.map",
        "<str>.replace",
        "<builtin>.set",
        "<builtin>.zip",
        "<builtin>.reversed",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.len",
        "_collections._tuplegetter"
    ],
    "difflib.SequenceMatcher": [],
    "difflib.Differ": [],
    "re": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "<builtin>.globals",
        "sre_compile.compile",
        "click.core.MultiCommand.result_callback.decorator.function",
        "copyreg",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "rich.constrain.Constrain.__init__",
        "sre_parse",
        "functools.lru_cache",
        "copyreg.pickle",
        "rich.panel.Panel._subtitle",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools",
        "rich.panel.Panel.__init__",
        "rich.panel.Panel._title",
        "enum",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "<builtin>.chr",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "sre_compile",
        "click.decorators.pass_obj.new_func",
        "re.Scanner",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "<builtin>.type",
        "click.utils.LazyFile.__init__",
        "re.RegexFlag",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "enum": [
        "enum._EnumDict",
        "enum.Flag",
        "enum.Enum",
        "enum.IntEnum",
        "enum.auto",
        "<builtin>.object",
        "types",
        "enum.EnumMeta",
        "enum.IntFlag"
    ],
    "types": [
        "types._GeneratorWrapper",
        "<builtin>.globals",
        "types._g",
        "types._C",
        "<builtin>.object",
        "types.DynamicClassAttribute",
        "types._ag",
        "<builtin>.type",
        "types._cell_factory",
        "types._c"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "<builtin>.object": [],
    "types.DynamicClassAttribute": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "<builtin>.globals": [],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum.EnumMeta": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "<builtin>.classmethod": [],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "types.DynamicClassAttribute.__init__",
        "<builtin>.classmethod"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "<builtin>.getattr": [],
    "<builtin>.bool": [],
    "enum.IntEnum": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple",
        "sre_constants",
        "sre_parse"
    ],
    "sre_parse": [
        "sre_parse.State",
        "sre_parse.SubPattern",
        "sre_constants",
        "sre_parse.Verbose",
        "<builtin>.ord",
        "sre_parse.Tokenizer",
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants._makecodes",
        "sre_constants.dump",
        "<builtin>.open",
        "<builtin>.print",
        "sre_constants._NamedIntConstant",
        "sre_constants.error"
    ],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<str>.strip",
        "<builtin>.enumerate",
        "<str>.split"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.enumerate": [],
    "<builtin>.open": [],
    "sre_constants.dump": [
        "<builtin>.sorted"
    ],
    "<builtin>.sorted": [],
    "<builtin>.print": [],
    "<builtin>.ord": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.tuple": [],
    "functools": [
        "functools.partialmethod",
        "reprlib",
        "functools._HashedSeq",
        "abc",
        "functools.cached_property",
        "collections",
        "collections.namedtuple",
        "<builtin>.object",
        "functools.singledispatchmethod",
        "functools.partial"
    ],
    "reprlib": [
        "reprlib.Repr.__init__",
        "reprlib.Repr"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "<builtin>.set": [],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "functools._HashedSeq": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [],
    "re.RegexFlag": [],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile.dis",
        "sre_parse.parse",
        "<map>.items",
        "sre_compile.isstring",
        "sre_compile._code",
        "<builtin>.tuple",
        "<builtin>.print"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "<builtin>.isinstance": [],
    "sre_parse.parse": [
        "sre_parse._parse_sub",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.seek",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.State.__init__",
        "sre_parse.SubPattern.dump"
    ],
    "sre_parse.Tokenizer.__init__": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<builtin>.str": [],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "<builtin>.len": [],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "<list>.append",
        "sre_parse.Tokenizer.match",
        "<list>.extend",
        "sre_parse.SubPattern.__init__",
        "sre_parse.SubPattern.append",
        "<builtin>.len",
        "sre_parse.Tokenizer.tell",
        "<list>"
    ],
    "<list>": [],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "<list>.extend": [],
    "<list>.append": [],
    "sre_parse.SubPattern.append": [
        "<list>.append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "<builtin>.ValueError": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.print",
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "sre_compile._code": [
        "sre_compile._compile_info",
        "sre_compile._compile",
        "<list>.append"
    ],
    "sre_compile._compile_info": [
        "<builtin>.len",
        "sre_compile._get_charset_prefix",
        "<list>.extend",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._optimize_charset",
        "sre_compile._compile_charset",
        "<list>",
        "sre_compile._get_literal_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "sre_compile._get_iscased",
        "<list>.extend",
        "sre_compile._combine_flags",
        "<builtin>.len",
        "<list>",
        "sre_compile._get_literal_prefix"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "sre_compile._get_iscased",
        "<builtin>.any",
        "sre_compile._combine_flags",
        "<builtin>.range",
        "<list>",
        "<builtin>.map"
    ],
    "<builtin>.range": [],
    "<builtin>.map": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "sre_compile._mk_bitmap",
        "<builtin>.len",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.any",
        "sre_compile._bytes_to_codes",
        "<list>.append",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "sre_constants.error.__init__",
        "<list>.extend",
        "<list>"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "<builtin>.super": [],
    "sre_compile._compile": [
        "sre_compile._compile",
        "sre_constants.error.__init__",
        "sre_compile._combine_flags",
        "<map>.get",
        "sre_compile._simple",
        "sre_compile._optimize_charset",
        "sre_compile._compile_charset",
        "<list>"
    ],
    "<map>.get": [],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "<builtin>.str",
        "<builtin>.set",
        "sre_compile.dis.dis_",
        "<builtin>.len"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.range",
        "<str>.join",
        "<builtin>.list",
        "sre_compile.dis.dis_.print_",
        "sre_compile.dis.dis_.print_2",
        "sre_compile.dis.dis_",
        "sre_compile._hex_code",
        "<builtin>.chr",
        "<builtin>.str",
        "<builtin>.map",
        "<builtin>.ValueError",
        "<builtin>.bin"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "<str>.join": [],
    "<builtin>.list": [],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "functools.update_wrapper",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "functools._lru_cache_wrapper"
    ],
    "<builtin>.callable": [],
    "<builtin>.TypeError": [],
    "functools._lru_cache_wrapper": [
        "_thread.RLock",
        "<builtin>.object"
    ],
    "_thread.RLock": [],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "charset_normalizer.utils.is_unicode_range_secondary",
        "charset_normalizer.utils.is_separator",
        "charset_normalizer.cd.encoding_languages",
        "rich.color.Color.get_ansi_codes",
        "rich.style.Style.normalize",
        "textual.widgets._directory_tree.DirectoryTree.render_tree_label",
        "charset_normalizer.md.mess_ratio",
        "rich.style.Style.parse",
        "charset_normalizer.utils.is_case_variable",
        "rich.cells._get_codepoint_cell_size",
        "typing_extensions.Protocol.__class_getitem__",
        "charset_normalizer.cd.coherence_ratio",
        "typing._GenericAlias.__getitem__",
        "charset_normalizer.utils.unicode_range",
        "charset_normalizer.utils.is_symbol",
        "textual._callback.count_parameters",
        "charset_normalizer.utils.is_thai",
        "importlib_metadata.FastPath.__new__",
        "charset_normalizer.utils.remove_accent",
        "ipaddress.IPv4Network.is_global",
        "ipaddress.IPv4Address.is_global",
        "rich.style.Style.get_html_style",
        "fnmatch._compile_pattern",
        "rich.color.Color.downgrade",
        "rich.cells.get_character_cell_size",
        "typing_extensions._SpecialForm.__getitem__",
        "charset_normalizer.utils.is_hiragana",
        "typing_extensions._concatenate_getitem",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "rich.palette.Palette.match",
        "charset_normalizer.utils.is_hangul",
        "pathlib._make_selector",
        "charset_normalizer.utils.is_multi_byte_encoding",
        "charset_normalizer.utils.is_ascii",
        "re._compile_repl",
        "charset_normalizer.md.is_suspiciously_successive_range",
        "charset_normalizer.cd.get_target_features",
        "charset_normalizer.utils.is_latin",
        "charset_normalizer.utils.is_katakana",
        "rich.style.Style._add",
        "charset_normalizer.utils.is_punctuation",
        "rich.color.Color.parse",
        "charset_normalizer.utils.is_cjk",
        "rich.cells.cached_cell_len",
        "ipaddress.IPv6Address.is_private",
        "typing_extensions.Annotated.__class_getitem__",
        "charset_normalizer.utils.is_unprintable",
        "pygments.formatters.html.HtmlFormatter._translate_parts",
        "typing.Generic.__class_getitem__",
        "functools._make_key",
        "charset_normalizer.cd.mb_encoding_languages",
        "typing._SpecialForm.__getitem__",
        "charset_normalizer.utils.is_emoticon",
        "rich.segment.Segment._split_cells",
        "ipaddress.IPv4Address.is_private",
        "charset_normalizer.utils.is_accentuated"
    ],
    "functools._make_key": [
        "<builtin>.tuple",
        "functools._HashedSeq.__init__",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "re._compile_repl": [
        "sre_parse.parse_template"
    ],
    "sre_parse.parse_template": [
        "<list>.append",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.parse_template.addgroup",
        "<builtin>.isinstance",
        "<builtin>.int",
        "sre_parse.Tokenizer.get",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.__init__",
        "<builtin>.IndexError",
        "<builtin>.len",
        "<builtin>.chr",
        "<list>",
        "<str>.isidentifier"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "<builtin>.int": [],
    "sre_parse.parse_template.addgroup": [
        "sre_parse.Tokenizer.error",
        "<list>.append"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "sre_parse.Tokenizer.__next",
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "<str>.isidentifier": [],
    "<builtin>.IndexError": [],
    "copyreg": [],
    "copyreg.pickle": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "re.Scanner": [],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "sre_compile.compile",
        "sre_compile.isstring",
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "difflib.HtmlDiff": [],
    "difflib._test": [
        "doctest",
        "difflib",
        "doctest.testmod"
    ],
    "doctest.testmod": [
        "doctest.DocTestFinder.__init__",
        "doctest.DocTestRunner.merge",
        "<builtin>.TypeError",
        "inspect.ismodule",
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestFinder.find",
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.run",
        "doctest.DocTestRunner.summarize"
    ],
    "inspect": [
        "inspect._ParameterKind",
        "<builtin>.globals",
        "abc",
        "types",
        "<builtin>.object",
        "tokenize",
        "operator",
        "re",
        "inspect._empty",
        "dis",
        "inspect.BlockFinder",
        "linecache",
        "warnings",
        "functools",
        "inspect.Parameter",
        "inspect.EndOfBlock",
        "inspect.Signature",
        "enum",
        "importlib.machinery",
        "collections.namedtuple",
        "os",
        "inspect._void",
        "<map>.items",
        "collections.abc",
        "token",
        "collections",
        "inspect.BoundArguments",
        "inspect._main",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "dis": [
        "dis.Bytecode",
        "opcode",
        "collections",
        "collections.namedtuple",
        "types",
        "dis.Instruction",
        "io",
        "dis._test"
    ],
    "io": [
        "io.IOBase",
        "abc",
        "io.RawIOBase",
        "io.TextIOBase",
        "io.BufferedIOBase"
    ],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "opcode": [
        "opcode.name_op",
        "_opcode",
        "opcode.def_op",
        "<list>.append",
        "opcode.jrel_op",
        "<builtin>.range",
        "opcode.jabs_op"
    ],
    "_opcode": [],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "opcode.jrel_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "opcode.jabs_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "dis.Instruction": [],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "dis._test": [
        "argparse.ArgumentParser.parse_args",
        "argparse",
        "argparse.FileType.__init__",
        "argparse.ArgumentParser.__init__",
        "<builtin>.compile",
        "argparse._ActionsContainer.add_argument",
        "dis.dis"
    ],
    "argparse": [
        "argparse._CountAction",
        "argparse._StoreAction",
        "argparse._AppendConstAction",
        "argparse.FileType",
        "argparse._AttributeHolder",
        "argparse._ArgumentGroup",
        "argparse._AppendAction",
        "re",
        "argparse.RawTextHelpFormatter",
        "argparse._StoreConstAction",
        "argparse._MutuallyExclusiveGroup",
        "argparse.RawDescriptionHelpFormatter",
        "argparse.ArgumentError",
        "argparse._VersionAction",
        "gettext",
        "argparse.Namespace",
        "argparse._StoreTrueAction",
        "argparse._ExtendAction",
        "argparse.HelpFormatter",
        "os",
        "argparse.Action",
        "shutil",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse.ArgumentTypeError",
        "argparse._HelpAction",
        "argparse._SubParsersAction",
        "argparse.ArgumentParser",
        "argparse._StoreFalseAction",
        "argparse.MetavarTypeHelpFormatter",
        "argparse._ActionsContainer"
    ],
    "os": [
        "os._Environ.__init__",
        "os.PathLike",
        "<builtin>.globals",
        "abc",
        "posixpath",
        "<list>.append",
        "os._fscodec",
        "os._createenviron",
        "os._AddedDllDirectory",
        "ntpath",
        "<builtin>.set",
        "<builtin>.ImportError",
        "os._Environ",
        "os._exists",
        "stat",
        "collections.abc",
        "<list>.extend",
        "os._add",
        "os._wrap_close"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "<builtin>.hasattr",
        "os",
        "genericpath",
        "stat"
    ],
    "genericpath": [
        "os",
        "stat"
    ],
    "<builtin>.hasattr": [],
    "posixpath": [
        "os",
        "genericpath",
        "stat"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os._Environ": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os._wrap_close": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "os._AddedDllDirectory": [],
    "shutil": [
        "zlib",
        "grp",
        "shutil.SameFileError",
        "shutil.ExecError",
        "shutil.ReadError",
        "stat",
        "shutil.Error",
        "collections",
        "collections.namedtuple",
        "fnmatch",
        "os",
        "shutil.RegistryError",
        "<list>.append",
        "shutil._GiveupOnFastCopy",
        "<builtin>.hasattr",
        "shutil.SpecialFileError",
        "bz2",
        "lzma"
    ],
    "fnmatch": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "posixpath",
        "click.utils.KeepOpenFile.__init__",
        "re",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "os",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "zlib": [],
    "bz2": [
        "threading",
        "bz2.BZ2File",
        "warnings",
        "_compression",
        "<builtin>.object",
        "os",
        "_bz2",
        "io"
    ],
    "warnings": [
        "warnings.catch_warnings",
        "warnings._OptionError",
        "warnings.simplefilter",
        "warnings.WarningMessage",
        "warnings._processoptions",
        "warnings.filterwarnings",
        "<builtin>.hasattr"
    ],
    "warnings._OptionError": [],
    "warnings.WarningMessage": [],
    "warnings.catch_warnings": [],
    "warnings._processoptions": [
        "warnings._setoption",
        "<builtin>.print"
    ],
    "warnings._setoption": [
        "warnings._getcategory",
        "warnings._getaction",
        "<builtin>.int",
        "re.escape",
        "re",
        "<builtin>.len",
        "warnings.filterwarnings"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.issubclass",
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<str>.encode",
        "<builtin>.isinstance",
        "<str>.translate",
        "<builtin>.str"
    ],
    "warnings.filterwarnings": [
        "<builtin>.isinstance",
        "re.compile",
        "<builtin>.issubclass",
        "re",
        "warnings._add_filter"
    ],
    "warnings._add_filter": [
        "<list>.insert",
        "warnings._filters_mutated",
        "<list>.remove",
        "<list>.append"
    ],
    "<list>.remove": [],
    "<list>.insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "_compression": [
        "_compression.DecompressReader",
        "_compression.BaseStream",
        "io"
    ],
    "_compression.BaseStream": [],
    "_compression.DecompressReader": [],
    "threading": [
        "threading.Barrier",
        "_weakrefset",
        "threading._DummyThread",
        "itertools.count",
        "<list>.append",
        "_threading_local",
        "threading.BrokenBarrierError",
        "traceback",
        "<builtin>.hasattr",
        "threading._MainThread.__init__",
        "_weakrefset.WeakSet.__init__",
        "threading.Condition",
        "<builtin>.set",
        "collections.namedtuple",
        "threading.Event",
        "os",
        "threading.Thread",
        "threading.BoundedSemaphore",
        "threading.Timer",
        "threading._RLock",
        "collections",
        "_thread.allocate_lock",
        "threading.Semaphore",
        "threading._MainThread"
    ],
    "threading._RLock": [],
    "threading.Condition": [],
    "threading.Semaphore": [],
    "threading.BoundedSemaphore": [],
    "threading.Event": [],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "_weakref.ref": [],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet._commit_removals": [
        "<list>.pop"
    ],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [
        "linecache",
        "traceback.TracebackException",
        "collections",
        "traceback.FrameSummary",
        "traceback.StackSummary"
    ],
    "linecache": [
        "tokenize",
        "os",
        "functools"
    ],
    "tokenize": [
        "codecs",
        "tokenize.group",
        "re",
        "tokenize.TokenInfo",
        "tokenize.maybe",
        "tokenize.StopTokenizing",
        "<builtin>.any",
        "tokenize.main",
        "<builtin>.map",
        "tokenize._all_string_prefixes",
        "<builtin>.set",
        "re.compile",
        "collections.namedtuple",
        "<builtin>.sorted",
        "io",
        "token",
        "collections",
        "tokenize.TokenError",
        "tokenize.Untokenizer"
    ],
    "codecs": [
        "codecs.CodecInfo",
        "codecs.EncodedFile",
        "codecs.StreamReader",
        "codecs.IncrementalEncoder",
        "codecs.StreamRecoder",
        "codecs.IncrementalDecoder",
        "<builtin>.SystemError",
        "codecs.StreamWriter",
        "codecs.Codec",
        "codecs.StreamReaderWriter",
        "codecs.BufferedIncrementalDecoder",
        "codecs.BufferedIncrementalEncoder",
        "encodings"
    ],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.Codec": [],
    "codecs.IncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.IncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.StreamWriter": [],
    "codecs.StreamReader": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamRecoder": [],
    "encodings": [
        "encodings.CodecRegistryError",
        "codecs",
        "encodings.aliases"
    ],
    "encodings.CodecRegistryError": [],
    "codecs.EncodedFile": [
        "codecs.StreamRecoder.__init__"
    ],
    "codecs.StreamRecoder.__init__": [],
    "token": [
        "<builtin>.globals",
        "<list>.extend",
        "<builtin>.isinstance"
    ],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "tokenize.main": [
        "argparse.ArgumentParser.parse_args",
        "argparse",
        "tokenize.main.perror",
        "argparse.ArgumentParser.__init__",
        "<builtin>.list",
        "tokenize.main.error",
        "builtins.open",
        "argparse._ActionsContainer.add_argument",
        "tokenize.tokenize",
        "<builtin>.print",
        "tokenize._tokenize"
    ],
    "argparse.ArgumentParser.__init__": [
        "argparse._ActionsContainer.register",
        "<builtin>.super",
        "argparse._ActionsContainer.add_argument",
        "ntpath.basename",
        "posixpath.basename",
        "argparse._ActionsContainer.add_argument_group",
        "gettext.gettext",
        "argparse._ActionsContainer._add_container_actions"
    ],
    "tokenize._tokenize": [
        "<builtin>.len",
        "pathlib.PurePath.match",
        "<builtin>.IndentationError",
        "<map>.get",
        "<list>.append",
        "tokenize._compile",
        "codecs.StreamRecoder.readline"
    ],
    "codecs.StreamRecoder.readline": [],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "builtins.open": [],
    "tokenize.tokenize": [
        "<builtin>.iter",
        "tokenize.detect_encoding",
        "tokenize._tokenize"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop",
        "pathlib.PurePath.match"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "pathlib.PurePath.match",
        "<builtin>.SyntaxError",
        "<str>.format"
    ],
    "<str>.format": [],
    "<builtin>.SyntaxError": [],
    "tokenize._get_normal_name": [],
    "tokenize.main.error": [
        "tokenize.main.perror"
    ],
    "tokenize.main.perror": [
        "rich.file_proxy.FileProxy.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "codecs.StreamRecoder.write",
        "click._winconsole.ConsoleStream.write"
    ],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading.Timer": [],
    "threading._MainThread": [],
    "threading._DummyThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_ident",
        "threading.Event.set",
        "threading.Thread.__init__"
    ],
    "threading.Thread.__init__": [
        "threading._make_invoke_excepthook",
        "_weakrefset.WeakSet.add",
        "<builtin>.str",
        "threading.current_thread",
        "threading.Event.__init__",
        "threading._newname"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "_thread.get_ident": [],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading._newname",
        "threading.Event.set",
        "threading.Thread.__init__"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "_collections.deque",
        "threading.RLock"
    ],
    "threading.RLock": [
        "threading._RLock.__init__",
        "_thread.RLock"
    ],
    "threading._RLock.__init__": [
        "_thread.allocate_lock"
    ],
    "_collections.deque": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "threading",
        "contextlib.contextmanager",
        "_threading_local._localimpl",
        "weakref",
        "_threading_local.local",
        "contextlib"
    ],
    "weakref": [
        "collections.abc",
        "weakref.WeakKeyDictionary",
        "_weakrefset",
        "weakref.finalize",
        "weakref.KeyedRef",
        "weakref.WeakValueDictionary",
        "weakref.WeakMethod"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakValueDictionary": [],
    "weakref.KeyedRef": [],
    "weakref.WeakKeyDictionary": [],
    "weakref.finalize": [
        "<builtin>.classmethod",
        "weakref.finalize._Info",
        "<builtin>.property"
    ],
    "weakref.finalize._Info": [],
    "contextlib": [
        "abc",
        "types",
        "contextlib.redirect_stdout",
        "contextlib._RedirectStream",
        "contextlib.nullcontext",
        "contextlib.ContextDecorator",
        "contextlib.AsyncExitStack",
        "functools",
        "contextlib.ExitStack",
        "contextlib.redirect_stderr",
        "contextlib.suppress",
        "contextlib.closing",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib._GeneratorContextManagerBase",
        "contextlib._BaseExitStack",
        "contextlib._GeneratorContextManager",
        "collections.abc",
        "collections",
        "contextlib.AbstractContextManager",
        "contextlib.AbstractAsyncContextManager"
    ],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib.closing": [],
    "contextlib._RedirectStream": [],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.ExitStack": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.nullcontext": [],
    "_threading_local._localimpl": [],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "_threading_local.local": [],
    "_bz2": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [
        "lzma.LZMAFile",
        "_compression",
        "_lzma",
        "os",
        "io"
    ],
    "_lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "grp": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "gettext": [
        "gettext.NullTranslations",
        "posixpath.join",
        "gettext.GNUTranslations",
        "re.compile",
        "<builtin>.enumerate",
        "ntpath.join",
        "os",
        "re",
        "locale"
    ],
    "locale": [
        "<map>.items",
        "locale._test",
        "collections.abc",
        "<builtin>.globals",
        "re.compile",
        "functools",
        "functools.wraps",
        "<builtin>.sorted",
        "encodings.aliases",
        "re",
        "<map>.setdefault",
        "<builtin>.print",
        "<builtin>.hasattr",
        "encodings",
        "locale._print_locale"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "locale._print_locale": [
        "<map>.items",
        "locale.setlocale",
        "locale.getlocale",
        "locale.resetlocale",
        "<builtin>.print",
        "locale._print_locale._init_categories",
        "locale.getdefaultlocale"
    ],
    "locale._print_locale._init_categories": [
        "<builtin>.globals"
    ],
    "locale.getdefaultlocale": [
        "os",
        "locale._parse_localename"
    ],
    "locale._parse_localename": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "locale.normalize",
        "<str>.split"
    ],
    "locale.normalize": [
        "<str>.replace",
        "locale._append_modifier",
        "<map>.get",
        "locale._replace_encoding",
        "<str>.lower",
        "<str>.split"
    ],
    "<str>.replace": [],
    "locale._append_modifier": [
        "locale._replace_encoding",
        "<str>.partition"
    ],
    "locale._replace_encoding": [
        "<str>.replace",
        "<str>.index",
        "<map>.get",
        "encodings.normalize_encoding",
        "<str>.lower"
    ],
    "encodings.normalize_encoding": [
        "<list>.append",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<str>.lower": [],
    "locale.getlocale": [
        "<builtin>.TypeError",
        "locale.setlocale",
        "locale._parse_localename"
    ],
    "locale.setlocale": [],
    "<str>.partition": [],
    "<str>.index": [],
    "locale.resetlocale": [
        "locale._build_localename",
        "locale.getdefaultlocale",
        "locale.setlocale"
    ],
    "locale._build_localename": [
        "<builtin>.TypeError"
    ],
    "locale._test": [
        "locale.setlocale",
        "locale.atof",
        "<builtin>.print",
        "<builtin>.str",
        "locale.format_string",
        "locale.atoi"
    ],
    "locale.format_string": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "locale.atoi": [
        "locale.delocalize",
        "<builtin>.int"
    ],
    "locale.delocalize": [
        "locale.localeconv",
        "<str>.replace"
    ],
    "locale.localeconv": [],
    "locale.atof": [
        "locale.delocalize"
    ],
    "posixpath.join": [
        "posixpath._get_sep",
        "<str>.endswith",
        "os._fspath",
        "genericpath._check_arg_types",
        "<builtin>.map"
    ],
    "os._fspath": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "ntpath.join": [
        "ntpath.splitdrive",
        "<str>.lower",
        "<builtin>.isinstance",
        "os._fspath",
        "genericpath._check_arg_types",
        "<builtin>.map"
    ],
    "ntpath.splitdrive": [
        "<str>.find",
        "<builtin>.isinstance",
        "<str>.replace",
        "os._fspath",
        "pathlib.Path.replace",
        "<builtin>.len"
    ],
    "gettext.NullTranslations": [],
    "gettext.GNUTranslations": [],
    "argparse._AttributeHolder": [],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter._Section": [],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse._StoreAction": [],
    "argparse._StoreConstAction": [],
    "argparse._StoreTrueAction": [],
    "argparse._StoreFalseAction": [],
    "argparse._AppendAction": [],
    "argparse._AppendConstAction": [],
    "argparse._CountAction": [],
    "argparse._HelpAction": [],
    "argparse._VersionAction": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._ExtendAction": [],
    "argparse.FileType": [],
    "argparse.Namespace": [],
    "argparse._ActionsContainer": [],
    "argparse._ArgumentGroup": [],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse.ArgumentParser": [],
    "posixpath.basename": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.rfind"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "os._fspath",
        "ntpath.splitdrive",
        "ntpath._get_bothseps",
        "<builtin>.len"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.dgettext": [
        "gettext.NullTranslations.gettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.translation": [
        "warnings",
        "gettext.find",
        "<builtin>.FileNotFoundError",
        "gettext.NullTranslations.__init__",
        "copy.copy",
        "<builtin>.open",
        "<map>.get",
        "<map>.setdefault",
        "warnings.catch_warnings.__init__",
        "posixpath.abspath",
        "collections.UserDict.__iter__",
        "ntpath.abspath",
        "copy",
        "warnings.warn"
    ],
    "gettext.find": [
        "posixpath.join",
        "gettext._expand_lang",
        "ntpath.join",
        "<list>.append",
        "genericpath.exists"
    ],
    "gettext._expand_lang": [
        "<list>.reverse",
        "<str>.find",
        "locale.normalize",
        "<list>.append",
        "<builtin>.range"
    ],
    "<str>.find": [],
    "<list>.reverse": [],
    "genericpath.exists": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse",
        "gettext.GNUTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "<builtin>.FileNotFoundError": [],
    "posixpath.abspath": [
        "<builtin>.isinstance",
        "posixpath.normpath",
        "os._fspath",
        "posixpath.join",
        "posixpath.isabs"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.startswith"
    ],
    "posixpath.normpath": [
        "<builtin>.isinstance",
        "os._fspath",
        "<str>.startswith",
        "<list>.pop",
        "<list>.append",
        "<str>.split"
    ],
    "<list>.pop": [],
    "ntpath.abspath": [],
    "copy": [
        "copy.Error",
        "types",
        "copyreg",
        "<builtin>.type",
        "<builtin>.getattr",
        "weakref"
    ],
    "copy.Error": [],
    "copy.copy": [
        "<builtin>.isinstance",
        "<map>",
        "<builtin>.issubclass",
        "<map>.get",
        "<builtin>.type",
        "<builtin>.getattr",
        "copy._copy_immutable",
        "copy._reconstruct"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.isinstance",
        "<builtin>.setattr",
        "<builtin>.len",
        "copy.deepcopy",
        "<builtin>.hasattr",
        "<builtin>.id"
    ],
    "copy.deepcopy": [
        "<builtin>.isinstance",
        "<map>",
        "copy._keep_alive",
        "<builtin>.issubclass",
        "<map>.get",
        "<builtin>.type",
        "<builtin>.getattr",
        "copy._deepcopy_atomic",
        "<builtin>.id",
        "copy._reconstruct"
    ],
    "<builtin>.id": [],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "<builtin>.setattr": [],
    "warnings.warn": [
        "warnings._next_external_frame",
        "<builtin>.isinstance",
        "warnings.warn_explicit",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "warnings._is_internal_frame",
        "<builtin>.type",
        "<builtin>.range"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<builtin>.isinstance",
        "linecache",
        "<builtin>.int",
        "warnings.WarningMessage.__init__",
        "<map>",
        "<map>.clear",
        "<builtin>.issubclass",
        "warnings._showwarnmsg",
        "<map>.get",
        "<builtin>.str",
        "<builtin>.RuntimeError",
        "linecache.getlines",
        "<list>"
    ],
    "<map>.clear": [],
    "linecache.getlines": [
        "linecache.updatecache",
        "linecache.clearcache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "<str>.endswith",
        "tokenize.open",
        "posixpath.join",
        "<str>.startswith",
        "ntpath.join",
        "email.message.Message.__iter__",
        "<builtin>.len",
        "linecache.lazycache",
        "posixpath.isabs",
        "os._Environ.__iter__",
        "ntpath.isabs"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "linecache.lazycache": [
        "<str>.endswith",
        "<builtin>.len",
        "<str>.startswith",
        "<map>.get",
        "<builtin>.getattr"
    ],
    "ntpath.isabs": [
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "<str>.replace",
        "os._fspath",
        "pathlib.Path.replace",
        "<str>.startswith",
        "<builtin>.len",
        "ntpath._get_bothseps"
    ],
    "tokenize.open": [
        "_io.TextIOWrapper",
        "builtins.open",
        "tokenize.detect_encoding"
    ],
    "_io.TextIOWrapper": [],
    "linecache.clearcache": [],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "codecs.StreamRecoder.write",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport.write",
        "asyncio.selector_events._SelectorSocketTransport.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "warnings._formatwarnmsg",
        "click._winconsole.ConsoleStream.write",
        "asyncio.sslproto._SSLProtocolTransport.write",
        "rich.file_proxy.FileProxy.write",
        "asyncio.transports.WriteTransport.write"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "tracemalloc",
        "<str>.strip",
        "linecache",
        "linecache.getline"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [
        "tracemalloc.BaseFilter",
        "tracemalloc.Filter",
        "linecache",
        "collections.abc",
        "pickle",
        "tracemalloc.Snapshot",
        "tracemalloc.Frame",
        "functools",
        "tracemalloc.Statistic",
        "posixpath",
        "fnmatch",
        "tracemalloc._Traces",
        "tracemalloc.Trace",
        "tracemalloc.Traceback",
        "tracemalloc.DomainFilter",
        "tracemalloc.StatisticDiff"
    ],
    "collections.abc": [
        "collections.abc"
    ],
    "pickle": [
        "pickle._load",
        "types",
        "copyreg",
        "codecs",
        "re",
        "_compat_pickle",
        "<list>.append",
        "pprint",
        "pickle.PicklingError",
        "argparse.ArgumentParser.__init__",
        "pickle._Unframer",
        "functools",
        "pickle._Framer",
        "pickle._Unpickler",
        "argparse",
        "_pickle",
        "argparse.FileType.__init__",
        "pickle.UnpicklingError",
        "pickle._Stop",
        "argparse.ArgumentParser.print_help",
        "struct",
        "io",
        "argparse.ArgumentParser.parse_args",
        "pprint.pprint",
        "pickle._Pickler",
        "pickle._test",
        "<list>.extend",
        "argparse._ActionsContainer.add_argument",
        "pickle.PickleError"
    ],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "_compat_pickle": [
        "<builtin>.dict",
        "<map>.update",
        "<map>.items",
        "<builtin>.len"
    ],
    "<builtin>.dict": [],
    "<map>.update": [],
    "_pickle": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "pickle._Framer": [],
    "pickle._Unframer": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Unpickler": [],
    "argparse.FileType.__init__": [],
    "argparse._ActionsContainer.add_argument": [
        "argparse._ActionsContainer._pop_action_class",
        "argparse._ActionsContainer._registry_get",
        "argparse._MutuallyExclusiveGroup._add_action",
        "argparse.ArgumentParser._get_formatter",
        "argparse.ArgumentParser._add_action",
        "argparse._ArgumentGroup._add_action",
        "argparse._ActionsContainer._get_positional_kwargs",
        "argparse._ActionsContainer._add_action",
        "<builtin>.callable",
        "argparse.HelpFormatter._format_args",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "argparse._ActionsContainer._get_optional_kwargs"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.dict",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "<builtin>.TypeError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "argparse.ArgumentParser._get_formatter": [
        "argparse.HelpFormatter.__init__"
    ],
    "argparse.HelpFormatter.__init__": [
        "shutil.get_terminal_size",
        "<builtin>.max",
        "re.compile",
        "argparse.HelpFormatter._Section.__init__",
        "<builtin>.min"
    ],
    "shutil.get_terminal_size": [
        "<builtin>.int"
    ],
    "argparse.HelpFormatter._Section.__init__": [],
    "argparse.HelpFormatter._format_args": [
        "argparse.HelpFormatter._metavar_formatter.format",
        "argparse.HelpFormatter._metavar_formatter",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "argparse.HelpFormatter._metavar_formatter": [
        "<builtin>.str"
    ],
    "argparse.HelpFormatter._metavar_formatter.format": [
        "<builtin>.isinstance"
    ],
    "argparse.ArgumentParser._add_action": [
        "argparse._ArgumentGroup._add_action"
    ],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict",
        "pathlib.PurePath.match",
        "<list>.append"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler",
        "<list>.append"
    ],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_args": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser.parse_known_args",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "argparse.ArgumentParser.error",
        "<builtin>.list",
        "<builtin>.delattr",
        "<builtin>.str",
        "<list>.extend",
        "argparse.ArgumentParser._parse_known_args",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "argparse.Namespace.__init__",
        "<builtin>.hasattr"
    ],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "<builtin>.isinstance",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.enumerate",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "<list>.append",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "<builtin>.max",
        "argparse.ArgumentParser._parse_optional",
        "<builtin>.iter",
        "<builtin>.min",
        "argparse.ArgumentParser.error",
        "<builtin>.set",
        "<map>.setdefault",
        "<list>.extend",
        "argparse.ArgumentParser._get_value",
        "argparse.ArgumentParser._get_positional_actions",
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.str",
        "<list>.extend",
        "<builtin>.open",
        "<list>.append",
        "argparse.ArgumentParser.convert_arg_line_to_args"
    ],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "argparse.ArgumentParser.error": [
        "argparse.ArgumentParser.exit",
        "argparse.ArgumentParser.print_usage",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser._print_message",
        "argparse.ArgumentParser.format_usage"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.HelpFormatter.format_help",
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter.add_usage"
    ],
    "argparse.HelpFormatter.add_usage": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter._add_item": [
        "<list>.append"
    ],
    "argparse.HelpFormatter.format_help": [
        "<str>.strip",
        "argparse.HelpFormatter._Section.format_help"
    ],
    "argparse.HelpFormatter._Section.format_help": [
        "argparse.HelpFormatter._indent",
        "argparse.HelpFormatter._join_parts",
        "argparse.HelpFormatter._dedent"
    ],
    "argparse.HelpFormatter._indent": [],
    "argparse.HelpFormatter._join_parts": [],
    "argparse.HelpFormatter._dedent": [],
    "argparse.ArgumentParser._print_message": [
        "rich.file_proxy.FileProxy.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "codecs.StreamRecoder.write",
        "click._winconsole.ConsoleStream.write"
    ],
    "codecs.StreamRecoder.write": [],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_option_tuples",
        "<builtin>.len",
        "gettext.gettext",
        "pathlib.PurePath.match"
    ],
    "argparse.ArgumentParser._get_option_tuples": [
        "<list>.append",
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "argparse.ArgumentParser._parse_known_args.take_action",
        "<builtin>.zip",
        "argparse.ArgumentParser._match_arguments_partial",
        "<builtin>.len"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "argparse.ArgumentParser._get_nargs_pattern",
        "<list>.extend",
        "re.match",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "<str>.replace"
    ],
    "re.match": [
        "re._compile",
        "pathlib.PurePath.match"
    ],
    "<builtin>.zip": [],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse.ArgumentError.__init__",
        "<map>.get",
        "gettext.gettext",
        "argparse.ArgumentParser._get_values",
        "argparse._get_action_name"
    ],
    "argparse.ArgumentParser._get_values": [
        "<builtin>.isinstance",
        "argparse.ArgumentParser._check_value",
        "argparse.ArgumentParser._get_value",
        "<builtin>.len",
        "<list>.remove"
    ],
    "argparse.ArgumentParser._get_value": [
        "argparse._ActionsContainer._registry_get",
        "argparse.ArgumentError.__init__",
        "<builtin>.str",
        "<builtin>.callable",
        "<builtin>.getattr",
        "gettext.gettext",
        "<builtin>.repr"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse._get_action_name": [],
    "<builtin>.repr": [],
    "argparse.ArgumentParser._check_value": [
        "<builtin>.map",
        "argparse.ArgumentError.__init__",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "<list>.append",
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "gettext.gettext",
        "argparse.ArgumentParser._match_argument"
    ],
    "argparse.ArgumentParser._match_argument": [
        "argparse.ArgumentParser._get_nargs_pattern",
        "argparse.ArgumentError.__init__",
        "<builtin>.len",
        "gettext.ngettext",
        "<map>.get",
        "re.match",
        "gettext.gettext"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "gettext.dngettext": [
        "gettext.NullTranslations.ngettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.NullTranslations.ngettext": [],
    "<builtin>.delattr": [],
    "pprint": [
        "pprint._perfcheck",
        "collections",
        "types",
        "re",
        "<builtin>.type",
        "pprint.PrettyPrinter",
        "<builtin>.frozenset",
        "io",
        "pprint._safe_key"
    ],
    "pprint._safe_key": [],
    "pprint.PrettyPrinter": [],
    "pprint._perfcheck": [
        "<builtin>.print",
        "pprint.PrettyPrinter.pformat",
        "pprint._safe_repr",
        "pprint.PrettyPrinter.__init__"
    ],
    "pprint.PrettyPrinter.__init__": [
        "<builtin>.bool",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "pprint._safe_repr": [
        "<map>.items",
        "<builtin>.len",
        "pprint._safe_repr",
        "<builtin>.sorted",
        "<builtin>.issubclass",
        "<builtin>.getattr",
        "<builtin>.type",
        "<builtin>.repr",
        "pprint._recursion",
        "<builtin>.id",
        "<list>"
    ],
    "pprint._recursion": [
        "<builtin>.id",
        "<builtin>.type"
    ],
    "pprint.PrettyPrinter.pformat": [
        "pprint.PrettyPrinter._format",
        "_io.StringIO"
    ],
    "_io.StringIO": [],
    "pprint.PrettyPrinter._format": [
        "codecs.StreamRecoder.write",
        "<builtin>.isinstance",
        "<map>",
        "pprint.PrettyPrinter._repr",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "<map>.get",
        "<builtin>.len",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "pprint.PrettyPrinter._pprint_dict",
        "pprint._recursion",
        "<builtin>.id"
    ],
    "pprint.PrettyPrinter._repr": [
        "pprint.PrettyPrinter.format",
        "<map>.copy"
    ],
    "<map>.copy": [],
    "pprint.PrettyPrinter.format": [
        "pprint._safe_repr"
    ],
    "pprint.PrettyPrinter._pprint_dict": [
        "<map>.items",
        "codecs.StreamRecoder.write",
        "<map>",
        "<builtin>.sorted",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "pprint.PrettyPrinter._format_dict_items",
        "<builtin>.len",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "pprint.PrettyPrinter._format_dict_items": [
        "codecs.StreamRecoder.write",
        "<map>",
        "pprint.PrettyPrinter._format",
        "pprint.PrettyPrinter._repr",
        "<builtin>.enumerate",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.len",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "pickle._load": [
        "pickle._Unpickler.load",
        "pickle._Unpickler.__init__"
    ],
    "pickle._Unpickler.__init__": [
        "<builtin>.iter"
    ],
    "pickle._Unpickler.load": [
        "pickle._Unframer.read",
        "pickle._Unframer.__init__",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "pickle._Unframer.__init__": [],
    "pickle._Unframer.read": [
        "<builtin>.len"
    ],
    "pprint.pprint": [
        "pprint.PrettyPrinter.pprint",
        "pprint.PrettyPrinter.__init__"
    ],
    "pprint.PrettyPrinter.pprint": [
        "codecs.StreamRecoder.write",
        "pprint.PrettyPrinter._format",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "argparse.ArgumentParser.print_help": [
        "argparse.ArgumentParser._print_message",
        "argparse.ArgumentParser.format_help"
    ],
    "argparse.ArgumentParser.format_help": [
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter.add_text",
        "argparse.HelpFormatter.start_section",
        "argparse.HelpFormatter.end_section",
        "argparse.HelpFormatter.format_help",
        "argparse.HelpFormatter.add_usage",
        "argparse.HelpFormatter.add_arguments"
    ],
    "argparse.HelpFormatter.add_text": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.start_section": [
        "argparse.HelpFormatter._indent",
        "argparse.HelpFormatter._add_item",
        "argparse.HelpFormatter._Section.__init__"
    ],
    "argparse.HelpFormatter.add_arguments": [
        "argparse.HelpFormatter.add_argument"
    ],
    "argparse.HelpFormatter.add_argument": [
        "<list>.append",
        "<builtin>.max",
        "argparse.HelpFormatter._iter_indented_subactions",
        "<builtin>.len",
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter._iter_indented_subactions": [],
    "argparse.HelpFormatter.end_section": [
        "argparse.HelpFormatter._dedent"
    ],
    "pickle._test": [
        "doctest",
        "doctest.testmod"
    ],
    "tracemalloc.Statistic": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "warnings.catch_warnings.__init__": [],
    "gettext.NullTranslations.gettext": [],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__",
        "<list>.append"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer.register": [
        "<map>.setdefault"
    ],
    "argparse._ActionsContainer._add_container_actions": [
        "argparse._ActionsContainer.add_argument_group",
        "<map>.get",
        "gettext.gettext",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<builtin>.ValueError"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__",
        "<list>.append"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "<builtin>.compile": [],
    "dis.dis": [
        "dis._disassemble_recursive",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "dis.distb",
        "<builtin>.sorted",
        "dis._disassemble_bytes",
        "dis.dis",
        "<builtin>.type",
        "dis._disassemble_str",
        "<builtin>.print",
        "<builtin>.hasattr"
    ],
    "dis.distb": [
        "dis.disassemble",
        "<builtin>.RuntimeError"
    ],
    "dis.disassemble": [
        "<builtin>.dict",
        "dis._disassemble_bytes",
        "dis.findlinestarts"
    ],
    "dis.findlinestarts": [
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "dis._disassemble_bytes": [
        "dis._get_instructions_bytes",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.print",
        "<builtin>.max"
    ],
    "dis._get_instructions_bytes": [
        "dis._get_const_info",
        "<builtin>.repr",
        "dis.findlabels",
        "<builtin>.enumerate",
        "dis._get_name_info",
        "<builtin>.bool",
        "dis._unpack_opargs"
    ],
    "dis.findlabels": [
        "dis._unpack_opargs",
        "<list>.append"
    ],
    "dis._unpack_opargs": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "dis._get_name_info": [
        "<builtin>.repr"
    ],
    "dis._get_const_info": [
        "<builtin>.repr"
    ],
    "dis._disassemble_str": [
        "dis._disassemble_recursive",
        "dis._try_compile"
    ],
    "dis._try_compile": [
        "<builtin>.compile"
    ],
    "dis._disassemble_recursive": [
        "dis._disassemble_recursive",
        "dis.disassemble",
        "<builtin>.hasattr",
        "<builtin>.print"
    ],
    "importlib.machinery": [],
    "inspect.EndOfBlock": [],
    "inspect.BlockFinder": [],
    "inspect._void": [],
    "inspect._empty": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "inspect._main": [
        "argparse.ArgumentParser.parse_args",
        "argparse",
        "importlib.import_module",
        "inspect.getsourcefile",
        "argparse.ArgumentParser.__init__",
        "<builtin>.repr",
        "argparse._ActionsContainer.add_argument",
        "inspect.getsource",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.getattr",
        "importlib",
        "<builtin>.print",
        "inspect.findsource"
    ],
    "importlib": [
        "warnings",
        "importlib._bootstrap_external",
        "types",
        "importlib._bootstrap_external._setup",
        "importlib._bootstrap",
        "importlib._bootstrap._setup"
    ],
    "importlib.import_module": [
        "<builtin>.TypeError",
        "importlib._bootstrap._gcd_import",
        "<str>.startswith"
    ],
    "inspect.getsource": [
        "inspect.getsourcelines"
    ],
    "inspect.getsourcelines": [
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.ismodule",
        "inspect.getblock",
        "inspect.unwrap",
        "inspect.findsource"
    ],
    "inspect.unwrap": [
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.id",
        "inspect.unwrap._is_wrapper"
    ],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "<builtin>.hasattr"
    ],
    "inspect.findsource": [
        "<str>.endswith",
        "inspect.getsourcefile",
        "linecache.checkcache",
        "inspect.isfunction",
        "<list>.append",
        "inspect.iscode",
        "<str>.startswith",
        "pathlib.PurePath.match",
        "inspect.getfile",
        "inspect.isclass",
        "inspect.ismethod",
        "re.compile",
        "inspect.ismodule",
        "inspect.getmodule",
        "<builtin>.OSError",
        "<builtin>.range",
        "linecache.getlines",
        "inspect.isframe",
        "inspect.istraceback",
        "<builtin>.len",
        "<list>.sort",
        "<builtin>.hasattr"
    ],
    "inspect.getsourcefile": [
        "<str>.endswith",
        "posixpath.splitext",
        "inspect.getfile",
        "ntpath.splitext",
        "<builtin>.any",
        "inspect.getmodule",
        "<builtin>.getattr",
        "genericpath.exists"
    ],
    "inspect.getfile": [
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.isclass",
        "<builtin>.TypeError",
        "inspect.ismethod",
        "inspect.isfunction",
        "inspect.ismodule",
        "<builtin>.getattr",
        "<builtin>.type",
        "inspect.iscode",
        "<builtin>.hasattr"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "posixpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "genericpath._splitext": [
        "<builtin>.max",
        "<str>.rfind"
    ],
    "<str>.rfind": [],
    "ntpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "inspect.getmodule": [
        "ntpath.realpath",
        "posixpath.realpath",
        "inspect.getabsfile",
        "inspect.ismodule",
        "<map>.get",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "inspect.getabsfile": [
        "inspect.getsourcefile",
        "inspect.getfile",
        "posixpath.normcase",
        "ntpath.normcase",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "ntpath.normcase": [
        "<builtin>.isinstance",
        "<str>.replace",
        "os._fspath",
        "pathlib.Path.replace",
        "<str>.lower"
    ],
    "posixpath.realpath": [
        "os._fspath",
        "posixpath._joinrealpath",
        "posixpath.abspath"
    ],
    "posixpath._joinrealpath": [
        "posixpath.islink",
        "<builtin>.isinstance",
        "posixpath.join",
        "posixpath._joinrealpath",
        "posixpath.split",
        "posixpath.isabs"
    ],
    "posixpath.split": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.rfind",
        "<builtin>.len"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "ntpath.realpath": [],
    "<builtin>.OSError": [],
    "linecache.checkcache": [
        "<map>.keys",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "<map>.keys": [],
    "<list>.sort": [],
    "inspect.getblock": [
        "<builtin>.iter",
        "tokenize.generate_tokens",
        "inspect.BlockFinder.__init__",
        "inspect.BlockFinder.tokeneater"
    ],
    "inspect.BlockFinder.__init__": [],
    "tokenize.generate_tokens": [
        "tokenize._tokenize"
    ],
    "inspect.BlockFinder.tokeneater": [],
    "unittest": [
        "unittest.suite",
        "unittest.case",
        "unittest.loader",
        "<list>.extend",
        "unittest.main",
        "unittest.signals",
        "unittest.result",
        "unittest.runner",
        "unittest.async_case"
    ],
    "unittest.result": [
        "functools",
        "traceback",
        "unittest.result.TestResult",
        "io",
        "unittest.util"
    ],
    "unittest.util": [
        "posixpath",
        "collections",
        "collections.namedtuple"
    ],
    "unittest.result.TestResult": [
        "unittest.result.failfast"
    ],
    "unittest.result.failfast": [
        "functools.wraps"
    ],
    "unittest.async_case": [
        "inspect",
        "asyncio",
        "unittest.async_case.IsolatedAsyncioTestCase",
        "unittest.case"
    ],
    "asyncio": [
        "asyncio.tasks",
        "asyncio.runners",
        "asyncio.base_events",
        "asyncio.subprocess",
        "asyncio.queues",
        "asyncio.futures",
        "asyncio.windows_events",
        "asyncio.transports",
        "asyncio.locks",
        "asyncio.events",
        "asyncio.coroutines",
        "asyncio.protocols",
        "asyncio.exceptions",
        "asyncio.streams"
    ],
    "asyncio.base_events": [
        "asyncio.staggered",
        "asyncio.log",
        "<builtin>.object",
        "asyncio.futures",
        "asyncio.base_events.Server",
        "asyncio.base_events.BaseEventLoop",
        "subprocess",
        "asyncio.events",
        "weakref",
        "asyncio.protocols",
        "asyncio.exceptions",
        "asyncio.tasks",
        "threading",
        "warnings",
        "functools",
        "traceback",
        "asyncio.transports",
        "asyncio.base_events._SendfileFallbackProtocol",
        "asyncio.constants",
        "concurrent.futures",
        "os",
        "asyncio.coroutines",
        "collections.abc",
        "stat",
        "ssl",
        "collections",
        "asyncio.trsock",
        "heapq",
        "socket",
        "asyncio.sslproto",
        "<builtin>.hasattr"
    ],
    "concurrent.futures": [
        "concurrent.futures._base"
    ],
    "concurrent.futures._base": [
        "concurrent.futures._base._Waiter",
        "concurrent.futures._base._AcquireFutures",
        "threading",
        "concurrent.futures._base.Executor",
        "concurrent.futures._base._AllCompletedWaiter",
        "collections",
        "collections.namedtuple",
        "logging",
        "concurrent.futures._base.CancelledError",
        "concurrent.futures._base.TimeoutError",
        "concurrent.futures._base._FirstCompletedWaiter",
        "concurrent.futures._base.BrokenExecutor",
        "concurrent.futures._base._AsCompletedWaiter",
        "concurrent.futures._base.Future",
        "concurrent.futures._base.Error",
        "logging.getLogger",
        "concurrent.futures._base.InvalidStateError"
    ],
    "logging": [
        "logging.LogRecord",
        "logging.Filter",
        "string",
        "re",
        "logging.Logger",
        "logging.StringTemplateStyle",
        "weakref",
        "logging.RootLogger.__init__",
        "threading",
        "logging._StderrHandler",
        "warnings",
        "logging.Handler",
        "logging._StderrHandler.__init__",
        "traceback",
        "logging.NullHandler",
        "logging.BufferingFormatter",
        "_weakrefset.WeakSet.__init__",
        "logging.PercentStyle",
        "logging.FileHandler",
        "posixpath.normcase",
        "threading.RLock",
        "logging.StreamHandler",
        "logging.Manager",
        "logging.LoggerAdapter",
        "os",
        "logging.Formatter",
        "logging.Formatter.__init__",
        "io",
        "logging.RootLogger",
        "logging.Filterer",
        "logging.PlaceHolder",
        "collections.abc",
        "logging.Manager.__init__",
        "logging.StrFormatStyle",
        "ntpath.normcase",
        "weakref.WeakValueDictionary.__init__",
        "<builtin>.hasattr"
    ],
    "string": [
        "collections",
        "string.Template",
        "string.Formatter",
        "re",
        "string._TemplateMetaclass"
    ],
    "string._TemplateMetaclass": [],
    "string.Template": [],
    "string.Formatter": [],
    "logging.LogRecord": [],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StringTemplateStyle": [],
    "logging.Formatter": [],
    "logging.Formatter.__init__": [
        "<map>.keys",
        "<builtin>.ValueError"
    ],
    "logging.BufferingFormatter": [],
    "logging.Filter": [],
    "logging.Filterer": [],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "weakref.WeakValueDictionary.update": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary._commit_removals": [
        "<list>.pop",
        "_weakref._remove_dead_weakref"
    ],
    "_weakref._remove_dead_weakref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.StreamHandler": [],
    "logging.FileHandler": [],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.Filterer.__init__",
        "logging._addHandlerRef",
        "logging.Handler.createLock",
        "logging._checkLevel"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "<list>.append"
    ],
    "logging._acquireLock": [
        "threading._RLock.acquire"
    ],
    "threading._RLock.acquire": [
        "_thread.get_ident"
    ],
    "logging.Handler.createLock": [
        "logging._register_at_fork_reinit_lock",
        "threading.RLock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "_weakrefset.WeakSet.add",
        "logging._acquireLock"
    ],
    "logging.PlaceHolder": [],
    "logging.Manager": [],
    "logging.Logger": [],
    "logging.RootLogger": [],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Manager.__init__": [],
    "logging.NullHandler": [],
    "logging.getLogger": [
        "logging.Manager.getLogger"
    ],
    "concurrent.futures._base.Error": [],
    "concurrent.futures._base.CancelledError": [],
    "concurrent.futures._base.TimeoutError": [],
    "concurrent.futures._base.InvalidStateError": [],
    "concurrent.futures._base._Waiter": [],
    "concurrent.futures._base._AsCompletedWaiter": [],
    "concurrent.futures._base._FirstCompletedWaiter": [],
    "concurrent.futures._base._AllCompletedWaiter": [],
    "concurrent.futures._base._AcquireFutures": [],
    "concurrent.futures._base.Future": [],
    "concurrent.futures._base.Executor": [],
    "concurrent.futures._base.BrokenExecutor": [],
    "socket": [
        "<list>.append",
        "socket.socket",
        "<list>.extend",
        "socket._GiveupOnSendfile",
        "<builtin>.object",
        "_socket",
        "socket.SocketIO",
        "enum",
        "os",
        "<builtin>.getattr",
        "selectors",
        "<builtin>.hasattr",
        "io"
    ],
    "_socket": [],
    "selectors": [
        "selectors.PollSelector",
        "collections.abc",
        "selectors._BaseSelectorImpl",
        "<builtin>.globals",
        "abc",
        "selectors.KqueueSelector",
        "collections",
        "collections.namedtuple",
        "selectors._SelectorMapping",
        "selectors.BaseSelector",
        "selectors.EpollSelector",
        "math",
        "selectors.DevpollSelector",
        "selectors._PollLikeSelector",
        "select",
        "<builtin>.hasattr",
        "selectors.SelectSelector"
    ],
    "math": [],
    "select": [],
    "selectors._SelectorMapping": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors.SelectSelector": [],
    "selectors._PollLikeSelector": [],
    "selectors.PollSelector": [],
    "selectors.EpollSelector": [],
    "selectors.DevpollSelector": [],
    "selectors.KqueueSelector": [],
    "socket._GiveupOnSendfile": [],
    "socket.socket": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "subprocess": [
        "subprocess.TimeoutExpired",
        "subprocess.SubprocessError",
        "subprocess.CalledProcessError",
        "subprocess.Popen",
        "threading",
        "warnings",
        "subprocess._use_posix_spawn",
        "signal",
        "select",
        "subprocess.CompletedProcess",
        "os",
        "selectors",
        "_posixsubprocess",
        "io",
        "subprocess.STARTUPINFO",
        "contextlib",
        "subprocess.Handle",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "signal": [
        "<builtin>.globals",
        "functools.wraps",
        "enum",
        "functools"
    ],
    "_posixsubprocess": [],
    "subprocess.SubprocessError": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.STARTUPINFO": [],
    "subprocess.Handle": [],
    "subprocess.CompletedProcess": [],
    "subprocess._use_posix_spawn": [
        "<builtin>.tuple",
        "<builtin>.hasattr",
        "<builtin>.map",
        "<builtin>.len"
    ],
    "subprocess.Popen": [
        "<builtin>.property"
    ],
    "ssl": [
        "ssl.TLSVersion",
        "_ssl",
        "ssl._TLSMessageType",
        "ssl._ASN1Object",
        "ssl._TLSAlertType",
        "warnings",
        "enum",
        "ssl.SSLSocket",
        "collections.namedtuple",
        "ssl._TLSContentType",
        "base64",
        "os",
        "ssl.SSLContext",
        "ssl.Purpose",
        "collections",
        "ssl.SSLObject",
        "socket",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "_ssl": [],
    "ssl.TLSVersion": [],
    "ssl._TLSContentType": [],
    "ssl._TLSAlertType": [],
    "ssl._TLSMessageType": [],
    "base64": [
        "binascii",
        "re",
        "struct",
        "base64.main"
    ],
    "binascii": [],
    "base64.main": [
        "base64.decode",
        "getopt.getopt",
        "base64.test",
        "getopt",
        "base64.encode",
        "<builtin>.open",
        "<builtin>.print"
    ],
    "getopt": [
        "getopt.getopt",
        "getopt.GetoptError",
        "os",
        "gettext",
        "<builtin>.print"
    ],
    "getopt.GetoptError": [],
    "getopt.getopt": [
        "getopt.do_shorts",
        "<builtin>.list",
        "<builtin>.type",
        "getopt.do_longs"
    ],
    "getopt.do_shorts": [
        "getopt.GetoptError.__init__",
        "getopt._",
        "getopt.short_has_arg",
        "<list>.append"
    ],
    "getopt.short_has_arg": [
        "getopt.GetoptError.__init__",
        "getopt._",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "getopt._": [],
    "getopt.GetoptError.__init__": [],
    "getopt.do_longs": [
        "getopt.GetoptError.__init__",
        "getopt._",
        "getopt.long_has_args",
        "<list>.index",
        "<list>.append"
    ],
    "<list>.index": [],
    "getopt.long_has_args": [
        "getopt.GetoptError.__init__",
        "getopt._",
        "<builtin>.len"
    ],
    "base64.test": [
        "base64.decodebytes",
        "<builtin>.repr",
        "base64.encodebytes",
        "<builtin>.print"
    ],
    "base64.encodebytes": [
        "<list>.append",
        "<builtin>.range",
        "base64._input_type_check",
        "<builtin>.len"
    ],
    "base64._input_type_check": [
        "<builtin>.TypeError",
        "<builtin>.memoryview"
    ],
    "base64.decodebytes": [
        "base64._input_type_check"
    ],
    "base64.encode": [
        "<builtin>.len"
    ],
    "base64.decode": [],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.Purpose": [],
    "ssl.SSLContext": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "ssl.SSLObject": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ssl.SSLSocket": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "ssl._sslcopydoc"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "asyncio.constants": [
        "enum",
        "asyncio.constants._SendfileMode"
    ],
    "asyncio.constants._SendfileMode": [],
    "asyncio.coroutines": [
        "asyncio.constants",
        "asyncio.coroutines.CoroWrapper",
        "collections.abc",
        "asyncio.format_helpers",
        "warnings",
        "<builtin>.set",
        "functools",
        "asyncio.log",
        "types",
        "<builtin>.object",
        "inspect",
        "traceback",
        "os",
        "asyncio.coroutines._is_debug_mode",
        "asyncio.base_futures"
    ],
    "asyncio.base_futures": [
        "reprlib",
        "asyncio.format_helpers"
    ],
    "asyncio.format_helpers": [
        "reprlib",
        "asyncio.constants",
        "functools",
        "inspect",
        "traceback"
    ],
    "asyncio.log": [
        "logging.getLogger",
        "logging"
    ],
    "asyncio.coroutines._is_debug_mode": [
        "<builtin>.bool"
    ],
    "asyncio.coroutines.CoroWrapper": [
        "<builtin>.property"
    ],
    "asyncio.events": [
        "asyncio.events.BaseDefaultEventLoopPolicy",
        "contextvars",
        "_asyncio",
        "threading",
        "asyncio.format_helpers",
        "asyncio.events._RunningLoop",
        "asyncio.events.TimerHandle",
        "_thread.allocate_lock",
        "socket",
        "subprocess",
        "os",
        "asyncio.events.AbstractServer",
        "asyncio.events.AbstractEventLoop",
        "asyncio.exceptions",
        "asyncio.events.AbstractEventLoopPolicy",
        "asyncio.events.Handle"
    ],
    "contextvars": [
        "_contextvars"
    ],
    "_contextvars": [],
    "asyncio.exceptions": [
        "asyncio.exceptions.IncompleteReadError",
        "asyncio.exceptions.InvalidStateError",
        "asyncio.exceptions.LimitOverrunError",
        "asyncio.exceptions.TimeoutError",
        "asyncio.exceptions.CancelledError",
        "asyncio.exceptions.SendfileNotAvailableError"
    ],
    "asyncio.exceptions.CancelledError": [],
    "asyncio.exceptions.TimeoutError": [],
    "asyncio.exceptions.InvalidStateError": [],
    "asyncio.exceptions.SendfileNotAvailableError": [],
    "asyncio.exceptions.IncompleteReadError": [],
    "asyncio.exceptions.LimitOverrunError": [],
    "asyncio.events.Handle": [],
    "asyncio.events.TimerHandle": [],
    "asyncio.events.AbstractServer": [],
    "asyncio.events.AbstractEventLoop": [],
    "asyncio.events.AbstractEventLoopPolicy": [],
    "asyncio.events.BaseDefaultEventLoopPolicy": [
        "asyncio.events.BaseDefaultEventLoopPolicy._Local"
    ],
    "asyncio.events.BaseDefaultEventLoopPolicy._Local": [],
    "asyncio.events._RunningLoop": [],
    "_asyncio": [],
    "asyncio.futures": [
        "contextvars",
        "_asyncio",
        "asyncio.format_helpers",
        "logging",
        "concurrent.futures",
        "asyncio.futures.Future",
        "asyncio.events",
        "asyncio.base_futures",
        "asyncio.exceptions"
    ],
    "asyncio.futures.Future": [
        "<builtin>.property"
    ],
    "asyncio.protocols": [
        "asyncio.protocols.BufferedProtocol",
        "asyncio.protocols.BaseProtocol",
        "asyncio.protocols.SubprocessProtocol",
        "asyncio.protocols.DatagramProtocol",
        "asyncio.protocols.Protocol"
    ],
    "asyncio.protocols.BaseProtocol": [],
    "asyncio.protocols.Protocol": [],
    "asyncio.protocols.BufferedProtocol": [],
    "asyncio.protocols.DatagramProtocol": [],
    "asyncio.protocols.SubprocessProtocol": [],
    "asyncio.sslproto": [
        "asyncio.constants",
        "asyncio.base_events",
        "warnings",
        "ssl",
        "asyncio.sslproto._SSLPipe",
        "collections",
        "asyncio.log",
        "asyncio.sslproto._SSLProtocolTransport",
        "asyncio.transports",
        "asyncio.protocols",
        "asyncio.sslproto.SSLProtocol"
    ],
    "asyncio.transports": [
        "asyncio.transports.ReadTransport",
        "asyncio.transports.Transport",
        "asyncio.transports._FlowControlMixin",
        "asyncio.transports.DatagramTransport",
        "asyncio.transports.SubprocessTransport",
        "asyncio.transports.WriteTransport",
        "asyncio.transports.BaseTransport"
    ],
    "asyncio.transports.BaseTransport": [],
    "asyncio.transports.ReadTransport": [],
    "asyncio.transports.WriteTransport": [],
    "asyncio.transports.Transport": [],
    "asyncio.transports.DatagramTransport": [],
    "asyncio.transports.SubprocessTransport": [],
    "asyncio.transports._FlowControlMixin": [],
    "asyncio.sslproto._SSLPipe": [
        "<builtin>.property"
    ],
    "asyncio.sslproto._SSLProtocolTransport": [
        "<builtin>.property"
    ],
    "asyncio.sslproto.SSLProtocol": [],
    "asyncio.staggered": [
        "asyncio.tasks",
        "typing",
        "asyncio.locks",
        "asyncio.events",
        "contextlib",
        "asyncio.exceptions"
    ],
    "asyncio.locks": [
        "asyncio.locks.BoundedSemaphore",
        "asyncio.locks.Condition",
        "asyncio.locks._ContextManagerMixin",
        "warnings",
        "collections",
        "types",
        "asyncio.futures",
        "asyncio.locks.Lock",
        "asyncio.locks._ContextManager",
        "asyncio.events",
        "asyncio.locks.Event",
        "asyncio.coroutines",
        "asyncio.exceptions",
        "asyncio.locks.Semaphore"
    ],
    "asyncio.locks._ContextManager": [],
    "asyncio.locks._ContextManagerMixin": [
        "types.coroutine"
    ],
    "types.coroutine": [
        "collections.abc",
        "<builtin>.TypeError",
        "functools",
        "functools.wraps",
        "<builtin>.callable",
        "<builtin>.getattr"
    ],
    "asyncio.locks.Lock": [],
    "asyncio.locks.Event": [],
    "asyncio.locks.Condition": [],
    "asyncio.locks.Semaphore": [],
    "asyncio.locks.BoundedSemaphore": [],
    "asyncio.tasks": [
        "_weakrefset.WeakSet.__init__",
        "contextvars",
        "_asyncio",
        "asyncio.base_tasks",
        "asyncio.tasks.Task",
        "warnings",
        "asyncio.tasks._GatheringFuture",
        "functools",
        "types",
        "concurrent.futures",
        "inspect",
        "asyncio.futures",
        "types.coroutine",
        "asyncio.events",
        "weakref",
        "asyncio.coroutines",
        "asyncio.exceptions"
    ],
    "asyncio.base_tasks": [
        "traceback",
        "asyncio.coroutines",
        "asyncio.base_futures",
        "linecache"
    ],
    "asyncio.tasks.Task": [
        "<builtin>.classmethod"
    ],
    "asyncio.tasks._GatheringFuture": [],
    "asyncio.trsock": [
        "warnings",
        "asyncio.trsock.TransportSocket",
        "socket"
    ],
    "asyncio.trsock.TransportSocket": [
        "<builtin>.property"
    ],
    "asyncio.base_events._SendfileFallbackProtocol": [],
    "asyncio.base_events.Server": [
        "<builtin>.property"
    ],
    "asyncio.base_events.BaseEventLoop": [],
    "asyncio.runners": [
        "asyncio.tasks",
        "asyncio.coroutines",
        "asyncio.events"
    ],
    "asyncio.queues": [
        "asyncio.queues.PriorityQueue",
        "warnings",
        "collections",
        "heapq",
        "asyncio.queues.LifoQueue",
        "asyncio.queues.Queue",
        "asyncio.locks",
        "asyncio.queues.QueueFull",
        "asyncio.events",
        "asyncio.queues.QueueEmpty"
    ],
    "asyncio.queues.QueueEmpty": [],
    "asyncio.queues.QueueFull": [],
    "asyncio.queues.Queue": [
        "<builtin>.property"
    ],
    "asyncio.queues.PriorityQueue": [],
    "asyncio.queues.LifoQueue": [],
    "asyncio.streams": [
        "asyncio.tasks",
        "asyncio.streams.StreamReaderProtocol",
        "asyncio.streams.FlowControlMixin",
        "asyncio.format_helpers",
        "warnings",
        "asyncio.log",
        "asyncio.streams.StreamWriter",
        "asyncio.streams.StreamReader",
        "socket",
        "asyncio.events",
        "weakref",
        "asyncio.coroutines",
        "asyncio.protocols",
        "<builtin>.hasattr",
        "asyncio.exceptions"
    ],
    "asyncio.streams.FlowControlMixin": [],
    "asyncio.streams.StreamReaderProtocol": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamWriter": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamReader": [],
    "asyncio.subprocess": [
        "asyncio.tasks",
        "warnings",
        "asyncio.subprocess.Process",
        "asyncio.log",
        "subprocess",
        "asyncio.events",
        "asyncio.protocols",
        "asyncio.subprocess.SubprocessStreamProtocol",
        "asyncio.streams"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol": [],
    "asyncio.subprocess.Process": [
        "<builtin>.property"
    ],
    "asyncio.windows_events": [
        "asyncio.windows_events._WaitCancelFuture",
        "asyncio.log",
        "asyncio.futures",
        "asyncio.windows_events.IocpProactor",
        "asyncio.events",
        "weakref",
        "asyncio.exceptions",
        "asyncio.tasks",
        "asyncio.windows_events._WindowsSelectorEventLoop",
        "asyncio.windows_events.WindowsSelectorEventLoopPolicy",
        "math",
        "asyncio.windows_events._OverlappedFuture",
        "asyncio.proactor_events",
        "asyncio.windows_utils",
        "asyncio.windows_events.ProactorEventLoop",
        "asyncio.windows_events._WaitHandleFuture",
        "asyncio.windows_events.PipeServer",
        "asyncio.windows_events._BaseWaitHandleFuture",
        "struct",
        "asyncio.selector_events",
        "asyncio.windows_events.WindowsProactorEventLoopPolicy",
        "socket",
        "asyncio.windows_events._WindowsSubprocessTransport",
        "asyncio.base_subprocess"
    ],
    "asyncio.base_subprocess": [
        "asyncio.base_subprocess.BaseSubprocessTransport",
        "warnings",
        "collections",
        "asyncio.log",
        "asyncio.base_subprocess.WriteSubprocessPipeProto",
        "asyncio.base_subprocess.ReadSubprocessPipeProto",
        "asyncio.transports",
        "subprocess",
        "asyncio.protocols"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport": [],
    "asyncio.base_subprocess.WriteSubprocessPipeProto": [],
    "asyncio.base_subprocess.ReadSubprocessPipeProto": [],
    "asyncio.proactor_events": [
        "asyncio.log",
        "asyncio.futures",
        "asyncio.proactor_events._ProactorReadPipeTransport",
        "asyncio.protocols",
        "asyncio.exceptions",
        "threading",
        "warnings",
        "asyncio.proactor_events._ProactorSocketTransport",
        "signal",
        "asyncio.transports",
        "asyncio.proactor_events._ProactorDuplexPipeTransport",
        "asyncio.proactor_events._ProactorBasePipeTransport",
        "asyncio.constants",
        "os",
        "asyncio.proactor_events._ProactorDatagramTransport",
        "io",
        "asyncio.base_events",
        "asyncio.proactor_events._ProactorWritePipeTransport",
        "collections",
        "asyncio.trsock",
        "asyncio.proactor_events.BaseProactorEventLoop",
        "socket",
        "asyncio.sslproto",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport": [],
    "asyncio.proactor_events._ProactorReadPipeTransport": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport": [],
    "asyncio.proactor_events._ProactorWritePipeTransport": [],
    "asyncio.proactor_events._ProactorDatagramTransport": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport": [],
    "asyncio.proactor_events._ProactorSocketTransport": [],
    "asyncio.proactor_events.BaseProactorEventLoop": [],
    "asyncio.selector_events": [
        "asyncio.selector_events.BaseSelectorEventLoop",
        "asyncio.log",
        "asyncio.futures",
        "asyncio.events",
        "weakref",
        "asyncio.protocols",
        "asyncio.selector_events._SelectorDatagramTransport",
        "asyncio.selector_events._SelectorTransport",
        "warnings",
        "functools",
        "asyncio.transports",
        "asyncio.constants",
        "asyncio.selector_events._SelectorSocketTransport",
        "selectors",
        "asyncio.base_events",
        "ssl",
        "collections",
        "asyncio.trsock",
        "socket",
        "asyncio.sslproto"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop": [],
    "asyncio.selector_events._SelectorTransport": [],
    "asyncio.selector_events._SelectorSocketTransport": [],
    "asyncio.selector_events._SelectorDatagramTransport": [],
    "asyncio.windows_utils": [
        "tempfile",
        "warnings",
        "<builtin>.ImportError",
        "asyncio.windows_utils.PipeHandle",
        "subprocess",
        "os",
        "asyncio.windows_utils.Popen"
    ],
    "tempfile": [
        "shutil",
        "_thread.allocate_lock",
        "warnings",
        "random",
        "functools",
        "tempfile._RandomNameSequence",
        "tempfile.TemporaryDirectory",
        "tempfile.SpooledTemporaryFile",
        "os",
        "tempfile._TemporaryFileCloser",
        "tempfile._TemporaryFileWrapper",
        "weakref",
        "<builtin>.hasattr",
        "io"
    ],
    "random": [
        "random.Random",
        "random.Random.__init__",
        "collections.abc",
        "warnings",
        "_sha512",
        "_random",
        "random._test",
        "os",
        "math",
        "hashlib",
        "random.SystemRandom",
        "<builtin>.hasattr",
        "bisect"
    ],
    "bisect": [
        "_bisect"
    ],
    "_bisect": [],
    "_sha512": [],
    "hashlib": [
        "_hashlib",
        "<builtin>.set",
        "<builtin>.bytes",
        "hashlib.__get_builtin_constructor",
        "hashlib.__get_openssl_constructor",
        "<builtin>.globals",
        "logging.exception",
        "logging",
        "<builtin>.range"
    ],
    "_hashlib": [],
    "hashlib.__get_builtin_constructor": [
        "_md5",
        "_sha256",
        "_sha512",
        "_sha1",
        "<map>.get",
        "_sha3",
        "<builtin>.ValueError",
        "_blake2"
    ],
    "_sha3": [],
    "_blake2": [],
    "_sha256": [],
    "_md5": [],
    "_sha1": [],
    "hashlib.__get_openssl_constructor": [
        "hashlib.__get_builtin_constructor",
        "<builtin>.getattr"
    ],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.basicConfig",
        "logging.Logger.error",
        "<builtin>.len"
    ],
    "logging.basicConfig": [
        "logging.Handler.close",
        "logging.Logger.removeHandler",
        "logging.FileHandler.close",
        "logging.Handler.setFormatter",
        "<map>.keys",
        "logging.StreamHandler.__init__",
        "logging._acquireLock",
        "logging.FileHandler.__init__",
        "<builtin>.len",
        "logging.Logger.addHandler",
        "logging.Logger.setLevel",
        "logging.Formatter.__init__",
        "<builtin>.ValueError"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "<list>.remove"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "logging.Handler.__init__",
        "os._fspath",
        "logging.FileHandler._open",
        "logging.StreamHandler.__init__",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "logging.Handler.setFormatter": [],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "<list>.append"
    ],
    "logging.Logger.setLevel": [
        "logging.Manager._clear_cache",
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging.Logger.getEffectiveLevel",
        "logging._acquireLock"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "logging.Logger.findCaller",
        "<builtin>.isinstance",
        "logging.Logger.makeRecord",
        "<builtin>.type",
        "logging.Logger.handle"
    ],
    "logging.Logger.findCaller": [
        "posixpath.normcase",
        "ntpath.normcase",
        "logging.currentframe",
        "traceback.print_stack",
        "<builtin>.hasattr",
        "_io.StringIO"
    ],
    "logging.currentframe": [],
    "traceback.print_stack": [
        "traceback.print_list",
        "traceback.extract_stack"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "<builtin>.set",
        "linecache.checkcache",
        "<builtin>.getattr",
        "linecache.lazycache",
        "traceback.FrameSummary.__init__",
        "_collections.deque"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "traceback.print_list": [
        "<builtin>.print",
        "traceback.StackSummary.from_list",
        "traceback.StackSummary.format"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted",
        "<list>.append"
    ],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.LogRecord.__init__": [
        "logging.getLevelName",
        "posixpath.splitext",
        "<builtin>.isinstance",
        "_thread.get_ident",
        "ntpath.splitext",
        "<builtin>.int",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.len",
        "threading.current_thread",
        "<builtin>.hasattr"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Logger.callHandlers",
        "logging.Filterer.filter"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "codecs.StreamRecoder.write",
        "logging.Handler.handle",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "logging.Handler.handle": [
        "logging.Handler.acquire",
        "logging.Handler.emit",
        "logging.FileHandler.emit",
        "logging.StreamHandler.emit",
        "unittest.case._CapturingHandler.emit",
        "logging.Filterer.filter"
    ],
    "logging.Handler.acquire": [
        "threading._RLock.acquire"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "logging.FileHandler.emit": [
        "logging.FileHandler._open",
        "logging.StreamHandler.emit"
    ],
    "logging.StreamHandler.emit": [
        "codecs.StreamRecoder.write",
        "logging.Handler.format",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "logging.StreamHandler.flush",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "logging.Handler.handleError"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Formatter.format": [
        "logging.LogRecord.getMessage",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatException",
        "logging.Formatter.formatMessage",
        "logging.Formatter.formatStack",
        "logging.Formatter.formatTime"
    ],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.Formatter.usesTime": [],
    "logging.Formatter.formatTime": [],
    "logging.Formatter.formatMessage": [],
    "logging.Formatter.formatException": [
        "_io.StringIO",
        "traceback.print_exception"
    ],
    "traceback.print_exception": [
        "traceback.TracebackException.format",
        "<builtin>.print",
        "<builtin>.type",
        "traceback.TracebackException.__init__"
    ],
    "traceback.TracebackException.__init__": [
        "traceback._some_str",
        "traceback.TracebackException._load_lines",
        "<builtin>.set",
        "<builtin>.str",
        "traceback.TracebackException.__init__",
        "<builtin>.issubclass",
        "<builtin>.type",
        "traceback.walk_tb",
        "traceback.StackSummary.extract",
        "<builtin>.id"
    ],
    "traceback.walk_tb": [],
    "traceback._some_str": [
        "<builtin>.type",
        "<builtin>.str"
    ],
    "traceback.TracebackException._load_lines": [
        "traceback.TracebackException._load_lines"
    ],
    "traceback.TracebackException.format": [
        "traceback.TracebackException.format",
        "traceback.TracebackException.format_exception_only",
        "traceback.StackSummary.format"
    ],
    "traceback.TracebackException.format_exception_only": [
        "<builtin>.str",
        "<builtin>.issubclass",
        "<builtin>.len",
        "traceback._format_final_exc_line",
        "<builtin>.min"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "logging.Formatter.formatStack": [],
    "logging.StreamHandler.flush": [
        "logging.Handler.acquire",
        "<builtin>.hasattr",
        "rich.file_proxy.FileProxy.flush",
        "logging.StreamHandler.flush"
    ],
    "logging.Handler.handleError": [
        "traceback.print_exception",
        "codecs.StreamRecoder.write",
        "posixpath.dirname",
        "traceback.print_stack",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "ntpath.dirname"
    ],
    "posixpath.dirname": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.rfind",
        "<builtin>.len"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "_random": [],
    "random.Random": [],
    "random.SystemRandom": [],
    "random.Random.__init__": [
        "random.SystemRandom.seed",
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.super",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.map"
    ],
    "random._test": [
        "random._test_generator"
    ],
    "random._test_generator": [
        "random.Random.gammavariate",
        "random.Random.gauss",
        "random.Random.normalvariate",
        "random.Random.triangular",
        "<builtin>.round",
        "random.Random.betavariate",
        "<builtin>.min",
        "random.Random.lognormvariate",
        "random.Random.vonmisesvariate",
        "<builtin>.print",
        "<builtin>.max",
        "<builtin>.range"
    ],
    "<builtin>.round": [],
    "random.Random.normalvariate": [
        "random.SystemRandom.random"
    ],
    "random.Random.lognormvariate": [
        "random.Random.normalvariate"
    ],
    "random.Random.vonmisesvariate": [
        "random.SystemRandom.random"
    ],
    "random.Random.gammavariate": [
        "random.SystemRandom.random",
        "<builtin>.ValueError"
    ],
    "random.Random.gauss": [
        "random.SystemRandom.random"
    ],
    "random.Random.betavariate": [
        "random.Random.gammavariate"
    ],
    "random.Random.triangular": [
        "random.SystemRandom.random"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile._TemporaryFileCloser": [],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "asyncio.windows_utils.PipeHandle": [
        "<builtin>.property"
    ],
    "asyncio.windows_utils.Popen": [],
    "asyncio.windows_events._OverlappedFuture": [],
    "asyncio.windows_events._BaseWaitHandleFuture": [],
    "asyncio.windows_events._WaitCancelFuture": [],
    "asyncio.windows_events._WaitHandleFuture": [],
    "asyncio.windows_events.PipeServer": [],
    "asyncio.windows_events._WindowsSelectorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop": [],
    "asyncio.windows_events.IocpProactor": [],
    "asyncio.windows_events._WindowsSubprocessTransport": [],
    "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [],
    "asyncio.windows_events.WindowsProactorEventLoopPolicy": [],
    "unittest.case": [
        "unittest.case._ShouldStop",
        "unittest.case.FunctionTestCase",
        "unittest.case._Outcome",
        "types",
        "<builtin>.object",
        "difflib",
        "re",
        "pprint",
        "unittest.case._AssertRaisesBaseContext",
        "unittest.case._UnexpectedSuccess",
        "unittest.util",
        "unittest.case.SkipTest",
        "warnings",
        "unittest.case.TestCase",
        "unittest.case._AssertWarnsContext",
        "functools",
        "unittest.case._BaseTestCaseContext",
        "unittest.case._OrderedChainMap",
        "traceback",
        "unittest.case._CapturingHandler",
        "collections.namedtuple",
        "unittest.case._AssertLogsContext",
        "logging",
        "unittest.result",
        "unittest.case._SubTest",
        "collections",
        "contextlib",
        "unittest.case._AssertRaisesContext"
    ],
    "unittest.case.SkipTest": [],
    "unittest.case._ShouldStop": [],
    "unittest.case._UnexpectedSuccess": [],
    "unittest.case._Outcome": [
        "contextlib.contextmanager"
    ],
    "unittest.case._BaseTestCaseContext": [],
    "unittest.case._AssertRaisesBaseContext": [],
    "unittest.case._AssertRaisesContext": [],
    "unittest.case._AssertWarnsContext": [],
    "unittest.case._CapturingHandler": [],
    "unittest.case._AssertLogsContext": [],
    "unittest.case._OrderedChainMap": [],
    "unittest.case.TestCase": [
        "<builtin>.classmethod",
        "unittest.case.TestCase._deprecate",
        "contextlib.contextmanager"
    ],
    "unittest.case.TestCase._deprecate": [],
    "unittest.case.FunctionTestCase": [],
    "unittest.case._SubTest": [],
    "unittest.async_case.IsolatedAsyncioTestCase": [],
    "unittest.suite": [
        "unittest.case",
        "unittest.suite.BaseTestSuite",
        "unittest.suite._DebugResult",
        "unittest.suite._ErrorHolder",
        "unittest.suite.TestSuite",
        "unittest.util"
    ],
    "unittest.suite.BaseTestSuite": [],
    "unittest.suite.TestSuite": [],
    "unittest.suite._ErrorHolder": [],
    "unittest.suite._DebugResult": [],
    "unittest.loader": [
        "unittest.suite",
        "unittest.case",
        "warnings",
        "unittest.loader._FailedTest",
        "re.compile",
        "unittest.loader.TestLoader",
        "functools",
        "unittest.loader.TestLoader.__init__",
        "types",
        "traceback",
        "fnmatch",
        "os",
        "re",
        "unittest.util"
    ],
    "unittest.loader._FailedTest": [],
    "unittest.loader.TestLoader": [
        "<builtin>.staticmethod"
    ],
    "unittest.loader.TestLoader.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "unittest.main": [
        "argparse",
        "unittest.loader",
        "unittest.signals",
        "os",
        "unittest.runner",
        "unittest.main.TestProgram"
    ],
    "unittest.runner": [
        "unittest.runner._WritelnDecorator",
        "warnings",
        "unittest.signals",
        "unittest.runner.TextTestRunner",
        "unittest.result",
        "unittest.runner.TextTestResult"
    ],
    "unittest.signals": [
        "functools",
        "unittest.signals._InterruptHandler",
        "signal",
        "weakref.WeakKeyDictionary.__init__",
        "weakref"
    ],
    "unittest.signals._InterruptHandler": [],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.update": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.len",
        "_weakref.ref",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "unittest.runner._WritelnDecorator": [],
    "unittest.runner.TextTestResult": [],
    "unittest.runner.TextTestRunner": [],
    "unittest.main.TestProgram": [],
    "doctest.register_optionflag": [
        "<map>.setdefault"
    ],
    "doctest._SpoofOut": [],
    "doctest._OutputRedirectingPdb": [],
    "doctest.Example": [],
    "doctest.DocTest": [],
    "doctest.DocTestParser": [
        "re.compile"
    ],
    "doctest.DocTestFinder": [],
    "doctest.DocTestRunner": [
        "re.compile"
    ],
    "doctest.OutputChecker": [],
    "doctest.DocTestFailure": [],
    "doctest.UnexpectedException": [],
    "doctest.DebugRunner": [],
    "doctest.DocTestCase": [],
    "doctest.SkipDocTestCase": [],
    "doctest._DocTestSuite": [],
    "doctest.DocFileCase": [],
    "doctest._TestClass": [],
    "doctest._test": [
        "argparse.ArgumentParser.parse_args",
        "argparse",
        "argparse.ArgumentParser.__init__",
        "doctest.testmod",
        "<map>.keys",
        "argparse._ActionsContainer.add_argument",
        "posixpath.split",
        "ntpath.split",
        "<builtin>.__import__",
        "doctest.testfile"
    ],
    "doctest.testfile": [
        "<map>.copy",
        "doctest.DocTestRunner.merge",
        "doctest.DocTestParser.get_doctest",
        "<map>.update",
        "ntpath.basename",
        "doctest.DocTestRunner.__init__",
        "posixpath.basename",
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.run",
        "doctest.DocTestRunner.summarize",
        "<builtin>.ValueError",
        "doctest._load_testfile"
    ],
    "doctest._load_testfile": [
        "doctest._normalize_module",
        "doctest._newline_convert",
        "<builtin>.open",
        "<builtin>.getattr",
        "doctest._module_relative_path",
        "<builtin>.hasattr"
    ],
    "doctest._normalize_module": [
        "<builtin>.locals",
        "<builtin>.isinstance",
        "<builtin>.globals",
        "<builtin>.TypeError",
        "inspect.ismodule",
        "<builtin>.__import__"
    ],
    "<builtin>.locals": [],
    "doctest._module_relative_path": [
        "posixpath.join",
        "<builtin>.TypeError",
        "genericpath.exists",
        "inspect.ismodule",
        "posixpath.split",
        "ntpath.split",
        "<str>.startswith",
        "ntpath.join",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "doctest._newline_convert": [],
    "doctest.DocTestRunner.__init__": [],
    "doctest.DocTestParser.get_doctest": [
        "doctest.DocTestParser.get_examples",
        "doctest.DocTest.__init__"
    ],
    "doctest.DocTestParser.get_examples": [
        "doctest.DocTestParser.parse",
        "<builtin>.isinstance"
    ],
    "doctest.DocTestParser.parse": [
        "<map>",
        "<str>.count",
        "<str>.expandtabs",
        "pathlib.PurePath.match",
        "doctest.DocTestParser._min_indent",
        "<list>.append",
        "<list>.count",
        "doctest.DocTestParser._parse_example",
        "<str>.split",
        "<list>"
    ],
    "doctest.DocTestParser._min_indent": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "<str>.count": [],
    "doctest.DocTestParser._parse_example": [
        "doctest.DocTestParser._find_options",
        "doctest.DocTestParser._check_prompt_blank",
        "doctest.DocTestParser._check_prefix",
        "re.match",
        "<builtin>.len",
        "<str>.split",
        "pathlib.PurePath.match"
    ],
    "doctest.DocTestParser._check_prompt_blank": [
        "<builtin>.enumerate",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "doctest.DocTestParser._check_prefix": [
        "<builtin>.enumerate",
        "<builtin>.ValueError"
    ],
    "doctest.DocTestParser._find_options": [
        "pathlib.PurePath.match",
        "<list>",
        "<builtin>.ValueError",
        "<map>"
    ],
    "doctest.DocTest.__init__": [
        "<builtin>.isinstance",
        "<map>.copy"
    ],
    "doctest.DocTestRunner.run": [
        "doctest.DocTestRunner.__run",
        "<str>.lower",
        "doctest._OutputRedirectingPdb.__init__",
        "doctest._extract_future_flags"
    ],
    "doctest._extract_future_flags": [
        "<builtin>.getattr",
        "<map>.get"
    ],
    "doctest._OutputRedirectingPdb.__init__": [],
    "doctest.DocTestRunner.__run": [
        "doctest._OutputRedirectingPdb.set_continue",
        "doctest.DocTestRunner.report_start",
        "doctest._strip_exception_details",
        "<builtin>.compile",
        "doctest.DocTestRunner.report_success",
        "doctest.DebugRunner.report_failure",
        "<builtin>.enumerate",
        "doctest.DocTestRunner.__record_outcome",
        "doctest._SpoofOut.truncate",
        "doctest.DocTestRunner.report_unexpected_exception",
        "doctest.DebugRunner.report_unexpected_exception",
        "<builtin>.exec",
        "doctest._SpoofOut.getvalue",
        "doctest._exception_traceback",
        "<builtin>.range",
        "traceback.format_exception_only",
        "doctest.DocTestRunner.report_failure"
    ],
    "doctest.DocTestRunner.report_start": [
        "doctest.DocTestRunner.run.out",
        "doctest._indent"
    ],
    "doctest._indent": [
        "re.sub"
    ],
    "re.sub": [
        "re._compile"
    ],
    "doctest.DocTestRunner.run.out": [
        "codecs.StreamRecoder.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "<str>.encode",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.str",
        "rich.file_proxy.FileProxy.write"
    ],
    "<str>.encode": [],
    "<builtin>.exec": [],
    "doctest._SpoofOut.getvalue": [],
    "doctest._SpoofOut.truncate": [],
    "traceback.format_exception_only": [
        "traceback.TracebackException.format_exception_only",
        "<builtin>.list",
        "traceback.TracebackException.__init__"
    ],
    "doctest._exception_traceback": [
        "_io.StringIO",
        "traceback.print_exception"
    ],
    "doctest._strip_exception_details": [
        "<builtin>.len"
    ],
    "doctest.DocTestRunner.report_unexpected_exception": [
        "doctest.DocTestRunner.run.out",
        "doctest.DocTestRunner._failure_header",
        "doctest._exception_traceback",
        "doctest._indent"
    ],
    "doctest.DocTestRunner._failure_header": [
        "<list>.append"
    ],
    "doctest.DocTestRunner.report_failure": [
        "doctest.DocTestRunner.run.out",
        "doctest.DocTestRunner._failure_header"
    ],
    "doctest.DocTestRunner.report_success": [
        "doctest.DocTestRunner.run.out"
    ],
    "doctest.DocTestRunner.__record_outcome": [
        "<map>.get"
    ],
    "doctest.DebugRunner.run": [
        "doctest.DocTestRunner.run",
        "<map>.clear"
    ],
    "doctest.DocTestRunner.summarize": [
        "<list>.append",
        "<map>.items",
        "<builtin>.len",
        "<builtin>.print",
        "<list>.sort"
    ],
    "doctest.DocTestFinder.__init__": [],
    "doctest.DocTestFinder.find": [
        "inspect.getsourcefile",
        "<map>.copy",
        "doctest.DocTestFinder._find",
        "<map>.update",
        "inspect.getmodule",
        "<builtin>.type",
        "<builtin>.getattr",
        "<list>.sort",
        "<builtin>.ValueError"
    ],
    "doctest.DocTestFinder._find": [
        "doctest.DocTestFinder._get_test",
        "<builtin>.isinstance",
        "inspect.isroutine",
        "inspect.isclass",
        "doctest.DocTestFinder._find",
        "inspect.ismodule",
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "<list>.append",
        "doctest.DocTestFinder._from_module",
        "<builtin>.type",
        "<builtin>.print",
        "inspect.unwrap",
        "<builtin>.id"
    ],
    "doctest.DocTestFinder._get_test": [
        "<builtin>.isinstance",
        "doctest.DocTestParser.get_doctest",
        "doctest.DocTestFinder._find_lineno",
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "doctest.DocTestFinder._find_lineno": [
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.isclass",
        "inspect.ismethod",
        "re.compile",
        "<builtin>.enumerate",
        "inspect.ismodule",
        "inspect.isfunction",
        "<builtin>.getattr",
        "<builtin>.len",
        "inspect.iscode",
        "<builtin>.range",
        "pathlib.PurePath.match"
    ],
    "<str>.expandtabs": [],
    "inspect.isroutine": [
        "inspect.ismethod",
        "inspect.isfunction",
        "inspect.ismethoddescriptor",
        "inspect.isbuiltin"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.isfunction",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "doctest.DocTestFinder._from_module": [
        "<builtin>.isinstance",
        "inspect.ismethoddescriptor",
        "inspect.isclass",
        "inspect.isfunction",
        "inspect.getmodule",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "doctest.DocTestRunner.merge": [
        "<map>.items"
    ],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictValuesView": [],
    "collections._Link": [],
    "collections.OrderedDict": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod",
        "<builtin>.object"
    ],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.UserList": [],
    "collections.UserString": [],
    "typing._Final": [],
    "typing._Immutable": [],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "<list>.append",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools.wraps",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "typing._SpecialForm.__init__": [],
    "typing.ForwardRef": [],
    "typing.TypeVar": [],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing._TypingEmpty": [],
    "typing._TypingEllipsis": [],
    "typing._ProtocolMeta": [],
    "typing.Protocol": [],
    "typing.TypeVar.__init__": [
        "typing._type_check",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.bool",
        "<builtin>.ValueError"
    ],
    "typing._type_check": [
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.type"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.SyntaxError",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.compile"
    ],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._GenericAlias.__init__": [
        "<builtin>.tuple",
        "typing._collect_type_vars",
        "<builtin>.isinstance",
        "<map>.get"
    ],
    "typing._collect_type_vars": [
        "<builtin>.tuple",
        "<list>.extend",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.NamedTupleMeta": [],
    "typing.NamedTuple": [],
    "typing._TypedDictMeta": [],
    "typing.TypedDict": [],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.io": [],
    "typing.re": [],
    "click": [
        "click.decorators",
        "click.termui",
        "click.utils",
        "click.exceptions",
        "click.formatting",
        "click.core",
        "click.types",
        "click.globals",
        "click.parser"
    ],
    "click.core": [
        "click.termui",
        "typing",
        "click.exceptions",
        "click.shell_completion",
        "click.formatting",
        "click.core.Context",
        "click.core.MultiCommand",
        "click.utils",
        "click.core.Command",
        "functools",
        "typing.TypeVar.__init__",
        "click.core.Parameter",
        "enum",
        "gettext",
        "click.core.BaseCommand",
        "click.core.CommandCollection",
        "contextlib.contextmanager",
        "inspect",
        "os",
        "click.core.Option",
        "click.core.ParameterSource",
        "click.types",
        "click.core.Group",
        "click.core.Argument",
        "collections.abc",
        "contextlib",
        "typing_extensions",
        "click.globals",
        "click.parser"
    ],
    "click.types": [
        "typing",
        "datetime",
        "click.types.FuncParamType",
        "click.types.StringParamType",
        "click.types.IntRange",
        "click.exceptions",
        "click.shell_completion",
        "click.types.UUIDParameterType",
        "click.types._NumberParamTypeBase",
        "click.types._NumberRangeBase",
        "click.utils",
        "click.types.UnprocessedParamType",
        "click.types.ParamType",
        "click.types.CompositeParamType",
        "click.types.FloatRange",
        "gettext",
        "click._compat",
        "click.types.Path",
        "click.types.FloatParamType",
        "click.types.IntParamType",
        "os",
        "click.types.File",
        "click.types.DateTime",
        "click.types.Tuple",
        "stat",
        "click.types.Choice",
        "click.core",
        "typing_extensions",
        "click.types.BoolParamType"
    ],
    "datetime": [
        "datetime.tzinfo",
        "datetime.timezone",
        "datetime.date",
        "datetime.timedelta",
        "datetime._days_before_year",
        "datetime.datetime",
        "_datetime",
        "math",
        "datetime.timezone._create",
        "<list>.append",
        "datetime.time"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.tzinfo": [],
    "datetime.time": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.datetime": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.timezone": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.object"
    ],
    "datetime.timezone._create": [],
    "_datetime": [],
    "click._compat": [
        "typing",
        "re.compile",
        "click._compat._NonClosingTextIOWrapper",
        "click._winconsole",
        "weakref.WeakKeyDictionary.__init__",
        "click._compat._FixupStream",
        "codecs",
        "os",
        "re",
        "click._compat._make_cached_stream_func",
        "click._compat._AtomicFile",
        "weakref",
        "io"
    ],
    "click._compat._NonClosingTextIOWrapper": [],
    "click._compat._FixupStream": [],
    "click._compat._AtomicFile": [
        "<builtin>.property"
    ],
    "click._winconsole": [
        "click._winconsole._WindowsConsoleReader",
        "ctypes.WINFUNCTYPE",
        "ctypes.wintypes",
        "click._winconsole._WindowsConsoleWriter",
        "typing",
        "click._winconsole._WindowsConsoleRawIOBase",
        "click._compat",
        "click._winconsole.ConsoleStream",
        "ctypes",
        "io"
    ],
    "ctypes": [
        "_ctypes",
        "ctypes.c_ulong",
        "ctypes.c_void_p",
        "<builtin>.int",
        "ctypes.c_longdouble",
        "ctypes.c_long",
        "ctypes.c_wchar",
        "ctypes._endian",
        "<builtin>.Exception",
        "ctypes.c_wchar_p",
        "ctypes.CDLL",
        "ctypes.c_short",
        "ctypes._check_size",
        "ctypes.HRESULT",
        "ctypes.c_byte",
        "ctypes.CFUNCTYPE",
        "ctypes.LibraryLoader.__init__",
        "ctypes.PYFUNCTYPE",
        "ctypes.c_float",
        "ctypes.WinDLL",
        "ctypes.c_bool",
        "ctypes.c_char",
        "ctypes.c_ushort",
        "ctypes.c_ubyte",
        "ctypes.c_int",
        "ctypes.c_longlong",
        "struct",
        "os",
        "ctypes.c_char_p",
        "ctypes.PyDLL",
        "ctypes._reset_cache",
        "ctypes.c_uint",
        "ctypes.c_ulonglong",
        "ctypes.py_object",
        "ctypes.LibraryLoader",
        "ctypes.c_double",
        "ctypes.OleDLL"
    ],
    "_ctypes": [],
    "<builtin>.Exception": [],
    "ctypes.py_object": [],
    "ctypes._check_size": [
        "<builtin>.SystemError",
        "struct"
    ],
    "ctypes.c_short": [],
    "ctypes.c_ushort": [],
    "ctypes.c_long": [],
    "ctypes.c_ulong": [],
    "ctypes.c_int": [],
    "ctypes.c_uint": [],
    "ctypes.c_float": [],
    "ctypes.c_double": [],
    "ctypes.c_longdouble": [],
    "ctypes.c_longlong": [],
    "ctypes.c_ulonglong": [],
    "ctypes.c_ubyte": [],
    "ctypes.c_byte": [],
    "ctypes.c_char": [],
    "ctypes.c_char_p": [],
    "ctypes.c_void_p": [],
    "ctypes.c_bool": [],
    "ctypes.c_wchar_p": [],
    "ctypes.c_wchar": [],
    "ctypes.CDLL": [],
    "ctypes.PyDLL": [],
    "ctypes.WinDLL": [],
    "ctypes.HRESULT": [],
    "ctypes.OleDLL": [],
    "ctypes.LibraryLoader": [],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "ctypes.CFUNCTYPE.CFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.CFUNCTYPE.CFunctionType": [],
    "ctypes.PYFUNCTYPE": [
        "ctypes.PYFUNCTYPE.CFunctionType"
    ],
    "ctypes.PYFUNCTYPE.CFunctionType": [],
    "ctypes._endian": [
        "ctypes._endian.BigEndianStructure",
        "ctypes",
        "ctypes._endian._swapped_meta",
        "<builtin>.type"
    ],
    "ctypes._endian._swapped_meta": [],
    "ctypes._endian.BigEndianStructure": [],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "ctypes.wintypes": [
        "ctypes",
        "ctypes.wintypes.SIZE",
        "ctypes.wintypes._COORD",
        "ctypes.wintypes.WIN32_FIND_DATAW",
        "ctypes.wintypes.POINT",
        "ctypes.wintypes.RECT",
        "ctypes.wintypes.MSG",
        "ctypes.wintypes.FILETIME",
        "ctypes.wintypes.WIN32_FIND_DATAA",
        "ctypes.wintypes._SMALL_RECT",
        "ctypes.wintypes.VARIANT_BOOL"
    ],
    "ctypes.wintypes.VARIANT_BOOL": [],
    "ctypes.wintypes.RECT": [],
    "ctypes.wintypes._SMALL_RECT": [],
    "ctypes.wintypes._COORD": [],
    "ctypes.wintypes.POINT": [],
    "ctypes.wintypes.SIZE": [],
    "ctypes.wintypes.FILETIME": [],
    "ctypes.wintypes.MSG": [],
    "ctypes.wintypes.WIN32_FIND_DATAA": [],
    "ctypes.wintypes.WIN32_FIND_DATAW": [],
    "ctypes.WINFUNCTYPE": [
        "ctypes.WINFUNCTYPE.WinFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.WINFUNCTYPE.WinFunctionType": [],
    "click._winconsole._WindowsConsoleRawIOBase": [],
    "click._winconsole._WindowsConsoleReader": [],
    "click._winconsole._WindowsConsoleWriter": [
        "<builtin>.staticmethod"
    ],
    "click._winconsole.ConsoleStream": [
        "<builtin>.property"
    ],
    "click._compat._make_cached_stream_func": [
        "weakref.WeakKeyDictionary.__init__"
    ],
    "click.exceptions": [
        "click.exceptions.ClickException",
        "typing",
        "click.utils",
        "click.exceptions.FileError",
        "click.exceptions.Exit",
        "click.exceptions.BadArgumentUsage",
        "click.exceptions.Abort",
        "click.exceptions.NoSuchOption",
        "os",
        "gettext",
        "click.core",
        "click.exceptions.UsageError",
        "click._compat",
        "click.exceptions.BadOptionUsage",
        "click.exceptions.MissingParameter",
        "click.exceptions.BadParameter"
    ],
    "click.utils": [
        "click.utils.KeepOpenFile",
        "click.utils.LazyFile",
        "typing",
        "functools",
        "types",
        "typing.TypeVar.__init__",
        "os",
        "re",
        "typing_extensions",
        "click._compat",
        "click.globals",
        "click.utils.PacifyFlushWrapper"
    ],
    "click.globals": [
        "threading",
        "typing",
        "_thread._local",
        "typing.overload",
        "click.core",
        "typing_extensions"
    ],
    "typing_extensions": [
        "typing_extensions.Protocol",
        "abc",
        "typing",
        "types",
        "<builtin>.object",
        "typing_extensions._TypedDictMeta.__init__",
        "operator",
        "typing_extensions.SupportsIndex",
        "typing_extensions._RequiredForm",
        "typing_extensions.Any",
        "typing_extensions._UnpackForm",
        "typing_extensions._FinalForm",
        "functools",
        "typing_extensions.ParamSpecArgs",
        "typing_extensions._ConcatenateForm",
        "typing.TypeVar.__init__",
        "typing_extensions._AnnotatedAlias",
        "typing_extensions.ParamSpecKwargs",
        "typing_extensions._DefaultMixin",
        "typing_extensions._UnpackSpecialForm",
        "typing._tp_cache",
        "typing_extensions._NamedTupleMeta",
        "typing_extensions._TypeGuardForm",
        "typing_extensions._Immutable",
        "_collections.defaultdict",
        "typing_extensions._TypedDictMeta",
        "typing_extensions.ParamSpec",
        "typing_extensions._TypeAliasForm",
        "<builtin>.frozenset",
        "typing_extensions._SpecialForm",
        "typing_extensions._ProtocolMeta",
        "typing_extensions.TypeVarTuple",
        "typing_extensions.Annotated",
        "typing._alias",
        "collections.abc",
        "typing_extensions._SpecialForm.__init__",
        "typing_extensions._ExtensionsSpecialForm",
        "typing_extensions.TypeVar",
        "typing_extensions._UnpackAlias",
        "collections",
        "typing_extensions._ConcatenateGenericAlias",
        "typing_extensions._LiteralForm",
        "<builtin>.hasattr",
        "typing_extensions._AnyMeta"
    ],
    "typing_extensions._AnyMeta": [],
    "typing_extensions.Any": [],
    "typing_extensions._FinalForm": [],
    "typing_extensions._LiteralForm": [],
    "_collections.defaultdict": [],
    "typing_extensions._ProtocolMeta": [],
    "typing_extensions.Protocol": [
        "typing._tp_cache"
    ],
    "typing_extensions.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing_extensions._TypedDictMeta": [],
    "typing_extensions._TypedDictMeta.__init__": [
        "<builtin>.super"
    ],
    "typing_extensions._AnnotatedAlias": [],
    "typing_extensions.Annotated": [
        "typing._tp_cache"
    ],
    "typing_extensions._TypeAliasForm": [],
    "typing_extensions._DefaultMixin": [],
    "typing_extensions.TypeVar": [],
    "typing_extensions._Immutable": [],
    "typing_extensions.ParamSpecArgs": [],
    "typing_extensions.ParamSpecKwargs": [],
    "typing_extensions.ParamSpec": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateGenericAlias": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateForm": [],
    "typing_extensions._TypeGuardForm": [],
    "typing_extensions._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialForm.__init__": [],
    "typing_extensions._RequiredForm": [],
    "typing_extensions._ExtensionsSpecialForm": [],
    "typing_extensions._UnpackAlias": [],
    "typing_extensions._UnpackForm": [],
    "typing_extensions._UnpackSpecialForm": [],
    "typing_extensions.TypeVarTuple": [],
    "typing_extensions._NamedTupleMeta": [],
    "_thread._local": [],
    "typing.overload": [],
    "click.utils.LazyFile": [],
    "click.utils.KeepOpenFile": [],
    "click.utils.PacifyFlushWrapper": [],
    "click.exceptions.ClickException": [],
    "click.exceptions.UsageError": [],
    "click.exceptions.BadParameter": [],
    "click.exceptions.MissingParameter": [],
    "click.exceptions.NoSuchOption": [],
    "click.exceptions.BadOptionUsage": [],
    "click.exceptions.BadArgumentUsage": [],
    "click.exceptions.FileError": [],
    "click.exceptions.Abort": [],
    "click.exceptions.Exit": [],
    "click.shell_completion": [
        "typing",
        "click.utils",
        "click.shell_completion.ZshComplete",
        "os",
        "gettext",
        "re",
        "click.core",
        "click.shell_completion.ShellComplete",
        "click.shell_completion.BashComplete",
        "click.parser",
        "click.shell_completion.FishComplete",
        "click.shell_completion.CompletionItem"
    ],
    "click.parser": [
        "click.parser.ParsingState",
        "typing",
        "collections",
        "click.exceptions",
        "<builtin>.object",
        "typing.TypeVar.__init__",
        "click.parser.OptionParser",
        "gettext",
        "click.core",
        "typing_extensions",
        "click.parser.Argument",
        "click.parser.Option"
    ],
    "click.parser.Option": [
        "<builtin>.property"
    ],
    "click.parser.Argument": [],
    "click.parser.ParsingState": [],
    "click.parser.OptionParser": [],
    "click.shell_completion.CompletionItem": [],
    "click.shell_completion.ShellComplete": [
        "<builtin>.property"
    ],
    "click.shell_completion.BashComplete": [],
    "click.shell_completion.ZshComplete": [],
    "click.shell_completion.FishComplete": [],
    "click.types.ParamType": [],
    "click.types.CompositeParamType": [
        "<builtin>.property"
    ],
    "click.types.FuncParamType": [],
    "click.types.UnprocessedParamType": [],
    "click.types.StringParamType": [],
    "click.types.Choice": [],
    "click.types.DateTime": [],
    "click.types._NumberParamTypeBase": [],
    "click.types._NumberRangeBase": [],
    "click.types.IntParamType": [],
    "click.types.IntRange": [],
    "click.types.FloatParamType": [],
    "click.types.FloatRange": [],
    "click.types.BoolParamType": [],
    "click.types.UUIDParameterType": [],
    "click.types.File": [],
    "click.types.Path": [],
    "click.types.Tuple": [
        "<builtin>.property"
    ],
    "click.formatting": [
        "click.parser",
        "typing",
        "gettext",
        "click.formatting.HelpFormatter",
        "click._compat",
        "contextlib"
    ],
    "click.formatting.HelpFormatter": [
        "contextlib.contextmanager"
    ],
    "click.termui": [
        "click._termui_impl",
        "typing",
        "click.utils",
        "click.exceptions",
        "inspect",
        "typing.TypeVar.__init__",
        "os",
        "gettext",
        "click._compat",
        "click.types",
        "click.globals",
        "io"
    ],
    "click._termui_impl": [
        "tty",
        "click._termui_impl.Editor",
        "contextlib.contextmanager",
        "typing",
        "click.utils",
        "click.exceptions",
        "typing.TypeVar.__init__",
        "math",
        "os",
        "gettext",
        "click._compat",
        "click._termui_impl.ProgressBar",
        "termios",
        "contextlib"
    ],
    "click._termui_impl.ProgressBar": [
        "<builtin>.property"
    ],
    "click._termui_impl.Editor": [],
    "tty": [
        "termios"
    ],
    "termios": [],
    "click.core.ParameterSource": [],
    "click.core.Context": [
        "typing.overload",
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "click.core.BaseCommand": [
        "typing.overload"
    ],
    "click.core.Command": [],
    "click.core.MultiCommand": [],
    "click.core.Group": [
        "typing.overload"
    ],
    "click.core.CommandCollection": [],
    "click.core.Parameter": [
        "typing.overload",
        "<builtin>.property"
    ],
    "click.core.Option": [
        "typing.overload"
    ],
    "click.core.Argument": [
        "<builtin>.property"
    ],
    "click.decorators": [
        "typing",
        "click.utils",
        "functools",
        "types",
        "inspect",
        "typing.TypeVar.__init__",
        "typing.overload",
        "gettext",
        "click.core",
        "click.globals"
    ],
    "pygments.util": [
        "pygments.util.UnclosingTextIOWrapper",
        "pygments.util.ClassNotFound",
        "re.compile",
        "pygments.util.Future",
        "re",
        "pygments.util.OptionError",
        "io"
    ],
    "pygments.util.ClassNotFound": [],
    "pygments.util.OptionError": [],
    "pygments.util.Future": [],
    "pygments.util.UnclosingTextIOWrapper": [],
    "rich.console": [
        "rich.region",
        "rich.console.ConsoleThreadLocals",
        "rich.measure",
        "rich.console.Console.__init__",
        "abc",
        "datetime",
        "typing",
        "dataclasses",
        "rich._emoji_replace",
        "types",
        "rich.console.ScreenContext",
        "platform.system",
        "rich.console.Capture",
        "rich.console.PagerContext",
        "rich.terminal_theme",
        "rich.segment",
        "rich._windows",
        "rich.console.ConsoleDimensions",
        "<builtin>.repr",
        "zlib",
        "rich._null_file",
        "rich.protocol",
        "rich.console.ThemeContext",
        "threading",
        "rich.text",
        "functools",
        "rich.pretty",
        "rich.console.Group",
        "rich.scope",
        "rich.control",
        "math",
        "rich.console.ScreenUpdate",
        "rich._log_render",
        "rich.console.Console",
        "rich.style",
        "rich.console.NoChange",
        "rich.console.NewLine",
        "rich.emoji",
        "rich.console.RichCast",
        "rich.pager",
        "rich.console.CaptureError",
        "rich.console.ConsoleOptions",
        "rich.theme",
        "rich.console.ConsoleRenderable",
        "inspect",
        "rich.align",
        "os",
        "rich.live",
        "rich.status",
        "rich.highlighter",
        "io",
        "platform",
        "rich.markup",
        "<map>.items",
        "rich.errors",
        "rich._export_format",
        "rich.styled",
        "html",
        "rich.console.RenderHook",
        "rich.color",
        "getpass",
        "rich.themes",
        "typing_extensions",
        "rich.screen"
    ],
    "platform": [
        "re.compile",
        "collections",
        "collections.namedtuple",
        "os",
        "re",
        "<builtin>.print",
        "platform.platform"
    ],
    "<builtin>.reversed": [],
    "_collections._tuplegetter": [],
    "collections.<lambda1>": [
        "<builtin>.property",
        "operator.itemgetter.__init__"
    ],
    "operator.itemgetter.__init__": [],
    "platform.platform": [
        "platform.uname",
        "platform.architecture",
        "<map>.get",
        "platform.win32_ver",
        "platform.java_ver",
        "platform.libc_ver",
        "platform.mac_ver",
        "platform.system_alias",
        "platform._platform"
    ],
    "platform.uname": [
        "platform._node",
        "<builtin>.list",
        "platform.java_ver",
        "platform.win32_ver",
        "<builtin>.filter",
        "platform._syscmd_uname",
        "platform._syscmd_ver"
    ],
    "<builtin>.filter": [],
    "platform._node": [
        "socket"
    ],
    "platform.win32_ver": [
        "<map>.get",
        "<builtin>.getattr",
        "sys.getwindowsversion"
    ],
    "sys.getwindowsversion": [],
    "platform._syscmd_ver": [
        "subprocess.check_output",
        "subprocess",
        "pathlib.PurePath.match",
        "platform._norm_version"
    ],
    "subprocess.check_output": [
        "<builtin>.ValueError",
        "subprocess.run"
    ],
    "subprocess.run": [
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.communicate",
        "subprocess.Popen.kill",
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__",
        "subprocess.Popen.poll",
        "subprocess.CalledProcessError.__init__",
        "subprocess.Popen.__enter__",
        "<builtin>.ValueError",
        "subprocess.Popen.__exit__"
    ],
    "subprocess.Popen.__init__": [
        "<list>.append",
        "<builtin>.isinstance",
        "_thread.allocate_lock",
        "subprocess._cleanup",
        "subprocess.Popen._get_handles",
        "<builtin>.TypeError",
        "_io.TextIOWrapper",
        "_io.open",
        "subprocess.Popen._execute_child",
        "<builtin>.filter",
        "<builtin>.bool",
        "<builtin>.hasattr",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "subprocess._cleanup": [
        "<list>.remove"
    ],
    "subprocess.Popen._get_handles": [
        "subprocess.Popen._get_devnull",
        "<builtin>.isinstance"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "_io.open": [],
    "subprocess.Popen._execute_child": [
        "<builtin>.isinstance",
        "<builtin>.int",
        "posixpath.join",
        "<builtin>.TypeError",
        "<builtin>.bytearray",
        "<list>.append",
        "<builtin>.ValueError",
        "<builtin>.list",
        "email.message.Message.items",
        "subprocess.Popen._posix_spawn",
        "<builtin>.issubclass",
        "os.get_exec_path",
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.bytes",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.sorted",
        "os._fscodec.fsdecode",
        "subprocess.Popen._handle_exitstatus",
        "<map>.items",
        "posixpath.dirname",
        "os._fscodec.fsencode",
        "<builtin>.tuple",
        "ntpath.join",
        "<builtin>.getattr",
        "<builtin>.len",
        "ntpath.dirname",
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._posix_spawn": [
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "os._fscodec.fsdecode": [
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "os._fscodec.fsencode": [
        "os._fspath",
        "<str>.encode",
        "<builtin>.isinstance"
    ],
    "os.get_exec_path": [
        "warnings",
        "warnings.catch_warnings.__init__",
        "<str>.split"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [],
    "subprocess.Popen.communicate": [
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._stdin_write",
        "time.monotonic",
        "subprocess.Popen._communicate",
        "subprocess.Popen.wait",
        "<list>.count",
        "<builtin>.min",
        "subprocess.Popen._wait",
        "<builtin>.ValueError"
    ],
    "<list>.count": [],
    "time.monotonic": [],
    "subprocess.Popen._communicate": [
        "subprocess.Popen._remaining_time",
        "<builtin>.memoryview",
        "subprocess.Popen.wait",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._translate_newlines",
        "subprocess.Popen._check_timeout",
        "subprocess.Popen._save_input",
        "<builtin>.RuntimeError"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.Popen.wait": [
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._wait",
        "<builtin>.min",
        "time.monotonic"
    ],
    "subprocess.Popen._wait": [
        "subprocess.Popen._handle_exitstatus",
        "subprocess.Popen._remaining_time",
        "time.monotonic",
        "subprocess.Popen._try_wait",
        "subprocess.TimeoutExpired.__init__",
        "<builtin>.min"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "platform._norm_version": [
        "<builtin>.map",
        "<str>.split"
    ],
    "platform.java_ver": [
        "platform._java_getprop"
    ],
    "platform._java_getprop": [],
    "platform._syscmd_uname": [
        "subprocess.check_output",
        "subprocess"
    ],
    "platform.system_alias": [
        "<builtin>.int"
    ],
    "platform.mac_ver": [
        "platform._mac_ver_xml"
    ],
    "platform._mac_ver_xml": [
        "plistlib.load",
        "<builtin>.open",
        "genericpath.exists",
        "plistlib"
    ],
    "plistlib": [
        "binascii",
        "<builtin>.globals",
        "datetime",
        "<builtin>.object",
        "plistlib.InvalidFileException",
        "codecs",
        "re",
        "<builtin>.dict",
        "warnings",
        "enum",
        "plistlib.Data",
        "plistlib._DumbXMLWriter",
        "plistlib._BinaryPlistWriter",
        "plistlib.UID",
        "contextlib.contextmanager",
        "re.compile",
        "struct",
        "os",
        "plistlib._BinaryPlistParser",
        "io",
        "plistlib._PlistWriter",
        "plistlib._PlistParser",
        "contextlib",
        "xml.parsers.expat"
    ],
    "xml.parsers.expat": [
        "pyexpat"
    ],
    "pyexpat": [],
    "plistlib.Data": [
        "<builtin>.classmethod"
    ],
    "plistlib.UID": [],
    "plistlib._PlistParser": [],
    "plistlib._DumbXMLWriter": [],
    "plistlib._PlistWriter": [],
    "plistlib.InvalidFileException": [],
    "plistlib._BinaryPlistParser": [],
    "plistlib._BinaryPlistWriter": [],
    "plistlib.load": [
        "<map>.values"
    ],
    "<map>.values": [],
    "platform.architecture": [
        "platform._syscmd_file",
        "struct",
        "<builtin>.str"
    ],
    "platform._syscmd_file": [
        "platform._follow_symlinks",
        "subprocess.check_output",
        "<builtin>.dict",
        "subprocess"
    ],
    "platform._follow_symlinks": [
        "posixpath.islink",
        "posixpath.normpath",
        "posixpath.join",
        "posixpath.dirname",
        "ntpath.islink",
        "ntpath.join",
        "ntpath.normpath",
        "ntpath.dirname",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "ntpath.normpath": [
        "ntpath.splitdrive",
        "<str>.endswith",
        "<list>.append",
        "<builtin>.isinstance",
        "<str>.replace",
        "os._fspath",
        "<str>.lstrip",
        "pathlib.Path.replace",
        "<str>.startswith",
        "<builtin>.len",
        "<str>.split"
    ],
    "<str>.lstrip": [],
    "platform._platform": [
        "<builtin>.filter",
        "<str>.replace"
    ],
    "platform.libc_ver": [
        "ntpath.realpath",
        "posixpath.realpath",
        "<builtin>.tuple",
        "<builtin>.open",
        "<builtin>.len",
        "<builtin>.max",
        "<builtin>.hasattr",
        "platform._comparable_version"
    ],
    "platform._comparable_version": [
        "<map>.get",
        "<list>.extend",
        "<str>.split",
        "<builtin>.int"
    ],
    "dataclasses": [
        "dataclasses.InitVar",
        "dataclasses._FIELD_BASE",
        "re.compile",
        "functools",
        "types",
        "dataclasses._DataclassParams",
        "inspect",
        "dataclasses._HAS_DEFAULT_FACTORY_CLASS",
        "dataclasses.Field",
        "keyword",
        "re",
        "dataclasses._FIELD_BASE.__init__",
        "dataclasses.FrozenInstanceError",
        "dataclasses._MISSING_TYPE",
        "copy",
        "dataclasses._InitVarMeta"
    ],
    "dataclasses.FrozenInstanceError": [],
    "dataclasses._HAS_DEFAULT_FACTORY_CLASS": [],
    "dataclasses._MISSING_TYPE": [],
    "dataclasses._FIELD_BASE": [],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses._InitVarMeta": [],
    "dataclasses.InitVar": [],
    "dataclasses.Field": [],
    "dataclasses._DataclassParams": [],
    "getpass": [
        "getpass.GetPassWarning",
        "warnings",
        "os",
        "termios",
        "contextlib",
        "io"
    ],
    "getpass.GetPassWarning": [],
    "html": [
        "re.compile",
        "html.entities",
        "re"
    ],
    "html.entities": [
        "<map>.items",
        "<builtin>.chr"
    ],
    "rich._null_file": [
        "typing",
        "rich._null_file.NullFile",
        "types"
    ],
    "rich._null_file.NullFile": [
        "<builtin>.property"
    ],
    "rich.errors": [
        "rich.errors.StyleSyntaxError",
        "rich.errors.LiveError",
        "rich.errors.StyleStackError",
        "rich.errors.ConsoleError",
        "rich.errors.MissingStyle",
        "rich.errors.MarkupError",
        "rich.errors.StyleError",
        "rich.errors.NotRenderableError",
        "rich.errors.NoAltScreen"
    ],
    "rich.errors.ConsoleError": [],
    "rich.errors.StyleError": [],
    "rich.errors.StyleSyntaxError": [],
    "rich.errors.MissingStyle": [],
    "rich.errors.StyleStackError": [],
    "rich.errors.NotRenderableError": [],
    "rich.errors.MarkupError": [],
    "rich.errors.LiveError": [],
    "rich.errors.NoAltScreen": [],
    "rich.themes": [
        "rich.theme.Theme.__init__",
        "rich.default_styles",
        "rich.theme"
    ],
    "rich.default_styles": [
        "rich.console.Console.__init__",
        "typing",
        "rich.table",
        "<builtin>.str",
        "<builtin>.print",
        "rich.style.Style.null",
        "argparse.ArgumentParser.__init__",
        "rich.console",
        "rich.text",
        "rich.text.Text.__init__",
        "rich.style",
        "rich.table.Table.__init__",
        "argparse",
        "io",
        "argparse.ArgumentParser.parse_args",
        "rich.style.Style.__init__",
        "rich.table.Table.add_row",
        "argparse._ActionsContainer.add_argument",
        "_io.StringIO"
    ],
    "rich.style": [
        "rich.errors",
        "rich.style.Style.__init__",
        "random",
        "typing",
        "rich.style._Bit",
        "functools",
        "rich.repr",
        "rich.color",
        "rich.terminal_theme",
        "rich.style.StyleStack",
        "rich.style.Style"
    ],
    "rich.color": [
        "rich.color.ColorSystem",
        "rich.console.Console.__init__",
        "typing",
        "rich.repr",
        "rich.table",
        "re",
        "rich.terminal_theme",
        "<builtin>.str",
        "rich.console",
        "rich._palettes",
        "rich.console.Console.print",
        "rich.text",
        "functools",
        "enum",
        "rich.text.Text.__init__",
        "colorsys",
        "rich.table.Table.__init__",
        "re.compile",
        "<builtin>.sorted",
        "rich.color_triplet",
        "rich.color.ColorParseError",
        "rich.color.Color",
        "platform",
        "<map>.items",
        "rich.table.Table.add_column",
        "rich.table.Table.add_row",
        "platform.system",
        "rich.color.ColorType"
    ],
    "colorsys": [],
    "rich._palettes": [
        "rich.palette.Palette.__init__",
        "rich.palette"
    ],
    "rich.palette": [
        "rich.console",
        "rich.console.Console.__init__",
        "typing",
        "rich.palette.Palette",
        "rich.console.Console.print",
        "functools",
        "rich.segment",
        "rich.table",
        "rich.color_triplet",
        "rich.color",
        "math",
        "colorsys",
        "rich.style",
        "rich.palette.ColorBox"
    ],
    "rich.color_triplet": [
        "typing",
        "rich.color_triplet.ColorTriplet"
    ],
    "rich.color_triplet.ColorTriplet": [
        "<builtin>.property"
    ],
    "rich.table": [
        "rich.measure",
        "rich.table.Row",
        "typing",
        "dataclasses",
        "rich.table",
        "rich.segment",
        "rich.protocol",
        "rich.console",
        "rich.text",
        "rich.table.Column",
        "rich._timer",
        "rich.style",
        "rich.table.Table",
        "rich.table._Cell",
        "rich._loop",
        "rich.align",
        "rich.box",
        "rich.highlighter",
        "rich._timer.timer",
        "rich.errors",
        "rich._ratio",
        "rich._pick",
        "rich.jupyter",
        "rich.padding"
    ],
    "rich.box": [
        "rich.console.Console.__init__",
        "typing",
        "rich.table",
        "rich.columns.Columns.add_renderable",
        "rich.console",
        "rich.panel.Panel.__init__",
        "rich.console.Console.print",
        "rich.text",
        "rich.text.Text.__init__",
        "rich.table.Table.__init__",
        "rich.box.Box.__init__",
        "rich.columns.Columns.__init__",
        "rich._loop",
        "<builtin>.sorted",
        "rich.box",
        "rich.panel",
        "rich.table.Table.add_column",
        "rich.columns",
        "rich.table.Table.add_row",
        "<builtin>.getattr",
        "typing_extensions",
        "rich.box.Box"
    ],
    "rich._loop": [
        "typing",
        "typing.TypeVar.__init__"
    ],
    "rich.box.Box": [],
    "rich.box.Box.__init__": [
        "<builtin>.iter",
        "<str>.splitlines"
    ],
    "<str>.splitlines": [],
    "rich.columns": [
        "rich.measure",
        "rich.console.Console.__init__",
        "typing",
        "<builtin>.enumerate",
        "rich.table",
        "operator",
        "rich.console",
        "rich.console.Console.print",
        "rich.text",
        "rich.padding",
        "rich.columns.Columns.__init__",
        "<builtin>.sorted",
        "rich.align",
        "os",
        "rich.constrain",
        "collections",
        "rich.console.Console.rule",
        "rich.jupyter",
        "rich.columns.Columns"
    ],
    "rich.align": [
        "rich.console.Group.__init__",
        "rich.align.Align.center",
        "rich.measure",
        "rich.console.Console.__init__",
        "typing",
        "rich.align.Align.right",
        "rich.align.VerticalCenter",
        "rich.segment",
        "rich.align.Align.left",
        "rich.align.Align",
        "rich.console",
        "rich.panel.Panel.__init__",
        "rich.console.Console.print",
        "rich.style",
        "rich.panel",
        "rich.highlighter",
        "rich.constrain",
        "typing_extensions",
        "rich.jupyter"
    ],
    "rich.constrain": [
        "rich.measure",
        "rich.console",
        "typing",
        "rich.constrain.Constrain",
        "rich.jupyter"
    ],
    "rich.jupyter": [
        "rich.console",
        "rich.jupyter.JupyterRenderable",
        "typing",
        "rich.jupyter.JupyterMixin",
        "rich.terminal_theme",
        "rich.segment"
    ],
    "rich.segment": [
        "rich.segment.ControlType",
        "rich.text.Text.from_markup",
        "rich.console.Console.__init__",
        "typing",
        "rich.repr",
        "operator",
        "rich.segment.SegmentLines",
        "<builtin>.list",
        "rich.console",
        "rich.console.Console.print",
        "rich.text",
        "functools",
        "rich.console.Console.render",
        "enum",
        "rich.style",
        "logging.getLogger",
        "rich.segment.Segment",
        "logging",
        "rich.segment.Segments",
        "rich.syntax",
        "rich.cells",
        "rich.console.Console.rule",
        "rich.syntax.Syntax.__init__"
    ],
    "rich.cells": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "typing",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "re",
        "click._compat._AtomicFile.__init__",
        "<builtin>.print",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools",
        "rich.panel.Panel._title",
        "rich.cells.get_character_cell_size",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "re.compile",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "<builtin>.range",
        "click._winconsole.ConsoleStream.__init__",
        "click.decorators.pass_context.new_func",
        "rich.align.Align.__init__",
        "functools.singledispatch.wrapper",
        "rich_rst.RestructuredText.__init__",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich._cell_widths",
        "rich.styled.Styled.__init__",
        "rich.cells.chop_cells",
        "rich.cells.set_cell_size",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "rich._cell_widths": [],
    "rich.cells.get_character_cell_size": [
        "<builtin>.ord",
        "rich.cells._get_codepoint_cell_size"
    ],
    "rich.cells._get_codepoint_cell_size": [
        "<builtin>.len"
    ],
    "rich.cells.chop_cells": [
        "<builtin>.reversed",
        "rich.cells.get_character_cell_size"
    ],
    "rich.cells.set_cell_size": [
        "<map>",
        "rich.cells.cell_len",
        "<builtin>.len",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "rich.cells.cell_len": [
        "<builtin>.sum",
        "rich.cells.cached_cell_len",
        "rich.cells.get_character_cell_size",
        "<builtin>.len"
    ],
    "rich.cells.cached_cell_len": [
        "<builtin>.sum",
        "rich.cells.get_character_cell_size"
    ],
    "<builtin>.sum": [],
    "rich.repr": [
        "rich.console",
        "rich.console.Console.__init__",
        "typing",
        "rich.repr.Foo",
        "rich.console.Console.rule",
        "functools",
        "rich.console.Console.print",
        "inspect",
        "typing.TypeVar.__init__",
        "typing.overload",
        "rich.repr.ReprError"
    ],
    "rich.repr.ReprError": [],
    "rich.repr.Foo": [],
    "rich.console.Console.__init__": [
        "rich.console._is_jupyter",
        "<builtin>.int",
        "rich.console.detect_legacy_windows",
        "rich.theme.ThemeStack.__init__",
        "threading.RLock",
        "rich._log_render.LogRender.__init__",
        "rich.console.Console._detect_color_system"
    ],
    "rich.segment.ControlType": [],
    "rich.segment.Segment": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "<builtin>.classmethod",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "<builtin>.property",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "rich.segment.Segments": [],
    "rich.segment.SegmentLines": [],
    "rich.syntax": [
        "rich.measure",
        "rich.console.Console.__init__",
        "abc",
        "typing",
        "posixpath",
        "pygments.lexers",
        "re",
        "rich.segment",
        "rich.syntax.Syntax.from_path",
        "rich.syntax.ANSISyntaxTheme",
        "pygments.lexer",
        "argparse.ArgumentParser.__init__",
        "rich.console",
        "rich.syntax.Syntax",
        "rich.console.Console.print",
        "rich.text",
        "rich.syntax._SyntaxHighlightRange",
        "rich.style",
        "rich.containers",
        "argparse",
        "pygments.util",
        "rich._loop",
        "pygments.style",
        "rich.cells",
        "platform",
        "rich.syntax.PygmentsSyntaxTheme",
        "argparse.ArgumentParser.parse_args",
        "pygments.token",
        "rich.syntax.SyntaxTheme",
        "rich.style.Style.__init__",
        "codecs.StreamRecoder.read",
        "argparse._ActionsContainer.add_argument",
        "textwrap",
        "rich.color",
        "pygments.styles",
        "platform.system",
        "rich.syntax.Syntax.__init__",
        "rich.jupyter",
        "rich.padding"
    ],
    "textwrap": [
        "textwrap.TextWrapper",
        "re.compile",
        "textwrap.dedent",
        "re",
        "<builtin>.print"
    ],
    "textwrap.TextWrapper": [
        "<builtin>.ord",
        "re.compile",
        "re.escape"
    ],
    "<str>.translate": [],
    "textwrap.dedent": [
        "re.sub",
        "<builtin>.enumerate",
        "<builtin>.zip",
        "<str>.split"
    ],
    "pygments.lexer": [
        "pygments.lexer.include",
        "<builtin>.staticmethod",
        "re",
        "pygments.lexer._inherit",
        "pygments.filter",
        "pygments.regexopt",
        "pygments.lexer.Lexer",
        "pygments.lexer.RegexLexerMeta",
        "pygments.lexer._PseudoMatch",
        "pygments.lexer.ExtendedRegexLexer",
        "pygments.lexer.ProfilingRegexLexer",
        "pygments.lexer.LexerContext",
        "pygments.util",
        "pygments.lexer.DelegatingLexer",
        "pygments.lexer.RegexLexer",
        "pygments.filters",
        "pygments.lexer.ProfilingRegexLexerMeta",
        "pygments.lexer.LexerMeta",
        "pygments.token",
        "pygments.lexer._This",
        "pygments.lexer.words",
        "pygments.lexer.default",
        "pygments.lexer.combined"
    ],
    "pygments.filter": [
        "pygments.filter.Filter",
        "pygments.filter.FunctionFilter"
    ],
    "pygments.filter.Filter": [],
    "pygments.filter.FunctionFilter": [],
    "pygments.filters": [
        "pygments.token",
        "pygments.filters.GobbleFilter",
        "pygments.util",
        "pygments.filters.ErrorToken",
        "pygments.filters.CodeTagFilter",
        "pygments.filters.VisibleWhitespaceFilter",
        "pygments.filters.NameHighlightFilter",
        "re",
        "pygments.filters.TokenMergeFilter",
        "pygments.filters.SymbolFilter",
        "pygments.plugin",
        "pygments.filters.KeywordCaseFilter",
        "pygments.filter",
        "pygments.filters.RaiseOnErrorTokenFilter"
    ],
    "pygments.token": [
        "pygments.token._TokenType",
        "pygments.token._TokenType.__init__"
    ],
    "pygments.token._TokenType": [],
    "pygments.token._TokenType.__init__": [
        "<builtin>.set"
    ],
    "pygments.plugin": [],
    "pygments.filters.CodeTagFilter": [],
    "pygments.filters.SymbolFilter": [],
    "pygments.filters.KeywordCaseFilter": [],
    "pygments.filters.NameHighlightFilter": [],
    "pygments.filters.ErrorToken": [],
    "pygments.filters.RaiseOnErrorTokenFilter": [],
    "pygments.filters.VisibleWhitespaceFilter": [],
    "pygments.filters.GobbleFilter": [],
    "pygments.filters.TokenMergeFilter": [],
    "pygments.regexopt": [
        "re.compile",
        "operator.itemgetter.__init__",
        "posixpath",
        "operator",
        "re"
    ],
    "pygments.lexer.LexerMeta": [],
    "pygments.lexer.Lexer": [],
    "pygments.lexer.DelegatingLexer": [],
    "pygments.lexer.include": [],
    "pygments.lexer._inherit": [],
    "pygments.lexer.combined": [],
    "pygments.lexer._PseudoMatch": [],
    "pygments.lexer._This": [],
    "pygments.lexer.default": [],
    "pygments.lexer.words": [],
    "pygments.lexer.RegexLexerMeta": [],
    "pygments.lexer.RegexLexer": [],
    "pygments.lexer.LexerContext": [],
    "pygments.lexer.ExtendedRegexLexer": [],
    "pygments.lexer.ProfilingRegexLexerMeta": [],
    "pygments.lexer.ProfilingRegexLexer": [],
    "pygments.lexers": [
        "pygments.modeline",
        "<builtin>.list",
        "pygments.lexers._mapping",
        "pygments.util",
        "types",
        "posixpath",
        "fnmatch",
        "re",
        "pygments.lexers._automodule",
        "pygments.plugin"
    ],
    "pygments.lexers._mapping": [],
    "pygments.modeline": [
        "re.compile",
        "re"
    ],
    "pygments.lexers._automodule": [],
    "pygments.style": [
        "pygments.style.StyleMeta",
        "pygments.token",
        "<builtin>.set",
        "pygments.style.Style"
    ],
    "pygments.style.StyleMeta": [],
    "pygments.style.Style": [],
    "pygments.styles": [
        "pygments.util",
        "pygments.plugin"
    ],
    "rich.containers": [
        "rich.measure",
        "rich.console",
        "typing",
        "rich.text",
        "rich.containers.Renderables",
        "typing.TypeVar.__init__",
        "rich.cells",
        "rich.containers.Lines"
    ],
    "rich.text": [
        "rich.measure",
        "rich.console.Console.__init__",
        "typing",
        "operator",
        "re",
        "rich.segment",
        "rich.text.Span",
        "rich.text.Text",
        "rich.console",
        "rich.console.Console.print",
        "functools",
        "rich.control",
        "math",
        "rich.text.Text.__init__",
        "rich.style",
        "rich.containers",
        "rich.emoji",
        "re.compile",
        "rich._loop",
        "rich.align",
        "rich.cells",
        "rich.console.Console.rule",
        "rich._pick",
        "rich._wrap",
        "rich.jupyter"
    ],
    "rich._pick": [
        "typing"
    ],
    "rich._wrap": [
        "rich.console",
        "rich.console.Console.__init__",
        "typing",
        "re.compile",
        "rich._loop",
        "rich.console.Console.print",
        "rich.cells.chop_cells",
        "rich.cells",
        "re",
        "<builtin>.print"
    ],
    "rich.control": [
        "rich.console",
        "rich.console.Console.__init__",
        "typing",
        "rich.control.Control",
        "rich.console.Console.print",
        "rich.console.Console.set_window_title",
        "typing_extensions",
        "rich.segment",
        "<builtin>.range"
    ],
    "rich.control.Control": [
        "<builtin>.classmethod"
    ],
    "rich.emoji": [
        "rich.emoji.Emoji",
        "rich.emoji.NoEmoji",
        "rich.console",
        "rich._emoji_codes",
        "rich.console.Console.__init__",
        "typing",
        "rich._emoji_replace",
        "rich.columns",
        "<map>.keys",
        "rich.columns.Columns.__init__",
        "<builtin>.len",
        "<builtin>.sorted",
        "rich.console.Console.print",
        "rich.console.Console.save_html",
        "typing_extensions",
        "rich.segment",
        "rich.style",
        "rich.jupyter"
    ],
    "rich._emoji_codes": [],
    "rich._emoji_replace": [
        "typing",
        "re.compile",
        "re",
        "rich._emoji_codes"
    ],
    "rich.emoji.NoEmoji": [],
    "rich.emoji.Emoji": [
        "<builtin>.classmethod"
    ],
    "rich.columns.Columns.__init__": [
        "<builtin>.list"
    ],
    "rich.measure": [
        "rich.protocol",
        "rich.console",
        "rich.errors",
        "typing",
        "operator",
        "rich.measure.Measurement"
    ],
    "rich.protocol": [
        "inspect",
        "typing",
        "rich.console"
    ],
    "rich.measure.Measurement": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.text.Span": [],
    "rich.text.Text": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.text.Text.__init__": [
        "rich.control.strip_control_codes",
        "<builtin>.len"
    ],
    "rich.control.strip_control_codes": [
        "<str>.translate"
    ],
    "rich.containers.Renderables": [],
    "rich.containers.Lines": [
        "typing.overload"
    ],
    "rich.padding": [
        "rich.padding.Padding.__init__",
        "rich.measure",
        "rich.console",
        "rich.padding.Padding",
        "typing",
        "<builtin>.print",
        "rich.segment",
        "rich.style",
        "rich",
        "rich.jupyter"
    ],
    "rich.padding.Padding": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "rich": [
        "rich.console",
        "typing",
        "rich._extension",
        "os",
        "posixpath.abspath",
        "<builtin>.print",
        "ntpath.abspath"
    ],
    "rich._extension": [
        "typing"
    ],
    "rich.padding.Padding.__init__": [
        "rich.padding.Padding.unpack"
    ],
    "rich.padding.Padding.unpack": [
        "typing.cast",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "typing.cast": [],
    "platform.system": [
        "platform.uname"
    ],
    "rich.style.Style.__init__": [
        "<builtin>.sum",
        "rich.style.Style.__init__._make_color",
        "<builtin>.hash",
        "marshal.dumps",
        "random.Random.randint"
    ],
    "rich.syntax.SyntaxTheme": [
        "abc.abstractmethod"
    ],
    "rich.syntax.PygmentsSyntaxTheme": [],
    "rich.syntax.ANSISyntaxTheme": [],
    "rich.syntax._SyntaxHighlightRange": [],
    "rich.syntax.Syntax": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.syntax.Syntax.from_path": [
        "<builtin>.open",
        "rich.syntax.Syntax.__init__",
        "rich.syntax.Syntax.guess_lexer"
    ],
    "rich.syntax.Syntax.guess_lexer": [
        "pygments.lexers.guess_lexer_for_filename",
        "pygments.lexers.get_lexer_by_name"
    ],
    "pygments.lexers.guess_lexer_for_filename": [
        "<list>.append",
        "<builtin>.set",
        "fnmatch",
        "posixpath.basename",
        "<builtin>.len",
        "pygments.lexers._iter_lexerclasses",
        "<list>.sort"
    ],
    "pygments.lexers._iter_lexerclasses": [
        "pygments.lexers._load_lexers",
        "pygments.plugin.find_plugin_lexers",
        "<builtin>.sorted"
    ],
    "pygments.lexers._load_lexers": [
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "pygments.plugin.find_plugin_lexers": [
        "pygments.plugin.iter_entry_points"
    ],
    "pygments.plugin.iter_entry_points": [
        "importlib_metadata.entry_points",
        "importlib_metadata.EntryPoints.select",
        "importlib.metadata.entry_points",
        "pkg_resources",
        "importlib.metadata",
        "importlib_metadata",
        "<builtin>.hasattr"
    ],
    "importlib.metadata": [
        "importlib.metadata.Prepared",
        "abc",
        "importlib.metadata.FastPath",
        "pathlib",
        "posixpath",
        "email",
        "operator",
        "re",
        "csv",
        "functools",
        "zipfile",
        "importlib.abc",
        "importlib.metadata.Distribution",
        "importlib.metadata.EntryPoint",
        "importlib.metadata.FileHash",
        "collections.namedtuple",
        "configparser",
        "importlib.metadata.PackagePath",
        "os",
        "importlib.metadata.PathDistribution",
        "io",
        "importlib.metadata.PackageNotFoundError",
        "collections",
        "importlib.metadata.DistributionFinder",
        "importlib.metadata.MetadataPathFinder",
        "importlib",
        "contextlib"
    ],
    "csv": [
        "csv.unix_dialect",
        "_csv",
        "csv.excel_tab",
        "csv.DictWriter",
        "csv.excel",
        "csv.Dialect",
        "re",
        "csv.Sniffer",
        "io",
        "csv.DictReader"
    ],
    "_csv": [],
    "csv.Dialect": [],
    "csv.excel": [],
    "csv.excel_tab": [],
    "csv.unix_dialect": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "csv.DictWriter": [],
    "csv.Sniffer": [],
    "email": [],
    "pathlib": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "pathlib.WindowsPath",
        "rich.markdown.Markdown.__init__",
        "pathlib._Selector",
        "rich.syntax.Syntax.__init__",
        "pathlib._Flavour",
        "click.core.MultiCommand.result_callback.decorator.function",
        "pathlib.PurePath",
        "posixpath",
        "click.utils.KeepOpenFile.__init__",
        "operator",
        "re",
        "pathlib._Accessor",
        "pathlib._NormalAccessor",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "pathlib._WildcardSelector",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools",
        "pathlib.Path",
        "rich.panel.Panel._title",
        "urllib.parse",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "ntpath",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "pathlib.PureWindowsPath",
        "pathlib._PathParents",
        "pathlib.PurePosixPath",
        "pathlib.PosixPath",
        "os",
        "click.decorators.pass_obj.new_func",
        "io",
        "click._winconsole.ConsoleStream.__init__",
        "click.decorators.pass_context.new_func",
        "rich.align.Align.__init__",
        "functools.singledispatch.wrapper",
        "rich_rst.RestructuredText.__init__",
        "pathlib._PosixFlavour",
        "rich_cli.__main__.ForceWidth.__init__",
        "collections.abc",
        "stat",
        "pathlib._WindowsFlavour",
        "rich.file_proxy.FileProxy.__init__",
        "rich.styled.Styled.__init__",
        "<map>",
        "click.decorators.pass_meta_key.decorator.new_func",
        "fnmatch",
        "pathlib._RecursiveWildcardSelector",
        "click.utils.LazyFile.__init__",
        "pathlib._TerminatingSelector",
        "<builtin>.hasattr",
        "pathlib._PreciseSelector",
        "rich.padding.Padding.__init__"
    ],
    "urllib.parse": [
        "urllib.parse.ParseResultBytes",
        "urllib.parse._fix_result_transcoding",
        "re",
        "warnings",
        "urllib.parse._NetlocResultMixinBytes",
        "<builtin>.bytes",
        "urllib.parse.DefragResult",
        "urllib.parse.SplitResultBytes",
        "re.compile",
        "urllib.parse._ResultMixinBytes",
        "collections.namedtuple",
        "urllib.parse._ResultMixinStr",
        "urllib.parse._NetlocResultMixinBase",
        "<builtin>.frozenset",
        "urllib.parse.SplitResult",
        "urllib.parse._NetlocResultMixinStr",
        "urllib.parse.ParseResult",
        "collections",
        "urllib.parse.Quoter",
        "urllib.parse.DefragResultBytes"
    ],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse.DefragResult": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.ParseResult": [],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse._fix_result_transcoding": [],
    "urllib.parse.Quoter": [],
    "pathlib._Flavour": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.range",
        "<builtin>.set"
    ],
    "pathlib._PosixFlavour": [],
    "pathlib._Accessor": [],
    "pathlib._NormalAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.hasattr"
    ],
    "pathlib._Selector": [],
    "pathlib._TerminatingSelector": [],
    "pathlib._PreciseSelector": [],
    "pathlib._WildcardSelector": [],
    "pathlib._RecursiveWildcardSelector": [],
    "pathlib._PathParents": [],
    "pathlib.PurePath": [
        "operator.attrgetter.__init__",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.map",
        "<str>.split"
    ],
    "pathlib.PurePosixPath": [],
    "pathlib.PureWindowsPath": [],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "pathlib.PosixPath": [],
    "pathlib.WindowsPath": [],
    "zipfile": [
        "binascii",
        "zipfile.Path",
        "zipfile._ZipWriteFile",
        "posixpath",
        "zipfile.CompleteDirs",
        "zipfile.ZipFile",
        "zipfile._Tellable",
        "zlib",
        "zipfile.BadZipFile",
        "threading",
        "zipfile.LZMADecompressor",
        "functools",
        "zipfile.LargeZipFile",
        "importlib.util",
        "zipfile.main",
        "struct",
        "zipfile._SharedFile",
        "zipfile.ZipExtFile",
        "os",
        "io",
        "lzma",
        "shutil",
        "zipfile.ZipInfo",
        "stat",
        "zipfile.PyZipFile",
        "zipfile.LZMACompressor",
        "zipfile.FastLookup",
        "contextlib",
        "bz2"
    ],
    "importlib.util": [
        "importlib.abc",
        "importlib.util._LazyModule",
        "contextlib.contextmanager",
        "warnings",
        "functools",
        "types",
        "importlib.util.LazyLoader",
        "contextlib"
    ],
    "importlib.util._LazyModule": [],
    "importlib.util.LazyLoader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipfile.BadZipFile": [],
    "zipfile.LargeZipFile": [],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile.LZMACompressor": [],
    "zipfile.LZMADecompressor": [],
    "zipfile._SharedFile": [],
    "zipfile._Tellable": [],
    "zipfile.ZipExtFile": [],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "zipfile.PyZipFile": [],
    "zipfile.CompleteDirs": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipfile.FastLookup": [],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "zipfile.main": [
        "argparse.ArgumentParser.parse_args",
        "argparse",
        "zipfile.main.addToZip",
        "argparse.ArgumentParser.__init__",
        "zipfile.ZipFile.testzip",
        "zipfile.ZipFile.__enter__",
        "zipfile.ZipFile.extractall",
        "zipfile.ZipFile.printdir",
        "posixpath.dirname",
        "argparse._ActionsContainer.add_argument",
        "zipfile.ZipFile.__init__",
        "<list>.pop",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.print",
        "ntpath.dirname",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "zipfile.ZipFile.__exit__"
    ],
    "zipfile.ZipFile.__init__": [
        "<builtin>.isinstance",
        "zipfile._Tellable.tell",
        "zipfile._check_compression",
        "os._fspath",
        "threading.RLock",
        "_io.open",
        "zipfile.ZipFile._RealGetContents",
        "<builtin>.getattr",
        "zipfile._Tellable.__init__",
        "zipfile.ZipFile._fpclose",
        "<builtin>.ValueError"
    ],
    "zipfile._check_compression": [
        "<builtin>.NotImplementedError",
        "<builtin>.RuntimeError"
    ],
    "zipfile.ZipFile._RealGetContents": [
        "<list>.append",
        "<builtin>.NotImplementedError",
        "_io.BytesIO",
        "zipfile.ZipInfo.__init__",
        "zipfile.ZipInfo._decodeExtra",
        "zipfile._EndRecData",
        "zipfile.ZipFile.read",
        "<builtin>.len",
        "<builtin>.print"
    ],
    "zipfile._EndRecData": [
        "<builtin>.list",
        "zipfile._Tellable.tell",
        "zipfile._EndRecData64",
        "zipfile.ZipFile.read",
        "<builtin>.len",
        "<builtin>.max",
        "<str>.rfind"
    ],
    "zipfile._EndRecData64": [
        "zipfile.ZipFile.read",
        "<builtin>.len"
    ],
    "_io.BytesIO": [],
    "zipfile.ZipInfo.__init__": [
        "<str>.find",
        "pathlib.Path.replace",
        "<str>.replace",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipInfo._decodeExtra": [
        "<builtin>.len"
    ],
    "zipfile._Tellable.__init__": [],
    "zipfile.ZipFile._fpclose": [
        "xml.sax.expatreader.ExpatParser.close",
        "zipfile.ZipFile.close",
        "xmlrpc.client.GzipDecodedResponse.close",
        "zipfile._Tellable.close"
    ],
    "zipfile._Tellable.close": [
        "xml.sax.expatreader.ExpatParser.close",
        "zipfile.ZipFile.close",
        "xmlrpc.client.GzipDecodedResponse.close",
        "zipfile._Tellable.close"
    ],
    "zipfile._Tellable.tell": [],
    "zipfile.ZipFile.__enter__": [],
    "zipfile.ZipFile.__exit__": [
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile.close": [
        "<builtin>.ValueError"
    ],
    "zipfile.main.addToZip": [
        "zipfile.main.addToZip",
        "posixpath.join",
        "genericpath.isdir",
        "zipfile.ZipFile.write",
        "<builtin>.sorted",
        "ntpath.join",
        "nt._isdir",
        "genericpath.isfile"
    ],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "nt._isdir": [],
    "zipfile.ZipFile.write": [
        "zipfile.ZipInfo.from_file",
        "zipfile.ZipFile.open",
        "shutil.copyfileobj",
        "zipfile.ZipInfo.is_dir",
        "<builtin>.open",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipInfo.from_file": [
        "ntpath.splitdrive",
        "stat.S_ISDIR",
        "<builtin>.isinstance",
        "posixpath.normpath",
        "os._fspath",
        "zipfile.ZipInfo.__init__",
        "ntpath.normpath",
        "posixpath.splitdrive"
    ],
    "posixpath.splitdrive": [
        "os._fspath"
    ],
    "zipfile.ZipInfo.is_dir": [],
    "zipfile.ZipFile.open": [
        "<builtin>.NotImplementedError",
        "zipfile._SharedFile.close",
        "<builtin>.isinstance",
        "zipfile.ZipExtFile.__init__",
        "<builtin>.TypeError",
        "zipfile._SharedFile.read",
        "zipfile.ZipFile.getinfo",
        "zipfile.ZipInfo.__init__",
        "zipfile.ZipFile._open_to_write",
        "<builtin>.type",
        "<builtin>.len",
        "zipfile._SharedFile.__init__",
        "<builtin>.RuntimeError",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipFile.getinfo": [
        "<builtin>.KeyError",
        "<map>.get"
    ],
    "zipfile.ZipFile._open_to_write": [
        "zipfile._Tellable.tell",
        "zipfile.ZipInfo.FileHeader",
        "zipfile._Tellable.write",
        "zipfile.ZipFile.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "zipfile.ZipFile._writecheck",
        "zipfile._ZipWriteFile.__init__",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipFile._writecheck": [
        "zipfile._check_compression",
        "warnings",
        "<builtin>.len",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipInfo.FileHeader": [
        "zipfile.ZipInfo._encodeFilenameFlags",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "zipfile.ZipInfo._encodeFilenameFlags": [
        "<str>.encode"
    ],
    "zipfile._Tellable.write": [
        "zipfile._Tellable.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "zipfile.ZipFile.write"
    ],
    "zipfile._ZipWriteFile.__init__": [
        "zipfile._get_compressor"
    ],
    "zipfile._get_compressor": [
        "zipfile.LZMACompressor.__init__"
    ],
    "zipfile.LZMACompressor.__init__": [],
    "zipfile._SharedFile.__init__": [],
    "zipfile._SharedFile.read": [],
    "zipfile.ZipExtFile.__init__": [
        "<builtin>.RuntimeError",
        "zipfile._Tellable.tell",
        "<map>",
        "zipfile.ZipExtFile._init_decrypter",
        "zipfile._get_decompressor",
        "<builtin>.hasattr",
        "<list>"
    ],
    "zipfile._get_decompressor": [
        "zipfile.LZMADecompressor.__init__",
        "<builtin>.NotImplementedError",
        "<map>.get",
        "zipfile._check_compression"
    ],
    "zipfile.LZMADecompressor.__init__": [],
    "zipfile.ZipExtFile._init_decrypter": [
        "zipfile._SharedFile.read",
        "zipfile._ZipDecrypter",
        "zipfile._ZipDecrypter.decrypter"
    ],
    "zipfile._ZipDecrypter": [
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "zipfile._ZipDecrypter.update_keys": [
        "zipfile._ZipDecrypter.crc32"
    ],
    "zipfile._ZipDecrypter.crc32": [],
    "zipfile._SharedFile.close": [
        "zipfile.ZipFile._fpclose"
    ],
    "shutil.copyfileobj": [
        "tarfile._Stream.write",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "lzma.LZMAFile.write",
        "socketserver._SocketWriter.write",
        "bz2.BZ2File.write",
        "gzip.GzipFile.write",
        "bz2.BZ2File.read",
        "tarfile._Stream.read"
    ],
    "zipfile.ZipFile.extractall": [
        "zipp.FastLookup.namelist",
        "os._fspath",
        "zipp.CompleteDirs.namelist",
        "zipfile.ZipFile.namelist",
        "zipfile.ZipFile._extract_member"
    ],
    "zipfile.ZipFile.namelist": [],
    "zipfile.ZipFile._extract_member": [
        "ntpath.splitdrive",
        "zipfile.ZipFile.open",
        "<builtin>.isinstance",
        "posixpath.normpath",
        "posixpath.join",
        "shutil.copyfileobj",
        "os.makedirs",
        "ntpath.normpath",
        "zipfile.ZipFile._sanitize_windows_name",
        "zipfile.ZipFile.getinfo",
        "genericpath.exists",
        "<str>.replace",
        "nt._isdir",
        "<builtin>.open",
        "genericpath.isdir",
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.splitdrive",
        "ntpath.dirname"
    ],
    "zipfile.ZipFile._sanitize_windows_name": [
        "<str>.split",
        "<str>.translate",
        "<builtin>.len"
    ],
    "os.makedirs": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "genericpath.isdir",
        "posixpath.split",
        "ntpath.split",
        "os.makedirs",
        "nt._isdir",
        "genericpath.exists"
    ],
    "zipfile.ZipFile.printdir": [
        "<builtin>.print"
    ],
    "zipfile.ZipFile.testzip": [
        "zipfile.ZipFile.open"
    ],
    "configparser": [
        "configparser.RawConfigParser",
        "configparser.NoOptionError",
        "configparser.SafeConfigParser",
        "<builtin>.object",
        "re",
        "warnings",
        "functools",
        "configparser.DuplicateOptionError",
        "configparser.Interpolation",
        "configparser.DuplicateSectionError",
        "configparser.Error",
        "configparser.LegacyInterpolation",
        "configparser.SectionProxy",
        "configparser.InterpolationSyntaxError",
        "configparser.InterpolationError",
        "configparser.MissingSectionHeaderError",
        "configparser.BasicInterpolation",
        "os",
        "configparser.ParsingError",
        "io",
        "configparser.ConfigParser",
        "configparser.InterpolationDepthError",
        "configparser.InterpolationMissingOptionError",
        "collections.abc",
        "configparser.ConverterMapping",
        "configparser.ExtendedInterpolation",
        "collections",
        "configparser.NoSectionError"
    ],
    "configparser.Error": [],
    "configparser.NoSectionError": [],
    "configparser.DuplicateSectionError": [],
    "configparser.DuplicateOptionError": [],
    "configparser.NoOptionError": [],
    "configparser.InterpolationError": [],
    "configparser.InterpolationMissingOptionError": [],
    "configparser.InterpolationSyntaxError": [],
    "configparser.InterpolationDepthError": [],
    "configparser.ParsingError": [
        "<builtin>.property"
    ],
    "configparser.MissingSectionHeaderError": [],
    "configparser.Interpolation": [],
    "configparser.BasicInterpolation": [
        "re.compile"
    ],
    "configparser.ExtendedInterpolation": [
        "re.compile"
    ],
    "configparser.LegacyInterpolation": [
        "<builtin>.staticmethod",
        "re.compile"
    ],
    "configparser.RawConfigParser": [
        "re.compile",
        "<builtin>.property"
    ],
    "configparser.ConfigParser": [],
    "configparser.SafeConfigParser": [],
    "configparser.SectionProxy": [
        "<builtin>.property"
    ],
    "configparser.ConverterMapping": [
        "re.compile"
    ],
    "importlib.abc": [
        "importlib.abc.Finder",
        "importlib.abc.Loader",
        "warnings",
        "abc",
        "importlib.abc.FileLoader",
        "importlib.abc.ResourceReader",
        "importlib._bootstrap_external",
        "importlib.abc.SourceLoader",
        "importlib._bootstrap",
        "importlib.abc.MetaPathFinder",
        "importlib.abc.InspectLoader",
        "importlib.abc.ExecutionLoader",
        "importlib.abc._register",
        "importlib.machinery",
        "importlib.abc.ResourceLoader",
        "importlib.abc.PathEntryFinder"
    ],
    "importlib.abc.Finder": [],
    "importlib.abc.MetaPathFinder": [],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.PathEntryFinder": [],
    "importlib.abc.Loader": [],
    "importlib.abc.ResourceLoader": [],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib.abc.ExecutionLoader": [],
    "importlib.abc.FileLoader": [],
    "importlib.abc.SourceLoader": [],
    "importlib.abc.ResourceReader": [],
    "importlib.metadata.PackageNotFoundError": [],
    "importlib.metadata.EntryPoint": [
        "<builtin>.classmethod",
        "re.compile",
        "<builtin>.property"
    ],
    "importlib.metadata.PackagePath": [],
    "importlib.metadata.FileHash": [],
    "importlib.metadata.Distribution": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder": [
        "abc.abstractmethod",
        "importlib.metadata.DistributionFinder.Context.__init__",
        "importlib.metadata.DistributionFinder.Context"
    ],
    "importlib.metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "<builtin>.vars": [],
    "importlib.metadata.FastPath": [],
    "importlib.metadata.Prepared": [],
    "importlib.metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.PathDistribution": [],
    "importlib_metadata": [
        "importlib_metadata.FastPath",
        "abc",
        "typing",
        "importlib_metadata._py39compat",
        "importlib_metadata.Sectioned",
        "importlib_metadata.EntryPoint",
        "importlib_metadata.Lookup",
        "pathlib",
        "posixpath",
        "email",
        "operator",
        "re",
        "importlib_metadata._meta",
        "importlib_metadata.DistributionFinder",
        "importlib_metadata.FileHash",
        "importlib_metadata._itertools",
        "csv",
        "warnings",
        "functools",
        "zipp",
        "importlib_metadata.PathDistribution",
        "importlib.abc",
        "importlib_metadata.Distribution",
        "importlib_metadata.PackageNotFoundError",
        "importlib_metadata.MetadataPathFinder",
        "importlib_metadata._compat",
        "importlib_metadata.Prepared",
        "os",
        "importlib_metadata.DeprecatedTuple",
        "collections",
        "importlib_metadata._adapters",
        "textwrap",
        "importlib_metadata.PackagePath",
        "importlib",
        "contextlib",
        "importlib_metadata.EntryPoints"
    ],
    "zipp": [
        "zipp.py310compat",
        "zipp.InitializedState",
        "zipp.CompleteDirs",
        "pathlib",
        "posixpath",
        "fnmatch",
        "re",
        "zipp.Path",
        "zipfile",
        "contextlib",
        "io",
        "zipp.FastLookup"
    ],
    "zipp.py310compat": [
        "<str>.replace",
        "<builtin>.eval",
        "io"
    ],
    "<builtin>.eval": [],
    "zipp.InitializedState": [],
    "zipp.CompleteDirs": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipp.FastLookup": [],
    "zipp.Path": [
        "<builtin>.property"
    ],
    "importlib_metadata._adapters": [
        "importlib_metadata._text",
        "textwrap",
        "email.message",
        "re",
        "importlib_metadata._adapters.Message"
    ],
    "email.message": [
        "email.message.Message",
        "uu",
        "email.message.EmailMessage",
        "re.compile",
        "quopri",
        "email._policybase",
        "email.message.MIMEPart",
        "email.utils",
        "email.charset",
        "re",
        "email.errors",
        "io",
        "email._encoded_words"
    ],
    "uu": [
        "binascii",
        "uu.Error",
        "os",
        "uu.test"
    ],
    "uu.Error": [],
    "uu.test": [
        "uu.encode",
        "<builtin>.isinstance",
        "optparse.OptionContainer.add_option",
        "optparse",
        "optparse.OptionParser.error",
        "<builtin>.open",
        "<builtin>.len",
        "<builtin>.print",
        "optparse.OptionParser.__init__",
        "uu.decode",
        "optparse.OptionParser.parse_args"
    ],
    "optparse": [
        "optparse.OptionContainer",
        "optparse.OptParseError",
        "optparse.OptionValueError",
        "optparse.BadOptionError",
        "optparse.AmbiguousOptionError",
        "optparse.HelpFormatter",
        "optparse.IndentedHelpFormatter",
        "textwrap",
        "optparse.OptionConflictError",
        "os",
        "gettext",
        "optparse.Option",
        "optparse.OptionError",
        "optparse.OptionGroup",
        "optparse.Values",
        "optparse.TitledHelpFormatter",
        "optparse.OptionParser",
        "optparse.gettext"
    ],
    "optparse.OptParseError": [],
    "optparse.OptionError": [],
    "optparse.OptionConflictError": [],
    "optparse.OptionValueError": [],
    "optparse.BadOptionError": [],
    "optparse.AmbiguousOptionError": [],
    "optparse.HelpFormatter": [],
    "optparse.IndentedHelpFormatter": [],
    "optparse.TitledHelpFormatter": [],
    "optparse.gettext": [],
    "optparse.Option": [],
    "optparse.Values": [],
    "optparse.OptionContainer": [],
    "optparse.OptionGroup": [],
    "optparse.OptionParser": [],
    "optparse.OptionParser.__init__": [
        "optparse.HelpFormatter.set_parser",
        "optparse.IndentedHelpFormatter.__init__",
        "optparse.OptionParser._populate_option_list",
        "optparse.OptionContainer.__init__",
        "optparse.OptionParser.set_usage",
        "optparse.OptionParser._init_parsing_state"
    ],
    "optparse.OptionContainer.__init__": [
        "optparse.OptionContainer.set_conflict_handler",
        "optparse.OptionGroup._create_option_list",
        "optparse.OptionParser._create_option_list",
        "optparse.OptionContainer.set_description"
    ],
    "optparse.OptionContainer.set_conflict_handler": [
        "<builtin>.ValueError"
    ],
    "optparse.OptionContainer.set_description": [],
    "optparse.OptionParser.set_usage": [
        "optparse.gettext",
        "<str>.lower",
        "<str>.startswith"
    ],
    "optparse.IndentedHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.HelpFormatter.__init__": [
        "<builtin>.min",
        "<builtin>.max",
        "<builtin>.int"
    ],
    "optparse.HelpFormatter.set_parser": [],
    "optparse.OptionParser._populate_option_list": [
        "optparse.OptionContainer.add_options",
        "optparse.OptionParser._add_version_option",
        "optparse.OptionParser._add_help_option"
    ],
    "optparse.OptionContainer.add_options": [
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionContainer.add_option": [
        "<list>.append",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "optparse.OptionContainer._check_conflict",
        "optparse.Option.__init__",
        "<builtin>.len",
        "optparse.OptionParser.__init__"
    ],
    "optparse.OptionContainer._check_conflict": [
        "optparse.OptionError.__init__",
        "<list>.append"
    ],
    "optparse.OptionError.__init__": [
        "<builtin>.str"
    ],
    "optparse.OptionParser._add_version_option": [
        "optparse.OptionContainer.add_option",
        "optparse.gettext"
    ],
    "optparse.OptionParser._add_help_option": [
        "optparse.OptionContainer.add_option",
        "optparse.gettext"
    ],
    "optparse.OptionParser._init_parsing_state": [],
    "optparse.OptionParser.parse_args": [
        "optparse.OptionParser.get_default_values",
        "docutils.frontend.OptionParser.check_values",
        "optparse.OptionParser._get_args",
        "optparse.OptionParser._process_args",
        "optparse.OptionParser.error",
        "<builtin>.str",
        "optparse.OptionParser.check_values",
        "docutils.frontend.OptionParser.get_default_values"
    ],
    "optparse.OptionParser._get_args": [],
    "optparse.OptionParser.get_default_values": [
        "<builtin>.isinstance",
        "<map>.copy",
        "optparse.OptionParser._get_all_options",
        "<map>.get",
        "optparse.Values.__init__"
    ],
    "optparse.Values.__init__": [
        "<map>.items",
        "<builtin>.setattr"
    ],
    "optparse.OptionParser._get_all_options": [],
    "optparse.OptionParser._process_args": [
        "<list>.append",
        "optparse.OptionParser._process_short_opts",
        "optparse.OptionParser._process_long_opt",
        "<builtin>.len"
    ],
    "optparse.OptionParser._process_short_opts": [
        "optparse.BadOptionError.__init__",
        "<builtin>.tuple",
        "optparse.ngettext",
        "optparse.OptionParser.error",
        "<map>.get",
        "<builtin>.len"
    ],
    "optparse.BadOptionError.__init__": [],
    "optparse.ngettext": [],
    "optparse.OptionParser.error": [
        "optparse.OptionParser.get_prog_name",
        "optparse.OptionParser.exit",
        "optparse.OptionParser.print_usage"
    ],
    "optparse.OptionParser.print_usage": [
        "<builtin>.print",
        "optparse.OptionParser.get_usage"
    ],
    "optparse.OptionParser.get_usage": [
        "optparse.OptionParser.expand_prog_name",
        "optparse.IndentedHelpFormatter.format_usage"
    ],
    "optparse.OptionParser.expand_prog_name": [
        "<str>.replace"
    ],
    "optparse.IndentedHelpFormatter.format_usage": [
        "optparse.gettext"
    ],
    "optparse.OptionParser.get_prog_name": [
        "ntpath.basename",
        "posixpath.basename"
    ],
    "optparse.OptionParser.exit": [
        "rich.file_proxy.FileProxy.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "codecs.StreamRecoder.write",
        "click._winconsole.ConsoleStream.write"
    ],
    "optparse.OptionParser._process_long_opt": [
        "optparse.OptionParser._match_long_opt",
        "<builtin>.tuple",
        "optparse.ngettext",
        "optparse.OptionParser.error",
        "<builtin>.len",
        "optparse.gettext"
    ],
    "optparse.OptionParser._match_long_opt": [
        "optparse._match_abbrev"
    ],
    "optparse._match_abbrev": [
        "<map>.keys",
        "optparse.BadOptionError.__init__",
        "optparse.AmbiguousOptionError.__init__",
        "<builtin>.len"
    ],
    "optparse.AmbiguousOptionError.__init__": [
        "optparse.BadOptionError.__init__"
    ],
    "optparse.OptionParser.check_values": [],
    "uu.encode": [
        "<builtin>.isinstance",
        "<str>.replace",
        "<builtin>.len",
        "ntpath.basename",
        "<str>.encode",
        "posixpath.basename",
        "<builtin>.open",
        "<list>.append"
    ],
    "uu.decode": [
        "<list>.append",
        "codecs.StreamRecoder.write",
        "<builtin>.isinstance",
        "<builtin>.int",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "<builtin>.open",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.len",
        "rich.file_proxy.FileProxy.write",
        "genericpath.exists"
    ],
    "quopri": [
        "binascii",
        "quopri.main"
    ],
    "quopri.main": [
        "codecs.StreamRecoder.write",
        "getopt.getopt",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "getopt",
        "<builtin>.open",
        "quopri.decode",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "quopri.encode",
        "<builtin>.print"
    ],
    "quopri.encode": [
        "<builtin>.bytes",
        "<builtin>.len",
        "quopri.needsquoting",
        "quopri.encode.write",
        "<list>.append",
        "quopri.quote"
    ],
    "quopri.needsquoting": [
        "<builtin>.isinstance"
    ],
    "quopri.quote": [
        "<builtin>.ord",
        "<builtin>.bytes",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "quopri.encode.write": [
        "quopri.quote"
    ],
    "quopri.decode": [
        "quopri.ishex",
        "<builtin>.bytes",
        "quopri.unhex",
        "<builtin>.len"
    ],
    "quopri.ishex": [
        "<builtin>.isinstance"
    ],
    "quopri.unhex": [
        "<builtin>.ord",
        "<builtin>.repr",
        "<builtin>.bytes"
    ],
    "email.utils": [
        "random",
        "datetime",
        "re.compile",
        "email._parseaddr",
        "socket",
        "os",
        "re",
        "urllib.parse",
        "email.charset"
    ],
    "email._parseaddr": [
        "email._parseaddr.AddrlistClass",
        "calendar",
        "email._parseaddr.AddressList"
    ],
    "calendar": [
        "<builtin>.range",
        "calendar.main",
        "calendar.IllegalWeekdayError",
        "calendar.HTMLCalendar",
        "datetime.date.toordinal",
        "datetime",
        "calendar._localized_day",
        "calendar.LocaleHTMLCalendar",
        "calendar.LocaleTextCalendar",
        "calendar.TextCalendar",
        "calendar._localized_month.__init__",
        "calendar._localized_month",
        "calendar.IllegalMonthError",
        "calendar.Calendar",
        "locale",
        "calendar._localized_day.__init__",
        "calendar.different_locale"
    ],
    "calendar.IllegalMonthError": [],
    "calendar.IllegalWeekdayError": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.TextCalendar": [],
    "calendar.HTMLCalendar": [],
    "calendar.different_locale": [],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleHTMLCalendar": [],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_before_year",
        "datetime._days_before_month",
        "datetime._days_in_month"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "calendar.main": [
        "<list>",
        "<builtin>.dict",
        "argparse.ArgumentParser.__init__",
        "calendar.TextCalendar.formatmonth",
        "calendar.LocaleHTMLCalendar.__init__",
        "argparse._ActionsContainer.add_argument_group",
        "rich.file_proxy.FileProxy.write",
        "calendar.LocaleTextCalendar.__init__",
        "argparse",
        "argparse.ArgumentParser.error",
        "codecs.StreamRecoder.write",
        "click._winconsole.ConsoleStream.write",
        "argparse.ArgumentParser.parse_args",
        "datetime.date.today",
        "<map>",
        "argparse._ActionsContainer.add_argument",
        "calendar.HTMLCalendar.formatyearpage",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "calendar.TextCalendar.formatyear"
    ],
    "calendar.LocaleTextCalendar.__init__": [
        "calendar.Calendar.__init__",
        "locale.getdefaultlocale"
    ],
    "calendar.Calendar.__init__": [],
    "calendar.TextCalendar.formatmonth": [
        "calendar.Calendar.monthdays2calendar",
        "calendar.TextCalendar.formatweek",
        "calendar.TextCalendar.formatmonthname",
        "calendar.LocaleTextCalendar.formatmonthname",
        "calendar.TextCalendar.formatweekheader",
        "<str>.rstrip",
        "<builtin>.max"
    ],
    "calendar.TextCalendar.formatmonthname": [
        "<str>.center"
    ],
    "<str>.center": [],
    "calendar.LocaleTextCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.different_locale.__init__": [],
    "<str>.rstrip": [],
    "calendar.TextCalendar.formatweekheader": [
        "calendar.TextCalendar.formatweekday",
        "calendar.Calendar.iterweekdays",
        "calendar.LocaleTextCalendar.formatweekday"
    ],
    "calendar.TextCalendar.formatweekday": [],
    "calendar.LocaleTextCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.Calendar.iterweekdays": [
        "<builtin>.range"
    ],
    "calendar.Calendar.monthdays2calendar": [
        "calendar.Calendar.itermonthdays2",
        "<builtin>.range",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "calendar.Calendar.itermonthdays2": [
        "<builtin>.enumerate",
        "calendar.Calendar.itermonthdays"
    ],
    "calendar.Calendar.itermonthdays": [
        "itertools.repeat",
        "calendar.monthrange",
        "<builtin>.range"
    ],
    "calendar.monthrange": [
        "calendar.weekday",
        "calendar.IllegalMonthError.__init__",
        "calendar.isleap"
    ],
    "calendar.IllegalMonthError.__init__": [],
    "calendar.weekday": [
        "datetime.date.weekday"
    ],
    "datetime.date.weekday": [
        "datetime.date.toordinal"
    ],
    "calendar.isleap": [],
    "itertools.repeat": [],
    "calendar.TextCalendar.formatweek": [
        "calendar.TextCalendar.formatday"
    ],
    "calendar.TextCalendar.formatday": [
        "<str>.center"
    ],
    "calendar.TextCalendar.formatyear": [
        "<list>.append",
        "<builtin>.len",
        "<builtin>.enumerate",
        "calendar.TextCalendar.formatmonthname",
        "<builtin>.min",
        "calendar.LocaleTextCalendar.formatmonthname",
        "calendar.TextCalendar.formatweekheader",
        "calendar.Calendar.yeardays2calendar",
        "<builtin>.max",
        "<builtin>.range",
        "<list>"
    ],
    "calendar.Calendar.yeardays2calendar": [
        "<builtin>.range",
        "calendar.Calendar.monthdays2calendar",
        "<builtin>.len"
    ],
    "datetime.date.today": [
        "datetime.date.fromtimestamp",
        "datetime.datetime.fromtimestamp"
    ],
    "datetime.date.fromtimestamp": [],
    "calendar.LocaleHTMLCalendar.__init__": [
        "calendar.Calendar.__init__",
        "locale.getdefaultlocale"
    ],
    "calendar.HTMLCalendar.formatyearpage": [
        "<list>"
    ],
    "email._parseaddr.AddrlistClass": [],
    "email._parseaddr.AddressList": [],
    "email.charset": [
        "email.charset.Charset",
        "email.quoprimime",
        "email.base64mime",
        "functools",
        "email.encoders",
        "email.errors"
    ],
    "email.base64mime": [
        "binascii",
        "base64"
    ],
    "email.quoprimime": [
        "string",
        "<builtin>.chr",
        "re",
        "<builtin>.ord",
        "<builtin>.range"
    ],
    "email.errors": [
        "email.errors.MessageError",
        "email.errors.MessageParseError",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.MultipartConversionError",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.InvalidHeaderDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.UndecodableBytesDefect",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.HeaderParseError",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.MessageDefect",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.HeaderDefect",
        "email.errors.BoundaryError",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.CharsetError",
        "email.errors.CloseBoundaryNotFoundDefect"
    ],
    "email.errors.MessageError": [],
    "email.errors.MessageParseError": [],
    "email.errors.HeaderParseError": [],
    "email.errors.BoundaryError": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.CharsetError": [],
    "email.errors.MessageDefect": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "email.encoders": [
        "quopri",
        "base64"
    ],
    "email.charset.Charset": [],
    "email._policybase": [
        "email._policybase.Compat32",
        "abc",
        "email._policybase.Policy",
        "email._policybase._PolicyBase",
        "email.utils",
        "email.header",
        "email.charset"
    ],
    "email.header": [
        "binascii",
        "email.quoprimime",
        "email.base64mime",
        "re.compile",
        "email.header._ValueFormatter",
        "email.charset",
        "re",
        "email.header.Header",
        "email.charset.Charset.__init__",
        "email.errors",
        "email.header._Accumulator"
    ],
    "email.charset.Charset.__init__": [
        "<str>.lower",
        "<builtin>.isinstance",
        "<map>.get",
        "<builtin>.str"
    ],
    "email.header.Header": [],
    "email.header._ValueFormatter": [],
    "email.header._Accumulator": [],
    "email._policybase._PolicyBase": [],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase.Compat32": [],
    "email._encoded_words": [
        "binascii",
        "string",
        "re.compile",
        "functools",
        "base64",
        "email._encoded_words._QByteMap",
        "re",
        "<builtin>.ord",
        "email.errors"
    ],
    "email._encoded_words._QByteMap": [],
    "email.message.Message": [
        "email.iterators"
    ],
    "email.iterators": [
        "io"
    ],
    "email.message.MIMEPart": [],
    "email.message.EmailMessage": [],
    "importlib_metadata._text": [
        "importlib_metadata._text.FoldedCase",
        "re"
    ],
    "importlib_metadata._text.FoldedCase": [
        "_functools.method_cache"
    ],
    "_functools.method_cache": [],
    "importlib_metadata._adapters.Message": [
        "<builtin>.property",
        "<builtin>.set",
        "<builtin>.map"
    ],
    "importlib_metadata._meta": [
        "typing",
        "importlib_metadata._compat",
        "importlib_metadata._meta.PackageMetadata",
        "importlib_metadata._meta.SimplePath",
        "typing.TypeVar.__init__"
    ],
    "importlib_metadata._compat": [
        "typing",
        "importlib_metadata._compat.NullFinder",
        "platform",
        "typing_extensions"
    ],
    "importlib_metadata._compat.NullFinder": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata._meta.PackageMetadata": [
        "<builtin>.property"
    ],
    "importlib_metadata._meta.SimplePath": [
        "<builtin>.property"
    ],
    "importlib_metadata._py39compat": [
        "typing"
    ],
    "importlib_metadata._itertools": [],
    "importlib_metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib_metadata.Sectioned": [
        "<builtin>.staticmethod",
        "<str>.lstrip",
        "<builtin>.classmethod",
        "textwrap.dedent"
    ],
    "importlib_metadata.DeprecatedTuple": [
        "importlib_metadata._compat.pypy_partial"
    ],
    "importlib_metadata._compat.pypy_partial": [
        "platform.python_implementation"
    ],
    "platform.python_implementation": [
        "platform._sys_version"
    ],
    "platform._sys_version": [
        "<map>.get",
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "pathlib.PurePath.match"
    ],
    "importlib_metadata.EntryPoint": [
        "re.compile",
        "<builtin>.property"
    ],
    "importlib_metadata.EntryPoints": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "importlib_metadata.PackagePath": [],
    "importlib_metadata.FileHash": [],
    "importlib_metadata.Distribution": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder": [
        "importlib_metadata.DistributionFinder.Context.__init__",
        "importlib_metadata.DistributionFinder.Context",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib_metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib_metadata.FastPath": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "_functools.method_cache",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "<builtin>.property",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "importlib_metadata.Lookup": [],
    "importlib_metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "importlib_metadata.DistributionFinder.Context.__init__"
    ],
    "importlib_metadata.PathDistribution": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "pkg_resources": [
        "pkgutil",
        "<builtin>.globals",
        "pkg_resources.FileMetadata",
        "imp",
        "types",
        "posixpath",
        "pkg_resources.EggProvider",
        "operator",
        "re",
        "pkg_resources.register_loader_type",
        "pkg_resources.DefaultProvider",
        "pkg_resources.register_namespace_handler",
        "pkg_resources.PkgResourcesDeprecationWarning",
        "plistlib",
        "warnings",
        "functools",
        "pkg_resources.NoDists",
        "email.parser",
        "pkg_resources.Environment",
        "pkg_resources.ExtractionError",
        "warnings.filterwarnings",
        "importlib.machinery",
        "zipfile",
        "pkg_resources.NullProvider",
        "pkg_resources.MemoizedZipManifests",
        "ntpath",
        "pkg_resources.Distribution",
        "pkg_resources.UnknownExtra",
        "pkg_resources.IResourceProvider",
        "pkg_resources.VersionConflict",
        "pkg_resources.RequirementParseError",
        "pkg_resources.EmptyProvider.__init__",
        "pkg_resources._call_aside",
        "tempfile",
        "pkg_resources.PathMetadata",
        "re.compile",
        "pkg_resources.DistributionNotFound",
        "inspect",
        "pkg_resources.IMetadataProvider",
        "pkg_resources.ZipManifests",
        "pkg_resources.ZipProvider",
        "os",
        "pkg_resources.ResourceManager",
        "pkg_resources.DistInfoDistribution",
        "pkg_resources._declare_state",
        "pkg_resources.PEP440Warning",
        "<builtin>.RuntimeError",
        "io",
        "platform",
        "pkg_resources._ReqExtras",
        "pkg_resources.WorkingSet",
        "pkg_resources.EggMetadata",
        "pkg_resources.EntryPoint",
        "pkg_resources.register_finder",
        "pkg_resources.DefaultProvider._register",
        "stat",
        "pkg_resources.EggInfoDistribution",
        "pkg_resources.EmptyProvider",
        "pkg_resources.ResolutionError",
        "collections",
        "pkg_resources.Requirement",
        "textwrap",
        "<builtin>.__import__",
        "pkg_resources.ContextualVersionConflict",
        "importlib",
        "pkg_resources.extern.jaraco.text",
        "<builtin>.hasattr"
    ],
    "pkgutil": [
        "functools.singledispatch",
        "warnings",
        "collections",
        "functools",
        "collections.namedtuple",
        "types",
        "pkgutil.ImpImporter",
        "importlib.util",
        "posixpath",
        "os",
        "importlib",
        "importlib.machinery",
        "pkgutil.ImpLoader"
    ],
    "functools.singledispatch": [
        "functools.update_wrapper",
        "types",
        "weakref.WeakKeyDictionary.__init__",
        "<builtin>.getattr",
        "weakref"
    ],
    "pkgutil.ImpImporter": [],
    "pkgutil.ImpLoader": [],
    "email.parser": [
        "email.parser.BytesHeaderParser",
        "email._policybase",
        "email.parser.HeaderParser",
        "email.parser.BytesParser",
        "email.parser.Parser",
        "io",
        "email.feedparser"
    ],
    "email.feedparser": [
        "email.feedparser.BufferedSubFile",
        "re.compile",
        "email._policybase",
        "collections",
        "email.feedparser.FeedParser",
        "<builtin>.object",
        "re",
        "email.feedparser.BytesFeedParser",
        "email.errors",
        "io"
    ],
    "email.feedparser.BufferedSubFile": [],
    "email.feedparser.FeedParser": [],
    "email.feedparser.BytesFeedParser": [],
    "email.parser.Parser": [],
    "email.parser.HeaderParser": [],
    "email.parser.BytesParser": [],
    "email.parser.BytesHeaderParser": [],
    "imp": [
        "imp._LoadCompiledCompatibility",
        "imp._HackedGetData",
        "warnings",
        "importlib._bootstrap_external",
        "types",
        "importlib.util",
        "importlib._bootstrap",
        "tokenize",
        "os",
        "imp.NullImporter",
        "importlib",
        "importlib.machinery",
        "warnings.warn",
        "imp._LoadSourceCompatibility"
    ],
    "importlib._bootstrap": [
        "importlib._bootstrap._ImportLockContext",
        "importlib._bootstrap.ModuleSpec",
        "importlib._bootstrap._ModuleLock",
        "importlib._bootstrap.BuiltinImporter",
        "importlib._bootstrap._DeadlockError",
        "<builtin>.object",
        "importlib._bootstrap._DummyModuleLock",
        "importlib._bootstrap.FrozenImporter",
        "importlib._bootstrap._ModuleLockManager"
    ],
    "importlib._bootstrap._DeadlockError": [],
    "importlib._bootstrap._ModuleLock": [],
    "importlib._bootstrap._DummyModuleLock": [],
    "importlib._bootstrap._ModuleLockManager": [],
    "importlib._bootstrap.ModuleSpec": [
        "<builtin>.property"
    ],
    "importlib._bootstrap.BuiltinImporter": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "importlib._bootstrap._requires_builtin"
    ],
    "importlib._bootstrap._requires_builtin": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap._wrap": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "importlib._bootstrap.FrozenImporter": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "importlib._bootstrap._requires_frozen"
    ],
    "importlib._bootstrap._requires_frozen": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap._ImportLockContext": [],
    "importlib._bootstrap_external": [
        "importlib._bootstrap_external._LoaderBasics",
        "importlib._bootstrap_external.FileFinder",
        "<int>.to_bytes",
        "importlib._bootstrap_external.SourceLoader",
        "importlib._bootstrap_external.FileLoader",
        "importlib._bootstrap_external.PathFinder",
        "<builtin>.object",
        "importlib._bootstrap_external._NamespacePath",
        "importlib._bootstrap_external.WindowsRegistryFinder",
        "importlib._bootstrap_external.SourcelessFileLoader",
        "importlib._bootstrap_external.SourceFileLoader",
        "<builtin>.type",
        "importlib._bootstrap_external._NamespaceLoader",
        "importlib._bootstrap_external.ExtensionFileLoader"
    ],
    "<int>.to_bytes": [],
    "importlib._bootstrap_external.WindowsRegistryFinder": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external._LoaderBasics": [],
    "importlib._bootstrap_external.SourceLoader": [],
    "importlib._bootstrap_external.FileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._check_name": [
        "importlib._bootstrap_external._check_name._wrap"
    ],
    "importlib._bootstrap_external._check_name._wrap": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "importlib._bootstrap_external.SourceFileLoader": [],
    "importlib._bootstrap_external.SourcelessFileLoader": [],
    "importlib._bootstrap_external.ExtensionFileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._NamespacePath": [],
    "importlib._bootstrap_external._NamespaceLoader": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.PathFinder": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.FileFinder": [
        "<builtin>.classmethod"
    ],
    "imp.NullImporter": [],
    "imp._HackedGetData": [],
    "imp._LoadSourceCompatibility": [],
    "imp._LoadCompiledCompatibility": [],
    "pkg_resources.extern.jaraco.text": [
        "functools.singledispatch",
        "pkg_resources.extern.jaraco.text.SeparatedValues",
        "pkg_resources.extern.jaraco.context.ExceptionTrap.passes",
        "pkg_resources.extern.jaraco.text.Splitter",
        "functools",
        "pkg_resources.extern.jaraco.text.FoldedCase",
        "pkg_resources.extern.jaraco.text.WordSet",
        "textwrap",
        "re",
        "pkg_resources.extern.jaraco.context",
        "pkg_resources.extern.jaraco.context.ExceptionTrap.__init__",
        "importlib.resources",
        "pkg_resources.extern.jaraco.functools",
        "pkg_resources.extern.jaraco.text.Stripper"
    ],
    "importlib.resources": [
        "importlib.abc",
        "tempfile",
        "contextlib.contextmanager",
        "typing",
        "types",
        "pathlib",
        "os",
        "importlib",
        "contextlib",
        "io"
    ],
    "pkg_resources.extern.jaraco.functools": [
        "pkg_resources.extern.jaraco.functools.Throttler",
        "typing",
        "collections",
        "functools",
        "types",
        "inspect",
        "typing.TypeVar.__init__"
    ],
    "pkg_resources.extern.jaraco.functools.Throttler": [
        "<builtin>.float"
    ],
    "<builtin>.float": [],
    "pkg_resources.extern.jaraco.context": [
        "shutil",
        "pkg_resources.extern.jaraco.context.suppress",
        "tempfile",
        "contextlib.contextmanager",
        "pkg_resources.extern.jaraco.context.ExceptionTrap",
        "functools",
        "subprocess",
        "os",
        "operator",
        "contextlib"
    ],
    "pkg_resources.extern.jaraco.context.ExceptionTrap": [
        "<builtin>.property"
    ],
    "pkg_resources.extern.jaraco.context.suppress": [],
    "pkg_resources.extern.jaraco.text.FoldedCase": [
        "pkg_resources.extern.jaraco.functools.method_cache"
    ],
    "pkg_resources.extern.jaraco.functools.method_cache": [
        "pkg_resources.extern.jaraco.functools._special_method_cache"
    ],
    "pkg_resources.extern.jaraco.functools._special_method_cache": [],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.__init__": [],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.passes": [
        "pkg_resources.extern.jaraco.context.ExceptionTrap.raises"
    ],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.raises": [
        "functools.wraps"
    ],
    "pkg_resources.extern.jaraco.text.Splitter": [],
    "pkg_resources.extern.jaraco.text.WordSet": [
        "<builtin>.classmethod",
        "re.compile"
    ],
    "pkg_resources.extern.jaraco.text.SeparatedValues": [],
    "pkg_resources.extern.jaraco.text.Stripper": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "pkg_resources.PEP440Warning": [],
    "pkg_resources.ResolutionError": [],
    "pkg_resources.VersionConflict": [
        "<builtin>.property"
    ],
    "pkg_resources.ContextualVersionConflict": [
        "<builtin>.property"
    ],
    "pkg_resources.DistributionNotFound": [
        "<builtin>.property"
    ],
    "pkg_resources.UnknownExtra": [],
    "pkg_resources.IMetadataProvider": [],
    "pkg_resources.IResourceProvider": [],
    "pkg_resources.WorkingSet": [
        "<builtin>.classmethod"
    ],
    "pkg_resources._ReqExtras": [],
    "pkg_resources.Environment": [
        "pkg_resources.get_supported_platform"
    ],
    "pkg_resources.get_supported_platform": [
        "pkg_resources._macos_vers",
        "pathlib.PurePath.match",
        "pkg_resources.get_build_platform"
    ],
    "pkg_resources.get_build_platform": [
        "pkg_resources._macos_arch",
        "pkg_resources._macos_vers",
        "<builtin>.int",
        "sysconfig.get_platform",
        "<str>.startswith",
        "sysconfig"
    ],
    "sysconfig": [
        "<str>.endswith",
        "sysconfig.is_python_build",
        "sysconfig._get_default_scheme",
        "posixpath.normpath",
        "posixpath.join",
        "posixpath.dirname",
        "sysconfig._safe_realpath",
        "posixpath",
        "ntpath.normpath",
        "os",
        "ntpath.join",
        "<builtin>.getattr",
        "sysconfig._fix_pcbuild",
        "ntpath.dirname",
        "<str>.lower",
        "sysconfig._main"
    ],
    "sysconfig._safe_realpath": [
        "posixpath.realpath"
    ],
    "sysconfig._fix_pcbuild": [
        "<str>.startswith",
        "posixpath.normcase",
        "ntpath.normcase"
    ],
    "sysconfig.is_python_build": [
        "sysconfig._is_python_source_dir"
    ],
    "sysconfig._is_python_source_dir": [
        "posixpath.join",
        "ntpath.join",
        "genericpath.isfile"
    ],
    "sysconfig._get_default_scheme": [],
    "sysconfig._main": [
        "sysconfig._get_default_scheme",
        "sysconfig.get_python_version",
        "sysconfig.get_platform",
        "sysconfig._generate_posix_vars",
        "sysconfig.get_config_vars",
        "<builtin>.print",
        "sysconfig.get_paths",
        "sysconfig._print_dict"
    ],
    "sysconfig._generate_posix_vars": [
        "sysconfig._get_sysconfigdata_name",
        "pprint.pprint",
        "sysconfig.get_makefile_filename",
        "posixpath.join",
        "<builtin>.OSError",
        "sysconfig.get_platform",
        "types",
        "sysconfig._parse_makefile",
        "os.makedirs",
        "ntpath.join",
        "<builtin>.open",
        "sysconfig.get_config_h_filename",
        "sysconfig.parse_config_h",
        "pprint",
        "<builtin>.hasattr"
    ],
    "sysconfig.get_makefile_filename": [
        "posixpath.join",
        "ntpath.join",
        "<builtin>.hasattr",
        "sysconfig.get_path"
    ],
    "sysconfig.get_path": [
        "sysconfig.get_paths"
    ],
    "sysconfig.get_paths": [
        "sysconfig._expand_vars"
    ],
    "sysconfig._expand_vars": [
        "ntpath.expanduser",
        "posixpath.normpath",
        "ntpath.normpath",
        "sysconfig._subst_vars",
        "sysconfig._extend_dict",
        "sysconfig.get_config_vars",
        "posixpath.expanduser"
    ],
    "sysconfig.get_config_vars": [
        "<list>.append",
        "sysconfig._init_non_posix",
        "sysconfig.get_makefile_filename",
        "sysconfig._getuserbase",
        "posixpath.join",
        "posixpath.dirname",
        "sysconfig._safe_realpath",
        "ntpath.join",
        "_osx_support",
        "<map>.get",
        "_osx_support.customize_config_vars",
        "ntpath.dirname",
        "sysconfig._init_posix"
    ],
    "sysconfig._init_non_posix": [
        "sysconfig.get_path",
        "posixpath.dirname",
        "sysconfig._safe_realpath",
        "ntpath.dirname"
    ],
    "sysconfig._init_posix": [
        "sysconfig._get_sysconfigdata_name",
        "<builtin>.locals",
        "<builtin>.globals",
        "<map>.update",
        "<builtin>.__import__"
    ],
    "sysconfig._get_sysconfigdata_name": [
        "<builtin>.getattr"
    ],
    "sysconfig._getuserbase": [
        "sysconfig._getuserbase.joinuser"
    ],
    "sysconfig._getuserbase.joinuser": [
        "posixpath.join",
        "ntpath.join",
        "ntpath.expanduser",
        "posixpath.expanduser"
    ],
    "posixpath.expanduser": [
        "posixpath._get_sep",
        "<str>.find",
        "<builtin>.isinstance",
        "os._fspath",
        "<builtin>.str",
        "os._fscodec.fsencode",
        "<str>.startswith",
        "<str>.rstrip",
        "<builtin>.len",
        "os._fscodec.fsdecode"
    ],
    "ntpath.expanduser": [
        "<builtin>.isinstance",
        "os._fspath",
        "os._fscodec.fsencode",
        "<str>.startswith",
        "ntpath.join",
        "<builtin>.len",
        "ntpath.dirname",
        "os._fscodec.fsdecode",
        "ntpath._get_bothseps"
    ],
    "_osx_support": [
        "os",
        "re"
    ],
    "_osx_support.customize_config_vars": [
        "_osx_support._check_for_unavailable_sdk",
        "_osx_support._supports_universal_builds",
        "_osx_support._remove_universal_flags",
        "_osx_support._override_all_archs"
    ],
    "_osx_support._supports_universal_builds": [
        "<builtin>.int",
        "<builtin>.tuple",
        "_osx_support._get_system_version",
        "<builtin>.bool",
        "<str>.split"
    ],
    "_osx_support._get_system_version": [
        "<builtin>.open"
    ],
    "_osx_support._remove_universal_flags": [
        "re.sub",
        "_osx_support._save_modified_value"
    ],
    "_osx_support._save_modified_value": [
        "<map>.get"
    ],
    "_osx_support._override_all_archs": [
        "re.sub",
        "_osx_support._save_modified_value"
    ],
    "_osx_support._check_for_unavailable_sdk": [
        "_osx_support._save_modified_value",
        "re.sub",
        "<map>.get",
        "re.search",
        "genericpath.exists"
    ],
    "re.search": [
        "re._compile"
    ],
    "sysconfig._extend_dict": [
        "<map>.keys",
        "<map>.items"
    ],
    "sysconfig._subst_vars": [
        "<builtin>.AttributeError"
    ],
    "<builtin>.AttributeError": [],
    "sysconfig._parse_makefile": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.int",
        "<map>.keys",
        "<builtin>.str",
        "re.compile",
        "<builtin>.tuple",
        "<map>.update",
        "<builtin>.open",
        "re",
        "<builtin>.len",
        "pathlib.PurePath.match"
    ],
    "sysconfig.get_config_h_filename": [
        "sysconfig.get_path",
        "ntpath.join",
        "posixpath.join"
    ],
    "sysconfig.parse_config_h": [
        "re.compile",
        "pathlib.PurePath.match",
        "re",
        "<builtin>.int"
    ],
    "sysconfig.get_platform": [
        "_osx_support.get_platform_osx",
        "<str>.replace",
        "<builtin>.int",
        "re.compile",
        "_osx_support",
        "re",
        "sysconfig.get_config_vars",
        "<builtin>.hasattr",
        "<str>.lower",
        "pathlib.PurePath.match"
    ],
    "_osx_support.get_platform_osx": [
        "<builtin>.set",
        "<builtin>.int",
        "re.findall",
        "<builtin>.sorted",
        "<builtin>.tuple",
        "_osx_support._get_system_version",
        "<map>.get",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "re.findall": [
        "re._compile"
    ],
    "sysconfig.get_python_version": [],
    "sysconfig._print_dict": [
        "<builtin>.print",
        "<map>.items",
        "<builtin>.enumerate",
        "<builtin>.sorted"
    ],
    "pkg_resources._macos_vers": [
        "platform.mac_ver",
        "plistlib.readPlist",
        "<list>.append",
        "<builtin>.hasattr",
        "genericpath.exists"
    ],
    "plistlib.readPlist": [
        "plistlib.load",
        "plistlib._maybe_open",
        "warnings.warn"
    ],
    "plistlib._maybe_open": [
        "<builtin>.open",
        "<builtin>.isinstance"
    ],
    "pkg_resources._macos_arch": [
        "<map>.get"
    ],
    "pkg_resources.ExtractionError": [],
    "pkg_resources.ResourceManager": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources.NullProvider": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources.register_loader_type": [],
    "pkg_resources.EggProvider": [],
    "pkg_resources.DefaultProvider": [
        "<builtin>.classmethod"
    ],
    "pkg_resources.DefaultProvider._register": [
        "<builtin>.getattr",
        "pkg_resources.register_loader_type",
        "<builtin>.type"
    ],
    "pkg_resources.EmptyProvider": [],
    "pkg_resources.EmptyProvider.__init__": [],
    "pkg_resources.ZipManifests": [
        "<builtin>.classmethod"
    ],
    "pkg_resources.MemoizedZipManifests": [
        "collections.namedtuple"
    ],
    "pkg_resources.ZipProvider": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "pkg_resources.FileMetadata": [],
    "pkg_resources.PathMetadata": [],
    "pkg_resources.EggMetadata": [],
    "pkg_resources._declare_state": [
        "<builtin>.globals",
        "<map>.update"
    ],
    "pkg_resources.register_finder": [],
    "pkg_resources.NoDists": [],
    "pkg_resources.register_namespace_handler": [],
    "pkg_resources.EntryPoint": [
        "<builtin>.classmethod",
        "re.compile"
    ],
    "pkg_resources.Distribution": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "pkg_resources.EggInfoDistribution": [],
    "pkg_resources.DistInfoDistribution": [
        "re.compile",
        "<builtin>.property"
    ],
    "pkg_resources.RequirementParseError": [],
    "pkg_resources.Requirement": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources._call_aside": [
        "pkg_resources._initialize",
        "pkg_resources._initialize_master_working_set"
    ],
    "pkg_resources._initialize": [
        "pkg_resources.ResourceManager.__init__",
        "<builtin>.dir",
        "<builtin>.getattr"
    ],
    "pkg_resources.ResourceManager.__init__": [],
    "<builtin>.dir": [],
    "pkg_resources.PkgResourcesDeprecationWarning": [],
    "pkg_resources._initialize_master_working_set": [
        "pkg_resources.WorkingSet._build_master",
        "<builtin>.locals",
        "pkg_resources.WorkingSet.subscribe",
        "<builtin>.list",
        "<builtin>.globals",
        "<builtin>.tuple",
        "pkg_resources._declare_state",
        "<builtin>.map"
    ],
    "pkg_resources.WorkingSet._build_master": [
        "pkg_resources.WorkingSet.require",
        "__main__",
        "pkg_resources.WorkingSet.__init__",
        "pkg_resources.WorkingSet._build_from_requirements"
    ],
    "pkg_resources.WorkingSet.__init__": [
        "pkg_resources.WorkingSet.add_entry",
        "os._Environ.__iter__",
        "email.message.Message.__iter__"
    ],
    "pkg_resources.WorkingSet.add_entry": [
        "pkg_resources.find_distributions",
        "<list>.append",
        "pkg_resources.WorkingSet.add",
        "<map>.setdefault"
    ],
    "pkg_resources.find_distributions": [
        "pkgutil.get_importer",
        "pkg_resources._find_adapter"
    ],
    "pkgutil.get_importer": [
        "os._Environ.__iter__",
        "email.message.Message.__iter__"
    ],
    "pkg_resources._find_adapter": [
        "<builtin>.getattr",
        "inspect.getmro",
        "<builtin>.type",
        "pkg_resources._always_object"
    ],
    "inspect.getmro": [],
    "pkg_resources._always_object": [],
    "pkg_resources.WorkingSet.add": [
        "pkg_resources.WorkingSet._added_new",
        "<map>.setdefault"
    ],
    "pkg_resources.WorkingSet._added_new": [],
    "__main__": [
        "argparse",
        "json",
        "utils.constants",
        "pythoncg",
        "__main__.main",
        "formats"
    ],
    "formats": [],
    "pythoncg": [
        "machinery.scopes",
        "utils",
        "pythoncg.CallGraphGenerator",
        "machinery.returns",
        "machinery.callgraph",
        "processing.extProcessor",
        "machinery.modules",
        "machinery.key_err",
        "machinery.nodes",
        "os",
        "machinery.imports",
        "machinery.classes",
        "machinery.definitions",
        "machinery.calls",
        "processing.cgprocessor",
        "machinery.gol"
    ],
    "processing.cgprocessor": [
        "ast",
        "utils",
        "processing.cgprocessor.NsRow",
        "machinery.callgraph",
        "machinery.returns",
        "machinery.modules",
        "functools",
        "math",
        "machinery.definitions",
        "processing.cgprocessor.CallGraphProcessor",
        "machinery.scopes",
        "machinery.calls",
        "copy"
    ],
    "ast": [
        "ast.Bytes",
        "ast.Str",
        "<builtin>.property",
        "ast.NodeVisitor",
        "ast.NameConstant",
        "ast._ABC",
        "ast.Ellipsis",
        "ast.NodeTransformer",
        "<builtin>.type",
        "ast.Num"
    ],
    "ast.NodeVisitor": [],
    "ast.NodeTransformer": [],
    "ast._ABC": [],
    "ast.Num": [],
    "ast.Str": [],
    "ast.Bytes": [],
    "ast.NameConstant": [],
    "ast.Ellipsis": [],
    "utils": [
        "utils.constants"
    ],
    "machinery.callgraph": [
        "utils",
        "re",
        "machinery.callgraph.CallGraphError",
        "machinery.callgraph.CallGraph"
    ],
    "machinery.callgraph.CallGraph": [],
    "machinery.callgraph.CallGraphError": [],
    "machinery.calls": [
        "utils",
        "machinery.calls.CallItem",
        "machinery.calls.CallManager",
        "heapq"
    ],
    "machinery.calls.CallManager": [],
    "machinery.calls.CallItem": [],
    "machinery.scopes": [
        "utils",
        "machinery.scopes.ScopeManager",
        "symtable",
        "machinery.scopes.ScopeError",
        "machinery.scopes.ScopeItem",
        "copy"
    ],
    "symtable": [
        "symtable.SymbolTableFactory",
        "symtable.Class",
        "symtable.symtable",
        "symtable.SymbolTable",
        "posixpath.split",
        "ntpath.split",
        "symtable.SymbolTableFactory.__init__",
        "symtable.Function",
        "os",
        "<builtin>.open",
        "symtable.Symbol",
        "weakref",
        "<builtin>.print"
    ],
    "symtable.SymbolTableFactory": [],
    "symtable.SymbolTableFactory.__init__": [
        "weakref.WeakValueDictionary.__init__"
    ],
    "symtable.SymbolTable": [],
    "symtable.Function": [],
    "symtable.Class": [],
    "symtable.Symbol": [],
    "symtable.symtable": [
        "symtable.SymbolTableFactory.__init__"
    ],
    "machinery.scopes.ScopeManager": [],
    "machinery.scopes.ScopeItem": [],
    "machinery.scopes.ScopeError": [],
    "machinery.definitions": [
        "utils",
        "machinery.definitions.DefinitionManager",
        "machinery.definitions.DefinitionError",
        "heapq",
        "math",
        "machinery.definitions.ChangeManager",
        "machinery.definitions.PointItem",
        "machinery.definitions.ChangeItem",
        "machinery.definitions.Definition",
        "machinery.gol"
    ],
    "machinery.gol": [],
    "machinery.definitions.PointItem": [
        "<builtin>.set"
    ],
    "machinery.definitions.DefinitionManager": [],
    "machinery.definitions.Definition": [],
    "machinery.definitions.ChangeManager": [],
    "machinery.definitions.ChangeItem": [],
    "machinery.definitions.DefinitionError": [],
    "machinery.modules": [
        "machinery.modules.ModuleManager",
        "machinery.modules.Module"
    ],
    "machinery.modules.ModuleManager": [],
    "machinery.modules.Module": [],
    "machinery.returns": [
        "utils",
        "machinery.returns.ReturnManager",
        "machinery.returns.ReturnItem"
    ],
    "machinery.returns.ReturnManager": [],
    "machinery.returns.ReturnItem": [],
    "processing.cgprocessor.NsRow": [],
    "processing.cgprocessor.CallGraphProcessor": [],
    "processing.extProcessor": [
        "ast",
        "processing.base",
        "machinery.scopes",
        "utils",
        "machinery.callgraph",
        "random",
        "machinery.modules",
        "functools",
        "processing.extProcessor.ExtProcessor",
        "machinery.nodes",
        "machinery.imports",
        "machinery.definitions",
        "machinery.classes",
        "machinery.gol"
    ],
    "machinery.classes": [
        "machinery.classes.ClassManager",
        "machinery.classes.ClassNode"
    ],
    "machinery.classes.ClassManager": [],
    "machinery.classes.ClassNode": [],
    "processing.base": [
        "ast",
        "utils",
        "processing.base.ProcessingBase",
        "os",
        "machinery.definitions"
    ],
    "processing.base.ProcessingBase": [
        "<builtin>.property"
    ],
    "machinery.imports": [
        "ast",
        "utils",
        "machinery.imports.ImportManagerError",
        "os",
        "machinery.imports.ImportManager",
        "importlib",
        "copy"
    ],
    "machinery.imports.ImportManager": [],
    "machinery.imports.ImportManagerError": [],
    "machinery.nodes": [
        "machinery.nodes.NodeManager"
    ],
    "machinery.nodes.NodeManager": [],
    "processing.extProcessor.ExtProcessor": [
        "<builtin>.set"
    ],
    "machinery.key_err": [
        "machinery.key_err.KeyErrors"
    ],
    "machinery.key_err.KeyErrors": [],
    "pythoncg.CallGraphGenerator": [
        "<builtin>.set"
    ],
    "utils.constants": [],
    "json": [
        "codecs",
        "decoder.JSONDecoder",
        "encoder.JSONEncoder"
    ],
    "encoder.JSONEncoder": [],
    "decoder.JSONDecoder": [],
    "__main__.main": [
        "argparse.ArgumentParser.parse_args",
        "argparse.ArgumentParser.__init__",
        "pythoncg.CallGraphGenerator.output_key_errs",
        "json.dumps",
        "pythoncg.CallGraphGenerator.analyze",
        "argparse._ActionsContainer.add_argument",
        "pythoncg.CallGraphGenerator.__init__",
        "<builtin>.open",
        "as_graph.AsGraph",
        "<builtin>.print",
        "simple.Simple",
        "fasten.Fasten"
    ],
    "pythoncg.CallGraphGenerator.__init__": [
        "pythoncg.CallGraphGenerator.setUp"
    ],
    "pythoncg.CallGraphGenerator.setUp": [
        "machinery.definitions.DefinitionManager.__init__",
        "machinery.modules.ModuleManager.__init__",
        "machinery.returns.ReturnManager.__init__",
        "machinery.gol._init",
        "machinery.imports.ImportManager.__init__",
        "machinery.key_err.KeyErrors.__init__",
        "machinery.classes.ClassManager.__init__",
        "machinery.callgraph.CallGraph.__init__",
        "machinery.nodes.NodeManager.__init__",
        "machinery.gol.set_value",
        "machinery.definitions.ChangeManager.__init__",
        "machinery.scopes.ScopeManager.__init__"
    ],
    "machinery.imports.ImportManager.__init__": [
        "<builtin>.dict"
    ],
    "machinery.scopes.ScopeManager.__init__": [],
    "machinery.definitions.DefinitionManager.__init__": [],
    "machinery.classes.ClassManager.__init__": [],
    "machinery.modules.ModuleManager.__init__": [
        "<builtin>.set"
    ],
    "machinery.definitions.ChangeManager.__init__": [],
    "machinery.returns.ReturnManager.__init__": [],
    "machinery.callgraph.CallGraph.__init__": [],
    "machinery.key_err.KeyErrors.__init__": [],
    "machinery.nodes.NodeManager.__init__": [],
    "machinery.gol._init": [],
    "machinery.gol.set_value": [],
    "pythoncg.CallGraphGenerator.analyze": [
        "pythoncg.CallGraphGenerator.do_pass",
        "<builtin>.set",
        "<builtin>.print"
    ],
    "pythoncg.CallGraphGenerator.do_pass": [
        "machinery.definitions.DefinitionManager.__init__",
        "machinery.definitions.ChangeManager.__init__",
        "processing.extProcessor.ExtProcessor.__init__",
        "machinery.imports.ImportManager.install_hooks",
        "posixpath.dirname",
        "pythoncg.CallGraphGenerator._get_mod_name",
        "processing.extProcessor.ExtProcessor.get_modules_analyzed",
        "processing.extProcessor.ExtProcessor.analyze_allfunction",
        "ntpath.dirname",
        "posixpath.abspath",
        "machinery.imports.ImportManager.set_pkg",
        "ntpath.abspath",
        "processing.extProcessor.ExtProcessor.analyze",
        "pythoncg.CallGraphGenerator.remove_import_hooks",
        "machinery.modules.ModuleManager.add_local_modules"
    ],
    "pythoncg.CallGraphGenerator._get_mod_name": [
        "<str>.endswith",
        "posixpath.relpath",
        "ntpath.relpath"
    ],
    "posixpath.relpath": [
        "<builtin>.isinstance",
        "<str>.split",
        "os._fspath",
        "posixpath.join",
        "genericpath._check_arg_types",
        "genericpath.commonprefix",
        "<builtin>.len",
        "posixpath.abspath",
        "<builtin>.ValueError"
    ],
    "genericpath.commonprefix": [
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "<builtin>.min",
        "<builtin>.max",
        "<builtin>.map"
    ],
    "ntpath.relpath": [
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "os._fspath",
        "<builtin>.zip",
        "ntpath.normcase",
        "genericpath._check_arg_types",
        "ntpath.normpath",
        "ntpath.join",
        "<builtin>.len",
        "ntpath.abspath",
        "<builtin>.ValueError"
    ],
    "machinery.imports.ImportManager.set_pkg": [],
    "machinery.imports.ImportManager.install_hooks": [
        "importlib.machinery.all_suffixes",
        "posixpath.abspath",
        "copy.deepcopy",
        "machinery.imports.get_custom_loader",
        "ntpath.abspath",
        "machinery.imports.ImportManager._clear_caches"
    ],
    "machinery.imports.get_custom_loader": [
        "machinery.imports.get_custom_loader.CustomLoader"
    ],
    "machinery.imports.get_custom_loader.CustomLoader": [],
    "importlib.machinery.all_suffixes": [],
    "machinery.imports.ImportManager._clear_caches": [
        "importlib.invalidate_caches"
    ],
    "importlib.invalidate_caches": [
        "<builtin>.hasattr"
    ],
    "processing.extProcessor.ExtProcessor.__init__": [
        "processing.extProcessor.ExtProcessor.get_module_ns",
        "<str>.endswith",
        "<builtin>.super",
        "<builtin>.set"
    ],
    "processing.extProcessor.ExtProcessor.get_module_ns": [],
    "machinery.modules.ModuleManager.add_local_modules": [],
    "processing.extProcessor.ExtProcessor.analyze": [
        "ast.parse",
        "ast.NodeVisitor.visit"
    ],
    "ast.parse": [
        "<builtin>.isinstance",
        "<builtin>.compile"
    ],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "processing.extProcessor.ExtProcessor.get_modules_analyzed": [],
    "pythoncg.CallGraphGenerator.remove_import_hooks": [
        "machinery.imports.ImportManager.remove_hooks"
    ],
    "machinery.imports.ImportManager.remove_hooks": [
        "machinery.imports.ImportManager._clear_caches"
    ],
    "processing.extProcessor.ExtProcessor.analyze_allfunction": [
        "processing.extProcessor.ExtProcessor.analyze_allfunction.equal",
        "processing.extProcessor.ExtProcessor.analyze_allfunction.analyze_local",
        "<builtin>.print"
    ],
    "processing.extProcessor.ExtProcessor.analyze_allfunction.equal": [
        "<builtin>.set"
    ],
    "processing.extProcessor.ExtProcessor.analyze_allfunction.analyze_local": [
        "<builtin>.list",
        "processing.extProcessor.ExtProcessor.pushStack"
    ],
    "processing.extProcessor.ExtProcessor.pushStack": [
        "<builtin>.super",
        "<builtin>.str",
        "<list>.pop",
        "<builtin>.getattr",
        "<list>.append",
        "processing.extProcessor.ExtProcessor.popStack",
        "<builtin>.hasattr",
        "processing.extProcessor.ExtProcessor.get_module_ns",
        "machinery.gol.add_value"
    ],
    "machinery.gol.add_value": [],
    "processing.extProcessor.ExtProcessor.popStack": [
        "<list>.pop",
        "processing.extProcessor.ExtProcessor.popStack.update_change",
        "processing.extProcessor.ExtProcessor.get_module_ns"
    ],
    "processing.extProcessor.ExtProcessor.popStack.update_change": [
        "processing.extProcessor.ExtProcessor.get_scope_ns",
        "<builtin>.len"
    ],
    "processing.extProcessor.ExtProcessor.get_scope_ns": [],
    "fasten.Fasten": [],
    "pythoncg.CallGraphGenerator.output_key_errs": [
        "machinery.key_err.KeyErrors.get"
    ],
    "machinery.key_err.KeyErrors.get": [],
    "simple.Simple": [],
    "as_graph.AsGraph": [],
    "json.dumps": [
        "encoder.JSONEncoder"
    ],
    "pkg_resources.WorkingSet.require": [
        "pkg_resources.WorkingSet.add",
        "pkg_resources.WorkingSet.resolve",
        "pkg_resources.parse_requirements"
    ],
    "pkg_resources.parse_requirements": [
        "pkg_resources.extern.jaraco.text.join_continuation",
        "pkg_resources.extern.jaraco.text.yield_lines",
        "<builtin>.map"
    ],
    "pkg_resources.extern.jaraco.text.yield_lines": [
        "<builtin>.map"
    ],
    "pkg_resources.extern.jaraco.text.join_continuation": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "pkg_resources.WorkingSet.resolve": [
        "<list>.append",
        "<builtin>.list",
        "pkg_resources.Environment.__init__",
        "_collections.defaultdict",
        "<map>.get",
        "pkg_resources._ReqExtras.markers_pass",
        "pkg_resources.Environment.best_match",
        "pkg_resources.VersionConflict.with_context",
        "pkg_resources.WorkingSet.__init__"
    ],
    "pkg_resources._ReqExtras.markers_pass": [
        "<builtin>.any"
    ],
    "pkg_resources.Environment.__init__": [
        "pkg_resources.Environment.scan"
    ],
    "pkg_resources.Environment.scan": [
        "pkg_resources.find_distributions",
        "pkg_resources.Environment.add",
        "os._Environ.__iter__",
        "email.message.Message.__iter__"
    ],
    "pkg_resources.Environment.add": [
        "operator.attrgetter.__init__",
        "<map>.setdefault",
        "pkg_resources.Environment.can_add"
    ],
    "pkg_resources.Environment.can_add": [
        "pkg_resources.compatible_platforms"
    ],
    "pkg_resources.compatible_platforms": [
        "pathlib.PurePath.match",
        "<builtin>.int"
    ],
    "pkg_resources.Environment.best_match": [
        "pkg_resources.WorkingSet.find",
        "pkg_resources.Environment.obtain"
    ],
    "pkg_resources.WorkingSet.find": [
        "<map>.get"
    ],
    "pkg_resources.Environment.obtain": [],
    "pkg_resources.VersionConflict.with_context": [],
    "pkg_resources.WorkingSet._build_from_requirements": [
        "pkg_resources.Environment.__init__",
        "os._Environ.__iter__",
        "pkg_resources.WorkingSet.add",
        "pkg_resources.parse_requirements",
        "pkg_resources.WorkingSet.__init__",
        "pkg_resources.WorkingSet.add_entry",
        "pkg_resources.WorkingSet.resolve",
        "email.message.Message.__iter__"
    ],
    "pkg_resources.WorkingSet.subscribe": [
        "pkg_resources._initialize_master_working_set.<lambda1>",
        "pkg_resources.WorkingSet.__iter__",
        "<list>.append"
    ],
    "pkg_resources.WorkingSet.__iter__": [],
    "pkg_resources._initialize_master_working_set.<lambda1>": [],
    "importlib_metadata.entry_points": [
        "importlib_metadata.distributions",
        "importlib_metadata.EntryPoints.select"
    ],
    "importlib_metadata.distributions": [
        "importlib_metadata.Distribution.discover"
    ],
    "importlib_metadata.Distribution.discover": [
        "importlib_metadata.Distribution._discover_resolvers",
        "importlib_metadata.DistributionFinder.Context.__init__",
        "<builtin>.ValueError"
    ],
    "importlib_metadata.Distribution._discover_resolvers": [
        "<builtin>.filter",
        "<builtin>.getattr"
    ],
    "importlib_metadata.EntryPoints.select": [
        "importlib_metadata._py39compat.ep_matches"
    ],
    "importlib_metadata._py39compat.ep_matches": [
        "EntryPoint"
    ],
    "EntryPoint": [],
    "importlib.metadata.entry_points": [
        "operator.attrgetter.__init__",
        "<builtin>.tuple",
        "importlib.metadata.distributions",
        "<builtin>.sorted"
    ],
    "importlib.metadata.distributions": [
        "importlib.metadata.Distribution.discover"
    ],
    "importlib.metadata.Distribution.discover": [
        "importlib.metadata.Distribution._discover_resolvers",
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.ValueError"
    ],
    "importlib.metadata.Distribution._discover_resolvers": [
        "<builtin>.filter",
        "<builtin>.getattr"
    ],
    "pygments.lexers.get_lexer_by_name": [
        "<str>.lower",
        "pygments.lexers._load_lexers",
        "<map>.values",
        "pygments.plugin.find_plugin_lexers"
    ],
    "rich.syntax.Syntax.__init__": [
        "rich.style.Style.__init__",
        "rich.syntax.Syntax.get_theme",
        "<builtin>.set"
    ],
    "rich.syntax.Syntax.get_theme": [
        "rich.syntax.PygmentsSyntaxTheme.__init__",
        "rich.syntax.ANSISyntaxTheme.__init__",
        "<builtin>.isinstance"
    ],
    "rich.syntax.PygmentsSyntaxTheme.__init__": [
        "pygments.styles.get_style_by_name",
        "rich.style.Style.__init__",
        "<builtin>.isinstance"
    ],
    "pygments.styles.get_style_by_name": [
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<str>.title",
        "pygments.plugin.find_plugin_styles"
    ],
    "pygments.plugin.find_plugin_styles": [
        "pygments.plugin.iter_entry_points"
    ],
    "<str>.title": [],
    "rich.syntax.ANSISyntaxTheme.__init__": [
        "rich.style.Style.null"
    ],
    "codecs.StreamRecoder.read": [],
    "rich.text.Text.from_markup": [
        "rich.markup.render",
        "rich.markup"
    ],
    "rich.markup": [
        "ast",
        "rich.emoji",
        "rich.errors",
        "typing",
        "rich._emoji_replace",
        "rich.text",
        "re.compile",
        "<builtin>.print",
        "rich.table.Table.add_row",
        "rich.table",
        "operator",
        "re",
        "rich.markup.Tag",
        "rich.text.Text.__init__",
        "rich.style",
        "rich",
        "rich.table.Table.__init__"
    ],
    "rich.markup.Tag": [
        "<builtin>.property"
    ],
    "rich.table.Table.__init__": [
        "rich.padding.Padding.unpack",
        "<builtin>.list",
        "<builtin>.isinstance",
        "rich.table.Table.add_column",
        "<builtin>.len"
    ],
    "rich.markup.render": [
        "<builtin>.isinstance",
        "rich.style.Style.__init__",
        "<builtin>.str",
        "rich.style.Style.normalize",
        "ast.literal_eval",
        "rich.markup._parse",
        "<builtin>.sorted",
        "rich.text.Text.append",
        "rich.markup.render.pop_style",
        "rich.text.Text.__init__",
        "<builtin>.len",
        "operator.attrgetter.__init__",
        "rich._emoji_replace._emoji_replace",
        "pathlib.PurePath.match"
    ],
    "rich._emoji_replace._emoji_replace": [
        "<list>",
        "<map>.get",
        "<map>"
    ],
    "rich.markup._parse": [
        "<builtin>.len"
    ],
    "rich.style.Style.normalize": [
        "rich.style.Style.parse",
        "<builtin>.str"
    ],
    "rich.markup.render.pop_style": [
        "<builtin>.KeyError",
        "<builtin>.reversed",
        "<builtin>.enumerate"
    ],
    "ast.literal_eval": [
        "ast.parse",
        "<builtin>.isinstance",
        "ast.literal_eval._convert"
    ],
    "ast.literal_eval._convert": [
        "<builtin>.dict",
        "<builtin>.list",
        "<builtin>.isinstance",
        "ast.literal_eval._convert_signed_num",
        "<builtin>.set",
        "ast.literal_eval._convert_num",
        "<builtin>.zip",
        "<builtin>.tuple",
        "<builtin>.map"
    ],
    "ast.literal_eval._convert_signed_num": [
        "ast.literal_eval._convert_num",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.repr",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "rich.text.Text.append": [
        "rich.control.strip_control_codes",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.TypeError",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "rich.terminal_theme": [
        "typing",
        "rich.terminal_theme.TerminalTheme.__init__",
        "rich.terminal_theme.TerminalTheme",
        "rich.color_triplet",
        "rich.palette"
    ],
    "rich.terminal_theme.TerminalTheme": [],
    "rich.terminal_theme.TerminalTheme.__init__": [
        "rich.palette.Palette.__init__"
    ],
    "rich.palette.Palette.__init__": [],
    "rich.jupyter.JupyterRenderable": [],
    "rich.jupyter.JupyterMixin": [],
    "rich.constrain.Constrain": [],
    "rich.align.Align": [
        "<builtin>.classmethod"
    ],
    "rich.align.VerticalCenter": [],
    "rich.highlighter": [
        "rich.highlighter.RegexHighlighter",
        "rich.console",
        "json",
        "rich.console.Console.__init__",
        "abc",
        "typing",
        "rich.text",
        "rich.console.Console.print",
        "json.dumps",
        "rich.console.Console.print_json",
        "rich.highlighter.ReprHighlighter",
        "rich.highlighter.JSONHighlighter",
        "re",
        "rich.highlighter.Highlighter",
        "rich.highlighter.NullHighlighter",
        "rich.highlighter.ISO8601Highlighter"
    ],
    "rich.highlighter.Highlighter": [
        "abc.abstractmethod"
    ],
    "rich.highlighter.NullHighlighter": [],
    "rich.highlighter.RegexHighlighter": [],
    "rich.highlighter.ReprHighlighter": [],
    "rich.highlighter.JSONHighlighter": [],
    "rich.highlighter.ISO8601Highlighter": [],
    "rich.panel": [
        "rich.measure",
        "rich.console",
        "rich.panel.Panel",
        "rich.console.Console.__init__",
        "rich.panel.Panel.__init__",
        "typing",
        "rich.console.Console.print",
        "rich.text",
        "rich.align",
        "rich.box",
        "rich.cells",
        "rich.segment",
        "rich.style",
        "rich.jupyter",
        "rich.padding"
    ],
    "rich.panel.Panel": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.panel.Panel.__init__": [],
    "rich.align.Align.left": [
        "rich.align.Align.__init__"
    ],
    "rich.align.Align.__init__": [
        "<builtin>.ValueError"
    ],
    "rich.align.Align.center": [
        "rich.align.Align.__init__"
    ],
    "rich.align.Align.right": [
        "rich.align.Align.__init__"
    ],
    "rich.console.Group.__init__": [],
    "rich.columns.Columns": [],
    "rich.columns.Columns.add_renderable": [],
    "rich._ratio": [
        "<builtin>.sum",
        "rich._ratio.ratio_resolve",
        "typing",
        "fractions",
        "dataclasses",
        "rich._ratio.Edge",
        "math",
        "typing_extensions",
        "<builtin>.print",
        "rich._ratio.E"
    ],
    "fractions": [
        "re.compile",
        "fractions.Fraction",
        "numbers",
        "operator",
        "math",
        "re",
        "decimal"
    ],
    "decimal": [
        "_decimal",
        "_pydecimal"
    ],
    "_decimal": [],
    "_pydecimal": [
        "_pydecimal.FloatOperation",
        "re",
        "_pydecimal.Overflow",
        "_pydecimal.InvalidOperation",
        "_pydecimal.DecimalException",
        "contextvars",
        "_pydecimal._WorkRep",
        "_pydecimal._Log10Memoize.__init__",
        "_pydecimal.InvalidContext",
        "_pydecimal._ContextManager",
        "_pydecimal.Inexact",
        "_pydecimal.DivisionImpossible",
        "_pydecimal.Subnormal",
        "math",
        "_pydecimal.Clamped",
        "locale",
        "re.compile",
        "collections.namedtuple",
        "_pydecimal.ConversionSyntax",
        "_pydecimal.DivisionByZero",
        "_pydecimal.Context.__init__",
        "_pydecimal.Decimal",
        "_pydecimal.Underflow",
        "_pydecimal.Rounded",
        "collections",
        "<builtin>.pow",
        "numbers",
        "_pydecimal.DivisionUndefined",
        "_pydecimal._Log10Memoize",
        "_pydecimal.Context"
    ],
    "numbers": [
        "numbers.Integral",
        "abc",
        "numbers.Complex",
        "numbers.Rational",
        "numbers.Number",
        "numbers.Real"
    ],
    "numbers.Number": [],
    "numbers.Complex": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Real": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Rational": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Integral": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "_pydecimal.DecimalException": [],
    "_pydecimal.Clamped": [],
    "_pydecimal.InvalidOperation": [],
    "_pydecimal.ConversionSyntax": [],
    "_pydecimal.DivisionByZero": [],
    "_pydecimal.DivisionImpossible": [],
    "_pydecimal.DivisionUndefined": [],
    "_pydecimal.Inexact": [],
    "_pydecimal.InvalidContext": [],
    "_pydecimal.Rounded": [],
    "_pydecimal.Subnormal": [],
    "_pydecimal.Overflow": [],
    "_pydecimal.Underflow": [],
    "_pydecimal.FloatOperation": [],
    "_pydecimal.Decimal": [
        "<builtin>.dict",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "_pydecimal._ContextManager": [],
    "_pydecimal.Context": [],
    "_pydecimal._WorkRep": [],
    "_pydecimal._Log10Memoize": [],
    "_pydecimal._Log10Memoize.__init__": [],
    "_pydecimal.Context.__init__": [
        "<builtin>.dict",
        "<list>.copy",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "<builtin>.pow": [],
    "fractions.Fraction": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "fractions.Fraction._operator_fallbacks"
    ],
    "fractions.Fraction._operator_fallbacks": [],
    "rich._ratio.Edge": [],
    "rich._ratio.E": [],
    "rich._ratio.ratio_resolve": [
        "typing.cast",
        "<builtin>.sum",
        "<builtin>.enumerate",
        "<builtin>.zip"
    ],
    "rich.table.Column": [
        "dataclasses.field",
        "<builtin>.property"
    ],
    "dataclasses.field": [
        "dataclasses.Field.__init__",
        "<builtin>.ValueError"
    ],
    "dataclasses.Field.__init__": [],
    "rich.table.Row": [],
    "rich.table._Cell": [],
    "rich.table.Table": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich._timer": [
        "typing",
        "contextlib",
        "contextlib.contextmanager"
    ],
    "rich._timer.timer": [
        "time.time",
        "<builtin>.print"
    ],
    "time.time": [],
    "rich.palette.Palette": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "rich.palette.ColorBox": [],
    "rich.color.ColorSystem": [],
    "rich.color.ColorType": [],
    "rich.color.ColorParseError": [],
    "rich.color.Color": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "<builtin>.classmethod",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "<builtin>.property",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "rich.table.Table.add_column": [
        "<builtin>.len"
    ],
    "rich.table.Table.add_row": [
        "<builtin>.list",
        "rich.protocol.is_renderable",
        "<builtin>.enumerate",
        "rich.text.Text.__init__",
        "<builtin>.type",
        "<builtin>.len",
        "rich.table.Table.add_row.add_cell"
    ],
    "rich.table.Table.add_row.add_cell": [],
    "rich.protocol.is_renderable": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "rich.style._Bit": [],
    "rich.style.Style": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "rich.style._Bit.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "<builtin>.classmethod",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "<builtin>.property",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "rich.style._Bit.__init__": [],
    "rich.style.Style.__init__._make_color": [
        "<builtin>.isinstance",
        "rich.color.Color.parse"
    ],
    "rich.color.Color.parse": [
        "<builtin>.int",
        "pathlib.PurePath.match",
        "<str>.strip",
        "<map>.get",
        "<builtin>.len",
        "<str>.lower",
        "<builtin>.all"
    ],
    "<builtin>.all": [],
    "marshal.dumps": [],
    "random.Random.randint": [
        "random.Random.randrange"
    ],
    "random.Random.randrange": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.ValueError"
    ],
    "random.Random._randbelow_with_getrandbits": [
        "random.SystemRandom.getrandbits"
    ],
    "rich.style.StyleStack": [
        "<builtin>.property"
    ],
    "rich.style.Style.null": [],
    "rich.theme": [
        "rich.theme.Theme.__init__",
        "typing",
        "configparser",
        "rich.theme.Theme",
        "<builtin>.print",
        "rich.style",
        "rich.default_styles",
        "rich.theme.ThemeStackError",
        "rich.theme.ThemeStack"
    ],
    "rich.theme.Theme": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.theme.ThemeStackError": [],
    "rich.theme.ThemeStack": [],
    "rich.theme.Theme.__init__": [
        "rich.style.Style.parse",
        "<map>.items",
        "<builtin>.isinstance"
    ],
    "rich.style.Style.parse": [
        "rich.style.Style.null",
        "rich.style.Style.__init__",
        "<builtin>.iter",
        "<builtin>.next",
        "<str>.strip",
        "<map>.get",
        "rich.color.Color.parse",
        "<str>.split"
    ],
    "rich._export_format": [],
    "rich._log_render": [
        "rich.console",
        "rich.console.Console.__init__",
        "typing",
        "datetime",
        "rich.text",
        "rich.console.Console.print",
        "rich.table",
        "rich.console.Console.log",
        "rich._log_render.LogRender"
    ],
    "rich._log_render.LogRender": [],
    "rich.pager": [
        "rich.console",
        "rich.console.Console.__init__",
        "rich.console.Console.pager",
        "abc",
        "typing",
        "rich.__main__",
        "rich.pager.SystemPager",
        "rich.pager.Pager"
    ],
    "rich.pager.Pager": [
        "abc.abstractmethod"
    ],
    "rich.pager.SystemPager": [],
    "rich.__main__": [
        "rich.measure",
        "rich.text.Text.from_markup",
        "rich.console.Console.__init__",
        "rich.table",
        "rich.__main__.make_test_card",
        "rich.segment",
        "<builtin>.print",
        "rich.table.Table.grid",
        "rich.console",
        "time.process_time",
        "rich.console.Console.print",
        "rich.text",
        "rich.pretty",
        "colorsys",
        "rich.style",
        "rich.panel.Panel.fit",
        "rich.syntax",
        "rich.box",
        "rich.panel",
        "io",
        "rich.markdown",
        "rich.__main__.ColorBox",
        "rich.table.Table.add_column",
        "<builtin>.round",
        "rich.table.Table.add_row",
        "rich.color",
        "_io.StringIO"
    ],
    "rich.markdown": [
        "rich.rule",
        "rich.markdown.CodeBlock",
        "rich.markdown.UnknownElement",
        "rich.markdown.TextElement",
        "typing",
        "rich.markdown.Markdown.__init__",
        "rich.markdown.Markdown",
        "rich.console.Console.__init__",
        "rich.markdown.Paragraph",
        "pydoc",
        "rich.segment",
        "rich.markdown.BlockQuote",
        "rich._stack",
        "argparse.ArgumentParser.__init__",
        "rich.console",
        "rich.console.Console.print",
        "rich.text",
        "rich.style",
        "rich.containers",
        "argparse",
        "commonmark.blocks",
        "rich._loop",
        "rich.syntax",
        "rich.box",
        "<builtin>.open",
        "rich.markdown.MarkdownElement",
        "pydoc.pager",
        "rich.panel",
        "rich.markdown.ListElement",
        "io",
        "argparse.ArgumentParser.parse_args",
        "rich.markdown.Heading",
        "rich.markdown.ImageItem",
        "codecs.StreamRecoder.read",
        "rich.markdown.MarkdownContext",
        "argparse._ActionsContainer.add_argument",
        "rich.markdown.HorizontalRule",
        "rich.markdown.ListItem",
        "_io.StringIO",
        "rich.jupyter"
    ],
    "commonmark.blocks": [
        "re",
        "commonmark.blocks.Heading",
        "<builtin>.dict",
        "commonmark.node",
        "commonmark.blocks.Item",
        "commonmark.blocks.List",
        "commonmark.blocks.CodeBlock",
        "commonmark.blocks.HtmlBlock",
        "commonmark.blocks.Paragraph",
        "commonmark.blocks.Document",
        "commonmark.common",
        "re.compile",
        "commonmark.blocks.ThematicBreak",
        "commonmark.blocks.BlockStarts",
        "commonmark.blocks.Block",
        "commonmark.inlines",
        "__future__",
        "commonmark.blocks.BlockQuote",
        "commonmark.blocks.Parser",
        "<str>.lower"
    ],
    "commonmark.common": [
        "__future__",
        "re.compile",
        "html",
        "re",
        "commonmark.entitytrans",
        "urllib.parse",
        "urllib"
    ],
    "urllib": [],
    "commonmark.entitytrans": [
        "__future__",
        "re.compile",
        "<builtin>.set",
        "re"
    ],
    "commonmark.inlines": [
        "commonmark.node",
        "commonmark.normalize_reference",
        "__future__",
        "commonmark.common",
        "html",
        "re.compile",
        "commonmark.inlines.InlineParser",
        "re",
        "commonmark.entitytrans"
    ],
    "commonmark.node": [
        "__future__",
        "re.compile",
        "commonmark.node.NodeWalker",
        "commonmark.node.Node",
        "re"
    ],
    "commonmark.node.NodeWalker": [],
    "commonmark.node.Node": [],
    "commonmark.normalize_reference": [
        "commonmark.normalize_reference._parse_table",
        "commonmark.normalize_reference._check_native",
        "re.compile",
        "commonmark.normalize_reference._get_smp_regex",
        "re"
    ],
    "commonmark.normalize_reference._parse_table": [
        "<builtin>.int",
        "<builtin>.any",
        "<builtin>.chr",
        "<builtin>.len",
        "<builtin>.map",
        "<str>.split"
    ],
    "commonmark.normalize_reference._check_native": [
        "<builtin>.chr"
    ],
    "commonmark.normalize_reference._get_smp_regex": [
        "<builtin>.str",
        "re.compile",
        "<list>.append",
        "<builtin>.sorted"
    ],
    "commonmark.inlines.InlineParser": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Block": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Document": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.List": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.BlockQuote": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Item": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Heading": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.ThematicBreak": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.CodeBlock": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.HtmlBlock": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Paragraph": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.BlockStarts": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Parser": [],
    "rich._stack": [
        "typing",
        "rich._stack.Stack",
        "typing.TypeVar.__init__"
    ],
    "rich._stack.Stack": [
        "<builtin>.property"
    ],
    "rich.rule": [
        "rich.measure",
        "rich.rule.Rule.__init__",
        "rich.console",
        "rich.console.Console.__init__",
        "typing",
        "rich.console.Console.print",
        "rich.text",
        "rich.rule.Rule",
        "rich.align",
        "rich.cells",
        "rich.style",
        "rich.jupyter"
    ],
    "rich.rule.Rule": [],
    "rich.rule.Rule.__init__": [
        "rich.cells.cell_len",
        "<builtin>.ValueError"
    ],
    "rich.markdown.MarkdownElement": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.UnknownElement": [],
    "rich.markdown.TextElement": [],
    "rich.markdown.Paragraph": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.Heading": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.CodeBlock": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.BlockQuote": [],
    "rich.markdown.HorizontalRule": [],
    "rich.markdown.ListElement": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.ListItem": [],
    "rich.markdown.ImageItem": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.MarkdownContext": [
        "<builtin>.property"
    ],
    "rich.markdown.Markdown": [],
    "rich.markdown.Markdown.__init__": [
        "commonmark.blocks.Parser.parse",
        "commonmark.blocks.Parser.__init__"
    ],
    "commonmark.blocks.Parser.__init__": [
        "commonmark.inlines.InlineParser.__init__",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.node.Node.__init__": [],
    "commonmark.inlines.InlineParser.__init__": [],
    "commonmark.blocks.Parser.parse": [
        "re.split",
        "commonmark.node.Node.__init__",
        "commonmark.blocks.Parser.process_inlines",
        "commonmark.blocks.Parser.finalize",
        "<builtin>.len",
        "<builtin>.range",
        "commonmark.blocks.Parser.incorporate_line"
    ],
    "re.split": [
        "re._compile",
        "<str>.split"
    ],
    "commonmark.blocks.Parser.incorporate_line": [
        "commonmark.blocks.Parser.advance_next_nonspace",
        "commonmark.blocks.Parser.close_unmatched_blocks",
        "re.sub",
        "commonmark.blocks.Parser.add_line",
        "commonmark.blocks.Parser.finalize",
        "commonmark.blocks.Parser.find_next_nonspace",
        "<builtin>.len",
        "<builtin>.getattr",
        "re.search",
        "commonmark.blocks.Parser.add_child",
        "<builtin>.ValueError"
    ],
    "commonmark.blocks.Parser.find_next_nonspace": [],
    "commonmark.blocks.Parser.advance_next_nonspace": [],
    "commonmark.blocks.Parser.close_unmatched_blocks": [
        "commonmark.blocks.Parser.finalize"
    ],
    "commonmark.blocks.Parser.finalize": [],
    "commonmark.blocks.Parser.add_child": [
        "commonmark.node.Node.append_child",
        "commonmark.blocks.Parser.finalize",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.node.Node.append_child": [
        "commonmark.node.Node.unlink"
    ],
    "commonmark.node.Node.unlink": [],
    "commonmark.blocks.Parser.add_line": [],
    "commonmark.blocks.Parser.process_inlines": [
        "commonmark.node.NodeWalker.nxt",
        "commonmark.node.Node.walker",
        "commonmark.inlines.InlineParser.parseInlines"
    ],
    "commonmark.node.Node.walker": [
        "commonmark.node.NodeWalker.__init__"
    ],
    "commonmark.node.NodeWalker.__init__": [],
    "commonmark.node.NodeWalker.nxt": [
        "<builtin>.next"
    ],
    "commonmark.inlines.InlineParser.parseInlines": [
        "commonmark.inlines.InlineParser.processEmphasis",
        "commonmark.inlines.InlineParser.parseInline"
    ],
    "commonmark.inlines.InlineParser.parseInline": [
        "commonmark.inlines.InlineParser.parseHtmlTag",
        "commonmark.inlines.InlineParser.parseAutolink",
        "commonmark.inlines.InlineParser.parseNewline",
        "commonmark.inlines.InlineParser.parseOpenBracket",
        "commonmark.inlines.InlineParser.parseCloseBracket",
        "commonmark.inlines.InlineParser.parseBang",
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.parseBackticks",
        "commonmark.inlines.InlineParser.parseString",
        "<map>.get",
        "commonmark.inlines.InlineParser.parseBackslash",
        "commonmark.inlines.InlineParser.parseEntity",
        "commonmark.inlines.InlineParser.peek",
        "commonmark.inlines.InlineParser.handleDelim"
    ],
    "commonmark.inlines.InlineParser.peek": [
        "<builtin>.len"
    ],
    "commonmark.inlines.InlineParser.parseString": [
        "commonmark.inlines.text",
        "re.sub",
        "commonmark.inlines.InlineParser.match",
        "<map>.get"
    ],
    "commonmark.inlines.InlineParser.match": [
        "re.search"
    ],
    "commonmark.inlines.text": [
        "commonmark.node.Node.__init__"
    ],
    "commonmark.inlines.InlineParser.parseEntity": [
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.match",
        "html.unescape",
        "commonmark.entitytrans._unescape"
    ],
    "html.unescape": [],
    "commonmark.entitytrans._unescape": [],
    "commonmark.inlines.InlineParser.parseAutolink": [
        "commonmark.node.Node.append_child",
        "commonmark.node.Node.__init__",
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.match",
        "commonmark.common.normalize_uri"
    ],
    "commonmark.common.normalize_uri": [
        "re.sub",
        "urllib.parse.quote",
        "<builtin>.str"
    ],
    "urllib.parse.quote": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "urllib.parse.quote_from_bytes"
    ],
    "urllib.parse.quote_from_bytes": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "<str>.rstrip",
        "urllib.parse.Quoter.__init__"
    ],
    "urllib.parse.Quoter.__init__": [],
    "commonmark.inlines.InlineParser.parseHtmlTag": [
        "commonmark.inlines.InlineParser.match",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.inlines.InlineParser.parseCloseBracket": [
        "commonmark.node.Node.append_child",
        "commonmark.inlines.InlineParser.parseLinkLabel",
        "commonmark.inlines.InlineParser.spnl",
        "commonmark.node.Node.__init__",
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.processEmphasis",
        "commonmark.inlines.InlineParser.removeBracket",
        "<map>.get",
        "commonmark.inlines.InlineParser.parseLinkTitle",
        "re.search",
        "commonmark.inlines.InlineParser.peek",
        "commonmark.inlines.InlineParser.parseLinkDestination"
    ],
    "commonmark.inlines.InlineParser.removeBracket": [
        "<map>.get"
    ],
    "commonmark.inlines.InlineParser.spnl": [
        "commonmark.inlines.InlineParser.match"
    ],
    "commonmark.inlines.InlineParser.parseLinkDestination": [
        "commonmark.common.unescape_string",
        "commonmark.inlines.InlineParser.match",
        "commonmark.common.normalize_uri",
        "re.search",
        "commonmark.inlines.InlineParser.peek"
    ],
    "commonmark.common.unescape_string": [
        "re.search",
        "re.sub"
    ],
    "commonmark.inlines.InlineParser.parseLinkTitle": [
        "commonmark.common.unescape_string",
        "commonmark.inlines.InlineParser.match"
    ],
    "commonmark.inlines.InlineParser.parseLinkLabel": [
        "commonmark.inlines.InlineParser.match",
        "<builtin>.len"
    ],
    "commonmark.inlines.InlineParser.processEmphasis": [
        "commonmark.node.Node.append_child",
        "commonmark.inlines.InlineParser.removeDelimitersBetween",
        "commonmark.node.Node.__init__",
        "<map>.get",
        "<builtin>.len",
        "commonmark.inlines.InlineParser.removeDelimiter"
    ],
    "commonmark.inlines.InlineParser.removeDelimitersBetween": [
        "<map>.get"
    ],
    "commonmark.inlines.InlineParser.removeDelimiter": [
        "<map>.get"
    ],
    "commonmark.inlines.InlineParser.parseBang": [
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.peek",
        "commonmark.inlines.InlineParser.addBracket"
    ],
    "commonmark.inlines.InlineParser.addBracket": [],
    "commonmark.inlines.InlineParser.parseOpenBracket": [
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.addBracket"
    ],
    "commonmark.inlines.InlineParser.handleDelim": [
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.scanDelims",
        "<map>.get"
    ],
    "commonmark.inlines.InlineParser.scanDelims": [
        "re.search",
        "commonmark.inlines.InlineParser.peek"
    ],
    "commonmark.inlines.InlineParser.parseBackticks": [
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.match",
        "commonmark.node.Node.__init__",
        "<builtin>.len"
    ],
    "commonmark.inlines.InlineParser.parseBackslash": [
        "commonmark.inlines.text",
        "re.search",
        "commonmark.inlines.InlineParser.peek",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.inlines.InlineParser.parseNewline": [
        "re.sub",
        "commonmark.inlines.InlineParser.match",
        "commonmark.node.Node.__init__",
        "<builtin>.len"
    ],
    "pydoc": [
        "pydoc.ErrorDuringImport",
        "pydoc.Doc",
        "pkgutil",
        "tokenize",
        "re",
        "pydoc.Helper.__init__",
        "warnings",
        "importlib.util",
        "traceback",
        "urllib.parse",
        "importlib.machinery",
        "reprlib",
        "importlib._bootstrap_external",
        "re.compile",
        "inspect",
        "pydoc.TextRepr",
        "importlib._bootstrap",
        "os",
        "pydoc.HTMLDoc",
        "pydoc.TextDoc",
        "io",
        "platform",
        "pydoc.HTMLRepr",
        "collections",
        "pydoc.Helper",
        "pydoc.cli",
        "sysconfig",
        "pydoc._PlainTextDoc",
        "pydoc.ModuleScanner"
    ],
    "pydoc.ErrorDuringImport": [],
    "pydoc.Doc": [
        "sysconfig.get_path"
    ],
    "pydoc.HTMLRepr": [],
    "pydoc.HTMLDoc": [
        "pydoc.HTMLRepr.__init__"
    ],
    "pydoc.HTMLRepr.__init__": [
        "reprlib.Repr.__init__"
    ],
    "pydoc.TextRepr": [],
    "pydoc.TextDoc": [
        "pydoc.TextRepr.__init__"
    ],
    "pydoc.TextRepr.__init__": [
        "reprlib.Repr.__init__"
    ],
    "pydoc._PlainTextDoc": [],
    "pydoc.Helper": [
        "<builtin>.property",
        "<map>.items",
        "<builtin>.object",
        "<map>.get"
    ],
    "pydoc.Helper.__init__": [],
    "pydoc.ModuleScanner": [],
    "pydoc.cli": [
        "pydoc.apropos",
        "ntpath.splitext",
        "pydoc.ispath",
        "<builtin>.print",
        "pydoc.writedoc",
        "getopt",
        "posixpath.basename",
        "pydoc._adjust_cli_sys_path",
        "genericpath.exists",
        "pydoc.writedocs",
        "pydoc.importfile",
        "ntpath.basename",
        "nt._isdir",
        "pydoc.cli.BadUsage",
        "posixpath.splitext",
        "getopt.getopt",
        "genericpath.isdir",
        "pydoc.Helper.help",
        "genericpath.isfile",
        "pydoc.browse"
    ],
    "pydoc.cli.BadUsage": [],
    "pydoc._adjust_cli_sys_path": [
        "pydoc._get_revised_path"
    ],
    "pydoc._get_revised_path": [
        "<map>.copy",
        "posixpath.dirname",
        "genericpath.samefile",
        "ntpath.dirname",
        "os._Environ.copy"
    ],
    "genericpath.samefile": [
        "genericpath.samestat"
    ],
    "genericpath.samestat": [],
    "pydoc.apropos": [
        "warnings.catch_warnings.__init__"
    ],
    "pydoc.browse": [
        "webbrowser.open",
        "webbrowser",
        "<builtin>.input",
        "<builtin>.print",
        "pydoc._start_server"
    ],
    "webbrowser": [
        "subprocess",
        "webbrowser.BackgroundBrowser",
        "webbrowser.Chrome",
        "webbrowser.MacOSXOSAScript",
        "threading",
        "webbrowser.Opera",
        "webbrowser.main",
        "webbrowser.MacOSX",
        "webbrowser.Konqueror",
        "webbrowser.Elinks",
        "webbrowser.Grail",
        "webbrowser.Error",
        "webbrowser.UnixBrowser",
        "threading.RLock",
        "os",
        "webbrowser.BaseBrowser",
        "webbrowser.GenericBrowser",
        "shlex",
        "webbrowser.WindowsDefault",
        "webbrowser.Netscape",
        "shutil",
        "webbrowser.Galeon",
        "webbrowser.Mozilla"
    ],
    "shlex": [
        "re.compile",
        "collections",
        "shlex._print_tokens",
        "os",
        "re",
        "<builtin>.open",
        "<builtin>.len",
        "shlex.shlex.__init__",
        "io",
        "shlex.shlex"
    ],
    "shlex.shlex": [
        "<builtin>.property"
    ],
    "shlex.shlex.__init__": [
        "<builtin>.isinstance",
        "<str>.translate",
        "<str>.maketrans",
        "_io.StringIO",
        "_collections.deque"
    ],
    "shlex._print_tokens": [
        "<builtin>.repr",
        "shlex.shlex.get_token",
        "<builtin>.print"
    ],
    "shlex.shlex.get_token": [
        "shlex.shlex.sourcehook",
        "shlex.shlex.push_source",
        "<builtin>.print",
        "shlex.shlex.read_token",
        "<builtin>.repr",
        "shlex.shlex.get_token",
        "shlex.shlex.pop_source"
    ],
    "shlex.shlex.read_token": [
        "codecs.StreamRecoder.read",
        "<builtin>.print",
        "<builtin>.repr",
        "<builtin>.ValueError",
        "codecs.StreamRecoder.readline"
    ],
    "shlex.shlex.sourcehook": [
        "<builtin>.isinstance",
        "ntpath.dirname",
        "posixpath.join",
        "posixpath.dirname",
        "ntpath.join",
        "<builtin>.open",
        "posixpath.isabs",
        "ntpath.isabs"
    ],
    "shlex.shlex.push_source": [
        "<builtin>.print",
        "_io.StringIO",
        "<builtin>.isinstance"
    ],
    "shlex.shlex.pop_source": [
        "<builtin>.print"
    ],
    "<str>.maketrans": [],
    "webbrowser.Error": [],
    "webbrowser.BaseBrowser": [],
    "webbrowser.GenericBrowser": [],
    "webbrowser.BackgroundBrowser": [],
    "webbrowser.UnixBrowser": [],
    "webbrowser.Mozilla": [],
    "webbrowser.Netscape": [],
    "webbrowser.Galeon": [],
    "webbrowser.Chrome": [],
    "webbrowser.Opera": [],
    "webbrowser.Elinks": [],
    "webbrowser.Konqueror": [],
    "webbrowser.Grail": [],
    "webbrowser.WindowsDefault": [],
    "webbrowser.MacOSX": [],
    "webbrowser.MacOSXOSAScript": [],
    "webbrowser.main": [
        "getopt.getopt",
        "getopt",
        "<builtin>.open",
        "<builtin>.len",
        "<builtin>.print"
    ],
    "pydoc._start_server": [
        "pydoc._start_server.ServerThread",
        "threading",
        "pydoc._start_server.DocHandler",
        "pydoc._start_server.ServerThread.__init__",
        "http.server",
        "email.message",
        "select",
        "threading.Thread.start",
        "pydoc._start_server.DocServer"
    ],
    "http.server": [
        "datetime",
        "posixpath",
        "http.server.HTTPServer",
        "http.server.ThreadingHTTPServer",
        "argparse.ArgumentParser.__init__",
        "socketserver",
        "functools",
        "http.server.SimpleHTTPRequestHandler",
        "urllib.parse",
        "http",
        "select",
        "copy",
        "http.server.test",
        "argparse",
        "http.server.CGIHTTPRequestHandler",
        "os",
        "io",
        "argparse.ArgumentParser.parse_args",
        "shutil",
        "html",
        "mimetypes",
        "email.utils",
        "http.server.BaseHTTPRequestHandler",
        "argparse._ActionsContainer.add_argument",
        "socket",
        "http.server.DualStackServer",
        "http.client",
        "contextlib"
    ],
    "http.client": [
        "http.client.RemoteDisconnected",
        "<builtin>.globals",
        "http.client.IncompleteRead",
        "http.client.UnknownProtocol",
        "re",
        "http.client.UnimplementedFileMode",
        "http.client.InvalidURL",
        "http.client.NotConnected",
        "email.parser",
        "http.client.HTTPConnection",
        "http.client.HTTPResponse",
        "urllib.parse",
        "http",
        "http.client.ImproperConnectionState",
        "http.client.CannotSendHeader",
        "re.compile",
        "email.message",
        "http.client.BadStatusLine",
        "io",
        "http.client.ResponseNotReady",
        "http.client.HTTPMessage",
        "http.client.CannotSendRequest",
        "collections.abc",
        "ssl",
        "http.client.LineTooLong",
        "http.client.UnknownTransferEncoding",
        "socket",
        "http.client.HTTPException"
    ],
    "http": [
        "enum",
        "http.HTTPStatus"
    ],
    "http.HTTPStatus": [],
    "http.client.HTTPMessage": [],
    "http.client.HTTPResponse": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "http.client.HTTPException": [],
    "http.client.NotConnected": [],
    "http.client.InvalidURL": [],
    "http.client.UnknownProtocol": [],
    "http.client.UnknownTransferEncoding": [],
    "http.client.UnimplementedFileMode": [],
    "http.client.IncompleteRead": [],
    "http.client.ImproperConnectionState": [],
    "http.client.CannotSendRequest": [],
    "http.client.CannotSendHeader": [],
    "http.client.ResponseNotReady": [],
    "http.client.BadStatusLine": [],
    "http.client.LineTooLong": [],
    "http.client.RemoteDisconnected": [],
    "mimetypes": [
        "mimetypes._main",
        "posixpath",
        "mimetypes._default_mime_types",
        "os",
        "urllib.parse",
        "mimetypes.MimeTypes"
    ],
    "mimetypes.MimeTypes": [],
    "mimetypes._default_mime_types": [],
    "mimetypes._main": [
        "mimetypes.guess_type",
        "getopt.getopt",
        "getopt",
        "mimetypes.guess_extension",
        "mimetypes._main.usage",
        "<builtin>.print"
    ],
    "mimetypes._main.usage": [
        "<builtin>.print"
    ],
    "mimetypes.guess_type": [
        "mimetypes.init"
    ],
    "mimetypes.init": [
        "mimetypes.MimeTypes.__init__",
        "<builtin>.list",
        "mimetypes.MimeTypes.read_windows_registry",
        "mimetypes.MimeTypes.read",
        "genericpath.isfile"
    ],
    "mimetypes.MimeTypes.__init__": [
        "mimetypes.MimeTypes.add_type",
        "mimetypes.MimeTypes.read",
        "mimetypes.init"
    ],
    "mimetypes.MimeTypes.add_type": [],
    "mimetypes.MimeTypes.read": [
        "mimetypes.MimeTypes.readfp",
        "<builtin>.open"
    ],
    "mimetypes.MimeTypes.readfp": [
        "mimetypes.MimeTypes.add_type",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "mimetypes.MimeTypes.read_windows_registry": [
        "mimetypes.MimeTypes.add_type",
        "mimetypes.MimeTypes.read_windows_registry.enum_types"
    ],
    "mimetypes.MimeTypes.read_windows_registry.enum_types": [],
    "mimetypes.guess_extension": [
        "mimetypes.init"
    ],
    "socketserver": [
        "socketserver.ForkingMixIn",
        "socketserver._SocketWriter",
        "socketserver.BaseRequestHandler",
        "socketserver.ThreadingUnixStreamServer",
        "socketserver.StreamRequestHandler",
        "threading",
        "socketserver.UnixDatagramServer",
        "socketserver.UnixStreamServer",
        "socketserver.TCPServer",
        "socketserver.ForkingTCPServer",
        "socketserver.BaseServer",
        "socketserver.ThreadingTCPServer",
        "socketserver.ThreadingUnixDatagramServer",
        "socketserver.DatagramRequestHandler",
        "socketserver.ThreadingUDPServer",
        "os",
        "selectors",
        "socketserver.ThreadingMixIn",
        "io",
        "socketserver.UDPServer",
        "<list>.extend",
        "socket",
        "socketserver.ForkingUDPServer",
        "<builtin>.hasattr"
    ],
    "socketserver.BaseServer": [],
    "socketserver.TCPServer": [],
    "socketserver.UDPServer": [],
    "socketserver.ForkingMixIn": [],
    "socketserver.ThreadingMixIn": [],
    "socketserver.ForkingUDPServer": [],
    "socketserver.ForkingTCPServer": [],
    "socketserver.ThreadingUDPServer": [],
    "socketserver.ThreadingTCPServer": [],
    "socketserver.UnixStreamServer": [],
    "socketserver.UnixDatagramServer": [],
    "socketserver.ThreadingUnixStreamServer": [],
    "socketserver.ThreadingUnixDatagramServer": [],
    "socketserver.BaseRequestHandler": [],
    "socketserver.StreamRequestHandler": [],
    "socketserver._SocketWriter": [],
    "socketserver.DatagramRequestHandler": [],
    "http.server.HTTPServer": [],
    "http.server.ThreadingHTTPServer": [],
    "http.server.BaseHTTPRequestHandler": [],
    "http.server.SimpleHTTPRequestHandler": [
        "mimetypes.init"
    ],
    "http.server.CGIHTTPRequestHandler": [
        "<builtin>.hasattr"
    ],
    "http.server.DualStackServer": [],
    "http.server.test": [
        "<builtin>.print",
        "http.server._get_best_family"
    ],
    "http.server._get_best_family": [
        "<builtin>.iter",
        "<builtin>.next",
        "socket.getaddrinfo"
    ],
    "socket.getaddrinfo": [
        "<list>.append"
    ],
    "pydoc._start_server.DocHandler": [],
    "pydoc._start_server.DocServer": [],
    "pydoc._start_server.ServerThread": [],
    "pydoc._start_server.ServerThread.__init__": [
        "threading.Thread.__init__",
        "<builtin>.int"
    ],
    "threading.Thread.start": [
        "threading.Event.wait",
        "<builtin>.RuntimeError",
        "threading.Event.is_set"
    ],
    "threading.Event.is_set": [],
    "threading.Event.wait": [],
    "webbrowser.open": [
        "webbrowser.GenericBrowser.open",
        "webbrowser.get",
        "webbrowser.BackgroundBrowser.open"
    ],
    "webbrowser.get": [
        "shlex.split",
        "webbrowser.GenericBrowser.__init__",
        "webbrowser._synthesize"
    ],
    "webbrowser._synthesize": [
        "shutil.which",
        "copy.copy",
        "webbrowser.register",
        "ntpath.basename",
        "posixpath.basename",
        "copy"
    ],
    "shutil.which": [
        "<str>.endswith",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<list>.insert",
        "posixpath.join",
        "posixpath.dirname",
        "os._fscodec.fsencode",
        "posixpath.normcase",
        "ntpath.normcase",
        "shutil._access_check",
        "<builtin>.any",
        "ntpath.join",
        "ntpath.dirname",
        "os._fscodec.fsdecode",
        "<str>.lower",
        "<str>.split"
    ],
    "shutil._access_check": [
        "genericpath.isdir",
        "nt._isdir",
        "genericpath.exists"
    ],
    "webbrowser.register": [],
    "shlex.split": [
        "shlex.shlex.__init__",
        "<builtin>.list"
    ],
    "webbrowser.GenericBrowser.__init__": [
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.isinstance"
    ],
    "webbrowser.GenericBrowser.open": [
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__"
    ],
    "webbrowser.BackgroundBrowser.open": [
        "subprocess.Popen.poll",
        "subprocess.Popen.__init__"
    ],
    "<builtin>.input": [],
    "pydoc.ispath": [
        "<builtin>.isinstance"
    ],
    "pydoc.importfile": [
        "posixpath.splitext",
        "ntpath.splitext",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.open",
        "pydoc.ErrorDuringImport.__init__",
        "<builtin>.len"
    ],
    "pydoc.ErrorDuringImport.__init__": [],
    "pydoc.Helper.help": [
        "pydoc.Helper.listmodules",
        "pydoc.Helper.__init__",
        "pydoc.doc",
        "<builtin>.isinstance",
        "pydoc.Helper.showsymbol",
        "pydoc.Helper.listsymbols",
        "<builtin>.eval",
        "pydoc.Helper.listtopics",
        "pydoc.Helper.showtopic",
        "<builtin>.type",
        "pydoc.Helper.listkeywords"
    ],
    "pydoc.doc": [
        "<builtin>.print",
        "pydoc.render_doc",
        "pydoc.pager"
    ],
    "pydoc.render_doc": [
        "inspect.isdatadescriptor",
        "inspect.isroutine",
        "inspect.isclass",
        "pydoc.resolve",
        "inspect.ismodule",
        "inspect.getmodule",
        "<builtin>.type",
        "pydoc.describe",
        "pydoc.Doc.document"
    ],
    "pydoc.resolve": [
        "pydoc.locate",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.ImportError"
    ],
    "pydoc.locate": [
        "<str>.split",
        "pydoc.safeimport",
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "pydoc.safeimport": [
        "<builtin>.issubclass",
        "<builtin>.__import__",
        "<builtin>.getattr",
        "pydoc.ErrorDuringImport.__init__",
        "<str>.split"
    ],
    "pydoc.describe": [
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.isfunction",
        "inspect.ismodule",
        "inspect.isbuiltin",
        "inspect.isgetsetdescriptor",
        "<builtin>.type",
        "<builtin>.hasattr",
        "inspect.ismemberdescriptor"
    ],
    "inspect.isgetsetdescriptor": [],
    "inspect.ismemberdescriptor": [],
    "inspect.isdatadescriptor": [
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.isfunction",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "pydoc.Doc.document": [
        "pydoc.TextDoc.docother",
        "pydoc.HTMLDoc.docroutine",
        "pydoc.HTMLDoc.docdata",
        "inspect.isdatadescriptor",
        "inspect.isroutine",
        "inspect.isclass",
        "pydoc.TextDoc.docclass",
        "pydoc.TextDoc.docdata",
        "pydoc.HTMLDoc.docmodule",
        "pydoc.HTMLDoc.docclass",
        "inspect.ismodule",
        "pydoc.Doc.fail",
        "pydoc.TextDoc.docroutine",
        "pydoc.HTMLDoc.docother",
        "pydoc.TextDoc.docmodule"
    ],
    "pydoc.Doc.fail": [
        "<builtin>.TypeError",
        "<builtin>.repr",
        "<builtin>.type"
    ],
    "pydoc.TextDoc.docmodule": [
        "pydoc.getdoc",
        "<builtin>.set",
        "pydoc.visiblename",
        "inspect.getmembers",
        "pkgutil.iter_modules",
        "<builtin>.str",
        "pydoc.Doc.getdocloc",
        "inspect.getabsfile",
        "inspect.isbuiltin",
        "pydoc.TextDoc.section",
        "inspect.getmodule",
        "<builtin>.getattr",
        "<list>.append",
        "pydoc.splitdoc",
        "<builtin>.hasattr",
        "<list>.sort"
    ],
    "pydoc.getdoc": [
        "inspect.getcomments",
        "re.sub",
        "inspect.getdoc"
    ],
    "inspect.getdoc": [
        "inspect._finddoc",
        "inspect.cleandoc",
        "<builtin>.isinstance"
    ],
    "inspect._finddoc": [
        "inspect._findclass",
        "<builtin>.isinstance",
        "inspect.ismethoddescriptor",
        "inspect.isdatadescriptor",
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.isfunction",
        "inspect.isbuiltin",
        "<builtin>.getattr",
        "inspect.ismemberdescriptor"
    ],
    "inspect._findclass": [
        "inspect.isclass",
        "<builtin>.getattr"
    ],
    "inspect.cleandoc": [
        "<str>.expandtabs"
    ],
    "inspect.getcomments": [
        "<builtin>.len",
        "inspect.ismodule",
        "inspect.indentsize",
        "<list>.append",
        "inspect.findsource"
    ],
    "inspect.indentsize": [
        "<builtin>.len"
    ],
    "pydoc.splitdoc": [
        "<builtin>.len"
    ],
    "pydoc.TextDoc.section": [
        "pydoc.TextDoc.indent",
        "pydoc._PlainTextDoc.bold",
        "<str>.rstrip",
        "pydoc.TextDoc.bold"
    ],
    "pydoc.TextDoc.indent": [
        "<str>.split"
    ],
    "pydoc._PlainTextDoc.bold": [],
    "pydoc.TextDoc.bold": [],
    "pydoc.Doc.getdocloc": [
        "<builtin>.isinstance",
        "inspect.getabsfile",
        "posixpath.join",
        "posixpath.normcase",
        "ntpath.normcase",
        "<str>.startswith",
        "ntpath.join",
        "<str>.rstrip",
        "<builtin>.type"
    ],
    "inspect.getmembers": [
        "<builtin>.set",
        "<builtin>.isinstance",
        "inspect.isroutine",
        "inspect.isclass",
        "pydoc.isdata",
        "inspect.getmro",
        "inspect.ismodule",
        "<builtin>.dir",
        "<builtin>.getattr",
        "<list>.append",
        "<list>.sort"
    ],
    "pydoc.visiblename": [
        "<builtin>.hasattr"
    ],
    "pydoc.isdata": [
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.isroutine",
        "inspect.isclass",
        "inspect.ismodule",
        "inspect.iscode"
    ],
    "pkgutil.iter_modules": [
        "<builtin>.isinstance",
        "pkgutil.iter_importers",
        "pkgutil.iter_importer_modules",
        "<builtin>.map",
        "<builtin>.ValueError"
    ],
    "pkgutil.iter_importers": [
        "importlib.import_module",
        "pkgutil.get_importer",
        "<builtin>.ImportError",
        "<str>.startswith",
        "<builtin>.getattr",
        "email.message.Message.__iter__",
        "os._Environ.__iter__",
        "<str>.rpartition"
    ],
    "<str>.rpartition": [],
    "pkgutil.iter_importer_modules": [
        "<builtin>.hasattr"
    ],
    "pydoc.TextDoc.docclass": [
        "pydoc.getdoc",
        "inspect.getmro",
        "pydoc.TextDoc.indent",
        "<builtin>.str",
        "<list>",
        "pydoc.TextDoc.docclass.HorizontalRule",
        "pydoc.classify_class_attrs",
        "pydoc._PlainTextDoc.bold",
        "pydoc.classname",
        "pydoc.sort_attributes",
        "<builtin>.map",
        "pydoc.TextDoc.docclass.HorizontalRule.__init__",
        "pydoc.TextDoc.docclass.spill",
        "pydoc.visiblename",
        "<builtin>.sorted",
        "pydoc.TextDoc.docclass.spilldescriptors",
        "inspect.signature",
        "pydoc.TextDoc.bold",
        "pydoc._split_list",
        "pydoc.TextDoc.docclass.makename",
        "<str>.rstrip",
        "<builtin>.len",
        "_collections.deque",
        "pydoc.TextDoc.docclass.spilldata"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "inspect._signature_from_callable",
        "inspect._signature_get_partial",
        "<builtin>.isinstance",
        "inspect.unwrap",
        "inspect._signature_get_user_defined_method",
        "inspect._signature_is_builtin",
        "<builtin>.TypeError",
        "inspect.Signature.from_callable",
        "inspect.isfunction",
        "inspect._signature_from_builtin",
        "inspect._signature_is_functionlike",
        "<builtin>.callable",
        "<builtin>.type",
        "inspect._signature_bound_method",
        "inspect._signature_from_function",
        "<builtin>.ValueError"
    ],
    "inspect._signature_bound_method": [
        "<str>.replace",
        "inspect.Signature.replace",
        "<builtin>.tuple",
        "<map>.values",
        "<builtin>.ValueError"
    ],
    "inspect._signature_from_callable.<lambda1>": [],
    "inspect._signature_is_functionlike": [
        "inspect.isclass",
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "inspect._signature_from_function": [
        "<list>.append",
        "inspect._signature_fromstr",
        "<builtin>.TypeError",
        "inspect.Signature.__init__",
        "inspect.isfunction",
        "<builtin>.enumerate",
        "inspect._signature_is_functionlike",
        "<builtin>.getattr",
        "<builtin>.len",
        "<map>.get"
    ],
    "inspect._signature_fromstr": [
        "ast",
        "inspect._signature_fromstr.p",
        "inspect._signature_strip_non_python_syntax",
        "<builtin>.reversed",
        "<builtin>.isinstance",
        "<builtin>.list",
        "inspect._signature_fromstr.RewriteSymbolics",
        "inspect.Signature.__init__",
        "ast.parse",
        "<builtin>.enumerate",
        "<builtin>.object",
        "<builtin>.zip",
        "inspect.ismodule",
        "<list>.pop",
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "inspect._signature_strip_non_python_syntax": [
        "<builtin>.iter",
        "<builtin>.next",
        "tokenize.tokenize",
        "<list>"
    ],
    "inspect._signature_fromstr.RewriteSymbolics": [],
    "inspect._signature_fromstr.p": [
        "<list>.append",
        "ast.NodeVisitor.visit",
        "ast.literal_eval",
        "inspect._signature_fromstr.parse_name"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "inspect.Signature.__init__": [
        "<builtin>.enumerate",
        "<builtin>.ValueError",
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.__init__": [
        "_weakref.proxy"
    ],
    "_weakref.proxy": [],
    "inspect._signature_is_builtin": [
        "<builtin>.isinstance",
        "inspect.ismethoddescriptor",
        "inspect.isbuiltin"
    ],
    "inspect._signature_from_builtin": [
        "inspect._signature_fromstr",
        "inspect._signature_is_builtin",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "inspect._signature_get_partial": [
        "<map>.items",
        "<str>.replace",
        "collections.OrderedDict.move_to_end",
        "inspect.Signature.bind_partial",
        "collections.OrderedDict.pop",
        "inspect.Signature.replace",
        "collections.OrderedDict.values",
        "<builtin>.ValueError",
        "collections.OrderedDict.__init__"
    ],
    "inspect.Signature.bind_partial": [
        "inspect.Signature._bind"
    ],
    "inspect.Signature._bind": [
        "<builtin>.iter",
        "<builtin>.TypeError",
        "<builtin>.next",
        "inspect.BoundArguments.__init__",
        "collections.OrderedDict.__init__"
    ],
    "inspect.BoundArguments.__init__": [],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.values": [],
    "inspect.Signature.replace": [
        "<builtin>.type"
    ],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr"
    ],
    "pydoc.TextDoc.docclass.HorizontalRule": [],
    "pydoc.TextDoc.docclass.HorizontalRule.__init__": [],
    "pydoc.classify_class_attrs": [
        "inspect.classify_class_attrs",
        "<builtin>.isinstance",
        "inspect.isdatadescriptor",
        "<list>.append"
    ],
    "inspect.classify_class_attrs": [
        "<list>.append",
        "<builtin>.isinstance",
        "<builtin>.set",
        "inspect.isroutine",
        "inspect.getmro",
        "<builtin>.tuple",
        "<builtin>.dir",
        "<builtin>.type",
        "<builtin>.Exception",
        "<builtin>.getattr"
    ],
    "pydoc._split_list": [
        "pydoc.HTMLDoc.docclass.<lambda4>",
        "pydoc.TextDoc.docclass.<lambda1>",
        "pydoc.HTMLDoc.docclass.<lambda3>",
        "pydoc.HTMLDoc.docclass.<lambda6>",
        "pydoc.TextDoc.docclass.<lambda4>",
        "pydoc.TextDoc.docclass.<lambda3>",
        "pydoc.TextDoc.docclass.<lambda5>",
        "pydoc.HTMLDoc.docclass.<lambda7>",
        "pydoc.TextDoc.docclass.<lambda2>",
        "pydoc.TextDoc.docclass.<lambda7>",
        "pydoc.HTMLDoc.docclass.<lambda2>",
        "pydoc.HTMLDoc.docclass.<lambda5>",
        "<list>.append",
        "pydoc.TextDoc.docclass.<lambda6>",
        "pydoc.HTMLDoc.docclass.<lambda1>"
    ],
    "pydoc.TextDoc.docclass.<lambda1>": [],
    "pydoc.classname": [],
    "pydoc.sort_attributes": [
        "<list>.sort",
        "<builtin>.enumerate",
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "pydoc.TextDoc.docclass.spill": [
        "pydoc.TextDoc.docclass.HorizontalRule.maybe",
        "pydoc.TextDoc.docdata",
        "pydoc._split_list",
        "<builtin>.getattr",
        "<list>"
    ],
    "pydoc.TextDoc.docclass.<lambda2>": [],
    "pydoc.TextDoc.docclass.HorizontalRule.maybe": [
        "<list>"
    ],
    "pydoc.TextDoc.docclass.<lambda3>": [],
    "pydoc.TextDoc.docclass.<lambda4>": [],
    "pydoc.TextDoc.docclass.spilldescriptors": [
        "pydoc._split_list",
        "pydoc.TextDoc.docdata",
        "pydoc.TextDoc.docclass.HorizontalRule.maybe",
        "<list>"
    ],
    "pydoc.TextDoc.docclass.<lambda5>": [],
    "pydoc.TextDoc.docclass.<lambda6>": [],
    "pydoc.TextDoc.docclass.spilldata": [
        "pydoc.TextDoc.docother",
        "pydoc.getdoc",
        "pydoc.TextDoc.docclass.HorizontalRule.maybe",
        "inspect.isdatadescriptor",
        "pydoc._split_list",
        "<builtin>.callable",
        "<builtin>.getattr",
        "<list>"
    ],
    "pydoc.TextDoc.docclass.<lambda7>": [],
    "pydoc.TextDoc.docroutine": [
        "pydoc.getdoc",
        "pydoc.TextDoc.bold",
        "inspect.iscoroutinefunction",
        "inspect.isroutine",
        "pydoc._PlainTextDoc.bold",
        "<builtin>.str",
        "pydoc._is_bound_method",
        "pydoc.TextDoc.indent",
        "inspect.getattr_static",
        "<str>.rstrip",
        "pydoc.classname",
        "inspect.isasyncgenfunction",
        "inspect.signature"
    ],
    "pydoc._is_bound_method": [
        "inspect.ismethod",
        "inspect.ismodule",
        "<builtin>.getattr",
        "inspect.isbuiltin"
    ],
    "inspect.iscoroutinefunction": [
        "inspect._has_code_flag"
    ],
    "inspect._has_code_flag": [
        "inspect.ismethod",
        "functools._unwrap_partial",
        "<builtin>.bool",
        "inspect.isfunction"
    ],
    "functools._unwrap_partial": [
        "<builtin>.isinstance"
    ],
    "inspect.isasyncgenfunction": [
        "inspect._has_code_flag"
    ],
    "inspect.getattr_static": [
        "inspect._check_class",
        "inspect._check_instance",
        "inspect._is_type",
        "<builtin>.AttributeError",
        "<builtin>.type",
        "inspect._shadowed_dict",
        "inspect._static_getmro"
    ],
    "inspect._is_type": [
        "inspect._static_getmro"
    ],
    "inspect._static_getmro": [],
    "inspect._shadowed_dict": [
        "inspect._static_getmro"
    ],
    "inspect._check_instance": [],
    "inspect._check_class": [
        "inspect._shadowed_dict",
        "<builtin>.type",
        "inspect._static_getmro"
    ],
    "pydoc.TextDoc.docdata": [
        "pydoc.getdoc",
        "<list>"
    ],
    "pydoc.TextDoc.docother": [
        "pydoc.TextDoc.bold",
        "<builtin>.len",
        "pydoc._PlainTextDoc.bold",
        "reprlib.Repr.repr",
        "pydoc.TextDoc.indent",
        "<builtin>.str"
    ],
    "reprlib.Repr.repr": [
        "pydoc.TextRepr.repr1",
        "reprlib.Repr.repr1"
    ],
    "pydoc.TextRepr.repr1": [
        "pydoc.stripid",
        "pydoc.cram",
        "<builtin>.getattr",
        "<builtin>.type",
        "<builtin>.repr",
        "<builtin>.hasattr"
    ],
    "pydoc.stripid": [],
    "pydoc.cram": [
        "<builtin>.max",
        "<builtin>.len"
    ],
    "reprlib.Repr.repr1": [
        "reprlib.Repr.repr_instance",
        "<builtin>.getattr",
        "<builtin>.type",
        "pydoc.TextRepr.repr_instance",
        "<builtin>.hasattr"
    ],
    "pydoc.TextRepr.repr_instance": [
        "<builtin>.repr",
        "pydoc.stripid",
        "pydoc.cram"
    ],
    "reprlib.Repr.repr_instance": [
        "<builtin>.max",
        "<builtin>.id",
        "<builtin>.len"
    ],
    "pydoc.pager": [
        "pydoc.getpager",
        "pydoc.plainpager",
        "pydoc.ttypager",
        "pydoc.getpager.<lambda1>"
    ],
    "pydoc.getpager": [
        "tempfile",
        "tempfile.mkstemp",
        "click._winconsole.ConsoleStream.isatty",
        "<builtin>.hasattr",
        "click._compat._NonClosingTextIOWrapper.isatty"
    ],
    "tempfile.mkstemp": [
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner"
    ],
    "tempfile._sanitize_params": [
        "tempfile.gettempdir",
        "os._fscodec.fsencode",
        "tempfile._infer_return_type",
        "os._fscodec.fsdecode",
        "tempfile.gettempdirb"
    ],
    "tempfile._infer_return_type": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "tempfile.gettempdirb": [
        "os._fscodec.fsdecode",
        "tempfile.gettempdir",
        "os._fscodec.fsencode"
    ],
    "tempfile.gettempdir": [
        "tempfile._get_default_tempdir"
    ],
    "tempfile._get_default_tempdir": [
        "posixpath.join",
        "genericpath.isdir",
        "<builtin>.FileNotFoundError",
        "<builtin>.next",
        "tempfile._candidate_tempdir_list",
        "ntpath.join",
        "nt._isdir",
        "_io.open",
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.range"
    ],
    "tempfile._candidate_tempdir_list": [
        "os.getenv",
        "<list>.extend",
        "<list>.append"
    ],
    "os.getenv": [],
    "tempfile._mkstemp_inner": [
        "posixpath.join",
        "genericpath.isdir",
        "<builtin>.next",
        "ntpath.join",
        "nt._isdir",
        "tempfile._get_candidate_names",
        "<builtin>.FileExistsError",
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "tempfile._get_candidate_names": [],
    "<builtin>.FileExistsError": [],
    "pydoc.ttypager": [
        "tty",
        "codecs.StreamRecoder.write",
        "pydoc.plain",
        "pydoc.ttypager.<lambda2>",
        "<builtin>.int",
        "pydoc._escape_stdout",
        "tty.setcbreak",
        "pydoc.ttypager.<lambda1>",
        "rich.file_proxy.FileProxy.flush",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<str>.split"
    ],
    "pydoc._escape_stdout": [
        "<builtin>.getattr"
    ],
    "pydoc.plain": [
        "re.sub"
    ],
    "tty.setcbreak": [],
    "pydoc.ttypager.<lambda1>": [
        "codecs.StreamRecoder.read"
    ],
    "pydoc.ttypager.<lambda2>": [
        "codecs.StreamRecoder.readline"
    ],
    "pydoc.plainpager": [
        "codecs.StreamRecoder.write",
        "pydoc.plain",
        "pydoc._escape_stdout",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "pydoc.getpager.<lambda1>": [],
    "pydoc.Helper.showtopic": [
        "textwrap.wrap",
        "pydoc_data.topics",
        "textwrap",
        "pydoc.Helper.showtopic",
        "<builtin>.type",
        "<map>.get",
        "pydoc.pager",
        "<builtin>.repr"
    ],
    "pydoc_data.topics": [],
    "textwrap.wrap": [
        "textwrap.TextWrapper.wrap",
        "textwrap.TextWrapper.__init__"
    ],
    "textwrap.TextWrapper.__init__": [],
    "textwrap.TextWrapper.wrap": [
        "textwrap.TextWrapper._wrap_chunks",
        "textwrap.TextWrapper._split_chunks",
        "textwrap.TextWrapper._fix_sentence_endings"
    ],
    "textwrap.TextWrapper._split_chunks": [
        "textwrap.TextWrapper._split",
        "textwrap.TextWrapper._munge_whitespace"
    ],
    "textwrap.TextWrapper._munge_whitespace": [
        "<str>.expandtabs",
        "<str>.translate"
    ],
    "textwrap.TextWrapper._split": [
        "<str>.split"
    ],
    "textwrap.TextWrapper._fix_sentence_endings": [
        "<list>",
        "<map>",
        "<builtin>.len"
    ],
    "textwrap.TextWrapper._wrap_chunks": [
        "<list>.reverse",
        "<builtin>.sum",
        "textwrap.TextWrapper._handle_long_word",
        "<builtin>.len",
        "click._textwrap.TextWrapper._handle_long_word",
        "<list>.append",
        "<builtin>.map",
        "<builtin>.ValueError"
    ],
    "textwrap.TextWrapper._handle_long_word": [
        "<list>.append"
    ],
    "pydoc.Helper.showsymbol": [
        "pydoc.Helper.showtopic"
    ],
    "pydoc.Helper.listmodules": [
        "pydoc.ModuleScanner.run",
        "<map>.keys",
        "pydoc.apropos",
        "pydoc.Helper.list"
    ],
    "pydoc.ModuleScanner.run": [
        "pydoc.Helper.listmodules.callback",
        "pydoc.Helper.listmodules.onerror",
        "<builtin>.__import__",
        "<builtin>.getattr",
        "pydoc.source_synopsis",
        "_io.StringIO",
        "pkgutil._get_spec",
        "<builtin>.hasattr",
        "pkgutil.walk_packages"
    ],
    "pydoc.Helper.listmodules.callback": [
        "<str>.find"
    ],
    "pkgutil.walk_packages": [
        "pkgutil.iter_modules",
        "pydoc.Helper.listmodules.onerror",
        "<builtin>.__import__"
    ],
    "pydoc.Helper.listmodules.onerror": [
        "pydoc.Helper.listmodules.callback"
    ],
    "pkgutil._get_spec": [
        "pkgutil.ImpImporter.find_module",
        "_bootstrap.spec_from_loader"
    ],
    "_bootstrap.spec_from_loader": [],
    "pydoc.source_synopsis": [],
    "pydoc.Helper.list": [
        "<builtin>.range",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.sorted"
    ],
    "pydoc.Helper.listtopics": [
        "<map>.keys",
        "pydoc.Helper.list"
    ],
    "pydoc.Helper.listsymbols": [
        "<map>.keys",
        "pydoc.Helper.list"
    ],
    "pydoc.Helper.listkeywords": [
        "<map>.keys",
        "pydoc.Helper.list"
    ],
    "pydoc.writedoc": [
        "pydoc.HTMLDoc.page",
        "pydoc.resolve",
        "<builtin>.open",
        "pydoc.describe",
        "<builtin>.print",
        "pydoc.Doc.document"
    ],
    "pydoc.HTMLDoc.page": [],
    "pydoc.writedocs": [
        "pydoc.writedoc",
        "pkgutil.walk_packages"
    ],
    "rich.pretty": [
        "rich.pretty.Node",
        "rich.measure",
        "rich.pretty._Line",
        "collections.Counter.__init__",
        "rich.pretty.Thing",
        "typing",
        "attr",
        "dataclasses",
        "rich.repr",
        "types",
        "<builtin>.print",
        "rich.abc",
        "array",
        "rich.console",
        "rich.text",
        "rich.pretty.Pretty.__init__",
        "rich._loop",
        "collections.namedtuple",
        "_collections.defaultdict",
        "inspect",
        "os",
        "rich.cells",
        "rich.pretty.StockKeepingUnit",
        "<builtin>.frozenset",
        "rich.highlighter",
        "rich.pretty.BrokenRepr",
        "collections",
        "<builtin>.tuple",
        "rich.pretty.Pretty",
        "rich._pick",
        "rich",
        "rich.jupyter"
    ],
    "array": [],
    "attr": [
        "attr._version_info",
        "attr._funcs",
        "attr._make",
        "attr.filters",
        "attr.converters",
        "attr.validators",
        "attr._version_info.VersionInfo._from_version_string",
        "functools",
        "<list>.extend",
        "attr._config",
        "attr._next_gen",
        "attr._cmp",
        "attr.setters",
        "attr.exceptions"
    ],
    "attr.converters": [
        "typing",
        "attr._make",
        "attr._compat"
    ],
    "attr._compat": [
        "threading",
        "collections.abc",
        "warnings",
        "attr._compat.make_set_closure_cell",
        "collections",
        "types",
        "inspect",
        "_thread._local",
        "attr._compat._AnnotationExtractor",
        "platform",
        "platform.python_implementation"
    ],
    "attr._compat._AnnotationExtractor": [],
    "attr._compat.make_set_closure_cell": [
        "attr._compat.make_set_closure_cell.make_func_with_cell",
        "<list>.extend",
        "attr._compat.make_set_closure_cell.set_closure_cell",
        "<list>.append"
    ],
    "attr._compat.make_set_closure_cell.make_func_with_cell": [],
    "attr._compat.make_set_closure_cell.set_closure_cell": [],
    "attr._make": [
        "attr._make._CountingAttr",
        "typing",
        "types",
        "attr._config",
        "<builtin>.object",
        "attr._make._Nothing",
        "operator",
        "attr.setters",
        "attr._make._add_eq",
        "attr._make._add_repr",
        "linecache",
        "attr._make._CacheHashWrapper",
        "attr.setters.pipe",
        "attr._compat",
        "attr._make._add_hash",
        "copy",
        "attr._make._make_attr_tuple_class",
        "attr._make._ClassBuilder",
        "attr._make.Attribute.__init__",
        "attr._make.Attribute",
        "attr._make.Factory",
        "attr.exceptions",
        "attr._make._AndValidator"
    ],
    "attr._config": [],
    "attr.setters": [
        "<builtin>.object",
        "attr.exceptions",
        "attr._config"
    ],
    "attr.exceptions": [
        "attr.exceptions.UnannotatedAttributeError",
        "attr.exceptions.FrozenError",
        "attr.exceptions.PythonTooOldError",
        "attr.exceptions.FrozenAttributeError",
        "attr.exceptions.DefaultAlreadySetError",
        "attr.exceptions.AttrsAttributeNotFoundError",
        "attr.exceptions.NotAnAttrsClassError",
        "attr.exceptions.FrozenInstanceError",
        "attr.exceptions.NotCallableError"
    ],
    "attr.exceptions.FrozenError": [],
    "attr.exceptions.FrozenInstanceError": [],
    "attr.exceptions.FrozenAttributeError": [],
    "attr.exceptions.AttrsAttributeNotFoundError": [],
    "attr.exceptions.NotAnAttrsClassError": [],
    "attr.exceptions.DefaultAlreadySetError": [],
    "attr.exceptions.UnannotatedAttributeError": [],
    "attr.exceptions.PythonTooOldError": [],
    "attr.exceptions.NotCallableError": [],
    "attr.setters.pipe": [],
    "attr._make._Nothing": [],
    "attr._make._CacheHashWrapper": [
        "<builtin>.type"
    ],
    "attr._make._make_attr_tuple_class": [
        "<builtin>.enumerate",
        "attr._make._compile_and_eval",
        "<list>.append"
    ],
    "attr._make._compile_and_eval": [
        "<builtin>.eval",
        "<builtin>.compile"
    ],
    "attr._make._ClassBuilder": [],
    "attr._make.Attribute": [
        "<builtin>.classmethod"
    ],
    "attr._make.Attribute.__init__": [
        "<builtin>.dict",
        "attr._make._determine_attrib_eq_order"
    ],
    "attr._make._determine_attrib_eq_order": [
        "<builtin>.any",
        "attr._make._determine_attrib_eq_order.decide_callable_or_boolean",
        "<builtin>.ValueError"
    ],
    "attr._make._determine_attrib_eq_order.decide_callable_or_boolean": [
        "<builtin>.callable"
    ],
    "attr._make._add_repr": [
        "attr._make._make_repr"
    ],
    "attr._make._make_repr": [
        "<builtin>.tuple"
    ],
    "attr._make._add_eq": [
        "attr._make._make_ne",
        "attr._make._make_eq"
    ],
    "attr._make._make_eq": [
        "attr._make._make_method",
        "attr._make._generate_unique_filename",
        "<list>.append"
    ],
    "attr._make._generate_unique_filename": [
        "<builtin>.getattr"
    ],
    "attr._make._make_method": [
        "attr._make._compile_and_eval",
        "<str>.splitlines",
        "<map>.setdefault",
        "<builtin>.len"
    ],
    "attr._make._make_ne": [],
    "attr._make._add_hash": [
        "attr._make._make_hash"
    ],
    "attr._make._make_hash": [
        "<builtin>.hash",
        "attr._make._make_hash.append_hash_computation_lines",
        "<builtin>.tuple",
        "<list>.append",
        "attr._make._make_method",
        "attr._make._generate_unique_filename"
    ],
    "attr._make._make_hash.append_hash_computation_lines": [
        "<list>.extend",
        "<list>.append"
    ],
    "attr._make._CountingAttr": [
        "<builtin>.tuple",
        "attr._make.Attribute.__init__"
    ],
    "attr._make.Factory": [],
    "attr._make._AndValidator": [
        "attr._make.attrib"
    ],
    "attr._make.attrib": [
        "attr._make._determine_attrib_eq_order",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "attr.setters.pipe",
        "attr._make.and_",
        "<builtin>.callable",
        "attr._make.Factory.__init__",
        "attr._make._CountingAttr.__init__",
        "<builtin>.ValueError",
        "attr._make.pipe"
    ],
    "attr._make.Factory.__init__": [],
    "attr._make.and_": [
        "<builtin>.tuple",
        "<list>.extend"
    ],
    "attr._make.pipe": [
        "attr._compat._AnnotationExtractor.__init__",
        "attr._compat._AnnotationExtractor.get_return_type",
        "typing.TypeVar.__init__",
        "attr._compat._AnnotationExtractor.get_first_param_type"
    ],
    "attr._make._CountingAttr.__init__": [],
    "attr.filters": [
        "attr._make"
    ],
    "attr.validators": [
        "attr._make",
        "attr._config",
        "attr.validators._MatchesReValidator",
        "operator",
        "re",
        "attr.validators._IsCallableValidator",
        "attr.validators._MinLengthValidator",
        "attr.validators._OptionalValidator",
        "attr.validators._InValidator",
        "attr.validators._NumberValidator",
        "attr.validators._MaxLengthValidator",
        "attr.validators._DeepMapping",
        "attr.validators._InstanceOfValidator",
        "contextlib.contextmanager",
        "re.compile",
        "attr.validators._ProvidesValidator",
        "attr.validators._DeepIterable",
        "<builtin>.type",
        "contextlib",
        "attr.exceptions"
    ],
    "attr.validators._InstanceOfValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MatchesReValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._ProvidesValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._OptionalValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._InValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._IsCallableValidator": [],
    "attr.validators._DeepIterable": [
        "attr._make.attrib",
        "attr.validators.is_callable",
        "attr.validators.optional"
    ],
    "attr.validators.is_callable": [],
    "attr.validators.optional": [
        "<builtin>.isinstance"
    ],
    "attr.validators._DeepMapping": [
        "attr._make.attrib",
        "attr.validators.is_callable",
        "attr.validators.optional"
    ],
    "attr.validators._NumberValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MaxLengthValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MinLengthValidator": [
        "attr._make.attrib"
    ],
    "attr._cmp": [
        "attr._make",
        "functools",
        "types"
    ],
    "attr._funcs": [
        "attr._make",
        "copy",
        "attr.exceptions"
    ],
    "attr._version_info": [
        "attr._funcs",
        "attr._make",
        "functools",
        "attr._version_info.VersionInfo"
    ],
    "attr._version_info.VersionInfo": [
        "attr._make.attrib",
        "<builtin>.classmethod"
    ],
    "attr._version_info.VersionInfo._from_version_string": [
        "<builtin>.int",
        "<str>.split",
        "<builtin>.len"
    ],
    "attr._next_gen": [
        "attr._make",
        "functools",
        "attr._funcs",
        "attr.setters",
        "attr.exceptions"
    ],
    "rich.abc": [
        "<builtin>.isinstance",
        "abc",
        "rich.text",
        "rich.text.Text.__init__",
        "rich.abc.Foo",
        "<builtin>.print",
        "rich.abc.RichRenderable"
    ],
    "rich.abc.RichRenderable": [
        "<builtin>.classmethod"
    ],
    "rich.abc.Foo": [],
    "rich.pretty.Pretty": [],
    "rich.pretty.Node": [],
    "rich.pretty._Line": [
        "<builtin>.property"
    ],
    "rich.pretty.BrokenRepr": [],
    "rich.pretty.StockKeepingUnit": [],
    "collections.Counter.__init__": [
        "<builtin>.super",
        "collections.Counter.update"
    ],
    "collections.Counter.update": [
        "<builtin>.super",
        "collections.Counter.update",
        "<builtin>.isinstance",
        "collections._count_elements"
    ],
    "collections._count_elements": [],
    "rich.pretty.Thing": [],
    "rich.pretty.Pretty.__init__": [],
    "rich.__main__.ColorBox": [],
    "rich.__main__.make_test_card": [
        "rich.console.Group.__init__",
        "rich.text.Text.from_markup",
        "rich.pretty.Pretty.__init__",
        "rich.table.Table.add_column",
        "rich.markdown.Markdown.__init__",
        "rich.table.Table.add_row",
        "rich.text.Text.__init__",
        "rich.table.Table.grid",
        "rich.syntax.Syntax.__init__",
        "rich.table.Table.__init__",
        "rich.__main__.make_test_card.comparison"
    ],
    "rich.table.Table.grid": [
        "rich.table.Table.__init__"
    ],
    "rich.__main__.make_test_card.comparison": [
        "rich.table.Table.add_row",
        "rich.table.Table.__init__",
        "rich.table.Table.add_column"
    ],
    "time.process_time": [],
    "rich.panel.Panel.fit": [
        "rich.panel.Panel.__init__"
    ],
    "rich.region": [
        "rich.region.Region",
        "typing"
    ],
    "rich.region.Region": [],
    "rich.scope": [
        "rich.console",
        "collections.abc",
        "typing",
        "rich.text",
        "rich.pretty",
        "rich.table",
        "<builtin>.print",
        "rich.panel",
        "rich.highlighter",
        "rich",
        "rich.scope.test"
    ],
    "rich.scope.test": [
        "rich.scope.render_scope",
        "<builtin>.locals",
        "<builtin>.print"
    ],
    "rich.scope.render_scope": [
        "rich.panel.Panel.fit",
        "rich.pretty.Pretty.__init__",
        "rich.table.Table.add_column",
        "rich.table.Table.add_row",
        "rich.text.Text.assemble",
        "<builtin>.sorted",
        "rich.table.Table.grid"
    ],
    "rich.text.Text.assemble": [
        "rich.text.Text.append",
        "rich.text.Text.__init__",
        "<builtin>.isinstance",
        "rich.text.Text.apply_meta"
    ],
    "rich.text.Text.apply_meta": [
        "rich.text.Text.stylize",
        "rich.style.Style.from_meta"
    ],
    "rich.style.Style.from_meta": [
        "random.Random.randint",
        "marshal.dumps",
        "<builtin>.hash"
    ],
    "rich.text.Text.stylize": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "rich.screen": [
        "rich.console",
        "typing",
        "rich._loop",
        "rich.screen.Screen",
        "rich.segment",
        "rich.style"
    ],
    "rich.screen.Screen": [],
    "rich.styled": [
        "rich.measure",
        "rich.console",
        "rich.styled.Styled",
        "rich.panel.Panel.__init__",
        "typing",
        "rich.styled.Styled.__init__",
        "rich.panel",
        "<builtin>.print",
        "rich.segment",
        "rich.style",
        "rich"
    ],
    "rich.styled.Styled": [],
    "rich.styled.Styled.__init__": [],
    "rich._windows": [
        "rich._windows.get_windows_console_features",
        "<builtin>.repr",
        "rich._win32_console",
        "ctypes.LibraryLoader.__init__",
        "dataclasses",
        "<builtin>.ImportError",
        "rich._windows.WindowsConsoleFeatures",
        "platform.system",
        "<builtin>.print",
        "ctypes",
        "rich",
        "platform"
    ],
    "rich._windows.WindowsConsoleFeatures": [],
    "rich._win32_console": [
        "rich._win32_console.LegacyWindowsTerm.move_cursor_to_column",
        "ctypes.wintypes",
        "rich._win32_console.LegacyWindowsTerm.show_cursor",
        "rich._win32_console.LegacyWindowsTerm.erase_line",
        "rich.console.Console.__init__",
        "typing",
        "rich._win32_console.LegacyWindowsTerm",
        "rich._win32_console.LegacyWindowsTerm.move_cursor_up",
        "rich._win32_console.CONSOLE_CURSOR_INFO",
        "rich._win32_console.LegacyWindowsTerm.move_cursor_down",
        "rich.style.Style.parse",
        "rich._win32_console.GetStdHandle",
        "<builtin>.print",
        "rich._win32_console.LegacyWindowsError",
        "rich._win32_console.LegacyWindowsTerm.erase_end_of_line",
        "rich.console",
        "rich.console.Console.print",
        "rich._win32_console.CONSOLE_SCREEN_BUFFER_INFO",
        "ctypes.LibraryLoader.__init__",
        "rich._win32_console.LegacyWindowsTerm.__init__",
        "rich.style",
        "rich._win32_console.LegacyWindowsTerm.erase_start_of_line",
        "rich._win32_console.LegacyWindowsTerm.set_title",
        "rich._win32_console.LegacyWindowsTerm.write_styled",
        "<builtin>.ImportError",
        "rich._win32_console.LegacyWindowsTerm.move_cursor_backward",
        "rich._win32_console.WindowsCoordinates",
        "rich.style.Style.__init__",
        "rich.console.Console.rule",
        "rich.color",
        "rich._win32_console.LegacyWindowsTerm.write_text",
        "ctypes",
        "rich._win32_console.LegacyWindowsTerm.hide_cursor"
    ],
    "rich._win32_console.LegacyWindowsError": [],
    "rich._win32_console.WindowsCoordinates": [
        "<builtin>.classmethod"
    ],
    "rich._win32_console.CONSOLE_SCREEN_BUFFER_INFO": [],
    "rich._win32_console.CONSOLE_CURSOR_INFO": [],
    "rich._win32_console.LegacyWindowsTerm": [
        "<builtin>.property"
    ],
    "rich._win32_console.GetStdHandle": [
        "typing.cast"
    ],
    "rich._win32_console.LegacyWindowsTerm.__init__": [
        "rich._win32_console.GetStdHandle",
        "rich._win32_console.GetConsoleScreenBufferInfo"
    ],
    "rich._win32_console.GetConsoleScreenBufferInfo": [],
    "rich._win32_console.LegacyWindowsTerm.set_title": [
        "rich._win32_console.SetConsoleTitle",
        "<builtin>.len"
    ],
    "rich._win32_console.SetConsoleTitle": [
        "<builtin>.bool"
    ],
    "rich._win32_console.LegacyWindowsTerm.move_cursor_backward": [
        "rich._win32_console.SetConsoleCursorPosition"
    ],
    "rich._win32_console.SetConsoleCursorPosition": [
        "<builtin>.bool"
    ],
    "rich._win32_console.LegacyWindowsTerm.write_text": [
        "codecs.StreamRecoder.write",
        "<map>",
        "rich.file_proxy.FileProxy.flush",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "rich._win32_console.LegacyWindowsTerm.move_cursor_up": [
        "rich._win32_console.SetConsoleCursorPosition"
    ],
    "rich._win32_console.LegacyWindowsTerm.move_cursor_down": [
        "rich._win32_console.SetConsoleCursorPosition"
    ],
    "rich._win32_console.LegacyWindowsTerm.hide_cursor": [
        "rich._win32_console.LegacyWindowsTerm._get_cursor_size",
        "rich._win32_console.SetConsoleCursorInfo"
    ],
    "rich._win32_console.LegacyWindowsTerm._get_cursor_size": [
        "rich._win32_console.GetConsoleCursorInfo",
        "<builtin>.int"
    ],
    "rich._win32_console.GetConsoleCursorInfo": [
        "<builtin>.bool"
    ],
    "rich._win32_console.SetConsoleCursorInfo": [
        "<builtin>.bool"
    ],
    "rich._win32_console.LegacyWindowsTerm.move_cursor_to_column": [
        "rich._win32_console.SetConsoleCursorPosition"
    ],
    "rich._win32_console.LegacyWindowsTerm.write_styled": [
        "rich._win32_console.LegacyWindowsTerm.write_text",
        "rich._win32_console.SetConsoleTextAttribute"
    ],
    "rich._win32_console.SetConsoleTextAttribute": [
        "<builtin>.bool"
    ],
    "rich._win32_console.LegacyWindowsTerm.erase_start_of_line": [
        "rich._win32_console.FillConsoleOutputAttribute",
        "rich._win32_console.FillConsoleOutputCharacter"
    ],
    "rich._win32_console.FillConsoleOutputCharacter": [],
    "rich._win32_console.FillConsoleOutputAttribute": [],
    "rich._win32_console.LegacyWindowsTerm.erase_end_of_line": [
        "rich._win32_console.FillConsoleOutputAttribute",
        "rich._win32_console.FillConsoleOutputCharacter"
    ],
    "rich._win32_console.LegacyWindowsTerm.erase_line": [
        "rich._win32_console.FillConsoleOutputAttribute",
        "rich._win32_console.FillConsoleOutputCharacter"
    ],
    "rich._win32_console.LegacyWindowsTerm.show_cursor": [
        "rich._win32_console.LegacyWindowsTerm._get_cursor_size",
        "rich._win32_console.SetConsoleCursorInfo"
    ],
    "rich._windows.get_windows_console_features": [],
    "rich.live": [
        "rich.rule",
        "rich.align.Align.center",
        "rich.file_proxy",
        "rich.live.Live.__init__",
        "rich.console.Console.__init__",
        "typing",
        "types",
        "rich.table",
        "<builtin>.list",
        "threading",
        "rich.console",
        "rich.text",
        "<builtin>.next",
        "rich.control",
        "rich.text.Text.__init__",
        "random.Random.randint",
        "rich.table.Table.__init__",
        "rich.live.Live",
        "rich.live._RefreshThread",
        "itertools.cycle",
        "random",
        "rich.align",
        "rich.syntax",
        "rich.live",
        "rich.panel",
        "rich.console.Console.log",
        "<builtin>.range",
        "rich.live_render",
        "rich.table.Table.add_column",
        "rich.table.Table.add_row",
        "<builtin>.len",
        "rich.screen",
        "rich.syntax.Syntax.__init__",
        "rich.jupyter"
    ],
    "rich.file_proxy": [
        "rich.ansi",
        "rich.console",
        "typing",
        "rich.text",
        "rich.file_proxy.FileProxy",
        "io"
    ],
    "rich.ansi": [
        "rich.ansi.AnsiDecoder.__init__",
        "rich.console.Console.__init__",
        "typing",
        "re",
        "<builtin>.print",
        "rich.console",
        "rich.ansi._AnsiToken",
        "rich.console.Console.print",
        "rich.text",
        "rich.ansi.AnsiDecoder",
        "pty",
        "pty.spawn",
        "rich.style",
        "rich.ansi.AnsiDecoder.decode",
        "re.compile",
        "rich.console.Console.save_html",
        "os",
        "io",
        "_io.BytesIO",
        "rich.color",
        "contextlib"
    ],
    "rich.ansi._AnsiToken": [],
    "rich.ansi.AnsiDecoder": [],
    "pty": [
        "tty",
        "select",
        "os"
    ],
    "rich.ansi.AnsiDecoder.__init__": [
        "rich.style.Style.null"
    ],
    "pty.spawn": [
        "os.execlp",
        "pty._copy",
        "<builtin>.type",
        "tty.setraw",
        "pty.fork"
    ],
    "pty.fork": [
        "pty.openpty"
    ],
    "pty.openpty": [
        "pty._open_terminal",
        "pty.slave_open"
    ],
    "pty._open_terminal": [
        "<builtin>.OSError"
    ],
    "pty.slave_open": [
        "fcntl"
    ],
    "fcntl": [],
    "os.execlp": [
        "os.execvp"
    ],
    "os.execvp": [
        "os._execvpe"
    ],
    "os._execvpe": [
        "posixpath.join",
        "posixpath.dirname",
        "os._fscodec.fsencode",
        "os.get_exec_path",
        "ntpath.join",
        "ntpath.dirname",
        "os._fscodec.fsdecode",
        "<builtin>.map"
    ],
    "tty.setraw": [],
    "pty._copy": [
        "pty._writen",
        "pty._read",
        "<list>.remove"
    ],
    "pty._read": [],
    "pty._writen": [],
    "rich.ansi.AnsiDecoder.decode": [
        "<str>.splitlines",
        "rich.ansi.AnsiDecoder.decode_line"
    ],
    "rich.ansi.AnsiDecoder.decode_line": [
        "rich.style.Style.null",
        "<builtin>.int",
        "<builtin>.iter",
        "rich.text.Text.append",
        "rich.style.Style.parse",
        "rich.text.Text.__init__",
        "contextlib.suppress.__init__",
        "<builtin>.min",
        "rich.ansi._ansi_tokenize",
        "rich.style.Style.update_link"
    ],
    "rich.ansi._ansi_tokenize": [
        "<builtin>.len"
    ],
    "contextlib.suppress.__init__": [],
    "rich.style.Style.update_link": [
        "random.Random.randint"
    ],
    "rich.file_proxy.FileProxy": [
        "<builtin>.property"
    ],
    "rich.live_render": [
        "rich.live_render.LiveRender",
        "rich.console",
        "typing",
        "rich._loop",
        "rich.text",
        "rich.control",
        "typing_extensions",
        "rich.segment",
        "rich.style"
    ],
    "rich.live_render.LiveRender": [],
    "rich.live._RefreshThread": [],
    "rich.live.Live": [
        "<builtin>.property"
    ],
    "itertools.cycle": [],
    "rich.live.Live.__init__": [
        "rich.live.Live.get_renderable",
        "rich.live_render.LiveRender.__init__",
        "get_console",
        "threading.RLock"
    ],
    "get_console": [],
    "rich.live.Live.get_renderable": [],
    "rich.live_render.LiveRender.__init__": [],
    "rich.status": [
        "rich.console.Console.log",
        "rich.console",
        "rich.console.Console.__init__",
        "typing",
        "rich.console.Console.print",
        "time.sleep",
        "types",
        "rich.status.Status",
        "rich.console.Console.status",
        "rich.live",
        "rich.style",
        "rich.jupyter",
        "rich.spinner"
    ],
    "rich.spinner": [
        "rich.measure",
        "rich.live.Live.__init__",
        "<map>.keys",
        "typing",
        "rich.table",
        "<builtin>.repr",
        "rich.console",
        "rich.panel.Panel.__init__",
        "rich.text",
        "time.sleep",
        "rich.text.Text.__init__",
        "rich.style",
        "rich.columns.Columns.__init__",
        "<builtin>.sorted",
        "rich.spinner.Spinner.__init__",
        "rich.live",
        "rich.panel",
        "rich.spinner.Spinner",
        "rich.columns",
        "rich._spinners"
    ],
    "rich._spinners": [],
    "rich.spinner.Spinner": [],
    "rich.spinner.Spinner.__init__": [
        "typing.cast",
        "<builtin>.KeyError",
        "rich.text.Text.from_markup",
        "<builtin>.isinstance"
    ],
    "time.sleep": [],
    "rich.status.Status": [
        "<builtin>.property"
    ],
    "rich.console.NoChange": [],
    "rich.console.ConsoleDimensions": [],
    "rich.console.ConsoleOptions": [
        "<builtin>.property"
    ],
    "rich.console.RichCast": [],
    "rich.console.ConsoleRenderable": [],
    "rich.console.CaptureError": [],
    "rich.console.NewLine": [],
    "rich.console.ScreenUpdate": [],
    "rich.console.Capture": [],
    "rich.console.ThemeContext": [],
    "rich.console.PagerContext": [],
    "rich.console.ScreenContext": [],
    "rich.console.Group": [
        "<builtin>.property"
    ],
    "rich.console.ConsoleThreadLocals": [
        "dataclasses.field"
    ],
    "rich.console.RenderHook": [
        "abc.abstractmethod"
    ],
    "rich.console.Console": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "rich.console._is_jupyter": [
        "os.getenv",
        "<builtin>.str"
    ],
    "rich.console.detect_legacy_windows": [
        "rich.console.get_windows_console_features"
    ],
    "rich.console.get_windows_console_features": [
        "rich._windows",
        "rich._windows.get_windows_console_features"
    ],
    "rich.console.Console._detect_color_system": [
        "<map>.get",
        "rich.console.get_windows_console_features"
    ],
    "rich._log_render.LogRender.__init__": [],
    "rich.theme.ThemeStack.__init__": [],
    "rich_cli.__main__.ForceWidth": [],
    "rich_cli.__main__.RichCommand": [],
    "click.decorators.option": [],
    "click.decorators.option.decorator": [
        "click.decorators._param_memo"
    ],
    "click.decorators._param_memo": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "click.types.Choice.__init__": [],
    "click.decorators.argument": [],
    "click.decorators.argument.decorator": [
        "click.decorators._param_memo"
    ],
    "click.decorators.command": [],
    "rich_cli.__main__.run": [
        "rich_cli.__main__.main"
    ],
    "rich_cli.__main__.main": [
        "rich.rule",
        "rich.text.Text.from_markup",
        "rich.rule.Rule.__init__",
        "rich.json.JSON.__init__",
        "rich.console.Console.render_lines",
        "<builtin>.int",
        "rich.console.Console.__init__",
        "rich.markdown.Markdown.__init__",
        "urllib.parse.urlparse",
        "rich_cli.pager.PagerRenderable.__init__",
        "posixpath",
        "rich_cli.markdown",
        "rich._inspect",
        "rich.style.Style.parse",
        "<str>.split",
        "rich.console.Console.print_exception",
        "rich.panel.Panel.__init__",
        "rich.console.Console.print",
        "rich.json",
        "rich.text",
        "<builtin>.eval",
        "urllib.parse",
        "rich_cli.__main__.on_error",
        "rich_rst",
        "rich.file_proxy.FileProxy.write",
        "rich.style",
        "<str>.splitlines",
        "codecs.StreamRecoder.write",
        "rich_cli.__main__._line_range",
        "rich._inspect.Inspect.__init__",
        "rich.console.Console.save_html",
        "rich_cli.__main__.render_ipynb",
        "rich_cli.__main__.render_csv",
        "rich.syntax",
        "rich_cli.__main__.read_resource",
        "rich.box",
        "rich.align",
        "rich.console.Console.save_svg",
        "click._winconsole.ConsoleStream.write",
        "rich_cli.__main__.main.print_usage",
        "rich.panel",
        "rich_rst.RestructuredText.__init__",
        "rich.align.Align.__init__",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.styled",
        "rich_cli.pager",
        "textual.app.App.run",
        "codecs.StreamRecoder.read",
        "<str>.upper",
        "<builtin>.tuple",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "<builtin>.getattr",
        "<builtin>.len",
        "<builtin>.bool",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__",
        "rich.padding"
    ],
    "rich_cli.__main__.on_error": [
        "rich.console.Console.print",
        "rich.text.Text.stylize",
        "rich.text.Text.__init__",
        "<builtin>.str"
    ],
    "rich.console.Console.print": [
        "rich.console.NewLine.__init__"
    ],
    "rich.console.NewLine.__init__": [],
    "urllib.parse.urlparse": [
        "urllib.parse.urlsplit",
        "urllib.parse._splitparams",
        "urllib.parse._coerce_args"
    ],
    "urllib.parse._coerce_args": [
        "<builtin>.TypeError",
        "urllib.parse._decode_args",
        "<builtin>.isinstance"
    ],
    "urllib.parse._decode_args": [
        "<builtin>.tuple"
    ],
    "urllib.parse.urlsplit": [
        "<str>.find",
        "urllib.parse._splitnetloc",
        "urllib.parse._checknetloc",
        "<builtin>.ValueError",
        "<map>.get",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.bool",
        "urllib.parse.clear_cache",
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.clear_cache": [
        "<map>.clear"
    ],
    "urllib.parse._splitnetloc": [
        "<str>.find",
        "<builtin>.min",
        "<builtin>.len"
    ],
    "urllib.parse._checknetloc": [
        "unicodedata",
        "<str>.isascii",
        "<str>.replace",
        "<builtin>.ValueError"
    ],
    "<str>.isascii": [],
    "unicodedata": [],
    "urllib.parse._splitparams": [
        "<str>.find"
    ],
    "rich_cli.__main__.main.print_usage": [
        "rich.console.Console.print"
    ],
    "rich_cli.__main__.read_resource": [
        "requests.api.get",
        "codecs.StreamRecoder.read",
        "rich.markup.escape",
        "pygments.lexers",
        "<builtin>.open",
        "rich_cli.__main__.on_error",
        "<map>.get",
        "pygments.lexers.guess_lexer_for_filename",
        "requests"
    ],
    "requests": [
        "requests.utils",
        "requests.models",
        "logging.Logger.addHandler",
        "warnings",
        "urllib3.exceptions",
        "charset_normalizer",
        "requests.check_compatibility",
        "requests.exceptions",
        "logging.getLogger",
        "requests._check_cryptography",
        "warnings.simplefilter",
        "requests.api",
        "logging",
        "requests.status_codes",
        "requests.packages",
        "warnings.warn",
        "urllib3.contrib.pyopenssl.inject_into_urllib3",
        "cryptography",
        "urllib3.contrib.pyopenssl",
        "urllib3",
        "requests.sessions",
        "requests.__version__",
        "ssl",
        "<builtin>.getattr"
    ],
    "urllib3": [
        "warnings.simplefilter",
        "urllib3.util.timeout",
        "warnings",
        "__future__",
        "urllib3.poolmanager",
        "logging",
        "urllib3.util.retry",
        "urllib3.response",
        "urllib3.util.request",
        "urllib3.exceptions",
        "urllib3._version",
        "logging.Logger.addHandler",
        "urllib3.connectionpool",
        "urllib3.filepost",
        "logging.getLogger",
        "urllib3.util.url"
    ],
    "urllib3.exceptions": [
        "urllib3.exceptions.LocationParseError",
        "urllib3.exceptions.SNIMissingWarning",
        "urllib3.exceptions.SSLError",
        "urllib3.exceptions.ClosedPoolError",
        "urllib3.exceptions.TimeoutStateError",
        "urllib3.exceptions.InvalidChunkLength",
        "urllib3.exceptions.TimeoutError",
        "urllib3.exceptions.ProxyError",
        "urllib3.exceptions.SecurityWarning",
        "urllib3.exceptions.ReadTimeoutError",
        "urllib3.exceptions.URLSchemeUnknown",
        "urllib3.exceptions.EmptyPoolError",
        "urllib3.exceptions.ProxySchemeUnknown",
        "urllib3.exceptions.ResponseNotChunked",
        "urllib3.exceptions.ProxySchemeUnsupported",
        "urllib3.exceptions.UnrewindableBodyError",
        "urllib3.exceptions.HTTPError",
        "urllib3.exceptions.ConnectTimeoutError",
        "urllib3.exceptions.NewConnectionError",
        "urllib3.exceptions.HostChangedError",
        "urllib3.exceptions.InsecurePlatformWarning",
        "urllib3.exceptions.BodyNotHttplibCompatible",
        "urllib3.exceptions.ProtocolError",
        "urllib3.exceptions.InvalidHeader",
        "urllib3.exceptions.HTTPWarning",
        "urllib3.exceptions.MaxRetryError",
        "urllib3.exceptions.DependencyWarning",
        "urllib3.exceptions.IncompleteRead",
        "urllib3.exceptions.RequestError",
        "urllib3.exceptions.HeaderParsingError",
        "urllib3.exceptions.LocationValueError",
        "__future__",
        "urllib3.exceptions.PoolError",
        "urllib3.exceptions.SubjectAltNameWarning",
        "urllib3.exceptions.InsecureRequestWarning",
        "urllib3.exceptions.DecodeError",
        "urllib3.exceptions.SystemTimeWarning",
        "urllib3.exceptions.ResponseError"
    ],
    "urllib3.exceptions.HTTPError": [],
    "urllib3.exceptions.HTTPWarning": [],
    "urllib3.exceptions.PoolError": [],
    "urllib3.exceptions.RequestError": [],
    "urllib3.exceptions.SSLError": [],
    "urllib3.exceptions.ProxyError": [],
    "urllib3.exceptions.DecodeError": [],
    "urllib3.exceptions.ProtocolError": [],
    "urllib3.exceptions.MaxRetryError": [],
    "urllib3.exceptions.HostChangedError": [],
    "urllib3.exceptions.TimeoutStateError": [],
    "urllib3.exceptions.TimeoutError": [],
    "urllib3.exceptions.ReadTimeoutError": [],
    "urllib3.exceptions.ConnectTimeoutError": [],
    "urllib3.exceptions.NewConnectionError": [],
    "urllib3.exceptions.EmptyPoolError": [],
    "urllib3.exceptions.ClosedPoolError": [],
    "urllib3.exceptions.LocationValueError": [],
    "urllib3.exceptions.LocationParseError": [],
    "urllib3.exceptions.URLSchemeUnknown": [],
    "urllib3.exceptions.ResponseError": [],
    "urllib3.exceptions.SecurityWarning": [],
    "urllib3.exceptions.SubjectAltNameWarning": [],
    "urllib3.exceptions.InsecureRequestWarning": [],
    "urllib3.exceptions.SystemTimeWarning": [],
    "urllib3.exceptions.InsecurePlatformWarning": [],
    "urllib3.exceptions.SNIMissingWarning": [],
    "urllib3.exceptions.DependencyWarning": [],
    "urllib3.exceptions.ResponseNotChunked": [],
    "urllib3.exceptions.BodyNotHttplibCompatible": [],
    "urllib3.exceptions.IncompleteRead": [],
    "urllib3.exceptions.InvalidChunkLength": [],
    "urllib3.exceptions.InvalidHeader": [],
    "urllib3.exceptions.ProxySchemeUnknown": [],
    "urllib3.exceptions.ProxySchemeUnsupported": [],
    "urllib3.exceptions.HeaderParsingError": [],
    "urllib3.exceptions.UnrewindableBodyError": [],
    "urllib3._version": [],
    "urllib3.connectionpool": [
        "urllib3.util.connection",
        "urllib3.connection",
        "<builtin>.object",
        "urllib3.request",
        "urllib3.response",
        "re",
        "urllib3.connectionpool.ConnectionPool",
        "warnings",
        "urllib3.connectionpool.HTTPConnectionPool",
        "urllib3.util.request",
        "urllib3.exceptions",
        "urllib3.util.queue",
        "urllib3.packages.six",
        "logging.getLogger",
        "urllib3.connectionpool.HTTPSConnectionPool",
        "logging",
        "urllib3.util.response",
        "urllib3.util.ssl_match_hostname",
        "urllib3.util.timeout",
        "__future__",
        "urllib3.util.retry",
        "urllib3.util.proxy",
        "socket",
        "urllib3.util.url"
    ],
    "urllib3.connection": [
        "urllib3.util.connection",
        "urllib3.util",
        "urllib3.connection.ConnectionError",
        "urllib3.util.ssl_",
        "datetime",
        "re",
        "warnings",
        "urllib3.connection.BaseSSLError",
        "urllib3.exceptions",
        "urllib3.packages.six",
        "logging.getLogger",
        "urllib3.connection.BrokenPipeError",
        "re.compile",
        "logging",
        "os",
        "urllib3._version",
        "urllib3.connection.HTTPConnection",
        "urllib3.util.ssl_match_hostname",
        "urllib3.connection.HTTPSConnection",
        "urllib3.connection.DummyConnection",
        "ssl",
        "__future__",
        "urllib3.util.proxy",
        "socket"
    ],
    "urllib3.packages.six": [
        "urllib3.packages.six.X",
        "<builtin>.isinstance",
        "urllib3.packages.six._add_doc",
        "<builtin>.int",
        "<builtin>.globals",
        "urllib3.packages.six.Module_six_moves_urllib_robotparser",
        "urllib3.packages.six.Iterator",
        "types",
        "urllib3.packages.six.Module_six_moves_urllib_request",
        "urllib3.packages.six.Module_six_moves_urllib_error",
        "urllib3.packages.six.Module_six_moves_urllib_response",
        "<builtin>.enumerate",
        "operator",
        "urllib3.packages.six._LazyModule",
        "functools",
        "operator.itemgetter.__init__",
        "importlib.util",
        "urllib3.packages.six.MovedAttribute",
        "urllib3.packages.six.Module_six_moves_urllib",
        "urllib3.packages.six._SixMetaPathImporter._add_module",
        "urllib3.packages.six._SixMetaPathImporter",
        "struct",
        "urllib3.packages.six._SixMetaPathImporter.__init__",
        "urllib3.packages.six._MovedItems",
        "urllib3.packages.six.MovedModule",
        "io",
        "urllib3.packages.six.exec_",
        "operator.methodcaller.__init__",
        "__future__",
        "urllib3.packages.six._LazyDescr",
        "<builtin>.setattr",
        "<builtin>.len",
        "operator.attrgetter.__init__",
        "<builtin>.getattr",
        "urllib3.packages.six.Module_six_moves_urllib_parse",
        "<builtin>.type"
    ],
    "urllib3.packages.six.X": [],
    "urllib3.packages.six._LazyDescr": [],
    "urllib3.packages.six.MovedModule": [],
    "urllib3.packages.six._LazyModule": [],
    "urllib3.packages.six.MovedAttribute": [],
    "urllib3.packages.six._SixMetaPathImporter": [],
    "urllib3.packages.six._SixMetaPathImporter.__init__": [],
    "urllib3.packages.six._MovedItems": [],
    "urllib3.packages.six._SixMetaPathImporter._add_module": [],
    "urllib3.packages.six.Module_six_moves_urllib_parse": [],
    "urllib3.packages.six.Module_six_moves_urllib_error": [],
    "urllib3.packages.six.Module_six_moves_urllib_request": [],
    "urllib3.packages.six.Module_six_moves_urllib_response": [],
    "urllib3.packages.six.Module_six_moves_urllib_robotparser": [],
    "urllib3.packages.six.Module_six_moves_urllib": [
        "urllib3.packages.six._SixMetaPathImporter._get_module"
    ],
    "urllib3.packages.six._SixMetaPathImporter._get_module": [],
    "urllib3.packages.six.Iterator": [],
    "urllib3.packages.six._add_doc": [],
    "operator.methodcaller.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "urllib3.packages.six.exec_": [
        "<builtin>.exec"
    ],
    "urllib3.util.proxy": [
        "urllib3.util.ssl_"
    ],
    "urllib3.util.ssl_": [
        "binascii",
        "hmac",
        "warnings",
        "__future__",
        "ssl",
        "urllib3.util.ssltransport",
        "urllib3.exceptions",
        "urllib3.util.ssl_.SSLContext",
        "os",
        "hashlib",
        "urllib3.packages.six",
        "<builtin>.getattr",
        "urllib3.util.url"
    ],
    "hmac": [
        "_hashlib",
        "<builtin>.bytes",
        "warnings",
        "hmac.HMAC",
        "hashlib",
        "<builtin>.range"
    ],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "urllib3.util.url": [
        "<builtin>.set",
        "urllib3.util.url.Url",
        "__future__",
        "re.compile",
        "collections",
        "collections.namedtuple",
        "urllib3.exceptions",
        "urllib3.packages.six",
        "re"
    ],
    "urllib3.util.url.Url": [
        "<builtin>.property"
    ],
    "urllib3.util.ssltransport": [
        "ssl",
        "urllib3.exceptions",
        "socket",
        "urllib3.packages.six",
        "urllib3.util.ssltransport.SSLTransport",
        "io"
    ],
    "urllib3.util.ssltransport.SSLTransport": [
        "<builtin>.staticmethod"
    ],
    "urllib3.util.ssl_.SSLContext": [],
    "urllib3.connection.BaseSSLError": [],
    "urllib3.connection.ConnectionError": [],
    "urllib3.connection.BrokenPipeError": [],
    "urllib3.util": [
        "urllib3.util.connection",
        "urllib3.util.wait",
        "urllib3.util.timeout",
        "urllib3.util.ssl_",
        "__future__",
        "urllib3.util.retry",
        "urllib3.util.request",
        "urllib3.util.response",
        "urllib3.util.url"
    ],
    "urllib3.util.connection": [
        "urllib3.util.wait",
        "__future__",
        "urllib3.contrib._appengine_environ",
        "urllib3.exceptions",
        "socket",
        "urllib3.packages.six",
        "urllib3.util.connection._has_ipv6"
    ],
    "urllib3.contrib._appengine_environ": [
        "os"
    ],
    "urllib3.util.wait": [
        "urllib3.util.wait.NoWayToWaitForSocketError",
        "select",
        "functools"
    ],
    "urllib3.util.wait.NoWayToWaitForSocketError": [],
    "urllib3.util.connection._has_ipv6": [
        "socket.socket.close",
        "urllib3.contrib._appengine_environ.is_appengine_sandbox",
        "socket.socket.__init__"
    ],
    "urllib3.contrib._appengine_environ.is_appengine_sandbox": [
        "urllib3.contrib._appengine_environ.is_appengine"
    ],
    "urllib3.contrib._appengine_environ.is_appengine": [
        "urllib3.contrib._appengine_environ.is_local_appengine",
        "urllib3.contrib._appengine_environ.is_prod_appengine"
    ],
    "urllib3.contrib._appengine_environ.is_local_appengine": [],
    "urllib3.contrib._appengine_environ.is_prod_appengine": [],
    "socket.socket.__init__": [],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket._real_close": [],
    "urllib3.util.request": [
        "__future__",
        "base64",
        "<builtin>.object",
        "urllib3.exceptions",
        "urllib3.packages.six",
        "<builtin>.frozenset"
    ],
    "urllib3.util.response": [
        "__future__",
        "urllib3.exceptions",
        "email.errors"
    ],
    "urllib3.util.retry": [
        "urllib3.util.retry._RetryMeta",
        "urllib3.util.retry.Retry.__init__",
        "warnings",
        "__future__",
        "collections",
        "collections.namedtuple",
        "logging",
        "<builtin>.object",
        "urllib3.exceptions",
        "email",
        "urllib3.packages.six",
        "re",
        "urllib3.util.retry.Retry",
        "logging.getLogger"
    ],
    "urllib3.util.retry._RetryMeta": [
        "<builtin>.property"
    ],
    "urllib3.util.retry.Retry": [
        "<builtin>.classmethod",
        "<builtin>.frozenset"
    ],
    "urllib3.util.retry.Retry.__init__": [
        "<builtin>.set",
        "<builtin>.tuple",
        "<builtin>.frozenset",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "urllib3.util.timeout": [
        "__future__",
        "<builtin>.object",
        "urllib3.exceptions",
        "socket",
        "<builtin>.getattr",
        "urllib3.util.timeout.Timeout"
    ],
    "urllib3.util.timeout.Timeout": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "urllib3.util.ssl_match_hostname": [
        "urllib3.util.ssl_match_hostname.CertificateError",
        "re",
        "ipaddress"
    ],
    "ipaddress": [
        "ipaddress.IPv4Address",
        "ipaddress.NetmaskValueError",
        "ipaddress._IPAddressBase",
        "ipaddress.IPv4Network",
        "ipaddress._BaseV6",
        "ipaddress.IPv6Network",
        "ipaddress._BaseNetwork",
        "functools",
        "ipaddress.IPv6Interface",
        "ipaddress.IPv6Address",
        "ipaddress.AddressValueError",
        "ipaddress._BaseAddress",
        "ipaddress._IPv4Constants",
        "ipaddress.IPv4Interface",
        "ipaddress._IPv6Constants",
        "ipaddress._BaseV4"
    ],
    "ipaddress.AddressValueError": [],
    "ipaddress.NetmaskValueError": [],
    "ipaddress._IPAddressBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress._BaseAddress": [],
    "ipaddress._BaseNetwork": [
        "<builtin>.staticmethod",
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "functools.cached_property.__init__": [
        "_thread.RLock"
    ],
    "ipaddress._BaseV4": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Address": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "<builtin>.property",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "ipaddress.IPv4Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Network": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "<builtin>.property",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv4Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.int",
        "ipaddress._BaseV4._make_netmask",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.ValueError"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "ipaddress._split_optional_netmask",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "ipaddress._split_optional_netmask": [
        "<builtin>.len",
        "<builtin>.str"
    ],
    "ipaddress.IPv4Address.__init__": [
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_packed_address",
        "<builtin>.str",
        "ipaddress._BaseV4._ip_int_from_string"
    ],
    "ipaddress._IPAddressBase._check_int_address": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._make_netmask": [
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "ipaddress._IPAddressBase._ip_int_from_prefix",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._prefix_from_prefix_string",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._IPAddressBase._prefix_from_ip_string"
    ],
    "ipaddress._IPAddressBase._prefix_from_prefix_string": [
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "<builtin>.int"
    ],
    "ipaddress._IPAddressBase._report_invalid_netmask": [],
    "ipaddress._IPAddressBase._prefix_from_ip_string": [
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "ipaddress._IPAddressBase._prefix_from_ip_int",
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._BaseV6._ip_int_from_string"
    ],
    "ipaddress._IPAddressBase._prefix_from_ip_int": [
        "ipaddress._count_righthand_zero_bits",
        "<builtin>.ValueError"
    ],
    "ipaddress._count_righthand_zero_bits": [
        "<builtin>.min"
    ],
    "ipaddress._IPAddressBase._ip_int_from_prefix": [],
    "ipaddress._BaseV6": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "ipaddress.IPv6Address": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "<builtin>.property",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "ipaddress.IPv6Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv6Network": [
        "<builtin>.property"
    ],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.IPv6Network.__init__": [
        "ipaddress.IPv6Address.__init__",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.int",
        "ipaddress._BaseV6._make_netmask",
        "<builtin>.ValueError"
    ],
    "ipaddress.IPv6Address.__init__": [
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_packed_address",
        "ipaddress._BaseV6._ip_int_from_string",
        "<builtin>.str"
    ],
    "ipaddress._BaseV6._ip_int_from_string": [
        "ipaddress._BaseV6._parse_hextet",
        "<builtin>.range",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._parse_hextet": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._make_netmask": [
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "ipaddress._IPAddressBase._ip_int_from_prefix",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._prefix_from_prefix_string"
    ],
    "urllib3.util.ssl_match_hostname.CertificateError": [],
    "urllib3.connection.HTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.connection.HTTPSConnection": [],
    "urllib3.connection.DummyConnection": [],
    "urllib3.request": [
        "urllib3.filepost",
        "__future__",
        "urllib3.request.RequestMethods"
    ],
    "urllib3.filepost": [
        "binascii",
        "__future__",
        "codecs",
        "os",
        "urllib3.packages.six",
        "urllib3.fields",
        "io"
    ],
    "urllib3.fields": [
        "__future__",
        "mimetypes",
        "email.utils",
        "<map>.update",
        "urllib3.fields.RequestField",
        "urllib3.packages.six",
        "re"
    ],
    "urllib3.fields.RequestField": [
        "<builtin>.classmethod"
    ],
    "urllib3.request.RequestMethods": [],
    "urllib3.response": [
        "zlib",
        "urllib3.util",
        "urllib3.connection",
        "urllib3.response.HTTPResponse",
        "urllib3.response.GzipDecoderState",
        "__future__",
        "urllib3.response.GzipDecoder",
        "logging",
        "urllib3.response.DeflateDecoder",
        "urllib3.exceptions",
        "socket",
        "urllib3.packages.six",
        "urllib3.util.response",
        "urllib3.response.BrotliDecoder",
        "urllib3.response.MultiDecoder",
        "logging.getLogger",
        "contextlib",
        "io"
    ],
    "urllib3.response.DeflateDecoder": [],
    "urllib3.response.GzipDecoderState": [],
    "urllib3.response.GzipDecoder": [],
    "urllib3.response.BrotliDecoder": [],
    "urllib3.response.MultiDecoder": [],
    "urllib3.response.HTTPResponse": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "urllib3.util.queue": [
        "urllib3.util.queue.LifoQueue",
        "collections",
        "urllib3.packages.six"
    ],
    "urllib3.util.queue.LifoQueue": [],
    "urllib3.connectionpool.ConnectionPool": [],
    "urllib3.connectionpool.HTTPConnectionPool": [],
    "urllib3.connectionpool.HTTPSConnectionPool": [],
    "urllib3.poolmanager": [
        "urllib3.poolmanager.PoolManager",
        "__future__",
        "urllib3.poolmanager.ProxyManager",
        "collections",
        "functools",
        "collections.namedtuple",
        "logging",
        "urllib3.util.retry",
        "urllib3.request",
        "urllib3.util.proxy",
        "urllib3.exceptions",
        "urllib3.packages.six",
        "urllib3.connectionpool",
        "logging.getLogger",
        "urllib3.util.url"
    ],
    "urllib3.poolmanager.PoolManager": [],
    "urllib3.poolmanager.ProxyManager": [],
    "requests.exceptions": [
        "requests.exceptions.ProxyError",
        "requests.exceptions.SSLError",
        "requests.exceptions.InvalidHeader",
        "requests.exceptions.TooManyRedirects",
        "requests.exceptions.Timeout",
        "requests.compat",
        "requests.exceptions.InvalidProxyURL",
        "requests.exceptions.StreamConsumedError",
        "requests.exceptions.ConnectTimeout",
        "requests.exceptions.InvalidJSONError",
        "requests.exceptions.ContentDecodingError",
        "requests.exceptions.InvalidURL",
        "requests.exceptions.RequestException",
        "requests.exceptions.UnrewindableBodyError",
        "requests.exceptions.URLRequired",
        "urllib3.exceptions",
        "requests.exceptions.FileModeWarning",
        "requests.exceptions.MissingSchema",
        "requests.exceptions.ChunkedEncodingError",
        "requests.exceptions.RetryError",
        "requests.exceptions.RequestsWarning",
        "requests.exceptions.ConnectionError",
        "requests.exceptions.ReadTimeout",
        "requests.exceptions.HTTPError",
        "requests.exceptions.RequestsDependencyWarning",
        "requests.exceptions.JSONDecodeError",
        "requests.exceptions.InvalidSchema"
    ],
    "requests.compat": [
        "http.cookiejar",
        "json",
        "collections.abc",
        "http.cookies",
        "collections",
        "charset_normalizer",
        "urllib.parse",
        "urllib.request",
        "io"
    ],
    "charset_normalizer": [
        "logging",
        "charset_normalizer.models",
        "charset_normalizer.utils",
        "charset_normalizer.version",
        "charset_normalizer.legacy",
        "logging.Logger.addHandler",
        "logging.getLogger",
        "charset_normalizer.api"
    ],
    "charset_normalizer.api": [
        "charset_normalizer.constant",
        "logging.Handler.setFormatter",
        "warnings",
        "typing",
        "charset_normalizer.cd",
        "charset_normalizer.md",
        "logging",
        "logging.Formatter.__init__",
        "charset_normalizer.models",
        "posixpath",
        "charset_normalizer.utils",
        "os",
        "logging.StreamHandler.__init__",
        "logging.getLogger"
    ],
    "charset_normalizer.cd": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "charset_normalizer.constant",
        "rich.markdown.Markdown.__init__",
        "typing",
        "charset_normalizer.md",
        "click.core.MultiCommand.result_callback.decorator.function",
        "charset_normalizer.utils",
        "codecs",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "charset_normalizer.models",
        "click.decorators.pass_obj.new_func",
        "charset_normalizer.assets",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "collections",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "importlib",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "charset_normalizer.assets": [
        "typing"
    ],
    "charset_normalizer.constant": [
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.int",
        "typing",
        "re.compile",
        "<builtin>.sorted",
        "encodings.aliases",
        "codecs",
        "<map>.values",
        "re",
        "<builtin>.len",
        "<builtin>.filter",
        "charset_normalizer.assets",
        "<builtin>.range"
    ],
    "charset_normalizer.md": [
        "charset_normalizer.md.ArchaicUpperLowerPlugin",
        "charset_normalizer.md.SuspiciousDuplicateAccentPlugin",
        "charset_normalizer.md.MessDetectorPlugin",
        "charset_normalizer.md.UnprintablePlugin",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "charset_normalizer.constant",
        "rich.markdown.Markdown.__init__",
        "rich.console.Group.__init__",
        "typing",
        "rich.rule.Rule.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "charset_normalizer.utils",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "charset_normalizer.md.CjkInvalidStopPlugin",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "charset_normalizer.md.TooManySymbolOrPunctuationPlugin",
        "click.decorators.pass_meta_key.decorator.new_func",
        "charset_normalizer.md.TooManyAccentuatedPlugin",
        "charset_normalizer.md.SuspiciousRange",
        "charset_normalizer.md.SuperWeirdWordPlugin",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "charset_normalizer.utils": [
        "_multibytecodec",
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "charset_normalizer.constant",
        "rich.markdown.Markdown.__init__",
        "typing",
        "click.core.MultiCommand.result_callback.decorator.function",
        "codecs",
        "click.utils.KeepOpenFile.__init__",
        "re",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools",
        "encodings.aliases",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "logging",
        "unicodedata",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "<builtin>.len",
        "click.utils.LazyFile.__init__",
        "importlib",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "_multibytecodec": [],
    "charset_normalizer.md.MessDetectorPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManySymbolOrPunctuationPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManyAccentuatedPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.UnprintablePlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousRange": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuperWeirdWordPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.CjkInvalidStopPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArchaicUpperLowerPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.models": [
        "json",
        "charset_normalizer.constant",
        "charset_normalizer.models.CliDetectionResult",
        "warnings",
        "typing",
        "charset_normalizer.md",
        "collections",
        "charset_normalizer.models.CharsetMatches",
        "encodings.aliases",
        "charset_normalizer.utils",
        "hashlib",
        "re",
        "charset_normalizer.models.CharsetMatch"
    ],
    "charset_normalizer.models.CharsetMatch": [
        "<builtin>.property"
    ],
    "charset_normalizer.models.CharsetMatches": [],
    "charset_normalizer.models.CliDetectionResult": [
        "<builtin>.property"
    ],
    "charset_normalizer.legacy": [
        "charset_normalizer.legacy.CharsetNormalizerMatch",
        "charset_normalizer.legacy.CharsetNormalizerMatches",
        "charset_normalizer.constant",
        "warnings",
        "typing",
        "charset_normalizer.legacy.CharsetDoctor",
        "charset_normalizer.models",
        "charset_normalizer.legacy.CharsetDetector",
        "charset_normalizer.api"
    ],
    "charset_normalizer.legacy.CharsetNormalizerMatch": [],
    "charset_normalizer.legacy.CharsetNormalizerMatches": [
        "<builtin>.staticmethod"
    ],
    "charset_normalizer.legacy.CharsetDetector": [],
    "charset_normalizer.legacy.CharsetDoctor": [],
    "charset_normalizer.version": [
        "<str>.split"
    ],
    "http.cookiejar": [
        "http.cookiejar.DefaultCookiePolicy",
        "datetime",
        "http.cookiejar.Absent",
        "re",
        "<list>.append",
        "http.cookiejar.CookieJar",
        "<builtin>.str",
        "http.cookiejar.FileCookieJar",
        "threading",
        "urllib.parse",
        "copy",
        "http.cookiejar.CookiePolicy",
        "re.compile",
        "http.cookiejar.LWPCookieJar",
        "http.cookiejar.Cookie",
        "os",
        "http.cookiejar.MozillaCookieJar",
        "http.cookiejar.LoadError",
        "http.client",
        "urllib.request",
        "calendar"
    ],
    "urllib.request": [
        "urllib.request.ProxyDigestAuthHandler",
        "urllib.request.HTTPRedirectHandler",
        "string",
        "posixpath",
        "email",
        "re",
        "urllib.request.AbstractDigestAuthHandler",
        "<list>.append",
        "urllib.request.HTTPCookieProcessor",
        "bisect",
        "warnings",
        "urllib.request.URLopener",
        "hashlib",
        "urllib.parse",
        "urllib.request.HTTPPasswordMgr",
        "<builtin>.hasattr",
        "urllib.response",
        "urllib.request.HTTPHandler",
        "urllib.request.UnknownHandler",
        "urllib.request.DataHandler",
        "urllib.request.BaseHandler",
        "urllib.request.HTTPDigestAuthHandler",
        "_scproxy",
        "tempfile",
        "re.compile",
        "urllib.request.AbstractHTTPHandler",
        "nturl2path",
        "base64",
        "urllib.request.AbstractBasicAuthHandler",
        "urllib.request.HTTPPasswordMgrWithPriorAuth",
        "urllib.request.HTTPPasswordMgrWithDefaultRealm",
        "os",
        "urllib.request.ftpwrapper",
        "urllib.request.CacheFTPHandler",
        "urllib.request.HTTPSHandler",
        "io",
        "urllib.request.FancyURLopener",
        "urllib.request.FTPHandler",
        "urllib.request.HTTPDefaultErrorHandler",
        "urllib.request.OpenerDirector",
        "ssl",
        "urllib.request.ProxyBasicAuthHandler",
        "urllib.request.Request",
        "urllib.error",
        "urllib.request.HTTPBasicAuthHandler",
        "urllib.request.FileHandler",
        "socket",
        "urllib.request.HTTPErrorProcessor",
        "urllib.request.ProxyHandler",
        "http.client",
        "contextlib"
    ],
    "urllib.error": [
        "urllib.error.HTTPError",
        "urllib.response",
        "urllib.error.URLError",
        "urllib.error.ContentTooShortError"
    ],
    "urllib.response": [
        "urllib.response.addbase",
        "tempfile",
        "urllib.response.addinfo",
        "urllib.response.addclosehook",
        "urllib.response.addinfourl"
    ],
    "urllib.response.addbase": [],
    "urllib.response.addclosehook": [],
    "urllib.response.addinfo": [],
    "urllib.response.addinfourl": [],
    "urllib.error.URLError": [],
    "urllib.error.HTTPError": [
        "<builtin>.property"
    ],
    "urllib.error.ContentTooShortError": [],
    "urllib.request.Request": [
        "<builtin>.property"
    ],
    "urllib.request.OpenerDirector": [],
    "urllib.request.BaseHandler": [],
    "urllib.request.HTTPErrorProcessor": [],
    "urllib.request.HTTPDefaultErrorHandler": [],
    "urllib.request.HTTPRedirectHandler": [],
    "urllib.request.ProxyHandler": [],
    "urllib.request.HTTPPasswordMgr": [],
    "urllib.request.HTTPPasswordMgrWithDefaultRealm": [],
    "urllib.request.HTTPPasswordMgrWithPriorAuth": [],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "urllib.request.HTTPBasicAuthHandler": [],
    "urllib.request.ProxyBasicAuthHandler": [],
    "urllib.request.AbstractDigestAuthHandler": [],
    "urllib.request.HTTPDigestAuthHandler": [],
    "urllib.request.ProxyDigestAuthHandler": [],
    "urllib.request.AbstractHTTPHandler": [],
    "urllib.request.HTTPHandler": [],
    "urllib.request.HTTPSHandler": [],
    "urllib.request.HTTPCookieProcessor": [],
    "urllib.request.UnknownHandler": [],
    "urllib.request.FileHandler": [],
    "urllib.request.FTPHandler": [],
    "urllib.request.CacheFTPHandler": [],
    "urllib.request.DataHandler": [],
    "nturl2path": [],
    "urllib.request.URLopener": [],
    "urllib.request.FancyURLopener": [],
    "urllib.request.ftpwrapper": [],
    "_scproxy": [],
    "http.cookiejar.Cookie": [],
    "http.cookiejar.CookiePolicy": [],
    "http.cookiejar.DefaultCookiePolicy": [],
    "http.cookiejar.Absent": [],
    "http.cookiejar.CookieJar": [
        "re.compile"
    ],
    "http.cookiejar.LoadError": [],
    "http.cookiejar.FileCookieJar": [],
    "http.cookiejar.LWPCookieJar": [],
    "http.cookiejar.MozillaCookieJar": [
        "re.compile"
    ],
    "http.cookies": [
        "http.cookies.SimpleCookie",
        "<builtin>.set",
        "string",
        "re.compile",
        "re.escape",
        "http.cookies.BaseCookie",
        "re",
        "http.cookies.CookieError",
        "<builtin>.ord",
        "http.cookies.Morsel",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "http.cookies.CookieError": [],
    "http.cookies.Morsel": [
        "<builtin>.property"
    ],
    "http.cookies.BaseCookie": [],
    "http.cookies.SimpleCookie": [],
    "requests.exceptions.RequestException": [],
    "requests.exceptions.InvalidJSONError": [],
    "requests.exceptions.JSONDecodeError": [],
    "requests.exceptions.HTTPError": [],
    "requests.exceptions.ConnectionError": [],
    "requests.exceptions.ProxyError": [],
    "requests.exceptions.SSLError": [],
    "requests.exceptions.Timeout": [],
    "requests.exceptions.ConnectTimeout": [],
    "requests.exceptions.ReadTimeout": [],
    "requests.exceptions.URLRequired": [],
    "requests.exceptions.TooManyRedirects": [],
    "requests.exceptions.MissingSchema": [],
    "requests.exceptions.InvalidSchema": [],
    "requests.exceptions.InvalidURL": [],
    "requests.exceptions.InvalidHeader": [],
    "requests.exceptions.InvalidProxyURL": [],
    "requests.exceptions.ChunkedEncodingError": [],
    "requests.exceptions.ContentDecodingError": [],
    "requests.exceptions.StreamConsumedError": [],
    "requests.exceptions.RetryError": [],
    "requests.exceptions.UnrewindableBodyError": [],
    "requests.exceptions.RequestsWarning": [],
    "requests.exceptions.FileModeWarning": [],
    "requests.exceptions.RequestsDependencyWarning": [],
    "requests.check_compatibility": [
        "<builtin>.Exception",
        "<builtin>.int",
        "<str>.split",
        "<builtin>.len"
    ],
    "urllib3.contrib.pyopenssl": [
        "cryptography.hazmat.backends.openssl.backend",
        "urllib3.contrib.pyopenssl.WrappedSocket",
        "urllib3.util.ssl_",
        "<builtin>.dict",
        "warnings",
        "urllib3.packages.six",
        "logging.getLogger",
        "cryptography.x509",
        "urllib3.contrib.pyopenssl.PyOpenSSLContext",
        "logging",
        "urllib3.packages.backports.makefile",
        "io",
        "warnings.warn",
        "cryptography.hazmat.backends.openssl.x509",
        "urllib3",
        "<map>.items",
        "urllib3.contrib.pyopenssl.UnsupportedExtension",
        "ssl",
        "__future__",
        "socket",
        "<builtin>.hasattr"
    ],
    "cryptography.x509": [
        "cryptography.x509.extensions",
        "cryptography.x509.general_name",
        "cryptography.x509.certificate_transparency",
        "cryptography.x509.base",
        "cryptography.x509.oid",
        "cryptography.x509.name"
    ],
    "cryptography.x509.certificate_transparency": [
        "cryptography.hazmat.bindings._rust",
        "cryptography.utils",
        "cryptography.x509.certificate_transparency.SignatureAlgorithm",
        "cryptography.x509.certificate_transparency.LogEntryType",
        "abc",
        "datetime",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.x509.certificate_transparency.Version",
        "cryptography.x509.certificate_transparency.SignedCertificateTimestamp"
    ],
    "cryptography.utils": [
        "cryptography.utils._ModuleWithDeprecations",
        "cryptography.utils.Enum",
        "cryptography.utils.InterfaceNotImplemented",
        "warnings",
        "abc",
        "typing",
        "types",
        "inspect",
        "enum",
        "cryptography.utils.CryptographyDeprecationWarning",
        "cryptography.utils._DeprecatedValue"
    ],
    "cryptography.utils.CryptographyDeprecationWarning": [],
    "cryptography.utils.InterfaceNotImplemented": [],
    "cryptography.utils._DeprecatedValue": [],
    "cryptography.utils._ModuleWithDeprecations": [],
    "cryptography.utils.Enum": [],
    "cryptography.hazmat.bindings._rust": [],
    "cryptography.hazmat.primitives.hashes": [
        "cryptography.utils",
        "cryptography.hazmat.primitives.hashes.SHA1",
        "abc",
        "typing",
        "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction",
        "cryptography.hazmat.primitives.hashes.SHAKE128",
        "cryptography.hazmat.primitives.hashes.SHA384",
        "cryptography.hazmat.primitives.hashes.BLAKE2b",
        "cryptography.hazmat.primitives.hashes.SHA3_384",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes.SHA224",
        "cryptography.hazmat.primitives.hashes.HashAlgorithm",
        "cryptography.hazmat.primitives.hashes.HashContext",
        "cryptography.hazmat.primitives.hashes.BLAKE2s",
        "cryptography.hazmat.primitives.hashes.SHA256",
        "cryptography.hazmat.primitives.hashes.SM3",
        "cryptography.hazmat.primitives.hashes.SHAKE256",
        "cryptography.hazmat.primitives.hashes.SHA512_224",
        "cryptography.hazmat.primitives.hashes.SHA3_224",
        "cryptography.hazmat.primitives.hashes.SHA3_256",
        "cryptography.hazmat.primitives.hashes.Hash",
        "cryptography.hazmat.primitives.hashes.SHA512_256",
        "cryptography.hazmat.primitives.hashes.SHA512",
        "cryptography.hazmat.primitives.hashes.MD5",
        "cryptography.hazmat.primitives.hashes.SHA3_512"
    ],
    "cryptography.exceptions": [
        "cryptography.exceptions.NotYetFinalized",
        "cryptography.utils",
        "cryptography.exceptions.AlreadyUpdated",
        "cryptography.hazmat.bindings.openssl.binding",
        "typing",
        "cryptography.exceptions.InvalidKey",
        "cryptography.exceptions.InvalidTag",
        "cryptography.exceptions.InvalidSignature",
        "cryptography.exceptions.AlreadyFinalized",
        "cryptography.exceptions.UnsupportedAlgorithm",
        "cryptography.exceptions.InternalError",
        "cryptography.exceptions._Reasons"
    ],
    "cryptography.hazmat.bindings.openssl.binding": [
        "cryptography.hazmat.bindings.openssl.binding.Binding",
        "cryptography.hazmat.bindings._openssl",
        "cryptography.hazmat.bindings.openssl.binding._OpenSSLError",
        "cryptography.utils",
        "threading",
        "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version",
        "warnings",
        "typing",
        "cryptography.hazmat.bindings.openssl.binding._verify_package_version",
        "types",
        "cryptography.exceptions",
        "cryptography.hazmat.bindings.openssl._conditional",
        "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks",
        "cryptography"
    ],
    "cryptography": [
        "warnings",
        "cryptography.utils",
        "warnings.warn",
        "cryptography.__about__"
    ],
    "cryptography.__about__": [],
    "cryptography.hazmat.bindings._openssl": [],
    "cryptography.hazmat.bindings.openssl._conditional": [
        "typing"
    ],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding": [
        "_thread.allocate_lock",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.bindings.openssl.binding._verify_package_version": [
        "<builtin>.ImportError"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized": [],
    "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version": [
        "warnings.warn"
    ],
    "cryptography.exceptions._Reasons": [],
    "cryptography.exceptions.UnsupportedAlgorithm": [],
    "cryptography.exceptions.AlreadyFinalized": [],
    "cryptography.exceptions.AlreadyUpdated": [],
    "cryptography.exceptions.NotYetFinalized": [],
    "cryptography.exceptions.InvalidTag": [],
    "cryptography.exceptions.InvalidSignature": [],
    "cryptography.exceptions.InternalError": [],
    "cryptography.exceptions.InvalidKey": [],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm": [],
    "cryptography.hazmat.primitives.hashes.HashContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction": [],
    "cryptography.hazmat.primitives.hashes.Hash": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SHA1": [],
    "cryptography.hazmat.primitives.hashes.SHA512_224": [],
    "cryptography.hazmat.primitives.hashes.SHA512_256": [],
    "cryptography.hazmat.primitives.hashes.SHA224": [],
    "cryptography.hazmat.primitives.hashes.SHA256": [],
    "cryptography.hazmat.primitives.hashes.SHA384": [],
    "cryptography.hazmat.primitives.hashes.SHA512": [],
    "cryptography.hazmat.primitives.hashes.SHA3_224": [],
    "cryptography.hazmat.primitives.hashes.SHA3_256": [],
    "cryptography.hazmat.primitives.hashes.SHA3_384": [],
    "cryptography.hazmat.primitives.hashes.SHA3_512": [],
    "cryptography.hazmat.primitives.hashes.SHAKE128": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE256": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.MD5": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2b": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2s": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SM3": [],
    "cryptography.x509.certificate_transparency.LogEntryType": [],
    "cryptography.x509.certificate_transparency.Version": [],
    "cryptography.x509.certificate_transparency.SignatureAlgorithm": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp": [],
    "cryptography.x509.base": [
        "cryptography.x509.base._RawRevokedCertificate",
        "cryptography.utils",
        "cryptography.x509.base.Version",
        "abc",
        "datetime",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.x509.name",
        "cryptography.x509.base.InvalidVersion",
        "cryptography.x509.extensions",
        "cryptography.x509.base.CertificateRevocationList",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.x509.base.CertificateSigningRequestBuilder",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.x509.oid",
        "cryptography.x509.base.CertificateRevocationListBuilder",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.x509.base.CertificateBuilder",
        "cryptography.x509.base.Attributes",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.x509.base.Attribute",
        "cryptography.x509.base.CertificateSigningRequest",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.x509.base.RevokedCertificateBuilder",
        "cryptography.x509.base.Certificate",
        "os",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.x509.base.AttributeNotFound",
        "cryptography.x509.base.RevokedCertificate",
        "cryptography.hazmat.primitives.asymmetric.dsa"
    ],
    "cryptography.hazmat.primitives.serialization": [
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.serialization.base",
        "cryptography.hazmat.primitives.serialization.ssh"
    ],
    "cryptography.hazmat.primitives._serialization": [
        "cryptography.hazmat.primitives._serialization.BestAvailableEncryption",
        "cryptography.utils",
        "cryptography.hazmat.primitives._serialization.PBES",
        "abc",
        "cryptography.hazmat.primitives.hashes",
        "typing",
        "cryptography.hazmat.primitives._serialization.PrivateFormat",
        "cryptography.hazmat.primitives._serialization.PublicFormat",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder",
        "cryptography.hazmat.primitives._serialization._KeySerializationEncryption",
        "cryptography.hazmat.primitives._serialization.NoEncryption",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryption",
        "cryptography.hazmat.primitives._serialization.ParameterFormat",
        "cryptography.hazmat.primitives._serialization.Encoding"
    ],
    "cryptography.hazmat.primitives._serialization.PBES": [],
    "cryptography.hazmat.primitives._serialization.Encoding": [],
    "cryptography.hazmat.primitives._serialization.PrivateFormat": [],
    "cryptography.hazmat.primitives._serialization.PublicFormat": [],
    "cryptography.hazmat.primitives._serialization.ParameterFormat": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryption": [],
    "cryptography.hazmat.primitives._serialization.BestAvailableEncryption": [],
    "cryptography.hazmat.primitives._serialization.NoEncryption": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder": [],
    "cryptography.hazmat.primitives._serialization._KeySerializationEncryption": [],
    "cryptography.hazmat.primitives.serialization.base": [
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.primitives.asymmetric.types"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh": [
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers",
        "abc",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameters",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.types": [
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.asymmetric.ec"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa": [
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey",
        "abc",
        "cryptography.hazmat.primitives.hashes",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils": [
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils.Prehashed": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec": [
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDH",
        "cryptography.utils",
        "abc",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1",
        "warnings",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat._oid",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers"
    ],
    "cryptography.hazmat._oid": [
        "cryptography.hazmat._oid.SignatureAlgorithmOID",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat._oid.AttributeOID",
        "cryptography.hazmat._oid.OCSPExtensionOID",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat._oid.CRLEntryExtensionOID",
        "cryptography.hazmat._oid.ExtendedKeyUsageOID",
        "cryptography.hazmat._oid.SubjectInformationAccessOID",
        "cryptography.hazmat._oid.ExtensionOID",
        "cryptography.hazmat._oid.CertificatePoliciesOID",
        "cryptography.hazmat._oid.AuthorityInformationAccessOID",
        "cryptography.hazmat._oid.NameOID"
    ],
    "cryptography.hazmat._oid.ExtensionOID": [],
    "cryptography.hazmat._oid.OCSPExtensionOID": [],
    "cryptography.hazmat._oid.CRLEntryExtensionOID": [],
    "cryptography.hazmat._oid.NameOID": [],
    "cryptography.hazmat._oid.SignatureAlgorithmOID": [],
    "cryptography.hazmat._oid.ExtendedKeyUsageOID": [],
    "cryptography.hazmat._oid.AuthorityInformationAccessOID": [],
    "cryptography.hazmat._oid.SubjectInformationAccessOID": [],
    "cryptography.hazmat._oid.CertificatePoliciesOID": [],
    "cryptography.hazmat._oid.AttributeOID": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDH": [],
    "cryptography.hazmat.primitives.asymmetric.ed25519": [
        "abc",
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448": [
        "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey",
        "abc",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa": [
        "abc",
        "cryptography.hazmat.primitives.hashes",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers",
        "cryptography.hazmat.primitives._serialization",
        "math",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.primitives.asymmetric.utils"
    ],
    "cryptography.hazmat.primitives._asymmetric": [
        "abc",
        "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding"
    ],
    "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519": [
        "abc",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448": [
        "abc",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.serialization.ssh": [
        "binascii",
        "cryptography.utils",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519",
        "typing",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA",
        "<builtin>.bytearray",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__",
        "cryptography.exceptions",
        "re",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "bcrypt",
        "<builtin>.memoryview",
        "re.compile",
        "base64",
        "os",
        "<builtin>.range",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.primitives.serialization.ssh._FragList",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives.asymmetric.dsa"
    ],
    "cryptography.hazmat.primitives.ciphers": [
        "cryptography.hazmat.primitives.ciphers.base",
        "cryptography.hazmat.primitives._cipheralgorithm"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm": [
        "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm",
        "abc",
        "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm",
        "typing"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm": [],
    "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm": [],
    "cryptography.hazmat.primitives.ciphers.base": [
        "cryptography.hazmat.primitives.ciphers.base.Cipher",
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.hazmat.backends.openssl.ciphers",
        "abc",
        "typing",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext",
        "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext",
        "typing.TypeVar.__init__",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.CipherContext",
        "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext"
    ],
    "cryptography.hazmat.primitives.ciphers.modes": [
        "cryptography.utils",
        "abc",
        "typing",
        "cryptography.hazmat.primitives.ciphers.modes.Mode",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers.modes.OFB",
        "cryptography.hazmat.primitives.ciphers.modes.XTS",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak",
        "cryptography.hazmat.primitives.ciphers.modes.CFB8",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.hazmat.primitives.ciphers.modes.CTR",
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.hazmat.primitives.ciphers.modes.CFB",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce",
        "cryptography.hazmat.primitives.ciphers.modes.GCM",
        "cryptography.hazmat.primitives.ciphers.modes.ECB",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag",
        "cryptography.hazmat.primitives.ciphers.modes.CBC"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms": [
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.utils",
        "cryptography.hazmat.primitives.ciphers.algorithms.IDEA",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES256",
        "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish",
        "cryptography.hazmat.primitives.ciphers.algorithms.CAST5",
        "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES128",
        "cryptography.utils.deprecated",
        "cryptography.hazmat.primitives.ciphers.algorithms.SEED",
        "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20",
        "cryptography.hazmat.primitives.ciphers.algorithms.SM4",
        "cryptography.hazmat.primitives.ciphers.algorithms.Camellia",
        "cryptography.hazmat.primitives.ciphers.algorithms.ARC4"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES128": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES256": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish": [
        "<builtin>.property",
        "<builtin>.frozenset",
        "<builtin>.range"
    ],
    "cryptography.utils.deprecated": [
        "cryptography.utils._DeprecatedValue.__init__",
        "<builtin>.isinstance",
        "<builtin>.setattr",
        "cryptography.utils._ModuleWithDeprecations.__init__"
    ],
    "cryptography.utils._ModuleWithDeprecations.__init__": [
        "<builtin>.super"
    ],
    "cryptography.utils._DeprecatedValue.__init__": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5": [
        "<builtin>.property",
        "<builtin>.frozenset",
        "<builtin>.range"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.Mode": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag": [],
    "cryptography.hazmat.primitives.ciphers.modes.CBC": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.XTS": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ECB": [],
    "cryptography.hazmat.primitives.ciphers.modes.OFB": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ciphers": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.ciphers",
        "typing",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives.ciphers.algorithms"
    ],
    "cryptography.hazmat.backends.openssl.backend": [
        "cryptography.utils",
        "cryptography.hazmat.backends.openssl.ciphers",
        "cryptography.hazmat.backends.openssl.cmac",
        "typing",
        "cryptography.hazmat.backends.openssl.ed25519",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.backend.Backend",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.types",
        "warnings",
        "cryptography.hazmat.primitives.serialization.pkcs12",
        "cryptography.hazmat.backends.openssl.ed448",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "cryptography.hazmat.backends.openssl.ec",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.x509",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.backends.openssl.backend.Backend.__init__",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.bindings.openssl.binding",
        "cryptography.hazmat.backends.openssl.x25519",
        "cryptography.hazmat.primitives.hashes",
        "collections.namedtuple",
        "cryptography.hazmat.backends.openssl.dsa",
        "cryptography.hazmat.backends.openssl.hashes",
        "cryptography.hazmat.backends.openssl.poly1305",
        "cryptography.hazmat.backends.openssl.x448",
        "cryptography.hazmat.primitives.kdf.scrypt",
        "cryptography.hazmat.backends.openssl.hmac",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.backends.openssl.dh",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.backends.openssl.aead",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.primitives.serialization.ssh",
        "collections",
        "contextlib",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.backends.openssl.backend._RC2",
        "cryptography.hazmat.primitives.serialization.pkcs7",
        "cryptography.hazmat.backends.openssl.rsa"
    ],
    "cryptography.hazmat.backends.openssl.aead": [
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers.aead",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.ciphers.aead": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305",
        "cryptography.utils",
        "cryptography.hazmat.backends.openssl.aead",
        "typing",
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM",
        "cryptography.exceptions",
        "os",
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM",
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3",
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.backends.openssl.cmac": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.ciphers",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.backends.openssl.cmac._CMACContext",
        "cryptography.hazmat.primitives.constant_time"
    ],
    "cryptography.hazmat.primitives.constant_time": [
        "hmac"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext": [],
    "cryptography.hazmat.backends.openssl.dh": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.backends.openssl.dh._DHParameters",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey",
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters": [],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dsa": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters"
    ],
    "cryptography.hazmat.backends.openssl.utils": [
        "typing",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.utils"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters": [],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ec": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey",
        "typing",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ec"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ed25519": [
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey": [],
    "cryptography.hazmat.backends.openssl.ed448": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey": [],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey": [],
    "cryptography.hazmat.backends.openssl.hashes": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.hmac": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.hmac._HMACContext",
        "cryptography.hazmat.primitives.constant_time"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.poly1305": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context",
        "cryptography.hazmat.primitives.constant_time"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context": [],
    "cryptography.hazmat.backends.openssl.rsa": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey",
        "threading",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding": [
        "cryptography.hazmat.primitives.asymmetric.padding.MGF",
        "cryptography.hazmat.primitives.asymmetric.padding._Auto",
        "abc",
        "cryptography.hazmat.primitives.hashes",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
        "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.padding.OAEP",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.primitives.asymmetric.padding.PSS",
        "cryptography.hazmat.primitives.asymmetric.padding._MaxLength",
        "cryptography.hazmat.primitives.asymmetric.padding._DigestLength"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15": [],
    "cryptography.hazmat.primitives.asymmetric.padding._MaxLength": [],
    "cryptography.hazmat.primitives.asymmetric.padding._Auto": [],
    "cryptography.hazmat.primitives.asymmetric.padding._DigestLength": [],
    "cryptography.hazmat.primitives.asymmetric.padding.PSS": [],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1": [],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.x25519": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey",
        "typing",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey": [],
    "cryptography.hazmat.backends.openssl.x448": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "typing",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey": [],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey": [],
    "cryptography.hazmat.primitives.kdf.scrypt": [
        "cryptography.utils",
        "cryptography.hazmat.primitives.kdf",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.hazmat.primitives.kdf.scrypt.Scrypt"
    ],
    "cryptography.hazmat.primitives.kdf": [
        "abc",
        "cryptography.hazmat.primitives.kdf.KeyDerivationFunction"
    ],
    "cryptography.hazmat.primitives.kdf.KeyDerivationFunction": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt": [],
    "cryptography.hazmat.primitives.serialization.pkcs7": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.utils",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.x509",
        "cryptography.hazmat.primitives.asymmetric.ec"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options": [],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder": [],
    "cryptography.hazmat.primitives.serialization.pkcs12": [
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "typing",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.x509",
        "cryptography.hazmat.primitives.asymmetric.ec"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.backend._RC2": [],
    "cryptography.hazmat.backends.openssl.backend.Backend": [
        "contextlib.contextmanager"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine",
        "cryptography.hazmat.bindings.openssl.binding.Binding.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled",
        "<list>.append",
        "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers",
        "warnings.warn"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.__init__": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers": [
        "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__",
        "<builtin>.type"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_builtin_random",
        "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.activate_builtin_random": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.hazmat.bindings.openssl.binding._openssl_assert": [
        "cryptography.hazmat.bindings.openssl.binding._consume_errors",
        "cryptography.hazmat.bindings.openssl.binding._errors_with_text",
        "cryptography.exceptions.InternalError.__init__"
    ],
    "cryptography.hazmat.bindings.openssl.binding._consume_errors": [
        "<list>.append"
    ],
    "cryptography.hazmat.bindings.openssl.binding._errors_with_text": [
        "<list>.append",
        "<builtin>.len"
    ],
    "cryptography.exceptions.InternalError.__init__": [
        "<builtin>.super"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext": [],
    "cryptography.hazmat.primitives.ciphers.base.Cipher": [
        "typing.overload"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext": [
        "<builtin>.property"
    ],
    "bcrypt": [
        "hmac",
        "warnings",
        "__future__",
        "bcrypt._bcrypt",
        "os",
        "bcrypt.__about__"
    ],
    "bcrypt.__about__": [
        "__future__"
    ],
    "bcrypt._bcrypt": [],
    "cryptography.hazmat.primitives.serialization.ssh._FragList": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__": [],
    "cryptography.x509.extensions": [
        "cryptography.x509.extensions.OCSPNoCheck",
        "cryptography.x509.extensions.TLSFeatureType",
        "cryptography.utils",
        "abc",
        "datetime",
        "typing",
        "cryptography.x509.extensions.AuthorityInformationAccess",
        "cryptography.x509.extensions.SubjectInformationAccess",
        "cryptography.x509.extensions.FreshestCRL",
        "cryptography.x509.extensions.BasicConstraints",
        "cryptography.x509.extensions.ReasonFlags",
        "cryptography.x509.extensions.NoticeReference",
        "cryptography.x509.extensions.DeltaCRLIndicator",
        "cryptography.x509.extensions.ExtendedKeyUsage",
        "cryptography.x509.extensions.CertificateIssuer",
        "cryptography.x509.name",
        "ipaddress",
        "cryptography.x509.extensions.CRLReason",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.x509.extensions.DistributionPoint",
        "cryptography.x509.extensions.ExtensionNotFound",
        "cryptography.x509.extensions.CertificatePolicies",
        "cryptography.x509.extensions.ExtensionType",
        "cryptography.x509.oid",
        "typing.TypeVar.__init__",
        "cryptography.x509.extensions.PolicyInformation",
        "cryptography.x509.extensions.UserNotice",
        "hashlib",
        "cryptography.x509.extensions.DuplicateExtension",
        "cryptography.x509.extensions.SignedCertificateTimestamps",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.x509.extensions.InhibitAnyPolicy",
        "cryptography.x509.extensions.CRLNumber",
        "cryptography.x509.general_name",
        "cryptography.x509.extensions.PrecertPoison",
        "cryptography.x509.extensions.IssuerAlternativeName",
        "cryptography.x509.extensions.KeyUsage",
        "cryptography.x509.extensions.Extension",
        "cryptography.x509.extensions.GeneralNames",
        "cryptography.x509.extensions.InvalidityDate",
        "cryptography.x509.extensions.Extensions",
        "cryptography.x509.extensions.PolicyConstraints",
        "cryptography.x509.extensions.SubjectAlternativeName",
        "cryptography.x509.extensions.NameConstraints",
        "cryptography.hazmat.bindings._rust",
        "cryptography.x509.certificate_transparency",
        "cryptography.x509.extensions.IssuingDistributionPoint",
        "cryptography.x509.extensions.TLSFeature",
        "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps",
        "cryptography.x509.extensions.OCSPNonce",
        "cryptography.x509.extensions.AccessDescription",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.x509.extensions.SubjectKeyIdentifier",
        "cryptography.x509.extensions.UnrecognizedExtension",
        "cryptography.x509.extensions.AuthorityKeyIdentifier",
        "cryptography.x509.extensions.CRLDistributionPoints"
    ],
    "cryptography.x509.general_name": [
        "cryptography.x509.general_name.DirectoryName",
        "cryptography.x509.general_name.RFC822Name",
        "cryptography.x509.general_name.IPAddress",
        "abc",
        "typing",
        "cryptography.x509.general_name.GeneralName",
        "cryptography.x509.general_name.DNSName",
        "cryptography.x509.general_name.UniformResourceIdentifier",
        "cryptography.x509.oid",
        "email.utils",
        "cryptography.x509.general_name.RegisteredID",
        "cryptography.x509.general_name.UnsupportedGeneralNameType",
        "cryptography.x509.general_name.OtherName",
        "cryptography.x509.name",
        "ipaddress"
    ],
    "cryptography.x509.name": [
        "binascii",
        "cryptography.hazmat.bindings._rust",
        "cryptography.utils",
        "cryptography.x509.name._RFC4514NameParser",
        "warnings",
        "typing",
        "cryptography.x509.oid",
        "cryptography.x509.name.NameAttribute",
        "cryptography.x509.name._ASN1Type",
        "re",
        "cryptography.x509.name.Name",
        "cryptography.x509.name.RelativeDistinguishedName"
    ],
    "cryptography.x509.oid": [
        "cryptography.hazmat._oid"
    ],
    "cryptography.x509.name._ASN1Type": [],
    "cryptography.x509.name.NameAttribute": [
        "<builtin>.property"
    ],
    "cryptography.x509.name.RelativeDistinguishedName": [],
    "cryptography.x509.name.Name": [
        "typing.overload",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.name._RFC4514NameParser": [
        "re.compile",
        "<builtin>.chr"
    ],
    "cryptography.x509.general_name.UnsupportedGeneralNameType": [],
    "cryptography.x509.general_name.GeneralName": [],
    "cryptography.x509.general_name.RFC822Name": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.DNSName": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.DirectoryName": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.RegisteredID": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.IPAddress": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.OtherName": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.DuplicateExtension": [],
    "cryptography.x509.extensions.ExtensionNotFound": [],
    "cryptography.x509.extensions.ExtensionType": [],
    "cryptography.x509.extensions.Extensions": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions._make_sequence_methods": [],
    "cryptography.x509.extensions.CRLNumber": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.AccessDescription": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.BasicConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.FreshestCRL": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.DistributionPoint": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.ReasonFlags": [],
    "cryptography.x509.extensions.PolicyConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CertificatePolicies": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.PolicyInformation": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.UserNotice": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NoticeReference": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.OCSPNoCheck": [],
    "cryptography.x509.extensions.PrecertPoison": [],
    "cryptography.x509.extensions.TLSFeature": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.TLSFeatureType": [],
    "cryptography.x509.extensions.InhibitAnyPolicy": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.KeyUsage": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NameConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.Extension": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.GeneralNames": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CertificateIssuer": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CRLReason": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.InvalidityDate": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.OCSPNonce": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.AttributeNotFound": [],
    "cryptography.x509.base.Attribute": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.Attributes": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.base.Version": [],
    "cryptography.x509.base.InvalidVersion": [],
    "cryptography.x509.base.Certificate": [
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.RevokedCertificate": [],
    "cryptography.x509.base._RawRevokedCertificate": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.CertificateRevocationList": [
        "typing.overload",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateSigningRequest": [
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder": [],
    "cryptography.x509.base.CertificateBuilder": [],
    "cryptography.x509.base.CertificateRevocationListBuilder": [],
    "cryptography.x509.base.RevokedCertificateBuilder": [],
    "cryptography.hazmat.backends.openssl.x509": [
        "warnings",
        "cryptography.utils",
        "cryptography.x509"
    ],
    "urllib3.contrib.pyopenssl.UnsupportedExtension": [],
    "urllib3.packages.backports.makefile": [
        "socket",
        "io"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket": [],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext": [
        "<builtin>.property"
    ],
    "urllib3.contrib.pyopenssl.inject_into_urllib3": [
        "urllib3.contrib.pyopenssl._validate_dependencies_met"
    ],
    "urllib3.contrib.pyopenssl._validate_dependencies_met": [
        "cryptography.x509.extensions",
        "OpenSSL.crypto.X509",
        "<builtin>.getattr",
        "<builtin>.ImportError"
    ],
    "OpenSSL.crypto.X509": [],
    "requests._check_cryptography": [
        "warnings.warn",
        "<builtin>.list",
        "<builtin>.map",
        "<str>.split"
    ],
    "requests.packages": [
        "<builtin>.locals",
        "<builtin>.list",
        "warnings",
        "charset_normalizer",
        "<builtin>.__import__",
        "warnings.filterwarnings"
    ],
    "requests.utils": [
        "urllib3.util",
        "re.split",
        "codecs",
        "requests.compat",
        "re",
        "certifi.core.where",
        "warnings",
        "requests._internal_utils",
        "requests.exceptions",
        "zipfile",
        "tempfile",
        "requests.certs",
        "urllib3.util.request.make_headers",
        "contextlib.contextmanager",
        "struct",
        "os",
        "requests.structures",
        "<builtin>.frozenset",
        "io",
        "requests.__version__",
        "collections",
        "requests.cookies",
        "socket",
        "contextlib"
    ],
    "requests.certs": [
        "certifi.core.where",
        "<builtin>.print",
        "certifi"
    ],
    "certifi": [
        "certifi.core"
    ],
    "certifi.core": [
        "typing",
        "importlib.resources",
        "os",
        "types"
    ],
    "certifi.core.where": [
        "ntpath.dirname",
        "ntpath.join",
        "posixpath.dirname",
        "posixpath.join"
    ],
    "requests.__version__": [],
    "requests._internal_utils": [
        "re.compile",
        "requests.compat",
        "re"
    ],
    "requests.cookies": [
        "threading",
        "requests.cookies.RequestsCookieJar",
        "requests.cookies.CookieConflictError",
        "dummy_threading",
        "requests.cookies.MockResponse",
        "requests.compat",
        "requests._internal_utils",
        "copy",
        "calendar",
        "requests.cookies.MockRequest"
    ],
    "dummy_threading": [
        "threading",
        "_dummy_thread"
    ],
    "_dummy_thread": [
        "_dummy_thread.RLock",
        "_dummy_thread.LockType"
    ],
    "_dummy_thread.LockType": [],
    "_dummy_thread.RLock": [],
    "requests.cookies.MockRequest": [
        "<builtin>.property"
    ],
    "requests.cookies.MockResponse": [],
    "requests.cookies.CookieConflictError": [],
    "requests.cookies.RequestsCookieJar": [],
    "requests.structures": [
        "requests.compat",
        "collections",
        "requests.structures.CaseInsensitiveDict",
        "requests.structures.LookupDict"
    ],
    "requests.structures.CaseInsensitiveDict": [],
    "requests.structures.LookupDict": [],
    "urllib3.util.request.make_headers": [
        "base64.b64encode",
        "urllib3.packages.six.b",
        "<builtin>.isinstance"
    ],
    "urllib3.packages.six.b": [],
    "base64.b64encode": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "requests.api": [
        "requests.sessions"
    ],
    "requests.sessions": [
        "requests.structures",
        "requests.adapters",
        "requests.sessions.Session",
        "datetime",
        "collections",
        "requests.utils",
        "requests.models",
        "requests.cookies",
        "requests.status_codes",
        "requests.compat",
        "os",
        "requests.exceptions",
        "requests._internal_utils",
        "requests.hooks",
        "requests.sessions.SessionRedirectMixin",
        "requests.auth"
    ],
    "requests.adapters": [
        "requests.structures",
        "urllib3.util",
        "requests.adapters.BaseAdapter",
        "requests.adapters.HTTPAdapter",
        "requests.utils",
        "urllib3.contrib.socks",
        "urllib3.poolmanager",
        "requests.models",
        "urllib3.util.retry",
        "urllib3.response",
        "requests.cookies",
        "urllib3.exceptions",
        "posixpath",
        "socket",
        "requests.compat",
        "requests.exceptions",
        "requests.auth"
    ],
    "requests.auth": [
        "requests.auth.HTTPDigestAuth",
        "threading",
        "warnings",
        "requests.auth.AuthBase",
        "requests.utils",
        "requests.auth.HTTPBasicAuth",
        "base64",
        "requests.cookies",
        "requests.compat",
        "os",
        "hashlib",
        "re",
        "requests.auth.HTTPProxyAuth",
        "requests._internal_utils"
    ],
    "requests.auth.AuthBase": [],
    "requests.auth.HTTPBasicAuth": [],
    "requests.auth.HTTPProxyAuth": [],
    "requests.auth.HTTPDigestAuth": [],
    "requests.models": [
        "urllib3.util",
        "requests.models.Request",
        "datetime",
        "requests.utils",
        "requests.compat",
        "requests.models.RequestHooksMixin",
        "requests.models.PreparedRequest",
        "encodings.idna",
        "urllib3.exceptions",
        "requests.exceptions",
        "requests._internal_utils",
        "requests.status_codes",
        "requests.models.Response",
        "urllib3.filepost",
        "requests.structures",
        "urllib3.fields",
        "io",
        "requests.cookies",
        "requests.models.RequestEncodingMixin",
        "requests.hooks",
        "requests.auth"
    ],
    "encodings.idna": [
        "encodings.idna.IncrementalEncoder",
        "encodings.idna.IncrementalDecoder",
        "re.compile",
        "encodings.idna.StreamWriter",
        "unicodedata",
        "codecs",
        "re",
        "encodings.idna.Codec",
        "encodings.idna.StreamReader",
        "stringprep"
    ],
    "stringprep": [
        "unicodedata",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.set"
    ],
    "encodings.idna.Codec": [],
    "encodings.idna.IncrementalEncoder": [],
    "encodings.idna.IncrementalDecoder": [],
    "encodings.idna.StreamWriter": [],
    "encodings.idna.StreamReader": [],
    "requests.hooks": [],
    "requests.status_codes": [
        "requests.structures",
        "requests.structures.LookupDict.__init__",
        "requests.status_codes._init"
    ],
    "requests.structures.LookupDict.__init__": [
        "<builtin>.super"
    ],
    "requests.status_codes._init": [
        "requests.status_codes._init.doc",
        "<map>.items",
        "<builtin>.setattr",
        "<builtin>.sorted"
    ],
    "requests.status_codes._init.doc": [],
    "requests.models.RequestEncodingMixin": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "requests.models.RequestHooksMixin": [],
    "requests.models.Request": [],
    "requests.models.PreparedRequest": [
        "<builtin>.staticmethod"
    ],
    "requests.models.Response": [
        "<builtin>.property"
    ],
    "urllib3.contrib.socks": [
        "urllib3.connection",
        "warnings",
        "__future__",
        "ssl",
        "urllib3.poolmanager",
        "urllib3.contrib.socks.SOCKSConnection",
        "urllib3.contrib.socks.SOCKSProxyManager",
        "urllib3.exceptions",
        "urllib3.contrib.socks.SOCKSHTTPSConnectionPool",
        "socket",
        "urllib3.connectionpool",
        "urllib3.contrib.socks.SOCKSHTTPSConnection",
        "warnings.warn",
        "urllib3.util.url",
        "urllib3.contrib.socks.SOCKSHTTPConnectionPool"
    ],
    "urllib3.contrib.socks.SOCKSConnection": [],
    "urllib3.contrib.socks.SOCKSHTTPSConnection": [],
    "urllib3.contrib.socks.SOCKSHTTPConnectionPool": [],
    "urllib3.contrib.socks.SOCKSHTTPSConnectionPool": [],
    "urllib3.contrib.socks.SOCKSProxyManager": [],
    "requests.adapters.BaseAdapter": [],
    "requests.adapters.HTTPAdapter": [],
    "requests.sessions.SessionRedirectMixin": [],
    "requests.sessions.Session": [],
    "requests.api.get": [
        "requests.api.request"
    ],
    "requests.api.request": [
        "requests.sessions.Session.__init__"
    ],
    "requests.sessions.Session.__init__": [
        "requests.utils.default_headers",
        "requests.cookies.cookiejar_from_dict",
        "requests.hooks.default_hooks",
        "requests.sessions.Session.mount",
        "requests.adapters.HTTPAdapter.__init__",
        "collections.OrderedDict.__init__"
    ],
    "requests.utils.default_headers": [
        "requests.structures.CaseInsensitiveDict.__init__",
        "requests.utils.default_user_agent"
    ],
    "requests.utils.default_user_agent": [],
    "requests.structures.CaseInsensitiveDict.__init__": [
        "collections.OrderedDict.__init__"
    ],
    "requests.hooks.default_hooks": [],
    "requests.cookies.cookiejar_from_dict": [
        "requests.cookies.create_cookie",
        "collections.UserDict.__iter__",
        "requests.cookies.RequestsCookieJar.set_cookie"
    ],
    "requests.cookies.create_cookie": [
        "http.cookiejar.Cookie.__init__",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<map>.update",
        "<builtin>.bool"
    ],
    "http.cookiejar.Cookie.__init__": [
        "<builtin>.int",
        "copy.copy",
        "<builtin>.float",
        "<str>.lower",
        "<builtin>.ValueError"
    ],
    "requests.cookies.RequestsCookieJar.set_cookie": [
        "<builtin>.super",
        "<builtin>.hasattr"
    ],
    "requests.adapters.HTTPAdapter.__init__": [
        "urllib3.util.retry.Retry.__init__",
        "urllib3.util.retry.Retry.from_int",
        "<builtin>.super",
        "requests.adapters.HTTPAdapter.init_poolmanager"
    ],
    "urllib3.util.retry.Retry.from_int": [
        "urllib3.util.retry.Retry.__init__",
        "<builtin>.bool",
        "logging.Logger.debug",
        "<builtin>.isinstance"
    ],
    "logging.Logger.debug": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "requests.adapters.HTTPAdapter.init_poolmanager": [
        "urllib3.poolmanager.PoolManager.__init__"
    ],
    "urllib3.poolmanager.PoolManager.__init__": [
        "urllib3.request.RequestMethods.__init__",
        "<map>.copy",
        "_collections.RecentlyUsedContainer"
    ],
    "urllib3.request.RequestMethods.__init__": [],
    "_collections.RecentlyUsedContainer": [],
    "requests.sessions.Session.mount": [
        "collections.OrderedDict.pop",
        "<builtin>.len"
    ],
    "rich.markup.escape": [
        "<map>",
        "<list>"
    ],
    "rich_cli.__main__._line_range": [
        "rich_cli.__main__.on_error"
    ],
    "rich_cli.__main__.render_ipynb": [
        "rich.console.Group.__init__",
        "rich.text.Text.from_markup",
        "<builtin>.isinstance",
        "rich.markdown.Markdown.__init__",
        "json.loads",
        "rich_cli.markdown",
        "rich.console",
        "rich.panel.Panel.__init__",
        "rich.text.Text.from_ansi",
        "rich.text.Text.__init__",
        "<str>.splitlines",
        "rich_cli.__main__._line_range",
        "json",
        "rich.syntax",
        "rich_cli.__main__.read_resource",
        "rich.panel",
        "<str>.rstrip",
        "<builtin>.len",
        "rich.syntax.Syntax.__init__"
    ],
    "rich_cli.markdown": [
        "rich.console",
        "typing",
        "rich.syntax",
        "rich_cli.markdown.CodeBlock",
        "rich.markdown",
        "rich.padding"
    ],
    "rich_cli.markdown.CodeBlock": [
        "<builtin>.classmethod"
    ],
    "json.loads": [
        "<builtin>.isinstance",
        "decoder.JSONDecoder",
        "warnings",
        "<builtin>.TypeError",
        "decoder.JSONDecodeError",
        "<str>.startswith",
        "json.detect_encoding",
        "warnings.warn"
    ],
    "json.detect_encoding": [
        "<map>",
        "<builtin>.len"
    ],
    "decoder.JSONDecodeError": [],
    "rich.text.Text.from_ansi": [
        "rich.ansi",
        "rich.ansi.AnsiDecoder.__init__",
        "rich.ansi.AnsiDecoder.decode",
        "rich.text.Text.join",
        "rich.text.Text.__init__"
    ],
    "rich.text.Text.join": [
        "rich.text.Text.blank_copy",
        "rich.text.Text.join.iter_text",
        "<list>",
        "<builtin>.len"
    ],
    "rich.text.Text.blank_copy": [
        "rich.text.Text.__init__"
    ],
    "rich.text.Text.join.iter_text": [
        "rich._loop.loop_last"
    ],
    "rich._loop.loop_last": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "rich_cli.__main__.render_csv": [
        "<builtin>.enumerate",
        "rich.table",
        "operator",
        "re",
        "<builtin>.str",
        "<list>",
        "csv",
        "<builtin>.iter",
        "<builtin>.next",
        "operator.itemgetter.__init__",
        "rich_cli.__main__.on_error",
        "csv.Sniffer.sniff",
        "rich.table.Table.__init__",
        "re.compile",
        "rich.box",
        "rich_cli.__main__.read_resource",
        "csv.Sniffer.has_header",
        "io",
        "<map>",
        "rich.table.Table.add_column",
        "rich.table.Table.add_row",
        "_io.StringIO",
        "csv.Sniffer.__init__"
    ],
    "csv.Sniffer.__init__": [],
    "csv.Sniffer.sniff": [
        "csv.Sniffer._guess_delimiter",
        "csv.Sniffer.sniff.dialect",
        "csv.Sniffer._guess_quote_and_delimiter"
    ],
    "csv.Sniffer._guess_quote_and_delimiter": [
        "re.compile",
        "<builtin>.max",
        "re.escape",
        "<map>.get"
    ],
    "csv.Sniffer._guess_delimiter": [
        "<builtin>.sum",
        "<builtin>.list",
        "<map>.items",
        "<map>.keys",
        "<builtin>.max",
        "<builtin>.chr",
        "<map>.get",
        "<builtin>.len",
        "<builtin>.filter",
        "<builtin>.float",
        "<builtin>.min",
        "<builtin>.range"
    ],
    "csv.Sniffer.sniff.dialect": [],
    "csv.Sniffer.has_header": [
        "<builtin>.list",
        "<map>.items",
        "<map>.keys",
        "<builtin>.next",
        "<builtin>.type",
        "<builtin>.len",
        "csv.Sniffer.sniff",
        "_io.StringIO",
        "<builtin>.range"
    ],
    "rich.console.Console.print_exception": [
        "rich.console.Console.print",
        "rich.traceback",
        "rich.traceback.Traceback.__init__"
    ],
    "rich.traceback": [
        "rich.console.Console.__init__",
        "typing",
        "dataclasses",
        "types",
        "pygments.lexers",
        "rich.traceback.Frame",
        "rich.console",
        "rich.text",
        "rich.pretty",
        "traceback",
        "rich.scope",
        "rich.traceback.Stack",
        "rich.traceback.Trace",
        "rich.style",
        "pygments.util",
        "rich._loop",
        "rich.theme",
        "rich.syntax",
        "os",
        "rich.panel",
        "rich.traceback._SyntaxError",
        "rich.highlighter",
        "platform",
        "pygments.token",
        "rich.constrain",
        "__future__",
        "rich.columns",
        "rich.traceback.error",
        "rich.traceback.Traceback",
        "rich.traceback.PathHighlighter",
        "platform.system"
    ],
    "rich.traceback.Frame": [],
    "rich.traceback._SyntaxError": [],
    "rich.traceback.Stack": [
        "dataclasses.field"
    ],
    "rich.traceback.Trace": [],
    "rich.traceback.PathHighlighter": [],
    "rich.traceback.Traceback": [
        "rich.console.group.decorator",
        "<builtin>.classmethod",
        "rich.console.group"
    ],
    "rich.console.group": [],
    "rich.console.group.decorator": [
        "functools.wraps"
    ],
    "rich.traceback.error": [
        "rich.traceback.foo",
        "rich.console.Console.print_exception"
    ],
    "rich.traceback.foo": [
        "rich.traceback.bar"
    ],
    "rich.traceback.bar": [
        "<builtin>.print"
    ],
    "rich.traceback.Traceback.__init__": [
        "<builtin>.isinstance",
        "rich.traceback.Traceback.extract",
        "posixpath.normpath",
        "<builtin>.max",
        "posixpath.dirname",
        "ntpath.normpath",
        "rich.syntax.Syntax.get_theme",
        "ntpath.dirname",
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.ValueError"
    ],
    "rich.traceback.Traceback.extract": [
        "<builtin>.isinstance",
        "posixpath.join",
        "<str>.startswith",
        "ntpath.join",
        "traceback.walk_tb",
        "<builtin>.getattr",
        "posixpath.isabs",
        "rich.pretty.traverse",
        "ntpath.isabs",
        "rich",
        "rich.traceback.Traceback.extract.safe_str"
    ],
    "rich.traceback.Traceback.extract.safe_str": [
        "<builtin>.str"
    ],
    "rich.pretty.traverse": [
        "<builtin>.set",
        "rich.pretty.traverse._traverse"
    ],
    "rich.pretty.traverse._traverse": [
        "rich.pretty._has_default_namedtuple_repr",
        "<builtin>.enumerate",
        "textual.widgets._header.Header.__rich_repr__",
        "rich.pretty.traverse._traverse",
        "<builtin>.str",
        "rich.pretty.traverse._traverse.iter_attrs",
        "<list>",
        "rich._loop.loop_last",
        "<builtin>.list",
        "<builtin>.iter",
        "dataclasses.is_dataclass",
        "rich.pretty._is_namedtuple",
        "<builtin>.id",
        "textual.scrollbar.ScrollBar.__rich_repr__",
        "rich.pretty.traverse.to_repr",
        "inspect.isclass",
        "textual.view.View.__rich_repr__",
        "rich.pretty.traverse._traverse.iter_rich_args",
        "textual.widgets._footer.Footer.__rich_repr__",
        "textual.widget.Widget.__rich_repr__",
        "<map>.items",
        "dataclasses.fields",
        "rich.pretty._is_attr_object",
        "rich.pretty._safe_isinstance",
        "rich.pretty._is_dataclass_repr",
        "itertools.islice",
        "rich.pretty._get_attr_fields",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "textual.widgets._placeholder.Placeholder.__rich_repr__"
    ],
    "rich.pretty._is_attr_object": [
        "<builtin>.type"
    ],
    "dataclasses.is_dataclass": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "rich.pretty._safe_isinstance": [
        "<builtin>.isinstance"
    ],
    "rich.pretty._is_dataclass_repr": [],
    "rich.pretty._is_namedtuple": [
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "rich.pretty._has_default_namedtuple_repr": [
        "inspect.getfile"
    ],
    "rich.pretty.traverse.to_repr": [
        "<builtin>.str",
        "rich.pretty._safe_isinstance",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "itertools.islice": [],
    "dataclasses.fields": [
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "rich.pretty._get_attr_fields": [
        "<builtin>.type"
    ],
    "rich.pretty.traverse._traverse.iter_attrs": [
        "<builtin>.getattr"
    ],
    "rich.pretty.traverse._traverse.iter_rich_args": [
        "rich.pretty._safe_isinstance",
        "<builtin>.len"
    ],
    "rich._inspect": [
        "rich.console",
        "rich._inspect.Inspect",
        "__future__",
        "typing",
        "rich.text",
        "rich.pretty",
        "inspect",
        "rich.control",
        "rich.table",
        "rich.panel",
        "rich.highlighter",
        "rich.jupyter"
    ],
    "rich._inspect.Inspect": [],
    "rich._inspect.Inspect.__init__": [
        "rich._inspect.Inspect._make_title"
    ],
    "rich._inspect.Inspect._make_title": [
        "inspect.isclass",
        "inspect.ismodule",
        "<builtin>.callable",
        "<builtin>.type",
        "<builtin>.str"
    ],
    "rich_rst": [
        "rich.rule",
        "typing",
        "html.parser",
        "rich.table",
        "pygments.lexers",
        "rich_rst.MLStripper",
        "rich.traceback.install",
        "docutils.utils",
        "rich.console",
        "docutils.io",
        "rich.text",
        "rich_rst.RSTVisitor",
        "rich.style",
        "pygments.util",
        "rich.align",
        "rich.box",
        "rich.syntax",
        "rich.panel",
        "rich.traceback",
        "docutils.parsers.rst",
        "io",
        "docutils.nodes",
        "rich",
        "rich.jupyter",
        "rich_rst.RestructuredText"
    ],
    "html.parser": [
        "html.parser.HTMLParser",
        "warnings",
        "re.compile",
        "html",
        "_markupbase",
        "re"
    ],
    "_markupbase": [
        "re.compile",
        "re",
        "_markupbase.ParserBase"
    ],
    "_markupbase.ParserBase": [],
    "html.parser.HTMLParser": [],
    "docutils.io": [
        "docutils.io.NullOutput",
        "codecs",
        "docutils.io.ErrorOutput",
        "re",
        "docutils.io.FileOutput",
        "docutils.io.DocTreeInput",
        "warnings",
        "docutils.io.StringInput",
        "locale.getlocale",
        "docutils",
        "locale",
        "locale.getdefaultlocale",
        "docutils.io.Input",
        "docutils.io.InputError",
        "os",
        "docutils.io.OutputError",
        "docutils.io.FileInput",
        "docutils.io.StringOutput",
        "docutils.io.BinaryFileOutput",
        "docutils.io.Output",
        "<str>.lower",
        "docutils.io.NullInput"
    ],
    "docutils": [
        "docutils.TransformSpec",
        "collections",
        "collections.namedtuple",
        "docutils.ApplicationError",
        "docutils.VersionInfo",
        "docutils.SettingsSpec",
        "docutils.Component",
        "docutils.DataError"
    ],
    "docutils.VersionInfo": [],
    "docutils.ApplicationError": [],
    "docutils.DataError": [],
    "docutils.SettingsSpec": [],
    "docutils.TransformSpec": [],
    "docutils.Component": [],
    "docutils.io.InputError": [],
    "docutils.io.OutputError": [],
    "docutils.io.Input": [
        "re.compile"
    ],
    "docutils.io.Output": [],
    "docutils.io.ErrorOutput": [],
    "docutils.io.FileInput": [],
    "docutils.io.FileOutput": [],
    "docutils.io.BinaryFileOutput": [],
    "docutils.io.StringInput": [],
    "docutils.io.StringOutput": [],
    "docutils.io.NullInput": [],
    "docutils.io.NullOutput": [],
    "docutils.io.DocTreeInput": [],
    "docutils.nodes": [
        "docutils.nodes.term",
        "docutils.nodes.Structural",
        "docutils.nodes.field_name",
        "docutils.nodes.paragraph",
        "docutils.nodes.topic",
        "docutils.nodes.decoration",
        "docutils.nodes._add_node_class_names",
        "<str>.split",
        "docutils.nodes.Resolvable",
        "docutils.nodes.address",
        "docutils.nodes.tgroup",
        "docutils.nodes.section",
        "docutils.nodes.General",
        "docutils.nodes.inline",
        "docutils.nodes.meta",
        "docutils.nodes.math",
        "docutils.nodes.PreBibliographic",
        "docutils.nodes.line_block",
        "docutils.nodes.emphasis",
        "docutils.nodes.error",
        "docutils.nodes.note",
        "docutils.nodes.header",
        "docutils.nodes.Inline",
        "docutils.nodes.Part",
        "docutils.nodes.strong",
        "docutils.nodes.TreeCopyVisitor",
        "docutils.nodes.sidebar",
        "docutils.nodes.authors",
        "docutils.nodes.copyright",
        "docutils.nodes.legend",
        "docutils.nodes.subtitle",
        "docutils.nodes.organization",
        "docutils.nodes.caption",
        "docutils.nodes.table",
        "docutils.nodes.Labeled",
        "docutils.nodes.NodeVisitor",
        "docutils.nodes.description",
        "docutils.nodes.Titular",
        "docutils.nodes.StopTraversal",
        "docutils.nodes.figure",
        "docutils.nodes.danger",
        "docutils.nodes.date",
        "re.compile",
        "docutils.nodes.Text",
        "unicodedata",
        "docutils.nodes.Decorative",
        "docutils.nodes.admonition",
        "docutils.nodes.generated",
        "docutils.nodes.Admonition",
        "docutils.nodes.caution",
        "docutils.nodes.line",
        "docutils.nodes.option_string",
        "docutils.nodes.reference",
        "docutils.nodes.colspec",
        "docutils.nodes.footnote_reference",
        "docutils.nodes.revision",
        "docutils.nodes.pending",
        "docutils.nodes.doctest_block",
        "docutils.nodes.option_argument",
        "docutils.nodes.block_quote",
        "docutils.nodes.list_item",
        "docutils.nodes.GenericNodeVisitor",
        "docutils.nodes.compound",
        "docutils.nodes.footnote",
        "docutils.nodes.Targetable",
        "docutils.nodes.SparseNodeVisitor",
        "docutils.nodes.TextElement",
        "docutils.nodes.acronym",
        "docutils.nodes.footer",
        "docutils.nodes.Element",
        "docutils.nodes.version",
        "docutils.nodes.thead",
        "docutils.nodes.Node",
        "warnings",
        "docutils.nodes.classifier",
        "docutils.nodes.option_group",
        "docutils.nodes.warning",
        "docutils.nodes.contact",
        "docutils.nodes.FixedTextElement",
        "docutils.nodes.substitution_definition",
        "docutils.nodes.SkipSiblings",
        "docutils.nodes.Referential",
        "docutils.nodes.TreePruningException",
        "docutils.nodes.attribution",
        "docutils.nodes.option",
        "docutils.nodes.Bibliographic",
        "docutils.nodes.SkipChildren",
        "docutils.nodes.SkipDeparture",
        "docutils.nodes.title",
        "docutils.nodes.rubric",
        "docutils.nodes.SkipNode",
        "docutils.nodes.target",
        "docutils.nodes.status",
        "docutils.nodes.transition",
        "docutils.nodes.reprunicode",
        "docutils.nodes.citation_reference",
        "docutils.nodes.literal_block",
        "docutils.nodes.Special",
        "docutils.nodes.BackLinkable",
        "docutils.nodes.hint",
        "docutils.nodes.entry",
        "docutils.nodes.abbreviation",
        "docutils.nodes.definition_list",
        "docutils.nodes.enumerated_list",
        "docutils.nodes.Invisible",
        "docutils.nodes.field_list",
        "docutils.nodes.tip",
        "docutils.nodes.citation",
        "re",
        "docutils.nodes.Root",
        "docutils.nodes.NodeFound",
        "docutils.nodes.system_message",
        "docutils.nodes.tbody",
        "docutils.nodes.title_reference",
        "docutils.nodes.option_list",
        "docutils.nodes.image",
        "docutils.nodes.attention",
        "docutils.nodes.definition",
        "docutils.nodes.important",
        "docutils.nodes.label",
        "docutils.nodes.docinfo",
        "docutils.nodes.Body",
        "docutils.nodes.raw",
        "docutils.nodes.option_list_item",
        "docutils.nodes.container",
        "docutils.nodes.subscript",
        "docutils.nodes.literal",
        "docutils.nodes.comment",
        "docutils.nodes.document",
        "docutils.nodes.problematic",
        "docutils.nodes.row",
        "docutils.nodes.superscript",
        "collections",
        "docutils.nodes.math_block",
        "docutils.nodes.field",
        "docutils.nodes.substitution_reference",
        "docutils.nodes.author",
        "docutils.nodes.Sequential",
        "docutils.nodes.definition_list_item",
        "docutils.nodes.field_body",
        "docutils.nodes.bullet_list"
    ],
    "docutils.nodes.Node": [
        "<builtin>.property"
    ],
    "docutils.nodes.reprunicode": [],
    "docutils.nodes.Text": [],
    "docutils.nodes.Element": [
        "<builtin>.classmethod"
    ],
    "docutils.nodes.TextElement": [],
    "docutils.nodes.FixedTextElement": [],
    "docutils.nodes.Resolvable": [],
    "docutils.nodes.BackLinkable": [],
    "docutils.nodes.Root": [],
    "docutils.nodes.Titular": [],
    "docutils.nodes.PreBibliographic": [],
    "docutils.nodes.Bibliographic": [],
    "docutils.nodes.Decorative": [],
    "docutils.nodes.Structural": [],
    "docutils.nodes.Body": [],
    "docutils.nodes.General": [],
    "docutils.nodes.Sequential": [],
    "docutils.nodes.Admonition": [],
    "docutils.nodes.Special": [],
    "docutils.nodes.Invisible": [],
    "docutils.nodes.Part": [],
    "docutils.nodes.Inline": [],
    "docutils.nodes.Referential": [],
    "docutils.nodes.Targetable": [],
    "docutils.nodes.Labeled": [],
    "docutils.nodes.document": [],
    "docutils.nodes.title": [],
    "docutils.nodes.subtitle": [],
    "docutils.nodes.rubric": [],
    "docutils.nodes.meta": [],
    "docutils.nodes.docinfo": [],
    "docutils.nodes.author": [],
    "docutils.nodes.authors": [],
    "docutils.nodes.organization": [],
    "docutils.nodes.address": [],
    "docutils.nodes.contact": [],
    "docutils.nodes.version": [],
    "docutils.nodes.revision": [],
    "docutils.nodes.status": [],
    "docutils.nodes.date": [],
    "docutils.nodes.copyright": [],
    "docutils.nodes.decoration": [],
    "docutils.nodes.header": [],
    "docutils.nodes.footer": [],
    "docutils.nodes.section": [],
    "docutils.nodes.topic": [],
    "docutils.nodes.sidebar": [],
    "docutils.nodes.transition": [],
    "docutils.nodes.paragraph": [],
    "docutils.nodes.compound": [],
    "docutils.nodes.container": [],
    "docutils.nodes.bullet_list": [],
    "docutils.nodes.enumerated_list": [],
    "docutils.nodes.list_item": [],
    "docutils.nodes.definition_list": [],
    "docutils.nodes.definition_list_item": [],
    "docutils.nodes.term": [],
    "docutils.nodes.classifier": [],
    "docutils.nodes.definition": [],
    "docutils.nodes.field_list": [],
    "docutils.nodes.field": [],
    "docutils.nodes.field_name": [],
    "docutils.nodes.field_body": [],
    "docutils.nodes.option": [],
    "docutils.nodes.option_argument": [],
    "docutils.nodes.option_group": [],
    "docutils.nodes.option_list": [],
    "docutils.nodes.option_list_item": [],
    "docutils.nodes.option_string": [],
    "docutils.nodes.description": [],
    "docutils.nodes.literal_block": [],
    "docutils.nodes.doctest_block": [],
    "docutils.nodes.math_block": [],
    "docutils.nodes.line_block": [],
    "docutils.nodes.line": [],
    "docutils.nodes.block_quote": [],
    "docutils.nodes.attribution": [],
    "docutils.nodes.attention": [],
    "docutils.nodes.caution": [],
    "docutils.nodes.danger": [],
    "docutils.nodes.error": [],
    "docutils.nodes.important": [],
    "docutils.nodes.note": [],
    "docutils.nodes.tip": [],
    "docutils.nodes.hint": [],
    "docutils.nodes.warning": [],
    "docutils.nodes.admonition": [],
    "docutils.nodes.comment": [],
    "docutils.nodes.substitution_definition": [],
    "docutils.nodes.target": [],
    "docutils.nodes.footnote": [],
    "docutils.nodes.citation": [],
    "docutils.nodes.label": [],
    "docutils.nodes.figure": [],
    "docutils.nodes.caption": [],
    "docutils.nodes.legend": [],
    "docutils.nodes.table": [],
    "docutils.nodes.tgroup": [],
    "docutils.nodes.colspec": [],
    "docutils.nodes.thead": [],
    "docutils.nodes.tbody": [],
    "docutils.nodes.row": [],
    "docutils.nodes.entry": [],
    "docutils.nodes.system_message": [],
    "docutils.nodes.pending": [],
    "docutils.nodes.raw": [],
    "docutils.nodes.emphasis": [],
    "docutils.nodes.strong": [],
    "docutils.nodes.literal": [],
    "docutils.nodes.reference": [],
    "docutils.nodes.footnote_reference": [],
    "docutils.nodes.citation_reference": [],
    "docutils.nodes.substitution_reference": [],
    "docutils.nodes.title_reference": [],
    "docutils.nodes.abbreviation": [],
    "docutils.nodes.acronym": [],
    "docutils.nodes.superscript": [],
    "docutils.nodes.subscript": [],
    "docutils.nodes.math": [],
    "docutils.nodes.image": [],
    "docutils.nodes.inline": [],
    "docutils.nodes.problematic": [],
    "docutils.nodes.generated": [],
    "docutils.nodes.NodeVisitor": [],
    "docutils.nodes.SparseNodeVisitor": [],
    "docutils.nodes.GenericNodeVisitor": [],
    "docutils.nodes._add_node_class_names": [
        "<builtin>.setattr"
    ],
    "docutils.nodes.TreeCopyVisitor": [],
    "docutils.nodes.TreePruningException": [],
    "docutils.nodes.SkipChildren": [],
    "docutils.nodes.SkipSiblings": [],
    "docutils.nodes.SkipNode": [],
    "docutils.nodes.SkipDeparture": [],
    "docutils.nodes.NodeFound": [],
    "docutils.nodes.StopTraversal": [],
    "docutils.parsers.rst": [
        "docutils.parsers",
        "docutils.statemachine",
        "docutils.parsers.rst.Directive",
        "docutils.parsers.rst.Parser",
        "docutils.transforms.universal",
        "docutils",
        "docutils.frontend",
        "docutils.parsers.rst.states",
        "docutils.parsers.rst.DirectiveError",
        "docutils.parsers.rst.roles",
        "docutils.nodes"
    ],
    "docutils.parsers": [
        "importlib",
        "docutils",
        "docutils.frontend",
        "docutils.parsers.Parser"
    ],
    "docutils.frontend": [
        "docutils.frontend.ConfigParser",
        "docutils.utils",
        "warnings",
        "docutils.frontend.ConfigDeprecationWarning",
        "docutils.io",
        "docutils",
        "configparser",
        "codecs",
        "optparse",
        "os",
        "posixpath",
        "docutils.frontend.OptionParser",
        "docutils.frontend.Option",
        "docutils.frontend.Values"
    ],
    "docutils.utils": [
        "docutils.utils.ExtensionOptionError",
        "docutils.utils.DuplicateOptionError",
        "docutils.utils.SystemMessagePropagation",
        "warnings",
        "docutils.io",
        "docutils.utils.Reporter",
        "docutils",
        "docutils.utils.BadOptionDataError",
        "docutils.utils.NameValueError",
        "unicodedata",
        "docutils.utils.BadOptionError",
        "posixpath",
        "os",
        "re",
        "docutils.utils.SystemMessage",
        "docutils.nodes",
        "docutils.utils.DependencyList"
    ],
    "docutils.utils.SystemMessage": [],
    "docutils.utils.SystemMessagePropagation": [],
    "docutils.utils.Reporter": [
        "<builtin>.range"
    ],
    "docutils.utils.ExtensionOptionError": [],
    "docutils.utils.BadOptionError": [],
    "docutils.utils.BadOptionDataError": [],
    "docutils.utils.DuplicateOptionError": [],
    "docutils.utils.NameValueError": [],
    "docutils.utils.DependencyList": [],
    "docutils.frontend.Values": [],
    "docutils.frontend.Option": [],
    "docutils.frontend.OptionParser": [
        "<builtin>.classmethod",
        "<builtin>.getattr"
    ],
    "docutils.frontend.ConfigParser": [],
    "docutils.frontend.ConfigDeprecationWarning": [],
    "docutils.parsers.Parser": [],
    "docutils.statemachine": [
        "docutils.statemachine.SearchStateMachineWS",
        "docutils.statemachine.DuplicateTransitionError",
        "re",
        "docutils.statemachine._SearchOverride",
        "docutils.utils",
        "docutils.statemachine.StateMachine",
        "docutils.statemachine.State",
        "docutils.statemachine.TransitionPatternNotFound",
        "docutils.statemachine.ViewList",
        "docutils.statemachine.SearchStateMachine",
        "docutils.statemachine.TransitionCorrection",
        "docutils.statemachine.StateMachineError",
        "docutils.statemachine.DuplicateStateError",
        "docutils.statemachine.UnknownTransitionError",
        "re.compile",
        "docutils.statemachine.StringList",
        "unicodedata",
        "docutils.statemachine.UnexpectedIndentationError",
        "docutils.statemachine.UnknownStateError",
        "docutils.statemachine.TransitionMethodNotFound",
        "docutils.statemachine.StateWS",
        "docutils.statemachine.StateCorrection",
        "docutils.statemachine.StateMachineWS"
    ],
    "docutils.statemachine.StateMachine": [],
    "docutils.statemachine.State": [],
    "docutils.statemachine.StateMachineWS": [],
    "docutils.statemachine.StateWS": [
        "re.compile"
    ],
    "docutils.statemachine._SearchOverride": [],
    "docutils.statemachine.SearchStateMachine": [],
    "docutils.statemachine.SearchStateMachineWS": [],
    "docutils.statemachine.ViewList": [],
    "docutils.statemachine.StringList": [],
    "docutils.statemachine.StateMachineError": [],
    "docutils.statemachine.UnknownStateError": [],
    "docutils.statemachine.DuplicateStateError": [],
    "docutils.statemachine.UnknownTransitionError": [],
    "docutils.statemachine.DuplicateTransitionError": [],
    "docutils.statemachine.TransitionPatternNotFound": [],
    "docutils.statemachine.TransitionMethodNotFound": [],
    "docutils.statemachine.UnexpectedIndentationError": [],
    "docutils.statemachine.TransitionCorrection": [],
    "docutils.statemachine.StateCorrection": [],
    "docutils.parsers.rst.roles": [
        "docutils.parsers.rst.languages.en",
        "docutils.utils.code_analyzer",
        "docutils.parsers.rst.roles.register_canonical_role",
        "docutils.parsers.rst.directives",
        "docutils.parsers.rst.roles.CustomRole",
        "docutils.parsers.rst.roles.register_generic_role",
        "docutils.nodes",
        "docutils.parsers.rst.roles.GenericRole"
    ],
    "docutils.parsers.rst.directives": [
        "docutils.parsers",
        "docutils.parsers.rst.languages.en",
        "docutils.utils",
        "re.compile",
        "codecs",
        "re",
        "docutils.nodes",
        "importlib"
    ],
    "docutils.parsers.rst.languages.en": [],
    "docutils.utils.code_analyzer": [
        "docutils",
        "docutils.utils.code_analyzer.LexerError",
        "pygments.lexers",
        "pygments.formatters.html",
        "pygments",
        "docutils.utils.code_analyzer.NumberLines",
        "docutils.utils.code_analyzer.Lexer"
    ],
    "pygments": [
        "io"
    ],
    "pygments.formatters.html": [
        "pygments.token",
        "pygments.util",
        "functools",
        "posixpath",
        "os",
        "pygments.formatters.html.HtmlFormatter",
        "<builtin>.ord",
        "io",
        "pygments.formatter"
    ],
    "pygments.formatter": [
        "pygments.util",
        "pygments.formatter.Formatter",
        "codecs",
        "pygments.styles"
    ],
    "pygments.formatter.Formatter": [],
    "pygments.formatters.html.HtmlFormatter": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "<builtin>.property",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "docutils.utils.code_analyzer.LexerError": [],
    "docutils.utils.code_analyzer.Lexer": [],
    "docutils.utils.code_analyzer.NumberLines": [],
    "docutils.parsers.rst.roles.GenericRole": [],
    "docutils.parsers.rst.roles.CustomRole": [],
    "docutils.parsers.rst.roles.register_generic_role": [
        "docutils.parsers.rst.roles.register_canonical_role",
        "docutils.parsers.rst.roles.GenericRole.__init__"
    ],
    "docutils.parsers.rst.roles.GenericRole.__init__": [],
    "docutils.parsers.rst.roles.register_canonical_role": [
        "<str>.lower",
        "docutils.parsers.rst.roles.set_implicit_options"
    ],
    "docutils.parsers.rst.roles.set_implicit_options": [
        "<builtin>.hasattr"
    ],
    "docutils.parsers.rst.states": [
        "docutils.parsers.rst.states.UnknownInterpretedRoleError",
        "docutils.parsers.rst.states.DefinitionList",
        "docutils.parsers.rst.states.Text",
        "docutils.parsers.rst.states.SpecializedBody",
        "types",
        "docutils.utils.urischemes",
        "docutils.parsers.rst.languages",
        "re",
        "<builtin>.ord",
        "docutils.parsers.rst.states.LineBlock",
        "docutils.statemachine",
        "docutils.utils",
        "docutils.parsers.rst.tableparser",
        "docutils",
        "docutils.parsers.rst.states.MarkupMismatch",
        "docutils.parsers.rst.states.RFC2822Body",
        "docutils.utils.roman",
        "docutils.parsers.rst.states.Explicit",
        "docutils.parsers.rst.states.QuotedLiteralBlock",
        "docutils.parsers.rst.states.Definition",
        "docutils.parsers.rst.states.Struct",
        "docutils.parsers.rst.states.RFC2822List",
        "docutils.parsers.rst.states.Inliner",
        "docutils.parsers.rst.states.InterpretedRoleNotImplementedError",
        "docutils.parsers.rst.states.OptionList",
        "docutils.parsers.rst.directives",
        "docutils.parsers.rst.states.RSTState",
        "docutils.parsers.rst.states.BulletList",
        "docutils.parsers.rst.roles",
        "docutils.parsers.rst.states.ParserError",
        "docutils.parsers.rst.states.RSTStateMachine",
        "docutils.parsers.rst.states.SpecializedText",
        "docutils.utils.punctuation_chars",
        "docutils.parsers.rst",
        "docutils.parsers.rst.states.Line",
        "docutils.parsers.rst.states.MarkupError",
        "docutils.parsers.rst.states.ExtensionOptions",
        "docutils.parsers.rst.states.Body",
        "docutils.parsers.rst.states.NestedStateMachine",
        "docutils.parsers.rst.states.SubstitutionDef",
        "docutils.parsers.rst.states.FieldList",
        "docutils.parsers.rst.states.EnumeratedList",
        "docutils.nodes"
    ],
    "docutils.parsers.rst.languages": [
        "docutils.languages",
        "docutils.parsers.rst.languages.RstLanguageImporter"
    ],
    "docutils.languages": [
        "importlib",
        "docutils.languages.LanguageImporter",
        "docutils.utils",
        "docutils.languages.LanguageImporter.__init__"
    ],
    "docutils.languages.LanguageImporter": [],
    "docutils.languages.LanguageImporter.__init__": [],
    "docutils.parsers.rst.languages.RstLanguageImporter": [],
    "docutils.parsers.rst.tableparser": [
        "docutils.parsers.rst.tableparser.SimpleTableParser",
        "docutils.utils",
        "docutils.parsers.rst.tableparser.GridTableParser",
        "docutils.parsers.rst.tableparser.TableMarkupError",
        "docutils",
        "re",
        "docutils.parsers.rst.tableparser.TableParser"
    ],
    "docutils.parsers.rst.tableparser.TableMarkupError": [],
    "docutils.parsers.rst.tableparser.TableParser": [],
    "docutils.parsers.rst.tableparser.GridTableParser": [
        "re.compile"
    ],
    "docutils.parsers.rst.tableparser.SimpleTableParser": [
        "re.compile"
    ],
    "docutils.utils.punctuation_chars": [],
    "docutils.utils.roman": [
        "docutils.utils.roman.OutOfRangeError",
        "re.compile",
        "docutils.utils.roman.RomanError",
        "docutils.utils.roman.InvalidRomanNumeralError",
        "re",
        "docutils.utils.roman.NotIntegerError"
    ],
    "docutils.utils.roman.RomanError": [],
    "docutils.utils.roman.OutOfRangeError": [],
    "docutils.utils.roman.NotIntegerError": [],
    "docutils.utils.roman.InvalidRomanNumeralError": [],
    "docutils.utils.urischemes": [],
    "docutils.parsers.rst.states.MarkupError": [],
    "docutils.parsers.rst.states.UnknownInterpretedRoleError": [],
    "docutils.parsers.rst.states.InterpretedRoleNotImplementedError": [],
    "docutils.parsers.rst.states.ParserError": [],
    "docutils.parsers.rst.states.MarkupMismatch": [],
    "docutils.parsers.rst.states.Struct": [],
    "docutils.parsers.rst.states.RSTStateMachine": [],
    "docutils.parsers.rst.states.NestedStateMachine": [],
    "docutils.parsers.rst.states.RSTState": [],
    "docutils.parsers.rst.states.Inliner": [
        "<builtin>.locals"
    ],
    "docutils.parsers.rst.states.Body": [
        "<map>.keys",
        "<builtin>.vars",
        "re.compile",
        "re.escape",
        "docutils.parsers.rst.states.Struct.__init__"
    ],
    "docutils.parsers.rst.states.Struct.__init__": [],
    "docutils.parsers.rst.states.RFC2822Body": [
        "<map>.copy"
    ],
    "docutils.parsers.rst.states.SpecializedBody": [],
    "docutils.parsers.rst.states.BulletList": [],
    "docutils.parsers.rst.states.DefinitionList": [],
    "docutils.parsers.rst.states.EnumeratedList": [],
    "docutils.parsers.rst.states.FieldList": [],
    "docutils.parsers.rst.states.OptionList": [],
    "docutils.parsers.rst.states.RFC2822List": [],
    "docutils.parsers.rst.states.ExtensionOptions": [],
    "docutils.parsers.rst.states.LineBlock": [],
    "docutils.parsers.rst.states.Explicit": [],
    "docutils.parsers.rst.states.SubstitutionDef": [
        "re.compile"
    ],
    "docutils.parsers.rst.states.Text": [
        "re.compile"
    ],
    "docutils.parsers.rst.states.SpecializedText": [],
    "docutils.parsers.rst.states.Definition": [],
    "docutils.parsers.rst.states.Line": [],
    "docutils.parsers.rst.states.QuotedLiteralBlock": [],
    "docutils.transforms.universal": [
        "docutils.utils",
        "docutils.transforms.universal.FilterMessages",
        "docutils.transforms.universal.ExposeInternals",
        "docutils.transforms.universal.StripClassesAndElements",
        "docutils.transforms.universal.TestMessages",
        "docutils.transforms.universal.Decorations",
        "docutils.transforms.universal.StripComments",
        "re",
        "docutils.transforms.universal.Messages",
        "docutils.nodes",
        "docutils.transforms.universal.SmartQuotes",
        "docutils.utils.smartquotes",
        "docutils.transforms"
    ],
    "docutils.transforms": [
        "docutils.transforms.Transformer",
        "docutils.transforms.Transform",
        "docutils.transforms.TransformError",
        "docutils",
        "docutils.languages"
    ],
    "docutils.transforms.TransformError": [],
    "docutils.transforms.Transform": [],
    "docutils.transforms.Transformer": [],
    "docutils.utils.smartquotes": [
        "locale.setlocale",
        "<map>.keys",
        "unittest.loader.TestLoader.__init__",
        "re",
        "unittest",
        "<builtin>.print",
        "docutils.utils.smartquotes.smartchars",
        "unittest.loader.TestLoader.loadTestsFromTestCase",
        "unittest.runner.TextTestRunner.run",
        "argparse.ArgumentParser.__init__",
        "re.sub",
        "locale",
        "locale.getdefaultlocale",
        "argparse",
        "<str>.replace",
        "unittest.runner.TextTestRunner.__init__",
        "<builtin>.sorted",
        "docutils.utils.smartquotes.TestSmartypantsAllAttributes",
        "<builtin>.range",
        "argparse.ArgumentParser.parse_args",
        "codecs.StreamRecoder.read",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.len",
        "docutils.utils.smartquotes.smartyPants",
        "<str>.lower"
    ],
    "docutils.utils.smartquotes.smartchars": [],
    "docutils.utils.smartquotes.smartyPants": [
        "docutils.utils.smartquotes.educate_tokens",
        "docutils.utils.smartquotes.tokenize"
    ],
    "docutils.utils.smartquotes.tokenize": [
        "re.compile",
        "<builtin>.len"
    ],
    "docutils.utils.smartquotes.educate_tokens": [
        "docutils.utils.smartquotes.stupefyEntities",
        "docutils.utils.smartquotes.educateDashesOldSchool",
        "docutils.utils.smartquotes.educateBackticks",
        "<str>.replace",
        "docutils.utils.smartquotes.educateQuotes",
        "docutils.utils.smartquotes.processEscapes",
        "docutils.utils.smartquotes.educateSingleBackticks",
        "docutils.utils.smartquotes.educateDashesOldSchoolInverted",
        "docutils.utils.smartquotes.educateDashes",
        "docutils.utils.smartquotes.educateEllipses"
    ],
    "docutils.utils.smartquotes.processEscapes": [],
    "docutils.utils.smartquotes.educateDashesOldSchoolInverted": [],
    "docutils.utils.smartquotes.educateDashesOldSchool": [],
    "docutils.utils.smartquotes.educateDashes": [],
    "docutils.utils.smartquotes.educateEllipses": [],
    "docutils.utils.smartquotes.educateBackticks": [
        "docutils.utils.smartquotes.smartchars.__init__"
    ],
    "docutils.utils.smartquotes.smartchars.__init__": [
        "<str>.lower"
    ],
    "docutils.utils.smartquotes.educateSingleBackticks": [
        "docutils.utils.smartquotes.smartchars.__init__"
    ],
    "docutils.utils.smartquotes.educateQuotes": [
        "<str>.replace",
        "re.compile",
        "<str>.startswith",
        "docutils.utils.smartquotes.smartchars.__init__",
        "re.sub"
    ],
    "docutils.utils.smartquotes.stupefyEntities": [
        "docutils.utils.smartquotes.smartchars.__init__"
    ],
    "docutils.utils.smartquotes.TestSmartypantsAllAttributes": [],
    "unittest.loader.TestLoader.loadTestsFromTestCase": [
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.hasattr",
        "<builtin>.map",
        "unittest.loader.TestLoader.getTestCaseNames"
    ],
    "unittest.loader.TestLoader.getTestCaseNames": [
        "<builtin>.filter",
        "<builtin>.dir",
        "functools.cmp_to_key",
        "<builtin>.list"
    ],
    "functools.cmp_to_key": [
        "functools.cmp_to_key.K"
    ],
    "functools.cmp_to_key.K": [],
    "unittest.runner.TextTestRunner.__init__": [
        "unittest.runner._WritelnDecorator.__init__"
    ],
    "unittest.runner._WritelnDecorator.__init__": [],
    "unittest.runner.TextTestRunner.run": [
        "<list>.append",
        "unittest.runner.TextTestRunner._makeResult",
        "unittest.signals.registerResult",
        "unittest.runner.TextTestResult.printErrors",
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.len",
        "unittest.result.TestResult.wasSuccessful",
        "<builtin>.hasattr",
        "<builtin>.map"
    ],
    "unittest.runner.TextTestRunner._makeResult": [
        "unittest.runner.TextTestResult.__init__"
    ],
    "unittest.runner.TextTestResult.__init__": [
        "<builtin>.super"
    ],
    "unittest.signals.registerResult": [],
    "unittest.runner.TextTestResult.printErrors": [
        "unittest.runner.TextTestResult.printErrorList",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner._WritelnDecorator.writeln": [],
    "unittest.runner.TextTestResult.printErrorList": [
        "unittest.runner.TextTestResult.getDescription",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.getDescription": [
        "<builtin>.str"
    ],
    "unittest.result.TestResult.wasSuccessful": [
        "<builtin>.hasattr",
        "<builtin>.len"
    ],
    "docutils.transforms.universal.Decorations": [],
    "docutils.transforms.universal.ExposeInternals": [],
    "docutils.transforms.universal.Messages": [],
    "docutils.transforms.universal.FilterMessages": [],
    "docutils.transforms.universal.TestMessages": [],
    "docutils.transforms.universal.StripComments": [],
    "docutils.transforms.universal.StripClassesAndElements": [],
    "docutils.transforms.universal.SmartQuotes": [],
    "docutils.parsers.rst.Parser": [],
    "docutils.parsers.rst.DirectiveError": [],
    "docutils.parsers.rst.Directive": [],
    "rich.traceback.install": [
        "rich.traceback.install.ipy_excepthook_closure",
        "rich.console.Console.__init__"
    ],
    "rich.traceback.install.ipy_excepthook_closure": [],
    "rich_rst.MLStripper": [],
    "rich_rst.RSTVisitor": [],
    "rich_rst.RestructuredText": [],
    "rich_rst.RestructuredText.__init__": [],
    "rich.json": [
        "argparse.ArgumentParser.parse_args",
        "argparse",
        "argparse.ArgumentParser.__init__",
        "json",
        "rich.console",
        "rich.console.Console.__init__",
        "rich.json.JSON.__init__",
        "typing",
        "rich.console.Console.print",
        "rich.text",
        "codecs.StreamRecoder.read",
        "argparse._ActionsContainer.add_argument",
        "rich.json.JSON",
        "<builtin>.open",
        "rich.highlighter"
    ],
    "rich.json.JSON": [
        "<builtin>.classmethod"
    ],
    "rich.json.JSON.__init__": [
        "json.loads",
        "json.dumps"
    ],
    "<str>.upper": [],
    "rich_cli.__main__.ForceWidth.__init__": [],
    "rich_cli.pager": [
        "textual.app",
        "rich.measure",
        "rich.console",
        "typing",
        "textual.events",
        "enum",
        "rich_cli.pager.PagerApp",
        "rich.segment",
        "textual.widgets",
        "rich_cli.pager.PagerRenderable"
    ],
    "textual.events": [
        "textual.events.Unmount",
        "textual.events.DoubleClick",
        "textual.events.Hide",
        "textual.events.Blur",
        "typing",
        "rich.repr",
        "textual.events.Focus",
        "textual.events.Shutdown",
        "textual.events.Load",
        "textual.events.Resize",
        "textual.events.Null",
        "textual.events.Key",
        "textual.events.MouseMove",
        "textual.events.Click",
        "textual.message",
        "textual.events.MouseUp",
        "textual.events.Action",
        "textual.events.MouseRelease",
        "typing.TypeVar.__init__",
        "textual.events.Show",
        "textual.events.ShutdownRequest",
        "rich.style",
        "textual.events.MouseScrollUp",
        "textual.events.MouseCapture",
        "textual.geometry",
        "textual.events.Idle",
        "textual.events.Enter",
        "textual.events.Mount",
        "textual.keys",
        "textual._timer",
        "textual.events.MouseScrollDown",
        "textual.events.Event",
        "textual.events.MouseDown",
        "textual.events.InputEvent",
        "textual.events.Callback",
        "__future__",
        "textual.events.Leave",
        "textual.events.Timer",
        "textual.events.MouseEvent",
        "textual._types"
    ],
    "textual.geometry": [
        "textual.geometry.Size",
        "__future__",
        "textual.geometry.Offset",
        "typing",
        "typing.TypeVar.__init__",
        "textual.geometry.Region",
        "textual.geometry.Spacing"
    ],
    "textual.geometry.Offset": [
        "<builtin>.property"
    ],
    "textual.geometry.Size": [
        "<builtin>.property"
    ],
    "textual.geometry.Region": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "textual.geometry.Spacing": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "textual.message": [
        "textual.message.Message",
        "__future__",
        "asyncio",
        "typing",
        "rich.repr",
        "textual.case",
        "textual._types"
    ],
    "textual.case": [
        "typing",
        "re.compile",
        "textual.case.camel_to_snake",
        "re",
        "<builtin>.print"
    ],
    "textual.case.camel_to_snake": [
        "<str>.lower"
    ],
    "textual._types": [
        "textual.message",
        "typing",
        "textual.events",
        "textual._types.MessageTarget",
        "typing_extensions",
        "rich.segment",
        "textual._types.EventTarget"
    ],
    "textual._types.MessageTarget": [],
    "textual._types.EventTarget": [],
    "textual.message.Message": [
        "<builtin>.property"
    ],
    "textual.keys": [
        "textual.keys.Binding",
        "textual.keys.Keys",
        "enum",
        "dataclasses"
    ],
    "textual.keys.Keys": [],
    "textual.keys.Binding": [],
    "textual._timer": [
        "textual._timer.Timer",
        "__future__",
        "asyncio",
        "typing",
        "textual.events",
        "rich.repr",
        "textual._timer.EventTargetGone",
        "weakref",
        "textual._types"
    ],
    "textual._timer.EventTargetGone": [],
    "textual._timer.Timer": [
        "<builtin>.property"
    ],
    "textual.events.Event": [],
    "textual.events.Null": [],
    "textual.events.Callback": [],
    "textual.events.ShutdownRequest": [],
    "textual.events.Shutdown": [],
    "textual.events.Load": [],
    "textual.events.Idle": [],
    "textual.events.Action": [],
    "textual.events.Resize": [
        "<builtin>.property"
    ],
    "textual.events.Mount": [],
    "textual.events.Unmount": [],
    "textual.events.Show": [],
    "textual.events.Hide": [],
    "textual.events.MouseCapture": [],
    "textual.events.MouseRelease": [],
    "textual.events.InputEvent": [],
    "textual.events.Key": [],
    "textual.events.MouseEvent": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "textual.events.MouseMove": [],
    "textual.events.MouseDown": [],
    "textual.events.MouseUp": [],
    "textual.events.MouseScrollDown": [],
    "textual.events.MouseScrollUp": [],
    "textual.events.Click": [],
    "textual.events.DoubleClick": [],
    "textual.events.Timer": [],
    "textual.events.Enter": [],
    "textual.events.Leave": [],
    "textual.events.Focus": [],
    "textual.events.Blur": [],
    "textual.app": [
        "textual.app.App",
        "textual._animator",
        "rich.measure",
        "textual.layouts.dock",
        "typing",
        "textual.scrollbar",
        "rich.repr",
        "platform.system",
        "textual._callback",
        "textual.driver",
        "rich.console",
        "warnings",
        "textual._profile",
        "rich.control",
        "typing.TypeVar.__init__",
        "textual.views",
        "textual.geometry",
        "warnings.simplefilter",
        "textual.events",
        "logging",
        "textual._event_broker",
        "os",
        "textual.binding",
        "textual.message_pump",
        "textual.widget",
        "rich.panel",
        "rich.traceback",
        "textual.actions",
        "platform",
        "rich.markdown",
        "__future__",
        "asyncio",
        "textual.app.MyApp",
        "textual.app.App.run",
        "textual.view",
        "textual._context",
        "rich.screen",
        "textual.widgets",
        "textual.app.ActionError"
    ],
    "textual.actions": [
        "ast",
        "textual.actions.parse",
        "__future__",
        "typing",
        "re.compile",
        "re",
        "textual.actions.ActionError",
        "<builtin>.print"
    ],
    "textual.actions.ActionError": [],
    "textual.actions.parse": [
        "ast.literal_eval",
        "<builtin>.isinstance",
        "pathlib.PurePath.match"
    ],
    "textual._animator": [
        "textual._animator.Animatable",
        "__future__",
        "asyncio",
        "typing",
        "dataclasses",
        "textual._animator.Animation",
        "textual._animator.Animator",
        "textual._timer",
        "typing.TypeVar.__init__",
        "textual._animator.BoundAnimator",
        "tracemalloc",
        "typing_extensions",
        "textual._types",
        "textual._easing"
    ],
    "textual._easing": [
        "math"
    ],
    "textual._animator.Animatable": [],
    "textual._animator.Animation": [],
    "textual._animator.BoundAnimator": [],
    "textual._animator.Animator": [],
    "textual.binding": [
        "textual.binding.Binding",
        "__future__",
        "dataclasses",
        "textual.binding.NoBinding",
        "textual.binding.Bindings",
        "textual.binding.BindingStack"
    ],
    "textual.binding.NoBinding": [],
    "textual.binding.Binding": [],
    "textual.binding.Bindings": [
        "<builtin>.property"
    ],
    "textual.binding.BindingStack": [],
    "textual._callback": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "typing",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "functools",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "inspect",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "__future__",
        "rich.styled.Styled.__init__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "textual._context": [
        "typing",
        "textual.app",
        "contextvars"
    ],
    "textual._event_broker": [
        "textual._event_broker.HandlerArguments",
        "textual._event_broker.NoHandler",
        "__future__",
        "typing",
        "textual._event_broker.extract_handler_actions",
        "<builtin>.print"
    ],
    "textual._event_broker.NoHandler": [],
    "textual._event_broker.HandlerArguments": [],
    "textual._event_broker.extract_handler_actions": [
        "<map>.items",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "textual.driver": [
        "rich.console",
        "abc",
        "__future__",
        "asyncio",
        "typing",
        "textual.events",
        "textual.driver.Driver",
        "textual._types",
        "platform"
    ],
    "textual.driver.Driver": [
        "abc.abstractmethod"
    ],
    "textual.layouts.dock": [
        "textual.layouts.dock.DockLayout",
        "textual.geometry",
        "rich.console",
        "textual.layout_map",
        "__future__",
        "typing",
        "collections",
        "dataclasses",
        "textual.layout",
        "textual.widget",
        "textual.layouts.dock.DockOptions",
        "textual.layouts.dock.Dock",
        "textual._layout_resolve",
        "typing_extensions"
    ],
    "textual._layout_resolve": [
        "__future__",
        "fractions",
        "typing",
        "textual._layout_resolve.Edge",
        "typing_extensions"
    ],
    "textual._layout_resolve.Edge": [],
    "textual.layout": [
        "abc",
        "typing",
        "textual._lines",
        "dataclasses",
        "rich.repr",
        "operator",
        "textual.layout.WidgetPlacement",
        "rich.segment",
        "textual._loop",
        "textual.layout.LayoutUpdate",
        "rich.console",
        "textual._profile",
        "textual.layout.Layout",
        "rich.control",
        "textual.layout.OrderedRegion",
        "rich.style",
        "textual.geometry",
        "textual.widget",
        "textual.layout.ReflowResult",
        "textual.layout_map",
        "textual.layout.NoWidget",
        "__future__",
        "textual.view",
        "textual._types"
    ],
    "textual._loop": [
        "__future__",
        "typing",
        "typing.TypeVar.__init__"
    ],
    "textual.layout_map": [
        "textual.geometry",
        "rich.console",
        "textual.layout_map.LayoutMap",
        "__future__",
        "typing",
        "textual.layout_map.RenderRegion",
        "textual.widget"
    ],
    "textual.widget": [
        "textual._animator",
        "textual.app",
        "typing",
        "rich.repr",
        "textual.reactive",
        "textual._callback",
        "textual.widget.RenderCache",
        "textual.widget.Widget",
        "rich.console",
        "textual.message",
        "rich.text",
        "rich.pretty",
        "rich.style",
        "logging.getLogger",
        "textual.geometry",
        "textual.events",
        "logging",
        "rich.align",
        "rich.box",
        "textual.message_pump",
        "rich.panel",
        "textual.messages",
        "__future__",
        "rich.styled",
        "textual.view",
        "textual._context",
        "textual._types",
        "rich.padding"
    ],
    "textual.message_pump": [
        "textual.app",
        "textual.message_pump.CallbackError",
        "textual.message",
        "__future__",
        "asyncio",
        "typing",
        "functools",
        "textual.events",
        "textual.message_pump.MessagePumpClosed",
        "textual._timer",
        "textual._callback",
        "textual.message_pump.NoParent",
        "textual._context",
        "weakref",
        "textual.message_pump.MessagePump"
    ],
    "textual.message_pump.NoParent": [],
    "textual.message_pump.CallbackError": [],
    "textual.message_pump.MessagePumpClosed": [],
    "textual.message_pump.MessagePump": [
        "<builtin>.property"
    ],
    "textual.messages": [
        "textual.messages.Update",
        "textual.message",
        "textual.messages.Layout",
        "__future__",
        "typing",
        "rich.repr",
        "textual.messages.CursorMove",
        "textual.message_pump",
        "textual.widget"
    ],
    "textual.messages.Update": [],
    "textual.messages.Layout": [],
    "textual.messages.CursorMove": [],
    "textual.reactive": [
        "textual.app",
        "textual.reactive.Reactive",
        "__future__",
        "typing",
        "textual.events",
        "functools",
        "inspect",
        "typing.TypeVar.__init__",
        "textual._callback",
        "textual.widget",
        "textual._types"
    ],
    "textual.reactive.Reactive": [
        "<builtin>.classmethod"
    ],
    "textual.view": [
        "textual.app",
        "textual.geometry",
        "rich.console",
        "textual.messages",
        "textual.view.View",
        "__future__",
        "typing",
        "textual.events",
        "textual.layout",
        "rich.repr",
        "textual.reactive",
        "textual.widget",
        "rich.style"
    ],
    "textual.view.View": [
        "textual.reactive.Reactive.__init__",
        "<builtin>.property"
    ],
    "textual.reactive.Reactive.__init__": [],
    "textual.widget.RenderCache": [
        "<builtin>.property"
    ],
    "textual.widget.Widget": [
        "textual.reactive.Reactive.__init__",
        "<builtin>.property"
    ],
    "textual.layout_map.RenderRegion": [],
    "textual.layout_map.LayoutMap": [],
    "textual._profile": [
        "typing",
        "contextlib",
        "contextlib.contextmanager"
    ],
    "textual._lines": [
        "rich.segment",
        "__future__",
        "textual._types",
        "textual.geometry"
    ],
    "textual.layout.NoWidget": [],
    "textual.layout.OrderedRegion": [],
    "textual.layout.ReflowResult": [],
    "textual.layout.WidgetPlacement": [],
    "textual.layout.LayoutUpdate": [],
    "textual.layout.Layout": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "textual.layouts.dock.DockOptions": [],
    "textual.layouts.dock.Dock": [],
    "textual.layouts.dock.DockLayout": [],
    "textual.views": [
        "textual.views._dock_view",
        "textual.views._window_view",
        "textual.views._grid_view"
    ],
    "textual.views._dock_view": [
        "textual.layouts.dock",
        "__future__",
        "typing",
        "textual.view",
        "textual.views._dock_view.DockView",
        "textual.views._dock_view.DoNotSet",
        "textual.widget",
        "textual.layouts.grid"
    ],
    "textual.layouts.grid": [
        "typing",
        "textual.layouts.grid.GridArea",
        "dataclasses",
        "operator",
        "<builtin>.print",
        "rich.console",
        "textual.layouts.grid.GridLayout.__init__",
        "textual.layouts.grid.GridLayout.add_row",
        "textual.layouts.grid.GridLayout.add_areas",
        "textual._layout_resolve",
        "logging.getLogger",
        "textual.layouts.grid.GridLayout",
        "textual.layouts.grid.GridLayout.place",
        "textual.geometry",
        "textual.layout",
        "logging",
        "textual.widget",
        "textual.layouts.grid.GridLayout.add_column",
        "textual.layout_map",
        "__future__",
        "textual.widgets._placeholder.Placeholder.__init__",
        "collections",
        "textual.layouts.grid.GridOptions",
        "typing_extensions",
        "textual.widgets",
        "rich"
    ],
    "textual.layouts.grid.GridOptions": [],
    "textual.layouts.grid.GridArea": [],
    "textual.layouts.grid.GridLayout": [
        "<builtin>.classmethod"
    ],
    "textual.layouts.grid.GridLayout.__init__": [
        "<builtin>.super",
        "<builtin>.set",
        "<builtin>.isinstance",
        "textual.layouts.grid.GridLayout.set_gutter",
        "textual.layouts.grid.GridLayout.set_gap",
        "textual.layouts.grid.GridLayout.set_align"
    ],
    "textual.layouts.grid.GridLayout.set_gap": [
        "textual.layout.Layout.require_update"
    ],
    "textual.layout.Layout.require_update": [
        "textual.layout.Layout.reset"
    ],
    "textual.layout.Layout.reset": [],
    "textual.layouts.grid.GridLayout.set_gutter": [
        "textual.layout.Layout.require_update"
    ],
    "textual.layouts.grid.GridLayout.set_align": [
        "textual.layout.Layout.require_update"
    ],
    "textual.layouts.grid.GridLayout.add_column": [
        "textual.layout.Layout.require_update",
        "<builtin>.range"
    ],
    "textual.layouts.grid.GridLayout.add_row": [
        "textual.layout.Layout.require_update",
        "<builtin>.range"
    ],
    "textual.layouts.grid.GridLayout.add_areas": [
        "textual.layout.Layout.require_update",
        "textual.layouts.grid.GridLayout._add_area"
    ],
    "textual.layouts.grid.GridLayout._add_area": [
        "<builtin>.isinstance"
    ],
    "textual.widgets": [
        "textual.widgets._header",
        "textual.widgets._button",
        "textual.widgets._tree_control",
        "textual.widgets._footer",
        "textual.widgets._placeholder",
        "textual.widgets._directory_tree",
        "textual.widgets._scroll_view",
        "textual.widgets._static"
    ],
    "textual.widgets._footer": [
        "rich.console",
        "__future__",
        "rich.text",
        "rich.repr",
        "textual.reactive",
        "textual",
        "textual.widget",
        "textual.widgets._footer.Footer",
        "rich.style"
    ],
    "textual": [
        "typing"
    ],
    "textual.widgets._footer.Footer": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._header": [
        "rich.style",
        "rich.console",
        "datetime",
        "rich.text",
        "rich.repr",
        "logging",
        "textual.reactive",
        "rich.table",
        "textual.widgets._header.Header",
        "textual",
        "textual.widget",
        "rich.panel",
        "logging.getLogger"
    ],
    "textual.widgets._header.Header": [
        "textual.reactive.Reactive.__init__",
        "<builtin>.property"
    ],
    "textual.widgets._button": [
        "textual.widgets._button.Expand",
        "rich.console",
        "textual.widgets._button.Button",
        "textual.message",
        "__future__",
        "textual.widgets._button.ButtonPressed",
        "textual.widgets._button.ButtonRenderable",
        "textual.reactive",
        "rich.align",
        "textual",
        "textual.widget",
        "rich.style"
    ],
    "textual.widgets._button.ButtonPressed": [],
    "textual.widgets._button.Expand": [],
    "textual.widgets._button.ButtonRenderable": [],
    "textual.widgets._button.Button": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._placeholder": [
        "textual.geometry",
        "rich.console",
        "__future__",
        "rich.repr",
        "rich.pretty",
        "logging",
        "rich.align",
        "rich.box",
        "textual",
        "textual.widget",
        "rich.panel",
        "logging.getLogger",
        "textual.widgets._placeholder.Placeholder"
    ],
    "textual.widgets._placeholder.Placeholder": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._scroll_view": [
        "textual.geometry",
        "rich.console",
        "textual.messages",
        "textual.message",
        "__future__",
        "textual.scrollbar",
        "textual.widgets._scroll_view.ScrollView",
        "textual.reactive",
        "textual.view",
        "textual",
        "textual.widget",
        "textual.layouts.grid",
        "rich.style"
    ],
    "textual.scrollbar": [
        "rich.console.Console.__init__",
        "rich.repr",
        "textual.scrollbar.ScrollBar",
        "textual.scrollbar.ScrollRight",
        "textual.scrollbar.ScrollUp",
        "rich.segment",
        "textual.scrollbar.ScrollBarRender.__init__",
        "rich.console",
        "textual.message",
        "textual.scrollbar.ScrollBarRender",
        "rich.console.Console.print",
        "rich.style",
        "textual.geometry",
        "textual.events",
        "textual.widget",
        "textual.scrollbar.ScrollTo",
        "textual.scrollbar.ScrollDown",
        "__future__",
        "rich.color",
        "textual._types",
        "textual.scrollbar.ScrollLeft"
    ],
    "textual.scrollbar.ScrollUp": [],
    "textual.scrollbar.ScrollDown": [],
    "textual.scrollbar.ScrollLeft": [],
    "textual.scrollbar.ScrollRight": [],
    "textual.scrollbar.ScrollTo": [],
    "textual.scrollbar.ScrollBarRender": [
        "<builtin>.classmethod",
        "rich.color.Color.parse"
    ],
    "textual.scrollbar.ScrollBar": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.scrollbar.ScrollBarRender.__init__": [],
    "textual.widgets._scroll_view.ScrollView": [
        "textual.reactive.Reactive.__init__",
        "<builtin>.property"
    ],
    "textual.widgets._static": [
        "rich.console",
        "__future__",
        "rich.styled",
        "textual.widgets._static.Static",
        "textual.widget",
        "rich.style",
        "rich.padding"
    ],
    "textual.widgets._static.Static": [],
    "textual.widgets._tree_control": [
        "textual.app",
        "typing",
        "rich.repr",
        "textual.reactive",
        "textual",
        "textual.widgets._tree_control.TreeApp",
        "rich.console",
        "textual.message",
        "rich.text",
        "textual.widgets._tree_control.TreeNode",
        "typing.TypeVar.__init__",
        "textual.events",
        "typing.NewType",
        "rich.tree",
        "textual.widget",
        "textual.widgets._tree_control.TreeControl",
        "textual.messages",
        "__future__",
        "textual.app.App.run",
        "textual._types",
        "textual.widgets._tree_control.TreeClick",
        "rich.padding"
    ],
    "rich.tree": [
        "rich.console.Group.__init__",
        "rich.measure",
        "rich.markdown.Markdown.__init__",
        "rich.console.Console.__init__",
        "typing",
        "rich.table",
        "rich.segment",
        "rich.tree.Tree.add",
        "rich.console",
        "rich.panel.Panel.__init__",
        "rich.console.Console.print",
        "rich.tree.Tree.__init__",
        "rich.style",
        "rich.table.Table.__init__",
        "rich.panel.Panel.fit",
        "rich._loop",
        "rich.tree.Tree",
        "rich.syntax",
        "rich.panel",
        "rich.markdown",
        "rich.table.Table.add_column",
        "rich.styled",
        "rich.table.Table.add_row",
        "rich.syntax.Syntax.__init__",
        "rich.jupyter"
    ],
    "rich.tree.Tree": [],
    "rich.tree.Tree.__init__": [],
    "rich.tree.Tree.add": [
        "rich.tree.Tree.__init__"
    ],
    "typing.NewType": [],
    "textual.widgets._tree_control.TreeNode": [
        "<builtin>.property"
    ],
    "textual.widgets._tree_control.TreeClick": [],
    "textual.widgets._tree_control.TreeControl": [
        "textual.reactive.Reactive.__init__",
        "typing.NewType.new_type"
    ],
    "typing.NewType.new_type": [],
    "textual.widgets._tree_control.TreeApp": [],
    "textual.widgets._directory_tree": [
        "textual.app",
        "textual.widgets._directory_tree.DirectoryTree",
        "dataclasses",
        "rich.repr",
        "textual.reactive",
        "textual.widgets._directory_tree.FileClick",
        "posixpath",
        "textual",
        "rich.console",
        "textual.message",
        "rich.text",
        "functools",
        "textual.widgets._directory_tree.TreeApp",
        "textual.events",
        "os",
        "__future__",
        "textual.app.App.run",
        "textual._types",
        "textual.widgets._directory_tree.DirEntry"
    ],
    "textual.widgets._directory_tree.DirEntry": [],
    "textual.widgets._directory_tree.FileClick": [],
    "textual.widgets._directory_tree.DirectoryTree": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "functools.lru_cache",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "functools.lru_cache.decorating_function",
        "rich.table.Table.__init__",
        "textual.reactive.Reactive.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "textual.widgets._directory_tree.TreeApp": [],
    "textual.widgets._placeholder.Placeholder.__init__": [
        "<builtin>.super"
    ],
    "textual.layouts.grid.GridLayout.place": [
        "textual.layout.Layout.require_update"
    ],
    "textual.views._dock_view.DoNotSet": [],
    "textual.views._dock_view.DockView": [],
    "textual.views._grid_view": [
        "textual.layouts.grid",
        "textual.view",
        "textual.views._grid_view.GridView"
    ],
    "textual.views._grid_view.GridView": [
        "<builtin>.property"
    ],
    "textual.views._window_view": [
        "textual.views._window_view.WindowView",
        "textual.geometry",
        "rich.console",
        "textual.message",
        "textual.views._window_view.WindowChange",
        "__future__",
        "textual.view",
        "textual",
        "textual.widget",
        "textual.widgets",
        "textual.layouts.vertical"
    ],
    "textual.layouts.vertical": [
        "textual.geometry",
        "__future__",
        "typing",
        "textual.layout",
        "textual.widget",
        "textual.layouts.vertical.VerticalLayout",
        "textual._loop"
    ],
    "textual.layouts.vertical.VerticalLayout": [],
    "textual.views._window_view.WindowChange": [],
    "textual.views._window_view.WindowView": [],
    "textual.app.ActionError": [],
    "textual.app.App": [
        "textual.reactive.Reactive.__init__",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "textual.app.MyApp": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.app.App.run": [
        "asyncio.runners.run",
        "textual.app.App.run.run_app"
    ],
    "textual.app.App.run.run_app": [
        "textual.app.App.__init__",
        "rich_cli.pager.PagerApp.__init__",
        "textual.app.App.process_messages"
    ],
    "textual.app.App.__init__": [
        "<builtin>.super",
        "textual._animator.Animator.__init__",
        "<builtin>.set",
        "rich.console.Console.__init__",
        "textual.layouts.dock.DockLayout.__init__",
        "textual.binding.Bindings.__init__",
        "textual.app.App.get_driver_class",
        "<builtin>.open",
        "textual.binding.Bindings.bind",
        "textual._animator.Animator.bind"
    ],
    "textual.app.App.get_driver_class": [
        "textual.drivers.windows_driver",
        "textual.drivers.linux_driver"
    ],
    "textual.drivers.linux_driver": [
        "textual.app",
        "rich.console.Console.__init__",
        "typing",
        "textual.drivers.linux_driver.MyApp",
        "codecs",
        "textual",
        "textual.driver",
        "tty",
        "threading",
        "rich.console",
        "textual._profile",
        "signal",
        "textual.geometry",
        "os",
        "selectors",
        "textual._xterm_parser",
        "termios",
        "__future__",
        "asyncio",
        "textual.app.App.run",
        "textual.drivers.linux_driver.LinuxDriver",
        "textual._types"
    ],
    "textual._xterm_parser": [
        "__future__",
        "typing",
        "textual.events",
        "re.escape",
        "textual._parser",
        "re.compile",
        "codecs.StreamRecoder.read",
        "os",
        "re",
        "<builtin>.print",
        "textual._types",
        "textual._xterm_parser.XTermParser",
        "textual._xterm_parser.XTermParser.__init__",
        "textual._ansi_sequences"
    ],
    "textual._parser": [
        "textual._parser.Parser",
        "<builtin>.range",
        "textual._parser.TestParser",
        "__future__",
        "typing",
        "collections",
        "textual._parser._Read",
        "textual._parser._ReadUntil",
        "textual._parser.ParseError",
        "textual._parser.Awaitable",
        "textual._parser._Read1",
        "textual._parser.ParseEOF",
        "textual._parser.PeekBuffer",
        "typing.TypeVar.__init__",
        "<builtin>.len",
        "<builtin>.print",
        "io"
    ],
    "textual._parser.ParseError": [],
    "textual._parser.ParseEOF": [],
    "textual._parser.Awaitable": [],
    "textual._parser._Read": [],
    "textual._parser._Read1": [],
    "textual._parser._ReadUntil": [],
    "textual._parser.PeekBuffer": [],
    "textual._parser.Parser": [
        "<builtin>.property"
    ],
    "textual._parser.TestParser": [],
    "textual._ansi_sequences": [
        "typing",
        "textual.keys"
    ],
    "textual._xterm_parser.XTermParser": [
        "re.compile"
    ],
    "textual._xterm_parser.XTermParser.__init__": [
        "<builtin>.super"
    ],
    "textual.drivers.linux_driver.LinuxDriver": [
        "<builtin>.classmethod"
    ],
    "textual.drivers.linux_driver.MyApp": [],
    "textual.drivers.windows_driver": [
        "textual.drivers.win32",
        "threading",
        "rich.console",
        "__future__",
        "asyncio",
        "typing",
        "textual.drivers.windows_driver.WindowsDriver",
        "textual._context",
        "textual._types",
        "textual.driver"
    ],
    "textual.drivers.win32": [
        "ctypes.wintypes",
        "textual.drivers.win32.MOUSE_EVENT_RECORD",
        "typing",
        "textual.drivers.win32.KEY_EVENT_RECORD",
        "threading",
        "textual.drivers.win32.WINDOW_BUFFER_SIZE_RECORD",
        "textual.drivers.win32.uChar",
        "textual.drivers.win32.FOCUS_EVENT_RECORD",
        "textual.drivers.win32.InputEvent",
        "textual.geometry",
        "textual.drivers.win32.MENU_EVENT_RECORD",
        "textual.events",
        "textual.drivers.win32.INPUT_RECORD",
        "textual._xterm_parser",
        "textual.drivers.win32.COORD",
        "asyncio",
        "textual.drivers.win32.EventMonitor",
        "textual._types",
        "ctypes"
    ],
    "textual.drivers.win32.COORD": [],
    "textual.drivers.win32.uChar": [],
    "textual.drivers.win32.KEY_EVENT_RECORD": [],
    "textual.drivers.win32.MOUSE_EVENT_RECORD": [],
    "textual.drivers.win32.WINDOW_BUFFER_SIZE_RECORD": [],
    "textual.drivers.win32.MENU_EVENT_RECORD": [],
    "textual.drivers.win32.FOCUS_EVENT_RECORD": [],
    "textual.drivers.win32.InputEvent": [],
    "textual.drivers.win32.INPUT_RECORD": [],
    "textual.drivers.win32.EventMonitor": [],
    "textual.drivers.windows_driver.WindowsDriver": [],
    "textual.layouts.dock.DockLayout.__init__": [
        "<builtin>.super"
    ],
    "textual._animator.Animator.__init__": [
        "textual._timer.Timer.__init__"
    ],
    "textual._timer.Timer.__init__": [
        "asyncio.locks.Event.__init__",
        "<builtin>.repr",
        "_weakref.ref",
        "asyncio.locks.Event.set"
    ],
    "asyncio.locks.Event.__init__": [
        "asyncio.events.get_event_loop",
        "warnings.warn",
        "_collections.deque"
    ],
    "asyncio.events.get_event_loop": [
        "asyncio.events._get_running_loop",
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.events._get_running_loop": [],
    "asyncio.events.get_event_loop_policy": [
        "asyncio.events._init_event_loop_policy"
    ],
    "asyncio.events._init_event_loop_policy": [],
    "textual._animator.Animator.bind": [
        "textual._animator.BoundAnimator.__init__"
    ],
    "textual._animator.BoundAnimator.__init__": [],
    "textual.binding.Bindings.__init__": [],
    "textual.binding.Bindings.bind": [],
    "textual.app.App.process_messages": [
        "textual.views._dock_view.DockView.__init__",
        "textual.message_pump.MessagePump.post_message",
        "textual.message.Message.wait",
        "textual.message_pump.MessagePump.dispatch_message",
        "textual.app.App.push_view",
        "textual.app.App.log",
        "rich.console.Console.print_exception"
    ],
    "textual.app.App.log": [
        "<builtin>.str"
    ],
    "textual.message_pump.MessagePump.dispatch_message": [
        "textual.app.App.on_event",
        "textual.message_pump.MessagePump.on_message",
        "<builtin>.isinstance",
        "textual.message_pump.MessagePump.on_event"
    ],
    "textual.message_pump.MessagePump.on_message": [
        "textual.message_pump.MessagePump.post_message",
        "textual._callback.invoke",
        "textual.message_pump.MessagePump.log",
        "<builtin>.getattr",
        "textual.message.Message.stop"
    ],
    "textual.message_pump.MessagePump.log": [],
    "textual._callback.invoke": [
        "textual._callback.count_parameters",
        "inspect.isawaitable"
    ],
    "textual._callback.count_parameters": [
        "inspect.signature",
        "<builtin>.len"
    ],
    "inspect.isawaitable": [
        "<builtin>.bool",
        "<builtin>.isinstance"
    ],
    "textual.message.Message.stop": [],
    "textual.app.App.on_event": [
        "<builtin>.super",
        "<builtin>.isinstance",
        "textual.binding.Bindings.allow_forward"
    ],
    "textual.binding.Bindings.allow_forward": [],
    "textual.message_pump.MessagePump.on_event": [
        "textual.message_pump.MessagePump.post_message",
        "textual._callback.invoke",
        "textual.message_pump.MessagePump._get_dispatch_methods",
        "textual.message_pump.MessagePump.log",
        "textual.message.Message.stop"
    ],
    "textual.message_pump.MessagePump._get_dispatch_methods": [],
    "textual.message_pump.MessagePump.post_message": [
        "textual.message_pump.MessagePump.check_message_enabled"
    ],
    "textual.message_pump.MessagePump.check_message_enabled": [
        "<builtin>.type"
    ],
    "textual.views._dock_view.DockView.__init__": [
        "textual.layouts.dock.DockLayout.__init__",
        "<builtin>.super"
    ],
    "textual.app.App.push_view": [
        "textual.app.App.register"
    ],
    "textual.app.App.register": [
        "textual.message_pump.MessagePump.start_messages",
        "textual.message_pump.MessagePump.post_message_no_wait",
        "textual.message_pump.MessagePump.set_parent"
    ],
    "textual.message.Message.wait": [],
    "asyncio.runners.run": [
        "asyncio.events._get_running_loop",
        "asyncio.coroutines.iscoroutine",
        "asyncio.events.new_event_loop",
        "<builtin>.RuntimeError",
        "<builtin>.ValueError",
        "asyncio.events.set_event_loop"
    ],
    "asyncio.coroutines.iscoroutine": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "asyncio.events.new_event_loop": [
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.events.set_event_loop": [
        "asyncio.events.get_event_loop_policy"
    ],
    "rich_cli.pager.PagerRenderable": [],
    "rich_cli.pager.PagerApp": [],
    "rich.console.Console.render_lines": [],
    "rich_cli.pager.PagerRenderable.__init__": [
        "<builtin>.list"
    ],
    "rich.console.Console.save_html": [
        "rich.console.Console.export_html",
        "<builtin>.open"
    ],
    "rich.console.Console.export_html": [],
    "rich.console.Console.save_svg": [
        "rich.console.Console.export_svg",
        "<builtin>.open"
    ],
    "rich.console.Console.export_svg": [
        "rich.style.Style.__init__",
        "rich.console.Console.export_svg.make_tag",
        "<builtin>.len",
        "rich.console.Console.export_svg.escape_text",
        "<builtin>.enumerate",
        "rich.segment.Segment.split_and_crop_lines",
        "rich.console.Console.export_svg.get_svg_style",
        "rich.cells",
        "rich.cells.cell_len",
        "<builtin>.str",
        "<builtin>.repr",
        "<builtin>.range"
    ],
    "rich.segment.Segment.split_and_crop_lines": [
        "rich.segment.Segment.adjust_line_length",
        "<str>.partition",
        "<list>.append"
    ],
    "rich.segment.Segment.adjust_line_length": [
        "<builtin>.sum",
        "rich.cells.set_cell_size",
        "<list>"
    ],
    "rich.console.Console.export_svg.get_svg_style": [
        "rich.color.blend_rgb",
        "<list>.append"
    ],
    "rich.color.blend_rgb": [
        "<builtin>.int"
    ],
    "rich.console.Console.export_svg.make_tag": [
        "rich.console.Console.export_svg.make_tag.stringify"
    ],
    "rich.console.Console.export_svg.make_tag.stringify": [
        "<builtin>.format",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<builtin>.format": [],
    "rich.console.Console.export_svg.escape_text": [
        "html.escape",
        "<str>.replace"
    ],
    "html.escape": [
        "<str>.replace"
    ],
    "rich_cli.win_vt": [
        "ctypes.wintypes",
        "ctypes",
        "contextlib.contextmanager",
        "platform.system",
        "contextlib",
        "platform"
    ],
    "rich_cli.__main__.ForceWidth.__rich_measure__": [
        "rich.measure"
    ],
    "rich_cli.__main__.blend_text": [
        "<builtin>.int",
        "rich.text.Text.__init__",
        "<builtin>.len",
        "rich.text.Text.stylize",
        "<builtin>.range"
    ],
    "rich_cli.__main__.RichCommand.format_help": [
        "rich.theme.Theme.__init__",
        "rich.text.Text.from_markup",
        "rich.console.Console.__init__",
        "rich.table",
        "rich_cli.__main__.blend_text",
        "rich.panel.Panel.__init__",
        "rich.console.Console.print",
        "rich.text.Text.__init__",
        "rich.table.Table.__init__",
        "rich.theme",
        "click.core.Command.get_params",
        "rich.color.Color.parse",
        "rich.panel",
        "rich.highlighter",
        "<builtin>.reversed",
        "rich_cli.__main__.RichCommand.format_help.OptionHighlighter",
        "rich.table.Table.add_row",
        "rich.color",
        "<builtin>.len"
    ],
    "rich_cli.__main__.RichCommand.format_help.OptionHighlighter": [],
    "click.core.Command.get_params": [
        "click.core.Command.get_help_option"
    ],
    "click.core.Command.get_help_option": [
        "click.core.Command.get_help_option_names",
        "click.core.Option.__init__",
        "gettext.gettext"
    ],
    "click.core.Command.get_help_option_names": [
        "<builtin>.list",
        "<builtin>.set"
    ],
    "click.core.Option.__init__": [
        "click.types.convert_type",
        "<builtin>.super",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "inspect.cleandoc",
        "<builtin>.bool"
    ],
    "click.types.convert_type": [
        "click.types.Tuple.__init__",
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.AssertionError",
        "<builtin>.map",
        "click.types.FuncParamType.__init__"
    ],
    "click.types.Tuple.__init__": [
        "click.types.convert_type"
    ],
    "<builtin>.AssertionError": [],
    "click.types.FuncParamType.__init__": [],
    "operator.abs": [
        "builtins.abs"
    ],
    "builtins.abs": [],
    "operator.concat": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "operator.indexOf": [
        "<builtin>.enumerate"
    ],
    "operator.length_hint": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "operator.attrgetter.__call__": [
        "operator.attrgetter.__init__.func"
    ],
    "operator.attrgetter.__init__.func": [
        "<builtin>.tuple"
    ],
    "operator.attrgetter.__repr__": [
        "<builtin>.map"
    ],
    "operator.itemgetter.__call__": [
        "operator.itemgetter.__init__.func"
    ],
    "operator.itemgetter.__init__.func": [
        "<builtin>.tuple"
    ],
    "operator.itemgetter.__repr__": [
        "<builtin>.map"
    ],
    "operator.methodcaller.__call__": [
        "<builtin>.getattr"
    ],
    "operator.methodcaller.__repr__": [
        "<list>.extend"
    ],
    "operator.methodcaller.__reduce__": [
        "functools"
    ],
    "operator.iconcat": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "typing._type_repr": [
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "typing._subs_tvars": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "typing._subs_tvars",
        "typing_extensions._AnnotatedAlias.copy_with",
        "typing._GenericAlias.copy_with"
    ],
    "typing._check_generic": [
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "typing._remove_dups_flatten": [
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.len",
        "<list>.extend",
        "<builtin>.tuple",
        "<list>.append"
    ],
    "typing._eval_type": [
        "<builtin>.tuple",
        "typing.ForwardRef._evaluate",
        "<builtin>.isinstance",
        "typing._eval_type"
    ],
    "typing._Final.__init_subclass__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__new__": [
        "<builtin>.TypeError",
        "<builtin>.super",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "typing._SpecialForm.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing._SpecialForm.__hash__": [
        "<builtin>.hash"
    ],
    "typing._SpecialForm.__call__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__instancecheck__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__subclasscheck__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__getitem__": [
        "<builtin>.isinstance",
        "typing._type_check",
        "typing._GenericAlias.__init__",
        "<builtin>.TypeError",
        "typing._remove_dups_flatten",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "typing._tp_cache.inner": [
        "rich.console.Group.__init__",
        "pathlib._WildcardSelector.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.rule.Rule.__init__",
        "rich.markdown.Markdown.__init__",
        "typing._GenericAlias.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "typing_extensions.Protocol.__class_getitem__",
        "<list>",
        "typing._GenericAlias.__getitem__",
        "pathlib._RecursiveWildcardSelector.__init__",
        "rich.console.ScreenUpdate.__init__",
        "typing_extensions._ConcatenateGenericAlias.__init__",
        "rich.panel.Panel._subtitle",
        "rich.constrain.Constrain.__init__",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "typing_extensions._SpecialForm.__getitem__",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "typing_extensions._concatenate_getitem",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "rich.table.Table.__init__",
        "pathlib.PurePath.match",
        "functools.singledispatchmethod.__get__._method",
        "typing_extensions._AnnotatedAlias.__init__",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "codecs.StreamRecoder.__init__",
        "rich._inspect.Inspect.__init__",
        "pathlib._PreciseSelector.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "typing_extensions.Annotated.__class_getitem__",
        "functools.singledispatch.wrapper",
        "rich_rst.RestructuredText.__init__",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.style.Style.__init__",
        "<map>",
        "rich.file_proxy.FileProxy.__init__",
        "rich.styled.Styled.__init__",
        "typing.Generic.__class_getitem__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "typing._SpecialForm.__getitem__",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "functools.singledispatch.wrapper": [
        "<builtin>.TypeError",
        "functools.singledispatch.dispatch",
        "<map>"
    ],
    "functools.singledispatch.dispatch": [
        "_abc.get_cache_token",
        "functools._find_impl",
        "_py_abc.get_cache_token"
    ],
    "_abc.get_cache_token": [],
    "_py_abc.get_cache_token": [],
    "functools._find_impl": [
        "<map>.keys",
        "<builtin>.issubclass",
        "functools._compose_mro",
        "<map>.get",
        "<builtin>.RuntimeError"
    ],
    "functools._compose_mro": [
        "<builtin>.set",
        "functools._compose_mro.is_strict_base",
        "functools._compose_mro.is_related",
        "<builtin>.issubclass",
        "functools._c3_mro",
        "<list>.append",
        "<list>.sort"
    ],
    "functools._compose_mro.is_related": [
        "<builtin>.issubclass",
        "<builtin>.hasattr"
    ],
    "functools._compose_mro.is_strict_base": [],
    "functools._c3_mro": [
        "<list>.append",
        "functools._c3_merge",
        "<builtin>.reversed",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.issubclass",
        "<builtin>.any",
        "functools._c3_mro",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<list>.remove"
    ],
    "functools._c3_merge": [
        "<builtin>.RuntimeError",
        "<list>.append"
    ],
    "typing._GenericAlias.__getitem__": [
        "typing._check_generic",
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "typing._subs_tvars"
    ],
    "typing._GenericAlias.copy_with": [
        "typing._GenericAlias.__init__"
    ],
    "typing_extensions.Annotated.__class_getitem__": [
        "typing_extensions._AnnotatedAlias.__init__",
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.len",
        "typing_extensions.get_origin"
    ],
    "typing_extensions.get_origin": [
        "<builtin>.isinstance"
    ],
    "typing_extensions._AnnotatedAlias.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "typing_extensions._concatenate_getitem": [
        "typing_extensions._ConcatenateGenericAlias.__init__",
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.TypeError",
        "<builtin>.tuple"
    ],
    "typing_extensions._ConcatenateGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing.Generic.__class_getitem__": [
        "typing._check_generic",
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.set",
        "<builtin>.TypeError",
        "typing._GenericAlias.__init__",
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.all"
    ],
    "typing_extensions._SpecialForm.__getitem__": [
        "typing_extensions.Self",
        "typing_extensions.LiteralString",
        "typing_extensions.Never"
    ],
    "typing_extensions.Self": [
        "<builtin>.TypeError"
    ],
    "typing_extensions.LiteralString": [
        "<builtin>.TypeError"
    ],
    "typing_extensions.Never": [
        "<builtin>.TypeError"
    ],
    "typing._VariadicGenericAlias.__getitem_inner__": [
        "<builtin>.super",
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.tuple",
        "<builtin>.len",
        "typing._GenericAlias.copy_with"
    ],
    "typing_extensions.Protocol.__class_getitem__": [
        "<builtin>.isinstance",
        "<builtin>.set",
        "typing._type_check",
        "<builtin>.TypeError",
        "typing._GenericAlias.__init__",
        "<builtin>.tuple",
        "<builtin>.len",
        "typing_extensions._check_generic",
        "<builtin>.all"
    ],
    "typing_extensions._check_generic": [
        "<builtin>.sum",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len",
        "typing_extensions._is_unpack",
        "<builtin>.hasattr"
    ],
    "typing_extensions._is_unpack": [
        "<builtin>.isinstance"
    ],
    "typing.ForwardRef._evaluate": [
        "<builtin>.eval",
        "typing._type_check"
    ],
    "typing.ForwardRef.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing.ForwardRef.__hash__": [
        "<builtin>.hash"
    ],
    "typing._GenericAlias.__repr__": [
        "typing._type_repr",
        "<builtin>.len"
    ],
    "typing._GenericAlias.__eq__": [
        "<builtin>.frozenset",
        "<builtin>.isinstance"
    ],
    "typing._GenericAlias.__hash__": [
        "<builtin>.frozenset",
        "<builtin>.hash"
    ],
    "typing._GenericAlias.__call__": [
        "collections.Counter.__init__",
        "<builtin>.TypeError",
        "_collections.defaultdict",
        "typing.TypeVar.__init__",
        "typing_extensions.Protocol.__init__",
        "collections.ChainMap.__init__",
        "typing._SpecialForm.__init__",
        "_collections.deque",
        "collections.OrderedDict.__init__"
    ],
    "collections.ChainMap.__init__": [
        "<builtin>.list"
    ],
    "typing._GenericAlias.__mro_entries__": [
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.tuple",
        "<builtin>.any",
        "<list>.append"
    ],
    "typing._GenericAlias.__getattr__": [
        "<builtin>.AttributeError",
        "typing._is_dunder",
        "<builtin>.getattr"
    ],
    "typing._is_dunder": [],
    "typing._GenericAlias.__setattr__": [
        "<builtin>.super",
        "typing._is_dunder",
        "<builtin>.setattr"
    ],
    "typing._GenericAlias.__instancecheck__": [
        "<builtin>.type",
        "typing._GenericAlias.__subclasscheck__"
    ],
    "typing._GenericAlias.__subclasscheck__": [
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "typing._GenericAlias.__reduce__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.globals",
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "typing._VariadicGenericAlias.__getitem__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.len",
        "typing._VariadicGenericAlias.__getitem_inner__"
    ],
    "typing.Generic.__new__": [
        "<builtin>.TypeError",
        "<builtin>.super"
    ],
    "typing.Generic.__init_subclass__": [
        "<builtin>.super",
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "typing._collect_type_vars",
        "<builtin>.tuple",
        "<builtin>.str"
    ],
    "typing._get_protocol_attrs": [
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "typing._is_callable_members_only": [
        "<builtin>.callable",
        "typing._get_protocol_attrs",
        "<builtin>.getattr",
        "<builtin>.all"
    ],
    "typing._no_init": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "typing._ProtocolMeta.__instancecheck__": [
        "typing._is_callable_members_only",
        "typing._get_protocol_attrs",
        "<builtin>.super",
        "<builtin>.issubclass",
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.all"
    ],
    "typing.Protocol.__init_subclass__": [
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "<builtin>.super",
        "<builtin>.any"
    ],
    "typing.runtime_checkable": [
        "<builtin>.issubclass",
        "<builtin>.TypeError"
    ],
    "typing._get_defaults": [
        "<builtin>.dict",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "typing.get_type_hints": [
        "<builtin>.dict",
        "<builtin>.reversed",
        "<map>.items",
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "typing._eval_type",
        "typing._get_defaults",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "typing.get_origin": [
        "<builtin>.isinstance"
    ],
    "typing.get_args": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "typing.get_origin"
    ],
    "typing.no_type_check": [
        "typing.no_type_check",
        "<builtin>.isinstance"
    ],
    "typing.no_type_check_decorator": [
        "functools.wraps"
    ],
    "typing._overload_dummy": [
        "<builtin>.NotImplementedError"
    ],
    "typing._make_nmtuple": [
        "<builtin>.dict",
        "collections.namedtuple",
        "typing._type_check"
    ],
    "typing.NamedTupleMeta.__new__": [
        "<builtin>.dict",
        "<builtin>.super",
        "typing._make_nmtuple",
        "<map>.keys",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.AttributeError",
        "<builtin>.setattr",
        "<list>.append"
    ],
    "typing.NamedTuple.__new__": [
        "typing._make_nmtuple",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len",
        "warnings.warn"
    ],
    "typing._dict_new": [
        "<builtin>.dict"
    ],
    "typing._typeddict_new": [
        "<builtin>.dict",
        "<builtin>.TypeError"
    ],
    "typing._check_fails": [
        "<builtin>.TypeError"
    ],
    "typing._TypedDictMeta.__new__": [
        "<builtin>.super",
        "<builtin>.hasattr",
        "typing._type_check"
    ],
    "abc.abstractclassmethod.__init__": [
        "<builtin>.super"
    ],
    "abc.abstractstaticmethod.__init__": [
        "<builtin>.super"
    ],
    "_py_abc.ABCMeta.__new__": [
        "_weakrefset.WeakSet.__init__",
        "<builtin>.super",
        "<builtin>.set",
        "<builtin>.getattr",
        "<builtin>.frozenset"
    ],
    "_py_abc.ABCMeta.register": [
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "<builtin>.RuntimeError",
        "<builtin>.isinstance"
    ],
    "_py_abc.ABCMeta._dump_registry": [
        "<builtin>.set",
        "<builtin>.isinstance",
        "_py_abc.get_cache_token",
        "<builtin>.getattr",
        "<builtin>.print"
    ],
    "_py_abc.ABCMeta.__instancecheck__": [
        "<builtin>.any",
        "<builtin>.type",
        "_py_abc.ABCMeta.__subclasscheck__"
    ],
    "_py_abc.ABCMeta.__subclasscheck__": [
        "_weakrefset.WeakSet.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "_weakrefset.WeakSet.add",
        "<builtin>.issubclass",
        "<builtin>.getattr"
    ],
    "_weakrefset._IterationGuard.__init__": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__iter__": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "_weakrefset.WeakSet.__len__": [
        "<builtin>.len"
    ],
    "_weakrefset.WeakSet.__contains__": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__reduce__": [
        "<builtin>.list",
        "<builtin>.getattr"
    ],
    "_weakrefset.WeakSet.clear": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.pop": [
        "_weakrefset.WeakSet._commit_removals",
        "<builtin>.KeyError"
    ],
    "_weakrefset.WeakSet.remove": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.discard": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__ior__": [
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.difference": [
        "_weakrefset.WeakSet.copy"
    ],
    "_weakrefset.WeakSet.copy": [],
    "_weakrefset.WeakSet.difference_update": [
        "_weakrefset.WeakSet.__isub__"
    ],
    "_weakrefset.WeakSet.__isub__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.intersection_update": [
        "_weakrefset.WeakSet.__iand__"
    ],
    "_weakrefset.WeakSet.__iand__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.issubset": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__lt__": [
        "<builtin>.set",
        "<builtin>.map"
    ],
    "_weakrefset.WeakSet.issuperset": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__gt__": [
        "<builtin>.set",
        "<builtin>.map"
    ],
    "_weakrefset.WeakSet.__eq__": [
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "_weakrefset.WeakSet.symmetric_difference": [
        "_weakrefset.WeakSet.copy"
    ],
    "_weakrefset.WeakSet.symmetric_difference_update": [
        "_weakrefset.WeakSet.__ixor__"
    ],
    "_weakrefset.WeakSet.__ixor__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.isdisjoint": [
        "_weakrefset.WeakSet.intersection",
        "<builtin>.len"
    ],
    "_weakrefset.WeakSet.intersection": [],
    "_weakrefset.WeakSet.__repr__": [
        "<builtin>.repr"
    ],
    "collections.__getattr__": [
        "warnings",
        "<builtin>.globals",
        "<builtin>.AttributeError",
        "<builtin>.getattr",
        "warnings.warn"
    ],
    "collections._OrderedDictKeysView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._OrderedDictItemsView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._OrderedDictValuesView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections.OrderedDict.__setitem__": [
        "_weakref.proxy"
    ],
    "collections.OrderedDict.__delitem__": [
        "<map>.pop"
    ],
    "<map>.pop": [],
    "collections.OrderedDict.clear": [
        "<map>.clear"
    ],
    "collections.OrderedDict.popitem": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.__sizeof__": [
        "<builtin>.len"
    ],
    "collections.OrderedDict.__repr__": [
        "<builtin>.list",
        "collections.OrderedDict.items"
    ],
    "collections.OrderedDict.items": [],
    "collections.OrderedDict.__reduce__": [
        "<builtin>.vars",
        "<builtin>.iter",
        "collections.OrderedDict.items",
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.fromkeys": [
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.__eq__": [
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "collections.Counter.most_common": [
        "heapq.nlargest",
        "operator.itemgetter.__init__",
        "<builtin>.sorted"
    ],
    "heapq.nlargest": [
        "heapq.heapify",
        "<builtin>.iter",
        "<builtin>.zip",
        "<builtin>.object",
        "operator.itemgetter.__init__",
        "heapq.heapreplace",
        "<builtin>.len",
        "<builtin>.max",
        "<builtin>.range"
    ],
    "heapq.heapify": [
        "heapq._siftup",
        "<builtin>.reversed",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "heapq._siftup": [
        "heapq._siftdown",
        "<builtin>.len"
    ],
    "heapq._siftdown": [],
    "heapq.heapreplace": [
        "heapq._siftup"
    ],
    "collections.Counter.elements": [
        "itertools.starmap"
    ],
    "itertools.starmap": [],
    "collections.Counter.fromkeys": [
        "<builtin>.NotImplementedError"
    ],
    "collections.Counter.subtract": [
        "collections.Counter.subtract",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__reduce__": [
        "<builtin>.dict"
    ],
    "collections.Counter.__delitem__": [
        "<builtin>.super"
    ],
    "collections.Counter.__repr__": [
        "<builtin>.dict",
        "collections.Counter.most_common",
        "<builtin>.map"
    ],
    "collections.Counter.__add__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__sub__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__or__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__and__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__pos__": [
        "collections.Counter.__init__"
    ],
    "collections.Counter.__neg__": [
        "collections.Counter.__init__"
    ],
    "collections.Counter.__iadd__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter._keep_positive": [],
    "collections.Counter.__isub__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__ior__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__iand__": [
        "collections.Counter._keep_positive"
    ],
    "collections.ChainMap.__missing__": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.__getitem__": [
        "collections.ChainMap.__missing__"
    ],
    "collections.ChainMap.__len__": [
        "<builtin>.set",
        "<builtin>.len"
    ],
    "collections.ChainMap.__iter__": [
        "<map>.update",
        "<builtin>.reversed",
        "<builtin>.iter"
    ],
    "collections.ChainMap.__contains__": [
        "<builtin>.any"
    ],
    "collections.ChainMap.__bool__": [
        "<builtin>.any"
    ],
    "collections.ChainMap.__repr__": [
        "<builtin>.map"
    ],
    "collections.ChainMap.fromkeys": [
        "collections.ChainMap.__init__"
    ],
    "collections.ChainMap.__delitem__": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.popitem": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.pop": [
        "<builtin>.KeyError"
    ],
    "collections.UserDict.__init__": [
        "warnings",
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.len"
    ],
    "collections.UserDict.__len__": [
        "<builtin>.len"
    ],
    "collections.UserDict.__getitem__": [
        "<builtin>.KeyError",
        "<builtin>.hasattr"
    ],
    "collections.UserDict.__iter__": [
        "<builtin>.iter"
    ],
    "collections.UserDict.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserDict.copy": [
        "requests.cookies.RequestsCookieJar.update",
        "<map>.copy",
        "copy.copy",
        "<map>.update",
        "collections.UserDict.__init__",
        "copy"
    ],
    "collections.UserDict.fromkeys": [
        "collections.UserDict.__init__"
    ],
    "collections.UserList.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserList.__lt__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__cast": [
        "<builtin>.isinstance"
    ],
    "collections.UserList.__le__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__eq__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__gt__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__ge__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__len__": [
        "<builtin>.len"
    ],
    "collections.UserList.__getitem__": [
        "<builtin>.isinstance"
    ],
    "collections.UserList.__add__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__radd__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__iadd__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.append": [
        "<list>.append"
    ],
    "collections.UserList.insert": [
        "<list>.insert"
    ],
    "collections.UserList.pop": [
        "<list>.pop"
    ],
    "collections.UserList.remove": [
        "<list>.remove"
    ],
    "collections.UserList.clear": [
        "<list>.clear"
    ],
    "<list>.clear": [],
    "collections.UserList.count": [
        "<list>.count"
    ],
    "collections.UserList.index": [
        "<list>.index"
    ],
    "collections.UserList.reverse": [
        "<list>.reverse"
    ],
    "collections.UserList.sort": [
        "<list>.sort"
    ],
    "collections.UserList.extend": [
        "<list>.extend",
        "<builtin>.isinstance"
    ],
    "collections.UserString.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__str__": [
        "<builtin>.str"
    ],
    "collections.UserString.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserString.__int__": [
        "<builtin>.int"
    ],
    "collections.UserString.__float__": [
        "<builtin>.float"
    ],
    "collections.UserString.__complex__": [
        "<builtin>.complex"
    ],
    "<builtin>.complex": [],
    "collections.UserString.__hash__": [
        "<builtin>.hash"
    ],
    "collections.UserString.__eq__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__lt__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__le__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__gt__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__ge__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__contains__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__len__": [
        "<builtin>.len"
    ],
    "collections.UserString.__add__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__radd__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__rmod__": [
        "<builtin>.str"
    ],
    "collections.UserString.count": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.find": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.replace": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.rfind": [
        "<builtin>.isinstance"
    ],
    "collections.namedtuple._make": [
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "collections.namedtuple._replace": [
        "<builtin>.list",
        "<builtin>.ValueError"
    ],
    "heapq.heappush": [
        "<list>.append",
        "heapq._siftdown",
        "<builtin>.len"
    ],
    "heapq.heappop": [
        "heapq._siftup",
        "<list>.pop"
    ],
    "heapq.heappushpop": [
        "heapq._siftup"
    ],
    "heapq._heappop_max": [
        "<list>.pop",
        "heapq._siftup_max"
    ],
    "heapq._siftup_max": [
        "heapq._siftdown_max",
        "<builtin>.len"
    ],
    "heapq._siftdown_max": [],
    "heapq._heapreplace_max": [
        "heapq._siftup_max"
    ],
    "heapq._heapify_max": [
        "heapq._siftup_max",
        "<builtin>.reversed",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "heapq.merge": [
        "heapq.heapify",
        "heapq._heapify_max",
        "<builtin>.next",
        "<builtin>.enumerate",
        "heapq.heapreplace",
        "heapq._heappop_max",
        "heapq.heappop",
        "<builtin>.len",
        "heapq._heapreplace_max",
        "<builtin>.map",
        "<list>"
    ],
    "heapq.nsmallest": [
        "heapq._heapify_max",
        "<builtin>.iter",
        "<builtin>.zip",
        "<builtin>.object",
        "<builtin>.len",
        "<builtin>.min",
        "heapq._heapreplace_max",
        "<builtin>.range"
    ],
    "doctest._ellipsis_match": [
        "<str>.endswith",
        "<str>.find",
        "<str>.startswith",
        "<builtin>.len"
    ],
    "doctest.Example.__eq__": [
        "<builtin>.type"
    ],
    "doctest.Example.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTest.__repr__": [
        "<builtin>.len"
    ],
    "doctest.DocTest.__eq__": [
        "<builtin>.type"
    ],
    "doctest.DocTest.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTest.__lt__": [
        "<builtin>.isinstance",
        "<builtin>.id"
    ],
    "doctest._OutputRedirectingPdb.set_continue": [],
    "doctest.DebugRunner.report_unexpected_exception": [
        "doctest.UnexpectedException.__init__"
    ],
    "doctest.UnexpectedException.__init__": [],
    "doctest.DebugRunner.report_failure": [
        "doctest.DocTestFailure.__init__"
    ],
    "doctest.DocTestFailure.__init__": [],
    "doctest.DocTestRunner.__patched_linecache_getlines": [
        "pathlib.PurePath.match",
        "linecache.getlines",
        "<builtin>.int"
    ],
    "doctest.OutputChecker._toAscii": [
        "<builtin>.str"
    ],
    "doctest.OutputChecker.check_output": [
        "re.sub",
        "doctest.OutputChecker._toAscii",
        "re.escape",
        "doctest._ellipsis_match"
    ],
    "doctest.OutputChecker.output_difference": [
        "difflib.Differ.compare",
        "<builtin>.list",
        "difflib.Differ.__init__",
        "re.sub",
        "difflib.context_diff",
        "doctest._indent",
        "doctest.OutputChecker._do_a_fancy_diff",
        "<str>.splitlines",
        "difflib.unified_diff"
    ],
    "doctest.OutputChecker._do_a_fancy_diff": [
        "<str>.count",
        "<list>.count"
    ],
    "difflib.Differ.__init__": [],
    "difflib.Differ.compare": [
        "difflib.Differ._dump",
        "difflib.SequenceMatcher.__init__",
        "difflib.Differ._fancy_replace",
        "difflib.SequenceMatcher.get_opcodes",
        "<builtin>.ValueError"
    ],
    "difflib.SequenceMatcher.__init__": [
        "difflib.SequenceMatcher.set_seqs"
    ],
    "difflib.SequenceMatcher.set_seqs": [
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.set_seq2"
    ],
    "difflib.SequenceMatcher.set_seq1": [],
    "difflib.SequenceMatcher.set_seq2": [
        "difflib.SequenceMatcher.__chain_b"
    ],
    "difflib.SequenceMatcher.__chain_b": [
        "<map>.items",
        "<builtin>.set",
        "<map>.keys",
        "<builtin>.enumerate",
        "difflib.IS_CHARACTER_JUNK",
        "<map>.setdefault",
        "<builtin>.len"
    ],
    "difflib.SequenceMatcher.get_opcodes": [
        "<list>.append",
        "difflib.SequenceMatcher.get_matching_blocks"
    ],
    "difflib.SequenceMatcher.get_matching_blocks": [
        "<builtin>.list",
        "<builtin>.len",
        "difflib.SequenceMatcher.find_longest_match",
        "<list>.pop",
        "<list>.append",
        "<list>.sort",
        "<builtin>.map"
    ],
    "difflib.SequenceMatcher.find_longest_match": [
        "<builtin>.range",
        "<map>.get",
        "<map>"
    ],
    "difflib.Differ._dump": [
        "<builtin>.range"
    ],
    "difflib.Differ._fancy_replace": [
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.set_seqs",
        "difflib.Differ._fancy_helper",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.quick_ratio",
        "difflib.Differ._plain_replace",
        "difflib.SequenceMatcher.set_seq2",
        "difflib.Differ._qformat",
        "difflib.SequenceMatcher.get_opcodes",
        "difflib.SequenceMatcher.real_quick_ratio",
        "<builtin>.range",
        "<builtin>.ValueError",
        "difflib.SequenceMatcher.ratio"
    ],
    "difflib.SequenceMatcher.real_quick_ratio": [
        "<builtin>.min",
        "difflib._calculate_ratio",
        "<builtin>.len"
    ],
    "difflib._calculate_ratio": [],
    "difflib.SequenceMatcher.quick_ratio": [
        "difflib._calculate_ratio",
        "<map>.get",
        "<builtin>.len"
    ],
    "difflib.SequenceMatcher.ratio": [
        "<builtin>.sum",
        "<builtin>.len",
        "difflib._calculate_ratio",
        "difflib.SequenceMatcher.get_matching_blocks"
    ],
    "difflib.Differ._plain_replace": [
        "difflib.Differ._dump"
    ],
    "difflib.Differ._fancy_helper": [
        "difflib.Differ._fancy_replace",
        "difflib.Differ._dump"
    ],
    "difflib.Differ._qformat": [
        "<str>.rstrip",
        "difflib._keep_original_ws"
    ],
    "difflib._keep_original_ws": [
        "<builtin>.zip"
    ],
    "difflib.context_diff": [
        "<builtin>.dict",
        "difflib._format_range_context",
        "difflib._check_types",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.get_grouped_opcodes",
        "<builtin>.any"
    ],
    "difflib._check_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "difflib.SequenceMatcher.get_grouped_opcodes": [
        "<list>.append",
        "<builtin>.max",
        "<builtin>.len",
        "difflib.SequenceMatcher.get_opcodes",
        "<builtin>.min"
    ],
    "difflib._format_range_context": [],
    "difflib.unified_diff": [
        "difflib._check_types",
        "difflib.SequenceMatcher.get_grouped_opcodes",
        "difflib._format_range_unified",
        "difflib.SequenceMatcher.__init__"
    ],
    "difflib._format_range_unified": [],
    "doctest.DocTestFailure.__str__": [
        "<builtin>.str"
    ],
    "doctest.UnexpectedException.__str__": [
        "<builtin>.str"
    ],
    "doctest.run_docstring_examples": [
        "doctest.DocTestRunner.run",
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestFinder.__init__",
        "doctest.DocTestFinder.find"
    ],
    "doctest.set_unittest_reportflags": [
        "<builtin>.ValueError"
    ],
    "doctest.DocTestCase.__init__": [
        "unittest.case.TestCase.__init__"
    ],
    "unittest.case.TestCase.__init__": [
        "<builtin>.ValueError",
        "unittest.case.TestCase.addTypeEqualityFunc",
        "<builtin>.getattr"
    ],
    "unittest.case.TestCase.addTypeEqualityFunc": [],
    "doctest.DocTestCase.runTest": [
        "doctest.DocTestCase.format_failure",
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestRunner.run",
        "doctest.DocFileCase.format_failure",
        "_io.StringIO"
    ],
    "doctest.DocTestCase.format_failure": [],
    "doctest.DocTestCase.debug": [
        "doctest.DebugRunner.run",
        "doctest.DocTestCase.setUp",
        "doctest.SkipDocTestCase.setUp",
        "doctest.DocTestCase.tearDown"
    ],
    "doctest.DocTestCase.setUp": [],
    "doctest.DocTestCase.tearDown": [],
    "doctest.DocTestCase.__eq__": [
        "<builtin>.type"
    ],
    "doctest.DocTestCase.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.SkipDocTestCase.__init__": [
        "doctest.DocTestCase.__init__"
    ],
    "doctest.SkipDocTestCase.setUp": [
        "unittest.case.TestCase.skipTest"
    ],
    "unittest.case.TestCase.skipTest": [],
    "doctest.DocTestSuite": [
        "doctest.DocTestFinder.__init__",
        "doctest._normalize_module",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTestCase.__init__",
        "doctest.DocTestFinder.find",
        "unittest.suite.BaseTestSuite.addTest",
        "<builtin>.len",
        "<list>.sort"
    ],
    "unittest.suite.BaseTestSuite.addTest": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.callable",
        "<list>.append",
        "<builtin>.repr"
    ],
    "doctest.DocFileTest": [
        "<map>.copy",
        "doctest.DocTestParser.get_doctest",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.ValueError",
        "doctest._load_testfile"
    ],
    "doctest.DocFileSuite": [
        "doctest.DocFileTest",
        "doctest._normalize_module",
        "unittest.suite.BaseTestSuite.addTest"
    ],
    "doctest.script_from_examples": [
        "doctest.DocTestParser.parse",
        "<builtin>.isinstance",
        "doctest._comment_line",
        "<list>.pop",
        "<list>.append"
    ],
    "doctest._comment_line": [],
    "doctest.testsource": [
        "doctest._normalize_module",
        "doctest.DocTestFinder.__init__",
        "doctest.script_from_examples",
        "doctest.DocTestFinder.find",
        "<builtin>.ValueError"
    ],
    "doctest.debug_src": [
        "doctest.script_from_examples",
        "doctest.debug_script"
    ],
    "doctest.debug_script": [
        "<builtin>.print",
        "<builtin>.exec",
        "<map>.copy"
    ],
    "doctest.debug": [
        "doctest.testsource",
        "doctest._normalize_module",
        "doctest.debug_script"
    ],
    "__future__._Feature.__repr__": [
        "<builtin>.repr"
    ],
    "difflib.IS_CHARACTER_JUNK": [],
    "difflib.get_close_matches": [
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.quick_ratio",
        "heapq.nlargest",
        "difflib.SequenceMatcher.set_seq2",
        "<list>.append",
        "difflib.SequenceMatcher.real_quick_ratio",
        "<builtin>.ValueError",
        "difflib.SequenceMatcher.ratio"
    ],
    "difflib.diff_bytes": [
        "difflib.diff_bytes.decode",
        "<builtin>.list",
        "<builtin>.map"
    ],
    "difflib.diff_bytes.decode": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "difflib.ndiff": [
        "difflib.Differ.compare",
        "difflib.Differ.__init__"
    ],
    "difflib._mdiff": [
        "re.compile",
        "<builtin>.next",
        "difflib._mdiff._line_pair_iterator",
        "re",
        "difflib.ndiff"
    ],
    "difflib._mdiff._line_pair_iterator": [
        "<builtin>.len",
        "difflib._mdiff._line_iterator",
        "<builtin>.next",
        "<list>.pop",
        "<list>.append"
    ],
    "difflib._mdiff._line_iterator": [
        "<list>.append",
        "difflib._mdiff._make_line",
        "<str>.startswith",
        "<builtin>.len"
    ],
    "difflib._mdiff._make_line": [
        "<list>.pop",
        "<builtin>.reversed"
    ],
    "difflib.HtmlDiff.make_file": [
        "<builtin>.dict",
        "difflib.HtmlDiff.make_table"
    ],
    "difflib.HtmlDiff.make_table": [
        "<list>.append",
        "<builtin>.dict",
        "difflib.HtmlDiff._line_wrapper",
        "difflib.HtmlDiff._convert_flags",
        "difflib.HtmlDiff._collect_lines",
        "<str>.replace",
        "difflib._mdiff",
        "difflib.HtmlDiff._make_prefix",
        "<builtin>.len",
        "difflib.HtmlDiff._tab_newline_replace",
        "<builtin>.range"
    ],
    "difflib.HtmlDiff._make_prefix": [],
    "difflib.HtmlDiff._tab_newline_replace": [
        "difflib.HtmlDiff._tab_newline_replace.expand_tabs"
    ],
    "difflib.HtmlDiff._tab_newline_replace.expand_tabs": [],
    "difflib.HtmlDiff._line_wrapper": [
        "<list>.pop",
        "difflib.HtmlDiff._split_line"
    ],
    "difflib.HtmlDiff._split_line": [
        "<str>.count",
        "difflib.HtmlDiff._split_line",
        "<builtin>.len",
        "<list>.append"
    ],
    "difflib.HtmlDiff._collect_lines": [
        "<list>.append"
    ],
    "difflib.HtmlDiff._convert_flags": [
        "<builtin>.max",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "difflib.restore": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "re.RegexFlag.__repr__": [
        "<builtin>.len",
        "<list>.append"
    ],
    "re.fullmatch": [
        "re._compile"
    ],
    "re.subn": [
        "re._compile"
    ],
    "re.finditer": [
        "re._compile"
    ],
    "re.purge": [
        "<map>.clear"
    ],
    "re.template": [
        "re._compile"
    ],
    "re._expand": [
        "sre_parse.parse_template",
        "sre_parse.expand_template"
    ],
    "sre_parse.expand_template": [
        "sre_constants.error.__init__"
    ],
    "re._subx": [
        "<builtin>.len",
        "re._compile_repl"
    ],
    "re.Scanner.__init__": [
        "<builtin>.isinstance",
        "sre_parse.State.opengroup",
        "sre_compile.compile",
        "sre_parse.SubPattern.__init__",
        "sre_parse.SubPattern.append",
        "sre_constants",
        "sre_parse.State.__init__",
        "<list>.append",
        "sre_parse.State.closegroup"
    ],
    "sre_parse.State.opengroup": [
        "sre_constants.error.__init__",
        "<map>.get",
        "<list>.append"
    ],
    "sre_parse.State.closegroup": [],
    "re.Scanner.scan": [
        "<builtin>.callable",
        "<list>"
    ],
    "enum._is_descriptor": [
        "<builtin>.hasattr"
    ],
    "enum._is_dunder": [
        "<builtin>.len"
    ],
    "enum._is_sunder": [
        "<builtin>.len"
    ],
    "enum._EnumDict.__init__": [
        "<builtin>.super"
    ],
    "enum._EnumDict.__setitem__": [
        "<list>.append",
        "<builtin>.super",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.TypeError",
        "enum._is_descriptor",
        "enum._is_dunder",
        "<builtin>.setattr",
        "<builtin>.len",
        "enum._is_sunder",
        "<builtin>.ValueError"
    ],
    "enum.EnumMeta.__prepare__": [
        "<builtin>.getattr",
        "enum._EnumDict.__init__",
        "enum.EnumMeta._get_mixins_"
    ],
    "enum.EnumMeta._get_mixins_": [
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "enum.EnumMeta._get_mixins_._find_data_type"
    ],
    "enum.EnumMeta._get_mixins_._find_data_type": [
        "<builtin>.issubclass"
    ],
    "enum.EnumMeta.__new__": [
        "<builtin>.super",
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "enum.EnumMeta._find_new_",
        "<builtin>.any",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "enum._make_class_unpicklable",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "enum.EnumMeta._get_mixins_"
    ],
    "enum.EnumMeta._find_new_": [
        "<builtin>.getattr"
    ],
    "enum._make_class_unpicklable": [],
    "enum.EnumMeta.__call__": [
        "enum.EnumMeta.__new__",
        "enum.EnumMeta._create_"
    ],
    "enum.EnumMeta._create_": [
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<list>.append",
        "enum._make_class_unpicklable",
        "enum.EnumMeta._get_mixins_"
    ],
    "enum.EnumMeta.__contains__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "enum.EnumMeta.__delattr__": [
        "<builtin>.AttributeError",
        "<builtin>.super"
    ],
    "enum.EnumMeta.__getattr__": [
        "<builtin>.AttributeError",
        "enum._is_dunder"
    ],
    "enum.EnumMeta.__len__": [
        "<builtin>.len"
    ],
    "enum.EnumMeta.__reversed__": [
        "<builtin>.reversed"
    ],
    "enum.EnumMeta.__setattr__": [
        "<builtin>.AttributeError",
        "<builtin>.super"
    ],
    "enum.EnumMeta._convert_": [
        "<builtin>.filter",
        "<builtin>.vars"
    ],
    "enum.EnumMeta._convert": [
        "warnings",
        "enum.EnumMeta._convert_",
        "warnings.warn"
    ],
    "enum.Enum.__new__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "enum.Enum._missing_",
        "<builtin>.type",
        "<builtin>.ValueError"
    ],
    "enum.Enum._missing_": [
        "<builtin>.ValueError"
    ],
    "enum.Enum._generate_next_value_": [
        "<builtin>.reversed"
    ],
    "enum.Enum.__format__": [
        "<builtin>.str"
    ],
    "enum.Enum.__hash__": [
        "<builtin>.hash"
    ],
    "enum.Flag._generate_next_value_": [
        "<builtin>.TypeError",
        "<builtin>.reversed",
        "enum._high_bit"
    ],
    "enum._high_bit": [
        "<int>.bit_length"
    ],
    "enum.Flag._missing_": [
        "enum.Flag._create_pseudo_member_"
    ],
    "enum.Flag._create_pseudo_member_": [
        "enum._decompose",
        "<builtin>.ValueError"
    ],
    "enum._decompose": [
        "<list>.append",
        "<builtin>.list",
        "enum._power_of_two",
        "<list>.pop",
        "<builtin>.len",
        "<list>.sort"
    ],
    "enum._power_of_two": [
        "enum._high_bit"
    ],
    "enum.Flag.__contains__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "enum.Flag.__repr__": [
        "enum._decompose",
        "<builtin>.str"
    ],
    "enum.Flag.__str__": [
        "enum._decompose",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "enum.Flag.__bool__": [
        "<builtin>.bool"
    ],
    "enum.Flag.__or__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__and__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__xor__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__invert__": [
        "enum._decompose"
    ],
    "enum.IntFlag._missing_": [
        "enum.IntFlag._create_pseudo_member_",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "enum.IntFlag._create_pseudo_member_": [
        "enum._decompose",
        "<builtin>.reversed",
        "enum._high_bit",
        "<list>.append"
    ],
    "<int>.bit_length": [],
    "enum.IntFlag.__or__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__and__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__xor__": [
        "<builtin>.isinstance"
    ],
    "enum.unique": [
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "types.new_class": [
        "types.resolve_bases",
        "attr._make.make_class.<lambda1>",
        "types.prepare_class",
        "<map>",
        "dataclasses.make_dataclass.<lambda1>",
        "attr._cmp.cmp_using.<lambda1>"
    ],
    "types.resolve_bases": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "types.prepare_class": [
        "<builtin>.dict",
        "<map>.pop",
        "<builtin>.isinstance",
        "types._calculate_meta",
        "<map>.__prepare__",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "types._calculate_meta": [
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "<map>.__prepare__": [],
    "types.DynamicClassAttribute.__get__": [
        "<builtin>.AttributeError",
        "enum.Enum.value",
        "enum.Enum.name"
    ],
    "enum.Enum.value": [],
    "enum.Enum.name": [],
    "types.DynamicClassAttribute.__set__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.__delete__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.getter": [
        "<builtin>.type"
    ],
    "types.DynamicClassAttribute.setter": [
        "<builtin>.type"
    ],
    "types.DynamicClassAttribute.deleter": [
        "<builtin>.type"
    ],
    "types._GeneratorWrapper.__init__": [
        "<builtin>.getattr"
    ],
    "types._GeneratorWrapper.__next__": [
        "<builtin>.next"
    ],
    "types.coroutine.wrapped": [
        "asyncio.tasks._wrap_awaitable",
        "<builtin>.isinstance",
        "asyncio.coroutines.coroutine.coro",
        "asyncio.locks._ContextManagerMixin.__iter__",
        "types._GeneratorWrapper.__init__",
        "asyncio.tasks.__sleep0"
    ],
    "asyncio.tasks._wrap_awaitable": [
        "asyncio.futures.Future.__await__"
    ],
    "asyncio.locks._ContextManagerMixin.__iter__": [
        "asyncio.locks._ContextManager.__init__",
        "warnings.warn"
    ],
    "asyncio.locks._ContextManager.__init__": [],
    "asyncio.tasks.__sleep0": [],
    "sre_compile._generate_overlap_table": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "sre_parse.State.groups": [
        "<builtin>.len"
    ],
    "sre_parse.State.checklookbehindgroup": [
        "sre_parse.State.checkgroup"
    ],
    "sre_parse.State.checkgroup": [],
    "sre_parse.SubPattern.__repr__": [
        "<builtin>.repr"
    ],
    "sre_parse.SubPattern.__len__": [
        "<builtin>.len"
    ],
    "sre_parse.SubPattern.__getitem__": [
        "<builtin>.isinstance",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.SubPattern.insert": [
        "<list>.insert"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.range"
    ],
    "sre_parse.Tokenizer.pos": [
        "<builtin>.len"
    ],
    "sre_parse._class_escape": [
        "<builtin>.int",
        "unicodedata",
        "<map>.get",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.chr"
    ],
    "sre_parse._escape": [
        "<builtin>.int",
        "unicodedata",
        "<map>.get",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.chr"
    ],
    "sre_parse._uniq": [
        "<builtin>.list"
    ],
    "sre_parse._parse": [
        "<builtin>.range",
        "sre_parse._parse",
        "sre_parse._parse_sub",
        "sre_parse._escape",
        "<builtin>.OverflowError",
        "sre_parse._class_escape",
        "<builtin>.int",
        "warnings",
        "sre_parse.SubPattern.__init__",
        "sre_parse.SubPattern.append",
        "<builtin>.len",
        "sre_parse._parse_flags",
        "<builtin>.AssertionError",
        "warnings.warn",
        "<list>",
        "sre_parse._uniq"
    ],
    "sre_parse._parse_flags": [
        "<builtin>.len"
    ],
    "<builtin>.OverflowError": [],
    "sre_constants._NamedIntConstant.__new__": [
        "<builtin>.super"
    ],
    "functools.total_ordering": [
        "<builtin>.max",
        "<builtin>.ValueError",
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "functools.reduce": [
        "processing.cgprocessor.CallGraphProcessor.match_params.<lambda2>",
        "processing.extProcessor.ExtProcessor.getYPOint.<lambda2>",
        "<builtin>.iter",
        "<builtin>.TypeError",
        "<builtin>.next",
        "pkg_resources.extern.jaraco.text.Stripper.common_prefix",
        "operator.or_",
        "processing.extProcessor.ExtProcessor.convert_final.<lambda1>",
        "processing.extProcessor.ExtProcessor.visit_Call.enter_call.<lambda1>",
        "processing.extProcessor.ExtProcessor.resolve.<lambda1>"
    ],
    "functools.partial.__new__": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.hasattr",
        "<builtin>.super"
    ],
    "functools.partial.__repr__": [
        "<list>.extend",
        "<builtin>.type"
    ],
    "functools.partial.__reduce__": [
        "<builtin>.type"
    ],
    "functools.partial.__setstate__": [
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.callable",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "functools.partialmethod.__init__": [
        "<map>.pop",
        "<builtin>.isinstance",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.callable",
        "<builtin>.len",
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "functools.partialmethod.__repr__": [
        "<map>.items",
        "<builtin>.map"
    ],
    "functools.partialmethod.__get__": [
        "functools.partialmethod._make_unbound_method",
        "<builtin>.getattr"
    ],
    "functools.partialmethod._make_unbound_method": [],
    "functools.partialmethod.__isabstractmethod__": [
        "<builtin>.getattr"
    ],
    "functools.singledispatchmethod.__init__": [
        "functools.singledispatch",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.hasattr"
    ],
    "functools.singledispatchmethod.register": [
        "functools.singledispatch.register"
    ],
    "functools.singledispatch.register": [
        "<map>.items",
        "<builtin>.isinstance",
        "_py_abc.get_cache_token",
        "<builtin>.TypeError",
        "typing",
        "<builtin>.iter",
        "<builtin>.next",
        "_abc.get_cache_token",
        "<builtin>.getattr",
        "typing.get_type_hints",
        "<builtin>.hasattr"
    ],
    "functools.singledispatchmethod.__get__": [
        "functools.update_wrapper"
    ],
    "functools.singledispatchmethod.__isabstractmethod__": [
        "<builtin>.getattr"
    ],
    "functools.cached_property.__set_name__": [
        "<builtin>.TypeError"
    ],
    "functools.cached_property.__get__": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "charset_normalizer.utils.is_unicode_range_secondary": [
        "<builtin>.any"
    ],
    "charset_normalizer.utils.is_separator": [],
    "charset_normalizer.cd.encoding_languages": [
        "charset_normalizer.cd.encoding_unicode_range",
        "charset_normalizer.cd.unicode_range_languages"
    ],
    "charset_normalizer.cd.encoding_unicode_range": [
        "charset_normalizer.utils.is_multi_byte_encoding",
        "importlib.import_module",
        "charset_normalizer.utils.unicode_range",
        "charset_normalizer.utils.is_unicode_range_secondary",
        "<builtin>.bytes",
        "<builtin>.sorted",
        "<builtin>.IOError",
        "<builtin>.range"
    ],
    "charset_normalizer.utils.is_multi_byte_encoding": [
        "<builtin>.issubclass",
        "importlib.import_module"
    ],
    "importlib._bootstrap._gcd_import": [
        "importlib._bootstrap._sanity_check",
        "importlib._bootstrap._find_and_load",
        "importlib._bootstrap._resolve_name"
    ],
    "importlib._bootstrap._sanity_check": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.ImportError",
        "<builtin>.type",
        "<builtin>.ValueError"
    ],
    "importlib._bootstrap._resolve_name": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "importlib._bootstrap._find_and_load": [
        "importlib._bootstrap._ModuleLockManager.__init__",
        "<builtin>.ModuleNotFoundError",
        "importlib._bootstrap._lock_unlock_module"
    ],
    "importlib._bootstrap._ModuleLockManager.__init__": [],
    "<builtin>.ModuleNotFoundError": [],
    "importlib._bootstrap._lock_unlock_module": [
        "importlib._bootstrap._get_module_lock",
        "importlib._bootstrap._ModuleLock.acquire",
        "importlib._bootstrap._DummyModuleLock.acquire"
    ],
    "importlib._bootstrap._get_module_lock": [
        "importlib._bootstrap._ModuleLock.__init__",
        "importlib._bootstrap._DummyModuleLock.__init__"
    ],
    "importlib._bootstrap._ModuleLock.__init__": [],
    "importlib._bootstrap._DummyModuleLock.__init__": [],
    "importlib._bootstrap._ModuleLock.acquire": [],
    "importlib._bootstrap._DummyModuleLock.acquire": [],
    "<builtin>.IOError": [],
    "charset_normalizer.utils.unicode_range": [
        "<builtin>.ord"
    ],
    "charset_normalizer.cd.unicode_range_languages": [
        "charset_normalizer.utils.unicode_range"
    ],
    "rich.color.Color.get_ansi_codes": [
        "<builtin>.str"
    ],
    "textual.widgets._directory_tree.DirectoryTree.render_tree_label": [
        "rich.text.Text.__init__",
        "<builtin>.isinstance",
        "rich.text.Text.apply_meta"
    ],
    "charset_normalizer.md.mess_ratio": [
        "<builtin>.sum",
        "<builtin>.round",
        "<builtin>.zip",
        "<builtin>.len",
        "<builtin>.print",
        "<builtin>.range"
    ],
    "charset_normalizer.utils.is_case_variable": [],
    "charset_normalizer.cd.coherence_ratio": [
        "<builtin>.sum",
        "collections.Counter.__init__",
        "charset_normalizer.cd.characters_popularity_compare",
        "<builtin>.round",
        "<builtin>.sorted",
        "charset_normalizer.cd.alpha_unicode_split",
        "charset_normalizer.cd.alphabet_languages"
    ],
    "charset_normalizer.cd.alpha_unicode_split": [
        "charset_normalizer.utils.unicode_range",
        "charset_normalizer.md.is_suspiciously_successive_range",
        "<builtin>.list"
    ],
    "charset_normalizer.md.is_suspiciously_successive_range": [],
    "charset_normalizer.cd.alphabet_languages": [
        "charset_normalizer.cd.get_target_features",
        "<builtin>.sorted",
        "<builtin>.any",
        "<builtin>.len",
        "charset_normalizer.utils.is_accentuated"
    ],
    "charset_normalizer.utils.is_accentuated": [],
    "charset_normalizer.cd.get_target_features": [
        "charset_normalizer.utils.is_latin",
        "charset_normalizer.utils.is_accentuated"
    ],
    "charset_normalizer.utils.is_latin": [],
    "charset_normalizer.cd.characters_popularity_compare": [
        "<builtin>.set",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "charset_normalizer.utils.is_symbol": [
        "charset_normalizer.utils.unicode_range"
    ],
    "charset_normalizer.utils.is_thai": [],
    "importlib_metadata.FastPath.__new__": [
        "<builtin>.super"
    ],
    "charset_normalizer.utils.remove_accent": [
        "<builtin>.chr",
        "<builtin>.int"
    ],
    "ipaddress.IPv4Network.is_global": [
        "ipaddress.IPv4Network.__init__"
    ],
    "ipaddress.IPv4Address.is_global": [],
    "rich.style.Style.get_html_style": [
        "rich.color.Color.get_truecolor",
        "rich.color.blend_rgb",
        "rich.color.Color.from_triplet"
    ],
    "rich.color.Color.from_triplet": [],
    "rich.color.Color.get_truecolor": [],
    "fnmatch._compile_pattern": [
        "fnmatch.translate",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "re.compile",
        "<builtin>.str"
    ],
    "fnmatch.translate": [
        "<str>.find",
        "<str>.replace",
        "<builtin>.len",
        "re.escape",
        "re.sub",
        "<list>.append"
    ],
    "charset_normalizer.utils.is_hiragana": [],
    "rich.palette.Palette.match": [
        "<builtin>.min",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "charset_normalizer.utils.is_hangul": [],
    "pathlib._make_selector": [
        "pathlib._RecursiveWildcardSelector.__init__",
        "pathlib._WildcardSelector.__init__",
        "pathlib._PreciseSelector.__init__",
        "pathlib._is_wildcard_pattern",
        "<builtin>.ValueError"
    ],
    "pathlib._is_wildcard_pattern": [],
    "pathlib._RecursiveWildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._Selector.__init__": [
        "pathlib._make_selector"
    ],
    "pathlib._WildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._PreciseSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "charset_normalizer.utils.is_ascii": [],
    "charset_normalizer.utils.is_katakana": [],
    "rich.style.Style._add": [
        "marshal.dumps"
    ],
    "charset_normalizer.utils.is_punctuation": [
        "charset_normalizer.utils.unicode_range"
    ],
    "charset_normalizer.utils.is_cjk": [],
    "ipaddress.IPv6Address.is_private": [
        "<builtin>.any"
    ],
    "charset_normalizer.utils.is_unprintable": [],
    "pygments.formatters.html.HtmlFormatter._translate_parts": [],
    "charset_normalizer.cd.mb_encoding_languages": [],
    "rich.color.Color.downgrade": [
        "colorsys.rgb_to_hls",
        "rich.palette.Palette.match",
        "<builtin>.round"
    ],
    "colorsys.rgb_to_hls": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "charset_normalizer.utils.is_emoticon": [
        "charset_normalizer.utils.unicode_range"
    ],
    "rich.segment.Segment._split_cells": [
        "<builtin>.int",
        "rich.cells.get_character_cell_size",
        "rich.cells.cell_len",
        "<builtin>.len",
        "<builtin>.AssertionError"
    ],
    "ipaddress.IPv4Address.is_private": [
        "<builtin>.any"
    ],
    "reprlib.Repr._repr_iterable": [
        "itertools.islice",
        "reprlib.Repr.repr1",
        "<builtin>.len"
    ],
    "reprlib.Repr.repr_tuple": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_list": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_array": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_set": [
        "reprlib._possibly_sorted",
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib._possibly_sorted": [
        "<builtin>.list",
        "<builtin>.sorted"
    ],
    "reprlib.Repr.repr_frozenset": [
        "reprlib._possibly_sorted",
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_deque": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_dict": [
        "<list>.append",
        "reprlib._possibly_sorted",
        "pydoc.TextRepr.repr1",
        "itertools.islice",
        "reprlib.Repr.repr1",
        "<builtin>.len"
    ],
    "reprlib.Repr.repr_str": [
        "<builtin>.max",
        "<builtin>.len"
    ],
    "reprlib.Repr.repr_int": [
        "<builtin>.max",
        "<builtin>.len"
    ],
    "reprlib.recursive_repr.decorating_function.wrapper": [
        "_thread.get_ident",
        "functools.partial.__repr__",
        "collections.ChainMap.__repr__",
        "collections.OrderedDict.__repr__",
        "<builtin>.id"
    ],
    "copyreg._reduce_ex": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "copyreg._slotnames": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "copyreg.add_extension": [
        "<map>.get",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "copyreg.remove_extension": [
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "copyreg.clear_extension_cache": [
        "<map>.clear"
    ],
    "inspect.isgeneratorfunction": [
        "inspect._has_code_flag"
    ],
    "inspect.isasyncgen": [
        "<builtin>.isinstance"
    ],
    "inspect.isgenerator": [
        "<builtin>.isinstance"
    ],
    "inspect.iscoroutine": [
        "<builtin>.isinstance"
    ],
    "inspect.isabstract": [
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.getattr",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "inspect.getmodulename": [
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.len"
    ],
    "inspect.walktree": [
        "operator.attrgetter.__init__",
        "<list>.sort",
        "<list>.append"
    ],
    "inspect.getclasstree": [
        "inspect.walktree",
        "<list>.append"
    ],
    "inspect.getargs": [
        "inspect.iscode",
        "<builtin>.list",
        "<builtin>.TypeError"
    ],
    "inspect.getargspec": [
        "inspect.getfullargspec",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "inspect.getfullargspec": [
        "<builtin>.TypeError",
        "inspect._signature_from_callable",
        "<list>.append"
    ],
    "inspect.getargvalues": [
        "inspect.getargs"
    ],
    "inspect.formatannotation": [
        "<builtin>.repr",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "inspect.formatannotationrelativeto": [
        "<builtin>.getattr"
    ],
    "inspect.<lambda3>": [
        "<builtin>.repr"
    ],
    "inspect.formatargspec": [
        "<list>.append",
        "warnings",
        "inspect.<lambda4>",
        "<builtin>.enumerate",
        "inspect.<lambda3>",
        "inspect.formatannotation",
        "<builtin>.len",
        "inspect.formatargspec.formatargandannotation",
        "warnings.warn"
    ],
    "inspect.formatargspec.formatargandannotation": [
        "inspect.formatannotation"
    ],
    "inspect.<lambda4>": [],
    "inspect.<lambda7>": [
        "<builtin>.repr"
    ],
    "inspect.formatargvalues": [
        "<list>.append",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "inspect._missing_arguments": [
        "<builtin>.TypeError",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "inspect._too_many": [
        "<builtin>.str",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "inspect.getcallargs": [
        "inspect.getfullargspec",
        "<builtin>.set",
        "inspect.ismethod",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "<builtin>.len",
        "inspect._too_many",
        "<builtin>.min",
        "inspect._missing_arguments",
        "<builtin>.range"
    ],
    "inspect.getclosurevars": [
        "<builtin>.set",
        "inspect.ismethod",
        "<builtin>.TypeError",
        "<builtin>.zip",
        "inspect.isfunction",
        "inspect.ismodule"
    ],
    "inspect.getframeinfo": [
        "inspect.isframe",
        "inspect.getsourcefile",
        "inspect.getfile",
        "inspect.istraceback",
        "<builtin>.TypeError",
        "inspect.findsource"
    ],
    "inspect.getouterframes": [
        "<list>.append",
        "inspect.getframeinfo"
    ],
    "inspect.getinnerframes": [
        "<list>.append",
        "inspect.getframeinfo"
    ],
    "inspect.currentframe": [
        "<builtin>.hasattr"
    ],
    "inspect.stack": [
        "inspect.getouterframes"
    ],
    "inspect.trace": [
        "inspect.getinnerframes"
    ],
    "inspect.getgeneratorlocals": [
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "inspect.isgenerator"
    ],
    "inspect.getcoroutinelocals": [
        "<builtin>.getattr"
    ],
    "inspect.Parameter.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.ValueError",
        "<str>.isidentifier"
    ],
    "inspect.Parameter.__reduce__": [
        "<builtin>.type"
    ],
    "inspect.Parameter.replace": [
        "<builtin>.type"
    ],
    "inspect.Parameter.__str__": [
        "<builtin>.repr",
        "inspect.formatannotation"
    ],
    "inspect.Parameter.__hash__": [
        "<builtin>.hash"
    ],
    "inspect.Parameter.__eq__": [
        "<builtin>.isinstance"
    ],
    "inspect.BoundArguments.args": [
        "<builtin>.tuple"
    ],
    "inspect.BoundArguments.apply_defaults": [
        "collections.OrderedDict.__init__",
        "<list>.append"
    ],
    "inspect.BoundArguments.__eq__": [
        "<builtin>.isinstance"
    ],
    "inspect.BoundArguments.__repr__": [
        "collections.OrderedDict.items",
        "<list>.append"
    ],
    "inspect.Signature.from_function": [
        "inspect._signature_from_function",
        "warnings.warn"
    ],
    "inspect.Signature.from_builtin": [
        "warnings.warn",
        "inspect._signature_from_builtin"
    ],
    "inspect.Signature._hash_basis": [
        "<builtin>.tuple"
    ],
    "inspect.Signature.__hash__": [
        "<builtin>.frozenset",
        "inspect.Signature._hash_basis",
        "<builtin>.hash"
    ],
    "inspect.Signature.__eq__": [
        "inspect.Signature._hash_basis",
        "<builtin>.isinstance"
    ],
    "inspect.Signature.bind": [
        "inspect.Signature._bind"
    ],
    "inspect.Signature.__reduce__": [
        "<builtin>.tuple",
        "<builtin>.type"
    ],
    "inspect.Signature.__str__": [
        "<list>.append",
        "inspect.formatannotation",
        "<builtin>.str"
    ],
    "inspect._signature_fromstr.wrap_value": [
        "<builtin>.RuntimeError",
        "<builtin>.eval",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "inspect._signature_fromstr.RewriteSymbolics.visit_Attribute": [
        "<builtin>.reversed",
        "<builtin>.isinstance",
        "inspect._signature_fromstr.wrap_value",
        "<list>.append",
        "<builtin>.RuntimeError"
    ],
    "inspect._signature_fromstr.RewriteSymbolics.visit_Name": [
        "inspect._signature_fromstr.wrap_value",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "dis.pretty_flags": [
        "<builtin>.range",
        "<list>.append"
    ],
    "dis._get_code_object": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type",
        "dis._try_compile",
        "<builtin>.hasattr"
    ],
    "dis.code_info": [
        "dis._format_code_info",
        "dis._get_code_object"
    ],
    "dis._format_code_info": [
        "<builtin>.enumerate",
        "<list>.append"
    ],
    "dis.show_code": [
        "<builtin>.print",
        "dis.code_info"
    ],
    "dis.Instruction._disassemble": [
        "<str>.rstrip",
        "<list>.append"
    ],
    "dis.get_instructions": [
        "<builtin>.dict",
        "dis._get_code_object",
        "dis._get_instructions_bytes",
        "dis.findlinestarts"
    ],
    "dis.Bytecode.__init__": [
        "<builtin>.dict",
        "dis._get_code_object",
        "dis.findlinestarts"
    ],
    "dis.Bytecode.__iter__": [
        "dis._get_instructions_bytes"
    ],
    "dis.Bytecode.from_traceback": [
        "dis.Bytecode.__init__"
    ],
    "dis.Bytecode.info": [
        "dis._format_code_info"
    ],
    "dis.Bytecode.dis": [
        "_io.StringIO",
        "dis._disassemble_bytes"
    ],
    "argparse._AttributeHolder.__repr__": [
        "argparse._AttributeHolder._get_kwargs",
        "argparse._AttributeHolder._get_args",
        "<builtin>.type",
        "<list>.append"
    ],
    "argparse._AttributeHolder._get_args": [],
    "argparse._AttributeHolder._get_kwargs": [
        "<builtin>.sorted"
    ],
    "argparse._copy_items": [
        "copy.copy",
        "copy",
        "<builtin>.type"
    ],
    "argparse.HelpFormatter._format_usage": [
        "<builtin>.dict",
        "<list>.append",
        "argparse.HelpFormatter._format_usage.get_lines",
        "<builtin>.format",
        "re.findall",
        "<list>.extend",
        "<builtin>.len",
        "gettext.gettext"
    ],
    "argparse.HelpFormatter._format_usage.get_lines": [
        "<list>.append",
        "<builtin>.len"
    ],
    "argparse.HelpFormatter._format_actions_usage": [
        "<map>.pop",
        "<builtin>.set",
        "<builtin>.enumerate",
        "<builtin>.sorted",
        "re.sub",
        "argparse.HelpFormatter._format_args",
        "<str>.strip",
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "<map>.get",
        "<list>.append",
        "argparse.HelpFormatter._get_default_metavar_for_positional"
    ],
    "argparse.HelpFormatter._get_default_metavar_for_optional": [],
    "argparse.HelpFormatter._get_default_metavar_for_positional": [],
    "argparse.HelpFormatter._format_text": [
        "<builtin>.dict",
        "argparse.HelpFormatter._fill_text",
        "<builtin>.max"
    ],
    "argparse.HelpFormatter._fill_text": [
        "textwrap",
        "<str>.strip",
        "textwrap.fill"
    ],
    "textwrap.fill": [
        "textwrap.TextWrapper.fill",
        "textwrap.TextWrapper.__init__"
    ],
    "textwrap.TextWrapper.fill": [
        "textwrap.TextWrapper.wrap"
    ],
    "argparse.HelpFormatter._format_action": [
        "<list>.append",
        "<str>.endswith",
        "argparse.HelpFormatter._expand_help",
        "<builtin>.min",
        "argparse.HelpFormatter._iter_indented_subactions",
        "argparse.HelpFormatter._join_parts",
        "argparse.HelpFormatter._format_action_invocation",
        "<builtin>.len",
        "argparse.HelpFormatter._split_lines",
        "<builtin>.max"
    ],
    "argparse.HelpFormatter._format_action_invocation": [
        "<list>.extend",
        "argparse.HelpFormatter._format_args",
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "argparse.HelpFormatter._metavar_formatter.format",
        "<list>.append",
        "argparse.HelpFormatter._get_default_metavar_for_positional",
        "argparse.HelpFormatter._metavar_formatter"
    ],
    "argparse.HelpFormatter._expand_help": [
        "<builtin>.dict",
        "<builtin>.list",
        "argparse.HelpFormatter._get_help_string",
        "<builtin>.vars",
        "<builtin>.str",
        "<builtin>.hasattr"
    ],
    "argparse.HelpFormatter._get_help_string": [],
    "argparse.HelpFormatter._split_lines": [
        "textwrap.wrap",
        "textwrap",
        "<str>.strip"
    ],
    "argparse.ArgumentError.__str__": [
        "<builtin>.dict"
    ],
    "argparse.Action._get_kwargs": [
        "<builtin>.getattr"
    ],
    "argparse.Action.__call__": [
        "<builtin>.NotImplementedError",
        "gettext.gettext"
    ],
    "argparse._StoreAction.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "argparse._StoreAction.__call__": [
        "<builtin>.setattr"
    ],
    "argparse._StoreConstAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._StoreConstAction.__call__": [
        "<builtin>.setattr"
    ],
    "argparse._StoreTrueAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._StoreFalseAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._AppendAction.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "argparse._AppendAction.__call__": [
        "<list>.append",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "argparse._copy_items"
    ],
    "argparse._AppendConstAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._AppendConstAction.__call__": [
        "<list>.append",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "argparse._copy_items"
    ],
    "argparse._CountAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._CountAction.__call__": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "argparse._HelpAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._VersionAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction.add_parser": [
        "argparse._SubParsersAction._ChoicesPseudoAction.__init__",
        "<list>.append"
    ],
    "argparse._SubParsersAction.__call__": [
        "argparse.ArgumentError.__init__",
        "<builtin>.vars",
        "<builtin>.getattr",
        "<builtin>.setattr",
        "gettext.gettext"
    ],
    "argparse._ExtendAction.__call__": [
        "<builtin>.setattr",
        "<list>.extend",
        "<builtin>.getattr",
        "argparse._copy_items"
    ],
    "argparse.FileType.__call__": [
        "<builtin>.open",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse.FileType.__repr__": [
        "<builtin>.repr",
        "<builtin>.type"
    ],
    "argparse.Namespace.__eq__": [
        "<builtin>.vars",
        "<builtin>.isinstance"
    ],
    "argparse._ActionsContainer.__init__": [
        "argparse._ActionsContainer.register",
        "re.compile",
        "<builtin>.super",
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer.set_defaults": [
        "<map>.update"
    ],
    "argparse._ActionsContainer.get_default": [
        "<map>.get"
    ],
    "argparse._ArgumentGroup._add_action": [
        "<builtin>.super",
        "<list>.append"
    ],
    "argparse._MutuallyExclusiveGroup._add_action": [
        "argparse._MutuallyExclusiveGroup._add_action",
        "argparse.ArgumentParser._add_action",
        "argparse._ArgumentGroup._add_action",
        "argparse._ActionsContainer._add_action",
        "<list>.append",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._remove_action": [
        "<list>.remove"
    ],
    "argparse._ActionsContainer._handle_conflict_error": [
        "gettext.ngettext",
        "argparse.ArgumentError.__init__",
        "<builtin>.len"
    ],
    "argparse._ActionsContainer._handle_conflict_resolve": [
        "<map>.pop"
    ],
    "argparse._ArgumentGroup._remove_action": [
        "<builtin>.super",
        "<list>.remove"
    ],
    "argparse._MutuallyExclusiveGroup._remove_action": [
        "argparse._ActionsContainer._remove_action",
        "argparse._MutuallyExclusiveGroup._remove_action",
        "<list>.remove",
        "argparse._ArgumentGroup._remove_action"
    ],
    "argparse.ArgumentParser._get_kwargs": [
        "<builtin>.getattr"
    ],
    "argparse.ArgumentParser.add_subparsers": [
        "argparse._ActionsContainer._pop_action_class",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_formatter",
        "argparse._ArgumentGroup._add_action",
        "argparse.HelpFormatter.format_help",
        "<str>.strip",
        "argparse.ArgumentParser._get_positional_actions",
        "argparse._ActionsContainer.add_argument_group",
        "<builtin>.type",
        "gettext.gettext",
        "argparse.HelpFormatter.add_usage"
    ],
    "argparse.ArgumentParser.parse_intermixed_args": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser.parse_known_intermixed_args",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_known_intermixed_args": [
        "warnings",
        "<builtin>.TypeError",
        "argparse.ArgumentParser.format_usage",
        "argparse.ArgumentParser._get_positional_actions",
        "argparse.ArgumentParser.parse_known_args",
        "<builtin>.getattr",
        "argparse.ArgumentParser._get_optional_actions",
        "<builtin>.delattr",
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "argparse.ArgumentParser._get_optional_actions": [],
    "os._get_exports_list": [
        "<builtin>.dir",
        "<builtin>.list"
    ],
    "os.removedirs": [
        "ntpath.split",
        "posixpath.split"
    ],
    "os.renames": [
        "os.removedirs",
        "posixpath.split",
        "ntpath.split",
        "os.makedirs",
        "genericpath.exists"
    ],
    "os.walk": [
        "posixpath.islink",
        "os.walk",
        "os._fspath",
        "posixpath.join",
        "ntpath.islink",
        "ntpath.join"
    ],
    "os.fwalk": [
        "genericpath.samestat",
        "stat.S_ISDIR",
        "<builtin>.isinstance",
        "os._fwalk",
        "os._fspath",
        "<builtin>.open",
        "<builtin>.hasattr"
    ],
    "os._fwalk": [
        "genericpath.samestat",
        "os._fwalk",
        "posixpath.join",
        "<builtin>.zip",
        "os._fscodec.fsencode",
        "ntpath.join",
        "<builtin>.open",
        "<list>.append",
        "os._fscodec.fsdecode"
    ],
    "os.execlpe": [
        "os.execvpe"
    ],
    "os.execvpe": [
        "os._execvpe"
    ],
    "os._Environ.__getitem__": [
        "<builtin>.KeyError",
        "os._createenviron.encodekey",
        "os._check_bytes",
        "os._createenviron.decode"
    ],
    "os._check_bytes": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "os._createenviron.decode": [],
    "os._Environ.__setitem__": [
        "os.<lambda1>",
        "os._createenviron.encode",
        "os._createenviron.encodekey",
        "os._check_bytes"
    ],
    "os.<lambda1>": [],
    "os._Environ.__delitem__": [
        "os.<lambda2>",
        "<builtin>.KeyError",
        "os._createenviron.encodekey",
        "os._check_bytes"
    ],
    "os.<lambda2>": [
        "os.<lambda1>"
    ],
    "os._Environ.__iter__": [
        "<builtin>.list",
        "os._createenviron.decode"
    ],
    "os._Environ.__len__": [
        "<builtin>.len"
    ],
    "os._Environ.__repr__": [
        "<map>.items",
        "os._createenviron.decode"
    ],
    "os._Environ.copy": [
        "<builtin>.dict"
    ],
    "os._createenviron.check_str": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "os._spawnvef": [
        "<builtin>.isinstance",
        "posix._exit",
        "<builtin>.TypeError",
        "nt._exit",
        "<builtin>.OSError",
        "os.execvpe",
        "<builtin>.ValueError"
    ],
    "nt._exit": [],
    "posix._exit": [],
    "os.spawnv": [
        "os._spawnvef"
    ],
    "os.spawnve": [
        "os._spawnvef"
    ],
    "os.spawnvp": [
        "os._spawnvef"
    ],
    "os.spawnvpe": [
        "os._spawnvef"
    ],
    "os.spawnl": [
        "os.spawnv"
    ],
    "os.spawnle": [
        "os.spawnve"
    ],
    "os.spawnlp": [
        "os.spawnvp"
    ],
    "os.spawnlpe": [
        "os.spawnvpe"
    ],
    "os.popen": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "subprocess.Popen.__init__",
        "_io.TextIOWrapper",
        "subprocess",
        "os._wrap_close.__init__",
        "<builtin>.type",
        "io",
        "<builtin>.ValueError"
    ],
    "os._wrap_close.__init__": [],
    "os._wrap_close.close": [
        "subprocess.Popen.wait"
    ],
    "os._wrap_close.__exit__": [
        "os._wrap_close.close"
    ],
    "os._wrap_close.__getattr__": [
        "<builtin>.getattr"
    ],
    "os._wrap_close.__iter__": [
        "<builtin>.iter"
    ],
    "os.fdopen": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "_io.open",
        "<builtin>.type",
        "io"
    ],
    "os.PathLike.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc._check_methods": [],
    "os._AddedDllDirectory.__exit__": [
        "os._AddedDllDirectory.close"
    ],
    "os._AddedDllDirectory.close": [],
    "os.add_dll_directory": [
        "os._AddedDllDirectory.__init__"
    ],
    "os._AddedDllDirectory.__init__": [],
    "stat.S_ISCHR": [
        "stat.S_IFMT"
    ],
    "stat.S_ISBLK": [
        "stat.S_IFMT"
    ],
    "stat.S_ISFIFO": [
        "stat.S_IFMT"
    ],
    "stat.S_ISSOCK": [
        "stat.S_IFMT"
    ],
    "stat.filemode": [
        "<list>.append"
    ],
    "ntpath.ismount": [
        "ntpath.splitdrive",
        "nt._getvolumepathname",
        "os._fspath",
        "<str>.rstrip",
        "ntpath.abspath",
        "ntpath._get_bothseps"
    ],
    "nt._getvolumepathname": [],
    "ntpath.expandvars": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "os._fspath",
        "string",
        "<str>.index",
        "os._fscodec.fsencode",
        "<list>.index",
        "<builtin>.getattr",
        "<builtin>.len",
        "os._fscodec.fsdecode"
    ],
    "ntpath._abspath_fallback": [
        "<builtin>.isinstance",
        "os._fspath",
        "ntpath.join",
        "ntpath.normpath",
        "ntpath.isabs"
    ],
    "ntpath.commonpath": [
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.max",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "genericpath._check_arg_types",
        "<builtin>.len",
        "<builtin>.min",
        "<builtin>.map",
        "<builtin>.ValueError"
    ],
    "genericpath.sameopenfile": [
        "genericpath.samestat"
    ],
    "posixpath.ismount": [
        "posixpath.join",
        "<builtin>.isinstance",
        "posixpath.realpath"
    ],
    "posixpath.expandvars": [
        "<str>.endswith",
        "<builtin>.isinstance",
        "<map>",
        "os._fspath",
        "re.compile",
        "os._fscodec.fsencode",
        "<str>.startswith",
        "re",
        "<builtin>.getattr",
        "os._fscodec.fsdecode",
        "<list>"
    ],
    "posixpath.commonpath": [
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.max",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "genericpath._check_arg_types",
        "<builtin>.min",
        "<builtin>.map",
        "<builtin>.ValueError"
    ],
    "shutil._fastcopy_sendfile": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "shutil._copyfileobj_readinto": [
        "<builtin>.memoryview",
        "<builtin>.bytearray"
    ],
    "shutil._samefile": [
        "genericpath.samestat",
        "<builtin>.isinstance",
        "posixpath.normcase",
        "ntpath.normcase",
        "genericpath.samefile",
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.hasattr"
    ],
    "shutil._stat": [
        "<builtin>.isinstance"
    ],
    "shutil._islink": [
        "posixpath.islink",
        "ntpath.islink",
        "<builtin>.isinstance"
    ],
    "shutil.copyfile": [
        "shutil._samefile",
        "shutil._islink",
        "shutil.copyfileobj",
        "shutil._fastcopy_sendfile",
        "shutil._stat",
        "<builtin>.enumerate",
        "shutil._copyfileobj_readinto",
        "shutil._fastcopy_fcopyfile",
        "<builtin>.open",
        "<builtin>.min"
    ],
    "shutil._fastcopy_fcopyfile": [],
    "shutil.copymode": [
        "posixpath.islink",
        "shutil._islink",
        "shutil._stat",
        "ntpath.islink",
        "stat.S_IMODE",
        "<builtin>.hasattr"
    ],
    "stat.S_IMODE": [],
    "shutil.copystat": [
        "posixpath.islink",
        "shutil._islink",
        "<builtin>.isinstance",
        "shutil.copystat.lookup",
        "ntpath.islink",
        "shutil.copystat._nop",
        "stat.S_IMODE",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "shutil._copyxattr"
    ],
    "shutil.copystat.lookup": [
        "<builtin>.getattr"
    ],
    "shutil.copystat._nop": [],
    "shutil._copyxattr": [],
    "shutil.copy": [
        "shutil.copyfile",
        "posixpath.join",
        "genericpath.isdir",
        "ntpath.basename",
        "nt._isdir",
        "posixpath.basename",
        "ntpath.join",
        "shutil.copymode"
    ],
    "shutil.copy2": [
        "shutil.copyfile",
        "shutil.copystat",
        "posixpath.join",
        "genericpath.isdir",
        "ntpath.basename",
        "nt._isdir",
        "posixpath.basename",
        "ntpath.join"
    ],
    "shutil._copytree": [
        "shutil.copystat",
        "<builtin>.set",
        "os._fspath",
        "posixpath.join",
        "<list>.extend",
        "shutil.copy2",
        "os.makedirs",
        "ntpath.join",
        "<builtin>.getattr",
        "<list>.append",
        "genericpath.exists",
        "shutil.copytree"
    ],
    "shutil.copytree": [
        "shutil._copytree",
        "<builtin>.list"
    ],
    "shutil._rmtree_islink": [
        "posixpath.islink",
        "ntpath.islink"
    ],
    "shutil._rmtree_unsafe": [
        "<builtin>.list",
        "shutil._rmtree_unsafe",
        "shutil._rmtree_isdir",
        "<builtin>.OSError",
        "shutil.rmtree.onerror"
    ],
    "shutil._rmtree_isdir": [],
    "shutil._rmtree_safe_fd": [
        "posixpath.join",
        "shutil.rmtree.onerror",
        "ntpath.join",
        "<builtin>.list"
    ],
    "shutil.rmtree": [
        "shutil._rmtree_islink",
        "genericpath.samestat",
        "<builtin>.isinstance",
        "shutil._rmtree_unsafe",
        "shutil._rmtree_safe_fd",
        "<builtin>.OSError",
        "shutil.rmtree.onerror"
    ],
    "shutil.rmtree.onerror": [],
    "shutil._basename": [
        "ntpath.basename",
        "posixpath.basename"
    ],
    "shutil.move": [
        "shutil._samefile",
        "posixpath.islink",
        "shutil._basename",
        "posixpath.join",
        "genericpath.isdir",
        "shutil.rmtree",
        "ntpath.islink",
        "shutil._destinsrc",
        "shutil.copy2",
        "ntpath.join",
        "nt._isdir",
        "genericpath.exists",
        "shutil.copytree"
    ],
    "shutil._destinsrc": [
        "posixpath.abspath",
        "<str>.endswith",
        "ntpath.abspath",
        "<str>.startswith"
    ],
    "shutil._get_uid": [
        "pwd.getpwnam"
    ],
    "pwd.getpwnam": [],
    "shutil._make_tarball": [
        "tarfile.TarFile.add",
        "shutil._get_uid",
        "shutil._get_gid",
        "tarfile.TarFile.open",
        "posixpath.dirname",
        "os.makedirs",
        "<builtin>.ValueError",
        "tarfile",
        "ntpath.dirname",
        "genericpath.exists"
    ],
    "tarfile": [
        "tarfile.main",
        "tarfile.ExtractError",
        "tarfile.TarError",
        "re",
        "tarfile.ExFileObject",
        "tarfile.ReadError",
        "tarfile.TarFile",
        "tarfile._LowLevelFile",
        "tarfile._Stream",
        "tarfile.CompressionError",
        "tarfile._StreamProxy",
        "copy",
        "tarfile.SubsequentHeaderError",
        "grp",
        "tarfile.EOFHeaderError",
        "struct",
        "os",
        "tarfile.TruncatedHeaderError",
        "io",
        "tarfile._FileInFile",
        "tarfile.EmptyHeaderError",
        "tarfile.StreamError",
        "shutil",
        "stat",
        "tarfile.HeaderError",
        "tarfile.TarInfo",
        "tarfile.InvalidHeaderError"
    ],
    "tarfile.TarError": [],
    "tarfile.ExtractError": [],
    "tarfile.ReadError": [],
    "tarfile.CompressionError": [],
    "tarfile.StreamError": [],
    "tarfile.HeaderError": [],
    "tarfile.EmptyHeaderError": [],
    "tarfile.TruncatedHeaderError": [],
    "tarfile.EOFHeaderError": [],
    "tarfile.InvalidHeaderError": [],
    "tarfile.SubsequentHeaderError": [],
    "tarfile._LowLevelFile": [],
    "tarfile._Stream": [],
    "tarfile._StreamProxy": [],
    "tarfile._FileInFile": [],
    "tarfile.ExFileObject": [],
    "tarfile.TarInfo": [
        "<builtin>.dict",
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "tarfile.TarFile": [
        "<builtin>.classmethod"
    ],
    "tarfile.main": [
        "argparse.ArgumentParser.parse_args",
        "argparse",
        "posixpath.splitext",
        "argparse.ArgumentParser.__init__",
        "ntpath.splitext",
        "argparse.ArgumentParser.exit",
        "tarfile.TarFile.open",
        "argparse._ActionsContainer.add_argument",
        "<list>.pop",
        "<builtin>.open",
        "<builtin>.len",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<builtin>.print",
        "argparse.ArgumentParser.format_help",
        "tarfile.is_tarfile"
    ],
    "tarfile.TarFile.open": [
        "tarfile._Stream.close",
        "tarfile._Stream.__init__",
        "tarfile.TarFile.__init__",
        "<builtin>.sorted",
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "tarfile.TarFile.taropen"
    ],
    "tarfile.TarFile.taropen": [
        "<builtin>.ValueError",
        "tarfile.TarFile.__init__"
    ],
    "tarfile.TarFile.__init__": [
        "bz2.BZ2File.seek",
        "tarfile._Stream.close",
        "<builtin>.isinstance",
        "lzma.LZMAFile.close",
        "bz2.BZ2File.tell",
        "bz2.BZ2File.write",
        "<list>.append",
        "<builtin>.str",
        "lzma.LZMAFile.tell",
        "ntpath.abspath",
        "<builtin>.ValueError",
        "<map>.copy",
        "tarfile.TarInfo.create_pax_global_header",
        "lzma.LZMAFile.seek",
        "tarfile.TarFile.next",
        "gzip.GzipFile.write",
        "tarfile._Stream.tell",
        "genericpath.exists",
        "gzip.GzipFile.seek",
        "builtins.open",
        "tarfile._Stream.seek",
        "tarfile._Stream.write",
        "tarfile.TarInfo.fromtarfile",
        "gzip.GzipFile.close",
        "bz2.BZ2File.close",
        "lzma.LZMAFile.write",
        "<builtin>.len",
        "posixpath.abspath",
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.next": [
        "<list>.append",
        "bz2.BZ2File.seek",
        "tarfile.TarFile._dbg",
        "gzip.GzipFile.seek",
        "tarfile.TarInfo.fromtarfile",
        "tarfile.TarFile._check",
        "lzma.LZMAFile.read",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.seek",
        "bz2.BZ2File.tell",
        "tarfile._Stream.seek",
        "<builtin>.str",
        "lzma.LZMAFile.tell",
        "bz2.BZ2File.read",
        "tarfile._Stream.tell",
        "tarfile._Stream.read"
    ],
    "tarfile.TarFile._check": [
        "<builtin>.OSError"
    ],
    "tarfile.TarInfo.fromtarfile": [
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "tarfile.TarInfo.frombuf",
        "tarfile.TarInfo._proc_member",
        "bz2.BZ2File.tell",
        "lzma.LZMAFile.tell",
        "bz2.BZ2File.read",
        "tarfile._Stream.tell",
        "tarfile._Stream.read"
    ],
    "tarfile.TarInfo.frombuf": [
        "<list>.append",
        "<str>.endswith",
        "tarfile.TarInfo.isdir",
        "tarfile.nts",
        "tarfile.nti",
        "tarfile.calc_chksums",
        "<str>.rstrip",
        "<builtin>.len",
        "<builtin>.bool",
        "<builtin>.range",
        "tarfile.TarInfo.__init__"
    ],
    "tarfile.nti": [
        "<builtin>.int",
        "tarfile.nts",
        "<str>.strip",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "tarfile.nts": [
        "<str>.find"
    ],
    "tarfile.calc_chksums": [
        "<builtin>.sum"
    ],
    "tarfile.TarInfo.__init__": [],
    "tarfile.TarInfo.isdir": [],
    "tarfile.TarInfo._proc_member": [
        "tarfile.TarInfo._proc_gnulong",
        "tarfile.TarInfo._proc_builtin",
        "tarfile.TarInfo._proc_pax",
        "tarfile.TarInfo._proc_sparse"
    ],
    "tarfile.TarInfo._proc_builtin": [
        "tarfile.TarInfo._block",
        "tarfile.TarInfo.isreg",
        "bz2.BZ2File.tell",
        "tarfile.TarInfo._apply_pax_info",
        "lzma.LZMAFile.tell",
        "tarfile._Stream.tell"
    ],
    "tarfile.TarInfo.isreg": [],
    "tarfile.TarInfo._block": [
        "<builtin>.divmod"
    ],
    "<builtin>.divmod": [],
    "tarfile.TarInfo._apply_pax_info": [
        "<map>.items",
        "<map>.copy",
        "<builtin>.setattr",
        "<builtin>.int"
    ],
    "tarfile.TarInfo._proc_pax": [
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "tarfile.TarInfo.fromtarfile",
        "<map>.copy",
        "tarfile.TarInfo._block",
        "<builtin>.int",
        "tarfile.TarInfo._proc_gnusparse_10",
        "re.compile",
        "tarfile.TarInfo._proc_gnusparse_00",
        "tarfile.TarInfo.isreg",
        "pathlib.PurePath.match",
        "tarfile.TarInfo._decode_pax_field",
        "tarfile.TarInfo._apply_pax_info",
        "tarfile.TarInfo._proc_gnusparse_01",
        "<map>.get",
        "re.search",
        "bz2.BZ2File.read",
        "tarfile._Stream.read"
    ],
    "tarfile.TarInfo._decode_pax_field": [],
    "tarfile.TarInfo._proc_gnusparse_10": [
        "gzip.GzipFile.read",
        "<builtin>.list",
        "lzma.LZMAFile.read",
        "<builtin>.len",
        "<builtin>.int",
        "<builtin>.zip",
        "bz2.BZ2File.tell",
        "<list>.append",
        "lzma.LZMAFile.tell",
        "bz2.BZ2File.read",
        "tarfile._Stream.tell",
        "tarfile._Stream.read"
    ],
    "tarfile.TarInfo._proc_gnusparse_00": [
        "<builtin>.list",
        "<builtin>.zip",
        "re.finditer",
        "<list>.append"
    ],
    "tarfile.TarInfo._proc_gnusparse_01": [
        "<builtin>.list",
        "<builtin>.zip",
        "<builtin>.int"
    ],
    "tarfile.TarInfo._proc_sparse": [
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "tarfile.TarInfo._block",
        "lzma.LZMAFile.tell",
        "tarfile.nti",
        "bz2.BZ2File.tell",
        "bz2.BZ2File.read",
        "<list>.append",
        "<builtin>.bool",
        "<builtin>.range",
        "tarfile._Stream.tell",
        "tarfile._Stream.read"
    ],
    "tarfile.TarInfo._proc_gnulong": [
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "tarfile.TarInfo.fromtarfile",
        "tarfile.TarInfo._block",
        "tarfile.nts",
        "bz2.BZ2File.read",
        "tarfile._Stream.read"
    ],
    "tarfile.TarFile._dbg": [
        "<builtin>.print"
    ],
    "tarfile.TarInfo.create_pax_global_header": [
        "tarfile.TarInfo._create_pax_generic_header"
    ],
    "tarfile.TarInfo._create_pax_generic_header": [
        "<map>.items",
        "<builtin>.bytes",
        "<builtin>.len",
        "tarfile.TarInfo._create_payload",
        "tarfile.TarInfo._create_header",
        "<builtin>.str"
    ],
    "tarfile.TarInfo._create_header": [
        "tarfile.calc_chksums",
        "<builtin>.bytes"
    ],
    "tarfile.TarInfo._create_payload": [
        "<builtin>.divmod",
        "<builtin>.len"
    ],
    "tarfile._Stream.__init__": [
        "zlib",
        "tarfile._Stream._init_write_gz",
        "tarfile._StreamProxy.close",
        "tarfile._StreamProxy.__init__",
        "tarfile._Stream._init_read_gz",
        "tarfile._StreamProxy.getcomptype",
        "tarfile._LowLevelFile.__init__",
        "tarfile._LowLevelFile.close",
        "bz2",
        "lzma"
    ],
    "tarfile._LowLevelFile.__init__": [
        "<builtin>.hasattr"
    ],
    "tarfile._StreamProxy.__init__": [
        "tarfile._StreamProxy.read",
        "tarfile._LowLevelFile.read"
    ],
    "tarfile._LowLevelFile.read": [],
    "tarfile._StreamProxy.getcomptype": [],
    "tarfile._Stream._init_write_gz": [
        "tarfile._Stream.__write",
        "<builtin>.int"
    ],
    "tarfile._Stream.__write": [
        "tarfile._LowLevelFile.write",
        "<builtin>.len"
    ],
    "tarfile._Stream._init_read_gz": [
        "<builtin>.ord",
        "tarfile._Stream.__read",
        "tarfile._Stream.read"
    ],
    "tarfile._Stream.__read": [
        "<list>.append",
        "tarfile._StreamProxy.read",
        "tarfile._LowLevelFile.read",
        "<builtin>.len"
    ],
    "tarfile._Stream.read": [
        "tarfile._Stream._read",
        "<builtin>.len"
    ],
    "tarfile._Stream._read": [
        "tarfile._Stream.__read",
        "tarfile._LowLevelFile.read",
        "<builtin>.len",
        "tarfile._StreamProxy.read",
        "<list>.append"
    ],
    "tarfile._Stream.tell": [],
    "tarfile._Stream.seek": [
        "<builtin>.divmod",
        "<builtin>.range",
        "tarfile._Stream.read"
    ],
    "tarfile._StreamProxy.read": [],
    "tarfile._Stream.write": [
        "tarfile._Stream.__write",
        "<builtin>.len"
    ],
    "tarfile._Stream.close": [
        "tarfile._LowLevelFile.write"
    ],
    "tarfile._LowLevelFile.write": [],
    "tarfile.is_tarfile": [
        "tarfile.TarFile.close",
        "<builtin>.open"
    ],
    "tarfile.TarFile.close": [
        "tarfile._Stream.write",
        "lzma.LZMAFile.write",
        "bz2.BZ2File.write",
        "<builtin>.divmod",
        "gzip.GzipFile.write"
    ],
    "shutil._get_gid": [],
    "tarfile.TarFile.add": [
        "tarfile.TarFile.add",
        "tarfile.TarFile._dbg",
        "tarfile.TarFile._check",
        "posixpath.join",
        "tarfile.TarInfo.isdir",
        "builtins.open",
        "tarfile.TarInfo.isreg",
        "<builtin>.sorted",
        "ntpath.join",
        "tarfile.TarFile.gettarinfo",
        "tarfile.TarFile.addfile",
        "<builtin>.filter",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "tarfile.TarFile.gettarinfo": [
        "ntpath.splitdrive",
        "stat.S_ISBLK",
        "stat.S_ISDIR",
        "tarfile.TarFile._check",
        "stat.S_ISFIFO",
        "<str>.replace",
        "<str>.lstrip",
        "stat.S_ISREG",
        "stat.S_ISLNK",
        "<map>",
        "stat.S_ISCHR",
        "attr._make.Attribute.__init__",
        "pathlib.Path.replace",
        "posixpath.splitdrive",
        "collections.UserDict.__init__",
        "<builtin>.hasattr",
        "tarfile.TarInfo.__init__",
        "<list>"
    ],
    "tarfile.TarFile.addfile": [
        "<list>.append",
        "tarfile._Stream.write",
        "tarfile.copyfileobj",
        "tarfile.TarFile._check",
        "lzma.LZMAFile.write",
        "copy.copy",
        "bz2.BZ2File.write",
        "tarfile.TarInfo.tobuf",
        "<builtin>.len",
        "<builtin>.divmod",
        "gzip.GzipFile.write"
    ],
    "tarfile.TarInfo.tobuf": [
        "tarfile.TarInfo.create_ustar_header",
        "tarfile.TarInfo.get_info",
        "tarfile.TarInfo.create_pax_header",
        "tarfile.TarInfo.create_gnu_header",
        "<builtin>.ValueError"
    ],
    "tarfile.TarInfo.get_info": [],
    "tarfile.TarInfo.create_pax_header": [
        "<builtin>.isinstance",
        "<map>.copy",
        "<builtin>.len",
        "tarfile.TarInfo._create_header",
        "<builtin>.str",
        "tarfile.TarInfo._create_pax_generic_header"
    ],
    "tarfile.TarInfo.create_gnu_header": [
        "tarfile.TarInfo._create_gnu_long_header",
        "tarfile.TarInfo._create_header",
        "<builtin>.len"
    ],
    "tarfile.TarInfo._create_gnu_long_header": [
        "tarfile.TarInfo._create_payload",
        "tarfile.TarInfo._create_header",
        "<builtin>.len"
    ],
    "tarfile.TarInfo.create_ustar_header": [
        "tarfile.TarInfo._posix_split_name",
        "tarfile.TarInfo._create_header",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "tarfile.TarInfo._posix_split_name": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "tarfile.copyfileobj": [
        "tarfile._Stream.write",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "lzma.LZMAFile.write",
        "shutil.copyfileobj",
        "bz2.BZ2File.write",
        "bz2.BZ2File.read",
        "<builtin>.len",
        "<builtin>.divmod",
        "gzip.GzipFile.write",
        "<builtin>.range",
        "tarfile._Stream.read"
    ],
    "shutil._make_zipfile": [
        "os.walk",
        "posixpath.normpath",
        "posixpath.join",
        "posixpath.dirname",
        "<builtin>.sorted",
        "os.makedirs",
        "zipfile.ZipFile.__init__",
        "ntpath.normpath",
        "ntpath.join",
        "genericpath.isfile",
        "collections.UserDict.__iter__",
        "ntpath.dirname",
        "zipfile",
        "genericpath.exists"
    ],
    "shutil.get_archive_formats": [
        "<map>.items"
    ],
    "shutil.register_archive_format": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "shutil.make_archive": [
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.ValueError"
    ],
    "shutil.get_unpack_formats": [
        "<map>.items"
    ],
    "shutil._check_unpack_options": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<map>.items"
    ],
    "shutil.register_unpack_format": [
        "shutil._check_unpack_options"
    ],
    "shutil._ensure_directory": [
        "genericpath.isdir",
        "posixpath.dirname",
        "os.makedirs",
        "nt._isdir",
        "ntpath.dirname"
    ],
    "shutil._unpack_zipfile": [
        "posixpath.join",
        "zipfile.is_zipfile",
        "zipfile.ZipFile.__init__",
        "ntpath.join",
        "zipfile.ZipFile.read",
        "<builtin>.open",
        "zipfile.ZipFile.infolist",
        "zipfile",
        "shutil._ensure_directory"
    ],
    "zipfile.is_zipfile": [
        "zipfile._check_zipfile",
        "<builtin>.hasattr",
        "<builtin>.open"
    ],
    "zipfile._check_zipfile": [
        "zipfile._EndRecData"
    ],
    "zipfile.ZipFile.infolist": [],
    "zipfile.ZipFile.read": [
        "zipfile.ZipFile.open"
    ],
    "shutil._unpack_tarfile": [
        "tarfile.TarFile.open",
        "tarfile.TarFile.extractall",
        "tarfile"
    ],
    "tarfile.TarFile.extractall": [
        "<list>.reverse",
        "tarfile.TarFile._dbg",
        "posixpath.join",
        "tarfile.TarInfo.isdir",
        "tarfile.TarFile.chmod",
        "copy.copy",
        "tarfile.TarFile.__iter__",
        "ntpath.join",
        "tarfile.TarFile.utime",
        "tarfile.TarFile.extract",
        "<list>.append",
        "<list>.sort",
        "tarfile.TarFile.chown"
    ],
    "tarfile.TarFile.__iter__": [
        "tarfile.TarFile.next",
        "<builtin>.len"
    ],
    "tarfile.TarFile.extract": [
        "tarfile.TarFile._dbg",
        "tarfile.TarInfo.islnk",
        "<builtin>.isinstance",
        "tarfile.TarFile._check",
        "posixpath.join",
        "tarfile.TarFile.getmember",
        "ntpath.join",
        "tarfile.TarFile._extract_member"
    ],
    "tarfile.TarFile.getmember": [
        "<builtin>.KeyError",
        "tarfile.TarFile._getmember"
    ],
    "tarfile.TarFile._getmember": [
        "<builtin>.reversed",
        "posixpath.normpath",
        "<list>.index",
        "ntpath.normpath",
        "tarfile.TarFile.getmembers"
    ],
    "tarfile.TarFile.getmembers": [
        "tarfile.TarFile._load",
        "tarfile.TarFile._check"
    ],
    "tarfile.TarFile._load": [
        "tarfile.TarFile.next"
    ],
    "tarfile.TarInfo.islnk": [],
    "tarfile.TarFile._extract_member": [
        "tarfile.TarInfo.isblk",
        "tarfile.TarFile.makefifo",
        "os.makedirs",
        "tarfile.TarFile.chown",
        "tarfile.TarFile.makelink",
        "tarfile.TarFile._dbg",
        "tarfile.TarFile.makedev",
        "tarfile.TarInfo.isreg",
        "pathlib.Path.replace",
        "tarfile.TarInfo.ischr",
        "tarfile.TarFile.makedir",
        "genericpath.exists",
        "tarfile.TarInfo.isfifo",
        "<str>.replace",
        "tarfile.TarInfo.islnk",
        "tarfile.TarInfo.isdir",
        "tarfile.TarFile.makefile",
        "tarfile.TarFile.utime",
        "tarfile.TarInfo.issym",
        "posixpath.dirname",
        "tarfile.TarFile.chmod",
        "<str>.rstrip",
        "ntpath.dirname",
        "tarfile.TarFile.makeunknown"
    ],
    "tarfile.TarInfo.issym": [],
    "tarfile.TarInfo.isfifo": [],
    "tarfile.TarInfo.ischr": [],
    "tarfile.TarInfo.isblk": [],
    "tarfile.TarFile.makefile": [
        "bz2.BZ2File.seek",
        "tarfile.copyfileobj",
        "gzip.GzipFile.seek",
        "builtins.open",
        "lzma.LZMAFile.seek",
        "tarfile._Stream.seek"
    ],
    "tarfile.TarFile.makeunknown": [
        "tarfile.TarFile.makefile",
        "tarfile.TarFile._dbg"
    ],
    "tarfile.TarFile.makelink": [
        "tarfile.TarFile._extract_member",
        "tarfile.TarInfo.issym",
        "tarfile.TarFile._find_link_target",
        "genericpath.exists"
    ],
    "tarfile.TarFile._find_link_target": [
        "<builtin>.KeyError",
        "posixpath.dirname",
        "tarfile.TarFile._getmember",
        "<builtin>.filter",
        "ntpath.dirname",
        "tarfile.TarInfo.issym"
    ],
    "tarfile.TarFile.makedev": [
        "tarfile.TarInfo.isblk",
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.makefifo": [
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.makedir": [],
    "tarfile.TarFile.chown": [
        "tarfile.TarInfo.issym",
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.chmod": [],
    "tarfile.TarFile.utime": [
        "<builtin>.hasattr"
    ],
    "shutil._find_unpack_format": [
        "<str>.endswith",
        "<map>.items"
    ],
    "shutil.unpack_archive": [
        "os._fspath",
        "<builtin>.dict",
        "<builtin>.ValueError",
        "shutil._find_unpack_format"
    ],
    "shutil.chown": [
        "<builtin>.isinstance",
        "shutil._get_gid",
        "shutil._get_uid",
        "<builtin>.LookupError",
        "<builtin>.ValueError"
    ],
    "<builtin>.LookupError": [],
    "fnmatch.fnmatch": [
        "fnmatch.fnmatchcase",
        "posixpath.normcase",
        "ntpath.normcase"
    ],
    "fnmatch.fnmatchcase": [
        "pathlib.PurePath.match",
        "<list>",
        "fnmatch._compile_pattern",
        "<map>"
    ],
    "fnmatch.filter": [
        "<map>",
        "fnmatch._compile_pattern",
        "posixpath.normcase",
        "ntpath.normcase",
        "<list>.append",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "bz2.BZ2File.__init__": [
        "_compression.DecompressReader.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "_io.BufferedReader",
        "builtins.open",
        "threading.RLock",
        "<builtin>.hasattr",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "_compression.DecompressReader.__init__": [],
    "_io.BufferedReader": [],
    "bz2.BZ2File.fileno": [
        "_compression.BaseStream._check_not_closed"
    ],
    "_compression.BaseStream._check_not_closed": [
        "<builtin>.ValueError"
    ],
    "bz2.BZ2File.seekable": [
        "bz2.BZ2File.readable"
    ],
    "bz2.BZ2File.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.readline": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "bz2.BZ2File.readlines": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "bz2.open": [
        "_io.TextIOWrapper",
        "bz2.BZ2File.__init__",
        "<str>.replace",
        "<builtin>.ValueError"
    ],
    "bz2.decompress": [
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "warnings.showwarning": [
        "warnings.WarningMessage.__init__",
        "warnings._showwarnmsg_impl"
    ],
    "warnings.formatwarning": [
        "warnings.WarningMessage.__init__",
        "warnings._formatwarnmsg_impl"
    ],
    "warnings.resetwarnings": [
        "warnings._filters_mutated"
    ],
    "warnings.catch_warnings.__repr__": [
        "<builtin>.type",
        "<list>.append"
    ],
    "warnings.catch_warnings.__enter__": [
        "<builtin>.RuntimeError"
    ],
    "warnings.catch_warnings.__exit__": [
        "<builtin>.RuntimeError"
    ],
    "warnings._warn_unawaited_coroutine": [
        "<list>.append",
        "<builtin>.list",
        "linecache",
        "traceback.format_list",
        "traceback",
        "<str>.rstrip",
        "warnings._warn_unawaited_coroutine.extract",
        "warnings.warn"
    ],
    "warnings._warn_unawaited_coroutine.extract": [
        "<builtin>.reversed",
        "linecache.getline"
    ],
    "traceback.format_list": [
        "traceback.StackSummary.from_list",
        "traceback.StackSummary.format"
    ],
    "_compression.BaseStream._check_can_read": [
        "_io.UnsupportedOperation",
        "lzma.LZMAFile.readable",
        "bz2.BZ2File.readable",
        "gzip.GzipFile.readable"
    ],
    "_io.UnsupportedOperation": [],
    "_compression.BaseStream._check_can_write": [
        "_io.UnsupportedOperation",
        "xml.sax.saxutils._gettextwriter.<lambda1>",
        "lzma.LZMAFile.writable",
        "gzip.GzipFile.writable",
        "bz2.BZ2File.writable"
    ],
    "_compression.BaseStream._check_can_seek": [
        "_io.UnsupportedOperation",
        "lzma.LZMAFile.readable",
        "gzip.GzipFile.readable",
        "bz2.BZ2File.readable",
        "bz2.BZ2File.seekable",
        "gzip.GzipFile.seekable",
        "lzma.LZMAFile.seekable"
    ],
    "_compression.DecompressReader.close": [
        "<builtin>.super"
    ],
    "_compression.DecompressReader.readinto": [
        "_compression.DecompressReader.read",
        "gzip._GzipReader.read",
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "_compression.DecompressReader.read": [
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "<builtin>.EOFError": [],
    "_compression.DecompressReader.seek": [
        "_compression.DecompressReader._rewind",
        "gzip._GzipReader.read",
        "gzip._GzipReader._rewind",
        "<builtin>.len",
        "<builtin>.min",
        "_compression.DecompressReader.read",
        "<builtin>.ValueError"
    ],
    "_compression.DecompressReader._rewind": [],
    "threading._RLock.__repr__": [
        "<builtin>.hex",
        "<builtin>.id"
    ],
    "<builtin>.hex": [],
    "threading._RLock.release": [
        "<builtin>.RuntimeError",
        "_thread.get_ident"
    ],
    "threading._RLock.__exit__": [
        "threading._RLock.release"
    ],
    "threading._RLock._release_save": [
        "<builtin>.RuntimeError"
    ],
    "threading._RLock._is_owned": [
        "_thread.get_ident"
    ],
    "threading.Condition.__enter__": [
        "threading._RLock.acquire"
    ],
    "threading.Condition.__exit__": [
        "threading._RLock.__exit__"
    ],
    "threading.Condition.__repr__": [
        "<builtin>.len"
    ],
    "threading.Condition._release_save": [
        "threading._RLock.release"
    ],
    "threading.Condition._acquire_restore": [
        "threading._RLock.acquire"
    ],
    "threading.Condition._is_owned": [
        "threading._RLock.acquire",
        "threading._RLock.release"
    ],
    "threading.Condition.wait": [
        "_thread.allocate_lock",
        "<builtin>.RuntimeError",
        "threading.Condition._is_owned",
        "threading.Condition._release_save"
    ],
    "threading.Condition.wait_for": [
        "threading.Barrier._wait.<lambda1>",
        "threading.Condition.wait",
        "time.monotonic"
    ],
    "threading.Condition.notify": [
        "_collections.deque",
        "<builtin>.RuntimeError",
        "threading.Condition._is_owned",
        "itertools.islice"
    ],
    "threading.Condition.notify_all": [
        "threading.Condition.notify",
        "<builtin>.len"
    ],
    "threading.Semaphore.__init__": [
        "_thread.allocate_lock",
        "threading.Condition.__init__",
        "<builtin>.ValueError"
    ],
    "threading.Semaphore.acquire": [
        "<builtin>.ValueError"
    ],
    "threading.Semaphore.__exit__": [
        "threading.Semaphore.release"
    ],
    "threading.Semaphore.release": [],
    "threading.BoundedSemaphore.__init__": [
        "threading.Semaphore.__init__"
    ],
    "threading.Event._reset_internal_locks": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "threading.Barrier.__init__": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "threading.Barrier._enter": [
        "threading.Condition.wait"
    ],
    "threading.Barrier._release": [
        "threading.Condition.notify_all",
        "threading.Barrier._break"
    ],
    "threading.Barrier._break": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._wait": [
        "threading.Barrier._break",
        "threading.Condition.wait_for"
    ],
    "threading.Barrier._wait.<lambda1>": [],
    "threading.Barrier._exit": [
        "threading.Condition.notify_all"
    ],
    "threading.Thread._reset_internal_locks": [
        "threading.Event._reset_internal_locks",
        "threading.Thread._set_tstate_lock"
    ],
    "threading.Thread.__repr__": [
        "threading._DummyThread.is_alive",
        "threading.Event.is_set",
        "threading.Thread.is_alive"
    ],
    "threading.Thread.is_alive": [
        "threading.Thread._wait_for_tstate_lock",
        "threading.Event.is_set"
    ],
    "threading.Thread._wait_for_tstate_lock": [
        "threading._DummyThread._stop",
        "threading.Thread._stop"
    ],
    "threading.Thread._stop": [],
    "threading._DummyThread._stop": [],
    "threading._DummyThread.is_alive": [
        "threading.Event.is_set"
    ],
    "threading.Thread._bootstrap": [
        "threading.Thread._bootstrap_inner"
    ],
    "threading.Thread._bootstrap_inner": [
        "threading.Thread._set_native_id",
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_ident",
        "threading._make_invoke_excepthook.invoke_excepthook",
        "textual.drivers.win32.EventMonitor.run",
        "threading.Thread.run",
        "pydoc._start_server.ServerThread.run",
        "threading.Event.set"
    ],
    "pydoc._start_server.ServerThread.run": [
        "<builtin>.staticmethod",
        "pydoc._start_server.DocServer.serve_until_quit",
        "pydoc._start_server.DocServer.__init__"
    ],
    "pydoc._start_server.DocServer.__init__": [],
    "pydoc._start_server.DocServer.serve_until_quit": [],
    "threading.Thread.run": [
        "multiprocessing.pool.Pool._handle_results",
        "multiprocessing.pool.Pool._handle_workers",
        "socketserver.ThreadingMixIn.process_request_thread",
        "multiprocessing.resource_sharer._ResourceSharer._serve",
        "multiprocessing.managers.Server.accepter",
        "concurrent.futures.thread._worker",
        "textual.drivers.linux_driver.LinuxDriver.run_input_thread",
        "concurrent.futures.process._queue_management_worker",
        "multiprocessing.queues.Queue._feed",
        "multiprocessing.managers.Server.handle_request",
        "multiprocessing.pool.Pool._handle_tasks"
    ],
    "threading._make_invoke_excepthook.invoke_excepthook": [
        "threading.excepthook",
        "threading.ExceptHookArgs"
    ],
    "threading.ExceptHookArgs": [],
    "threading.excepthook": [
        "<builtin>.print",
        "traceback.print_exception",
        "_thread.get_ident",
        "rich.file_proxy.FileProxy.flush"
    ],
    "threading.Thread.join": [
        "threading.Event.is_set",
        "threading.Thread._wait_for_tstate_lock",
        "threading.current_thread",
        "<builtin>.max",
        "<builtin>.RuntimeError"
    ],
    "threading.Thread.isAlive": [
        "warnings",
        "threading._DummyThread.is_alive",
        "warnings.warn",
        "threading.Thread.is_alive"
    ],
    "threading.Timer.__init__": [
        "threading.Event.__init__",
        "threading.Thread.__init__"
    ],
    "threading.Timer.cancel": [
        "threading.Event.set"
    ],
    "threading.Timer.run": [
        "threading.Event.wait",
        "threading.Event.is_set",
        "threading.Event.set"
    ],
    "threading._enumerate": [
        "<builtin>.list",
        "<map>.values"
    ],
    "threading._shutdown": [
        "threading.Thread._stop"
    ],
    "threading._after_fork": [
        "_thread.allocate_lock",
        "<builtin>.set",
        "_thread.get_ident",
        "threading._MainThread.__init__"
    ],
    "traceback.print_tb": [
        "traceback.print_list",
        "traceback.extract_tb"
    ],
    "traceback.extract_tb": [
        "traceback.StackSummary.extract",
        "traceback.walk_tb"
    ],
    "traceback.format_tb": [
        "traceback.extract_tb",
        "traceback.StackSummary.format"
    ],
    "traceback.format_exception": [
        "traceback.TracebackException.format",
        "<builtin>.list",
        "<builtin>.type",
        "traceback.TracebackException.__init__"
    ],
    "traceback.print_exc": [
        "traceback.print_exception"
    ],
    "traceback.format_exc": [
        "traceback.format_exception"
    ],
    "traceback.print_last": [
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "traceback.print_exception"
    ],
    "traceback.format_stack": [
        "traceback.format_list",
        "traceback.extract_stack"
    ],
    "traceback.FrameSummary.__eq__": [
        "<builtin>.isinstance"
    ],
    "traceback.FrameSummary.__iter__": [
        "<builtin>.iter"
    ],
    "traceback.FrameSummary.line": [
        "<str>.strip",
        "linecache.getline"
    ],
    "traceback.TracebackException.from_exception": [
        "<builtin>.type",
        "traceback.TracebackException.__init__"
    ],
    "tokenize.any": [
        "tokenize.group"
    ],
    "tokenize.Untokenizer.add_whitespace": [
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "tokenize.Untokenizer.untokenize": [
        "<builtin>.len",
        "<builtin>.iter",
        "tokenize.Untokenizer.add_whitespace",
        "<list>.pop",
        "<list>.append",
        "tokenize.Untokenizer.compat"
    ],
    "tokenize.Untokenizer.compat": [
        "<list>.pop",
        "<list>",
        "<list>.append"
    ],
    "tokenize.untokenize": [
        "tokenize.Untokenizer.untokenize",
        "tokenize.Untokenizer.__init__"
    ],
    "tokenize.Untokenizer.__init__": [],
    "codecs.CodecInfo.__repr__": [
        "<builtin>.id"
    ],
    "codecs.BufferedIncrementalEncoder.__init__": [
        "codecs.IncrementalEncoder.__init__"
    ],
    "codecs.IncrementalEncoder.__init__": [],
    "codecs.BufferedIncrementalEncoder.encode": [
        "codecs.BufferedIncrementalEncoder._buffer_encode"
    ],
    "codecs.BufferedIncrementalEncoder._buffer_encode": [],
    "codecs.BufferedIncrementalEncoder.reset": [
        "codecs.IncrementalEncoder.reset"
    ],
    "codecs.IncrementalEncoder.reset": [],
    "codecs.BufferedIncrementalDecoder.__init__": [
        "codecs.IncrementalDecoder.__init__"
    ],
    "codecs.IncrementalDecoder.__init__": [],
    "codecs.BufferedIncrementalDecoder.decode": [
        "codecs.BufferedIncrementalDecoder._buffer_decode"
    ],
    "codecs.BufferedIncrementalDecoder._buffer_decode": [],
    "codecs.BufferedIncrementalDecoder.reset": [
        "codecs.IncrementalDecoder.reset"
    ],
    "codecs.IncrementalDecoder.reset": [],
    "codecs.StreamWriter.write": [
        "codecs.Codec.encode"
    ],
    "codecs.Codec.encode": [],
    "codecs.StreamWriter.writelines": [
        "codecs.StreamWriter.write"
    ],
    "codecs.StreamWriter.seek": [
        "codecs.StreamWriter.reset"
    ],
    "codecs.StreamWriter.reset": [],
    "codecs.StreamWriter.__getattr__": [
        "<builtin>.getattr"
    ],
    "codecs.StreamReader.read": [
        "codecs.StreamReader.decode",
        "<builtin>.len"
    ],
    "codecs.StreamReader.decode": [],
    "codecs.StreamReader.readline": [
        "codecs.StreamReader.read",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "codecs.StreamReader.readlines": [
        "codecs.StreamReader.read"
    ],
    "codecs.StreamReader.seek": [
        "codecs.StreamReader.reset"
    ],
    "codecs.StreamReader.reset": [],
    "codecs.StreamReader.__next__": [
        "codecs.StreamReader.readline"
    ],
    "codecs.StreamReader.__getattr__": [
        "<builtin>.getattr"
    ],
    "codecs.StreamReaderWriter.__next__": [
        "<builtin>.next"
    ],
    "codecs.StreamReaderWriter.__getattr__": [
        "<builtin>.getattr"
    ],
    "codecs.StreamRecoder.__next__": [
        "<builtin>.next"
    ],
    "codecs.StreamRecoder.__getattr__": [
        "<builtin>.getattr"
    ],
    "codecs.open": [
        "codecs.StreamReaderWriter.__init__"
    ],
    "codecs.StreamReaderWriter.__init__": [],
    "codecs.getincrementalencoder": [
        "<builtin>.LookupError"
    ],
    "codecs.getincrementaldecoder": [
        "<builtin>.LookupError"
    ],
    "codecs.iterencode": [
        "codecs.getincrementalencoder"
    ],
    "codecs.iterdecode": [
        "codecs.getincrementaldecoder"
    ],
    "encodings.search_function": [
        "<builtin>.isinstance",
        "<builtin>.callable",
        "<builtin>.__import__",
        "<map>.get",
        "<builtin>.len",
        "encodings.normalize_encoding"
    ],
    "encodings.mbcs": [
        "encodings.mbcs.StreamReader",
        "encodings.mbcs.IncrementalEncoder",
        "codecs",
        "encodings.mbcs.StreamWriter",
        "encodings.mbcs.IncrementalDecoder"
    ],
    "encodings._alias_mbcs": [
        "encodings.mbcs.getregentry",
        "encodings.mbcs"
    ],
    "encodings.mbcs.IncrementalEncoder": [],
    "encodings.mbcs.IncrementalDecoder": [],
    "encodings.mbcs.StreamWriter": [],
    "encodings.mbcs.StreamReader": [],
    "encodings.mbcs.getregentry": [],
    "_threading_local._localimpl.__init__": [
        "<builtin>.id",
        "<builtin>.str"
    ],
    "_threading_local._localimpl.get_dict": [
        "threading.current_thread",
        "<builtin>.id"
    ],
    "_threading_local._localimpl.create_dict": [
        "threading.current_thread",
        "_weakref.ref",
        "<builtin>.id"
    ],
    "_threading_local.local.__new__": [
        "<builtin>.TypeError",
        "_threading_local._localimpl.__init__",
        "_threading_local._localimpl.create_dict",
        "threading.RLock"
    ],
    "_threading_local.local.__getattribute__": [
        "_threading_local._patch"
    ],
    "_threading_local._patch": [],
    "_threading_local.local.__setattr__": [
        "<builtin>.AttributeError",
        "_threading_local._patch"
    ],
    "_threading_local.local.__delattr__": [
        "<builtin>.AttributeError",
        "_threading_local._patch"
    ],
    "weakref.WeakMethod.__new__": [
        "<builtin>.TypeError",
        "_weakref.ref",
        "<builtin>.type"
    ],
    "weakref.WeakMethod.__call__": [
        "<builtin>.super"
    ],
    "weakref.WeakMethod.__eq__": [
        "<builtin>.isinstance"
    ],
    "weakref.WeakMethod.__ne__": [
        "<builtin>.isinstance"
    ],
    "weakref.WeakValueDictionary.__getitem__": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.KeyError"
    ],
    "weakref.WeakValueDictionary.__delitem__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__len__": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.len"
    ],
    "weakref.WeakValueDictionary.__contains__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__repr__": [
        "<builtin>.id"
    ],
    "weakref.WeakValueDictionary.__setitem__": [
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary.copy": [
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.WeakValueDictionary.__init__",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.__deepcopy__": [
        "weakref.WeakValueDictionary._commit_removals",
        "copy",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.get": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.items": [
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.keys": [
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.itervaluerefs": [
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.values": [
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.popitem": [
        "weakref.WeakValueDictionary._commit_removals",
        "<map>.popitem"
    ],
    "<map>.popitem": [],
    "weakref.WeakValueDictionary.pop": [
        "weakref.WeakValueDictionary._commit_removals",
        "<map>.pop",
        "<builtin>.KeyError",
        "<map>"
    ],
    "weakref.WeakValueDictionary.setdefault": [
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary.valuerefs": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.list",
        "<map>.values"
    ],
    "weakref.WeakKeyDictionary._commit_removals": [
        "<list>.pop"
    ],
    "weakref.WeakKeyDictionary.__delitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__getitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__len__": [
        "weakref.WeakKeyDictionary._scrub_removals",
        "<builtin>.len"
    ],
    "weakref.WeakKeyDictionary._scrub_removals": [],
    "weakref.WeakKeyDictionary.__repr__": [
        "<builtin>.id"
    ],
    "weakref.WeakKeyDictionary.__setitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.copy": [
        "weakref.WeakKeyDictionary.__init__",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.__deepcopy__": [
        "copy",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.get": [
        "<map>.get"
    ],
    "weakref.WeakKeyDictionary.__contains__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.items": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.keys": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.values": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.keyrefs": [
        "<builtin>.list"
    ],
    "weakref.WeakKeyDictionary.popitem": [
        "<map>.popitem",
        "<map>"
    ],
    "weakref.WeakKeyDictionary.pop": [
        "<map>.pop"
    ],
    "weakref.WeakKeyDictionary.setdefault": [
        "<map>.setdefault"
    ],
    "weakref.finalize.__init__": [
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.next",
        "<builtin>.tuple",
        "_weakref.ref",
        "<builtin>.len",
        "warnings.warn"
    ],
    "weakref.finalize.__call__": [
        "<map>.pop"
    ],
    "weakref.finalize.detach": [
        "<map>.pop",
        "<map>.get"
    ],
    "weakref.finalize.peek": [
        "<map>.get"
    ],
    "weakref.finalize.atexit": [
        "<builtin>.bool",
        "<map>.get"
    ],
    "weakref.finalize.__repr__": [
        "<builtin>.type",
        "<builtin>.id",
        "<map>.get"
    ],
    "weakref.finalize._select_for_exit": [
        "<map>.items"
    ],
    "weakref.finalize._exitfunc": [
        "weakref.finalize._select_for_exit"
    ],
    "weakref.WeakValueDictionary.__init__.remove": [
        "_weakref._remove_dead_weakref"
    ],
    "contextlib.ContextDecorator.__call__": [
        "functools.wraps"
    ],
    "contextlib._GeneratorContextManagerBase.__init__": [
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "contextlib._GeneratorContextManager.__enter__": [
        "<builtin>.next",
        "<builtin>.RuntimeError"
    ],
    "contextlib._GeneratorContextManager.__exit__": [
        "<builtin>.next",
        "<builtin>.RuntimeError",
        "<builtin>.type"
    ],
    "contextlib._AsyncGeneratorContextManager.__aenter__": [
        "<builtin>.RuntimeError"
    ],
    "contextlib._AsyncGeneratorContextManager.__aexit__": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance"
    ],
    "contextlib.asynccontextmanager": [
        "functools.wraps"
    ],
    "contextlib._RedirectStream.__enter__": [
        "<builtin>.setattr",
        "<list>.append"
    ],
    "contextlib._RedirectStream.__exit__": [
        "<list>.pop",
        "<builtin>.setattr"
    ],
    "contextlib.suppress.__exit__": [
        "<builtin>.issubclass"
    ],
    "contextlib._BaseExitStack.__init__": [
        "_collections.deque"
    ],
    "contextlib._BaseExitStack.pop_all": [
        "_collections.deque",
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack.push": [
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack._push_exit_callback": [],
    "contextlib._BaseExitStack.enter_context": [
        "contextlib._BaseExitStack._push_cm_exit",
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack._push_cm_exit": [
        "contextlib._BaseExitStack._create_exit_wrapper",
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib._BaseExitStack._create_exit_wrapper": [],
    "contextlib._BaseExitStack.callback": [
        "contextlib._BaseExitStack._create_cb_wrapper",
        "warnings",
        "<builtin>.TypeError",
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.len",
        "warnings.warn"
    ],
    "contextlib._BaseExitStack._create_cb_wrapper": [],
    "contextlib.ExitStack.__exit__": [
        "contextlib.ExitStack.__exit__._fix_exception_context"
    ],
    "contextlib.ExitStack.__exit__._fix_exception_context": [],
    "contextlib.ExitStack.close": [
        "contextlib.ExitStack.__exit__"
    ],
    "contextlib.AsyncExitStack.enter_async_context": [
        "<builtin>.type",
        "contextlib.AsyncExitStack._push_async_cm_exit"
    ],
    "contextlib.AsyncExitStack._push_async_cm_exit": [
        "contextlib.AsyncExitStack._create_async_exit_wrapper",
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib.AsyncExitStack._create_async_exit_wrapper": [],
    "contextlib.AsyncExitStack.push_async_exit": [
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.type"
    ],
    "contextlib.AsyncExitStack.push_async_callback": [
        "<builtin>.len",
        "warnings",
        "<builtin>.TypeError",
        "contextlib._BaseExitStack._push_exit_callback",
        "contextlib.AsyncExitStack._create_async_cb_wrapper",
        "warnings.warn"
    ],
    "contextlib.AsyncExitStack._create_async_cb_wrapper": [],
    "contextlib.AsyncExitStack.aclose": [
        "contextlib.AsyncExitStack.__aexit__"
    ],
    "contextlib.AsyncExitStack.__aexit__": [
        "contextlib.AsyncExitStack.__aexit__._fix_exception_context"
    ],
    "contextlib.AsyncExitStack.__aexit__._fix_exception_context": [],
    "lzma.LZMAFile.__init__": [
        "_compression.DecompressReader.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "_io.BufferedReader",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "lzma.LZMAFile.fileno": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.seekable": [
        "lzma.LZMAFile.readable"
    ],
    "lzma.LZMAFile.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.peek": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.read": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.read1": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.readline": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.write": [
        "_compression.BaseStream._check_can_write",
        "<builtin>.len"
    ],
    "lzma.LZMAFile.seek": [
        "_compression.BaseStream._check_can_seek"
    ],
    "lzma.LZMAFile.tell": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.open": [
        "_io.TextIOWrapper",
        "lzma.LZMAFile.__init__",
        "<str>.replace",
        "<builtin>.ValueError"
    ],
    "lzma.decompress": [
        "<list>.append"
    ],
    "gettext._tokenize": [
        "<builtin>.ValueError",
        "re.finditer"
    ],
    "gettext._error": [
        "<builtin>.ValueError"
    ],
    "gettext._parse": [
        "<builtin>.int",
        "<builtin>.next",
        "gettext._parse",
        "<map>.get",
        "gettext._error",
        "<builtin>.ValueError"
    ],
    "gettext._as_int": [
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.round",
        "warnings.warn"
    ],
    "gettext.c2py": [
        "gettext._tokenize",
        "gettext._parse",
        "<builtin>.exec",
        "<builtin>.len",
        "gettext._error",
        "<builtin>.ValueError"
    ],
    "gettext.NullTranslations.lgettext": [
        "warnings",
        "locale.getpreferredencoding",
        "warnings.catch_warnings.__init__",
        "warnings.warn"
    ],
    "locale.getpreferredencoding": [
        "locale.getdefaultlocale"
    ],
    "gettext.NullTranslations.lngettext": [
        "warnings",
        "locale.getpreferredencoding",
        "warnings.catch_warnings.__init__",
        "warnings.warn"
    ],
    "gettext.NullTranslations.output_charset": [
        "warnings",
        "warnings.warn"
    ],
    "gettext.NullTranslations.set_output_charset": [
        "warnings",
        "warnings.warn"
    ],
    "gettext.NullTranslations.install": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "gettext.GNUTranslations._parse": [
        "<builtin>.str",
        "<builtin>.enumerate",
        "struct",
        "gettext.GNUTranslations._get_versions",
        "<builtin>.getattr",
        "<builtin>.len",
        "<builtin>.OSError",
        "gettext.c2py",
        "<builtin>.range"
    ],
    "gettext.GNUTranslations._get_versions": [],
    "gettext.GNUTranslations.lgettext": [
        "warnings",
        "<builtin>.object",
        "<map>.get",
        "locale.getpreferredencoding",
        "warnings.warn"
    ],
    "gettext.GNUTranslations.lngettext": [
        "warnings",
        "gettext.GNUTranslations._parse.<lambda1>",
        "warnings.warn",
        "locale.getpreferredencoding"
    ],
    "gettext.GNUTranslations._parse.<lambda1>": [
        "<builtin>.int"
    ],
    "gettext.GNUTranslations.gettext": [
        "<map>.get",
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.ngettext": [
        "gettext.GNUTranslations._parse.<lambda1>"
    ],
    "gettext.GNUTranslations.pgettext": [
        "<map>.get",
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.npgettext": [
        "gettext.GNUTranslations._parse.<lambda1>"
    ],
    "gettext.install": [
        "gettext.NullTranslations.install",
        "gettext.translation"
    ],
    "gettext.bindtextdomain": [
        "<map>.get"
    ],
    "gettext.bind_textdomain_codeset": [
        "warnings",
        "warnings.warn",
        "<map>.get"
    ],
    "gettext.ldgettext": [
        "warnings",
        "<map>.get",
        "locale.getpreferredencoding",
        "warnings.catch_warnings.__init__",
        "warnings.warn"
    ],
    "gettext.ldngettext": [
        "warnings",
        "<map>.get",
        "locale.getpreferredencoding",
        "warnings.catch_warnings.__init__",
        "warnings.warn"
    ],
    "gettext.dpgettext": [
        "gettext.NullTranslations.pgettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.NullTranslations.pgettext": [],
    "gettext.dnpgettext": [
        "gettext.NullTranslations.npgettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.NullTranslations.npgettext": [],
    "gettext.lgettext": [
        "warnings",
        "warnings.catch_warnings.__init__",
        "warnings.warn"
    ],
    "gettext.lngettext": [
        "warnings",
        "warnings.catch_warnings.__init__",
        "warnings.warn"
    ],
    "gettext.pgettext": [
        "gettext.dpgettext"
    ],
    "gettext.npgettext": [
        "gettext.dnpgettext"
    ],
    "locale._grouping_intervals": [
        "<builtin>.ValueError"
    ],
    "locale._group": [
        "<list>.reverse",
        "<builtin>.len",
        "locale.localeconv",
        "<str>.rstrip",
        "<list>.append",
        "locale._grouping_intervals"
    ],
    "locale._strip_padding": [
        "<builtin>.len"
    ],
    "locale._format": [
        "locale._strip_padding",
        "locale.localeconv",
        "locale._group"
    ],
    "locale.format": [
        "locale._format",
        "warnings",
        "<builtin>.len",
        "<builtin>.repr",
        "warnings.warn",
        "<builtin>.ValueError",
        "pathlib.PurePath.match"
    ],
    "locale.currency": [
        "<str>.replace",
        "locale._format",
        "locale.localeconv",
        "<builtin>.abs",
        "<builtin>.ValueError"
    ],
    "<builtin>.abs": [],
    "locale.str": [
        "locale._format"
    ],
    "copy._deepcopy_list": [
        "<builtin>.id",
        "<list>"
    ],
    "copy._deepcopy_tuple": [
        "copy.deepcopy",
        "<builtin>.tuple",
        "<builtin>.zip",
        "<builtin>.id"
    ],
    "copy._deepcopy_dict": [
        "copy.deepcopy",
        "<builtin>.id"
    ],
    "copy._deepcopy_method": [
        "copy.deepcopy",
        "<builtin>.type"
    ],
    "tracemalloc._format_size": [
        "<builtin>.abs"
    ],
    "tracemalloc.Statistic.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Statistic.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.StatisticDiff.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.StatisticDiff.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.StatisticDiff._sort_key": [
        "<builtin>.abs"
    ],
    "tracemalloc._compare_grouped_stats": [
        "<map>.items",
        "tracemalloc.StatisticDiff.__init__",
        "<list>.append"
    ],
    "tracemalloc.StatisticDiff.__init__": [],
    "tracemalloc.Frame.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Traceback.__init__": [
        "<builtin>.tuple",
        "<builtin>.reversed"
    ],
    "tracemalloc.Traceback.__len__": [
        "<builtin>.len"
    ],
    "tracemalloc.Traceback.__getitem__": [
        "<builtin>.tuple",
        "tracemalloc.Frame.__init__",
        "<builtin>.isinstance"
    ],
    "tracemalloc.Frame.__init__": [],
    "tracemalloc.Traceback.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Traceback.__str__": [
        "<builtin>.str"
    ],
    "tracemalloc.Traceback.__repr__": [
        "<builtin>.tuple"
    ],
    "tracemalloc.Traceback.format": [
        "<builtin>.reversed",
        "<str>.strip",
        "linecache.getline",
        "<list>.append"
    ],
    "tracemalloc.get_object_traceback": [
        "tracemalloc.Traceback.__init__",
        "_tracemalloc._get_object_traceback"
    ],
    "_tracemalloc._get_object_traceback": [],
    "tracemalloc.Trace.traceback": [
        "tracemalloc.Traceback.__init__"
    ],
    "tracemalloc.Trace.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Trace.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.Trace.__repr__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc._Traces.__len__": [
        "<builtin>.len"
    ],
    "tracemalloc._Traces.__getitem__": [
        "tracemalloc.Trace.__init__",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "tracemalloc.Trace.__init__": [],
    "tracemalloc._Traces.__repr__": [
        "<builtin>.len"
    ],
    "tracemalloc.Filter.__init__": [
        "tracemalloc._normalize_filename",
        "<builtin>.super"
    ],
    "tracemalloc._normalize_filename": [],
    "tracemalloc.Filter._match_frame_impl": [
        "tracemalloc._normalize_filename",
        "fnmatch.fnmatch"
    ],
    "tracemalloc.Filter._match_frame": [
        "tracemalloc.Filter._match_frame_impl"
    ],
    "tracemalloc.Filter._match_traceback": [
        "tracemalloc.Filter._match_frame_impl",
        "tracemalloc.Filter._match_frame",
        "<builtin>.any"
    ],
    "tracemalloc.Filter._match": [
        "tracemalloc.Filter._match_traceback"
    ],
    "tracemalloc.DomainFilter.__init__": [
        "<builtin>.super"
    ],
    "tracemalloc.Snapshot.__init__": [
        "tracemalloc._Traces.__init__"
    ],
    "tracemalloc._Traces.__init__": [],
    "tracemalloc.Snapshot.dump": [
        "pickle._dump",
        "<builtin>.open"
    ],
    "pickle._dump": [
        "pickle._Pickler.dump",
        "pickle._Pickler.__init__"
    ],
    "pickle._Pickler.__init__": [
        "<builtin>.TypeError",
        "pickle._Framer.__init__",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "pickle._Framer.__init__": [],
    "pickle._Pickler.dump": [
        "pickle._Pickler.save",
        "pickle._Framer.start_framing",
        "pickle._Framer.end_framing",
        "pickle._Framer.write",
        "<builtin>.hasattr"
    ],
    "pickle._Framer.write": [],
    "pickle._Framer.start_framing": [
        "_io.BytesIO"
    ],
    "pickle._Pickler.save": [
        "pickle._Pickler.save_global",
        "<map>",
        "<builtin>.isinstance",
        "<builtin>.len",
        "pickle._Pickler.get",
        "<builtin>.issubclass",
        "pickle._Pickler.save_reduce",
        "<map>.get",
        "pickle._Pickler.save_pers",
        "pickle._Framer.commit_frame",
        "pickle._Pickler.persistent_id",
        "pickle._Framer.write",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "pickle._Framer.commit_frame": [
        "pickle._Framer.write",
        "_io.BytesIO",
        "<builtin>.len"
    ],
    "pickle._Pickler.persistent_id": [],
    "pickle._Pickler.save_pers": [
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.str"
    ],
    "pickle._Pickler.get": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.save_global": [
        "pickle._Pickler.save",
        "pickle._Pickler.memoize",
        "<builtin>.bytes",
        "pickle.whichmodule",
        "pickle._Pickler.save_reduce",
        "<builtin>.__import__",
        "<map>.get",
        "<builtin>.getattr",
        "pickle._getattribute",
        "pickle._Framer.write",
        "<str>.rpartition"
    ],
    "pickle.whichmodule": [
        "pickle._getattribute",
        "<builtin>.list",
        "<builtin>.getattr"
    ],
    "pickle._getattribute": [
        "<builtin>.AttributeError",
        "<builtin>.getattr"
    ],
    "pickle._Pickler.save_reduce": [
        "pickle._Pickler.save",
        "pickle._Pickler._batch_setitems",
        "<builtin>.isinstance",
        "pickle._Pickler.memoize",
        "pickle._Pickler.get",
        "pickle._Pickler._batch_appends",
        "<builtin>.callable",
        "<builtin>.getattr",
        "pickle._Framer.write",
        "<builtin>.hasattr",
        "<builtin>.id"
    ],
    "pickle._Pickler.memoize": [
        "pickle._Pickler.put",
        "pickle._Framer.write",
        "<builtin>.id",
        "<builtin>.len"
    ],
    "pickle._Pickler.put": [
        "<builtin>.repr"
    ],
    "pickle._Pickler._batch_appends": [
        "pickle._Pickler.save",
        "<builtin>.list",
        "<builtin>.iter",
        "itertools.islice",
        "<builtin>.len",
        "pickle._Framer.write"
    ],
    "pickle._Pickler._batch_setitems": [
        "pickle._Pickler.save",
        "<builtin>.list",
        "<builtin>.iter",
        "itertools.islice",
        "<builtin>.len",
        "pickle._Framer.write"
    ],
    "pickle._Framer.end_framing": [
        "pickle._Framer.commit_frame"
    ],
    "tracemalloc.Snapshot.load": [
        "pickle._load",
        "<builtin>.open"
    ],
    "tracemalloc.Snapshot._filter_trace": [
        "<builtin>.any"
    ],
    "tracemalloc.Snapshot.filter_traces": [
        "<builtin>.isinstance",
        "tracemalloc.Snapshot._filter_trace",
        "<builtin>.TypeError",
        "tracemalloc.Snapshot.__init__",
        "<builtin>.type",
        "<list>.append"
    ],
    "tracemalloc.Snapshot._group_by": [
        "tracemalloc.Traceback.__init__",
        "tracemalloc.Statistic.__init__",
        "<builtin>.ValueError"
    ],
    "tracemalloc.Statistic.__init__": [],
    "tracemalloc.Snapshot.statistics": [
        "tracemalloc.Snapshot._group_by",
        "<builtin>.list",
        "<map>.values"
    ],
    "tracemalloc.Snapshot.compare_to": [
        "tracemalloc.Snapshot._group_by",
        "tracemalloc._compare_grouped_stats",
        "<list>.sort"
    ],
    "tracemalloc.take_snapshot": [
        "<builtin>.RuntimeError",
        "tracemalloc.Snapshot.__init__",
        "_tracemalloc._get_traces"
    ],
    "_tracemalloc._get_traces": [],
    "pickle._Framer.write_large_bytes": [
        "pickle._Framer.commit_frame"
    ],
    "pickle._Unframer.readinto": [
        "<builtin>.len"
    ],
    "pickle._Unframer.load_frame": [
        "_io.BytesIO"
    ],
    "pickle._Pickler.clear_memo": [
        "<map>.clear"
    ],
    "pickle._Pickler.save_none": [
        "pickle._Framer.write"
    ],
    "pickle._Pickler.save_bool": [
        "pickle._Framer.write"
    ],
    "pickle._Pickler.save_long": [
        "pickle._Framer.write",
        "<builtin>.len",
        "<builtin>.repr",
        "pickle.encode_long"
    ],
    "pickle.encode_long": [],
    "pickle._Pickler.save_float": [
        "<builtin>.repr",
        "pickle._Framer.write"
    ],
    "pickle._Pickler.save_bytes": [
        "pickle._Pickler.memoize",
        "<builtin>.str",
        "pickle._Framer.write_large_bytes",
        "pickle._Pickler.save_reduce",
        "<builtin>.len",
        "pickle._Framer.write"
    ],
    "pickle._Pickler.save_bytearray": [
        "<builtin>.bytes",
        "pickle._Framer.write_large_bytes",
        "pickle._Pickler.save_reduce",
        "<builtin>.len",
        "pickle._Framer.write"
    ],
    "pickle._Pickler.save_picklebuffer": [
        "pickle._Pickler.save_bytearray",
        "<builtin>.bool",
        "pickle._Framer.write",
        "pickle._Pickler.save_bytes"
    ],
    "pickle._Pickler.save_str": [
        "pickle._Framer.write_large_bytes",
        "pickle._Framer.write",
        "pickle._Pickler.memoize",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_tuple": [
        "pickle._Pickler.save",
        "pickle._Pickler.memoize",
        "pickle._Pickler.get",
        "<builtin>.len",
        "pickle._Framer.write",
        "<builtin>.id"
    ],
    "pickle._Pickler.save_list": [
        "pickle._Framer.write",
        "pickle._Pickler._batch_appends",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_dict": [
        "pickle._Framer.write",
        "pickle._Pickler._batch_setitems",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_set": [
        "pickle._Pickler.save",
        "<builtin>.list",
        "pickle._Pickler.memoize",
        "<builtin>.iter",
        "itertools.islice",
        "pickle._Pickler.save_reduce",
        "<builtin>.len",
        "pickle._Framer.write"
    ],
    "pickle._Pickler.save_frozenset": [
        "pickle._Pickler.save",
        "<builtin>.list",
        "pickle._Pickler.memoize",
        "pickle._Pickler.get",
        "pickle._Pickler.save_reduce",
        "pickle._Framer.write",
        "<builtin>.id"
    ],
    "pickle._Pickler.save_type": [
        "pickle._Pickler.save_reduce",
        "pickle._Pickler.save_global",
        "<builtin>.type"
    ],
    "pickle._Unpickler.pop_mark": [
        "<list>.pop"
    ],
    "pickle._Unpickler.load_proto": [
        "pickle._Unframer.read",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_frame": [
        "pickle._Unframer.read",
        "pickle._Unframer.load_frame",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_persid": [
        "pickle._Unframer.readline",
        "<list>"
    ],
    "pickle._Unframer.readline": [],
    "pickle._Unpickler.load_binpersid": [
        "<list>.pop",
        "<list>"
    ],
    "pickle._Unpickler.load_none": [
        "<list>"
    ],
    "pickle._Unpickler.load_false": [
        "<list>"
    ],
    "pickle._Unpickler.load_true": [
        "<list>"
    ],
    "pickle._Unpickler.load_int": [
        "pickle._Unframer.readline",
        "<list>",
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_binint": [
        "<list>"
    ],
    "pickle._Unpickler.load_binint1": [
        "<list>"
    ],
    "pickle._Unpickler.load_binint2": [
        "<list>"
    ],
    "pickle._Unpickler.load_long": [
        "pickle._Unframer.readline",
        "<list>"
    ],
    "pickle._Unpickler.load_long1": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_long4": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_float": [
        "<list>"
    ],
    "pickle._Unpickler.load_binfloat": [
        "<list>"
    ],
    "pickle._Unpickler.load_string": [
        "pickle._Unframer.readline",
        "<list>",
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_binstring": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_binbytes": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_unicode": [
        "<list>"
    ],
    "pickle._Unpickler.load_binunicode": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_binunicode8": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_binbytes8": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_bytearray8": [
        "pickle._Unframer.read",
        "<builtin>.bytearray",
        "<list>",
        "pickle._Unframer.readinto"
    ],
    "pickle._Unpickler.load_next_buffer": [
        "<builtin>.next",
        "<list>"
    ],
    "pickle._Unpickler.load_readonly_buffer": [
        "<builtin>.memoryview"
    ],
    "pickle._Unpickler.load_short_binstring": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_short_binbytes": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_short_binunicode": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_tuple": [
        "pickle._Unpickler.pop_mark",
        "<list>"
    ],
    "pickle._Unpickler.load_empty_tuple": [
        "<list>"
    ],
    "pickle._Unpickler.load_empty_list": [
        "<list>"
    ],
    "pickle._Unpickler.load_empty_dictionary": [
        "<list>"
    ],
    "pickle._Unpickler.load_empty_set": [
        "<list>"
    ],
    "pickle._Unpickler.load_frozenset": [
        "pickle._Unpickler.pop_mark",
        "<list>"
    ],
    "pickle._Unpickler.load_list": [
        "pickle._Unpickler.pop_mark",
        "<list>"
    ],
    "pickle._Unpickler.load_dict": [
        "<list>",
        "<builtin>.range",
        "pickle._Unpickler.pop_mark",
        "<builtin>.len"
    ],
    "pickle._Unpickler._instantiate": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<list>.__new__",
        "<builtin>.str",
        "<builtin>.hasattr",
        "<list>"
    ],
    "pickle._Unpickler.load_inst": [
        "pickle._Unpickler._instantiate",
        "pickle._Unframer.readline",
        "pickle._Unpickler.pop_mark",
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.find_class": [
        "pickle._getattribute",
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "pickle._Unpickler.load_obj": [
        "<list>.pop",
        "pickle._Unpickler.pop_mark",
        "pickle._Unpickler._instantiate"
    ],
    "<list>.__new__": [],
    "pickle._Unpickler.load_newobj": [
        "<list>.__new__",
        "<list>.pop",
        "<list>"
    ],
    "pickle._Unpickler.load_newobj_ex": [
        "<list>.__new__",
        "<list>.pop",
        "<list>"
    ],
    "pickle._Unpickler.load_global": [
        "pickle._Unframer.readline",
        "<list>",
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.load_stack_global": [
        "<list>.pop",
        "<builtin>.type",
        "<list>"
    ],
    "pickle._Unpickler.load_ext1": [
        "pickle._Unframer.read",
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.get_extension": [
        "<builtin>.ValueError",
        "pickle._Unpickler.find_class",
        "<map>.get",
        "<list>"
    ],
    "pickle._Unpickler.load_ext2": [
        "pickle._Unframer.read",
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_ext4": [
        "pickle._Unframer.read",
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_reduce": [
        "<list>.pop"
    ],
    "pickle._Unpickler.load_pop": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_pop_mark": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_dup": [
        "<list>"
    ],
    "pickle._Unpickler.load_get": [
        "pickle._Unframer.readline",
        "<list>",
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_binget": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_long_binget": [
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_put": [
        "pickle._Unframer.readline",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_binput": [
        "pickle._Unframer.read",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_long_binput": [
        "pickle._Unframer.read",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_memoize": [
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_append": [
        "<list>.pop"
    ],
    "pickle._Unpickler.load_appends": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_setitem": [
        "<list>.pop"
    ],
    "pickle._Unpickler.load_setitems": [
        "<builtin>.range",
        "pickle._Unpickler.pop_mark",
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_additems": [
        "<builtin>.isinstance",
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_build": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<list>.pop",
        "<builtin>.type",
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "pickle._Unpickler.load_mark": [
        "<list>.append"
    ],
    "pickle._Unpickler.load_stop": [
        "pickle._Stop.__init__",
        "<list>.pop"
    ],
    "pickle._Stop.__init__": [],
    "pickle._dumps": [
        "pickle._Pickler.dump",
        "<builtin>.isinstance",
        "_io.BytesIO",
        "pickle._Pickler.__init__"
    ],
    "pickle._loads": [
        "_io.BytesIO",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "pickle._Unpickler.load",
        "pickle._Unpickler.__init__"
    ],
    "pprint.pformat": [
        "pprint.PrettyPrinter.pformat",
        "pprint.PrettyPrinter.__init__"
    ],
    "pprint.pp": [
        "pprint.pprint"
    ],
    "pprint.saferepr": [
        "pprint._safe_repr"
    ],
    "pprint.isreadable": [
        "pprint._safe_repr"
    ],
    "pprint.isrecursive": [
        "pprint._safe_repr"
    ],
    "pprint._safe_key.__lt__": [
        "<builtin>.id",
        "<builtin>.type",
        "<builtin>.str"
    ],
    "pprint._safe_tuple": [
        "pprint._safe_key.__init__"
    ],
    "pprint._safe_key.__init__": [],
    "pprint.PrettyPrinter.isrecursive": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter.isreadable": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter._pprint_ordered_dict": [
        "<builtin>.repr",
        "<builtin>.list",
        "pprint.PrettyPrinter._format",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_list": [
        "pprint.PrettyPrinter._format_items"
    ],
    "pprint.PrettyPrinter._format_items": [
        "<builtin>.iter",
        "pprint.PrettyPrinter._format",
        "<builtin>.next",
        "pprint.PrettyPrinter._repr",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_tuple": [
        "pprint.PrettyPrinter._format_items",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_set": [
        "pprint.PrettyPrinter._format_items",
        "<builtin>.repr",
        "<builtin>.sorted",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_str": [
        "<map>.pop",
        "<builtin>.len",
        "re.findall",
        "<builtin>.enumerate",
        "<list>.pop",
        "<list>.append",
        "<builtin>.repr"
    ],
    "pprint.PrettyPrinter._pprint_bytes": [
        "<builtin>.repr",
        "pprint._wrap_bytes_repr",
        "<builtin>.len"
    ],
    "pprint._wrap_bytes_repr": [
        "<builtin>.repr",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_bytearray": [
        "pprint.PrettyPrinter._pprint_bytes",
        "<builtin>.bytes"
    ],
    "pprint.PrettyPrinter._pprint_mappingproxy": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_default_dict": [
        "<builtin>.repr",
        "pprint.PrettyPrinter._repr",
        "pprint.PrettyPrinter._pprint_dict",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_counter": [
        "<builtin>.repr",
        "pprint.PrettyPrinter._format_dict_items",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_chain_map": [
        "pprint.PrettyPrinter._format",
        "<builtin>.repr",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_deque": [
        "<builtin>.repr",
        "pprint.PrettyPrinter._repr",
        "pprint.PrettyPrinter._format_items",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_user_dict": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_user_list": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_user_string": [
        "pprint.PrettyPrinter._format"
    ],
    "importlib._bootstrap._setup": [
        "<builtin>.isinstance",
        "importlib._bootstrap._builtin_from_name",
        "importlib._bootstrap._init_module_attrs",
        "importlib._bootstrap._spec_from_module",
        "<builtin>.type",
        "<builtin>.setattr"
    ],
    "importlib._bootstrap._spec_from_module": [
        "importlib._bootstrap.ModuleSpec.__init__",
        "<builtin>.list"
    ],
    "importlib._bootstrap.ModuleSpec.__init__": [],
    "importlib._bootstrap._init_module_attrs": [
        "<builtin>.getattr"
    ],
    "importlib._bootstrap._builtin_from_name": [
        "importlib._bootstrap._load_unlocked",
        "importlib._bootstrap.BuiltinImporter.find_spec",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap.BuiltinImporter.find_spec": [
        "importlib._bootstrap.spec_from_loader"
    ],
    "importlib._bootstrap.spec_from_loader": [
        "importlib._bootstrap.BuiltinImporter.is_package",
        "importlib._bootstrap_external.spec_from_file_location",
        "importlib._bootstrap.ModuleSpec.__init__",
        "importlib._bootstrap.FrozenImporter.is_package",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap.BuiltinImporter.is_package": [],
    "importlib._bootstrap._load_unlocked": [
        "importlib._bootstrap._verbose_message",
        "importlib._bootstrap.BuiltinImporter.exec_module",
        "importlib._bootstrap._load_backward_compatible",
        "importlib._bootstrap.FrozenImporter.exec_module",
        "<builtin>.ImportError",
        "importlib._bootstrap.module_from_spec",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap._load_backward_compatible": [
        "<str>.rpartition",
        "importlib._bootstrap.FrozenImporter.load_module",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "importlib._bootstrap.FrozenImporter.load_module": [
        "importlib._bootstrap._load_module_shim"
    ],
    "importlib._bootstrap._load_module_shim": [
        "importlib._bootstrap._exec",
        "importlib._bootstrap.spec_from_loader",
        "importlib._bootstrap._load"
    ],
    "importlib._bootstrap.FrozenImporter.is_package": [],
    "importlib._bootstrap._load": [
        "importlib._bootstrap._ModuleLockManager.__init__"
    ],
    "importlib._bootstrap._exec": [
        "importlib._bootstrap._ModuleLockManager.__init__"
    ],
    "importlib._bootstrap.module_from_spec": [
        "<builtin>.ImportError",
        "importlib._bootstrap.FrozenImporter.create_module",
        "importlib._bootstrap.BuiltinImporter.create_module",
        "importlib._bootstrap._new_module",
        "importlib._bootstrap._init_module_attrs",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap.FrozenImporter.create_module": [],
    "importlib._bootstrap.BuiltinImporter.create_module": [
        "importlib._bootstrap._call_with_frames_removed",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap._call_with_frames_removed": [
        "importlib._bootstrap.ModuleSpec.__init__"
    ],
    "importlib._bootstrap._new_module": [
        "<builtin>.type"
    ],
    "importlib._bootstrap.FrozenImporter.exec_module": [
        "<builtin>.exec",
        "importlib._bootstrap._call_with_frames_removed",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap.BuiltinImporter.exec_module": [
        "importlib._bootstrap._call_with_frames_removed"
    ],
    "importlib._bootstrap._verbose_message": [
        "<builtin>.print",
        "<str>.startswith"
    ],
    "importlib._bootstrap_external._setup": [
        "<list>.append",
        "<list>.extend",
        "importlib._bootstrap._builtin_from_name",
        "<builtin>.setattr",
        "<builtin>.len",
        "importlib._bootstrap_external._make_relax_case",
        "<builtin>.all"
    ],
    "importlib._bootstrap_external._make_relax_case": [],
    "importlib.find_loader": [
        "importlib._bootstrap._find_spec",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap._find_spec": [
        "<builtin>.ImportError"
    ],
    "importlib.reload": [
        "importlib._bootstrap._find_spec",
        "<builtin>.isinstance",
        "importlib._bootstrap._exec",
        "<builtin>.TypeError",
        "<builtin>.ImportError",
        "<builtin>.ModuleNotFoundError"
    ],
    "unittest.load_tests": [
        "posixpath"
    ],
    "unittest.result.TestResult.startTest": [
        "unittest.result.TestResult._setupStdout"
    ],
    "unittest.result.TestResult._setupStdout": [
        "_io.StringIO"
    ],
    "unittest.result.TestResult.stopTest": [
        "unittest.result.TestResult._restoreStdout"
    ],
    "unittest.result.TestResult._restoreStdout": [
        "<str>.endswith",
        "codecs.StreamRecoder.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "doctest._SpoofOut.getvalue"
    ],
    "unittest.result.TestResult.addError": [
        "<list>.append"
    ],
    "unittest.result.failfast.inner": [
        "unittest.result.TestResult.addUnexpectedSuccess",
        "unittest.result.TestResult.addError",
        "<builtin>.getattr",
        "unittest.result.TestResult.addFailure"
    ],
    "unittest.result.TestResult.addUnexpectedSuccess": [
        "<list>.append"
    ],
    "unittest.result.TestResult.addFailure": [
        "<list>.append"
    ],
    "unittest.result.TestResult.addSubTest": [
        "<builtin>.issubclass",
        "unittest.result.TestResult.stop",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "unittest.result.TestResult.stop": [],
    "unittest.result.TestResult.addSkip": [
        "<list>.append"
    ],
    "unittest.result.TestResult.addExpectedFailure": [
        "<list>.append"
    ],
    "unittest.result.TestResult._exc_info_to_string": [
        "traceback.TracebackException.format",
        "<str>.endswith",
        "unittest.result.TestResult._count_relevant_tb_levels",
        "unittest.result.TestResult._is_relevant_tb_level",
        "<builtin>.list",
        "traceback.TracebackException.__init__",
        "doctest._SpoofOut.getvalue"
    ],
    "unittest.result.TestResult._is_relevant_tb_level": [],
    "unittest.result.TestResult._count_relevant_tb_levels": [
        "unittest.result.TestResult._is_relevant_tb_level"
    ],
    "unittest.result.TestResult.__repr__": [
        "unittest.util.strclass",
        "<builtin>.len"
    ],
    "unittest.util.strclass": [],
    "unittest.util._shorten": [
        "<builtin>.len"
    ],
    "unittest.util._common_shorten_repr": [
        "unittest.util._shorten",
        "<builtin>.tuple",
        "genericpath.commonprefix",
        "<builtin>.len",
        "<builtin>.max",
        "<builtin>.map"
    ],
    "unittest.util.safe_repr": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "unittest.util.sorted_list_difference": [
        "<list>.extend",
        "<list>.append"
    ],
    "unittest.util.unorderable_list_difference": [
        "<list>.append"
    ],
    "unittest.util._count_diff_all_purpose": [
        "<list>.append",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.object",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "unittest.util._count_diff_hashable": [
        "collections.Counter.__init__",
        "<list>.append"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.__init__": [
        "<builtin>.super"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup": [
        "unittest.case.TestCase.addCleanup"
    ],
    "unittest.case.TestCase.addCleanup": [
        "<list>.append",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.len",
        "warnings.warn"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callSetUp": [
        "unittest.case.TestCase.setUp",
        "unittest.async_case.IsolatedAsyncioTestCase._callAsync"
    ],
    "unittest.case.TestCase.setUp": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callAsync": [
        "asyncio.queues.Queue.put_nowait",
        "inspect.isawaitable"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callTestMethod": [
        "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync": [
        "asyncio.queues.Queue.put_nowait",
        "inspect.isawaitable"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callTearDown": [
        "unittest.async_case.IsolatedAsyncioTestCase._callAsync",
        "unittest.case.TestCase.tearDown"
    ],
    "unittest.case.TestCase.tearDown": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callCleanup": [
        "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner": [
        "asyncio.queues.Queue.get",
        "asyncio.queues.Queue.__init__",
        "asyncio.queues.Queue.task_done"
    ],
    "asyncio.queues.Queue.__init__": [
        "asyncio.queues.Queue._init",
        "asyncio.locks.Event.__init__",
        "warnings.warn",
        "asyncio.events.get_event_loop",
        "asyncio.locks.Event.set",
        "_collections.deque"
    ],
    "asyncio.locks.Event.set": [],
    "asyncio.queues.Queue._init": [
        "_collections.deque"
    ],
    "asyncio.queues.Queue.get": [
        "asyncio.futures.Future.cancel",
        "asyncio.queues.Queue.get_nowait",
        "asyncio.queues.Queue.empty",
        "asyncio.queues.Queue._wakeup_next",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.queues.Queue.empty": [],
    "asyncio.queues.Queue._wakeup_next": [],
    "asyncio.queues.Queue.get_nowait": [
        "asyncio.queues.Queue._wakeup_next",
        "asyncio.queues.Queue.empty",
        "asyncio.queues.Queue._get"
    ],
    "asyncio.queues.Queue._get": [],
    "asyncio.queues.Queue.task_done": [
        "<builtin>.ValueError",
        "asyncio.locks.Event.set"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop": [
        "asyncio.events.new_event_loop",
        "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner",
        "asyncio.events.set_event_loop"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop": [
        "asyncio.queues.Queue.put_nowait",
        "asyncio.tasks.all_tasks",
        "asyncio.tasks.gather",
        "asyncio.queues.Queue.join"
    ],
    "asyncio.queues.Queue.put_nowait": [
        "asyncio.locks.Event.clear",
        "asyncio.queues.Queue._put",
        "asyncio.queues.Queue._wakeup_next",
        "asyncio.queues.Queue.full"
    ],
    "asyncio.queues.Queue.full": [
        "asyncio.queues.Queue.qsize"
    ],
    "asyncio.queues.Queue.qsize": [
        "<builtin>.len"
    ],
    "asyncio.queues.Queue._put": [],
    "asyncio.locks.Event.clear": [],
    "asyncio.queues.Queue.join": [
        "asyncio.locks.Event.wait"
    ],
    "asyncio.locks.Event.wait": [
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.tasks.all_tasks": [
        "asyncio.futures._get_loop",
        "asyncio.events.get_running_loop",
        "<builtin>.list"
    ],
    "asyncio.events.get_running_loop": [
        "<builtin>.RuntimeError",
        "asyncio.events._get_running_loop"
    ],
    "asyncio.futures._get_loop": [],
    "asyncio.tasks.gather": [
        "asyncio.tasks._GatheringFuture.__init__",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.ensure_future",
        "asyncio.futures.Future.set_result",
        "asyncio.events.get_event_loop",
        "asyncio.futures._get_loop",
        "asyncio.base_events.BaseEventLoop.create_future",
        "warnings.warn"
    ],
    "asyncio.tasks.ensure_future": [
        "asyncio.base_futures.isfuture",
        "asyncio.base_events.BaseEventLoop.create_task",
        "asyncio.tasks._wrap_awaitable",
        "<builtin>.TypeError",
        "asyncio.coroutines.iscoroutine",
        "asyncio.tasks.ensure_future",
        "asyncio.events.get_event_loop",
        "inspect.isawaitable",
        "asyncio.futures._get_loop",
        "<builtin>.ValueError"
    ],
    "asyncio.base_futures.isfuture": [
        "<builtin>.hasattr"
    ],
    "asyncio.tasks._GatheringFuture.__init__": [
        "<builtin>.super"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.run": [
        "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop",
        "<builtin>.super"
    ],
    "asyncio.base_events._format_handle": [
        "<builtin>.repr",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "asyncio.base_events._format_pipe": [
        "<builtin>.repr"
    ],
    "asyncio.base_events._set_reuseport": [
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events._ipaddr_info": [
        "<list>.append",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "asyncio.base_events._interleave_addrinfos": [
        "collections.OrderedDict.values",
        "<builtin>.list",
        "collections.OrderedDict.__init__"
    ],
    "asyncio.base_events._run_until_complete_cb": [
        "asyncio.futures._get_loop",
        "asyncio.base_events.BaseEventLoop.stop",
        "<builtin>.isinstance"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.drain": [
        "<builtin>.ConnectionError"
    ],
    "<builtin>.ConnectionError": [],
    "asyncio.base_events._SendfileFallbackProtocol.connection_made": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.connection_lost": [
        "<builtin>.ConnectionError"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.data_received": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.eof_received": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events.Server._detach": [
        "asyncio.base_events.Server._wakeup"
    ],
    "asyncio.base_events.Server._wakeup": [],
    "asyncio.base_events.Server.sockets": [
        "asyncio.trsock.TransportSocket.__init__",
        "<builtin>.tuple"
    ],
    "asyncio.trsock.TransportSocket.__init__": [],
    "asyncio.base_events.Server.close": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.cancel",
        "asyncio.base_events.Server._wakeup",
        "asyncio.proactor_events.BaseProactorEventLoop._stop_serving",
        "asyncio.selector_events.BaseSelectorEventLoop._stop_serving"
    ],
    "asyncio.base_events.Server.start_serving": [
        "asyncio.base_events.Server._start_serving",
        "asyncio.tasks.sleep"
    ],
    "asyncio.base_events.Server._start_serving": [
        "asyncio.selector_events.BaseSelectorEventLoop._start_serving",
        "asyncio.proactor_events.BaseProactorEventLoop._start_serving"
    ],
    "asyncio.tasks.sleep": [
        "warnings.warn",
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.tasks.__sleep0",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.events.get_running_loop"
    ],
    "asyncio.base_events.Server.serve_forever": [
        "asyncio.base_events.Server.close",
        "<builtin>.RuntimeError",
        "asyncio.base_events.Server.wait_closed",
        "asyncio.base_events.Server._start_serving",
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.base_events.Server.wait_closed": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "<list>.append"
    ],
    "asyncio.base_events.BaseEventLoop.__init__": [
        "_weakrefset.WeakSet.__init__",
        "asyncio.coroutines._is_debug_mode",
        "_collections.deque",
        "asyncio.base_events.BaseEventLoop.set_debug"
    ],
    "asyncio.base_events.BaseEventLoop.set_debug": [
        "asyncio.base_events.BaseEventLoop.is_running",
        "asyncio.base_events.BaseEventLoop.call_soon_threadsafe"
    ],
    "asyncio.base_events.BaseEventLoop.is_running": [],
    "asyncio.base_events.BaseEventLoop.call_soon_threadsafe": [
        "asyncio.selector_events.BaseSelectorEventLoop._write_to_self",
        "asyncio.base_events.BaseEventLoop._call_soon",
        "asyncio.base_events.BaseEventLoop._write_to_self",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.base_events.BaseEventLoop._check_callback",
        "asyncio.proactor_events.BaseProactorEventLoop._write_to_self"
    ],
    "asyncio.base_events.BaseEventLoop._check_closed": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events.BaseEventLoop._check_callback": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "asyncio.coroutines.iscoroutine",
        "asyncio.coroutines.iscoroutinefunction"
    ],
    "asyncio.coroutines.iscoroutinefunction": [
        "inspect.iscoroutinefunction",
        "<builtin>.getattr"
    ],
    "asyncio.base_events.BaseEventLoop._call_soon": [
        "asyncio.events.Handle.__init__"
    ],
    "asyncio.events.Handle.__init__": [
        "asyncio.format_helpers.extract_stack",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.base_events.BaseEventLoop.get_debug": [],
    "asyncio.format_helpers.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "asyncio.base_events.BaseEventLoop._write_to_self": [],
    "asyncio.base_events.BaseEventLoop.__repr__": [
        "asyncio.base_events.BaseEventLoop.is_running",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.base_events.BaseEventLoop.is_closed"
    ],
    "asyncio.base_events.BaseEventLoop.is_closed": [],
    "asyncio.base_events.BaseEventLoop.create_future": [
        "asyncio.futures.Future.__init__"
    ],
    "asyncio.futures.Future.__init__": [
        "asyncio.events.get_event_loop",
        "asyncio.format_helpers.extract_stack",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.base_events.BaseEventLoop.create_task": [
        "asyncio.tasks.Task.__init__",
        "asyncio.tasks._set_task_name",
        "asyncio.base_events.BaseEventLoop._check_closed"
    ],
    "asyncio.tasks._set_task_name": [],
    "asyncio.tasks.Task.__init__": [
        "<builtin>.super",
        "asyncio.base_events.BaseEventLoop.call_soon",
        "<builtin>.TypeError",
        "asyncio.tasks._register_task",
        "asyncio.coroutines.iscoroutine",
        "<builtin>.str"
    ],
    "asyncio.base_events.BaseEventLoop.call_soon": [
        "asyncio.base_events.BaseEventLoop._call_soon",
        "asyncio.base_events.BaseEventLoop._check_callback",
        "asyncio.base_events.BaseEventLoop._check_thread",
        "asyncio.base_events.BaseEventLoop._check_closed"
    ],
    "asyncio.base_events.BaseEventLoop._check_thread": [
        "<builtin>.RuntimeError",
        "_thread.get_ident"
    ],
    "asyncio.tasks._register_task": [
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.base_events.BaseEventLoop.set_task_factory": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "asyncio.base_events.BaseEventLoop._asyncgen_finalizer_hook": [
        "_weakrefset.WeakSet.discard",
        "asyncio.base_events.BaseEventLoop.call_soon_threadsafe",
        "asyncio.base_events.BaseEventLoop.is_closed"
    ],
    "asyncio.base_events.BaseEventLoop._asyncgen_firstiter_hook": [
        "_weakrefset.WeakSet.add",
        "warnings.warn"
    ],
    "asyncio.base_events.BaseEventLoop.shutdown_asyncgens": [
        "asyncio.tasks.gather",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.zip",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "_weakrefset.WeakSet.clear",
        "<builtin>.len"
    ],
    "asyncio.futures.Future.set_result": [
        "asyncio.futures.Future.__schedule_callbacks"
    ],
    "asyncio.futures.Future.__schedule_callbacks": [
        "asyncio.base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.futures.Future.add_done_callback": [
        "asyncio.base_events.BaseEventLoop.call_soon",
        "<list>.append"
    ],
    "asyncio.base_events.BaseEventLoop.call_exception_handler": [
        "asyncio.base_events.BaseEventLoop.default_exception_handler",
        "logging.Logger.error"
    ],
    "asyncio.base_events.BaseEventLoop.default_exception_handler": [
        "<list>.append",
        "logging.Logger.error",
        "traceback.format_list",
        "<builtin>.sorted",
        "<str>.rstrip",
        "<builtin>.type",
        "<map>.get",
        "<builtin>.repr"
    ],
    "asyncio.base_events.BaseEventLoop._check_running": [
        "asyncio.base_events.BaseEventLoop.is_running",
        "<builtin>.RuntimeError",
        "asyncio.events._get_running_loop"
    ],
    "asyncio.base_events.BaseEventLoop.run_forever": [
        "asyncio.base_events.BaseEventLoop._set_coroutine_origin_tracking",
        "asyncio.base_events.BaseEventLoop._run_once",
        "_thread.get_ident",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.base_events.BaseEventLoop._check_running",
        "asyncio.events._set_running_loop"
    ],
    "asyncio.base_events.BaseEventLoop._set_coroutine_origin_tracking": [
        "<builtin>.bool"
    ],
    "asyncio.events._set_running_loop": [],
    "asyncio.base_events.BaseEventLoop._run_once": [
        "heapq.heapify",
        "asyncio.base_events._format_handle",
        "asyncio.base_events.BaseEventLoop._process_events",
        "selectors.KqueueSelector.select",
        "<builtin>.len",
        "selectors._PollLikeSelector.select",
        "asyncio.selector_events.BaseSelectorEventLoop._process_events",
        "asyncio.base_events.BaseEventLoop.time",
        "<builtin>.min",
        "heapq.heappop",
        "selectors.SelectSelector.select",
        "asyncio.proactor_events.BaseProactorEventLoop._process_events",
        "selectors.EpollSelector.select",
        "<list>.append",
        "logging.Logger.warning",
        "<builtin>.max",
        "<builtin>.range"
    ],
    "asyncio.base_events.BaseEventLoop.time": [],
    "asyncio.base_events.BaseEventLoop._process_events": [],
    "logging.Logger.warning": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "asyncio.base_events.BaseEventLoop.run_until_complete": [
        "asyncio.futures.Future.done",
        "asyncio.base_futures.isfuture",
        "asyncio.futures.Future.add_done_callback",
        "<builtin>.RuntimeError",
        "asyncio.windows_events.ProactorEventLoop.run_forever",
        "asyncio.base_events.BaseEventLoop.run_forever",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.futures.Future.exception",
        "asyncio.tasks.ensure_future",
        "asyncio.futures.Future.result",
        "asyncio.base_events.BaseEventLoop._check_running",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.futures.Future.done": [],
    "asyncio.futures.Future.cancelled": [],
    "asyncio.futures.Future.exception": [],
    "asyncio.futures.Future.result": [],
    "asyncio.base_events.BaseEventLoop.close": [
        "<list>.clear",
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.is_running",
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events.BaseEventLoop.__del__": [
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.base_events.BaseEventLoop.is_running",
        "asyncio.selector_events.BaseSelectorEventLoop.close",
        "asyncio.proactor_events.BaseProactorEventLoop.close",
        "warnings.warn",
        "asyncio.base_events.BaseEventLoop.close"
    ],
    "asyncio.base_events.BaseEventLoop.call_later": [
        "asyncio.base_events.BaseEventLoop.time",
        "asyncio.base_events.BaseEventLoop.call_at"
    ],
    "asyncio.base_events.BaseEventLoop.call_at": [
        "asyncio.events.TimerHandle.__init__",
        "asyncio.base_events.BaseEventLoop._check_thread",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.base_events.BaseEventLoop._check_callback",
        "heapq.heappush"
    ],
    "asyncio.events.TimerHandle.__init__": [
        "<builtin>.super"
    ],
    "asyncio.base_events.BaseEventLoop.run_in_executor": [
        "asyncio.futures.wrap_future",
        "asyncio.base_events.BaseEventLoop._check_callback",
        "asyncio.base_events.BaseEventLoop._check_closed"
    ],
    "asyncio.futures.wrap_future": [
        "asyncio.futures._chain_future",
        "asyncio.base_futures.isfuture",
        "<builtin>.isinstance",
        "asyncio.events.get_event_loop",
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.futures._chain_future": [
        "asyncio.base_futures.isfuture",
        "asyncio.futures.Future.add_done_callback",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "asyncio.futures._get_loop"
    ],
    "asyncio.base_events.BaseEventLoop.set_default_executor": [
        "warnings.warn",
        "<builtin>.isinstance"
    ],
    "asyncio.base_events.BaseEventLoop._getaddrinfo_debug": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.time",
        "<list>.append",
        "socket.getaddrinfo",
        "logging.Logger.info"
    ],
    "logging.Logger.info": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "asyncio.base_events.BaseEventLoop.getaddrinfo": [
        "asyncio.base_events.BaseEventLoop.run_in_executor"
    ],
    "asyncio.base_events.BaseEventLoop.getnameinfo": [
        "asyncio.base_events.BaseEventLoop.run_in_executor"
    ],
    "asyncio.base_events.BaseEventLoop.sock_sendfile": [
        "asyncio.base_events.BaseEventLoop._sock_sendfile_fallback",
        "asyncio.proactor_events.BaseProactorEventLoop._sock_sendfile_native",
        "asyncio.base_events.BaseEventLoop._check_sendfile_params",
        "<builtin>.ValueError",
        "asyncio.base_events.BaseEventLoop._sock_sendfile_native"
    ],
    "asyncio.base_events.BaseEventLoop._check_sendfile_params": [
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "asyncio.base_events.BaseEventLoop._sock_sendfile_native": [],
    "asyncio.base_events.BaseEventLoop._sock_sendfile_fallback": [
        "asyncio.proactor_events.BaseProactorEventLoop.sock_sendall",
        "<builtin>.memoryview",
        "<builtin>.bytearray",
        "asyncio.selector_events.BaseSelectorEventLoop.sock_sendall",
        "asyncio.events.AbstractEventLoop.sock_sendall",
        "asyncio.base_events.BaseEventLoop.run_in_executor",
        "<builtin>.min"
    ],
    "asyncio.events.AbstractEventLoop.sock_sendall": [],
    "asyncio.base_events.BaseEventLoop._connect_sock": [
        "asyncio.events.AbstractEventLoop.sock_connect",
        "asyncio.proactor_events.BaseProactorEventLoop.sock_connect",
        "asyncio.selector_events.BaseSelectorEventLoop.sock_connect",
        "<list>.append",
        "<builtin>.OSError",
        "socket.socket.close",
        "socket.socket.__init__"
    ],
    "asyncio.events.AbstractEventLoop.sock_connect": [],
    "asyncio.base_events.BaseEventLoop.create_connection": [
        "logging.Logger.debug",
        "<builtin>.str",
        "asyncio.base_events.BaseEventLoop._create_connection_transport",
        "<builtin>.all",
        "asyncio.staggered.staggered_race",
        "asyncio.base_events.BaseEventLoop._connect_sock",
        "<builtin>.len",
        "<builtin>.OSError",
        "asyncio.base_events._interleave_addrinfos",
        "<builtin>.ValueError",
        "asyncio.base_events.BaseEventLoop._ensure_resolved"
    ],
    "asyncio.base_events.BaseEventLoop._ensure_resolved": [
        "asyncio.base_events.BaseEventLoop.getaddrinfo",
        "asyncio.base_events._ipaddr_info"
    ],
    "asyncio.staggered.staggered_race": [
        "asyncio.tasks.wait",
        "asyncio.base_events.BaseEventLoop.create_task",
        "<builtin>.len",
        "<builtin>.enumerate",
        "<list>.append",
        "asyncio.staggered.staggered_race.run_one_coro",
        "asyncio.events.get_running_loop"
    ],
    "asyncio.staggered.staggered_race.run_one_coro": [
        "asyncio.base_events.BaseEventLoop.create_task",
        "asyncio.locks.Event.set",
        "<builtin>.len",
        "asyncio.locks.Event.__init__",
        "<builtin>.next",
        "<list>.append",
        "contextlib.suppress.__init__",
        "asyncio.staggered.staggered_race.run_one_coro"
    ],
    "asyncio.tasks.wait": [
        "asyncio.tasks._wait",
        "asyncio.base_futures.isfuture",
        "<builtin>.set",
        "<builtin>.TypeError",
        "asyncio.coroutines.iscoroutine",
        "asyncio.tasks.ensure_future",
        "<builtin>.type",
        "asyncio.events.get_running_loop",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "asyncio.tasks._wait": [
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "asyncio.base_events.BaseEventLoop._create_connection_transport": [
        "asyncio.base_events.BaseEventLoop._make_socket_transport",
        "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport",
        "<builtin>.isinstance",
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "asyncio.selector_events._SelectorTransport.close",
        "asyncio.streams.open_connection.<lambda2>",
        "asyncio.streams.open_connection.<lambda3>",
        "asyncio.streams.open_connection.<lambda4>",
        "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport",
        "asyncio.streams.open_connection.<lambda1>",
        "asyncio.selector_events.BaseSelectorEventLoop._make_socket_transport",
        "asyncio.sslproto._SSLProtocolTransport.close",
        "asyncio.base_events.BaseEventLoop._make_ssl_transport",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.selector_events.BaseSelectorEventLoop._make_ssl_transport"
    ],
    "asyncio.base_events.BaseEventLoop._make_socket_transport": [],
    "asyncio.base_events.BaseEventLoop._make_ssl_transport": [],
    "asyncio.base_events.BaseEventLoop.sendfile": [
        "asyncio.base_events.BaseEventLoop._sendfile_fallback",
        "<builtin>.getattr",
        "asyncio.proactor_events.BaseProactorEventLoop._sendfile_native",
        "<builtin>.RuntimeError",
        "asyncio.selector_events.BaseSelectorEventLoop._sendfile_native",
        "asyncio.base_events.BaseEventLoop._sendfile_native"
    ],
    "asyncio.base_events.BaseEventLoop._sendfile_native": [],
    "asyncio.base_events.BaseEventLoop._sendfile_fallback": [
        "<builtin>.memoryview",
        "asyncio.base_events._SendfileFallbackProtocol.drain",
        "<builtin>.bytearray",
        "asyncio.base_events._SendfileFallbackProtocol.__init__",
        "asyncio.base_events.BaseEventLoop.run_in_executor",
        "<builtin>.min"
    ],
    "asyncio.base_events.BaseEventLoop.start_tls": [
        "<builtin>.RuntimeError",
        "asyncio.sslproto.SSLProtocol.__init__",
        "<builtin>.isinstance",
        "asyncio.base_events.BaseEventLoop.call_soon",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "asyncio.events.Handle.cancel",
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.sslproto.SSLProtocol.__init__": [
        "<builtin>.dict",
        "asyncio.sslproto._SSLProtocolTransport.__init__",
        "asyncio.sslproto._create_transport_context",
        "asyncio.sslproto.SSLProtocol._set_app_protocol",
        "<builtin>.RuntimeError",
        "_collections.deque",
        "<builtin>.ValueError"
    ],
    "asyncio.sslproto._create_transport_context": [
        "ssl.create_default_context",
        "<builtin>.ValueError"
    ],
    "ssl.create_default_context": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "ssl.SSLContext.load_default_certs"
    ],
    "ssl.SSLContext.load_default_certs": [
        "<builtin>.TypeError",
        "ssl.SSLContext._load_windows_store_certs",
        "<builtin>.isinstance"
    ],
    "ssl.SSLContext._load_windows_store_certs": [
        "warnings.warn",
        "<builtin>.bytearray"
    ],
    "asyncio.sslproto.SSLProtocol._set_app_protocol": [
        "<builtin>.isinstance"
    ],
    "asyncio.sslproto._SSLProtocolTransport.__init__": [],
    "asyncio.events.Handle.cancel": [
        "<builtin>.repr",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.base_events.BaseEventLoop.create_datagram_endpoint": [
        "logging.Logger.debug",
        "<builtin>.isinstance",
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "<builtin>.TypeError",
        "logging.Logger.error",
        "<list>.append",
        "<builtin>.ValueError",
        "<builtin>.dict",
        "asyncio.events.AbstractEventLoop.sock_connect",
        "asyncio.proactor_events.BaseProactorEventLoop.sock_connect",
        "asyncio.selector_events.BaseSelectorEventLoop.sock_connect",
        "socket.socket.close",
        "asyncio.selector_events._SelectorTransport.close",
        "asyncio.base_events._set_reuseport",
        "asyncio.base_events.BaseEventLoop._make_datagram_transport",
        "<builtin>.OSError",
        "asyncio.proactor_events.BaseProactorEventLoop._make_datagram_transport",
        "socket.socket.__init__",
        "asyncio.base_events.BaseEventLoop.create_future",
        "warnings.warn",
        "asyncio.base_events.BaseEventLoop._ensure_resolved",
        "logging.Logger.info",
        "<map>.items",
        "asyncio.selector_events.BaseSelectorEventLoop._make_datagram_transport",
        "<builtin>.len",
        "stat.S_ISSOCK",
        "<builtin>.hasattr"
    ],
    "asyncio.base_events.BaseEventLoop._make_datagram_transport": [],
    "asyncio.base_events.BaseEventLoop._create_server_getaddrinfo": [
        "<builtin>.OSError",
        "asyncio.base_events.BaseEventLoop._ensure_resolved"
    ],
    "asyncio.base_events.BaseEventLoop.create_server": [
        "asyncio.tasks.gather",
        "<builtin>.isinstance",
        "<builtin>.set",
        "asyncio.tasks.sleep",
        "asyncio.base_events.Server.__init__",
        "<builtin>.TypeError",
        "<builtin>.OSError",
        "logging.Logger.info",
        "asyncio.base_events.Server._start_serving",
        "asyncio.base_events._set_reuseport",
        "<builtin>.hasattr",
        "<list>.append",
        "logging.Logger.warning",
        "socket.socket.__init__",
        "<builtin>.ValueError",
        "asyncio.base_events.BaseEventLoop._create_server_getaddrinfo"
    ],
    "asyncio.base_events.Server.__init__": [],
    "asyncio.base_events.BaseEventLoop.connect_accepted_socket": [
        "logging.Logger.debug",
        "<builtin>.ValueError",
        "asyncio.base_events.BaseEventLoop._create_connection_transport"
    ],
    "asyncio.base_events.BaseEventLoop.connect_read_pipe": [
        "logging.Logger.debug",
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "asyncio.base_events.BaseEventLoop._make_read_pipe_transport",
        "asyncio.proactor_events.BaseProactorEventLoop._make_read_pipe_transport",
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.base_events.BaseEventLoop._make_read_pipe_transport": [],
    "asyncio.base_events.BaseEventLoop.connect_write_pipe": [
        "logging.Logger.debug",
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "asyncio.proactor_events.BaseProactorEventLoop._make_write_pipe_transport",
        "asyncio.base_events.BaseEventLoop._make_write_pipe_transport",
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.base_events.BaseEventLoop._make_write_pipe_transport": [],
    "asyncio.base_events.BaseEventLoop._log_subprocess": [
        "logging.Logger.debug",
        "<list>.append"
    ],
    "asyncio.base_events.BaseEventLoop.subprocess_shell": [
        "<builtin>.isinstance",
        "asyncio.base_events.BaseEventLoop._log_subprocess",
        "asyncio.base_events.BaseEventLoop._make_subprocess_transport",
        "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport",
        "asyncio.subprocess.create_subprocess_shell.<lambda1>",
        "logging.Logger.info",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events.BaseEventLoop._make_subprocess_transport": [],
    "asyncio.base_events.BaseEventLoop.subprocess_exec": [
        "asyncio.base_events.BaseEventLoop._log_subprocess",
        "asyncio.base_events.BaseEventLoop._make_subprocess_transport",
        "asyncio.subprocess.create_subprocess_exec.<lambda1>",
        "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport",
        "logging.Logger.info",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events.BaseEventLoop.set_exception_handler": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "asyncio.base_events.BaseEventLoop._add_callback": [
        "<builtin>.isinstance"
    ],
    "asyncio.base_events.BaseEventLoop._add_callback_signalsafe": [
        "asyncio.selector_events.BaseSelectorEventLoop._write_to_self",
        "asyncio.base_events.BaseEventLoop._write_to_self",
        "asyncio.base_events.BaseEventLoop._add_callback",
        "asyncio.proactor_events.BaseProactorEventLoop._write_to_self"
    ],
    "concurrent.futures.process": [
        "multiprocessing.connection",
        "concurrent.futures.process._ThreadWakeup",
        "weakref.WeakKeyDictionary.__init__",
        "multiprocessing.queues",
        "weakref",
        "concurrent.futures.process._WorkItem",
        "threading",
        "functools",
        "concurrent.futures.process._RemoteTraceback",
        "traceback",
        "queue",
        "multiprocessing",
        "concurrent.futures.process._CallItem",
        "concurrent.futures.process._ResultItem",
        "os",
        "concurrent.futures.process._SafeQueue",
        "concurrent.futures.process.BrokenProcessPool",
        "concurrent.futures._base",
        "concurrent.futures.process._ExceptionWithTraceback",
        "concurrent.futures.process.ProcessPoolExecutor"
    ],
    "concurrent.futures.__getattr__": [
        "<builtin>.AttributeError",
        "concurrent.futures.thread",
        "concurrent.futures.process"
    ],
    "queue": [
        "queue.LifoQueue",
        "threading",
        "collections",
        "queue.Empty",
        "_queue",
        "heapq",
        "queue.Full",
        "queue.PriorityQueue",
        "queue.Queue",
        "queue._PySimpleQueue"
    ],
    "_queue": [],
    "queue.Empty": [],
    "queue.Full": [],
    "queue.Queue": [],
    "queue.PriorityQueue": [],
    "queue.LifoQueue": [],
    "queue._PySimpleQueue": [],
    "multiprocessing": [
        "<builtin>.globals",
        "<builtin>.dir",
        "<builtin>.getattr",
        "multiprocessing.context"
    ],
    "multiprocessing.context": [
        "multiprocessing.process",
        "multiprocessing.context.TimeoutError",
        "multiprocessing.context.ForkContext",
        "multiprocessing.context.SpawnContext",
        "threading",
        "multiprocessing.context.SpawnProcess",
        "multiprocessing.context.ProcessError",
        "_thread._local",
        "multiprocessing.context.BaseContext",
        "multiprocessing.context.AuthenticationError",
        "os",
        "multiprocessing.reduction",
        "multiprocessing.context.ForkServerContext",
        "multiprocessing.context.DefaultContext.__init__",
        "multiprocessing.context.Process",
        "multiprocessing.context.ForkServerProcess",
        "multiprocessing.context.DefaultContext",
        "multiprocessing.context.ForkProcess",
        "multiprocessing.context.BufferTooShort"
    ],
    "multiprocessing.process": [
        "multiprocessing.process._MainProcess",
        "_weakrefset.WeakSet.__init__",
        "multiprocessing.process._MainProcess.__init__",
        "threading",
        "multiprocessing.process.AuthenticationString",
        "<builtin>.set",
        "multiprocessing.process._ParentProcess",
        "_weakrefset",
        "<builtin>.list",
        "multiprocessing.process.BaseProcess",
        "signal",
        "os",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "multiprocessing.process.BaseProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process.AuthenticationString": [],
    "multiprocessing.process._ParentProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process._MainProcess": [],
    "multiprocessing.process._MainProcess.__init__": [],
    "multiprocessing.reduction": [
        "multiprocessing.reduction.ForkingPickler.register",
        "array",
        "pickle",
        "abc",
        "multiprocessing.reduction._C",
        "functools",
        "multiprocessing.reduction.AbstractReducer",
        "copyreg",
        "os",
        "socket",
        "<builtin>.type",
        "multiprocessing.context",
        "multiprocessing.reduction.ForkingPickler",
        "multiprocessing.reduction.DupHandle",
        "<builtin>.hasattr",
        "io"
    ],
    "multiprocessing.reduction.ForkingPickler": [
        "<builtin>.classmethod"
    ],
    "multiprocessing.reduction.DupHandle": [],
    "multiprocessing.reduction._C": [],
    "multiprocessing.reduction.ForkingPickler.register": [],
    "multiprocessing.reduction.AbstractReducer": [],
    "multiprocessing.context.ProcessError": [],
    "multiprocessing.context.BufferTooShort": [],
    "multiprocessing.context.TimeoutError": [],
    "multiprocessing.context.AuthenticationError": [],
    "multiprocessing.context.BaseContext": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "multiprocessing.context.Process": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.DefaultContext": [],
    "multiprocessing.context.SpawnProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.SpawnContext": [],
    "multiprocessing.context.DefaultContext.__init__": [],
    "multiprocessing.context.ForkProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.ForkServerProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.ForkContext": [],
    "multiprocessing.context.ForkServerContext": [],
    "multiprocessing.connection": [
        "multiprocessing.reduction.ForkingPickler.register",
        "multiprocessing.connection.SocketListener",
        "multiprocessing.connection.PipeConnection",
        "multiprocessing.connection._ConnectionBase",
        "_multiprocessing",
        "multiprocessing.util",
        "multiprocessing.connection.XmlListener",
        "tempfile",
        "struct",
        "multiprocessing.connection.Connection",
        "os",
        "selectors",
        "multiprocessing.connection.PipeListener",
        "io",
        "multiprocessing.connection.ConnectionWrapper",
        "socket",
        "multiprocessing.context",
        "<builtin>.hasattr",
        "multiprocessing.connection.Listener"
    ],
    "_multiprocessing": [],
    "multiprocessing.util": [
        "multiprocessing.util.Finalize",
        "multiprocessing.process",
        "threading",
        "multiprocessing.util.ForkAwareLocal",
        "multiprocessing.util._platform_supports_abstract_sockets",
        "multiprocessing.util.ForkAwareThreadLock",
        "weakref.WeakValueDictionary.__init__",
        "subprocess",
        "os",
        "weakref"
    ],
    "multiprocessing.util._platform_supports_abstract_sockets": [
        "<builtin>.hasattr"
    ],
    "multiprocessing.util.Finalize": [],
    "multiprocessing.util.ForkAwareThreadLock": [],
    "multiprocessing.util.ForkAwareLocal": [],
    "multiprocessing.connection._ConnectionBase": [
        "<builtin>.property"
    ],
    "multiprocessing.connection.PipeConnection": [],
    "multiprocessing.connection.Connection": [],
    "multiprocessing.connection.Listener": [
        "<builtin>.property"
    ],
    "multiprocessing.connection.SocketListener": [],
    "multiprocessing.connection.PipeListener": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.connection.ConnectionWrapper": [],
    "multiprocessing.connection.XmlListener": [],
    "multiprocessing.queues": [
        "multiprocessing.connection",
        "threading",
        "multiprocessing.queues.Queue",
        "multiprocessing.queues.SimpleQueue",
        "collections",
        "<builtin>.object",
        "_multiprocessing",
        "queue",
        "multiprocessing.queues.JoinableQueue",
        "os",
        "multiprocessing.util",
        "multiprocessing.context",
        "weakref"
    ],
    "multiprocessing.queues.Queue": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.queues.JoinableQueue": [],
    "multiprocessing.queues.SimpleQueue": [],
    "concurrent.futures.process._ThreadWakeup": [],
    "concurrent.futures.process._RemoteTraceback": [],
    "concurrent.futures.process._ExceptionWithTraceback": [],
    "concurrent.futures.process._WorkItem": [],
    "concurrent.futures.process._ResultItem": [],
    "concurrent.futures.process._CallItem": [],
    "concurrent.futures.process._SafeQueue": [],
    "concurrent.futures.process.BrokenProcessPool": [],
    "concurrent.futures.process.ProcessPoolExecutor": [],
    "concurrent.futures.thread": [
        "threading",
        "concurrent.futures._base",
        "concurrent.futures.thread.BrokenThreadPool",
        "concurrent.futures.thread.ThreadPoolExecutor",
        "weakref.WeakKeyDictionary.__init__",
        "queue",
        "os",
        "weakref",
        "concurrent.futures.thread._WorkItem"
    ],
    "concurrent.futures.thread._WorkItem": [],
    "concurrent.futures.thread.BrokenThreadPool": [],
    "concurrent.futures.thread.ThreadPoolExecutor": [],
    "concurrent.futures._base._Waiter.__init__": [
        "threading.Event.__init__"
    ],
    "concurrent.futures._base._Waiter.add_result": [
        "<list>.append"
    ],
    "concurrent.futures._base._Waiter.add_exception": [
        "<list>.append"
    ],
    "concurrent.futures._base._Waiter.add_cancelled": [
        "<list>.append"
    ],
    "concurrent.futures._base._AsCompletedWaiter.__init__": [
        "_thread.allocate_lock",
        "<builtin>.super"
    ],
    "concurrent.futures._base._FirstCompletedWaiter.add_result": [
        "<builtin>.super",
        "threading.Event.set"
    ],
    "concurrent.futures._base._FirstCompletedWaiter.add_exception": [
        "<builtin>.super",
        "threading.Event.set"
    ],
    "concurrent.futures._base._FirstCompletedWaiter.add_cancelled": [
        "<builtin>.super",
        "threading.Event.set"
    ],
    "concurrent.futures._base._AllCompletedWaiter.__init__": [
        "_thread.allocate_lock",
        "<builtin>.super"
    ],
    "concurrent.futures._base._AllCompletedWaiter.add_result": [
        "<builtin>.super",
        "concurrent.futures._base._AllCompletedWaiter._decrement_pending_calls"
    ],
    "concurrent.futures._base._AllCompletedWaiter._decrement_pending_calls": [],
    "concurrent.futures._base._AllCompletedWaiter.add_exception": [
        "<builtin>.super",
        "concurrent.futures._base._AllCompletedWaiter._decrement_pending_calls",
        "threading.Event.set"
    ],
    "concurrent.futures._base._AllCompletedWaiter.add_cancelled": [
        "<builtin>.super",
        "concurrent.futures._base._AllCompletedWaiter._decrement_pending_calls"
    ],
    "concurrent.futures._base._AcquireFutures.__init__": [
        "<builtin>.sorted"
    ],
    "concurrent.futures._base._create_and_install_waiters": [
        "<builtin>.sum",
        "concurrent.futures._base._AllCompletedWaiter.__init__",
        "<builtin>.ValueError",
        "concurrent.futures._base._AsCompletedWaiter.__init__"
    ],
    "concurrent.futures._base.as_completed": [
        "<builtin>.TimeoutError",
        "<builtin>.list",
        "<builtin>.set",
        "concurrent.futures._base._yield_finished_futures",
        "concurrent.futures._base._AcquireFutures.__init__",
        "<builtin>.len"
    ],
    "concurrent.futures._base._yield_finished_futures": [],
    "<builtin>.TimeoutError": [],
    "concurrent.futures._base.wait": [
        "<builtin>.set",
        "concurrent.futures._base._AcquireFutures.__init__"
    ],
    "concurrent.futures._base.Future.__init__": [
        "threading.Condition.__init__"
    ],
    "concurrent.futures._base.Future._invoke_callbacks": [
        "logging.Logger.exception"
    ],
    "logging.Logger.exception": [
        "logging.Logger.error"
    ],
    "concurrent.futures._base.Future.cancel": [
        "concurrent.futures._base.Future._invoke_callbacks"
    ],
    "concurrent.futures._base.Future.add_done_callback": [
        "logging.Logger.exception"
    ],
    "concurrent.futures._base.Future.set_result": [
        "concurrent.futures._base.Future._invoke_callbacks"
    ],
    "concurrent.futures._base.Future.set_exception": [
        "concurrent.futures._base.Future._invoke_callbacks"
    ],
    "concurrent.futures._base.Executor.submit": [
        "<builtin>.NotImplementedError",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len",
        "warnings.warn"
    ],
    "concurrent.futures._base.Executor.map": [
        "concurrent.futures._base.Executor.submit",
        "<builtin>.zip",
        "concurrent.futures._base.Executor.map.result_iterator"
    ],
    "concurrent.futures._base.Executor.map.result_iterator": [],
    "concurrent.futures._base.Executor.__exit__": [
        "concurrent.futures._base.Executor.shutdown"
    ],
    "concurrent.futures._base.Executor.shutdown": [],
    "logging.addLevelName": [
        "logging._acquireLock"
    ],
    "logging._releaseLock": [
        "threading._RLock.release"
    ],
    "logging._after_at_fork_child_reinit_locks": [
        "logging._releaseLock",
        "<builtin>.print",
        "_weakrefset.WeakSet.__iter__"
    ],
    "logging.makeLogRecord": [
        "logging.LogRecord.__init__"
    ],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.PercentStyle.format": [
        "logging.PercentStyle._format",
        "logging.StringTemplateStyle._format",
        "logging.StrFormatStyle._format",
        "<builtin>.ValueError"
    ],
    "logging.PercentStyle._format": [],
    "logging.StrFormatStyle.validate": [
        "<builtin>.ValueError",
        "<builtin>.set",
        "string.Formatter.parse",
        "pathlib.PurePath.match"
    ],
    "string.Formatter.parse": [],
    "logging.StringTemplateStyle.__init__": [
        "string.Template.__init__"
    ],
    "string.Template.__init__": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.set",
        "<builtin>.ValueError"
    ],
    "logging.StringTemplateStyle._format": [
        "string.Template.substitute"
    ],
    "string.Template.substitute": [
        "collections.ChainMap.__init__"
    ],
    "logging.BufferingFormatter.format": [
        "logging.BufferingFormatter.formatHeader",
        "logging.Formatter.format",
        "logging.BufferingFormatter.formatFooter",
        "<builtin>.len"
    ],
    "logging.BufferingFormatter.formatHeader": [],
    "logging.BufferingFormatter.formatFooter": [],
    "logging.Filter.__init__": [
        "<builtin>.len"
    ],
    "logging.Filterer.addFilter": [
        "<list>.append"
    ],
    "logging.Filterer.removeFilter": [
        "<list>.remove"
    ],
    "logging._removeHandlerRef": [
        "logging._acquireLock",
        "<list>.remove"
    ],
    "logging.Handler.set_name": [
        "logging._acquireLock"
    ],
    "logging.Handler.release": [
        "threading._RLock.release"
    ],
    "logging.Handler.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Handler.close": [
        "logging._acquireLock"
    ],
    "logging.Handler.__repr__": [
        "logging.getLevelName"
    ],
    "logging.StreamHandler.setStream": [
        "logging.Handler.acquire",
        "logging.StreamHandler.flush"
    ],
    "logging.StreamHandler.__repr__": [
        "logging.getLevelName",
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "logging.FileHandler.close": [
        "logging.Handler.acquire",
        "logging.StreamHandler.flush"
    ],
    "logging.FileHandler.__repr__": [
        "logging.getLevelName"
    ],
    "logging.setLoggerClass": [
        "<builtin>.issubclass",
        "<builtin>.TypeError"
    ],
    "logging.Manager.getLogger": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "logging.Manager._fixupChildren",
        "logging.Manager._fixupParents",
        "logging._acquireLock"
    ],
    "logging.Manager._fixupParents": [
        "logging.PlaceHolder.__init__",
        "<builtin>.isinstance"
    ],
    "logging.PlaceHolder.__init__": [],
    "logging.Manager._fixupChildren": [
        "<builtin>.len"
    ],
    "logging.Manager.setLoggerClass": [
        "<builtin>.issubclass",
        "<builtin>.TypeError"
    ],
    "logging.Manager._clear_cache": [
        "<builtin>.isinstance",
        "<map>.clear",
        "logging._releaseLock",
        "logging._acquireLock",
        "<map>.values"
    ],
    "logging.Logger.warn": [
        "logging.Logger.warning",
        "warnings.warn"
    ],
    "logging.Logger.critical": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.log": [
        "<builtin>.TypeError",
        "logging.Logger._log",
        "logging.Logger.isEnabledFor",
        "<builtin>.isinstance"
    ],
    "logging.Logger.getChild": [
        "logging.Manager.getLogger"
    ],
    "logging.Logger.__repr__": [
        "logging.Logger.getEffectiveLevel",
        "logging.getLevelName"
    ],
    "logging.Logger.__reduce__": [
        "logging.getLogger",
        "pickle"
    ],
    "logging.LoggerAdapter.debug": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.log": [
        "logging.LoggerAdapter.process",
        "logging.LoggerAdapter.isEnabledFor"
    ],
    "logging.LoggerAdapter.isEnabledFor": [],
    "logging.LoggerAdapter.process": [],
    "logging.LoggerAdapter.info": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.warning": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.warn": [
        "logging.LoggerAdapter.warning",
        "warnings.warn"
    ],
    "logging.LoggerAdapter.error": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.exception": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.critical": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.__repr__": [
        "logging.getLevelName"
    ],
    "logging.critical": [
        "logging.basicConfig",
        "logging.Logger.critical",
        "<builtin>.len"
    ],
    "logging.warning": [
        "logging.Logger.warning",
        "logging.basicConfig",
        "<builtin>.len"
    ],
    "logging.warn": [
        "logging.warning",
        "warnings.warn"
    ],
    "logging.info": [
        "logging.basicConfig",
        "logging.Logger.info",
        "<builtin>.len"
    ],
    "logging.debug": [
        "logging.basicConfig",
        "logging.Logger.debug",
        "<builtin>.len"
    ],
    "logging.log": [
        "logging.basicConfig",
        "logging.Logger.log",
        "<builtin>.len"
    ],
    "logging.shutdown": [
        "<builtin>.reversed"
    ],
    "logging._showwarning": [
        "warnings.formatwarning",
        "warnings.showwarning",
        "logging.Logger.addHandler",
        "logging.Logger.warning",
        "logging.getLogger"
    ],
    "string._TemplateMetaclass.__init__": [
        "re.compile",
        "<builtin>.super",
        "re.escape"
    ],
    "string.Template._invalid": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "string.Template.safe_substitute": [
        "collections.ChainMap.__init__"
    ],
    "string.Formatter.format": [
        "string.Formatter.vformat"
    ],
    "string.Formatter.vformat": [
        "string.Formatter._vformat",
        "string.Formatter.check_unused_args",
        "<builtin>.set"
    ],
    "string.Formatter._vformat": [
        "<list>.append",
        "string.Formatter.get_field",
        "string.Formatter.convert_field",
        "string.Formatter.parse",
        "<builtin>.str",
        "string.Formatter._vformat",
        "<builtin>.ValueError"
    ],
    "string.Formatter.get_field": [
        "<builtin>.getattr",
        "string.Formatter.get_value"
    ],
    "string.Formatter.get_value": [
        "<builtin>.isinstance"
    ],
    "string.Formatter.convert_field": [
        "<builtin>.repr",
        "<builtin>.ascii",
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "<builtin>.ascii": [],
    "string.Formatter.check_unused_args": [],
    "string.Formatter.format_field": [
        "<builtin>.format"
    ],
    "string.Template.substitute.convert": [
        "<builtin>.ValueError",
        "string.Template._invalid",
        "<builtin>.str"
    ],
    "socket.socket.__exit__": [
        "socket.socket.close"
    ],
    "socket.socket.__repr__": [
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "socket.socket.__getstate__": [
        "<builtin>.TypeError"
    ],
    "socket.socket.dup": [
        "socket.socket.dup"
    ],
    "socket.socket.accept": [
        "socket.socket.__init__"
    ],
    "socket.socket.makefile": [
        "<builtin>.set",
        "socket.SocketIO.__init__",
        "_io.BufferedWriter",
        "_io.BufferedReader",
        "_io.TextIOWrapper",
        "<builtin>.ValueError",
        "_io.BufferedRWPair"
    ],
    "socket.SocketIO.__init__": [
        "<builtin>.ValueError"
    ],
    "_io.BufferedWriter": [],
    "_io.BufferedRWPair": [],
    "socket.socket._sendfile_use_send": [
        "<builtin>.min",
        "<builtin>.memoryview",
        "<builtin>.ValueError",
        "socket.socket._check_sendfile_params"
    ],
    "socket.socket._check_sendfile_params": [
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "socket.socket.sendfile": [
        "socket.socket._sendfile_use_send",
        "socket.socket._sendfile_use_sendfile"
    ],
    "socket.socket._sendfile_use_sendfile": [],
    "socket.socket._decref_socketios": [
        "socket.socket.close"
    ],
    "socket.socket.detach": [
        "<builtin>.super"
    ],
    "socket.socket.family": [
        "<builtin>.super",
        "socket._intenum_converter"
    ],
    "socket._intenum_converter": [],
    "socket.socket.type": [
        "<builtin>.super",
        "socket._intenum_converter"
    ],
    "socket.fromfd": [
        "socket.socket.__init__"
    ],
    "socket.fromshare": [
        "socket.socket.__init__"
    ],
    "socket.socketpair": [
        "socket.socket.accept",
        "socket.socket.close",
        "socket.socket.__init__",
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.readinto": [
        "<builtin>.OSError"
    ],
    "socket.SocketIO.readable": [
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.writable": [
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.seekable": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.name": [
        "socket.SocketIO.fileno"
    ],
    "socket.SocketIO.fileno": [],
    "socket.SocketIO.close": [
        "socket.socket._decref_socketios"
    ],
    "socket.getfqdn": [
        "<str>.strip"
    ],
    "socket.create_connection": [
        "socket.socket.close",
        "socket.getaddrinfo",
        "socket.socket.__init__"
    ],
    "socket.has_dualstack_ipv6": [
        "socket.socket.__enter__",
        "<builtin>.hasattr",
        "socket.socket.__exit__",
        "socket.socket.__init__"
    ],
    "socket.socket.__enter__": [],
    "socket.create_server": [
        "socket.has_dualstack_ipv6",
        "socket.socket.close",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "socket.socket.__init__"
    ],
    "selectors._fileobj_to_fd": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "selectors._SelectorMapping.__len__": [
        "<builtin>.len"
    ],
    "selectors._SelectorMapping.__getitem__": [
        "<builtin>.KeyError",
        "selectors._BaseSelectorImpl._fileobj_lookup"
    ],
    "selectors._SelectorMapping.__iter__": [
        "<builtin>.iter"
    ],
    "selectors.BaseSelector.modify": [
        "selectors._PollLikeSelector.register",
        "selectors._PollLikeSelector.unregister",
        "selectors.BaseSelector.unregister",
        "selectors.KqueueSelector.register",
        "selectors.SelectSelector.unregister",
        "selectors.SelectSelector.register",
        "selectors.BaseSelector.register",
        "selectors.KqueueSelector.unregister"
    ],
    "selectors.BaseSelector.unregister": [],
    "selectors.BaseSelector.register": [],
    "selectors.BaseSelector.get_key": [
        "selectors.BaseSelector.get_map",
        "<builtin>.KeyError",
        "<builtin>.RuntimeError",
        "selectors._BaseSelectorImpl.get_map"
    ],
    "selectors.BaseSelector.get_map": [],
    "selectors.BaseSelector.__exit__": [
        "selectors.EpollSelector.close",
        "selectors._BaseSelectorImpl.close",
        "selectors.KqueueSelector.close",
        "selectors.BaseSelector.close",
        "selectors.DevpollSelector.close"
    ],
    "selectors.BaseSelector.close": [],
    "selectors._BaseSelectorImpl.__init__": [
        "selectors._SelectorMapping.__init__"
    ],
    "selectors._SelectorMapping.__init__": [],
    "selectors._BaseSelectorImpl._fileobj_lookup": [
        "<map>.values",
        "selectors._fileobj_to_fd"
    ],
    "selectors._BaseSelectorImpl.register": [
        "<builtin>.KeyError",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.ValueError"
    ],
    "selectors._BaseSelectorImpl.unregister": [
        "<map>.pop",
        "<builtin>.KeyError"
    ],
    "selectors._BaseSelectorImpl.modify": [
        "selectors.KqueueSelector.register",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "selectors._PollLikeSelector.register",
        "selectors._PollLikeSelector.unregister",
        "<builtin>.KeyError",
        "selectors._BaseSelectorImpl.register",
        "selectors._BaseSelectorImpl.unregister",
        "selectors.SelectSelector.unregister",
        "selectors.SelectSelector.register",
        "selectors.KqueueSelector.unregister"
    ],
    "selectors._BaseSelectorImpl.close": [
        "<map>.clear"
    ],
    "selectors.SelectSelector.register": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.select": [
        "<builtin>.set",
        "selectors._BaseSelectorImpl._key_from_fd",
        "selectors.SelectSelector._select",
        "<list>.append",
        "<builtin>.max"
    ],
    "selectors.SelectSelector._select": [],
    "selectors._BaseSelectorImpl._key_from_fd": [],
    "selectors._PollLikeSelector.__init__": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.register": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.modify": [
        "<builtin>.KeyError",
        "<builtin>.super",
        "selectors._BaseSelectorImpl._fileobj_lookup"
    ],
    "selectors._PollLikeSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd",
        "<list>.append"
    ],
    "selectors.EpollSelector.select": [
        "<list>.append",
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "selectors.EpollSelector.close": [
        "<builtin>.super"
    ],
    "selectors.DevpollSelector.close": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.__init__": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.register": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.select": [
        "<list>.append",
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "selectors.KqueueSelector.close": [
        "<builtin>.super"
    ],
    "subprocess.STARTUPINFO.copy": [
        "subprocess.STARTUPINFO.__init__",
        "<builtin>.list"
    ],
    "subprocess.STARTUPINFO.__init__": [],
    "subprocess.Handle.Detach": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "subprocess.Handle.__repr__": [
        "<builtin>.int"
    ],
    "subprocess._optim_args_from_interpreter_flags": [
        "<list>.append"
    ],
    "subprocess._args_from_interpreter_flags": [
        "<map>.items",
        "<list>.extend",
        "subprocess._optim_args_from_interpreter_flags",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "subprocess.call": [
        "subprocess.Popen.kill",
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__",
        "subprocess.Popen.__enter__",
        "subprocess.Popen.__exit__"
    ],
    "subprocess.check_call": [
        "subprocess.call",
        "subprocess.CalledProcessError.__init__"
    ],
    "subprocess.CompletedProcess.__repr__": [
        "<builtin>.type",
        "<list>.append"
    ],
    "subprocess.CompletedProcess.check_returncode": [
        "subprocess.CalledProcessError.__init__"
    ],
    "subprocess.list2cmdline": [
        "<list>.extend",
        "<builtin>.map",
        "<list>.append"
    ],
    "subprocess.getstatusoutput": [
        "subprocess.check_output"
    ],
    "subprocess.getoutput": [
        "subprocess.getstatusoutput"
    ],
    "subprocess.Popen.__del__": [
        "subprocess.Popen._internal_poll",
        "warnings.warn",
        "<list>.append"
    ],
    "subprocess.Popen.terminate": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen._filter_handle_list": [
        "<builtin>.list"
    ],
    "signal._enum_to_int": [
        "<builtin>.int"
    ],
    "signal.signal": [
        "signal._enum_to_int",
        "signal._int_to_enum"
    ],
    "signal._int_to_enum": [],
    "signal.getsignal": [
        "signal._int_to_enum"
    ],
    "signal.pthread_sigmask": [
        "signal._int_to_enum",
        "<builtin>.set"
    ],
    "signal.sigpending": [
        "signal._int_to_enum"
    ],
    "signal.sigwait": [
        "signal._int_to_enum"
    ],
    "signal.valid_signals": [
        "signal._int_to_enum"
    ],
    "ssl._inet_paton": [
        "<builtin>.ValueError"
    ],
    "ssl._ipaddress_match": [
        "ssl._inet_paton"
    ],
    "ssl.match_hostname": [
        "<builtin>.len",
        "ssl._inet_paton",
        "ssl._ipaddress_match",
        "<list>.append",
        "<builtin>.map",
        "<builtin>.ValueError",
        "ssl._dnsname_match"
    ],
    "ssl._dnsname_match": [],
    "ssl.get_default_verify_paths": [
        "genericpath.isdir",
        "nt._isdir",
        "genericpath.isfile"
    ],
    "ssl._ASN1Object.__new__": [
        "<builtin>.super"
    ],
    "ssl._ASN1Object.fromnid": [
        "<builtin>.super"
    ],
    "ssl._ASN1Object.fromname": [
        "<builtin>.super"
    ],
    "ssl.SSLContext._encode_hostname": [
        "<builtin>.isinstance"
    ],
    "ssl.SSLContext.wrap_socket": [
        "ssl.SSLSocket._create"
    ],
    "ssl.SSLSocket._create": [
        "<builtin>.dict",
        "<builtin>.NotImplementedError",
        "<builtin>.super",
        "ssl.SSLContext._encode_hostname",
        "<builtin>.ValueError"
    ],
    "ssl.SSLContext.wrap_bio": [
        "ssl.SSLObject._create",
        "ssl.SSLContext._encode_hostname"
    ],
    "ssl.SSLObject._create": [],
    "ssl.SSLContext.set_npn_protocols": [
        "<builtin>.len",
        "<builtin>.bytearray",
        "<builtin>.bytes"
    ],
    "ssl.SSLContext.set_servername_callback": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "ssl.SSLContext.set_alpn_protocols": [
        "<builtin>.len",
        "<builtin>.bytearray",
        "<builtin>.bytes"
    ],
    "ssl.SSLContext.minimum_version": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.maximum_version": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.options": [
        "<builtin>.super"
    ],
    "ssl.SSLContext._msg_callback": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.protocol": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.verify_flags": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.verify_mode": [
        "<builtin>.super"
    ],
    "ssl._create_unverified_context": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "ssl.SSLContext.load_default_certs",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "ssl.SSLObject.__init__": [
        "<builtin>.TypeError"
    ],
    "ssl.SSLSocket.__init__": [
        "<builtin>.TypeError"
    ],
    "ssl.SSLSocket.dup": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.read": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket._checkClosed": [],
    "ssl.SSLSocket.write": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.getpeercert": [
        "ssl.SSLSocket._check_connected",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket._check_connected": [],
    "ssl.SSLSocket.selected_npn_protocol": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.selected_alpn_protocol": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.cipher": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.shared_ciphers": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.compression": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.send": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.sendto": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.sendmsg": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.sendall": [
        "ssl.SSLSocket.send",
        "<builtin>.super",
        "<builtin>.memoryview",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "ssl.SSLSocket.sendfile": [
        "<builtin>.super"
    ],
    "ssl.SSLSocket.recv": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket.read",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.recv_into": [
        "<builtin>.super",
        "ssl.SSLSocket._checkClosed",
        "ssl.SSLSocket.read",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "ssl.SSLSocket.recvfrom": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.recvfrom_into": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.recvmsg": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.recvmsg_into": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.pending": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.shutdown": [
        "<builtin>.super",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.unwrap": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "ssl.SSLSocket.verify_client_post_handshake": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "ssl.SSLSocket._real_close": [
        "<builtin>.super"
    ],
    "ssl.SSLSocket.do_handshake": [
        "ssl.SSLSocket._check_connected"
    ],
    "ssl.SSLSocket._real_connect": [
        "ssl.SSLSocket.do_handshake",
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "ssl.SSLSocket.connect": [
        "ssl.SSLSocket._real_connect"
    ],
    "ssl.SSLSocket.connect_ex": [
        "ssl.SSLSocket._real_connect"
    ],
    "ssl.SSLSocket.accept": [
        "<builtin>.super"
    ],
    "ssl.SSLSocket.get_channel_binding": [
        "<builtin>.ValueError"
    ],
    "ssl.wrap_socket": [
        "ssl.SSLContext.wrap_socket",
        "<builtin>.ValueError"
    ],
    "ssl.cert_time_to_seconds": [
        "<str>.index",
        "calendar",
        "<builtin>.ValueError"
    ],
    "ssl.DER_cert_to_PEM_cert": [
        "<builtin>.len",
        "<builtin>.str",
        "base64.standard_b64encode",
        "<list>.append",
        "<builtin>.range"
    ],
    "base64.standard_b64encode": [
        "base64.b64encode"
    ],
    "ssl.PEM_cert_to_DER_cert": [
        "base64.decodebytes",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "ssl.get_server_certificate": [
        "ssl.DER_cert_to_PEM_cert",
        "ssl._create_unverified_context",
        "ssl.SSLContext.wrap_socket",
        "socket.create_connection"
    ],
    "base64._bytes_from_decode_data": [
        "<builtin>.TypeError",
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "base64.b64decode": [
        "<builtin>.repr",
        "<builtin>.len",
        "re.fullmatch",
        "base64._bytes_from_decode_data"
    ],
    "base64.standard_b64decode": [
        "base64.b64decode"
    ],
    "base64.urlsafe_b64encode": [
        "base64.b64encode"
    ],
    "base64.urlsafe_b64decode": [
        "base64.b64decode",
        "base64._bytes_from_decode_data"
    ],
    "base64.b32encode": [
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "base64.b32decode": [
        "<builtin>.bytes",
        "base64._bytes_from_decode_data",
        "<builtin>.bytearray",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.range"
    ],
    "base64.b16decode": [
        "re.search",
        "base64._bytes_from_decode_data"
    ],
    "base64._85encode": [
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "base64.a85encode": [
        "<builtin>.bytes",
        "base64._85encode",
        "<builtin>.len",
        "<builtin>.max",
        "<builtin>.range"
    ],
    "base64.a85decode": [
        "<builtin>.len",
        "<list>",
        "<builtin>.ValueError",
        "base64._bytes_from_decode_data"
    ],
    "base64.b85encode": [
        "base64._85encode",
        "<builtin>.bytes"
    ],
    "base64.b85decode": [
        "base64._bytes_from_decode_data",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "base64.encodestring": [
        "warnings",
        "base64.encodebytes",
        "warnings.warn"
    ],
    "base64.decodestring": [
        "warnings",
        "warnings.warn",
        "base64.decodebytes"
    ],
    "getopt.gnu_getopt": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "getopt.do_shorts",
        "<list>.append",
        "getopt.do_longs"
    ],
    "asyncio.coroutines.CoroWrapper.__init__": [
        "inspect.iscoroutine",
        "<builtin>.getattr",
        "asyncio.format_helpers.extract_stack",
        "inspect.isgenerator"
    ],
    "asyncio.coroutines.CoroWrapper.__repr__": [
        "asyncio.coroutines._format_coroutine"
    ],
    "asyncio.coroutines._format_coroutine": [
        "asyncio.coroutines._format_coroutine.is_running",
        "<builtin>.isinstance",
        "asyncio.coroutines.iscoroutine",
        "asyncio.coroutines._format_coroutine.get_name",
        "asyncio.format_helpers._get_function_source",
        "inspect.isgeneratorfunction",
        "<builtin>.hasattr"
    ],
    "asyncio.coroutines._format_coroutine.get_name": [
        "asyncio.format_helpers._format_callback",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "asyncio.format_helpers._format_callback": [
        "<builtin>.isinstance",
        "asyncio.format_helpers._format_callback",
        "<builtin>.repr",
        "<builtin>.hasattr",
        "asyncio.format_helpers._format_args_and_kwargs"
    ],
    "asyncio.format_helpers._format_args_and_kwargs": [
        "<list>.extend"
    ],
    "asyncio.coroutines._format_coroutine.is_running": [],
    "asyncio.format_helpers._get_function_source": [
        "inspect.unwrap",
        "asyncio.format_helpers._get_function_source",
        "inspect.isfunction",
        "<builtin>.isinstance"
    ],
    "asyncio.coroutines.CoroWrapper.__del__": [
        "logging.Logger.error",
        "traceback.format_list",
        "<str>.rstrip",
        "<builtin>.getattr"
    ],
    "asyncio.coroutines.coroutine": [
        "inspect.iscoroutinefunction",
        "functools.wraps",
        "types.coroutine",
        "inspect.isgeneratorfunction",
        "warnings.warn"
    ],
    "asyncio.base_futures._format_callbacks": [
        "asyncio.base_futures._format_callbacks.format_cb",
        "<builtin>.len"
    ],
    "asyncio.base_futures._format_callbacks.format_cb": [
        "asyncio.format_helpers._format_callback_source"
    ],
    "asyncio.format_helpers._format_callback_source": [
        "asyncio.format_helpers._format_callback",
        "asyncio.format_helpers._get_function_source"
    ],
    "asyncio.base_futures._future_repr_info": [
        "reprlib.Repr.repr",
        "<list>.append"
    ],
    "asyncio.events.Handle._repr_info": [
        "<list>.append"
    ],
    "asyncio.events.Handle.__repr__": [
        "asyncio.events.Handle._repr_info",
        "asyncio.events.TimerHandle._repr_info"
    ],
    "asyncio.events.Handle._run": [
        "asyncio.format_helpers._format_callback_source",
        "asyncio.base_events.BaseEventLoop.call_exception_handler"
    ],
    "asyncio.events.TimerHandle._repr_info": [
        "<builtin>.super"
    ],
    "asyncio.events.TimerHandle.__hash__": [
        "<builtin>.hash"
    ],
    "asyncio.events.TimerHandle.__le__": [
        "asyncio.events.TimerHandle.__eq__"
    ],
    "asyncio.events.TimerHandle.__eq__": [
        "<builtin>.isinstance"
    ],
    "asyncio.events.TimerHandle.__ge__": [
        "asyncio.events.TimerHandle.__eq__"
    ],
    "asyncio.events.TimerHandle.__ne__": [
        "asyncio.events.TimerHandle.__eq__"
    ],
    "asyncio.events.TimerHandle.cancel": [
        "<builtin>.super",
        "asyncio.base_events.BaseEventLoop._timer_handle_cancelled"
    ],
    "asyncio.base_events.BaseEventLoop._timer_handle_cancelled": [],
    "asyncio.events.AbstractServer.__aexit__": [
        "asyncio.events.AbstractServer.wait_closed",
        "asyncio.events.AbstractServer.close"
    ],
    "asyncio.events.AbstractServer.close": [],
    "asyncio.events.AbstractServer.wait_closed": [],
    "asyncio.events.AbstractEventLoop.call_soon": [
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.events.AbstractEventLoop.call_later"
    ],
    "asyncio.events.AbstractEventLoop.call_later": [],
    "asyncio.events.BaseDefaultEventLoopPolicy.get_event_loop": [
        "<builtin>.isinstance",
        "asyncio.events.BaseDefaultEventLoopPolicy.new_event_loop",
        "threading.current_thread",
        "<builtin>.RuntimeError",
        "asyncio.events.BaseDefaultEventLoopPolicy.set_event_loop"
    ],
    "asyncio.events.BaseDefaultEventLoopPolicy.new_event_loop": [],
    "asyncio.events.BaseDefaultEventLoopPolicy.set_event_loop": [
        "<builtin>.isinstance"
    ],
    "asyncio.events.set_event_loop_policy": [
        "<builtin>.isinstance"
    ],
    "asyncio.events.get_child_watcher": [
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.events.set_child_watcher": [
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.exceptions.IncompleteReadError.__init__": [
        "<builtin>.super",
        "<builtin>.len"
    ],
    "asyncio.exceptions.IncompleteReadError.__reduce__": [
        "<builtin>.type"
    ],
    "asyncio.exceptions.LimitOverrunError.__init__": [
        "<builtin>.super"
    ],
    "asyncio.exceptions.LimitOverrunError.__reduce__": [
        "<builtin>.type"
    ],
    "asyncio.futures.Future.__repr__": [
        "asyncio.tasks.Task._repr_info",
        "asyncio.base_futures._future_repr_info",
        "asyncio.windows_events._OverlappedFuture._repr_info",
        "asyncio.windows_events._BaseWaitHandleFuture._repr_info"
    ],
    "asyncio.tasks.Task._repr_info": [
        "asyncio.base_tasks._task_repr_info"
    ],
    "asyncio.base_tasks._task_repr_info": [
        "<list>.insert",
        "asyncio.base_futures._future_repr_info",
        "asyncio.coroutines._format_coroutine"
    ],
    "asyncio.futures.Future.__del__": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler"
    ],
    "asyncio.futures.Future.get_loop": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.futures.Future.cancel": [
        "asyncio.futures.Future.__schedule_callbacks"
    ],
    "asyncio.futures.Future.remove_done_callback": [
        "<builtin>.len"
    ],
    "asyncio.futures.Future.set_exception": [
        "<builtin>.TypeError",
        "asyncio.futures.Future.__schedule_callbacks",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "asyncio.futures.Future.__await__": [
        "asyncio.futures.Future.done",
        "<builtin>.RuntimeError",
        "asyncio.futures.Future.result"
    ],
    "asyncio.futures._convert_future_exc": [
        "<builtin>.type"
    ],
    "asyncio.futures._set_concurrent_future_state": [
        "asyncio.futures.Future.cancel",
        "asyncio.futures._convert_future_exc",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.set_result"
    ],
    "asyncio.futures._copy_future_state": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.cancel",
        "asyncio.futures._convert_future_exc",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.futures._chain_future._set_state": [
        "asyncio.futures._copy_future_state",
        "asyncio.base_futures.isfuture",
        "asyncio.futures._set_concurrent_future_state"
    ],
    "asyncio.futures._chain_future._call_set_state": [
        "asyncio.futures._chain_future._set_state",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.protocols._feed_data_to_buffered_proto": [
        "<builtin>.RuntimeError",
        "<builtin>.len"
    ],
    "asyncio.sslproto._SSLPipe.do_handshake": [
        "ssl.SSLContext.wrap_bio",
        "asyncio.sslproto._SSLPipe.feed_ssldata",
        "<builtin>.RuntimeError",
        "<builtin>.len"
    ],
    "asyncio.sslproto._SSLPipe.feed_ssldata": [
        "asyncio.sslproto.SSLProtocol._on_handshake_complete",
        "asyncio.sslproto.SSLProtocol._finalize",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "asyncio.sslproto._SSLPipe.shutdown": [
        "asyncio.sslproto._SSLPipe.feed_ssldata",
        "<builtin>.RuntimeError"
    ],
    "asyncio.sslproto._SSLPipe.feed_eof": [
        "asyncio.sslproto._SSLPipe.feed_ssldata"
    ],
    "asyncio.sslproto._SSLPipe.feed_appdata": [
        "<list>.append",
        "<builtin>.memoryview",
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "asyncio.sslproto._SSLProtocolTransport.get_extra_info": [
        "asyncio.sslproto.SSLProtocol._get_extra_info"
    ],
    "asyncio.sslproto.SSLProtocol._get_extra_info": [],
    "asyncio.sslproto._SSLProtocolTransport.set_protocol": [
        "asyncio.sslproto.SSLProtocol._set_app_protocol"
    ],
    "asyncio.sslproto._SSLProtocolTransport.close": [
        "asyncio.sslproto.SSLProtocol._start_shutdown"
    ],
    "asyncio.sslproto.SSLProtocol._start_shutdown": [
        "asyncio.sslproto.SSLProtocol._abort",
        "asyncio.sslproto.SSLProtocol._write_appdata"
    ],
    "asyncio.sslproto.SSLProtocol._write_appdata": [
        "asyncio.sslproto.SSLProtocol._process_write_backlog",
        "<builtin>.len"
    ],
    "asyncio.sslproto.SSLProtocol._process_write_backlog": [
        "asyncio.sslproto._SSLPipe.do_handshake",
        "asyncio.sslproto.SSLProtocol._on_handshake_complete",
        "asyncio.sslproto._SSLPipe.feed_appdata",
        "<builtin>.len",
        "asyncio.sslproto._SSLPipe.shutdown",
        "asyncio.sslproto.SSLProtocol._fatal_error",
        "<builtin>.range"
    ],
    "asyncio.sslproto.SSLProtocol._fatal_error": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "<builtin>.isinstance",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.sslproto.SSLProtocol._on_handshake_complete": [
        "logging.Logger.debug",
        "asyncio.streams.StreamReaderProtocol.connection_made",
        "<builtin>.isinstance",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.base_events.BaseEventLoop.call_soon",
        "asyncio.sslproto.SSLProtocol._wakeup_waiter",
        "asyncio.base_events.BaseEventLoop.time",
        "asyncio.sslproto.SSLProtocol._fatal_error",
        "asyncio.events.TimerHandle.cancel"
    ],
    "asyncio.sslproto.SSLProtocol._wakeup_waiter": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.sslproto.SSLProtocol._abort": [],
    "asyncio.sslproto._SSLProtocolTransport.__del__": [
        "asyncio.sslproto._SSLProtocolTransport.close",
        "warnings.warn"
    ],
    "asyncio.sslproto._SSLProtocolTransport.is_reading": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.sslproto._SSLProtocolTransport.write": [
        "<builtin>.TypeError",
        "asyncio.sslproto.SSLProtocol._write_appdata",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "asyncio.sslproto._SSLProtocolTransport.abort": [
        "asyncio.sslproto.SSLProtocol._abort"
    ],
    "asyncio.sslproto.SSLProtocol.connection_made": [
        "asyncio.sslproto._SSLPipe.__init__",
        "asyncio.sslproto.SSLProtocol._start_handshake"
    ],
    "asyncio.sslproto._SSLPipe.__init__": [],
    "asyncio.sslproto.SSLProtocol._start_handshake": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.base_events.BaseEventLoop.time",
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.sslproto.SSLProtocol._process_write_backlog"
    ],
    "asyncio.sslproto.SSLProtocol.connection_lost": [
        "asyncio.sslproto.SSLProtocol._wakeup_waiter",
        "asyncio.events.TimerHandle.cancel",
        "<builtin>.getattr",
        "asyncio.base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.sslproto.SSLProtocol.data_received": [
        "asyncio.streams.StreamReaderProtocol.data_received",
        "asyncio.sslproto.SSLProtocol._start_shutdown",
        "asyncio.sslproto._SSLPipe.feed_ssldata",
        "asyncio.sslproto.SSLProtocol._fatal_error",
        "asyncio.protocols._feed_data_to_buffered_proto"
    ],
    "asyncio.sslproto.SSLProtocol.eof_received": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.sslproto.SSLProtocol._wakeup_waiter",
        "logging.Logger.warning",
        "asyncio.streams.StreamReaderProtocol.eof_received"
    ],
    "asyncio.sslproto.SSLProtocol._check_handshake_timeout": [
        "asyncio.sslproto.SSLProtocol._fatal_error",
        "<builtin>.ConnectionAbortedError"
    ],
    "<builtin>.ConnectionAbortedError": [],
    "asyncio.transports.BaseTransport.get_extra_info": [
        "<map>.get"
    ],
    "asyncio.transports.WriteTransport.writelines": [
        "asyncio.transports.WriteTransport.write"
    ],
    "asyncio.transports.WriteTransport.write": [],
    "asyncio.transports._FlowControlMixin.__init__": [
        "<builtin>.super",
        "asyncio.transports._FlowControlMixin._set_write_buffer_limits"
    ],
    "asyncio.transports._FlowControlMixin._set_write_buffer_limits": [
        "<builtin>.ValueError"
    ],
    "asyncio.transports._FlowControlMixin._maybe_pause_protocol": [
        "asyncio.selector_events._SelectorDatagramTransport.get_write_buffer_size",
        "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size",
        "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size",
        "asyncio.transports._FlowControlMixin.get_write_buffer_size",
        "asyncio.selector_events._SelectorTransport.get_write_buffer_size"
    ],
    "asyncio.transports._FlowControlMixin.get_write_buffer_size": [],
    "asyncio.transports._FlowControlMixin._maybe_resume_protocol": [
        "asyncio.selector_events._SelectorDatagramTransport.get_write_buffer_size",
        "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size",
        "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size",
        "asyncio.transports._FlowControlMixin.get_write_buffer_size",
        "asyncio.selector_events._SelectorTransport.get_write_buffer_size"
    ],
    "asyncio.transports._FlowControlMixin.set_write_buffer_limits": [
        "asyncio.transports._FlowControlMixin._set_write_buffer_limits",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol"
    ],
    "asyncio.locks._ContextManagerMixin.__enter__": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.locks._ContextManagerMixin.__acquire_ctx": [
        "asyncio.locks._ContextManager.__init__"
    ],
    "asyncio.locks._ContextManagerMixin.__await__": [
        "warnings.warn",
        "asyncio.locks._ContextManagerMixin.__acquire_ctx"
    ],
    "asyncio.locks.Lock.__init__": [
        "asyncio.events.get_event_loop",
        "warnings.warn"
    ],
    "asyncio.locks.Lock.__repr__": [
        "<builtin>.super",
        "<builtin>.len"
    ],
    "asyncio.locks.Lock.acquire": [
        "asyncio.locks.Lock._wake_up_first",
        "asyncio.base_events.BaseEventLoop.create_future",
        "_collections.deque",
        "<builtin>.all"
    ],
    "asyncio.locks.Lock._wake_up_first": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "asyncio.locks.Lock.release": [
        "asyncio.locks.Lock._wake_up_first",
        "<builtin>.RuntimeError"
    ],
    "asyncio.locks.Event.__repr__": [
        "<builtin>.super",
        "<builtin>.len"
    ],
    "asyncio.locks.Condition.__init__": [
        "asyncio.events.get_event_loop",
        "_collections.deque",
        "asyncio.locks.Lock.__init__",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "asyncio.locks.Condition.__repr__": [
        "<builtin>.super",
        "asyncio.locks.Lock.locked",
        "<builtin>.len"
    ],
    "asyncio.locks.Lock.locked": [],
    "asyncio.locks.Condition.wait": [
        "asyncio.locks.Lock.release",
        "asyncio.locks.Lock.locked",
        "<builtin>.RuntimeError",
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.locks.Condition.wait_for": [
        "asyncio.locks.Condition.wait"
    ],
    "asyncio.locks.Condition.notify": [
        "asyncio.locks.Lock.locked",
        "<builtin>.RuntimeError"
    ],
    "asyncio.locks.Condition.notify_all": [
        "asyncio.locks.Condition.notify",
        "<builtin>.len"
    ],
    "asyncio.locks.Semaphore.__init__": [
        "asyncio.events.get_event_loop",
        "warnings.warn",
        "_collections.deque",
        "<builtin>.ValueError"
    ],
    "asyncio.locks.Semaphore.__repr__": [
        "<builtin>.super",
        "asyncio.locks.Semaphore.locked",
        "<builtin>.len"
    ],
    "asyncio.locks.Semaphore.locked": [],
    "asyncio.locks.Semaphore.acquire": [
        "asyncio.futures.Future.cancel",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.locks.Semaphore._wake_up_next",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.locks.Semaphore._wake_up_next": [],
    "asyncio.locks.Semaphore.release": [
        "asyncio.locks.Semaphore._wake_up_next"
    ],
    "asyncio.locks.BoundedSemaphore.__init__": [
        "<builtin>.super",
        "warnings.warn"
    ],
    "asyncio.locks.BoundedSemaphore.release": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "asyncio.tasks.current_task": [
        "asyncio.events.get_running_loop",
        "<map>.get"
    ],
    "asyncio.tasks._all_tasks_compat": [
        "asyncio.futures._get_loop",
        "asyncio.events.get_event_loop",
        "<builtin>.list"
    ],
    "asyncio.tasks.Task.current_task": [
        "asyncio.tasks.Task.current_task",
        "asyncio.events.get_event_loop",
        "warnings.warn"
    ],
    "asyncio.tasks.Task.all_tasks": [
        "warnings.warn",
        "asyncio.tasks._all_tasks_compat"
    ],
    "asyncio.tasks.Task.__del__": [
        "<builtin>.super",
        "asyncio.base_events.BaseEventLoop.call_exception_handler"
    ],
    "asyncio.tasks.Task.set_name": [
        "<builtin>.str"
    ],
    "asyncio.tasks.Task.set_result": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.tasks.Task.set_exception": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.tasks.Task.get_stack": [
        "asyncio.base_tasks._task_get_stack"
    ],
    "asyncio.base_tasks._task_get_stack": [
        "<list>.reverse",
        "<builtin>.hasattr",
        "<list>.append"
    ],
    "asyncio.tasks.Task.print_stack": [
        "asyncio.base_tasks._task_print_stack"
    ],
    "asyncio.base_tasks._task_print_stack": [
        "<builtin>.set",
        "linecache.getline",
        "linecache.checkcache",
        "traceback.print_list",
        "<list>.append",
        "<builtin>.print",
        "traceback.format_exception_only",
        "asyncio.tasks.Task.get_stack"
    ],
    "asyncio.tasks.Task.cancel": [
        "asyncio.futures.Future.done"
    ],
    "asyncio.tasks.Task.__step": [
        "asyncio.futures.Future.done",
        "<builtin>.super",
        "asyncio.tasks._enter_task",
        "<builtin>.isinstance"
    ],
    "asyncio.tasks._enter_task": [
        "<builtin>.RuntimeError",
        "<map>.get"
    ],
    "asyncio.tasks.Task.__wakeup": [
        "asyncio.tasks.Task.__step"
    ],
    "asyncio.tasks.create_task": [
        "asyncio.tasks._set_task_name",
        "asyncio.events.get_running_loop",
        "asyncio.base_events.BaseEventLoop.create_task"
    ],
    "asyncio.tasks.wait_for": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.Task.cancel",
        "asyncio.futures.Future.remove_done_callback",
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.tasks.ensure_future",
        "asyncio.tasks._cancel_and_wait",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.events.get_running_loop",
        "warnings.warn",
        "asyncio.futures.Future.result"
    ],
    "asyncio.tasks._cancel_and_wait": [
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.Task.cancel",
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.tasks.as_completed": [
        "<builtin>.range",
        "asyncio.base_futures.isfuture",
        "<builtin>.set",
        "<builtin>.TypeError",
        "asyncio.queues.Queue.__init__",
        "asyncio.coroutines.iscoroutine",
        "asyncio.queues",
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.tasks.ensure_future",
        "asyncio.events.get_event_loop",
        "asyncio.tasks.as_completed._wait_for_one",
        "<builtin>.type",
        "<builtin>.len",
        "warnings.warn"
    ],
    "asyncio.tasks.as_completed._wait_for_one": [
        "asyncio.queues.Queue.get"
    ],
    "asyncio.tasks._GatheringFuture.cancel": [
        "asyncio.futures.Future.done"
    ],
    "asyncio.tasks.shield": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.ensure_future",
        "asyncio.futures._get_loop",
        "asyncio.base_events.BaseEventLoop.create_future",
        "warnings.warn"
    ],
    "asyncio.tasks.run_coroutine_threadsafe": [
        "<builtin>.TypeError",
        "asyncio.coroutines.iscoroutine",
        "asyncio.base_events.BaseEventLoop.call_soon_threadsafe"
    ],
    "asyncio.tasks._leave_task": [
        "<builtin>.RuntimeError",
        "<map>.get"
    ],
    "asyncio.tasks._unregister_task": [
        "_weakrefset.WeakSet.discard"
    ],
    "asyncio.tasks.gather._done_callback": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "<list>.append"
    ],
    "asyncio.trsock.TransportSocket._na": [
        "warnings.warn"
    ],
    "asyncio.trsock.TransportSocket.__repr__": [
        "asyncio.trsock.TransportSocket.getpeername",
        "asyncio.trsock.TransportSocket.fileno",
        "asyncio.trsock.TransportSocket.getsockname"
    ],
    "asyncio.trsock.TransportSocket.fileno": [],
    "asyncio.trsock.TransportSocket.getsockname": [],
    "asyncio.trsock.TransportSocket.getpeername": [],
    "asyncio.trsock.TransportSocket.__getstate__": [
        "<builtin>.TypeError"
    ],
    "asyncio.trsock.TransportSocket.accept": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.connect": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.connect_ex": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.bind": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.ioctl": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.listen": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.makefile": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendfile": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.close": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.detach": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendmsg_afalg": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendmsg": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendto": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.send": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendall": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.set_inheritable": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.share": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recv_into": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recvfrom_into": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recvmsg_into": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recvmsg": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recvfrom": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recv": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.settimeout": [
        "<builtin>.ValueError"
    ],
    "asyncio.trsock.TransportSocket.setblocking": [
        "<builtin>.ValueError"
    ],
    "asyncio.trsock.TransportSocket.__enter__": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.__exit__": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.runners._cancel_all_tasks": [
        "asyncio.tasks.all_tasks",
        "asyncio.tasks.gather"
    ],
    "asyncio.queues.Queue.__repr__": [
        "asyncio.queues.Queue._format",
        "<builtin>.id",
        "<builtin>.type"
    ],
    "asyncio.queues.Queue._format": [
        "<builtin>.list",
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "asyncio.queues.Queue.__str__": [
        "asyncio.queues.Queue._format",
        "<builtin>.type"
    ],
    "asyncio.queues.Queue.put": [
        "asyncio.futures.Future.cancel",
        "asyncio.queues.Queue.full",
        "asyncio.queues.Queue.put_nowait",
        "asyncio.queues.Queue._wakeup_next",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.queues.PriorityQueue._put": [
        "heapq.heappush"
    ],
    "asyncio.queues.PriorityQueue._get": [
        "heapq.heappop"
    ],
    "asyncio.queues.LifoQueue._put": [
        "<list>.append"
    ],
    "asyncio.queues.LifoQueue._get": [
        "<list>.pop"
    ],
    "asyncio.streams.open_connection": [
        "asyncio.streams.StreamReaderProtocol.__init__",
        "asyncio.streams.StreamReader.__init__",
        "asyncio.streams.StreamWriter.__init__",
        "asyncio.events.get_event_loop",
        "asyncio.base_events.BaseEventLoop.create_connection",
        "warnings.warn"
    ],
    "asyncio.streams.StreamReader.__init__": [
        "asyncio.base_events.BaseEventLoop.get_debug",
        "<builtin>.bytearray",
        "asyncio.format_helpers.extract_stack",
        "asyncio.events.get_event_loop",
        "<builtin>.ValueError"
    ],
    "asyncio.streams.StreamReaderProtocol.__init__": [
        "<builtin>.super",
        "asyncio.base_events.BaseEventLoop.create_future",
        "_weakref.ref"
    ],
    "asyncio.streams.open_connection.<lambda1>": [],
    "asyncio.streams.StreamWriter.__init__": [
        "asyncio.futures.Future.set_result",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.isinstance"
    ],
    "asyncio.streams.start_server": [
        "asyncio.base_events.BaseEventLoop.create_server",
        "asyncio.events.get_event_loop",
        "warnings.warn"
    ],
    "asyncio.streams.open_unix_connection": [
        "asyncio.streams.StreamReaderProtocol.__init__",
        "asyncio.streams.StreamReader.__init__",
        "asyncio.streams.StreamWriter.__init__",
        "asyncio.events.get_event_loop",
        "asyncio.events.AbstractEventLoop.create_unix_connection",
        "warnings.warn"
    ],
    "asyncio.events.AbstractEventLoop.create_unix_connection": [],
    "asyncio.streams.start_unix_server": [
        "asyncio.events.get_event_loop",
        "warnings.warn",
        "asyncio.events.AbstractEventLoop.create_unix_server"
    ],
    "asyncio.events.AbstractEventLoop.create_unix_server": [],
    "asyncio.streams.FlowControlMixin.__init__": [
        "asyncio.events.get_event_loop"
    ],
    "asyncio.streams.FlowControlMixin.pause_writing": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.streams.FlowControlMixin.resume_writing": [
        "asyncio.futures.Future.done",
        "logging.Logger.debug",
        "asyncio.futures.Future.set_result",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.streams.FlowControlMixin._drain_helper": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.ConnectionResetError",
        "asyncio.futures.Future.cancelled"
    ],
    "<builtin>.ConnectionResetError": [],
    "asyncio.streams.StreamReaderProtocol.connection_made": [
        "asyncio.base_events.BaseEventLoop.create_task",
        "asyncio.coroutines.iscoroutine",
        "asyncio.streams.StreamWriter.__init__",
        "asyncio.sslproto._SSLProtocolTransport.abort",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.sslproto._SSLProtocolTransport.get_extra_info"
    ],
    "asyncio.streams.StreamReaderProtocol.connection_lost": [
        "asyncio.futures.Future.done",
        "<builtin>.super",
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception"
    ],
    "asyncio.streams.StreamReaderProtocol.__del__": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.exception",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.streams.StreamWriter.__repr__": [
        "<list>.append"
    ],
    "asyncio.streams.StreamWriter.wait_closed": [
        "asyncio.subprocess.SubprocessStreamProtocol._get_close_waiter",
        "asyncio.streams.StreamReaderProtocol._get_close_waiter"
    ],
    "asyncio.streams.StreamReaderProtocol._get_close_waiter": [],
    "asyncio.streams.StreamWriter.drain": [
        "asyncio.tasks.sleep",
        "asyncio.streams.StreamReader.exception",
        "asyncio.sslproto._SSLProtocolTransport.is_closing",
        "asyncio.streams.FlowControlMixin._drain_helper"
    ],
    "asyncio.streams.StreamReader.exception": [],
    "asyncio.streams.StreamReader.__repr__": [
        "<list>.append"
    ],
    "asyncio.streams.StreamReader._maybe_resume_transport": [
        "<builtin>.len"
    ],
    "asyncio.streams.StreamReader.feed_eof": [
        "asyncio.streams.StreamReader._wakeup_waiter"
    ],
    "asyncio.streams.StreamReader._wakeup_waiter": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.streams.StreamReader.feed_data": [
        "asyncio.streams.StreamReader._wakeup_waiter",
        "<builtin>.len"
    ],
    "asyncio.streams.StreamReader._wait_for_data": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.RuntimeError"
    ],
    "asyncio.streams.StreamReader.readline": [
        "asyncio.streams.StreamReader.readuntil",
        "<builtin>.ValueError",
        "asyncio.streams.StreamReader._maybe_resume_transport",
        "<builtin>.len"
    ],
    "asyncio.streams.StreamReader.readuntil": [
        "asyncio.streams.StreamReader._wait_for_data",
        "asyncio.streams.StreamReader._maybe_resume_transport",
        "<builtin>.bytes",
        "asyncio.exceptions.IncompleteReadError.__init__",
        "<builtin>.len",
        "asyncio.exceptions.LimitOverrunError.__init__",
        "<builtin>.ValueError"
    ],
    "asyncio.streams.StreamReader.read": [
        "asyncio.streams.StreamReader.read",
        "asyncio.streams.StreamReader._wait_for_data",
        "asyncio.streams.StreamReader._maybe_resume_transport",
        "<builtin>.bytes",
        "<list>.append"
    ],
    "asyncio.streams.StreamReader.readexactly": [
        "asyncio.streams.StreamReader._wait_for_data",
        "asyncio.streams.StreamReader._maybe_resume_transport",
        "<builtin>.bytes",
        "asyncio.exceptions.IncompleteReadError.__init__",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "asyncio.streams.StreamReader.__anext__": [
        "asyncio.streams.StreamReader.readline"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.__init__": [
        "<builtin>.super",
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.__repr__": [
        "<list>.append"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.connection_made": [
        "asyncio.streams.StreamWriter.__init__",
        "asyncio.streams.StreamReader.set_transport",
        "asyncio.streams.StreamReader.__init__",
        "<list>.append"
    ],
    "asyncio.streams.StreamReader.set_transport": [],
    "asyncio.subprocess.SubprocessStreamProtocol.pipe_data_received": [
        "asyncio.streams.StreamReader.feed_data"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.pipe_connection_lost": [
        "asyncio.futures.Future.set_exception",
        "asyncio.streams.StreamReader.feed_eof",
        "asyncio.subprocess.SubprocessStreamProtocol._maybe_close_transport",
        "asyncio.streams.FlowControlMixin.connection_lost",
        "asyncio.streams.StreamWriter.close",
        "asyncio.streams.StreamReader.set_exception",
        "asyncio.futures.Future.set_result",
        "<list>.remove"
    ],
    "asyncio.streams.StreamWriter.close": [
        "asyncio.sslproto._SSLProtocolTransport.close"
    ],
    "asyncio.streams.FlowControlMixin.connection_lost": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception"
    ],
    "asyncio.streams.StreamReader.set_exception": [
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol._maybe_close_transport": [
        "<builtin>.len"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.process_exited": [
        "asyncio.subprocess.SubprocessStreamProtocol._maybe_close_transport"
    ],
    "asyncio.subprocess.Process._feed_stdin": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "<builtin>.len"
    ],
    "asyncio.subprocess.Process._read_stream": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.subprocess.Process.communicate": [
        "asyncio.tasks.gather",
        "asyncio.subprocess.Process.wait",
        "asyncio.subprocess.Process._feed_stdin",
        "asyncio.subprocess.Process._read_stream",
        "asyncio.subprocess.Process._noop"
    ],
    "asyncio.subprocess.Process._noop": [],
    "asyncio.subprocess.Process.wait": [],
    "asyncio.subprocess.create_subprocess_shell": [
        "asyncio.base_events.BaseEventLoop.subprocess_shell",
        "asyncio.events.get_event_loop",
        "asyncio.subprocess.Process.__init__",
        "warnings.warn"
    ],
    "asyncio.subprocess.create_subprocess_shell.<lambda1>": [
        "asyncio.subprocess.SubprocessStreamProtocol.__init__"
    ],
    "asyncio.subprocess.Process.__init__": [],
    "asyncio.subprocess.create_subprocess_exec": [
        "asyncio.base_events.BaseEventLoop.subprocess_exec",
        "asyncio.events.get_event_loop",
        "asyncio.subprocess.Process.__init__",
        "warnings.warn"
    ],
    "asyncio.subprocess.create_subprocess_exec.<lambda1>": [
        "asyncio.subprocess.SubprocessStreamProtocol.__init__"
    ],
    "asyncio.windows_events._OverlappedFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture._repr_info": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture._cancel_overlapped": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler"
    ],
    "asyncio.windows_events._OverlappedFuture.cancel": [
        "<builtin>.super",
        "asyncio.windows_events._OverlappedFuture._cancel_overlapped"
    ],
    "asyncio.windows_events._OverlappedFuture.set_exception": [
        "<builtin>.super",
        "asyncio.windows_events._OverlappedFuture._cancel_overlapped"
    ],
    "asyncio.windows_events._OverlappedFuture.set_result": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._repr_info": [
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._poll"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._poll": [],
    "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait": [
        "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb": [],
    "asyncio.windows_events._BaseWaitHandleFuture.cancel": [
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "<builtin>.super",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.set_exception": [
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "<builtin>.super",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.set_result": [
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "<builtin>.super",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._WaitCancelFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitCancelFuture.cancel": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.windows_events._WaitCancelFuture.set_result": [
        "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb",
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitCancelFuture.set_exception": [
        "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb",
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitHandleFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb": [
        "<builtin>.super",
        "asyncio.windows_events.IocpProactor._unregister"
    ],
    "asyncio.windows_events._WaitHandleFuture._unregister_wait": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.windows_events.IocpProactor._wait_cancel"
    ],
    "asyncio.windows_events.PipeServer.__init__": [
        "_weakrefset.WeakSet.__init__",
        "asyncio.windows_events.PipeServer._server_pipe_handle"
    ],
    "asyncio.windows_events.PipeServer._server_pipe_handle": [
        "asyncio.windows_events.PipeServer.closed",
        "asyncio.windows_utils.PipeHandle.__init__",
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.windows_events.PipeServer.closed": [],
    "asyncio.windows_utils.PipeHandle.__init__": [],
    "asyncio.windows_events.PipeServer._get_unconnected_pipe": [
        "asyncio.windows_events.PipeServer._server_pipe_handle"
    ],
    "asyncio.windows_events.PipeServer.close": [
        "_weakrefset.WeakSet.clear",
        "_weakrefset.WeakSet.__iter__"
    ],
    "asyncio.windows_events.ProactorEventLoop.__init__": [
        "asyncio.windows_events.IocpProactor.__init__",
        "<builtin>.super"
    ],
    "asyncio.windows_events.IocpProactor.__init__": [
        "_weakrefset.WeakSet.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop.run_forever": [
        "<builtin>.super",
        "asyncio.base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.windows_events.ProactorEventLoop.create_pipe_connection": [
        "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport": [],
    "asyncio.windows_events.ProactorEventLoop.start_serving_pipe": [
        "asyncio.windows_events.PipeServer.__init__",
        "asyncio.base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport": [
        "asyncio.base_subprocess.BaseSubprocessTransport._wait",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.base_subprocess.BaseSubprocessTransport.close"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport.close": [
        "logging.Logger.warning",
        "subprocess.Popen.poll",
        "subprocess.Popen.kill",
        "<map>.values"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._wait": [
        "<list>.append"
    ],
    "asyncio.windows_events.IocpProactor._check_closed": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.windows_events.IocpProactor.__repr__": [
        "<list>.append"
    ],
    "asyncio.windows_events.IocpProactor.select": [
        "asyncio.windows_events.IocpProactor._poll"
    ],
    "asyncio.windows_events.IocpProactor._poll": [
        "<list>.clear",
        "<map>.pop",
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "asyncio.windows_events.IocpProactor.recv": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._result",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "<builtin>.isinstance"
    ],
    "asyncio.windows_events.IocpProactor._register_with_iocp": [
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.windows_events.IocpProactor._result": [],
    "asyncio.windows_events.IocpProactor._register": [
        "asyncio.windows_events._OverlappedFuture.set_exception",
        "asyncio.windows_events.IocpProactor.recvfrom.finish_recv",
        "asyncio.windows_events.IocpProactor.sendto.finish_send",
        "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile",
        "asyncio.windows_events.IocpProactor.connect.finish_connect",
        "asyncio.windows_events._OverlappedFuture.__init__",
        "asyncio.windows_events.IocpProactor.recv.finish_recv",
        "asyncio.windows_events.IocpProactor.recv_into.finish_recv",
        "asyncio.windows_events.IocpProactor.accept.finish_accept",
        "asyncio.windows_events.IocpProactor.send.finish_send",
        "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe",
        "asyncio.windows_events.IocpProactor._check_closed"
    ],
    "asyncio.windows_events.IocpProactor.recv.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.recv_into": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._result",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "<builtin>.isinstance"
    ],
    "asyncio.windows_events.IocpProactor.recv_into.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.recvfrom": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._result",
        "asyncio.windows_events.IocpProactor._register_with_iocp"
    ],
    "asyncio.windows_events.IocpProactor.recvfrom.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.sendto": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp"
    ],
    "asyncio.windows_events.IocpProactor.sendto.finish_send": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.send": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "<builtin>.isinstance"
    ],
    "asyncio.windows_events.IocpProactor.send.finish_send": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.accept": [
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.tasks.ensure_future",
        "asyncio.windows_events.IocpProactor._get_accept_socket",
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor.accept.accept_coro"
    ],
    "asyncio.windows_events.IocpProactor._get_accept_socket": [
        "socket.socket.__init__"
    ],
    "asyncio.windows_events.IocpProactor.accept.finish_accept": [],
    "asyncio.windows_events.IocpProactor.accept.accept_coro": [
        "socket.socket.close"
    ],
    "asyncio.windows_events.IocpProactor.connect": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp"
    ],
    "asyncio.windows_events.IocpProactor.connect.finish_connect": [],
    "asyncio.windows_events.IocpProactor.sendfile": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp"
    ],
    "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.accept_pipe": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._result",
        "asyncio.windows_events.IocpProactor._register_with_iocp"
    ],
    "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe": [],
    "asyncio.windows_events.IocpProactor.connect_pipe": [
        "asyncio.tasks.sleep",
        "asyncio.windows_utils.PipeHandle.__init__",
        "<builtin>.min"
    ],
    "asyncio.windows_events.IocpProactor.wait_for_handle": [
        "asyncio.windows_events.IocpProactor._wait_for_handle"
    ],
    "asyncio.windows_events.IocpProactor._wait_for_handle": [
        "asyncio.windows_events._WaitCancelFuture.__init__",
        "asyncio.windows_events._WaitHandleFuture.__init__",
        "asyncio.windows_events.IocpProactor._check_closed"
    ],
    "asyncio.windows_events.IocpProactor._wait_cancel": [
        "asyncio.windows_events.IocpProactor._wait_for_handle"
    ],
    "asyncio.windows_events.IocpProactor._unregister": [
        "<list>.append",
        "asyncio.windows_events.IocpProactor._check_closed"
    ],
    "asyncio.windows_events.IocpProactor._stop_serving": [
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.windows_events.IocpProactor.close": [
        "logging.Logger.debug",
        "<map>.items",
        "<builtin>.isinstance",
        "<builtin>.list",
        "asyncio.windows_events.IocpProactor._poll"
    ],
    "asyncio.windows_events.IocpProactor.__del__": [
        "asyncio.windows_events.IocpProactor.close"
    ],
    "asyncio.windows_events._WindowsSubprocessTransport._start": [
        "asyncio.windows_utils.Popen.__init__",
        "<builtin>.int"
    ],
    "asyncio.windows_utils.Popen.__init__": [
        "<builtin>.super",
        "asyncio.windows_utils.pipe"
    ],
    "asyncio.windows_utils.pipe": [
        "<builtin>.next",
        "tempfile.mktemp"
    ],
    "tempfile.mktemp": [
        "posixpath.join",
        "<builtin>.next",
        "tempfile._exists",
        "ntpath.join",
        "tempfile._get_candidate_names",
        "<builtin>.FileExistsError",
        "tempfile.gettempdir",
        "<builtin>.range"
    ],
    "tempfile._exists": [],
    "asyncio.base_subprocess.BaseSubprocessTransport.__init__": [
        "<builtin>.super",
        "logging.Logger.debug",
        "<builtin>.isinstance",
        "asyncio.base_subprocess.BaseSubprocessTransport.close",
        "asyncio.windows_events._WindowsSubprocessTransport._start",
        "asyncio.base_subprocess.BaseSubprocessTransport._connect_pipes",
        "_collections.deque",
        "asyncio.base_subprocess.BaseSubprocessTransport._start"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._start": [],
    "asyncio.base_subprocess.BaseSubprocessTransport._connect_pipes": [],
    "asyncio.base_subprocess.BaseSubprocessTransport.__repr__": [
        "<map>.get",
        "<list>.append"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport.__del__": [
        "warnings.warn",
        "asyncio.base_subprocess.BaseSubprocessTransport.close"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._check_proc": [
        "<builtin>.ProcessLookupError"
    ],
    "<builtin>.ProcessLookupError": [],
    "asyncio.base_subprocess.BaseSubprocessTransport.send_signal": [
        "subprocess.Popen.send_signal",
        "asyncio.base_subprocess.BaseSubprocessTransport._check_proc"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport.terminate": [
        "subprocess.Popen.terminate",
        "asyncio.base_subprocess.BaseSubprocessTransport._check_proc"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport.kill": [
        "subprocess.Popen.kill",
        "asyncio.base_subprocess.BaseSubprocessTransport._check_proc"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._pipe_connection_lost": [
        "asyncio.base_subprocess.BaseSubprocessTransport._try_finish",
        "asyncio.base_subprocess.BaseSubprocessTransport._call"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._call": [],
    "asyncio.base_subprocess.BaseSubprocessTransport._try_finish": [
        "asyncio.base_subprocess.BaseSubprocessTransport._call",
        "<map>.values",
        "<builtin>.all"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._pipe_data_received": [
        "asyncio.base_subprocess.BaseSubprocessTransport._call"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._process_exited": [
        "asyncio.base_subprocess.BaseSubprocessTransport._try_finish",
        "asyncio.base_subprocess.BaseSubprocessTransport._call",
        "logging.Logger.info"
    ],
    "asyncio.proactor_events._set_socket_extra": [
        "asyncio.trsock.TransportSocket.__init__",
        "logging.Logger.warning"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.__init__": [
        "<builtin>.super",
        "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol",
        "asyncio.proactor_events._ProactorDatagramTransport._set_extra",
        "asyncio.proactor_events._ProactorSocketTransport._set_extra",
        "asyncio.proactor_events._ProactorBasePipeTransport._set_extra"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._set_extra": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.__repr__": [
        "<list>.append"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.__del__": [
        "warnings.warn",
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.close": [],
    "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error": [
        "logging.Logger.debug",
        "<builtin>.isinstance"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size": [
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.pause_reading": [
        "logging.Logger.debug"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.resume_reading": [
        "logging.Logger.debug"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._eof_received": [
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "logging.Logger.debug",
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._data_received": [
        "asyncio.protocols._feed_data_to_buffered_proto",
        "asyncio.proactor_events._ProactorReadPipeTransport._eof_received",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "<builtin>.isinstance"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._loop_reading": [
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "logging.Logger.debug",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._force_close": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.write": [
        "<builtin>.isinstance",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "<builtin>.bytearray",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing",
        "<builtin>.type",
        "logging.Logger.warning",
        "<builtin>.RuntimeError"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close",
        "<builtin>.len",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "asyncio.transports._FlowControlMixin._maybe_resume_protocol"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.write_eof": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.abort": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._make_empty_waiter": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.proactor_events._ProactorWritePipeTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorWritePipeTransport._pipe_closed": [
        "<builtin>.BrokenPipeError",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close",
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "<builtin>.BrokenPipeError": [],
    "asyncio.proactor_events._ProactorDatagramTransport.__init__": [
        "<builtin>.super",
        "_collections.deque"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._set_extra": [
        "asyncio.proactor_events._set_socket_extra"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.abort": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.sendto": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "asyncio.proactor_events._ProactorDatagramTransport._loop_writing",
        "<builtin>.type",
        "logging.Logger.warning",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.ValueError"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._loop_writing": [
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error"
    ],
    "asyncio.proactor_events._ProactorSocketTransport.__init__": [
        "<builtin>.super",
        "asyncio.base_events._set_nodelay"
    ],
    "asyncio.base_events._set_nodelay": [],
    "asyncio.proactor_events._ProactorSocketTransport._set_extra": [
        "asyncio.proactor_events._set_socket_extra"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop.__init__": [
        "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe",
        "<builtin>.super",
        "logging.Logger.debug",
        "threading.main_thread",
        "threading.current_thread"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe": [
        "socket.socketpair"
    ],
    "threading.main_thread": [],
    "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport": [
        "asyncio.proactor_events._ProactorSocketTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport": [
        "asyncio.proactor_events._ProactorSocketTransport.__init__",
        "asyncio.sslproto.SSLProtocol.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_datagram_transport": [
        "asyncio.proactor_events._ProactorDatagramTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_read_pipe_transport": [
        "asyncio.proactor_events._ProactorReadPipeTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_write_pipe_transport": [
        "asyncio.proactor_events._ProactorWritePipeTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop.close": [
        "<builtin>.super",
        "threading.main_thread",
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures",
        "asyncio.base_events.BaseEventLoop.is_running",
        "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe",
        "threading.current_thread",
        "<builtin>.RuntimeError"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures": [
        "<map>.values",
        "<map>.clear"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe": [
        "socket.socket.close"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._sock_sendfile_native": [
        "<builtin>.min"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._sendfile_native": [
        "asyncio.base_events.BaseEventLoop.sock_sendfile"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._loop_self_reading": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._write_to_self": [
        "logging.Logger.debug"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._start_serving": [
        "asyncio.base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._stop_serving": [
        "<map>.pop"
    ],
    "asyncio.selector_events._check_ssl_socket": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.__init__": [
        "<builtin>.super",
        "logging.Logger.debug",
        "selectors.KqueueSelector.__init__",
        "selectors.SelectSelector.__init__",
        "weakref.WeakValueDictionary.__init__",
        "asyncio.selector_events.BaseSelectorEventLoop._make_self_pipe"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._make_self_pipe": [
        "asyncio.selector_events.BaseSelectorEventLoop._add_reader",
        "socket.socketpair"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._add_reader": [
        "selectors.BaseSelector.get_key",
        "selectors._PollLikeSelector.register",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.events.Handle.__init__",
        "selectors.KqueueSelector.register",
        "selectors.SelectSelector.register"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._make_socket_transport": [
        "asyncio.selector_events._SelectorSocketTransport.__init__"
    ],
    "asyncio.selector_events._SelectorSocketTransport.__init__": [
        "<builtin>.super",
        "asyncio.base_events._set_nodelay"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._make_ssl_transport": [
        "asyncio.sslproto.SSLProtocol.__init__",
        "asyncio.selector_events._SelectorSocketTransport.__init__"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._make_datagram_transport": [
        "asyncio.selector_events._SelectorDatagramTransport.__init__"
    ],
    "asyncio.selector_events._SelectorDatagramTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.close": [
        "<builtin>.super",
        "selectors.EpollSelector.close",
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.base_events.BaseEventLoop.is_running",
        "selectors._BaseSelectorImpl.close",
        "selectors.KqueueSelector.close",
        "selectors.DevpollSelector.close",
        "asyncio.selector_events.BaseSelectorEventLoop._close_self_pipe",
        "<builtin>.RuntimeError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._close_self_pipe": [
        "socket.socket.close",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._remove_reader": [
        "selectors.BaseSelector.get_key",
        "asyncio.base_events.BaseEventLoop.is_closed"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._read_from_self": [
        "asyncio.selector_events.BaseSelectorEventLoop._process_self_data"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._process_self_data": [],
    "asyncio.selector_events.BaseSelectorEventLoop._write_to_self": [
        "logging.Logger.debug"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._start_serving": [
        "asyncio.selector_events.BaseSelectorEventLoop._add_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._accept_connection": [
        "asyncio.trsock.TransportSocket.__init__",
        "logging.Logger.debug",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader",
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "<builtin>.range"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._accept_connection2": [
        "asyncio.selector_events._SelectorTransport.close",
        "asyncio.selector_events.BaseSelectorEventLoop._make_socket_transport",
        "asyncio.sslproto._SSLProtocolTransport.close",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.selector_events.BaseSelectorEventLoop._make_ssl_transport"
    ],
    "asyncio.selector_events._SelectorTransport.close": [],
    "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._add_writer": [
        "selectors.BaseSelector.get_key",
        "selectors._PollLikeSelector.register",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.events.Handle.__init__",
        "selectors.KqueueSelector.register",
        "selectors.SelectSelector.register"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._remove_writer": [
        "selectors.BaseSelector.get_key",
        "asyncio.base_events.BaseEventLoop.is_closed"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.add_reader": [
        "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._add_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.remove_reader": [
        "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.add_writer": [
        "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._add_writer"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.remove_writer": [
        "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_writer"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_recv": [
        "asyncio.futures.Future.add_done_callback",
        "asyncio.selector_events._check_ssl_socket",
        "asyncio.selector_events.BaseSelectorEventLoop.add_reader",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.ValueError"
    ],
    "selectors._BaseSelectorImpl.get_map": [],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_read_done": [
        "asyncio.selector_events.BaseSelectorEventLoop.remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_recv_into": [
        "asyncio.futures.Future.add_done_callback",
        "asyncio.selector_events._check_ssl_socket",
        "asyncio.selector_events.BaseSelectorEventLoop.add_reader",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.ValueError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_sendall": [
        "asyncio.futures.Future.add_done_callback",
        "<builtin>.memoryview",
        "asyncio.selector_events._check_ssl_socket",
        "asyncio.selector_events.BaseSelectorEventLoop.add_writer",
        "<builtin>.len",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.ValueError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_sendall": [
        "<builtin>.len"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_connect": [
        "asyncio.selector_events._check_ssl_socket",
        "asyncio.selector_events.BaseSelectorEventLoop._sock_connect",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "asyncio.base_events.BaseEventLoop._ensure_resolved"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_connect": [
        "asyncio.selector_events.BaseSelectorEventLoop.add_writer",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.futures.Future.set_exception"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_write_done": [
        "asyncio.selector_events.BaseSelectorEventLoop.remove_writer"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_connect_cb": [
        "<builtin>.OSError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_accept": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.selector_events.BaseSelectorEventLoop._sock_accept",
        "<builtin>.ValueError",
        "asyncio.selector_events._check_ssl_socket"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_accept": [
        "asyncio.futures.Future.done",
        "asyncio.selector_events.BaseSelectorEventLoop.remove_reader",
        "asyncio.selector_events.BaseSelectorEventLoop.add_reader",
        "asyncio.futures.Future.set_exception"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sendfile_native": [
        "asyncio.base_events.BaseEventLoop.sock_sendfile"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._process_events": [
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_writer",
        "asyncio.base_events.BaseEventLoop._add_callback"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._stop_serving": [
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader"
    ],
    "asyncio.selector_events._SelectorTransport.__init__": [
        "asyncio.trsock.TransportSocket.__init__",
        "<builtin>.super",
        "asyncio.selector_events._SelectorTransport.set_protocol",
        "asyncio.selector_events._SelectorSocketTransport.set_protocol",
        "_collections.deque"
    ],
    "asyncio.selector_events._SelectorTransport.set_protocol": [],
    "asyncio.selector_events._SelectorSocketTransport.set_protocol": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "asyncio.selector_events._SelectorTransport.__repr__": [
        "asyncio.selector_events._test_selector_event",
        "asyncio.selector_events._SelectorDatagramTransport.get_write_buffer_size",
        "asyncio.selector_events._SelectorTransport.get_write_buffer_size",
        "<list>.append"
    ],
    "asyncio.selector_events._test_selector_event": [],
    "asyncio.selector_events._SelectorTransport.get_write_buffer_size": [
        "<builtin>.len"
    ],
    "asyncio.selector_events._SelectorTransport.abort": [
        "asyncio.selector_events._SelectorTransport._force_close"
    ],
    "asyncio.selector_events._SelectorTransport._force_close": [],
    "asyncio.selector_events._SelectorTransport.__del__": [
        "warnings.warn"
    ],
    "asyncio.selector_events._SelectorTransport._fatal_error": [
        "logging.Logger.debug",
        "<builtin>.isinstance",
        "asyncio.selector_events._SelectorTransport._force_close"
    ],
    "asyncio.selector_events._SelectorSocketTransport.pause_reading": [
        "logging.Logger.debug"
    ],
    "asyncio.selector_events._SelectorSocketTransport.resume_reading": [
        "logging.Logger.debug",
        "asyncio.selector_events._SelectorTransport._add_reader"
    ],
    "asyncio.selector_events._SelectorTransport._add_reader": [],
    "asyncio.selector_events._SelectorSocketTransport._read_ready": [
        "asyncio.selector_events._SelectorSocketTransport._read_ready__get_buffer",
        "asyncio.selector_events._SelectorSocketTransport._read_ready__data_received"
    ],
    "asyncio.selector_events._SelectorSocketTransport._read_ready__get_buffer": [
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "asyncio.selector_events._SelectorSocketTransport._read_ready__on_eof",
        "<builtin>.RuntimeError",
        "<builtin>.len"
    ],
    "asyncio.selector_events._SelectorSocketTransport._read_ready__on_eof": [
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "logging.Logger.debug",
        "asyncio.selector_events._SelectorTransport.close"
    ],
    "asyncio.selector_events._SelectorSocketTransport._read_ready__data_received": [
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "asyncio.selector_events._SelectorSocketTransport._read_ready__on_eof"
    ],
    "asyncio.selector_events._SelectorSocketTransport.write": [
        "<builtin>.isinstance",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.TypeError",
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "<builtin>.type",
        "logging.Logger.warning",
        "<builtin>.RuntimeError"
    ],
    "asyncio.selector_events._SelectorSocketTransport._write_ready": [
        "asyncio.selector_events._SelectorTransport._fatal_error"
    ],
    "asyncio.selector_events._SelectorSocketTransport._call_connection_lost": [
        "<builtin>.ConnectionError",
        "<builtin>.super"
    ],
    "asyncio.selector_events._SelectorSocketTransport._make_empty_waiter": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.selector_events._SelectorDatagramTransport.get_write_buffer_size": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "asyncio.selector_events._SelectorDatagramTransport._read_ready": [
        "asyncio.selector_events._SelectorTransport._fatal_error"
    ],
    "asyncio.selector_events._SelectorDatagramTransport.sendto": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "<builtin>.type",
        "logging.Logger.warning",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.ValueError"
    ],
    "asyncio.selector_events._SelectorDatagramTransport._sendto_ready": [
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "asyncio.selector_events._SelectorTransport._call_connection_lost",
        "asyncio.transports._FlowControlMixin._maybe_resume_protocol"
    ],
    "asyncio.selector_events._SelectorTransport._call_connection_lost": [],
    "asyncio.windows_utils.PipeHandle.fileno": [
        "<builtin>.ValueError"
    ],
    "asyncio.windows_utils.PipeHandle.__del__": [
        "warnings.warn",
        "asyncio.windows_utils.PipeHandle.close"
    ],
    "asyncio.windows_utils.PipeHandle.close": [],
    "asyncio.windows_utils.PipeHandle.__exit__": [
        "asyncio.windows_utils.PipeHandle.close"
    ],
    "tempfile._RandomNameSequence.rng": [
        "random.Random.__init__",
        "<builtin>.getattr"
    ],
    "tempfile._RandomNameSequence.__next__": [
        "<builtin>.range"
    ],
    "tempfile.gettempprefixb": [
        "os._fscodec.fsdecode",
        "tempfile.gettempprefix",
        "os._fscodec.fsencode"
    ],
    "tempfile.gettempprefix": [],
    "tempfile.mkdtemp": [
        "posixpath.join",
        "genericpath.isdir",
        "<builtin>.next",
        "tempfile._sanitize_params",
        "ntpath.join",
        "nt._isdir",
        "tempfile._get_candidate_names",
        "<builtin>.FileExistsError",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "tempfile._TemporaryFileCloser.__del__": [
        "tempfile._TemporaryFileCloser.close"
    ],
    "tempfile._TemporaryFileCloser.close": [],
    "tempfile._TemporaryFileWrapper.__init__": [
        "tempfile._TemporaryFileCloser.__init__"
    ],
    "tempfile._TemporaryFileCloser.__init__": [],
    "tempfile._TemporaryFileWrapper.__getattr__": [
        "<builtin>.isinstance",
        "functools.wraps",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "tempfile._TemporaryFileWrapper.__exit__": [
        "tempfile._TemporaryFileWrapper.close"
    ],
    "tempfile._TemporaryFileWrapper.close": [
        "tempfile._TemporaryFileCloser.close"
    ],
    "tempfile.NamedTemporaryFile": [
        "_io.open",
        "tempfile._TemporaryFileWrapper.__init__",
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner"
    ],
    "tempfile.TemporaryFile": [
        "_io.open",
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner"
    ],
    "tempfile.SpooledTemporaryFile.__init__": [
        "_io.TextIOWrapper",
        "_io.BytesIO"
    ],
    "tempfile.SpooledTemporaryFile._check": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.rollover": [
        "tempfile.TemporaryFile",
        "<builtin>.hasattr"
    ],
    "tempfile.SpooledTemporaryFile.__enter__": [
        "<builtin>.ValueError"
    ],
    "tempfile.SpooledTemporaryFile.fileno": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.truncate": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.write": [
        "tempfile.SpooledTemporaryFile._check"
    ],
    "tempfile.SpooledTemporaryFile.writelines": [
        "tempfile.SpooledTemporaryFile._check"
    ],
    "tempfile.TemporaryDirectory.__init__": [
        "tempfile.mkdtemp",
        "weakref.finalize.__init__"
    ],
    "tempfile.TemporaryDirectory._rmtree": [
        "shutil.rmtree"
    ],
    "tempfile.TemporaryDirectory._cleanup": [
        "tempfile.TemporaryDirectory._rmtree",
        "warnings.warn"
    ],
    "tempfile.TemporaryDirectory.__exit__": [
        "tempfile.TemporaryDirectory.cleanup"
    ],
    "tempfile.TemporaryDirectory.cleanup": [
        "tempfile.TemporaryDirectory._rmtree",
        "weakref.finalize.detach"
    ],
    "random.Random.getstate": [
        "<builtin>.super"
    ],
    "random.Random.setstate": [
        "<builtin>.tuple",
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "random.Random.__getstate__": [
        "random.Random.getstate",
        "random.SystemRandom._notimplemented"
    ],
    "random.Random.__setstate__": [
        "random.SystemRandom._notimplemented",
        "random.Random.setstate"
    ],
    "random.Random.__reduce__": [
        "random.Random.getstate",
        "random.SystemRandom._notimplemented"
    ],
    "random.Random._randbelow_without_getrandbits": [
        "random.SystemRandom.random",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "random.Random.choice": [
        "<builtin>.IndexError",
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.len"
    ],
    "random.Random.shuffle": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.reversed",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "random.Random.sample": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.len",
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "random.Random.choices": [
        "itertools.repeat",
        "<builtin>.list",
        "bisect.bisect_right",
        "<builtin>.TypeError",
        "itertools.accumulate",
        "random.SystemRandom.random",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "itertools.accumulate": [],
    "bisect.bisect_right": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "random.SystemRandom.getrandbits": [
        "<builtin>.ValueError"
    ],
    "random.SystemRandom._notimplemented": [
        "<builtin>.NotImplementedError"
    ],
    "bisect.insort_right": [
        "<list>.insert",
        "bisect.bisect_right"
    ],
    "bisect.insort_left": [
        "bisect.bisect_left"
    ],
    "bisect.bisect_left": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "hashlib.__py_new": [
        "hashlib.__get_builtin_constructor",
        "<map>"
    ],
    "hashlib.__hash_new": [
        "hashlib.__get_builtin_constructor",
        "<map>"
    ],
    "hashlib.pbkdf2_hmac": [
        "<builtin>.range",
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "hashlib.__hash_new",
        "<builtin>.TypeError",
        "<map>.update",
        "<builtin>.getattr",
        "<builtin>.len",
        "hashlib.__py_new",
        "hashlib.pbkdf2_hmac.prf",
        "<builtin>.ValueError"
    ],
    "hashlib.pbkdf2_hmac.prf": [
        "<map>.update",
        "<map>.copy"
    ],
    "unittest.case._Outcome.__init__": [
        "<builtin>.hasattr"
    ],
    "unittest.case._Outcome.testPartExecutor": [
        "<list>.append"
    ],
    "unittest.case.addModuleCleanup": [
        "<list>.append"
    ],
    "unittest.case.doModuleCleanups": [
        "<list>.pop",
        "<list>",
        "<list>.append"
    ],
    "unittest.case.skip": [
        "unittest.case.skip.decorator",
        "<builtin>.isinstance"
    ],
    "unittest.case.skip.decorator": [
        "functools.wraps",
        "<builtin>.isinstance"
    ],
    "unittest.case.skipIf": [
        "unittest.case.skip"
    ],
    "unittest.case.skipUnless": [
        "unittest.case.skip"
    ],
    "unittest.case._is_subtype": [
        "<builtin>.issubclass",
        "unittest.case._is_subtype",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "unittest.case._AssertRaisesBaseContext.__init__": [
        "re.compile",
        "unittest.case._BaseTestCaseContext.__init__"
    ],
    "unittest.case._BaseTestCaseContext.__init__": [],
    "unittest.case._AssertRaisesBaseContext.handle": [
        "unittest.case._is_subtype",
        "<builtin>.TypeError",
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.str"
    ],
    "unittest.case._AssertRaisesContext.__exit__": [
        "<builtin>.issubclass",
        "traceback.clear_frames",
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "<builtin>.str"
    ],
    "traceback.clear_frames": [],
    "unittest.case._BaseTestCaseContext._raiseFailure": [
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case._AssertWarnsContext.__enter__": [
        "warnings.catch_warnings.__enter__",
        "warnings.catch_warnings.__init__",
        "warnings.simplefilter",
        "<builtin>.getattr"
    ],
    "unittest.case._AssertWarnsContext.__exit__": [
        "warnings.catch_warnings.__exit__",
        "<builtin>.isinstance",
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "<builtin>.str"
    ],
    "unittest.case._CapturingHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "unittest.case._CapturingHandler.emit": [
        "logging.Handler.format"
    ],
    "unittest.case._AssertLogsContext.__init__": [
        "<map>.get",
        "unittest.case._BaseTestCaseContext.__init__"
    ],
    "unittest.case._AssertLogsContext.__enter__": [
        "<builtin>.isinstance",
        "logging.Handler.setFormatter",
        "unittest.case._CapturingHandler.__init__",
        "logging.Formatter.__init__",
        "logging.Logger.setLevel",
        "logging.getLogger"
    ],
    "unittest.case._AssertLogsContext.__exit__": [
        "logging.getLevelName",
        "logging.Logger.setLevel",
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "<builtin>.len"
    ],
    "unittest.case._OrderedChainMap.__iter__": [
        "<builtin>.set"
    ],
    "unittest.case.TestCase.defaultTestResult": [
        "unittest.result.TestResult.__init__"
    ],
    "unittest.result.TestResult.__init__": [],
    "unittest.case.TestCase.shortDescription": [
        "<str>.strip"
    ],
    "unittest.case.TestCase.id": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase.__eq__": [
        "<builtin>.type"
    ],
    "unittest.case.TestCase.__hash__": [
        "<builtin>.hash",
        "<builtin>.type"
    ],
    "unittest.case.TestCase.__str__": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase.__repr__": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase._addSkip": [
        "unittest.result.TestResult.addSuccess",
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "unittest.case.TestCase.subTest": [
        "collections.ChainMap.new_child",
        "unittest.case._SubTest.__init__",
        "unittest.case._Outcome.testPartExecutor"
    ],
    "unittest.case._SubTest.__init__": [
        "<builtin>.super"
    ],
    "unittest.case.TestCase._feedErrorsToResult": [
        "<builtin>.isinstance",
        "unittest.result.TestResult.addError",
        "unittest.result.TestResult.addFailure",
        "<builtin>.issubclass",
        "unittest.result.TestResult.addSubTest"
    ],
    "unittest.case.TestCase._addExpectedFailure": [
        "warnings.warn",
        "unittest.result.TestResult.addSuccess"
    ],
    "unittest.case.TestCase._addUnexpectedSuccess": [
        "warnings.warn",
        "unittest.result.TestResult.addFailure"
    ],
    "unittest.case.TestCase._callSetUp": [
        "unittest.case.TestCase.setUp",
        "doctest.DocTestCase.setUp",
        "doctest.SkipDocTestCase.setUp"
    ],
    "unittest.case.TestCase._callTearDown": [
        "unittest.case.TestCase.tearDown",
        "doctest.DocTestCase.tearDown"
    ],
    "unittest.case.TestCase.run": [
        "unittest.result.TestResult.addSuccess",
        "unittest.case._Outcome.testPartExecutor",
        "unittest.case.TestCase.doCleanups",
        "unittest.case.TestCase.defaultTestResult",
        "unittest.case.TestCase._addExpectedFailure",
        "unittest.case.TestCase._feedErrorsToResult",
        "<builtin>.getattr",
        "unittest.result.TestResult.startTest",
        "unittest.case.TestCase._addUnexpectedSuccess",
        "unittest.case._Outcome.__init__",
        "unittest.case.TestCase._addSkip"
    ],
    "unittest.result.TestResult.addSuccess": [],
    "unittest.case.TestCase.doCleanups": [
        "<list>.pop",
        "unittest.case._Outcome.__init__"
    ],
    "unittest.case.TestCase.doClassCleanups": [
        "<list>.pop",
        "<list>",
        "<list>.append"
    ],
    "unittest.case.TestCase.__call__": [
        "unittest.case.TestCase.run",
        "unittest.async_case.IsolatedAsyncioTestCase.run"
    ],
    "unittest.case.TestCase.debug": [
        "unittest.case.TestCase.tearDown",
        "doctest.DocTestCase.tearDown",
        "<list>.pop",
        "doctest.DocTestCase.setUp",
        "<builtin>.getattr",
        "doctest.SkipDocTestCase.setUp",
        "unittest.case.TestCase.setUp",
        "<list>"
    ],
    "unittest.case.TestCase.assertFalse": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase._formatMessage": [
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase.assertTrue": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase.assertRaises": [
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertWarns": [
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertLogs": [
        "unittest.case._AssertLogsContext.__init__"
    ],
    "unittest.case.TestCase._getAssertEqualityFunc": [
        "<map>.get",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "unittest.case.TestCase._baseAssertEqual": [
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertEqual": [
        "unittest.case.TestCase._getAssertEqualityFunc",
        "unittest.case.TestCase._baseAssertEqual",
        "<map>"
    ],
    "unittest.case.TestCase.assertNotEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase.assertAlmostEqual": [
        "unittest.util.safe_repr",
        "<builtin>.TypeError",
        "<builtin>.round",
        "<builtin>.abs",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertNotAlmostEqual": [
        "unittest.util.safe_repr",
        "<builtin>.TypeError",
        "<builtin>.round",
        "<builtin>.abs",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertSequenceEqual": [
        "unittest.util.safe_repr",
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage",
        "pprint.pformat",
        "unittest.util._common_shorten_repr",
        "difflib.ndiff",
        "unittest.case.TestCase.fail",
        "<builtin>.len",
        "<builtin>.min",
        "unittest.case.TestCase._truncateMessage",
        "<builtin>.range",
        "<str>.capitalize"
    ],
    "<str>.capitalize": [],
    "unittest.case.TestCase._truncateMessage": [
        "<builtin>.len"
    ],
    "unittest.case.TestCase.fail": [],
    "unittest.case.TestCase.assertListEqual": [
        "unittest.case.TestCase.assertSequenceEqual"
    ],
    "unittest.case.TestCase.assertTupleEqual": [
        "unittest.case.TestCase.assertSequenceEqual"
    ],
    "unittest.case.TestCase.assertSetEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail",
        "<list>.append"
    ],
    "unittest.case.TestCase.assertIn": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertNotIn": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIs": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIsNot": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertDictEqual": [
        "unittest.case.TestCase.assertIsInstance",
        "unittest.case.TestCase._formatMessage",
        "pprint.pformat",
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase.fail",
        "difflib.ndiff",
        "unittest.case.TestCase._truncateMessage"
    ],
    "unittest.case.TestCase.assertIsInstance": [
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "<builtin>.isinstance"
    ],
    "unittest.case.TestCase.assertDictContainsSubset": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "<list>.append",
        "unittest.case.TestCase._formatMessage",
        "warnings.warn"
    ],
    "unittest.case.TestCase.assertCountEqual": [
        "unittest.util._count_diff_all_purpose",
        "collections.Counter.__init__",
        "<builtin>.list",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase._truncateMessage"
    ],
    "unittest.case.TestCase.assertMultiLineEqual": [
        "unittest.case.TestCase.assertIsInstance",
        "unittest.case.TestCase._formatMessage",
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._baseAssertEqual",
        "unittest.case.TestCase.fail",
        "<builtin>.len",
        "difflib.ndiff",
        "unittest.case.TestCase._truncateMessage"
    ],
    "unittest.case.TestCase.assertLess": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertLessEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertGreater": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertGreaterEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIsNone": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIsNotNone": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertNotIsInstance": [
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "<builtin>.isinstance"
    ],
    "unittest.case.TestCase.assertRaisesRegex": [
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertWarnsRegex": [
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertRegex": [
        "re.compile",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.isinstance"
    ],
    "unittest.case.TestCase.assertNotRegex": [
        "re.compile",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.isinstance"
    ],
    "unittest.case.TestCase._deprecate.deprecated_func": [
        "doctest.SkipDocTestCase.__init__",
        "unittest.async_case.IsolatedAsyncioTestCase.__init__",
        "doctest.DocTestCase.__init__",
        "unittest.case.TestCase.__init__",
        "warnings.warn"
    ],
    "unittest.case.FunctionTestCase.__init__": [
        "<builtin>.super"
    ],
    "unittest.case.FunctionTestCase.__eq__": [
        "<builtin>.isinstance"
    ],
    "unittest.case.FunctionTestCase.__hash__": [
        "<builtin>.hash",
        "<builtin>.type"
    ],
    "unittest.case.FunctionTestCase.__str__": [
        "unittest.util.strclass"
    ],
    "unittest.case.FunctionTestCase.__repr__": [
        "unittest.util.strclass"
    ],
    "unittest.case._SubTest.runTest": [
        "<builtin>.NotImplementedError"
    ],
    "unittest.case._SubTest._subDescription": [
        "<list>.append"
    ],
    "unittest.case._SubTest.id": [
        "unittest.case.TestCase.id",
        "unittest.case._SubTest._subDescription",
        "doctest.DocTestCase.id",
        "doctest.DocFileCase.id"
    ],
    "doctest.DocTestCase.id": [],
    "unittest.case._SubTest.shortDescription": [
        "doctest.DocTestCase.shortDescription",
        "doctest.SkipDocTestCase.shortDescription",
        "unittest.case.TestCase.shortDescription"
    ],
    "doctest.DocTestCase.shortDescription": [],
    "doctest.SkipDocTestCase.shortDescription": [],
    "unittest.case._SubTest.__str__": [
        "unittest.case._SubTest._subDescription"
    ],
    "unittest.suite._call_if_exists": [
        "<builtin>.getattr"
    ],
    "unittest.suite.BaseTestSuite.__init__": [
        "unittest.suite.BaseTestSuite.addTests"
    ],
    "unittest.suite.BaseTestSuite.addTests": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "unittest.suite.BaseTestSuite.addTest"
    ],
    "unittest.suite.BaseTestSuite.__repr__": [
        "unittest.util.strclass",
        "<builtin>.list"
    ],
    "unittest.suite.BaseTestSuite.__eq__": [
        "<builtin>.list",
        "<builtin>.isinstance"
    ],
    "unittest.suite.BaseTestSuite.__iter__": [
        "<builtin>.iter"
    ],
    "unittest.suite.BaseTestSuite.countTestCases": [
        "unittest.suite.BaseTestSuite.__iter__"
    ],
    "unittest.suite.BaseTestSuite.run": [
        "<builtin>.enumerate",
        "unittest.suite.BaseTestSuite._removeTestAtIndex",
        "doctest._DocTestSuite._removeTestAtIndex"
    ],
    "unittest.suite.BaseTestSuite._removeTestAtIndex": [],
    "doctest._DocTestSuite._removeTestAtIndex": [],
    "unittest.suite.BaseTestSuite.__call__": [
        "unittest.suite.TestSuite.run",
        "unittest.suite.BaseTestSuite.run"
    ],
    "unittest.suite.TestSuite.run": [
        "unittest.suite.TestSuite._handleModuleTearDown",
        "unittest.suite.TestSuite._handleClassSetUp",
        "unittest.suite.TestSuite._handleModuleFixture",
        "<builtin>.enumerate",
        "unittest.suite._isnotsuite",
        "<builtin>.getattr",
        "doctest._DocTestSuite._removeTestAtIndex",
        "unittest.suite.BaseTestSuite._removeTestAtIndex",
        "unittest.suite.TestSuite._tearDownPreviousClass"
    ],
    "unittest.suite._isnotsuite": [
        "<builtin>.iter"
    ],
    "unittest.suite.TestSuite._tearDownPreviousClass": [
        "unittest.suite._call_if_exists",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "<builtin>.getattr",
        "unittest.util.strclass"
    ],
    "unittest.suite.TestSuite._createClassOrModuleLevelException": [
        "unittest.suite.TestSuite._addClassOrModuleLevelException"
    ],
    "unittest.suite.TestSuite._addClassOrModuleLevelException": [
        "<builtin>.isinstance",
        "unittest.suite._ErrorHolder.__init__",
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "unittest.suite._ErrorHolder.__init__": [],
    "unittest.suite.TestSuite._handleModuleFixture": [
        "unittest.suite._call_if_exists",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite.TestSuite._get_previous_module",
        "<builtin>.getattr",
        "unittest.suite.TestSuite._handleModuleTearDown",
        "unittest.case.doModuleCleanups"
    ],
    "unittest.suite.TestSuite._get_previous_module": [
        "<builtin>.getattr"
    ],
    "unittest.suite.TestSuite._handleModuleTearDown": [
        "unittest.suite._call_if_exists",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite.TestSuite._get_previous_module",
        "<builtin>.getattr"
    ],
    "unittest.suite.TestSuite._handleClassSetUp": [
        "unittest.suite._call_if_exists",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "<builtin>.getattr",
        "unittest.util.strclass"
    ],
    "unittest.suite.BaseTestSuite.debug": [
        "unittest.suite.BaseTestSuite.__iter__"
    ],
    "unittest.suite.TestSuite.debug": [
        "unittest.suite.TestSuite.run"
    ],
    "unittest.suite._ErrorHolder.__str__": [
        "unittest.suite._ErrorHolder.id"
    ],
    "unittest.suite._ErrorHolder.id": [],
    "unittest.suite._ErrorHolder.__call__": [
        "unittest.suite._ErrorHolder.run"
    ],
    "unittest.suite._ErrorHolder.run": [],
    "unittest.loader._FailedTest.__init__": [
        "<builtin>.super"
    ],
    "unittest.loader._FailedTest.__getattr__": [
        "<builtin>.super"
    ],
    "unittest.loader._make_failed_import_test": [
        "unittest.loader._make_failed_test",
        "traceback.format_exc",
        "<builtin>.ImportError"
    ],
    "unittest.loader._make_failed_test": [
        "unittest.loader._FailedTest.__init__"
    ],
    "unittest.loader._make_failed_load_tests": [
        "unittest.loader._make_failed_test",
        "traceback.format_exc"
    ],
    "unittest.loader._make_skipped_test": [
        "unittest.loader._make_skipped_test.testSkipped",
        "<builtin>.str",
        "unittest.case.skip.decorator",
        "unittest.case.skip",
        "<builtin>.type",
        "unittest.case.skip.decorator.skip_wrapper"
    ],
    "unittest.case.skip.decorator.skip_wrapper": [],
    "unittest.loader._jython_aware_splitext": [
        "<str>.endswith",
        "posixpath.splitext",
        "<str>.lower",
        "ntpath.splitext"
    ],
    "unittest.loader.TestLoader.loadTestsFromModule": [
        "<list>.append",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.sorted",
        "<builtin>.issubclass",
        "unittest.loader._make_failed_load_tests",
        "<builtin>.dir",
        "<builtin>.getattr",
        "<builtin>.len",
        "warnings.warn"
    ],
    "unittest.loader.TestLoader.loadTestsFromName": [
        "unittest.loader.TestLoader.loadTestsFromTestCase",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "traceback.format_exc",
        "unittest.loader._make_failed_import_test",
        "unittest.loader._make_failed_test",
        "<builtin>.issubclass",
        "<builtin>.callable",
        "<builtin>.__import__",
        "<builtin>.getattr",
        "<list>.append",
        "unittest.loader.TestLoader.loadTestsFromModule"
    ],
    "unittest.loader.TestLoader.loadTestsFromNames": [
        "unittest.loader.TestLoader.loadTestsFromName"
    ],
    "unittest.loader.TestLoader.discover": [
        "<builtin>.list",
        "unittest.loader.TestLoader._find_tests",
        "posixpath.join",
        "genericpath.isdir",
        "<builtin>.ImportError",
        "ntpath.join",
        "nt._isdir",
        "<builtin>.__import__",
        "genericpath.isfile",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "unittest.loader.TestLoader._find_tests": [
        "unittest.loader.TestLoader._find_tests",
        "posixpath.join",
        "<builtin>.sorted",
        "ntpath.join",
        "unittest.loader.TestLoader._find_test_path",
        "unittest.loader.TestLoader._get_name_from_path"
    ],
    "unittest.loader.TestLoader._get_name_from_path": [
        "<str>.replace",
        "posixpath.normpath",
        "unittest.loader._jython_aware_splitext",
        "posixpath.relpath",
        "pathlib.Path.replace",
        "<str>.startswith",
        "ntpath.normpath",
        "ntpath.relpath",
        "posixpath.isabs",
        "ntpath.isabs"
    ],
    "unittest.loader.TestLoader._find_test_path": [
        "<list>.append",
        "posixpath.join",
        "genericpath.isdir",
        "unittest.loader._make_skipped_test",
        "unittest.loader._make_failed_import_test",
        "ntpath.basename",
        "nt._isdir",
        "genericpath.isfile",
        "posixpath.basename",
        "ntpath.join",
        "unittest.loader.TestLoader._get_module_from_name",
        "unittest.loader.TestLoader._match_path",
        "unittest.loader.TestLoader._get_name_from_path",
        "pathlib.PurePath.match"
    ],
    "unittest.loader.TestLoader._get_module_from_name": [
        "<builtin>.__import__"
    ],
    "unittest.loader.TestLoader._match_path": [
        "fnmatch"
    ],
    "unittest.loader.TestLoader._get_directory_containing_module": [
        "posixpath.dirname",
        "ntpath.basename",
        "posixpath.basename",
        "ntpath.dirname",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "unittest.loader._makeLoader": [
        "unittest.loader.TestLoader.__init__"
    ],
    "unittest.loader.getTestCaseNames": [
        "unittest.loader._makeLoader",
        "unittest.loader.TestLoader.getTestCaseNames"
    ],
    "unittest.loader.makeSuite": [
        "unittest.loader._makeLoader",
        "unittest.loader.TestLoader.loadTestsFromTestCase"
    ],
    "unittest.loader.findTestCases": [
        "unittest.loader._makeLoader",
        "unittest.loader.TestLoader.loadTestsFromModule"
    ],
    "unittest.loader.TestLoader.getTestCaseNames.shouldIncludeMethod": [
        "fnmatch.fnmatchcase",
        "<builtin>.callable",
        "<builtin>.any",
        "<builtin>.getattr"
    ],
    "unittest.main._convert_name": [
        "<str>.endswith",
        "posixpath.relpath",
        "<str>.startswith",
        "genericpath.isfile",
        "ntpath.relpath",
        "posixpath.isabs",
        "ntpath.isabs",
        "<str>.lower"
    ],
    "unittest.main._convert_names": [
        "unittest.main._convert_name"
    ],
    "unittest.main.TestProgram.__init__": [
        "<builtin>.isinstance",
        "unittest.main.TestProgram.parseArgs",
        "unittest.main.TestProgram.runTests",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "unittest.main.TestProgram.parseArgs": [
        "argparse.ArgumentParser.parse_args",
        "unittest.main._convert_names",
        "<builtin>.list",
        "<builtin>.isinstance",
        "unittest.main.TestProgram._do_discovery",
        "unittest.main.TestProgram.createTests",
        "unittest.main.TestProgram._initArgParsers",
        "<builtin>.len"
    ],
    "unittest.main.TestProgram._initArgParsers": [
        "unittest.main.TestProgram._getMainArgParser",
        "unittest.main.TestProgram._getDiscoveryArgParser",
        "unittest.main.TestProgram._getParentArgParser"
    ],
    "unittest.main.TestProgram._getParentArgParser": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument"
    ],
    "unittest.main.TestProgram._getMainArgParser": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument"
    ],
    "unittest.main.TestProgram._getDiscoveryArgParser": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument"
    ],
    "unittest.main.TestProgram._do_discovery": [
        "argparse.ArgumentParser.parse_args",
        "unittest.main.TestProgram.createTests",
        "unittest.main.TestProgram._initArgParsers"
    ],
    "unittest.main.TestProgram.createTests": [
        "unittest.loader.TestLoader.loadTestsFromNames",
        "unittest.loader.TestLoader.loadTestsFromModule"
    ],
    "unittest.main.TestProgram.runTests": [
        "unittest.runner.TextTestRunner.run",
        "<builtin>.isinstance",
        "unittest.runner.TextTestRunner.__init__",
        "unittest.signals.installHandler",
        "unittest.result.TestResult.wasSuccessful"
    ],
    "unittest.signals.installHandler": [
        "unittest.signals._InterruptHandler.__init__",
        "signal.signal",
        "signal.getsignal"
    ],
    "unittest.signals._InterruptHandler.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "unittest.main.TestProgram.usageExit": [
        "unittest.main.TestProgram._print_help",
        "<builtin>.print",
        "unittest.main.TestProgram._initArgParsers"
    ],
    "unittest.main.TestProgram._print_help": [
        "<builtin>.print",
        "argparse.ArgumentParser.format_help",
        "argparse.ArgumentParser.print_help"
    ],
    "unittest.runner._WritelnDecorator.__getattr__": [
        "<builtin>.AttributeError",
        "<builtin>.getattr"
    ],
    "unittest.runner.TextTestResult.startTest": [
        "<builtin>.super",
        "unittest.runner.TextTestResult.getDescription"
    ],
    "unittest.runner.TextTestResult.addSuccess": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addError": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addFailure": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addSkip": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addExpectedFailure": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addUnexpectedSuccess": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.signals._InterruptHandler.__call__": [
        "weakref.WeakKeyDictionary.keys",
        "unittest.signals._InterruptHandler.__init__.default_handler",
        "signal.getsignal"
    ],
    "unittest.signals._InterruptHandler.__init__.default_handler": [],
    "unittest.signals.removeResult": [
        "<builtin>.bool",
        "weakref.WeakKeyDictionary.pop"
    ],
    "unittest.signals.removeHandler": [
        "functools.wraps",
        "signal.signal"
    ],
    "click.core._complete_visible_commands": [
        "typing.cast"
    ],
    "click.core._check_multicommand": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "click.core.batch": [
        "<builtin>.iter",
        "<builtin>.list",
        "<builtin>.zip",
        "itertools.repeat"
    ],
    "click.core.iter_params_for_processing": [
        "<builtin>.sorted"
    ],
    "click.core.Context.__init__": [
        "<str>.replace",
        "<str>.upper",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "click.core.Context.__enter__": [
        "click.globals.push_context"
    ],
    "click.globals.push_context": [],
    "click.core.Context.__exit__": [
        "click.core.Context.close",
        "click.globals.pop_context"
    ],
    "click.core.Context.close": [
        "contextlib.ExitStack.close"
    ],
    "click.globals.pop_context": [],
    "click.core.Context.with_resource": [
        "contextlib._BaseExitStack.enter_context"
    ],
    "click.core.Context.call_on_close": [
        "contextlib._BaseExitStack.callback"
    ],
    "click.core.Context.command_path": [
        "<str>.lstrip",
        "<list>.extend",
        "<builtin>.isinstance"
    ],
    "click.core.Context.find_object": [
        "<builtin>.isinstance"
    ],
    "click.core.Context.ensure_object": [
        "click.core.Context.find_object"
    ],
    "click.core.Context.fail": [
        "click.exceptions.UsageError.__init__"
    ],
    "click.exceptions.UsageError.__init__": [
        "<builtin>.super"
    ],
    "click.core.Context.exit": [
        "click.exceptions.Exit.__init__"
    ],
    "click.exceptions.Exit.__init__": [],
    "click.core.Context._make_sub_context": [
        "<builtin>.type"
    ],
    "click.core.Context.invoke": [
        "<builtin>.TypeError",
        "click.core.Context._make_sub_context",
        "<builtin>.isinstance",
        "click.core.augment_usage_errors"
    ],
    "click.core.augment_usage_errors": [],
    "click.core.Context.forward": [
        "click.core.Context.invoke",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "click.core.BaseCommand.get_usage": [
        "<builtin>.NotImplementedError"
    ],
    "click.core.BaseCommand.get_help": [
        "<builtin>.NotImplementedError"
    ],
    "click.core.BaseCommand.parse_args": [
        "<builtin>.NotImplementedError"
    ],
    "click.core.BaseCommand.invoke": [
        "<builtin>.NotImplementedError"
    ],
    "click.core.BaseCommand.shell_complete": [
        "click.core._complete_visible_commands",
        "click.shell_completion.CompletionItem.__init__",
        "<builtin>.isinstance",
        "click.shell_completion"
    ],
    "click.shell_completion.CompletionItem.__init__": [],
    "click.core.BaseCommand._main_shell_completion": [
        "click.shell_completion.shell_complete",
        "<str>.replace",
        "click.shell_completion"
    ],
    "click.shell_completion.shell_complete": [
        "click.shell_completion.get_completion_class",
        "click.utils.echo"
    ],
    "click.shell_completion.get_completion_class": [],
    "click.utils.echo": [
        "codecs.StreamRecoder.write",
        "<builtin>.isinstance",
        "click._compat.should_strip_ansi",
        "click._compat.strip_ansi",
        "click.globals.resolve_color_default",
        "rich.file_proxy.FileProxy.flush",
        "click._compat._find_binary_writer",
        "click._compat._make_cached_stream_func.func",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._compat.auto_wrap_for_ansi",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.str",
        "rich.file_proxy.FileProxy.write"
    ],
    "click._compat._make_cached_stream_func.func": [
        "click._compat.<lambda2>",
        "click._compat.get_text_stdin",
        "click._compat.get_text_stdout",
        "click._compat.<lambda3>",
        "click._compat.get_text_stderr",
        "click._compat.<lambda1>"
    ],
    "click._compat.<lambda3>": [],
    "click._compat.<lambda1>": [],
    "click._compat.<lambda2>": [],
    "click._compat.get_text_stdout": [
        "click._compat._force_correct_text_writer",
        "click._compat._get_windows_console_stream"
    ],
    "click._compat._get_windows_console_stream": [],
    "click._compat._force_correct_text_writer": [
        "click._compat._force_correct_text_stream"
    ],
    "click._compat._force_correct_text_stream": [
        "typing.cast",
        "click._compat._find_binary_reader",
        "click._compat._make_text_stream",
        "click._compat._find_binary_writer",
        "click._compat._is_binary_reader",
        "click._compat._stream_is_misconfigured",
        "click._compat._is_compatible_text_stream",
        "click._compat._is_binary_writer"
    ],
    "click._compat._is_binary_writer": [
        "rich.file_proxy.FileProxy.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "codecs.StreamRecoder.write",
        "click._winconsole.ConsoleStream.write"
    ],
    "click._compat._is_compatible_text_stream": [
        "click._compat._is_compat_stream_attr"
    ],
    "click._compat._is_compat_stream_attr": [
        "<builtin>.getattr"
    ],
    "click._compat._stream_is_misconfigured": [
        "<builtin>.getattr",
        "click._compat.is_ascii_encoding"
    ],
    "click._compat.is_ascii_encoding": [],
    "click._compat._find_binary_writer": [
        "typing.cast",
        "<builtin>.getattr",
        "click._compat._is_binary_writer"
    ],
    "click._compat._make_text_stream": [
        "click._compat.get_best_encoding",
        "click._compat._NonClosingTextIOWrapper.__init__"
    ],
    "click._compat.get_best_encoding": [
        "<builtin>.getattr",
        "click._compat.is_ascii_encoding"
    ],
    "click._compat._NonClosingTextIOWrapper.__init__": [
        "click._compat._FixupStream.__init__",
        "<builtin>.super",
        "typing.cast"
    ],
    "click._compat._FixupStream.__init__": [],
    "click._compat.get_text_stdin": [
        "click._compat._force_correct_text_reader",
        "click._compat._get_windows_console_stream"
    ],
    "click._compat._force_correct_text_reader": [
        "click._compat._force_correct_text_stream"
    ],
    "click._compat._is_binary_reader": [
        "codecs.StreamRecoder.read",
        "<builtin>.isinstance"
    ],
    "click._compat._find_binary_reader": [
        "typing.cast",
        "<builtin>.getattr",
        "click._compat._is_binary_reader"
    ],
    "click._compat.get_text_stderr": [
        "click._compat._force_correct_text_writer",
        "click._compat._get_windows_console_stream"
    ],
    "click.globals.resolve_color_default": [
        "click.globals.get_current_context"
    ],
    "click.globals.get_current_context": [],
    "click._compat.should_strip_ansi": [
        "click._compat._is_jupyter_kernel_output",
        "click._compat.isatty"
    ],
    "click._compat.isatty": [
        "click._winconsole.ConsoleStream.isatty",
        "click._compat._NonClosingTextIOWrapper.isatty"
    ],
    "click._compat._NonClosingTextIOWrapper.isatty": [
        "click._winconsole.ConsoleStream.isatty",
        "click._compat._NonClosingTextIOWrapper.isatty"
    ],
    "click._compat._is_jupyter_kernel_output": [
        "<builtin>.isinstance",
        "<str>.startswith"
    ],
    "click._compat.strip_ansi": [],
    "click._compat.auto_wrap_for_ansi": [
        "typing.cast",
        "click._compat.should_strip_ansi"
    ],
    "click._compat.auto_wrap_for_ansi._safe_write": [
        "codecs.StreamRecoder.write",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "click.core.BaseCommand.__call__": [
        "click.core.BaseCommand.main"
    ],
    "click.core.BaseCommand.main": [],
    "click.core.Command.__init__": [
        "<builtin>.super"
    ],
    "click.core.Command.to_info_dict": [
        "<builtin>.super",
        "click.core.Command.get_params"
    ],
    "click.core.Command.get_usage": [
        "click.core.Command.format_usage"
    ],
    "click.core.Command.format_usage": [
        "click.core.Command.collect_usage_pieces"
    ],
    "click.core.Command.collect_usage_pieces": [
        "click.core.Command.get_params"
    ],
    "click.core.Command.make_parser": [
        "click.parser.OptionParser.__init__",
        "click.core.Command.get_params"
    ],
    "click.parser.OptionParser.__init__": [],
    "click.core.Command.get_help": [
        "click.core.Command.format_help",
        "rich_cli.__main__.RichCommand.format_help"
    ],
    "click.core.Command.format_help": [
        "click.core.Command.format_usage",
        "click.core.Command.format_options",
        "click.core.Command.format_epilog",
        "click.core.Command.format_help_text"
    ],
    "click.core.Command.format_help_text": [
        "inspect.cleandoc",
        "gettext.gettext"
    ],
    "click.core.Command.format_options": [
        "<list>.append",
        "gettext.gettext",
        "click.core.Command.get_params"
    ],
    "click.core.Command.format_epilog": [
        "inspect.cleandoc"
    ],
    "click.core.Command.get_short_help_str": [
        "inspect.cleandoc",
        "<str>.strip",
        "click.utils.make_default_short_help",
        "gettext.gettext"
    ],
    "click.utils.make_default_short_help": [
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "click.core.Command.parse_args": [
        "<builtin>.len",
        "click.utils.echo",
        "click.core.Command.get_params",
        "gettext.ngettext",
        "click.parser.OptionParser.parse_args",
        "click.core.iter_params_for_processing",
        "click.core.Command.make_parser",
        "<builtin>.map"
    ],
    "click.parser.OptionParser.parse_args": [
        "click.parser.ParsingState.__init__",
        "click.parser.OptionParser._process_args_for_args",
        "click.parser.OptionParser._process_args_for_options"
    ],
    "click.parser.ParsingState.__init__": [],
    "click.parser.OptionParser._process_args_for_options": [
        "<list>.insert",
        "<list>.pop",
        "click.parser.OptionParser._process_opts",
        "<builtin>.len"
    ],
    "click.parser.OptionParser._process_opts": [
        "click.parser.normalize_opt",
        "click.parser.OptionParser._match_short_opt",
        "click.parser.OptionParser._match_long_opt"
    ],
    "click.parser.normalize_opt": [
        "click.parser.split_opt"
    ],
    "click.parser.split_opt": [],
    "click.parser.OptionParser._match_long_opt": [
        "click.exceptions.NoSuchOption.__init__",
        "click.parser.OptionParser._get_value_from_state",
        "difflib.get_close_matches",
        "click.exceptions.BadOptionUsage.__init__",
        "<list>.insert",
        "difflib",
        "gettext.gettext"
    ],
    "click.exceptions.NoSuchOption.__init__": [
        "<builtin>.super",
        "gettext.gettext"
    ],
    "click.exceptions.BadOptionUsage.__init__": [
        "<builtin>.super"
    ],
    "click.parser.OptionParser._get_value_from_state": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "gettext.ngettext",
        "<builtin>.tuple",
        "<list>.pop",
        "click.exceptions.BadOptionUsage.__init__"
    ],
    "click.parser.OptionParser._match_short_opt": [
        "<list>.append",
        "click.exceptions.NoSuchOption.__init__",
        "click.parser.normalize_opt",
        "click.parser.OptionParser._get_value_from_state",
        "<builtin>.len",
        "<list>.insert"
    ],
    "click.parser.OptionParser._process_args_for_args": [
        "click.parser._unpack_args",
        "<builtin>.enumerate"
    ],
    "click.parser._unpack_args": [
        "click.parser._unpack_args._fetch",
        "<builtin>.reversed",
        "<builtin>.list",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "_collections.deque",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "click.parser._unpack_args._fetch": [
        "<list>.pop"
    ],
    "click.core.Command.invoke": [
        "click.termui.style",
        "click.utils.echo",
        "gettext.gettext"
    ],
    "click.termui.style": [
        "<list>.append",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "click.core.Command.shell_complete": [
        "<builtin>.super",
        "<builtin>.isinstance",
        "click.core.Command.get_params",
        "click.shell_completion",
        "click.shell_completion.CompletionItem.__init__"
    ],
    "click.core.MultiCommand.__init__": [
        "<builtin>.super",
        "<builtin>.RuntimeError",
        "<builtin>.isinstance"
    ],
    "click.core.MultiCommand.to_info_dict": [
        "<builtin>.super",
        "click.core.MultiCommand.get_command",
        "click.core.MultiCommand.list_commands"
    ],
    "click.core.MultiCommand.list_commands": [],
    "click.core.MultiCommand.get_command": [],
    "click.core.MultiCommand.collect_usage_pieces": [
        "<builtin>.super"
    ],
    "click.core.MultiCommand.format_options": [
        "click.core.MultiCommand.format_commands",
        "<builtin>.super"
    ],
    "click.core.MultiCommand.format_commands": [
        "<builtin>.len",
        "click.core.MultiCommand.get_command",
        "<list>.append",
        "<builtin>.max",
        "gettext.gettext",
        "click.core.MultiCommand.list_commands"
    ],
    "click.core.MultiCommand.parse_args": [
        "<builtin>.super",
        "click.utils.echo"
    ],
    "click.core.MultiCommand.invoke": [
        "gettext.gettext"
    ],
    "click.core.MultiCommand.resolve_command": [
        "click.core.MultiCommand.parse_args",
        "click.parser.split_opt",
        "click.core.MultiCommand.get_command",
        "gettext.gettext",
        "click.utils.make_str"
    ],
    "click.utils.make_str": [
        "<builtin>.str",
        "<builtin>.isinstance",
        "click._compat.get_filesystem_encoding"
    ],
    "click._compat.get_filesystem_encoding": [],
    "click.core.MultiCommand.shell_complete": [
        "click.core._complete_visible_commands",
        "<builtin>.super",
        "click.shell_completion.CompletionItem.__init__",
        "click.shell_completion"
    ],
    "click.core.Group.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "click.core.Group.add_command": [
        "<builtin>.TypeError",
        "click.core._check_multicommand"
    ],
    "click.core.Group.list_commands": [
        "<builtin>.sorted"
    ],
    "click.core.CommandCollection.__init__": [
        "<builtin>.super"
    ],
    "click.core.CommandCollection.get_command": [
        "click.core._check_multicommand"
    ],
    "click.core.CommandCollection.list_commands": [
        "<builtin>.set",
        "<builtin>.sorted"
    ],
    "click.core._check_iter": [
        "<builtin>.iter",
        "<builtin>.isinstance"
    ],
    "click.core.Parameter.__init__": [
        "click.types.convert_type",
        "<builtin>.next",
        "<builtin>.callable",
        "click.core.Argument._parse_decls",
        "click.core.Option._parse_decls",
        "<builtin>.len",
        "click.core._check_iter",
        "<builtin>.ValueError",
        "click.core.Parameter._parse_decls"
    ],
    "click.core.Parameter._parse_decls": [
        "<builtin>.NotImplementedError"
    ],
    "click.core.Parameter.to_info_dict": [
        "click.types._NumberRangeBase.to_info_dict",
        "click.types.ParamType.to_info_dict",
        "click.types.FuncParamType.to_info_dict",
        "click.types.Tuple.to_info_dict"
    ],
    "click.types.Tuple.to_info_dict": [
        "<builtin>.super"
    ],
    "click.types.ParamType.to_info_dict": [
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "click.types.FuncParamType.to_info_dict": [
        "<builtin>.super"
    ],
    "click.core.Parameter.make_metavar": [
        "<str>.upper",
        "click.types.ParamType.get_metavar"
    ],
    "click.types.ParamType.get_metavar": [],
    "click.core.Parameter.add_to_parser": [
        "<builtin>.NotImplementedError"
    ],
    "click.core.Parameter.consume_value": [
        "click.core.Option.value_from_envvar",
        "click.core.Parameter.value_from_envvar",
        "click.core.Parameter.get_default",
        "click.core.Option.get_default"
    ],
    "click.core.Parameter.value_from_envvar": [
        "click.types.ParamType.split_envvar_value",
        "click.core.Option.resolve_envvar_value",
        "click.core.Parameter.resolve_envvar_value"
    ],
    "click.core.Parameter.resolve_envvar_value": [
        "<builtin>.isinstance"
    ],
    "click.types.ParamType.split_envvar_value": [],
    "click.core.Parameter.get_default": [],
    "click.core.Parameter.type_cast_value": [
        "<builtin>.tuple",
        "click.core.Parameter.type_cast_value.convert",
        "click.core.Parameter.type_cast_value.check_iter"
    ],
    "click.core.Parameter.type_cast_value.convert": [
        "click.types.Tuple.__init__",
        "gettext.ngettext",
        "<builtin>.tuple",
        "click.exceptions.BadParameter.__init__",
        "click.core.Parameter.type_cast_value.check_iter",
        "<builtin>.len",
        "click.types.FuncParamType.__init__"
    ],
    "click.core.Parameter.type_cast_value.check_iter": [
        "click.core._check_iter",
        "click.exceptions.BadParameter.__init__",
        "gettext.gettext"
    ],
    "click.exceptions.BadParameter.__init__": [
        "<builtin>.super"
    ],
    "click.core.Parameter.process_value": [
        "click.core.Parameter.value_is_missing",
        "click.exceptions.MissingParameter.__init__",
        "click.core.Parameter.type_cast_value"
    ],
    "click.core.Parameter.value_is_missing": [],
    "click.exceptions.MissingParameter.__init__": [
        "<builtin>.super"
    ],
    "click.core.Parameter.handle_parse_result": [
        "click.core.augment_usage_errors"
    ],
    "click.core.Parameter.shell_complete": [
        "<builtin>.isinstance",
        "typing.cast",
        "click.shell_completion",
        "click.shell_completion.CompletionItem.__init__",
        "click.types.ParamType.shell_complete"
    ],
    "click.types.ParamType.shell_complete": [],
    "click.core.Option.to_info_dict": [
        "<builtin>.super"
    ],
    "click.core.Option._parse_decls": [
        "<builtin>.TypeError",
        "<list>.sort",
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "click.core.Option.get_help_record": [
        "<list>.append",
        "<builtin>.isinstance",
        "click.types._NumberRangeBase._describe_range",
        "click.parser.split_opt",
        "inspect.isfunction",
        "click.core.Option.get_default",
        "<builtin>.str",
        "gettext.gettext"
    ],
    "click.core.Option.get_default": [],
    "click.types._NumberRangeBase._describe_range": [],
    "click.core.Option.prompt_for_value": [
        "click.termui.confirm",
        "click.core.Option.get_default"
    ],
    "click.termui.confirm": [
        "click.termui._build_prompt",
        "<str>.rstrip",
        "click.utils.echo",
        "gettext.gettext"
    ],
    "click.termui._build_prompt": [
        "click.termui._format_default",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "click.termui._format_default": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "click.core.Option.resolve_envvar_value": [
        "<builtin>.super"
    ],
    "click.core.Option.value_from_envvar": [
        "click.core.batch",
        "click.core.Option.resolve_envvar_value",
        "<builtin>.bool",
        "click.types.ParamType.split_envvar_value"
    ],
    "click.core.Option.consume_value": [
        "<builtin>.super",
        "<builtin>.any",
        "click.core.Option.prompt_for_value"
    ],
    "click.core.Argument.__init__": [
        "<builtin>.TypeError",
        "<builtin>.super"
    ],
    "click.core.Argument.make_metavar": [
        "click.types.ParamType.get_metavar"
    ],
    "click.core.Argument._parse_decls": [
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "click.core.Argument.get_error_hint": [
        "click.core.Argument.make_metavar"
    ],
    "click.core.Command.get_help_option.show_help": [
        "click.utils.echo"
    ],
    "click.types.ParamType.__call__": [
        "click.types.BoolParamType.convert",
        "click.types._NumberParamTypeBase.convert",
        "click.types.File.convert",
        "click.types.UUIDParameterType.convert",
        "click.types.Path.convert",
        "click.types._NumberRangeBase.convert",
        "click.types.FuncParamType.convert",
        "click.types.DateTime.convert",
        "click.types.StringParamType.convert",
        "click.types.Tuple.convert",
        "click.types.Choice.convert",
        "click.types.ParamType.convert"
    ],
    "click.types.Tuple.convert": [
        "click.types.ParamType.fail",
        "<builtin>.zip",
        "gettext.ngettext",
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "click.types.ParamType.fail": [
        "click.exceptions.BadParameter.__init__"
    ],
    "click.types._NumberParamTypeBase.convert": [
        "click.types.ParamType.fail",
        "gettext.gettext"
    ],
    "click.types.FuncParamType.convert": [
        "click.core.Option.__init__",
        "click.types.ParamType.fail",
        "click.core.Parameter.__init__",
        "<builtin>.str",
        "click.core.Argument.__init__"
    ],
    "click.types.StringParamType.convert": [
        "<builtin>.str",
        "click._compat._get_argv_encoding",
        "<builtin>.isinstance",
        "click._compat.get_filesystem_encoding"
    ],
    "click._compat._get_argv_encoding": [
        "<builtin>.getattr",
        "click._compat.get_filesystem_encoding"
    ],
    "click.types.ParamType.convert": [],
    "click.types._NumberRangeBase.convert": [
        "click.types._NumberRangeBase._clamp",
        "<builtin>.super",
        "click.types.ParamType.fail",
        "click.types._NumberRangeBase._describe_range",
        "operator",
        "click.types.IntRange._clamp",
        "gettext.gettext"
    ],
    "click.types.IntRange._clamp": [],
    "click.types._NumberRangeBase._clamp": [],
    "click.types.BoolParamType.convert": [
        "click.types.ParamType.fail",
        "<builtin>.bool",
        "gettext.gettext"
    ],
    "click.types.CompositeParamType.arity": [
        "<builtin>.NotImplementedError"
    ],
    "click.types.Choice.to_info_dict": [
        "<builtin>.super"
    ],
    "click.types.Choice.get_missing_message": [
        "gettext.gettext"
    ],
    "click.types.Choice.convert": [
        "click.types.ParamType.fail",
        "gettext.ngettext",
        "<builtin>.map",
        "<builtin>.len"
    ],
    "click.types.Choice.__repr__": [
        "<builtin>.list"
    ],
    "click.types.Choice.shell_complete": [
        "click.shell_completion.CompletionItem.__init__",
        "<builtin>.map",
        "click.shell_completion"
    ],
    "click.types.DateTime.to_info_dict": [
        "<builtin>.super"
    ],
    "click.types.DateTime.convert": [
        "<builtin>.isinstance",
        "click.types.ParamType.fail",
        "gettext.ngettext",
        "click.types.DateTime._try_to_convert_date",
        "<builtin>.len",
        "<builtin>.map"
    ],
    "click.types.DateTime._try_to_convert_date": [],
    "click.types._NumberRangeBase.to_info_dict": [
        "<builtin>.super"
    ],
    "click.types._NumberRangeBase.__repr__": [
        "click.types._NumberRangeBase._describe_range",
        "<builtin>.type"
    ],
    "click.types.FloatRange.__init__": [
        "<builtin>.TypeError",
        "<builtin>.super"
    ],
    "click.types.FloatRange._clamp": [
        "<builtin>.RuntimeError"
    ],
    "uuid": [
        "uuid.SafeUUID",
        "_uuid",
        "enum",
        "os",
        "uuid.UUID.__init__",
        "platform.system",
        "uuid.UUID",
        "platform"
    ],
    "click.types.UUIDParameterType.convert": [
        "uuid",
        "<builtin>.isinstance",
        "click.types.ParamType.fail",
        "gettext.gettext",
        "uuid.UUID.__init__"
    ],
    "uuid.SafeUUID": [],
    "uuid.UUID": [
        "<builtin>.property"
    ],
    "_uuid": [],
    "uuid.UUID.__init__": [
        "<str>.replace",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<str>.strip",
        "<builtin>.len",
        "<list>.count",
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "click.types.File.to_info_dict": [
        "<builtin>.super"
    ],
    "click.types.File.convert": [
        "typing.cast",
        "click.types.ParamType.fail",
        "click.types.File.resolve_lazy_flag",
        "click.utils.safecall",
        "click.utils.LazyFile.__init__",
        "click._compat.open_stream",
        "<builtin>.hasattr"
    ],
    "click.types.File.resolve_lazy_flag": [],
    "click.utils.LazyFile.__init__": [
        "click._compat.open_stream",
        "click.utils.LazyFile.close",
        "click._compat._AtomicFile.close",
        "<builtin>.open"
    ],
    "click._compat.open_stream": [
        "click._compat.get_binary_stdout",
        "ntpath.realpath",
        "posixpath.join",
        "click._compat.get_text_stdout",
        "click._compat._AtomicFile.__init__",
        "<builtin>.ValueError",
        "random.Random.randrange",
        "posixpath.realpath",
        "<builtin>.any",
        "random",
        "nt._isdir",
        "click._compat._wrap_io_open",
        "typing.cast",
        "genericpath.isdir",
        "posixpath.dirname",
        "click._compat.get_text_stdin",
        "click._compat.get_binary_stdin",
        "ntpath.join",
        "<builtin>.getattr",
        "ntpath.dirname"
    ],
    "click._compat.get_binary_stdout": [
        "<builtin>.RuntimeError",
        "click._compat._find_binary_writer"
    ],
    "click._compat.get_binary_stdin": [
        "click._compat._find_binary_reader",
        "<builtin>.RuntimeError"
    ],
    "click._compat._wrap_io_open": [
        "<builtin>.open"
    ],
    "click._compat._AtomicFile.__init__": [],
    "click.utils.safecall": [
        "typing.cast",
        "functools.update_wrapper"
    ],
    "click.types.File.shell_complete": [
        "click.shell_completion"
    ],
    "click.types.Path.__init__": [
        "gettext.gettext"
    ],
    "click.types.Path.to_info_dict": [
        "<builtin>.super"
    ],
    "click.types.Path.coerce_path_result": [
        "os._fscodec.fsdecode",
        "<builtin>.isinstance",
        "os._fscodec.fsencode"
    ],
    "click.types.Path.convert": [
        "stat.S_ISDIR",
        "click.types.ParamType.fail",
        "stat.S_ISREG",
        "pathlib",
        "click.types.Path.coerce_path_result",
        "<str>.title",
        "gettext.gettext",
        "pathlib.Path.resolve"
    ],
    "pathlib.Path.resolve": [
        "pathlib.Path.stat",
        "pathlib.Path.absolute",
        "pathlib.PurePath._from_parts",
        "<builtin>.str",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path._raise_closed": [
        "<builtin>.ValueError"
    ],
    "pathlib.Path.stat": [],
    "pathlib.Path.absolute": [
        "pathlib.PurePath.is_absolute",
        "pathlib.PurePath._from_parts",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.PurePath.is_absolute": [
        "<builtin>.bool"
    ],
    "pathlib.PurePath._from_parts": [],
    "click.types.Path.shell_complete": [
        "click.shell_completion"
    ],
    "click.types.Tuple.arity": [
        "<builtin>.len"
    ],
    "datetime._ord2ymd": [
        "datetime._days_in_month",
        "<builtin>.divmod",
        "datetime._is_leap"
    ],
    "datetime._build_struct_time": [
        "datetime._days_before_month",
        "datetime._ymd2ord"
    ],
    "datetime._format_time": [
        "<builtin>.ValueError"
    ],
    "datetime._format_offset": [
        "<builtin>.divmod"
    ],
    "datetime._wrap_strftime": [
        "datetime.time.utcoffset",
        "<builtin>.len",
        "datetime.datetime.tzname",
        "datetime.datetime.utcoffset",
        "<builtin>.getattr",
        "<list>.append",
        "<builtin>.divmod",
        "<builtin>.hasattr",
        "datetime.time.tzname",
        "<list>"
    ],
    "datetime._parse_isoformat_date": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "datetime._parse_hh_mm_ss_ff": [
        "<builtin>.int",
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "datetime._parse_isoformat_time": [
        "<builtin>.len",
        "datetime._parse_hh_mm_ss_ff",
        "<list>.append",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "datetime._check_tzname": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "datetime._check_utc_offset": [
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "datetime._check_int_field": [
        "<int>.__int__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<int>.__index__"
    ],
    "datetime._check_date_fields": [
        "datetime._days_in_month",
        "datetime._check_int_field",
        "<builtin>.ValueError"
    ],
    "datetime._check_time_fields": [
        "datetime._check_int_field",
        "<builtin>.ValueError"
    ],
    "datetime._check_tzinfo_arg": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime._cmperror": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "datetime._divide_and_round": [
        "<builtin>.divmod"
    ],
    "datetime.timedelta.__new__": [
        "<builtin>.OverflowError",
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.round",
        "<builtin>.abs",
        "<builtin>.divmod"
    ],
    "datetime.timedelta.__repr__": [
        "<list>.append"
    ],
    "datetime.timedelta.__str__": [
        "<builtin>.divmod",
        "datetime.timedelta.__str__.plural"
    ],
    "datetime.timedelta.__str__.plural": [
        "<builtin>.abs"
    ],
    "datetime.timedelta.__add__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__sub__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__rsub__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__mul__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance",
        "datetime._divide_and_round"
    ],
    "datetime.timedelta._to_microseconds": [],
    "datetime.timedelta.__floordiv__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__truediv__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance",
        "datetime._divide_and_round"
    ],
    "datetime.timedelta.__mod__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__divmod__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.divmod",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__eq__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta._cmp": [
        "datetime.timedelta._cmp",
        "datetime.timedelta._getstate",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta._getstate": [],
    "datetime.timedelta.__le__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__lt__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__ge__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__gt__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__hash__": [
        "datetime.timedelta._getstate",
        "<builtin>.hash"
    ],
    "datetime.timedelta.__reduce__": [
        "datetime.timedelta._getstate"
    ],
    "datetime.date.__new__": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "datetime._check_date_fields",
        "datetime.date.__setstate",
        "<builtin>.ord",
        "<builtin>.ValueError"
    ],
    "datetime.date.__setstate": [],
    "datetime.date.fromordinal": [
        "datetime._ord2ymd"
    ],
    "datetime.date.fromisoformat": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "datetime._parse_isoformat_date",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "datetime.date.fromisocalendar": [
        "datetime._ord2ymd",
        "datetime._isoweek1monday",
        "<builtin>.ValueError",
        "datetime._ymd2ord",
        "datetime._is_leap"
    ],
    "datetime._isoweek1monday": [
        "datetime._ymd2ord"
    ],
    "datetime.date.ctime": [
        "datetime.date.toordinal"
    ],
    "datetime.date.strftime": [
        "datetime._wrap_strftime",
        "datetime.date.timetuple",
        "datetime.datetime.timetuple"
    ],
    "datetime.date.timetuple": [
        "datetime._build_struct_time"
    ],
    "datetime.date.__format__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.TypeError",
        "datetime.date.strftime",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "datetime.date.replace": [
        "<builtin>.type"
    ],
    "datetime.date.__eq__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date._cmp": [
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__le__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__lt__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__ge__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__gt__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__hash__": [
        "datetime.date._getstate",
        "datetime.datetime._getstate",
        "<builtin>.hash"
    ],
    "datetime.date._getstate": [
        "<builtin>.divmod",
        "<builtin>.bytes"
    ],
    "datetime.date.__add__": [
        "<builtin>.OverflowError",
        "<builtin>.isinstance",
        "<builtin>.type",
        "datetime.date.toordinal"
    ],
    "datetime.date.__sub__": [
        "<builtin>.isinstance",
        "datetime.date.toordinal"
    ],
    "datetime.date.isoweekday": [
        "datetime.date.toordinal"
    ],
    "datetime.date.isocalendar": [
        "<builtin>.divmod",
        "datetime._isoweek1monday",
        "datetime._ymd2ord"
    ],
    "datetime.date.__reduce__": [
        "datetime.date._getstate",
        "datetime.datetime._getstate"
    ],
    "datetime.tzinfo.tzname": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.utcoffset": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.dst": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.fromutc": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.tzinfo.__reduce__": [
        "<builtin>.getattr"
    ],
    "datetime.time.__new__": [
        "<builtin>.isinstance",
        "datetime._check_tzinfo_arg",
        "<builtin>.len",
        "<builtin>.ord",
        "datetime.time.__setstate",
        "datetime._check_time_fields",
        "<builtin>.ValueError"
    ],
    "datetime.time.__setstate": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "<int>.__index__": [],
    "<int>.__int__": [],
    "datetime.time.__eq__": [
        "datetime.time._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.time._cmp": [
        "datetime.time.utcoffset",
        "datetime.time._cmp",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.time.utcoffset": [
        "datetime._check_utc_offset"
    ],
    "datetime.time.__le__": [
        "datetime.time._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.time.__lt__": [
        "datetime.time._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.time.__ge__": [
        "datetime.time._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.time.__gt__": [
        "datetime.time._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.time.__hash__": [
        "datetime.time._getstate",
        "datetime.time.utcoffset",
        "<builtin>.hash",
        "<builtin>.divmod",
        "datetime.time.replace"
    ],
    "datetime.time.replace": [
        "<builtin>.type"
    ],
    "datetime.time._getstate": [
        "<builtin>.divmod",
        "<builtin>.bytes"
    ],
    "datetime.time._tzstr": [
        "datetime.time.utcoffset",
        "datetime._format_offset"
    ],
    "datetime.time.isoformat": [
        "datetime._format_time",
        "datetime.time._tzstr"
    ],
    "datetime.time.fromisoformat": [
        "datetime._parse_isoformat_time",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.time.strftime": [
        "datetime._wrap_strftime"
    ],
    "datetime.time.tzname": [
        "datetime._check_tzname"
    ],
    "datetime.time.__format__": [
        "datetime.time.strftime",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "datetime.time.dst": [
        "datetime._check_utc_offset"
    ],
    "datetime.time.__reduce_ex__": [
        "datetime.time._getstate"
    ],
    "datetime.time.__reduce__": [
        "datetime.time.__reduce_ex__"
    ],
    "datetime.datetime.__new__": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "datetime._check_tzinfo_arg",
        "datetime._check_date_fields",
        "datetime.datetime.__setstate",
        "<builtin>.len",
        "<builtin>.ord",
        "datetime._check_time_fields",
        "<builtin>.ValueError"
    ],
    "datetime.datetime.__setstate": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime.datetime._fromtimestamp": [
        "<builtin>.round",
        "<builtin>.min"
    ],
    "datetime.datetime.fromtimestamp": [
        "datetime._check_tzinfo_arg",
        "datetime.datetime._fromtimestamp"
    ],
    "datetime.datetime.utcfromtimestamp": [
        "datetime.datetime._fromtimestamp"
    ],
    "datetime.datetime.now": [
        "datetime.datetime.fromtimestamp"
    ],
    "datetime.datetime.utcnow": [
        "datetime.datetime.utcfromtimestamp"
    ],
    "datetime.datetime.combine": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.fromisoformat": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "datetime._parse_isoformat_date",
        "datetime._parse_isoformat_time",
        "<builtin>.ValueError"
    ],
    "datetime.datetime.timetuple": [
        "datetime._build_struct_time",
        "datetime.datetime.dst"
    ],
    "datetime.datetime.dst": [
        "datetime._check_utc_offset"
    ],
    "datetime.datetime._mktime": [
        "datetime.datetime._mktime.local"
    ],
    "datetime.datetime._mktime.local": [],
    "datetime.datetime.timestamp": [
        "datetime.datetime._mktime"
    ],
    "datetime.datetime.utctimetuple": [
        "datetime.datetime.utcoffset",
        "datetime._build_struct_time"
    ],
    "datetime.datetime.utcoffset": [
        "datetime._check_utc_offset"
    ],
    "datetime.datetime.date": [
        "datetime.datetime.date"
    ],
    "datetime.datetime.time": [
        "datetime.datetime.time"
    ],
    "datetime.datetime.timetz": [
        "datetime.datetime.time"
    ],
    "datetime.datetime.replace": [
        "<builtin>.type"
    ],
    "datetime.datetime._local_timezone": [
        "datetime.datetime._mktime"
    ],
    "datetime.datetime.astimezone": [
        "datetime.datetime.replace",
        "datetime.timezone.fromutc",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "datetime.datetime._local_timezone",
        "datetime.timezone.utcoffset"
    ],
    "datetime.timezone.utcoffset": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime.timezone.fromutc": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.datetime.ctime": [
        "datetime.date.toordinal"
    ],
    "datetime.datetime.isoformat": [
        "datetime._format_time",
        "datetime.datetime.utcoffset",
        "datetime._format_offset"
    ],
    "datetime.datetime.__repr__": [
        "<builtin>.map"
    ],
    "datetime.datetime.__str__": [
        "datetime.datetime.isoformat"
    ],
    "_strptime": [
        "_strptime.TimeRE",
        "datetime",
        "_strptime.LocaleTime",
        "re",
        "_thread.allocate_lock",
        "locale",
        "calendar",
        "_strptime.TimeRE.__init__"
    ],
    "datetime.datetime.strptime": [
        "_strptime",
        "_strptime._strptime_datetime"
    ],
    "_strptime.LocaleTime": [],
    "_strptime.TimeRE": [],
    "_thread.allocate_lock": [],
    "_strptime.TimeRE.__init__": [
        "<builtin>.super",
        "_strptime.LocaleTime.__init__",
        "_strptime.TimeRE.__seqToRE",
        "_strptime.TimeRE.pattern"
    ],
    "_strptime.LocaleTime.__init__": [
        "_strptime.LocaleTime.__calc_date_time",
        "_strptime._getlang",
        "_strptime.LocaleTime.__calc_timezone",
        "_strptime.LocaleTime.__calc_am_pm",
        "<builtin>.ValueError",
        "_strptime.LocaleTime.__calc_month",
        "_strptime.LocaleTime.__calc_weekday"
    ],
    "_strptime._getlang": [
        "locale.getlocale"
    ],
    "_strptime.LocaleTime.__calc_weekday": [
        "<builtin>.range"
    ],
    "_strptime.LocaleTime.__calc_month": [
        "<builtin>.range"
    ],
    "_strptime.LocaleTime.__calc_am_pm": [
        "<list>.append"
    ],
    "_strptime.LocaleTime.__calc_timezone": [
        "<builtin>.frozenset"
    ],
    "_strptime.LocaleTime.__calc_date_time": [
        "<list>.extend"
    ],
    "_strptime.TimeRE.__seqToRE": [
        "re.escape",
        "<builtin>.sorted"
    ],
    "_strptime.TimeRE.pattern": [
        "<list>.index",
        "re.compile",
        "<str>.index"
    ],
    "_strptime._strptime_datetime": [
        "_strptime._strptime"
    ],
    "_strptime._strptime": [
        "_strptime._calc_julian_from_U_or_W",
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.TypeError",
        "datetime.date.fromordinal",
        "<builtin>.enumerate",
        "calendar.isleap",
        "<builtin>.type",
        "<builtin>.len",
        "datetime.date.weekday",
        "_strptime._calc_julian_from_V",
        "<builtin>.ValueError",
        "datetime.date.toordinal"
    ],
    "_strptime._calc_julian_from_V": [
        "datetime.date.isoweekday",
        "datetime.date.toordinal"
    ],
    "_strptime._calc_julian_from_U_or_W": [
        "datetime.date.weekday"
    ],
    "datetime.datetime.tzname": [
        "datetime._check_tzname"
    ],
    "datetime.datetime.__eq__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.datetime._cmp": [
        "<builtin>.isinstance",
        "datetime.datetime._cmp",
        "<builtin>.TypeError",
        "datetime.datetime.utcoffset",
        "datetime.datetime.replace"
    ],
    "datetime.datetime.__le__": [
        "datetime.datetime._cmp",
        "datetime._cmperror",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__lt__": [
        "datetime.datetime._cmp",
        "datetime._cmperror",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__ge__": [
        "datetime.datetime._cmp",
        "datetime._cmperror",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__gt__": [
        "datetime.datetime._cmp",
        "datetime._cmperror",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__add__": [
        "<builtin>.OverflowError",
        "<builtin>.isinstance",
        "datetime.datetime.time",
        "<builtin>.type",
        "<builtin>.divmod",
        "datetime.date.toordinal"
    ],
    "datetime.datetime.__sub__": [
        "<builtin>.TypeError",
        "datetime.datetime.utcoffset",
        "<builtin>.isinstance",
        "datetime.date.toordinal"
    ],
    "datetime.datetime.__hash__": [
        "<builtin>.hash",
        "datetime._ymd2ord",
        "datetime.datetime.utcoffset",
        "datetime.datetime.replace",
        "datetime.datetime._getstate"
    ],
    "datetime.datetime._getstate": [
        "<builtin>.divmod",
        "<builtin>.bytes"
    ],
    "datetime.datetime.__reduce_ex__": [
        "datetime.datetime._getstate"
    ],
    "datetime.datetime.__reduce__": [
        "datetime.datetime.__reduce_ex__"
    ],
    "datetime.timezone.__new__": [
        "<builtin>.TypeError",
        "datetime.timezone._create",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.timezone.__eq__": [
        "<builtin>.isinstance"
    ],
    "datetime.timezone.__hash__": [
        "<builtin>.hash"
    ],
    "datetime.timezone.__str__": [
        "datetime.timezone.tzname"
    ],
    "datetime.timezone.tzname": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "datetime.timezone._name_from_offset"
    ],
    "datetime.timezone._name_from_offset": [
        "<builtin>.divmod"
    ],
    "datetime.timezone.dst": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "click._compat._FixupStream.__getattr__": [
        "<builtin>.getattr"
    ],
    "click._compat._FixupStream.read1": [
        "typing.cast",
        "codecs.StreamRecoder.read",
        "<builtin>.getattr"
    ],
    "click._compat._FixupStream.readable": [
        "typing.cast",
        "codecs.StreamRecoder.read",
        "<builtin>.getattr"
    ],
    "click._compat._FixupStream.writable": [
        "codecs.StreamRecoder.write",
        "typing.cast",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.getattr",
        "rich.file_proxy.FileProxy.write"
    ],
    "click._compat._FixupStream.seekable": [
        "typing.cast",
        "codecs.StreamRecoder.seek",
        "<builtin>.getattr"
    ],
    "codecs.StreamRecoder.seek": [],
    "click._compat.get_binary_stderr": [
        "<builtin>.RuntimeError",
        "click._compat._find_binary_writer"
    ],
    "click._compat._AtomicFile.__getattr__": [
        "<builtin>.getattr"
    ],
    "click._compat._AtomicFile.__exit__": [
        "click._compat._AtomicFile.close"
    ],
    "click._compat._AtomicFile.close": [],
    "click._compat._AtomicFile.__repr__": [
        "<builtin>.repr"
    ],
    "click._compat.term_len": [
        "click._compat.strip_ansi",
        "<builtin>.len"
    ],
    "click._winconsole._WindowsConsoleRawIOBase.isatty": [
        "<builtin>.super"
    ],
    "click._winconsole._WindowsConsoleReader.readinto": [
        "<builtin>.OSError",
        "click._winconsole.get_buffer",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "click._winconsole.get_buffer": [],
    "click._winconsole._WindowsConsoleWriter.write": [
        "click._winconsole.get_buffer",
        "click._winconsole._WindowsConsoleWriter._get_error_message",
        "<builtin>.len",
        "<builtin>.OSError",
        "<builtin>.min"
    ],
    "click._winconsole._WindowsConsoleWriter._get_error_message": [],
    "click._winconsole.ConsoleStream.write": [
        "click._compat.auto_wrap_for_ansi._safe_write",
        "<builtin>.isinstance"
    ],
    "click._winconsole.ConsoleStream.writelines": [
        "click._winconsole.ConsoleStream.write"
    ],
    "click._winconsole.ConsoleStream.__getattr__": [
        "<builtin>.getattr"
    ],
    "click._winconsole._get_text_stdin": [
        "typing.cast",
        "_io.BufferedReader",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click._winconsole.ConsoleStream.__init__"
    ],
    "click._winconsole.ConsoleStream.__init__": [],
    "click._winconsole._get_text_stdout": [
        "typing.cast",
        "_io.BufferedWriter",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click._winconsole.ConsoleStream.__init__"
    ],
    "click._winconsole._get_text_stderr": [
        "typing.cast",
        "_io.BufferedWriter",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click._winconsole.ConsoleStream.__init__"
    ],
    "click._winconsole._is_console": [
        "<builtin>.bool",
        "<builtin>.hasattr"
    ],
    "click._winconsole._get_windows_console_stream": [
        "click._winconsole._is_console",
        "<builtin>.getattr"
    ],
    "ctypes.create_string_buffer": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "ctypes.c_buffer": [
        "ctypes.create_string_buffer"
    ],
    "ctypes.py_object.__repr__": [
        "<builtin>.super",
        "<builtin>.type"
    ],
    "ctypes.create_unicode_buffer": [
        "<builtin>.sum",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.ord"
    ],
    "ctypes.SetPointerType": [
        "<builtin>.RuntimeError",
        "<builtin>.id"
    ],
    "ctypes.CDLL.__init__": [
        "<str>.endswith",
        "ctypes.CDLL.__init__._FuncPtr"
    ],
    "ctypes.CDLL.__init__._FuncPtr": [],
    "ctypes.CDLL.__repr__": [
        "<builtin>.id"
    ],
    "ctypes.CDLL.__getattr__": [
        "<builtin>.AttributeError",
        "ctypes.CDLL.__getitem__",
        "<builtin>.setattr"
    ],
    "ctypes.CDLL.__getitem__": [
        "<builtin>.isinstance"
    ],
    "ctypes.LibraryLoader.__getattr__": [
        "<builtin>.AttributeError",
        "ctypes.CDLL.__init__",
        "<builtin>.setattr"
    ],
    "ctypes.LibraryLoader.__getitem__": [
        "<builtin>.getattr"
    ],
    "ctypes.LibraryLoader.LoadLibrary": [
        "ctypes.CDLL.__init__"
    ],
    "ctypes.WinError": [
        "<builtin>.OSError"
    ],
    "ctypes.DllGetClassObject": [
        "<builtin>.globals",
        "<builtin>.locals",
        "<builtin>.__import__"
    ],
    "ctypes.DllCanUnloadNow": [
        "<builtin>.globals",
        "<builtin>.locals",
        "<builtin>.__import__"
    ],
    "ctypes._endian._other_endian": [
        "ctypes._endian._other_endian",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "ctypes._endian._swapped_meta.__setattr__": [
        "<builtin>.super",
        "<list>.append"
    ],
    "click.exceptions._join_param_hints": [
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "click.exceptions.ClickException.__init__": [
        "<builtin>.super"
    ],
    "click.exceptions.ClickException.show": [
        "click.exceptions.MissingParameter.format_message",
        "click.exceptions.ClickException.format_message",
        "click.utils.echo",
        "click._compat.get_text_stderr",
        "gettext.gettext",
        "click.exceptions.NoSuchOption.format_message"
    ],
    "click.exceptions.ClickException.format_message": [],
    "click.exceptions.UsageError.show": [
        "click.core.Context.get_usage",
        "click.exceptions.MissingParameter.format_message",
        "click.exceptions.BadParameter.format_message",
        "click.exceptions.ClickException.format_message",
        "click.utils.echo",
        "click._compat.get_text_stderr",
        "gettext.gettext"
    ],
    "click.core.Context.get_usage": [],
    "click._winconsole.ConsoleStream.isatty": [],
    "click.exceptions.BadParameter.format_message": [
        "click.core.Argument.get_error_hint",
        "click.exceptions._join_param_hints",
        "click.core.Parameter.get_error_hint",
        "gettext.gettext"
    ],
    "click.core.Parameter.get_error_hint": [],
    "click.exceptions.MissingParameter.format_message": [
        "click.exceptions._join_param_hints",
        "click.types.ParamType.get_missing_message",
        "click.core.Argument.get_error_hint",
        "click.core.Parameter.get_error_hint",
        "gettext.gettext"
    ],
    "click.types.ParamType.get_missing_message": [],
    "click.exceptions.MissingParameter.__str__": [
        "gettext.gettext"
    ],
    "click.exceptions.NoSuchOption.format_message": [
        "<builtin>.len",
        "gettext.ngettext",
        "<builtin>.sorted"
    ],
    "click.exceptions.FileError.__init__": [
        "<builtin>.super",
        "gettext.gettext"
    ],
    "click.exceptions.FileError.format_message": [
        "gettext.gettext"
    ],
    "click.utils._posixify": [
        "<str>.lower"
    ],
    "click.utils.LazyFile.__getattr__": [
        "click.utils.LazyFile.open",
        "<builtin>.getattr"
    ],
    "click.utils.LazyFile.open": [
        "click._compat.open_stream",
        "click.exceptions.FileError.__init__",
        "click.exceptions"
    ],
    "click.utils.LazyFile.__repr__": [
        "<builtin>.repr"
    ],
    "click.utils.LazyFile.close": [
        "click.utils.LazyFile.close",
        "click._compat._AtomicFile.close"
    ],
    "click.utils.LazyFile.close_intelligently": [
        "click.utils.LazyFile.close"
    ],
    "click.utils.LazyFile.__exit__": [
        "click.utils.LazyFile.close_intelligently"
    ],
    "click.utils.LazyFile.__iter__": [
        "<builtin>.iter",
        "click.utils.LazyFile.open"
    ],
    "click.utils.KeepOpenFile.__getattr__": [
        "<builtin>.getattr"
    ],
    "click.utils.KeepOpenFile.__repr__": [
        "<builtin>.repr"
    ],
    "click.utils.KeepOpenFile.__iter__": [
        "<builtin>.iter"
    ],
    "click.utils.get_binary_stream": [
        "<builtin>.TypeError"
    ],
    "click.utils.get_text_stream": [
        "<builtin>.TypeError"
    ],
    "click.utils.open_file": [
        "click.utils.LazyFile.__init__",
        "click._compat.open_stream",
        "click.utils.KeepOpenFile.__init__",
        "typing.cast"
    ],
    "click.utils.KeepOpenFile.__init__": [],
    "click.utils.format_filename": [
        "ntpath.basename",
        "posixpath.basename"
    ],
    "click.utils.get_app_dir": [
        "ntpath.expanduser",
        "posixpath.join",
        "ntpath.join",
        "posixpath.expanduser",
        "click.utils._posixify"
    ],
    "click.utils.PacifyFlushWrapper.__getattr__": [
        "<builtin>.getattr"
    ],
    "click.utils._detect_program_name": [
        "posixpath.splitext",
        "ntpath.splitext",
        "typing.cast",
        "<str>.lstrip",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.getattr",
        "genericpath.exists"
    ],
    "glob": [
        "re.compile",
        "fnmatch",
        "os",
        "re"
    ],
    "click.utils._expand_args": [
        "ntpath.expanduser",
        "glob",
        "<list>.extend",
        "posixpath.expandvars",
        "ntpath.expandvars",
        "<list>.append",
        "posixpath.expanduser"
    ],
    "click.utils.safecall.wrapper": [
        "<map>",
        "rich.file_proxy.FileProxy.flush",
        "click._compat._AtomicFile.close",
        "click.utils.LazyFile.close",
        "<list>"
    ],
    "typing_extensions._should_collect_from_parameters": [
        "<builtin>.isinstance"
    ],
    "typing_extensions._collect_type_vars": [
        "<builtin>.isinstance",
        "<list>.extend",
        "<builtin>.tuple",
        "<list>.append",
        "typing_extensions._is_unpack",
        "typing_extensions._should_collect_from_parameters"
    ],
    "typing_extensions._AnyMeta.__instancecheck__": [
        "<builtin>.TypeError",
        "<builtin>.super"
    ],
    "typing_extensions._AnyMeta.__repr__": [
        "<builtin>.super"
    ],
    "typing_extensions.Any.__new__": [
        "<builtin>.TypeError",
        "<builtin>.super"
    ],
    "typing_extensions._FinalForm.__getitem__": [
        "typing._GenericAlias.__init__",
        "typing._type_check"
    ],
    "typing_extensions.IntVar": [
        "typing.TypeVar.__init__"
    ],
    "typing_extensions._LiteralForm.__getitem__": [
        "typing._GenericAlias.__init__"
    ],
    "typing_extensions.overload": [
        "<builtin>.getattr"
    ],
    "typing_extensions.get_overloads": [
        "<builtin>.list",
        "<builtin>.getattr"
    ],
    "typing_extensions._get_protocol_attrs": [
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "typing_extensions._is_callable_members_only": [
        "<builtin>.callable",
        "<builtin>.all",
        "<builtin>.getattr",
        "typing_extensions._get_protocol_attrs"
    ],
    "typing_extensions._maybe_adjust_parameters": [
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "typing._collect_type_vars",
        "<builtin>.tuple",
        "<builtin>.str"
    ],
    "typing_extensions._no_init": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "typing_extensions._ProtocolMeta.__instancecheck__": [
        "<builtin>.super",
        "<builtin>.issubclass",
        "<builtin>.callable",
        "<builtin>.all",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "typing_extensions._is_callable_members_only",
        "typing_extensions._get_protocol_attrs"
    ],
    "typing_extensions.Protocol.__new__": [
        "<builtin>.TypeError",
        "<builtin>.super"
    ],
    "typing_extensions.Protocol.__init_subclass__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.any",
        "typing_extensions._maybe_adjust_parameters",
        "<builtin>.repr"
    ],
    "typing_extensions.runtime_checkable": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "typing_extensions._check_fails": [
        "<builtin>.TypeError"
    ],
    "typing_extensions._dict_new": [
        "<builtin>.dict",
        "<builtin>.TypeError"
    ],
    "typing_extensions._typeddict_new": [
        "<builtin>.dict",
        "warnings",
        "<builtin>.TypeError",
        "typing_extensions._TypedDictMeta.__init__",
        "<builtin>.len",
        "warnings.warn"
    ],
    "typing_extensions._TypedDictMeta.__new__": [
        "<builtin>.super",
        "<builtin>.set",
        "typing._type_check",
        "<builtin>.issubclass",
        "<map>.update",
        "<builtin>.any",
        "typing_extensions._maybe_adjust_parameters",
        "typing_extensions.get_origin",
        "<builtin>.frozenset",
        "<builtin>.hasattr",
        "typing_extensions.get_args"
    ],
    "typing_extensions.get_args": [
        "typing_extensions.get_origin",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "typing_extensions.is_typeddict": [
        "<builtin>.tuple",
        "<builtin>.isinstance"
    ],
    "typing_extensions._strip_extras": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "functools.reduce",
        "typing_extensions._strip_extras",
        "<builtin>.hasattr"
    ],
    "operator.or_": [],
    "typing_extensions.get_type_hints": [
        "typing_extensions._strip_extras",
        "typing.get_type_hints",
        "<builtin>.hasattr",
        "<map>.items"
    ],
    "typing_extensions._AnnotatedAlias.copy_with": [
        "typing_extensions._AnnotatedAlias.__init__",
        "<builtin>.len"
    ],
    "typing_extensions._AnnotatedAlias.__repr__": [
        "<builtin>.repr",
        "typing._type_repr"
    ],
    "typing_extensions._AnnotatedAlias.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing_extensions._AnnotatedAlias.__hash__": [
        "<builtin>.hash"
    ],
    "typing_extensions.Annotated.__new__": [
        "<builtin>.TypeError"
    ],
    "typing_extensions.Annotated.__init_subclass__": [
        "<builtin>.TypeError"
    ],
    "typing_extensions.TypeAlias": [
        "<builtin>.TypeError"
    ],
    "typing_extensions._DefaultMixin.__init__": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "typing._type_check"
    ],
    "typing_extensions.TypeVar.__init__": [
        "<builtin>.super",
        "typing_extensions._DefaultMixin.__init__"
    ],
    "typing_extensions.ParamSpecArgs.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing_extensions.ParamSpecKwargs.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing_extensions.ParamSpec.args": [
        "typing_extensions.ParamSpecArgs.__init__"
    ],
    "typing_extensions.ParamSpecArgs.__init__": [],
    "typing_extensions.ParamSpec.kwargs": [
        "typing_extensions.ParamSpecKwargs.__init__"
    ],
    "typing_extensions.ParamSpecKwargs.__init__": [],
    "typing_extensions.ParamSpec.__init__": [
        "typing_extensions._DefaultMixin.__init__",
        "<builtin>.super",
        "<builtin>.bool",
        "typing._type_check"
    ],
    "typing_extensions._ConcatenateGenericAlias.__repr__": [
        "typing._type_repr"
    ],
    "typing_extensions._ConcatenateGenericAlias.__hash__": [
        "<builtin>.hash"
    ],
    "typing_extensions._ConcatenateGenericAlias.__parameters__": [
        "<builtin>.tuple",
        "<builtin>.isinstance"
    ],
    "typing_extensions._ConcatenateForm.__getitem__": [
        "typing_extensions._concatenate_getitem"
    ],
    "typing_extensions.Concatenate": [
        "typing_extensions._concatenate_getitem"
    ],
    "typing_extensions._TypeGuardForm.__getitem__": [
        "typing._GenericAlias.__init__",
        "typing._type_check"
    ],
    "typing_extensions.TypeGuard": [
        "typing._GenericAlias.__init__",
        "typing._type_check"
    ],
    "typing_extensions._SpecialForm.__getattr__": [
        "<builtin>.AttributeError"
    ],
    "typing_extensions._SpecialForm.__mro_entries__": [
        "<builtin>.TypeError"
    ],
    "typing_extensions._SpecialForm.__call__": [
        "<builtin>.TypeError"
    ],
    "typing_extensions._SpecialForm.__instancecheck__": [
        "<builtin>.TypeError"
    ],
    "typing_extensions._SpecialForm.__subclasscheck__": [
        "<builtin>.TypeError"
    ],
    "typing_extensions._RequiredForm.__getitem__": [
        "typing._GenericAlias.__init__",
        "typing._type_check"
    ],
    "typing_extensions.Required": [
        "typing._GenericAlias.__init__",
        "typing._type_check"
    ],
    "typing_extensions.NotRequired": [
        "typing._GenericAlias.__init__",
        "typing._type_check"
    ],
    "typing_extensions._UnpackForm.__getitem__": [
        "typing._type_check"
    ],
    "typing_extensions.Unpack": [
        "typing._type_check"
    ],
    "typing_extensions.TypeVarTuple.__init__": [
        "typing_extensions._DefaultMixin.__init__"
    ],
    "typing_extensions.TypeVarTuple.__init_subclass__": [
        "<builtin>.TypeError"
    ],
    "typing_extensions.reveal_type": [
        "<builtin>.print",
        "<builtin>.type"
    ],
    "typing_extensions.assert_never": [
        "<builtin>.AssertionError"
    ],
    "typing_extensions._make_nmtuple": [
        "collections.namedtuple",
        "typing._type_check"
    ],
    "typing_extensions._NamedTupleMeta.__new__": [
        "typing_extensions._make_nmtuple",
        "<builtin>.len",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.classmethod",
        "<builtin>.AttributeError",
        "<builtin>.setattr",
        "<list>.append"
    ],
    "typing_extensions.NamedTuple": [
        "<builtin>.TypeError",
        "typing_extensions._caller",
        "typing_extensions._make_nmtuple"
    ],
    "typing_extensions._caller": [],
    "click.shell_completion.ShellComplete.func_name": [
        "re.sub"
    ],
    "click.shell_completion.ShellComplete.source": [
        "click.shell_completion.ShellComplete.source_vars"
    ],
    "click.shell_completion.ShellComplete.source_vars": [],
    "click.shell_completion.ShellComplete.get_completions": [
        "click.shell_completion._resolve_incomplete",
        "click.shell_completion._resolve_context"
    ],
    "click.shell_completion._resolve_context": [
        "<builtin>.isinstance",
        "<list>.copy"
    ],
    "click.shell_completion._resolve_incomplete": [
        "click.shell_completion._is_incomplete_option",
        "<str>.partition",
        "click.shell_completion._is_incomplete_argument",
        "click.shell_completion._start_of_option"
    ],
    "click.shell_completion._start_of_option": [],
    "click.shell_completion._is_incomplete_option": [
        "<builtin>.enumerate",
        "<builtin>.reversed",
        "click.shell_completion._start_of_option",
        "<builtin>.isinstance"
    ],
    "click.shell_completion._is_incomplete_argument": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "click.shell_completion.ShellComplete.complete": [
        "click.shell_completion.ShellComplete.get_completion_args",
        "click.shell_completion.ShellComplete.get_completions",
        "click.shell_completion.ShellComplete.format_completion"
    ],
    "click.shell_completion.ShellComplete.get_completion_args": [],
    "click.shell_completion.ShellComplete.format_completion": [],
    "click.shell_completion.BashComplete._check_version": [
        "subprocess.run",
        "subprocess",
        "gettext.gettext",
        "re.search",
        "<builtin>.RuntimeError"
    ],
    "click.shell_completion.BashComplete.source": [
        "<builtin>.super",
        "click.shell_completion.BashComplete._check_version"
    ],
    "click.shell_completion.BashComplete.get_completion_args": [
        "click.parser.split_arg_string",
        "<builtin>.int"
    ],
    "click.parser.split_arg_string": [
        "shlex.shlex.__iter__",
        "shlex.shlex.__init__",
        "<list>.append",
        "shlex",
        "shlex.shlex.__next__"
    ],
    "shlex.shlex.__iter__": [],
    "shlex.shlex.__next__": [
        "shlex.shlex.get_token"
    ],
    "click.shell_completion.ZshComplete.get_completion_args": [
        "click.parser.split_arg_string",
        "<builtin>.int"
    ],
    "click.shell_completion.FishComplete.get_completion_args": [
        "click.parser.split_arg_string"
    ],
    "<list>.copy": [],
    "click.parser.Option.__init__": [
        "<builtin>.set",
        "<builtin>.len",
        "click.parser.split_opt",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "click.parser.Option.process": [
        "<builtin>.ValueError"
    ],
    "click.parser.Argument.process": [
        "<builtin>.sum",
        "click.exceptions.UsageError.__init__",
        "gettext.gettext",
        "<builtin>.len"
    ],
    "click.parser.OptionParser.add_option": [
        "click.parser.normalize_opt",
        "click.parser.Option.__init__"
    ],
    "click.parser.OptionParser.add_argument": [
        "click.parser.Argument.__init__"
    ],
    "click.parser.Argument.__init__": [],
    "click.formatting.measure_table": [
        "click._compat.term_len",
        "<builtin>.enumerate",
        "<builtin>.sorted",
        "<builtin>.tuple",
        "<builtin>.max"
    ],
    "click.formatting.iter_rows": [
        "<builtin>.len"
    ],
    "click._textwrap": [
        "typing",
        "textwrap",
        "contextlib",
        "click._textwrap.TextWrapper"
    ],
    "click.formatting.wrap_text": [
        "textwrap.TextWrapper.fill",
        "click.formatting.wrap_text._flush_par",
        "click._compat.term_len",
        "<str>.expandtabs",
        "click._textwrap.TextWrapper.extra_indent",
        "click._textwrap",
        "<str>.splitlines"
    ],
    "click._textwrap.TextWrapper": [
        "contextlib.contextmanager"
    ],
    "click.formatting.wrap_text._flush_par": [],
    "click._textwrap.TextWrapper.extra_indent": [],
    "click.formatting.HelpFormatter.__init__": [
        "<builtin>.max",
        "<builtin>.min",
        "shutil",
        "shutil.get_terminal_size"
    ],
    "click.formatting.HelpFormatter.write_usage": [
        "click._compat.term_len",
        "click.formatting.wrap_text",
        "gettext.gettext",
        "<builtin>.max",
        "click.formatting.HelpFormatter.write"
    ],
    "click.formatting.HelpFormatter.write": [],
    "click.formatting.HelpFormatter.write_heading": [
        "click.formatting.HelpFormatter.write"
    ],
    "click.formatting.HelpFormatter.write_paragraph": [
        "click.formatting.HelpFormatter.write"
    ],
    "click.formatting.HelpFormatter.write_text": [
        "click.formatting.HelpFormatter.write",
        "click.formatting.wrap_text"
    ],
    "click.formatting.HelpFormatter.write_dl": [
        "<builtin>.list",
        "<builtin>.max",
        "<builtin>.TypeError",
        "click._compat.term_len",
        "click.formatting.wrap_text",
        "click.formatting.measure_table",
        "<str>.splitlines",
        "click.formatting.iter_rows",
        "<builtin>.len",
        "<builtin>.min",
        "click.formatting.HelpFormatter.write"
    ],
    "click.formatting.HelpFormatter.section": [
        "click.formatting.HelpFormatter.write_paragraph",
        "click.formatting.HelpFormatter.write_heading",
        "click.formatting.HelpFormatter.indent"
    ],
    "click.formatting.HelpFormatter.indent": [],
    "click.formatting.HelpFormatter.indentation": [
        "click.formatting.HelpFormatter.indent"
    ],
    "click.formatting.join_options": [
        "click.parser.split_opt",
        "<list>.sort",
        "<list>.append"
    ],
    "click.termui.hidden_prompt_func": [
        "getpass.fallback_getpass",
        "getpass"
    ],
    "getpass.fallback_getpass": [
        "<builtin>.print",
        "warnings.warn",
        "getpass._raw_input"
    ],
    "getpass._raw_input": [
        "codecs.StreamRecoder.write",
        "rich.file_proxy.FileProxy.flush",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.str",
        "rich.file_proxy.FileProxy.write",
        "codecs.StreamRecoder.readline"
    ],
    "click.termui.prompt": [
        "click.types.convert_type",
        "click.types.Tuple.__init__",
        "click.utils.echo",
        "gettext.gettext",
        "click.termui._build_prompt",
        "click.termui.prompt.prompt_func",
        "click.types.FuncParamType.__init__"
    ],
    "click.termui.prompt.prompt_func": [
        "<str>.rstrip",
        "click.utils.echo"
    ],
    "click.termui.echo_via_pager": [
        "charset_normalizer.utils.is_unicode_range_secondary",
        "rich.json.JSON.__init__",
        "charset_normalizer.utils.is_separator",
        "rich.markdown.Markdown.__init__",
        "textual.widgets._directory_tree.DirectoryTree.render_tree_label",
        "charset_normalizer.utils.unicode_range",
        "rich.constrain.Constrain.__init__",
        "rich.panel.Panel._subtitle",
        "charset_normalizer.utils.is_thai",
        "importlib_metadata.FastPath.__new__",
        "charset_normalizer.utils.remove_accent",
        "rich.style.Style.get_html_style",
        "fnmatch._compile_pattern",
        "rich.cells.get_character_cell_size",
        "textual.widgets._button.ButtonRenderable.__init__",
        "typing_extensions._concatenate_getitem",
        "pathlib._make_selector",
        "charset_normalizer.utils.is_ascii",
        "click._compat._FixupStream.__init__",
        "charset_normalizer.md.is_suspiciously_successive_range",
        "charset_normalizer.utils.is_katakana",
        "click.decorators.pass_context.new_func",
        "ipaddress.IPv6Address.is_private",
        "rich.console.Group.__init__",
        "<builtin>.isinstance",
        "charset_normalizer.cd.encoding_languages",
        "rich.color.Color.get_ansi_codes",
        "click.core.MultiCommand.result_callback.decorator.function",
        "<builtin>.str",
        "typing._GenericAlias.__getitem__",
        "textual.scrollbar.ScrollBarRender.__init__",
        "<builtin>.iter",
        "ipaddress.IPv4Network.is_global",
        "charset_normalizer.utils.is_hiragana",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "rich.table.Table.__init__",
        "rich.columns.Columns.__init__",
        "charset_normalizer.cd.get_target_features",
        "rich.style.Style._add",
        "charset_normalizer.utils.is_cjk",
        "rich.cells.cached_cell_len",
        "rich_rst.RestructuredText.__init__",
        "typing_extensions.Annotated.__class_getitem__",
        "rich_cli.__main__.ForceWidth.__init__",
        "<map>",
        "typing.cast",
        "rich.styled.Styled.__init__",
        "pygments.formatters.html.HtmlFormatter._translate_parts",
        "typing.Generic.__class_getitem__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "rich.color.Color.downgrade",
        "charset_normalizer.utils.is_accentuated",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.style.Style.parse",
        "click._compat._AtomicFile.__init__",
        "textual.widgets._tree_control.TreeControl.__init__",
        "<list>",
        "charset_normalizer.cd.coherence_ratio",
        "charset_normalizer.utils.is_symbol",
        "textual._callback.count_parameters",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "ipaddress.IPv4Address.is_global",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "inspect.isgeneratorfunction",
        "charset_normalizer.utils.is_multi_byte_encoding",
        "codecs.StreamRecoder.__init__",
        "rich.color.Color.parse",
        "click._termui_impl",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "charset_normalizer.utils.is_emoticon",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__",
        "ipaddress.IPv4Address.is_private",
        "click.globals.resolve_color_default",
        "rich.style.Style.normalize",
        "charset_normalizer.md.mess_ratio",
        "click.utils.KeepOpenFile.__init__",
        "click._termui_impl.pager",
        "rich.cells._get_codepoint_cell_size",
        "charset_normalizer.utils.is_case_variable",
        "rich.console.ScreenUpdate.__init__",
        "typing_extensions.Protocol.__class_getitem__",
        "typing_extensions._SpecialForm.__getitem__",
        "rich.segment.Segments.__init__",
        "rich.tree.Tree.__init__",
        "rich.palette.Palette.match",
        "charset_normalizer.utils.is_hangul",
        "rich.pretty.Pretty.__init__",
        "rich._inspect.Inspect.__init__",
        "charset_normalizer.utils.is_latin",
        "charset_normalizer.utils.is_punctuation",
        "click.decorators.pass_obj.new_func",
        "charset_normalizer.utils.is_unprintable",
        "charset_normalizer.cd.mb_encoding_languages",
        "typing._SpecialForm.__getitem__",
        "click.utils.LazyFile.__init__",
        "rich.segment.Segment._split_cells"
    ],
    "click._termui_impl.pager": [
        "click._termui_impl._pipepager",
        "click._compat.isatty",
        "tempfile",
        "click._termui_impl._tempfilepager",
        "tempfile.mkstemp",
        "click._compat._make_cached_stream_func.func",
        "click._termui_impl._nullpager",
        "<builtin>.hasattr"
    ],
    "click._termui_impl._nullpager": [
        "codecs.StreamRecoder.write",
        "click._compat.strip_ansi",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "click._termui_impl._tempfilepager": [
        "click._compat.get_best_encoding",
        "tempfile",
        "click._compat.strip_ansi",
        "tempfile.mkstemp",
        "click._compat.open_stream"
    ],
    "click._termui_impl._pipepager": [
        "<builtin>.dict",
        "click._compat.get_best_encoding",
        "codecs.StreamRecoder.write",
        "typing.cast",
        "click._compat.strip_ansi",
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "subprocess",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<str>.rsplit"
    ],
    "<str>.rsplit": [],
    "click.termui.progressbar": [
        "click.globals.resolve_color_default",
        "click._termui_impl",
        "click._termui_impl.ProgressBar.__init__"
    ],
    "click._termui_impl.ProgressBar.__init__": [
        "operator.length_hint",
        "click._compat.isatty",
        "typing.cast",
        "<builtin>.TypeError",
        "<builtin>.iter",
        "click._compat._make_cached_stream_func.func",
        "operator",
        "<builtin>.range"
    ],
    "click.termui.clear": [
        "codecs.StreamRecoder.write",
        "click._compat.isatty",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "click.termui._interpret_color": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "click.termui.unstyle": [
        "click._compat.strip_ansi"
    ],
    "click.termui.secho": [
        "click.termui.style",
        "<builtin>.isinstance",
        "click.utils.echo"
    ],
    "click.termui.edit": [
        "click._termui_impl.Editor.__init__",
        "click._termui_impl.Editor.edit_file",
        "click._termui_impl",
        "click._termui_impl.Editor.edit"
    ],
    "click._termui_impl.Editor.__init__": [],
    "click._termui_impl.Editor.edit": [
        "<builtin>.isinstance",
        "tempfile",
        "tempfile.mkstemp",
        "genericpath.getatime",
        "<builtin>.open",
        "genericpath.getmtime",
        "click._termui_impl.Editor.edit_file",
        "os.fdopen"
    ],
    "genericpath.getatime": [],
    "genericpath.getmtime": [],
    "click._termui_impl.Editor.edit_file": [
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__",
        "click.exceptions.ClickException.__init__",
        "subprocess",
        "click._termui_impl.Editor.get_editor",
        "gettext.gettext",
        "os._Environ.copy"
    ],
    "click._termui_impl.Editor.get_editor": [],
    "click.termui.launch": [
        "click._termui_impl.open_url",
        "click._termui_impl"
    ],
    "click._termui_impl.open_url": [
        "webbrowser.open",
        "<str>.replace",
        "webbrowser",
        "click._termui_impl.open_url._unquote_file",
        "posixpath.dirname",
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__",
        "<str>.startswith",
        "subprocess",
        "<builtin>.open",
        "<list>.append",
        "ntpath.dirname"
    ],
    "click._termui_impl.open_url._unquote_file": [
        "urllib.parse.unquote",
        "urllib.parse",
        "<str>.startswith"
    ],
    "urllib.parse.unquote": [
        "<builtin>.range",
        "<list>",
        "<builtin>.len"
    ],
    "click.termui.getchar": [
        "click._termui_impl",
        "click._termui_impl.getchar"
    ],
    "click._termui_impl.getchar": [
        "click._compat.get_best_encoding",
        "codecs.StreamRecoder.write",
        "click._compat.isatty",
        "click._termui_impl.raw_terminal",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._termui_impl._translate_ch_to_exc",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "click._termui_impl.raw_terminal": [
        "tty.setraw",
        "<builtin>.open",
        "click._compat.isatty"
    ],
    "click._termui_impl._translate_ch_to_exc": [
        "<builtin>.KeyboardInterrupt",
        "<builtin>.EOFError"
    ],
    "<builtin>.KeyboardInterrupt": [],
    "click.termui.raw_terminal": [
        "click._termui_impl.raw_terminal",
        "click._termui_impl"
    ],
    "click.termui.pause": [
        "click.termui.getchar",
        "gettext.gettext",
        "click.utils.echo",
        "click._compat.isatty"
    ],
    "click._termui_impl.ProgressBar.__enter__": [
        "click._termui_impl.ProgressBar.render_progress"
    ],
    "click._termui_impl.ProgressBar.render_progress": [
        "shutil",
        "shutil.get_terminal_size",
        "click._termui_impl.ProgressBar.format_progress_line",
        "click._compat.term_len",
        "rich.file_proxy.FileProxy.flush",
        "click.utils.echo",
        "<list>.append",
        "<builtin>.max"
    ],
    "click._termui_impl.ProgressBar.format_progress_line": [
        "click._termui_impl.ProgressBar.format_bar",
        "<str>.rstrip",
        "<list>.append"
    ],
    "click._termui_impl.ProgressBar.format_bar": [
        "<builtin>.list",
        "<builtin>.int"
    ],
    "click._termui_impl.ProgressBar.__exit__": [
        "click._termui_impl.ProgressBar.render_finish"
    ],
    "click._termui_impl.ProgressBar.render_finish": [
        "codecs.StreamRecoder.write",
        "rich.file_proxy.FileProxy.flush",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "click._termui_impl.ProgressBar.__iter__": [
        "click._termui_impl.ProgressBar.generator",
        "click._termui_impl.ProgressBar.render_progress",
        "<builtin>.RuntimeError"
    ],
    "click._termui_impl.ProgressBar.generator": [
        "click._termui_impl.ProgressBar.finish",
        "click._termui_impl.ProgressBar.update",
        "click._termui_impl.ProgressBar.render_progress",
        "<builtin>.RuntimeError"
    ],
    "click._termui_impl.ProgressBar.update": [
        "click._termui_impl.ProgressBar.make_step",
        "click._termui_impl.ProgressBar.render_progress"
    ],
    "click._termui_impl.ProgressBar.make_step": [],
    "click._termui_impl.ProgressBar.finish": [],
    "click._termui_impl.ProgressBar.__next__": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "click._termui_impl.ProgressBar.pct": [
        "<builtin>.min",
        "<builtin>.float"
    ],
    "click._termui_impl.ProgressBar.time_per_iteration": [
        "<builtin>.sum",
        "<builtin>.float",
        "<builtin>.len"
    ],
    "click._termui_impl.ProgressBar.format_eta": [
        "<builtin>.int"
    ],
    "click._termui_impl.ProgressBar.format_pos": [
        "<builtin>.str"
    ],
    "click._termui_impl.ProgressBar.format_pct": [
        "<builtin>.int"
    ],
    "click.decorators.pass_context": [
        "typing.cast",
        "functools.update_wrapper"
    ],
    "click.decorators.pass_obj": [
        "typing.cast",
        "functools.update_wrapper"
    ],
    "click.decorators.confirmation_option": [
        "click.decorators.option"
    ],
    "click.decorators.password_option": [
        "click.decorators.option"
    ],
    "click.decorators.version_option": [
        "click.decorators.option",
        "inspect.currentframe",
        "gettext.gettext"
    ],
    "click.decorators.help_option": [
        "click.decorators.option",
        "gettext.gettext"
    ],
    "pygments.util.get_choice_opt": [
        "<builtin>.map"
    ],
    "pygments.util.get_bool_opt": [
        "<builtin>.bool",
        "<builtin>.isinstance"
    ],
    "pygments.util.get_int_opt": [
        "<builtin>.int"
    ],
    "pygments.util.get_list_opt": [
        "<builtin>.list",
        "<builtin>.isinstance"
    ],
    "pygments.util.docstring_headline": [
        "<str>.lstrip",
        "<list>.append"
    ],
    "pygments.util.make_analysator": [
        "<builtin>.staticmethod"
    ],
    "pygments.util.shebang_matches": [
        "re.compile"
    ],
    "pygments.util.doctype_matches": [
        "re.compile",
        "<str>.strip",
        "pathlib.PurePath.match"
    ],
    "pygments.util.html_doctype_matches": [
        "pygments.util.doctype_matches"
    ],
    "pygments.util.looks_like_xml": [
        "<builtin>.hash",
        "pathlib.PurePath.match"
    ],
    "pygments.util.format_lines": [
        "<builtin>.repr",
        "<list>.append"
    ],
    "pygments.util.duplicates_removed": [
        "<builtin>.set",
        "<list>.append"
    ],
    "pygments.util.guess_decode": [
        "locale",
        "locale.getpreferredencoding"
    ],
    "pygments.util.guess_decode_from_terminal": [
        "<builtin>.getattr",
        "pygments.util.guess_decode"
    ],
    "pygments.util.terminal_encoding": [
        "locale",
        "<builtin>.getattr",
        "locale.getpreferredencoding"
    ],
    "rich.console.ConsoleOptions.update": [
        "<builtin>.max",
        "rich.console.ConsoleOptions.copy",
        "<builtin>.isinstance"
    ],
    "rich.console.ConsoleOptions.copy": [],
    "rich.console.ConsoleOptions.update_width": [
        "<builtin>.max",
        "rich.console.ConsoleOptions.copy"
    ],
    "rich.console.ConsoleOptions.update_height": [
        "rich.console.ConsoleOptions.copy"
    ],
    "rich.console.ConsoleOptions.reset_height": [
        "rich.console.ConsoleOptions.copy"
    ],
    "rich.console.ConsoleOptions.update_dimensions": [
        "<builtin>.max",
        "rich.console.ConsoleOptions.copy"
    ],
    "rich.console.ScreenUpdate.__rich_console__": [
        "rich.control.Control.move_to",
        "<builtin>.enumerate"
    ],
    "rich.control.Control.move_to": [
        "rich.control.Control.__init__"
    ],
    "rich.control.Control.__init__": [
        "<builtin>.isinstance"
    ],
    "rich.console.ScreenContext.__init__": [
        "rich.screen.Screen.__init__"
    ],
    "rich.screen.Screen.__init__": [
        "rich.console.Group.__init__",
        "rich.console"
    ],
    "rich.console.ScreenContext.update": [
        "rich.console.Console.print",
        "rich.console.Group.__init__",
        "<builtin>.len"
    ],
    "rich.console.Group.renderables": [
        "<builtin>.list"
    ],
    "rich.console.Group.__rich_measure__": [
        "rich.measure.measure_renderables"
    ],
    "rich.measure.measure_renderables": [
        "<builtin>.max",
        "rich.measure.Measurement.get",
        "operator.itemgetter.__init__"
    ],
    "rich.measure.Measurement.get": [
        "rich.protocol.is_renderable",
        "<builtin>.isinstance",
        "rich.console.Console.render_str",
        "rich.protocol.rich_cast",
        "<builtin>.getattr"
    ],
    "rich.protocol.rich_cast": [
        "<builtin>.set",
        "rich.console",
        "inspect.isclass",
        "typing.cast",
        "<builtin>.getattr",
        "<builtin>.type",
        "<builtin>.repr",
        "<builtin>.hasattr"
    ],
    "rich.console.Console.__repr__": [
        "<builtin>.str"
    ],
    "rich.console.Console.file": [
        "<builtin>.getattr"
    ],
    "rich.console.Console._exit_buffer": [
        "rich.console.Console._check_buffer"
    ],
    "rich.console.Console._check_buffer": [],
    "rich.console.Console.__enter__": [
        "rich.console.Console._enter_buffer"
    ],
    "rich.console.Console._enter_buffer": [],
    "rich.console.Console.__exit__": [
        "rich.console.Console._exit_buffer"
    ],
    "rich.console.Console.begin_capture": [
        "rich.console.Console._enter_buffer"
    ],
    "rich.console.Console.end_capture": [
        "rich.console.Console._render_buffer",
        "rich.console.Console._exit_buffer"
    ],
    "rich.console.Console._render_buffer": [
        "rich.style.Style.render",
        "rich.segment.Segment.remove_color"
    ],
    "rich.segment.Segment.remove_color": [],
    "rich.console.Console.use_theme": [
        "rich.console.ThemeContext.__init__"
    ],
    "rich.console.ThemeContext.__init__": [],
    "rich.console.Console.encoding": [
        "<builtin>.getattr"
    ],
    "rich.console.Console.is_terminal": [
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "rich.console.Console.size": [
        "<builtin>.int"
    ],
    "rich.console.Console.bell": [
        "rich.control.Control.bell",
        "rich.console.Console.control"
    ],
    "rich.control.Control.bell": [
        "rich.control.Control.__init__"
    ],
    "rich.console.Console.control": [],
    "rich.console.Console.capture": [
        "rich.console.Capture.__init__"
    ],
    "rich.console.Capture.__init__": [],
    "rich.console.Console.pager": [
        "rich.console.PagerContext.__init__"
    ],
    "rich.console.PagerContext.__init__": [],
    "rich.console.Console.line": [
        "rich.console.NewLine.__init__",
        "rich.console.Console.print"
    ],
    "rich.console.Console.clear": [
        "rich.control.Control.home",
        "rich.control.Control.clear",
        "rich.console.Console.control"
    ],
    "rich.control.Control.clear": [
        "rich.control.Control.__init__"
    ],
    "rich.control.Control.home": [
        "rich.control.Control.__init__"
    ],
    "rich.console.Console.status": [
        "rich.status",
        "rich.status.Status.__init__"
    ],
    "rich.status.Status.__init__": [
        "rich.spinner.Spinner.__init__",
        "rich.live.Live.__init__"
    ],
    "rich.console.Console.show_cursor": [
        "rich.control.Control.show_cursor",
        "rich.console.Console.control"
    ],
    "rich.control.Control.show_cursor": [
        "rich.control.Control.__init__"
    ],
    "rich.console.Console.set_alt_screen": [
        "rich.control.Control.alt_screen",
        "rich.console.Console.control"
    ],
    "rich.control.Control.alt_screen": [
        "rich.control.Control.__init__"
    ],
    "rich.console.Console.set_window_title": [
        "rich.control.Control.title",
        "rich.console.Console.control"
    ],
    "rich.control.Control.title": [
        "rich.control.Control.__init__"
    ],
    "rich.console.Console.screen": [
        "rich.console.ScreenContext.__init__"
    ],
    "rich.console.Console.measure": [
        "rich.measure.Measurement.get"
    ],
    "rich.console.Console.render_str": [
        "rich.markup.render",
        "rich.text.Text.__init__",
        "rich._emoji_replace._emoji_replace",
        "<builtin>.str"
    ],
    "rich.console.Console.render": [
        "rich.syntax.Syntax.__rich_console__",
        "rich.padding.Padding.__rich_console__",
        "<builtin>.isinstance",
        "rich.console.Console.render_str",
        "rich_rst.RestructuredText.__rich_console__",
        "textual.scrollbar.ScrollBarRender.__rich_console__",
        "rich.columns.Columns.__rich_console__",
        "<builtin>.iter",
        "rich.styled.Styled.__rich_console__",
        "rich.console.Console.render",
        "rich.pretty.Pretty.__rich_console__",
        "rich.segment.Segments.__rich_console__",
        "rich.align.Align.__rich_console__",
        "inspect.isclass",
        "rich.console.Group.__rich_console__",
        "textual.widgets._button.ButtonRenderable.__rich_console__",
        "rich.console.ScreenUpdate.__rich_console__",
        "rich.table.Table.__rich_console__",
        "rich_cli.__main__.ForceWidth.__rich_console__",
        "rich.markdown.Markdown.__rich_console__",
        "rich.constrain.Constrain.__rich_console__",
        "rich.rule.Rule.__rich_console__",
        "rich.protocol.rich_cast",
        "rich.panel.Panel.__rich_console__",
        "rich.tree.Tree.__rich_console__",
        "rich.text.Text.__rich_console__",
        "<builtin>.hasattr"
    ],
    "rich.text.Text.__rich_console__": [
        "rich.text.Text.wrap",
        "rich.text.Text.join",
        "rich.text.Text.__init__",
        "rich._pick.pick_bool",
        "rich.text.Text.render"
    ],
    "rich._pick.pick_bool": [
        "<builtin>.bool"
    ],
    "rich.text.Text.wrap": [
        "rich.text.Text.split",
        "rich.containers.Lines.__iter__",
        "rich.containers.Lines.__init__",
        "rich._wrap.divide_line",
        "rich.containers.Lines.justify",
        "rich.containers.Lines.extend",
        "<builtin>.str",
        "rich._pick.pick_bool"
    ],
    "rich.containers.Lines.__init__": [
        "<builtin>.list"
    ],
    "rich.text.Text.split": [
        "rich.containers.Lines.__init__",
        "rich.containers.Lines.pop",
        "re.escape",
        "rich.text.Text.divide",
        "rich.text.Text.split.flatten_spans",
        "re.finditer"
    ],
    "rich.text.Text.split.flatten_spans": [
        "re.escape",
        "re.finditer"
    ],
    "rich.text.Text.divide": [
        "<builtin>.list",
        "rich.containers.Lines.__init__",
        "<builtin>.zip",
        "<builtin>.min",
        "rich.text.Text.__init__",
        "<builtin>.len",
        "<builtin>.max",
        "<builtin>.range"
    ],
    "rich.containers.Lines.pop": [],
    "rich.containers.Lines.__iter__": [
        "<builtin>.iter"
    ],
    "rich._wrap.divide_line": [
        "rich._loop.loop_last",
        "rich.cells.chop_cells",
        "rich._wrap.words",
        "rich.cells.cell_len",
        "<builtin>.len"
    ],
    "rich._wrap.words": [
        "pathlib.PurePath.match"
    ],
    "rich.containers.Lines.justify": [
        "<builtin>.sum",
        "rich.text.Text.join",
        "rich.text",
        "<builtin>.enumerate",
        "itertools.zip_longest",
        "rich.cells.cell_len",
        "rich.text.Text.__init__",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "itertools.zip_longest": [],
    "rich.containers.Lines.extend": [],
    "rich.text.Text.render": [
        "rich.style.Style.null",
        "<builtin>.list",
        "<builtin>.zip",
        "<builtin>.enumerate",
        "rich.text.Text.render.get_current_style",
        "<list>.sort"
    ],
    "rich.text.Text.render.get_current_style": [
        "<builtin>.tuple",
        "rich.style.Style.combine",
        "<builtin>.sorted"
    ],
    "rich.style.Style.combine": [
        "<builtin>.iter",
        "<builtin>.sum",
        "<builtin>.next"
    ],
    "rich.console.Console.get_style": [
        "rich.console.Console.get_style",
        "rich.style.Style.parse",
        "rich.style.Style.copy",
        "<builtin>.isinstance"
    ],
    "rich.style.Style.copy": [
        "random.Random.randint"
    ],
    "rich.console.Console._collect_renderables": [
        "rich.pretty.is_expandable",
        "rich.pretty.Pretty.__init__",
        "<builtin>.isinstance",
        "rich.console.Console.render_str",
        "rich.console.Console._collect_renderables.check_text",
        "rich.console.Console._collect_renderables.align_append",
        "rich.protocol.rich_cast",
        "rich.styled.Styled.__init__",
        "<builtin>.str",
        "rich.console.Console.get_style"
    ],
    "rich.pretty.is_expandable": [
        "rich.pretty._is_attr_object",
        "inspect.isclass",
        "rich.pretty._safe_isinstance",
        "dataclasses.is_dataclass",
        "<builtin>.hasattr"
    ],
    "rich.console.Console._collect_renderables.check_text": [
        "rich.text.Text.join",
        "rich.text.Text.__init__",
        "rich.console.Console._collect_renderables.align_append"
    ],
    "rich.console.Console._collect_renderables.align_append": [
        "typing.cast",
        "rich.align.Align.__init__"
    ],
    "rich.console.Console.rule": [
        "rich.console.Console.print",
        "rich.rule",
        "rich.rule.Rule.__init__"
    ],
    "rich.console.Console.out": [
        "rich.console.Console.print",
        "<builtin>.str"
    ],
    "rich.console.Console.print_json": [
        "<builtin>.isinstance",
        "rich.json.JSON.__init__",
        "rich.json.JSON.from_data",
        "<builtin>.TypeError",
        "rich.json",
        "rich.console.Console.print"
    ],
    "rich.json.JSON.from_data": [
        "json.dumps"
    ],
    "rich.console.Console.update_screen": [
        "rich.console.Console.update_screen_lines",
        "rich.console.Console.render_lines"
    ],
    "rich.console.Console.update_screen_lines": [
        "rich.console.Console._check_buffer",
        "rich.console.Console.render",
        "rich.console.ScreenUpdate.__init__"
    ],
    "rich.console.ScreenUpdate.__init__": [],
    "rich.console.Console._caller_frame_info": [
        "inspect.stack",
        "inspect.currentframe"
    ],
    "rich.console.Console.log": [
        "rich.console.NewLine.__init__"
    ],
    "rich.console.Console.input": [
        "<builtin>.input",
        "rich.console.Console.print",
        "getpass"
    ],
    "rich.console.Console.save_text": [
        "rich.console.Console.export_text",
        "<builtin>.open"
    ],
    "rich.console.Console.export_text": [],
    "rich.console._svg_hash": [
        "<builtin>.str"
    ],
    "rich.console.group.decorator._replace": [
        "rich.console.Group.__init__",
        "rich.traceback.Traceback._render_syntax_error",
        "rich.traceback.Traceback._render_stack"
    ],
    "rich.traceback.Traceback._render_syntax_error": [
        "rich.text.Text.from_markup",
        "<builtin>.str",
        "rich.text.Text.assemble",
        "<builtin>.len",
        "<builtin>.min"
    ],
    "rich.traceback.Traceback._render_stack": [
        "rich.traceback.Traceback._render_stack.read_code",
        "rich.traceback.Traceback._render_stack.render_locals",
        "<builtin>.str",
        "<builtin>.enumerate",
        "rich.text.Text.assemble",
        "rich.syntax.Syntax.__init__",
        "<builtin>.any",
        "rich.text.Text.__init__",
        "<builtin>.len",
        "<builtin>.range",
        "rich.traceback.Traceback._guess_lexer"
    ],
    "rich.traceback.Traceback._render_stack.render_locals": [
        "rich.scope.render_scope"
    ],
    "rich.traceback.Traceback._render_stack.read_code": [
        "<builtin>.open"
    ],
    "rich.traceback.Traceback._guess_lexer": [
        "pygments.lexers.guess_lexer_for_filename",
        "posixpath.splitext",
        "<map>.get",
        "ntpath.splitext"
    ],
    "platform.win32_is_iot": [
        "platform.win32_edition"
    ],
    "platform.win32_edition": [],
    "platform.node": [
        "platform.uname"
    ],
    "platform.release": [
        "platform.uname"
    ],
    "platform.version": [
        "platform.uname"
    ],
    "platform.machine": [
        "platform.uname"
    ],
    "platform.processor": [
        "platform.uname"
    ],
    "platform.python_version": [
        "platform._sys_version"
    ],
    "platform.python_version_tuple": [
        "platform._sys_version",
        "<builtin>.tuple"
    ],
    "platform.python_branch": [
        "platform._sys_version"
    ],
    "platform.python_revision": [
        "platform._sys_version"
    ],
    "platform.python_build": [
        "platform._sys_version"
    ],
    "platform.python_compiler": [
        "platform._sys_version"
    ],
    "plistlib.writePlist": [
        "plistlib._maybe_open",
        "plistlib.dump",
        "warnings.warn"
    ],
    "plistlib.dump": [
        "<builtin>.ValueError"
    ],
    "plistlib.readPlistFromBytes": [
        "plistlib.load",
        "_io.BytesIO",
        "warnings.warn"
    ],
    "plistlib.writePlistToBytes": [
        "_io.BytesIO",
        "plistlib.dump",
        "warnings.warn"
    ],
    "plistlib.Data.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "plistlib.Data.fromBase64": [
        "plistlib.Data.__init__",
        "plistlib._decode_base64"
    ],
    "plistlib._decode_base64": [
        "<builtin>.isinstance"
    ],
    "plistlib.Data.asBase64": [
        "plistlib._encode_base64"
    ],
    "plistlib._encode_base64": [
        "<list>.append",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "plistlib.Data.__eq__": [
        "<builtin>.isinstance"
    ],
    "plistlib.Data.__repr__": [
        "<builtin>.repr"
    ],
    "plistlib.UID.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "plistlib.UID.__repr__": [
        "<builtin>.repr"
    ],
    "plistlib.UID.__eq__": [
        "<builtin>.isinstance"
    ],
    "plistlib.UID.__hash__": [
        "<builtin>.hash"
    ],
    "plistlib._date_from_string": [
        "pathlib.PurePath.match",
        "<list>.append"
    ],
    "plistlib._escape": [
        "<str>.replace",
        "<builtin>.ValueError"
    ],
    "plistlib._PlistParser.handle_begin_element": [
        "<builtin>.getattr"
    ],
    "plistlib._PlistParser.handle_end_element": [
        "<builtin>.getattr"
    ],
    "plistlib._PlistParser.handle_data": [
        "<list>.append"
    ],
    "plistlib._PlistParser.add_object": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "plistlib._PlistParser.begin_dict": [
        "plistlib._PlistParser.add_object",
        "<list>.append"
    ],
    "plistlib._PlistParser.end_dict": [
        "<list>.pop",
        "<builtin>.ValueError"
    ],
    "plistlib._PlistParser.end_key": [
        "plistlib._PlistParser.get_data",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "plistlib._PlistParser.get_data": [],
    "plistlib._PlistParser.begin_array": [
        "plistlib._PlistParser.add_object",
        "<list>.append"
    ],
    "plistlib._PlistParser.end_array": [
        "<list>.pop"
    ],
    "plistlib._PlistParser.end_true": [
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_false": [
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_integer": [
        "plistlib._PlistParser.get_data",
        "plistlib._PlistParser.add_object",
        "<builtin>.int"
    ],
    "plistlib._PlistParser.end_real": [
        "plistlib._PlistParser.get_data",
        "<builtin>.float",
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_string": [
        "plistlib._PlistParser.get_data",
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_data": [
        "plistlib.Data.fromBase64",
        "plistlib._PlistParser.get_data",
        "plistlib._decode_base64",
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_date": [
        "plistlib._PlistParser.get_data",
        "plistlib._date_from_string",
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._DumbXMLWriter.begin_element": [
        "plistlib._DumbXMLWriter.writeln",
        "<list>.append"
    ],
    "plistlib._DumbXMLWriter.writeln": [
        "<builtin>.isinstance"
    ],
    "plistlib._DumbXMLWriter.end_element": [
        "<list>.pop",
        "plistlib._DumbXMLWriter.writeln"
    ],
    "plistlib._DumbXMLWriter.simple_element": [
        "plistlib._escape",
        "plistlib._DumbXMLWriter.writeln"
    ],
    "plistlib._PlistWriter.__init__": [
        "plistlib._DumbXMLWriter.__init__"
    ],
    "plistlib._DumbXMLWriter.__init__": [],
    "plistlib._PlistWriter.write": [
        "plistlib._DumbXMLWriter.writeln",
        "plistlib._PlistWriter.write_value"
    ],
    "plistlib._PlistWriter.write_value": [
        "<builtin>.OverflowError",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "plistlib._PlistWriter.write_bytes",
        "plistlib._PlistWriter.write_data",
        "plistlib._PlistWriter.write_array",
        "plistlib._PlistWriter.write_dict",
        "plistlib._date_to_string",
        "<builtin>.type",
        "<builtin>.repr",
        "plistlib._DumbXMLWriter.simple_element"
    ],
    "plistlib._PlistWriter.write_array": [
        "plistlib._DumbXMLWriter.begin_element",
        "plistlib._DumbXMLWriter.simple_element",
        "plistlib._DumbXMLWriter.end_element",
        "plistlib._PlistWriter.write_value"
    ],
    "plistlib._date_to_string": [],
    "plistlib._PlistWriter.write_bytes": [
        "<str>.replace",
        "plistlib._encode_base64",
        "plistlib._DumbXMLWriter.writeln",
        "<builtin>.len",
        "<builtin>.max",
        "plistlib._DumbXMLWriter.begin_element",
        "plistlib._DumbXMLWriter.end_element"
    ],
    "plistlib._PlistWriter.write_data": [
        "plistlib._PlistWriter.write_bytes"
    ],
    "plistlib._PlistWriter.write_dict": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "plistlib._PlistWriter.write_value",
        "<builtin>.sorted",
        "plistlib._DumbXMLWriter.simple_element",
        "plistlib._DumbXMLWriter.begin_element",
        "plistlib._DumbXMLWriter.end_element"
    ],
    "plistlib._is_fmt_xml": [
        "<builtin>.len"
    ],
    "plistlib._BinaryPlistParser.parse": [
        "plistlib._BinaryPlistParser._read_ints",
        "plistlib._BinaryPlistParser._read_object",
        "plistlib.InvalidFileException.__init__",
        "<builtin>.len"
    ],
    "plistlib.InvalidFileException.__init__": [],
    "plistlib._BinaryPlistParser._read_ints": [
        "<builtin>.tuple",
        "<builtin>.range",
        "plistlib.InvalidFileException.__init__",
        "<builtin>.len"
    ],
    "plistlib._BinaryPlistParser._read_object": [
        "plistlib.Data.__init__",
        "plistlib._BinaryPlistParser._read_refs",
        "plistlib.InvalidFileException.__init__",
        "plistlib.UID.__init__",
        "<list>.extend",
        "<builtin>.zip",
        "plistlib._BinaryPlistParser._read_object",
        "plistlib._BinaryPlistParser._get_size"
    ],
    "plistlib._BinaryPlistParser._get_size": [],
    "plistlib._BinaryPlistParser._read_refs": [
        "plistlib._BinaryPlistParser._read_ints"
    ],
    "plistlib._BinaryPlistWriter.write": [
        "plistlib._BinaryPlistWriter._flatten",
        "plistlib._count_to_size",
        "<builtin>.len",
        "plistlib._BinaryPlistWriter._getrefnum",
        "plistlib._BinaryPlistWriter._write_object"
    ],
    "plistlib._BinaryPlistWriter._flatten": [
        "<list>.append",
        "<builtin>.isinstance",
        "plistlib._BinaryPlistWriter._flatten",
        "<builtin>.TypeError",
        "<builtin>.sorted",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.id"
    ],
    "plistlib._count_to_size": [],
    "plistlib._BinaryPlistWriter._write_object": [
        "<builtin>.OverflowError",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.TypeError",
        "<builtin>.sorted",
        "plistlib._BinaryPlistWriter._write_size",
        "<list>.append",
        "plistlib._BinaryPlistWriter._getrefnum",
        "<builtin>.ValueError"
    ],
    "plistlib._BinaryPlistWriter._getrefnum": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.id"
    ],
    "plistlib._BinaryPlistWriter._write_size": [],
    "plistlib.loads": [
        "plistlib.load",
        "_io.BytesIO"
    ],
    "plistlib.dumps": [
        "plistlib.dump",
        "_io.BytesIO"
    ],
    "dataclasses._InitVarMeta.__getitem__": [
        "dataclasses.InitVar.__init__"
    ],
    "dataclasses.InitVar.__init__": [],
    "dataclasses.InitVar.__repr__": [
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "dataclasses.Field.__set_name__": [
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "dataclasses._recursive_repr": [
        "functools.wraps",
        "<builtin>.set"
    ],
    "dataclasses._create_fn": [
        "<map>.keys",
        "<builtin>.exec"
    ],
    "dataclasses._field_init": [
        "dataclasses._field_assign"
    ],
    "dataclasses._field_assign": [],
    "dataclasses._init_fn": [
        "dataclasses._create_fn",
        "<builtin>.TypeError",
        "dataclasses._field_init",
        "<list>.append",
        "dataclasses._init_param"
    ],
    "dataclasses._init_param": [],
    "dataclasses._repr_fn": [
        "dataclasses._create_fn",
        "dataclasses._recursive_repr"
    ],
    "dataclasses._frozen_get_del_attr": [
        "dataclasses._create_fn",
        "<builtin>.repr"
    ],
    "dataclasses._cmp_fn": [
        "dataclasses._create_fn"
    ],
    "dataclasses._hash_fn": [
        "dataclasses._create_fn",
        "dataclasses._tuple_str"
    ],
    "dataclasses._tuple_str": [],
    "dataclasses._is_classvar": [
        "<builtin>.type"
    ],
    "dataclasses._is_initvar": [
        "<builtin>.type"
    ],
    "dataclasses._get_field": [
        "<builtin>.isinstance",
        "dataclasses.field",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "dataclasses._is_initvar",
        "<builtin>.type",
        "dataclasses._is_classvar",
        "dataclasses._is_type",
        "<builtin>.ValueError"
    ],
    "dataclasses._is_type": [
        "dataclasses._is_classvar",
        "dataclasses._is_initvar",
        "pathlib.PurePath.match"
    ],
    "dataclasses._set_new_attribute": [
        "<builtin>.setattr"
    ],
    "dataclasses._hash_add": [
        "dataclasses._hash_fn"
    ],
    "dataclasses._hash_exception": [
        "<builtin>.TypeError"
    ],
    "dataclasses._process_class": [
        "<builtin>.isinstance",
        "<builtin>.delattr",
        "<builtin>.TypeError",
        "dataclasses._get_field",
        "dataclasses._DataclassParams.__init__",
        "<builtin>.str",
        "dataclasses._frozen_get_del_attr",
        "<builtin>.ValueError",
        "dataclasses._set_new_attribute",
        "dataclasses._tuple_str",
        "dataclasses._cmp_fn",
        "dataclasses._repr_fn",
        "inspect.signature",
        "<map>.values",
        "dataclasses._init_fn",
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.bool",
        "<builtin>.hasattr"
    ],
    "dataclasses._DataclassParams.__init__": [],
    "dataclasses.dataclass": [
        "dataclasses.dataclass.wrap"
    ],
    "dataclasses.dataclass.wrap": [
        "dataclasses._process_class"
    ],
    "dataclasses._is_dataclass_instance": [
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "dataclasses.asdict": [
        "<builtin>.TypeError",
        "dataclasses._asdict_inner",
        "dataclasses._is_dataclass_instance"
    ],
    "dataclasses._asdict_inner": [
        "<list>.append",
        "<builtin>.isinstance",
        "dataclasses.fields",
        "<builtin>.type",
        "dataclasses._is_dataclass_instance",
        "<builtin>.getattr",
        "copy.deepcopy",
        "dataclasses._asdict_inner",
        "<builtin>.hasattr"
    ],
    "dataclasses.astuple": [
        "<builtin>.TypeError",
        "dataclasses._astuple_inner",
        "dataclasses._is_dataclass_instance"
    ],
    "dataclasses._astuple_inner": [
        "<list>.append",
        "<builtin>.isinstance",
        "dataclasses.fields",
        "<builtin>.type",
        "dataclasses._is_dataclass_instance",
        "<builtin>.getattr",
        "copy.deepcopy",
        "dataclasses._astuple_inner",
        "<builtin>.hasattr"
    ],
    "dataclasses.make_dataclass": [
        "<builtin>.set",
        "<builtin>.isinstance",
        "<map>.copy",
        "dataclasses.dataclass",
        "<builtin>.TypeError",
        "types.new_class",
        "<builtin>.len"
    ],
    "dataclasses.make_dataclass.<lambda1>": [],
    "dataclasses.replace": [
        "warnings",
        "<builtin>.TypeError",
        "dataclasses._is_dataclass_instance",
        "<builtin>.len",
        "<builtin>.getattr",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "getpass.unix_getpass": [
        "codecs.StreamRecoder.write",
        "getpass._raw_input",
        "getpass.fallback_getpass",
        "_io.TextIOWrapper",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<builtin>.hasattr",
        "_io.FileIO"
    ],
    "_io.FileIO": [],
    "getpass.win_getpass": [
        "getpass.fallback_getpass"
    ],
    "html._replace_charref": [
        "<builtin>.chr",
        "<builtin>.int",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "rich._null_file.NullFile.__iter__": [
        "<builtin>.iter"
    ],
    "rich.style.Style.on": [
        "rich.style.Style.from_meta"
    ],
    "rich.style.Style._make_ansi_codes": [
        "<builtin>.range"
    ],
    "rich.style.Style.pick_first": [
        "<builtin>.ValueError"
    ],
    "rich.style.Style.__eq__": [
        "rich.style.Style.__hash__",
        "<builtin>.isinstance"
    ],
    "rich.style.Style.__hash__": [
        "<builtin>.hash"
    ],
    "rich.style.Style.__ne__": [
        "rich.style.Style.__hash__",
        "<builtin>.isinstance"
    ],
    "rich.style.Style.background_style": [
        "rich.style.Style.__init__"
    ],
    "rich.style.Style.meta": [
        "typing.cast",
        "marshal.loads"
    ],
    "marshal.loads": [],
    "rich.style.Style.without_color": [
        "random.Random.randint"
    ],
    "rich.style.Style.chain": [
        "<builtin>.iter",
        "<builtin>.sum",
        "<builtin>.next"
    ],
    "rich.style.Style.render": [
        "rich.style.Style._make_ansi_codes"
    ],
    "rich.style.Style.test": [
        "rich.style.Style.render",
        "codecs.StreamRecoder.write",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.str",
        "rich.file_proxy.FileProxy.write"
    ],
    "rich.style.Style.__add__": [
        "rich.style.Style._add",
        "rich.style.Style.copy"
    ],
    "rich.color.ColorSystem.__str__": [
        "<builtin>.repr"
    ],
    "rich.color.Color.__rich__": [
        "rich.style",
        "rich.text",
        "rich.text.Text.assemble",
        "rich.style.Style.__init__"
    ],
    "rich.color.Color.system": [
        "<builtin>.int"
    ],
    "rich.color.Color.from_rgb": [
        "rich.color.Color.from_triplet",
        "<builtin>.int"
    ],
    "rich.color.parse_rgb_hex": [
        "<builtin>.int",
        "<builtin>.len"
    ],
    "colorsys.hls_to_rgb": [
        "colorsys._v"
    ],
    "colorsys._v": [],
    "colorsys.rgb_to_hsv": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "colorsys.hsv_to_rgb": [
        "<builtin>.int"
    ],
    "rich.palette.Palette.__rich__": [
        "rich.style.Style.__init__",
        "<builtin>.repr",
        "<builtin>.str",
        "rich.text",
        "rich.table.Table.add_row",
        "<builtin>.enumerate",
        "rich.color.Color.from_rgb",
        "rich.table",
        "rich.color",
        "rich.text.Text.__init__",
        "<builtin>.len",
        "rich.style",
        "rich.table.Table.__init__"
    ],
    "rich.palette.ColorBox.__rich_console__": [
        "rich.style.Style.__init__",
        "rich.segment.Segment.line",
        "colorsys.hls_to_rgb",
        "rich.color.Color.from_rgb",
        "<builtin>.range"
    ],
    "rich.segment.Segment.line": [],
    "rich.palette.Palette.match.get_color_distance": [
        "<list>"
    ],
    "rich.table.Column.copy": [
        "dataclasses.replace"
    ],
    "rich.table.Table._extra_width": [
        "<builtin>.len"
    ],
    "rich.table.Table.row_count": [
        "<builtin>.len"
    ],
    "rich.table.Table.get_row_style": [
        "rich.console.Console.get_style",
        "rich.style.Style.null",
        "<builtin>.len"
    ],
    "rich.table.Table.__rich_measure__": [
        "<builtin>.sum",
        "rich.measure.Measurement.clamp",
        "rich.table.Table._measure_column",
        "rich.table.Table._calculate_column_widths"
    ],
    "rich.table.Table._calculate_column_widths": [
        "rich._ratio.ratio_distribute",
        "<builtin>.sum",
        "rich.table.Table._collapse_widths",
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.zip",
        "rich.table.Table._measure_column",
        "<builtin>.enumerate",
        "<builtin>.min",
        "<builtin>.any",
        "rich.table.Table._get_padding_width",
        "<builtin>.len",
        "rich._ratio.ratio_reduce"
    ],
    "rich.table.Table._measure_column": [
        "rich.measure.Measurement.with_maximum",
        "rich.table.Table._get_cells",
        "rich.measure.Measurement.clamp",
        "rich.measure.Measurement.get",
        "rich.table.Table._get_padding_width",
        "<builtin>.max"
    ],
    "rich.table.Table._get_padding_width": [
        "<builtin>.max"
    ],
    "rich.measure.Measurement.with_maximum": [
        "<builtin>.min"
    ],
    "rich.table.Table._get_cells": [
        "rich.table.Table._get_cells.get_padding",
        "<builtin>.any",
        "rich._loop.loop_first_last",
        "<builtin>.getattr",
        "<builtin>.len",
        "rich.console.Console.get_style",
        "rich.padding.Padding.__init__"
    ],
    "rich._loop.loop_first_last": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "rich.table.Table._get_cells.get_padding": [
        "<builtin>.max"
    ],
    "rich.measure.Measurement.clamp": [
        "rich.measure.Measurement.with_maximum",
        "rich.measure.Measurement.with_minimum"
    ],
    "rich.measure.Measurement.with_minimum": [
        "<builtin>.max"
    ],
    "rich._ratio.ratio_distribute": [
        "<builtin>.sum",
        "<builtin>.max",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "rich.table.Table._collapse_widths": [
        "<builtin>.sum",
        "rich._ratio.ratio_reduce",
        "<builtin>.zip",
        "<builtin>.any",
        "<builtin>.len",
        "<builtin>.max"
    ],
    "rich._ratio.ratio_reduce": [
        "<builtin>.sum",
        "<builtin>.round",
        "<builtin>.min",
        "<builtin>.zip"
    ],
    "rich.table.Table.__rich_console__": [
        "<builtin>.sum",
        "rich.style.Style.pick_first",
        "rich.table.Table.__rich_console__.render_annotation",
        "rich.table.Table._render",
        "rich.table.Table._calculate_column_widths"
    ],
    "rich.table.Table.__rich_console__.render_annotation": [
        "rich.console.Console.render",
        "<builtin>.isinstance",
        "rich.console.Console.render_str"
    ],
    "rich.table.Table._render": [
        "<builtin>.range",
        "rich.table.Table._get_cells",
        "rich.style.Style.null",
        "<builtin>.list",
        "rich.table.Table._render.align_cell",
        "rich._loop.loop_last",
        "rich.console.Console.render_lines",
        "rich.segment.Segment.line",
        "<builtin>.zip",
        "<builtin>.enumerate",
        "rich.table.Table.get_row_style",
        "rich._loop.loop_first_last",
        "<builtin>.len",
        "rich._pick.pick_bool",
        "rich.console.Console.get_style",
        "<builtin>.max",
        "rich.segment.Segment.set_shape"
    ],
    "rich.table.Table._render.align_cell": [
        "rich.segment.Segment.align_middle",
        "rich.segment.Segment.align_bottom",
        "rich.segment.Segment.align_top"
    ],
    "rich.segment.Segment.align_middle": [
        "<builtin>.len"
    ],
    "rich.segment.Segment.align_top": [
        "<builtin>.len"
    ],
    "rich.segment.Segment.align_bottom": [
        "<builtin>.len"
    ],
    "rich.segment.Segment.set_shape": [
        "rich.segment.Segment.adjust_line_length",
        "<builtin>.len"
    ],
    "rich.box.Box.substitute": [
        "<map>.get"
    ],
    "rich.box.Box.get_plain_headed_box": [
        "<map>.get"
    ],
    "rich.box.Box.get_top": [
        "rich._loop.loop_last"
    ],
    "rich.box.Box.get_row": [
        "rich._loop.loop_last",
        "<builtin>.ValueError"
    ],
    "rich.box.Box.get_bottom": [
        "rich._loop.loop_last"
    ],
    "rich._loop.loop_first": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "rich.columns.Columns.__rich_console__": [
        "rich.padding.Padding.unpack",
        "<builtin>.sum",
        "<builtin>.isinstance",
        "rich.constrain.Constrain.__init__",
        "rich.table.Table.add_column",
        "rich.console.Console.render_str",
        "rich.table.Table.add_row",
        "operator.itemgetter.__init__",
        "rich.measure.Measurement.get",
        "_collections.defaultdict",
        "<builtin>.len",
        "rich.columns.Columns.__rich_console__.iter_renderables",
        "rich.table.Table.grid",
        "<builtin>.max",
        "<builtin>.range",
        "rich.align.Align.__init__"
    ],
    "rich.columns.Columns.__rich_console__.iter_renderables": [
        "<builtin>.range",
        "<builtin>.list",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "rich.constrain.Constrain.__init__": [],
    "rich.align.Align.__rich_console__": [
        "itertools.chain",
        "rich.segment.Segment.apply_style",
        "<builtin>.list",
        "rich.constrain.Constrain.__init__",
        "rich.segment.Segment.line",
        "rich.align.Align.__rich_console__.blank_lines",
        "rich.segment.Segment.get_shape",
        "rich.console.Console.render",
        "rich.console.Console.measure",
        "rich.console.Console.get_style",
        "rich.segment.Segment.split_lines",
        "rich.align.Align.__rich_console__.generate_segments",
        "<builtin>.min",
        "rich.segment.Segment.set_shape"
    ],
    "rich.segment.Segment.split_lines": [
        "<str>.partition"
    ],
    "rich.segment.Segment.get_shape": [
        "rich.segment.Segment.get_line_length",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "rich.segment.Segment.get_line_length": [
        "<builtin>.sum",
        "rich.cells.cell_len"
    ],
    "rich.align.Align.__rich_console__.generate_segments": [],
    "rich.align.Align.__rich_console__.blank_lines": [
        "<builtin>.range"
    ],
    "itertools.chain": [],
    "rich.segment.Segment.apply_style": [
        "rich.style.Style.__add__",
        "<list>"
    ],
    "rich.align.Align.__rich_measure__": [
        "rich.measure.Measurement.get"
    ],
    "rich.align.VerticalCenter.__rich_console__": [
        "rich.align.VerticalCenter.__rich_console__.blank_lines",
        "rich.segment.Segment.line",
        "rich.segment.Segment.get_shape",
        "<builtin>.len"
    ],
    "rich.align.VerticalCenter.__rich_console__.blank_lines": [
        "<builtin>.range"
    ],
    "rich.align.VerticalCenter.__rich_measure__": [
        "rich.measure.Measurement.get"
    ],
    "rich.constrain.Constrain.__rich_console__": [
        "<builtin>.min",
        "rich.console.Console.render"
    ],
    "rich.constrain.Constrain.__rich_measure__": [
        "rich.measure.Measurement.get"
    ],
    "rich.jupyter.JupyterRenderable._repr_mimebundle_": [
        "<map>.items"
    ],
    "rich.jupyter.JupyterMixin._repr_mimebundle_": [
        "<map>.items",
        "<builtin>.list",
        "rich.jupyter._render_segments",
        "get_console"
    ],
    "rich.jupyter._render_segments": [
        "rich.segment.Segment.simplify",
        "rich.jupyter._render_segments.escape"
    ],
    "rich.segment.Segment.simplify": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "rich.jupyter._render_segments.escape": [
        "<str>.replace"
    ],
    "rich.jupyter.display": [
        "rich.jupyter.JupyterRenderable.__init__",
        "IPython.display.display",
        "rich.jupyter._render_segments"
    ],
    "rich.jupyter.JupyterRenderable.__init__": [],
    "IPython.display.display": [],
    "rich.jupyter.print": [
        "get_console"
    ],
    "rich.markdown.Markdown.__rich_console__": [
        "commonmark.node.NodeWalker.__iter__",
        "rich.style.Style.__init__",
        "rich.markdown.MarkdownContext.on_text",
        "commonmark.node.Node.walker",
        "rich.console.Console.render",
        "rich.markdown.MarkdownContext.leave_style",
        "rich.markdown.MarkdownContext.enter_style",
        "rich.markdown.MarkdownContext.__init__",
        "rich.console.Console.get_style",
        "commonmark.node.NodeWalker.__next__"
    ],
    "rich.markdown.MarkdownContext.__init__": [
        "rich.style.StyleStack.__init__",
        "rich.syntax.Syntax.__init__"
    ],
    "rich.style.StyleStack.__init__": [],
    "commonmark.node.NodeWalker.__iter__": [],
    "commonmark.node.NodeWalker.__next__": [
        "commonmark.node.is_container"
    ],
    "rich.markdown.MarkdownContext.enter_style": [
        "rich.console.Console.get_style"
    ],
    "rich.markdown.MarkdownContext.on_text": [
        "rich.syntax.Syntax.highlight",
        "rich.text.Text.assemble",
        "rich.text.Text.rstrip"
    ],
    "rich.syntax.Syntax.highlight": [
        "rich.syntax.Syntax._get_base_style",
        "rich.syntax.Syntax.highlight.tokens_to_spans",
        "rich.text.Text.append",
        "rich.syntax.ANSISyntaxTheme.get_style_for_token",
        "rich.syntax.Syntax._apply_stylized_ranges",
        "rich.text.Text.__init__",
        "rich.syntax.PygmentsSyntaxTheme.get_style_for_token",
        "rich.text.Text.stylize",
        "rich.text.Text.append_tokens",
        "<list>"
    ],
    "rich.syntax.Syntax._get_base_style": [
        "rich.syntax.ANSISyntaxTheme.get_background_style",
        "rich.syntax.PygmentsSyntaxTheme.get_background_style"
    ],
    "rich.syntax.ANSISyntaxTheme.get_background_style": [],
    "rich.syntax.PygmentsSyntaxTheme.get_background_style": [],
    "rich.syntax.PygmentsSyntaxTheme.get_style_for_token": [
        "rich.style.Style.null"
    ],
    "rich.syntax.ANSISyntaxTheme.get_style_for_token": [
        "<builtin>.tuple"
    ],
    "rich.text.Text.append_tokens": [
        "<list>",
        "<builtin>.len"
    ],
    "rich.syntax.Syntax.highlight.tokens_to_spans": [
        "<builtin>.iter",
        "<builtin>.next",
        "rich.syntax.Syntax.highlight.line_tokenize",
        "rich.syntax.ANSISyntaxTheme.get_style_for_token",
        "rich.syntax.PygmentsSyntaxTheme.get_style_for_token",
        "<list>"
    ],
    "rich.syntax.Syntax.highlight.line_tokenize": [],
    "rich.syntax.Syntax._apply_stylized_ranges": [
        "rich.text.Text.stylize",
        "rich.syntax._get_code_index_for_syntax_position"
    ],
    "rich.syntax._get_code_index_for_syntax_position": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "rich.text.Text.rstrip": [],
    "rich.markdown.MarkdownContext.leave_style": [],
    "rich_cli.__main__.ForceWidth.__rich_console__": [
        "rich.console.Console.render"
    ],
    "rich.padding.Padding.__rich_console__": [
        "<builtin>.min",
        "rich.console.Console.get_style",
        "rich.console.Console.render_lines",
        "rich.measure.Measurement.get"
    ],
    "rich.syntax.Syntax.__rich_console__": [
        "rich.syntax.ANSISyntaxTheme.get_background_style",
        "rich.syntax.Syntax._get_syntax",
        "rich.segment.Segments.__init__",
        "rich.syntax.PygmentsSyntaxTheme.get_background_style",
        "rich.padding.Padding.__init__"
    ],
    "rich.syntax.Syntax._get_syntax": [
        "rich.console.Console.render_lines",
        "rich.text.Text.with_indent_guides",
        "<builtin>.enumerate",
        "rich._loop.loop_first",
        "rich.syntax.Syntax._get_number_styles",
        "<builtin>.str",
        "<builtin>.max",
        "rich.syntax.Syntax._get_base_style",
        "<builtin>.list",
        "rich.syntax.Syntax.highlight",
        "rich.console.Console.render",
        "rich.text.Text.__init__",
        "rich.syntax.PygmentsSyntaxTheme.get_style_for_token",
        "rich.text.Text.split",
        "rich.text.Text.join",
        "rich.syntax.Syntax._process_code",
        "rich.syntax.ANSISyntaxTheme.get_style_for_token",
        "rich.style.Style.__init__",
        "rich.text.Text.remove_suffix"
    ],
    "rich.syntax.Syntax._process_code": [
        "<str>.endswith",
        "textwrap.dedent"
    ],
    "rich.text.Text.remove_suffix": [
        "rich.text.Text.right_crop",
        "<builtin>.len"
    ],
    "rich.text.Text.right_crop": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "rich.text.Text.with_indent_guides": [
        "rich.text.Text.split",
        "rich.containers.Lines.__iter__",
        "<builtin>.len",
        "rich.text.Text.blank_copy",
        "rich.text.Text.join",
        "re.compile",
        "rich.text.Text.copy",
        "rich.text.Text.detect_indentation",
        "<builtin>.divmod",
        "rich.text.Text.expand_tabs",
        "pathlib.PurePath.match"
    ],
    "rich.text.Text.detect_indentation": [
        "functools.reduce",
        "re.finditer",
        "<builtin>.len"
    ],
    "rich.text.Text.copy": [
        "rich.text.Text.__init__"
    ],
    "rich.text.Text.expand_tabs": [
        "rich.text.Text.split",
        "rich.containers.Lines.__iter__",
        "rich.text.Text.blank_copy",
        "rich.text.Text.append",
        "<builtin>.len"
    ],
    "rich.syntax.Syntax._get_number_styles": [
        "rich.syntax.Syntax._get_base_style",
        "rich.style.Style.null",
        "rich.style.Style.__init__",
        "rich.syntax.Syntax._get_line_numbers_color",
        "rich.style.Style.chain",
        "rich.syntax.ANSISyntaxTheme.get_style_for_token",
        "rich.syntax.PygmentsSyntaxTheme.get_style_for_token"
    ],
    "rich.syntax.Syntax._get_line_numbers_color": [
        "rich.syntax.ANSISyntaxTheme.get_background_style",
        "rich.color.Color.from_triplet",
        "rich.syntax.Syntax._get_token_color",
        "rich.color.blend_rgb",
        "rich.color.Color.default",
        "rich.syntax.PygmentsSyntaxTheme.get_background_style"
    ],
    "rich.color.Color.default": [],
    "rich.syntax.Syntax._get_token_color": [
        "rich.syntax.PygmentsSyntaxTheme.get_style_for_token",
        "rich.syntax.ANSISyntaxTheme.get_style_for_token"
    ],
    "rich.segment.Segments.__init__": [
        "<builtin>.list"
    ],
    "rich.console.Group.__rich_console__": [],
    "rich.rule.Rule.__rich_console__": [
        "<builtin>.isinstance",
        "rich.console.Console.render_str",
        "<str>.replace",
        "rich.cells.set_cell_size",
        "rich.text.Text.append",
        "rich.text.Text.truncate",
        "rich.cells.cell_len",
        "<builtin>.getattr",
        "rich.rule.Rule._rule_line",
        "rich.text.Text.__init__",
        "<builtin>.max",
        "rich.text.Text.expand_tabs"
    ],
    "rich.rule.Rule._rule_line": [
        "rich.text.Text.__init__",
        "rich.cells.set_cell_size",
        "rich.text.Text.truncate"
    ],
    "rich.text.Text.truncate": [
        "rich.text.Text.cell_len",
        "rich.cells.set_cell_size",
        "<builtin>.len"
    ],
    "rich.text.Text.cell_len": [
        "rich.text.Text.cell_len"
    ],
    "rich.panel.Panel.__rich_console__": [
        "rich.padding.Padding.unpack",
        "rich.console.Console.render_lines",
        "<builtin>.max",
        "rich.segment.Segment.line",
        "rich.text.Text.stylize_before",
        "rich.console.Console.render",
        "rich.panel.Panel.__rich_console__.align_text",
        "rich.console.Console.measure",
        "<builtin>.any",
        "rich.console.Console.get_style",
        "<builtin>.min",
        "rich.padding.Padding.__init__"
    ],
    "rich.panel.Panel.__rich_console__.align_text": [
        "rich.text.Text.copy",
        "rich.text.Text.assemble",
        "rich.cells.cell_len",
        "rich.text.Text.truncate"
    ],
    "rich.pretty.Pretty.__rich_console__": [
        "rich.pretty.pretty_repr",
        "rich.text.Text.with_indent_guides",
        "rich.text.Text.from_ansi",
        "rich.text.Text.__init__",
        "<builtin>.type",
        "rich._pick.pick_bool"
    ],
    "rich.pretty.pretty_repr": [
        "textual.scrollbar.ScrollBar.render",
        "textual.widgets._button.Button.render",
        "textual.widgets._tree_control.TreeControl.render",
        "textual.widget.Widget.render",
        "rich.pretty._safe_isinstance",
        "textual.widgets._header.Header.render",
        "textual.widgets._static.Static.render",
        "textual.widgets._placeholder.Placeholder.render",
        "textual.widgets._footer.Footer.render",
        "rich.pretty.Node.render",
        "textual.view.View.render",
        "rich.pretty.traverse",
        "rich.text.Text.render"
    ],
    "rich.pretty.Node.render": [
        "<builtin>.str",
        "<builtin>.len"
    ],
    "rich_rst.RestructuredText.__rich_console__": [
        "rich.console.Console.get_style",
        "rich.console.Console.render",
        "rich_rst.RSTVisitor.__init__",
        "rich.panel.Panel.__init__"
    ],
    "rich_rst.RSTVisitor.__init__": [
        "<builtin>.super"
    ],
    "rich.segment.Segment.cell_length": [
        "rich.cells.cell_len"
    ],
    "rich.segment.Segment.__bool__": [
        "<builtin>.bool"
    ],
    "rich.segment.Segment.split_cells": [
        "<map>",
        "<builtin>.len",
        "rich.segment.Segment._split_cells",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "rich.segment.Segment.filter_control": [
        "operator.attrgetter.__init__",
        "itertools.filterfalse",
        "<builtin>.filter"
    ],
    "itertools.filterfalse": [],
    "rich.segment.Segment.divide": [
        "<builtin>.iter",
        "<builtin>.next",
        "rich.cells.cached_cell_len"
    ],
    "rich.segment.Segments.__rich_console__": [
        "rich.segment.Segment.line"
    ],
    "rich.segment.SegmentLines.__init__": [
        "<builtin>.list"
    ],
    "rich.segment.SegmentLines.__rich_console__": [
        "rich.segment.Segment.line"
    ],
    "rich.syntax.Syntax.lexer": [
        "pygments.lexers.get_lexer_by_name",
        "<builtin>.isinstance"
    ],
    "rich.syntax.Syntax._numbers_column_width": [
        "<str>.count",
        "<builtin>.len",
        "<builtin>.str"
    ],
    "rich.syntax.Syntax.__rich_measure__": [
        "rich.padding.Padding.unpack",
        "<builtin>.max",
        "<str>.splitlines",
        "rich.cells.cell_len"
    ],
    "click._textwrap.TextWrapper._handle_long_word": [
        "<builtin>.max",
        "<list>.append"
    ],
    "textwrap.shorten": [
        "textwrap.TextWrapper.fill",
        "textwrap.TextWrapper.__init__"
    ],
    "textwrap.indent": [
        "textwrap.indent.prefixed_lines"
    ],
    "textwrap.indent.prefixed_lines": [
        "textwrap.indent.predicate"
    ],
    "textwrap.indent.predicate": [],
    "pygments.lexer.LexerMeta.__new__": [
        "pygments.util.make_analysator"
    ],
    "pygments.lexer.Lexer.__init__": [
        "pygments.util.get_list_opt",
        "pygments.util.get_int_opt",
        "pygments.lexer.Lexer.add_filter",
        "pygments.util.get_bool_opt"
    ],
    "pygments.lexer.Lexer.add_filter": [
        "pygments.filters.get_filter_by_name",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "pygments.filters.get_filter_by_name": [
        "pygments.filters.find_filter_class"
    ],
    "pygments.filters.find_filter_class": [
        "pygments.plugin.find_plugin_filters"
    ],
    "pygments.plugin.find_plugin_filters": [
        "pygments.plugin.iter_entry_points"
    ],
    "pygments.lexer.Lexer.get_tokens": [
        "<str>.endswith",
        "<str>.replace",
        "<builtin>.isinstance",
        "pygments.util.guess_decode",
        "pygments.filter.apply_filters",
        "pygments.lexer.Lexer.get_tokens.streamer",
        "<str>.expandtabs",
        "<builtin>.ImportError",
        "<str>.startswith",
        "<str>.strip",
        "<builtin>.len"
    ],
    "pygments.lexer.Lexer.get_tokens.streamer": [
        "pygments.lexer.Lexer.get_tokens_unprocessed"
    ],
    "pygments.lexer.Lexer.get_tokens_unprocessed": [],
    "pygments.filter.apply_filters": [
        "pygments.filter.apply_filters._apply"
    ],
    "pygments.filter.apply_filters._apply": [],
    "pygments.lexer.DelegatingLexer.__init__": [
        "pygments.lexer.Lexer.__init__"
    ],
    "pygments.lexer.DelegatingLexer.get_tokens_unprocessed": [
        "pygments.lexer.do_insertions",
        "<list>.append"
    ],
    "pygments.lexer.do_insertions": [
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.len"
    ],
    "pygments.lexer._PseudoMatch.end": [
        "<builtin>.len"
    ],
    "pygments.lexer._PseudoMatch.group": [
        "<builtin>.IndexError"
    ],
    "pygments.lexer.using": [
        "<builtin>.isinstance"
    ],
    "pygments.lexer.words.get": [
        "pygments.regexopt.regex_opt"
    ],
    "pygments.regexopt.regex_opt": [
        "pygments.regexopt.regex_opt_inner",
        "<builtin>.sorted"
    ],
    "pygments.regexopt.regex_opt_inner": [
        "<builtin>.list",
        "<builtin>.len",
        "re.escape",
        "<builtin>.sorted",
        "itertools.groupby",
        "genericpath.commonprefix",
        "<list>.append",
        "pygments.regexopt.make_charset",
        "pygments.regexopt.regex_opt_inner"
    ],
    "pygments.regexopt.make_charset": [],
    "itertools.groupby": [],
    "pygments.lexer.RegexLexerMeta._process_regex": [
        "re.compile",
        "<builtin>.isinstance"
    ],
    "pygments.lexer.RegexLexerMeta._process_token": [
        "<builtin>.callable",
        "<builtin>.type"
    ],
    "pygments.lexer.RegexLexerMeta._process_new_state": [
        "<list>.extend",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "pygments.lexer.RegexLexerMeta._process_state": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "pygments.lexer.RegexLexerMeta._process_regex",
        "<list>.extend",
        "pygments.lexer.RegexLexerMeta._process_new_state",
        "<builtin>.type",
        "<list>.append",
        "pygments.lexer.RegexLexerMeta._process_token",
        "<builtin>.ValueError"
    ],
    "pygments.lexer.RegexLexerMeta.process_tokendef": [
        "<builtin>.list",
        "pygments.lexer.RegexLexerMeta._process_state"
    ],
    "pygments.lexer.RegexLexerMeta.get_tokendefs": [
        "<map>.pop",
        "<map>.get"
    ],
    "pygments.lexer.RegexLexerMeta.__call__": [
        "pygments.lexer.RegexLexerMeta.process_tokendef",
        "<builtin>.hasattr",
        "pygments.lexer.RegexLexerMeta.get_tokendefs"
    ],
    "pygments.lexer.RegexLexer.get_tokens_unprocessed": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.abs",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "pygments.lexer.LexerContext.__init__": [
        "<builtin>.len"
    ],
    "pygments.lexer.ExtendedRegexLexer.get_tokens_unprocessed": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.abs",
        "<builtin>.type",
        "pygments.lexer.LexerContext.__init__"
    ],
    "pygments.lexer.ProfilingRegexLexerMeta._process_regex": [
        "re.compile",
        "pygments.regexopt.regex_opt",
        "<builtin>.isinstance"
    ],
    "pygments.lexer.ProfilingRegexLexer.get_tokens_unprocessed": [
        "<builtin>.sum",
        "pygments.lexer.RegexLexer.get_tokens_unprocessed",
        "<builtin>.len",
        "<builtin>.sorted",
        "<builtin>.print",
        "<builtin>.repr"
    ],
    "pygments.filter.simplefilter": [
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "pygments.filter.Filter.filter": [
        "<builtin>.NotImplementedError"
    ],
    "pygments.filter.FunctionFilter.__init__": [
        "<builtin>.TypeError",
        "pygments.filter.Filter.__init__",
        "<builtin>.hasattr"
    ],
    "pygments.filter.Filter.__init__": [],
    "pygments.filters.get_all_filters": [
        "pygments.plugin.find_plugin_filters"
    ],
    "pygments.filters._replace_special": [
        "pygments.filters.<lambda1>",
        "pygments.filters.VisibleWhitespaceFilter.filter.replacefunc",
        "<builtin>.len"
    ],
    "pygments.filters.<lambda1>": [],
    "pygments.filters.CodeTagFilter.__init__": [
        "pygments.util.get_list_opt",
        "re.compile",
        "pygments.filter.Filter.__init__",
        "re.escape"
    ],
    "pygments.filters.CodeTagFilter.filter": [
        "pygments.filters._replace_special"
    ],
    "pygments.filters.SymbolFilter.__init__": [
        "pygments.filter.Filter.__init__",
        "pygments.util.get_choice_opt"
    ],
    "pygments.filters.KeywordCaseFilter.__init__": [
        "pygments.filter.Filter.__init__",
        "<builtin>.getattr",
        "pygments.util.get_choice_opt"
    ],
    "pygments.filters.NameHighlightFilter.__init__": [
        "pygments.util.get_list_opt",
        "pygments.token.string_to_tokentype",
        "pygments.filter.Filter.__init__",
        "<builtin>.set"
    ],
    "pygments.token.string_to_tokentype": [
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "pygments.filters.RaiseOnErrorTokenFilter.__init__": [
        "<builtin>.issubclass",
        "pygments.filter.Filter.__init__"
    ],
    "pygments.filters.VisibleWhitespaceFilter.__init__": [
        "<builtin>.isinstance",
        "pygments.util.get_int_opt",
        "pygments.util.get_bool_opt",
        "<builtin>.setattr",
        "<builtin>.len",
        "pygments.filter.Filter.__init__"
    ],
    "pygments.filters.VisibleWhitespaceFilter.filter": [
        "re.compile",
        "pygments.filters._replace_special"
    ],
    "pygments.filters.VisibleWhitespaceFilter.filter.replacefunc": [],
    "pygments.filters.GobbleFilter.__init__": [
        "pygments.filter.Filter.__init__",
        "pygments.util.get_int_opt"
    ],
    "pygments.filters.GobbleFilter.gobble": [
        "<builtin>.len"
    ],
    "pygments.filters.GobbleFilter.filter": [
        "pygments.filters.GobbleFilter.gobble",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "pygments.filters.TokenMergeFilter.__init__": [
        "pygments.filter.Filter.__init__"
    ],
    "pygments.token._TokenType.split": [
        "<list>.reverse",
        "<list>.append"
    ],
    "pygments.token._TokenType.__contains__": [
        "<builtin>.type",
        "<builtin>.len"
    ],
    "pygments.token._TokenType.__getattr__": [
        "pygments.token._TokenType.__init__",
        "<builtin>.setattr"
    ],
    "pygments.plugin.find_plugin_formatters": [
        "pygments.plugin.iter_entry_points"
    ],
    "pygments.lexers.get_all_lexers": [
        "pygments.plugin.find_plugin_lexers",
        "<map>.values"
    ],
    "pygments.lexers.find_lexer_class": [
        "pygments.lexers._load_lexers",
        "<map>.values",
        "pygments.plugin.find_plugin_lexers"
    ],
    "pygments.lexers.find_lexer_class_by_name": [
        "pygments.lexers._load_lexers",
        "<map>.values",
        "pygments.plugin.find_plugin_lexers"
    ],
    "pygments.lexers.load_lexer_from_file": [
        "<builtin>.exec",
        "<builtin>.open"
    ],
    "pygments.lexers.find_lexer_class_for_filename": [
        "pygments.lexers._load_lexers",
        "<builtin>.isinstance",
        "pygments.util.guess_decode",
        "pygments.plugin.find_plugin_lexers",
        "fnmatch",
        "posixpath.basename",
        "<list>.append",
        "<list>.sort",
        "<map>.values"
    ],
    "pygments.lexers.get_lexer_for_filename": [
        "pygments.lexers.find_lexer_class_for_filename"
    ],
    "pygments.lexers.get_lexer_for_mimetype": [
        "pygments.lexers._load_lexers",
        "<map>.values",
        "pygments.plugin.find_plugin_lexers"
    ],
    "pygments.lexers.guess_lexer": [
        "pygments.modeline.get_filetype_from_buffer",
        "<builtin>.isinstance",
        "pygments.util.guess_decode",
        "pygments.lexers.get_lexer_by_name",
        "pygments.lexers._iter_lexerclasses"
    ],
    "pygments.modeline.get_filetype_from_buffer": [
        "<builtin>.range",
        "<builtin>.len",
        "<str>.splitlines",
        "pygments.modeline.get_filetype_from_line"
    ],
    "pygments.modeline.get_filetype_from_line": [],
    "pygments.lexers._automodule.__getattr__": [
        "pygments.lexers._load_lexers",
        "<builtin>.AttributeError",
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<map>.get"
    ],
    "pygments.style.StyleMeta.__new__": [
        "pygments.style.StyleMeta.__new__.colorformat",
        "<map>.get"
    ],
    "pygments.style.StyleMeta.__new__.colorformat": [
        "<builtin>.len"
    ],
    "pygments.style.StyleMeta.style_for_token": [
        "<builtin>.bool"
    ],
    "pygments.style.StyleMeta.list_styles": [
        "<builtin>.list"
    ],
    "pygments.style.StyleMeta.__iter__": [
        "pygments.style.StyleMeta.style_for_token"
    ],
    "pygments.style.StyleMeta.__len__": [
        "<builtin>.len"
    ],
    "pygments.styles.get_all_styles": [
        "pygments.plugin.find_plugin_styles"
    ],
    "rich.containers.Renderables.__init__": [
        "<builtin>.list"
    ],
    "rich.containers.Renderables.__rich_measure__": [
        "<builtin>.max",
        "rich.measure.Measurement.get"
    ],
    "rich.containers.Renderables.__iter__": [
        "<builtin>.iter"
    ],
    "rich.text.Span.__repr__": [
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "rich.text.Span.split": [
        "<builtin>.min"
    ],
    "rich.text.Span.right_crop": [
        "<builtin>.min"
    ],
    "rich.text.Text.__bool__": [
        "<builtin>.bool"
    ],
    "rich.text.Text.__add__": [
        "rich.text.Text.append",
        "rich.text.Text.copy",
        "<builtin>.isinstance"
    ],
    "rich.text.Text.__eq__": [
        "<builtin>.isinstance"
    ],
    "rich.text.Text.__contains__": [
        "<builtin>.isinstance"
    ],
    "rich.text.Text.__getitem__": [
        "rich.text.Text.__getitem__.get_text_at",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "rich.text.Text.divide",
        "<builtin>.len"
    ],
    "rich.text.Text.__getitem__.get_text_at": [
        "rich.text.Text.__init__"
    ],
    "rich.text.Text.markup": [
        "rich.markup.escape",
        "<list>.sort",
        "rich.markup"
    ],
    "rich.text.Text.styled": [
        "rich.text.Text.stylize",
        "rich.text.Text.__init__"
    ],
    "rich.text.Text.plain": [
        "<builtin>.len"
    ],
    "rich.text.Text.stylize_before": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "rich.text.Text.on": [
        "rich.text.Text.stylize",
        "rich.style.Style.from_meta"
    ],
    "rich.text.Text.get_style_at_offset": [
        "<builtin>.len"
    ],
    "rich.text.Text.highlight_regex": [
        "<builtin>.callable",
        "re.finditer"
    ],
    "rich.text.Text.highlight_words": [
        "re.escape",
        "re.finditer"
    ],
    "rich.text.Text.rstrip_end": [
        "rich.text.Text.right_crop",
        "<builtin>.min",
        "<builtin>.len"
    ],
    "rich.text.Text.set_length": [
        "rich.text.Text.right_crop",
        "rich.text.Text.pad_right",
        "<builtin>.len"
    ],
    "rich.text.Text.pad_right": [
        "<builtin>.len"
    ],
    "rich.text.Text.__rich_measure__": [
        "rich.text.Text.cell_len",
        "<builtin>.max"
    ],
    "rich.text.Text._trim_spans": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "rich.text.Text.pad": [
        "<builtin>.len"
    ],
    "rich.text.Text.pad_left": [
        "<builtin>.len"
    ],
    "rich.text.Text.align": [
        "rich.text.Text.cell_len",
        "rich.text.Text.pad_left",
        "rich.text.Text.pad_right",
        "rich.text.Text.truncate"
    ],
    "rich.text.Text.append_text": [
        "<list>.append",
        "<builtin>.len"
    ],
    "rich.text.Text.fit": [
        "rich.text.Text.split",
        "rich.containers.Lines.__iter__",
        "rich.containers.Lines.__init__"
    ],
    "rich.control.Control.move": [
        "rich.control.Control.move.get_codes",
        "rich.control.Control.__init__"
    ],
    "rich.control.Control.move.get_codes": [
        "<builtin>.abs"
    ],
    "rich.control.Control.move_to_column": [
        "<builtin>.abs",
        "rich.control.Control.__init__"
    ],
    "rich.emoji.Emoji.__init__": [
        "<map>.get"
    ],
    "rich.emoji.Emoji.replace": [
        "rich._emoji_replace._emoji_replace"
    ],
    "rich._emoji_replace._emoji_replace.do_replace": [
        "<map>"
    ],
    "rich.measure.Measurement.normalize": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "rich.padding.Padding.indent": [
        "rich.padding.Padding.__init__"
    ],
    "rich.padding.Padding.__rich_measure__": [
        "rich.measure.Measurement.with_maximum",
        "rich.measure.Measurement.get"
    ],
    "rich.get_console": [
        "rich.console",
        "rich.console.Console.__init__"
    ],
    "rich.reconfigure": [
        "rich.get_console",
        "rich.console",
        "rich.console.Console.__init__"
    ],
    "rich.print": [
        "rich.get_console",
        "rich.console",
        "rich.console.Console.__init__"
    ],
    "rich.print_json": [
        "rich.console.Console.print_json",
        "rich.get_console"
    ],
    "rich.inspect": [
        "rich._inspect.Inspect.__init__",
        "rich._inspect",
        "rich.get_console"
    ],
    "rich._extension.load_ipython_extension": [
        "rich.pretty.install",
        "rich.traceback.install",
        "rich.traceback",
        "rich.pretty"
    ],
    "rich.pretty.install": [
        "rich.pretty.install.RichFormatter",
        "rich.get_console",
        "rich"
    ],
    "rich.pretty.install.RichFormatter": [],
    "importlib.metadata.EntryPoint.load": [
        "<builtin>.filter",
        "importlib.import_module",
        "functools.reduce",
        "pathlib.PurePath.match"
    ],
    "importlib.metadata.EntryPoint.extras": [
        "<builtin>.list",
        "re.finditer",
        "pathlib.PurePath.match"
    ],
    "importlib.metadata.EntryPoint._from_text": [
        "configparser.RawConfigParser.readfp",
        "_io.StringIO",
        "importlib.metadata.EntryPoint._from_config",
        "configparser.RawConfigParser.read_string"
    ],
    "configparser.RawConfigParser.read_string": [
        "configparser.RawConfigParser.read_file",
        "_io.StringIO"
    ],
    "configparser.RawConfigParser.read_file": [
        "configparser.RawConfigParser._read"
    ],
    "configparser.RawConfigParser._read": [
        "configparser.RawConfigParser.optionxform",
        "configparser.DuplicateOptionError.__init__",
        "<map>.items",
        "<builtin>.set",
        "configparser.RawConfigParser._join_multiline_values",
        "configparser.DuplicateSectionError.__init__",
        "<builtin>.enumerate",
        "pathlib.PurePath.match",
        "configparser.MissingSectionHeaderError.__init__",
        "<str>.rstrip",
        "configparser.SectionProxy.__init__",
        "<builtin>.min",
        "configparser.RawConfigParser._handle_error",
        "docutils.frontend.ConfigParser.optionxform",
        "configparser.ParsingError.__init__"
    ],
    "configparser.RawConfigParser._handle_error": [
        "<builtin>.repr",
        "configparser.ParsingError.append",
        "configparser.ParsingError.__init__"
    ],
    "configparser.ParsingError.__init__": [
        "configparser.Error.__init__",
        "<builtin>.ValueError"
    ],
    "configparser.Error.__init__": [],
    "configparser.ParsingError.append": [
        "<list>.append"
    ],
    "configparser.RawConfigParser.optionxform": [
        "<str>.lower"
    ],
    "configparser.DuplicateOptionError.__init__": [
        "<list>.insert",
        "<list>.extend",
        "configparser.Error.__init__",
        "<list>.append"
    ],
    "configparser.MissingSectionHeaderError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.SectionProxy.__init__": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "configparser.DuplicateSectionError.__init__": [
        "<list>.insert",
        "<list>.extend",
        "configparser.Error.__init__",
        "<list>.append"
    ],
    "configparser.RawConfigParser._join_multiline_values": [
        "configparser.Interpolation.before_read",
        "<builtin>.isinstance",
        "<str>.rstrip"
    ],
    "configparser.RawConfigParser.readfp": [
        "configparser.RawConfigParser.read_file",
        "warnings.warn"
    ],
    "importlib.metadata.EntryPoint._from_config": [
        "configparser.RawConfigParser.sections",
        "configparser.RawConfigParser.items"
    ],
    "configparser.RawConfigParser.sections": [
        "<builtin>.list"
    ],
    "configparser.RawConfigParser.items": [
        "configparser.RawConfigParser.optionxform",
        "<builtin>.super",
        "<builtin>.list",
        "configparser.RawConfigParser.items.<lambda1>",
        "configparser.NoSectionError.__init__",
        "docutils.frontend.ConfigParser.optionxform"
    ],
    "configparser.NoSectionError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.RawConfigParser.items.<lambda1>": [
        "configparser.BasicInterpolation.before_get",
        "configparser.Interpolation.before_get"
    ],
    "importlib.metadata.EntryPoint.__iter__": [
        "<builtin>.iter"
    ],
    "importlib.metadata.PackagePath.read_text": [
        "importlib.metadata.PackagePath.locate"
    ],
    "importlib.metadata.PackagePath.locate": [
        "importlib.metadata.Distribution.locate_file"
    ],
    "importlib.metadata.PackagePath.read_binary": [
        "importlib.metadata.PackagePath.locate"
    ],
    "importlib.metadata.Distribution.from_name": [
        "importlib.metadata.Distribution._discover_resolvers",
        "<builtin>.next",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.Distribution.at": [
        "importlib.metadata.PathDistribution.__init__"
    ],
    "importlib.metadata.PathDistribution.__init__": [],
    "importlib.metadata.Distribution.metadata": [
        "importlib.metadata.Distribution.read_text",
        "email.message_from_string"
    ],
    "importlib.metadata.Distribution.read_text": [],
    "email.message_from_string": [
        "email.parser.Parser.parsestr",
        "email.parser.Parser.__init__",
        "email.parser"
    ],
    "email.parser.Parser.__init__": [],
    "email.parser.Parser.parsestr": [
        "email.parser.Parser.parse",
        "_io.StringIO"
    ],
    "email.parser.Parser.parse": [
        "email.feedparser.FeedParser.__init__",
        "email.feedparser.FeedParser.feed",
        "email.feedparser.FeedParser.close",
        "email.feedparser.FeedParser._set_headersonly"
    ],
    "email.feedparser.FeedParser.__init__": [
        "email.message",
        "email.feedparser.BufferedSubFile.__init__",
        "email.feedparser.FeedParser._parsegen"
    ],
    "email.feedparser.BufferedSubFile.__init__": [
        "_io.StringIO",
        "_collections.deque"
    ],
    "email.feedparser.FeedParser._parsegen": [
        "<builtin>.isinstance",
        "email.feedparser.BufferedSubFile.push_eof_matcher",
        "email.message.Message.get_boundary",
        "<builtin>.str",
        "<list>.append",
        "email.message.Message.get_content_maintype",
        "email.feedparser.FeedParser._pop_message",
        "email.feedparser.BufferedSubFile.pop_eof_matcher",
        "email.feedparser.BufferedSubFile.readline",
        "email.message.Message.set_payload",
        "pathlib.PurePath.match",
        "email.feedparser.BufferedSubFile.unreadline",
        "re.compile",
        "re.escape",
        "email.feedparser.FeedParser._parsegen",
        "email.message.Message.get",
        "email.feedparser.FeedParser._new_message",
        "email.message.Message.get_content_type",
        "email.feedparser.BufferedSubFile.__iter__",
        "email.feedparser.BufferedSubFile.__next__",
        "email.feedparser.FeedParser._parse_headers",
        "<builtin>.len"
    ],
    "email.feedparser.FeedParser._new_message": [
        "email.message.Message.__init__",
        "email.message.Message.get_content_type",
        "email.message.Message.set_default_type",
        "<list>.append"
    ],
    "email.message.Message.__init__": [],
    "email.message.Message.set_default_type": [],
    "email.feedparser.FeedParser._parse_headers": [
        "<list>.append",
        "email.feedparser.BufferedSubFile.unreadline",
        "email.message.Message.set_raw",
        "email.message.Message.set_unixfrom",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "email.message.Message.set_raw": [
        "<list>.append"
    ],
    "email.message.Message.set_unixfrom": [],
    "email.message.Message.set_payload": [
        "email.message.Message.set_charset",
        "email.charset.Charset.__init__",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "email.message.Message.set_charset": [
        "email.message.Message.add_header",
        "<builtin>.isinstance",
        "email.encoders.encode_7or8bit",
        "<map>",
        "email.charset.Charset.body_encode",
        "email.message.Message.set_param",
        "email.charset.Charset.get_body_encoding",
        "email.message.Message.del_param",
        "email.charset.Charset.get_output_charset",
        "email.charset.Charset.__init__"
    ],
    "email.message.Message.del_param": [
        "email.message._formatparam",
        "email.message.Message.get",
        "<str>.lower",
        "email.message.Message.get_params"
    ],
    "email.message.Message.get_params": [
        "email.message._unquotevalue",
        "email.message.Message._get_params_preserve",
        "<builtin>.object"
    ],
    "email.message.Message._get_params_preserve": [
        "email.utils.decode_params",
        "<builtin>.object",
        "email.message._parseparam",
        "email.message.Message.get",
        "<str>.strip",
        "<list>.append"
    ],
    "email.message.Message.get": [
        "email._policybase.Compat32.header_fetch_parse",
        "<str>.lower",
        "email.policy.EmailPolicy.header_fetch_parse"
    ],
    "email._policybase.Compat32.header_fetch_parse": [
        "email._policybase.Compat32._sanitize_header"
    ],
    "email._policybase.Compat32._sanitize_header": [
        "<builtin>.isinstance",
        "email.utils._has_surrogates",
        "email.header.Header.__init__"
    ],
    "email.utils._has_surrogates": [],
    "email.header.Header.__init__": [
        "email.charset.Charset.__init__",
        "<builtin>.len",
        "<builtin>.isinstance",
        "email.header.Header.append"
    ],
    "email.header.Header.append": [
        "email.charset.Charset.__init__",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "email.message._parseparam": [
        "<str>.find",
        "<builtin>.len",
        "<builtin>.str",
        "<str>.count",
        "<list>.append"
    ],
    "email.utils.decode_params": [
        "<list>.append",
        "<str>.endswith",
        "<map>.items",
        "email._parseaddr.quote",
        "email.utils.decode_rfc2231",
        "<builtin>.int",
        "<list>.pop",
        "<map>.setdefault",
        "email.utils.unquote",
        "pathlib.PurePath.match"
    ],
    "email.utils.unquote": [
        "<str>.endswith",
        "<str>.startswith",
        "<builtin>.len"
    ],
    "email._parseaddr.quote": [
        "<str>.replace"
    ],
    "email.utils.decode_rfc2231": [
        "<builtin>.len"
    ],
    "email.message._unquotevalue": [
        "email.utils.unquote",
        "<builtin>.isinstance"
    ],
    "email.message._formatparam": [
        "email.utils.encode_rfc2231",
        "email._parseaddr.quote",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "email.utils.encode_rfc2231": [],
    "email.message.Message.add_header": [
        "<list>.insert",
        "<list>.append"
    ],
    "email.charset.Charset.get_output_charset": [],
    "email.message.Message.set_param": [
        "<builtin>.isinstance",
        "email.message._formatparam",
        "email.message.Message.get_param",
        "email.message.Message.get",
        "<str>.lower",
        "email.message.Message.get_params",
        "email.message.Message.replace_header"
    ],
    "email.message.Message.get_param": [
        "email.message._unquotevalue",
        "email.message.Message._get_params_preserve",
        "<str>.lower"
    ],
    "email.message.Message.replace_header": [
        "<str>.lower",
        "<builtin>.zip",
        "<builtin>.len",
        "email.policy.EmailPolicy.header_store_parse",
        "<builtin>.range",
        "email._policybase.Compat32.header_store_parse"
    ],
    "email._policybase.Compat32.header_store_parse": [],
    "email.charset.Charset.body_encode": [
        "<builtin>.isinstance"
    ],
    "email.charset.Charset.get_body_encoding": [],
    "email.encoders.encode_7or8bit": [
        "email.message.Message.get_payload"
    ],
    "email.message.Message.get_payload": [
        "<builtin>.isinstance",
        "email.message.Message.is_multipart",
        "_io.BytesIO",
        "email._encoded_words.decode_b",
        "<builtin>.TypeError",
        "email.utils._has_surrogates",
        "quopri.decodestring",
        "email.message.Message.get_param",
        "email.message.Message.get",
        "email._policybase.Policy.handle_defect",
        "<builtin>.type",
        "<builtin>.str",
        "uu.decode",
        "<str>.splitlines"
    ],
    "email.message.Message.is_multipart": [
        "<builtin>.isinstance"
    ],
    "email._encoded_words.decode_b": [
        "base64.b64decode",
        "<builtin>.len"
    ],
    "email._policybase.Policy.handle_defect": [
        "email._policybase.Policy.register_defect"
    ],
    "email._policybase.Policy.register_defect": [
        "<list>.append"
    ],
    "quopri.decodestring": [
        "_io.BytesIO",
        "quopri.decode",
        "io"
    ],
    "email.message.Message.get_content_type": [
        "email.message.Message.get_default_type",
        "email.message.Message.get",
        "<builtin>.object",
        "email.message._splitparam"
    ],
    "email.message.Message.get_default_type": [],
    "email.message._splitparam": [
        "<builtin>.str"
    ],
    "email.feedparser.FeedParser._pop_message": [
        "<list>.pop"
    ],
    "email.message.Message.get_content_maintype": [
        "email.message.Message.get_content_type"
    ],
    "email.message.Message.get_boundary": [
        "email.message.Message.get_param",
        "email.utils.collapse_rfc2231_value",
        "<str>.rstrip",
        "<builtin>.object"
    ],
    "email.utils.collapse_rfc2231_value": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.len",
        "<builtin>.str",
        "email.utils.unquote"
    ],
    "email.feedparser.FeedParser._set_headersonly": [],
    "email.feedparser.FeedParser.feed": [
        "email.feedparser.FeedParser._call_parse",
        "email.feedparser.BufferedSubFile.push"
    ],
    "email.feedparser.BufferedSubFile.push": [
        "email.feedparser.BufferedSubFile.pushlines"
    ],
    "email.feedparser.BufferedSubFile.pushlines": [],
    "email.feedparser.FeedParser._call_parse": [],
    "email.feedparser.FeedParser.close": [
        "email.feedparser.FeedParser._call_parse",
        "email.feedparser.BufferedSubFile.close",
        "email.feedparser.FeedParser._pop_message"
    ],
    "email.feedparser.BufferedSubFile.close": [
        "email.feedparser.BufferedSubFile.pushlines"
    ],
    "importlib.metadata.Distribution.entry_points": [
        "importlib.metadata.Distribution.read_text",
        "importlib.metadata.EntryPoint._from_text"
    ],
    "importlib.metadata.Distribution.files": [
        "importlib.metadata.Distribution._read_files_distinfo",
        "importlib.metadata.Distribution._read_files_egginfo",
        "<builtin>.list",
        "itertools.starmap"
    ],
    "importlib.metadata.Distribution._read_files_distinfo": [
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution._read_files_egginfo": [
        "importlib.metadata.Distribution.read_text",
        "<builtin>.map"
    ],
    "importlib.metadata.Distribution.requires": [
        "importlib.metadata.Distribution._read_egg_info_reqs",
        "importlib.metadata.Distribution._read_dist_info_reqs",
        "<builtin>.list"
    ],
    "importlib.metadata.Distribution._read_dist_info_reqs": [],
    "importlib.metadata.Distribution._read_egg_info_reqs": [
        "importlib.metadata.Distribution._deps_from_requires_text",
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution._deps_from_requires_text": [
        "importlib.metadata.Distribution._read_sections",
        "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs",
        "<builtin>.list",
        "operator.itemgetter.__init__",
        "<builtin>.map"
    ],
    "importlib.metadata.Distribution._read_sections": [
        "<builtin>.filter",
        "<builtin>.locals",
        "re.match"
    ],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs": [
        "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition"
    ],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition": [
        "<builtin>.filter",
        "<builtin>.list"
    ],
    "importlib.metadata.DistributionFinder.Context.path": [
        "<builtin>.vars"
    ],
    "importlib.metadata.FastPath.__init__": [
        "ntpath.basename",
        "posixpath.basename"
    ],
    "importlib.metadata.FastPath.children": [
        "contextlib.suppress.__init__"
    ],
    "importlib.metadata.FastPath.zip_children": [
        "zipfile.FastLookup.namelist",
        "posixpath.split",
        "zipfile.Path.__init__",
        "zipfile.CompleteDirs.namelist"
    ],
    "zipfile.Path.__init__": [
        "zipfile.CompleteDirs.make"
    ],
    "zipfile.CompleteDirs.make": [
        "<builtin>.vars",
        "<builtin>.isinstance"
    ],
    "zipfile.FastLookup.namelist": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "zipfile.CompleteDirs.namelist": [
        "zipfile.CompleteDirs._implied_dirs",
        "<builtin>.super",
        "<builtin>.list"
    ],
    "zipfile.CompleteDirs._implied_dirs": [
        "zipfile._difference",
        "<builtin>.map"
    ],
    "zipfile._difference": [
        "<builtin>.set"
    ],
    "importlib.metadata.FastPath.search": [
        "importlib.metadata.FastPath.children",
        "importlib.metadata.FastPath.is_egg",
        "importlib.metadata.FastPath.joinpath"
    ],
    "importlib.metadata.FastPath.is_egg": [],
    "importlib.metadata.FastPath.joinpath": [],
    "importlib.metadata.MetadataPathFinder.find_distributions": [
        "importlib.metadata.MetadataPathFinder._search_paths",
        "<builtin>.map"
    ],
    "importlib.metadata.MetadataPathFinder._search_paths": [
        "importlib.metadata.Prepared.__init__",
        "<builtin>.map"
    ],
    "importlib.metadata.Prepared.__init__": [],
    "importlib.metadata.PathDistribution.read_text": [
        "contextlib.suppress.__init__"
    ],
    "importlib.metadata.distribution": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.metadata": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.version": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.files": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.requires": [
        "importlib.metadata.distribution"
    ],
    "csv.Dialect.__init__": [
        "csv.Dialect._validate"
    ],
    "csv.Dialect._validate": [
        "<builtin>.str"
    ],
    "csv.DictReader.fieldnames": [
        "<builtin>.next"
    ],
    "csv.DictReader.__next__": [
        "<builtin>.dict",
        "<builtin>.next",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "csv.DictWriter.__init__": [
        "<str>.lower",
        "<builtin>.ValueError"
    ],
    "csv.DictWriter.writeheader": [
        "<builtin>.dict",
        "csv.DictWriter.writerow",
        "<builtin>.zip"
    ],
    "csv.DictWriter.writerow": [
        "csv.DictWriter._dict_to_list"
    ],
    "csv.DictWriter._dict_to_list": [
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "csv.DictWriter.writerows": [
        "<builtin>.map"
    ],
    "email.message_from_bytes": [
        "email.parser.BytesParser.__init__",
        "email.parser.BytesParser.parsebytes",
        "email.parser"
    ],
    "email.parser.BytesParser.__init__": [
        "email.parser.Parser.__init__"
    ],
    "email.parser.BytesParser.parsebytes": [
        "email.parser.Parser.parsestr"
    ],
    "email.message_from_file": [
        "email.parser.Parser.parse",
        "email.parser.Parser.__init__",
        "email.parser"
    ],
    "email.message_from_binary_file": [
        "email.parser.BytesParser.__init__",
        "email.parser.BytesParser.parse",
        "email.parser"
    ],
    "email.parser.BytesParser.parse": [
        "_io.TextIOWrapper",
        "email.parser.Parser.parse"
    ],
    "pathlib._ignore_error": [
        "<builtin>.getattr"
    ],
    "pathlib._Flavour.parse_parts": [
        "<list>.reverse",
        "<builtin>.reversed",
        "pathlib._WindowsFlavour.splitroot",
        "<list>.append"
    ],
    "pathlib._WindowsFlavour.splitroot": [
        "<builtin>.len",
        "pathlib._WindowsFlavour._split_extended_path"
    ],
    "pathlib._WindowsFlavour._split_extended_path": [
        "<str>.startswith"
    ],
    "pathlib._WindowsFlavour.compile_pattern": [
        "re.compile",
        "fnmatch.translate"
    ],
    "pathlib._WindowsFlavour.resolve": [
        "<list>.append",
        "posixpath.split",
        "ntpath.split",
        "<builtin>.str",
        "pathlib._WindowsFlavour._ext_to_normal",
        "nt._getfinalpathname"
    ],
    "nt._getfinalpathname": [],
    "pathlib._WindowsFlavour._ext_to_normal": [
        "pathlib._WindowsFlavour._split_extended_path"
    ],
    "pathlib._WindowsFlavour.make_uri": [
        "urllib.parse.quote_from_bytes",
        "<builtin>.len"
    ],
    "pathlib._WindowsFlavour.gethomedir": [
        "<builtin>.RuntimeError",
        "pathlib._Flavour.parse_parts"
    ],
    "pathlib._PosixFlavour.splitroot": [
        "<builtin>.len"
    ],
    "pathlib._PosixFlavour.compile_pattern": [
        "re.compile",
        "fnmatch.translate"
    ],
    "pathlib._PosixFlavour.resolve": [
        "pathlib._PosixFlavour.resolve._resolve",
        "<builtin>.str"
    ],
    "pathlib._PosixFlavour.resolve._resolve": [
        "<builtin>.RuntimeError",
        "<str>.rpartition"
    ],
    "pathlib._PosixFlavour.make_uri": [
        "urllib.parse.quote_from_bytes",
        "<builtin>.bytes"
    ],
    "pathlib._PosixFlavour.gethomedir": [
        "<builtin>.RuntimeError"
    ],
    "pathlib._NormalAccessor.lchmod": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._NormalAccessor.link_to": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._Selector.select_from": [
        "pathlib._WildcardSelector._select_from",
        "<builtin>.iter",
        "pathlib._RecursiveWildcardSelector._select_from",
        "pathlib._PreciseSelector._select_from",
        "<builtin>.type"
    ],
    "pathlib._PreciseSelector._select_from": [
        "pathlib._WildcardSelector._select_from",
        "pathlib._RecursiveWildcardSelector._select_from",
        "pathlib._TerminatingSelector._select_from",
        "pathlib.Path._make_child_relpath",
        "pathlib._PreciseSelector._select_from"
    ],
    "pathlib._TerminatingSelector._select_from": [],
    "pathlib._RecursiveWildcardSelector._select_from": [
        "pathlib._RecursiveWildcardSelector._iterate_directories",
        "pathlib._WildcardSelector._select_from",
        "<builtin>.set",
        "pathlib._RecursiveWildcardSelector._select_from",
        "pathlib._TerminatingSelector._select_from",
        "pathlib._PreciseSelector._select_from"
    ],
    "pathlib._RecursiveWildcardSelector._iterate_directories": [
        "pathlib._RecursiveWildcardSelector._iterate_directories",
        "pathlib._ignore_error",
        "pathlib.Path._make_child_relpath",
        "<builtin>.list"
    ],
    "pathlib._WildcardSelector._select_from": [
        "pathlib._WildcardSelector._select_from",
        "<builtin>.list",
        "pathlib._ignore_error",
        "pathlib._RecursiveWildcardSelector._select_from",
        "pathlib._TerminatingSelector._select_from",
        "pathlib.Path._make_child_relpath",
        "pathlib._PreciseSelector._select_from"
    ],
    "pathlib._PathParents.__init__": [
        "<builtin>.type"
    ],
    "pathlib._PathParents.__len__": [
        "<builtin>.len"
    ],
    "pathlib._PathParents.__getitem__": [
        "<builtin>.IndexError",
        "<builtin>.len"
    ],
    "pathlib.PurePath.__new__": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath.__reduce__": [
        "<builtin>.tuple"
    ],
    "pathlib.PurePath._parse_args": [
        "<builtin>.isinstance",
        "os._fspath",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<list>.append"
    ],
    "pathlib.PurePath._make_child": [
        "pathlib.PurePath._from_parsed_parts",
        "pathlib.PurePath._parse_args"
    ],
    "pathlib.PurePath._from_parsed_parts": [],
    "pathlib.PurePath.__str__": [
        "pathlib.PurePath._format_parsed_parts"
    ],
    "pathlib.PurePath._format_parsed_parts": [],
    "pathlib.PurePath.__fspath__": [
        "<builtin>.str"
    ],
    "pathlib.PurePath.as_posix": [
        "<builtin>.str"
    ],
    "pathlib.PurePath.__bytes__": [
        "os._fscodec.fsdecode",
        "os._fscodec.fsencode"
    ],
    "pathlib.PurePath.__repr__": [
        "pathlib.PurePath.as_posix"
    ],
    "pathlib.PurePath.as_uri": [
        "pathlib.PurePath.is_absolute",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.__eq__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "pathlib.PurePath.__lt__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__le__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__gt__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__ge__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.name": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.suffix": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.stem": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.with_name": [
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "pathlib.PurePath.with_suffix": [
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "pathlib.PurePath.relative_to": [
        "<builtin>.len",
        "<builtin>.TypeError",
        "pathlib.PurePath._format_parsed_parts",
        "pathlib.PurePath._from_parsed_parts",
        "pathlib.PurePath._parse_args",
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.parts": [
        "<builtin>.tuple"
    ],
    "pathlib.PurePath.joinpath": [
        "pathlib.PurePath._make_child"
    ],
    "pathlib.PurePath.__truediv__": [
        "pathlib.PurePath._make_child"
    ],
    "pathlib.PurePath.__rtruediv__": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath.parent": [
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.len"
    ],
    "pathlib.PurePath.parents": [
        "pathlib._PathParents.__init__"
    ],
    "pathlib.PurePath.match": [
        "<builtin>.reversed",
        "<builtin>.zip",
        "fnmatch.fnmatchcase",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "pathlib.Path.__new__": [
        "<builtin>.NotImplementedError",
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.Path._make_child_relpath": [
        "pathlib.PurePath._from_parsed_parts"
    ],
    "pathlib.Path.__enter__": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path._raw_open": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.samefile": [
        "genericpath.samestat",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.iterdir": [
        "pathlib.Path._make_child_relpath",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.glob": [
        "<builtin>.NotImplementedError",
        "<builtin>.tuple",
        "pathlib._Selector.select_from",
        "<builtin>.ValueError",
        "pathlib._make_selector"
    ],
    "pathlib.Path.rglob": [
        "<builtin>.NotImplementedError",
        "pathlib._Selector.select_from",
        "<builtin>.tuple",
        "pathlib._make_selector"
    ],
    "pathlib.Path.owner": [
        "pathlib.Path.stat"
    ],
    "pathlib.Path.group": [
        "grp",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.open": [
        "pathlib.Path._raise_closed",
        "_io.open"
    ],
    "pathlib.Path.read_bytes": [
        "pathlib.Path.open"
    ],
    "pathlib.Path.read_text": [
        "pathlib.Path.open"
    ],
    "pathlib.Path.write_bytes": [
        "pathlib.Path.open",
        "<builtin>.memoryview"
    ],
    "pathlib.Path.write_text": [
        "<builtin>.TypeError",
        "pathlib.Path.open",
        "<builtin>.isinstance"
    ],
    "pathlib.Path.touch": [
        "pathlib.Path._raw_open",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.mkdir": [
        "pathlib.Path._raise_closed",
        "pathlib.Path.mkdir",
        "pathlib.Path.is_dir"
    ],
    "pathlib.Path.is_dir": [
        "pathlib._ignore_error",
        "stat.S_ISDIR",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.chmod": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.lchmod": [
        "pathlib.Path._raise_closed",
        "pathlib._NormalAccessor.lchmod"
    ],
    "pathlib.Path.unlink": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.rmdir": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.lstat": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.link_to": [
        "pathlib._NormalAccessor.link_to",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.rename": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.replace": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.symlink_to": [
        "pathlib._NormalAccessor.symlink",
        "pathlib.Path._raise_closed"
    ],
    "pathlib._NormalAccessor.symlink": [],
    "pathlib.Path.exists": [
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_file": [
        "stat.S_ISREG",
        "pathlib.Path.stat",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.is_mount": [
        "pathlib.Path.is_dir",
        "pathlib.Path.stat",
        "pathlib.Path.exists"
    ],
    "pathlib.Path.is_symlink": [
        "stat.S_ISLNK",
        "pathlib.Path.lstat",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.is_block_device": [
        "pathlib._ignore_error",
        "stat.S_ISBLK",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_char_device": [
        "pathlib._ignore_error",
        "stat.S_ISCHR",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_fifo": [
        "pathlib._ignore_error",
        "pathlib.Path.stat",
        "stat.S_ISFIFO"
    ],
    "pathlib.Path.is_socket": [
        "pathlib._ignore_error",
        "stat.S_ISSOCK",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.expanduser": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.WindowsPath.owner": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib.WindowsPath.group": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib.WindowsPath.is_mount": [
        "<builtin>.NotImplementedError"
    ],
    "urllib.parse._NetlocResultMixinBase.hostname": [
        "<builtin>.isinstance"
    ],
    "urllib.parse._NetlocResultMixinBase.port": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "urllib.parse.SplitResult.geturl": [
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.urlunsplit": [
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.ParseResult.geturl": [
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.urlunparse": [
        "urllib.parse.urlunsplit",
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.SplitResultBytes.geturl": [
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.ParseResultBytes.geturl": [
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.urljoin": [
        "urllib.parse.urlparse",
        "<list>.pop",
        "urllib.parse.urlunparse",
        "<list>.append",
        "<builtin>.filter",
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.urldefrag": [
        "urllib.parse.urlunparse",
        "urllib.parse.urlparse",
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.unquote_to_bytes": [
        "<builtin>.isinstance",
        "<list>",
        "<builtin>.len"
    ],
    "urllib.parse.parse_qs": [
        "urllib.parse.parse_qsl"
    ],
    "urllib.parse.parse_qsl": [
        "<builtin>.len",
        "<list>.append",
        "urllib.parse.unquote",
        "<builtin>.ValueError",
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.unquote_plus": [
        "urllib.parse.unquote"
    ],
    "urllib.parse.Quoter.__repr__": [
        "<builtin>.dict"
    ],
    "urllib.parse.Quoter.__missing__": [
        "<builtin>.chr"
    ],
    "urllib.parse.quote_plus": [
        "<str>.replace",
        "<builtin>.isinstance",
        "urllib.parse.quote"
    ],
    "urllib.parse.urlencode": [
        "<list>.append",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.TypeError",
        "<builtin>.str",
        "urllib.parse.quote_plus",
        "<builtin>.hasattr"
    ],
    "urllib.parse.to_bytes": [
        "urllib.parse._to_bytes",
        "warnings.warn"
    ],
    "urllib.parse._to_bytes": [
        "<builtin>.repr",
        "<builtin>.isinstance",
        "<builtin>.UnicodeError"
    ],
    "<builtin>.UnicodeError": [],
    "urllib.parse.unwrap": [
        "<builtin>.str"
    ],
    "urllib.parse.splittype": [
        "warnings.warn",
        "urllib.parse._splittype"
    ],
    "urllib.parse._splittype": [
        "re.compile",
        "<str>.lower",
        "pathlib.PurePath.match"
    ],
    "urllib.parse.splithost": [
        "urllib.parse._splithost",
        "warnings.warn"
    ],
    "urllib.parse._splithost": [
        "re.compile",
        "pathlib.PurePath.match"
    ],
    "urllib.parse.splituser": [
        "urllib.parse._splituser",
        "warnings.warn"
    ],
    "urllib.parse._splituser": [
        "<str>.rpartition"
    ],
    "urllib.parse.splitpasswd": [
        "urllib.parse._splitpasswd",
        "warnings.warn"
    ],
    "urllib.parse._splitpasswd": [
        "<str>.partition"
    ],
    "urllib.parse.splitport": [
        "urllib.parse._splitport",
        "warnings.warn"
    ],
    "urllib.parse._splitport": [
        "re.compile"
    ],
    "urllib.parse.splitnport": [
        "urllib.parse._splitnport",
        "warnings.warn"
    ],
    "urllib.parse._splitnport": [
        "<builtin>.int"
    ],
    "urllib.parse.splitquery": [
        "warnings.warn",
        "urllib.parse._splitquery"
    ],
    "urllib.parse._splitquery": [],
    "urllib.parse.splittag": [
        "urllib.parse._splittag",
        "warnings.warn"
    ],
    "urllib.parse._splittag": [],
    "urllib.parse.splitattr": [
        "urllib.parse._splitattr",
        "warnings.warn"
    ],
    "urllib.parse._splitattr": [],
    "urllib.parse.splitvalue": [
        "urllib.parse._splitvalue",
        "warnings.warn"
    ],
    "urllib.parse._splitvalue": [],
    "zipfile._strip_extra": [
        "<list>.append",
        "<builtin>.len"
    ],
    "zipfile.ZipInfo.__repr__": [
        "zipfile.ZipInfo.is_dir",
        "<list>.append"
    ],
    "zipfile._gen_crc": [
        "<builtin>.range"
    ],
    "zipfile.LZMACompressor._init": [
        "<builtin>.len"
    ],
    "zipfile.LZMACompressor.compress": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMACompressor.flush": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMADecompressor.decompress": [
        "<builtin>.len"
    ],
    "zipfile._Tellable.flush": [
        "zipfile._Tellable.flush"
    ],
    "zipfile._ZipDecrypter.decrypter": [
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.bytearray",
        "<builtin>.bytes"
    ],
    "zipfile.ZipExtFile.__repr__": [
        "<list>.append"
    ],
    "zipfile.ZipExtFile.peek": [
        "zipfile.ZipExtFile.read",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile.read": [
        "zipfile.ZipExtFile._read1",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile._read1": [
        "zipfile.ZipExtFile._update_crc",
        "zipfile.LZMADecompressor.decompress",
        "<builtin>.len",
        "<builtin>.max",
        "zipfile.ZipExtFile._read2"
    ],
    "zipfile.ZipExtFile._read2": [
        "<builtin>.max",
        "zipfile._SharedFile.read",
        "zipfile._ZipDecrypter.decrypter",
        "<builtin>.len",
        "<builtin>.min"
    ],
    "zipfile.ZipExtFile._update_crc": [],
    "zipfile.ZipExtFile.read1": [
        "zipfile.ZipExtFile._read1",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile.close": [
        "zipfile._SharedFile.close"
    ],
    "zipfile.ZipExtFile.seek": [
        "zipfile._SharedFile.seek",
        "zipfile.ZipExtFile._init_decrypter",
        "_io.UnsupportedOperation",
        "zipfile.ZipExtFile.tell",
        "<builtin>.len",
        "zipfile._get_decompressor",
        "<builtin>.min",
        "zipfile.ZipExtFile.read",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipExtFile.tell": [
        "_io.UnsupportedOperation",
        "<builtin>.len"
    ],
    "zipfile._SharedFile.seek": [],
    "zipfile._ZipWriteFile.write": [
        "zipfile.LZMACompressor.compress",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "zipfile._ZipWriteFile.close": [
        "<list>.append",
        "<builtin>.super",
        "zipfile.ZipInfo.FileHeader",
        "<builtin>.len",
        "<builtin>.RuntimeError",
        "zipfile.LZMACompressor.flush"
    ],
    "zipfile.ZipFile.__repr__": [
        "<list>.append"
    ],
    "zipfile.ZipFile.setpassword": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "zipfile.ZipFile.extract": [
        "os._fspath",
        "zipfile.ZipFile._extract_member"
    ],
    "zipfile.ZipFile.writestr": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "zipfile.ZipInfo.__init__",
        "<builtin>.len"
    ],
    "zipfile.ZipFile.__del__": [
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile._write_end_record": [
        "<list>.append",
        "zipfile._Tellable.tell",
        "zipfile._Tellable.write",
        "zipfile._Tellable.flush",
        "zipfile.ZipFile.write",
        "zipfile._strip_extra",
        "<builtin>.min",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "<builtin>.len",
        "<builtin>.print",
        "<builtin>.max"
    ],
    "zipfile.PyZipFile.__init__": [
        "zipfile.ZipFile.__init__"
    ],
    "zipfile.PyZipFile.writepy": [
        "posixpath.splitext",
        "zipfile.PyZipFile._get_codename",
        "os._fspath",
        "genericpath.isdir",
        "posixpath.join",
        "ntpath.splitext",
        "zipfile.ZipFile.write",
        "posixpath.split",
        "ntpath.split",
        "<builtin>.sorted",
        "ntpath.join",
        "nt._isdir",
        "genericpath.isfile",
        "zipfile.PyZipFile.writepy",
        "<builtin>.print",
        "<builtin>.RuntimeError"
    ],
    "zipfile.PyZipFile._get_codename": [
        "zipfile.PyZipFile._get_codename._compile",
        "posixpath.split",
        "ntpath.split",
        "genericpath.isfile",
        "<builtin>.ValueError"
    ],
    "zipfile.PyZipFile._get_codename._compile": [
        "py_compile.compile",
        "py_compile",
        "<builtin>.print"
    ],
    "py_compile": [
        "importlib._bootstrap_external",
        "importlib.util",
        "traceback",
        "posixpath",
        "enum",
        "os",
        "py_compile.PyCompileError",
        "py_compile.PycInvalidationMode",
        "py_compile.main",
        "importlib.machinery"
    ],
    "py_compile.PyCompileError": [],
    "py_compile.PycInvalidationMode": [],
    "py_compile.main": [
        "codecs.StreamRecoder.write",
        "<builtin>.compile",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "codecs.StreamRecoder.readline"
    ],
    "py_compile.compile": [
        "posixpath.islink",
        "codecs.StreamRecoder.write",
        "posixpath.dirname",
        "ntpath.islink",
        "os.makedirs",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "genericpath.isfile",
        "py_compile._get_default_invalidation_mode",
        "py_compile.PyCompileError.__init__",
        "<builtin>.FileExistsError",
        "ntpath.dirname",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "genericpath.exists"
    ],
    "py_compile._get_default_invalidation_mode": [],
    "py_compile.PyCompileError.__init__": [
        "<str>.replace",
        "traceback.format_exception_only"
    ],
    "zipfile._parents": [
        "zipfile._ancestry"
    ],
    "zipfile._ancestry": [
        "posixpath.split"
    ],
    "zipfile.CompleteDirs._name_set": [
        "zipfile.FastLookup.namelist",
        "<builtin>.set",
        "zipfile.CompleteDirs.namelist"
    ],
    "zipfile.CompleteDirs.resolve_dir": [
        "zipfile.CompleteDirs._name_set",
        "zipfile.FastLookup._name_set"
    ],
    "zipfile.FastLookup._name_set": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "zipfile.Path.name": [
        "posixpath.basename",
        "<str>.rstrip"
    ],
    "zipfile.Path.read_text": [
        "_io.TextIOWrapper",
        "zipfile.Path.open"
    ],
    "zipfile.Path.open": [],
    "zipfile.Path.read_bytes": [
        "zipfile.Path.open"
    ],
    "zipfile.Path._is_child": [
        "posixpath.dirname",
        "<str>.rstrip"
    ],
    "zipfile.Path._next": [
        "zipfile.Path.__init__"
    ],
    "zipfile.Path.is_dir": [
        "<str>.endswith"
    ],
    "zipfile.Path.is_file": [
        "zipfile.Path.is_dir"
    ],
    "zipfile.Path.exists": [
        "zipfile.CompleteDirs._name_set",
        "zipfile.FastLookup._name_set"
    ],
    "zipfile.Path.iterdir": [
        "zipfile.FastLookup.namelist",
        "zipfile.Path.is_dir",
        "zipfile.CompleteDirs.namelist",
        "<builtin>.filter",
        "<builtin>.map",
        "<builtin>.ValueError"
    ],
    "zipfile.Path.__str__": [
        "posixpath.join"
    ],
    "zipfile.Path.joinpath": [
        "posixpath.join",
        "zipfile.CompleteDirs.resolve_dir",
        "zipfile.Path._next"
    ],
    "zipfile.Path.parent": [
        "posixpath.dirname",
        "<str>.rstrip",
        "zipfile.Path._next"
    ],
    "importlib.util.resolve_name": [
        "_bootstrap._resolve_name",
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "_bootstrap._resolve_name": [],
    "importlib.util._find_spec_from_path": [
        "_bootstrap._find_spec",
        "<builtin>.ValueError"
    ],
    "_bootstrap._find_spec": [],
    "importlib.util.find_spec": [
        "_bootstrap._find_spec",
        "<builtin>.__import__",
        "importlib.util.resolve_name",
        "<builtin>.ModuleNotFoundError",
        "<builtin>.ValueError"
    ],
    "importlib.util._module_to_load": [
        "<builtin>.type"
    ],
    "importlib.util.set_package": [
        "functools.wraps"
    ],
    "importlib.util.set_loader": [
        "functools.wraps"
    ],
    "importlib.util.module_for_loader": [
        "functools.wraps",
        "warnings.warn"
    ],
    "importlib.util._LazyModule.__getattribute__": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "<builtin>.id"
    ],
    "importlib.util._LazyModule.__delattr__": [
        "<builtin>.delattr",
        "importlib.util._LazyModule.__getattribute__"
    ],
    "importlib.util.LazyLoader.__check_eager_loader": [
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "importlib.util.LazyLoader.factory": [
        "importlib.util.LazyLoader.__check_eager_loader"
    ],
    "importlib.util.LazyLoader.__init__": [
        "importlib.util.LazyLoader.__check_eager_loader"
    ],
    "configparser.NoOptionError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.InterpolationError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.InterpolationMissingOptionError.__init__": [
        "configparser.InterpolationError.__init__"
    ],
    "configparser.InterpolationDepthError.__init__": [
        "configparser.InterpolationError.__init__"
    ],
    "configparser.ParsingError.filename": [
        "warnings.warn"
    ],
    "configparser.BasicInterpolation.before_get": [
        "configparser.BasicInterpolation._interpolate_some"
    ],
    "configparser.BasicInterpolation._interpolate_some": [
        "configparser.RawConfigParser.optionxform",
        "configparser.InterpolationError.__init__",
        "configparser.BasicInterpolation._interpolate_some",
        "configparser.InterpolationMissingOptionError.__init__",
        "configparser.RawConfigParser.get",
        "configparser.InterpolationDepthError.__init__",
        "<list>.append",
        "docutils.frontend.ConfigParser.optionxform",
        "pathlib.PurePath.match"
    ],
    "configparser.BasicInterpolation.before_set": [
        "<str>.find",
        "<builtin>.ValueError"
    ],
    "configparser.ExtendedInterpolation.before_get": [
        "configparser.ExtendedInterpolation._interpolate_some"
    ],
    "configparser.ExtendedInterpolation._interpolate_some": [
        "<list>.append",
        "configparser.InterpolationError.__init__",
        "<builtin>.dict",
        "configparser.ExtendedInterpolation._interpolate_some",
        "configparser.InterpolationMissingOptionError.__init__",
        "configparser.InterpolationDepthError.__init__",
        "<builtin>.len",
        "pathlib.PurePath.match"
    ],
    "configparser.ExtendedInterpolation.before_set": [
        "<str>.find",
        "<builtin>.ValueError"
    ],
    "configparser.LegacyInterpolation.before_get": [
        "configparser.InterpolationDepthError.__init__",
        "configparser.InterpolationMissingOptionError.__init__"
    ],
    "configparser.RawConfigParser.__init__": [
        "re.compile",
        "re.escape",
        "configparser.RawConfigParser._read_defaults",
        "<builtin>.tuple",
        "configparser.SectionProxy.__init__",
        "configparser.ConfigParser._read_defaults",
        "configparser.ConverterMapping.__init__"
    ],
    "configparser.ConverterMapping.__init__": [
        "<builtin>.callable",
        "<builtin>.dir",
        "<builtin>.getattr",
        "pathlib.PurePath.match"
    ],
    "configparser.ConfigParser._read_defaults": [
        "configparser.RawConfigParser.read_dict"
    ],
    "configparser.RawConfigParser.read_dict": [
        "configparser.RawConfigParser.optionxform",
        "configparser.DuplicateOptionError.__init__",
        "<map>.items",
        "<builtin>.set",
        "<builtin>.str",
        "configparser.ConfigParser.set",
        "configparser.RawConfigParser.add_section",
        "configparser.RawConfigParser.set",
        "configparser.ConfigParser.add_section",
        "docutils.frontend.ConfigParser.optionxform"
    ],
    "configparser.ConfigParser.add_section": [
        "<builtin>.super",
        "configparser.RawConfigParser._validate_value_types"
    ],
    "configparser.RawConfigParser._validate_value_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "configparser.RawConfigParser.add_section": [
        "configparser.DuplicateSectionError.__init__",
        "configparser.SectionProxy.__init__",
        "<builtin>.ValueError"
    ],
    "configparser.ConfigParser.set": [
        "<builtin>.super",
        "configparser.RawConfigParser._validate_value_types"
    ],
    "configparser.RawConfigParser.set": [
        "configparser.RawConfigParser.optionxform",
        "configparser.Interpolation.before_set",
        "configparser.BasicInterpolation.before_set",
        "configparser.NoSectionError.__init__",
        "docutils.frontend.ConfigParser.optionxform"
    ],
    "configparser.Interpolation.before_set": [],
    "configparser.RawConfigParser._read_defaults": [
        "configparser.RawConfigParser.optionxform",
        "docutils.frontend.ConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.options": [
        "<builtin>.list",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.RawConfigParser.read": [
        "os._fspath",
        "<builtin>.open",
        "<builtin>.isinstance",
        "configparser.RawConfigParser._read"
    ],
    "configparser.RawConfigParser.get": [
        "configparser.RawConfigParser.optionxform",
        "configparser.Interpolation.before_get",
        "configparser.BasicInterpolation.before_get",
        "configparser.NoOptionError.__init__",
        "docutils.frontend.ConfigParser.optionxform",
        "configparser.RawConfigParser._unify_values"
    ],
    "configparser.RawConfigParser._unify_values": [
        "configparser.RawConfigParser.optionxform",
        "configparser.NoSectionError.__init__",
        "<builtin>.str",
        "collections.ChainMap.__init__",
        "docutils.frontend.ConfigParser.optionxform"
    ],
    "configparser.Interpolation.before_get": [],
    "configparser.RawConfigParser._get": [
        "configparser.RawConfigParser._convert_to_boolean",
        "configparser.RawConfigParser.get"
    ],
    "configparser.RawConfigParser._get_conv": [
        "configparser.RawConfigParser._get"
    ],
    "configparser.RawConfigParser.getint": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.getfloat": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.getboolean": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser._convert_to_boolean": [
        "<str>.lower",
        "<builtin>.ValueError"
    ],
    "configparser.RawConfigParser.popitem": [
        "configparser.RawConfigParser.sections"
    ],
    "configparser.RawConfigParser.has_option": [
        "configparser.RawConfigParser.optionxform",
        "docutils.frontend.ConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.write": [
        "configparser.RawConfigParser._write_section"
    ],
    "configparser.RawConfigParser._write_section": [
        "configparser.Interpolation.before_write",
        "<builtin>.str"
    ],
    "configparser.Interpolation.before_write": [],
    "configparser.RawConfigParser.remove_option": [
        "configparser.RawConfigParser.optionxform",
        "docutils.frontend.ConfigParser.optionxform",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.RawConfigParser.__getitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.has_section"
    ],
    "configparser.RawConfigParser.has_section": [],
    "configparser.RawConfigParser.__setitem__": [
        "configparser.RawConfigParser.read_dict"
    ],
    "configparser.RawConfigParser.__delitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.remove_section",
        "<builtin>.ValueError",
        "configparser.RawConfigParser.has_section"
    ],
    "configparser.RawConfigParser.remove_section": [],
    "configparser.RawConfigParser.__contains__": [
        "configparser.RawConfigParser.has_section"
    ],
    "configparser.RawConfigParser.__len__": [
        "<builtin>.len"
    ],
    "configparser.Interpolation.before_read": [],
    "configparser.SafeConfigParser.__init__": [
        "<builtin>.super",
        "warnings.warn"
    ],
    "configparser.SectionProxy.__getitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.get",
        "configparser.RawConfigParser.has_option"
    ],
    "configparser.SectionProxy.__setitem__": [
        "configparser.RawConfigParser.set",
        "configparser.RawConfigParser._validate_value_types",
        "configparser.ConfigParser.set"
    ],
    "configparser.SectionProxy.__delitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.has_option",
        "configparser.RawConfigParser.remove_option"
    ],
    "configparser.SectionProxy.__contains__": [
        "configparser.RawConfigParser.has_option"
    ],
    "configparser.SectionProxy.__len__": [
        "<builtin>.len",
        "configparser.SectionProxy._options"
    ],
    "configparser.SectionProxy._options": [
        "configparser.RawConfigParser.defaults",
        "configparser.RawConfigParser.options"
    ],
    "configparser.RawConfigParser.defaults": [],
    "configparser.SectionProxy.__iter__": [
        "configparser.SectionProxy._options"
    ],
    "configparser.SectionProxy.get": [
        "configparser.RawConfigParser.get"
    ],
    "configparser.ConverterMapping.__setitem__": [
        "<builtin>.ValueError",
        "<builtin>.setattr",
        "<builtin>.type"
    ],
    "configparser.ConverterMapping.__delitem__": [
        "<builtin>.KeyError",
        "<builtin>.delattr"
    ],
    "configparser.ConverterMapping.__iter__": [
        "<builtin>.iter"
    ],
    "configparser.ConverterMapping.__len__": [
        "<builtin>.len"
    ],
    "importlib.abc.MetaPathFinder.find_module": [
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "importlib.abc.PathEntryFinder.find_loader": [
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "importlib.abc.Loader.load_module": [
        "<builtin>.hasattr"
    ],
    "importlib.abc.InspectLoader.get_code": [
        "importlib.abc.InspectLoader.get_source",
        "importlib.abc.InspectLoader.source_to_code"
    ],
    "importlib.abc.InspectLoader.get_source": [],
    "importlib.abc.InspectLoader.source_to_code": [
        "<builtin>.compile"
    ],
    "importlib.abc.ExecutionLoader.get_code": [
        "importlib.abc.InspectLoader.get_source",
        "importlib.abc.InspectLoader.source_to_code",
        "importlib.abc.ExecutionLoader.get_filename"
    ],
    "importlib.abc.ExecutionLoader.get_filename": [],
    "importlib.abc.SourceLoader.path_mtime": [
        "importlib.abc.SourceLoader.path_stats",
        "<builtin>.int"
    ],
    "importlib.abc.SourceLoader.path_stats": [
        "importlib.abc.SourceLoader.path_mtime"
    ],
    "importlib_metadata.Sectioned.section_pairs": [
        "importlib_metadata.Sectioned.read"
    ],
    "importlib_metadata.Sectioned.read": [
        "<builtin>.filter",
        "<builtin>.map",
        "_collections.Pair"
    ],
    "_collections.Pair": [],
    "importlib_metadata.EntryPoint.__init__": [
        "<builtin>.vars"
    ],
    "importlib_metadata.EntryPoint.load": [
        "<builtin>.filter",
        "importlib.import_module",
        "functools.reduce",
        "pathlib.PurePath.match"
    ],
    "importlib_metadata.EntryPoint.extras": [
        "re.findall",
        "pathlib.PurePath.match"
    ],
    "importlib_metadata.EntryPoint._for": [
        "<builtin>.vars"
    ],
    "importlib_metadata.EntryPoint.matches": [
        "<builtin>.map",
        "<builtin>.getattr",
        "<builtin>.all"
    ],
    "importlib_metadata.EntryPoint.__lt__": [
        "importlib_metadata.EntryPoint._key"
    ],
    "importlib_metadata.EntryPoint._key": [],
    "importlib_metadata.EntryPoint.__eq__": [
        "importlib_metadata.EntryPoint._key"
    ],
    "importlib_metadata.EntryPoint.__setattr__": [
        "<builtin>.AttributeError"
    ],
    "importlib_metadata.EntryPoint.__hash__": [
        "importlib_metadata.EntryPoint._key",
        "<builtin>.hash"
    ],
    "importlib_metadata.EntryPoints.__getitem__": [
        "<builtin>.iter",
        "<builtin>.KeyError",
        "importlib_metadata.EntryPoints.select",
        "<builtin>.next"
    ],
    "importlib_metadata.EntryPoints._from_text_for": [
        "importlib_metadata.EntryPoints._from_text"
    ],
    "importlib_metadata.EntryPoints._from_text": [
        "importlib_metadata.EntryPoint.__init__",
        "importlib_metadata.Sectioned.section_pairs"
    ],
    "importlib_metadata.PackagePath.read_text": [
        "importlib_metadata.PackagePath.locate"
    ],
    "importlib_metadata.PackagePath.locate": [
        "importlib_metadata.Distribution.locate_file"
    ],
    "importlib_metadata.PackagePath.read_binary": [
        "importlib_metadata.PackagePath.locate"
    ],
    "importlib_metadata.Distribution.from_name": [
        "importlib_metadata.Distribution.discover",
        "<builtin>.next",
        "<builtin>.ValueError"
    ],
    "importlib_metadata.Distribution.at": [
        "importlib_metadata.PathDistribution.__init__"
    ],
    "importlib_metadata.PathDistribution.__init__": [],
    "importlib_metadata.Distribution.metadata": [
        "importlib_metadata.Distribution.read_text",
        "email.message_from_string",
        "importlib_metadata._adapters.Message.__init__"
    ],
    "importlib_metadata.Distribution.read_text": [],
    "importlib_metadata._adapters.Message.__init__": [
        "importlib_metadata._adapters.Message._repair_headers"
    ],
    "importlib_metadata._adapters.Message._repair_headers": [
        "<builtin>.vars",
        "importlib_metadata._adapters.Message._repair_headers.redent"
    ],
    "importlib_metadata._adapters.Message._repair_headers.redent": [
        "textwrap.dedent"
    ],
    "importlib_metadata.Distribution._normalized_name": [
        "importlib_metadata.Prepared.normalize"
    ],
    "importlib_metadata.Prepared.normalize": [
        "<str>.replace",
        "re.sub",
        "<str>.lower"
    ],
    "importlib_metadata.Distribution.entry_points": [
        "importlib_metadata.EntryPoints._from_text_for",
        "importlib_metadata.Distribution.read_text"
    ],
    "importlib_metadata.Distribution.files": [
        "_functools.pass_none",
        "importlib_metadata.Distribution._read_files_egginfo",
        "importlib_metadata.Distribution.files.make_files",
        "importlib_metadata.Distribution._read_files_distinfo"
    ],
    "_functools.pass_none": [],
    "importlib_metadata.Distribution._read_files_distinfo": [
        "importlib_metadata.Distribution.read_text"
    ],
    "importlib_metadata.Distribution._read_files_egginfo": [
        "importlib_metadata.Distribution.read_text",
        "<builtin>.map"
    ],
    "importlib_metadata.Distribution.files.make_files": [
        "<builtin>.list",
        "itertools.starmap"
    ],
    "importlib_metadata.Distribution.requires": [
        "importlib_metadata.Distribution._read_dist_info_reqs",
        "importlib_metadata.Distribution._read_egg_info_reqs",
        "<builtin>.list"
    ],
    "importlib_metadata.Distribution._read_dist_info_reqs": [],
    "importlib_metadata.Distribution._read_egg_info_reqs": [
        "_functools.pass_none",
        "importlib_metadata.Distribution.read_text"
    ],
    "importlib_metadata.Distribution._deps_from_requires_text": [
        "importlib_metadata.Sectioned.read",
        "importlib_metadata.Distribution._convert_egg_info_reqs_to_simple_reqs"
    ],
    "importlib_metadata.Distribution._convert_egg_info_reqs_to_simple_reqs": [
        "importlib_metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.url_req_space",
        "importlib_metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.quoted_marker"
    ],
    "importlib_metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.url_req_space": [],
    "importlib_metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.quoted_marker": [
        "<builtin>.filter",
        "<builtin>.list"
    ],
    "importlib_metadata.DistributionFinder.Context.path": [
        "<builtin>.vars"
    ],
    "importlib_metadata.FastPath.children": [
        "contextlib.suppress.__init__"
    ],
    "importlib_metadata.FastPath.zip_children": [
        "zipp.CompleteDirs.namelist",
        "zipp.FastLookup.namelist",
        "zipp.Path.__init__"
    ],
    "zipp.Path.__init__": [
        "zipp.CompleteDirs.make"
    ],
    "zipp.CompleteDirs.make": [
        "<builtin>.isinstance"
    ],
    "zipp.CompleteDirs.namelist": [
        "zipp.CompleteDirs._implied_dirs",
        "<builtin>.super",
        "<builtin>.list"
    ],
    "zipp.CompleteDirs._implied_dirs": [
        "<builtin>.map",
        "zipp._difference"
    ],
    "zipp._difference": [
        "<builtin>.set"
    ],
    "zipp.FastLookup.namelist": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "importlib_metadata.FastPath.search": [
        "importlib_metadata.FastPath.lookup",
        "importlib_metadata.Lookup.search"
    ],
    "importlib_metadata.FastPath.lookup": [
        "importlib_metadata.Lookup.__init__"
    ],
    "importlib_metadata.Lookup.__init__": [
        "importlib_metadata.FastPath.children",
        "_collections.FreezableDefaultDict",
        "importlib_metadata.FastPath.joinpath",
        "ntpath.basename",
        "posixpath.basename",
        "importlib_metadata.Prepared.legacy_normalize",
        "importlib_metadata.Prepared.normalize"
    ],
    "_collections.FreezableDefaultDict": [],
    "importlib_metadata.Prepared.legacy_normalize": [],
    "importlib_metadata.FastPath.joinpath": [],
    "importlib_metadata.Lookup.search": [],
    "importlib_metadata.FastPath.mtime": [
        "contextlib.suppress.__init__"
    ],
    "importlib_metadata.Prepared.__init__": [
        "importlib_metadata.Prepared.normalize",
        "importlib_metadata.Prepared.legacy_normalize"
    ],
    "importlib_metadata.Prepared.__bool__": [
        "<builtin>.bool"
    ],
    "importlib_metadata.MetadataPathFinder.find_distributions": [
        "importlib_metadata.MetadataPathFinder._search_paths",
        "<builtin>.map"
    ],
    "importlib_metadata.MetadataPathFinder._search_paths": [
        "importlib_metadata.Prepared.__init__",
        "<builtin>.map"
    ],
    "importlib_metadata.PathDistribution.read_text": [
        "contextlib.suppress.__init__"
    ],
    "importlib_metadata.PathDistribution._normalized_name": [
        "<builtin>.super",
        "_functools.pass_none",
        "importlib_metadata.PathDistribution._name_from_stem",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.str"
    ],
    "importlib_metadata.PathDistribution._name_from_stem": [
        "posixpath.splitext",
        "<str>.partition",
        "ntpath.splitext"
    ],
    "importlib_metadata.distribution": [
        "importlib_metadata.Distribution.from_name"
    ],
    "importlib_metadata.metadata": [
        "importlib_metadata.Distribution.from_name"
    ],
    "importlib_metadata.version": [
        "importlib_metadata.distribution"
    ],
    "importlib_metadata.files": [
        "importlib_metadata.distribution"
    ],
    "importlib_metadata.requires": [
        "importlib_metadata.distribution"
    ],
    "importlib_metadata.packages_distributions": [
        "<builtin>.dict",
        "_collections.defaultdict",
        "importlib_metadata._top_level_declared",
        "importlib_metadata.distributions",
        "importlib_metadata._top_level_inferred"
    ],
    "importlib_metadata._top_level_declared": [],
    "importlib_metadata._top_level_inferred": [
        "importlib_metadata._itertools.always_iterable",
        "<builtin>.len"
    ],
    "importlib_metadata._itertools.always_iterable": [
        "<builtin>.iter",
        "<builtin>.isinstance"
    ],
    "zipp._parents": [
        "zipp._ancestry"
    ],
    "zipp._ancestry": [
        "posixpath.split"
    ],
    "zipp.InitializedState.__init__": [
        "<builtin>.super"
    ],
    "zipp.InitializedState.__setstate__": [
        "<builtin>.super"
    ],
    "zipp.CompleteDirs._name_set": [
        "zipp.CompleteDirs.namelist",
        "zipp.FastLookup.namelist",
        "<builtin>.set"
    ],
    "zipp.CompleteDirs.resolve_dir": [
        "zipp.FastLookup._name_set",
        "zipp.CompleteDirs._name_set"
    ],
    "zipp.FastLookup._name_set": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "zipp.Path.__hash__": [
        "<builtin>.hash"
    ],
    "zipp.Path.open": [
        "<builtin>.IsADirectoryError",
        "zipfile.ZipFile.open",
        "_io.TextIOWrapper",
        "zipp.Path.exists",
        "<builtin>.FileNotFoundError",
        "<builtin>.ValueError",
        "zipp.Path.is_dir"
    ],
    "zipp.Path.is_dir": [
        "<str>.endswith"
    ],
    "<builtin>.IsADirectoryError": [],
    "zipp.Path.exists": [
        "zipp.FastLookup._name_set",
        "zipp.CompleteDirs._name_set"
    ],
    "zipp.Path.filename": [
        "pathlib.PurePath.joinpath"
    ],
    "zipp.Path.read_text": [
        "zipp.Path.open"
    ],
    "zipp.Path.read_bytes": [
        "zipp.Path.open"
    ],
    "zipp.Path._is_child": [
        "posixpath.dirname",
        "<str>.rstrip"
    ],
    "zipp.Path.is_file": [
        "zipp.Path.exists",
        "zipp.Path.is_dir"
    ],
    "zipp.Path.iterdir": [
        "zipp.FastLookup.namelist",
        "zipp.CompleteDirs.namelist",
        "<builtin>.filter",
        "<builtin>.map",
        "<builtin>.ValueError",
        "zipp.Path.is_dir"
    ],
    "zipp.Path.match": [
        "pathlib.PurePath.match"
    ],
    "zipp.Path._descendants": [
        "zipp.Path.iterdir"
    ],
    "zipp.Path.glob": [
        "fnmatch.translate",
        "<map>",
        "re.compile",
        "zipp.Path._descendants",
        "<builtin>.str",
        "<builtin>.ValueError",
        "<list>"
    ],
    "zipp.Path.rglob": [
        "zipp.Path.glob"
    ],
    "zipp.Path.relative_to": [
        "posixpath.relpath",
        "<builtin>.str"
    ],
    "zipp.Path.__str__": [
        "posixpath.join"
    ],
    "zipp.Path.joinpath": [
        "posixpath.join",
        "zipp.Path._next",
        "zipp.CompleteDirs.resolve_dir"
    ],
    "zipp.Path._next": [],
    "zipp.Path.parent": [
        "zipp.Path._next",
        "posixpath.dirname",
        "<str>.rstrip"
    ],
    "importlib_metadata._adapters.Message.__new__": [
        "<builtin>.vars",
        "<builtin>.super"
    ],
    "importlib_metadata._adapters.Message.__iter__": [
        "<builtin>.super"
    ],
    "importlib_metadata._adapters.Message.json": [
        "<builtin>.dict",
        "<builtin>.map"
    ],
    "email.message.Message.__str__": [
        "email.message.MIMEPart.as_string",
        "email.message.Message.as_string"
    ],
    "email.message.Message.as_string": [
        "_io.StringIO",
        "email.generator.Generator.flatten",
        "email.generator",
        "email.generator.Generator.__init__"
    ],
    "email.generator": [
        "random",
        "re.compile",
        "email.generator.Generator",
        "email.generator.BytesGenerator",
        "email.utils",
        "re",
        "<builtin>.len",
        "email.generator.DecodedGenerator",
        "<builtin>.repr",
        "copy",
        "io"
    ],
    "email.generator.Generator": [
        "<builtin>.classmethod"
    ],
    "email.generator.BytesGenerator": [
        "<builtin>.classmethod"
    ],
    "email.generator.DecodedGenerator": [],
    "email.generator.Generator.__init__": [],
    "email.generator.Generator.flatten": [
        "email.message.Message.get_unixfrom",
        "email.generator.BytesGenerator.write",
        "email.generator.BytesGenerator._encode",
        "email.generator.Generator._encode",
        "email.generator.Generator.write",
        "email.generator.Generator._write"
    ],
    "email.generator.Generator._encode": [],
    "email.message.Message.get_unixfrom": [],
    "email.generator.Generator.write": [
        "email.generator.Generator.write"
    ],
    "email.generator.Generator._write": [
        "email.generator.BytesGenerator._write_headers",
        "email.generator.Generator.write",
        "email.generator.Generator._write_headers",
        "email.generator.DecodedGenerator._dispatch",
        "email.generator.BytesGenerator._new_buffer",
        "<builtin>.getattr",
        "copy.deepcopy",
        "email.generator.Generator._dispatch",
        "email.generator.Generator._new_buffer",
        "email.message.Message.replace_header"
    ],
    "email.generator.Generator._new_buffer": [
        "_io.StringIO"
    ],
    "email.generator.Generator._dispatch": [
        "email.message.Message.get_content_maintype",
        "email.generator.Generator._handle_text",
        "<str>.replace",
        "email.message.Message.get_content_subtype",
        "email.generator.BytesGenerator._handle_text",
        "<builtin>.getattr"
    ],
    "email.message.Message.get_content_subtype": [
        "email.message.Message.get_content_type"
    ],
    "email.generator.Generator._handle_text": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "email.generator.Generator._write_lines",
        "email.utils._has_surrogates",
        "email.message.Message.get_param",
        "<builtin>.type",
        "copy.deepcopy",
        "email.message.Message.get_payload",
        "email.message.Message.set_payload"
    ],
    "email.generator.Generator._write_lines": [
        "email.generator.BytesGenerator.write",
        "email.generator.Generator.write"
    ],
    "email.generator.Generator._write_headers": [
        "email.generator.BytesGenerator.write",
        "email.generator.Generator.write",
        "email.message.Message.raw_items"
    ],
    "email.message.Message.raw_items": [
        "<builtin>.iter",
        "<list>.copy"
    ],
    "email.message.Message.__bytes__": [
        "email.message.Message.as_bytes"
    ],
    "email.message.Message.as_bytes": [
        "email.generator.Generator.flatten",
        "email.generator",
        "_io.BytesIO"
    ],
    "email.message.Message.attach": [
        "<builtin>.TypeError",
        "<list>.append"
    ],
    "email.message.Message.__len__": [
        "<builtin>.len"
    ],
    "email.message.Message.__getitem__": [
        "email.message.Message.get"
    ],
    "email.message.Message.__setitem__": [
        "email.policy.EmailPolicy.header_max_count",
        "email._policybase.Policy.header_max_count",
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "email._policybase.Policy.header_max_count": [],
    "email.message.Message.__delitem__": [
        "<list>.append"
    ],
    "email.message.Message.values": [
        "email._policybase.Compat32.header_fetch_parse",
        "email.policy.EmailPolicy.header_fetch_parse"
    ],
    "email.message.Message.items": [
        "email._policybase.Compat32.header_fetch_parse",
        "email.policy.EmailPolicy.header_fetch_parse"
    ],
    "email.message.Message.get_all": [
        "<list>.append"
    ],
    "email.message.Message.set_type": [
        "email.message.Message.set_param",
        "<str>.lower",
        "email.message.Message.get_params"
    ],
    "email.message.Message.get_filename": [
        "email.message.Message.get_param",
        "email.utils.collapse_rfc2231_value",
        "<str>.strip",
        "<builtin>.object"
    ],
    "email.message.Message.set_boundary": [
        "email.message.Message._get_params_preserve",
        "<builtin>.object",
        "<list>.append"
    ],
    "email.message.Message.get_content_charset": [
        "<builtin>.isinstance",
        "<builtin>.object",
        "email.message.Message.get_param",
        "<builtin>.str",
        "<str>.lower"
    ],
    "email.message.Message.get_charsets": [
        "email.iterators.walk"
    ],
    "email.iterators.walk": [],
    "email.message.Message.get_content_disposition": [
        "email.message.Message.get",
        "email.message._splitparam"
    ],
    "email.policy": [
        "email.contentmanager",
        "re.compile",
        "email._policybase",
        "email.policy.EmailPolicy.__init__",
        "email.headerregistry",
        "email._policybase._PolicyBase.clone",
        "email.utils",
        "email.policy.EmailPolicy",
        "email.message",
        "re"
    ],
    "email.message.MIMEPart.__init__": [
        "email.message.Message.__init__",
        "email.policy"
    ],
    "email.headerregistry": [
        "types",
        "email.headerregistry.UnstructuredHeader",
        "email._header_value_parser",
        "email.headerregistry.ContentTypeHeader",
        "email.headerregistry.UniqueDateHeader",
        "email.headerregistry.ContentDispositionHeader",
        "email.headerregistry.ParameterizedMIMEHeader",
        "email.headerregistry.UniqueSingleAddressHeader",
        "email.headerregistry.MessageIDHeader",
        "email.headerregistry.DateHeader",
        "email.headerregistry.SingleAddressHeader",
        "email.headerregistry.Address",
        "email.headerregistry.UniqueUnstructuredHeader",
        "email.headerregistry.MIMEVersionHeader",
        "email.headerregistry.AddressHeader",
        "email.headerregistry.BaseHeader",
        "email.errors",
        "email.headerregistry.HeaderRegistry",
        "email.headerregistry.Group",
        "email.utils",
        "email.headerregistry.UniqueAddressHeader",
        "email.headerregistry.ContentTransferEncodingHeader"
    ],
    "email._header_value_parser": [
        "email._header_value_parser.Domain",
        "email._header_value_parser.LocalPart",
        "email._header_value_parser.CFWSList",
        "email._header_value_parser.Value",
        "email._header_value_parser.MIMEVersion",
        "email._header_value_parser.UnstructuredTokenList",
        "email._header_value_parser.ContentType",
        "string",
        "email._header_value_parser.Parameter",
        "email._header_value_parser.Attribute",
        "email._header_value_parser.ObsLocalPart",
        "email._header_value_parser.EWWhiteSpaceTerminal",
        "email._header_value_parser.InvalidMailbox",
        "operator",
        "re",
        "email._header_value_parser.QuotedString",
        "email._header_value_parser.AddrSpec",
        "email._header_value_parser.NameAddr",
        "email._header_value_parser.InvalidParameter",
        "email._header_value_parser.Terminal",
        "email._header_value_parser._InvalidEwError",
        "email._header_value_parser.WhiteSpaceTokenList",
        "email._header_value_parser.Mailbox",
        "email._header_value_parser.ContentDisposition",
        "email._header_value_parser.Header",
        "email._header_value_parser.DisplayName",
        "email._header_value_parser.WhiteSpaceTerminal",
        "email._header_value_parser.Token",
        "email._header_value_parser.Address",
        "<builtin>.set",
        "email._header_value_parser.TokenList",
        "re.compile",
        "email._header_value_parser.HeaderLabel",
        "re.escape",
        "email._header_value_parser.MsgID",
        "email._header_value_parser.ValueTerminal",
        "email._header_value_parser.AddressList",
        "email._header_value_parser.Section",
        "email._header_value_parser.ObsRoute",
        "email._header_value_parser.Comment",
        "email._header_value_parser.EncodedWord",
        "email.errors",
        "email._header_value_parser.Word",
        "email._header_value_parser.GroupList",
        "email._header_value_parser.MailboxList",
        "email._header_value_parser.Phrase",
        "email._header_value_parser.Group",
        "email._header_value_parser.BareQuotedString",
        "email._header_value_parser.AngleAddr",
        "email._header_value_parser.DotAtomText",
        "email._header_value_parser.DomainLiteral",
        "email._header_value_parser.ParameterizedHeaderValue",
        "email._header_value_parser.ContentTransferEncoding",
        "email._header_value_parser.MessageID",
        "email._header_value_parser.InvalidMessageID",
        "email.utils",
        "email._header_value_parser.NoFoldLiteral",
        "email._header_value_parser.Atom",
        "email._header_value_parser.DotAtom",
        "urllib",
        "email._encoded_words",
        "email._header_value_parser.MimeParameters"
    ],
    "email._header_value_parser.TokenList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.WhiteSpaceTokenList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.UnstructuredTokenList": [],
    "email._header_value_parser.Phrase": [],
    "email._header_value_parser.Word": [],
    "email._header_value_parser.CFWSList": [],
    "email._header_value_parser.Atom": [],
    "email._header_value_parser.Token": [],
    "email._header_value_parser.EncodedWord": [],
    "email._header_value_parser.QuotedString": [
        "<builtin>.property"
    ],
    "email._header_value_parser.BareQuotedString": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Comment": [
        "<builtin>.property"
    ],
    "email._header_value_parser.AddressList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Address": [
        "<builtin>.property"
    ],
    "email._header_value_parser.MailboxList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.GroupList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Group": [
        "<builtin>.property"
    ],
    "email._header_value_parser.NameAddr": [
        "<builtin>.property"
    ],
    "email._header_value_parser.AngleAddr": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ObsRoute": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Mailbox": [
        "<builtin>.property"
    ],
    "email._header_value_parser.InvalidMailbox": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Domain": [
        "<builtin>.property"
    ],
    "email._header_value_parser.DotAtom": [],
    "email._header_value_parser.DotAtomText": [],
    "email._header_value_parser.NoFoldLiteral": [],
    "email._header_value_parser.AddrSpec": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ObsLocalPart": [],
    "email._header_value_parser.DisplayName": [
        "<builtin>.property"
    ],
    "email._header_value_parser.LocalPart": [
        "<builtin>.property"
    ],
    "email._header_value_parser.DomainLiteral": [
        "<builtin>.property"
    ],
    "email._header_value_parser.MIMEVersion": [],
    "email._header_value_parser.Parameter": [
        "<builtin>.property"
    ],
    "email._header_value_parser.InvalidParameter": [],
    "email._header_value_parser.Attribute": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Section": [],
    "email._header_value_parser.Value": [
        "<builtin>.property"
    ],
    "email._header_value_parser.MimeParameters": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ParameterizedHeaderValue": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ContentType": [],
    "email._header_value_parser.ContentDisposition": [],
    "email._header_value_parser.ContentTransferEncoding": [],
    "email._header_value_parser.HeaderLabel": [],
    "email._header_value_parser.MsgID": [],
    "email._header_value_parser.MessageID": [],
    "email._header_value_parser.InvalidMessageID": [],
    "email._header_value_parser.Header": [],
    "email._header_value_parser.Terminal": [
        "<builtin>.property"
    ],
    "email._header_value_parser.WhiteSpaceTerminal": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ValueTerminal": [
        "<builtin>.property"
    ],
    "email._header_value_parser.EWWhiteSpaceTerminal": [
        "<builtin>.property"
    ],
    "email._header_value_parser._InvalidEwError": [],
    "email.headerregistry.Address": [
        "<builtin>.property"
    ],
    "email.headerregistry.Group": [
        "<builtin>.property"
    ],
    "email.headerregistry.BaseHeader": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.UnstructuredHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "email.headerregistry.UniqueUnstructuredHeader": [],
    "email.headerregistry.DateHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.UniqueDateHeader": [],
    "email.headerregistry.AddressHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.UniqueAddressHeader": [],
    "email.headerregistry.SingleAddressHeader": [
        "<builtin>.property"
    ],
    "email.headerregistry.UniqueSingleAddressHeader": [],
    "email.headerregistry.MIMEVersionHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.ParameterizedMIMEHeader": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.ContentTypeHeader": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.ContentDispositionHeader": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.ContentTransferEncodingHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.MessageIDHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "email.headerregistry.HeaderRegistry": [],
    "email.contentmanager": [
        "binascii",
        "email.quoprimime",
        "email.contentmanager.ContentManager.__init__",
        "email.contentmanager.ContentManager.add_set_handler",
        "email.contentmanager.ContentManager.add_get_handler",
        "email.contentmanager.ContentManager",
        "email.message",
        "email.charset",
        "email.errors"
    ],
    "email.contentmanager.ContentManager": [],
    "email.contentmanager.ContentManager.__init__": [],
    "email.contentmanager.ContentManager.add_get_handler": [],
    "email.contentmanager.ContentManager.add_set_handler": [],
    "email.policy.EmailPolicy": [
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.headerregistry.HeaderRegistry.__init__": [
        "<map>.update"
    ],
    "email.policy.EmailPolicy.__init__": [
        "<builtin>.super",
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email._policybase._PolicyBase.clone": [
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "email.message.MIMEPart.as_string": [
        "<builtin>.super"
    ],
    "email.message.MIMEPart.__str__": [
        "email._policybase._PolicyBase.clone",
        "email.message.MIMEPart.as_string"
    ],
    "email.message.MIMEPart.is_attachment": [
        "email.message.Message.get"
    ],
    "email.message.MIMEPart._find_body": [
        "email.message.Message.get_content_type",
        "<str>.index",
        "email.message.MIMEPart.iter_parts",
        "email.message.MIMEPart._find_body",
        "email.message.Message.get_param",
        "email.message.MIMEPart.is_attachment",
        "email.message.Message.get_payload"
    ],
    "email.message.MIMEPart.get_body": [
        "email.message.MIMEPart._find_body",
        "<builtin>.len"
    ],
    "email.message.MIMEPart.iter_parts": [
        "email.message.Message.get_payload",
        "email.message.Message.get_content_maintype"
    ],
    "email.message.MIMEPart.iter_attachments": [
        "email.message.Message.get_content_type",
        "<map>.pop",
        "<map>.copy",
        "<list>.copy",
        "email.message.Message.get_param",
        "<list>.pop",
        "<list>.append",
        "email.message.Message.get_payload"
    ],
    "email.message.MIMEPart.get_content": [
        "email.contentmanager.ContentManager.get_content"
    ],
    "email.contentmanager.ContentManager.get_content": [
        "email.message.Message.get_content_type",
        "<builtin>.KeyError",
        "email.message.Message.get_content_maintype"
    ],
    "email.message.MIMEPart.set_content": [
        "email.contentmanager.ContentManager.set_content"
    ],
    "email.contentmanager.ContentManager.set_content": [
        "<builtin>.TypeError",
        "email.contentmanager.ContentManager._find_set_handler",
        "email.message.Message.get_content_maintype",
        "email.message.MIMEPart.clear_content"
    ],
    "email.contentmanager.ContentManager._find_set_handler": [
        "<builtin>.KeyError",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "email.message.MIMEPart.clear_content": [],
    "email.message.MIMEPart._make_multipart": [
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_content_subtype",
        "email.message.Message.set_param",
        "<builtin>.type",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "email.message.MIMEPart.make_related": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart.make_alternative": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart.make_mixed": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart._add_multipart": [
        "email.message.Message.attach",
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_content_subtype",
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "email.message.MIMEPart.add_related": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.add_alternative": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.add_attachment": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.EmailMessage.set_content": [
        "<builtin>.super"
    ],
    "optparse._repr": [
        "<builtin>.id"
    ],
    "optparse.BadOptionError.__str__": [
        "optparse.gettext"
    ],
    "optparse.AmbiguousOptionError.__str__": [
        "optparse.gettext"
    ],
    "optparse.HelpFormatter.set_short_opt_delimiter": [
        "<builtin>.ValueError"
    ],
    "optparse.HelpFormatter.set_long_opt_delimiter": [
        "<builtin>.ValueError"
    ],
    "optparse.HelpFormatter.format_usage": [
        "<builtin>.NotImplementedError"
    ],
    "optparse.HelpFormatter.format_heading": [
        "<builtin>.NotImplementedError"
    ],
    "optparse.HelpFormatter._format_text": [
        "<builtin>.max",
        "textwrap.fill"
    ],
    "optparse.HelpFormatter.format_description": [
        "optparse.HelpFormatter._format_text"
    ],
    "optparse.HelpFormatter.format_epilog": [
        "optparse.HelpFormatter._format_text"
    ],
    "optparse.HelpFormatter.expand_default": [
        "<map>.get",
        "<builtin>.str"
    ],
    "optparse.HelpFormatter.format_option": [
        "textwrap.wrap",
        "<builtin>.len",
        "<list>.extend",
        "<list>.append",
        "optparse.HelpFormatter.expand_default"
    ],
    "optparse.HelpFormatter.store_option_strings": [
        "optparse.HelpFormatter.dedent",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.len",
        "optparse.HelpFormatter.indent",
        "optparse.HelpFormatter.format_option_strings"
    ],
    "optparse.HelpFormatter.indent": [],
    "optparse.HelpFormatter.format_option_strings": [],
    "optparse.HelpFormatter.dedent": [],
    "optparse.TitledHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.TitledHelpFormatter.format_usage": [
        "optparse.TitledHelpFormatter.format_heading",
        "optparse.gettext"
    ],
    "optparse.TitledHelpFormatter.format_heading": [
        "<builtin>.len"
    ],
    "optparse._parse_num": [
        "<builtin>.type"
    ],
    "optparse._parse_int": [
        "optparse._parse_num"
    ],
    "optparse.check_builtin": [
        "optparse.OptParseError.__init__",
        "optparse.gettext"
    ],
    "optparse.OptParseError.__init__": [],
    "optparse.check_choice": [
        "<builtin>.map",
        "optparse.OptParseError.__init__",
        "optparse.gettext"
    ],
    "optparse.Option.__init__": [
        "optparse.Option._set_attrs",
        "optparse.Option._set_opt_strings",
        "optparse.Option._check_opt_strings"
    ],
    "optparse.Option._check_opt_strings": [
        "<builtin>.TypeError"
    ],
    "optparse.Option._set_opt_strings": [
        "<list>.append",
        "optparse.OptionError.__init__",
        "<builtin>.len"
    ],
    "optparse.Option._set_attrs": [
        "optparse.OptionError.__init__",
        "<builtin>.setattr",
        "<builtin>.sorted"
    ],
    "optparse.Option._check_action": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_type": [
        "optparse.OptionError.__init__",
        "<builtin>.isinstance"
    ],
    "optparse.Option._check_choice": [
        "optparse.OptionError.__init__",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.str"
    ],
    "optparse.Option._check_const": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_nargs": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_callback": [
        "<builtin>.callable",
        "optparse.OptionError.__init__",
        "<builtin>.isinstance"
    ],
    "optparse.Option.check_value": [
        "<map>.get",
        "<map>"
    ],
    "optparse.Option.convert_value": [
        "<builtin>.tuple",
        "optparse.Option.check_value"
    ],
    "optparse.Option.process": [
        "optparse.Option.take_action",
        "optparse.Option.convert_value"
    ],
    "optparse.Option.take_action": [
        "<builtin>.setattr",
        "<builtin>.ValueError"
    ],
    "optparse.Values.__str__": [
        "<builtin>.str"
    ],
    "optparse.Values.__eq__": [
        "<builtin>.isinstance"
    ],
    "optparse.Values._update_careful": [
        "<builtin>.dir",
        "<builtin>.setattr"
    ],
    "optparse.Values._update": [
        "optparse.Values._update_careful",
        "optparse.Values._update_loose",
        "<builtin>.ValueError"
    ],
    "optparse.Values._update_loose": [],
    "optparse.Values.read_module": [
        "<builtin>.vars",
        "<builtin>.__import__",
        "optparse.Values._update"
    ],
    "optparse.Values.read_file": [
        "<builtin>.exec",
        "<builtin>.open",
        "optparse.Values._update"
    ],
    "optparse.Values.ensure_value": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "optparse.OptionParser._create_option_list": [
        "optparse.OptionContainer._create_option_mappings"
    ],
    "optparse.OptionContainer._create_option_mappings": [],
    "optparse.OptionContainer.get_option": [
        "<map>.get"
    ],
    "optparse.OptionContainer.remove_option": [
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "optparse.OptionContainer.format_option_help": [
        "<list>.append"
    ],
    "optparse.OptionContainer.format_description": [
        "optparse.OptionParser.get_description",
        "optparse.OptionContainer.get_description"
    ],
    "optparse.OptionContainer.get_description": [],
    "optparse.OptionParser.get_description": [
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionContainer.format_help": [
        "<list>.append"
    ],
    "optparse.OptionGroup.__init__": [
        "optparse.OptionContainer.__init__"
    ],
    "optparse.OptionGroup._create_option_list": [
        "optparse.OptionContainer._share_option_mappings"
    ],
    "optparse.OptionContainer._share_option_mappings": [],
    "optparse.OptionGroup.destroy": [
        "optparse.OptionContainer.destroy"
    ],
    "optparse.OptionContainer.destroy": [],
    "optparse.OptionGroup.format_help": [
        "optparse.OptionContainer.format_help"
    ],
    "optparse.OptionParser.destroy": [
        "optparse.OptionContainer.destroy"
    ],
    "optparse.OptionParser.set_defaults": [
        "<map>.update"
    ],
    "optparse.OptionParser.add_option_group": [
        "<list>.append",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len",
        "optparse.OptionGroup.__init__",
        "<builtin>.ValueError"
    ],
    "optparse.OptionParser.get_option_group": [
        "<map>.get"
    ],
    "optparse.OptionParser.get_version": [
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionParser.print_version": [
        "<builtin>.print",
        "optparse.OptionParser.get_version"
    ],
    "optparse.OptionParser.format_option_help": [
        "optparse.HelpFormatter.indent",
        "optparse.HelpFormatter.dedent",
        "optparse.HelpFormatter.store_option_strings",
        "<list>.append"
    ],
    "optparse.OptionParser.format_help": [
        "<list>.append"
    ],
    "optparse.OptionParser.print_help": [
        "codecs.StreamRecoder.write",
        "optparse.OptionParser.format_help",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "quopri.encodestring": [
        "_io.BytesIO",
        "io",
        "quopri.encode"
    ],
    "email.utils.formataddr": [
        "email.charset.Charset.header_encode",
        "email.charset.Charset.__init__",
        "<builtin>.isinstance"
    ],
    "email.charset.Charset.header_encode": [
        "email.charset.Charset._get_encoder",
        "email.charset._encode"
    ],
    "email.charset._encode": [],
    "email.charset.Charset._get_encoder": [],
    "email.utils.getaddresses": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email._parseaddr.AddressList.__init__": [
        "email._parseaddr.AddrlistClass.getaddrlist",
        "email._parseaddr.AddrlistClass.__init__"
    ],
    "email._parseaddr.AddrlistClass.__init__": [
        "<str>.replace"
    ],
    "email._parseaddr.AddrlistClass.getaddrlist": [
        "<list>.append",
        "email._parseaddr.AddrlistClass.getaddress",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getaddress": [
        "email._parseaddr.AddrlistClass.getrouteaddr",
        "email._parseaddr.AddrlistClass.getphraselist",
        "email._parseaddr.AddrlistClass.gotonext",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getaddress",
        "email._parseaddr.AddrlistClass.getaddrspec"
    ],
    "email._parseaddr.AddrlistClass.gotonext": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getphraselist": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getrouteaddr": [
        "email._parseaddr.AddrlistClass.gotonext",
        "email._parseaddr.AddrlistClass.getdomain",
        "email._parseaddr.AddrlistClass.getaddrspec",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getaddrspec": [
        "email._parseaddr.AddrlistClass.getdomain",
        "<builtin>.len",
        "<list>.pop",
        "email._parseaddr.AddrlistClass.gotonext",
        "<list>.append"
    ],
    "email._parseaddr.AddrlistClass.getdomain": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email.utils.formatdate": [
        "datetime.datetime.utcfromtimestamp",
        "email.utils.format_datetime",
        "datetime.datetime.fromtimestamp",
        "datetime.datetime.astimezone"
    ],
    "email.utils.format_datetime": [
        "datetime.datetime.timetuple",
        "datetime.date.strftime",
        "email.utils._format_timetuple_and_zone",
        "<builtin>.ValueError"
    ],
    "email.utils._format_timetuple_and_zone": [],
    "email.utils.make_msgid": [
        "socket.getfqdn",
        "<builtin>.int"
    ],
    "email.utils.parsedate_to_datetime": [
        "email._parseaddr._parsedate_tz"
    ],
    "email._parseaddr._parsedate_tz": [
        "<list>.index",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "email.utils.parseaddr": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email.utils.localtime": [
        "datetime.datetime.now",
        "datetime.datetime.astimezone"
    ],
    "email._parseaddr.parsedate_tz": [
        "<builtin>.tuple",
        "email._parseaddr._parsedate_tz"
    ],
    "email._parseaddr.parsedate": [
        "email._parseaddr.parsedate_tz",
        "<builtin>.isinstance"
    ],
    "email._parseaddr.mktime_tz": [
        "calendar.timegm"
    ],
    "calendar.timegm": [
        "datetime.date.toordinal"
    ],
    "email._parseaddr.AddrlistClass.getdelimited": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getquote": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getcomment": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getdomainliteral": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getatom": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddressList.__len__": [
        "<builtin>.len"
    ],
    "email._parseaddr.AddressList.__add__": [
        "email._parseaddr.AddressList.__init__",
        "<list>.append"
    ],
    "email._parseaddr.AddressList.__iadd__": [
        "<list>.append"
    ],
    "email._parseaddr.AddressList.__sub__": [
        "email._parseaddr.AddressList.__init__",
        "<list>.append"
    ],
    "email._parseaddr.AddressList.__isub__": [
        "<list>.remove"
    ],
    "calendar._localized_month.__getitem__": [
        "<builtin>.isinstance"
    ],
    "calendar._localized_day.__getitem__": [
        "<builtin>.isinstance"
    ],
    "calendar._monthlen": [
        "calendar.isleap"
    ],
    "calendar.Calendar.itermonthdates": [
        "calendar.Calendar.itermonthdays3"
    ],
    "calendar.Calendar.itermonthdays3": [
        "calendar._prevmonth",
        "calendar._monthlen",
        "calendar._nextmonth",
        "calendar.monthrange",
        "<builtin>.range"
    ],
    "calendar._prevmonth": [],
    "calendar._nextmonth": [],
    "calendar.Calendar.itermonthdays4": [
        "calendar.Calendar.itermonthdays3",
        "<builtin>.enumerate"
    ],
    "calendar.Calendar.monthdatescalendar": [
        "calendar.Calendar.itermonthdates",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "calendar.Calendar.monthdayscalendar": [
        "<builtin>.range",
        "<builtin>.list",
        "calendar.Calendar.itermonthdays",
        "<builtin>.len"
    ],
    "calendar.Calendar.yeardatescalendar": [
        "calendar.Calendar.monthdatescalendar",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "calendar.Calendar.yeardayscalendar": [
        "calendar.Calendar.monthdayscalendar",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "calendar.TextCalendar.prweek": [
        "<builtin>.print",
        "calendar.TextCalendar.formatweek"
    ],
    "calendar.TextCalendar.prmonth": [
        "<builtin>.print",
        "calendar.TextCalendar.formatmonth"
    ],
    "calendar.TextCalendar.pryear": [
        "<builtin>.print",
        "calendar.TextCalendar.formatyear"
    ],
    "calendar.HTMLCalendar.formatweek": [
        "calendar.HTMLCalendar.formatday"
    ],
    "calendar.HTMLCalendar.formatday": [],
    "calendar.HTMLCalendar.formatweekheader": [
        "calendar.Calendar.iterweekdays",
        "calendar.LocaleHTMLCalendar.formatweekday",
        "calendar.HTMLCalendar.formatweekday"
    ],
    "calendar.HTMLCalendar.formatweekday": [],
    "calendar.LocaleHTMLCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.HTMLCalendar.formatmonth": [
        "calendar.Calendar.monthdays2calendar",
        "<list>"
    ],
    "calendar.HTMLCalendar.formatyear": [
        "<builtin>.min",
        "<builtin>.max",
        "<builtin>.range",
        "<list>"
    ],
    "calendar.different_locale.__enter__": [
        "locale.getlocale",
        "locale.setlocale"
    ],
    "calendar.different_locale.__exit__": [
        "locale.setlocale"
    ],
    "calendar.LocaleHTMLCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.setfirstweekday": [
        "calendar.IllegalWeekdayError.__init__"
    ],
    "calendar.IllegalWeekdayError.__init__": [],
    "calendar.format": [
        "calendar.formatstring",
        "<builtin>.print"
    ],
    "calendar.formatstring": [],
    "email.charset.add_charset": [
        "<builtin>.ValueError"
    ],
    "email.charset.Charset.__eq__": [
        "<builtin>.str"
    ],
    "email.charset.Charset.header_encode_lines": [
        "<list>.append",
        "email.charset.Charset._get_encoder",
        "<builtin>.next",
        "email.charset.Charset.get_output_charset",
        "<list>.pop",
        "email.charset._encode",
        "<builtin>.len"
    ],
    "email.base64mime.header_length": [
        "<builtin>.divmod",
        "<builtin>.len"
    ],
    "email.base64mime.header_encode": [
        "base64.b64encode",
        "<builtin>.isinstance"
    ],
    "email.base64mime.body_encode": [
        "<list>.append",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "email.base64mime.decode": [
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "email.quoprimime.header_check": [
        "<builtin>.chr"
    ],
    "email.quoprimime.body_check": [
        "<builtin>.chr"
    ],
    "email.quoprimime.header_length": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email.quoprimime.body_length": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email.quoprimime._max_append": [
        "<builtin>.chr",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "email.quoprimime.unquote": [
        "<builtin>.chr",
        "<builtin>.int"
    ],
    "email.quoprimime.quote": [
        "<builtin>.ord"
    ],
    "email.quoprimime.body_encode": [
        "email.quoprimime.quote",
        "<list>",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "email.quoprimime.decode": [
        "email.quoprimime.unquote",
        "<str>.endswith",
        "<builtin>.len"
    ],
    "email.quoprimime._unquote_match": [
        "email.quoprimime.unquote"
    ],
    "email.quoprimime.header_decode": [
        "re.sub"
    ],
    "email.errors.MessageDefect.__init__": [
        "<builtin>.super"
    ],
    "email.errors.HeaderDefect.__init__": [
        "<builtin>.super"
    ],
    "email.errors.NonPrintableDefect.__init__": [
        "<builtin>.super"
    ],
    "email.encoders._qencode": [
        "quopri.encodestring"
    ],
    "email.encoders.encode_base64": [
        "base64.encodebytes",
        "<builtin>.str"
    ],
    "email.encoders.encode_quopri": [
        "email.encoders._qencode"
    ],
    "email._policybase._PolicyBase.__init__": [
        "<builtin>.TypeError",
        "<builtin>.super",
        "<builtin>.hasattr"
    ],
    "email._policybase._PolicyBase.__setattr__": [
        "<builtin>.AttributeError",
        "<builtin>.hasattr"
    ],
    "email._policybase._PolicyBase.__add__": [
        "email._policybase._PolicyBase.clone"
    ],
    "email._policybase._extend_docstrings": [
        "email._policybase._append_doc",
        "<builtin>.getattr"
    ],
    "email._policybase._append_doc": [],
    "email._policybase.Compat32.fold": [
        "email._policybase.Compat32._fold"
    ],
    "email._policybase.Compat32._fold": [
        "email.header.Header.__init__",
        "<builtin>.isinstance",
        "email.utils._has_surrogates",
        "<list>.append"
    ],
    "email._policybase.Compat32.fold_binary": [
        "email._policybase.Compat32._fold"
    ],
    "email.header.decode_header": [
        "<list>.append",
        "<map>.pop",
        "<builtin>.reversed",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.bytes",
        "<str>.lstrip",
        "<builtin>.enumerate",
        "<list>.pop",
        "email.charset._encode",
        "<builtin>.str",
        "<builtin>.AssertionError",
        "<builtin>.hasattr",
        "<str>.lower"
    ],
    "email.header.make_header": [
        "email.charset.Charset.__init__",
        "email.header.Header.append",
        "<builtin>.isinstance",
        "email.header.Header.__init__"
    ],
    "email.header.Header.__str__": [
        "email.header.Header._normalize",
        "email.header.Header._nonctext",
        "<list>.append"
    ],
    "email.header.Header._normalize": [
        "<list>.append"
    ],
    "email.header.Header._nonctext": [],
    "email.header.Header.__eq__": [
        "<builtin>.str"
    ],
    "email.header.Header.encode": [
        "email.header.Header._normalize",
        "email.header._ValueFormatter._str",
        "email.header._ValueFormatter.__init__",
        "email.header._ValueFormatter.feed",
        "email.header._ValueFormatter.add_transition",
        "email.header.Header._nonctext",
        "email.header._ValueFormatter.newline",
        "<builtin>.len"
    ],
    "email.header._ValueFormatter.__init__": [
        "email.header._Accumulator.__init__",
        "<builtin>.len"
    ],
    "email.header._Accumulator.__init__": [
        "<builtin>.super"
    ],
    "email.header._ValueFormatter.add_transition": [
        "email.header._Accumulator.push"
    ],
    "email.header._Accumulator.push": [],
    "email.header._ValueFormatter.feed": [
        "<list>.append",
        "email.header._ValueFormatter._maxlengths",
        "email.header._Accumulator.push",
        "email.header._ValueFormatter.newline",
        "email.header._ValueFormatter._append_chunk",
        "email.header._ValueFormatter._ascii_split"
    ],
    "email.header._ValueFormatter._ascii_split": [
        "<map>.pop",
        "re.split",
        "<builtin>.zip",
        "<list>.pop",
        "email.header._ValueFormatter._append_chunk"
    ],
    "email.header._ValueFormatter._append_chunk": [
        "<list>.append",
        "email.header._Accumulator.push",
        "email.header._Accumulator.part_count",
        "email.header._Accumulator.pop_from",
        "<builtin>.len",
        "email.header._Accumulator.reset",
        "<builtin>.range"
    ],
    "email.header._Accumulator.part_count": [
        "<builtin>.super"
    ],
    "email.header._Accumulator.pop_from": [],
    "email.header._Accumulator.reset": [],
    "email.header._ValueFormatter._maxlengths": [
        "<builtin>.len"
    ],
    "email.header._ValueFormatter.newline": [
        "<builtin>.len",
        "<builtin>.str",
        "email.header._Accumulator.push",
        "email.header._Accumulator.pop",
        "<list>.append",
        "email.header._Accumulator.reset",
        "email.header._Accumulator.is_onlyws"
    ],
    "email.header._Accumulator.pop": [
        "<builtin>.super",
        "email.header._Accumulator.part_count"
    ],
    "email.header._Accumulator.is_onlyws": [
        "<builtin>.str"
    ],
    "email.header._ValueFormatter._str": [
        "email.header._ValueFormatter.newline"
    ],
    "email.header._ValueFormatter.__str__": [
        "email.header._ValueFormatter._str"
    ],
    "email.header._Accumulator.__len__": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email._encoded_words._QByteMap.__missing__": [
        "<builtin>.chr"
    ],
    "email._encoded_words.len_q": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email._encoded_words.encode_b": [
        "base64.b64encode"
    ],
    "email._encoded_words.len_b": [
        "<builtin>.divmod",
        "<builtin>.len"
    ],
    "email.iterators.body_line_iterator": [
        "_io.StringIO",
        "<builtin>.isinstance"
    ],
    "email.iterators._structure": [
        "<builtin>.print",
        "email.iterators._structure"
    ],
    "importlib_metadata._text.FoldedCase.__lt__": [
        "importlib_metadata._text.FoldedCase.lower"
    ],
    "importlib_metadata._text.FoldedCase.lower": [
        "<builtin>.super"
    ],
    "importlib_metadata._text.FoldedCase.__gt__": [
        "importlib_metadata._text.FoldedCase.lower"
    ],
    "importlib_metadata._text.FoldedCase.__eq__": [
        "importlib_metadata._text.FoldedCase.lower"
    ],
    "importlib_metadata._text.FoldedCase.__ne__": [
        "importlib_metadata._text.FoldedCase.lower"
    ],
    "importlib_metadata._text.FoldedCase.__hash__": [
        "<builtin>.hash",
        "importlib_metadata._text.FoldedCase.lower"
    ],
    "importlib_metadata._text.FoldedCase.__contains__": [
        "<builtin>.super"
    ],
    "importlib_metadata._text.FoldedCase.index": [
        "importlib_metadata._text.FoldedCase.lower"
    ],
    "importlib_metadata._text.FoldedCase.split": [
        "re.compile",
        "re.escape"
    ],
    "importlib_metadata._compat.install": [
        "importlib_metadata._compat.disable_stdlib_finder"
    ],
    "importlib_metadata._compat.disable_stdlib_finder": [
        "<builtin>.filter"
    ],
    "importlib_metadata._py39compat.normalized_name": [
        "<builtin>.getattr"
    ],
    "importlib_metadata._itertools.unique_everseen": [
        "itertools.filterfalse",
        "<builtin>.set"
    ],
    "pkg_resources.parse_version": [
        "warnings.warn"
    ],
    "pkg_resources.__getstate__": [
        "<builtin>.globals",
        "<map>.items"
    ],
    "pkg_resources.__setstate__": [
        "<builtin>.globals"
    ],
    "pkg_resources.ResolutionError.__repr__": [
        "<builtin>.repr"
    ],
    "pkg_resources.VersionConflict.report": [
        "<builtin>.locals"
    ],
    "pkg_resources.DistributionNotFound.report": [
        "<builtin>.locals"
    ],
    "pkg_resources.DistributionNotFound.__str__": [
        "pkg_resources.DistributionNotFound.report"
    ],
    "pkg_resources.get_provider": [
        "<builtin>.isinstance",
        "<builtin>.__import__",
        "<builtin>.getattr",
        "<builtin>.str",
        "pkg_resources._find_adapter"
    ],
    "pkg_resources.get_distribution": [
        "pkg_resources.get_provider",
        "pkg_resources.Requirement.parse",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "pkg_resources.Requirement.parse": [
        "pkg_resources.parse_requirements"
    ],
    "pkg_resources.load_entry_point": [
        "pkg_resources.get_distribution"
    ],
    "pkg_resources.get_entry_map": [
        "pkg_resources.get_distribution"
    ],
    "pkg_resources.get_entry_info": [
        "pkg_resources.get_distribution"
    ],
    "pkg_resources.WorkingSet.__contains__": [
        "<map>.get"
    ],
    "pkg_resources.WorkingSet.run_script": [
        "pkg_resources.WorkingSet.require"
    ],
    "pkg_resources.WorkingSet.find_plugins": [
        "<builtin>.list",
        "<builtin>.map",
        "pkg_resources.Environment.__init__"
    ],
    "pkg_resources.WorkingSet.__getstate__": [
        "<map>.copy"
    ],
    "pkg_resources.WorkingSet.__setstate__": [
        "<map>.copy"
    ],
    "pkg_resources.Environment.__getitem__": [
        "<map>.get"
    ],
    "pkg_resources.Environment.__iter__": [
        "<map>.keys"
    ],
    "pkg_resources.Environment.__iadd__": [
        "pkg_resources.Environment.add",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "pkg_resources.ResourceManager.resource_exists": [
        "pkg_resources.get_provider"
    ],
    "pkg_resources.ResourceManager.resource_isdir": [
        "pkg_resources.get_provider"
    ],
    "pkg_resources.ResourceManager.resource_filename": [
        "pkg_resources.get_provider"
    ],
    "pkg_resources.ResourceManager.resource_stream": [
        "pkg_resources.get_provider"
    ],
    "pkg_resources.ResourceManager.resource_string": [
        "pkg_resources.get_provider"
    ],
    "pkg_resources.ResourceManager.resource_listdir": [
        "pkg_resources.get_provider"
    ],
    "pkg_resources.ResourceManager.extraction_error": [
        "pkg_resources.get_default_cache",
        "<str>.lstrip",
        "<builtin>.locals",
        "textwrap.dedent"
    ],
    "pkg_resources.get_default_cache": [],
    "pkg_resources.ResourceManager.get_cache_path": [
        "pkg_resources.ResourceManager.extraction_error",
        "pkg_resources.get_default_cache",
        "posixpath.join",
        "ntpath.join",
        "pkg_resources.ResourceManager._warn_unsafe_extraction_path",
        "pkg_resources._bypass_ensure_directory"
    ],
    "pkg_resources._bypass_ensure_directory": [
        "pkg_resources._bypass_ensure_directory",
        "genericpath.isdir",
        "<builtin>.IOError",
        "posixpath.split"
    ],
    "pkg_resources.ResourceManager._warn_unsafe_extraction_path": [
        "<builtin>.locals",
        "warnings.warn"
    ],
    "pkg_resources.ResourceManager.set_extraction_path": [
        "<builtin>.ValueError"
    ],
    "pkg_resources.safe_name": [
        "re.sub"
    ],
    "pkg_resources.safe_version": [
        "re.sub",
        "<builtin>.str"
    ],
    "pkg_resources.safe_extra": [
        "re.sub",
        "<str>.lower"
    ],
    "pkg_resources.invalid_marker": [
        "pkg_resources.evaluate_marker"
    ],
    "pkg_resources.evaluate_marker": [
        "<builtin>.SyntaxError"
    ],
    "pkg_resources.NullProvider.__init__": [
        "ntpath.dirname",
        "posixpath.dirname",
        "<builtin>.getattr"
    ],
    "pkg_resources.NullProvider.get_resource_filename": [
        "pkg_resources.NullProvider._fn"
    ],
    "pkg_resources.NullProvider._fn": [
        "posixpath.join",
        "ntpath.join",
        "pkg_resources.NullProvider._validate_resource_path"
    ],
    "pkg_resources.NullProvider._validate_resource_path": [
        "posixpath.isabs",
        "ntpath.isabs",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "pkg_resources.NullProvider.get_resource_stream": [
        "pkg_resources.NullProvider.get_resource_string",
        "_io.BytesIO"
    ],
    "pkg_resources.NullProvider.get_resource_string": [
        "pkg_resources.NullProvider._get",
        "pkg_resources.NullProvider._fn",
        "pkg_resources.DefaultProvider._get"
    ],
    "pkg_resources.NullProvider._get": [
        "<builtin>.NotImplementedError",
        "<builtin>.hasattr"
    ],
    "pkg_resources.NullProvider.has_resource": [
        "pkg_resources.NullProvider._has",
        "pkg_resources.ZipProvider._has",
        "pkg_resources.DefaultProvider._has",
        "pkg_resources.NullProvider._fn"
    ],
    "pkg_resources.NullProvider._has": [
        "<builtin>.NotImplementedError"
    ],
    "pkg_resources.NullProvider._get_metadata_path": [
        "pkg_resources.NullProvider._fn"
    ],
    "pkg_resources.NullProvider.has_metadata": [
        "pkg_resources.NullProvider._has",
        "pkg_resources.NullProvider._get_metadata_path",
        "pkg_resources.DefaultProvider._has",
        "pkg_resources.ZipProvider._has"
    ],
    "pkg_resources.NullProvider.get_metadata": [
        "pkg_resources.NullProvider._get",
        "pkg_resources.NullProvider._get_metadata_path",
        "pkg_resources.DefaultProvider._get"
    ],
    "pkg_resources.NullProvider.get_metadata_lines": [
        "pkg_resources.extern.jaraco.text.yield_lines",
        "pkg_resources.NullProvider.get_metadata"
    ],
    "pkg_resources.NullProvider.resource_isdir": [
        "pkg_resources.NullProvider._isdir",
        "pkg_resources.DefaultProvider._isdir",
        "pkg_resources.NullProvider._fn",
        "pkg_resources.ZipProvider._isdir"
    ],
    "pkg_resources.NullProvider._isdir": [
        "<builtin>.NotImplementedError"
    ],
    "pkg_resources.NullProvider.metadata_isdir": [
        "pkg_resources.NullProvider._isdir",
        "pkg_resources.DefaultProvider._isdir",
        "pkg_resources.NullProvider._fn",
        "pkg_resources.ZipProvider._isdir"
    ],
    "pkg_resources.NullProvider.resource_listdir": [
        "pkg_resources.NullProvider._listdir",
        "pkg_resources.DefaultProvider._listdir",
        "pkg_resources.ZipProvider._listdir",
        "pkg_resources.NullProvider._fn"
    ],
    "pkg_resources.NullProvider._listdir": [
        "<builtin>.NotImplementedError"
    ],
    "pkg_resources.NullProvider.metadata_listdir": [
        "pkg_resources.NullProvider._listdir",
        "pkg_resources.DefaultProvider._listdir",
        "pkg_resources.ZipProvider._listdir",
        "pkg_resources.NullProvider._fn"
    ],
    "pkg_resources.NullProvider.run_script": [
        "<builtin>.locals",
        "<str>.replace",
        "linecache",
        "<builtin>.compile",
        "pkg_resources.NullProvider._fn",
        "pkg_resources.NullProvider.get_metadata",
        "pkg_resources.NullProvider.has_metadata",
        "<builtin>.exec",
        "<builtin>.open",
        "<builtin>.len",
        "genericpath.exists"
    ],
    "pkg_resources._parents": [
        "ntpath.split",
        "posixpath.split"
    ],
    "pkg_resources.EggProvider.__init__": [
        "pkg_resources.EggProvider._setup_prefix",
        "<builtin>.super"
    ],
    "pkg_resources.EggProvider._setup_prefix": [
        "<builtin>.filter",
        "pkg_resources.EggProvider._set_egg",
        "<builtin>.next",
        "pkg_resources._parents"
    ],
    "pkg_resources.EggProvider._set_egg": [
        "posixpath.join",
        "ntpath.basename",
        "posixpath.basename",
        "ntpath.join"
    ],
    "pkg_resources.DefaultProvider._has": [
        "genericpath.exists"
    ],
    "pkg_resources.DefaultProvider._isdir": [
        "genericpath.isdir",
        "nt._isdir"
    ],
    "pkg_resources.DefaultProvider.get_resource_stream": [
        "<builtin>.open",
        "pkg_resources.NullProvider._fn"
    ],
    "pkg_resources.DefaultProvider._get": [
        "<builtin>.open"
    ],
    "pkg_resources.ZipManifests.build": [
        "<builtin>.dict",
        "zipfile.ZipFile.__init__"
    ],
    "pkg_resources.MemoizedZipManifests.load": [
        "pkg_resources.ZipManifests.build",
        "ntpath.normpath",
        "posixpath.normpath"
    ],
    "pkg_resources.ZipProvider.__init__": [
        "<builtin>.super"
    ],
    "pkg_resources.ZipProvider._zipinfo_name": [
        "<builtin>.AssertionError",
        "<str>.rstrip",
        "<str>.startswith",
        "<builtin>.len"
    ],
    "pkg_resources.ZipProvider._parts": [
        "<builtin>.AssertionError",
        "<builtin>.len"
    ],
    "pkg_resources.ZipProvider.zipinfo": [
        "pkg_resources.MemoizedZipManifests.load"
    ],
    "pkg_resources.ZipProvider.get_resource_filename": [
        "<builtin>.NotImplementedError",
        "pkg_resources.ZipProvider._resource_to_zip",
        "pkg_resources.ZipProvider._get_eager_resources",
        "pkg_resources.ZipProvider._parts",
        "pkg_resources.ZipProvider._eager_to_zip",
        "pkg_resources.ZipProvider._extract_resource"
    ],
    "pkg_resources.ZipProvider._resource_to_zip": [
        "pkg_resources.ZipProvider._zipinfo_name",
        "pkg_resources.NullProvider._fn"
    ],
    "pkg_resources.ZipProvider._get_eager_resources": [
        "<list>.extend",
        "pkg_resources.NullProvider.get_metadata_lines",
        "pkg_resources.NullProvider.has_metadata"
    ],
    "pkg_resources.ZipProvider._eager_to_zip": [
        "pkg_resources.ZipProvider._zipinfo_name",
        "pkg_resources.NullProvider._fn"
    ],
    "pkg_resources.ZipProvider._extract_resource": [
        "pkg_resources.ZipProvider._get_date_and_size",
        "pkg_resources.ZipProvider._is_current",
        "posixpath.join",
        "pkg_resources.ZipProvider._index",
        "posixpath.dirname",
        "ntpath.join",
        "pkg_resources.ZipProvider._parts",
        "genericpath.isfile",
        "ntpath.dirname",
        "pkg_resources.ZipProvider._extract_resource",
        "<builtin>.IOError",
        "pkg_resources._mkstemp"
    ],
    "pkg_resources.ZipProvider._index": [],
    "pkg_resources.ZipProvider._get_date_and_size": [],
    "pkg_resources.ZipProvider._is_current": [
        "pkg_resources.ZipProvider._get_date_and_size",
        "genericpath.isfile",
        "<builtin>.open"
    ],
    "pkg_resources._mkstemp": [
        "tempfile.mkstemp"
    ],
    "pkg_resources.ZipProvider._has": [
        "pkg_resources.ZipProvider._zipinfo_name",
        "pkg_resources.ZipProvider._index"
    ],
    "pkg_resources.ZipProvider._isdir": [
        "pkg_resources.ZipProvider._zipinfo_name",
        "pkg_resources.ZipProvider._index"
    ],
    "pkg_resources.ZipProvider._listdir": [
        "pkg_resources.ZipProvider._index",
        "<builtin>.list",
        "<map>.get"
    ],
    "pkg_resources.FileMetadata.has_metadata": [
        "genericpath.isfile"
    ],
    "pkg_resources.FileMetadata.get_metadata": [
        "<builtin>.KeyError",
        "_io.open",
        "pkg_resources.FileMetadata._warn_on_replacement"
    ],
    "pkg_resources.FileMetadata._warn_on_replacement": [
        "<builtin>.locals",
        "warnings.warn"
    ],
    "pkg_resources.FileMetadata.get_metadata_lines": [
        "pkg_resources.FileMetadata.get_metadata",
        "pkg_resources.extern.jaraco.text.yield_lines"
    ],
    "pkg_resources.EggMetadata.__init__": [
        "posixpath.join",
        "pkg_resources.EggProvider._setup_prefix",
        "ntpath.join"
    ],
    "pkg_resources.find_eggs_in_zip": [
        "pkg_resources.Distribution.from_location",
        "pkg_resources.find_eggs_in_zip",
        "posixpath.join",
        "pkg_resources.Distribution.from_filename",
        "pkg_resources.NullProvider.has_metadata",
        "pkg_resources.NullProvider.resource_listdir",
        "ntpath.join",
        "pkg_resources._is_egg_path",
        "pkg_resources.EggMetadata.__init__"
    ],
    "pkg_resources.Distribution.from_filename": [
        "pkg_resources.Distribution.from_location",
        "ntpath.basename",
        "posixpath.basename",
        "pkg_resources._normalize_cached"
    ],
    "pkg_resources._normalize_cached": [
        "pkg_resources.normalize_path"
    ],
    "pkg_resources.normalize_path": [
        "ntpath.realpath",
        "posixpath.realpath",
        "posixpath.normpath",
        "pkg_resources._cygwin_patch",
        "posixpath.normcase",
        "ntpath.normcase",
        "ntpath.normpath"
    ],
    "pkg_resources._cygwin_patch": [
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "pkg_resources.Distribution.from_location": [
        "posixpath.splitext",
        "pkg_resources.Distribution.__init__",
        "<map>",
        "ntpath.splitext",
        "pkg_resources.Distribution._reload_version",
        "pkg_resources.EggInfoDistribution._reload_version",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "pkg_resources.Distribution.__init__": [
        "pkg_resources.safe_name",
        "pkg_resources.safe_version"
    ],
    "pkg_resources.Distribution._reload_version": [],
    "pkg_resources.DefaultProvider._listdir": [],
    "pkg_resources._is_egg_path": [
        "pkg_resources._is_zip_egg",
        "pkg_resources._is_unpacked_egg"
    ],
    "pkg_resources._is_zip_egg": [
        "genericpath.isfile",
        "zipfile.is_zipfile"
    ],
    "pkg_resources._is_unpacked_egg": [
        "<str>.endswith",
        "posixpath.join",
        "ntpath.join",
        "genericpath.isfile",
        "<str>.lower"
    ],
    "pkg_resources._by_version_descending": [
        "<builtin>.sorted"
    ],
    "pkg_resources.find_on_path": [
        "pkg_resources._normalize_cached",
        "posixpath.join",
        "pkg_resources._is_unpacked_egg",
        "pkg_resources.safe_listdir",
        "pkg_resources.Distribution.from_filename",
        "ntpath.join",
        "pkg_resources._by_version_descending",
        "pkg_resources.dist_factory",
        "pkg_resources.PathMetadata.__init__"
    ],
    "pkg_resources.PathMetadata.__init__": [],
    "pkg_resources.safe_listdir": [],
    "pkg_resources.dist_factory": [
        "posixpath.join",
        "genericpath.isdir",
        "ntpath.join",
        "nt._isdir",
        "pkg_resources._is_egg_path"
    ],
    "pkg_resources.NoDists.__call__": [
        "<builtin>.iter"
    ],
    "pkg_resources.distributions_from_metadata": [
        "pkg_resources.Distribution.from_location",
        "genericpath.isdir",
        "posixpath.dirname",
        "pkg_resources.FileMetadata.__init__",
        "ntpath.basename",
        "nt._isdir",
        "posixpath.basename",
        "<builtin>.len",
        "ntpath.dirname",
        "pkg_resources.PathMetadata.__init__"
    ],
    "pkg_resources.FileMetadata.__init__": [],
    "pkg_resources.non_empty_lines": [
        "<builtin>.open"
    ],
    "pkg_resources.resolve_egg_link": [
        "posixpath.join",
        "posixpath.dirname",
        "<builtin>.next",
        "pkg_resources.non_empty_lines",
        "ntpath.join",
        "ntpath.dirname",
        "<builtin>.map"
    ],
    "pkg_resources._handle_ns": [
        "importlib.import_module",
        "pkgutil.get_importer",
        "pkg_resources._set_parent_ns",
        "pkg_resources._rebuild_mod_path",
        "<builtin>.TypeError",
        "warnings.catch_warnings.__init__",
        "<builtin>.hasattr",
        "pkg_resources._find_adapter"
    ],
    "pkg_resources._set_parent_ns": [
        "<builtin>.setattr"
    ],
    "pkg_resources._rebuild_mod_path": [
        "<builtin>.isinstance",
        "pkg_resources._normalize_cached",
        "<builtin>.sorted"
    ],
    "pkg_resources.declare_namespace": [
        "<builtin>.TypeError",
        "_imp.acquire_lock",
        "<builtin>.__import__",
        "pkg_resources.declare_namespace",
        "pkg_resources._handle_ns",
        "os._Environ.__iter__",
        "email.message.Message.__iter__"
    ],
    "_imp.acquire_lock": [],
    "pkg_resources.fixup_namespace_packages": [
        "pkg_resources.fixup_namespace_packages",
        "_imp.acquire_lock",
        "pkg_resources._handle_ns"
    ],
    "pkg_resources.file_ns_handler": [
        "posixpath.join",
        "ntpath.join",
        "pkg_resources._normalize_cached"
    ],
    "pkg_resources.EntryPoint.__init__": [
        "<map>",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "pkg_resources.EntryPoint.__repr__": [
        "<builtin>.str"
    ],
    "pkg_resources.EntryPoint.load": [
        "pkg_resources.EntryPoint.resolve",
        "pkg_resources.EntryPoint.require",
        "warnings.warn"
    ],
    "pkg_resources.EntryPoint.require": [
        "<builtin>.list",
        "<builtin>.map"
    ],
    "pkg_resources.EntryPoint.resolve": [
        "functools.reduce",
        "<builtin>.__import__",
        "<builtin>.ImportError",
        "<builtin>.str"
    ],
    "pkg_resources.EntryPoint.parse": [
        "pkg_resources.EntryPoint.__init__",
        "pkg_resources.EntryPoint._parse_extras",
        "<builtin>.ValueError",
        "pathlib.PurePath.match"
    ],
    "pkg_resources.EntryPoint._parse_extras": [
        "pkg_resources.Requirement.parse",
        "<builtin>.ValueError"
    ],
    "pkg_resources.EntryPoint.parse_group": [
        "pkg_resources.extern.jaraco.text.yield_lines",
        "<map>",
        "<builtin>.ValueError",
        "pkg_resources.EntryPoint.parse",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "pkg_resources.EntryPoint.parse_map": [
        "pkg_resources.EntryPoint.parse_group",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "pkg_resources.split_sections"
    ],
    "pkg_resources.split_sections": [
        "pkg_resources.extern.jaraco.text.yield_lines",
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "pkg_resources._version_from_file": [
        "<builtin>.filter",
        "<builtin>.iter",
        "<builtin>.next",
        "pkg_resources.safe_version"
    ],
    "pkg_resources.Distribution.__hash__": [
        "<builtin>.hash"
    ],
    "pkg_resources.Distribution.__eq__": [
        "<builtin>.isinstance"
    ],
    "pkg_resources.Distribution.key": [
        "<str>.lower"
    ],
    "pkg_resources.Distribution.parsed_version": [
        "<builtin>.hasattr",
        "pkg_resources.parse_version"
    ],
    "pkg_resources.Distribution._warn_legacy_version": [
        "<str>.replace",
        "<builtin>.isinstance",
        "<builtin>.vars",
        "textwrap.dedent",
        "<str>.strip",
        "warnings.warn"
    ],
    "pkg_resources.Distribution.version": [
        "pkg_resources.Distribution._get_metadata_path_for_display",
        "pkg_resources.Distribution._get_version",
        "<builtin>.ValueError"
    ],
    "pkg_resources.Distribution._get_version": [
        "pkg_resources.Distribution._get_metadata",
        "pkg_resources._version_from_file"
    ],
    "pkg_resources.Distribution._get_metadata": [],
    "pkg_resources.Distribution._get_metadata_path_for_display": [],
    "pkg_resources.Distribution._dep_map": [
        "pkg_resources.Distribution._build_dep_map",
        "pkg_resources.Distribution._filter_extras"
    ],
    "pkg_resources.Distribution._build_dep_map": [
        "pkg_resources.Distribution._get_metadata",
        "pkg_resources.parse_requirements",
        "<map>.setdefault",
        "pkg_resources.split_sections"
    ],
    "pkg_resources.Distribution._filter_extras": [
        "<map>.pop",
        "<builtin>.list",
        "pkg_resources.invalid_marker",
        "<map>.setdefault",
        "pkg_resources.evaluate_marker",
        "<builtin>.filter",
        "pkg_resources.safe_extra"
    ],
    "pkg_resources.Distribution.requires": [
        "<list>.extend"
    ],
    "pkg_resources.Distribution.activate": [
        "pkg_resources.Distribution._get_metadata",
        "pkg_resources.fixup_namespace_packages",
        "pkg_resources.declare_namespace",
        "pkg_resources.Distribution.insert_on"
    ],
    "pkg_resources.Distribution.insert_on": [
        "pkg_resources._normalize_cached",
        "posixpath.dirname",
        "<builtin>.enumerate",
        "ntpath.dirname",
        "pkg_resources.Distribution.check_version_conflict"
    ],
    "pkg_resources.Distribution.check_version_conflict": [
        "pkg_resources.issue_warning",
        "pkg_resources.normalize_path",
        "<str>.startswith",
        "<builtin>.getattr",
        "pkg_resources.Distribution._get_metadata"
    ],
    "pkg_resources.issue_warning": [
        "<builtin>.globals",
        "warnings.warn"
    ],
    "pkg_resources.Distribution.egg_name": [
        "pkg_resources.to_filename"
    ],
    "pkg_resources.to_filename": [
        "<str>.replace"
    ],
    "pkg_resources.Distribution.__repr__": [
        "<builtin>.str"
    ],
    "pkg_resources.Distribution.__str__": [
        "<builtin>.getattr"
    ],
    "pkg_resources.Distribution.__getattr__": [
        "<builtin>.AttributeError",
        "<builtin>.getattr"
    ],
    "pkg_resources.Distribution.__dir__": [
        "<builtin>.super",
        "<builtin>.list",
        "<builtin>.set"
    ],
    "pkg_resources.Distribution.as_requirement": [
        "pkg_resources.Requirement.parse",
        "<builtin>.isinstance"
    ],
    "pkg_resources.Distribution.load_entry_point": [
        "pkg_resources.Distribution.get_entry_info",
        "<builtin>.ImportError"
    ],
    "pkg_resources.Distribution.get_entry_info": [
        "pkg_resources.Distribution.get_entry_map",
        "<map>.get"
    ],
    "pkg_resources.Distribution.get_entry_map": [
        "pkg_resources.Distribution._get_metadata",
        "pkg_resources.EntryPoint.parse_map",
        "<map>.get"
    ],
    "pkg_resources.Distribution.has_version": [
        "<builtin>.repr",
        "pkg_resources.issue_warning"
    ],
    "pkg_resources.Distribution.clone": [
        "<builtin>.getattr"
    ],
    "pkg_resources.EggInfoDistribution._reload_version": [
        "pkg_resources.Distribution._get_version"
    ],
    "pkg_resources.DistInfoDistribution._dep_map": [
        "pkg_resources.DistInfoDistribution._compute_dependencies"
    ],
    "pkg_resources.DistInfoDistribution._compute_dependencies": [
        "pkg_resources.DistInfoDistribution._compute_dependencies.reqs_for_extra",
        "<list>.extend",
        "pkg_resources.safe_extra"
    ],
    "pkg_resources.DistInfoDistribution._compute_dependencies.reqs_for_extra": [],
    "pkg_resources.Requirement.__init__": [
        "<builtin>.super",
        "<builtin>.frozenset",
        "<builtin>.hash",
        "<builtin>.tuple",
        "<builtin>.str",
        "pkg_resources.safe_name",
        "<str>.lower",
        "<builtin>.map"
    ],
    "pkg_resources.Requirement.__eq__": [
        "<builtin>.isinstance"
    ],
    "pkg_resources.Requirement.__contains__": [
        "<builtin>.isinstance"
    ],
    "pkg_resources.Requirement.__repr__": [
        "<builtin>.str"
    ],
    "pkg_resources.ensure_directory": [
        "ntpath.dirname",
        "os.makedirs",
        "posixpath.dirname"
    ],
    "pkgutil._iter_file_finder_modules": [
        "inspect.getmodulename",
        "posixpath.join",
        "genericpath.isdir",
        "inspect",
        "ntpath.join",
        "nt._isdir",
        "<list>.sort"
    ],
    "pkgutil._import_imp": [
        "warnings.catch_warnings.__init__"
    ],
    "pkgutil.ImpImporter.__init__": [
        "warnings.warn",
        "pkgutil._import_imp"
    ],
    "pkgutil.ImpImporter.find_module": [
        "pkgutil.ImpLoader.__init__"
    ],
    "pkgutil.ImpLoader.__init__": [
        "warnings.warn",
        "pkgutil._import_imp"
    ],
    "pkgutil.ImpImporter.iter_modules": [
        "inspect.getmodulename",
        "posixpath.join",
        "genericpath.isdir",
        "inspect",
        "ntpath.join",
        "nt._isdir",
        "<list>.sort"
    ],
    "pkgutil.ImpLoader.load_module": [
        "pkgutil.ImpLoader._reopen"
    ],
    "pkgutil.ImpLoader._reopen": [
        "<builtin>.open"
    ],
    "pkgutil.ImpLoader.get_data": [
        "<builtin>.open"
    ],
    "pkgutil.ImpLoader._fix_name": [
        "<builtin>.ImportError"
    ],
    "pkgutil.ImpLoader.is_package": [
        "pkgutil.ImpLoader._fix_name"
    ],
    "pkgutil.ImpLoader.get_code": [
        "<builtin>.compile",
        "pkgutil.ImpLoader.get_source",
        "pkgutil.ImpLoader._get_delegate",
        "pkgutil.ImpLoader._fix_name",
        "pkgutil.ImpLoader._reopen",
        "pkgutil.read_code"
    ],
    "pkgutil.ImpLoader._get_delegate": [
        "pkgutil._get_spec",
        "pkgutil.ImpImporter.__init__"
    ],
    "pkgutil.read_code": [],
    "pkgutil.ImpLoader.get_source": [
        "pkgutil.ImpLoader._get_delegate",
        "pkgutil.ImpLoader._fix_name",
        "pkgutil.ImpLoader._reopen",
        "<builtin>.open",
        "genericpath.exists"
    ],
    "pkgutil.ImpLoader.get_filename": [
        "pkgutil.ImpLoader._fix_name",
        "pkgutil.ImpLoader._get_delegate"
    ],
    "pkgutil.iter_zipimport_modules": [
        "inspect",
        "<builtin>.len",
        "inspect.getmodulename",
        "<builtin>.sorted"
    ],
    "pkgutil.get_loader": [
        "pkgutil.find_loader",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "pkgutil.find_loader": [
        "importlib.util.find_spec",
        "<builtin>.type",
        "<builtin>.ImportError"
    ],
    "pkgutil.extend_path": [
        "pkgutil.get_importer",
        "<builtin>.isinstance",
        "codecs.StreamRecoder.write",
        "posixpath.join",
        "ntpath.join",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "genericpath.isfile",
        "<builtin>.open",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<builtin>.hasattr",
        "os._Environ.__iter__",
        "email.message.Message.__iter__"
    ],
    "pkgutil.get_data": [
        "importlib.util.find_spec",
        "posixpath.join",
        "posixpath.dirname",
        "ntpath.join",
        "importlib._bootstrap._load",
        "ntpath.dirname",
        "<builtin>.hasattr"
    ],
    "email.parser.HeaderParser.parse": [
        "email.parser.Parser.parse"
    ],
    "email.parser.HeaderParser.parsestr": [
        "email.parser.Parser.parsestr"
    ],
    "email.parser.BytesHeaderParser.parse": [
        "email.parser.BytesParser.parse"
    ],
    "email.parser.BytesHeaderParser.parsebytes": [
        "email.parser.BytesParser.parsebytes"
    ],
    "email.feedparser.BufferedSubFile.push_eof_matcher": [
        "<list>.append"
    ],
    "email.feedparser.BufferedSubFile.pop_eof_matcher": [
        "<list>.pop"
    ],
    "email.feedparser.BufferedSubFile.readline": [
        "<builtin>.reversed"
    ],
    "email.feedparser.BufferedSubFile.__next__": [
        "email.feedparser.BufferedSubFile.readline"
    ],
    "email.feedparser.BufferedSubFile.__iter__": [],
    "email.feedparser.BufferedSubFile.unreadline": [],
    "email.feedparser.BytesFeedParser.feed": [
        "<builtin>.super"
    ],
    "imp.cache_from_source": [
        "warnings.catch_warnings.__init__"
    ],
    "imp.source_from_cache": [
        "_bootstrap_external.source_from_cache"
    ],
    "_bootstrap_external.source_from_cache": [],
    "imp.NullImporter.__init__": [
        "genericpath.isdir",
        "nt._isdir",
        "<builtin>.ImportError"
    ],
    "imp._HackedGetData.__init__": [
        "<builtin>.super"
    ],
    "imp._HackedGetData.get_data": [
        "<builtin>.super",
        "<builtin>.open"
    ],
    "imp.load_source": [
        "importlib._bootstrap._exec",
        "_bootstrap_external.SourceFileLoader",
        "importlib._bootstrap._load",
        "_bootstrap_external.spec_from_file_location"
    ],
    "_bootstrap_external.spec_from_file_location": [],
    "_bootstrap_external.SourceFileLoader": [],
    "imp.load_compiled": [
        "importlib._bootstrap._exec",
        "importlib._bootstrap._load",
        "_bootstrap_external.spec_from_file_location"
    ],
    "imp.load_package": [
        "posixpath.join",
        "genericpath.isdir",
        "importlib._bootstrap._exec",
        "_bootstrap_external.spec_from_file_location",
        "ntpath.join",
        "nt._isdir",
        "importlib._bootstrap._load",
        "genericpath.exists"
    ],
    "imp.load_module": [
        "imp.load_dynamic",
        "imp.load_source",
        "imp.load_package",
        "<builtin>.ImportError",
        "imp.init_builtin",
        "<builtin>.open",
        "_imp.init_frozen",
        "imp.load_compiled",
        "<builtin>.ValueError"
    ],
    "_imp.init_frozen": [],
    "imp.init_builtin": [
        "importlib._bootstrap._builtin_from_name"
    ],
    "imp.load_dynamic": [
        "_bootstrap.ModuleSpec",
        "_bootstrap_external.ExtensionFileLoader",
        "importlib.machinery",
        "importlib._bootstrap._load"
    ],
    "_bootstrap_external.ExtensionFileLoader": [],
    "_bootstrap.ModuleSpec": [],
    "imp.find_module": [
        "<builtin>.isinstance",
        "tokenize.detect_encoding",
        "posixpath.join",
        "<builtin>.TypeError",
        "_imp.is_builtin",
        "ntpath.join",
        "genericpath.isfile",
        "_imp.is_frozen",
        "<builtin>.type",
        "imp.get_suffixes",
        "<builtin>.open",
        "<builtin>.RuntimeError",
        "os._Environ.__iter__",
        "email.message.Message.__iter__"
    ],
    "_imp.is_builtin": [],
    "_imp.is_frozen": [],
    "imp.get_suffixes": [],
    "imp.reload": [
        "importlib.reload"
    ],
    "importlib._bootstrap._ModuleLock.has_deadlock": [
        "<map>.get"
    ],
    "importlib._bootstrap._ModuleLock.__repr__": [
        "<builtin>.id"
    ],
    "importlib._bootstrap._DummyModuleLock.release": [
        "<builtin>.RuntimeError"
    ],
    "importlib._bootstrap._DummyModuleLock.__repr__": [
        "<builtin>.id"
    ],
    "importlib._bootstrap._ModuleLockManager.__enter__": [
        "importlib._bootstrap._get_module_lock",
        "importlib._bootstrap._ModuleLock.acquire",
        "importlib._bootstrap._DummyModuleLock.acquire"
    ],
    "importlib._bootstrap._ModuleLockManager.__exit__": [
        "importlib._bootstrap._DummyModuleLock.release",
        "importlib._bootstrap._ModuleLock.release"
    ],
    "importlib._bootstrap._ModuleLock.release": [],
    "importlib._bootstrap_external.spec_from_file_location": [
        "<str>.endswith",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._LoaderBasics.is_package",
        "importlib._bootstrap.BuiltinImporter.is_package",
        "importlib._bootstrap.FrozenImporter.is_package",
        "<builtin>.hasattr",
        "importlib._bootstrap_external._get_supported_file_loaders"
    ],
    "importlib._bootstrap_external._get_supported_file_loaders": [],
    "importlib._bootstrap_external._path_split": [
        "<str>.rsplit",
        "<builtin>.reversed",
        "<str>.rpartition",
        "<builtin>.len"
    ],
    "importlib._bootstrap._module_repr": [
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "importlib._bootstrap.ModuleSpec.__repr__": [
        "<list>.append"
    ],
    "importlib._bootstrap.ModuleSpec.cached": [
        "importlib._bootstrap_external._get_cached"
    ],
    "importlib._bootstrap_external._get_cached": [
        "<str>.endswith",
        "importlib._bootstrap_external.cache_from_source"
    ],
    "importlib._bootstrap_external.cache_from_source": [
        "<builtin>.NotImplementedError",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_isabs",
        "<builtin>.TypeError",
        "importlib._bootstrap_external._path_join",
        "<str>.lstrip",
        "<str>.isalnum",
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "<str>.isalnum": [],
    "importlib._bootstrap_external._path_isabs": [
        "<str>.startswith"
    ],
    "importlib._bootstrap_external._path_join": [],
    "importlib._bootstrap.ModuleSpec.parent": [
        "<str>.rpartition"
    ],
    "importlib._bootstrap.BuiltinImporter.find_module": [
        "importlib._bootstrap.BuiltinImporter.find_spec"
    ],
    "importlib._bootstrap._requires_builtin._requires_builtin_wrapper": [
        "importlib._bootstrap.BuiltinImporter.get_code",
        "importlib._bootstrap.BuiltinImporter.get_source",
        "importlib._bootstrap.BuiltinImporter.is_package",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap.BuiltinImporter.get_code": [],
    "importlib._bootstrap.BuiltinImporter.get_source": [],
    "importlib._bootstrap.FrozenImporter.find_spec": [
        "importlib._bootstrap.spec_from_loader"
    ],
    "importlib._bootstrap._requires_frozen._requires_frozen_wrapper": [
        "importlib._bootstrap.FrozenImporter.get_source",
        "importlib._bootstrap.FrozenImporter.is_package",
        "importlib._bootstrap.FrozenImporter.get_code",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap.FrozenImporter.get_code": [],
    "importlib._bootstrap.FrozenImporter.get_source": [],
    "importlib._bootstrap._find_spec_legacy": [
        "importlib._bootstrap.spec_from_loader"
    ],
    "importlib._bootstrap._find_and_load_unlocked": [
        "importlib._bootstrap._find_spec",
        "importlib._bootstrap._call_with_frames_removed",
        "importlib._bootstrap._load_unlocked",
        "<builtin>.setattr",
        "<builtin>.ModuleNotFoundError"
    ],
    "importlib._bootstrap._handle_fromlist": [
        "<builtin>.isinstance",
        "importlib._bootstrap._handle_fromlist",
        "<builtin>.TypeError",
        "importlib._bootstrap._call_with_frames_removed",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap.__import__": [
        "importlib._bootstrap._handle_fromlist",
        "importlib._bootstrap._gcd_import",
        "<builtin>.len",
        "importlib._bootstrap._calc___package__",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap._calc___package__": [],
    "importlib._bootstrap._install": [
        "importlib._bootstrap._setup"
    ],
    "importlib._bootstrap._install_external_importers": [
        "importlib._bootstrap_external"
    ],
    "importlib._bootstrap._get_module_lock.cb": [
        "<map>.get"
    ],
    "importlib._bootstrap_external._pack_uint32": [
        "<builtin>.int"
    ],
    "importlib._bootstrap_external._unpack_uint32": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._unpack_uint16": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._path_is_mode_type": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external._path_stat": [],
    "importlib._bootstrap_external._path_isfile": [
        "importlib._bootstrap_external._path_is_mode_type"
    ],
    "importlib._bootstrap_external._path_isdir": [
        "importlib._bootstrap_external._path_is_mode_type"
    ],
    "importlib._bootstrap_external._write_atomic": [
        "<builtin>.id"
    ],
    "importlib._bootstrap_external.source_from_cache": [
        "<builtin>.NotImplementedError",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join",
        "<str>.startswith",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "importlib._bootstrap_external._get_sourcefile": [
        "importlib._bootstrap_external.source_from_cache",
        "importlib._bootstrap_external._path_isfile",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._calc_mode": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external._find_module_shim": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._classify_pyc": [
        "importlib._bootstrap_external._unpack_uint32",
        "<builtin>.EOFError",
        "<builtin>.len",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap_external._validate_timestamp_pyc": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external._unpack_uint32"
    ],
    "importlib._bootstrap_external._validate_hash_pyc": [
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap_external._compile_bytecode": [
        "<builtin>.isinstance",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap_external._code_to_timestamp_pyc": [
        "importlib._bootstrap_external._pack_uint32",
        "<builtin>.bytearray"
    ],
    "importlib._bootstrap_external._code_to_hash_pyc": [
        "importlib._bootstrap_external._pack_uint32",
        "<builtin>.bytearray",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external.decode_source": [
        "tokenize",
        "tokenize.detect_encoding"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder._search_registry": [
        "importlib._bootstrap_external.WindowsRegistryFinder._open_registry"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder._open_registry": [],
    "importlib._bootstrap_external.WindowsRegistryFinder.find_spec": [
        "<builtin>.tuple",
        "importlib._bootstrap_external._path_stat",
        "importlib._bootstrap_external.WindowsRegistryFinder._search_registry",
        "importlib._bootstrap_external._get_supported_file_loaders"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder.find_module": [
        "importlib._bootstrap_external.WindowsRegistryFinder.find_spec"
    ],
    "importlib._bootstrap_external._LoaderBasics.is_package": [
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external._path_split",
        "<str>.rpartition"
    ],
    "importlib._bootstrap_external._LoaderBasics.exec_module": [
        "importlib._bootstrap_external.SourcelessFileLoader.get_code",
        "importlib._bootstrap_external.SourceLoader.get_code",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap_external.SourceLoader.path_stats": [
        "importlib._bootstrap_external.SourceLoader.path_mtime"
    ],
    "importlib._bootstrap_external.SourceLoader.path_mtime": [],
    "importlib._bootstrap_external.SourceLoader._cache_bytecode": [
        "importlib._bootstrap_external.SourceFileLoader.set_data",
        "importlib._bootstrap_external.SourceLoader.set_data"
    ],
    "importlib._bootstrap_external.SourceLoader.set_data": [],
    "importlib._bootstrap_external.SourceLoader.get_source": [
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external.decode_source",
        "importlib._bootstrap_external.FileLoader.get_data",
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap_external.SourceLoader.get_code": [
        "importlib._bootstrap_external._code_to_hash_pyc",
        "importlib._bootstrap_external.SourceLoader._cache_bytecode",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external.cache_from_source",
        "importlib._bootstrap_external.SourceFileLoader._cache_bytecode",
        "importlib._bootstrap_external.SourceLoader.source_to_code",
        "importlib._bootstrap_external._code_to_timestamp_pyc",
        "<builtin>.len",
        "importlib._bootstrap_external.FileLoader.get_data"
    ],
    "importlib._bootstrap_external.SourceLoader.source_to_code": [],
    "importlib._bootstrap_external.FileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "importlib._bootstrap_external.FileLoader.load_module": [
        "<builtin>.super"
    ],
    "importlib._bootstrap_external._check_name._check_name_wrapper": [
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external.ExtensionFileLoader.get_filename",
        "importlib._bootstrap_external.FileLoader.get_resource_reader",
        "<builtin>.ImportError",
        "importlib._bootstrap_external.FileLoader.load_module"
    ],
    "importlib._bootstrap_external.FileLoader.get_filename": [],
    "importlib._bootstrap_external.ExtensionFileLoader.get_filename": [],
    "importlib._bootstrap_external.FileLoader.get_resource_reader": [
        "importlib._bootstrap_external._LoaderBasics.is_package",
        "importlib._bootstrap_external.ExtensionFileLoader.is_package"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.is_package": [
        "<builtin>.any",
        "importlib._bootstrap_external._path_split"
    ],
    "importlib._bootstrap_external.FileLoader.get_data": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "importlib._bootstrap_external.FileLoader.open_resource": [
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._path_split"
    ],
    "importlib._bootstrap_external.FileLoader.resource_path": [
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external.FileLoader.is_resource"
    ],
    "importlib._bootstrap_external.FileLoader.is_resource": [
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_isfile"
    ],
    "importlib._bootstrap_external.FileLoader.contents": [
        "<builtin>.iter",
        "importlib._bootstrap_external._path_split"
    ],
    "importlib._bootstrap_external.SourceFileLoader.path_stats": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external.SourceFileLoader._cache_bytecode": [
        "importlib._bootstrap_external.SourceFileLoader.set_data",
        "importlib._bootstrap_external._calc_mode"
    ],
    "importlib._bootstrap_external.SourceFileLoader.set_data": [
        "<builtin>.reversed",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._write_atomic",
        "<list>.append",
        "importlib._bootstrap_external._path_isdir"
    ],
    "importlib._bootstrap_external.SourcelessFileLoader.get_code": [
        "importlib._bootstrap_external.FileLoader.get_filename",
        "<builtin>.memoryview",
        "importlib._bootstrap_external._compile_bytecode",
        "importlib._bootstrap_external._classify_pyc",
        "importlib._bootstrap_external.FileLoader.get_data"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "importlib._bootstrap_external._NamespacePath.__init__": [
        "<builtin>.tuple",
        "importlib._bootstrap_external._NamespacePath._get_parent_path"
    ],
    "importlib._bootstrap_external._NamespacePath._get_parent_path": [
        "importlib._bootstrap_external._NamespacePath._find_parent_path_names",
        "<builtin>.getattr"
    ],
    "importlib._bootstrap_external._NamespacePath._find_parent_path_names": [],
    "importlib._bootstrap_external._NamespacePath._recalculate": [
        "<builtin>.tuple",
        "importlib._bootstrap_external._NamespacePath._get_parent_path",
        "importlib._bootstrap_external.PathFinder._get_spec"
    ],
    "importlib._bootstrap_external._NamespacePath.__iter__": [
        "<builtin>.iter",
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__getitem__": [
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__len__": [
        "importlib._bootstrap_external._NamespacePath._recalculate",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._NamespacePath.__contains__": [
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespaceLoader.__init__": [
        "importlib._bootstrap_external._NamespacePath.__init__"
    ],
    "importlib._bootstrap_external._NamespaceLoader.get_code": [
        "<builtin>.compile"
    ],
    "importlib._bootstrap_external.PathFinder.invalidate_caches": [
        "<builtin>.hasattr",
        "<builtin>.list"
    ],
    "importlib._bootstrap_external.PathFinder._path_importer_cache": [
        "importlib._bootstrap_external.PathFinder._path_hooks"
    ],
    "importlib._bootstrap_external.PathFinder._path_hooks": [],
    "importlib._bootstrap_external.PathFinder._legacy_get_spec": [
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external.PathFinder._get_spec": [
        "<builtin>.isinstance",
        "importlib._bootstrap_external.PathFinder._legacy_get_spec",
        "<list>.extend",
        "<builtin>.ImportError",
        "importlib._bootstrap_external.PathFinder._path_importer_cache",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external.PathFinder.find_spec": [
        "importlib._bootstrap_external.PathFinder._get_spec",
        "importlib._bootstrap_external._NamespacePath.__init__"
    ],
    "importlib._bootstrap_external.PathFinder.find_module": [
        "importlib._bootstrap_external.PathFinder.find_spec"
    ],
    "importlib._bootstrap_external.PathFinder.find_distributions": [
        "importlib.metadata",
        "importlib.metadata.MetadataPathFinder.find_distributions"
    ],
    "importlib._bootstrap_external.FileFinder.__init__": [
        "<list>.extend",
        "<builtin>.set"
    ],
    "importlib._bootstrap_external.FileFinder.find_loader": [
        "importlib._bootstrap_external.FileFinder.find_spec"
    ],
    "importlib._bootstrap_external.FileFinder.find_spec": [
        "importlib._bootstrap_external.FileFinder._get_spec",
        "importlib._bootstrap_external._path_isfile",
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external.FileFinder._fill_cache",
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external.FileFinder._fill_cache": [
        "<builtin>.set"
    ],
    "importlib._bootstrap_external.FileFinder._get_spec": [
        "importlib._bootstrap_external.spec_from_file_location"
    ],
    "importlib._bootstrap_external._fix_up_module": [
        "importlib._bootstrap_external.spec_from_file_location"
    ],
    "importlib._bootstrap_external._install": [
        "importlib._bootstrap_external._get_supported_file_loaders",
        "importlib._bootstrap_external._setup"
    ],
    "pkg_resources.extern.jaraco.text.multi_substitution": [
        "<builtin>.tuple",
        "<builtin>.reversed",
        "pkg_resources.extern.jaraco.functools.compose"
    ],
    "pkg_resources.extern.jaraco.functools.compose": [],
    "pkg_resources.extern.jaraco.text.FoldedCase.__lt__": [
        "pkg_resources.extern.jaraco.text.FoldedCase.lower"
    ],
    "pkg_resources.extern.jaraco.text.FoldedCase.lower": [
        "<builtin>.super"
    ],
    "pkg_resources.extern.jaraco.text.FoldedCase.__gt__": [
        "pkg_resources.extern.jaraco.text.FoldedCase.lower"
    ],
    "pkg_resources.extern.jaraco.text.FoldedCase.__eq__": [
        "pkg_resources.extern.jaraco.text.FoldedCase.lower"
    ],
    "pkg_resources.extern.jaraco.text.FoldedCase.__ne__": [
        "pkg_resources.extern.jaraco.text.FoldedCase.lower"
    ],
    "pkg_resources.extern.jaraco.text.FoldedCase.__hash__": [
        "pkg_resources.extern.jaraco.text.FoldedCase.lower",
        "<builtin>.hash"
    ],
    "pkg_resources.extern.jaraco.text.FoldedCase.__contains__": [
        "<builtin>.super"
    ],
    "pkg_resources.extern.jaraco.text.FoldedCase.index": [
        "pkg_resources.extern.jaraco.text.FoldedCase.lower"
    ],
    "pkg_resources.extern.jaraco.text.FoldedCase.split": [
        "re.compile",
        "re.escape"
    ],
    "pkg_resources.extern.jaraco.text.is_binary": [
        "<builtin>.isinstance",
        "pkg_resources.extern.jaraco.text.is_decodable"
    ],
    "pkg_resources.extern.jaraco.text.is_decodable": [],
    "pkg_resources.extern.jaraco.text.trim": [
        "<str>.strip",
        "textwrap.dedent"
    ],
    "pkg_resources.extern.jaraco.text.wrap": [
        "textwrap.wrap"
    ],
    "pkg_resources.extern.jaraco.text.unwrap": [
        "re.split"
    ],
    "pkg_resources.extern.jaraco.text.WordSet.camel_case": [
        "pkg_resources.extern.jaraco.text.WordSet.capitalized"
    ],
    "pkg_resources.extern.jaraco.text.WordSet.capitalized": [],
    "pkg_resources.extern.jaraco.text.WordSet.headless_camel_case": [
        "<builtin>.iter",
        "<builtin>.next",
        "pkg_resources.extern.jaraco.text.WordSet.camel_case"
    ],
    "pkg_resources.extern.jaraco.text.WordSet.trim": [
        "pkg_resources.extern.jaraco.text.WordSet.trim_left"
    ],
    "pkg_resources.extern.jaraco.text.WordSet.trim_left": [],
    "pkg_resources.extern.jaraco.text.WordSet.__getitem__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "pkg_resources.extern.jaraco.text.WordSet.from_class_name": [
        "pkg_resources.extern.jaraco.text.WordSet.parse"
    ],
    "pkg_resources.extern.jaraco.text.WordSet.parse": [],
    "pkg_resources.extern.jaraco.text.simple_html_strip": [
        "re.compile"
    ],
    "pkg_resources.extern.jaraco.text.SeparatedValues.__iter__": [
        "<builtin>.filter"
    ],
    "pkg_resources.extern.jaraco.text.Stripper.__init__": [
        "<builtin>.map"
    ],
    "pkg_resources.extern.jaraco.text.Stripper.strip_prefix": [
        "functools.reduce",
        "pkg_resources.extern.jaraco.text.Stripper.__init__"
    ],
    "pkg_resources.extern.jaraco.text.Stripper.common_prefix": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "pkg_resources.extern.jaraco.text.normalize_newlines": [
        "re.sub"
    ],
    "pkg_resources.extern.jaraco.text._": [
        "<builtin>.filter",
        "<builtin>.map"
    ],
    "importlib.resources._get_package": [
        "importlib.import_module",
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "importlib.resources._normalize_path": [
        "ntpath.split",
        "<builtin>.ValueError",
        "posixpath.split"
    ],
    "importlib.resources._get_resource_reader": [
        "typing.cast",
        "<builtin>.hasattr"
    ],
    "importlib.resources._check_location": [
        "<builtin>.FileNotFoundError"
    ],
    "importlib.resources.open_binary": [
        "_io.BytesIO",
        "importlib.resources._get_resource_reader",
        "posixpath.join",
        "typing.cast",
        "importlib.resources._check_location",
        "posixpath.dirname",
        "contextlib.suppress.__init__",
        "<builtin>.FileNotFoundError",
        "importlib.resources._normalize_path",
        "ntpath.join",
        "<builtin>.hasattr",
        "<builtin>.open",
        "ntpath.dirname",
        "posixpath.abspath",
        "ntpath.abspath",
        "importlib.resources._get_package"
    ],
    "importlib.resources.open_text": [
        "_io.BytesIO",
        "importlib.resources._get_resource_reader",
        "posixpath.join",
        "typing.cast",
        "importlib.resources._check_location",
        "posixpath.dirname",
        "contextlib.suppress.__init__",
        "<builtin>.FileNotFoundError",
        "importlib.resources._normalize_path",
        "_io.TextIOWrapper",
        "ntpath.join",
        "<builtin>.hasattr",
        "<builtin>.open",
        "ntpath.dirname",
        "posixpath.abspath",
        "ntpath.abspath",
        "importlib.resources._get_package"
    ],
    "importlib.resources.read_binary": [
        "importlib.resources._normalize_path",
        "importlib.resources._get_package",
        "importlib.resources.open_binary"
    ],
    "importlib.resources.read_text": [
        "importlib.resources._normalize_path",
        "importlib.resources._get_package",
        "importlib.resources.open_text"
    ],
    "importlib.resources.path": [
        "importlib.resources._get_resource_reader",
        "importlib.resources._check_location",
        "importlib.resources.open_binary",
        "tempfile.mkstemp",
        "importlib.resources._normalize_path",
        "importlib.resources._get_package"
    ],
    "importlib.resources.is_resource": [
        "importlib.resources.contents",
        "<builtin>.set",
        "importlib.resources._get_resource_reader",
        "importlib.resources._normalize_path",
        "importlib.resources._get_package"
    ],
    "importlib.resources.contents": [
        "importlib.resources._get_package",
        "importlib.resources._get_resource_reader"
    ],
    "pkg_resources.extern.jaraco.functools.Throttler.__init__": [
        "pkg_resources.extern.jaraco.functools.Throttler.reset",
        "<builtin>.isinstance"
    ],
    "pkg_resources.extern.jaraco.functools.Throttler.reset": [],
    "pkg_resources.extern.jaraco.functools.Throttler.__call__": [
        "pkg_resources.extern.jaraco.functools.Throttler._wait"
    ],
    "pkg_resources.extern.jaraco.functools.Throttler._wait": [
        "<builtin>.max"
    ],
    "pkg_resources.extern.jaraco.functools.Throttler.__get__": [
        "pkg_resources.extern.jaraco.functools.first_invoke"
    ],
    "pkg_resources.extern.jaraco.functools.first_invoke": [],
    "pkg_resources.extern.jaraco.functools.retry_call": [
        "<builtin>.float",
        "pkg_resources.extern.jaraco.functools.<lambda1>",
        "<builtin>.range"
    ],
    "pkg_resources.extern.jaraco.functools.<lambda1>": [],
    "pkg_resources.extern.jaraco.functools.print_yielded": [
        "pkg_resources.extern.jaraco.functools.compose"
    ],
    "pkg_resources.extern.jaraco.functools.assign_params": [
        "inspect.signature"
    ],
    "pkg_resources.extern.jaraco.functools.save_method_args": [
        "collections.namedtuple"
    ],
    "pkg_resources.extern.jaraco.functools.method_cache.wrapper": [
        "<builtin>.setattr"
    ],
    "pkg_resources.extern.jaraco.functools._special_method_cache.proxy": [
        "<builtin>.vars",
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "pkg_resources.extern.jaraco.context.tarball_context": [
        "pkg_resources.extern.jaraco.context.pushd",
        "<builtin>.vars",
        "pkg_resources.extern.jaraco.context.infer_compression",
        "ntpath.basename",
        "posixpath.basename"
    ],
    "pkg_resources.extern.jaraco.context.infer_compression": [
        "<builtin>.dict"
    ],
    "pkg_resources.extern.jaraco.context.pushd": [],
    "pkg_resources.extern.jaraco.context.temp_dir": [
        "tempfile.mkdtemp"
    ],
    "pkg_resources.extern.jaraco.context.repo_context": [
        "<list>.extend",
        "<builtin>.open",
        "pkg_resources.extern.jaraco.context.temp_dir",
        "subprocess.check_call"
    ],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.__exit__": [
        "<builtin>.issubclass"
    ],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.__bool__": [
        "<builtin>.bool"
    ],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.raises.wrapper": [
        "pkg_resources.extern.jaraco.context.ExceptionTrap.__enter__",
        "pkg_resources.extern.jaraco.text.is_decodable",
        "operator.not_",
        "pkg_resources.extern.jaraco.context.ExceptionTrap.__init__",
        "pkg_resources.extern.jaraco.context.ExceptionTrap.__exit__"
    ],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.__enter__": [],
    "operator.not_": [],
    "sysconfig.get_scheme_names": [
        "<builtin>.tuple",
        "<builtin>.sorted"
    ],
    "sysconfig.get_config_var": [
        "warnings",
        "<map>.get",
        "warnings.warn",
        "sysconfig.get_config_vars"
    ],
    "_osx_support._find_executable": [
        "posixpath.splitext",
        "ntpath.splitext",
        "posixpath.join",
        "ntpath.join",
        "genericpath.isfile"
    ],
    "_osx_support._read_output": [
        "tempfile",
        "contextlib.closing.__init__",
        "tempfile.NamedTemporaryFile",
        "<builtin>.open",
        "contextlib"
    ],
    "contextlib.closing.__init__": [],
    "_osx_support._find_build_tool": [
        "_osx_support._find_executable",
        "_osx_support._read_output"
    ],
    "_osx_support._remove_original_values": [
        "<builtin>.list"
    ],
    "_osx_support._find_appropriate_compiler": [
        "_osx_support._save_modified_value",
        "<builtin>.SystemError",
        "_osx_support._read_output",
        "_osx_support._find_build_tool",
        "ntpath.basename",
        "posixpath.basename",
        "_osx_support._find_executable"
    ],
    "_osx_support._remove_unsupported_archs": [
        "re.search",
        "_osx_support._save_modified_value",
        "re.sub"
    ],
    "_osx_support.compiler_fixup": [
        "_osx_support._supports_universal_builds",
        "<builtin>.list",
        "genericpath.isdir",
        "<builtin>.enumerate",
        "distutils.log",
        "<builtin>.any",
        "nt._isdir",
        "<builtin>.len"
    ],
    "distutils.log": [
        "distutils.log.Log.__init__",
        "distutils.log.Log"
    ],
    "distutils.log.Log": [],
    "distutils.log.Log.__init__": [],
    "_osx_support.customize_compiler": [
        "_osx_support._remove_unsupported_archs",
        "_osx_support._find_appropriate_compiler",
        "_osx_support._override_all_archs"
    ],
    "pythoncg.CallGraphGenerator.extract_state": [
        "<map>.items",
        "machinery.definitions.DefinitionManager.get_defs",
        "<builtin>.set",
        "machinery.scopes.ScopeManager.get_scopes"
    ],
    "machinery.definitions.DefinitionManager.get_defs": [],
    "machinery.scopes.ScopeManager.get_scopes": [],
    "pythoncg.CallGraphGenerator.reset_counters": [
        "<map>.items",
        "machinery.scopes.ScopeManager.get_scopes"
    ],
    "pythoncg.CallGraphGenerator.has_converged": [
        "pythoncg.CallGraphGenerator.extract_state"
    ],
    "pythoncg.CallGraphGenerator.tearDown": [
        "pythoncg.CallGraphGenerator.remove_import_hooks"
    ],
    "pythoncg.CallGraphGenerator.output": [
        "machinery.callgraph.CallGraph.get"
    ],
    "machinery.callgraph.CallGraph.get": [],
    "pythoncg.CallGraphGenerator._generate_mods": [
        "<map>.items",
        "posixpath.relpath",
        "ntpath.relpath"
    ],
    "pythoncg.CallGraphGenerator.output_internal_mods": [
        "pythoncg.CallGraphGenerator._generate_mods",
        "machinery.modules.ModuleManager.get_internal_modules"
    ],
    "machinery.modules.ModuleManager.get_internal_modules": [],
    "pythoncg.CallGraphGenerator.output_external_mods": [
        "pythoncg.CallGraphGenerator._generate_mods",
        "machinery.modules.ModuleManager.get_external_modules"
    ],
    "machinery.modules.ModuleManager.get_external_modules": [],
    "pythoncg.CallGraphGenerator.output_functions": [
        "<map>.items",
        "machinery.definitions.DefinitionManager.get_defs",
        "<list>.append"
    ],
    "pythoncg.CallGraphGenerator.get_as_graph": [
        "<map>.items",
        "machinery.definitions.DefinitionManager.get_defs"
    ],
    "processing.cgprocessor.CallGraphProcessor.__init__": [
        "<builtin>.set"
    ],
    "processing.cgprocessor.CallGraphProcessor.analyze": [
        "processing.cgprocessor.CallGraphProcessor.get_call_graph"
    ],
    "processing.cgprocessor.CallGraphProcessor.get_call_graph": [
        "processing.cgprocessor.CallGraphProcessor.dfs"
    ],
    "processing.cgprocessor.CallGraphProcessor.dfs": [
        "processing.cgprocessor.CallGraphProcessor.call_if",
        "processing.cgprocessor.CallGraphProcessor.call_else",
        "processing.cgprocessor.CallGraphProcessor.resolve",
        "processing.cgprocessor.CallGraphProcessor.call",
        "<builtin>.str",
        "copy.deepcopy"
    ],
    "processing.cgprocessor.CallGraphProcessor.call_if": [
        "copy.deepcopy",
        "processing.cgprocessor.CallGraphProcessor.reset_scope",
        "processing.cgprocessor.CallGraphProcessor.dfs",
        "processing.cgprocessor.CallGraphProcessor.update_if"
    ],
    "processing.cgprocessor.CallGraphProcessor.update_if": [
        "processing.cgprocessor.CallGraphProcessor.resolve"
    ],
    "processing.cgprocessor.CallGraphProcessor.resolve": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "processing.cgprocessor.CallGraphProcessor.resolve",
        "<builtin>.map",
        "processing.cgprocessor.CallGraphProcessor.get_point"
    ],
    "processing.cgprocessor.CallGraphProcessor.get_point": [
        "processing.cgprocessor.CallGraphProcessor.get_point.helper",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "processing.cgprocessor.CallGraphProcessor.get_point.helper": [
        "<list>.insert"
    ],
    "processing.cgprocessor.CallGraphProcessor.reset_scope": [],
    "processing.cgprocessor.CallGraphProcessor.call_else": [
        "processing.cgprocessor.CallGraphProcessor.reset_scope",
        "processing.cgprocessor.CallGraphProcessor.dfs",
        "copy.deepcopy",
        "processing.cgprocessor.CallGraphProcessor.update_if",
        "processing.cgprocessor.CallGraphProcessor.merge_if_else"
    ],
    "processing.cgprocessor.CallGraphProcessor.merge_if_else": [
        "processing.cgprocessor.CallGraphProcessor.resolve"
    ],
    "processing.cgprocessor.CallGraphProcessor.call": [
        "processing.cgprocessor.CallGraphProcessor.copy_class",
        "processing.cgprocessor.CallGraphProcessor.match_return",
        "processing.cgprocessor.CallGraphProcessor.update",
        "processing.cgprocessor.CallGraphProcessor.reset_scope",
        "processing.cgprocessor.CallGraphProcessor.dfs",
        "processing.cgprocessor.CallGraphProcessor.resolve",
        "processing.cgprocessor.CallGraphProcessor.get_attr_ns",
        "processing.cgprocessor.CallGraphProcessor.match_params",
        "copy.deepcopy",
        "processing.cgprocessor.CallGraphProcessor.call.get_if_callns"
    ],
    "processing.cgprocessor.CallGraphProcessor.call.get_if_callns": [
        "processing.cgprocessor.CallGraphProcessor.call.get_if_callns"
    ],
    "processing.cgprocessor.CallGraphProcessor.get_attr_ns": [],
    "processing.cgprocessor.CallGraphProcessor.copy_class": [
        "processing.cgprocessor.CallGraphProcessor.copy_scope",
        "<builtin>.hasattr"
    ],
    "processing.cgprocessor.CallGraphProcessor.copy_scope": [
        "<map>.items",
        "<builtin>.set",
        "processing.cgprocessor.CallGraphProcessor.copy_scope",
        "copy.deepcopy",
        "<builtin>.map"
    ],
    "processing.cgprocessor.CallGraphProcessor.match_params": [
        "<map>.items",
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.enumerate",
        "processing.cgprocessor.CallGraphProcessor.resolve",
        "functools.reduce",
        "processing.cgprocessor.CallGraphProcessor.get_module_ns",
        "<builtin>.len",
        "<builtin>.map"
    ],
    "processing.cgprocessor.CallGraphProcessor.match_params.<lambda2>": [],
    "processing.cgprocessor.CallGraphProcessor.get_module_ns": [],
    "processing.cgprocessor.CallGraphProcessor.update": [
        "<map>.items",
        "<builtin>.isinstance",
        "processing.cgprocessor.CallGraphProcessor.update.get_if_callns",
        "processing.cgprocessor.CallGraphProcessor.update.update_defi",
        "processing.cgprocessor.CallGraphProcessor.isFather"
    ],
    "processing.cgprocessor.CallGraphProcessor.update.get_if_callns": [
        "processing.cgprocessor.CallGraphProcessor.update.get_if_callns"
    ],
    "processing.cgprocessor.CallGraphProcessor.isFather": [],
    "processing.cgprocessor.CallGraphProcessor.update.update_defi": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "processing.cgprocessor.CallGraphProcessor.resolve",
        "<builtin>.map"
    ],
    "processing.cgprocessor.CallGraphProcessor.match_return": [
        "processing.cgprocessor.CallGraphProcessor.match_return.match"
    ],
    "processing.cgprocessor.CallGraphProcessor.match_return.match": [
        "<list>.append",
        "processing.cgprocessor.CallGraphProcessor.resolve",
        "processing.cgprocessor.CallGraphProcessor.get_scope_ns"
    ],
    "processing.cgprocessor.CallGraphProcessor.get_scope_ns": [],
    "processing.cgprocessor.CallGraphProcessor.get_all_reachable_functions": [
        "<builtin>.set"
    ],
    "processing.cgprocessor.CallGraphProcessor.has_ext_parent": [
        "<builtin>.isinstance"
    ],
    "processing.cgprocessor.CallGraphProcessor.get_full_attr_names": [
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "processing.cgprocessor.CallGraphProcessor.convert": [
        "<list>.append"
    ],
    "processing.cgprocessor.CallGraphProcessor.get_modules_analyzed": [
        "<builtin>.set"
    ],
    "ast.dump": [
        "<builtin>.TypeError",
        "ast.dump._format",
        "<builtin>.isinstance"
    ],
    "ast.dump._format": [
        "<builtin>.isinstance",
        "ast.dump._format",
        "<builtin>.getattr",
        "<list>.append",
        "<builtin>.repr"
    ],
    "ast.copy_location": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "ast.fix_missing_locations": [
        "ast.fix_missing_locations._fix"
    ],
    "ast.fix_missing_locations._fix": [
        "ast.iter_child_nodes",
        "<builtin>.hasattr",
        "ast.fix_missing_locations._fix"
    ],
    "ast.iter_child_nodes": [
        "ast.iter_fields",
        "<builtin>.isinstance"
    ],
    "ast.iter_fields": [
        "<builtin>.getattr"
    ],
    "ast.increment_lineno": [
        "ast.walk",
        "<builtin>.getattr"
    ],
    "ast.walk": [
        "collections",
        "ast.iter_child_nodes",
        "_collections.deque"
    ],
    "ast.get_docstring": [
        "inspect",
        "<builtin>.TypeError",
        "inspect.cleandoc",
        "<builtin>.isinstance"
    ],
    "ast._splitlines_no_ff": [
        "<list>.append",
        "<builtin>.len"
    ],
    "ast.get_source_segment": [
        "<list>.insert",
        "ast._pad_whitespace",
        "ast._splitlines_no_ff",
        "<list>.append"
    ],
    "ast._pad_whitespace": [],
    "ast.NodeVisitor.generic_visit": [
        "ast.iter_fields",
        "<builtin>.isinstance",
        "ast.NodeVisitor.visit"
    ],
    "ast.NodeVisitor.visit_Constant": [
        "ast.NodeVisitor.generic_visit",
        "<map>.items",
        "<builtin>.isinstance",
        "ast.NodeTransformer.generic_visit",
        "<builtin>.getattr",
        "<map>.get"
    ],
    "ast.NodeTransformer.generic_visit": [
        "<list>.append",
        "<builtin>.isinstance",
        "ast.iter_fields",
        "<list>.extend",
        "<builtin>.setattr",
        "ast.NodeVisitor.visit",
        "<builtin>.delattr"
    ],
    "ast._ABC.__instancecheck__": [
        "<builtin>.isinstance"
    ],
    "machinery.callgraph.CallGraph.add_node": [
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "machinery.callgraph.CallGraph.add_edge": [
        "machinery.callgraph.CallGraph.add_node",
        "machinery.callgraph.CallGraph.add_edge.process_str"
    ],
    "machinery.callgraph.CallGraph.add_edge.process_str": [
        "<builtin>.filter",
        "<builtin>.list",
        "<builtin>.map"
    ],
    "machinery.callgraph.CallGraph.add_edges": [
        "machinery.callgraph.CallGraph.add_node"
    ],
    "machinery.callgraph.CallGraph.get_edges": [
        "<list>.append"
    ],
    "machinery.calls.CallManager.call": [
        "<builtin>.isinstance",
        "<map>.update",
        "machinery.calls.CallItem.__init__",
        "<map>.__contains__",
        "<list>.append",
        "heapq.heappush"
    ],
    "machinery.calls.CallItem.__init__": [],
    "<map>.__contains__": [],
    "machinery.scopes.ScopeManager.handle_module": [
        "symtable.symtable",
        "machinery.scopes.ScopeManager.handle_module.process"
    ],
    "machinery.scopes.ScopeManager.handle_module.process": [
        "machinery.scopes.ScopeManager.handle_module.process",
        "machinery.scopes.ScopeManager.create_scope",
        "<list>.append"
    ],
    "machinery.scopes.ScopeManager.create_scope": [
        "machinery.scopes.ScopeItem.__init__"
    ],
    "machinery.scopes.ScopeItem.__init__": [
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "machinery.scopes.ScopeManager.add_defi": [
        "machinery.scopes.ScopeManager.get_scope"
    ],
    "machinery.scopes.ScopeManager.get_scope": [
        "machinery.scopes.ScopeManager.get_scopes"
    ],
    "machinery.scopes.ScopeManager.handle_assign": [
        "machinery.scopes.ScopeManager.get_scope"
    ],
    "machinery.scopes.ScopeManager.add_params": [
        "machinery.scopes.ScopeManager.get_scope"
    ],
    "machinery.scopes.ScopeManager.get_def": [
        "machinery.scopes.ScopeManager.get_scope"
    ],
    "machinery.scopes.ScopeManager.create_scope_by_name": [
        "machinery.scopes.ScopeItem.__init__"
    ],
    "machinery.scopes.ScopeManager.add_inputs": [
        "machinery.scopes.ScopeManager.get_scope"
    ],
    "machinery.scopes.ScopeItem.add_params": [
        "<list>.append"
    ],
    "machinery.scopes.ScopeItem.get_def": [
        "machinery.scopes.ScopeItem.get_defs"
    ],
    "machinery.scopes.ScopeItem.get_defs": [],
    "machinery.scopes.ScopeItem.get_prefix_defi": [
        "<map>.values",
        "<list>.append"
    ],
    "machinery.scopes.ScopeItem.get_params_defiNs": [
        "machinery.scopes.ScopeItem.get_prefix_defi"
    ],
    "machinery.scopes.ScopeItem.__str__": [
        "machinery.scopes.ScopeItem.__str__.find_ns",
        "<builtin>.list"
    ],
    "machinery.scopes.ScopeItem.__str__.find_ns": [
        "<map>.items"
    ],
    "symtable.SymbolTableFactory.new": [
        "symtable.SymbolTable.__init__"
    ],
    "symtable.SymbolTable.__init__": [],
    "symtable.SymbolTableFactory.__call__": [
        "symtable.SymbolTableFactory.new",
        "weakref.WeakValueDictionary.get"
    ],
    "symtable.SymbolTable.is_optimized": [
        "<builtin>.bool"
    ],
    "symtable.SymbolTable.is_nested": [
        "<builtin>.bool"
    ],
    "symtable.SymbolTable.has_children": [
        "<builtin>.bool"
    ],
    "symtable.SymbolTable.lookup": [
        "symtable.SymbolTable.__check_children",
        "symtable.Symbol.__init__",
        "<map>.get"
    ],
    "symtable.SymbolTable.__check_children": [
        "symtable.SymbolTableFactory.__init__"
    ],
    "symtable.Symbol.__init__": [],
    "symtable.SymbolTable.get_symbols": [
        "symtable.SymbolTable.lookup",
        "symtable.SymbolTable.get_identifiers"
    ],
    "symtable.SymbolTable.get_identifiers": [],
    "symtable.SymbolTable.get_children": [
        "symtable.SymbolTableFactory.__init__"
    ],
    "symtable.Function.__idents_matching": [
        "symtable.Function.get_parameters.<lambda1>",
        "symtable.SymbolTable.get_identifiers",
        "symtable.Function.get_frees.<lambda1>",
        "symtable.Function.get_globals.<lambda1>",
        "symtable.Function.get_locals.<lambda1>",
        "<builtin>.tuple",
        "symtable.Function.get_nonlocals.<lambda1>"
    ],
    "symtable.Function.get_parameters": [
        "symtable.Function.__idents_matching"
    ],
    "symtable.Function.get_parameters.<lambda1>": [],
    "symtable.Function.get_locals": [
        "symtable.Function.__idents_matching"
    ],
    "symtable.Function.get_locals.<lambda1>": [],
    "symtable.Function.get_globals": [
        "symtable.Function.__idents_matching"
    ],
    "symtable.Function.get_globals.<lambda1>": [],
    "symtable.Function.get_nonlocals": [
        "symtable.Function.__idents_matching"
    ],
    "symtable.Function.get_nonlocals.<lambda1>": [],
    "symtable.Function.get_frees": [
        "symtable.Function.__idents_matching"
    ],
    "symtable.Function.get_frees.<lambda1>": [],
    "symtable.Class.get_methods": [
        "<builtin>.tuple"
    ],
    "symtable.Symbol.is_referenced": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_parameter": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_global": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_nonlocal": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_declared_global": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_local": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_annotated": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_free": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_imported": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_assigned": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.is_namespace": [
        "<builtin>.bool"
    ],
    "symtable.Symbol.get_namespace": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "machinery.definitions.PointItem.__init__": [
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "machinery.definitions.DefinitionManager.create": [
        "machinery.definitions.DefinitionManager.get",
        "<builtin>.isinstance",
        "machinery.definitions.Definition.__init__"
    ],
    "machinery.definitions.DefinitionManager.get": [],
    "machinery.definitions.Definition.__init__": [
        "<builtin>.set"
    ],
    "machinery.definitions.DefinitionManager.create_by_name": [
        "machinery.definitions.DefinitionManager.get",
        "<builtin>.isinstance",
        "machinery.definitions.Definition.__init__"
    ],
    "machinery.definitions.DefinitionManager.addCopy": [
        "<map>.get"
    ],
    "machinery.definitions.DefinitionManager.getOrCreate": [
        "machinery.definitions.DefinitionManager.get",
        "machinery.definitions.DefinitionManager.create"
    ],
    "machinery.definitions.DefinitionManager.handle_function_def": [
        "machinery.definitions.DefinitionManager.get",
        "<builtin>.set",
        "machinery.definitions.DefinitionManager.create"
    ],
    "machinery.definitions.DefinitionManager.handle_class_def": [
        "machinery.definitions.DefinitionManager.get",
        "machinery.definitions.DefinitionManager.create"
    ],
    "machinery.definitions.DefinitionManager.handle_if_def": [
        "machinery.definitions.DefinitionManager.get",
        "machinery.definitions.DefinitionManager.create"
    ],
    "machinery.definitions.DefinitionManager.transform_defi": [
        "<map>.get",
        "<list>.append"
    ],
    "machinery.definitions.DefinitionManager.get_final_pointName": [
        "machinery.definitions.DefinitionManager.get",
        "<builtin>.set"
    ],
    "machinery.definitions.DefinitionManager.get_scope_name": [
        "machinery.definitions.DefinitionManager.get"
    ],
    "machinery.definitions.DefinitionManager.get_module_name": [
        "machinery.definitions.DefinitionManager.get"
    ],
    "machinery.definitions.DefinitionManager.is_same_scope": [
        "machinery.definitions.DefinitionManager.get_scope_name"
    ],
    "machinery.definitions.DefinitionManager.helper": [
        "machinery.definitions.DefinitionManager.get"
    ],
    "machinery.definitions.DefinitionManager.get_last_final_pointName": [
        "machinery.definitions.DefinitionManager.get",
        "<list>.remove",
        "<list>.append"
    ],
    "machinery.definitions.Definition.add_value_point": [
        "<builtin>.isinstance",
        "<builtin>.set",
        "heapq.heappush",
        "machinery.definitions.PointItem.__init__",
        "machinery.gol.get_value"
    ],
    "machinery.gol.get_value": [],
    "machinery.definitions.Definition.is_callable": [
        "machinery.definitions.Definition.is_function_def",
        "machinery.definitions.Definition.is_ext_def"
    ],
    "machinery.definitions.Definition.is_function_def": [],
    "machinery.definitions.Definition.is_ext_def": [],
    "machinery.definitions.Definition.get_last_point_value": [
        "<builtin>.set",
        "<builtin>.len"
    ],
    "machinery.definitions.ChangeManager.addChange": [
        "machinery.definitions.ChangeItem.__init__"
    ],
    "machinery.definitions.ChangeItem.__init__": [
        "machinery.definitions.Definition.add_value_point",
        "<builtin>.set"
    ],
    "machinery.definitions.ChangeItem.addPoint": [
        "machinery.definitions.PointItem.__init__",
        "heapq.heappush"
    ],
    "machinery.gol.transfer": [
        "<builtin>.print"
    ],
    "machinery.modules.ModuleManager.create": [
        "machinery.modules.Module.__init__"
    ],
    "machinery.modules.Module.__init__": [
        "<builtin>.dict"
    ],
    "machinery.modules.ModuleManager.get_func_name": [
        "machinery.modules.ModuleManager.get"
    ],
    "machinery.modules.ModuleManager.get": [],
    "machinery.modules.Module.add_method": [
        "<builtin>.dict"
    ],
    "machinery.returns.ReturnManager.add_returnitem": [
        "machinery.returns.ReturnItem.__init__"
    ],
    "machinery.returns.ReturnItem.__init__": [],
    "processing.extProcessor.ExtProcessor.flatten": [
        "processing.extProcessor.ExtProcessor.flatten",
        "<builtin>.isinstance"
    ],
    "processing.extProcessor.ExtProcessor.getYPOint": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "processing.extProcessor.ExtProcessor.flatten",
        "processing.extProcessor.ExtProcessor.getYPOint.closure",
        "functools.reduce",
        "<builtin>.filter",
        "<builtin>.map"
    ],
    "processing.extProcessor.ExtProcessor.getYPOint.closure": [],
    "processing.extProcessor.ExtProcessor.getYPOint.<lambda2>": [],
    "processing.extProcessor.ExtProcessor.visit_Module": [
        "processing.extProcessor.ExtProcessor.visit_Module.iterate_mod_items",
        "processing.extProcessor.ExtProcessor.pushStack",
        "<builtin>.len"
    ],
    "processing.extProcessor.ExtProcessor.visit_Module.iterate_mod_items": [],
    "processing.extProcessor.ExtProcessor.visit_ImportFrom": [
        "processing.extProcessor.ExtProcessor.visit_Import"
    ],
    "processing.extProcessor.ExtProcessor.visit_Import": [
        "processing.extProcessor.ExtProcessor.visit_Import.handle_src_name",
        "processing.extProcessor.ExtProcessor.analyze_submodule",
        "processing.extProcessor.ExtProcessor.visit_Import.handle_scopes",
        "processing.extProcessor.ExtProcessor.visit_Import.add_external_def"
    ],
    "processing.extProcessor.ExtProcessor.visit_Import.handle_src_name": [],
    "processing.extProcessor.ExtProcessor.visit_Import.add_external_def": [],
    "processing.extProcessor.ExtProcessor.analyze_submodule": [
        "<builtin>.super",
        "processing.extProcessor.ExtProcessor.get_modules_analyzed"
    ],
    "processing.extProcessor.ExtProcessor.visit_Import.handle_scopes": [
        "processing.extProcessor.ExtProcessor.visit_Import.handle_scopes.create_def"
    ],
    "processing.extProcessor.ExtProcessor.visit_Import.handle_scopes.create_def": [],
    "processing.extProcessor.ExtProcessor.visit_With": [
        "processing.extProcessor.ExtProcessor.visit_Call",
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<builtin>.len",
        "processing.extProcessor.ExtProcessor._get_target_ns",
        "processing.extProcessor.ExtProcessor.getYPOint",
        "ast.NodeVisitor.visit",
        "processing.extProcessor.ExtProcessor.pushStack"
    ],
    "processing.extProcessor.ExtProcessor.decode_node": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<list>.append",
        "processing.base.ProcessingBase._is_literal",
        "processing.base.ProcessingBase.retrieve_subscript_names"
    ],
    "processing.base.ProcessingBase._is_literal": [
        "<builtin>.isinstance"
    ],
    "processing.base.ProcessingBase.retrieve_subscript_names": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.str",
        "processing.base.ProcessingBase.decode_node",
        "<builtin>.getattr",
        "<builtin>.Exception",
        "processing.base.ProcessingBase._is_literal"
    ],
    "processing.base.ProcessingBase.decode_node": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "processing.base.ProcessingBase.decode_node",
        "processing.base.ProcessingBase._retrieve_attribute_names",
        "<list>.append",
        "processing.base.ProcessingBase._is_literal",
        "processing.base.ProcessingBase.retrieve_subscript_names"
    ],
    "processing.base.ProcessingBase._retrieve_attribute_names": [
        "processing.base.ProcessingBase.find_cls_fun_ns",
        "<builtin>.set",
        "processing.extProcessor.ExtProcessor.find_cls_fun_ns",
        "<builtin>.getattr",
        "processing.base.ProcessingBase._retrieve_parent_names"
    ],
    "processing.base.ProcessingBase._retrieve_parent_names": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<builtin>.set",
        "processing.base.ProcessingBase.decode_node",
        "<builtin>.getattr",
        "<builtin>.Exception"
    ],
    "processing.base.ProcessingBase.find_cls_fun_ns": [
        "processing.base.ProcessingBase.add_ext_mod_node",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "processing.base.ProcessingBase.add_ext_mod_node": [],
    "processing.extProcessor.ExtProcessor.find_cls_fun_ns": [],
    "processing.extProcessor.ExtProcessor.visit_Call": [
        "processing.extProcessor.ExtProcessor._handle_args",
        "<builtin>.list",
        "processing.extProcessor.ExtProcessor.visit_Call.merge_change",
        "<map>.items",
        "processing.extProcessor.ExtProcessor.visit_Call.resolve_call",
        "processing.extProcessor.ExtProcessor.visit_Call.update_change",
        "ast.NodeVisitor.visit",
        "<builtin>.filter",
        "<builtin>.hasattr",
        "<builtin>.map"
    ],
    "processing.extProcessor.ExtProcessor.visit_Call.resolve_call": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<builtin>.list",
        "processing.extProcessor.ExtProcessor.is_builtin",
        "processing.extProcessor.ExtProcessor.getYPOint",
        "<builtin>.getattr",
        "ast.NodeVisitor.visit",
        "<builtin>.filter",
        "processing.base.ProcessingBase.retrieve_subscript_names",
        "<builtin>.map"
    ],
    "processing.extProcessor.ExtProcessor.is_builtin": [],
    "processing.extProcessor.ExtProcessor._handle_args": [
        "ast.NodeVisitor.visit",
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<map>.setdefault",
        "<list>.append"
    ],
    "processing.extProcessor.ExtProcessor.visit_Call.merge_change": [
        "machinery.definitions.ChangeItem.__init__",
        "<map>.items"
    ],
    "processing.extProcessor.ExtProcessor.visit_Call.update_change": [
        "<map>.items",
        "processing.extProcessor.ExtProcessor.get_scope_ns",
        "<builtin>.len"
    ],
    "processing.extProcessor.ExtProcessor._get_target_ns": [
        "processing.base.ProcessingBase.retrieve_subscript_names",
        "<builtin>.isinstance",
        "processing.extProcessor.ExtProcessor._get_target_ns",
        "<list>.append"
    ],
    "processing.extProcessor.ExtProcessor.visit_If": [
        "ast.NodeVisitor.visit",
        "processing.extProcessor.ExtProcessor.mergeIfElse",
        "processing.extProcessor.ExtProcessor.update",
        "processing.extProcessor.ExtProcessor._get_last_line",
        "<builtin>.len",
        "<builtin>.hasattr",
        "processing.extProcessor.ExtProcessor.pushStack"
    ],
    "processing.extProcessor.ExtProcessor.mergeIfElse": [
        "machinery.definitions.ChangeItem.__init__"
    ],
    "processing.extProcessor.ExtProcessor._get_last_line": [
        "ast.walk",
        "<builtin>.list",
        "<builtin>.getattr",
        "<builtin>.sorted"
    ],
    "processing.extProcessor.ExtProcessor.update": [
        "machinery.definitions.ChangeItem.__init__",
        "<map>.items",
        "processing.extProcessor.ExtProcessor.get_scope_ns",
        "<builtin>.len"
    ],
    "processing.extProcessor.ExtProcessor.visit_While": [
        "processing.extProcessor.ExtProcessor.visit_If"
    ],
    "processing.extProcessor.ExtProcessor.visit_Assign": [
        "processing.extProcessor.ExtProcessor._visit_assign"
    ],
    "processing.extProcessor.ExtProcessor._visit_assign": [
        "processing.extProcessor.ExtProcessor._visit_assign.do_assign",
        "processing.extProcessor.ExtProcessor.decode_node",
        "ast.NodeVisitor.visit"
    ],
    "processing.extProcessor.ExtProcessor._visit_assign.do_assign": [
        "processing.extProcessor.ExtProcessor._visit_assign.store",
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<builtin>.len",
        "processing.extProcessor.ExtProcessor._visit_assign.assign",
        "<builtin>.enumerate",
        "processing.extProcessor.ExtProcessor._get_target_ns",
        "processing.extProcessor.ExtProcessor._visit_assign.do_assign",
        "ast.NodeVisitor.visit"
    ],
    "processing.extProcessor.ExtProcessor._visit_assign.store": [
        "processing.extProcessor.ExtProcessor.getYPOint"
    ],
    "processing.extProcessor.ExtProcessor._visit_assign.assign": [
        "<builtin>.isinstance",
        "processing.extProcessor.ExtProcessor.iSDefiInScope",
        "<builtin>.iter",
        "processing.extProcessor.ExtProcessor.getYPOint",
        "processing.extProcessor.ExtProcessor.get_or_create",
        "<builtin>.len"
    ],
    "processing.extProcessor.ExtProcessor.get_or_create": [],
    "processing.extProcessor.ExtProcessor.iSDefiInScope": [],
    "processing.extProcessor.ExtProcessor.visit_Lambda": [
        "processing.extProcessor.ExtProcessor._handle_function_def",
        "processing.extProcessor.ExtProcessor._handle_ns"
    ],
    "processing.extProcessor.ExtProcessor._handle_ns": [],
    "processing.extProcessor.ExtProcessor._handle_function_def": [
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "processing.extProcessor.ExtProcessor._get_last_line",
        "<list>.append",
        "<map>.get",
        "<builtin>.hasattr",
        "processing.extProcessor.ExtProcessor.get_module_ns",
        "processing.extProcessor.ExtProcessor._get_fun_defaults"
    ],
    "processing.extProcessor.ExtProcessor._get_fun_defaults": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.len",
        "<builtin>.enumerate",
        "processing.extProcessor.ExtProcessor.getYPOint",
        "ast.NodeVisitor.visit"
    ],
    "processing.extProcessor.ExtProcessor.visit_AsyncFunctionDef": [
        "processing.extProcessor.ExtProcessor.visit_FunctionDef"
    ],
    "processing.extProcessor.ExtProcessor.visit_FunctionDef": [
        "<builtin>.reversed",
        "<builtin>.list",
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "processing.extProcessor.ExtProcessor.visit_Call",
        "<builtin>.enumerate",
        "processing.extProcessor.ExtProcessor._handle_function_def",
        "processing.extProcessor.ExtProcessor._handle_ns",
        "<builtin>.hasattr"
    ],
    "processing.extProcessor.ExtProcessor.visit_For": [
        "<builtin>.super",
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "processing.extProcessor.ExtProcessor.getYPOint",
        "ast.NodeVisitor.visit"
    ],
    "processing.extProcessor.ExtProcessor.visit_ClassDef": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<builtin>.set",
        "processing.extProcessor.ExtProcessor.getYPOint",
        "processing.extProcessor.ExtProcessor._handle_ns",
        "ast.NodeVisitor.visit",
        "processing.extProcessor.ExtProcessor.pushStack"
    ],
    "processing.extProcessor.ExtProcessor.visit_Return": [
        "processing.extProcessor.ExtProcessor._visit_return"
    ],
    "processing.extProcessor.ExtProcessor._visit_return": [
        "processing.extProcessor.ExtProcessor.getYPOint",
        "processing.base.ProcessingBase._handle_assign",
        "processing.extProcessor.ExtProcessor.decode_node",
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase._handle_assign": [
        "<builtin>.iter"
    ],
    "processing.extProcessor.ExtProcessor.visit_Yield": [
        "processing.extProcessor.ExtProcessor._visit_return"
    ],
    "processing.extProcessor.ExtProcessor.visit_Raise": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "processing.extProcessor.ExtProcessor.find_cls_fun_ns",
        "processing.extProcessor.ExtProcessor.getYPOint",
        "ast.NodeVisitor.visit",
        "processing.extProcessor.ExtProcessor.pushStack"
    ],
    "processing.extProcessor.ExtProcessor.analyze_submodules": [
        "<builtin>.super",
        "processing.extProcessor.ExtProcessor.get_modules_analyzed"
    ],
    "processing.extProcessor.ExtProcessor.visit_Try": [
        "ast.NodeVisitor.visit"
    ],
    "processing.extProcessor.ExtProcessor.visit_ExceptHandler": [
        "ast.NodeVisitor.visit"
    ],
    "processing.extProcessor.ExtProcessor.analyze_localfunction": [
        "processing.extProcessor.ExtProcessor.pushStack"
    ],
    "processing.extProcessor.ExtProcessor.analyze_localfAllunction": [
        "<builtin>.list",
        "processing.extProcessor.ExtProcessor.pushStack"
    ],
    "processing.extProcessor.ExtProcessor.resolve": [
        "<builtin>.list",
        "<builtin>.set",
        "functools.reduce",
        "processing.extProcessor.ExtProcessor.get_point",
        "<builtin>.map"
    ],
    "processing.extProcessor.ExtProcessor.resolve.<lambda1>": [],
    "processing.extProcessor.ExtProcessor.get_point": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "processing.extProcessor.ExtProcessor.flatten",
        "processing.extProcessor.ExtProcessor.get_point.helper",
        "<builtin>.filter",
        "<builtin>.map"
    ],
    "processing.extProcessor.ExtProcessor.get_point.helper": [
        "<list>.insert"
    ],
    "processing.extProcessor.ExtProcessor.mergeLeftRight": [
        "processing.extProcessor.ExtProcessor.find_field"
    ],
    "processing.extProcessor.ExtProcessor.find_field": [
        "processing.extProcessor.ExtProcessor.find_cls_fun_ns",
        "<builtin>.hasattr"
    ],
    "processing.extProcessor.ExtProcessor.convert": [
        "<list>.append",
        "<builtin>.list",
        "<builtin>.set",
        "processing.extProcessor.ExtProcessor.convert.dfs"
    ],
    "processing.extProcessor.ExtProcessor.convert.dfs": [
        "<list>.remove",
        "<builtin>.set",
        "<list>.append"
    ],
    "processing.extProcessor.ExtProcessor.convert_final": [
        "functools.reduce",
        "<builtin>.map",
        "<list>.append"
    ],
    "processing.extProcessor.ExtProcessor.convert_final.<lambda1>": [],
    "machinery.classes.ClassManager.create": [
        "machinery.classes.ClassNode.__init__"
    ],
    "machinery.classes.ClassNode.__init__": [],
    "machinery.classes.ClassNode.add_parent": [
        "machinery.classes.ClassNode.fix_mro",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "machinery.classes.ClassNode.fix_mro": [
        "<builtin>.enumerate",
        "<list>.append"
    ],
    "machinery.classes.ClassNode.compute_mro": [
        "<list>.reverse",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.__init__": [
        "posixpath.abspath",
        "<builtin>.print",
        "ntpath.abspath",
        "<builtin>.open"
    ],
    "processing.base.ProcessingBase.pushStack": [
        "ast.NodeVisitor.visit",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.popStack": [
        "<list>.pop"
    ],
    "processing.base.ProcessingBase.visit_Module": [
        "<list>.pop",
        "ast.NodeVisitor.generic_visit",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_FunctionDef": [
        "ast.NodeVisitor.visit",
        "<list>.pop",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_Lambda": [
        "ast.NodeVisitor.visit",
        "<list>.pop",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_If": [
        "ast.NodeVisitor.visit",
        "<list>.pop",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_With": [
        "ast.NodeVisitor.visit",
        "<list>.pop",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_While": [
        "ast.NodeVisitor.visit",
        "<list>.pop",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_else": [
        "ast.NodeVisitor.visit",
        "<list>.pop",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_while_else": [
        "processing.base.ProcessingBase.visit_else"
    ],
    "processing.base.ProcessingBase.visit_For": [
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase.visit_Dict": [
        "<list>.append",
        "<list>.pop",
        "<builtin>.zip",
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase.visit_List": [
        "ast.NodeVisitor.visit",
        "<list>.pop",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_BinOp": [
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase.visit_ClassDef": [
        "ast.NodeVisitor.visit",
        "<list>.pop",
        "<list>.append"
    ],
    "processing.base.ProcessingBase.visit_Tuple": [
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase._visit_return": [
        "processing.base.ProcessingBase.decode_node",
        "processing.base.ProcessingBase._handle_assign",
        "processing.extProcessor.ExtProcessor.decode_node",
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase._visit_assign": [
        "processing.base.ProcessingBase.decode_node",
        "processing.extProcessor.ExtProcessor.decode_node",
        "processing.base.ProcessingBase._visit_assign.do_assign",
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase._visit_assign.do_assign": [
        "processing.base.ProcessingBase._handle_assign",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.enumerate",
        "processing.extProcessor.ExtProcessor._get_target_ns",
        "processing.base.ProcessingBase._visit_assign.do_assign",
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase._retrieve_base_names": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<builtin>.set",
        "processing.base.ProcessingBase.decode_node",
        "<builtin>.Exception"
    ],
    "processing.base.ProcessingBase.iterate_call_args": [
        "processing.extProcessor.ExtProcessor.decode_node",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "processing.base.ProcessingBase.decode_node",
        "ast.NodeVisitor.visit"
    ],
    "processing.base.ProcessingBase.retrieve_call_names": [
        "processing.base.ProcessingBase._retrieve_attribute_names",
        "processing.base.ProcessingBase.retrieve_subscript_names",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "processing.base.ProcessingBase.analyze_submodules": [
        "processing.extProcessor.ExtProcessor.analyze_submodule",
        "processing.base.ProcessingBase.analyze_submodule"
    ],
    "processing.base.ProcessingBase.analyze_submodule": [
        "processing.base.ProcessingBase.merge_modules_analyzed",
        "processing.base.ProcessingBase.get_modules_analyzed",
        "processing.base.ProcessingBase.setMod",
        "processing.extProcessor.ExtProcessor.get_modules_analyzed"
    ],
    "processing.base.ProcessingBase.get_modules_analyzed": [],
    "processing.base.ProcessingBase.merge_modules_analyzed": [],
    "processing.base.ProcessingBase.setMod": [
        "<builtin>.print",
        "processing.extProcessor.ExtProcessor.get_module_ns"
    ],
    "machinery.imports.ImportManager.create_node": [
        "machinery.imports.ImportManager.get_node",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "machinery.imports.ImportManager.get_node": [],
    "machinery.imports.ImportManager.create_edge": [
        "machinery.imports.ImportManager._get_module_path",
        "machinery.imports.ImportManager.get_node",
        "<builtin>.isinstance"
    ],
    "machinery.imports.ImportManager._get_module_path": [],
    "machinery.imports.ImportManager.set_current_mod": [
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "machinery.imports.ImportManager.set_filepath": [
        "ntpath.abspath",
        "posixpath.abspath",
        "machinery.imports.ImportManager.get_node",
        "<builtin>.isinstance"
    ],
    "machinery.imports.ImportManager._is_init_file": [
        "<str>.endswith"
    ],
    "machinery.imports.ImportManager._handle_import_level": [
        "machinery.imports.ImportManager._is_init_file",
        "machinery.imports.ImportManager._get_module_path",
        "<builtin>.ImportError",
        "<builtin>.len"
    ],
    "machinery.imports.ImportManager._do_import": [
        "importlib.import_module",
        "machinery.imports.ImportManager.create_node",
        "importlib.util.find_spec",
        "machinery.imports.ImportManager.set_filepath",
        "_bootstrap.module_from_spec",
        "<builtin>.hasattr",
        "machinery.imports.ImportManager.create_edge"
    ],
    "_bootstrap.module_from_spec": [],
    "machinery.imports.ImportManager.handle_import": [
        "machinery.imports.ImportManager._do_import",
        "machinery.imports.ImportManager._handle_import_level",
        "posixpath.relpath",
        "posixpath.split",
        "ntpath.split",
        "ntpath.relpath",
        "<builtin>.hasattr",
        "machinery.imports.ImportManager.create_edge"
    ],
    "machinery.imports.get_custom_loader.CustomLoader.__init__": [
        "machinery.imports.ImportManager.create_node",
        "machinery.imports.ImportManager.get_node",
        "machinery.imports.ImportManager.set_filepath",
        "machinery.imports.ImportManager.create_edge"
    ],
    "machinery.key_err.KeyErrors.add": [
        "<list>.append"
    ],
    "json.dump": [
        "encoder.JSONEncoder"
    ],
    "json.load": [
        "json.loads"
    ],
    "rich.highlighter.Highlighter.__call__": [
        "rich.highlighter.Highlighter.highlight",
        "<builtin>.TypeError",
        "rich.text.Text.__init__",
        "<builtin>.isinstance"
    ],
    "rich.highlighter.Highlighter.highlight": [],
    "rich.highlighter.JSONHighlighter.highlight": [
        "<builtin>.super",
        "re.finditer",
        "<builtin>.len"
    ],
    "rich.panel.Panel._title": [
        "rich.text.Text.from_markup",
        "<builtin>.isinstance"
    ],
    "rich.panel.Panel._subtitle": [
        "rich.text.Text.from_markup",
        "<builtin>.isinstance"
    ],
    "rich.panel.Panel.__rich_measure__": [
        "rich.padding.Padding.unpack",
        "rich.measure.measure_renderables"
    ],
    "fractions.gcd": [
        "warnings",
        "warnings.warn",
        "<builtin>.type",
        "fractions._gcd"
    ],
    "fractions._gcd": [],
    "fractions.Fraction.__new__": [
        "<builtin>.super",
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.TypeError",
        "<builtin>.ZeroDivisionError",
        "<int>.as_integer_ratio",
        "fractions._gcd",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.ValueError",
        "pathlib.PurePath.match"
    ],
    "<int>.as_integer_ratio": [],
    "<builtin>.ZeroDivisionError": [],
    "fractions.Fraction.from_float": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "fractions.Fraction.from_decimal": [
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.TypeError",
        "_pydecimal.Decimal.as_integer_ratio",
        "<builtin>.type",
        "decimal"
    ],
    "_pydecimal.Decimal.as_integer_ratio": [
        "<builtin>.OverflowError",
        "<builtin>.int",
        "_pydecimal.Decimal.is_nan",
        "<builtin>.min",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.is_nan": [],
    "fractions.Fraction.limit_denominator": [
        "<builtin>.abs",
        "<builtin>.ValueError"
    ],
    "fractions.Fraction.__str__": [
        "<builtin>.str"
    ],
    "fractions.Fraction._operator_fallbacks.forward": [
        "<builtin>.isinstance",
        "operator.floordiv",
        "fractions.Fraction._div",
        "<builtin>.complex",
        "fractions.Fraction._sub",
        "fractions.Fraction._add",
        "fractions.Fraction._mul",
        "operator.mod",
        "operator.truediv",
        "fractions.Fraction._divmod",
        "operator.add",
        "fractions.Fraction._mod",
        "operator.sub",
        "operator.mul",
        "<builtin>.float",
        "fractions.Fraction._floordiv"
    ],
    "operator.mul": [],
    "operator.floordiv": [],
    "fractions.Fraction._div": [],
    "fractions.Fraction._sub": [],
    "fractions.Fraction._add": [],
    "fractions.Fraction._mul": [],
    "operator.mod": [],
    "operator.truediv": [],
    "fractions.Fraction._divmod": [
        "<builtin>.divmod"
    ],
    "operator.add": [],
    "fractions.Fraction._mod": [],
    "operator.sub": [],
    "fractions.Fraction._floordiv": [],
    "fractions.Fraction._operator_fallbacks.reverse": [
        "<builtin>.isinstance",
        "operator.floordiv",
        "fractions.Fraction._div",
        "<builtin>.complex",
        "fractions.Fraction._sub",
        "fractions.Fraction._add",
        "fractions.Fraction._mul",
        "operator.mod",
        "operator.truediv",
        "fractions.Fraction._divmod",
        "operator.add",
        "fractions.Fraction._mod",
        "operator.sub",
        "operator.mul",
        "<builtin>.float",
        "fractions.Fraction._floordiv"
    ],
    "fractions.Fraction.__pow__": [
        "<builtin>.float",
        "<builtin>.isinstance"
    ],
    "fractions.Fraction.__rpow__": [
        "<builtin>.float",
        "<builtin>.isinstance"
    ],
    "fractions.Fraction.__abs__": [
        "<builtin>.abs"
    ],
    "fractions.Fraction.__round__": [
        "<builtin>.divmod",
        "<builtin>.round",
        "<builtin>.abs"
    ],
    "fractions.Fraction.__hash__": [
        "<builtin>.abs",
        "<builtin>.pow"
    ],
    "fractions.Fraction.__eq__": [
        "fractions.Fraction.from_float",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "fractions.Fraction._richcmp": [
        "operator.ge",
        "<builtin>.isinstance",
        "operator.gt",
        "operator.le",
        "fractions.Fraction.from_float",
        "operator.lt"
    ],
    "fractions.Fraction.__lt__": [
        "fractions.Fraction._richcmp"
    ],
    "operator.lt": [],
    "fractions.Fraction.__gt__": [
        "fractions.Fraction._richcmp"
    ],
    "operator.gt": [],
    "fractions.Fraction.__le__": [
        "fractions.Fraction._richcmp"
    ],
    "operator.le": [],
    "fractions.Fraction.__ge__": [
        "fractions.Fraction._richcmp"
    ],
    "operator.ge": [],
    "fractions.Fraction.__bool__": [
        "<builtin>.bool"
    ],
    "fractions.Fraction.__reduce__": [
        "<builtin>.str"
    ],
    "fractions.Fraction.__copy__": [
        "<builtin>.type"
    ],
    "fractions.Fraction.__deepcopy__": [
        "<builtin>.type"
    ],
    "_pydecimal.InvalidOperation.handle": [
        "_pydecimal._dec_from_triple"
    ],
    "_pydecimal._dec_from_triple": [],
    "_pydecimal.Overflow.handle": [
        "_pydecimal._dec_from_triple"
    ],
    "_pydecimal.getcontext": [
        "_pydecimal.Context.__init__"
    ],
    "_pydecimal.localcontext": [
        "_pydecimal._ContextManager.__init__",
        "_pydecimal.getcontext"
    ],
    "_pydecimal._ContextManager.__init__": [
        "_pydecimal.Context.copy"
    ],
    "_pydecimal.Context.copy": [
        "_pydecimal.Context.__init__",
        "<list>.copy"
    ],
    "_pydecimal.Decimal.__new__": [
        "<list>.append",
        "<str>.replace",
        "<builtin>.isinstance",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "<builtin>.len",
        "_pydecimal.Decimal.from_float",
        "<builtin>.TypeError",
        "<map>",
        "<list>",
        "pathlib.PurePath.match",
        "<builtin>.abs",
        "<str>.strip",
        "<builtin>.str",
        "<builtin>.map",
        "<builtin>.ValueError",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Context._raise_error": [
        "_pydecimal.DivisionUndefined.handle",
        "_pydecimal.Decimal.exp",
        "_pydecimal.ConversionSyntax.handle",
        "<map>",
        "_pydecimal.DivisionImpossible.handle",
        "<map>.get",
        "_pydecimal.InvalidOperation.handle",
        "_pydecimal.DecimalException.handle"
    ],
    "_pydecimal.ConversionSyntax.handle": [],
    "_pydecimal.DecimalException.handle": [],
    "_pydecimal.Decimal.from_float": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.abs",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "<builtin>.repr"
    ],
    "_pydecimal.Decimal._check_nans": [
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Decimal._fix_nan",
        "_pydecimal.getcontext",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal._isnan": [],
    "_pydecimal.Decimal._fix_nan": [
        "_pydecimal._dec_from_triple",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal._compare_check_nans": [
        "_pydecimal.Decimal.is_snan",
        "_pydecimal.Context._raise_error",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.is_qnan"
    ],
    "_pydecimal.Decimal.is_snan": [],
    "_pydecimal.Decimal.is_qnan": [],
    "_pydecimal.Decimal._cmp": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Decimal._isinfinity"
    ],
    "_pydecimal.Decimal._isinfinity": [],
    "_pydecimal.Decimal.adjusted": [
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.__eq__": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._cmp",
        "_pydecimal._convert_for_comparison"
    ],
    "_pydecimal._convert_for_comparison": [
        "<builtin>.isinstance",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "_pydecimal.Decimal.from_float",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__lt__": [
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal.Decimal._cmp",
        "_pydecimal._convert_for_comparison"
    ],
    "_pydecimal.Decimal.__le__": [
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal.Decimal._cmp",
        "_pydecimal._convert_for_comparison"
    ],
    "_pydecimal.Decimal.__gt__": [
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal.Decimal._cmp",
        "_pydecimal._convert_for_comparison"
    ],
    "_pydecimal.Decimal.__ge__": [
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal.Decimal._cmp",
        "_pydecimal._convert_for_comparison"
    ],
    "_pydecimal.Decimal.compare": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._cmp"
    ],
    "_pydecimal._convert_other": [
        "_pydecimal.Decimal.from_float",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "_pydecimal.Decimal.__hash__": [
        "<builtin>.int",
        "<builtin>.TypeError",
        "_pydecimal.Decimal.is_nan",
        "<builtin>.pow",
        "_pydecimal.Decimal.is_snan"
    ],
    "_pydecimal.Decimal.as_tuple": [
        "<builtin>.tuple",
        "<builtin>.map",
        "_pydecimal.<lambda1>"
    ],
    "_pydecimal.<lambda1>": [],
    "_pydecimal.Decimal.__repr__": [
        "<builtin>.str"
    ],
    "_pydecimal.Decimal.__str__": [
        "_pydecimal.getcontext",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.to_eng_string": [
        "_pydecimal.Decimal.__str__"
    ],
    "_pydecimal.Decimal.__neg__": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal.copy_negate"
    ],
    "_pydecimal.Decimal.copy_negate": [
        "_pydecimal._dec_from_triple"
    ],
    "_pydecimal.Decimal.copy_abs": [
        "_pydecimal._dec_from_triple"
    ],
    "_pydecimal.Decimal._fix": [
        "_pydecimal.Context.Etiny",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fix_nan",
        "<builtin>.int",
        "<builtin>.str",
        "_pydecimal.Decimal._isnan",
        "<builtin>.min",
        "_pydecimal._dec_from_triple",
        "<builtin>.len",
        "<builtin>.max",
        "_pydecimal.Context.Etop"
    ],
    "_pydecimal.Context.Etiny": [
        "<builtin>.int"
    ],
    "_pydecimal.Context.Etop": [
        "<builtin>.int"
    ],
    "_pydecimal.Decimal.__pos__": [
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._fix",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal.__abs__": [
        "_pydecimal.Decimal.__neg__",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal.__pos__"
    ],
    "_pydecimal.Decimal.__add__": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._rescale",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.max",
        "_pydecimal.Decimal._fix",
        "_pydecimal._normalize",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dec_from_triple",
        "<builtin>.min",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal._rescale": [
        "<builtin>.str",
        "_pydecimal._dec_from_triple",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "_pydecimal._WorkRep.__init__": [
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "_pydecimal._normalize": [
        "<builtin>.min",
        "<builtin>.len",
        "<builtin>.str"
    ],
    "_pydecimal.Decimal.__sub__": [
        "_pydecimal.Decimal.__add__",
        "_pydecimal.Decimal.copy_negate",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.__rsub__": [
        "_pydecimal.Decimal.__sub__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.__mul__": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__truediv__": [
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.str",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dec_from_triple",
        "<builtin>.len",
        "<builtin>.divmod",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.DivisionUndefined.handle": [],
    "_pydecimal.Decimal._divide": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Decimal._rescale",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "<builtin>.divmod",
        "<builtin>.min",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__rtruediv__": [
        "_pydecimal.Decimal.__truediv__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.__divmod__": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._divide",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.DivisionImpossible.handle": [],
    "_pydecimal.Decimal.__rdivmod__": [
        "_pydecimal.Decimal.__divmod__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.__mod__": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._divide",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__rmod__": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__mod__"
    ],
    "_pydecimal.Decimal.remainder_near": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._rescale",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "<builtin>.divmod",
        "<builtin>.min",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__floordiv__": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._divide",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__rfloordiv__": [
        "_pydecimal.Decimal.__floordiv__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.__float__": [
        "_pydecimal.Decimal.is_snan",
        "_pydecimal.Decimal._isnan",
        "<builtin>.str",
        "<builtin>.float",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.__int__": [
        "<builtin>.OverflowError",
        "<builtin>.int",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Decimal._isnan",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.__complex__": [
        "<builtin>.float",
        "<builtin>.complex"
    ],
    "_pydecimal.Decimal._round_up": [
        "_pydecimal.Decimal._round_down"
    ],
    "_pydecimal.Decimal._round_down": [
        "pathlib.PurePath.match",
        "<map>",
        "<list>"
    ],
    "_pydecimal.Decimal._round_half_down": [
        "_pydecimal.Decimal._round_half_up",
        "pathlib.PurePath.match",
        "<map>",
        "<list>"
    ],
    "_pydecimal.Decimal._round_half_up": [
        "pathlib.PurePath.match",
        "<map>",
        "<list>"
    ],
    "_pydecimal.Decimal._round_half_even": [
        "_pydecimal.Decimal._round_half_up",
        "pathlib.PurePath.match",
        "<map>",
        "<list>"
    ],
    "_pydecimal.Decimal._round_ceiling": [
        "_pydecimal.Decimal._round_down"
    ],
    "_pydecimal.Decimal._round_floor": [
        "_pydecimal.Decimal._round_down"
    ],
    "_pydecimal.Decimal._round_05up": [
        "_pydecimal.Decimal._round_down"
    ],
    "_pydecimal.Decimal.__round__": [
        "_pydecimal.Decimal._rescale",
        "<builtin>.OverflowError",
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.TypeError",
        "_pydecimal.Decimal.quantize",
        "_pydecimal.Decimal.is_nan",
        "_pydecimal._dec_from_triple",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.quantize": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._rescale",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "<builtin>.len",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.exp": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.getcontext",
        "<builtin>.len",
        "_pydecimal._dexp",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._shallow_copy",
        "<builtin>.str"
    ],
    "_pydecimal._dexp": [
        "_pydecimal._Log10Memoize.getdigits",
        "<builtin>.str",
        "_pydecimal._div_nearest",
        "_pydecimal._iexp",
        "<builtin>.len",
        "<builtin>.divmod",
        "<builtin>.max"
    ],
    "_pydecimal._Log10Memoize.getdigits": [
        "_pydecimal._ilog",
        "_pydecimal._div_nearest",
        "<builtin>.len",
        "<builtin>.int",
        "<str>.rstrip",
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "_pydecimal._ilog": [
        "_pydecimal._sqrt_nearest",
        "<builtin>.len",
        "_pydecimal._div_nearest",
        "<builtin>.int",
        "<builtin>.abs",
        "<builtin>.str",
        "_pydecimal._rshift_nearest",
        "<builtin>.range"
    ],
    "_pydecimal._rshift_nearest": [],
    "_pydecimal._sqrt_nearest": [
        "<builtin>.ValueError"
    ],
    "_pydecimal._div_nearest": [
        "<builtin>.divmod"
    ],
    "_pydecimal._iexp": [
        "<builtin>.int",
        "_pydecimal._div_nearest",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "_pydecimal.Context._shallow_copy": [
        "_pydecimal.Context.__init__"
    ],
    "_pydecimal.Context._set_rounding": [],
    "_pydecimal.Decimal.__floor__": [
        "_pydecimal.Decimal._rescale",
        "<builtin>.OverflowError",
        "<builtin>.int",
        "_pydecimal.Decimal.is_nan",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.__ceil__": [
        "_pydecimal.Decimal._rescale",
        "<builtin>.OverflowError",
        "<builtin>.int",
        "_pydecimal.Decimal.is_nan",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.fma": [
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "_pydecimal.Decimal.__add__",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal._power_modulo": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._fix_nan",
        "<builtin>.int",
        "_pydecimal.Decimal.to_integral_value",
        "<builtin>.pow",
        "_pydecimal.Decimal._isnan",
        "<builtin>.abs",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._iseven",
        "<builtin>.str",
        "_pydecimal.Decimal._isinteger",
        "<builtin>.range",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal._isinteger": [
        "<builtin>.len"
    ],
    "_pydecimal.Decimal._iseven": [],
    "_pydecimal.Decimal.to_integral_value": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._rescale",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal._power_exact": [
        "_pydecimal._log10_lb",
        "<builtin>.int",
        "<builtin>.len",
        "_pydecimal._decimal_lshift_exact",
        "_pydecimal._WorkRep.__init__",
        "<builtin>.abs",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Decimal._isinteger",
        "<builtin>.divmod",
        "<builtin>.min"
    ],
    "_pydecimal._decimal_lshift_exact": [
        "<builtin>.abs",
        "<builtin>.len",
        "<builtin>.str"
    ],
    "_pydecimal._log10_lb": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "_pydecimal.Decimal.__pow__": [
        "_pydecimal.Decimal._check_nans",
        "<builtin>.int",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._power_modulo",
        "_pydecimal._WorkRep.__init__",
        "<builtin>.str",
        "_pydecimal.Context._raise_error",
        "_pydecimal._dpower",
        "_pydecimal.Context.copy",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._iseven",
        "_pydecimal.Decimal._isinteger",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._log10_exp_bound",
        "_pydecimal.Decimal._power_exact",
        "_pydecimal.Decimal.adjusted",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.copy_negate",
        "_pydecimal.Context.clear_flags",
        "_pydecimal.Decimal._isinfinity",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal._log10_exp_bound": [
        "<builtin>.str",
        "_pydecimal._WorkRep.__init__",
        "<builtin>.len"
    ],
    "_pydecimal._dpower": [
        "_pydecimal._dlog",
        "_pydecimal._dexp",
        "_pydecimal._div_nearest",
        "<builtin>.str",
        "<builtin>.abs",
        "<builtin>.len"
    ],
    "_pydecimal._dlog": [
        "_pydecimal._Log10Memoize.getdigits",
        "_pydecimal._ilog",
        "_pydecimal._div_nearest",
        "<builtin>.str",
        "<builtin>.abs",
        "<builtin>.len"
    ],
    "_pydecimal.Context.clear_flags": [],
    "_pydecimal.Decimal.__rpow__": [
        "_pydecimal.Decimal.__pow__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.normalize": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.same_quantum": [
        "_pydecimal.Decimal.is_infinite",
        "_pydecimal.Decimal.is_nan",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.is_infinite": [],
    "_pydecimal.Decimal._round": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Decimal._rescale",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.to_integral_exact": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._rescale",
        "_pydecimal.getcontext",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.sqrt": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.getcontext",
        "<builtin>.str",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._shallow_copy",
        "<builtin>.len",
        "<builtin>.divmod",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.max": [
        "_pydecimal.Decimal.compare_total",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._cmp",
        "_pydecimal.Decimal._isnan"
    ],
    "_pydecimal.Decimal.compare_total": [
        "_pydecimal.Decimal._isnan",
        "_pydecimal._convert_other",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.min": [
        "_pydecimal.Decimal.compare_total",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._cmp",
        "_pydecimal.Decimal._isnan"
    ],
    "_pydecimal.Decimal.compare_signal": [
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.compare"
    ],
    "_pydecimal.Decimal.compare_total_mag": [
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.copy_sign": [
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.is_normal": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal.is_subnormal": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal._ln_exp_bound": [
        "<builtin>.str",
        "_pydecimal._WorkRep.__init__",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.ln": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._dlog",
        "_pydecimal.getcontext",
        "<builtin>.len",
        "<builtin>.int",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal.Decimal._ln_exp_bound",
        "<builtin>.abs",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._shallow_copy",
        "<builtin>.str",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.log10": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._log10_exp_bound",
        "<builtin>.str",
        "<builtin>.int",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._WorkRep.__init__",
        "<builtin>.abs",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._shallow_copy",
        "<builtin>.len",
        "_pydecimal._dlog10",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal._dlog10": [
        "_pydecimal._Log10Memoize.getdigits",
        "_pydecimal._ilog",
        "_pydecimal._div_nearest",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.logb": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal._fill_logical": [
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.logical_and": [
        "_pydecimal.Decimal._islogical",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "<str>.lstrip",
        "<builtin>.zip",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Decimal._fill_logical",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal._islogical": [],
    "_pydecimal.Decimal.logical_invert": [
        "_pydecimal._dec_from_triple",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.logical_xor"
    ],
    "_pydecimal.Decimal.logical_xor": [
        "_pydecimal.Decimal._islogical",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "<str>.lstrip",
        "<builtin>.zip",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Decimal._fill_logical",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.logical_or": [
        "_pydecimal.Decimal._islogical",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "<str>.lstrip",
        "<builtin>.zip",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Decimal._fill_logical",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.max_mag": [
        "_pydecimal.Decimal.compare_total",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isnan"
    ],
    "_pydecimal.Decimal.min_mag": [
        "_pydecimal.Decimal.compare_total",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isnan"
    ],
    "_pydecimal.Decimal.next_minus": [
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context._ignore_all_flags",
        "_pydecimal.getcontext",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal.__sub__",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Context.copy",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context.Etop"
    ],
    "_pydecimal.Context._ignore_all_flags": [
        "_pydecimal.Context._ignore_flags"
    ],
    "_pydecimal.Context._ignore_flags": [
        "<builtin>.list"
    ],
    "_pydecimal.Decimal.next_plus": [
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context._ignore_all_flags",
        "_pydecimal.getcontext",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal.__add__",
        "_pydecimal.Context.copy",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context.Etop"
    ],
    "_pydecimal.Decimal.next_toward": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Decimal.next_plus",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._cmp",
        "_pydecimal.Decimal.next_minus",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Decimal.copy_sign",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.number_class": [
        "_pydecimal.Decimal.is_subnormal",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.is_qnan",
        "_pydecimal.Decimal.is_zero",
        "_pydecimal.Decimal.is_snan",
        "_pydecimal.Decimal._isinfinity"
    ],
    "_pydecimal.Decimal.is_zero": [],
    "_pydecimal.Decimal.rotate": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "<builtin>.len",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.scaleb": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.shift": [
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.getcontext",
        "<builtin>.int",
        "<str>.lstrip",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "<builtin>.len",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__reduce__": [
        "<builtin>.str"
    ],
    "_pydecimal.Decimal.__copy__": [
        "<builtin>.type",
        "<builtin>.str"
    ],
    "_pydecimal.Decimal.__deepcopy__": [
        "<builtin>.type",
        "<builtin>.str"
    ],
    "_pydecimal.Decimal.__format__": [
        "_pydecimal.Decimal._rescale",
        "_pydecimal.getcontext",
        "<builtin>.len",
        "_pydecimal._format_sign",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal._format_align",
        "_pydecimal.Decimal._round",
        "_pydecimal._dec_from_triple",
        "_pydecimal._parse_format_specifier",
        "_pydecimal._format_number",
        "<builtin>.str"
    ],
    "_pydecimal._parse_format_specifier": [
        "locale.localeconv",
        "pathlib.PurePath.match",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "_pydecimal._format_sign": [],
    "_pydecimal._format_align": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "_pydecimal._format_number": [
        "_pydecimal._insert_thousands_sep",
        "_pydecimal._format_sign",
        "_pydecimal._format_align",
        "<builtin>.len"
    ],
    "_pydecimal._insert_thousands_sep": [
        "<list>.append",
        "_pydecimal._group_lengths",
        "<builtin>.reversed",
        "<builtin>.max",
        "<builtin>.len",
        "<builtin>.min",
        "<builtin>.ValueError"
    ],
    "_pydecimal._group_lengths": [
        "itertools.repeat",
        "itertools.chain",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "_pydecimal._ContextManager.__enter__": [
        "_pydecimal.setcontext",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.setcontext": [
        "_pydecimal.Context.copy",
        "_pydecimal.Context.clear_flags"
    ],
    "_pydecimal._ContextManager.__exit__": [
        "_pydecimal.setcontext"
    ],
    "_pydecimal.Context._set_integer_check": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Context._set_signal_dict": [
        "<builtin>.TypeError",
        "<builtin>.KeyError",
        "<builtin>.isinstance"
    ],
    "_pydecimal.Context.__setattr__": [
        "_pydecimal.Context._set_signal_dict",
        "<builtin>.AttributeError",
        "<builtin>.TypeError",
        "_pydecimal.Context._set_integer_check"
    ],
    "_pydecimal.Context.__delattr__": [
        "<builtin>.AttributeError"
    ],
    "_pydecimal.Context.__repr__": [
        "<list>.append"
    ],
    "_pydecimal.Context._regard_flags": [
        "<list>.remove",
        "<builtin>.isinstance"
    ],
    "_pydecimal.Context.create_decimal": [
        "<builtin>.isinstance",
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal._isnan",
        "<str>.strip",
        "<builtin>.len",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Context.create_decimal_from_float": [
        "_pydecimal.Decimal.from_float",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Context.abs": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__abs__"
    ],
    "_pydecimal.Context.add": [
        "_pydecimal.Decimal.__add__",
        "_pydecimal._convert_other",
        "<builtin>.TypeError"
    ],
    "_pydecimal.Context._apply": [
        "<builtin>.str"
    ],
    "_pydecimal.Context.canonical": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "_pydecimal.Context.compare": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.compare"
    ],
    "_pydecimal.Context.compare_signal": [
        "_pydecimal.Decimal.compare_signal",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.compare_total": [
        "_pydecimal.Decimal.compare_total",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.compare_total_mag": [
        "_pydecimal.Decimal.compare_total_mag",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.copy_abs": [
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.copy_decimal": [
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.copy_negate": [
        "_pydecimal.Decimal.copy_negate",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.copy_sign": [
        "_pydecimal.Decimal.copy_sign",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.divide": [
        "<builtin>.TypeError",
        "_pydecimal.Decimal.__truediv__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.divide_int": [
        "<builtin>.TypeError",
        "_pydecimal.Decimal.__floordiv__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.divmod": [
        "<builtin>.TypeError",
        "_pydecimal.Decimal.__divmod__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.exp": [
        "_pydecimal.Decimal.exp",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.fma": [
        "_pydecimal.Decimal.fma",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_canonical": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "_pydecimal.Context.is_finite": [
        "_pydecimal.Decimal.is_finite",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.is_finite": [],
    "_pydecimal.Context.is_infinite": [
        "_pydecimal.Decimal.is_infinite",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_nan": [
        "_pydecimal.Decimal.is_nan",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_normal": [
        "_pydecimal.Decimal.is_normal",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_qnan": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.is_qnan"
    ],
    "_pydecimal.Context.is_signed": [
        "_pydecimal.Decimal.is_signed",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.is_signed": [],
    "_pydecimal.Context.is_snan": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.is_snan"
    ],
    "_pydecimal.Context.is_subnormal": [
        "_pydecimal.Decimal.is_subnormal",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_zero": [
        "_pydecimal.Decimal.is_zero",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.ln": [
        "_pydecimal.Decimal.ln",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.log10": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.log10"
    ],
    "_pydecimal.Context.logb": [
        "_pydecimal.Decimal.logb",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.logical_and": [
        "_pydecimal.Decimal.logical_and",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.logical_invert": [
        "_pydecimal.Decimal.logical_invert",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.logical_or": [
        "_pydecimal.Decimal.logical_or",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.logical_xor": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.logical_xor"
    ],
    "_pydecimal.Context.max": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.max"
    ],
    "_pydecimal.Context.max_mag": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.max_mag"
    ],
    "_pydecimal.Context.min": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.min"
    ],
    "_pydecimal.Context.min_mag": [
        "_pydecimal.Decimal.min_mag",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.minus": [
        "_pydecimal.Decimal.__neg__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.multiply": [
        "_pydecimal.Decimal.__mul__",
        "<builtin>.TypeError",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.next_minus": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.next_minus"
    ],
    "_pydecimal.Context.next_plus": [
        "_pydecimal.Decimal.next_plus",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.next_toward": [
        "_pydecimal.Decimal.next_toward",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.normalize": [
        "_pydecimal.Decimal.normalize",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.number_class": [
        "_pydecimal.Decimal.number_class",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.plus": [
        "_pydecimal.Decimal.__pos__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.power": [
        "<builtin>.TypeError",
        "_pydecimal.Decimal.__pow__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.quantize": [
        "_pydecimal.Decimal.quantize",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.remainder": [
        "<builtin>.TypeError",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__mod__"
    ],
    "_pydecimal.Context.remainder_near": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.remainder_near"
    ],
    "_pydecimal.Context.rotate": [
        "_pydecimal.Decimal.rotate",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.same_quantum": [
        "_pydecimal.Decimal.same_quantum",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.scaleb": [
        "_pydecimal.Decimal.scaleb",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.shift": [
        "_pydecimal.Decimal.shift",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.sqrt": [
        "_pydecimal.Decimal.sqrt",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.subtract": [
        "<builtin>.TypeError",
        "_pydecimal.Decimal.__sub__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.to_eng_string": [
        "_pydecimal.Decimal.to_eng_string",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.to_sci_string": [
        "_pydecimal.Decimal.__str__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.to_integral_exact": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.to_integral_exact"
    ],
    "_pydecimal.Context.to_integral_value": [
        "_pydecimal.Decimal.to_integral_value",
        "_pydecimal._convert_other"
    ],
    "numbers.Real.__complex__": [
        "<builtin>.float",
        "<builtin>.complex"
    ],
    "numbers.Integral.__index__": [
        "<builtin>.int"
    ],
    "numbers.Integral.__float__": [
        "<builtin>.float",
        "<builtin>.int"
    ],
    "rich.theme.Theme.config": [
        "<builtin>.sorted"
    ],
    "rich.theme.Theme.from_file": [
        "rich.theme.Theme.__init__",
        "rich.style.Style.parse",
        "configparser.RawConfigParser.read_file",
        "configparser.RawConfigParser.items"
    ],
    "rich.theme.Theme.read": [
        "rich.theme.Theme.from_file",
        "<builtin>.open"
    ],
    "rich.theme.ThemeStack.pop_theme": [
        "<builtin>.len"
    ],
    "rich._log_render.LogRender.__call__": [
        "rich.table.Table.add_column",
        "rich.table.Table.add_row",
        "rich.table",
        "rich.text.Text.append",
        "<builtin>.callable",
        "rich.text.Text.__init__",
        "rich.containers.Renderables.__init__",
        "<builtin>.len",
        "rich.table.Table.grid",
        "rich.containers"
    ],
    "rich.pager.SystemPager._pager": [
        "<builtin>.__import__"
    ],
    "rich.pager.SystemPager.show": [
        "rich.pager.SystemPager._pager"
    ],
    "rich.__main__.ColorBox.__rich_console__": [
        "rich.style.Style.__init__",
        "rich.segment.Segment.line",
        "colorsys.hls_to_rgb",
        "rich.color.Color.from_rgb",
        "<builtin>.range"
    ],
    "rich.markdown.TextElement.on_enter": [
        "rich.text.Text.__init__"
    ],
    "rich.markdown.TextElement.on_text": [
        "rich.text.Text.append",
        "<builtin>.isinstance"
    ],
    "rich.markdown.Paragraph.create": [
        "rich.markdown.Paragraph.__init__"
    ],
    "rich.markdown.Paragraph.__init__": [],
    "rich.markdown.Heading.create": [
        "rich.markdown.Heading.__init__"
    ],
    "rich.markdown.Heading.__init__": [
        "<builtin>.super"
    ],
    "rich.markdown.Heading.on_enter": [
        "rich.text.Text.__init__"
    ],
    "rich.markdown.Heading.__rich_console__": [
        "rich.text.Text.__init__",
        "rich.panel.Panel.__init__"
    ],
    "rich.markdown.CodeBlock.create": [
        "rich.markdown.CodeBlock.__init__"
    ],
    "rich.markdown.CodeBlock.__init__": [],
    "rich.markdown.CodeBlock.__rich_console__": [
        "rich.syntax.Syntax.__init__",
        "<builtin>.str"
    ],
    "rich.markdown.BlockQuote.__init__": [
        "rich.containers.Renderables.__init__"
    ],
    "rich.markdown.HorizontalRule.__rich_console__": [
        "rich.rule.Rule.__init__"
    ],
    "rich.markdown.ListElement.create": [
        "rich.markdown.ListElement.__init__"
    ],
    "rich.markdown.ListElement.__init__": [],
    "rich.markdown.ListElement.on_child_close": [
        "<builtin>.isinstance"
    ],
    "rich.markdown.ListElement.__rich_console__": [
        "<builtin>.len"
    ],
    "rich.markdown.ListItem.__init__": [
        "rich.containers.Renderables.__init__"
    ],
    "rich.markdown.ListItem.render_bullet": [
        "rich._loop.loop_first"
    ],
    "rich.markdown.ListItem.render_number": [
        "rich._loop.loop_first",
        "<str>.rjust",
        "<builtin>.len",
        "<builtin>.str"
    ],
    "<str>.rjust": [],
    "rich.markdown.ImageItem.create": [
        "rich.markdown.ImageItem.__init__"
    ],
    "rich.markdown.ImageItem.__init__": [
        "<builtin>.super"
    ],
    "rich.markdown.ImageItem.on_enter": [
        "<builtin>.super",
        "rich.text.Text.__init__"
    ],
    "rich.markdown.ImageItem.__rich_console__": [
        "rich.text.Text.__init__",
        "rich.text.Text.assemble",
        "rich.style.Style.__init__"
    ],
    "commonmark.blocks.is_blank": [
        "re.search"
    ],
    "commonmark.blocks.peek": [
        "<builtin>.len"
    ],
    "commonmark.blocks.parse_list_marker": [
        "commonmark.blocks.peek",
        "<builtin>.int",
        "commonmark.blocks.is_space_or_tab",
        "<builtin>.len",
        "re.search"
    ],
    "commonmark.blocks.is_space_or_tab": [],
    "commonmark.blocks.List.finalize": [
        "commonmark.blocks.ends_with_blank_line"
    ],
    "commonmark.blocks.ends_with_blank_line": [],
    "commonmark.blocks.BlockQuote.continue_": [
        "commonmark.blocks.peek",
        "commonmark.blocks.is_space_or_tab"
    ],
    "commonmark.blocks.CodeBlock.continue_": [
        "re.search",
        "commonmark.blocks.is_space_or_tab",
        "commonmark.blocks.peek",
        "<builtin>.len"
    ],
    "commonmark.blocks.CodeBlock.finalize": [
        "re.sub",
        "commonmark.common.unescape_string"
    ],
    "commonmark.blocks.HtmlBlock.finalize": [
        "re.sub"
    ],
    "commonmark.blocks.Paragraph.finalize": [
        "commonmark.blocks.peek",
        "commonmark.blocks.is_blank"
    ],
    "commonmark.blocks.BlockStarts.block_quote": [
        "commonmark.blocks.peek",
        "commonmark.blocks.is_space_or_tab"
    ],
    "commonmark.blocks.BlockStarts.atx_heading": [
        "re.search",
        "re.sub",
        "<str>.strip",
        "<builtin>.len"
    ],
    "commonmark.blocks.BlockStarts.fenced_code_block": [
        "re.search",
        "<builtin>.len"
    ],
    "commonmark.blocks.BlockStarts.html_block": [
        "commonmark.blocks.peek",
        "<builtin>.range",
        "re.search"
    ],
    "commonmark.blocks.BlockStarts.setext_heading": [
        "re.search",
        "commonmark.blocks.peek",
        "commonmark.node.Node.__init__",
        "<builtin>.len"
    ],
    "commonmark.blocks.BlockStarts.thematic_break": [
        "re.search",
        "<builtin>.len"
    ],
    "commonmark.blocks.BlockStarts.list_item": [
        "commonmark.blocks.parse_list_marker",
        "commonmark.blocks.lists_match"
    ],
    "commonmark.blocks.lists_match": [
        "<map>.get"
    ],
    "commonmark.blocks.Parser.advance_offset": [
        "<builtin>.min"
    ],
    "commonmark.common.unescape_char": [
        "html.unescape",
        "commonmark.entitytrans._unescape"
    ],
    "commonmark.common.replace_unsafe_char": [
        "<map>.get"
    ],
    "commonmark.common.escape_xml": [
        "re.search",
        "re.sub"
    ],
    "commonmark.entitytrans._replace_charref": [
        "<builtin>.chr",
        "<builtin>.int",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "commonmark.inlines.smart_dashes": [
        "<builtin>.len"
    ],
    "commonmark.inlines.InlineParser.parseReference": [
        "commonmark.inlines.InlineParser.parseLinkLabel",
        "commonmark.inlines.InlineParser.spnl",
        "commonmark.inlines.InlineParser.match",
        "commonmark.inlines.InlineParser.parseLinkTitle",
        "commonmark.inlines.InlineParser.peek",
        "commonmark.normalize_reference.normalize_reference",
        "commonmark.inlines.InlineParser.parseLinkDestination"
    ],
    "commonmark.normalize_reference.normalize_reference": [
        "<str>.translate"
    ],
    "commonmark.node.is_container": [
        "re.search"
    ],
    "commonmark.node.Node.pretty": [
        "pprint"
    ],
    "commonmark.node.Node.normalize": [
        "commonmark.node.NodeWalker.__iter__",
        "commonmark.node.NodeWalker.__next__",
        "commonmark.node.Node.walker"
    ],
    "commonmark.node.Node.is_container": [
        "commonmark.node.Node.is_container"
    ],
    "commonmark.normalize_reference.chr": [
        "commonmark.normalize_reference.chr"
    ],
    "commonmark.normalize_reference._subst_handler": [
        "<builtin>.ord"
    ],
    "rich.rule.Rule.__rich_console__.<lambda1>": [
        "<builtin>.ord",
        "<builtin>.all"
    ],
    "pydoc.pathdirs": [
        "genericpath.isdir",
        "posixpath.normcase",
        "ntpath.normcase",
        "nt._isdir",
        "<list>.append",
        "posixpath.abspath",
        "ntpath.abspath",
        "os._Environ.__iter__",
        "email.message.Message.__iter__"
    ],
    "email.message.Message.__iter__": [],
    "pydoc.allmethods": [
        "inspect.getmembers",
        "<map>.update",
        "<map>.keys",
        "<builtin>.getattr"
    ],
    "pydoc.ispackage": [
        "posixpath.join",
        "genericpath.isdir",
        "ntpath.join",
        "nt._isdir",
        "genericpath.isfile"
    ],
    "pydoc.synopsis": [
        "<builtin>.tuple",
        "tokenize.open",
        "<map>.get"
    ],
    "pydoc.HTMLDoc.docmodule": [
        "pydoc.getdoc",
        "inspect.isfunction",
        "pydoc.HTMLDoc.multicolumn",
        "<builtin>.str",
        "<list>.append",
        "<builtin>.locals",
        "pydoc.HTMLDoc.heading",
        "inspect.getmembers",
        "pkgutil.iter_modules",
        "pydoc.Doc.getdocloc",
        "inspect.isbuiltin",
        "pydoc.HTMLDoc.filelink",
        "pydoc.visiblename",
        "pydoc.HTMLDoc.bigsection",
        "inspect.getmodule",
        "pydoc.HTMLDoc.markup",
        "<builtin>.range",
        "pydoc._url_handler._HTMLDoc.filelink",
        "inspect.getabsfile",
        "<builtin>.getattr",
        "<builtin>.len",
        "<list>.sort",
        "<builtin>.hasattr"
    ],
    "pydoc.HTMLDoc.filelink": [],
    "pydoc.HTMLDoc.heading": [],
    "pydoc.HTMLDoc.markup": [
        "<str>.replace",
        "<builtin>.int",
        "re.compile",
        "<list>.append",
        "pydoc.HTMLDoc.preformat"
    ],
    "pydoc.HTMLDoc.preformat": [
        "<str>.expandtabs",
        "pydoc.replace",
        "pydoc.HTMLRepr.escape"
    ],
    "pydoc.HTMLRepr.escape": [
        "pydoc.replace"
    ],
    "pydoc.replace": [],
    "pydoc.HTMLDoc.multicolumn": [
        "<builtin>.format",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "pydoc.HTMLDoc.bigsection": [
        "pydoc.HTMLDoc.section"
    ],
    "pydoc.HTMLDoc.section": [],
    "pydoc.TextDoc.docclass.makename": [
        "pydoc.classname"
    ],
    "pydoc.HTMLDoc.docclass": [
        "pydoc.getdoc",
        "inspect.getmro",
        "<list>.append",
        "<builtin>.str",
        "<list>",
        "pydoc.HTMLDoc.docclass.spilldescriptors",
        "pydoc.classify_class_attrs",
        "pydoc.HTMLDoc.docclass.HorizontalRule.__init__",
        "pydoc.sort_attributes",
        "pydoc.visiblename",
        "pydoc.HTMLDoc.docclass.HorizontalRule",
        "pydoc.HTMLDoc.section",
        "pydoc.HTMLRepr.escape",
        "pydoc.HTMLDoc.docclass.HorizontalRule.maybe",
        "pydoc.HTMLDoc.markup",
        "inspect.signature",
        "pydoc._split_list",
        "pydoc.HTMLDoc.classlink",
        "<builtin>.getattr",
        "<builtin>.len",
        "pydoc.HTMLDoc.docclass.spill",
        "pydoc.HTMLDoc.docclass.spilldata",
        "_collections.deque"
    ],
    "pydoc.HTMLDoc.docclass.HorizontalRule": [],
    "pydoc.HTMLDoc.docclass.HorizontalRule.__init__": [],
    "pydoc.HTMLDoc.docclass.HorizontalRule.maybe": [
        "<list>"
    ],
    "pydoc.HTMLDoc.docclass.<lambda1>": [],
    "pydoc.HTMLDoc.classlink": [
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "pydoc.classname"
    ],
    "pydoc.HTMLDoc.docclass.spill": [
        "pydoc.HTMLDoc.docdata",
        "pydoc._split_list",
        "pydoc.HTMLDoc.docclass.HorizontalRule.maybe",
        "<builtin>.getattr",
        "<list>"
    ],
    "pydoc.HTMLDoc.docclass.<lambda2>": [],
    "pydoc.HTMLDoc.docclass.<lambda3>": [],
    "pydoc.HTMLDoc.docclass.<lambda4>": [],
    "pydoc.HTMLDoc.docclass.spilldescriptors": [
        "pydoc.HTMLDoc.docclass.HorizontalRule.maybe",
        "pydoc._split_list",
        "pydoc.HTMLDoc.docdata",
        "<list>"
    ],
    "pydoc.HTMLDoc.docclass.<lambda5>": [],
    "pydoc.HTMLDoc.docclass.<lambda6>": [],
    "pydoc.HTMLDoc.docclass.spilldata": [
        "pydoc.getdoc",
        "inspect.isdatadescriptor",
        "pydoc._split_list",
        "pydoc.HTMLDoc.docclass.HorizontalRule.maybe",
        "<builtin>.callable",
        "<builtin>.getattr",
        "pydoc.HTMLDoc.markup",
        "pydoc.HTMLDoc.docother",
        "<list>"
    ],
    "pydoc.HTMLDoc.docclass.<lambda7>": [],
    "pydoc.HTMLDoc.docother": [
        "pydoc.HTMLRepr.repr"
    ],
    "pydoc.HTMLRepr.repr": [
        "reprlib.Repr.repr"
    ],
    "pydoc.HTMLDoc.docroutine": [
        "pydoc.getdoc",
        "inspect.isroutine",
        "inspect.iscoroutinefunction",
        "pydoc._is_bound_method",
        "pydoc.HTMLDoc.classlink",
        "pydoc.HTMLRepr.escape",
        "pydoc.HTMLDoc.markup",
        "inspect.getattr_static",
        "<builtin>.str",
        "inspect.isasyncgenfunction",
        "inspect.signature",
        "pydoc.HTMLDoc.grey"
    ],
    "pydoc.HTMLDoc.grey": [],
    "pydoc.HTMLDoc.docdata": [
        "pydoc.getdoc",
        "<list>",
        "pydoc.HTMLDoc.markup"
    ],
    "pydoc.HTMLRepr.repr1": [
        "pydoc.stripid",
        "pydoc.cram",
        "pydoc.HTMLRepr.escape",
        "<builtin>.getattr",
        "<builtin>.type",
        "<builtin>.repr",
        "<builtin>.hasattr"
    ],
    "pydoc.HTMLRepr.repr_string": [
        "pydoc.cram",
        "pydoc.replace",
        "pydoc.HTMLRepr.escape",
        "re.sub",
        "<builtin>.repr"
    ],
    "pydoc.HTMLRepr.repr_instance": [
        "<builtin>.repr",
        "pydoc.stripid",
        "pydoc.cram",
        "pydoc.HTMLRepr.escape"
    ],
    "pydoc.HTMLDoc.modpkglink": [
        "pydoc.HTMLDoc.grey"
    ],
    "pydoc.HTMLDoc.formattree": [
        "<list>.append",
        "pydoc.HTMLDoc.formattree",
        "<builtin>.type",
        "pydoc.HTMLDoc.classlink"
    ],
    "pydoc.HTMLDoc.formatvalue": [
        "pydoc.HTMLRepr.repr",
        "pydoc.HTMLDoc.grey"
    ],
    "pydoc.HTMLDoc.index": [
        "pydoc.HTMLDoc.bigsection",
        "pkgutil.iter_modules",
        "<builtin>.any",
        "pydoc.HTMLDoc.multicolumn",
        "<list>.append",
        "<builtin>.ord",
        "<list>.sort"
    ],
    "pydoc.TextRepr.repr_string": [
        "<builtin>.repr",
        "pydoc.cram",
        "pydoc.replace"
    ],
    "pydoc.TextDoc.formattree": [
        "pydoc.TextDoc.formattree",
        "<builtin>.type",
        "pydoc.classname"
    ],
    "pydoc.TextDoc.formatvalue": [
        "reprlib.Repr.repr"
    ],
    "pydoc.pipepager": [
        "_io.TextIOWrapper",
        "subprocess",
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__"
    ],
    "pydoc.tempfilepager": [
        "<builtin>.open",
        "tempfile.mktemp",
        "tempfile"
    ],
    "pydoc.Helper.__repr__": [
        "inspect.stack",
        "pydoc.Helper.__init__"
    ],
    "pydoc.Helper.__call__": [
        "pydoc.Helper.interact",
        "pydoc.Helper.intro",
        "pydoc.Helper.help"
    ],
    "pydoc.Helper.intro": [],
    "pydoc.Helper.interact": [
        "pydoc.Helper.getline",
        "pydoc.Helper.intro",
        "pydoc.Helper.help",
        "<builtin>.len"
    ],
    "pydoc.Helper.getline": [
        "<builtin>.input"
    ],
    "pydoc.Helper._gettopic": [
        "<builtin>.isinstance",
        "pydoc.Helper._gettopic",
        "pydoc_data.topics",
        "<map>.get",
        "<builtin>.ValueError"
    ],
    "pydoc._url_handler": [
        "ntpath.realpath",
        "posixpath.realpath",
        "posixpath.join",
        "<builtin>.TypeError",
        "pydoc._url_handler.get_html_page",
        "posixpath.dirname",
        "pydoc._url_handler._HTMLDoc",
        "ntpath.join",
        "<builtin>.open",
        "ntpath.dirname"
    ],
    "pydoc._url_handler._HTMLDoc": [],
    "pydoc._url_handler.get_html_page": [
        "pydoc._url_handler._HTMLDoc.page",
        "pydoc._url_handler.html_topics",
        "pydoc._url_handler.html_error",
        "pydoc._url_handler.html_index",
        "pydoc._url_handler.html_topicpage",
        "pydoc._url_handler.html_search",
        "pydoc._url_handler.html_getobj",
        "<builtin>.ValueError",
        "pydoc._url_handler.html_keywords",
        "pydoc._url_handler.html_getfile"
    ],
    "pydoc._url_handler.html_getobj": [
        "pydoc.locate",
        "pydoc.Doc.document",
        "<builtin>.ValueError",
        "pydoc.describe"
    ],
    "pydoc._url_handler.html_topicpage": [
        "pydoc.Helper.__init__",
        "pydoc.HTMLDoc.heading",
        "pydoc.HTMLDoc.bigsection",
        "pydoc.Helper._gettopic",
        "pydoc.HTMLDoc.section",
        "<builtin>.sorted",
        "pydoc.HTMLDoc.multicolumn",
        "pydoc.HTMLDoc.markup",
        "_io.StringIO"
    ],
    "pydoc._url_handler.html_index": [
        "pydoc.HTMLDoc.heading",
        "pydoc.HTMLDoc.multicolumn",
        "<list>.append",
        "os._Environ.__iter__",
        "email.message.Message.__iter__"
    ],
    "pydoc._url_handler.html_getfile": [
        "pydoc.HTMLDoc.heading",
        "pydoc.HTMLRepr.escape",
        "tokenize.open",
        "pydoc.HTMLDoc.bigsection"
    ],
    "pydoc._url_handler.html_search": [
        "warnings.catch_warnings.__init__",
        "pydoc.HTMLDoc.heading",
        "pydoc.HTMLDoc.bigsection",
        "<list>.append"
    ],
    "pydoc._url_handler.html_keywords": [
        "pydoc.HTMLDoc.heading",
        "pydoc.HTMLDoc.bigsection",
        "<map>.keys",
        "<builtin>.sorted",
        "pydoc.HTMLDoc.multicolumn"
    ],
    "pydoc._url_handler.html_topics": [
        "pydoc.HTMLDoc.heading",
        "pydoc.HTMLDoc.bigsection",
        "<map>.keys",
        "<builtin>.sorted",
        "pydoc.HTMLDoc.multicolumn"
    ],
    "pydoc._url_handler.html_error": [
        "pydoc.HTMLDoc.heading",
        "pydoc.HTMLDoc.bigsection",
        "pydoc.HTMLRepr.escape",
        "<builtin>.type",
        "traceback.format_exception_only"
    ],
    "pydoc._url_handler._HTMLDoc.page": [
        "pydoc._url_handler.html_navbar"
    ],
    "pydoc._url_handler.html_navbar": [
        "platform.python_compiler",
        "pydoc.HTMLRepr.escape",
        "platform.python_build",
        "platform.python_version",
        "platform.platform"
    ],
    "pydoc.apropos.callback": [
        "<builtin>.print"
    ],
    "pydoc._start_server.DocServer.server_activate": [
        "pydoc._start_server.ServerThread.ready"
    ],
    "pydoc._start_server.ServerThread.ready": [],
    "pydoc._start_server.ServerThread.stop": [
        "threading.Thread.join"
    ],
    "pydoc.sort_attributes.<lambda1>": [
        "<map>.get"
    ],
    "webbrowser.open_new": [
        "<builtin>.open"
    ],
    "webbrowser.open_new_tab": [
        "<builtin>.open"
    ],
    "webbrowser.BaseBrowser.open_new": [
        "webbrowser.BaseBrowser.open"
    ],
    "webbrowser.BaseBrowser.open": [],
    "webbrowser.BaseBrowser.open_new_tab": [
        "webbrowser.BaseBrowser.open"
    ],
    "webbrowser.UnixBrowser._invoke": [
        "subprocess.Popen.poll",
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__",
        "<builtin>.int"
    ],
    "webbrowser.UnixBrowser.open": [
        "webbrowser.UnixBrowser._invoke"
    ],
    "webbrowser.Konqueror.open": [
        "subprocess.Popen.__init__"
    ],
    "webbrowser.Grail._find_grail_rc": [
        "tempfile",
        "glob",
        "posixpath.join",
        "ntpath.join",
        "socket",
        "glob.glob",
        "tempfile.gettempdir",
        "socket.socket.__init__"
    ],
    "glob.glob": [
        "glob.iglob",
        "<builtin>.list"
    ],
    "glob.iglob": [
        "glob._iglob",
        "<builtin>.next",
        "glob._isrecursive"
    ],
    "glob._iglob": [
        "glob._glob1",
        "glob._isrecursive",
        "posixpath.join",
        "genericpath.isdir",
        "ntpath.lexists",
        "glob._iglob",
        "glob.has_magic",
        "posixpath.split",
        "ntpath.split",
        "ntpath.join",
        "nt._isdir",
        "posixpath.lexists",
        "collections.UserDict.__iter__",
        "glob._glob0",
        "glob._glob2"
    ],
    "glob.has_magic": [
        "<builtin>.isinstance"
    ],
    "posixpath.lexists": [],
    "ntpath.lexists": [],
    "glob._isrecursive": [
        "<builtin>.isinstance"
    ],
    "glob._glob1": [
        "fnmatch.filter",
        "glob._iterdir",
        "<builtin>.list",
        "glob._ishidden"
    ],
    "glob._iterdir": [
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "glob._ishidden": [],
    "glob._glob2": [
        "glob._rlistdir",
        "glob._isrecursive"
    ],
    "glob._rlistdir": [
        "glob._iterdir",
        "<builtin>.list",
        "posixpath.join",
        "glob._ishidden",
        "ntpath.join",
        "collections.UserDict.__iter__",
        "glob._rlistdir"
    ],
    "glob._glob0": [
        "posixpath.join",
        "ntpath.lexists",
        "genericpath.isdir",
        "ntpath.join",
        "posixpath.lexists",
        "nt._isdir"
    ],
    "webbrowser.Grail._remote": [
        "webbrowser.Grail._find_grail_rc"
    ],
    "webbrowser.Grail.open": [
        "webbrowser.Grail._remote"
    ],
    "webbrowser.register_X_browsers": [
        "webbrowser.register",
        "shutil.which"
    ],
    "webbrowser.register_standard_browsers": [
        "shutil.which",
        "posixpath.join",
        "subprocess.check_output",
        "webbrowser.register_X_browsers",
        "webbrowser.GenericBrowser.__init__",
        "webbrowser.register",
        "webbrowser._synthesize",
        "ntpath.join",
        "webbrowser.MacOSXOSAScript.__init__"
    ],
    "webbrowser.MacOSXOSAScript.__init__": [],
    "webbrowser.MacOSX.open": [
        "os.popen",
        "<str>.replace",
        "<builtin>.int",
        "os._wrap_close.close",
        "<builtin>.bool"
    ],
    "webbrowser.MacOSXOSAScript.open": [
        "os.popen",
        "os._wrap_close.close"
    ],
    "shlex.shlex.push_token": [
        "<builtin>.repr",
        "<builtin>.print"
    ],
    "shlex.join": [
        "shlex.quote"
    ],
    "shlex.quote": [
        "<map>",
        "<list>"
    ],
    "http.server.HTTPServer.server_bind": [
        "socket.getfqdn",
        "socketserver.TCPServer.server_bind"
    ],
    "socketserver.TCPServer.server_bind": [],
    "http.server.BaseHTTPRequestHandler.parse_request": [
        "http.server.BaseHTTPRequestHandler.handle_expect_100",
        "<builtin>.int",
        "<builtin>.str",
        "<str>.startswith",
        "<builtin>.len",
        "http.server.BaseHTTPRequestHandler.send_error"
    ],
    "http.server.BaseHTTPRequestHandler.send_error": [
        "html.escape",
        "<builtin>.str",
        "http.server.BaseHTTPRequestHandler.send_header",
        "http.server.BaseHTTPRequestHandler.end_headers",
        "socketserver._SocketWriter.write",
        "http.server.BaseHTTPRequestHandler.send_response",
        "<builtin>.len",
        "http.server.BaseHTTPRequestHandler.log_error"
    ],
    "http.server.BaseHTTPRequestHandler.log_error": [
        "http.server.BaseHTTPRequestHandler.log_message"
    ],
    "http.server.BaseHTTPRequestHandler.log_message": [
        "codecs.StreamRecoder.write",
        "http.server.BaseHTTPRequestHandler.address_string",
        "http.server.BaseHTTPRequestHandler.log_date_time_string",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write"
    ],
    "http.server.BaseHTTPRequestHandler.address_string": [],
    "http.server.BaseHTTPRequestHandler.log_date_time_string": [],
    "http.server.BaseHTTPRequestHandler.send_response": [
        "http.server.BaseHTTPRequestHandler.date_time_string",
        "http.server.BaseHTTPRequestHandler.send_response_only",
        "http.server.BaseHTTPRequestHandler.version_string",
        "http.server.BaseHTTPRequestHandler.send_header",
        "http.server.BaseHTTPRequestHandler.log_request"
    ],
    "http.server.BaseHTTPRequestHandler.log_request": [
        "http.server.BaseHTTPRequestHandler.log_message",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "http.server.BaseHTTPRequestHandler.send_response_only": [
        "<builtin>.hasattr",
        "<list>.append"
    ],
    "http.server.BaseHTTPRequestHandler.version_string": [],
    "http.server.BaseHTTPRequestHandler.send_header": [
        "<builtin>.hasattr",
        "<str>.lower",
        "<list>.append"
    ],
    "http.server.BaseHTTPRequestHandler.date_time_string": [],
    "http.server.BaseHTTPRequestHandler.end_headers": [
        "http.server.BaseHTTPRequestHandler.flush_headers",
        "<list>.append"
    ],
    "http.server.BaseHTTPRequestHandler.flush_headers": [
        "<builtin>.hasattr",
        "socketserver._SocketWriter.write"
    ],
    "http.server.BaseHTTPRequestHandler.handle_expect_100": [
        "http.server.BaseHTTPRequestHandler.send_response_only",
        "http.server.BaseHTTPRequestHandler.end_headers"
    ],
    "http.server.BaseHTTPRequestHandler.handle_one_request": [
        "<builtin>.getattr",
        "<builtin>.len",
        "http.server.BaseHTTPRequestHandler.log_error",
        "http.server.BaseHTTPRequestHandler.send_error",
        "<builtin>.hasattr",
        "http.server.BaseHTTPRequestHandler.parse_request"
    ],
    "http.server.BaseHTTPRequestHandler.handle": [
        "http.server.BaseHTTPRequestHandler.handle_one_request"
    ],
    "http.server.SimpleHTTPRequestHandler.__init__": [
        "<builtin>.super"
    ],
    "http.server.SimpleHTTPRequestHandler.do_GET": [
        "http.server.SimpleHTTPRequestHandler.copyfile",
        "http.server.SimpleHTTPRequestHandler.send_head",
        "http.server.CGIHTTPRequestHandler.send_head"
    ],
    "http.server.SimpleHTTPRequestHandler.send_head": [
        "<str>.endswith",
        "http.server.SimpleHTTPRequestHandler.guess_type",
        "posixpath.join",
        "genericpath.isdir",
        "http.server.BaseHTTPRequestHandler.date_time_string",
        "http.server.BaseHTTPRequestHandler.send_header",
        "http.server.BaseHTTPRequestHandler.end_headers",
        "http.server.BaseHTTPRequestHandler.send_response",
        "nt._isdir",
        "http.server.SimpleHTTPRequestHandler.translate_path",
        "ntpath.join",
        "<builtin>.open",
        "<builtin>.str",
        "http.server.BaseHTTPRequestHandler.send_error",
        "genericpath.exists"
    ],
    "http.server.SimpleHTTPRequestHandler.translate_path": [
        "<str>.endswith",
        "posixpath.normpath",
        "posixpath.join",
        "ntpath.dirname",
        "posixpath.dirname",
        "ntpath.join",
        "<str>.rstrip",
        "<builtin>.filter"
    ],
    "http.server.SimpleHTTPRequestHandler.guess_type": [
        "posixpath.splitext"
    ],
    "http.server.SimpleHTTPRequestHandler.copyfile": [
        "shutil.copyfileobj"
    ],
    "http.server.SimpleHTTPRequestHandler.do_HEAD": [
        "http.server.SimpleHTTPRequestHandler.send_head",
        "http.server.CGIHTTPRequestHandler.send_head"
    ],
    "http.server.SimpleHTTPRequestHandler.list_directory": [
        "posixpath.islink",
        "html.escape",
        "_io.BytesIO",
        "<builtin>.len",
        "posixpath.join",
        "genericpath.isdir",
        "<builtin>.str",
        "ntpath.islink",
        "http.server.BaseHTTPRequestHandler.send_header",
        "http.server.BaseHTTPRequestHandler.end_headers",
        "ntpath.join",
        "nt._isdir",
        "http.server.BaseHTTPRequestHandler.send_response",
        "<list>.append",
        "http.server.BaseHTTPRequestHandler.send_error"
    ],
    "http.server._url_collapse_path": [
        "<list>.pop",
        "<list>.append"
    ],
    "http.server.nobody_uid": [
        "<builtin>.max"
    ],
    "http.server.CGIHTTPRequestHandler.do_POST": [
        "http.server.CGIHTTPRequestHandler.is_cgi",
        "http.server.BaseHTTPRequestHandler.send_error",
        "http.server.CGIHTTPRequestHandler.run_cgi"
    ],
    "http.server.CGIHTTPRequestHandler.is_cgi": [
        "<str>.find",
        "http.server._url_collapse_path"
    ],
    "http.server.CGIHTTPRequestHandler.run_cgi": [
        "binascii",
        "<builtin>.int",
        "subprocess.list2cmdline",
        "http.server.BaseHTTPRequestHandler.send_response",
        "subprocess",
        "http.server.nobody_uid",
        "<list>.append",
        "<builtin>.str",
        "http.server.BaseHTTPRequestHandler.log_error",
        "nt._exit",
        "subprocess.Popen.communicate",
        "http.server.BaseHTTPRequestHandler.log_message",
        "<str>.partition",
        "socketserver._SocketWriter.write",
        "copy.deepcopy",
        "http.server.BaseHTTPRequestHandler.send_error",
        "genericpath.exists",
        "os._Environ.setdefault",
        "http.server.BaseHTTPRequestHandler.version_string",
        "base64",
        "nt._isdir",
        "<map>.setdefault",
        "<builtin>.filter",
        "http.server.CGIHTTPRequestHandler.is_executable",
        "base64.decodebytes",
        "<str>.find",
        "posix._exit",
        "genericpath.isdir",
        "http.server.BaseHTTPRequestHandler.flush_headers",
        "http.server.CGIHTTPRequestHandler.is_python",
        "subprocess.Popen.__init__",
        "http.server.SimpleHTTPRequestHandler.translate_path",
        "genericpath.isfile",
        "<builtin>.len",
        "socketserver._SocketWriter.fileno",
        "<str>.lower"
    ],
    "http.server.CGIHTTPRequestHandler.is_python": [
        "posixpath.splitext",
        "ntpath.splitext"
    ],
    "http.server.CGIHTTPRequestHandler.is_executable": [
        "http.server.executable"
    ],
    "http.server.executable": [],
    "os._Environ.setdefault": [],
    "http.server.CGIHTTPRequestHandler.send_head": [
        "http.server.CGIHTTPRequestHandler.is_cgi",
        "http.server.CGIHTTPRequestHandler.run_cgi",
        "http.server.SimpleHTTPRequestHandler.send_head"
    ],
    "http.server.DualStackServer.server_bind": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "http.client._encode": [
        "<builtin>.UnicodeEncodeError",
        "<str>.title"
    ],
    "<builtin>.UnicodeEncodeError": [],
    "http.client.HTTPMessage.getallmatchingheaders": [
        "<list>.append",
        "<builtin>.len"
    ],
    "http.client.parse_headers": [
        "<list>.append",
        "http.client.LineTooLong.__init__",
        "<builtin>.len"
    ],
    "http.client.LineTooLong.__init__": [],
    "http.client.HTTPResponse._read_status": [
        "http.client.RemoteDisconnected.__init__",
        "http.client.BadStatusLine.__init__",
        "<builtin>.int",
        "<builtin>.str",
        "<builtin>.print",
        "<str>.startswith",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len",
        "http.client.LineTooLong.__init__",
        "<builtin>.repr"
    ],
    "http.client.RemoteDisconnected.__init__": [
        "http.client.BadStatusLine.__init__"
    ],
    "http.client.BadStatusLine.__init__": [
        "<builtin>.repr"
    ],
    "http.client.HTTPResponse._close_conn": [
        "socket.SocketIO.close"
    ],
    "http.client.HTTPResponse.begin": [
        "http.client.HTTPResponse._check_close",
        "http.client.parse_headers",
        "http.client.HTTPResponse._read_status",
        "http.client.UnknownProtocol.__init__",
        "<builtin>.int",
        "<str>.startswith",
        "<str>.strip",
        "<builtin>.len",
        "http.client.LineTooLong.__init__",
        "<builtin>.print"
    ],
    "http.client.UnknownProtocol.__init__": [],
    "http.client.HTTPResponse._check_close": [],
    "http.client.HTTPResponse.close": [
        "<builtin>.super"
    ],
    "http.client.HTTPResponse.flush": [
        "<builtin>.super"
    ],
    "http.client.HTTPResponse.read": [
        "http.client.HTTPResponse._safe_read",
        "http.client.HTTPResponse._readall_chunked",
        "<builtin>.memoryview",
        "http.client.HTTPResponse.readinto",
        "<builtin>.bytearray",
        "http.client.HTTPResponse._close_conn"
    ],
    "http.client.HTTPResponse._readall_chunked": [
        "http.client.HTTPResponse._get_chunk_left",
        "http.client.IncompleteRead.__init__",
        "<list>.append"
    ],
    "http.client.HTTPResponse._get_chunk_left": [
        "http.client.HTTPResponse._safe_read",
        "http.client.HTTPResponse._close_conn",
        "http.client.HTTPResponse._read_next_chunk_size",
        "http.client.HTTPResponse._read_and_discard_trailer",
        "http.client.IncompleteRead.__init__"
    ],
    "http.client.HTTPResponse._safe_read": [
        "http.client.IncompleteRead.__init__",
        "<builtin>.len"
    ],
    "http.client.IncompleteRead.__init__": [],
    "http.client.HTTPResponse._read_next_chunk_size": [
        "http.client.LineTooLong.__init__",
        "<builtin>.int",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._read_and_discard_trailer": [
        "http.client.LineTooLong.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.readinto": [
        "<builtin>.memoryview",
        "socket.SocketIO.readinto",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len",
        "http.client.HTTPResponse._readinto_chunked"
    ],
    "http.client.HTTPResponse._readinto_chunked": [
        "<builtin>.memoryview",
        "<builtin>.bytes",
        "<builtin>.len",
        "http.client.HTTPResponse._safe_readinto",
        "http.client.HTTPResponse._get_chunk_left",
        "http.client.IncompleteRead.__init__"
    ],
    "http.client.HTTPResponse._safe_readinto": [
        "<builtin>.bytes",
        "socket.SocketIO.readinto",
        "http.client.IncompleteRead.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.read1": [
        "http.client.HTTPResponse._read1_chunked",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._read1_chunked": [
        "http.client.HTTPResponse._get_chunk_left",
        "http.client.IncompleteRead.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.peek": [
        "http.client.HTTPResponse._peek_chunked"
    ],
    "http.client.HTTPResponse._peek_chunked": [
        "http.client.HTTPResponse._get_chunk_left"
    ],
    "http.client.HTTPResponse.readline": [
        "<builtin>.super",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.getheader": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "http.client.HTTPResponse.getheaders": [
        "<builtin>.list"
    ],
    "http.client.HTTPConnection._is_textIO": [
        "<builtin>.isinstance"
    ],
    "http.client.HTTPConnection._get_content_length": [
        "<builtin>.hasattr",
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "http.client.HTTPConnection.__init__": [
        "http.client.HTTPConnection._validate_host",
        "http.client.HTTPConnection._get_hostport"
    ],
    "http.client.HTTPConnection._get_hostport": [
        "<builtin>.int"
    ],
    "http.client.HTTPConnection._validate_host": [],
    "http.client.HTTPConnection.set_tunnel": [
        "http.client.HTTPConnection._get_hostport",
        "<builtin>.RuntimeError",
        "<map>.clear"
    ],
    "http.client.HTTPConnection._tunnel": [
        "http.client.HTTPResponse._read_status",
        "<map>.items",
        "http.client.HTTPResponse.__init__",
        "http.client.HTTPConnection.send",
        "<builtin>.len",
        "<builtin>.OSError",
        "http.client.LineTooLong.__init__",
        "<builtin>.print",
        "http.client.HTTPConnection.close"
    ],
    "http.client.HTTPConnection.send": [
        "<builtin>.isinstance",
        "<builtin>.repr",
        "<builtin>.TypeError",
        "http.client.HTTPConnection.connect",
        "<builtin>.type",
        "<builtin>.print",
        "http.client.HTTPConnection._is_textIO",
        "<builtin>.hasattr"
    ],
    "http.client.HTTPConnection.connect": [
        "http.client.HTTPConnection._tunnel",
        "socket.create_connection"
    ],
    "http.client.HTTPResponse.__init__": [
        "socket.socket.makefile"
    ],
    "http.client.HTTPConnection.close": [
        "socket.socket.close"
    ],
    "http.client.HTTPConnection._output": [
        "<list>.append"
    ],
    "http.client.HTTPConnection._read_readable": [
        "<builtin>.print",
        "http.client.HTTPConnection._is_textIO"
    ],
    "http.client.HTTPConnection._send_output": [
        "<builtin>.memoryview",
        "<builtin>.iter",
        "<builtin>.TypeError",
        "http.client.HTTPConnection._read_readable",
        "<list>.extend",
        "http.client.HTTPConnection.send",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.print",
        "<builtin>.hasattr"
    ],
    "http.client.HTTPConnection.putrequest": [
        "http.client.HTTPConnection._output",
        "http.client.HTTPResponse.isclosed",
        "urllib.parse.urlsplit",
        "http.client.HTTPConnection.putheader",
        "http.client.HTTPConnection._encode_request",
        "http.client.HTTPConnection._validate_path"
    ],
    "http.client.HTTPConnection._validate_path": [],
    "http.client.HTTPConnection._encode_request": [],
    "http.client.HTTPConnection.putheader": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "http.client.HTTPConnection._output",
        "<map>",
        "<builtin>.enumerate",
        "<builtin>.str",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "<list>"
    ],
    "http.client.HTTPConnection.endheaders": [
        "http.client.HTTPConnection._send_output"
    ],
    "http.client.HTTPConnection.request": [
        "http.client.HTTPConnection._send_request"
    ],
    "http.client.HTTPConnection._send_request": [
        "http.client.HTTPConnection.putrequest",
        "<map>.items",
        "http.client.HTTPConnection._get_content_length",
        "<builtin>.isinstance",
        "<builtin>.print",
        "http.client._encode",
        "<builtin>.str",
        "http.client.HTTPConnection.putheader",
        "<builtin>.frozenset",
        "http.client.HTTPConnection.endheaders"
    ],
    "http.client.HTTPConnection.getresponse": [
        "http.client.HTTPResponse.begin",
        "http.client.HTTPResponse.close",
        "http.client.HTTPResponse.__init__",
        "http.client.HTTPResponse.isclosed",
        "http.client.HTTPConnection.close"
    ],
    "http.client.IncompleteRead.__repr__": [
        "<builtin>.len"
    ],
    "mimetypes.MimeTypes.guess_type": [
        "os._fspath",
        "<str>.find",
        "posixpath.splitext"
    ],
    "mimetypes.MimeTypes.guess_extension": [
        "mimetypes.MimeTypes.guess_all_extensions"
    ],
    "mimetypes.MimeTypes.guess_all_extensions": [],
    "mimetypes.guess_all_extensions": [
        "mimetypes.init"
    ],
    "mimetypes.add_type": [
        "mimetypes.init"
    ],
    "mimetypes.read_mime_types": [
        "<builtin>.open"
    ],
    "socketserver.BaseServer.__init__": [
        "threading.Event.__init__"
    ],
    "socketserver.BaseServer.serve_forever": [
        "socketserver.BaseServer._handle_request_noblock",
        "selectors.SelectSelector.__init__",
        "socketserver.BaseServer.service_actions",
        "threading.Event.clear"
    ],
    "threading.Event.clear": [],
    "socketserver.BaseServer._handle_request_noblock": [
        "socketserver.BaseServer.process_request",
        "socketserver.BaseServer.verify_request",
        "socketserver.BaseServer.shutdown_request",
        "socketserver.BaseServer.handle_error"
    ],
    "socketserver.BaseServer.verify_request": [],
    "socketserver.BaseServer.shutdown_request": [
        "socketserver.BaseServer.close_request"
    ],
    "socketserver.BaseServer.close_request": [],
    "socketserver.BaseServer.process_request": [
        "socketserver.BaseServer.shutdown_request",
        "socketserver.BaseServer.finish_request"
    ],
    "socketserver.BaseServer.finish_request": [],
    "socketserver.BaseServer.handle_error": [
        "traceback",
        "<builtin>.print",
        "traceback.print_exc"
    ],
    "socketserver.BaseServer.service_actions": [],
    "socketserver.BaseServer.shutdown": [
        "threading.Event.wait"
    ],
    "socketserver.BaseServer.handle_request": [
        "time.monotonic",
        "socketserver.BaseServer._handle_request_noblock",
        "socketserver.BaseServer.handle_timeout",
        "selectors.SelectSelector.__init__",
        "<builtin>.min"
    ],
    "socketserver.BaseServer.handle_timeout": [],
    "socketserver.BaseServer.__exit__": [
        "socketserver.BaseServer.server_close"
    ],
    "socketserver.BaseServer.server_close": [],
    "socketserver.TCPServer.__init__": [
        "socketserver.BaseServer.__init__",
        "socketserver.TCPServer.server_close",
        "socketserver.UDPServer.server_activate",
        "socketserver.TCPServer.server_activate",
        "socket.socket.__init__",
        "socketserver.TCPServer.server_bind"
    ],
    "socketserver.TCPServer.server_activate": [],
    "socketserver.TCPServer.server_close": [
        "socket.socket.close"
    ],
    "socketserver.TCPServer.get_request": [
        "socket.socket.accept"
    ],
    "socketserver.TCPServer.shutdown_request": [
        "socketserver.TCPServer.close_request",
        "socketserver.UDPServer.close_request"
    ],
    "socketserver.TCPServer.close_request": [],
    "socketserver.UDPServer.shutdown_request": [
        "socketserver.UDPServer.close_request"
    ],
    "socketserver.UDPServer.close_request": [],
    "socketserver.ForkingMixIn.collect_children": [
        "<builtin>.len"
    ],
    "socketserver.ForkingMixIn.handle_timeout": [
        "socketserver.ForkingMixIn.collect_children"
    ],
    "socketserver.ForkingMixIn.service_actions": [
        "socketserver.ForkingMixIn.collect_children"
    ],
    "socketserver.ForkingMixIn.process_request": [
        "<builtin>.set"
    ],
    "socketserver.ForkingMixIn.server_close": [
        "<builtin>.super",
        "socketserver.ForkingMixIn.collect_children"
    ],
    "socketserver.ThreadingMixIn.process_request": [
        "threading.Thread.start",
        "threading.Thread.__init__",
        "<list>.append"
    ],
    "socketserver.ThreadingMixIn.server_close": [
        "<builtin>.super"
    ],
    "socketserver.BaseRequestHandler.__init__": [
        "socketserver.DatagramRequestHandler.setup",
        "http.server.BaseHTTPRequestHandler.handle",
        "socketserver.StreamRequestHandler.setup",
        "socketserver.BaseRequestHandler.setup",
        "socketserver.BaseRequestHandler.handle"
    ],
    "socketserver.BaseRequestHandler.setup": [],
    "socketserver.BaseRequestHandler.handle": [],
    "socketserver.StreamRequestHandler.setup": [
        "socketserver._SocketWriter.__init__"
    ],
    "socketserver._SocketWriter.__init__": [],
    "socketserver._SocketWriter.write": [
        "<builtin>.memoryview"
    ],
    "socketserver.DatagramRequestHandler.setup": [
        "_io.BytesIO",
        "io"
    ],
    "rich.pretty._ipy_display_hook": [
        "rich.pretty.Pretty.__init__",
        "rich.console",
        "inspect.ismethod",
        "rich.pretty._safe_isinstance",
        "rich.console.Console.print",
        "rich._inspect.is_object_one_of_types",
        "rich._inspect",
        "<builtin>.getattr",
        "rich.console.Console.line",
        "get_console"
    ],
    "rich._inspect.is_object_one_of_types": [
        "rich._inspect.get_object_types_mro_as_strings"
    ],
    "rich._inspect.get_object_types_mro_as_strings": [
        "<builtin>.getattr",
        "rich._inspect.get_object_types_mro"
    ],
    "rich._inspect.get_object_types_mro": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "rich.pretty.Pretty.__rich_measure__": [
        "rich.pretty.pretty_repr",
        "<builtin>.max",
        "rich.cells.cell_len"
    ],
    "rich.pretty.Node.iter_tokens": [
        "<builtin>.len"
    ],
    "rich.pretty.Node.check_length": [
        "rich.cells.cell_len",
        "rich.pretty.Node.iter_tokens"
    ],
    "rich.pretty.Node.__str__": [
        "rich.pretty.Node.iter_tokens"
    ],
    "rich.pretty._Line.expandable": [
        "<builtin>.bool"
    ],
    "rich.pretty._Line.check_length": [
        "rich.cells.cell_len",
        "<builtin>.len"
    ],
    "rich.pretty._Line.expand": [
        "rich._loop.loop_last",
        "<builtin>.len"
    ],
    "rich.pretty.pprint": [
        "rich.pretty.Pretty.__init__",
        "get_console"
    ],
    "rich.pretty.install.display_hook": [
        "rich.pretty._safe_isinstance",
        "rich.pretty.Pretty.__init__"
    ],
    "rich.pretty.install.RichFormatter.__call__": [
        "<builtin>.repr",
        "rich.get_console",
        "rich.pretty._ipy_display_hook"
    ],
    "attr.converters.optional": [
        "attr._compat._AnnotationExtractor.__init__",
        "attr._compat._AnnotationExtractor.get_return_type",
        "attr._compat._AnnotationExtractor.get_first_param_type"
    ],
    "attr._compat._AnnotationExtractor.__init__": [
        "inspect.signature"
    ],
    "attr._compat._AnnotationExtractor.get_first_param_type": [
        "<builtin>.list"
    ],
    "attr._compat._AnnotationExtractor.get_return_type": [],
    "attr.converters.default_if_none": [
        "<builtin>.TypeError",
        "attr._make.Factory.__init__",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "attr.converters.to_bool": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "attr._compat.just_warn": [
        "warnings.warn"
    ],
    "attr._make._Nothing.__new__": [
        "<builtin>.super"
    ],
    "attr._make._is_class_var": [
        "<builtin>.str"
    ],
    "attr._make._has_own_attribute": [
        "<builtin>.getattr"
    ],
    "attr._make._get_annotations": [
        "attr._make._has_own_attribute"
    ],
    "attr._make._collect_base_attrs": [
        "<builtin>.reversed",
        "<builtin>.set",
        "<builtin>.getattr",
        "<list>.append",
        "<list>.insert"
    ],
    "attr._make._collect_base_attrs_broken": [
        "<builtin>.getattr",
        "<list>.append"
    ],
    "attr._make._transform_attrs": [
        "attr._make._make_attr_tuple_class",
        "attr._make._is_class_var",
        "<map>.items",
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.len",
        "attr._make._get_annotations",
        "<builtin>.sorted",
        "attr._make.attrib",
        "attr._make.Attribute.from_counting_attr",
        "attr._make._collect_base_attrs_broken",
        "attr._make._collect_base_attrs",
        "<map>.get",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "attr._make.Attribute.from_counting_attr": [
        "<builtin>.getattr",
        "attr._make.Attribute.__init__",
        "<builtin>.ValueError"
    ],
    "attr._make._ClassBuilder.__init__": [
        "<builtin>.dict",
        "<builtin>.tuple",
        "<builtin>.getattr",
        "<builtin>.bool",
        "attr._make._ClassBuilder._make_getstate_setstate",
        "attr._make._transform_attrs"
    ],
    "attr._make._ClassBuilder._make_getstate_setstate": [
        "<builtin>.tuple"
    ],
    "attr._make._ClassBuilder.build_class": [
        "attr._make._ClassBuilder._patch_original_class",
        "attr._make._ClassBuilder._create_slots_class"
    ],
    "attr._make._ClassBuilder._patch_original_class": [
        "<builtin>.delattr",
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "attr._make._ClassBuilder._create_slots_class": [
        "<builtin>.dict",
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "attr._make._ClassBuilder.add_repr": [
        "attr._make._make_repr",
        "attr._make._ClassBuilder._add_method_dunders"
    ],
    "attr._make._ClassBuilder._add_method_dunders": [],
    "attr._make._ClassBuilder.add_str": [
        "<builtin>.ValueError",
        "attr._make._ClassBuilder._add_method_dunders"
    ],
    "attr._make._ClassBuilder.add_hash": [
        "attr._make._make_hash",
        "attr._make._ClassBuilder._add_method_dunders"
    ],
    "attr._make._ClassBuilder.add_init": [
        "attr._make._ClassBuilder._add_method_dunders",
        "attr._make._make_init"
    ],
    "attr._make._make_init": [
        "attr._make._attrs_to_init_script",
        "<list>.append",
        "attr._make._make_method",
        "attr._make._generate_unique_filename",
        "<builtin>.ValueError"
    ],
    "attr._make._attrs_to_init_script": [
        "attr._compat._AnnotationExtractor.__init__",
        "attr._compat._AnnotationExtractor.get_first_param_type",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "attr._make._ClassBuilder.add_match_args": [
        "<builtin>.tuple"
    ],
    "attr._make._ClassBuilder.add_attrs_init": [
        "attr._make._ClassBuilder._add_method_dunders",
        "attr._make._make_init"
    ],
    "attr._make._ClassBuilder.add_eq": [
        "attr._make._make_ne",
        "attr._make._make_eq",
        "attr._make._ClassBuilder._add_method_dunders"
    ],
    "attr._make._ClassBuilder.add_order": [
        "attr._make._make_order",
        "attr._make._ClassBuilder._add_method_dunders"
    ],
    "attr._make._make_order": [],
    "attr._make._ClassBuilder.add_setattr": [
        "<builtin>.ValueError",
        "attr._make._ClassBuilder._add_method_dunders"
    ],
    "attr._make._determine_attrs_eq_order": [
        "<builtin>.any",
        "<builtin>.ValueError"
    ],
    "attr._make._determine_whether_to_implement": [
        "attr._make._has_own_attribute"
    ],
    "attr._make.attrs": [
        "attr._make.attrs.wrap",
        "<builtin>.isinstance",
        "attr._make._determine_attrs_eq_order",
        "attr.setters.pipe"
    ],
    "attr._make.attrs.wrap": [
        "attr._make._ClassBuilder.add_repr",
        "attr._make._ClassBuilder.make_unhashable",
        "attr._make._ClassBuilder.add_match_args",
        "attr._make._ClassBuilder.add_eq",
        "attr._make._ClassBuilder.build_class",
        "<builtin>.TypeError",
        "attr._make._ClassBuilder.__init__",
        "attr._make._has_own_attribute",
        "<builtin>.issubclass",
        "attr._make._determine_whether_to_implement",
        "attr._make._ClassBuilder.add_attrs_init",
        "attr._make._ClassBuilder.add_setattr",
        "attr._make._ClassBuilder.add_order",
        "attr._make._ClassBuilder.add_hash",
        "attr._make._ClassBuilder.add_str",
        "attr._make._has_frozen_base_class",
        "<builtin>.ValueError",
        "attr._make._ClassBuilder.add_init"
    ],
    "attr._make._has_frozen_base_class": [],
    "attr._make._ClassBuilder.make_unhashable": [],
    "attr._make.fields": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "attr._make.fields_dict": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "collections.OrderedDict.__init__"
    ],
    "attr._make.validate": [
        "attr._make.fields",
        "<builtin>.getattr"
    ],
    "attr._make._is_slot_attr": [
        "attr._make._is_slot_cls"
    ],
    "attr._make._is_slot_cls": [],
    "attr._make._assign": [
        "attr._make._setattr"
    ],
    "attr._make._setattr": [],
    "attr._make._assign_with_converter": [
        "attr._make._setattr_with_converter"
    ],
    "attr._make._setattr_with_converter": [],
    "attr._make.Attribute.evolve": [
        "copy.copy",
        "attr._make.Attribute._setattrs"
    ],
    "attr._make.Attribute._setattrs": [
        "<builtin>.dict"
    ],
    "attr._make.Attribute.__getstate__": [
        "<builtin>.dict",
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "attr._make.Attribute.__setstate__": [
        "attr._make.Attribute._setattrs",
        "<builtin>.zip"
    ],
    "attr._make._make_repr.__repr__": [
        "<list>.extend",
        "<builtin>.set",
        "<builtin>.id",
        "<list>.append"
    ],
    "attr._make._CountingAttr.validator": [
        "attr._make.and_"
    ],
    "attr._make._CountingAttr.default": [
        "attr._make.Factory.__init__"
    ],
    "attr._make.Factory.__getstate__": [
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "attr._make.Factory.__setstate__": [
        "<builtin>.zip",
        "<builtin>.setattr"
    ],
    "attr._make.make_class": [
        "attr._make.attrs.wrap",
        "<builtin>.isinstance",
        "<map>",
        "<builtin>.TypeError",
        "attr._make.attrib",
        "types.new_class",
        "attr._make._determine_attrs_eq_order",
        "attr._make.attrs"
    ],
    "attr._make.make_class.<lambda1>": [],
    "attr._config.set_run_validators": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "attr.exceptions.NotCallableError.__init__": [
        "<builtin>.super"
    ],
    "attr.exceptions.NotCallableError.__str__": [
        "<builtin>.str"
    ],
    "attr.filters._split_what": [
        "<builtin>.frozenset",
        "<builtin>.isinstance"
    ],
    "attr.filters.include": [
        "attr.filters._split_what"
    ],
    "attr.filters.exclude": [
        "attr.filters._split_what"
    ],
    "attr.validators.set_disabled": [
        "attr._config.set_run_validators"
    ],
    "attr.validators.get_disabled": [
        "attr._config.get_run_validators"
    ],
    "attr._config.get_run_validators": [],
    "attr.validators.disabled": [
        "attr._config.set_run_validators"
    ],
    "attr.validators._InstanceOfValidator.__call__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "attr.validators._MatchesReValidator.__call__": [
        "attr._make._CountingAttr.__init__",
        "<builtin>.ValueError"
    ],
    "attr.validators.matches_re": [
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.TypeError",
        "re.compile",
        "<builtin>.sorted",
        "<builtin>.ValueError"
    ],
    "attr.validators._ProvidesValidator.__call__": [
        "<builtin>.TypeError"
    ],
    "attr.validators._OptionalValidator.__call__": [
        "attr._make._CountingAttr.__init__"
    ],
    "attr.validators._OptionalValidator.__repr__": [
        "<builtin>.repr"
    ],
    "attr.validators._InValidator.__call__": [
        "<builtin>.ValueError"
    ],
    "attr.validators._IsCallableValidator.__call__": [
        "<builtin>.callable",
        "attr.exceptions.NotCallableError.__init__"
    ],
    "attr.validators._DeepIterable.__call__": [
        "attr._make._CountingAttr.__init__"
    ],
    "attr.validators.deep_iterable": [
        "<builtin>.isinstance",
        "attr._make.and_"
    ],
    "attr.validators._DeepMapping.__call__": [
        "attr._make._CountingAttr.__init__"
    ],
    "attr.validators._NumberValidator.__call__": [
        "attr._make._CountingAttr.__init__",
        "<builtin>.ValueError"
    ],
    "attr.validators._MaxLengthValidator.__call__": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "attr.validators._MinLengthValidator.__call__": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "attr._cmp.cmp_using": [
        "attr._cmp._make_operator",
        "types.new_class",
        "attr._cmp._make_init",
        "attr._make._make_ne",
        "functools.total_ordering",
        "<builtin>.ValueError"
    ],
    "attr._cmp._make_init": [],
    "attr._cmp._make_operator": [],
    "attr._cmp.cmp_using.<lambda1>": [],
    "attr._funcs.asdict": [
        "attr._make.fields",
        "<builtin>.isinstance",
        "attr._funcs.has",
        "attr._funcs.asdict",
        "<builtin>.getattr",
        "attr._funcs._asdict_anything",
        "<builtin>.filter"
    ],
    "attr._funcs.has": [
        "<builtin>.getattr"
    ],
    "attr._funcs._asdict_anything": [
        "attr._funcs.asdict",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "attr._funcs._asdict_anything"
    ],
    "attr._funcs.astuple": [
        "attr._make.fields",
        "attr._funcs.has",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<list>.append",
        "<builtin>.filter"
    ],
    "attr._funcs.assoc": [
        "attr._make.fields",
        "warnings",
        "copy.copy",
        "<builtin>.getattr",
        "warnings.warn"
    ],
    "attr._funcs.evolve": [
        "attr._make.fields",
        "<builtin>.getattr"
    ],
    "attr._funcs.resolve_types": [
        "typing",
        "typing.get_type_hints",
        "attr._make.fields",
        "<builtin>.getattr"
    ],
    "attr._version_info.VersionInfo._ensure_tuple": [
        "attr._funcs.astuple",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "attr._version_info.VersionInfo.__eq__": [
        "attr._version_info.VersionInfo._ensure_tuple"
    ],
    "attr._version_info.VersionInfo.__lt__": [
        "attr._version_info.VersionInfo._ensure_tuple"
    ],
    "attr._next_gen.define": [
        "attr._next_gen.define.wrap"
    ],
    "attr._next_gen.define.wrap": [
        "attr._next_gen.define.do_it",
        "<builtin>.ValueError"
    ],
    "attr._next_gen.define.do_it": [
        "attr._make.attrs"
    ],
    "attr._next_gen.field": [
        "attr._make.attrib"
    ],
    "attr._next_gen.asdict": [
        "attr._funcs.asdict"
    ],
    "attr._next_gen.astuple": [
        "attr._funcs.astuple"
    ],
    "rich.abc.RichRenderable.__subclasshook__": [
        "<builtin>.hasattr"
    ],
    "rich.screen.Screen.__rich_console__": [
        "rich.segment.Segment.line",
        "rich._loop.loop_last",
        "rich.segment.Segment.set_shape"
    ],
    "rich.styled.Styled.__rich_console__": [
        "rich.segment.Segment.apply_style",
        "rich.console.Console.get_style",
        "rich.console.Console.render"
    ],
    "rich.styled.Styled.__rich_measure__": [
        "rich.measure.Measurement.get"
    ],
    "rich._win32_console.GetConsoleMode": [
        "<builtin>.bool"
    ],
    "rich._win32_console.LegacyWindowsTerm.cursor_position": [
        "typing.cast",
        "rich._win32_console.GetConsoleScreenBufferInfo"
    ],
    "rich._win32_console.LegacyWindowsTerm.screen_size": [
        "typing.cast",
        "rich._win32_console.GetConsoleScreenBufferInfo"
    ],
    "rich._win32_console.LegacyWindowsTerm.move_cursor_to": [
        "rich._win32_console.SetConsoleCursorPosition"
    ],
    "rich._win32_console.LegacyWindowsTerm.move_cursor_forward": [
        "rich._win32_console.SetConsoleCursorPosition"
    ],
    "rich.live._RefreshThread.__init__": [
        "<builtin>.super",
        "threading.Event.__init__"
    ],
    "rich.live._RefreshThread.stop": [
        "threading.Event.set"
    ],
    "rich.live._RefreshThread.run": [
        "threading.Event.wait"
    ],
    "rich.live.Live.__enter__": [
        "rich.live.Live.start"
    ],
    "rich.live.Live.start": [],
    "rich.live.Live.__exit__": [
        "rich.live.Live.stop"
    ],
    "rich.live.Live.stop": [],
    "rich.live.Live._enable_redirect_io": [
        "typing.cast",
        "rich.file_proxy.FileProxy.__init__",
        "<builtin>.isinstance"
    ],
    "rich.file_proxy.FileProxy.__init__": [
        "rich.ansi.AnsiDecoder.__init__"
    ],
    "rich.live.Live._disable_redirect_io": [
        "typing.cast"
    ],
    "rich.live.Live.renderable": [
        "rich.live.Live.get_renderable",
        "rich.screen.Screen.__init__"
    ],
    "rich.file_proxy.FileProxy.__getattr__": [
        "<builtin>.getattr"
    ],
    "rich.file_proxy.FileProxy.write": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<str>.partition",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "pty.master_open": [
        "pty._open_terminal"
    ],
    "rich.live_render.LiveRender.position_cursor": [
        "rich.control.Control.__init__"
    ],
    "rich.live_render.LiveRender.restore_cursor": [
        "rich.control.Control.__init__"
    ],
    "rich.live_render.LiveRender.__rich_console__": [
        "rich._loop.loop_last",
        "<builtin>.list",
        "rich.segment.Segment.line",
        "rich.segment.Segment.get_shape",
        "rich.text.Text.__init__"
    ],
    "rich.status.Status.update": [
        "rich.spinner.Spinner.__init__",
        "rich.spinner.Spinner.update",
        "rich.live.Live.update"
    ],
    "rich.spinner.Spinner.update": [
        "rich.text.Text.from_markup",
        "<builtin>.isinstance"
    ],
    "rich.live.Live.update": [],
    "rich.status.Status.start": [
        "rich.live.Live.start"
    ],
    "rich.status.Status.stop": [
        "rich.live.Live.stop"
    ],
    "rich.status.Status.__enter__": [
        "rich.status.Status.start"
    ],
    "rich.status.Status.__exit__": [
        "rich.status.Status.stop"
    ],
    "rich.spinner.Spinner.__rich_console__": [
        "rich.spinner.Spinner.render"
    ],
    "rich.spinner.Spinner.render": [
        "<builtin>.isinstance",
        "<builtin>.int",
        "rich.table.Table.add_row",
        "rich.text.Text.assemble",
        "rich.text.Text.__init__",
        "<builtin>.len",
        "rich.table.Table.grid"
    ],
    "rich.spinner.Spinner.__rich_measure__": [
        "rich.measure.Measurement.get",
        "rich.spinner.Spinner.render"
    ],
    "urllib3.add_stderr_logger": [
        "logging.Logger.debug",
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__",
        "logging.StreamHandler.__init__",
        "logging.Logger.addHandler",
        "logging.Logger.setLevel",
        "logging.getLogger"
    ],
    "urllib3.disable_warnings": [
        "warnings.simplefilter"
    ],
    "urllib3.exceptions.RequestError.__init__": [
        "urllib3.exceptions.PoolError.__init__"
    ],
    "urllib3.exceptions.PoolError.__init__": [],
    "urllib3.exceptions.ProxyError.__init__": [
        "<builtin>.super"
    ],
    "urllib3.exceptions.MaxRetryError.__init__": [
        "urllib3.exceptions.RequestError.__init__"
    ],
    "urllib3.exceptions.HostChangedError.__init__": [
        "urllib3.exceptions.RequestError.__init__"
    ],
    "urllib3.exceptions.URLSchemeUnknown.__init__": [
        "<builtin>.super"
    ],
    "urllib3.exceptions.IncompleteRead.__init__": [
        "<builtin>.super"
    ],
    "urllib3.exceptions.InvalidChunkLength.__init__": [
        "urllib3.response.HTTPResponse.tell",
        "<builtin>.super"
    ],
    "urllib3.exceptions.ProxySchemeUnknown.__init__": [
        "<builtin>.super"
    ],
    "urllib3.exceptions.HeaderParsingError.__init__": [
        "<builtin>.super"
    ],
    "urllib3.connectionpool.ConnectionPool.__init__": [
        "urllib3.connectionpool._normalize_host"
    ],
    "urllib3.connectionpool._normalize_host": [
        "<str>.endswith",
        "<str>.startswith",
        "urllib3.util.url._normalize_host"
    ],
    "urllib3.util.url._normalize_host": [
        "urllib3.util.url._encode_invalid_chars",
        "<builtin>.isinstance",
        "urllib3.util.url._idna_encode",
        "urllib3.packages.six.ensure_str",
        "<str>.startswith",
        "<str>.lower",
        "pathlib.PurePath.match"
    ],
    "urllib3.packages.six.ensure_str": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "urllib3.util.url._idna_encode": [
        "idna.core.encode",
        "<builtin>.any",
        "idna",
        "urllib3.exceptions.LocationParseError.__init__",
        "<builtin>.ord",
        "urllib3.packages.six.raise_from"
    ],
    "idna": [
        "idna.core",
        "idna.package_data",
        "idna.intranges"
    ],
    "idna.package_data": [],
    "idna.core": [
        "idna.core.InvalidCodepoint",
        "idna.intranges",
        "typing",
        "re.compile",
        "unicodedata",
        "idna.core.IDNAError",
        "idna.core.IDNABidiError",
        "idna.idnadata",
        "re",
        "bisect",
        "idna.core.InvalidCodepointContext"
    ],
    "idna.idnadata": [],
    "idna.intranges": [
        "typing",
        "bisect"
    ],
    "idna.core.IDNAError": [],
    "idna.core.IDNABidiError": [],
    "idna.core.InvalidCodepoint": [],
    "idna.core.InvalidCodepointContext": [],
    "urllib3.exceptions.LocationParseError.__init__": [],
    "urllib3.packages.six.raise_from": [
        "urllib3.exceptions.LocationParseError.__init__"
    ],
    "idna.core.encode": [
        "idna.core.alabel",
        "<builtin>.isinstance",
        "idna.core.valid_string_length",
        "<list>.append",
        "idna.core.uts46_remap"
    ],
    "idna.core.uts46_remap": [
        "bisect.bisect_left",
        "idna.core._unot",
        "<builtin>.enumerate",
        "idna.uts46data",
        "<builtin>.IndexError",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.repr"
    ],
    "idna.uts46data": [
        "idna.uts46data._seg_17",
        "idna.uts46data._seg_6",
        "idna.uts46data._seg_28",
        "idna.uts46data._seg_77",
        "idna.uts46data._seg_25",
        "idna.uts46data._seg_49",
        "idna.uts46data._seg_5",
        "idna.uts46data._seg_12",
        "idna.uts46data._seg_40",
        "idna.uts46data._seg_37",
        "idna.uts46data._seg_18",
        "idna.uts46data._seg_22",
        "idna.uts46data._seg_20",
        "idna.uts46data._seg_38",
        "idna.uts46data._seg_67",
        "idna.uts46data._seg_63",
        "<builtin>.tuple",
        "idna.uts46data._seg_64",
        "idna.uts46data._seg_15",
        "idna.uts46data._seg_14",
        "idna.uts46data._seg_45",
        "idna.uts46data._seg_61",
        "idna.uts46data._seg_24",
        "idna.uts46data._seg_46",
        "idna.uts46data._seg_3",
        "idna.uts46data._seg_80",
        "idna.uts46data._seg_21",
        "idna.uts46data._seg_71",
        "idna.uts46data._seg_34",
        "idna.uts46data._seg_70",
        "idna.uts46data._seg_16",
        "idna.uts46data._seg_54",
        "idna.uts46data._seg_50",
        "idna.uts46data._seg_73",
        "idna.uts46data._seg_35",
        "idna.uts46data._seg_7",
        "idna.uts46data._seg_9",
        "idna.uts46data._seg_33",
        "idna.uts46data._seg_1",
        "idna.uts46data._seg_30",
        "idna.uts46data._seg_72",
        "idna.uts46data._seg_75",
        "idna.uts46data._seg_2",
        "idna.uts46data._seg_29",
        "typing",
        "idna.uts46data._seg_78",
        "idna.uts46data._seg_41",
        "idna.uts46data._seg_31",
        "idna.uts46data._seg_42",
        "idna.uts46data._seg_13",
        "idna.uts46data._seg_53",
        "idna.uts46data._seg_69",
        "idna.uts46data._seg_36",
        "idna.uts46data._seg_8",
        "idna.uts46data._seg_76",
        "idna.uts46data._seg_59",
        "idna.uts46data._seg_57",
        "idna.uts46data._seg_0",
        "idna.uts46data._seg_60",
        "idna.uts46data._seg_66",
        "idna.uts46data._seg_47",
        "idna.uts46data._seg_74",
        "idna.uts46data._seg_27",
        "idna.uts46data._seg_23",
        "idna.uts46data._seg_81",
        "idna.uts46data._seg_44",
        "idna.uts46data._seg_51",
        "idna.uts46data._seg_32",
        "idna.uts46data._seg_43",
        "idna.uts46data._seg_52",
        "idna.uts46data._seg_11",
        "idna.uts46data._seg_19",
        "idna.uts46data._seg_56",
        "idna.uts46data._seg_58",
        "idna.uts46data._seg_4",
        "idna.uts46data._seg_65",
        "idna.uts46data._seg_79",
        "idna.uts46data._seg_62",
        "idna.uts46data._seg_39",
        "idna.uts46data._seg_55",
        "idna.uts46data._seg_48",
        "idna.uts46data._seg_26",
        "idna.uts46data._seg_68",
        "idna.uts46data._seg_10"
    ],
    "idna.uts46data._seg_0": [],
    "idna.uts46data._seg_1": [],
    "idna.uts46data._seg_2": [],
    "idna.uts46data._seg_3": [],
    "idna.uts46data._seg_4": [],
    "idna.uts46data._seg_5": [],
    "idna.uts46data._seg_6": [],
    "idna.uts46data._seg_7": [],
    "idna.uts46data._seg_8": [],
    "idna.uts46data._seg_9": [],
    "idna.uts46data._seg_10": [],
    "idna.uts46data._seg_11": [],
    "idna.uts46data._seg_12": [],
    "idna.uts46data._seg_13": [],
    "idna.uts46data._seg_14": [],
    "idna.uts46data._seg_15": [],
    "idna.uts46data._seg_16": [],
    "idna.uts46data._seg_17": [],
    "idna.uts46data._seg_18": [],
    "idna.uts46data._seg_19": [],
    "idna.uts46data._seg_20": [],
    "idna.uts46data._seg_21": [],
    "idna.uts46data._seg_22": [],
    "idna.uts46data._seg_23": [],
    "idna.uts46data._seg_24": [],
    "idna.uts46data._seg_25": [],
    "idna.uts46data._seg_26": [],
    "idna.uts46data._seg_27": [],
    "idna.uts46data._seg_28": [],
    "idna.uts46data._seg_29": [],
    "idna.uts46data._seg_30": [],
    "idna.uts46data._seg_31": [],
    "idna.uts46data._seg_32": [],
    "idna.uts46data._seg_33": [],
    "idna.uts46data._seg_34": [],
    "idna.uts46data._seg_35": [],
    "idna.uts46data._seg_36": [],
    "idna.uts46data._seg_37": [],
    "idna.uts46data._seg_38": [],
    "idna.uts46data._seg_39": [],
    "idna.uts46data._seg_40": [],
    "idna.uts46data._seg_41": [],
    "idna.uts46data._seg_42": [],
    "idna.uts46data._seg_43": [],
    "idna.uts46data._seg_44": [],
    "idna.uts46data._seg_45": [],
    "idna.uts46data._seg_46": [],
    "idna.uts46data._seg_47": [],
    "idna.uts46data._seg_48": [],
    "idna.uts46data._seg_49": [],
    "idna.uts46data._seg_50": [],
    "idna.uts46data._seg_51": [],
    "idna.uts46data._seg_52": [],
    "idna.uts46data._seg_53": [],
    "idna.uts46data._seg_54": [],
    "idna.uts46data._seg_55": [],
    "idna.uts46data._seg_56": [],
    "idna.uts46data._seg_57": [],
    "idna.uts46data._seg_58": [],
    "idna.uts46data._seg_59": [],
    "idna.uts46data._seg_60": [],
    "idna.uts46data._seg_61": [],
    "idna.uts46data._seg_62": [],
    "idna.uts46data._seg_63": [],
    "idna.uts46data._seg_64": [],
    "idna.uts46data._seg_65": [],
    "idna.uts46data._seg_66": [],
    "idna.uts46data._seg_67": [],
    "idna.uts46data._seg_68": [],
    "idna.uts46data._seg_69": [],
    "idna.uts46data._seg_70": [],
    "idna.uts46data._seg_71": [],
    "idna.uts46data._seg_72": [],
    "idna.uts46data._seg_73": [],
    "idna.uts46data._seg_74": [],
    "idna.uts46data._seg_75": [],
    "idna.uts46data._seg_76": [],
    "idna.uts46data._seg_77": [],
    "idna.uts46data._seg_78": [],
    "idna.uts46data._seg_79": [],
    "idna.uts46data._seg_80": [],
    "idna.uts46data._seg_81": [],
    "idna.core._unot": [],
    "idna.core.alabel": [
        "idna.core.ulabel",
        "idna.core._punycode",
        "idna.core.check_label",
        "idna.core.valid_label_length",
        "<builtin>.str"
    ],
    "idna.core.ulabel": [
        "idna.core.check_label",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "idna.core.check_label": [
        "idna.core.check_bidi",
        "<builtin>.isinstance",
        "idna.core.check_initial_combiner",
        "<builtin>.enumerate",
        "idna.core._unot",
        "idna.core.valid_contexto",
        "idna.core.valid_contextj",
        "idna.core.check_hyphen_ok",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.repr",
        "idna.core.check_nfc",
        "idna.intranges.intranges_contain"
    ],
    "idna.core.check_nfc": [],
    "idna.core.check_hyphen_ok": [],
    "idna.core.check_initial_combiner": [],
    "idna.intranges.intranges_contain": [
        "idna.intranges._encode_range",
        "<builtin>.len",
        "idna.intranges._decode_range",
        "bisect.bisect_left"
    ],
    "idna.intranges._encode_range": [],
    "idna.intranges._decode_range": [],
    "idna.core.valid_contexto": [
        "<builtin>.ord",
        "idna.core._is_script",
        "<builtin>.len"
    ],
    "idna.core._is_script": [
        "<builtin>.ord",
        "idna.intranges.intranges_contain"
    ],
    "idna.core.valid_contextj": [
        "idna.core._combining_class",
        "<map>.get",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.range"
    ],
    "idna.core._combining_class": [
        "<builtin>.chr",
        "<builtin>.ValueError"
    ],
    "idna.core.check_bidi": [
        "<builtin>.repr",
        "<builtin>.enumerate"
    ],
    "idna.core.valid_label_length": [
        "<builtin>.len"
    ],
    "idna.core._punycode": [],
    "idna.core.valid_string_length": [
        "<builtin>.len"
    ],
    "urllib3.util.url._encode_invalid_chars": [
        "urllib3.packages.six.ensure_text",
        "<str>.count",
        "<builtin>.hex",
        "<builtin>.bytearray",
        "<builtin>.len",
        "<builtin>.ord",
        "<list>.count",
        "<builtin>.range"
    ],
    "urllib3.packages.six.ensure_text": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "urllib3.connectionpool.ConnectionPool.__str__": [
        "<builtin>.type"
    ],
    "urllib3.connectionpool.ConnectionPool.__exit__": [
        "urllib3.connectionpool.ConnectionPool.close",
        "urllib3.connectionpool.HTTPConnectionPool.close"
    ],
    "urllib3.connectionpool.ConnectionPool.close": [],
    "urllib3.connectionpool.HTTPConnectionPool.__init__": [
        "urllib3.request.RequestMethods.__init__",
        "urllib3.util.timeout.Timeout.from_float",
        "<builtin>.isinstance",
        "urllib3.connectionpool.ConnectionPool.__init__"
    ],
    "urllib3.util.timeout.Timeout.from_float": [
        "urllib3.util.timeout.Timeout.__init__"
    ],
    "urllib3.util.timeout.Timeout.__init__": [
        "urllib3.util.timeout.Timeout._validate_timeout"
    ],
    "urllib3.util.timeout.Timeout._validate_timeout": [
        "<builtin>.float",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "urllib3.connectionpool.HTTPConnectionPool._new_conn": [
        "urllib3.connection.HTTPSConnection.__init__",
        "logging.Logger.debug",
        "urllib3.connection.HTTPConnection.__init__"
    ],
    "urllib3.connection.HTTPConnection.__init__": [],
    "urllib3.connectionpool.HTTPConnectionPool._get_conn": [
        "logging.Logger.debug",
        "urllib3.util.connection.is_connection_dropped",
        "urllib3.exceptions.PoolError.__init__",
        "<builtin>.getattr",
        "urllib3.connectionpool.HTTPConnectionPool._new_conn",
        "urllib3.connectionpool.HTTPSConnectionPool._new_conn"
    ],
    "urllib3.util.connection.is_connection_dropped": [
        "urllib3.util.wait.wait_for_read",
        "<builtin>.getattr"
    ],
    "urllib3.util.wait.wait_for_read": [
        "urllib3.util.wait.wait_for_socket"
    ],
    "urllib3.util.wait.wait_for_socket": [
        "<builtin>.hasattr",
        "urllib3.util.wait.wait_for_socket",
        "urllib3.util.wait._have_working_poll"
    ],
    "urllib3.util.wait._have_working_poll": [
        "urllib3.util.wait._retry_on_intr"
    ],
    "urllib3.util.wait._retry_on_intr": [
        "time.time",
        "urllib3.util.wait.poll_wait_for_socket.do_poll",
        "<builtin>.float",
        "time.monotonic"
    ],
    "urllib3.connectionpool.HTTPConnectionPool._put_conn": [
        "logging.Logger.warning"
    ],
    "urllib3.connectionpool.HTTPConnectionPool._get_timeout": [
        "urllib3.util.timeout.Timeout.from_float",
        "urllib3.util.timeout.Timeout.clone",
        "<builtin>.isinstance"
    ],
    "urllib3.util.timeout.Timeout.clone": [
        "urllib3.util.timeout.Timeout.__init__"
    ],
    "urllib3.connectionpool.HTTPConnectionPool._raise_timeout": [
        "<builtin>.str",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "urllib3.exceptions.RequestError.__init__"
    ],
    "urllib3.connectionpool.HTTPConnectionPool._make_request": [
        "logging.Logger.debug",
        "urllib3.util.timeout.Timeout.start_connect",
        "urllib3.exceptions.RequestError.__init__",
        "urllib3.connectionpool.HTTPSConnectionPool._validate_conn",
        "urllib3.connectionpool.HTTPConnectionPool._raise_timeout",
        "urllib3.util.response.assert_header_parsing",
        "urllib3.connectionpool.HTTPConnectionPool._get_timeout",
        "urllib3.connectionpool.HTTPConnectionPool._validate_conn",
        "urllib3.connectionpool.HTTPConnectionPool._absolute_url",
        "<builtin>.getattr",
        "logging.Logger.warning",
        "urllib3.packages.six.raise_from"
    ],
    "urllib3.util.timeout.Timeout.start_connect": [],
    "urllib3.connectionpool.HTTPConnectionPool._validate_conn": [],
    "urllib3.util.response.assert_header_parsing": [
        "urllib3.exceptions.HeaderParsingError.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "urllib3.connectionpool.HTTPConnectionPool._absolute_url": [],
    "urllib3.connectionpool.HTTPConnectionPool.is_same_host": [
        "urllib3.util.url.get_host",
        "urllib3.connectionpool._normalize_host",
        "<map>.get",
        "<str>.startswith"
    ],
    "urllib3.util.url.get_host": [
        "urllib3.util.url.parse_url"
    ],
    "urllib3.util.url.parse_url": [
        "urllib3.packages.six.raise_from",
        "urllib3.util.url._encode_invalid_chars",
        "<builtin>.isinstance",
        "urllib3.util.url._normalize_host",
        "<builtin>.int",
        "urllib3.util.url.parse_url.ensure_type",
        "urllib3.util.url._remove_path_dot_segments",
        "urllib3.exceptions.LocationParseError.__init__",
        "<str>.lower",
        "pathlib.PurePath.match"
    ],
    "urllib3.util.url._remove_path_dot_segments": [
        "<str>.endswith",
        "<str>.startswith",
        "<list>.pop",
        "<list>.append",
        "<list>.insert"
    ],
    "urllib3.util.url.parse_url.ensure_type": [
        "urllib3.packages.six.ensure_str",
        "urllib3.packages.six.ensure_text"
    ],
    "urllib3.connectionpool.HTTPConnectionPool.urlopen": [
        "logging.Logger.debug",
        "<builtin>.isinstance",
        "urllib3.packages.six.ensure_str",
        "urllib3.connectionpool.HTTPConnectionPool.is_same_host",
        "urllib3.connectionpool.HTTPConnectionPool.urlopen",
        "urllib3.response.HTTPResponse.get_redirect_location",
        "urllib3.util.proxy.connection_requires_http_tunnel",
        "urllib3.connectionpool.HTTPConnectionPool._get_conn",
        "urllib3.exceptions.HostChangedError.__init__",
        "urllib3.connectionpool.HTTPSConnectionPool._prepare_proxy",
        "urllib3.util.url.parse_url",
        "urllib3.util.retry.Retry.sleep_for_retry",
        "<str>.startswith",
        "urllib3.connectionpool.HTTPConnectionPool._get_timeout",
        "urllib3.util.request.set_file_position",
        "logging.Logger.warning",
        "urllib3.util.retry.Retry.from_int",
        "urllib3.response.HTTPResponse.from_httplib",
        "urllib3.response.HTTPResponse.getheader",
        "urllib3.util.url._encode_target",
        "urllib3.connectionpool.HTTPConnectionPool._make_request",
        "urllib3.response.HTTPResponse.drain_conn",
        "urllib3.util.retry.Retry.increment",
        "urllib3.exceptions.ProxyError.__init__",
        "urllib3.util.retry.Retry.is_retry",
        "urllib3.util.retry.Retry.sleep",
        "<builtin>.getattr",
        "urllib3.connectionpool.HTTPConnectionPool._prepare_proxy",
        "urllib3.connectionpool.HTTPConnectionPool.urlopen._is_ssl_error_message_from_http_proxy",
        "<builtin>.bool"
    ],
    "urllib3.util.url._encode_target": [
        "urllib3.util.url._encode_invalid_chars",
        "pathlib.PurePath.match"
    ],
    "urllib3.util.proxy.connection_requires_http_tunnel": [],
    "urllib3.util.request.set_file_position": [
        "<builtin>.getattr",
        "urllib3.util.request.rewind_body"
    ],
    "urllib3.util.request.rewind_body": [
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "urllib3.connectionpool.HTTPConnectionPool._prepare_proxy": [],
    "urllib3.response.HTTPResponse.from_httplib": [
        "<map>.items",
        "<builtin>.isinstance",
        "_collections.HTTPHeaderDict",
        "urllib3.response.HTTPResponse.__init__",
        "<builtin>.getattr"
    ],
    "_collections.HTTPHeaderDict": [],
    "urllib3.response.HTTPResponse.__init__": [
        "urllib3.response.HTTPResponse.read",
        "<builtin>.isinstance",
        "_collections.HTTPHeaderDict",
        "urllib3.response.HTTPResponse._init_length",
        "<map>.get",
        "<builtin>.hasattr"
    ],
    "urllib3.response.HTTPResponse._init_length": [
        "<builtin>.set",
        "<builtin>.int",
        "<map>.get",
        "<builtin>.len",
        "logging.Logger.warning"
    ],
    "urllib3.response.HTTPResponse.read": [
        "urllib3.response.HTTPResponse._decode",
        "<builtin>.getattr",
        "<builtin>.len",
        "urllib3.response.HTTPResponse._error_catcher",
        "urllib3.response.HTTPResponse._init_decoder"
    ],
    "urllib3.response.HTTPResponse._init_decoder": [
        "urllib3.response._get_decoder",
        "<map>.get",
        "<builtin>.len"
    ],
    "urllib3.response._get_decoder": [
        "urllib3.response.BrotliDecoder.__init__",
        "urllib3.response.MultiDecoder.__init__",
        "urllib3.response.GzipDecoder.__init__",
        "urllib3.response.DeflateDecoder.__init__"
    ],
    "urllib3.response.MultiDecoder.__init__": [
        "urllib3.response._get_decoder"
    ],
    "urllib3.response.GzipDecoder.__init__": [],
    "urllib3.response.BrotliDecoder.__init__": [
        "<builtin>.hasattr"
    ],
    "urllib3.response.DeflateDecoder.__init__": [],
    "urllib3.response.HTTPResponse._error_catcher": [
        "<builtin>.str",
        "urllib3.exceptions.RequestError.__init__"
    ],
    "urllib3.response.HTTPResponse._decode": [
        "urllib3.response.GzipDecoder.decompress",
        "urllib3.response.DeflateDecoder.decompress",
        "urllib3.response.HTTPResponse._flush_decoder",
        "<map>.get",
        "urllib3.response.MultiDecoder.decompress"
    ],
    "urllib3.response.MultiDecoder.decompress": [
        "<builtin>.reversed"
    ],
    "urllib3.response.DeflateDecoder.decompress": [
        "urllib3.response.DeflateDecoder.decompress"
    ],
    "urllib3.response.GzipDecoder.decompress": [
        "<builtin>.bytearray",
        "<builtin>.bytes"
    ],
    "urllib3.response.HTTPResponse._flush_decoder": [
        "urllib3.response.BrotliDecoder.flush",
        "urllib3.response.GzipDecoder.decompress",
        "urllib3.response.DeflateDecoder.decompress",
        "urllib3.response.MultiDecoder.flush",
        "urllib3.response.MultiDecoder.decompress"
    ],
    "urllib3.response.MultiDecoder.flush": [],
    "urllib3.response.BrotliDecoder.flush": [
        "<builtin>.hasattr"
    ],
    "urllib3.connectionpool.HTTPConnectionPool.urlopen._is_ssl_error_message_from_http_proxy": [
        "re.split",
        "<builtin>.str"
    ],
    "urllib3.util.retry.Retry.increment": [
        "urllib3.exceptions.MaxRetryError.__init__",
        "logging.Logger.debug",
        "urllib3.util.retry.Retry._is_connection_error",
        "urllib3.util.retry.Retry.new",
        "urllib3.util.retry.Retry._is_method_retryable",
        "urllib3.packages.six.reraise",
        "urllib3.response.HTTPResponse.get_redirect_location",
        "<builtin>.type",
        "urllib3.util.retry.Retry._is_read_error"
    ],
    "urllib3.packages.six.reraise": [
        "urllib3.exceptions.ProxyError.__init__"
    ],
    "urllib3.util.retry.Retry._is_connection_error": [
        "<builtin>.isinstance"
    ],
    "urllib3.util.retry.Retry._is_read_error": [
        "<builtin>.isinstance"
    ],
    "urllib3.util.retry.Retry._is_method_retryable": [
        "<str>.upper",
        "warnings.warn"
    ],
    "urllib3.util.retry.Retry.new": [
        "<builtin>.dict",
        "warnings.warn",
        "<builtin>.type"
    ],
    "urllib3.util.retry.Retry.sleep": [
        "urllib3.util.retry.Retry.sleep_for_retry",
        "urllib3.util.retry.Retry._sleep_backoff"
    ],
    "urllib3.util.retry.Retry.sleep_for_retry": [
        "urllib3.util.retry.Retry.get_retry_after"
    ],
    "urllib3.util.retry.Retry.get_retry_after": [
        "urllib3.response.HTTPResponse.getheader",
        "urllib3.util.retry.Retry.parse_retry_after"
    ],
    "urllib3.util.retry.Retry.parse_retry_after": [
        "email._parseaddr.mktime_tz",
        "email._parseaddr.parsedate_tz",
        "re.match",
        "<builtin>.int"
    ],
    "urllib3.util.retry.Retry._sleep_backoff": [
        "urllib3.util.retry.Retry.get_backoff_time"
    ],
    "urllib3.util.retry.Retry.get_backoff_time": [
        "<builtin>.reversed",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.min",
        "itertools.takewhile"
    ],
    "itertools.takewhile": [],
    "urllib3.response.HTTPResponse.get_redirect_location": [
        "<map>.get"
    ],
    "urllib3.response.HTTPResponse.drain_conn": [
        "urllib3.response.HTTPResponse.read"
    ],
    "urllib3.response.HTTPResponse.getheader": [
        "<map>.get"
    ],
    "urllib3.util.retry.Retry.is_retry": [
        "urllib3.util.retry.Retry._is_method_retryable"
    ],
    "urllib3.connectionpool.HTTPSConnectionPool.__init__": [
        "urllib3.connectionpool.HTTPConnectionPool.__init__"
    ],
    "urllib3.connectionpool.HTTPSConnectionPool._prepare_conn": [
        "<builtin>.isinstance",
        "urllib3.connection.HTTPSConnection.set_cert"
    ],
    "urllib3.connectionpool.HTTPSConnectionPool._new_conn": [
        "urllib3.connection.HTTPSConnection.__init__",
        "urllib3.connectionpool.HTTPSConnectionPool._prepare_conn",
        "logging.Logger.debug"
    ],
    "urllib3.connection.HTTPSConnection.__init__": [
        "urllib3.connection.HTTPConnection.__init__"
    ],
    "urllib3.connection.HTTPSConnection.set_cert": [
        "posixpath.expanduser",
        "urllib3.util.ssl_.resolve_cert_reqs",
        "ntpath.expanduser"
    ],
    "urllib3.util.ssl_.resolve_cert_reqs": [
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "urllib3.connectionpool.HTTPSConnectionPool._validate_conn": [
        "<builtin>.super",
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "urllib3.connectionpool.connection_from_url": [
        "urllib3.util.url.get_host",
        "urllib3.connectionpool.HTTPConnectionPool.__init__",
        "urllib3.connectionpool.HTTPSConnectionPool.__init__",
        "<map>.get"
    ],
    "urllib3.connection.HTTPConnection._new_conn": [
        "urllib3.exceptions.PoolError.__init__"
    ],
    "urllib3.connection.HTTPConnection._is_using_tunnel": [
        "<builtin>.getattr"
    ],
    "urllib3.connection.HTTPConnection._prepare_conn": [
        "urllib3.connection.HTTPConnection._is_using_tunnel"
    ],
    "urllib3.connection.HTTPConnection.connect": [
        "urllib3.connection.HTTPConnection._prepare_conn",
        "urllib3.connection.HTTPConnection._new_conn"
    ],
    "urllib3.connection.HTTPConnection.putrequest": [
        "<builtin>.ValueError"
    ],
    "urllib3.connection.HTTPConnection.putheader": [
        "<str>.lower",
        "<builtin>.isinstance",
        "urllib3.packages.six.ensure_str",
        "<builtin>.sorted",
        "<builtin>.any",
        "<builtin>.map",
        "<builtin>.ValueError"
    ],
    "urllib3.connection.HTTPConnection.request": [
        "<builtin>.super",
        "urllib3.connection._get_default_user_agent",
        "urllib3.packages.six.ensure_str",
        "<map>.copy"
    ],
    "urllib3.connection._get_default_user_agent": [],
    "urllib3.connection.HTTPConnection.request_chunked": [
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.hex",
        "urllib3.connection.HTTPConnection.putrequest",
        "urllib3.packages.six.ensure_str",
        "<builtin>.bytearray",
        "urllib3.connection.HTTPConnection.putheader",
        "<builtin>.len",
        "urllib3.connection._get_default_user_agent"
    ],
    "urllib3.connection.HTTPSConnection.connect": [
        "datetime.date.today",
        "urllib3.connection.HTTPSConnection._connect_tls_proxy",
        "urllib3.util.ssl_.resolve_cert_reqs",
        "urllib3.util.ssltransport.SSLTransport.version",
        "urllib3.util.ssl_.resolve_ssl_version",
        "urllib3.util.ssltransport.SSLTransport.getpeercert",
        "urllib3.util.ssl_.create_urllib3_context",
        "urllib3.connection.HTTPConnection._new_conn",
        "<builtin>.getattr",
        "urllib3.connection.HTTPConnection._is_using_tunnel",
        "urllib3.util.ssl_.ssl_wrap_socket",
        "<builtin>.hasattr",
        "warnings.warn",
        "urllib3.connection._match_hostname"
    ],
    "urllib3.connection.HTTPSConnection._connect_tls_proxy": [
        "urllib3.util.ssltransport.SSLTransport.getpeercert",
        "<builtin>.getattr",
        "urllib3.util.ssl_.ssl_wrap_socket",
        "urllib3.util.proxy.create_proxy_ssl_context",
        "warnings.warn",
        "urllib3.connection._match_hostname"
    ],
    "urllib3.util.ssl_.ssl_wrap_socket": [
        "urllib3.util.ssl_.SSLContext.load_verify_locations",
        "urllib3.util.ssl_.is_ipaddress",
        "urllib3.util.ssl_._ssl_wrap_socket_impl",
        "urllib3.util.ssl_._is_key_file_encrypted",
        "urllib3.util.ssl_.create_urllib3_context",
        "urllib3.util.ssl_.SSLContext.load_cert_chain",
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "urllib3.util.ssl_.create_urllib3_context": [
        "urllib3.util.ssl_.SSLContext.set_ciphers",
        "urllib3.util.ssl_.SSLContext.__init__",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "urllib3.util.ssl_.create_urllib3_context.disable_check_hostname"
    ],
    "urllib3.util.ssl_.SSLContext.__init__": [],
    "urllib3.util.ssl_.SSLContext.set_ciphers": [],
    "urllib3.util.ssl_.create_urllib3_context.disable_check_hostname": [
        "<builtin>.getattr"
    ],
    "urllib3.util.ssl_.SSLContext.load_verify_locations": [],
    "urllib3.util.ssl_._is_key_file_encrypted": [
        "<builtin>.open"
    ],
    "urllib3.util.ssl_.SSLContext.load_cert_chain": [],
    "urllib3.util.ssl_.is_ipaddress": [
        "<builtin>.bool",
        "<builtin>.isinstance",
        "pathlib.PurePath.match"
    ],
    "urllib3.util.ssl_._ssl_wrap_socket_impl": [
        "urllib3.util.ssltransport.SSLTransport._validate_ssl_context_for_tls_in_tls",
        "urllib3.util.ssltransport.SSLTransport.__init__",
        "urllib3.util.ssl_.SSLContext.wrap_socket"
    ],
    "urllib3.util.ssltransport.SSLTransport._validate_ssl_context_for_tls_in_tls": [
        "<builtin>.hasattr"
    ],
    "urllib3.util.ssltransport.SSLTransport.__init__": [
        "urllib3.util.ssltransport.SSLTransport._ssl_io_loop"
    ],
    "urllib3.util.ssltransport.SSLTransport._ssl_io_loop": [
        "urllib3.util.ssltransport.SSLTransport.sendall",
        "urllib3.util.ssltransport.SSLTransport.recv"
    ],
    "urllib3.util.ssl_.SSLContext.wrap_socket": [
        "urllib3.util.ssl_.SSLContext.wrap_socket",
        "warnings.warn"
    ],
    "urllib3.util.proxy.create_proxy_ssl_context": [
        "<builtin>.hasattr",
        "urllib3.util.ssl_.resolve_cert_reqs",
        "urllib3.util.ssl_.create_urllib3_context",
        "urllib3.util.ssl_.resolve_ssl_version"
    ],
    "urllib3.util.ssl_.resolve_ssl_version": [
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "urllib3.util.ssltransport.SSLTransport.getpeercert": [],
    "urllib3.connection._match_hostname": [
        "urllib3.util.ssl_match_hostname.match_hostname",
        "urllib3.util.ssl_.is_ipaddress",
        "logging.Logger.warning"
    ],
    "urllib3.util.ssl_match_hostname.match_hostname": [
        "ipaddress.ip_address",
        "urllib3.util.ssl_match_hostname._to_unicode",
        "<builtin>.len",
        "urllib3.util.ssl_match_hostname._dnsname_match",
        "<list>.append",
        "urllib3.util.ssl_match_hostname._ipaddress_match",
        "<builtin>.map",
        "<builtin>.ValueError"
    ],
    "urllib3.util.ssl_match_hostname._to_unicode": [
        "<builtin>.isinstance"
    ],
    "ipaddress.ip_address": [
        "<builtin>.ValueError",
        "ipaddress.IPv6Address.__init__",
        "ipaddress.IPv4Address.__init__"
    ],
    "urllib3.util.ssl_match_hostname._ipaddress_match": [
        "ipaddress.ip_address",
        "urllib3.util.ssl_match_hostname._to_unicode"
    ],
    "urllib3.util.ssl_match_hostname._dnsname_match": [
        "re.compile",
        "<builtin>.repr",
        "pathlib.PurePath.match",
        "<list>.append"
    ],
    "urllib3.util.ssltransport.SSLTransport.version": [],
    "urllib3.packages.six._import_module": [
        "<builtin>.__import__"
    ],
    "urllib3.packages.six._LazyDescr.__get__": [
        "<builtin>.delattr",
        "<builtin>.setattr"
    ],
    "urllib3.packages.six.MovedModule.__init__": [
        "<builtin>.super"
    ],
    "urllib3.packages.six.MovedModule._resolve": [
        "urllib3.packages.six._import_module"
    ],
    "urllib3.packages.six.MovedModule.__getattr__": [
        "urllib3.packages.six.MovedModule._resolve",
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "urllib3.packages.six._LazyModule.__init__": [
        "<builtin>.super"
    ],
    "urllib3.packages.six.MovedAttribute.__init__": [
        "<builtin>.super"
    ],
    "urllib3.packages.six.MovedAttribute._resolve": [
        "urllib3.packages.six._import_module",
        "<builtin>.getattr"
    ],
    "urllib3.packages.six._SixMetaPathImporter.find_spec": [
        "_bootstrap.spec_from_loader"
    ],
    "urllib3.packages.six._SixMetaPathImporter.__get_module": [
        "<builtin>.ImportError"
    ],
    "urllib3.packages.six._SixMetaPathImporter.load_module": [
        "urllib3.packages.six._SixMetaPathImporter.__get_module",
        "<builtin>.isinstance"
    ],
    "urllib3.packages.six._SixMetaPathImporter.is_package": [
        "<builtin>.hasattr",
        "urllib3.packages.six._SixMetaPathImporter.__get_module"
    ],
    "urllib3.packages.six._SixMetaPathImporter.get_code": [
        "urllib3.packages.six._SixMetaPathImporter.__get_module"
    ],
    "urllib3.packages.six._SixMetaPathImporter.create_module": [
        "urllib3.packages.six._SixMetaPathImporter.load_module"
    ],
    "urllib3.packages.six.add_move": [
        "<builtin>.setattr"
    ],
    "urllib3.packages.six.remove_move": [
        "<builtin>.AttributeError",
        "<builtin>.delattr"
    ],
    "urllib3.packages.six.callable": [
        "<builtin>.any",
        "<builtin>.type"
    ],
    "urllib3.packages.six.Iterator.next": [
        "<builtin>.type"
    ],
    "urllib3.packages.six.byte2int": [
        "<builtin>.ord"
    ],
    "urllib3.packages.six.indexbytes": [
        "<builtin>.ord"
    ],
    "urllib3.packages.six.assertCountEqual": [
        "<builtin>.getattr"
    ],
    "urllib3.packages.six.assertRaisesRegex": [
        "<builtin>.getattr"
    ],
    "urllib3.packages.six.assertRegex": [
        "<builtin>.getattr"
    ],
    "urllib3.packages.six.assertNotRegex": [
        "<builtin>.getattr"
    ],
    "urllib3.packages.six.print_": [
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "urllib3.packages.six.print_.write",
        "<builtin>.isinstance"
    ],
    "urllib3.packages.six.print_.write": [
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "urllib3.packages.six._update_wrapper": [
        "<builtin>.getattr"
    ],
    "urllib3.packages.six.with_metaclass": [
        "urllib3.packages.six.with_metaclass.metaclass"
    ],
    "urllib3.packages.six.with_metaclass.metaclass": [
        "<builtin>.classmethod"
    ],
    "urllib3.packages.six.ensure_binary": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "urllib3.packages.six.python_2_unicode_compatible": [
        "<builtin>.ValueError"
    ],
    "urllib3.util.ssl_._const_compare_digest_backport": [
        "<builtin>.zip",
        "<builtin>.abs",
        "<builtin>.bytearray",
        "<builtin>.len"
    ],
    "urllib3.util.ssl_.assert_fingerprint": [
        "<map>",
        "<map>.get",
        "<builtin>.len"
    ],
    "hmac.HMAC.__init__": [
        "hmac.HMAC.__init__.<lambda1>",
        "<builtin>.isinstance",
        "<str>.translate",
        "hmac.HMAC.update",
        "<builtin>.TypeError",
        "<str>.ljust",
        "<builtin>.callable",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "hmac.HMAC.__init__.<lambda1>": [],
    "<str>.ljust": [],
    "hmac.HMAC.update": [],
    "hmac.HMAC.digest": [
        "hmac.HMAC._current"
    ],
    "hmac.HMAC._current": [],
    "hmac.HMAC.hexdigest": [
        "hmac.HMAC._current"
    ],
    "hmac.new": [
        "hmac.HMAC.__init__"
    ],
    "hmac.digest": [
        "<builtin>.isinstance",
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.len",
        "hmac.digest.<lambda1>"
    ],
    "hmac.digest.<lambda1>": [],
    "urllib3.util.url.Url.__new__": [
        "<builtin>.super",
        "<str>.startswith"
    ],
    "urllib3.util.url.Url.url": [
        "<builtin>.str"
    ],
    "urllib3.util.ssltransport.SSLTransport.sendall": [
        "urllib3.util.ssltransport.SSLTransport.send",
        "<builtin>.memoryview",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "urllib3.util.ssltransport.SSLTransport.send": [
        "urllib3.util.ssltransport.SSLTransport._ssl_io_loop",
        "<builtin>.ValueError"
    ],
    "urllib3.util.ssltransport.SSLTransport.recv": [
        "urllib3.util.ssltransport.SSLTransport._wrap_ssl_read",
        "<builtin>.ValueError"
    ],
    "urllib3.util.ssltransport.SSLTransport._wrap_ssl_read": [
        "urllib3.util.ssltransport.SSLTransport._ssl_io_loop"
    ],
    "urllib3.util.ssltransport.SSLTransport.__exit__": [
        "urllib3.util.ssltransport.SSLTransport.close"
    ],
    "urllib3.util.ssltransport.SSLTransport.close": [
        "urllib3.util.ssltransport.SSLTransport.close"
    ],
    "urllib3.util.ssltransport.SSLTransport.fileno": [
        "urllib3.util.ssltransport.SSLTransport.fileno"
    ],
    "urllib3.util.ssltransport.SSLTransport.read": [
        "urllib3.util.ssltransport.SSLTransport._wrap_ssl_read"
    ],
    "urllib3.util.ssltransport.SSLTransport.recv_into": [
        "urllib3.util.ssltransport.SSLTransport.read",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "urllib3.util.ssltransport.SSLTransport.makefile": [
        "<builtin>.set",
        "_io.BufferedWriter",
        "_io.BufferedReader",
        "_io.TextIOWrapper",
        "<builtin>.ValueError",
        "_io.BufferedRWPair"
    ],
    "urllib3.util.ssltransport.SSLTransport.unwrap": [
        "urllib3.util.ssltransport.SSLTransport._ssl_io_loop"
    ],
    "urllib3.util.ssltransport.SSLTransport.settimeout": [
        "urllib3.util.ssltransport.SSLTransport.settimeout"
    ],
    "urllib3.util.ssltransport.SSLTransport.gettimeout": [
        "urllib3.util.ssltransport.SSLTransport.gettimeout"
    ],
    "urllib3.util.ssltransport.SSLTransport._decref_socketios": [
        "urllib3.util.ssltransport.SSLTransport._decref_socketios"
    ],
    "urllib3.util.connection.create_connection": [
        "urllib3.util.connection._set_socket_options",
        "urllib3.util.connection.allowed_gai_family",
        "urllib3.exceptions.LocationParseError.__init__",
        "socket.socket.close",
        "socket.getaddrinfo",
        "urllib3.packages.six.raise_from",
        "socket.socket.__init__"
    ],
    "urllib3.util.connection.allowed_gai_family": [],
    "urllib3.util.connection._set_socket_options": [],
    "urllib3.util.wait.select_wait_for_socket": [
        "<builtin>.bool",
        "urllib3.util.wait._retry_on_intr",
        "<builtin>.RuntimeError",
        "<list>.append"
    ],
    "urllib3.util.wait.poll_wait_for_socket": [
        "<builtin>.bool",
        "urllib3.util.wait._retry_on_intr",
        "<builtin>.RuntimeError"
    ],
    "urllib3.util.wait.poll_wait_for_socket.do_poll": [],
    "urllib3.util.wait.wait_for_write": [
        "urllib3.util.wait.wait_for_socket"
    ],
    "urllib3.util.response.is_fp_closed": [
        "<builtin>.ValueError"
    ],
    "urllib3.util.response.is_response_to_head": [
        "<builtin>.isinstance"
    ],
    "urllib3.util.retry._RetryMeta.DEFAULT_METHOD_WHITELIST": [
        "warnings.warn"
    ],
    "urllib3.util.retry._RetryMeta.DEFAULT_REDIRECT_HEADERS_BLACKLIST": [
        "warnings.warn"
    ],
    "urllib3.util.retry._RetryMeta.BACKOFF_MAX": [
        "warnings.warn"
    ],
    "urllib3.util.retry.Retry.is_exhausted": [
        "<builtin>.filter",
        "<builtin>.min",
        "<builtin>.list"
    ],
    "urllib3.util.retry.Retry.__repr__": [
        "<builtin>.type"
    ],
    "urllib3.util.retry.Retry.__getattr__": [
        "<builtin>.super",
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "urllib3.util.timeout.Timeout.__repr__": [
        "<builtin>.type"
    ],
    "urllib3.util.timeout.Timeout.connect_timeout": [
        "<builtin>.min"
    ],
    "urllib3.util.timeout.Timeout.read_timeout": [
        "<builtin>.min",
        "<builtin>.max",
        "urllib3.util.timeout.Timeout.get_connect_duration"
    ],
    "urllib3.util.timeout.Timeout.get_connect_duration": [],
    "ipaddress.ip_network": [
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv6Network.__init__",
        "<builtin>.ValueError"
    ],
    "ipaddress.ip_interface": [
        "ipaddress.IPv6Interface.__init__",
        "<builtin>.ValueError",
        "ipaddress.IPv4Interface.__init__"
    ],
    "ipaddress.IPv4Interface.__init__": [
        "ipaddress.IPv4Network.__init__",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv6Interface.__init__": [
        "ipaddress.IPv6Address.__init__",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.v4_int_to_packed": [
        "<builtin>.ValueError"
    ],
    "ipaddress.v6_int_to_packed": [
        "<builtin>.ValueError"
    ],
    "ipaddress._find_address_range": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "ipaddress.summarize_address_range": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv6Network.__init__",
        "<builtin>.min",
        "ipaddress._count_righthand_zero_bits",
        "<builtin>.ValueError"
    ],
    "ipaddress._collapse_addresses_internal": [
        "<builtin>.list",
        "<map>.values",
        "<map>.get",
        "<builtin>.sorted"
    ],
    "ipaddress.collapse_addresses": [
        "<builtin>.set",
        "<builtin>.isinstance",
        "ipaddress._collapse_addresses_internal",
        "<builtin>.TypeError",
        "<list>.extend",
        "ipaddress._find_address_range",
        "<builtin>.sorted",
        "<list>.append"
    ],
    "ipaddress.get_mixed_type_key": [
        "<builtin>.isinstance"
    ],
    "ipaddress._IPAddressBase.exploded": [
        "ipaddress._BaseV6._explode_shorthand_ip_string",
        "ipaddress._BaseV4._explode_shorthand_ip_string"
    ],
    "ipaddress._BaseV4._explode_shorthand_ip_string": [
        "<builtin>.str"
    ],
    "ipaddress._BaseV6._explode_shorthand_ip_string": [
        "<builtin>.range",
        "<builtin>.isinstance",
        "ipaddress._BaseV6._ip_int_from_string",
        "<builtin>.str"
    ],
    "ipaddress._IPAddressBase.compressed": [
        "<builtin>.str"
    ],
    "ipaddress._IPAddressBase.reverse_pointer": [
        "ipaddress._BaseV6._reverse_pointer",
        "ipaddress._BaseV4._reverse_pointer"
    ],
    "ipaddress._BaseV4._reverse_pointer": [
        "<builtin>.str"
    ],
    "ipaddress._BaseV6._reverse_pointer": [],
    "ipaddress._IPAddressBase.version": [
        "<builtin>.NotImplementedError",
        "<builtin>.type"
    ],
    "ipaddress._IPAddressBase.__reduce__": [
        "<builtin>.str"
    ],
    "ipaddress._BaseAddress.__lt__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "ipaddress._BaseAddress.__add__": [
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "ipaddress._BaseAddress.__sub__": [
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "ipaddress._BaseAddress.__repr__": [
        "<builtin>.str"
    ],
    "ipaddress._BaseAddress.__str__": [
        "ipaddress._BaseV6._string_from_ip_int",
        "ipaddress._BaseV4._string_from_ip_int",
        "<builtin>.str"
    ],
    "ipaddress._BaseAddress.__hash__": [
        "<builtin>.hex",
        "<builtin>.hash",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.__repr__": [
        "<builtin>.str"
    ],
    "ipaddress._BaseNetwork.hosts": [
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int",
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.range"
    ],
    "ipaddress._BaseNetwork._address_class": [
        "<builtin>.NotImplementedError",
        "<builtin>.type"
    ],
    "ipaddress._BaseNetwork.__iter__": [
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int",
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.range"
    ],
    "ipaddress._BaseNetwork.__getitem__": [
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int",
        "ipaddress._BaseNetwork._address_class",
        "<builtin>.IndexError",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress._BaseNetwork.__lt__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "ipaddress._BaseNetwork.__eq__": [
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.__hash__": [
        "<builtin>.hash",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.__contains__": [
        "<builtin>.isinstance"
    ],
    "ipaddress._BaseNetwork.broadcast_address": [
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv6Address.__init__",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.hostmask": [
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv6Address.__init__",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.num_addresses": [
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.address_exclude": [
        "ipaddress._BaseNetwork.subnets",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.AssertionError",
        "<builtin>.ValueError"
    ],
    "ipaddress._BaseNetwork.subnets": [
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.compare_networks": [
        "<builtin>.TypeError"
    ],
    "ipaddress._BaseNetwork.supernet": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork._is_subnet_of": [
        "<builtin>.TypeError"
    ],
    "ipaddress._BaseNetwork.subnet_of": [
        "ipaddress._BaseNetwork._is_subnet_of"
    ],
    "ipaddress._BaseNetwork.supernet_of": [
        "ipaddress._BaseNetwork._is_subnet_of"
    ],
    "ipaddress._BaseV4._parse_octet": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._string_from_ip_int": [
        "<builtin>.map"
    ],
    "ipaddress.IPv4Address.packed": [
        "ipaddress.v4_int_to_packed"
    ],
    "ipaddress.IPv4Interface.__str__": [
        "ipaddress._BaseV4._string_from_ip_int"
    ],
    "ipaddress.IPv4Interface.__eq__": [
        "ipaddress._BaseAddress.__eq__"
    ],
    "ipaddress._BaseAddress.__eq__": [],
    "ipaddress.IPv4Interface.__lt__": [
        "ipaddress._BaseAddress.__lt__"
    ],
    "ipaddress.IPv4Interface.__hash__": [
        "<builtin>.int"
    ],
    "ipaddress.IPv4Interface.ip": [
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv4Interface.with_prefixlen": [
        "ipaddress._BaseV4._string_from_ip_int"
    ],
    "ipaddress.IPv4Interface.with_netmask": [
        "ipaddress._BaseV4._string_from_ip_int"
    ],
    "ipaddress.IPv4Interface.with_hostmask": [
        "ipaddress._BaseV4._string_from_ip_int"
    ],
    "ipaddress._BaseV6._compress_hextets": [
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._string_from_ip_int": [
        "ipaddress._BaseV6._compress_hextets",
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress.IPv6Address.packed": [
        "ipaddress.v6_int_to_packed"
    ],
    "ipaddress.IPv6Address.is_reserved": [
        "<builtin>.any"
    ],
    "ipaddress.IPv6Address.ipv4_mapped": [
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv6Address.teredo": [
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv6Address.sixtofour": [
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv6Interface.__str__": [
        "ipaddress._BaseV6._string_from_ip_int"
    ],
    "ipaddress.IPv6Interface.__eq__": [
        "ipaddress._BaseAddress.__eq__"
    ],
    "ipaddress.IPv6Interface.__lt__": [
        "ipaddress._BaseAddress.__lt__"
    ],
    "ipaddress.IPv6Interface.__hash__": [
        "<builtin>.int"
    ],
    "ipaddress.IPv6Interface.ip": [
        "ipaddress.IPv6Address.__init__"
    ],
    "ipaddress.IPv6Interface.with_prefixlen": [
        "ipaddress._BaseV6._string_from_ip_int"
    ],
    "ipaddress.IPv6Interface.with_netmask": [
        "ipaddress._BaseV6._string_from_ip_int"
    ],
    "ipaddress.IPv6Interface.with_hostmask": [
        "ipaddress._BaseV6._string_from_ip_int"
    ],
    "ipaddress.IPv6Network.hosts": [
        "ipaddress.IPv6Address.__init__",
        "<builtin>.range",
        "<builtin>.int"
    ],
    "urllib3.request.RequestMethods.urlopen": [
        "<builtin>.NotImplementedError"
    ],
    "urllib3.request.RequestMethods.request": [
        "urllib3.request.RequestMethods.request_encode_url",
        "urllib3.request.RequestMethods.request_encode_body"
    ],
    "urllib3.request.RequestMethods.request_encode_body": [
        "packages.six.moves.urllib.parse.urlencode",
        "urllib3.request.RequestMethods.urlopen",
        "<builtin>.TypeError",
        "<map>.update",
        "urllib3.connectionpool.HTTPConnectionPool.urlopen",
        "urllib3.poolmanager.PoolManager.urlopen",
        "urllib3.filepost.encode_multipart_formdata"
    ],
    "packages.six.moves.urllib.parse.urlencode": [],
    "urllib3.filepost.encode_multipart_formdata": [
        "_io.BytesIO",
        "<builtin>.isinstance",
        "<builtin>.str",
        "urllib3.filepost.iter_field_objects",
        "urllib3.packages.six.b",
        "urllib3.filepost.choose_boundary"
    ],
    "urllib3.filepost.choose_boundary": [],
    "urllib3.filepost.iter_field_objects": [
        "<builtin>.iter",
        "urllib3.packages.six.iteritems",
        "urllib3.fields.RequestField.from_tuples",
        "<builtin>.isinstance"
    ],
    "urllib3.packages.six.iteritems": [],
    "urllib3.fields.RequestField.from_tuples": [
        "<builtin>.isinstance",
        "urllib3.fields.RequestField.make_multipart",
        "<builtin>.len",
        "urllib3.fields.guess_content_type",
        "urllib3.fields.RequestField.__init__"
    ],
    "urllib3.fields.guess_content_type": [
        "mimetypes.guess_type"
    ],
    "urllib3.fields.RequestField.__init__": [
        "<builtin>.dict"
    ],
    "urllib3.fields.RequestField.make_multipart": [],
    "urllib3.connectionpool.HTTPSConnectionPool._prepare_proxy": [],
    "urllib3.request.RequestMethods.request_encode_url": [
        "packages.six.moves.urllib.parse.urlencode",
        "urllib3.request.RequestMethods.urlopen",
        "<map>.update",
        "urllib3.connectionpool.HTTPConnectionPool.urlopen",
        "urllib3.poolmanager.PoolManager.urlopen"
    ],
    "urllib3.filepost.iter_fields": [
        "urllib3.packages.six.iteritems",
        "<builtin>.isinstance"
    ],
    "urllib3.fields.format_header_param_rfc2231": [
        "<builtin>.any",
        "<builtin>.isinstance"
    ],
    "urllib3.fields._replace_multiple": [
        "<map>.keys",
        "re.compile",
        "re.escape"
    ],
    "urllib3.fields.format_header_param_html5": [
        "urllib3.fields._replace_multiple",
        "<builtin>.isinstance"
    ],
    "urllib3.fields.RequestField._render_part": [
        "urllib3.fields.format_header_param_html5"
    ],
    "urllib3.fields.RequestField._render_parts": [
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "urllib3.fields.RequestField.render_headers": [
        "<map>.items",
        "<map>.get",
        "<list>.append"
    ],
    "urllib3.response.DeflateDecoder.__getattr__": [
        "<builtin>.getattr"
    ],
    "urllib3.response.GzipDecoder.__getattr__": [
        "<builtin>.getattr"
    ],
    "urllib3.response.HTTPResponse.data": [
        "urllib3.response.HTTPResponse.read"
    ],
    "urllib3.response.HTTPResponse.isclosed": [
        "urllib3.util.response.is_fp_closed"
    ],
    "urllib3.response.HTTPResponse._fp_read": [
        "<builtin>.min",
        "_io.BytesIO"
    ],
    "urllib3.response.HTTPResponse.stream": [
        "urllib3.response.HTTPResponse.supports_chunked_reads",
        "urllib3.response.HTTPResponse.read",
        "urllib3.response.HTTPResponse.read_chunked",
        "urllib3.util.response.is_fp_closed"
    ],
    "urllib3.response.HTTPResponse.supports_chunked_reads": [
        "<builtin>.hasattr"
    ],
    "urllib3.response.HTTPResponse.read_chunked": [
        "urllib3.response.HTTPResponse.supports_chunked_reads",
        "urllib3.response.HTTPResponse._error_catcher",
        "urllib3.response.HTTPResponse._init_decoder"
    ],
    "urllib3.response.HTTPResponse.closed": [
        "<builtin>.hasattr"
    ],
    "urllib3.response.HTTPResponse.fileno": [
        "<builtin>.hasattr",
        "<builtin>.IOError"
    ],
    "urllib3.response.HTTPResponse.flush": [
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "urllib3.response.HTTPResponse.readinto": [
        "urllib3.response.HTTPResponse.read",
        "<builtin>.len"
    ],
    "urllib3.response.HTTPResponse._update_chunk_length": [
        "urllib3.exceptions.InvalidChunkLength.__init__",
        "urllib3.response.HTTPResponse.close",
        "<builtin>.int"
    ],
    "urllib3.response.HTTPResponse.close": [],
    "urllib3.response.HTTPResponse.tell": [],
    "urllib3.response.HTTPResponse.geturl": [
        "<builtin>.len"
    ],
    "urllib3.response.HTTPResponse.__iter__": [
        "<list>.append",
        "urllib3.response.HTTPResponse.stream"
    ],
    "urllib3.util.queue.LifoQueue._init": [
        "_collections.deque"
    ],
    "urllib3.util.queue.LifoQueue._qsize": [
        "<builtin>.len"
    ],
    "urllib3.poolmanager._default_key_normalizer": [
        "<builtin>.tuple",
        "<builtin>.frozenset",
        "<builtin>.list"
    ],
    "urllib3.poolmanager.PoolManager.__exit__": [
        "urllib3.poolmanager.PoolManager.clear"
    ],
    "urllib3.poolmanager.PoolManager.clear": [],
    "urllib3.poolmanager.PoolManager.connection_from_host": [
        "urllib3.poolmanager.PoolManager.connection_from_context",
        "<map>.get",
        "urllib3.poolmanager.PoolManager._merge_pool_kwargs"
    ],
    "urllib3.poolmanager.PoolManager._merge_pool_kwargs": [],
    "urllib3.poolmanager.PoolManager.connection_from_context": [
        "urllib3.poolmanager.PoolManager.connection_from_pool_key",
        "<map>",
        "<map>.get",
        "urllib3.exceptions.URLSchemeUnknown.__init__"
    ],
    "urllib3.poolmanager.PoolManager.connection_from_pool_key": [],
    "urllib3.poolmanager.PoolManager.connection_from_url": [
        "urllib3.poolmanager.ProxyManager.connection_from_host",
        "urllib3.util.url.parse_url",
        "urllib3.poolmanager.PoolManager.connection_from_host"
    ],
    "urllib3.poolmanager.PoolManager._proxy_requires_url_absolute_form": [
        "urllib3.util.proxy.connection_requires_http_tunnel"
    ],
    "urllib3.poolmanager.PoolManager.urlopen": [
        "urllib3.poolmanager.PoolManager._validate_proxy_scheme_url_selection",
        "urllib3.poolmanager.PoolManager._proxy_requires_url_absolute_form",
        "<builtin>.list",
        "urllib3.util.url.parse_url",
        "<builtin>.isinstance",
        "urllib3.poolmanager.ProxyManager.urlopen",
        "urllib3.poolmanager.ProxyManager.connection_from_host",
        "urllib3.poolmanager.PoolManager.connection_from_host",
        "urllib3.packages.six.iterkeys",
        "urllib3.poolmanager.PoolManager.urlopen",
        "urllib3.util.retry.Retry.increment",
        "urllib3.util.retry.Retry.from_int",
        "logging.Logger.info",
        "packages.six.moves.urllib.parse.urljoin"
    ],
    "urllib3.poolmanager.PoolManager._validate_proxy_scheme_url_selection": [],
    "packages.six.moves.urllib.parse.urljoin": [],
    "urllib3.packages.six.iterkeys": [],
    "urllib3.poolmanager.ProxyManager.__init__": [
        "<builtin>.super",
        "urllib3.util.url.parse_url",
        "<builtin>.isinstance",
        "urllib3.exceptions.ProxySchemeUnknown.__init__",
        "<map>.get"
    ],
    "urllib3.poolmanager.ProxyManager.connection_from_host": [
        "<builtin>.super"
    ],
    "urllib3.poolmanager.ProxyManager._set_proxy_headers": [
        "<map>.update",
        "urllib3.util.url.parse_url"
    ],
    "urllib3.poolmanager.ProxyManager.urlopen": [
        "<builtin>.super",
        "urllib3.util.proxy.connection_requires_http_tunnel",
        "urllib3.poolmanager.ProxyManager._set_proxy_headers",
        "urllib3.util.url.parse_url"
    ],
    "urllib3.poolmanager.proxy_from_url": [
        "urllib3.poolmanager.ProxyManager.__init__"
    ],
    "requests.exceptions.RequestException.__init__": [
        "<builtin>.super",
        "<builtin>.hasattr"
    ],
    "requests.exceptions.JSONDecodeError.__init__": [
        "requests.exceptions.RequestException.__init__"
    ],
    "charset_normalizer.api.from_bytes": [
        "<builtin>.sum",
        "logging.Logger.debug",
        "<builtin>.isinstance",
        "<builtin>.int",
        "charset_normalizer.utils.cut_sequence_chunks",
        "<builtin>.TypeError",
        "charset_normalizer.cd.encoding_languages",
        "charset_normalizer.utils.any_specified_encoding",
        "logging.Logger.addHandler",
        "<builtin>.str",
        "<list>.append",
        "charset_normalizer.utils.iana_name",
        "<builtin>.max",
        "charset_normalizer.cd.coherence_ratio",
        "charset_normalizer.utils.is_cp_similar",
        "charset_normalizer.cd.merge_coherence_ratios",
        "logging.Logger.log",
        "charset_normalizer.utils.is_multi_byte_encoding",
        "logging.Logger.removeHandler",
        "<builtin>.set",
        "charset_normalizer.utils.identify_sig_or_bom",
        "charset_normalizer.models.CharsetMatch.__init__",
        "<builtin>.range",
        "charset_normalizer.utils.should_strip_sig_or_bom",
        "<builtin>.round",
        "charset_normalizer.models.CharsetMatches.__init__",
        "<builtin>.type",
        "<builtin>.len",
        "charset_normalizer.cd.mb_encoding_languages",
        "logging.Logger.setLevel"
    ],
    "charset_normalizer.models.CharsetMatches.__init__": [
        "<builtin>.sorted"
    ],
    "charset_normalizer.utils.iana_name": [
        "<map>.items",
        "<builtin>.ValueError"
    ],
    "charset_normalizer.utils.any_specified_encoding": [
        "<map>.items",
        "<builtin>.isinstance",
        "re.findall",
        "<builtin>.len",
        "<builtin>.min"
    ],
    "charset_normalizer.utils.identify_sig_or_bom": [
        "<builtin>.isinstance"
    ],
    "charset_normalizer.utils.should_strip_sig_or_bom": [],
    "charset_normalizer.utils.is_cp_similar": [],
    "charset_normalizer.utils.cut_sequence_chunks": [
        "<builtin>.min",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "charset_normalizer.models.CharsetMatch.__init__": [],
    "charset_normalizer.cd.merge_coherence_ratios": [
        "<builtin>.sum",
        "<builtin>.round",
        "<builtin>.sorted",
        "<builtin>.len"
    ],
    "charset_normalizer.api.from_fp": [
        "charset_normalizer.api.from_bytes"
    ],
    "charset_normalizer.api.from_path": [
        "<builtin>.open",
        "charset_normalizer.api.from_fp"
    ],
    "charset_normalizer.api.normalize": [
        "posixpath.splitext",
        "<builtin>.list",
        "<builtin>.str",
        "charset_normalizer.api.from_path",
        "posixpath.basename",
        "<builtin>.open",
        "<builtin>.len",
        "<builtin>.IOError",
        "warnings.warn"
    ],
    "charset_normalizer.md.TooManySymbolOrPunctuationPlugin.feed": [
        "charset_normalizer.utils.is_emoticon",
        "charset_normalizer.utils.is_punctuation",
        "charset_normalizer.utils.is_symbol"
    ],
    "charset_normalizer.md.TooManyAccentuatedPlugin.feed": [
        "charset_normalizer.utils.is_accentuated"
    ],
    "charset_normalizer.md.UnprintablePlugin.feed": [
        "charset_normalizer.utils.is_unprintable"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin.eligible": [
        "charset_normalizer.utils.is_latin"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin.feed": [
        "charset_normalizer.utils.remove_accent",
        "charset_normalizer.utils.is_accentuated"
    ],
    "charset_normalizer.md.SuspiciousRange.feed": [
        "charset_normalizer.utils.unicode_range",
        "charset_normalizer.utils.is_punctuation",
        "charset_normalizer.md.is_suspiciously_successive_range"
    ],
    "charset_normalizer.md.SuperWeirdWordPlugin.feed": [
        "charset_normalizer.utils.is_symbol",
        "charset_normalizer.utils.is_separator",
        "charset_normalizer.utils.is_thai",
        "charset_normalizer.utils.is_accentuated",
        "charset_normalizer.utils.is_latin",
        "charset_normalizer.utils.is_katakana",
        "charset_normalizer.utils.is_punctuation",
        "charset_normalizer.utils.is_hiragana",
        "<builtin>.len",
        "charset_normalizer.utils.is_cjk",
        "charset_normalizer.utils.is_hangul"
    ],
    "charset_normalizer.md.CjkInvalidStopPlugin.feed": [
        "charset_normalizer.utils.is_cjk"
    ],
    "charset_normalizer.md.ArchaicUpperLowerPlugin.feed": [
        "charset_normalizer.utils.is_ascii",
        "charset_normalizer.utils.is_case_variable"
    ],
    "charset_normalizer.utils.range_scan": [
        "charset_normalizer.utils.unicode_range",
        "<builtin>.list",
        "<builtin>.set"
    ],
    "charset_normalizer.utils.cp_similarity": [
        "charset_normalizer.utils.is_multi_byte_encoding",
        "importlib.import_module",
        "<builtin>.range",
        "<builtin>.bytes"
    ],
    "charset_normalizer.utils.set_logging_handler": [
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__",
        "logging.StreamHandler.__init__",
        "logging.Logger.addHandler",
        "logging.Logger.setLevel",
        "logging.getLogger"
    ],
    "charset_normalizer.models.CharsetMatch.__eq__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "charset_normalizer.models.CharsetMatch.__lt__": [
        "<builtin>.abs",
        "<builtin>.isinstance"
    ],
    "charset_normalizer.models.CharsetMatch.multi_byte_usage": [
        "<builtin>.len",
        "<builtin>.str"
    ],
    "charset_normalizer.models.CharsetMatch.chaos_secondary_pass": [
        "charset_normalizer.md.mess_ratio",
        "warnings.warn",
        "<builtin>.str"
    ],
    "charset_normalizer.models.CharsetMatch.coherence_non_latin": [
        "warnings.warn"
    ],
    "charset_normalizer.models.CharsetMatch.w_counter": [
        "re.sub",
        "collections.Counter.__init__",
        "warnings.warn",
        "<builtin>.str"
    ],
    "charset_normalizer.models.CharsetMatch.__str__": [
        "<builtin>.str"
    ],
    "charset_normalizer.models.CharsetMatch.add_submatch": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "charset_normalizer.models.CharsetMatch.encoding_aliases": [
        "<map>.items"
    ],
    "charset_normalizer.models.CharsetMatch.language": [
        "charset_normalizer.utils.is_multi_byte_encoding",
        "charset_normalizer.cd",
        "charset_normalizer.cd.encoding_languages",
        "charset_normalizer.cd.mb_encoding_languages",
        "<builtin>.len"
    ],
    "charset_normalizer.models.CharsetMatch.percent_chaos": [
        "<builtin>.round"
    ],
    "charset_normalizer.models.CharsetMatch.percent_coherence": [
        "<builtin>.round"
    ],
    "charset_normalizer.models.CharsetMatch.has_submatch": [
        "<builtin>.len"
    ],
    "charset_normalizer.models.CharsetMatch.alphabets": [
        "charset_normalizer.utils.unicode_range",
        "<builtin>.list",
        "<builtin>.sorted",
        "<builtin>.str"
    ],
    "charset_normalizer.models.CharsetMatch.output": [
        "<builtin>.str"
    ],
    "charset_normalizer.models.CharsetMatch.fingerprint": [
        "charset_normalizer.models.CharsetMatch.output"
    ],
    "charset_normalizer.models.CharsetMatches.__getitem__": [
        "charset_normalizer.utils.iana_name",
        "<builtin>.isinstance"
    ],
    "charset_normalizer.models.CharsetMatches.__len__": [
        "<builtin>.len"
    ],
    "charset_normalizer.models.CharsetMatches.__bool__": [
        "<builtin>.len"
    ],
    "charset_normalizer.models.CharsetMatches.append": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.sorted",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "charset_normalizer.models.CharsetMatches.first": [
        "charset_normalizer.models.CharsetMatches.best"
    ],
    "charset_normalizer.models.CharsetMatches.best": [],
    "charset_normalizer.models.CliDetectionResult.to_json": [
        "json.dumps"
    ],
    "charset_normalizer.legacy.detect": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "charset_normalizer.api.from_bytes",
        "<builtin>.type",
        "charset_normalizer.models.CharsetMatches.best"
    ],
    "charset_normalizer.legacy.CharsetNormalizerMatches.from_fp": [
        "charset_normalizer.legacy.CharsetNormalizerMatches.from_fp",
        "warnings.warn"
    ],
    "charset_normalizer.legacy.CharsetNormalizerMatches.from_bytes": [
        "charset_normalizer.legacy.CharsetNormalizerMatches.from_bytes",
        "warnings.warn"
    ],
    "charset_normalizer.legacy.CharsetNormalizerMatches.from_path": [
        "charset_normalizer.legacy.CharsetNormalizerMatches.from_path",
        "warnings.warn"
    ],
    "charset_normalizer.legacy.CharsetNormalizerMatches.normalize": [
        "warnings.warn",
        "charset_normalizer.legacy.CharsetNormalizerMatches.normalize"
    ],
    "http.cookiejar._debug": [
        "logging.Logger.debug",
        "logging.getLogger",
        "logging"
    ],
    "http.cookiejar._warn_unhandled_exception": [
        "warnings",
        "warnings.warn",
        "traceback.print_exc",
        "traceback",
        "_io.StringIO",
        "io"
    ],
    "http.cookiejar._timegm": [
        "calendar.timegm"
    ],
    "http.cookiejar.time2isoz": [
        "datetime.datetime.utcnow",
        "datetime.datetime.utcfromtimestamp"
    ],
    "http.cookiejar.time2netscape": [
        "datetime.datetime.utcnow",
        "datetime.datetime.utcfromtimestamp",
        "datetime.date.weekday"
    ],
    "http.cookiejar.offset_from_tz_string": [
        "<builtin>.int"
    ],
    "http.cookiejar._str2time": [
        "<builtin>.int",
        "http.cookiejar.offset_from_tz_string",
        "<str>.upper",
        "<list>.index",
        "<builtin>.abs",
        "http.cookiejar._timegm"
    ],
    "http.cookiejar.http2time": [
        "http.cookiejar._str2time",
        "<builtin>.int",
        "<str>.lstrip",
        "<list>.index",
        "<builtin>.float",
        "http.cookiejar._timegm"
    ],
    "http.cookiejar.iso2time": [
        "http.cookiejar._str2time"
    ],
    "http.cookiejar.split_header_words": [
        "<builtin>.isinstance",
        "<str>.lstrip",
        "<str>.startswith",
        "<str>.rstrip",
        "<list>.append",
        "re.subn",
        "http.cookiejar.unmatched"
    ],
    "http.cookiejar.unmatched": [],
    "http.cookiejar.join_header_words": [
        "re.search",
        "<list>.append"
    ],
    "http.cookiejar.parse_ns_headers": [
        "<list>.append",
        "http.cookiejar.strip_quotes",
        "<builtin>.enumerate",
        "http.cookiejar.http2time"
    ],
    "http.cookiejar.strip_quotes": [],
    "http.cookiejar.domain_match": [
        "<str>.rfind",
        "<str>.lower",
        "http.cookiejar.is_HDN",
        "<str>.startswith"
    ],
    "http.cookiejar.is_HDN": [],
    "http.cookiejar.user_domain_match": [
        "http.cookiejar.liberal_is_HDN"
    ],
    "http.cookiejar.liberal_is_HDN": [],
    "http.cookiejar.request_host": [
        "requests.cookies.MockRequest.get_full_url",
        "<str>.lower",
        "requests.cookies.MockRequest.get_header"
    ],
    "http.cookiejar.eff_request_host": [
        "<str>.find",
        "http.cookiejar.request_host"
    ],
    "http.cookiejar.request_path": [
        "requests.cookies.MockRequest.get_full_url",
        "http.cookiejar.escape_path",
        "<str>.startswith"
    ],
    "http.cookiejar.escape_path": [],
    "http.cookiejar.request_port": [
        "http.cookiejar._debug",
        "<builtin>.int"
    ],
    "http.cookiejar.reach": [
        "http.cookiejar.is_HDN"
    ],
    "http.cookiejar.is_third_party": [
        "http.cookiejar.domain_match",
        "http.cookiejar.reach",
        "http.cookiejar.request_host"
    ],
    "http.cookiejar.Cookie.get_nonstandard_attr": [
        "requests.cookies.RequestsCookieJar.get",
        "<map>.get"
    ],
    "http.cookiejar.Cookie.__repr__": [
        "<builtin>.getattr",
        "<list>.append"
    ],
    "http.cookiejar.CookiePolicy.set_ok": [
        "<builtin>.NotImplementedError"
    ],
    "http.cookiejar.CookiePolicy.return_ok": [
        "<builtin>.NotImplementedError"
    ],
    "http.cookiejar.DefaultCookiePolicy.__init__": [
        "<builtin>.tuple"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_blocked_domains": [
        "<builtin>.tuple"
    ],
    "http.cookiejar.DefaultCookiePolicy.is_blocked": [
        "http.cookiejar.user_domain_match"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_allowed_domains": [
        "<builtin>.tuple"
    ],
    "http.cookiejar.DefaultCookiePolicy.is_not_allowed": [
        "http.cookiejar.user_domain_match"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok": [
        "http.cookiejar._debug",
        "<builtin>.getattr"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_version": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_verifiability": [
        "http.cookiejar._debug",
        "http.cookiejar.is_third_party"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_name": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_path": [
        "http.cookiejar._debug",
        "http.cookiejar.DefaultCookiePolicy.path_return_ok",
        "http.cookiejar.request_path"
    ],
    "http.cookiejar.DefaultCookiePolicy.path_return_ok": [
        "http.cookiejar._debug",
        "<str>.startswith",
        "http.cookiejar.request_path",
        "<builtin>.len"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_domain": [
        "<str>.endswith",
        "http.cookiejar.DefaultCookiePolicy.is_blocked",
        "http.cookiejar.DefaultCookiePolicy.is_not_allowed",
        "http.cookiejar.eff_request_host",
        "http.cookiejar.domain_match",
        "<builtin>.len",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_port": [
        "<builtin>.str",
        "http.cookiejar._debug",
        "<builtin>.int",
        "http.cookiejar.request_port"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok": [
        "http.cookiejar._debug",
        "<builtin>.getattr"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_version": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_verifiability": [
        "http.cookiejar._debug",
        "http.cookiejar.is_third_party"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_secure": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_expires": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_port": [
        "http.cookiejar.request_port"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_domain": [
        "http.cookiejar._debug",
        "<str>.endswith",
        "http.cookiejar.eff_request_host",
        "http.cookiejar.domain_match"
    ],
    "http.cookiejar.DefaultCookiePolicy.domain_return_ok": [
        "<str>.endswith",
        "http.cookiejar.DefaultCookiePolicy.is_not_allowed",
        "<str>.startswith",
        "http.cookiejar.eff_request_host",
        "http.cookiejar.DefaultCookiePolicy.is_blocked",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.vals_sorted_by_key": [
        "<map>.keys",
        "email.message.Message.keys",
        "<builtin>.map",
        "<builtin>.sorted"
    ],
    "http.cookiejar.deepvalues": [
        "http.cookiejar.vals_sorted_by_key"
    ],
    "http.cookiejar.CookieJar.__init__": [
        "http.cookiejar.DefaultCookiePolicy.__init__",
        "threading.RLock"
    ],
    "http.cookiejar.CookieJar._cookies_for_domain": [
        "http.cookiejar.DefaultCookiePolicy.domain_return_ok",
        "<list>.append",
        "http.cookiejar._debug",
        "http.cookiejar.DefaultCookiePolicy.path_return_ok",
        "http.cookiejar.DefaultCookiePolicy.return_ok"
    ],
    "http.cookiejar.CookieJar._cookies_for_request": [
        "<map>.keys",
        "<list>.extend",
        "email.message.Message.keys"
    ],
    "http.cookiejar.CookieJar._cookie_attrs": [
        "<list>.sort",
        "<list>.append"
    ],
    "http.cookiejar.CookieJar.add_cookie_header": [
        "threading._RLock.acquire",
        "http.cookiejar.CookieJar.clear_expired_cookies",
        "http.cookiejar.CookieJar._cookie_attrs",
        "requests.cookies.MockRequest.has_header",
        "<builtin>.int",
        "requests.cookies.MockRequest.add_unredirected_header",
        "http.cookiejar._debug",
        "http.cookiejar.CookieJar._cookies_for_request"
    ],
    "http.cookiejar.CookieJar.clear_expired_cookies": [
        "threading._RLock.acquire",
        "http.cookiejar.CookieJar.__iter__",
        "http.cookiejar.CookieJar.clear"
    ],
    "http.cookiejar.CookieJar.__iter__": [
        "http.cookiejar.deepvalues"
    ],
    "http.cookiejar.CookieJar.clear": [
        "<builtin>.ValueError"
    ],
    "http.cookiejar.CookieJar._normalized_cookie_tuples": [
        "<list>.append",
        "http.cookiejar._debug",
        "<str>.lower",
        "<builtin>.int"
    ],
    "http.cookiejar.CookieJar._cookie_from_cookie_tuple": [
        "http.cookiejar.Cookie.__init__",
        "<builtin>.int",
        "http.cookiejar.CookieJar.clear",
        "http.cookiejar.escape_path",
        "http.cookiejar.request_path",
        "<str>.startswith",
        "re.sub",
        "http.cookiejar.eff_request_host",
        "http.cookiejar.request_port",
        "<builtin>.len",
        "http.cookiejar._debug",
        "<builtin>.bool",
        "<str>.rfind"
    ],
    "http.cookiejar.CookieJar._cookies_from_attrs_set": [
        "http.cookiejar.CookieJar._cookie_from_cookie_tuple",
        "http.cookiejar.CookieJar._normalized_cookie_tuples",
        "<list>.append"
    ],
    "http.cookiejar.CookieJar._process_rfc2109_cookies": [
        "<builtin>.getattr"
    ],
    "http.cookiejar.CookieJar.make_cookies": [
        "http.cookiejar._warn_unhandled_exception",
        "<builtin>.int",
        "http.cookiejar.parse_ns_headers",
        "<list>.extend",
        "http.cookiejar.split_header_words",
        "http.cookiejar.CookieJar._process_rfc2109_cookies",
        "<builtin>.filter",
        "http.cookiejar.CookieJar._cookies_from_attrs_set",
        "requests.cookies.MockResponse.info"
    ],
    "http.cookiejar.CookieJar.set_cookie_if_ok": [
        "threading._RLock.acquire",
        "http.cookiejar.DefaultCookiePolicy.set_ok",
        "http.cookiejar.CookieJar.set_cookie",
        "<builtin>.int",
        "requests.cookies.RequestsCookieJar.set_cookie"
    ],
    "http.cookiejar.CookieJar.set_cookie": [
        "threading._RLock.acquire"
    ],
    "http.cookiejar.CookieJar.extract_cookies": [
        "threading._RLock.acquire",
        "http.cookiejar.DefaultCookiePolicy.set_ok",
        "http.cookiejar.CookieJar.set_cookie",
        "http.cookiejar.CookieJar.make_cookies",
        "requests.cookies.RequestsCookieJar.set_cookie",
        "http.cookiejar._debug",
        "requests.cookies.MockResponse.info"
    ],
    "http.cookiejar.CookieJar.clear_session_cookies": [
        "threading._RLock.acquire",
        "http.cookiejar.CookieJar.__iter__",
        "http.cookiejar.CookieJar.clear"
    ],
    "http.cookiejar.CookieJar.__len__": [
        "http.cookiejar.CookieJar.__iter__"
    ],
    "http.cookiejar.CookieJar.__repr__": [
        "http.cookiejar.CookieJar.__iter__",
        "<list>.append"
    ],
    "http.cookiejar.CookieJar.__str__": [
        "http.cookiejar.CookieJar.__iter__",
        "<list>.append"
    ],
    "http.cookiejar.FileCookieJar.__init__": [
        "os._fspath",
        "<builtin>.bool",
        "http.cookiejar.CookieJar.__init__"
    ],
    "http.cookiejar.FileCookieJar.save": [
        "<builtin>.NotImplementedError"
    ],
    "http.cookiejar.FileCookieJar.load": [
        "http.cookiejar.LWPCookieJar._really_load",
        "http.cookiejar.MozillaCookieJar._really_load",
        "<builtin>.open",
        "<builtin>.ValueError"
    ],
    "http.cookiejar.FileCookieJar.revert": [
        "threading._RLock.acquire",
        "copy.deepcopy",
        "http.cookiejar.FileCookieJar.load",
        "<builtin>.ValueError"
    ],
    "http.cookiejar.lwp_cookie_str": [
        "http.cookiejar.join_header_words",
        "<builtin>.sorted",
        "<list>.append"
    ],
    "http.cookiejar.LWPCookieJar.as_lwp_str": [
        "<list>.append"
    ],
    "http.cookiejar.LWPCookieJar.save": [
        "http.cookiejar.LWPCookieJar.as_lwp_str",
        "<builtin>.open",
        "<builtin>.ValueError"
    ],
    "http.cookiejar.LWPCookieJar._really_load": [
        "http.cookiejar.Cookie.__init__",
        "http.cookiejar._warn_unhandled_exception",
        "http.cookiejar.iso2time",
        "<map>",
        "http.cookiejar.CookieJar.set_cookie",
        "http.cookiejar.split_header_words",
        "<builtin>.len",
        "http.cookiejar.Cookie.is_expired"
    ],
    "http.cookiejar.Cookie.is_expired": [],
    "http.cookiejar.MozillaCookieJar._really_load": [
        "http.cookiejar.Cookie.__init__",
        "http.cookiejar.CookieJar.set_cookie",
        "http.cookiejar.Cookie.is_expired",
        "http.cookiejar._warn_unhandled_exception"
    ],
    "http.cookiejar.MozillaCookieJar.save": [
        "<builtin>.open",
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "urllib.request.urlopen": [
        "urllib.request.build_opener",
        "ssl.create_default_context",
        "warnings",
        "urllib.request.HTTPSHandler.__init__",
        "urllib.request.OpenerDirector.open",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "urllib.request.build_opener": [
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.issubclass",
        "urllib.request.OpenerDirector.add_handler",
        "urllib.request.OpenerDirector.__init__",
        "<list>.append",
        "<builtin>.hasattr",
        "<list>.remove"
    ],
    "urllib.request.OpenerDirector.__init__": [],
    "urllib.request.OpenerDirector.add_handler": [
        "bisect.insort_right",
        "<builtin>.int",
        "<builtin>.TypeError",
        "<builtin>.dir",
        "<builtin>.type",
        "<map>.get",
        "<map>.setdefault",
        "<builtin>.hasattr"
    ],
    "urllib.request.HTTPSHandler.__init__": [
        "urllib.request.AbstractHTTPHandler.__init__"
    ],
    "urllib.request.AbstractHTTPHandler.__init__": [],
    "urllib.request.OpenerDirector.open": [
        "urllib.request.Request.__init__",
        "<builtin>.isinstance",
        "urllib.request.OpenerDirector._open",
        "<builtin>.getattr",
        "<map>.get",
        "urllib.request.Request.get_method"
    ],
    "urllib.request.Request.__init__": [
        "urllib.request.request_host",
        "<map>.items",
        "urllib.request.Request.add_header"
    ],
    "urllib.request.Request.add_header": [],
    "urllib.request.request_host": [
        "urllib.request.Request.get_header",
        "urllib.parse.urlparse",
        "<str>.lower"
    ],
    "urllib.request.Request.get_header": [
        "<map>.get"
    ],
    "urllib.request.Request.get_method": [
        "<builtin>.getattr"
    ],
    "urllib.request.OpenerDirector._open": [
        "urllib.request.OpenerDirector._call_chain"
    ],
    "urllib.request.OpenerDirector._call_chain": [
        "<builtin>.getattr"
    ],
    "urllib.request.urlretrieve": [
        "posixpath.normpath",
        "urllib.parse._splittype",
        "urllib.error.ContentTooShortError.__init__",
        "contextlib.closing.__init__",
        "ntpath.normpath",
        "tempfile.NamedTemporaryFile",
        "<builtin>.open",
        "<list>.append",
        "urllib.request.urlopen"
    ],
    "urllib.error.ContentTooShortError.__init__": [
        "urllib.error.URLError.__init__"
    ],
    "urllib.error.URLError.__init__": [],
    "urllib.request.Request._parse": [
        "urllib.parse.unquote",
        "<builtin>.ValueError",
        "urllib.parse._splithost",
        "urllib.parse._splittype"
    ],
    "urllib.request.Request.remove_header": [
        "<map>.pop"
    ],
    "urllib.request.Request.header_items": [
        "<map>.items",
        "<builtin>.list"
    ],
    "urllib.request.OpenerDirector.error": [
        "urllib.request.OpenerDirector._call_chain"
    ],
    "urllib.request.BaseHandler.__lt__": [
        "<builtin>.hasattr"
    ],
    "urllib.request.HTTPDefaultErrorHandler.http_error_default": [
        "urllib.error.HTTPError.__init__"
    ],
    "urllib.error.HTTPError.__init__": [],
    "urllib.request.HTTPRedirectHandler.redirect_request": [
        "urllib.request.Request.__init__",
        "urllib.error.HTTPError.__init__",
        "<str>.replace"
    ],
    "urllib.request.HTTPRedirectHandler.http_error_302": [
        "<builtin>.list",
        "<builtin>.len",
        "urllib.parse.urlparse",
        "urllib.request.HTTPRedirectHandler.redirect_request",
        "urllib.error.HTTPError.__init__",
        "urllib.parse.urlunparse",
        "urllib.parse.quote",
        "<map>.get",
        "urllib.parse.urljoin",
        "<builtin>.hasattr"
    ],
    "urllib.request._parse_proxy": [
        "urllib.parse._splituser",
        "<builtin>.ValueError",
        "urllib.parse._splitpasswd",
        "urllib.parse._splittype"
    ],
    "urllib.request.ProxyHandler.__init__": [
        "<builtin>.hasattr",
        "<builtin>.setattr",
        "urllib.request.getproxies"
    ],
    "urllib.request.getproxies": [
        "urllib.request.getproxies_environment",
        "urllib.request.getproxies_registry"
    ],
    "urllib.request.getproxies_environment": [
        "<map>.pop"
    ],
    "urllib.request.getproxies_registry": [
        "re.match",
        "<builtin>.str"
    ],
    "urllib.request.ProxyHandler.proxy_open": [
        "urllib.parse.unquote",
        "base64.b64encode",
        "urllib.request.proxy_bypass",
        "urllib.request._parse_proxy"
    ],
    "urllib.request.proxy_bypass": [
        "urllib.request.getproxies_environment",
        "urllib.request.proxy_bypass_registry",
        "urllib.request.proxy_bypass_environment"
    ],
    "urllib.request.proxy_bypass_registry": [
        "<builtin>.str",
        "socket.getfqdn",
        "urllib.parse._splitport",
        "re.match",
        "<list>.append"
    ],
    "urllib.request.proxy_bypass_environment": [
        "urllib.request.getproxies_environment",
        "<str>.endswith",
        "<str>.lstrip",
        "urllib.parse._splitport",
        "<str>.strip",
        "<str>.lower"
    ],
    "urllib.request.HTTPPasswordMgr.add_password": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "urllib.request.HTTPPasswordMgr.reduce_uri"
    ],
    "urllib.request.HTTPPasswordMgr.reduce_uri": [
        "urllib.parse.urlsplit",
        "urllib.parse._splitport",
        "<map>.get"
    ],
    "urllib.request.HTTPPasswordMgr.find_user_password": [
        "urllib.request.HTTPPasswordMgr.reduce_uri",
        "urllib.request.HTTPPasswordMgr.is_suburi",
        "<map>.items",
        "<map>.get"
    ],
    "urllib.request.HTTPPasswordMgr.is_suburi": [
        "genericpath.commonprefix",
        "<builtin>.len"
    ],
    "urllib.request.HTTPPasswordMgrWithDefaultRealm.find_user_password": [
        "urllib.request.HTTPPasswordMgr.find_user_password"
    ],
    "urllib.request.HTTPPasswordMgrWithPriorAuth.__init__": [
        "<builtin>.super"
    ],
    "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password": [
        "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated",
        "<builtin>.super"
    ],
    "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated": [
        "<builtin>.isinstance",
        "urllib.request.HTTPPasswordMgr.reduce_uri"
    ],
    "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated": [
        "urllib.request.HTTPPasswordMgr.is_suburi",
        "urllib.request.HTTPPasswordMgr.reduce_uri"
    ],
    "urllib.request.AbstractBasicAuthHandler.__init__": [
        "urllib.request.HTTPPasswordMgr.__init__"
    ],
    "urllib.request.HTTPPasswordMgr.__init__": [],
    "urllib.request.AbstractBasicAuthHandler._parse_realm": [
        "warnings.warn"
    ],
    "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed": [
        "urllib.request.AbstractBasicAuthHandler.retry_http_basic_auth",
        "<builtin>.ValueError",
        "urllib.request.AbstractBasicAuthHandler._parse_realm"
    ],
    "urllib.request.AbstractBasicAuthHandler.retry_http_basic_auth": [
        "urllib.request.HTTPPasswordMgr.find_user_password",
        "base64.b64encode"
    ],
    "urllib.request.AbstractBasicAuthHandler.http_request": [
        "urllib.request.HTTPPasswordMgr.find_user_password",
        "<builtin>.hasattr",
        "base64.standard_b64encode"
    ],
    "urllib.request.AbstractBasicAuthHandler.http_response": [
        "<builtin>.hasattr"
    ],
    "urllib.request.HTTPBasicAuthHandler.http_error_401": [
        "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"
    ],
    "urllib.request.ProxyBasicAuthHandler.http_error_407": [
        "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"
    ],
    "urllib.request.AbstractDigestAuthHandler.__init__": [
        "urllib.request.HTTPPasswordMgr.__init__"
    ],
    "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed": [
        "urllib.error.HTTPError.__init__",
        "urllib.request.AbstractDigestAuthHandler.retry_http_digest_auth",
        "<builtin>.ValueError"
    ],
    "urllib.request.AbstractDigestAuthHandler.retry_http_digest_auth": [
        "urllib.request.parse_http_list",
        "urllib.request.AbstractDigestAuthHandler.get_authorization",
        "urllib.request.parse_keqv_list",
        "<builtin>.filter"
    ],
    "urllib.request.parse_http_list": [
        "<str>.strip",
        "<list>.append"
    ],
    "urllib.request.parse_keqv_list": [],
    "urllib.request.AbstractDigestAuthHandler.get_authorization": [
        "urllib.request.AbstractDigestAuthHandler.get_entity_digest",
        "urllib.request.AbstractDigestAuthHandler.get_cnonce",
        "urllib.request.HTTPPasswordMgr.find_user_password",
        "urllib.error.URLError.__init__",
        "<map>.get",
        "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls",
        "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda1>"
    ],
    "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls": [
        "<builtin>.ValueError"
    ],
    "urllib.request.AbstractDigestAuthHandler.get_entity_digest": [],
    "urllib.request.AbstractDigestAuthHandler.get_cnonce": [],
    "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda1>": [
        "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda1>"
    ],
    "urllib.request.HTTPDigestAuthHandler.http_error_401": [
        "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed",
        "urllib.request.AbstractDigestAuthHandler.reset_retry_count",
        "urllib.parse.urlparse"
    ],
    "urllib.request.AbstractDigestAuthHandler.reset_retry_count": [],
    "urllib.request.ProxyDigestAuthHandler.http_error_407": [
        "urllib.request.AbstractDigestAuthHandler.reset_retry_count",
        "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"
    ],
    "urllib.request.AbstractHTTPHandler.do_request_": [
        "<builtin>.isinstance",
        "urllib.parse._splittype",
        "<builtin>.TypeError",
        "urllib.error.URLError.__init__",
        "urllib.parse._splithost",
        "<builtin>.str",
        "urllib.request.AbstractHTTPHandler._get_content_length"
    ],
    "urllib.request.AbstractHTTPHandler._get_content_length": [],
    "urllib.request.AbstractHTTPHandler.do_open": [
        "<builtin>.dict",
        "urllib.error.URLError.__init__"
    ],
    "urllib.request.HTTPHandler.http_open": [
        "urllib.request.AbstractHTTPHandler.do_open"
    ],
    "urllib.request.HTTPSHandler.https_open": [
        "urllib.request.AbstractHTTPHandler.do_open"
    ],
    "urllib.request.HTTPCookieProcessor.__init__": [
        "http.cookiejar"
    ],
    "urllib.request.UnknownHandler.unknown_open": [
        "urllib.error.URLError.__init__"
    ],
    "urllib.request.FileHandler.file_open": [
        "urllib.request.FileHandler.open_local_file",
        "urllib.error.URLError.__init__",
        "urllib.request.FileHandler.get_names"
    ],
    "urllib.request.FileHandler.open_local_file": [
        "mimetypes.guess_type",
        "email.message_from_string",
        "email.utils.formatdate",
        "urllib.parse._splitport",
        "mimetypes",
        "email.utils",
        "urllib.request._safe_gethostbyname",
        "urllib.response.addinfourl.__init__",
        "urllib.error.URLError.__init__",
        "urllib.request.FileHandler.get_names",
        "<builtin>.open",
        "urllib.request.url2pathname"
    ],
    "urllib.request.url2pathname": [
        "urllib.parse.unquote"
    ],
    "urllib.request._safe_gethostbyname": [],
    "urllib.request.FileHandler.get_names": [
        "<builtin>.tuple"
    ],
    "urllib.response.addinfourl.__init__": [
        "<builtin>.super"
    ],
    "ftplib": [
        "ssl",
        "ftplib.error_perm",
        "ftplib.Error",
        "ftplib.error_reply",
        "ftplib.test",
        "ftplib.error_temp",
        "socket",
        "ftplib.error_proto",
        "ftplib.FTP"
    ],
    "urllib.request.FTPHandler.ftp_open": [
        "ftplib",
        "mimetypes.guess_type",
        "<builtin>.list",
        "email.message_from_string",
        "<builtin>.int",
        "urllib.parse._splituser",
        "urllib.parse._splitport",
        "mimetypes",
        "urllib.request.ftpwrapper.retrfile",
        "urllib.response.addinfourl.__init__",
        "urllib.request.FTPHandler.connect_ftp",
        "urllib.error.URLError.__init__",
        "urllib.parse._splitpasswd",
        "urllib.parse.unquote",
        "urllib.parse._splitvalue",
        "urllib.parse._splitattr",
        "<builtin>.map"
    ],
    "ftplib.Error": [],
    "ftplib.error_reply": [],
    "ftplib.error_temp": [],
    "ftplib.error_perm": [],
    "ftplib.error_proto": [],
    "ftplib.FTP": [],
    "ftplib.test": [
        "ftplib.FTP.dir",
        "codecs.StreamRecoder.write",
        "ftplib.FTP.__init__",
        "ftplib.FTP.login",
        "netrc",
        "ftplib.FTP.set_debuglevel",
        "netrc.netrc.__init__",
        "ftplib.FTP.quit",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "ftplib.FTP.retrbinary",
        "ftplib.FTP.set_pasv",
        "ftplib.FTP.sendcmd",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.len",
        "rich.file_proxy.FileProxy.write",
        "<builtin>.print"
    ],
    "netrc": [
        "netrc.NetrcParseError",
        "netrc.netrc",
        "stat",
        "netrc.netrc.__init__",
        "os",
        "shlex",
        "<builtin>.print"
    ],
    "netrc.NetrcParseError": [],
    "netrc.netrc": [],
    "netrc.netrc.__init__": [
        "ntpath.expanduser",
        "posixpath.join",
        "ntpath.join",
        "<builtin>.open",
        "posixpath.expanduser",
        "netrc.netrc._parse"
    ],
    "netrc.netrc._parse": [
        "netrc.NetrcParseError.__init__",
        "<str>.replace",
        "shlex.shlex.push_token",
        "<str>.startswith",
        "shlex.shlex.__init__",
        "<builtin>.len",
        "<builtin>.repr",
        "shlex.shlex.get_token",
        "codecs.StreamRecoder.readline"
    ],
    "netrc.NetrcParseError.__init__": [],
    "ftplib.FTP.__init__": [
        "ftplib.FTP.login",
        "ftplib.FTP.connect"
    ],
    "ftplib.FTP.connect": [
        "socket.socket.makefile",
        "ftplib.FTP.getresp",
        "socket.create_connection"
    ],
    "ftplib.FTP.getresp": [
        "<builtin>.print",
        "ftplib.FTP.getmultiline",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.getmultiline": [
        "ftplib.FTP.getline"
    ],
    "ftplib.FTP.getline": [
        "<builtin>.print",
        "ftplib.FTP.sanitize",
        "<builtin>.len"
    ],
    "ftplib.FTP.sanitize": [
        "<builtin>.repr",
        "<str>.rstrip",
        "<builtin>.len"
    ],
    "ftplib.FTP.login": [
        "ftplib.FTP.sendcmd"
    ],
    "ftplib.FTP.sendcmd": [
        "ftplib.FTP.getresp",
        "ftplib.FTP.putcmd"
    ],
    "ftplib.FTP.putcmd": [
        "<builtin>.print",
        "ftplib.FTP.putline",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.putline": [
        "<builtin>.print",
        "ftplib.FTP.sanitize",
        "<builtin>.ValueError"
    ],
    "ftplib.FTP.set_debuglevel": [],
    "ftplib.FTP.retrbinary": [
        "codecs.StreamRecoder.write",
        "<builtin>.isinstance",
        "<map>",
        "ftplib.FTP.transfercmd",
        "ftplib.FTP.voidresp",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "ftplib.FTP.voidcmd",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "ftplib.FTP.voidcmd": [
        "ftplib.FTP.voidresp",
        "ftplib.FTP.putcmd"
    ],
    "ftplib.FTP.voidresp": [
        "ftplib.FTP.getresp"
    ],
    "ftplib.FTP.transfercmd": [
        "ftplib.FTP.ntransfercmd"
    ],
    "ftplib.FTP.ntransfercmd": [
        "ftplib.FTP.getresp",
        "socket.create_connection",
        "ftplib.parse150",
        "ftplib.FTP.sendcmd",
        "ftplib.FTP.makepasv",
        "socket.socket.close",
        "ftplib.FTP.makeport"
    ],
    "ftplib.FTP.makeport": [
        "ftplib.FTP.sendeprt",
        "ftplib.FTP.sendport",
        "socket.create_server"
    ],
    "ftplib.FTP.sendeprt": [
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.sendport": [
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.makepasv": [
        "ftplib.parse229",
        "ftplib.FTP.sendcmd",
        "ftplib.parse227"
    ],
    "ftplib.parse229": [
        "<builtin>.int",
        "<builtin>.len"
    ],
    "ftplib.parse227": [
        "re.compile",
        "re",
        "<builtin>.int"
    ],
    "ftplib.parse150": [
        "re.compile",
        "pathlib.PurePath.match",
        "re",
        "<builtin>.int"
    ],
    "ftplib.FTP.set_pasv": [],
    "ftplib.FTP.dir": [
        "ftplib.FTP.retrlines",
        "<builtin>.type"
    ],
    "ftplib.FTP.retrlines": [
        "ftplib.print_line",
        "<builtin>.isinstance",
        "<builtin>.repr",
        "ftplib.FTP.transfercmd",
        "ftplib.FTP.voidresp",
        "ftplib.FTP.sendcmd",
        "<builtin>.len",
        "<builtin>.print",
        "<list>"
    ],
    "ftplib.print_line": [
        "<builtin>.print"
    ],
    "ftplib.FTP.quit": [
        "ftplib.FTP.close",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.close": [
        "socket.SocketIO.close"
    ],
    "urllib.request.FTPHandler.connect_ftp": [
        "urllib.request.ftpwrapper.__init__"
    ],
    "urllib.request.ftpwrapper.__init__": [
        "urllib.request.ftpwrapper.close",
        "urllib.request.ftpwrapper.init"
    ],
    "urllib.request.ftpwrapper.init": [
        "ftplib",
        "ftplib.FTP.__init__",
        "ftplib.FTP.connect",
        "ftplib.FTP.login",
        "ftplib.FTP.cwd"
    ],
    "ftplib.FTP.cwd": [
        "ftplib.FTP.voidcmd"
    ],
    "urllib.request.ftpwrapper.close": [
        "urllib.request.ftpwrapper.real_close"
    ],
    "urllib.request.ftpwrapper.real_close": [
        "ftplib.FTP.close",
        "urllib.request.ftpwrapper.endtransfer"
    ],
    "urllib.request.ftpwrapper.endtransfer": [],
    "urllib.request.ftpwrapper.retrfile": [
        "ftplib.FTP.pwd",
        "ftplib",
        "urllib.response.addclosehook.__init__",
        "socket.socket.close",
        "urllib.request.ftpwrapper.init",
        "urllib.error.URLError.__init__",
        "ftplib.FTP.voidcmd",
        "<builtin>.str",
        "socket.socket.makefile",
        "urllib.request.ftpwrapper.endtransfer",
        "ftplib.FTP.cwd",
        "ftplib.FTP.ntransfercmd"
    ],
    "ftplib.FTP.pwd": [
        "ftplib.parse257",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.parse257": [
        "<builtin>.len"
    ],
    "urllib.response.addclosehook.__init__": [
        "<builtin>.super"
    ],
    "urllib.request.CacheFTPHandler.connect_ftp": [
        "urllib.request.ftpwrapper.__init__",
        "urllib.request.CacheFTPHandler.check_cache"
    ],
    "urllib.request.CacheFTPHandler.check_cache": [
        "<map>.items",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.min",
        "<map>.values"
    ],
    "urllib.request.CacheFTPHandler.clear_cache": [
        "<map>.values",
        "<map>.clear"
    ],
    "urllib.request.DataHandler.data_open": [
        "<str>.endswith",
        "urllib.parse.unquote_to_bytes",
        "_io.BytesIO",
        "email.message_from_string",
        "urllib.response.addinfourl.__init__",
        "<builtin>.len",
        "base64.decodebytes"
    ],
    "urllib.request.pathname2url": [
        "urllib.parse.quote"
    ],
    "urllib.request.URLopener.__init__": [
        "<builtin>.hasattr",
        "warnings.warn",
        "urllib.request.getproxies"
    ],
    "urllib.request.URLopener.__del__": [
        "urllib.request.URLopener.close"
    ],
    "urllib.request.URLopener.close": [
        "urllib.request.URLopener.cleanup"
    ],
    "urllib.request.URLopener.cleanup": [],
    "urllib.request.URLopener.addheader": [
        "<list>.append"
    ],
    "urllib.request.URLopener.open": [
        "urllib.request.URLopener.open_unknown_proxy",
        "<str>.replace",
        "urllib.parse._splittype",
        "urllib.response.addinfourl.__init__",
        "urllib.request.URLopener.open_unknown",
        "urllib.parse._splithost",
        "<builtin>.open",
        "urllib.parse.quote",
        "<builtin>.getattr",
        "<builtin>.OSError",
        "urllib.parse.unwrap",
        "<builtin>.hasattr",
        "urllib.parse._to_bytes"
    ],
    "urllib.request.URLopener.open_unknown": [
        "<builtin>.OSError",
        "urllib.parse._splittype"
    ],
    "urllib.request.URLopener.open_unknown_proxy": [
        "<builtin>.OSError",
        "urllib.parse._splittype"
    ],
    "urllib.request.URLopener.retrieve": [
        "ntpath.splitext",
        "<builtin>.int",
        "<list>.append",
        "tempfile._TemporaryFileWrapper.close",
        "urllib.request.URLopener.open",
        "urllib.parse.unwrap",
        "urllib.parse._to_bytes",
        "urllib.parse._splittype",
        "urllib.parse._splitquery",
        "<builtin>.open",
        "urllib.request.url2pathname",
        "posixpath.splitext",
        "urllib.error.ContentTooShortError.__init__",
        "tempfile.mkstemp",
        "urllib.response.addinfo.info",
        "urllib.parse._splithost",
        "<builtin>.len",
        "urllib.request.URLopener.open_local_file",
        "urllib.parse._splitattr",
        "os.fdopen"
    ],
    "urllib.request.URLopener.open_local_file": [
        "mimetypes.guess_type",
        "email.message_from_string",
        "email.utils.formatdate",
        "urllib.parse._splitport",
        "mimetypes",
        "email.utils",
        "urllib.response.addinfourl.__init__",
        "<builtin>.ValueError",
        "urllib.error.URLError.__init__",
        "urllib.parse._splithost",
        "<builtin>.open",
        "urllib.request.localhost",
        "urllib.request.thishost",
        "urllib.request.url2pathname"
    ],
    "urllib.request.localhost": [],
    "urllib.request.thishost": [
        "<builtin>.tuple"
    ],
    "urllib.response.addinfo.info": [],
    "urllib.request.URLopener._open_generic_http": [
        "urllib.request.URLopener.http_error",
        "<builtin>.isinstance",
        "urllib.parse._splittype",
        "urllib.parse._splituser",
        "base64.b64encode",
        "urllib.request.URLopener._https_connection",
        "urllib.response.addinfourl.__init__",
        "urllib.parse._splithost",
        "urllib.request.proxy_bypass",
        "urllib.error.URLError.__init__",
        "<builtin>.OSError",
        "urllib.parse.unquote",
        "<str>.lower"
    ],
    "urllib.request.URLopener.http_error": [
        "urllib.request.URLopener.http_error_default",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "urllib.request.FancyURLopener.http_error_default"
    ],
    "urllib.request.URLopener.http_error_default": [
        "urllib.error.HTTPError.__init__"
    ],
    "urllib.request.URLopener.open_http": [
        "urllib.request.URLopener._open_generic_http"
    ],
    "urllib.request.URLopener.open_https": [
        "urllib.request.URLopener._open_generic_http"
    ],
    "urllib.request.URLopener._https_connection": [],
    "urllib.request.URLopener.open_file": [
        "urllib.request.URLopener.open_local_file",
        "urllib.error.URLError.__init__",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "urllib.request.URLopener.open_ftp": [
        "ftplib",
        "mimetypes.guess_type",
        "<builtin>.list",
        "<builtin>.isinstance",
        "email.message_from_string",
        "<builtin>.int",
        "urllib.parse._splituser",
        "urllib.parse._splitport",
        "mimetypes",
        "urllib.response.addinfourl.__init__",
        "urllib.error.URLError.__init__",
        "urllib.parse._splithost",
        "urllib.parse._splitpasswd",
        "<builtin>.len",
        "urllib.request.ftpwrapper.__init__",
        "urllib.parse.unquote",
        "urllib.parse._splitvalue",
        "urllib.parse._splitattr"
    ],
    "urllib.request.URLopener.open_data": [
        "<builtin>.isinstance",
        "email.message_from_string",
        "urllib.response.addinfourl.__init__",
        "urllib.error.URLError.__init__",
        "<list>.append",
        "<builtin>.OSError",
        "urllib.parse.unquote",
        "_io.StringIO",
        "<str>.rfind",
        "base64.decodebytes"
    ],
    "urllib.request.FancyURLopener.__init__": [
        "urllib.request.URLopener.__init__"
    ],
    "urllib.request.FancyURLopener.http_error_default": [
        "urllib.response.addinfourl.__init__"
    ],
    "urllib.request.FancyURLopener.http_error_302": [
        "urllib.request.FancyURLopener.redirect_internal",
        "<builtin>.hasattr",
        "urllib.request.FancyURLopener.http_error_default"
    ],
    "urllib.request.FancyURLopener.redirect_internal": [
        "urllib.error.HTTPError.__init__",
        "urllib.parse.urlparse",
        "urllib.request.URLopener.open",
        "urllib.parse.urljoin"
    ],
    "urllib.request.FancyURLopener.http_error_301": [
        "urllib.request.FancyURLopener.http_error_302"
    ],
    "urllib.request.FancyURLopener.http_error_303": [
        "urllib.request.FancyURLopener.http_error_302"
    ],
    "urllib.request.FancyURLopener.http_error_307": [
        "urllib.request.FancyURLopener.http_error_302",
        "urllib.request.FancyURLopener.http_error_default"
    ],
    "urllib.request.FancyURLopener.http_error_401": [
        "<builtin>.getattr",
        "re.match",
        "<str>.lower",
        "urllib.request.URLopener.http_error_default"
    ],
    "urllib.request.FancyURLopener.http_error_407": [
        "<builtin>.getattr",
        "re.match",
        "<str>.lower",
        "urllib.request.URLopener.http_error_default"
    ],
    "urllib.request.FancyURLopener.retry_proxy_http_basic_auth": [
        "urllib.request.FancyURLopener.get_user_passwd",
        "<str>.find",
        "urllib.parse._splittype",
        "urllib.request.URLopener.open",
        "urllib.parse._splithost",
        "urllib.parse.quote"
    ],
    "urllib.request.FancyURLopener.get_user_passwd": [
        "urllib.request.FancyURLopener.prompt_user_passwd",
        "<str>.lower"
    ],
    "urllib.request.FancyURLopener.prompt_user_passwd": [
        "<builtin>.input",
        "<builtin>.print",
        "getpass",
        "getpass.fallback_getpass"
    ],
    "urllib.request.FancyURLopener.retry_proxy_https_basic_auth": [
        "urllib.request.FancyURLopener.get_user_passwd",
        "<str>.find",
        "urllib.parse._splittype",
        "urllib.request.URLopener.open",
        "urllib.parse._splithost",
        "urllib.parse.quote"
    ],
    "urllib.request.FancyURLopener.retry_http_basic_auth": [
        "urllib.request.FancyURLopener.get_user_passwd",
        "<str>.find",
        "urllib.request.URLopener.open",
        "urllib.parse._splithost",
        "urllib.parse.quote"
    ],
    "urllib.request.FancyURLopener.retry_https_basic_auth": [
        "urllib.request.FancyURLopener.get_user_passwd",
        "<str>.find",
        "urllib.request.URLopener.open",
        "urllib.parse._splithost",
        "urllib.parse.quote"
    ],
    "urllib.request.ftperrors": [
        "ftplib"
    ],
    "urllib.request.noheaders": [
        "email.message_from_string"
    ],
    "urllib.request.ftpwrapper.file_close": [
        "urllib.request.ftpwrapper.endtransfer",
        "urllib.request.ftpwrapper.real_close"
    ],
    "urllib.request._proxy_bypass_macosx_sysconf": [
        "<builtin>.int",
        "<str>.count",
        "urllib.parse._splitport",
        "fnmatch",
        "re.match",
        "<list>.count",
        "urllib.request._proxy_bypass_macosx_sysconf.ip2num"
    ],
    "urllib.request._proxy_bypass_macosx_sysconf.ip2num": [
        "<builtin>.list",
        "<builtin>.map",
        "<builtin>.len"
    ],
    "urllib.request.proxy_bypass_macosx_sysconf": [
        "urllib.request._proxy_bypass_macosx_sysconf"
    ],
    "urllib.response.addbase.__init__": [
        "<builtin>.super"
    ],
    "urllib.response.addbase.__repr__": [
        "<builtin>.id"
    ],
    "urllib.response.addbase.__enter__": [
        "<builtin>.ValueError"
    ],
    "urllib.response.addbase.__exit__": [
        "tempfile._TemporaryFileWrapper.close"
    ],
    "urllib.response.addclosehook.close": [
        "urllib.request.ftpwrapper.file_close"
    ],
    "urllib.response.addinfo.__init__": [
        "<builtin>.super"
    ],
    "nturl2path.url2pathname": [
        "<builtin>.OSError",
        "string",
        "urllib.parse",
        "<builtin>.len"
    ],
    "nturl2path.pathname2url": [
        "<builtin>.OSError",
        "urllib.parse",
        "<builtin>.len"
    ],
    "http.cookies._unquote": [
        "<list>.append",
        "<builtin>.len"
    ],
    "http.cookies._getdate": [
        "time.time",
        "time.gmtime"
    ],
    "time.gmtime": [],
    "http.cookies.Morsel.__eq__": [
        "<builtin>.isinstance"
    ],
    "http.cookies.Morsel.copy": [
        "http.cookies.Morsel.__init__"
    ],
    "http.cookies.Morsel.__init__": [],
    "http.cookies.Morsel.update": [
        "<builtin>.dict"
    ],
    "http.cookies.Morsel.output": [
        "http.cookies.Morsel.OutputString"
    ],
    "http.cookies.Morsel.OutputString": [
        "<builtin>.isinstance",
        "<list>",
        "<builtin>.sorted"
    ],
    "http.cookies.Morsel.__repr__": [
        "http.cookies.Morsel.OutputString"
    ],
    "http.cookies.Morsel.js_output": [
        "http.cookies.Morsel.OutputString",
        "<str>.replace"
    ],
    "http.cookies.BaseCookie.value_encode": [
        "<builtin>.str"
    ],
    "http.cookies.BaseCookie.__init__": [
        "http.cookies.BaseCookie.load"
    ],
    "http.cookies.BaseCookie.load": [
        "http.cookies.BaseCookie.__parse_string",
        "<builtin>.isinstance"
    ],
    "http.cookies.BaseCookie.__parse_string": [
        "<list>.append",
        "pathlib.PurePath.match",
        "<str>.lower",
        "<builtin>.len"
    ],
    "http.cookies.BaseCookie.__set": [
        "http.cookies.Morsel.__init__"
    ],
    "http.cookies.BaseCookie.__setitem__": [
        "http.cookies.BaseCookie.value_encode",
        "<builtin>.isinstance",
        "http.cookies.BaseCookie.__set"
    ],
    "http.cookies.BaseCookie.output": [
        "<list>.append",
        "<builtin>.sorted"
    ],
    "http.cookies.BaseCookie.__repr__": [
        "<list>.append",
        "<builtin>.sorted"
    ],
    "http.cookies.BaseCookie.js_output": [
        "<list>.append",
        "<builtin>.sorted"
    ],
    "http.cookies.SimpleCookie.value_decode": [
        "http.cookies._unquote"
    ],
    "http.cookies.SimpleCookie.value_encode": [
        "http.cookies._quote",
        "<builtin>.str"
    ],
    "http.cookies._quote": [
        "<map>",
        "<list>"
    ],
    "urllib3.contrib.pyopenssl._dnsname_to_stdlib": [
        "urllib3.contrib.pyopenssl._dnsname_to_stdlib.idna_encode"
    ],
    "urllib3.contrib.pyopenssl._dnsname_to_stdlib.idna_encode": [
        "idna",
        "idna.core.encode",
        "<builtin>.len"
    ],
    "urllib3.contrib.pyopenssl.get_subj_alt_name": [
        "<builtin>.str",
        "logging.Logger.warning",
        "<builtin>.hasattr",
        "cryptography.hazmat.backends.openssl.x509._Certificate",
        "<builtin>.map"
    ],
    "cryptography.hazmat.backends.openssl.x509._Certificate": [
        "warnings.warn",
        "cryptography.hazmat.backends.openssl.backend.Backend._ossl2cert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ossl2cert": [
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket._decref_socketios": [
        "urllib3.contrib.pyopenssl.WrappedSocket.close"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket.close": [],
    "urllib3.contrib.pyopenssl.WrappedSocket.recv": [
        "urllib3.contrib.pyopenssl.WrappedSocket.recv",
        "<builtin>.str"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket.recv_into": [
        "urllib3.contrib.pyopenssl.WrappedSocket.recv_into",
        "<builtin>.str"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket._send_until_done": [
        "<builtin>.str"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket.sendall": [
        "urllib3.contrib.pyopenssl.WrappedSocket._send_until_done",
        "<builtin>.len"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket.getpeercert": [
        "urllib3.contrib.pyopenssl.get_subj_alt_name"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket._drop": [
        "urllib3.contrib.pyopenssl.WrappedSocket.close"
    ],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext.set_ciphers": [
        "<builtin>.isinstance"
    ],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext.load_verify_locations": [
        "_io.BytesIO"
    ],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext.load_cert_chain": [
        "<builtin>.isinstance"
    ],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext.set_alpn_protocols": [
        "urllib3.packages.six.ensure_binary"
    ],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext.wrap_socket": [
        "<builtin>.isinstance",
        "urllib3.contrib.pyopenssl.WrappedSocket.__init__"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket.__init__": [],
    "cryptography.utils._check_bytes": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.utils._check_byteslike": [
        "<builtin>.TypeError",
        "<builtin>.memoryview"
    ],
    "cryptography.utils.strip_annotation": [
        "inspect.Signature.__init__"
    ],
    "cryptography.utils.verify_interface": [
        "<builtin>.isinstance",
        "cryptography.utils.strip_annotation",
        "<builtin>.getattr",
        "inspect.signature",
        "<builtin>.hasattr"
    ],
    "cryptography.utils._ModuleWithDeprecations.__getattr__": [
        "warnings.warn",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "cryptography.utils._ModuleWithDeprecations.__setattr__": [
        "<builtin>.setattr"
    ],
    "cryptography.utils._ModuleWithDeprecations.__delattr__": [
        "<builtin>.delattr",
        "warnings.warn",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "cryptography.utils._ModuleWithDeprecations.__dir__": [
        "<builtin>.dir"
    ],
    "cryptography.utils.cached_property": [
        "<builtin>.property",
        "<builtin>.object"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.create_hash_ctx",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_hash_ctx": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.exceptions.UnsupportedAlgorithm.__init__": [
        "<builtin>.super"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.update": [
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.update"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.update": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.copy": [
        "cryptography.hazmat.primitives.hashes.Hash.__init__",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.copy"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.copy": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm": [],
    "cryptography.hazmat.primitives.hashes.Hash.finalize": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext.finalize"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.hashes._HashContext._finalize_xof",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext._finalize_xof": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE128.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE256.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2b.__init__": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2s.__init__": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.bindings.openssl.binding._consume_errors_with_text": [
        "cryptography.hazmat.bindings.openssl.binding._consume_errors",
        "cryptography.hazmat.bindings.openssl.binding._errors_with_text"
    ],
    "cryptography.hazmat.bindings.openssl.binding.build_conditional_library": [
        "<builtin>.setattr",
        "<builtin>.dir",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding._enable_fips": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding._register_osrandom_engine": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.x509.base.AttributeNotFound.__init__": [
        "<builtin>.super"
    ],
    "cryptography.x509.base._reject_duplicate_extension": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base._reject_duplicate_attribute": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.Attribute.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.base.Attribute.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.base.Attributes.__init__": [
        "<builtin>.list"
    ],
    "cryptography.x509.base.Attributes.get_attribute_for_oid": [
        "cryptography.x509.base.AttributeNotFound.__init__"
    ],
    "cryptography.x509.base.InvalidVersion.__init__": [
        "<builtin>.super"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder.subject_name": [
        "<builtin>.TypeError",
        "cryptography.x509.base.CertificateSigningRequestBuilder.__init__",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder.__init__": [],
    "cryptography.x509.base.CertificateSigningRequestBuilder.add_extension": [
        "cryptography.x509.extensions.Extension.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.x509.base.CertificateSigningRequestBuilder.__init__",
        "cryptography.x509.base._reject_duplicate_extension"
    ],
    "cryptography.x509.extensions.Extension.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder.add_attribute": [
        "cryptography.x509.base._reject_duplicate_attribute",
        "<builtin>.TypeError",
        "cryptography.x509.base.CertificateSigningRequestBuilder.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder.sign": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateBuilder.issuer_name": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.x509.base.CertificateBuilder.__init__"
    ],
    "cryptography.x509.base.CertificateBuilder.__init__": [],
    "cryptography.x509.base.CertificateBuilder.subject_name": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.x509.base.CertificateBuilder.__init__"
    ],
    "cryptography.x509.base.CertificateBuilder.public_key": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.x509.base.CertificateBuilder.__init__"
    ],
    "cryptography.x509.base.CertificateBuilder.serial_number": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.x509.base.CertificateBuilder.__init__"
    ],
    "cryptography.x509.base.CertificateBuilder.not_valid_before": [
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.TypeError",
        "cryptography.x509.base._convert_to_naive_utc_time",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base._convert_to_naive_utc_time": [],
    "cryptography.x509.base.CertificateBuilder.not_valid_after": [
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.TypeError",
        "cryptography.x509.base._convert_to_naive_utc_time",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateBuilder.add_extension": [
        "cryptography.x509.extensions.Extension.__init__",
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.TypeError",
        "cryptography.x509.base._reject_duplicate_extension"
    ],
    "cryptography.x509.base.CertificateBuilder.sign": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.issuer_name": [
        "<builtin>.TypeError",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.__init__": [],
    "cryptography.x509.base.CertificateRevocationListBuilder.last_update": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "cryptography.x509.base._convert_to_naive_utc_time",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.next_update": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "cryptography.x509.base._convert_to_naive_utc_time",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.add_extension": [
        "cryptography.x509.extensions.Extension.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "cryptography.x509.base._reject_duplicate_extension"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.add_revoked_certificate": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.sign": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder.serial_number": [
        "<builtin>.TypeError",
        "cryptography.x509.base.RevokedCertificateBuilder.__init__",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder.__init__": [],
    "cryptography.x509.base.RevokedCertificateBuilder.revocation_date": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.x509.base._convert_to_naive_utc_time",
        "cryptography.x509.base.RevokedCertificateBuilder.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder.add_extension": [
        "cryptography.x509.extensions.Extension.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.x509.base.RevokedCertificateBuilder.__init__",
        "cryptography.x509.base._reject_duplicate_extension"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder.build": [
        "cryptography.x509.extensions.Extensions.__init__",
        "cryptography.x509.base._RawRevokedCertificate.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.Extensions.__init__": [
        "<builtin>.list"
    ],
    "cryptography.x509.base._RawRevokedCertificate.__init__": [],
    "cryptography.hazmat.primitives._serialization.PrivateFormat.encryption_builder": [
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__": [],
    "cryptography.hazmat.primitives._serialization.BestAvailableEncryption.__init__": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.kdf_rounds": [
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.hmac_hash": [
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__",
        "<builtin>.TypeError",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.key_cert_algorithm": [
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__",
        "<builtin>.TypeError",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.build": [
        "cryptography.hazmat.primitives._serialization._KeySerializationEncryption.__init__",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives._serialization._KeySerializationEncryption.__init__": [],
    "cryptography.hazmat.primitives.serialization.base.load_pem_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_private_key",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._load_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._load_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error",
        "cryptography.utils._check_byteslike",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error": [
        "cryptography.hazmat.bindings.openssl.binding._errors_with_text",
        "<builtin>.any",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors": [
        "cryptography.hazmat.bindings.openssl.binding._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.__init__",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.__init__",
        "<builtin>.getattr",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__": [
        "cryptography.hazmat.backends.openssl.ec._check_key_infinity",
        "cryptography.hazmat.backends.openssl.ec._sn_to_elliptic_curve",
        "cryptography.hazmat.backends.openssl.ec._ec_key_curve_sn",
        "cryptography.hazmat.backends.openssl.ec._mark_asn1_named_ec_curve"
    ],
    "cryptography.hazmat.backends.openssl.ec._ec_key_curve_sn": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ec._sn_to_elliptic_curve": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.ec._mark_asn1_named_ec_curve": [],
    "cryptography.hazmat.backends.openssl.ec._check_key_infinity": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_from_der_traditional_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._load_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_from_der_traditional_key": [
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__": [
        "_thread.allocate_lock",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text": [
        "cryptography.hazmat.bindings.openssl.binding._consume_errors_with_text"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_pem_public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_public_key",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_public_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_public_key": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.__init__",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__",
        "<builtin>.getattr",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_public_key",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.__init__": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__": [],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey.__init__": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.__init__": [],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.__init__": [
        "cryptography.hazmat.backends.openssl.dh._get_dh_num_bits"
    ],
    "cryptography.hazmat.backends.openssl.dh._get_dh_num_bits": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__": [
        "cryptography.hazmat.backends.openssl.ec._check_key_infinity",
        "cryptography.hazmat.backends.openssl.ec._sn_to_elliptic_curve",
        "cryptography.hazmat.backends.openssl.ec._ec_key_curve_sn",
        "cryptography.hazmat.backends.openssl.ec._mark_asn1_named_ec_curve"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_public_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_pem_parameters": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_parameters"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_parameters": [
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__": [],
    "cryptography.hazmat.primitives.serialization.base.load_der_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_der_public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_public_key",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_der_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_parameters",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.generate_parameters": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_parameters"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.parameters": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_parameter_numbers"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_parameter_numbers": [
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_public_numbers"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_public_numbers": [
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_private_numbers"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_parameter_numbers",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_parameter_numbers": [
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_parameters"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_parameters": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_public_numbers"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_set_values",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_parameters",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_set_values": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_private_numbers",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_set_values",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_private_numbers",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_private_numbers": [
        "<builtin>.pow",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_parameters"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.generate_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_parameters",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_parameters": [
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key_and_parameters"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key_and_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_parameters",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils.Prehashed.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.from_encoded_point": [
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_public_bytes",
        "<builtin>.TypeError",
        "cryptography.utils._check_bytes",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve": [
        "cryptography.hazmat.backends.openssl.backend.Backend._elliptic_curve_to_nid",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve_nid"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._elliptic_curve_to_nid": [
        "<map>.get",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve_nid": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_elliptic_curve_private_key",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_elliptic_curve_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_supported",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend._elliptic_curve_to_nid",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.derive_private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend.derive_elliptic_curve_private_key",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.derive_elliptic_curve_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_determine_group_get_func",
        "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_determine_group_get_func": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_public_numbers"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_public_numbers": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_set_public_key_affine_coordinates",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_set_public_key_affine_coordinates": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.encode_point": [
        "cryptography.utils.int_to_bytes",
        "warnings.warn"
    ],
    "cryptography.utils.int_to_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.from_encoded_point": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__init__",
        "<builtin>.len",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_private_numbers"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_set_public_key_affine_coordinates",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.get_curve_for_oid": [
        "<builtin>.LookupError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey.from_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_supported",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_public_bytes",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_public_bytes": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.utils._check_bytes",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.generate": [
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_supported",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_generate_key",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_generate_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.from_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_supported",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_private_bytes"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_private_bytes": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.utils._check_byteslike",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey.from_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_public_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed448_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_public_bytes": [
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.utils._check_bytes",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey.generate": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_generate_key",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed448_generate_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey.from_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_private_bytes",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.utils._check_byteslike",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key": [
        "cryptography.hazmat.primitives.asymmetric.rsa._verify_rsa_parameters",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_rsa_private_key"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa._verify_rsa_parameters": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_rsa_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__",
        "cryptography.hazmat.primitives.asymmetric.rsa._verify_rsa_parameters",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa._check_private_key_components": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa._check_public_key_components": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa._modinv": [
        "<builtin>.divmod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_iqmp": [
        "cryptography.hazmat.primitives.asymmetric.rsa._modinv"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_recover_prime_factors": [
        "<builtin>.divmod",
        "<builtin>.ValueError",
        "<builtin>.pow",
        "<builtin>.sorted"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_rsa_private_numbers"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_rsa_private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.primitives.asymmetric.rsa._check_private_key_components"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_rsa_public_numbers"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_rsa_public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__",
        "cryptography.hazmat.primitives.asymmetric.rsa._check_public_key_components"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey.from_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_public_bytes",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_public_bytes": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.from_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_private_bytes",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_bytearray"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_bytearray": [
        "<builtin>.bytearray"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey.from_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_public_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x448_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_public_bytes": [
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.generate": [
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_generate_key",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x448_generate_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.from_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_private_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.__init__",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._bcrypt_kdf": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._ecdsa_key_type": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._check_block_size": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._check_empty": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._init_cipher": [
        "cryptography.hazmat.primitives.serialization.ssh._bcrypt_kdf",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._get_u32": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._get_u64": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._get_sshstr": [
        "cryptography.hazmat.primitives.serialization.ssh._get_u32",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._get_mpint": [
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._to_mpint": [
        "cryptography.utils.int_to_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.put_raw": [
        "<list>.append"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.put_u32": [
        "<list>.append"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.put_sshstr": [
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_u32",
        "<builtin>.len",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.size",
        "<list>.extend",
        "<list>.append"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.put_mpint": [
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_sshstr",
        "cryptography.hazmat.primitives.serialization.ssh._to_mpint"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.size": [
        "<builtin>.sum",
        "<builtin>.map"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.render": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.tobytes": [
        "<builtin>.bytearray",
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.size",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.render"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.get_public": [
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.load_public": [
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.public_key",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.get_public"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.load_private": [
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.private_key",
        "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmq1",
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmp1",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmp1": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmq1": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.get_public": [
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.load_public": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA._validate",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.public_key",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.get_public"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA._validate": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.load_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA._validate",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.private_key",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.get_public",
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.encode_public": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA._validate"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.encode_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.encode_public"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.get_public": [
        "<builtin>.NotImplementedError",
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.load_public": [
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.from_encoded_point",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.get_public"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.load_private": [
        "cryptography.hazmat.primitives.asymmetric.ec.derive_private_key",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.get_public",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.encode_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.encode_public"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.encode_public": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.get_public": [
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.load_public": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.get_public",
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey.from_public_bytes"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.load_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.get_public",
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.from_private_bytes",
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.encode_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.encode_public",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.__init__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.__init__": [
        "<list>.extend"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.encode_public": [],
    "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat": [
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh.load_ssh_private_key": [
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr",
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.serialization.ssh._check_empty",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.primitives.serialization.ssh._get_u32",
        "cryptography.utils._check_bytes",
        "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat",
        "<builtin>.len",
        "cryptography.hazmat.primitives.serialization.ssh._init_cipher",
        "cryptography.hazmat.primitives.serialization.ssh._check_block_size",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor": [],
    "cryptography.hazmat.primitives.serialization.ssh._serialize_ssh_private_key": [
        "cryptography.hazmat.primitives.serialization.ssh._ecdsa_key_type",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_u32",
        "<builtin>.bytearray",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.public_key",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_raw",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.__init__",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.public_key",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_sshstr",
        "<builtin>.memoryview",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.public_key",
        "cryptography.hazmat.primitives.serialization.ssh._ssh_pem_encode",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.render",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.size",
        "cryptography.utils._check_bytes",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.encryptor",
        "cryptography.hazmat.primitives.serialization.ssh._init_cipher"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.encryptor": [],
    "cryptography.hazmat.primitives.serialization.ssh._ssh_pem_encode": [],
    "cryptography.hazmat.primitives.serialization.ssh.load_ssh_public_key": [
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr",
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.serialization.ssh._check_empty",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.primitives.serialization.ssh._get_u32",
        "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat",
        "cryptography.hazmat.primitives.serialization.ssh._get_u64",
        "<builtin>.len",
        "<builtin>.ValueError",
        "pathlib.PurePath.match"
    ],
    "cryptography.hazmat.primitives.serialization.ssh.serialize_ssh_public_key": [
        "cryptography.hazmat.primitives.serialization.ssh._ecdsa_key_type",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.tobytes",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_sshstr",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.__init__",
        "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher._wrap_ctx": [
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext.__init__": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext._check_limit": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update": [
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext._check_limit",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update_into": [
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext._check_limit",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.authenticate_additional_data": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_iv_length": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_nonce_length": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_iv_and_key_length": [
        "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.primitives.ciphers.modes._check_iv_length"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CBC.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.XTS.__init__": [
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.XTS.validate_for_algorithm": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.OFB.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR.validate_for_algorithm": [
        "cryptography.hazmat.primitives.ciphers.modes._check_nonce_length",
        "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM.__init__": [
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM.validate_for_algorithm": [
        "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size": [
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES128.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES256.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size",
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__": [
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_version_text",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update": [
        "<builtin>.bytes",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update_into",
        "<builtin>.bytearray",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update_into": [
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len",
        "<builtin>.min",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.finalize_with_tag": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.finalize",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.authenticate_additional_data": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.__repr__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_version_text"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.openssl_version_text": [],
    "cryptography.hazmat.backends.openssl.backend.Backend._enable_fips": [
        "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled",
        "cryptography.hazmat.bindings.openssl.binding.Binding._enable_fips"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.osrandom_engine_implementation": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_hmac_ctx": [
        "cryptography.hazmat.backends.openssl.hmac._HMACContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.hash_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.signature_hash_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.hash_supported",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.hmac_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.hash_supported",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.cipher_supported": [
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_encryption_ctx": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_decryption_ctx": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.pbkdf2_hmac_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.hmac_supported"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.derive_pbkdf2_hmac": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._oaep_hash_supported": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.rsa_padding_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend._oaep_hash_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.hash_supported",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.dsa_hash_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.dsa_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.signature_hash_supported"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.dsa_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.cmac_algorithm_supported": [
        "cryptography.hazmat.primitives.ciphers.modes.CBC.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.cipher_supported"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_cmac_ctx": [
        "cryptography.hazmat.backends.openssl.cmac._CMACContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.cmac_algorithm_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._cert2ossl": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._csr2ossl": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ossl2csr": [
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._crl2ossl": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ossl2crl": [
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._crl_is_signature_valid": [
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._crl2ossl",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._csr_is_signature_valid": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._csr2ossl",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._check_keys_correspond": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_signature_algorithm_supported": [
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_supported"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_exchange_algorithm_supported": [
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_supported"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes": [
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes_via_bio",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._bio_func_output",
        "cryptography.hazmat.primitives.serialization.ssh._serialize_ssh_private_key",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes_via_bio": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bio_func_output",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._bio_func_output": [
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._bio_func_output",
        "cryptography.hazmat.primitives.serialization.ssh.serialize_ssh_public_key",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dh._dh_params_dup",
        "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dh._dh_params_dup": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_private_key_and_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_private_key",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_parameters"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.dh_parameters_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.derive_scrypt": [
        "<builtin>.MemoryError",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "<builtin>.len"
    ],
    "<builtin>.MemoryError": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported": [
        "cryptography.hazmat.backends.openssl.aead._aead_cipher_name"
    ],
    "cryptography.hazmat.backends.openssl.aead._aead_cipher_name": [
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.ciphers.aead",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._zero_data": [
        "<builtin>.range"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_null_terminated_buf": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_key_and_certificates_from_pkcs12": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pkcs12"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pkcs12": [
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__init__",
        "<builtin>.reversed",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__init__",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_null_terminated_buf",
        "cryptography.hazmat.backends.openssl.backend.Backend._ossl2cert",
        "<list>.append",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.serialize_key_and_certificates_to_pkcs12": [
        "<list>.append",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_null_terminated_buf",
        "cryptography.utils._check_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend._cert2ossl",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_poly1305_ctx": [
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.__init__",
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_pkcs7_certificates": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._load_pkcs7_certificates",
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._load_pkcs7_certificates": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._ossl2cert",
        "<list>.append",
        "<builtin>.range"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_pkcs7_certificates": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._load_pkcs7_certificates",
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_serialize_certificates": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend._cert2ossl",
        "<list>.append",
        "<builtin>.all"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_sign": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend._cert2ossl",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "<list>.append"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__call__": [
        "<str>.lower"
    ],
    "cryptography.hazmat.backends.openssl.aead._aead_setup": [
        "cryptography.hazmat.backends.openssl.aead._evp_cipher",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "cryptography.hazmat.backends.openssl.aead._evp_cipher": [],
    "cryptography.hazmat.backends.openssl.aead._process_aad": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.aead._process_data": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.aead._encrypt": [
        "cryptography.hazmat.backends.openssl.aead._process_data",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.aead._aead_cipher_name",
        "cryptography.hazmat.backends.openssl.aead._aead_setup",
        "cryptography.hazmat.primitives.ciphers.aead",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.aead._process_aad",
        "cryptography.hazmat.backends.openssl.aead._set_length"
    ],
    "cryptography.hazmat.backends.openssl.aead._set_length": [],
    "cryptography.hazmat.backends.openssl.aead._decrypt": [
        "cryptography.hazmat.backends.openssl.aead._process_data",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.aead._aead_cipher_name",
        "cryptography.hazmat.backends.openssl.aead._aead_setup",
        "cryptography.hazmat.primitives.ciphers.aead",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.aead._process_aad",
        "cryptography.hazmat.backends.openssl.aead._set_length"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_byteslike",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305.encrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305._check_params",
        "<builtin>.OverflowError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305._check_params": [
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305._check_params"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.TypeError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM.generate_key": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM.encrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM._validate_lengths",
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM._check_params",
        "<builtin>.OverflowError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM._check_params": [
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM._validate_lengths": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM._check_params"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM.__init__": [
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM.generate_key": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM.encrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM._check_params",
        "<builtin>.OverflowError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM._check_params": [
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM._check_params"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_byteslike",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3.generate_key": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3.encrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3._check_params",
        "<builtin>.OverflowError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3._check_params": [
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3._check_params"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_byteslike",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV.generate_key": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV.encrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV._check_params",
        "<builtin>.any",
        "<builtin>.OverflowError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV._check_params": [
        "<builtin>.TypeError",
        "cryptography.utils._check_bytes",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV._check_params"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.update": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.copy": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.cmac._CMACContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.verify": [
        "cryptography.hazmat.backends.openssl.cmac._CMACContext.finalize",
        "cryptography.hazmat.primitives.constant_time.bytes_eq"
    ],
    "cryptography.hazmat.primitives.constant_time.bytes_eq": [
        "<builtin>.TypeError",
        "_operator._compare_digest",
        "<builtin>.isinstance"
    ],
    "_operator._compare_digest": [],
    "cryptography.hazmat.backends.openssl.dh._dh_cdata_to_parameters": [
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__",
        "cryptography.hazmat.backends.openssl.dh._dh_params_dup"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters.parameter_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_private_key"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters.parameter_bytes": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.key_size": [
        "cryptography.hazmat.backends.openssl.dh._get_dh_num_bits"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.exchange": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey._exchange_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey._exchange_assert": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dh._dh_params_dup",
        "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.parameters": [
        "cryptography.hazmat.backends.openssl.dh._dh_cdata_to_parameters"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "<builtin>.ValueError",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.parameters": [
        "cryptography.hazmat.backends.openssl.dh._dh_cdata_to_parameters"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._dsa_sig_sign": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.dsa._dsa_sig_verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters.parameter_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.parameters": [
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.dsa._dsa_sig_sign",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm": [
        "cryptography.hazmat.primitives.hashes.Hash.update",
        "<builtin>.isinstance",
        "<builtin>.len",
        "cryptography.hazmat.primitives.hashes.Hash.__init__",
        "cryptography.hazmat.primitives.hashes.Hash.finalize",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.parameters": [
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.verify": [
        "cryptography.hazmat.backends.openssl.dsa._dsa_sig_verify",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ec._check_signature_algorithm": [
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.ec._ecdsa_sig_sign": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ec._ecdsa_sig_verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.exchange": [
        "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_exchange_algorithm_supported",
        "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive",
        "<builtin>.ValueError",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve_nid"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_numbers"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_determine_group_get_func",
        "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.ec._check_signature_algorithm",
        "cryptography.hazmat.backends.openssl.ec._ecdsa_sig_sign",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey._encode_point": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey._encode_point",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.verify": [
        "cryptography.hazmat.backends.openssl.ec._check_signature_algorithm",
        "cryptography.hazmat.backends.openssl.ec._ecdsa_sig_verify",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey._raw_public_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey._raw_private_bytes",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey._raw_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey._raw_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey._raw_private_bytes",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey._raw_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.copy": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.hmac._HMACContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.update": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.verify": [
        "cryptography.hazmat.backends.openssl.hmac._HMACContext.finalize",
        "cryptography.hazmat.primitives.constant_time.bytes_eq"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.update": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.verify": [
        "cryptography.hazmat.primitives.constant_time.bytes_eq",
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.finalize"
    ],
    "cryptography.hazmat.backends.openssl.rsa._get_rsa_pss_salt_length": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.asymmetric.padding.calculate_max_pss_salt_length"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.calculate_max_pss_salt_length": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa": [
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa_pkey_ctx",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend.rsa_padding_supported"
    ],
    "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa_pkey_ctx": [
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_determine_padding": [
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup": [
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_determine_padding",
        "cryptography.hazmat.backends.openssl.rsa._get_rsa_pss_salt_length",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_sign": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_recover": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._non_threadsafe_enable_blinding": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.decrypt": [
        "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding": [],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_sign"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.encrypt": [
        "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.verify": [
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_verify",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.recover_data_from_signature": [
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_recover",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.PSS.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey._raw_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.exchange": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey._raw_private_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey._raw_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey._raw_public_bytes",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.exchange": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey._raw_private_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey._raw_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt.__init__": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.scrypt_supported",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.scrypt_supported": [],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt.derive": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.derive_scrypt",
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt.verify": [
        "cryptography.hazmat.primitives.constant_time.bytes_eq",
        "cryptography.hazmat.primitives.kdf.scrypt.Scrypt.derive"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_pkcs7_certificates",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_pkcs7_certificates"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.serialize_certificates": [
        "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_serialize_certificates",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.set_data": [
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.__init__",
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.__init__": [],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.add_signer": [
        "<builtin>.TypeError",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.add_certificate": [
        "<builtin>.TypeError",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.sign": [
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.list",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_sign",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.load_key_and_certificates": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_key_and_certificates_from_pkcs12"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.load_pkcs12": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pkcs12"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.serialize_key_and_certificates": [
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend.serialize_key_and_certificates_to_pkcs12",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "bcrypt.gensalt": [
        "<builtin>.ValueError"
    ],
    "bcrypt.hashpw": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "bcrypt.checkpw": [
        "<builtin>.TypeError",
        "_operator._compare_digest",
        "<builtin>.isinstance",
        "bcrypt.hashpw"
    ],
    "bcrypt.kdf": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions._key_identifier_from_public_key": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.DuplicateExtension.__init__": [
        "<builtin>.super"
    ],
    "cryptography.x509.extensions.ExtensionNotFound.__init__": [
        "<builtin>.super"
    ],
    "cryptography.x509.extensions.ExtensionType.public_bytes": [
        "<builtin>.NotImplementedError"
    ],
    "cryptography.x509.extensions.Extensions.get_extension_for_oid": [
        "cryptography.x509.extensions.ExtensionNotFound.__init__"
    ],
    "cryptography.x509.extensions.Extensions.get_extension_for_class": [
        "<builtin>.TypeError",
        "cryptography.x509.extensions.ExtensionNotFound.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions._make_sequence_methods.len_method": [
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "cryptography.x509.extensions._make_sequence_methods.iter_method": [
        "<builtin>.iter",
        "<builtin>.getattr"
    ],
    "cryptography.x509.extensions._make_sequence_methods.getitem_method": [
        "<builtin>.getattr"
    ],
    "cryptography.x509.extensions.CRLNumber.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CRLNumber.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CRLNumber.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.from_issuer_public_key": [
        "cryptography.x509.extensions.AuthorityKeyIdentifier.__init__",
        "cryptography.x509.extensions._key_identifier_from_public_key"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.from_issuer_subject_key_identifier": [
        "cryptography.x509.extensions.AuthorityKeyIdentifier.__init__"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier.from_public_key": [
        "cryptography.x509.extensions._key_identifier_from_public_key",
        "cryptography.x509.extensions.SubjectKeyIdentifier.__init__"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier.__init__": [],
    "cryptography.x509.extensions.SubjectKeyIdentifier.__eq__": [
        "cryptography.hazmat.primitives.constant_time.bytes_eq",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.AccessDescription.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.AccessDescription.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.AccessDescription.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.BasicConstraints.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.BasicConstraints.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.BasicConstraints.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.FreshestCRL.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.FreshestCRL.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.FreshestCRL.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.DistributionPoint.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.DistributionPoint.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.DistributionPoint.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.PolicyConstraints.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.PolicyConstraints.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.PolicyConstraints.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.CertificatePolicies.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.CertificatePolicies.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CertificatePolicies.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.PolicyInformation.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.PolicyInformation.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.PolicyInformation.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.UserNotice.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.UserNotice.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.UserNotice.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.NoticeReference.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.NoticeReference.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.NoticeReference.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.OCSPNoCheck.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.OCSPNoCheck.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.PrecertPoison.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.PrecertPoison.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.TLSFeature.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.TLSFeature.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.TLSFeature.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.InhibitAnyPolicy.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.InhibitAnyPolicy.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.InhibitAnyPolicy.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.KeyUsage.__init__": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.KeyUsage.encipher_only": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.KeyUsage.decipher_only": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.KeyUsage.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.KeyUsage.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.NameConstraints.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.x509.extensions.NameConstraints._validate_ip_name",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.NameConstraints._validate_ip_name": [
        "<builtin>.TypeError",
        "<builtin>.any",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.NameConstraints.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.NameConstraints.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.Extension.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.Extension.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.GeneralNames.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.GeneralNames.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.GeneralNames.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName.__init__": [
        "cryptography.x509.extensions.GeneralNames.__init__"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName.__init__": [
        "cryptography.x509.extensions.GeneralNames.__init__"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.CertificateIssuer.__init__": [
        "cryptography.x509.extensions.GeneralNames.__init__"
    ],
    "cryptography.x509.extensions.CertificateIssuer.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CertificateIssuer.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.CRLReason.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CRLReason.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CRLReason.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.InvalidityDate.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.InvalidityDate.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.InvalidityDate.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.__repr__": [
        "<builtin>.list"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.__init__": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.__repr__": [
        "<builtin>.list"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.OCSPNonce.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.OCSPNonce.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.OCSPNonce.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.any",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.RFC822Name.__init__": [
        "<builtin>.TypeError",
        "email.utils.parseaddr",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.general_name.RFC822Name.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.RFC822Name.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.DNSName.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.general_name.DNSName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.DNSName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.DirectoryName.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.DirectoryName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.DirectoryName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.RegisteredID.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.RegisteredID.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.RegisteredID.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.IPAddress.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.IPAddress._packed": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.IPAddress.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.IPAddress.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.OtherName.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.OtherName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.OtherName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.name._escape_dn_value": [
        "<str>.replace",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name.NameAttribute.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "cryptography.x509.name.NameAttribute.rfc4514_string": [
        "cryptography.x509.name._escape_dn_value"
    ],
    "cryptography.x509.name.NameAttribute.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name.NameAttribute.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.frozenset",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__iter__": [
        "<builtin>.iter"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__len__": [
        "<builtin>.len"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__repr__": [
        "cryptography.x509.name.RelativeDistinguishedName.rfc4514_string"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.rfc4514_string": [],
    "cryptography.x509.name.Name.from_rfc4514_string": [
        "cryptography.x509.name._RFC4514NameParser.parse",
        "cryptography.x509.name._RFC4514NameParser.__init__"
    ],
    "cryptography.x509.name._RFC4514NameParser.__init__": [],
    "cryptography.x509.name._RFC4514NameParser.parse": [
        "cryptography.x509.name._RFC4514NameParser._read_char",
        "<builtin>.reversed",
        "<list>.append",
        "cryptography.x509.name._RFC4514NameParser._has_data",
        "cryptography.x509.name.Name.__init__"
    ],
    "cryptography.x509.name._RFC4514NameParser._has_data": [
        "<builtin>.len"
    ],
    "cryptography.x509.name._RFC4514NameParser._read_char": [
        "cryptography.x509.name._RFC4514NameParser._peek"
    ],
    "cryptography.x509.name._RFC4514NameParser._peek": [
        "cryptography.x509.name._RFC4514NameParser._has_data"
    ],
    "cryptography.x509.name.Name.__init__": [],
    "cryptography.x509.name.Name.rfc4514_string": [
        "<builtin>.reversed"
    ],
    "cryptography.x509.name.Name.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name.Name.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "cryptography.x509.name.Name.__len__": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "cryptography.x509.name._RFC4514NameParser._read_re": [
        "pathlib.PurePath.match",
        "<builtin>.len"
    ],
    "cryptography.x509.name._RFC4514NameParser._parse_rdn": [
        "<list>.append",
        "cryptography.x509.name.RelativeDistinguishedName.__init__",
        "cryptography.x509.name._RFC4514NameParser._peek",
        "cryptography.x509.name._RFC4514NameParser._read_char"
    ],
    "cryptography.x509.name._RFC4514NameParser._parse_na": [
        "cryptography.x509.name._RFC4514NameParser._peek",
        "cryptography.x509.name._unescape_dn_value",
        "cryptography.x509.name.NameAttribute.__init__",
        "cryptography.x509.name._RFC4514NameParser._read_re",
        "cryptography.x509.name._RFC4514NameParser._read_char"
    ],
    "cryptography.x509.name._unescape_dn_value": [],
    "cryptography.hazmat.backends.openssl.x509._CertificateSigningRequest": [
        "warnings.warn"
    ],
    "cryptography.hazmat.backends.openssl.x509._CertificateRevocationList": [
        "warnings.warn"
    ],
    "urllib3.packages.backports.makefile.backport_makefile": [
        "<builtin>.set",
        "socket.SocketIO.__init__",
        "_io.BufferedWriter",
        "_io.BufferedReader",
        "_io.TextIOWrapper",
        "<builtin>.ValueError",
        "_io.BufferedRWPair"
    ],
    "requests.utils.proxy_bypass_registry": [
        "re.match",
        "<builtin>.int"
    ],
    "requests.utils.proxy_bypass": [
        "urllib.request.getproxies_environment",
        "requests.utils.proxy_bypass_registry",
        "urllib.request.proxy_bypass_environment"
    ],
    "requests.utils.dict_to_sequence": [
        "<builtin>.hasattr"
    ],
    "requests.utils.super_len": [
        "<builtin>.max",
        "<builtin>.hasattr",
        "<builtin>.len"
    ],
    "requests.utils.get_netrc_auth": [
        "ntpath.expanduser",
        "<builtin>.isinstance",
        "urllib.parse.urlparse",
        "netrc",
        "posixpath.expanduser",
        "genericpath.exists"
    ],
    "requests.utils.guess_filename": [
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "requests.utils.extract_zipped_paths": [
        "posixpath.join",
        "zipfile.is_zipfile",
        "posixpath.split",
        "ntpath.split",
        "zipfile.ZipFile.__init__",
        "zipfile.ZipFile.namelist",
        "ntpath.join",
        "zipfile.ZipFile.read",
        "tempfile.gettempdir",
        "genericpath.exists",
        "requests.utils.atomic_open"
    ],
    "requests.utils.atomic_open": [
        "ntpath.dirname",
        "posixpath.dirname",
        "tempfile.mkstemp",
        "os.fdopen"
    ],
    "requests.utils.from_key_val_list": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "collections.OrderedDict.__init__"
    ],
    "requests.utils.to_key_val_list": [
        "<map>.items",
        "<builtin>.list",
        "<builtin>.isinstance",
        "collections.OrderedDict.items",
        "<builtin>.ValueError"
    ],
    "requests.utils.parse_list_header": [
        "urllib.request.parse_http_list",
        "requests.utils.unquote_header_value",
        "<list>.append"
    ],
    "requests.utils.unquote_header_value": [],
    "requests.utils.parse_dict_header": [
        "urllib.request.parse_http_list",
        "requests.utils.unquote_header_value"
    ],
    "requests.utils.add_dict_to_cookiejar": [
        "requests.cookies.cookiejar_from_dict"
    ],
    "requests.utils.get_encodings_from_content": [
        "re.compile",
        "warnings.warn"
    ],
    "requests.utils.get_encoding_from_headers": [
        "requests.utils._parse_content_type_header"
    ],
    "requests.utils._parse_content_type_header": [],
    "requests.utils.stream_decode_response_unicode": [
        "codecs.getincrementaldecoder"
    ],
    "requests.utils.iter_slices": [
        "<builtin>.len"
    ],
    "requests.utils.get_unicode_from_response": [
        "<list>.append",
        "requests.utils.get_encoding_from_headers",
        "warnings.warn",
        "<builtin>.str"
    ],
    "requests.utils.unquote_unreserved": [
        "<builtin>.range",
        "requests.exceptions.RequestException.__init__",
        "<builtin>.int",
        "<builtin>.len",
        "<builtin>.chr"
    ],
    "requests.utils.requote_uri": [
        "requests.utils.unquote_unreserved",
        "urllib.parse.quote"
    ],
    "requests.utils.address_in_network": [
        "requests.utils.dotted_netmask",
        "<builtin>.int"
    ],
    "requests.utils.dotted_netmask": [],
    "requests.utils.is_valid_cidr": [
        "<builtin>.int"
    ],
    "requests.utils.should_bypass_proxies": [
        "requests.utils.is_valid_cidr",
        "requests.utils.is_ipv4_address",
        "requests.utils.set_environ",
        "requests.utils.address_in_network",
        "urllib.parse.urlparse",
        "requests.utils.should_bypass_proxies.get_proxy"
    ],
    "requests.utils.should_bypass_proxies.get_proxy": [
        "<str>.upper"
    ],
    "requests.utils.is_ipv4_address": [],
    "requests.utils.set_environ": [],
    "requests.utils.get_environ_proxies": [
        "requests.utils.should_bypass_proxies",
        "urllib.request.getproxies"
    ],
    "requests.utils.select_proxy": [
        "urllib.parse.urlparse"
    ],
    "requests.utils.resolve_proxies": [
        "<map>.copy",
        "urllib.parse.urlparse",
        "requests.utils.should_bypass_proxies",
        "requests.utils.get_environ_proxies",
        "<map>.get",
        "<map>.setdefault"
    ],
    "requests.utils.parse_header_links": [
        "re.split",
        "<list>.append"
    ],
    "requests.utils.prepend_scheme_if_needed": [
        "urllib.parse.urlunparse",
        "urllib3.util.url.parse_url"
    ],
    "requests.utils.get_auth_from_url": [
        "urllib.parse.unquote",
        "urllib.parse.urlparse"
    ],
    "requests.utils.check_header_validity": [
        "requests.exceptions.RequestException.__init__",
        "requests.utils._validate_header_part",
        "<builtin>.type"
    ],
    "requests.utils._validate_header_part": [
        "requests.exceptions.RequestException.__init__"
    ],
    "requests.utils.urldefragauth": [
        "urllib.parse.urlunparse",
        "urllib.parse.urlparse"
    ],
    "requests.utils.rewind_body": [
        "requests.exceptions.RequestException.__init__",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "certifi.core.read_text": [
        "certifi.core.where",
        "<builtin>.open"
    ],
    "certifi.core.contents": [
        "certifi.core.read_text"
    ],
    "requests._internal_utils.to_native_string": [
        "<builtin>.isinstance"
    ],
    "requests._internal_utils.unicode_is_ascii": [
        "<builtin>.isinstance"
    ],
    "requests.cookies.MockRequest.__init__": [
        "urllib.parse.urlparse"
    ],
    "requests.cookies.MockRequest.get_host": [
        "urllib.parse.urlparse"
    ],
    "requests.cookies.MockRequest.get_origin_req_host": [
        "requests.cookies.MockRequest.get_host"
    ],
    "requests.cookies.MockRequest.get_full_url": [
        "urllib.parse.urlunparse",
        "urllib.parse.urlparse",
        "requests._internal_utils.to_native_string"
    ],
    "requests.cookies.MockRequest.get_header": [
        "<map>.get"
    ],
    "requests.cookies.MockRequest.add_header": [
        "<builtin>.NotImplementedError"
    ],
    "requests.cookies.MockRequest.unverifiable": [
        "requests.cookies.MockRequest.is_unverifiable"
    ],
    "requests.cookies.MockRequest.is_unverifiable": [],
    "requests.cookies.MockRequest.origin_req_host": [
        "requests.cookies.MockRequest.get_origin_req_host"
    ],
    "requests.cookies.MockRequest.host": [
        "requests.cookies.MockRequest.get_host"
    ],
    "requests.cookies.extract_cookies_to_jar": [
        "requests.cookies.MockResponse.__init__",
        "requests.cookies.MockRequest.__init__",
        "<builtin>.hasattr",
        "http.cookiejar.CookieJar.extract_cookies"
    ],
    "requests.cookies.MockResponse.__init__": [],
    "requests.cookies.get_cookie_header": [
        "requests.cookies.MockRequest.__init__",
        "requests.cookies.MockRequest.get_new_headers",
        "http.cookiejar.CookieJar.add_cookie_header",
        "<map>.get"
    ],
    "requests.cookies.MockRequest.get_new_headers": [],
    "requests.cookies.remove_cookie_by_name": [
        "http.cookiejar.CookieJar.clear",
        "<list>.append"
    ],
    "requests.cookies.RequestsCookieJar.get": [
        "requests.cookies.RequestsCookieJar._find_no_duplicates"
    ],
    "requests.cookies.RequestsCookieJar._find_no_duplicates": [
        "<builtin>.iter",
        "<builtin>.KeyError"
    ],
    "requests.cookies.RequestsCookieJar.set": [
        "<builtin>.isinstance",
        "requests.cookies.create_cookie",
        "requests.cookies.morsel_to_cookie",
        "requests.cookies.remove_cookie_by_name",
        "requests.cookies.RequestsCookieJar.set_cookie"
    ],
    "requests.cookies.morsel_to_cookie": [
        "<builtin>.int",
        "<builtin>.TypeError",
        "calendar.timegm",
        "requests.cookies.create_cookie",
        "<builtin>.bool"
    ],
    "requests.cookies.RequestsCookieJar.iterkeys": [
        "<builtin>.iter"
    ],
    "requests.cookies.RequestsCookieJar.keys": [
        "requests.cookies.RequestsCookieJar.iterkeys",
        "<builtin>.list"
    ],
    "requests.cookies.RequestsCookieJar.itervalues": [
        "<builtin>.iter"
    ],
    "requests.cookies.RequestsCookieJar.values": [
        "<builtin>.list",
        "requests.cookies.RequestsCookieJar.itervalues"
    ],
    "requests.cookies.RequestsCookieJar.iteritems": [
        "<builtin>.iter"
    ],
    "requests.cookies.RequestsCookieJar.items": [
        "requests.cookies.RequestsCookieJar.iteritems",
        "<builtin>.list"
    ],
    "requests.cookies.RequestsCookieJar.list_domains": [
        "<builtin>.iter",
        "<list>.append"
    ],
    "requests.cookies.RequestsCookieJar.list_paths": [
        "<builtin>.iter",
        "<list>.append"
    ],
    "requests.cookies.RequestsCookieJar.multiple_domains": [
        "<builtin>.iter",
        "<list>.append"
    ],
    "requests.cookies.RequestsCookieJar.get_dict": [
        "<builtin>.iter"
    ],
    "requests.cookies.RequestsCookieJar.__contains__": [
        "<builtin>.super"
    ],
    "requests.cookies.RequestsCookieJar.__getitem__": [
        "requests.cookies.RequestsCookieJar._find_no_duplicates"
    ],
    "requests.cookies.RequestsCookieJar.__setitem__": [
        "requests.cookies.RequestsCookieJar.set"
    ],
    "requests.cookies.RequestsCookieJar.__delitem__": [
        "requests.cookies.remove_cookie_by_name"
    ],
    "requests.cookies.RequestsCookieJar.update": [
        "requests.cookies.RequestsCookieJar.set_cookie",
        "<builtin>.super",
        "<builtin>.isinstance",
        "collections.UserDict.__iter__"
    ],
    "requests.cookies.RequestsCookieJar._find": [
        "<builtin>.iter",
        "<builtin>.KeyError"
    ],
    "requests.cookies.RequestsCookieJar.__setstate__": [
        "threading.RLock"
    ],
    "requests.cookies.RequestsCookieJar.copy": [
        "requests.cookies.RequestsCookieJar.get_policy",
        "requests.cookies.RequestsCookieJar.update",
        "http.cookiejar.CookieJar.set_policy"
    ],
    "requests.cookies.RequestsCookieJar.get_policy": [],
    "http.cookiejar.CookieJar.set_policy": [],
    "requests.cookies._copy_cookie_jar": [
        "<map>.copy",
        "http.cookiejar.CookieJar.clear",
        "<list>.clear",
        "<list>.copy",
        "<map>.clear",
        "copy.copy",
        "collections.UserDict.copy",
        "collections.UserDict.__iter__",
        "requests.cookies.RequestsCookieJar.set_cookie",
        "<builtin>.hasattr",
        "requests.cookies.RequestsCookieJar.copy"
    ],
    "requests.cookies.merge_cookies": [
        "requests.cookies.RequestsCookieJar.update",
        "<builtin>.isinstance",
        "<map>.update",
        "<builtin>.ValueError",
        "collections.UserDict.__iter__",
        "requests.cookies.cookiejar_from_dict",
        "requests.cookies.RequestsCookieJar.set_cookie"
    ],
    "_dummy_thread.start_new_thread": [
        "<builtin>.dict",
        "<builtin>.TypeError",
        "traceback",
        "<builtin>.tuple",
        "<builtin>.type",
        "traceback.print_exc"
    ],
    "_dummy_thread.allocate_lock": [
        "_dummy_thread.LockType.__init__"
    ],
    "_dummy_thread.LockType.__init__": [],
    "_dummy_thread._set_sentinel": [
        "_dummy_thread.LockType.__init__"
    ],
    "_dummy_thread.LockType.__exit__": [
        "_dummy_thread.LockType.release"
    ],
    "_dummy_thread.LockType.release": [],
    "_dummy_thread.LockType.__repr__": [
        "<builtin>.hex",
        "<builtin>.id"
    ],
    "_dummy_thread.RLock.__init__": [
        "<builtin>.super"
    ],
    "_dummy_thread.RLock.acquire": [
        "<builtin>.super"
    ],
    "_dummy_thread.RLock.release": [
        "<builtin>.super"
    ],
    "requests.structures.CaseInsensitiveDict.__iter__": [
        "collections.OrderedDict.values"
    ],
    "requests.structures.CaseInsensitiveDict.__len__": [
        "<builtin>.len"
    ],
    "requests.structures.CaseInsensitiveDict.lower_items": [
        "collections.OrderedDict.items"
    ],
    "requests.structures.CaseInsensitiveDict.__eq__": [
        "<builtin>.dict",
        "requests.structures.CaseInsensitiveDict.__init__",
        "requests.structures.CaseInsensitiveDict.lower_items",
        "<builtin>.isinstance"
    ],
    "requests.structures.CaseInsensitiveDict.copy": [
        "collections.OrderedDict.values",
        "requests.structures.CaseInsensitiveDict.__init__"
    ],
    "requests.structures.CaseInsensitiveDict.__repr__": [
        "<builtin>.dict",
        "<builtin>.str"
    ],
    "requests.api.options": [
        "requests.api.request"
    ],
    "requests.api.head": [
        "requests.api.request"
    ],
    "requests.api.post": [
        "requests.api.request"
    ],
    "requests.api.put": [
        "requests.api.request"
    ],
    "requests.api.patch": [
        "requests.api.request"
    ],
    "requests.api.delete": [
        "requests.api.request"
    ],
    "requests.sessions.merge_setting": [
        "<builtin>.isinstance",
        "requests.structures.CaseInsensitiveDict.__init__",
        "collections.OrderedDict.items",
        "requests.utils.to_key_val_list",
        "collections.OrderedDict.__init__"
    ],
    "requests.sessions.merge_hooks": [
        "requests.sessions.merge_setting"
    ],
    "requests.sessions.SessionRedirectMixin.get_redirect_target": [
        "requests._internal_utils.to_native_string"
    ],
    "requests.sessions.SessionRedirectMixin.should_strip_auth": [
        "urllib.parse.urlparse",
        "<map>.get"
    ],
    "requests.sessions.SessionRedirectMixin.resolve_redirects": [
        "<list>.append",
        "requests.exceptions.RequestException.__init__",
        "urllib.parse.urljoin",
        "requests.sessions.SessionRedirectMixin.rebuild_proxies",
        "requests.utils.rewind_body",
        "urllib.parse.urlparse",
        "requests._internal_utils.to_native_string",
        "requests.sessions.SessionRedirectMixin.get_redirect_target",
        "<str>.startswith",
        "requests.models.PreparedRequest.prepare_cookies",
        "requests.sessions.SessionRedirectMixin.rebuild_auth",
        "requests.cookies.extract_cookies_to_jar",
        "requests.utils.requote_uri",
        "requests.sessions.Session.send",
        "<builtin>.len",
        "requests.cookies.merge_cookies",
        "requests.models.PreparedRequest.copy",
        "requests.sessions.SessionRedirectMixin.rebuild_method"
    ],
    "requests.sessions.SessionRedirectMixin.rebuild_method": [],
    "requests.sessions.SessionRedirectMixin.rebuild_proxies": [
        "requests.utils.resolve_proxies",
        "urllib.parse.urlparse",
        "requests.auth._basic_auth_str",
        "requests.utils.get_auth_from_url"
    ],
    "requests.auth._basic_auth_str": [
        "<builtin>.isinstance",
        "base64.b64encode",
        "requests._internal_utils.to_native_string",
        "<builtin>.type",
        "<builtin>.str",
        "warnings.warn"
    ],
    "requests.sessions.SessionRedirectMixin.rebuild_auth": [
        "requests.sessions.SessionRedirectMixin.should_strip_auth",
        "requests.models.PreparedRequest.prepare_auth",
        "requests.utils.get_netrc_auth"
    ],
    "requests.sessions.Session.__exit__": [
        "requests.sessions.Session.close"
    ],
    "requests.sessions.Session.close": [
        "collections.OrderedDict.values"
    ],
    "requests.sessions.Session.prepare_request": [
        "<builtin>.isinstance",
        "requests.utils.get_netrc_auth",
        "requests.models.PreparedRequest.prepare",
        "<str>.upper",
        "requests.sessions.merge_hooks",
        "requests.sessions.merge_setting",
        "requests.models.PreparedRequest.__init__",
        "requests.cookies.cookiejar_from_dict",
        "requests.cookies.merge_cookies"
    ],
    "requests.models.PreparedRequest.__init__": [
        "requests.hooks.default_hooks"
    ],
    "requests.models.PreparedRequest.prepare": [
        "requests.models.PreparedRequest.prepare_headers",
        "requests.models.PreparedRequest.prepare_auth",
        "requests.models.PreparedRequest.prepare_url",
        "requests.models.PreparedRequest.prepare_hooks",
        "requests.models.PreparedRequest.prepare_cookies",
        "requests.models.PreparedRequest.prepare_method",
        "requests.models.PreparedRequest.prepare_body"
    ],
    "requests.models.PreparedRequest.prepare_method": [
        "requests._internal_utils.to_native_string",
        "<str>.upper"
    ],
    "requests.models.PreparedRequest.prepare_url": [
        "<str>.lower",
        "requests.exceptions.RequestException.__init__",
        "requests.models.PreparedRequest._get_idna_encoded_host",
        "urllib3.util.url.parse_url",
        "<builtin>.isinstance",
        "requests.models.RequestEncodingMixin._encode_params",
        "<str>.lstrip",
        "requests._internal_utils.to_native_string",
        "<str>.startswith",
        "requests.utils.requote_uri",
        "urllib.parse.urlunparse",
        "<builtin>.str",
        "requests._internal_utils.unicode_is_ascii"
    ],
    "requests.models.PreparedRequest._get_idna_encoded_host": [
        "idna",
        "idna.core.encode"
    ],
    "requests.models.RequestEncodingMixin._encode_params": [
        "<builtin>.isinstance",
        "urllib.parse.urlencode",
        "requests.utils.to_key_val_list",
        "<list>.append",
        "<builtin>.hasattr"
    ],
    "requests.models.PreparedRequest.prepare_headers": [
        "<map>.items",
        "requests.structures.CaseInsensitiveDict.__init__",
        "requests._internal_utils.to_native_string",
        "collections.OrderedDict.items",
        "requests.utils.check_header_validity"
    ],
    "requests.models.PreparedRequest.prepare_cookies": [
        "requests.cookies.cookiejar_from_dict",
        "requests.cookies.get_cookie_header",
        "<builtin>.isinstance"
    ],
    "email.message.Message.keys": [],
    "requests.cookies.MockRequest.has_header": [],
    "requests.cookies.MockRequest.add_unredirected_header": [],
    "requests.models.PreparedRequest.prepare_body": [
        "<builtin>.NotImplementedError",
        "requests.exceptions.RequestException.__init__",
        "requests.models.RequestEncodingMixin._encode_params",
        "<builtin>.isinstance",
        "requests.utils.super_len",
        "json.dumps",
        "<builtin>.object",
        "<builtin>.getattr",
        "requests.models.PreparedRequest.prepare_content_length",
        "requests.models.RequestEncodingMixin._encode_files",
        "<builtin>.hasattr",
        "<builtin>.all"
    ],
    "requests.models.RequestEncodingMixin._encode_files": [
        "<list>.append",
        "urllib3.filepost.encode_multipart_formdata",
        "<builtin>.isinstance",
        "<builtin>.len",
        "requests.utils.to_key_val_list",
        "urllib3.fields.RequestField.make_multipart",
        "<builtin>.str",
        "requests.utils.guess_filename",
        "urllib3.fields.RequestField.__init__",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "requests.models.PreparedRequest.prepare_content_length": [
        "requests.utils.super_len"
    ],
    "requests.models.PreparedRequest.prepare_auth": [
        "<builtin>.isinstance",
        "<map>",
        "requests.structures.CaseInsensitiveDict.__init__",
        "requests.utils.get_auth_from_url",
        "requests.auth.HTTPBasicAuth.__init__",
        "<builtin>.any",
        "<builtin>.len",
        "requests.models.PreparedRequest.prepare_content_length",
        "collections.OrderedDict.__init__"
    ],
    "requests.auth.HTTPBasicAuth.__init__": [],
    "requests.models.PreparedRequest.prepare_hooks": [
        "requests.models.RequestHooksMixin.register_hook",
        "requests.structures.CaseInsensitiveDict.__iter__",
        "collections.OrderedDict.__iter__"
    ],
    "collections.OrderedDict.__iter__": [],
    "requests.models.RequestHooksMixin.register_hook": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "requests.sessions.Session.request": [
        "requests.models.Request.__init__",
        "requests.sessions.Session.prepare_request",
        "<str>.upper",
        "<map>.update",
        "requests.sessions.Session.send",
        "requests.sessions.Session.merge_environment_settings"
    ],
    "requests.models.Request.__init__": [
        "requests.models.RequestHooksMixin.register_hook",
        "requests.hooks.default_hooks",
        "<builtin>.list"
    ],
    "requests.sessions.Session.merge_environment_settings": [
        "<map>.items",
        "collections.OrderedDict.setdefault",
        "requests.utils.get_environ_proxies",
        "requests.sessions.merge_setting",
        "<map>.get",
        "<map>.setdefault"
    ],
    "requests.sessions.Session.send": [
        "requests.hooks.dispatch_hook",
        "requests.sessions.SessionRedirectMixin.resolve_redirects",
        "requests.utils.resolve_proxies",
        "requests.sessions.Session.get_adapter",
        "<builtin>.isinstance",
        "<builtin>.next",
        "requests.cookies.extract_cookies_to_jar",
        "<list>.pop",
        "time.time",
        "<list>.insert",
        "<builtin>.ValueError"
    ],
    "requests.sessions.Session.get_adapter": [
        "<str>.lower",
        "requests.exceptions.RequestException.__init__",
        "collections.OrderedDict.items",
        "<str>.startswith"
    ],
    "requests.hooks.dispatch_hook": [
        "<builtin>.hasattr"
    ],
    "requests.cookies.MockResponse.info": [],
    "requests.models.PreparedRequest.copy": [
        "requests.structures.CaseInsensitiveDict.copy",
        "requests.cookies._copy_cookie_jar",
        "requests.models.PreparedRequest.__init__"
    ],
    "requests.sessions.Session.get": [
        "requests.sessions.Session.request"
    ],
    "collections.OrderedDict.setdefault": [],
    "requests.sessions.Session.options": [
        "requests.sessions.Session.request"
    ],
    "requests.sessions.Session.head": [
        "requests.sessions.Session.request"
    ],
    "requests.sessions.Session.post": [
        "requests.sessions.Session.request"
    ],
    "requests.sessions.Session.put": [
        "requests.sessions.Session.request"
    ],
    "requests.sessions.Session.patch": [
        "requests.sessions.Session.request"
    ],
    "requests.sessions.Session.delete": [
        "requests.sessions.Session.request"
    ],
    "requests.sessions.Session.__getstate__": [
        "<builtin>.getattr"
    ],
    "requests.sessions.Session.__setstate__": [
        "<builtin>.setattr"
    ],
    "requests.sessions.session": [
        "requests.sessions.Session.__init__"
    ],
    "requests.adapters.SOCKSProxyManager": [
        "requests.exceptions.RequestException.__init__"
    ],
    "requests.adapters.BaseAdapter.__init__": [
        "<builtin>.super"
    ],
    "requests.adapters.HTTPAdapter.__getstate__": [
        "<builtin>.getattr"
    ],
    "requests.adapters.HTTPAdapter.__setstate__": [
        "<builtin>.setattr",
        "requests.adapters.HTTPAdapter.init_poolmanager"
    ],
    "requests.adapters.HTTPAdapter.proxy_manager_for": [
        "urllib3.poolmanager.proxy_from_url",
        "requests.adapters.HTTPAdapter.proxy_headers",
        "requests.adapters.SOCKSProxyManager",
        "requests.utils.get_auth_from_url"
    ],
    "requests.adapters.HTTPAdapter.proxy_headers": [
        "requests.auth._basic_auth_str",
        "requests.utils.get_auth_from_url"
    ],
    "requests.adapters.HTTPAdapter.cert_verify": [
        "<builtin>.OSError",
        "requests.utils.extract_zipped_paths",
        "<builtin>.isinstance"
    ],
    "requests.adapters.HTTPAdapter.build_response": [
        "requests.models.Response.__init__",
        "<builtin>.isinstance",
        "requests.structures.CaseInsensitiveDict.__init__",
        "requests.cookies.extract_cookies_to_jar",
        "<builtin>.getattr",
        "requests.utils.get_encoding_from_headers"
    ],
    "requests.models.Response.__init__": [
        "requests.cookies.cookiejar_from_dict",
        "requests.structures.CaseInsensitiveDict.__init__"
    ],
    "requests.adapters.HTTPAdapter.get_connection": [
        "requests.exceptions.RequestException.__init__",
        "urllib3.util.url.parse_url",
        "urllib.parse.urlparse",
        "requests.utils.select_proxy",
        "requests.utils.prepend_scheme_if_needed",
        "urllib3.poolmanager.PoolManager.connection_from_url",
        "requests.adapters.HTTPAdapter.proxy_manager_for"
    ],
    "requests.adapters.HTTPAdapter.close": [
        "<map>.values",
        "urllib3.poolmanager.PoolManager.clear"
    ],
    "requests.adapters.HTTPAdapter.request_url": [
        "requests.utils.urldefragauth",
        "requests.utils.select_proxy",
        "urllib.parse.urlparse"
    ],
    "requests.adapters.HTTPAdapter.send": [
        "requests.exceptions.RequestException.__init__",
        "requests.adapters.HTTPAdapter.request_url",
        "<builtin>.isinstance",
        "requests.adapters.HTTPAdapter.get_connection",
        "<builtin>.hex",
        "<builtin>.ConnectionError",
        "requests.adapters.HTTPAdapter.build_response",
        "urllib3.util.timeout.Timeout.__init__",
        "requests.adapters.HTTPAdapter.cert_verify",
        "<builtin>.len",
        "urllib3.response.HTTPResponse.from_httplib",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "requests.adapters.HTTPAdapter.add_headers"
    ],
    "requests.adapters.HTTPAdapter.add_headers": [],
    "requests.auth.AuthBase.__call__": [
        "<builtin>.NotImplementedError"
    ],
    "requests.auth.HTTPBasicAuth.__eq__": [
        "<builtin>.all"
    ],
    "requests.auth.HTTPBasicAuth.__call__": [
        "requests.auth._basic_auth_str"
    ],
    "requests.auth.HTTPProxyAuth.__call__": [
        "requests.auth._basic_auth_str"
    ],
    "requests.auth.HTTPDigestAuth.__init__": [
        "_thread._local"
    ],
    "requests.auth.HTTPDigestAuth.init_per_thread_state": [
        "<builtin>.hasattr"
    ],
    "requests.auth.HTTPDigestAuth.build_digest_header": [
        "requests.auth.HTTPDigestAuth.build_digest_header.sha512_utf8",
        "urllib.parse.urlparse",
        "requests.auth.HTTPDigestAuth.build_digest_header.sha256_utf8",
        "requests.auth.HTTPDigestAuth.build_digest_header.md5_utf8",
        "<map>.get",
        "<builtin>.str",
        "requests.auth.HTTPDigestAuth.build_digest_header.sha_utf8",
        "requests.auth.HTTPDigestAuth.build_digest_header.<lambda1>"
    ],
    "requests.auth.HTTPDigestAuth.build_digest_header.md5_utf8": [
        "<builtin>.isinstance"
    ],
    "requests.auth.HTTPDigestAuth.build_digest_header.sha_utf8": [
        "<builtin>.isinstance"
    ],
    "requests.auth.HTTPDigestAuth.build_digest_header.sha512_utf8": [
        "<builtin>.isinstance"
    ],
    "requests.auth.HTTPDigestAuth.build_digest_header.sha256_utf8": [
        "<builtin>.isinstance"
    ],
    "requests.auth.HTTPDigestAuth.build_digest_header.<lambda1>": [
        "requests.auth.HTTPDigestAuth.build_digest_header.md5_utf8",
        "requests.auth.HTTPDigestAuth.build_digest_header.sha_utf8",
        "requests.auth.HTTPDigestAuth.build_digest_header.sha512_utf8",
        "requests.auth.HTTPDigestAuth.build_digest_header.sha256_utf8"
    ],
    "requests.auth.HTTPDigestAuth.handle_401": [
        "requests.auth.HTTPDigestAuth.build_digest_header",
        "re.compile",
        "requests.cookies.extract_cookies_to_jar",
        "requests.utils.parse_dict_header"
    ],
    "requests.auth.HTTPDigestAuth.__call__": [
        "requests.auth.HTTPDigestAuth.build_digest_header",
        "requests.auth.HTTPDigestAuth.init_per_thread_state"
    ],
    "requests.auth.HTTPDigestAuth.__eq__": [
        "<builtin>.all"
    ],
    "requests.models.RequestEncodingMixin.path_url": [
        "urllib.parse.urlsplit",
        "<list>.append"
    ],
    "requests.models.Request.prepare": [
        "requests.models.PreparedRequest.prepare",
        "requests.models.PreparedRequest.__init__"
    ],
    "requests.models.Response.__exit__": [
        "requests.models.Response.close"
    ],
    "requests.models.Response.close": [
        "<builtin>.getattr",
        "urllib3.response.HTTPResponse.close"
    ],
    "requests.models.Response.__getstate__": [
        "<builtin>.getattr"
    ],
    "requests.models.Response.__setstate__": [
        "<builtin>.setattr"
    ],
    "requests.models.Response.__iter__": [
        "requests.models.Response.iter_content"
    ],
    "requests.models.Response.iter_content": [
        "requests.exceptions.RequestException.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "requests.utils.iter_slices",
        "requests.models.Response.iter_content.generate",
        "<builtin>.type",
        "requests.utils.stream_decode_response_unicode"
    ],
    "requests.models.Response.iter_content.generate": [
        "requests.exceptions.RequestException.__init__",
        "urllib3.response.HTTPResponse.read",
        "<builtin>.ConnectionError",
        "<builtin>.hasattr",
        "urllib3.response.HTTPResponse.stream"
    ],
    "requests.models.Response.ok": [
        "requests.models.Response.raise_for_status"
    ],
    "requests.models.Response.raise_for_status": [
        "requests.exceptions.RequestException.__init__",
        "<builtin>.isinstance"
    ],
    "requests.models.Response.apparent_encoding": [
        "charset_normalizer.legacy.detect"
    ],
    "requests.models.Response.iter_lines": [
        "requests.models.Response.iter_content"
    ],
    "requests.models.Response.content": [
        "requests.models.Response.iter_content",
        "<builtin>.RuntimeError"
    ],
    "requests.models.Response.text": [
        "<builtin>.str"
    ],
    "requests.models.Response.json": [
        "requests.utils.guess_json_utf",
        "json.loads",
        "requests.exceptions.JSONDecodeError.__init__",
        "<builtin>.len"
    ],
    "requests.utils.guess_json_utf": [],
    "requests.models.Response.links": [
        "requests.utils.parse_header_links"
    ],
    "encodings.idna.nameprep": [
        "stringprep.in_table_c5",
        "stringprep.in_table_c7",
        "stringprep.in_table_c9",
        "stringprep.in_table_b1",
        "stringprep.in_table_c12",
        "<builtin>.UnicodeError",
        "stringprep.in_table_d1",
        "stringprep.in_table_c22",
        "stringprep.in_table_c3",
        "stringprep.in_table_c6",
        "stringprep.in_table_d2",
        "<builtin>.any",
        "<list>.append",
        "stringprep.in_table_c4",
        "stringprep.in_table_c8"
    ],
    "stringprep.in_table_b1": [
        "<builtin>.ord"
    ],
    "stringprep.in_table_c12": [],
    "stringprep.in_table_c22": [
        "<builtin>.ord"
    ],
    "stringprep.in_table_c3": [],
    "stringprep.in_table_c4": [
        "<builtin>.ord"
    ],
    "stringprep.in_table_c5": [],
    "stringprep.in_table_c6": [
        "<builtin>.ord"
    ],
    "stringprep.in_table_c7": [
        "<builtin>.ord"
    ],
    "stringprep.in_table_c8": [
        "<builtin>.ord"
    ],
    "stringprep.in_table_c9": [
        "<builtin>.ord"
    ],
    "stringprep.in_table_d1": [],
    "stringprep.in_table_d2": [],
    "encodings.idna.ToASCII": [
        "encodings.idna.nameprep",
        "<builtin>.len",
        "<builtin>.UnicodeError",
        "<str>.startswith"
    ],
    "encodings.idna.ToUnicode": [
        "<builtin>.isinstance",
        "<builtin>.UnicodeError",
        "<builtin>.len",
        "<str>.startswith",
        "encodings.idna.nameprep",
        "<builtin>.str",
        "encodings.idna.ToASCII"
    ],
    "encodings.idna.Codec.encode": [
        "<builtin>.UnicodeError",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.len",
        "encodings.idna.ToASCII"
    ],
    "encodings.idna.Codec.decode": [
        "<builtin>.isinstance",
        "<builtin>.UnicodeError",
        "<builtin>.len",
        "<builtin>.bytes",
        "<list>.append"
    ],
    "encodings.idna.IncrementalEncoder._buffer_encode": [
        "<builtin>.UnicodeError",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.len",
        "encodings.idna.ToASCII"
    ],
    "encodings.idna.IncrementalDecoder._buffer_decode": [
        "<builtin>.isinstance",
        "<builtin>.UnicodeError",
        "<builtin>.len",
        "<builtin>.str",
        "<list>.append"
    ],
    "stringprep.in_table_a1": [
        "<builtin>.ord"
    ],
    "stringprep.map_table_b3": [
        "<map>.get"
    ],
    "stringprep.map_table_b2": [
        "stringprep.map_table_b3"
    ],
    "stringprep.in_table_c21": [
        "<builtin>.ord"
    ],
    "stringprep.in_table_c21_c22": [
        "<builtin>.ord"
    ],
    "urllib3.contrib.socks.SOCKSConnection.__init__": [
        "<builtin>.super"
    ],
    "urllib3.contrib.socks.SOCKSConnection._new_conn": [
        "urllib3.exceptions.PoolError.__init__",
        "<builtin>.isinstance"
    ],
    "urllib3.contrib.socks.SOCKSProxyManager.__init__": [
        "<builtin>.super",
        "urllib3.util.url.parse_url",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "rich_cli.markdown.CodeBlock.create": [
        "rich_cli.markdown.CodeBlock.__init__"
    ],
    "rich_cli.markdown.CodeBlock.__init__": [],
    "rich_cli.markdown.CodeBlock.__rich_console__": [
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__",
        "<builtin>.str"
    ],
    "rich.traceback.Traceback.from_exception": [
        "rich.traceback.Traceback.__init__",
        "rich.traceback.Traceback.extract"
    ],
    "rich.traceback.Traceback.__rich_console__": [
        "rich.theme.Theme.__init__",
        "rich.traceback.Traceback._render_stack",
        "rich.syntax.ANSISyntaxTheme.get_background_style",
        "<builtin>.reversed",
        "rich._loop.loop_last",
        "rich.style.Style.__init__",
        "rich.constrain.Constrain.__init__",
        "rich.panel.Panel.__init__",
        "rich.text.Text.from_markup",
        "rich.text.Text.assemble",
        "rich.syntax.ANSISyntaxTheme.get_style_for_token",
        "rich.syntax.PygmentsSyntaxTheme.get_style_for_token",
        "rich.syntax.PygmentsSyntaxTheme.get_background_style",
        "<list>"
    ],
    "rich.traceback.install.excepthook": [
        "rich.traceback.Traceback.from_exception"
    ],
    "rich.traceback.install.ipy_excepthook_closure.ipy_display_traceback": [
        "rich.traceback.install.excepthook",
        "<builtin>.range",
        "<map>.get"
    ],
    "rich.traceback.install.ipy_excepthook_closure.<lambda1>": [
        "rich.traceback.install.ipy_excepthook_closure.ipy_display_traceback"
    ],
    "rich._inspect.Inspect.__rich__": [
        "rich.console.Group.__init__",
        "rich.panel.Panel.fit",
        "rich._inspect.Inspect._render"
    ],
    "rich._inspect.Inspect._render": [
        "rich.text.Text.from_markup",
        "<builtin>.repr",
        "rich.table.Table.grid",
        "rich.panel.Panel.__init__",
        "rich.text.Text.append",
        "rich.text.Text.copy",
        "rich.text.Text.__init__",
        "rich._inspect.Inspect._get_formatted_doc",
        "rich._inspect.Inspect._render.safe_getattr",
        "rich.pretty.Pretty.__init__",
        "inspect.isclass",
        "rich.text.Text.assemble",
        "inspect.ismodule",
        "<builtin>.callable",
        "<builtin>.dir",
        "rich.text.Text.stylize",
        "rich.table.Table.add_column",
        "rich.table.Table.add_row",
        "<builtin>.len",
        "rich._inspect.Inspect._get_signature"
    ],
    "rich._inspect.Inspect._render.safe_getattr": [
        "<builtin>.getattr"
    ],
    "rich._inspect.Inspect._get_signature": [
        "inspect.signature",
        "inspect.getfile",
        "<str>.replace",
        "inspect.isclass",
        "inspect.iscoroutinefunction",
        "rich.text.Text.assemble",
        "rich.text.Text.__init__",
        "<builtin>.getattr",
        "<builtin>.str",
        "rich.text.Text.stylize"
    ],
    "rich._inspect.Inspect._get_formatted_doc": [
        "inspect.cleandoc",
        "rich._inspect._first_paragraph",
        "inspect.getdoc",
        "rich.control.escape_control_codes"
    ],
    "rich._inspect._first_paragraph": [],
    "rich.control.escape_control_codes": [],
    "rich_rst.MLStripper.__init__": [
        "<builtin>.super",
        "_io.StringIO",
        "html.parser.HTMLParser.reset"
    ],
    "html.parser.HTMLParser.reset": [
        "_markupbase.ParserBase.reset"
    ],
    "_markupbase.ParserBase.reset": [],
    "rich_rst.strip_tags": [
        "html.parser.HTMLParser.feed",
        "rich_rst.MLStripper.get_data",
        "rich_rst.MLStripper.__init__"
    ],
    "html.parser.HTMLParser.feed": [
        "html.parser.HTMLParser.goahead"
    ],
    "html.parser.HTMLParser.goahead": [
        "<str>.find",
        "_markupbase.ParserBase.parse_comment",
        "_markupbase.ParserBase.updatepos",
        "html.parser.HTMLParser.handle_charref",
        "re.compile",
        "html.parser.HTMLParser.parse_starttag",
        "html.parser.HTMLParser.handle_entityref",
        "html.parser.HTMLParser.parse_html_declaration",
        "<builtin>.len",
        "html.parser.HTMLParser.handle_data",
        "rich_rst.MLStripper.handle_data",
        "html.parser.HTMLParser.parse_pi",
        "html.parser.HTMLParser.parse_endtag",
        "<str>.rfind",
        "html.parser.HTMLParser.unescape",
        "pathlib.PurePath.match"
    ],
    "rich_rst.MLStripper.handle_data": [],
    "html.parser.HTMLParser.handle_data": [],
    "html.parser.HTMLParser.unescape": [
        "html.parser.HTMLParser.unescape",
        "warnings.warn"
    ],
    "_markupbase.ParserBase.updatepos": [
        "<str>.count",
        "<str>.rindex"
    ],
    "<str>.rindex": [],
    "html.parser.HTMLParser.handle_entityref": [],
    "html.parser.HTMLParser.handle_charref": [],
    "html.parser.HTMLParser.parse_html_declaration": [
        "<str>.find",
        "_markupbase.ParserBase.parse_comment",
        "html.parser.HTMLParser.handle_decl",
        "html.parser.HTMLParser.parse_bogus_comment",
        "_markupbase.ParserBase.parse_marked_section"
    ],
    "html.parser.HTMLParser.parse_bogus_comment": [
        "html.parser.HTMLParser.handle_comment",
        "<str>.find"
    ],
    "html.parser.HTMLParser.handle_comment": [],
    "html.parser.HTMLParser.handle_decl": [],
    "_markupbase.ParserBase.parse_marked_section": [
        "html.parser.HTMLParser.unknown_decl",
        "_markupbase.ParserBase._scan_name",
        "_markupbase.ParserBase.unknown_decl",
        "_markupbase.ParserBase.error"
    ],
    "_markupbase.ParserBase._scan_name": [
        "_markupbase.ParserBase.updatepos",
        "<map>",
        "_markupbase.ParserBase.error",
        "<str>.strip",
        "<builtin>.len",
        "<str>.lower",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "_markupbase.ParserBase.error": [
        "<builtin>.NotImplementedError"
    ],
    "html.parser.HTMLParser.unknown_decl": [],
    "_markupbase.ParserBase.unknown_decl": [],
    "_markupbase.ParserBase.parse_comment": [
        "html.parser.HTMLParser.handle_comment",
        "_markupbase.ParserBase.error"
    ],
    "html.parser.HTMLParser.parse_pi": [
        "html.parser.HTMLParser.handle_pi"
    ],
    "html.parser.HTMLParser.handle_pi": [],
    "html.parser.HTMLParser.parse_endtag": [
        "<str>.find",
        "html.parser.HTMLParser.parse_bogus_comment",
        "html.parser.HTMLParser.handle_endtag",
        "html.parser.HTMLParser.clear_cdata_mode",
        "html.parser.HTMLParser.handle_data",
        "rich_rst.MLStripper.handle_data",
        "<str>.lower",
        "pathlib.PurePath.match"
    ],
    "html.parser.HTMLParser.handle_endtag": [],
    "html.parser.HTMLParser.clear_cdata_mode": [],
    "html.parser.HTMLParser.parse_starttag": [
        "html.parser.HTMLParser.set_cdata_mode",
        "<builtin>.len",
        "_markupbase.ParserBase.getpos",
        "html.parser.HTMLParser.handle_startendtag",
        "html.parser.HTMLParser.check_for_whole_start_tag",
        "html.parser.HTMLParser.handle_starttag",
        "<list>.append",
        "html.parser.HTMLParser.handle_data",
        "html.parser.HTMLParser.unescape",
        "rich_rst.MLStripper.handle_data",
        "<str>.lower",
        "pathlib.PurePath.match"
    ],
    "html.parser.HTMLParser.check_for_whole_start_tag": [
        "<builtin>.AssertionError",
        "pathlib.PurePath.match",
        "<str>.startswith"
    ],
    "_markupbase.ParserBase.getpos": [],
    "html.parser.HTMLParser.handle_starttag": [],
    "html.parser.HTMLParser.set_cdata_mode": [
        "re.compile",
        "<str>.lower"
    ],
    "html.parser.HTMLParser.handle_startendtag": [
        "html.parser.HTMLParser.handle_endtag",
        "html.parser.HTMLParser.handle_starttag"
    ],
    "rich_rst.MLStripper.get_data": [],
    "rich_rst.RSTVisitor._find_lexer": [
        "<builtin>.len"
    ],
    "rich_rst.RSTVisitor.visit_paragraph": [
        "rich_rst.RSTVisitor.visit_system_message",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "rich_rst.RSTVisitor.visit_system_message": [
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.depart_paragraph": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "rich_rst.RSTVisitor.visit_title": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_Text": [
        "rich.text.Text.__init__",
        "rich.console.Console.get_style",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_admonition": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_attention": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_caution": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_danger": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_error": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_hint": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_important": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_note": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_tip": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_warning": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_subscript": [
        "rich.text.Text.__init__",
        "rich.console.Console.get_style",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_superscript": [
        "rich.text.Text.__init__",
        "rich.console.Console.get_style",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_emphasis": [
        "rich.text.Text.__init__",
        "rich.console.Console.get_style",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_strong": [
        "rich.text.Text.__init__",
        "rich.console.Console.get_style",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_image": [
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_bullet_list": [
        "rich.console.Console.get_style",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_enumerated_list": [
        "rich.console.Console.get_style",
        "<builtin>.enumerate",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_literal": [
        "rich.text.Text.__init__",
        "rich.console.Console.get_style",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_literal_block": [
        "<builtin>.isinstance",
        "rich_rst.RSTVisitor._find_lexer",
        "rich.text.Text.__init__",
        "<list>.append",
        "rich.console.Console.get_style"
    ],
    "rich_rst.RSTVisitor.visit_field": [
        "<builtin>.isinstance",
        "rich.table.Table.add_row",
        "rich.text.Text.__init__",
        "<list>.append",
        "rich.console.Console.get_style",
        "rich.table.Table.__init__"
    ],
    "rich_rst.RSTVisitor.visit_definition_list": [
        "rich_rst.RSTVisitor.visit_literal",
        "<builtin>.isinstance",
        "<builtin>.len",
        "rich_rst.RSTVisitor.visit_bullet_list",
        "rich_rst.RSTVisitor.visit_block_quote",
        "<list>.append",
        "rich.console.Console.get_style",
        "rich_rst.RSTVisitor.visit_literal_block"
    ],
    "rich_rst.RSTVisitor.visit_block_quote": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_option_list": [
        "<list>.append",
        "rich.console.Console.get_style",
        "rich.text.Text.__init__",
        "<builtin>.len"
    ],
    "rich_rst.RSTVisitor.visit_doctest_block": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_line_block": [
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_sidebar": [
        "<list>.append",
        "<builtin>.len"
    ],
    "rich_rst.RSTVisitor.visit_transition": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_rubric": [
        "rich_rst.RSTVisitor.visit_title"
    ],
    "rich_rst.RSTVisitor.visit_math_block": [
        "rich.text.Text.__init__",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_citation": [
        "rich.console.Console.get_style",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_citation_reference": [
        "rich.console.Console.get_style",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_header": [
        "<list>.insert",
        "rich.console.Console.get_style"
    ],
    "rich_rst.RSTVisitor.visit_footer": [
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_footnote": [
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_generated": [
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_problematic": [
        "<list>.append"
    ],
    "rich_rst.RSTVisitor.visit_raw": [
        "rich.console.Console.get_style",
        "rich_rst.RSTVisitor._find_lexer",
        "rich_rst.strip_tags",
        "<list>.append"
    ],
    "html.parser.HTMLParser.__init__": [
        "html.parser.HTMLParser.reset"
    ],
    "html.parser.HTMLParser.close": [
        "html.parser.HTMLParser.goahead"
    ],
    "_markupbase.ParserBase.__init__": [
        "<builtin>.RuntimeError"
    ],
    "_markupbase.ParserBase.parse_declaration": [
        "html.parser.HTMLParser.unknown_decl",
        "_markupbase.ParserBase.parse_comment",
        "<map>",
        "_markupbase.ParserBase.error",
        "_markupbase.ParserBase.unknown_decl",
        "html.parser.HTMLParser.handle_decl",
        "_markupbase.ParserBase._scan_name",
        "<builtin>.len",
        "_markupbase.ParserBase.parse_marked_section",
        "_markupbase.ParserBase._parse_doctype_subset",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "_markupbase.ParserBase._parse_doctype_subset": [
        "_markupbase.ParserBase.parse_comment",
        "_markupbase.ParserBase.updatepos",
        "_markupbase.ParserBase.error",
        "_markupbase.ParserBase._scan_name",
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "_markupbase.ParserBase._parse_doctype_element": [
        "<str>.find",
        "_markupbase.ParserBase._scan_name"
    ],
    "_markupbase.ParserBase._parse_doctype_attlist": [
        "<str>.find",
        "<map>",
        "_markupbase.ParserBase._scan_name",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "_markupbase.ParserBase._parse_doctype_notation": [
        "_markupbase.ParserBase._scan_name",
        "pathlib.PurePath.match",
        "<map>",
        "<list>"
    ],
    "_markupbase.ParserBase._parse_doctype_entity": [
        "_markupbase.ParserBase._scan_name",
        "pathlib.PurePath.match",
        "<map>",
        "<list>"
    ],
    "docutils.io.Input.decode": [
        "docutils.io.Input.determine_encoding_from_data",
        "<builtin>.isinstance",
        "docutils.io.error_string",
        "<builtin>.UnicodeError",
        "<builtin>.str",
        "<list>.append",
        "<builtin>.repr"
    ],
    "docutils.io.Input.determine_encoding_from_data": [
        "<str>.splitlines",
        "<str>.startswith"
    ],
    "docutils.io.error_string": [],
    "docutils.io.Output.encode": [
        "<builtin>.isinstance"
    ],
    "docutils.io.ErrorOutput.__init__": [
        "<builtin>.open",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "docutils.io.ErrorOutput.write": [
        "codecs.StreamRecoder.write",
        "<builtin>.isinstance",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.str",
        "rich.file_proxy.FileProxy.write",
        "docutils.io.ErrorOutput.write"
    ],
    "docutils.io.ErrorOutput.close": [
        "click.utils.LazyFile.close",
        "click._compat._AtomicFile.close",
        "docutils.io.ErrorOutput.close"
    ],
    "docutils.io.ErrorOutput.isatty": [
        "click._compat._NonClosingTextIOWrapper.isatty",
        "click._winconsole.ConsoleStream.isatty",
        "docutils.io.ErrorOutput.isatty"
    ],
    "docutils.io.FileInput.__init__": [
        "docutils.io.Input.__init__",
        "<builtin>.UnicodeError",
        "<builtin>.open",
        "docutils.io.check_encoding",
        "docutils.io.ErrorOutput.__init__"
    ],
    "docutils.io.Input.__init__": [],
    "docutils.io.check_encoding": [],
    "docutils.io.FileInput.read": [
        "<str>.splitlines",
        "docutils.io.Input.decode",
        "<builtin>.open",
        "codecs.StreamRecoder.read"
    ],
    "docutils.io.FileInput.readlines": [
        "<str>.splitlines",
        "docutils.io.FileInput.read"
    ],
    "docutils.io.FileOutput.__init__": [
        "docutils.io.Output.__init__",
        "docutils.io.ErrorOutput.__init__",
        "<builtin>.print",
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "docutils.io.Output.__init__": [],
    "docutils.io.FileOutput.open": [
        "<builtin>.open"
    ],
    "docutils.io.FileOutput.write": [
        "codecs.StreamRecoder.write",
        "<builtin>.isinstance",
        "docutils.io.error_string",
        "<builtin>.bytes",
        "<builtin>.UnicodeError",
        "docutils.io.FileOutput.open",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "docutils.io.check_encoding",
        "click._winconsole.ConsoleStream.write",
        "docutils.io.Output.encode",
        "rich.file_proxy.FileProxy.write",
        "<builtin>.ValueError"
    ],
    "docutils.io.FileOutput.close": [
        "click.utils.LazyFile.close",
        "click._compat._AtomicFile.close"
    ],
    "docutils.io.StringInput.read": [
        "docutils.io.Input.decode"
    ],
    "docutils.io.StringOutput.write": [
        "docutils.io.Output.encode"
    ],
    "docutils.VersionInfo.__new__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "docutils.VersionInfo.__lt__": [
        "<builtin>.isinstance"
    ],
    "docutils.VersionInfo.__gt__": [
        "<builtin>.isinstance"
    ],
    "docutils.VersionInfo.__le__": [
        "<builtin>.isinstance"
    ],
    "docutils.VersionInfo.__ge__": [
        "<builtin>.isinstance"
    ],
    "docutils.TransformSpec.get_transforms": [
        "warnings",
        "<builtin>.list",
        "warnings.warn"
    ],
    "xml.dom.minidom": [
        "xml.dom.minidom.CharacterData",
        "xml.dom.minidom.ProcessingInstruction",
        "xml.dom.minidom.Identified",
        "xml.dom.minidom.DOMImplementation",
        "xml.dom.minidom.DocumentType",
        "xml.dom.minicompat.defproperty",
        "xml.dom.minidom.NamedNodeMap",
        "xml.dom.minidom.Element",
        "xml.dom.minidom.Entity",
        "xml.dom.minicompat",
        "xml.dom",
        "xml.dom.minidom.Node",
        "xml.dom.minidom.ElementInfo",
        "xml.dom.minidom.TypeInfo.__init__",
        "xml.dom.minidom.Text",
        "xml.dom.minidom.Childless",
        "xml.dom.minidom.CDATASection",
        "xml.dom.minidom.TypeInfo",
        "xml.dom.minidom.Notation",
        "xml.dom.minidom.Comment",
        "io",
        "xml.dom.minidom.DocumentFragment",
        "xml.dom.domreg",
        "xml.dom.minidom.Document",
        "xml.dom.minidom.ReadOnlySequentialNamedNodeMap",
        "xml.dom.minidom.Attr",
        "xml.dom.xmlbuilder"
    ],
    "docutils.nodes.Node.asdom": [
        "xml.dom.minidom",
        "xml.dom.minidom.Document.__init__",
        "docutils.nodes.Element._dom_node"
    ],
    "xml.dom": [
        "xml.dom.DomstringSizeErr",
        "xml.dom.SyntaxErr",
        "xml.dom.NotFoundErr",
        "xml.dom.HierarchyRequestErr",
        "xml.dom.InvalidStateErr",
        "xml.dom.UserDataHandler",
        "xml.dom.InvalidModificationErr",
        "xml.dom.DOMException",
        "xml.dom.InvalidAccessErr",
        "xml.dom.IndexSizeErr",
        "xml.dom.InvalidCharacterErr",
        "xml.dom.NoModificationAllowedErr",
        "xml.dom.ValidationErr",
        "xml.dom.NoDataAllowedErr",
        "xml.dom.NotSupportedErr",
        "xml.dom.InuseAttributeErr",
        "xml.dom.domreg",
        "xml.dom.Node",
        "xml.dom.WrongDocumentErr",
        "xml.dom.NamespaceErr"
    ],
    "xml.dom.Node": [],
    "xml.dom.DOMException": [],
    "xml.dom.IndexSizeErr": [],
    "xml.dom.DomstringSizeErr": [],
    "xml.dom.HierarchyRequestErr": [],
    "xml.dom.WrongDocumentErr": [],
    "xml.dom.InvalidCharacterErr": [],
    "xml.dom.NoDataAllowedErr": [],
    "xml.dom.NoModificationAllowedErr": [],
    "xml.dom.NotFoundErr": [],
    "xml.dom.NotSupportedErr": [],
    "xml.dom.InuseAttributeErr": [],
    "xml.dom.InvalidStateErr": [],
    "xml.dom.SyntaxErr": [],
    "xml.dom.InvalidModificationErr": [],
    "xml.dom.NamespaceErr": [],
    "xml.dom.InvalidAccessErr": [],
    "xml.dom.ValidationErr": [],
    "xml.dom.UserDataHandler": [],
    "xml.dom.domreg": [],
    "xml.dom.minicompat": [
        "xml.dom",
        "xml.dom.minicompat.NodeList",
        "xml.dom.minicompat.EmptyNodeList"
    ],
    "xml.dom.minicompat.NodeList": [
        "<builtin>.property"
    ],
    "xml.dom.minicompat.EmptyNodeList": [
        "<builtin>.property"
    ],
    "xml.dom.xmlbuilder": [
        "xml.dom.xmlbuilder.DocumentLS",
        "warnings",
        "xml.dom.xmlbuilder.DOMInputSource",
        "xml.dom.NodeFilter",
        "xml.dom.xmlbuilder.DOMBuilderFilter",
        "xml.dom",
        "xml.dom.xmlbuilder.Options",
        "xml.dom.xmlbuilder.DOMEntityResolver",
        "copy",
        "xml.dom.xmlbuilder.DOMImplementationLS",
        "xml.dom.xmlbuilder.DOMBuilder"
    ],
    "xml.dom.NodeFilter": [
        "xml.dom.NodeFilter.NodeFilter"
    ],
    "xml.dom.NodeFilter.NodeFilter": [],
    "xml.dom.xmlbuilder.Options": [],
    "xml.dom.xmlbuilder.DOMBuilder": [],
    "xml.dom.xmlbuilder.DOMEntityResolver": [],
    "xml.dom.xmlbuilder.DOMInputSource": [],
    "xml.dom.xmlbuilder.DOMBuilderFilter": [],
    "xml.dom.xmlbuilder.DocumentLS": [],
    "xml.dom.xmlbuilder.DOMImplementationLS": [],
    "xml.dom.minidom.Node": [],
    "xml.dom.minicompat.defproperty": [
        "<builtin>.setattr",
        "<builtin>.property",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "xml.dom.minidom.DocumentFragment": [],
    "xml.dom.minidom.Attr": [
        "<builtin>.property"
    ],
    "xml.dom.minidom.NamedNodeMap": [],
    "xml.dom.minidom.TypeInfo": [],
    "xml.dom.minidom.TypeInfo.__init__": [],
    "xml.dom.minidom.Element": [],
    "xml.dom.minidom.Childless": [],
    "xml.dom.minidom.ProcessingInstruction": [
        "<builtin>.property"
    ],
    "xml.dom.minidom.CharacterData": [
        "<builtin>.property"
    ],
    "xml.dom.minidom.Text": [],
    "xml.dom.minidom.Comment": [],
    "xml.dom.minidom.CDATASection": [],
    "xml.dom.minidom.ReadOnlySequentialNamedNodeMap": [],
    "xml.dom.minidom.Identified": [],
    "xml.dom.minidom.DocumentType": [],
    "xml.dom.minidom.Entity": [],
    "xml.dom.minidom.Notation": [],
    "xml.dom.minidom.DOMImplementation": [],
    "xml.dom.minidom.ElementInfo": [],
    "xml.dom.minidom.Document": [],
    "xml.dom.minidom.Document.__init__": [],
    "docutils.nodes.Node._fast_findall": [
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Node.traverse": [
        "docutils.nodes.Node.findall",
        "<builtin>.list",
        "warnings.warn"
    ],
    "docutils.nodes.Node.findall": [
        "<builtin>.isinstance",
        "docutils.nodes.Node.findall.condition",
        "docutils.nodes.Node._fast_findall",
        "docutils.nodes.Node._superfast_findall",
        "<builtin>.len"
    ],
    "docutils.nodes.Node._superfast_findall": [],
    "docutils.nodes.Node.findall.condition": [
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Node.next_node": [
        "docutils.nodes.Node.findall",
        "<builtin>.next"
    ],
    "docutils.nodes.reprunicode.__init__": [
        "<builtin>.super",
        "warnings.warn"
    ],
    "docutils.nodes.ensure_str": [
        "warnings.warn"
    ],
    "docutils.nodes.Text.__new__": [
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Text.shortrepr": [
        "<builtin>.str",
        "<builtin>.len"
    ],
    "docutils.nodes.Text.__repr__": [
        "docutils.nodes.Text.shortrepr"
    ],
    "docutils.nodes.Text._dom_node": [
        "<builtin>.str"
    ],
    "docutils.nodes.Text.astext": [
        "docutils.nodes.unescape",
        "<builtin>.str"
    ],
    "docutils.nodes.unescape": [
        "<str>.replace"
    ],
    "docutils.nodes.Text.copy": [
        "<builtin>.str"
    ],
    "docutils.nodes.Text.deepcopy": [
        "docutils.nodes.Text.copy"
    ],
    "docutils.nodes.Text.pformat": [
        "<builtin>.repr",
        "docutils.nodes.Text.astext"
    ],
    "docutils.nodes.Element.__init__": [
        "docutils.nodes.Element.extend",
        "<map>.items"
    ],
    "docutils.nodes.Element.extend": [
        "docutils.nodes.Element.append"
    ],
    "docutils.nodes.Element.append": [
        "docutils.nodes.Node.setup_child",
        "<list>.append"
    ],
    "docutils.nodes.Node.setup_child": [],
    "docutils.nodes.Element._dom_node": [
        "xml.dom.minidom.Element.setAttribute",
        "<builtin>.isinstance",
        "docutils.nodes.serial_escape",
        "xml.dom.minidom.Node.appendChild",
        "docutils.nodes.Element.attlist",
        "xml.dom.minidom.Document.createElement"
    ],
    "docutils.nodes.Element.attlist": [
        "<map>.items",
        "<builtin>.sorted",
        "docutils.nodes.Element.non_default_attributes"
    ],
    "docutils.nodes.Element.non_default_attributes": [
        "docutils.nodes.Element.is_not_default",
        "<map>.items"
    ],
    "docutils.nodes.Element.is_not_default": [],
    "docutils.nodes.serial_escape": [
        "<str>.replace"
    ],
    "docutils.nodes.Element.__repr__": [
        "<builtin>.len"
    ],
    "docutils.nodes.Element.__str__": [
        "docutils.nodes.Element.emptytag",
        "<builtin>.str",
        "docutils.nodes.Element.endtag",
        "docutils.nodes.Element.starttag"
    ],
    "docutils.nodes.Element.emptytag": [
        "docutils.nodes.Element.attlist"
    ],
    "docutils.nodes.Element.starttag": [
        "<list>.append",
        "docutils.nodes.serial_escape",
        "<builtin>.isinstance",
        "docutils.nodes.pseudo_quoteattr",
        "docutils.nodes.Element.attlist",
        "<builtin>.str"
    ],
    "docutils.nodes.pseudo_quoteattr": [],
    "docutils.nodes.Element.endtag": [],
    "docutils.nodes.Element.__len__": [
        "<builtin>.len"
    ],
    "docutils.nodes.Element.__contains__": [
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Element.__getitem__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Element.__setitem__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "docutils.nodes.Node.setup_child",
        "<builtin>.str"
    ],
    "docutils.nodes.Element.__delitem__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Element.__iadd__": [
        "docutils.nodes.Element.extend",
        "docutils.nodes.Element.append",
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Element.get": [
        "<map>.get"
    ],
    "docutils.nodes.Element.setdefault": [
        "<map>.setdefault"
    ],
    "docutils.nodes.Element.get_language_code": [
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.Element.insert": [
        "<list>.insert",
        "<builtin>.isinstance",
        "docutils.nodes.Node.setup_child"
    ],
    "docutils.nodes.Element.pop": [
        "<list>.pop"
    ],
    "docutils.nodes.Element.remove": [
        "<list>.remove"
    ],
    "docutils.nodes.Element.index": [
        "<list>.index"
    ],
    "docutils.nodes.Element.update_basic_atts": [
        "docutils.nodes.Element.append_attr_list",
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Element.append_attr_list": [],
    "docutils.nodes.Element.coerce_append_attr_list": [
        "docutils.nodes.Element.append_attr_list",
        "<builtin>.isinstance",
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.Element.replace_attr": [
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.Element.copy_attr_convert": [
        "docutils.nodes.Element.coerce_append_attr_list",
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.Element.copy_attr_coerce": [
        "docutils.nodes.Element.coerce_append_attr_list",
        "docutils.nodes.Element.replace_attr",
        "<builtin>.isinstance",
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.Element.copy_attr_concatenate": [
        "docutils.nodes.Element.append_attr_list",
        "docutils.nodes.Element.replace_attr",
        "<builtin>.isinstance",
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.Element.copy_attr_consistent": [
        "docutils.nodes.Element.replace_attr",
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.Element.update_all_atts": [
        "docutils.nodes.Element.copy_attr_convert",
        "<builtin>.isinstance",
        "docutils.nodes.Element.copy_attr_consistent",
        "docutils.nodes.Element.copy_attr_concatenate",
        "<builtin>.filter",
        "docutils.nodes.Element.update_basic_atts",
        "docutils.nodes.Element.copy_attr_coerce"
    ],
    "docutils.nodes.Element.update_all_atts_consistantly": [
        "docutils.nodes.Element.update_all_atts"
    ],
    "docutils.nodes.Element.update_all_atts_concatenating": [
        "docutils.nodes.Element.update_all_atts"
    ],
    "docutils.nodes.Element.update_all_atts_coercion": [
        "docutils.nodes.Element.update_all_atts"
    ],
    "docutils.nodes.Element.update_all_atts_convert": [
        "docutils.nodes.Element.update_all_atts"
    ],
    "docutils.nodes.Element.replace": [
        "docutils.nodes.Element.index",
        "<builtin>.isinstance",
        "docutils.nodes.Node.setup_child"
    ],
    "docutils.nodes.Element.replace_self": [
        "<builtin>.isinstance"
    ],
    "docutils.nodes.Element.first_child_matching_class": [
        "<builtin>.range",
        "<builtin>.min",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.nodes.Element.first_child_not_matching_class": [
        "<builtin>.range",
        "<builtin>.min",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.nodes.Element.pformat": [
        "docutils.nodes.Element.starttag"
    ],
    "docutils.nodes.Element.deepcopy": [
        "docutils.nodes.pending.copy",
        "docutils.nodes.document.copy",
        "docutils.nodes.Element.copy"
    ],
    "docutils.nodes.Element.copy": [],
    "docutils.nodes.Element.set_class": [
        "warnings.warn"
    ],
    "docutils.nodes.Element.note_referenced_by": [
        "<builtin>.getattr"
    ],
    "docutils.nodes.TextElement.__init__": [
        "docutils.nodes.Element.__init__"
    ],
    "docutils.nodes.FixedTextElement.__init__": [
        "docutils.nodes.TextElement.__init__"
    ],
    "docutils.nodes.document.__init__": [
        "collections.Counter.__init__",
        "docutils.transforms",
        "docutils.nodes.Element.__init__"
    ],
    "docutils.nodes.document.asdom": [
        "xml.dom.minidom",
        "xml.dom.minidom.Document.__init__",
        "docutils.nodes.Element._dom_node",
        "xml.dom.minidom.Document.appendChild"
    ],
    "xml.dom.minidom.Document.createElement": [
        "xml.dom.minidom.Element.__init__"
    ],
    "xml.dom.minidom.Element.__init__": [],
    "xml.dom.minidom.Element.setAttribute": [
        "xml.dom.minidom.Element.setAttributeNode",
        "xml.dom.minidom._clear_id_cache",
        "xml.dom.minidom.Element.getAttributeNode",
        "xml.dom.minidom.Attr.__init__"
    ],
    "xml.dom.minidom.Element.getAttributeNode": [
        "<map>.get"
    ],
    "xml.dom.minidom._clear_id_cache": [
        "xml.dom.minidom._in_document",
        "<map>.clear"
    ],
    "xml.dom.minidom._in_document": [],
    "xml.dom.minidom.Attr.__init__": [],
    "xml.dom.minidom.Element.setAttributeNode": [
        "xml.dom.minidom.Element._ensure_attributes",
        "xml.dom.minidom._set_attribute_node",
        "xml.dom.minidom.Element.removeAttributeNode",
        "<map>.get"
    ],
    "xml.dom.minidom.Element._ensure_attributes": [],
    "xml.dom.minidom.Element.removeAttributeNode": [
        "xml.dom.minidom._clear_id_cache"
    ],
    "xml.dom.minidom._set_attribute_node": [
        "xml.dom.minidom.Element._ensure_attributes",
        "xml.dom.minidom._clear_id_cache"
    ],
    "xml.dom.minidom.Node.appendChild": [
        "xml.dom.minidom.Childless.appendChild",
        "xml.dom.minidom._append_child",
        "xml.dom.minidom.Node.appendChild",
        "xml.dom.minidom.Document.appendChild",
        "xml.dom.minidom._clear_id_cache",
        "<builtin>.tuple",
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Entity.appendChild",
        "xml.dom.minidom.Document.removeChild",
        "xml.dom.minidom.Entity.removeChild",
        "<builtin>.repr",
        "xml.dom.minidom.Node.removeChild"
    ],
    "xml.dom.minidom._append_child": [],
    "xml.dom.minidom.Document.appendChild": [
        "xml.dom.minidom.Document._get_documentElement",
        "xml.dom.minidom.Node.appendChild",
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Document.removeChild",
        "xml.dom.minidom.Entity.removeChild",
        "<builtin>.repr",
        "xml.dom.minidom.Node.removeChild"
    ],
    "xml.dom.minidom.Document._get_documentElement": [],
    "docutils.nodes.document.set_id": [
        "docutils.utils.Reporter.severe",
        "docutils.nodes.make_id",
        "<map>.setdefault"
    ],
    "docutils.nodes.make_id": [
        "<str>.lower",
        "<str>.translate",
        "<builtin>.str"
    ],
    "docutils.nodes.document.set_name_id_map": [
        "<builtin>.tuple",
        "docutils.nodes.document.set_duplicate_name_id"
    ],
    "docutils.nodes.document.set_duplicate_name_id": [
        "docutils.nodes.dupname",
        "docutils.utils.Reporter.system_message",
        "docutils.utils.Reporter.info"
    ],
    "docutils.nodes.dupname": [],
    "docutils.nodes.document.note_implicit_target": [
        "docutils.nodes.document.set_id",
        "docutils.nodes.document.set_name_id_map"
    ],
    "docutils.nodes.document.note_explicit_target": [
        "docutils.nodes.document.set_id",
        "docutils.nodes.document.set_name_id_map"
    ],
    "docutils.nodes.document.note_refname": [
        "<map>.setdefault"
    ],
    "docutils.nodes.document.note_refid": [
        "<map>.setdefault"
    ],
    "docutils.nodes.document.note_indirect_target": [
        "docutils.nodes.document.note_refname",
        "<list>.append"
    ],
    "docutils.nodes.document.note_anonymous_target": [
        "docutils.nodes.document.set_id"
    ],
    "docutils.nodes.document.note_autofootnote": [
        "docutils.nodes.document.set_id",
        "<list>.append"
    ],
    "docutils.nodes.document.note_autofootnote_ref": [
        "docutils.nodes.document.set_id",
        "<list>.append"
    ],
    "docutils.nodes.document.note_symbol_footnote": [
        "docutils.nodes.document.set_id",
        "<list>.append"
    ],
    "docutils.nodes.document.note_symbol_footnote_ref": [
        "docutils.nodes.document.set_id",
        "<list>.append"
    ],
    "docutils.nodes.document.note_footnote": [
        "docutils.nodes.document.set_id",
        "<list>.append"
    ],
    "docutils.nodes.document.note_footnote_ref": [
        "docutils.nodes.document.set_id",
        "docutils.nodes.document.note_refname",
        "<map>.setdefault"
    ],
    "docutils.nodes.document.note_citation": [
        "<list>.append"
    ],
    "docutils.nodes.document.note_citation_ref": [
        "docutils.nodes.document.set_id",
        "docutils.nodes.document.note_refname",
        "<map>.setdefault"
    ],
    "docutils.nodes.document.note_substitution_def": [
        "docutils.nodes.dupname",
        "docutils.nodes.fully_normalize_name",
        "docutils.nodes.whitespace_normalize_name",
        "docutils.utils.Reporter.error"
    ],
    "docutils.nodes.whitespace_normalize_name": [],
    "docutils.nodes.fully_normalize_name": [
        "<str>.lower"
    ],
    "docutils.nodes.document.note_substitution_ref": [
        "docutils.nodes.whitespace_normalize_name"
    ],
    "docutils.nodes.document.note_parse_message": [
        "<list>.append"
    ],
    "docutils.nodes.document.note_transform_message": [
        "<list>.append"
    ],
    "docutils.nodes.document.get_decoration": [
        "docutils.nodes.Element.first_child_not_matching_class",
        "docutils.nodes.Element.insert",
        "docutils.nodes.Element.append"
    ],
    "docutils.nodes.decoration.get_header": [
        "docutils.nodes.Element.insert",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.nodes.decoration.get_footer": [
        "docutils.nodes.Element.append",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.nodes.option_argument.astext": [
        "docutils.nodes.Element.astext",
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.Element.astext": [],
    "docutils.nodes.system_message.__init__": [
        "<map>.pop",
        "<builtin>.print",
        "docutils.nodes.Element.__init__"
    ],
    "docutils.nodes.system_message.astext": [
        "docutils.nodes.Element.astext",
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.pending.__init__": [
        "docutils.nodes.Element.__init__"
    ],
    "docutils.nodes.pending.pformat": [
        "<builtin>.isinstance",
        "<list>.extend",
        "<builtin>.sorted",
        "<list>.append",
        "docutils.nodes.Element.pformat"
    ],
    "docutils.nodes.image.astext": [
        "docutils.nodes.Element.get"
    ],
    "docutils.nodes.NodeVisitor.dispatch_visit": [
        "<builtin>.getattr"
    ],
    "docutils.nodes.NodeVisitor.dispatch_departure": [
        "<builtin>.getattr"
    ],
    "docutils.nodes.NodeVisitor.unknown_visit": [
        "<builtin>.NotImplementedError"
    ],
    "docutils.nodes.NodeVisitor.unknown_departure": [
        "<builtin>.NotImplementedError"
    ],
    "docutils.nodes.TreeCopyVisitor.__init__": [
        "docutils.nodes.NodeVisitor.__init__"
    ],
    "docutils.nodes.NodeVisitor.__init__": [],
    "docutils.nodes.TreeCopyVisitor.default_visit": [
        "<list>.append"
    ],
    "docutils.nodes.TreeCopyVisitor.default_departure": [
        "<list>.pop"
    ],
    "docutils.parsers.rst.Parser.get_transforms": [
        "docutils.TransformSpec.get_transforms"
    ],
    "docutils.parsers.rst.Parser.parse": [
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.Directive.run": [
        "<builtin>.NotImplementedError"
    ],
    "docutils.parsers.rst.Directive.directive_error": [
        "docutils.parsers.rst.DirectiveError.__init__"
    ],
    "docutils.parsers.rst.DirectiveError.__init__": [],
    "docutils.parsers.rst.Directive.debug": [
        "docutils.parsers.rst.Directive.directive_error"
    ],
    "docutils.parsers.rst.Directive.info": [
        "docutils.parsers.rst.Directive.directive_error"
    ],
    "docutils.parsers.rst.Directive.warning": [
        "docutils.parsers.rst.Directive.directive_error"
    ],
    "docutils.parsers.rst.Directive.error": [
        "docutils.parsers.rst.Directive.directive_error"
    ],
    "docutils.parsers.rst.Directive.severe": [
        "docutils.parsers.rst.Directive.directive_error"
    ],
    "docutils.parsers.rst.Directive.assert_has_content": [
        "docutils.parsers.rst.Directive.error",
        "docutils.parsers.rst.DirectiveError.__init__"
    ],
    "docutils.parsers.rst.Directive.add_name": [
        "docutils.nodes.fully_normalize_name"
    ],
    "docutils.parsers.rst.convert_directive_function": [
        "docutils.parsers.rst.convert_directive_function.FunctionalDirective"
    ],
    "docutils.parsers.rst.convert_directive_function.FunctionalDirective": [
        "<builtin>.getattr"
    ],
    "docutils.parsers.Parser.parse": [
        "<builtin>.NotImplementedError"
    ],
    "docutils.parsers.get_parser_class": [
        "importlib.import_module",
        "<map>.get",
        "<builtin>.ImportError"
    ],
    "docutils.frontend.store_multiple": [
        "<builtin>.setattr"
    ],
    "docutils.frontend.validate_encoding": [
        "<builtin>.LookupError"
    ],
    "docutils.frontend.validate_encoding_error_handler": [
        "<builtin>.LookupError"
    ],
    "docutils.frontend.validate_encoding_and_error_handler": [
        "docutils.frontend.validate_encoding",
        "<builtin>.setattr",
        "docutils.frontend.validate_encoding_error_handler"
    ],
    "docutils.frontend.validate_boolean": [
        "<builtin>.LookupError",
        "<builtin>.isinstance"
    ],
    "docutils.frontend.validate_ternary": [
        "<builtin>.isinstance"
    ],
    "docutils.frontend.validate_nonnegative_int": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "docutils.frontend.validate_threshold": [
        "<builtin>.LookupError",
        "<builtin>.int"
    ],
    "docutils.frontend.validate_colon_separated_string_list": [
        "<builtin>.isinstance"
    ],
    "docutils.frontend.validate_comma_separated_list": [
        "<list>.pop",
        "<list>.extend",
        "<builtin>.isinstance"
    ],
    "docutils.frontend.validate_dependency_file": [
        "docutils.utils.DependencyList.__init__"
    ],
    "docutils.utils.DependencyList.__init__": [
        "docutils.utils.DependencyList.set_output",
        "docutils.utils.DependencyList.add"
    ],
    "docutils.utils.DependencyList.set_output": [
        "docutils.io.FileOutput.__init__"
    ],
    "docutils.utils.DependencyList.add": [
        "docutils.io.FileOutput.write",
        "<list>.append"
    ],
    "docutils.frontend.validate_strip_class": [
        "docutils.nodes.make_id",
        "docutils.frontend.validate_comma_separated_list",
        "<builtin>.ValueError"
    ],
    "docutils.frontend.validate_smartquotes_locales": [
        "docutils.frontend.validate_comma_separated_list",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "docutils.frontend.make_paths_absolute": [
        "docutils.frontend.make_one_path_absolute",
        "<builtin>.isinstance"
    ],
    "docutils.frontend.make_one_path_absolute": [
        "posixpath.join",
        "posixpath.abspath",
        "ntpath.join",
        "ntpath.abspath"
    ],
    "docutils.frontend.filter_settings_spec": [
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.tuple",
        "<list>.append",
        "<builtin>.range"
    ],
    "docutils.frontend.Values.__init__": [
        "docutils.utils.DependencyList.__init__",
        "<builtin>.super",
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "docutils.frontend.Values.update": [
        "<builtin>.dict",
        "optparse.Values._update_loose",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "docutils.frontend.Values.copy": [
        "warnings.catch_warnings.__init__"
    ],
    "docutils.frontend.Values.setdefault": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "docutils.frontend.Option.__init__": [
        "<builtin>.super",
        "warnings.warn"
    ],
    "docutils.frontend.Option.process": [
        "<builtin>.super",
        "docutils.io.error_string",
        "optparse.OptParseError.__init__",
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "docutils.frontend.OptionParser.__init__": [
        "<builtin>.super",
        "docutils.frontend.OptionParser.get_standard_config_settings",
        "docutils.frontend.OptionParser.populate_from_components",
        "<map>.update",
        "optparse.TitledHelpFormatter.__init__",
        "optparse.OptionParser.error",
        "warnings.warn"
    ],
    "docutils.frontend.OptionParser.populate_from_components": [
        "optparse.OptionParser.add_option_group",
        "<list>.extend",
        "optparse.OptionContainer.add_option",
        "<map>.update",
        "<builtin>.len",
        "optparse.OptionGroup.__init__",
        "<builtin>.range"
    ],
    "docutils.frontend.OptionParser.get_standard_config_settings": [
        "docutils.frontend.OptionParser.get_standard_config_files",
        "warnings.catch_warnings.__init__",
        "docutils.frontend.OptionParser.get_config_file_settings"
    ],
    "docutils.frontend.OptionParser.get_standard_config_files": [
        "posixpath.expanduser",
        "ntpath.expanduser"
    ],
    "docutils.frontend.OptionParser.get_config_file_settings": [
        "<builtin>.set",
        "posixpath.dirname",
        "configparser.RawConfigParser.has_section",
        "docutils.frontend.make_paths_absolute",
        "<builtin>.tuple",
        "ntpath.dirname",
        "warnings.catch_warnings.__init__"
    ],
    "docutils.frontend.OptionParser.check_values": [
        "docutils.frontend.make_paths_absolute",
        "docutils.frontend.OptionParser.check_args"
    ],
    "docutils.frontend.OptionParser.check_args": [
        "<list>.pop",
        "optparse.OptionParser.error"
    ],
    "docutils.frontend.OptionParser.set_defaults_from_dict": [
        "<map>.update"
    ],
    "docutils.frontend.OptionParser.get_default_values": [
        "warnings.catch_warnings.__init__"
    ],
    "docutils.frontend.OptionParser.get_option_by_dest": [
        "<builtin>.KeyError"
    ],
    "docutils.frontend.ConfigParser.read": [
        "<builtin>.super",
        "codecs.StreamRecoder.write",
        "<builtin>.isinstance",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "docutils.frontend.ConfigParser.validate_settings",
        "docutils.frontend.ConfigParser.handle_old_config",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "warnings.warn"
    ],
    "docutils.frontend.ConfigParser.handle_old_config": [
        "<map>.items",
        "warnings.warn_explicit",
        "docutils.frontend.ConfigParser.get_section",
        "configparser.RawConfigParser.remove_section",
        "configparser.RawConfigParser.add_section",
        "configparser.RawConfigParser.has_section",
        "configparser.RawConfigParser.set",
        "configparser.RawConfigParser.has_option"
    ],
    "docutils.frontend.ConfigParser.get_section": [
        "<builtin>.dict",
        "warnings.warn"
    ],
    "docutils.frontend.ConfigParser.validate_settings": [
        "configparser.RawConfigParser.options",
        "docutils.io.error_string",
        "configparser.RawConfigParser.get",
        "configparser.RawConfigParser.set",
        "configparser.RawConfigParser.sections",
        "<builtin>.ValueError"
    ],
    "docutils.frontend.get_default_settings": [
        "warnings.catch_warnings.__init__"
    ],
    "docutils.utils.Reporter.__init__": [
        "docutils.io.ErrorOutput.__init__",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "docutils.utils.Reporter.set_conditions": [
        "docutils.io.ErrorOutput.__init__",
        "warnings.warn",
        "<builtin>.isinstance"
    ],
    "docutils.utils.Reporter.attach_observer": [
        "<list>.append"
    ],
    "docutils.utils.Reporter.detach_observer": [
        "<list>.remove"
    ],
    "docutils.utils.Reporter.system_message": [
        "docutils.utils.get_source_line",
        "docutils.utils.SystemMessage.__init__",
        "<builtin>.isinstance",
        "docutils.nodes.system_message.astext",
        "docutils.nodes.system_message.__init__",
        "docutils.utils.Reporter.notify_observers",
        "<builtin>.str",
        "docutils.io.ErrorOutput.write",
        "<builtin>.max"
    ],
    "docutils.utils.get_source_line": [],
    "docutils.utils.SystemMessage.__init__": [
        "docutils.nodes.system_message.astext"
    ],
    "docutils.utils.Reporter.notify_observers": [],
    "docutils.utils.Reporter.debug": [
        "docutils.utils.Reporter.system_message"
    ],
    "docutils.utils.Reporter.info": [
        "docutils.utils.Reporter.system_message"
    ],
    "docutils.utils.Reporter.warning": [
        "docutils.utils.Reporter.system_message"
    ],
    "docutils.utils.Reporter.error": [
        "docutils.utils.Reporter.system_message"
    ],
    "docutils.utils.Reporter.severe": [
        "docutils.utils.Reporter.system_message"
    ],
    "docutils.utils.extract_extension_options": [
        "docutils.utils.assemble_option_dict",
        "docutils.utils.extract_options"
    ],
    "docutils.utils.extract_options": [
        "<builtin>.str",
        "<list>.append",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.utils.assemble_option_dict": [
        "<builtin>.KeyError"
    ],
    "docutils.utils.decode_path": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "docutils.utils.extract_name_value": [
        "<list>.append",
        "<str>.find",
        "<builtin>.len"
    ],
    "docutils.utils.new_reporter": [
        "docutils.utils.Reporter.__init__"
    ],
    "docutils.utils.new_document": [
        "docutils.utils.new_reporter",
        "docutils.nodes.document.__init__",
        "docutils.frontend",
        "docutils.nodes.document.note_source",
        "docutils.frontend.get_default_settings",
        "docutils.utils.decode_path"
    ],
    "docutils.nodes.document.note_source": [],
    "docutils.utils.clean_rcs_keywords": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.utils.relative_path": [
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.type",
        "<builtin>.len"
    ],
    "docutils.utils.get_stylesheet_reference": [
        "docutils.utils.relative_path",
        "warnings.warn"
    ],
    "docutils.utils.get_stylesheet_list": [
        "docutils.utils.find_file_in_dirs",
        "<builtin>.isinstance"
    ],
    "docutils.utils.find_file_in_dirs": [
        "ntpath.expanduser",
        "posixpath.expanduser",
        "posixpath.join",
        "ntpath.join",
        "posixpath.isabs",
        "ntpath.isabs",
        "genericpath.exists"
    ],
    "docutils.utils.get_trim_footnote_ref_space": [
        "<builtin>.getattr"
    ],
    "docutils.utils.escape2null": [
        "<list>.append"
    ],
    "docutils.utils.split_escaped_whitespace": [
        "<builtin>.list"
    ],
    "docutils.utils.find_combining_chars": [
        "<builtin>.enumerate"
    ],
    "docutils.utils.column_indices": [
        "docutils.utils.find_combining_chars",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "docutils.utils.column_width": [
        "<builtin>.sum",
        "docutils.utils.find_combining_chars",
        "<builtin>.len"
    ],
    "docutils.utils.uniq": [
        "<list>.append"
    ],
    "docutils.utils.normalize_language_tag": [
        "<builtin>.range",
        "<str>.replace",
        "<builtin>.len",
        "re.sub",
        "<list>.append",
        "<str>.lower"
    ],
    "docutils.utils.DependencyList.close": [
        "docutils.io.FileOutput.close"
    ],
    "docutils.statemachine.StateMachine.__init__": [
        "docutils.statemachine.StateMachine.add_states"
    ],
    "docutils.statemachine.StateMachine.add_states": [
        "docutils.statemachine.StateMachine.add_state"
    ],
    "docutils.statemachine.StateMachine.add_state": [],
    "docutils.statemachine.StateMachine.unlink": [
        "<map>.values"
    ],
    "docutils.statemachine.StateMachine.run": [
        "<builtin>.isinstance",
        "docutils.statemachine.StateMachine.check_line",
        "docutils.statemachine.StateMachine.get_state",
        "<list>.extend",
        "docutils.statemachine.StateMachine.runtime_init",
        "docutils.statemachine.StateMachine.next_line",
        "docutils.statemachine.StateMachine.error",
        "<builtin>.len",
        "docutils.statemachine.ViewList.info",
        "<builtin>.print",
        "docutils.statemachine.StateMachine.previous_line"
    ],
    "docutils.statemachine.StateMachine.runtime_init": [
        "<map>.values"
    ],
    "docutils.statemachine.StateMachine.get_state": [
        "<builtin>.print",
        "docutils.statemachine.StateMachine.abs_line_number"
    ],
    "docutils.statemachine.StateMachine.abs_line_number": [],
    "docutils.statemachine.StateMachine.next_line": [],
    "docutils.statemachine.ViewList.info": [
        "<builtin>.len"
    ],
    "docutils.statemachine.StateMachine.check_line": [
        "<builtin>.print"
    ],
    "docutils.statemachine.StateMachine.previous_line": [
        "docutils.statemachine.StateMachine.notify_observers"
    ],
    "docutils.statemachine.StateMachine.notify_observers": [
        "docutils.statemachine.ViewList.info"
    ],
    "docutils.statemachine.StateMachine.error": [
        "docutils.statemachine._exception_data",
        "<builtin>.print",
        "docutils.statemachine.StateMachine.abs_line_number"
    ],
    "docutils.statemachine._exception_data": [],
    "docutils.statemachine.StateMachine.at_eof": [
        "<builtin>.len"
    ],
    "docutils.statemachine.StateMachine.get_source": [
        "docutils.statemachine.ViewList.source"
    ],
    "docutils.statemachine.ViewList.source": [
        "docutils.statemachine.ViewList.info"
    ],
    "docutils.statemachine.StateMachine.get_source_and_line": [
        "docutils.statemachine.ViewList.info",
        "docutils.statemachine.StateMachine.get_source_and_line"
    ],
    "docutils.statemachine.StateMachine.insert_input": [
        "docutils.statemachine.ViewList.insert",
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.insert": [
        "<list>.insert",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.statemachine.StateMachine.get_text_block": [
        "docutils.statemachine.StateMachine.next_line",
        "docutils.statemachine.StringList.get_text_block",
        "docutils.statemachine.StateMachine.get_text_block",
        "<builtin>.len"
    ],
    "docutils.statemachine.StringList.get_text_block": [
        "docutils.statemachine.ViewList.info",
        "<builtin>.len"
    ],
    "docutils.statemachine.StateMachine.attach_observer": [
        "<list>.append"
    ],
    "docutils.statemachine.StateMachine.detach_observer": [
        "<list>.remove"
    ],
    "docutils.statemachine.State.__init__": [
        "docutils.statemachine.StateWS.add_initial_transitions",
        "docutils.statemachine.State.add_initial_transitions"
    ],
    "docutils.statemachine.State.add_initial_transitions": [
        "docutils.statemachine.State.make_transitions",
        "docutils.statemachine.State.add_transitions"
    ],
    "docutils.statemachine.State.make_transitions": [
        "docutils.statemachine.State.make_transition",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "docutils.statemachine.State.make_transition": [
        "re.compile",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "docutils.statemachine.State.add_transitions": [
        "<map>.update"
    ],
    "docutils.statemachine.State.remove_transition": [
        "<list>.remove"
    ],
    "docutils.statemachine.StateMachineWS.get_indented": [
        "docutils.statemachine.StateMachine.abs_line_offset",
        "docutils.statemachine.StateMachine.next_line",
        "docutils.statemachine.StateMachineWS.get_indented",
        "docutils.statemachine.StringList.get_indented",
        "<builtin>.len"
    ],
    "docutils.statemachine.StateMachine.abs_line_offset": [],
    "docutils.statemachine.StringList.get_indented": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "docutils.statemachine.StateMachineWS.get_known_indented": [
        "docutils.statemachine.StateMachine.abs_line_offset",
        "docutils.statemachine.StateMachine.next_line",
        "docutils.statemachine.StateMachineWS.get_indented",
        "docutils.statemachine.StringList.get_indented",
        "<builtin>.len"
    ],
    "docutils.statemachine.StateMachineWS.get_first_known_indented": [
        "docutils.statemachine.StateMachine.abs_line_offset",
        "docutils.statemachine.StateMachine.next_line",
        "docutils.statemachine.StateMachineWS.get_indented",
        "docutils.statemachine.StringList.get_indented",
        "<builtin>.len"
    ],
    "docutils.statemachine.StateWS.__init__": [
        "docutils.statemachine.State.__init__"
    ],
    "docutils.statemachine.StateWS.add_initial_transitions": [
        "<map>.update",
        "docutils.statemachine.State.make_transitions",
        "docutils.statemachine.State.add_transitions",
        "docutils.statemachine.State.add_initial_transitions"
    ],
    "docutils.statemachine.StateWS.blank": [
        "docutils.statemachine.State.nop"
    ],
    "docutils.statemachine.State.nop": [],
    "docutils.statemachine.ViewList.__init__": [
        "<builtin>.range",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.__str__": [
        "<builtin>.str"
    ],
    "docutils.statemachine.ViewList.__lt__": [
        "docutils.statemachine.ViewList.__cast"
    ],
    "docutils.statemachine.ViewList.__cast": [
        "<builtin>.isinstance"
    ],
    "docutils.statemachine.ViewList.__le__": [
        "docutils.statemachine.ViewList.__cast"
    ],
    "docutils.statemachine.ViewList.__eq__": [
        "docutils.statemachine.ViewList.__cast"
    ],
    "docutils.statemachine.ViewList.__ne__": [
        "docutils.statemachine.ViewList.__cast"
    ],
    "docutils.statemachine.ViewList.__gt__": [
        "docutils.statemachine.ViewList.__cast"
    ],
    "docutils.statemachine.ViewList.__ge__": [
        "docutils.statemachine.ViewList.__cast"
    ],
    "docutils.statemachine.ViewList.__len__": [
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.__getitem__": [
        "<builtin>.isinstance"
    ],
    "docutils.statemachine.ViewList.__setitem__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.__delitem__": [
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.__add__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "docutils.statemachine.ViewList.__radd__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "docutils.statemachine.ViewList.__iadd__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "docutils.statemachine.ViewList.extend": [
        "<builtin>.TypeError",
        "<list>.extend",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.append": [
        "<list>.append",
        "docutils.statemachine.ViewList.extend",
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.pop": [
        "<list>.pop",
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.trim_start": [
        "<builtin>.IndexError",
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.trim_end": [
        "<builtin>.IndexError",
        "<builtin>.len"
    ],
    "docutils.statemachine.ViewList.remove": [
        "docutils.statemachine.ViewList.index"
    ],
    "docutils.statemachine.ViewList.index": [
        "<list>.index"
    ],
    "docutils.statemachine.ViewList.count": [
        "<list>.count"
    ],
    "docutils.statemachine.ViewList.reverse": [
        "<list>.reverse"
    ],
    "docutils.statemachine.ViewList.sort": [
        "<builtin>.zip",
        "<builtin>.sorted"
    ],
    "docutils.statemachine.ViewList.offset": [
        "docutils.statemachine.ViewList.info"
    ],
    "docutils.statemachine.ViewList.xitems": [
        "<builtin>.zip"
    ],
    "docutils.statemachine.ViewList.pprint": [
        "<builtin>.print",
        "docutils.statemachine.ViewList.xitems"
    ],
    "docutils.statemachine.StringList.get_2D_block": [
        "<builtin>.min",
        "<builtin>.range",
        "docutils.utils.column_indices",
        "<builtin>.len"
    ],
    "docutils.statemachine.StringList.pad_double_width": [
        "<list>.append",
        "<builtin>.range",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.statemachine.StringList.replace": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "docutils.statemachine.string2lines": [
        "<str>.splitlines"
    ],
    "docutils.parsers.rst.roles.role": [
        "docutils.parsers.rst.roles.register_local_role",
        "<list>.append"
    ],
    "docutils.parsers.rst.roles.register_local_role": [
        "docutils.parsers.rst.roles.set_implicit_options"
    ],
    "docutils.parsers.rst.roles.GenericRole.__call__": [
        "docutils.parsers.rst.roles.normalized_role_options"
    ],
    "docutils.parsers.rst.roles.normalized_role_options": [
        "<map>.copy"
    ],
    "docutils.parsers.rst.roles.CustomRole.__init__": [
        "<builtin>.getattr"
    ],
    "docutils.parsers.rst.roles.CustomRole.__call__": [
        "<map>.update",
        "docutils.parsers.rst.roles.normalized_role_options"
    ],
    "docutils.parsers.rst.roles.generic_custom_role": [
        "docutils.parsers.rst.roles.normalized_role_options"
    ],
    "docutils.parsers.rst.roles.pep_reference_role": [
        "docutils.nodes.unescape",
        "<builtin>.int",
        "docutils.parsers.rst.roles.normalized_role_options"
    ],
    "docutils.parsers.rst.roles.rfc_reference_role": [
        "<builtin>.str",
        "docutils.nodes.unescape",
        "<builtin>.int",
        "docutils.parsers.rst.roles.normalized_role_options"
    ],
    "docutils.parsers.rst.roles.raw_role": [
        "docutils.nodes.unescape",
        "docutils.parsers.rst.roles.normalized_role_options"
    ],
    "docutils.parsers.rst.roles.code_role": [
        "docutils.parsers.rst.roles.normalized_role_options",
        "docutils.nodes.unescape",
        "<list>.extend",
        "docutils.utils.code_analyzer.Lexer.__iter__",
        "<map>.get",
        "<list>.append",
        "docutils.utils.code_analyzer.Lexer.__init__"
    ],
    "docutils.utils.code_analyzer.Lexer.__init__": [
        "pygments.lexers.get_lexer_by_name"
    ],
    "docutils.utils.code_analyzer.Lexer.__iter__": [
        "<builtin>.str",
        "pygments.lex",
        "docutils.utils.code_analyzer.Lexer.merge"
    ],
    "docutils.parsers.rst.roles.math_role": [
        "docutils.nodes.unescape",
        "docutils.parsers.rst.roles.normalized_role_options"
    ],
    "docutils.parsers.rst.directives.directive": [
        "importlib.import_module",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "docutils.parsers.rst.directives.flag": [
        "<builtin>.ValueError"
    ],
    "docutils.parsers.rst.directives.unchanged_required": [
        "<builtin>.ValueError"
    ],
    "docutils.parsers.rst.directives.path": [
        "<builtin>.ValueError"
    ],
    "docutils.parsers.rst.directives.uri": [
        "docutils.utils.split_escaped_whitespace",
        "docutils.nodes.unescape",
        "docutils.utils.escape2null",
        "<builtin>.ValueError"
    ],
    "docutils.parsers.rst.directives.nonnegative_int": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "docutils.parsers.rst.directives.percentage": [
        "docutils.parsers.rst.directives.nonnegative_int"
    ],
    "docutils.parsers.rst.directives.get_measure": [
        "<builtin>.float",
        "<builtin>.ValueError",
        "re.match"
    ],
    "docutils.parsers.rst.directives.length_or_unitless": [
        "docutils.parsers.rst.directives.get_measure"
    ],
    "docutils.parsers.rst.directives.length_or_percentage_or_unitless": [
        "docutils.parsers.rst.directives.get_measure"
    ],
    "docutils.parsers.rst.directives.class_option": [
        "docutils.nodes.make_id",
        "<builtin>.ValueError",
        "<list>.append"
    ],
    "docutils.parsers.rst.directives.unicode_code": [
        "pathlib.PurePath.match",
        "<builtin>.chr",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "docutils.parsers.rst.directives.single_char_or_unicode": [
        "docutils.parsers.rst.directives.unicode_code",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.directives.single_char_or_whitespace_or_unicode": [
        "docutils.parsers.rst.directives.single_char_or_unicode"
    ],
    "docutils.parsers.rst.directives.positive_int": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "docutils.parsers.rst.directives.positive_int_list": [
        "docutils.parsers.rst.directives.positive_int"
    ],
    "docutils.parsers.rst.directives.encoding": [
        "<builtin>.ValueError"
    ],
    "docutils.parsers.rst.directives.choice": [
        "docutils.parsers.rst.directives.format_values",
        "<builtin>.ValueError"
    ],
    "docutils.parsers.rst.directives.format_values": [],
    "docutils.parsers.rst.directives.parser_name": [
        "docutils.parsers.get_parser_class",
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "docutils.utils.code_analyzer.Lexer.merge": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "pygments.lex": [
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "pygments.lexer",
        "<builtin>.isinstance"
    ],
    "docutils.utils.code_analyzer.NumberLines.__init__": [
        "<builtin>.len",
        "<builtin>.str"
    ],
    "pygments.format": [
        "<builtin>.isinstance",
        "_io.BytesIO",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.getattr",
        "_io.StringIO",
        "pygments.formatter"
    ],
    "pygments.highlight": [
        "pygments.lex",
        "<builtin>.format"
    ],
    "pygments.formatters.html._get_ttype_class": [
        "<map>.get"
    ],
    "pygments.formatters.html.HtmlFormatter.__init__": [
        "<builtin>.set",
        "<builtin>.int",
        "pygments.util.get_list_opt",
        "pygments.util.get_bool_opt",
        "pygments.util.get_int_opt",
        "<builtin>.abs",
        "pygments.formatters.html.HtmlFormatter._decodeifneeded",
        "<builtin>.RuntimeError",
        "pygments.formatters.html.HtmlFormatter._create_stylesheet",
        "pygments.formatter.Formatter.__init__"
    ],
    "pygments.formatter.Formatter.__init__": [
        "pygments.formatter._lookup_style",
        "pygments.util.get_bool_opt"
    ],
    "pygments.formatter._lookup_style": [
        "pygments.styles.get_style_by_name",
        "<builtin>.isinstance"
    ],
    "pygments.formatters.html.HtmlFormatter._decodeifneeded": [
        "<builtin>.isinstance"
    ],
    "pygments.formatters.html.HtmlFormatter._create_stylesheet": [
        "<builtin>.len",
        "pygments.formatters.html.webify",
        "pygments.formatters.html.HtmlFormatter._get_css_class"
    ],
    "pygments.formatters.html.HtmlFormatter._get_css_class": [
        "pygments.formatters.html._get_ttype_class"
    ],
    "pygments.formatters.html.webify": [],
    "pygments.formatters.html.HtmlFormatter._get_css_classes": [
        "pygments.formatters.html.HtmlFormatter._get_css_class"
    ],
    "pygments.formatters.html.HtmlFormatter._get_css_inline_styles": [
        "<map>.get"
    ],
    "pygments.formatters.html.HtmlFormatter.get_style_defs": [
        "<list>.extend"
    ],
    "pygments.formatters.html.HtmlFormatter.get_token_style_defs": [
        "<builtin>.repr",
        "pygments.formatters.html.HtmlFormatter.get_css_prefix.prefix",
        "<map>.items",
        "pygments.formatters.html.HtmlFormatter.get_css_prefix"
    ],
    "pygments.formatters.html.HtmlFormatter.get_css_prefix": [
        "<builtin>.list",
        "<builtin>.isinstance"
    ],
    "pygments.formatters.html.HtmlFormatter.get_css_prefix.prefix": [
        "<list>.append"
    ],
    "pygments.formatters.html.HtmlFormatter.get_background_style_defs": [
        "<list>.insert",
        "pygments.formatters.html.HtmlFormatter.get_css_prefix"
    ],
    "pygments.formatters.html.HtmlFormatter._wrap_full": [
        "<builtin>.dict",
        "ntpath.dirname",
        "pygments.formatters.html.HtmlFormatter.get_style_defs",
        "posixpath.join",
        "posixpath.dirname",
        "ntpath.join",
        "<builtin>.open",
        "posixpath.isabs",
        "<builtin>.print",
        "ntpath.isabs",
        "genericpath.exists"
    ],
    "pygments.formatters.html.HtmlFormatter._wrap_tablelinenos": [
        "<builtin>.len",
        "<builtin>.str",
        "<list>.append",
        "_io.StringIO",
        "<builtin>.range"
    ],
    "pygments.formatters.html.HtmlFormatter._wrap_inlinelinenos": [
        "<builtin>.str",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "pygments.formatters.html.HtmlFormatter._wrap_div": [
        "<list>.append"
    ],
    "pygments.formatters.html.HtmlFormatter._wrap_pre": [
        "<list>.append"
    ],
    "pygments.formatters.html.HtmlFormatter._format_lines": [
        "<list>.append",
        "posixpath.splitext",
        "ntpath.splitext",
        "pygments.formatters.html.HtmlFormatter._get_css_inline_styles",
        "pygments.formatters.html.HtmlFormatter._translate_parts",
        "<list>.extend",
        "posixpath.split",
        "ntpath.split",
        "pygments.formatters.html.HtmlFormatter._lookup_ctag",
        "pygments.formatters.html.HtmlFormatter._get_css_classes"
    ],
    "pygments.formatters.html.HtmlFormatter._lookup_ctag": [],
    "pygments.formatters.html.HtmlFormatter._highlight_lines": [
        "<builtin>.enumerate"
    ],
    "pygments.formatters.html.HtmlFormatter.wrap": [
        "pygments.formatters.html.HtmlFormatter._wrap_pre",
        "pygments.formatters.html.HtmlFormatter._wrap_code"
    ],
    "pygments.formatters.html.HtmlFormatter._wrap_code": [],
    "pygments.formatters.html.HtmlFormatter.format_unencoded": [
        "pygments.formatters.html.HtmlFormatter.wrap",
        "pygments.formatters.html.HtmlFormatter._wrap_div",
        "pygments.formatters.html.HtmlFormatter._wrap_linespans",
        "pygments.formatters.html.HtmlFormatter._wrap_full",
        "pygments.formatters.html.HtmlFormatter._wrap_inlinelinenos",
        "pygments.formatters.html.HtmlFormatter._wrap_lineanchors",
        "pygments.formatters.html.HtmlFormatter._wrap_tablelinenos",
        "pygments.formatters.html.HtmlFormatter._format_lines",
        "pygments.formatters.html.HtmlFormatter._highlight_lines"
    ],
    "pygments.formatters.html.HtmlFormatter._wrap_lineanchors": [],
    "pygments.formatters.html.HtmlFormatter._wrap_linespans": [],
    "pygments.formatter.Formatter.format": [
        "pygments.formatters.html.HtmlFormatter.format_unencoded"
    ],
    "docutils.parsers.rst.states.RSTStateMachine.run": [
        "docutils.parsers.rst.states.Inliner.init_customizations",
        "docutils.statemachine.StateMachine.run",
        "docutils.statemachine.StateMachine.attach_observer",
        "docutils.parsers.rst.states.Struct.__init__",
        "docutils.parsers.rst.states.Inliner.__init__"
    ],
    "docutils.parsers.rst.states.Inliner.__init__": [],
    "docutils.parsers.rst.states.Inliner.init_customizations": [
        "<builtin>.locals",
        "docutils.parsers.rst.states.build_regexp",
        "<builtin>.vars",
        "re.compile",
        "docutils.parsers.rst.states.Struct.__init__",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.build_regexp": [
        "re.compile",
        "<builtin>.locals",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.NestedStateMachine.run": [
        "docutils.statemachine.StateMachine.attach_observer",
        "docutils.statemachine.StateMachine.run"
    ],
    "docutils.parsers.rst.states.RSTState.__init__": [
        "docutils.statemachine.StateWS.__init__"
    ],
    "docutils.parsers.rst.states.RSTState.runtime_init": [
        "docutils.statemachine.State.runtime_init",
        "<builtin>.hasattr"
    ],
    "docutils.statemachine.State.runtime_init": [],
    "docutils.parsers.rst.states.RSTState.nested_parse": [
        "docutils.statemachine.StateMachine.abs_line_offset",
        "docutils.parsers.rst.states.NestedStateMachine.run",
        "docutils.statemachine.StateMachine.unlink",
        "<builtin>.len",
        "<list>.pop",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.RSTState.nested_list_parse": [
        "docutils.statemachine.StateMachine.abs_line_offset",
        "docutils.parsers.rst.states.NestedStateMachine.run",
        "<map>.items",
        "docutils.statemachine.StateMachine.unlink",
        "<map>.copy",
        "<builtin>.setattr"
    ],
    "docutils.parsers.rst.states.RSTState.section": [
        "docutils.parsers.rst.states.RSTState.check_subsection",
        "docutils.parsers.rst.states.RSTState.new_subsection"
    ],
    "docutils.parsers.rst.states.RSTState.check_subsection": [
        "docutils.parsers.rst.states.RSTState.title_inconsistent",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.RSTState.title_inconsistent": [],
    "docutils.parsers.rst.states.RSTState.new_subsection": [
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.RSTState.nested_parse",
        "docutils.parsers.rst.states.RSTState.inline_text",
        "docutils.nodes.Element.astext",
        "docutils.nodes.fully_normalize_name"
    ],
    "docutils.parsers.rst.states.RSTState.inline_text": [],
    "docutils.parsers.rst.states.RSTState.goto_line": [],
    "docutils.parsers.rst.states.RSTState.paragraph": [
        "re.search",
        "docutils.parsers.rst.states.RSTState.inline_text",
        "<str>.rstrip",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Inliner.parse": [
        "docutils.utils.escape2null",
        "docutils.parsers.rst.states.Inliner.implicit_inline",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.Inliner.implicit_inline": [
        "docutils.parsers.rst.states.Inliner.implicit_inline"
    ],
    "docutils.parsers.rst.states.Inliner.quoted_start": [
        "docutils.utils.punctuation_chars.match_chars"
    ],
    "docutils.utils.punctuation_chars.match_chars": [
        "<str>.index",
        "<map>.get"
    ],
    "docutils.parsers.rst.states.Inliner.inline_obj": [
        "docutils.nodes.unescape",
        "docutils.parsers.rst.states.Inliner.quoted_start",
        "docutils.parsers.rst.states.Inliner.problematic",
        "<list>"
    ],
    "docutils.parsers.rst.states.Inliner.problematic": [],
    "docutils.parsers.rst.states.Inliner.emphasis": [
        "docutils.parsers.rst.states.Inliner.inline_obj"
    ],
    "docutils.parsers.rst.states.Inliner.strong": [
        "docutils.parsers.rst.states.Inliner.inline_obj"
    ],
    "docutils.parsers.rst.states.Inliner.interpreted_or_phrase_ref": [
        "docutils.parsers.rst.states.Inliner.interpreted",
        "docutils.nodes.unescape",
        "docutils.parsers.rst.states.Inliner.quoted_start",
        "docutils.parsers.rst.states.Inliner.problematic",
        "docutils.parsers.rst.states.Inliner.phrase_ref"
    ],
    "docutils.parsers.rst.states.Inliner.interpreted": [
        "docutils.parsers.rst.roles.role",
        "<list>"
    ],
    "docutils.parsers.rst.states.Inliner.phrase_ref": [
        "docutils.utils.split_escaped_whitespace",
        "<str>.endswith",
        "docutils.nodes.unescape",
        "docutils.parsers.rst.states.Inliner.adjust_uri",
        "<list>.append",
        "docutils.nodes.fully_normalize_name",
        "docutils.nodes.whitespace_normalize_name"
    ],
    "docutils.parsers.rst.states.Inliner.adjust_uri": [],
    "docutils.parsers.rst.states.Inliner.literal": [
        "docutils.parsers.rst.states.Inliner.inline_obj"
    ],
    "docutils.parsers.rst.states.Inliner.inline_internal_target": [
        "docutils.nodes.fully_normalize_name",
        "docutils.parsers.rst.states.Inliner.inline_obj",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Inliner.substitution_reference": [
        "docutils.nodes.fully_normalize_name",
        "docutils.parsers.rst.states.Inliner.inline_obj",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Inliner.footnote_reference": [
        "docutils.nodes.fully_normalize_name",
        "docutils.utils.get_trim_footnote_ref_space"
    ],
    "docutils.parsers.rst.states.Inliner.reference": [
        "docutils.nodes.fully_normalize_name",
        "docutils.nodes.whitespace_normalize_name"
    ],
    "docutils.parsers.rst.states.Inliner.anonymous_reference": [
        "docutils.parsers.rst.states.Inliner.reference"
    ],
    "docutils.parsers.rst.states.Inliner.standalone_uri": [
        "docutils.nodes.unescape"
    ],
    "docutils.parsers.rst.states.Inliner.pep_reference": [
        "docutils.nodes.unescape",
        "<builtin>.int"
    ],
    "docutils.parsers.rst.states.Inliner.rfc_reference": [
        "docutils.nodes.unescape",
        "<builtin>.int"
    ],
    "docutils.parsers.rst.states._loweralpha_to_int": [
        "<builtin>.ord"
    ],
    "docutils.parsers.rst.states._upperalpha_to_int": [
        "<builtin>.ord"
    ],
    "docutils.parsers.rst.states._lowerroman_to_int": [
        "docutils.utils.roman.fromRoman"
    ],
    "docutils.utils.roman.fromRoman": [
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.indent": [
        "docutils.parsers.rst.states.Body.block_quote",
        "docutils.parsers.rst.states.RSTState.unindent_warning"
    ],
    "docutils.parsers.rst.states.Body.block_quote": [
        "docutils.parsers.rst.states.Body.parse_attribution",
        "docutils.parsers.rst.states.Body.split_attribution",
        "docutils.parsers.rst.states.RSTState.nested_parse",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.Body.split_attribution": [
        "docutils.parsers.rst.states.Body.check_attribution",
        "pathlib.PurePath.match",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.check_attribution": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.parse_attribution": [
        "docutils.parsers.rst.states.RSTState.inline_text",
        "<str>.rstrip"
    ],
    "docutils.parsers.rst.states.RSTState.unindent_warning": [],
    "docutils.parsers.rst.states.Body.bullet": [
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.Body.list_item",
        "docutils.parsers.rst.states.RSTState.unindent_warning"
    ],
    "docutils.parsers.rst.states.Body.list_item": [
        "docutils.parsers.rst.states.RSTState.nested_parse"
    ],
    "docutils.parsers.rst.states.Body.enumerator": [
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.Body.is_enumerated_list_item",
        "docutils.parsers.rst.states.RSTState.unindent_warning",
        "docutils.parsers.rst.states.Body.list_item",
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "docutils.parsers.rst.states.Body.parse_enumerator"
    ],
    "docutils.parsers.rst.states.Body.parse_enumerator": [],
    "docutils.parsers.rst.states.Body.is_enumerated_list_item": [
        "docutils.parsers.rst.states.Body.make_enumerator"
    ],
    "docutils.parsers.rst.states.Body.make_enumerator": [
        "docutils.utils.roman.toRoman",
        "<builtin>.ord",
        "<builtin>.chr",
        "<builtin>.str"
    ],
    "docutils.utils.roman.toRoman": [
        "<builtin>.int"
    ],
    "docutils.parsers.rst.states.Body.field_marker": [
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.Body.field",
        "docutils.parsers.rst.states.RSTState.unindent_warning"
    ],
    "docutils.parsers.rst.states.Body.field": [
        "docutils.parsers.rst.states.Body.parse_field_body",
        "docutils.parsers.rst.states.RSTState.inline_text",
        "docutils.parsers.rst.states.Body.parse_field_marker"
    ],
    "docutils.parsers.rst.states.Body.parse_field_marker": [],
    "docutils.parsers.rst.states.Body.parse_field_body": [
        "docutils.parsers.rst.states.RSTState.nested_parse"
    ],
    "docutils.parsers.rst.states.Body.option_marker": [
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.Body.block_quote",
        "docutils.parsers.rst.states.RSTState.unindent_warning",
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "docutils.parsers.rst.states.Body.option_list_item"
    ],
    "docutils.parsers.rst.states.Body.option_list_item": [
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.Body.parse_option_marker",
        "docutils.parsers.rst.states.RSTState.nested_parse"
    ],
    "docutils.parsers.rst.states.Body.parse_option_marker": [
        "<list>.append",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.line_block": [
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.Body.line_block_line",
        "docutils.parsers.rst.states.Body.nest_line_block_lines",
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.line_block_line": [
        "docutils.parsers.rst.states.RSTState.inline_text",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.nest_line_block_lines": [
        "docutils.parsers.rst.states.Body.nest_line_block_segment",
        "<builtin>.range",
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.nest_line_block_segment": [
        "<builtin>.len",
        "docutils.parsers.rst.states.Body.nest_line_block_segment",
        "docutils.nodes.Element.append",
        "<list>.append",
        "<builtin>.min"
    ],
    "docutils.parsers.rst.states.Body.grid_table_top": [
        "docutils.parsers.rst.states.Body.table_top"
    ],
    "docutils.parsers.rst.states.Body.table_top": [
        "docutils.parsers.rst.states.Body.table"
    ],
    "docutils.parsers.rst.states.Body.table": [
        "docutils.parsers.rst.states.Body.isolate_simple_table",
        "docutils.parsers.rst.states.Body.build_table",
        "<builtin>.len",
        "docutils.parsers.rst.tableparser.TableParser.parse",
        "docutils.parsers.rst.states.Body.isolate_grid_table",
        "docutils.parsers.rst.states.Body.malformed_table"
    ],
    "docutils.parsers.rst.states.Body.isolate_grid_table": [
        "<list>.append",
        "<list>.extend",
        "<builtin>.len",
        "<builtin>.range",
        "pathlib.PurePath.match"
    ],
    "docutils.parsers.rst.tableparser.TableParser.parse": [
        "docutils.parsers.rst.tableparser.GridTableParser.parse_table",
        "docutils.parsers.rst.tableparser.TableParser.find_head_body_sep",
        "docutils.parsers.rst.tableparser.GridTableParser.structure_from_cells",
        "docutils.parsers.rst.tableparser.SimpleTableParser.setup",
        "docutils.parsers.rst.tableparser.GridTableParser.setup",
        "docutils.parsers.rst.tableparser.SimpleTableParser.structure_from_cells",
        "docutils.parsers.rst.tableparser.SimpleTableParser.parse_table"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.setup": [
        "<builtin>.len"
    ],
    "docutils.parsers.rst.tableparser.TableParser.find_head_body_sep": [
        "docutils.parsers.rst.tableparser.TableMarkupError.__init__",
        "pathlib.PurePath.match",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.tableparser.TableMarkupError.__init__": [],
    "docutils.parsers.rst.tableparser.GridTableParser.parse_table": [
        "docutils.parsers.rst.tableparser.update_dict_of_lists",
        "docutils.parsers.rst.tableparser.GridTableParser.scan_cell",
        "docutils.parsers.rst.tableparser.GridTableParser.mark_done",
        "<list>.extend",
        "<list>.pop",
        "docutils.parsers.rst.tableparser.GridTableParser.check_parse_complete",
        "<list>.append",
        "docutils.parsers.rst.tableparser.TableMarkupError.__init__",
        "<list>.sort"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.scan_cell": [
        "docutils.parsers.rst.tableparser.GridTableParser.scan_right"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.scan_right": [
        "docutils.parsers.rst.tableparser.update_dict_of_lists",
        "docutils.parsers.rst.tableparser.GridTableParser.scan_down",
        "<builtin>.range"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.scan_down": [
        "docutils.parsers.rst.tableparser.update_dict_of_lists",
        "docutils.parsers.rst.tableparser.GridTableParser.scan_left",
        "<builtin>.range"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.scan_left": [
        "docutils.parsers.rst.tableparser.GridTableParser.scan_up",
        "<builtin>.range"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.scan_up": [
        "<builtin>.range"
    ],
    "docutils.parsers.rst.tableparser.update_dict_of_lists": [
        "<map>.items",
        "<map>.setdefault"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.mark_done": [
        "<builtin>.range"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.check_parse_complete": [
        "<builtin>.range"
    ],
    "docutils.parsers.rst.tableparser.GridTableParser.structure_from_cells": [
        "<map>.keys",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.sorted"
    ],
    "docutils.parsers.rst.states.Body.build_table": [
        "docutils.parsers.rst.states.Body.build_table_row",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.build_table_row": [
        "docutils.parsers.rst.states.RSTState.nested_parse"
    ],
    "docutils.parsers.rst.states.Body.malformed_table": [
        "<str>.replace",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.simple_table_top": [
        "docutils.parsers.rst.states.Body.table_top"
    ],
    "docutils.parsers.rst.states.Body.isolate_simple_table": [
        "<map>",
        "docutils.parsers.rst.states.Body.malformed_table",
        "<builtin>.len",
        "<list>",
        "pathlib.PurePath.match"
    ],
    "docutils.parsers.rst.states.Body.footnote": [
        "docutils.nodes.fully_normalize_name",
        "docutils.parsers.rst.states.RSTState.nested_parse"
    ],
    "docutils.parsers.rst.states.Body.citation": [
        "docutils.nodes.fully_normalize_name",
        "docutils.parsers.rst.states.RSTState.nested_parse"
    ],
    "docutils.parsers.rst.states.Body.hyperlink_target": [
        "docutils.parsers.rst.states.Body.make_target",
        "docutils.utils.escape2null",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.make_target": [
        "docutils.nodes.fully_normalize_name",
        "docutils.parsers.rst.states.Body.add_target",
        "docutils.parsers.rst.states.Body.parse_target"
    ],
    "docutils.parsers.rst.states.Body.parse_target": [
        "docutils.utils.split_escaped_whitespace",
        "docutils.nodes.unescape",
        "docutils.parsers.rst.states.Body.is_reference"
    ],
    "docutils.parsers.rst.states.Body.is_reference": [
        "docutils.nodes.unescape",
        "docutils.nodes.whitespace_normalize_name"
    ],
    "docutils.parsers.rst.states.Body.add_target": [
        "docutils.nodes.fully_normalize_name",
        "docutils.nodes.unescape"
    ],
    "docutils.parsers.rst.states.Body.substitution_def": [
        "docutils.nodes.Node.findall",
        "<builtin>.isinstance",
        "docutils.parsers.rst.states.Body.disallowed_inside_substitution_definitions",
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "<builtin>.len",
        "docutils.nodes.whitespace_normalize_name",
        "docutils.utils.escape2null"
    ],
    "docutils.parsers.rst.states.Body.disallowed_inside_substitution_definitions": [
        "<builtin>.isinstance"
    ],
    "docutils.parsers.rst.states.Body.directive": [
        "docutils.parsers.rst.states.Body.unknown_directive",
        "docutils.parsers.rst.states.Body.run_directive",
        "docutils.parsers.rst.directives.directive"
    ],
    "docutils.parsers.rst.states.Body.unknown_directive": [],
    "docutils.parsers.rst.states.Body.run_directive": [
        "<builtin>.range",
        "docutils.parsers.rst.states.Body.parse_directive_block",
        "docutils.parsers.rst.convert_directive_function",
        "<builtin>.isinstance",
        "<builtin>.len",
        "docutils.parsers.rst.convert_directive_function.FunctionalDirective.run",
        "docutils.parsers.rst",
        "<list>"
    ],
    "docutils.parsers.rst.states.Body.parse_directive_block": [
        "docutils.parsers.rst.states.Body.parse_directive_options",
        "docutils.parsers.rst.states.Body.parse_directive_arguments",
        "<builtin>.enumerate"
    ],
    "docutils.parsers.rst.states.Body.parse_directive_options": [
        "docutils.parsers.rst.states.Body.parse_extension_options",
        "<builtin>.enumerate",
        "re.match"
    ],
    "docutils.parsers.rst.states.Body.parse_extension_options": [
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "docutils.utils.extract_extension_options",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Body.parse_directive_arguments": [
        "<builtin>.len"
    ],
    "docutils.parsers.rst.convert_directive_function.FunctionalDirective.run": [
        "<list>"
    ],
    "docutils.parsers.rst.states.Body.explicit_markup": [
        "docutils.parsers.rst.states.Body.explicit_list",
        "docutils.parsers.rst.states.Body.explicit_construct"
    ],
    "docutils.parsers.rst.states.Body.explicit_construct": [
        "docutils.parsers.rst.states.Body.comment",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.Body.comment": [],
    "docutils.parsers.rst.states.Body.explicit_list": [
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.RSTState.unindent_warning"
    ],
    "docutils.parsers.rst.states.Body.anonymous": [
        "docutils.parsers.rst.states.Body.explicit_list",
        "docutils.parsers.rst.states.Body.anonymous_target"
    ],
    "docutils.parsers.rst.states.Body.anonymous_target": [
        "docutils.parsers.rst.states.Body.make_target",
        "docutils.utils.escape2null"
    ],
    "docutils.parsers.rst.states.Body.line": [
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.RFC2822Body.rfc2822": [
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "docutils.parsers.rst.states.RFC2822Body.rfc2822_field",
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.RSTState.unindent_warning"
    ],
    "docutils.parsers.rst.states.RFC2822Body.rfc2822_field": [
        "docutils.parsers.rst.states.RSTState.nested_parse"
    ],
    "docutils.parsers.rst.states.BulletList.bullet": [
        "docutils.parsers.rst.states.SpecializedBody.invalid_input",
        "docutils.parsers.rst.states.Body.list_item"
    ],
    "docutils.parsers.rst.states.SpecializedBody.invalid_input": [],
    "docutils.parsers.rst.states.EnumeratedList.enumerator": [
        "docutils.parsers.rst.states.Body.parse_enumerator",
        "docutils.parsers.rst.states.Body.is_enumerated_list_item",
        "docutils.parsers.rst.states.SpecializedBody.invalid_input",
        "docutils.parsers.rst.states.Body.list_item"
    ],
    "docutils.parsers.rst.states.FieldList.field_marker": [
        "docutils.parsers.rst.states.Body.field"
    ],
    "docutils.parsers.rst.states.OptionList.option_marker": [
        "docutils.parsers.rst.states.Body.option_list_item",
        "docutils.parsers.rst.states.SpecializedBody.invalid_input"
    ],
    "docutils.parsers.rst.states.RFC2822List.rfc2822": [
        "docutils.parsers.rst.states.RFC2822Body.rfc2822_field"
    ],
    "docutils.parsers.rst.states.ExtensionOptions.parse_field_body": [
        "<builtin>.list",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.LineBlock.line_block": [
        "docutils.parsers.rst.states.Body.line_block_line"
    ],
    "docutils.parsers.rst.states.Explicit.explicit_markup": [
        "docutils.parsers.rst.states.Body.explicit_construct"
    ],
    "docutils.parsers.rst.states.Explicit.anonymous": [
        "docutils.parsers.rst.states.Body.anonymous_target"
    ],
    "docutils.parsers.rst.states.SubstitutionDef.embedded_directive": [
        "docutils.parsers.rst.states.Body.directive"
    ],
    "docutils.parsers.rst.states.Text.blank": [
        "docutils.parsers.rst.states.Text.literal_block",
        "docutils.parsers.rst.states.RSTState.paragraph"
    ],
    "docutils.parsers.rst.states.Text.literal_block": [
        "docutils.parsers.rst.states.Text.quoted_literal_block",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.Text.quoted_literal_block": [
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.RSTState.nested_parse",
        "docutils.nodes.Element.__init__"
    ],
    "docutils.parsers.rst.states.Text.eof": [
        "docutils.parsers.rst.states.SpecializedText.invalid_input",
        "docutils.parsers.rst.states.Line.blank",
        "docutils.parsers.rst.states.Text.blank"
    ],
    "docutils.parsers.rst.states.Text.indent": [
        "docutils.parsers.rst.states.RSTState.nested_list_parse",
        "docutils.parsers.rst.states.RSTState.goto_line",
        "docutils.parsers.rst.states.Text.definition_list_item",
        "docutils.parsers.rst.states.RSTState.unindent_warning"
    ],
    "docutils.parsers.rst.states.Text.definition_list_item": [
        "<builtin>.list",
        "docutils.parsers.rst.states.RSTState.nested_parse",
        "docutils.parsers.rst.states.Text.term"
    ],
    "docutils.parsers.rst.states.Text.term": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "docutils.parsers.rst.states.RSTState.inline_text",
        "<list>.append",
        "<builtin>.range"
    ],
    "docutils.parsers.rst.states.Text.underline": [
        "<list>.append",
        "docutils.parsers.rst.states.RSTState.section",
        "docutils.utils.column_width",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Text.text": [
        "docutils.parsers.rst.states.Text.literal_block",
        "docutils.parsers.rst.states.RSTState.paragraph",
        "<builtin>.list"
    ],
    "docutils.parsers.rst.states.Definition.indent": [
        "docutils.parsers.rst.states.Text.definition_list_item"
    ],
    "docutils.parsers.rst.states.Line.eof": [
        "docutils.parsers.rst.states.Line.state_correction",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Line.state_correction": [],
    "docutils.parsers.rst.states.Line.blank": [
        "docutils.parsers.rst.states.Line.state_correction",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.Line.text": [
        "docutils.parsers.rst.states.Line.short_overline",
        "<builtin>.len",
        "docutils.utils.column_width",
        "<str>.rstrip",
        "docutils.parsers.rst.states.RSTState.section",
        "<list>.append"
    ],
    "docutils.parsers.rst.states.Line.short_overline": [
        "docutils.parsers.rst.states.Line.state_correction"
    ],
    "docutils.parsers.rst.states.Line.underline": [
        "docutils.parsers.rst.states.Line.short_overline",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.states.QuotedLiteralBlock.__init__": [
        "docutils.parsers.rst.states.RSTState.__init__"
    ],
    "docutils.parsers.rst.states.QuotedLiteralBlock.indent": [
        "<list>.append"
    ],
    "docutils.parsers.rst.states.QuotedLiteralBlock.initial_quoted": [
        "docutils.statemachine.State.add_transition",
        "re.compile",
        "re.escape",
        "docutils.statemachine.State.remove_transition"
    ],
    "docutils.statemachine.State.add_transition": [],
    "docutils.parsers.rst.states.QuotedLiteralBlock.text": [
        "<list>.append"
    ],
    "docutils.parsers.rst.languages.RstLanguageImporter.check_content": [
        "<builtin>.isinstance"
    ],
    "docutils.languages.LanguageImporter.import_from_packages": [
        "importlib.import_module",
        "docutils.languages.LanguageImporter.check_content"
    ],
    "docutils.languages.LanguageImporter.check_content": [
        "<builtin>.isinstance"
    ],
    "docutils.languages.LanguageImporter.__call__": [
        "docutils.utils.normalize_language_tag",
        "docutils.languages.LanguageImporter.import_from_packages"
    ],
    "docutils.parsers.rst.tableparser.SimpleTableParser.setup": [
        "<builtin>.len"
    ],
    "docutils.parsers.rst.tableparser.SimpleTableParser.parse_table": [
        "docutils.parsers.rst.tableparser.SimpleTableParser.parse_columns",
        "docutils.parsers.rst.tableparser.SimpleTableParser.parse_row",
        "pathlib.PurePath.match",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.tableparser.SimpleTableParser.parse_columns": [
        "<list>.append",
        "docutils.parsers.rst.tableparser.TableMarkupError.__init__",
        "<builtin>.len"
    ],
    "docutils.parsers.rst.tableparser.SimpleTableParser.parse_row": [
        "<list>.append",
        "docutils.parsers.rst.tableparser.SimpleTableParser.parse_columns",
        "docutils.parsers.rst.tableparser.SimpleTableParser.check_columns",
        "docutils.parsers.rst.tableparser.SimpleTableParser.init_row",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "docutils.parsers.rst.tableparser.SimpleTableParser.check_columns": [
        "<list>.append",
        "docutils.utils.strip_combining_chars",
        "<list>.pop",
        "<builtin>.len",
        "docutils.parsers.rst.tableparser.TableMarkupError.__init__",
        "<builtin>.max",
        "<builtin>.range"
    ],
    "docutils.utils.strip_combining_chars": [],
    "docutils.parsers.rst.tableparser.SimpleTableParser.init_row": [
        "docutils.parsers.rst.tableparser.TableMarkupError.__init__",
        "<list>.append"
    ],
    "docutils.parsers.rst.tableparser.SimpleTableParser.structure_from_cells": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "docutils.transforms.universal.Decorations.apply": [
        "docutils.transforms.universal.Decorations.generate_footer",
        "docutils.transforms.universal.Decorations.generate_header"
    ],
    "docutils.transforms.universal.Decorations.generate_header": [],
    "docutils.transforms.universal.Decorations.generate_footer": [
        "docutils.utils.relative_path",
        "<list>.extend",
        "<list>.append"
    ],
    "docutils.transforms.universal.ExposeInternals.not_Text": [
        "<builtin>.isinstance"
    ],
    "docutils.transforms.universal.ExposeInternals.apply": [
        "<builtin>.getattr"
    ],
    "docutils.transforms.universal.FilterMessages.apply": [
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "docutils.transforms.universal.StripComments.apply": [
        "<builtin>.tuple"
    ],
    "docutils.transforms.universal.StripClassesAndElements.apply": [
        "<builtin>.tuple"
    ],
    "docutils.transforms.universal.StripClassesAndElements.check_classes": [
        "<builtin>.isinstance"
    ],
    "docutils.transforms.universal.SmartQuotes.__init__": [
        "<builtin>.set",
        "docutils.transforms.Transform.__init__"
    ],
    "docutils.transforms.Transform.__init__": [
        "docutils.languages.LanguageImporter.__init__"
    ],
    "docutils.transforms.universal.SmartQuotes.get_tokens": [
        "re.sub",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "docutils.transforms.universal.SmartQuotes.apply": [
        "docutils.transforms.universal.SmartQuotes.get_tokens",
        "<builtin>.isinstance",
        "docutils.utils.smartquotes.educate_tokens",
        "docutils.utils.normalize_language_tag",
        "<builtin>.zip",
        "<map>.update"
    ],
    "docutils.transforms.Transform.apply": [
        "<builtin>.NotImplementedError"
    ],
    "docutils.transforms.Transformer.add_transform": [
        "docutils.transforms.Transformer.get_priority_string",
        "<list>.append"
    ],
    "docutils.transforms.Transformer.get_priority_string": [],
    "docutils.transforms.Transformer.add_transforms": [
        "docutils.transforms.Transformer.get_priority_string",
        "<list>.append"
    ],
    "docutils.transforms.Transformer.add_pending": [
        "docutils.transforms.Transformer.get_priority_string",
        "<list>.append"
    ],
    "docutils.transforms.Transformer.populate_from_components": [
        "<list>.extend",
        "docutils.transforms.Transformer.add_transforms",
        "<builtin>.sorted"
    ],
    "docutils.transforms.Transformer.apply_transforms": [
        "<list>.reverse",
        "<list>.pop",
        "<list>.sort",
        "<list>.append"
    ],
    "docutils.utils.smartquotes.TestSmartypantsAllAttributes.test_dates": [
        "unittest.case.TestCase.assertEqual",
        "docutils.utils.smartquotes.smartyPants"
    ],
    "docutils.utils.smartquotes.TestSmartypantsAllAttributes.test_educated_quotes": [
        "unittest.case.TestCase.assertEqual",
        "docutils.utils.smartquotes.smartyPants"
    ],
    "docutils.utils.smartquotes.TestSmartypantsAllAttributes.test_html_tags": [
        "unittest.case.TestCase.assertEqual",
        "docutils.utils.smartquotes.smartyPants"
    ],
    "rich_cli.pager.PagerRenderable.__rich_console__": [
        "rich.segment.Segment.line"
    ],
    "rich_cli.pager.PagerApp.__init__": [
        "<builtin>.super"
    ],
    "rich_cli.pager.PagerApp.on_load": [
        "textual.app.App.bind"
    ],
    "textual.app.App.bind": [
        "textual.binding.Bindings.bind"
    ],
    "rich_cli.pager.PagerApp.on_mount": [
        "textual.widget.Widget.focus",
        "textual.widgets._scroll_view.ScrollView.update",
        "textual.widgets._scroll_view.ScrollView.__init__"
    ],
    "textual.widgets._scroll_view.ScrollView.__init__": [
        "textual.layouts.grid.GridLayout.add_column",
        "textual.layouts.grid.GridLayout.show_row",
        "<builtin>.super",
        "textual.layouts.grid.GridLayout.__init__",
        "textual.layouts.grid.GridLayout.add_row",
        "textual.layouts.grid.GridLayout.add_areas",
        "textual.layouts.grid.GridLayout.show_column",
        "textual.scrollbar.ScrollBar.__init__",
        "textual.views._window_view.WindowView.__init__",
        "textual.views"
    ],
    "textual.scrollbar.ScrollBar.__init__": [
        "<builtin>.super"
    ],
    "textual.views._window_view.WindowView.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance",
        "textual.layouts.vertical.VerticalLayout.__init__",
        "textual.layouts.vertical.VerticalLayout.add",
        "textual.widgets._static.Static.__init__"
    ],
    "textual.layouts.vertical.VerticalLayout.__init__": [
        "<builtin>.super",
        "textual.geometry.Spacing.unpack"
    ],
    "textual.geometry.Spacing.unpack": [
        "typing.cast",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "textual.widgets._static.Static.__init__": [
        "<builtin>.super"
    ],
    "textual.layouts.vertical.VerticalLayout.add": [
        "<builtin>.max"
    ],
    "textual.layouts.grid.GridLayout.show_row": [
        "textual.layout.Layout.require_update"
    ],
    "textual.layouts.grid.GridLayout.show_column": [
        "textual.layout.Layout.require_update"
    ],
    "textual.widget.Widget.focus": [],
    "textual.widgets._scroll_view.ScrollView.update": [
        "textual.views._window_view.WindowView.update",
        "textual.widgets._scroll_view.ScrollView.home"
    ],
    "textual.widgets._scroll_view.ScrollView.home": [],
    "textual.views._window_view.WindowView.update": [
        "textual.message_pump.MessagePump.emit",
        "textual.widget.Widget.refresh",
        "<builtin>.isinstance",
        "textual.widgets._static.Static.__init__"
    ],
    "textual.widget.Widget.refresh": [
        "textual.message_pump.MessagePump.post_message_no_wait",
        "textual.widget.Widget.clear_render_cache"
    ],
    "textual.widget.Widget.clear_render_cache": [],
    "textual.message_pump.MessagePump.post_message_no_wait": [
        "textual.message_pump.MessagePump.check_message_enabled"
    ],
    "textual.events.Event.__init_subclass__": [
        "<builtin>.super"
    ],
    "textual.events.Null.can_replace": [
        "<builtin>.isinstance"
    ],
    "textual.events.Callback.__init__": [
        "<builtin>.super"
    ],
    "textual.events.Action.__init__": [
        "<builtin>.super"
    ],
    "textual.events.Resize.__init__": [
        "<builtin>.super"
    ],
    "textual.events.Resize.can_replace": [
        "<builtin>.isinstance"
    ],
    "textual.events.MouseCapture.__init__": [
        "<builtin>.super"
    ],
    "textual.events.MouseRelease.__init__": [
        "<builtin>.super"
    ],
    "textual.events.Key.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "textual.events.MouseEvent.__init__": [
        "<builtin>.super",
        "rich.style.Style.__init__"
    ],
    "textual.events.MouseEvent.from_event": [
        "textual.events.MouseEvent.__init__"
    ],
    "textual.events.MouseEvent.style": [
        "rich.style.Style.__init__"
    ],
    "textual.events.MouseScrollDown.__init__": [
        "<builtin>.super"
    ],
    "textual.events.Timer.__init__": [
        "<builtin>.super"
    ],
    "textual.geometry.Offset.__add__": [
        "<builtin>.isinstance"
    ],
    "textual.geometry.Offset.__sub__": [
        "<builtin>.isinstance"
    ],
    "textual.geometry.Offset.blend": [
        "<builtin>.int"
    ],
    "textual.geometry.Size.__contains__": [
        "<builtin>.TypeError"
    ],
    "textual.geometry.Region.__bool__": [
        "<builtin>.bool"
    ],
    "textual.geometry.Region.x_range": [
        "<builtin>.range"
    ],
    "textual.geometry.Region.y_range": [
        "<builtin>.range"
    ],
    "textual.geometry.Region.__add__": [
        "<builtin>.isinstance"
    ],
    "textual.geometry.Region.__sub__": [
        "<builtin>.isinstance"
    ],
    "textual.geometry.Region.contains_point": [
        "<builtin>.TypeError"
    ],
    "textual.geometry.Region.__contains__": [
        "textual.geometry.Region.contains_region",
        "textual.geometry.Region.contains_point",
        "<builtin>.isinstance"
    ],
    "textual.geometry.Region.contains_region": [],
    "textual.geometry.Region.clip": [
        "textual.geometry.Region.from_corners",
        "textual.geometry.clamp"
    ],
    "textual.geometry.clamp": [],
    "textual.geometry.Region.from_corners": [],
    "textual.geometry.Region.union": [
        "<builtin>.max",
        "<builtin>.min",
        "textual.geometry.Region.from_corners"
    ],
    "textual.message.Message.__init__": [
        "<builtin>.super",
        "time.monotonic",
        "textual.case.camel_to_snake"
    ],
    "textual.message.Message.__init_subclass__": [
        "<builtin>.super"
    ],
    "textual.message.Message._done_event": [
        "asyncio.locks.Event.__init__"
    ],
    "textual._timer.Timer.start": [
        "asyncio.base_events.BaseEventLoop.create_task",
        "asyncio.events.get_event_loop",
        "textual._timer.Timer._run"
    ],
    "textual._timer.Timer._run": [
        "textual.events.Timer.__init__",
        "time.monotonic",
        "asyncio.locks.Event.wait",
        "asyncio.tasks.sleep",
        "<builtin>.max"
    ],
    "textual._timer.Timer.stop": [
        "asyncio.tasks.Task.cancel"
    ],
    "textual._timer.Timer.pause": [
        "asyncio.locks.Event.clear"
    ],
    "textual._timer.Timer.resume": [
        "asyncio.locks.Event.set"
    ],
    "textual.app.App.set_focus": [
        "textual.app.App.log"
    ],
    "textual.app.App.capture_mouse": [
        "textual.events.MouseCapture.__init__",
        "textual.events.MouseRelease.__init__"
    ],
    "textual.app.App.panic": [
        "rich.traceback.Traceback.__init__",
        "textual.message_pump.MessagePump.close_messages_no_wait"
    ],
    "textual.message_pump.MessagePump.close_messages_no_wait": [],
    "textual.app.App.shutdown": [
        "textual.message_pump.MessagePump.close_messages"
    ],
    "textual.message_pump.MessagePump.close_messages": [],
    "textual.app.App.refresh": [
        "rich.control.Control.home",
        "rich.console.Console.print",
        "rich.screen.Screen.__init__",
        "textual.app.App.panic"
    ],
    "textual.app.App.display": [
        "rich.console.Console.print",
        "textual.app.App.panic"
    ],
    "textual.app.App.measure": [
        "rich.measure.Measurement.get"
    ],
    "textual.app.App.press": [
        "textual.binding.Bindings.get_key"
    ],
    "textual.binding.Bindings.get_key": [],
    "textual.app.App.action": [
        "textual.app.App.log",
        "textual.app.App.dispatch_action",
        "textual.actions.parse",
        "<builtin>.getattr"
    ],
    "textual.app.App.dispatch_action": [
        "<builtin>.callable",
        "textual._callback.invoke",
        "<builtin>.getattr"
    ],
    "textual.app.App.broker_event": [
        "textual._event_broker.extract_handler_actions",
        "textual.app.App.action",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "textual.app.App.on_key": [
        "textual.app.App.press"
    ],
    "textual.app.App.on_shutdown_request": [
        "textual.app.App.log",
        "textual.message_pump.MessagePump.close_messages"
    ],
    "textual.app.App.action_press": [
        "textual.app.App.press"
    ],
    "textual.app.App.action_quit": [
        "textual.app.App.shutdown"
    ],
    "textual.app.App.action_bell": [
        "rich.console.Console.bell"
    ],
    "textual.app.MyApp.on_load": [
        "textual.app.App.bind"
    ],
    "textual.app.MyApp.on_mount": [
        "textual.views._dock_view.DockView.__init__",
        "textual.widgets._header.Header.__init__",
        "textual.widgets._placeholder.Placeholder.__init__",
        "textual.widgets._footer.Footer.__init__",
        "textual.app.App.push_view",
        "textual.views._dock_view.DockView.dock"
    ],
    "textual.widgets._header.Header.__init__": [
        "<builtin>.super"
    ],
    "textual.widgets._footer.Footer.__init__": [
        "<builtin>.super"
    ],
    "textual.views._dock_view.DockView.dock": [
        "typing.cast",
        "textual.view.View.refresh_layout",
        "<builtin>.isinstance",
        "textual.view.View.mount"
    ],
    "textual.view.View.mount": [
        "itertools.chain",
        "textual.widget.Widget.refresh"
    ],
    "textual.view.View.refresh_layout": [
        "textual.events.Resize.__init__"
    ],
    "textual._animator.Animation.__call__": [
        "typing.TypeVar.__init__",
        "<builtin>.min",
        "<builtin>.isinstance",
        "<builtin>.setattr"
    ],
    "textual._animator.BoundAnimator.__call__": [
        "textual._animator.Animator.animate",
        "<builtin>.isinstance"
    ],
    "textual._animator.Animator.animate": [
        "<builtin>.isinstance",
        "<builtin>.abs",
        "textual._timer.Timer.resume",
        "<builtin>.getattr",
        "time.time"
    ],
    "textual._animator.Animator.start": [
        "textual._timer.Timer.start"
    ],
    "textual._animator.Animator.stop": [
        "textual._timer.Timer.stop"
    ],
    "textual._animator.Animator.__call__": [
        "time.time",
        "textual._timer.Timer.pause",
        "<builtin>.list"
    ],
    "textual._easing._in_out_expo": [
        "<builtin>.pow"
    ],
    "textual._easing._in_out_circ": [
        "<builtin>.pow"
    ],
    "textual._easing._in_out_back": [
        "<builtin>.pow"
    ],
    "textual._easing._in_elastic": [
        "<builtin>.pow"
    ],
    "textual._easing._in_out_elastic": [
        "<builtin>.pow"
    ],
    "textual._easing._out_elastic": [
        "<builtin>.pow"
    ],
    "textual._easing._in_bounce": [
        "textual._easing._out_bounce"
    ],
    "textual._easing._out_bounce": [],
    "textual._easing._in_out_bounce": [
        "textual._easing._out_bounce"
    ],
    "textual._easing.<lambda8>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda9>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda11>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda12>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda13>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda14>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda15>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda16>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda17>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda18>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda19>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda20>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda21>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda22>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda23>": [
        "<builtin>.pow"
    ],
    "textual._easing.<lambda24>": [
        "<builtin>.pow"
    ],
    "textual.binding.BindingStack.__init__": [
        "<builtin>.list"
    ],
    "textual.binding.BindingStack.get_key": [
        "<builtin>.reversed"
    ],
    "textual.driver.Driver.__init__": [
        "time.time",
        "asyncio.events.get_event_loop"
    ],
    "textual.driver.Driver.send_event": [
        "asyncio.tasks.run_coroutine_threadsafe"
    ],
    "textual.driver.Driver.process_event": [
        "textual.driver.Driver.send_event",
        "textual.events.MouseEvent.from_event",
        "<builtin>.isinstance"
    ],
    "textual.layouts.dock.DockLayout.arrange": [
        "textual.layout_map.LayoutMap.__init__",
        "textual._layout_resolve.layout_resolve",
        "<builtin>.max",
        "<builtin>.enumerate",
        "<builtin>.zip",
        "_collections.defaultdict",
        "<builtin>.min"
    ],
    "textual.layout_map.LayoutMap.__init__": [],
    "textual._layout_resolve.layout_resolve": [
        "typing.cast",
        "<builtin>.sum",
        "<builtin>.enumerate",
        "<builtin>.zip"
    ],
    "textual.layout.LayoutUpdate.__rich_console__": [
        "rich.control.Control.home",
        "rich.segment.Segment.line",
        "<builtin>.enumerate",
        "textual._loop.loop_last",
        "rich.control.Control.move_to"
    ],
    "textual._loop.loop_last": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "textual.layout.Layout.reflow": [
        "textual.layout_map.LayoutMap.__init__",
        "textual.layout_map.LayoutMap.items",
        "<builtin>.set",
        "textual.layout_map.LayoutMap.keys",
        "textual.layout_map.LayoutMap.add_widget",
        "textual.layout.Layout.reset"
    ],
    "textual.layout_map.LayoutMap.add_widget": [
        "textual.layout_map.LayoutMap.add_widget",
        "textual.view",
        "<builtin>.isinstance"
    ],
    "textual.layout_map.LayoutMap.keys": [],
    "textual.layout_map.LayoutMap.items": [],
    "textual.layout.Layout.mount_all": [
        "textual.layouts.grid.GridLayout.get_widgets",
        "textual.layout.Layout.get_widgets"
    ],
    "textual.layout.Layout.get_widgets": [],
    "textual.layouts.grid.GridLayout.get_widgets": [],
    "textual.layout.Layout.__iter__": [
        "<builtin>.sorted"
    ],
    "textual.layout.Layout.get_widget_at": [
        "textual.layout.Layout.__iter__"
    ],
    "textual.layout.Layout.get_style_at": [
        "rich.style.Style.null",
        "textual.layout.Layout.get_widget_at"
    ],
    "textual.layout.Layout.cuts": [
        "<builtin>.range",
        "<builtin>.sorted"
    ],
    "textual.layout.Layout._get_renders": [
        "rich.segment.Segment.divide",
        "<builtin>.list",
        "operator.itemgetter.__init__",
        "<builtin>.sorted"
    ],
    "textual.layout.Layout._assemble_chops": [
        "<builtin>.sorted"
    ],
    "textual.layout.Layout.render": [
        "rich.segment.SegmentLines.__init__",
        "itertools.chain",
        "<builtin>.list",
        "rich.segment.Segment.divide",
        "<builtin>.zip",
        "textual.layout.Layout.render.width_view",
        "textual.layout.Layout._get_renders",
        "textual.layout.Layout._assemble_chops",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "textual.layout.Layout.render.width_view": [
        "rich.segment.Segment.divide",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "textual.layout.Layout.__rich_console__": [
        "textual.layout.Layout.render"
    ],
    "textual.layout.Layout.update_widget": [
        "textual.layout.Layout.render",
        "textual.layout.LayoutUpdate.__init__"
    ],
    "textual.layout.LayoutUpdate.__init__": [],
    "textual._loop.loop_first": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "textual._loop.loop_first_last": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "textual.widget.RenderCache.cursor_line": [
        "<builtin>.enumerate"
    ],
    "textual.widget.Widget.__init__": [
        "<builtin>.super"
    ],
    "textual.widget.Widget.validate_padding": [
        "textual.geometry.Spacing.unpack"
    ],
    "textual.widget.Widget.validate_margin": [
        "textual.geometry.Spacing.unpack"
    ],
    "textual.widget.Widget.validate_layout_offset_x": [
        "<builtin>.int"
    ],
    "textual.widget.Widget.validate_layout_offset_y": [
        "<builtin>.int"
    ],
    "textual.widget.Widget.__init_subclass__": [
        "<builtin>.super"
    ],
    "textual.widget.Widget.__rich__": [
        "textual.widget.Widget.render_styled"
    ],
    "textual.widget.Widget.render_styled": [
        "textual.scrollbar.ScrollBar.render",
        "textual.widgets._button.Button.render",
        "textual.widgets._tree_control.TreeControl.render",
        "textual.widget.Widget.render",
        "rich.panel.Panel.__init__",
        "rich.styled.Styled.__init__",
        "textual.widgets._static.Static.render",
        "textual.widgets._footer.Footer.render",
        "textual.widgets._placeholder.Placeholder.render",
        "textual.view.View.render",
        "<map>.get",
        "textual.widgets._header.Header.render",
        "rich.padding.Padding.__init__"
    ],
    "textual.view.View.render": [],
    "textual.widget.Widget.render": [
        "rich.align.Align.center",
        "rich.pretty.Pretty.__init__",
        "rich.panel.Panel.__init__"
    ],
    "textual.widget.Widget.watch": [
        "textual.widget.Widget.watch"
    ],
    "textual.widget.Widget.layout_offset": [
        "<builtin>.round"
    ],
    "textual.widget.Widget.render_lines": [
        "textual.widget.Widget.render_styled"
    ],
    "textual.widget.Widget.render_lines_free": [
        "textual.widget.Widget.render_styled",
        "<builtin>.len"
    ],
    "textual.widget.Widget._get_lines": [
        "textual.widget.Widget.render_lines"
    ],
    "textual.widget.Widget.forward_event": [
        "textual.widget.Widget.post_message"
    ],
    "textual.widget.Widget.post_message": [
        "<builtin>.super",
        "textual.message_pump.MessagePump.check_message_enabled",
        "textual.message_pump.MessagePump.log"
    ],
    "textual.widget.Widget.on_resize": [
        "textual.widget.Widget.refresh"
    ],
    "textual.widget.Widget.on_idle": [
        "textual.widget.Widget.check_layout",
        "textual.widget.Widget.reset_check_repaint",
        "textual.widget.Widget.check_repaint",
        "textual.widget.Widget.reset_check_layout",
        "textual.messages.Update.__init__",
        "textual.message_pump.MessagePump.emit"
    ],
    "textual.widget.Widget.check_layout": [],
    "textual.widget.Widget.check_repaint": [],
    "textual.widget.Widget.reset_check_repaint": [],
    "textual.messages.Update.__init__": [
        "<builtin>.super"
    ],
    "textual.message_pump.MessagePump.emit": [
        "textual.message_pump.MessagePump.post_message_from_child"
    ],
    "textual.widget.Widget.reset_check_layout": [],
    "textual.widget.Widget.dispatch_key": [
        "textual._callback.invoke",
        "<builtin>.getattr"
    ],
    "textual.widget.Widget.on_mouse_down": [
        "textual.widget.Widget.broker_event"
    ],
    "textual.widget.Widget.broker_event": [],
    "textual.widget.Widget.on_mouse_up": [
        "textual.widget.Widget.broker_event"
    ],
    "textual.widget.Widget.on_click": [
        "textual.widget.Widget.broker_event"
    ],
    "textual.message_pump.MessagePump.__init__": [
        "_weakrefset.WeakSet.__init__",
        "asyncio.queues.Queue.__init__",
        "<builtin>.set"
    ],
    "textual.message_pump.MessagePump.set_timer": [
        "textual._timer.Timer.__init__",
        "textual._timer.Timer.start"
    ],
    "textual.message_pump.MessagePump.set_interval": [
        "textual._timer.Timer.__init__",
        "textual._timer.Timer.start"
    ],
    "textual.message_pump.MessagePump.call_later": [
        "textual.message_pump.MessagePump.post_message",
        "textual.events.Callback.__init__",
        "textual.widget.Widget.post_message"
    ],
    "textual.message_pump.MessagePump.start_messages": [
        "textual.message_pump.MessagePump.process_messages",
        "asyncio.tasks.create_task",
        "textual.app.App.process_messages"
    ],
    "textual.message_pump.MessagePump.process_messages": [
        "textual.message_pump.MessagePump._process_messages"
    ],
    "textual.message_pump.MessagePump._process_messages": [
        "textual.message_pump.MessagePump.dispatch_message",
        "textual.message_pump.MessagePump.get_message",
        "textual.message_pump.MessagePump.peek_message",
        "textual.message_pump.MessagePump.log"
    ],
    "textual.message_pump.MessagePump.get_message": [],
    "textual.message_pump.MessagePump.peek_message": [],
    "textual.message_pump.MessagePump.post_message_from_child_no_wait": [
        "textual.message_pump.MessagePump.post_message_no_wait"
    ],
    "textual.message_pump.MessagePump.post_message_from_child": [
        "textual.message_pump.MessagePump.post_message",
        "textual.widget.Widget.post_message"
    ],
    "textual.message_pump.MessagePump.on_timer": [
        "textual._callback.invoke"
    ],
    "textual.messages.Update.__eq__": [
        "<builtin>.isinstance"
    ],
    "textual.messages.Update.can_replace": [
        "<builtin>.isinstance"
    ],
    "textual.messages.Layout.can_replace": [
        "<builtin>.isinstance"
    ],
    "textual.messages.CursorMove.__init__": [
        "<builtin>.super"
    ],
    "textual.reactive.Reactive.__set_name__": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "textual.reactive.Reactive.__get__": [
        "<builtin>.getattr"
    ],
    "textual.reactive.Reactive.__set__": [
        "<builtin>.callable",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "textual.reactive.Reactive.check_watchers"
    ],
    "textual.reactive.Reactive.check_watchers": [
        "<builtin>.callable",
        "textual.events.Callback.__init__",
        "<builtin>.getattr"
    ],
    "textual.reactive.Reactive.compute": [
        "<builtin>.setattr",
        "textual._callback.invoke",
        "<builtin>.getattr"
    ],
    "textual.reactive.watch": [
        "<builtin>.set",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "textual.reactive.Reactive.check_watchers"
    ],
    "textual.view.View.__init__": [
        "rich.style.Style.__init__",
        "<builtin>.super",
        "<builtin>.set"
    ],
    "textual.view.View.__init_subclass__": [
        "<builtin>.super"
    ],
    "textual.view.View.is_root_view": [
        "<builtin>.bool"
    ],
    "textual.view.View.get_arrangement": [
        "<builtin>.list"
    ],
    "textual.view.View.handle_update": [
        "<builtin>.isinstance"
    ],
    "textual.view.View.handle_layout": [
        "textual.view.View.refresh_layout"
    ],
    "textual.view.View.on_resize": [
        "textual.widget.Widget._update_size",
        "textual.view.View.refresh_layout"
    ],
    "textual.widget.Widget._update_size": [],
    "textual.view.View.on_mount": [
        "textual.reactive.watch"
    ],
    "textual.view.View.on_idle": [
        "textual.view.View.refresh_layout"
    ],
    "textual.view.View._on_mouse_move": [
        "textual.view.View.get_widget_at",
        "textual.view.View.get_widget_region"
    ],
    "textual.view.View.get_widget_at": [],
    "textual.view.View.get_widget_region": [],
    "textual.view.View.forward_event": [
        "<builtin>.isinstance",
        "textual.view.View.get_style_at",
        "textual.widget.Widget.post_message",
        "textual.view.View.get_widget_at",
        "textual.view.View.get_widget_region",
        "textual.message_pump.MessagePump.log",
        "textual.view.View._on_mouse_move"
    ],
    "textual.view.View.get_style_at": [],
    "textual.view.View.action_toggle": [
        "textual.widget.Widget.post_message"
    ],
    "textual._profile.timer": [
        "time.time",
        "log"
    ],
    "log": [],
    "textual._lines.crop_lines": [
        "textual._lines.crop_lines.width_view"
    ],
    "textual._lines.crop_lines.width_view": [
        "rich.segment.Segment.divide"
    ],
    "textual.views._dock_view.DockView.dock_grid": [
        "textual.view.View.refresh_layout",
        "<builtin>.isinstance",
        "textual.layouts.grid.GridLayout.__init__",
        "typing.cast",
        "textual.view.View.mount",
        "textual.view.View.__init__"
    ],
    "textual.layouts.grid.GridLayout.add_widget": [
        "textual.layout.Layout.require_update"
    ],
    "textual.layouts.grid.GridLayout.set_repeat": [
        "textual.layout.Layout.require_update"
    ],
    "textual.layouts.grid.GridLayout._align": [
        "textual.layouts.grid.GridLayout._align.align",
        "textual.geometry.Region.translate"
    ],
    "textual.layouts.grid.GridLayout._align.align": [],
    "textual.layouts.grid.GridLayout.arrange": [
        "textual.layouts.grid.GridLayout.arrange.resolve_tracks",
        "<builtin>.set",
        "textual.layouts.grid.GridLayout._align",
        "itertools.product",
        "textual.geometry.Region.from_corners",
        "operator.itemgetter.__init__",
        "<builtin>.zip",
        "<builtin>.sorted",
        "<builtin>.range"
    ],
    "textual.layouts.grid.GridLayout.arrange.resolve_tracks": [
        "itertools.cycle",
        "<builtin>.len",
        "<builtin>.enumerate",
        "<builtin>.zip",
        "_collections.defaultdict",
        "textual.layouts.grid.GridLayout.arrange.resolve",
        "<list>.append",
        "<builtin>.max"
    ],
    "textual.layouts.grid.GridLayout.arrange.resolve": [
        "itertools.cycle",
        "textual._layout_resolve.layout_resolve",
        "<builtin>.zip",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.min"
    ],
    "itertools.product": [],
    "textual.geometry.Region.translate": [],
    "textual.widgets._footer.Footer.make_key_text": [
        "rich.text.Text.assemble",
        "rich.text.Text.__init__",
        "rich.text.Text.append_text"
    ],
    "textual.widgets._footer.Footer.render": [
        "textual.widgets._footer.Footer.make_key_text"
    ],
    "textual.log": [
        "textual._context"
    ],
    "textual.panic": [
        "textual._context"
    ],
    "textual.widgets._header.Header.render": [
        "rich.panel.Panel.__init__",
        "rich.table.Table.add_column",
        "rich.table.Table.add_row",
        "textual.widgets._header.Header.get_clock",
        "rich.table.Table.grid"
    ],
    "textual.widgets._header.Header.get_clock": [],
    "textual.widgets._header.Header.on_mount": [
        "textual.reactive.watch",
        "textual.message_pump.MessagePump.set_interval"
    ],
    "textual.widgets._button.ButtonRenderable.__rich_console__": [
        "rich.align.Align.center"
    ],
    "textual.widgets._button.Button.__init__": [
        "<builtin>.super",
        "<builtin>.str"
    ],
    "textual.widgets._button.Button.render": [
        "textual.widgets._button.ButtonRenderable.__init__"
    ],
    "textual.widgets._button.ButtonRenderable.__init__": [],
    "textual.widgets._button.Button.on_click": [
        "textual.message_pump.MessagePump.emit"
    ],
    "textual.widgets._placeholder.Placeholder.render": [
        "rich.align.Align.center",
        "rich.pretty.Pretty.__init__",
        "rich.panel.Panel.__init__"
    ],
    "textual.widgets._scroll_view.ScrollView.validate_x": [
        "textual.geometry.clamp"
    ],
    "textual.widgets._scroll_view.ScrollView.validate_target_x": [
        "textual.geometry.clamp"
    ],
    "textual.widgets._scroll_view.ScrollView.validate_y": [
        "textual.geometry.clamp"
    ],
    "textual.widgets._scroll_view.ScrollView.validate_target_y": [
        "textual.geometry.clamp"
    ],
    "textual.widgets._scroll_view.ScrollView.max_scroll_y": [
        "<builtin>.max"
    ],
    "textual.widgets._scroll_view.ScrollView.max_scroll_x": [
        "<builtin>.max"
    ],
    "textual.widgets._scroll_view.ScrollView.watch_x": [
        "<builtin>.round"
    ],
    "textual.widgets._scroll_view.ScrollView.watch_y": [
        "<builtin>.round"
    ],
    "textual.widgets._scroll_view.ScrollView.on_mount": [
        "<builtin>.isinstance"
    ],
    "textual.widgets._scroll_view.ScrollView.scroll_up": [
        "textual.widget.Widget.animate"
    ],
    "textual.widget.Widget.animate": [],
    "textual.widgets._scroll_view.ScrollView.scroll_down": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.page_up": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.page_down": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.page_left": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.page_right": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.scroll_to_center": [
        "textual.widget.Widget.animate",
        "<builtin>.abs"
    ],
    "textual.widgets._scroll_view.ScrollView.on_mouse_scroll_up": [
        "textual.widgets._scroll_view.ScrollView.scroll_up"
    ],
    "textual.widgets._scroll_view.ScrollView.on_mouse_scroll_down": [
        "textual.widgets._scroll_view.ScrollView.scroll_down"
    ],
    "textual.widgets._scroll_view.ScrollView.on_key": [
        "textual.widget.Widget.dispatch_key"
    ],
    "textual.widgets._scroll_view.ScrollView.key_down": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.key_up": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.key_pagedown": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.key_pageup": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.key_end": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.key_home": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.handle_scroll_up": [
        "textual.widgets._scroll_view.ScrollView.page_up"
    ],
    "textual.widgets._scroll_view.ScrollView.handle_scroll_down": [
        "textual.widgets._scroll_view.ScrollView.page_down"
    ],
    "textual.widgets._scroll_view.ScrollView.handle_scroll_left": [
        "textual.widgets._scroll_view.ScrollView.page_left"
    ],
    "textual.widgets._scroll_view.ScrollView.handle_scroll_right": [
        "textual.widgets._scroll_view.ScrollView.page_right"
    ],
    "textual.widgets._scroll_view.ScrollView.handle_scroll_to": [
        "textual.widget.Widget.animate"
    ],
    "textual.widgets._scroll_view.ScrollView.handle_window_change": [
        "textual.widget.Widget.refresh",
        "textual.widgets._scroll_view.ScrollView.validate_y",
        "<builtin>.isinstance",
        "textual.widgets._scroll_view.ScrollView.validate_x"
    ],
    "textual.widgets._scroll_view.ScrollView.handle_cursor_move": [
        "textual.widgets._scroll_view.ScrollView.scroll_to_center"
    ],
    "textual.scrollbar.ScrollTo.__init__": [
        "<builtin>.super"
    ],
    "textual.scrollbar.ScrollBarRender.render_bar": [
        "rich.style.Style.__init__",
        "<builtin>.int",
        "rich.segment.Segments.__init__",
        "<builtin>.len",
        "<builtin>.divmod",
        "<builtin>.max"
    ],
    "textual.scrollbar.ScrollBarRender.__rich_console__": [
        "rich.console.Console.get_style",
        "textual.scrollbar.ScrollBarRender.render_bar",
        "rich.color.Color.parse"
    ],
    "textual.scrollbar.ScrollBar.render": [
        "textual.scrollbar.ScrollBarRender.__init__",
        "rich.style.Style.__init__",
        "rich.color.Color.parse"
    ],
    "textual.scrollbar.ScrollBar.action_scroll_down": [
        "textual.message_pump.MessagePump.emit"
    ],
    "textual.scrollbar.ScrollBar.action_scroll_up": [
        "textual.message_pump.MessagePump.emit"
    ],
    "textual.scrollbar.ScrollBar.action_grab": [
        "textual.widget.Widget.capture_mouse"
    ],
    "textual.widget.Widget.capture_mouse": [],
    "textual.scrollbar.ScrollBar.action_released": [
        "textual.widget.Widget.capture_mouse"
    ],
    "textual.scrollbar.ScrollBar.on_mouse_up": [
        "textual.widget.Widget.release_mouse"
    ],
    "textual.widget.Widget.release_mouse": [],
    "textual.scrollbar.ScrollBar.on_mouse_move": [
        "<builtin>.round",
        "textual.message_pump.MessagePump.emit",
        "textual.scrollbar.ScrollTo.__init__"
    ],
    "textual.widgets._static.Static.render": [
        "rich.styled.Styled.__init__",
        "rich.padding.Padding.__init__"
    ],
    "textual.widgets._static.Static.update": [
        "textual.widget.Widget.refresh"
    ],
    "textual.widgets._tree_control.TreeNode.previous_node": [
        "textual.widgets._tree_control.TreeNode.previous_node.last_sibling"
    ],
    "textual.widgets._tree_control.TreeNode.previous_node.last_sibling": [
        "textual.widgets._tree_control.TreeNode.previous_node.last_sibling"
    ],
    "textual.widgets._tree_control.TreeNode.next_sibling": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "textual.widgets._tree_control.TreeNode.previous_sibling": [
        "<builtin>.iter"
    ],
    "textual.widgets._tree_control.TreeNode.toggle": [
        "textual.widgets._tree_control.TreeNode.expand"
    ],
    "textual.widgets._tree_control.TreeNode.expand": [
        "textual.widget.Widget.refresh"
    ],
    "textual.widgets._tree_control.TreeClick.__init__": [
        "<builtin>.super"
    ],
    "textual.widgets._tree_control.TreeControl.__init__": [
        "<builtin>.super",
        "rich.tree.Tree.__init__",
        "textual.widgets._tree_control.TreeNode.__init__",
        "typing.NewType.new_type"
    ],
    "textual.widgets._tree_control.TreeNode.__init__": [],
    "textual.widgets._tree_control.TreeControl.watch_show_cursor": [
        "textual.messages.CursorMove.__init__",
        "textual.message_pump.MessagePump.emit_no_wait"
    ],
    "textual.message_pump.MessagePump.emit_no_wait": [
        "textual.message_pump.MessagePump.post_message_from_child_no_wait"
    ],
    "textual.widgets._tree_control.TreeControl.watch_cursor_line": [
        "textual.messages.CursorMove.__init__",
        "textual.message_pump.MessagePump.emit_no_wait"
    ],
    "textual.widgets._tree_control.TreeControl.add": [
        "textual.widgets._tree_control.TreeNode.__init__",
        "textual.widget.Widget.refresh",
        "typing.NewType.new_type"
    ],
    "textual.widgets._tree_control.TreeControl.find_cursor": [
        "<builtin>.next",
        "<list>"
    ],
    "textual.widgets._tree_control.TreeControl.render_node": [
        "rich.text.Text.__init__",
        "<builtin>.isinstance"
    ],
    "textual.widgets._tree_control.TreeControl.action_click_label": [
        "textual.widgets._tree_control.TreeClick.__init__",
        "textual.widget.Widget.post_message",
        "textual.widgets._tree_control.TreeControl.find_cursor"
    ],
    "textual.widgets._tree_control.TreeControl.on_key": [
        "textual.widget.Widget.dispatch_key"
    ],
    "textual.widgets._tree_control.TreeControl.key_down": [
        "textual.widgets._tree_control.TreeControl.cursor_down"
    ],
    "textual.widgets._tree_control.TreeControl.cursor_down": [],
    "textual.widgets._tree_control.TreeControl.key_up": [
        "textual.widgets._tree_control.TreeControl.cursor_up"
    ],
    "textual.widgets._tree_control.TreeControl.cursor_up": [],
    "textual.widgets._tree_control.TreeControl.key_enter": [
        "textual.widgets._tree_control.TreeClick.__init__",
        "textual.widget.Widget.post_message"
    ],
    "textual.widgets._tree_control.TreeApp.on_mount": [
        "textual.widgets._tree_control.TreeControl.__init__"
    ],
    "rich.tree.Tree.__rich_console__": [
        "<builtin>.sum",
        "rich._loop.loop_last",
        "rich.style.Style.null",
        "rich.segment.Segment.apply_style",
        "rich.style.Style.__init__",
        "rich.tree.Tree.__rich_console__.make_guide",
        "rich.style.StyleStack.push",
        "rich.console.Console.render_lines",
        "<builtin>.iter",
        "rich.segment.Segment.line",
        "<builtin>.next",
        "rich.styled.Styled.__init__",
        "rich.style.StyleStack.pop",
        "rich._loop.loop_first",
        "<builtin>.len",
        "rich.console.Console.get_style",
        "rich.style.StyleStack.__init__",
        "<builtin>.range"
    ],
    "rich.tree.Tree.__rich_console__.make_guide": [],
    "rich.style.StyleStack.pop": [],
    "rich.style.StyleStack.push": [],
    "rich.tree.Tree.__rich_measure__": [
        "<builtin>.max",
        "<builtin>.iter",
        "<builtin>.next",
        "rich.measure.Measurement.get"
    ],
    "textual.widgets._directory_tree.FileClick.__init__": [
        "<builtin>.super"
    ],
    "textual.widgets._directory_tree.DirectoryTree.__init__": [
        "<builtin>.super",
        "<str>.rstrip"
    ],
    "textual.widgets._directory_tree.DirectoryTree.render_node": [
        "textual.widgets._directory_tree.DirectoryTree.render_tree_label"
    ],
    "textual.widgets._directory_tree.DirectoryTree.on_mount": [
        "textual.widgets._directory_tree.DirectoryTree.load_directory"
    ],
    "textual.widgets._directory_tree.DirectoryTree.load_directory": [
        "<builtin>.list",
        "<builtin>.sorted"
    ],
    "textual.widgets._directory_tree.DirectoryTree.handle_tree_click": [
        "textual.widgets._directory_tree.FileClick.__init__",
        "textual.widgets._directory_tree.DirectoryTree.load_directory"
    ],
    "textual.widgets._directory_tree.TreeApp.on_mount": [
        "textual.widgets._directory_tree.DirectoryTree.__init__"
    ],
    "textual.views._grid_view.GridView.grid": [
        "<builtin>.isinstance"
    ],
    "textual.views._window_view.WindowChange.can_replace": [
        "<builtin>.isinstance"
    ],
    "textual.views._window_view.WindowView.handle_update": [
        "textual.message_pump.MessagePump.emit"
    ],
    "textual.views._window_view.WindowView.handle_layout": [
        "textual.widget.Widget.refresh",
        "textual.message_pump.MessagePump.log"
    ],
    "textual.views._window_view.WindowView.watch_virtual_size": [
        "textual.message_pump.MessagePump.emit"
    ],
    "textual.views._window_view.WindowView.watch_scroll_x": [
        "textual.widget.Widget.refresh"
    ],
    "textual.views._window_view.WindowView.watch_scroll_y": [
        "textual.widget.Widget.refresh"
    ],
    "textual.views._window_view.WindowView.on_resize": [
        "textual.message_pump.MessagePump.emit"
    ],
    "textual.layouts.vertical.VerticalLayout.arrange": [
        "textual._loop.loop_last",
        "<builtin>.max"
    ],
    "textual.drivers.linux_driver.LinuxDriver.__init__": [
        "<builtin>.super",
        "threading.Event.__init__"
    ],
    "textual.drivers.linux_driver.LinuxDriver.start_application_mode": [
        "textual.drivers.linux_driver.LinuxDriver._enable_mouse_support",
        "signal.signal",
        "asyncio.tasks.run_coroutine_threadsafe",
        "asyncio.events.get_event_loop",
        "textual.drivers.linux_driver.LinuxDriver._get_terminal_size",
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "textual.drivers.linux_driver.LinuxDriver._enable_mouse_support": [],
    "textual.drivers.linux_driver.LinuxDriver._get_terminal_size": [],
    "textual.drivers.linux_driver.LinuxDriver.disable_input": [
        "textual.drivers.linux_driver.LinuxDriver._disable_mouse_support",
        "threading.Event.is_set",
        "signal.signal",
        "threading.Thread.join",
        "threading.Event.set"
    ],
    "textual.drivers.linux_driver.LinuxDriver._disable_mouse_support": [],
    "textual.drivers.linux_driver.LinuxDriver.stop_application_mode": [
        "textual.drivers.linux_driver.LinuxDriver.disable_input"
    ],
    "textual.drivers.linux_driver.LinuxDriver.run_input_thread": [
        "textual.drivers.linux_driver.LinuxDriver._run_input_thread"
    ],
    "textual.drivers.linux_driver.LinuxDriver._run_input_thread": [
        "textual.driver.Driver.process_event",
        "selectors._PollLikeSelector.register",
        "selectors.KqueueSelector.__init__",
        "threading.Event.is_set",
        "selectors._PollLikeSelector.select",
        "selectors.KqueueSelector.select",
        "textual.log",
        "selectors.SelectSelector.__init__",
        "selectors.SelectSelector.select",
        "selectors.EpollSelector.select",
        "selectors.KqueueSelector.register",
        "selectors.SelectSelector.register",
        "textual._xterm_parser.XTermParser.__init__",
        "codecs.getincrementaldecoder"
    ],
    "textual.drivers.linux_driver.MyApp.on_mount": [
        "textual.message_pump.MessagePump.set_timer"
    ],
    "textual._xterm_parser.XTermParser.parse_mouse_code": [
        "<builtin>.bool",
        "pathlib.PurePath.match",
        "<builtin>.int"
    ],
    "textual._xterm_parser.XTermParser.parse": [
        "textual.drivers.win32.EventMonitor.run.<lambda1>",
        "textual.drivers.linux_driver.LinuxDriver._run_input_thread.more_data",
        "textual.events.Key.__init__",
        "textual._xterm_parser.XTermParser.parse_mouse_code",
        "pathlib.PurePath.match"
    ],
    "textual.drivers.linux_driver.LinuxDriver._run_input_thread.more_data": [
        "selectors._PollLikeSelector.select",
        "selectors.SelectSelector.select",
        "selectors.KqueueSelector.select",
        "selectors.EpollSelector.select"
    ],
    "textual._parser.Parser.__init__": [
        "<builtin>.next",
        "_io.StringIO",
        "_collections.deque",
        "textual._parser.Parser.parse"
    ],
    "textual._parser.Parser.parse": [],
    "textual._parser.Parser.reset": [
        "<builtin>.next",
        "textual._parser.Parser.parse"
    ],
    "textual._parser.Parser.feed": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "textual.drivers.windows_driver.WindowsDriver.__init__": [
        "<builtin>.super",
        "threading.Event.__init__"
    ],
    "textual.drivers.windows_driver.WindowsDriver.start_application_mode": [
        "textual.drivers.windows_driver.WindowsDriver._enable_mouse_support",
        "asyncio.events.get_event_loop",
        "textual.drivers.win32.EventMonitor.__init__",
        "threading.Thread.start",
        "textual.drivers.win32.enable_application_mode"
    ],
    "textual.drivers.win32.enable_application_mode": [
        "textual.drivers.win32._set_console_mode",
        "textual.drivers.win32._get_console_mode"
    ],
    "textual.drivers.win32._get_console_mode": [],
    "textual.drivers.win32._set_console_mode": [],
    "textual.drivers.windows_driver.WindowsDriver._enable_mouse_support": [],
    "textual.drivers.win32.EventMonitor.__init__": [
        "<builtin>.super"
    ],
    "textual.drivers.windows_driver.WindowsDriver.disable_input": [
        "threading.Thread.join",
        "threading.Event.is_set",
        "threading.Event.set",
        "textual.drivers.windows_driver.WindowsDriver._disable_mouse_support"
    ],
    "textual.drivers.windows_driver.WindowsDriver._disable_mouse_support": [],
    "textual.drivers.windows_driver.WindowsDriver.stop_application_mode": [
        "textual.drivers.windows_driver.WindowsDriver.disable_input",
        "textual.drivers.win32.enable_application_mode.restore"
    ],
    "textual.drivers.win32.enable_application_mode.restore": [
        "textual.drivers.win32._set_console_mode"
    ],
    "textual.drivers.win32._wait_for_handles": [
        "<builtin>.len"
    ],
    "textual.drivers.win32.EventMonitor.run": [
        "threading.Event.is_set",
        "textual.drivers.win32._wait_for_handles",
        "textual.drivers.win32.EventMonitor.on_size_change",
        "textual.driver.Driver.process_event",
        "textual._xterm_parser.XTermParser.__init__"
    ],
    "textual.drivers.win32.EventMonitor.on_size_change": [
        "textual.events.Resize.__init__",
        "asyncio.tasks.run_coroutine_threadsafe"
    ],
    "functools.singledispatchmethod.__get__._method": [
        "functools.singledispatch.dispatch",
        "<map>"
    ],
    "click.decorators.pass_obj.new_func": [
        "click.globals.get_current_context"
    ],
    "click.decorators.pass_context.new_func": [
        "click.globals.get_current_context"
    ],
    "typing_extensions.Protocol.__init__": [],
    "typing.Protocol.__init_subclass__._proto_hook": [
        "typing._is_callable_members_only",
        "typing._get_protocol_attrs",
        "<builtin>.isinstance",
        "typing._allow_reckless_class_cheks",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.getattr"
    ],
    "typing._allow_reckless_class_cheks": [],
    "typing.no_type_check_decorator.wrapped_decorator": [
        "typing.no_type_check"
    ],
    "_py_abc.ABCMeta._abc_caches_clear": [
        "_weakrefset.WeakSet.clear"
    ],
    "doctest.DocFileCase.format_failure": [],
    "difflib._mdiff._make_line.record_sub_info": [
        "<list>.append"
    ],
    "re._subx.filter": [
        "sre_parse.expand_template"
    ],
    "enum._make_class_unpicklable._break_on_call_reduce": [
        "<builtin>.TypeError"
    ],
    "asyncio.coroutines.coroutine.coro": [
        "asyncio.base_futures.isfuture",
        "<builtin>.isinstance",
        "inspect.isgenerator"
    ],
    "functools.cmp_to_key.K.__lt__": [
        "unittest.util.three_way_cmp"
    ],
    "unittest.util.three_way_cmp": [],
    "functools.cmp_to_key.K.__gt__": [
        "unittest.util.three_way_cmp"
    ],
    "functools.cmp_to_key.K.__eq__": [
        "unittest.util.three_way_cmp"
    ],
    "functools.cmp_to_key.K.__le__": [
        "unittest.util.three_way_cmp"
    ],
    "functools.cmp_to_key.K.__ge__": [
        "unittest.util.three_way_cmp"
    ],
    "functools.partialmethod._make_unbound_method._method": [
        "<map>"
    ],
    "inspect.formatannotationrelativeto._formatannotation": [
        "inspect.formatannotation"
    ],
    "inspect.formatargvalues.convert": [
        "inspect.<lambda7>"
    ],
    "shutil.ignore_patterns._ignore_patterns": [
        "<list>.extend",
        "<builtin>.set"
    ],
    "socketserver.ThreadingMixIn.process_request_thread": [],
    "rich.file_proxy.FileProxy.flush": [],
    "codecs.StreamRecoder.__exit__": [
        "click.utils.LazyFile.close",
        "click._compat._AtomicFile.close"
    ],
    "contextlib.closing.__exit__": [
        "tempfile._TemporaryFileWrapper.close"
    ],
    "contextlib.ContextDecorator.__call__.inner": [
        "contextlib.ContextDecorator._recreate_cm"
    ],
    "contextlib.ContextDecorator._recreate_cm": [],
    "contextlib._BaseExitStack._create_cb_wrapper._exit_wrapper": [
        "contextlib._BaseExitStack.callback"
    ],
    "asyncio.base_events.BaseEventLoop.stop": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_sendall": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_connect": [],
    "asyncio.proactor_events.BaseProactorEventLoop._process_events": [],
    "logging.StrFormatStyle._format": [],
    "string.Template.safe_substitute.convert": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "ssl.SSLContext.set_servername_callback.shim_cb": [
        "ssl.SSLContext._encode_hostname"
    ],
    "asyncio.coroutines.coroutine.wrapper": [
        "asyncio.coroutines.coroutine.coro",
        "asyncio.coroutines.CoroWrapper.__init__",
        "<builtin>.getattr"
    ],
    "asyncio.sslproto.SSLProtocol._finalize": [],
    "asyncio.tasks._wait._on_completion": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.set_result",
        "asyncio.events.TimerHandle.cancel"
    ],
    "asyncio.tasks.as_completed._on_timeout": [
        "asyncio.queues.Queue.put_nowait"
    ],
    "asyncio.tasks.as_completed._on_completion": [
        "asyncio.queues.Queue.put_nowait",
        "asyncio.events.TimerHandle.cancel"
    ],
    "asyncio.tasks.shield._inner_done_callback": [
        "asyncio.futures.Future.cancel",
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.tasks.shield._outer_done_callback": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.remove_done_callback"
    ],
    "asyncio.tasks.run_coroutine_threadsafe.callback": [
        "asyncio.tasks.ensure_future",
        "asyncio.futures._chain_future"
    ],
    "asyncio.streams.open_connection.<lambda2>": [],
    "asyncio.streams.open_connection.<lambda3>": [],
    "asyncio.streams.open_connection.<lambda4>": [],
    "asyncio.subprocess.SubprocessStreamProtocol._get_close_waiter": [],
    "asyncio.streams.start_server.factory": [
        "asyncio.streams.StreamReaderProtocol.__init__",
        "asyncio.streams.StreamReader.__init__"
    ],
    "asyncio.streams.start_unix_server.factory": [
        "asyncio.streams.StreamReaderProtocol.__init__",
        "asyncio.streams.StreamReader.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop.start_serving_pipe.loop_accept_pipe": [
        "asyncio.windows_utils.PipeHandle.fileno",
        "logging.Logger.warning",
        "asyncio.windows_events.PipeServer.closed",
        "_weakrefset.WeakSet.discard",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.windows_utils.PipeHandle.close",
        "asyncio.windows_events.PipeServer._get_unconnected_pipe",
        "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport"
    ],
    "asyncio.windows_events.IocpProactor._wait_for_handle.finish_wait_for_handle": [
        "asyncio.windows_events._BaseWaitHandleFuture._poll"
    ],
    "asyncio.windows_events._WindowsSubprocessTransport._start.callback": [
        "subprocess.Popen.poll",
        "asyncio.base_subprocess.BaseSubprocessTransport._process_exited"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._start_serving.loop": [
        "asyncio.trsock.TransportSocket.__init__",
        "logging.Logger.debug",
        "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport",
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.streams.start_server.factory"
    ],
    "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper": [
        "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper"
    ],
    "tempfile.TemporaryDirectory._rmtree.onerror": [
        "posixpath.dirname",
        "tempfile.TemporaryDirectory._rmtree.onerror.resetperms",
        "<builtin>.issubclass",
        "ntpath.dirname",
        "tempfile.TemporaryDirectory._rmtree"
    ],
    "tempfile.TemporaryDirectory._rmtree.onerror.resetperms": [],
    "collections.ChainMap.new_child": [],
    "doctest.DocFileCase.id": [],
    "unittest.loader._make_skipped_test.testSkipped": [],
    "unittest.loader._FailedTest.__getattr__.testFailure": [
        "unittest.suite.BaseTestSuite.__init__"
    ],
    "unittest.signals.removeHandler.inner": [
        "unittest.signals.removeHandler",
        "signal.getsignal"
    ],
    "click.core.iter_params_for_processing.sort_key": [
        "<builtin>.float"
    ],
    "click.core.MultiCommand.result_callback.decorator": [
        "typing.cast",
        "functools.update_wrapper"
    ],
    "click.core.Option.get_help_record._write_opts": [
        "click.core.Parameter.make_metavar",
        "click.formatting.join_options"
    ],
    "click.core.Option.prompt_for_value.<lambda1>": [
        "click.core.Parameter.process_value"
    ],
    "typing_extensions.Protocol.__init_subclass__._proto_hook": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "typing_extensions._is_callable_members_only",
        "typing_extensions._get_protocol_attrs"
    ],
    "click.core.MultiCommand.result_callback.decorator.function": [
        "rich.console.Group.__init__",
        "rich.rule.Rule.__init__",
        "click.utils.safecall.wrapper",
        "rich.json.JSON.__init__",
        "rich.markdown.Markdown.__init__",
        "click.core.MultiCommand.result_callback.decorator.function",
        "click.utils.KeepOpenFile.__init__",
        "click._compat._AtomicFile.__init__",
        "functools._lru_cache_wrapper.wrapper",
        "rich.console.ScreenUpdate.__init__",
        "<list>",
        "rich.constrain.Constrain.__init__",
        "rich.panel.Panel._subtitle",
        "rich.panel.Panel.__init__",
        "click._compat._NonClosingTextIOWrapper.__init__",
        "click.decorators.make_pass_decorator.decorator.new_func",
        "rich.panel.Panel._title",
        "rich.text.Text.__init__",
        "rich.segment.Segments.__init__",
        "rich.table.Table.__init__",
        "functools.singledispatchmethod.__get__._method",
        "rich.pretty.Pretty.__init__",
        "rich.columns.Columns.__init__",
        "click._compat._FixupStream.__init__",
        "rich._inspect.Inspect.__init__",
        "codecs.StreamRecoder.__init__",
        "click.decorators.pass_obj.new_func",
        "click.decorators.pass_context.new_func",
        "click._winconsole.ConsoleStream.__init__",
        "rich.align.Align.__init__",
        "rich_rst.RestructuredText.__init__",
        "functools.singledispatch.wrapper",
        "rich_cli.__main__.ForceWidth.__init__",
        "rich.file_proxy.FileProxy.__init__",
        "<map>",
        "rich.styled.Styled.__init__",
        "click.decorators.pass_meta_key.decorator.new_func",
        "click.utils.LazyFile.__init__",
        "rich.syntax.Syntax.__init__",
        "rich.padding.Padding.__init__"
    ],
    "click.decorators.make_pass_decorator.decorator": [
        "typing.cast",
        "functools.update_wrapper"
    ],
    "click.decorators.pass_meta_key.decorator": [
        "typing.cast",
        "functools.update_wrapper"
    ],
    "click.decorators.version_option.callback": [
        "typing.cast",
        "importlib_metadata.version",
        "click.utils.echo",
        "importlib.metadata",
        "importlib_metadata",
        "<builtin>.RuntimeError"
    ],
    "click.decorators.help_option.callback": [
        "click.utils.echo"
    ],
    "pygments.util.make_analysator.text_analyse": [
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.float"
    ],
    "rich.console.Capture.__enter__": [
        "rich.console.Console.begin_capture"
    ],
    "rich.console.Capture.__exit__": [
        "rich.console.Console.end_capture"
    ],
    "rich.console.ThemeContext.__enter__": [
        "rich.console.Console.push_theme"
    ],
    "rich.console.Console.push_theme": [],
    "rich.console.ThemeContext.__exit__": [
        "rich.console.Console.pop_theme"
    ],
    "rich.console.Console.pop_theme": [],
    "rich.console.PagerContext.__enter__": [
        "rich.console.Console._enter_buffer"
    ],
    "rich.console.PagerContext.__exit__": [
        "rich.console.Console._exit_buffer"
    ],
    "rich.console.ScreenContext.__enter__": [
        "rich.console.Console.set_alt_screen",
        "rich.console.Console.show_cursor"
    ],
    "rich.console.ScreenContext.__exit__": [
        "rich.console.Console.set_alt_screen",
        "rich.console.Console.show_cursor"
    ],
    "dataclasses._recursive_repr.wrapper": [
        "<builtin>.id"
    ],
    "pygments.lexer.bygroups.callback": [
        "pygments.lexer._PseudoMatch.__init__",
        "<builtin>.enumerate",
        "<builtin>.type"
    ],
    "pygments.lexer._PseudoMatch.__init__": [],
    "importlib.metadata.Distribution.files.make_file": [
        "importlib.metadata.FileHash.__init__",
        "<builtin>.int"
    ],
    "importlib.metadata.FileHash.__init__": [],
    "pathlib._Flavour.join_parsed_parts": [
        "pathlib._WindowsFlavour.casefold"
    ],
    "pathlib._WindowsFlavour.casefold": [],
    "importlib.util.set_package.set_package_wrapper": [
        "<builtin>.hasattr",
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "importlib.util.set_loader.set_loader_wrapper": [
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "importlib.util.module_for_loader.module_for_loader_wrapper": [
        "importlib.util._module_to_load"
    ],
    "importlib.util.LazyLoader.factory.<lambda1>": [
        "importlib.util.LazyLoader.__init__"
    ],
    "docutils.frontend.ConfigParser.optionxform": [
        "<str>.replace",
        "<str>.lower"
    ],
    "importlib_metadata.Distribution.files.make_file": [
        "<builtin>.int",
        "importlib_metadata.FileHash.__init__"
    ],
    "importlib_metadata.FileHash.__init__": [],
    "importlib_metadata._adapters.Message.json.transform": [
        "re.split"
    ],
    "email.generator.BytesGenerator._encode": [],
    "email.generator.BytesGenerator.write": [
        "email.generator.Generator.write"
    ],
    "email.generator.BytesGenerator._new_buffer": [
        "_io.BytesIO"
    ],
    "email.generator.BytesGenerator._handle_text": [
        "<builtin>.super",
        "email.generator.Generator._write_lines",
        "email.utils._has_surrogates"
    ],
    "email.policy.EmailPolicy.header_fetch_parse": [
        "email.headerregistry.HeaderRegistry.__init__",
        "<builtin>.hasattr"
    ],
    "email.policy.EmailPolicy.header_store_parse": [
        "<str>.lower",
        "<builtin>.isinstance",
        "<builtin>.len",
        "email.headerregistry.HeaderRegistry.__init__",
        "<builtin>.hasattr",
        "<str>.splitlines",
        "<builtin>.ValueError"
    ],
    "email.generator.BytesGenerator._write_headers": [
        "email.generator.BytesGenerator.write",
        "email.generator.Generator.write",
        "email.message.Message.raw_items"
    ],
    "email.policy.EmailPolicy.header_max_count": [],
    "importlib_metadata._compat.disable_stdlib_finder.matches": [
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "pkg_resources._by_version_descending._by_version": [
        "posixpath.splitext",
        "pkg_resources._by_version_descending.try_parse",
        "ntpath.splitext"
    ],
    "pkg_resources._by_version_descending.try_parse": [],
    "pkg_resources._rebuild_mod_path.safe_sys_path_index": [
        "<builtin>.float"
    ],
    "pkg_resources._rebuild_mod_path.position_in_sys_path": [
        "pkg_resources._rebuild_mod_path.safe_sys_path_index",
        "pkg_resources._normalize_cached"
    ],
    "importlib._bootstrap_external.FileFinder.path_hook.path_hook_for_FileFinder": [
        "importlib._bootstrap_external._path_isdir",
        "importlib._bootstrap_external.FileFinder.__init__",
        "<builtin>.ImportError"
    ],
    "pkg_resources.extern.jaraco.functools.method_caller.call_method": [
        "<builtin>.getattr"
    ],
    "pkg_resources.extern.jaraco.functools.once.wrapper": [
        "<builtin>.hasattr"
    ],
    "pkg_resources.extern.jaraco.functools.once.<lambda1>": [
        "<builtin>.vars"
    ],
    "pkg_resources.extern.jaraco.functools.apply.wrap": [
        "pkg_resources.extern.jaraco.functools.compose"
    ],
    "pkg_resources.extern.jaraco.functools.first_invoke.wrapper": [
        "pkg_resources.extern.jaraco.functools.Throttler._wait"
    ],
    "pkg_resources.extern.jaraco.functools.save_method_args.wrapper": [
        "<builtin>.setattr"
    ],
    "processing.extProcessor.ExtProcessor.getYPOint.closure.func": [
        "processing.extProcessor.ExtProcessor.resolve",
        "<builtin>.isinstance"
    ],
    "processing.extProcessor.ExtProcessor.visit_Call.match_call": [
        "processing.extProcessor.ExtProcessor._handle_args",
        "<map>.items",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "processing.extProcessor.ExtProcessor.getYPOint",
        "<builtin>.len",
        "processing.extProcessor.ExtProcessor.get_module_ns"
    ],
    "processing.extProcessor.ExtProcessor.visit_Call.enter_call": [
        "functools.reduce",
        "<builtin>.map",
        "processing.extProcessor.ExtProcessor.pushStack"
    ],
    "processing.extProcessor.ExtProcessor.visit_Call.enter_call.<lambda1>": [],
    "processing.extProcessor.ExtProcessor.visit_If.process_if_main": [
        "processing.extProcessor.ExtProcessor.get_module_ns",
        "<builtin>.isinstance"
    ],
    "processing.extProcessor.ExtProcessor._get_last_line.<lambda1>": [
        "<builtin>.hasattr"
    ],
    "pydoc._url_handler._HTMLDoc.filelink": [],
    "pydoc._url_handler.html_search.callback": [
        "<list>.append"
    ],
    "socketserver._SocketWriter.fileno": [],
    "http.client.HTTPResponse.fileno": [
        "socket.SocketIO.fileno"
    ],
    "http.client.HTTPResponse.isclosed": [],
    "socketserver.UDPServer.server_activate": [],
    "textual.widgets._placeholder.Placeholder.__rich_repr__": [],
    "textual.widget.Widget.__rich_repr__": [],
    "textual.view.View.__rich_repr__": [],
    "attr._make._ClassBuilder._make_getstate_setstate.slots_getstate": [
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "attr._make._ClassBuilder._make_getstate_setstate.slots_setstate": [
        "<builtin>.zip"
    ],
    "attr._make._attrs_to_init_script.fmt_setter": [
        "attr._make._setattr",
        "attr._make._is_slot_attr"
    ],
    "attr._make._attrs_to_init_script.fmt_setter_with_converter": [
        "attr._make._setattr_with_converter",
        "attr._make._is_slot_attr"
    ],
    "attr._make._make_order.attrs_to_tuple": [
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "attr._make._make_order.__lt__": [
        "attr._make._make_order.attrs_to_tuple"
    ],
    "attr._make._make_order.__le__": [
        "attr._make._make_order.attrs_to_tuple"
    ],
    "attr._make._make_order.__gt__": [
        "attr._make._make_order.attrs_to_tuple"
    ],
    "attr._make._make_order.__ge__": [
        "attr._make._make_order.attrs_to_tuple"
    ],
    "urllib3.connectionpool.HTTPConnectionPool.close": [],
    "urllib3.packages.six.with_metaclass.metaclass.__new__": [
        "types.resolve_bases"
    ],
    "urllib3.packages.six.add_metaclass.wrapper": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "http.cookiejar.CookieJar._cookie_attrs.<lambda1>": [
        "<builtin>.len"
    ],
    "urllib.request.ProxyHandler.__init__.<lambda1>": [
        "urllib.request.ProxyHandler.proxy_open"
    ],
    "cryptography.utils.cached_property.inner": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "cryptography.x509.name._unescape_dn_value.sub": [
        "<builtin>.int",
        "<builtin>.chr",
        "<builtin>.len"
    ],
    "rich._inspect.Inspect._render.sort_items": [
        "<builtin>.callable"
    ],
    "docutils.nodes.document.copy": [],
    "docutils.nodes.pending.copy": [],
    "docutils.statemachine.StateWS.indent": [
        "docutils.parsers.rst.states.NestedStateMachine.run"
    ],
    "docutils.statemachine.StateWS.known_indent": [
        "docutils.parsers.rst.states.NestedStateMachine.run"
    ],
    "docutils.statemachine.StateWS.first_known_indent": [
        "docutils.parsers.rst.states.NestedStateMachine.run"
    ],
    "docutils.parsers.rst.states.SpecializedText.invalid_input": [],
    "rich_cli.pager.PagerApp.on_key": [
        "textual.widget.Widget.animate",
        "textual.widgets._scroll_view.ScrollView.scroll_up",
        "textual.widgets._scroll_view.ScrollView.scroll_down",
        "textual.widgets._scroll_view.ScrollView.page_down"
    ],
    "textual.message_pump.MessagePump.set_parent": [],
    "textual.widgets._tree_control.TreeControl.render": [],
    "textual.reactive.Reactive.check_watchers.update_watcher": [
        "textual.reactive.Reactive.compute",
        "textual._callback.count_parameters",
        "inspect.isawaitable"
    ],
    "textual.widgets._tree_control.TreeNode.add": [
        "rich.tree.Tree.add",
        "textual.widget.Widget.refresh",
        "textual.widgets._tree_control.TreeControl.add"
    ],
    "textual.widgets._tree_control.TreeNode.__rich__": [
        "textual.widgets._tree_control.TreeControl.render_node"
    ],
    "textual.drivers.linux_driver.LinuxDriver.start_application_mode.on_terminal_resize": [
        "textual.drivers.linux_driver.LinuxDriver._get_terminal_size",
        "asyncio.tasks.run_coroutine_threadsafe"
    ],
    "textual.drivers.win32.EventMonitor.run.<lambda1>": [],
    "tarfile.stn": [
        "<builtin>.len"
    ],
    "tarfile.itn": [
        "<builtin>.bytes",
        "<builtin>.int",
        "<builtin>.bytearray",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "tarfile._safe_print": [
        "<builtin>.print",
        "<builtin>.getattr"
    ],
    "tarfile._LowLevelFile.close": [],
    "tarfile._StreamProxy.close": [
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.close"
    ],
    "tarfile._Stream.__del__": [
        "tarfile._Stream.close",
        "<builtin>.hasattr"
    ],
    "tarfile._FileInFile.__init__": [
        "<builtin>.getattr"
    ],
    "tarfile._FileInFile.seek": [
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.ValueError"
    ],
    "tarfile._FileInFile.read": [
        "bz2.BZ2File.seek",
        "gzip.GzipFile.seek",
        "lzma.LZMAFile.read",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.seek",
        "tarfile._Stream.seek",
        "<builtin>.len",
        "<builtin>.min",
        "bz2.BZ2File.read",
        "tarfile._Stream.read"
    ],
    "tarfile._FileInFile.readinto": [
        "tarfile._FileInFile.read",
        "<builtin>.len"
    ],
    "tarfile.ExFileObject.__init__": [
        "<builtin>.super",
        "tarfile._FileInFile.__init__"
    ],
    "tarfile.TarInfo.__repr__": [
        "<builtin>.id"
    ],
    "tarfile.TarInfo.isfile": [
        "tarfile.TarInfo.isreg"
    ],
    "tarfile.TarFile.gzopen": [
        "gzip",
        "gzip.GzipFile.close",
        "gzip.GzipFile.__init__",
        "<builtin>.ValueError",
        "tarfile.TarFile.taropen"
    ],
    "gzip": [
        "zlib",
        "gzip._GzipReader",
        "gzip.GzipFile",
        "_compression",
        "struct",
        "os",
        "gzip.main",
        "gzip._PaddedFile",
        "io",
        "gzip.BadGzipFile"
    ],
    "gzip._PaddedFile": [],
    "gzip.BadGzipFile": [],
    "gzip.GzipFile": [
        "<builtin>.property"
    ],
    "gzip._GzipReader": [],
    "gzip.main": [
        "argparse.ArgumentParser.parse_args",
        "argparse",
        "gzip.GzipFile.read",
        "argparse.ArgumentParser.__init__",
        "gzip.GzipFile.close",
        "gzip.GzipFile.__init__",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.open",
        "<builtin>.print",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<builtin>.repr",
        "gzip.GzipFile.write"
    ],
    "gzip.GzipFile.__init__": [
        "<builtin>.isinstance",
        "os._fspath",
        "gzip._GzipReader.__init__",
        "_io.BufferedReader",
        "<str>.startswith",
        "gzip.GzipFile._write_gzip_header",
        "gzip.GzipFile._init_write",
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "gzip.GzipFile._init_write": [],
    "gzip._GzipReader.__init__": [
        "<builtin>.super",
        "gzip._PaddedFile.__init__"
    ],
    "gzip._PaddedFile.__init__": [
        "<builtin>.len"
    ],
    "gzip.GzipFile._write_gzip_header": [
        "<builtin>.isinstance",
        "<builtin>.int",
        "ntpath.basename",
        "posixpath.basename",
        "gzip.write32u",
        "gzip.GzipFile.write",
        "<builtin>.chr"
    ],
    "gzip.write32u": [
        "gzip.GzipFile.write"
    ],
    "gzip.GzipFile.read": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.write": [
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "_compression.BaseStream._check_not_closed",
        "<builtin>.len",
        "<builtin>.OSError",
        "gzip.GzipFile.write",
        "<builtin>.ValueError"
    ],
    "gzip.GzipFile.close": [
        "gzip.GzipFile.write",
        "gzip.write32u"
    ],
    "gzip.GzipFile.seek": [
        "_compression.BaseStream._check_not_closed",
        "<builtin>.OSError",
        "gzip.GzipFile.write",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "tarfile.TarFile.bz2open": [
        "bz2.BZ2File.close",
        "bz2.BZ2File.__init__",
        "<builtin>.ValueError",
        "bz2",
        "tarfile.TarFile.taropen"
    ],
    "bz2.BZ2File.tell": [],
    "bz2.BZ2File.seek": [],
    "bz2.BZ2File.write": [],
    "bz2.BZ2File.close": [],
    "tarfile.TarFile.xzopen": [
        "lzma.LZMAFile.__init__",
        "lzma.LZMAFile.close",
        "lzma",
        "<builtin>.ValueError",
        "tarfile.TarFile.taropen"
    ],
    "lzma.LZMAFile.close": [],
    "tarfile.TarFile.getnames": [
        "tarfile.TarFile.getmembers"
    ],
    "tarfile.TarFile.list": [
        "tarfile.TarInfo.isblk",
        "tarfile._safe_print",
        "stat.filemode",
        "tarfile.TarInfo.islnk",
        "tarfile.TarFile._check",
        "tarfile.TarInfo.isdir",
        "tarfile.TarFile.__iter__",
        "tarfile.TarInfo.ischr",
        "<builtin>.print",
        "tarfile.TarInfo.issym"
    ],
    "bz2.BZ2File.read": [],
    "tarfile.TarFile.extractfile": [
        "tarfile.TarInfo.islnk",
        "<builtin>.isinstance",
        "tarfile.TarFile._check",
        "tarfile.TarFile.getmember",
        "tarfile.TarInfo.isreg",
        "tarfile.ExFileObject.__init__",
        "tarfile.TarFile.extractfile",
        "tarfile.TarInfo.issym",
        "tarfile.TarFile._find_link_target"
    ],
    "tarfile.TarFile.__enter__": [
        "tarfile.TarFile._check"
    ],
    "tarfile.TarFile.__exit__": [
        "tarfile._Stream.close",
        "lzma.LZMAFile.close",
        "gzip.GzipFile.close",
        "bz2.BZ2File.close",
        "tarfile.TarFile.close"
    ],
    "concurrent.futures.process._python_exit": [
        "weakref.WeakKeyDictionary.items",
        "<builtin>.list"
    ],
    "concurrent.futures.process._ExceptionWithTraceback.__init__": [
        "traceback.format_exception",
        "<builtin>.type"
    ],
    "concurrent.futures.process._rebuild_exc": [
        "concurrent.futures.process._RemoteTraceback.__init__"
    ],
    "concurrent.futures.process._RemoteTraceback.__init__": [],
    "concurrent.futures.process._SafeQueue.__init__": [
        "<builtin>.super"
    ],
    "concurrent.futures.process._SafeQueue._on_queue_feeder_error": [
        "<map>.pop",
        "<builtin>.super",
        "<builtin>.isinstance",
        "<builtin>.type",
        "concurrent.futures.process._RemoteTraceback.__init__",
        "traceback.format_exception"
    ],
    "concurrent.futures.process._get_chunks": [
        "<builtin>.tuple",
        "<builtin>.zip"
    ],
    "concurrent.futures.process._sendback_result": [
        "concurrent.futures.process._ExceptionWithTraceback.__init__",
        "concurrent.futures.process._ResultItem.__init__"
    ],
    "concurrent.futures.process._ResultItem.__init__": [],
    "concurrent.futures.process._process_worker": [
        "concurrent.futures.process._ExceptionWithTraceback.__init__",
        "concurrent.futures.process._sendback_result",
        "logging.Logger.critical"
    ],
    "concurrent.futures.process._queue_management_worker": [
        "multiprocessing.connection.wait",
        "<builtin>.isinstance",
        "concurrent.futures.process._add_call_item_to_queue",
        "<builtin>.type",
        "concurrent.futures.process._queue_management_worker.shutting_down",
        "concurrent.futures.process._RemoteTraceback.__init__",
        "traceback.format_exception",
        "concurrent.futures.process._queue_management_worker.shutdown_worker"
    ],
    "concurrent.futures.process._add_call_item_to_queue": [],
    "multiprocessing.connection.wait": [
        "selectors.SelectSelector.__init__"
    ],
    "concurrent.futures.process._queue_management_worker.shutdown_worker": [
        "<builtin>.sum",
        "<builtin>.range"
    ],
    "concurrent.futures.process._queue_management_worker.shutting_down": [],
    "concurrent.futures.process._check_system_limits": [
        "<builtin>.NotImplementedError"
    ],
    "concurrent.futures.process.ProcessPoolExecutor.__init__": [
        "queue.Queue.__init__",
        "<builtin>.TypeError",
        "concurrent.futures.process._check_system_limits",
        "<builtin>.callable",
        "_thread.allocate_lock",
        "concurrent.futures.process._SafeQueue.__init__",
        "<builtin>.min",
        "concurrent.futures.process._ThreadWakeup.__init__",
        "<builtin>.ValueError"
    ],
    "queue.Queue.__init__": [
        "_thread.allocate_lock",
        "queue.Queue._init",
        "threading.Condition.__init__"
    ],
    "queue.Queue._init": [
        "_collections.deque"
    ],
    "concurrent.futures.process._ThreadWakeup.__init__": [],
    "concurrent.futures.process.ProcessPoolExecutor._start_queue_management_thread": [
        "threading.Thread.__init__",
        "threading.Thread.start",
        "concurrent.futures.process.ProcessPoolExecutor._adjust_process_count",
        "_weakref.ref"
    ],
    "concurrent.futures.process.ProcessPoolExecutor._adjust_process_count": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "concurrent.futures.process.ProcessPoolExecutor.submit": [
        "warnings",
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.len"
    ],
    "concurrent.futures.process.ProcessPoolExecutor.map": [
        "<builtin>.super",
        "concurrent.futures.process._chain_from_iterable_of_lists",
        "<builtin>.ValueError",
        "concurrent.futures.process._get_chunks"
    ],
    "concurrent.futures.process._chain_from_iterable_of_lists": [],
    "concurrent.futures.process.ProcessPoolExecutor.shutdown": [
        "concurrent.futures.process._ThreadWakeup.wakeup",
        "multiprocessing.queues.Queue.join_thread",
        "threading.Thread.join",
        "concurrent.futures.process._ThreadWakeup.close",
        "multiprocessing.queues.Queue.close"
    ],
    "concurrent.futures.process._ThreadWakeup.wakeup": [],
    "multiprocessing.queues.Queue.close": [
        "multiprocessing.connection._ConnectionBase.close"
    ],
    "multiprocessing.queues.Queue.join_thread": [
        "multiprocessing.util.debug",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.util.debug": [
        "logging.Logger.log"
    ],
    "concurrent.futures.process._ThreadWakeup.close": [],
    "queue.Queue.put_nowait": [
        "queue.Queue.put"
    ],
    "queue.Queue.put": [],
    "queue.Queue.get_nowait": [
        "queue.Queue.get"
    ],
    "queue.Queue.get": [],
    "queue.Queue._qsize": [
        "<builtin>.len"
    ],
    "queue.PriorityQueue._qsize": [
        "<builtin>.len"
    ],
    "queue.PriorityQueue._put": [
        "heapq.heappush"
    ],
    "queue.PriorityQueue._get": [
        "heapq.heappop"
    ],
    "queue.LifoQueue._qsize": [
        "<builtin>.len"
    ],
    "queue.LifoQueue._put": [
        "<list>.append"
    ],
    "queue.LifoQueue._get": [
        "<list>.pop"
    ],
    "queue._PySimpleQueue.__init__": [
        "threading.Semaphore.__init__",
        "_collections.deque"
    ],
    "queue._PySimpleQueue.put": [
        "threading.Semaphore.release"
    ],
    "queue._PySimpleQueue.get": [
        "<builtin>.ValueError",
        "threading.Semaphore.acquire"
    ],
    "queue._PySimpleQueue.put_nowait": [
        "queue._PySimpleQueue.put"
    ],
    "queue._PySimpleQueue.get_nowait": [
        "queue._PySimpleQueue.get"
    ],
    "queue._PySimpleQueue.empty": [
        "<builtin>.len"
    ],
    "queue._PySimpleQueue.qsize": [
        "<builtin>.len"
    ],
    "multiprocessing.context.BaseContext.cpu_count": [
        "<builtin>.NotImplementedError"
    ],
    "multiprocessing.managers": [
        "multiprocessing.connection",
        "multiprocessing.reduction.ForkingPickler.register",
        "multiprocessing.managers.NamespaceProxy",
        "multiprocessing.process",
        "multiprocessing.managers._SharedMemoryTracker",
        "multiprocessing.managers.EventProxy",
        "multiprocessing.managers.Token",
        "multiprocessing.managers.SharedMemoryServer",
        "array",
        "multiprocessing.managers.ConditionProxy",
        "threading",
        "multiprocessing.managers.BaseProxy",
        "signal",
        "traceback",
        "queue",
        "multiprocessing.managers.SharedMemoryManager",
        "multiprocessing.util",
        "multiprocessing.managers.RemoteError",
        "multiprocessing.managers.IteratorProxy",
        "multiprocessing.managers.BaseManager",
        "multiprocessing.managers.AcquirerProxy",
        "multiprocessing.managers.BarrierProxy",
        "multiprocessing.managers.ValueProxy",
        "multiprocessing.managers.BaseManager.register",
        "os",
        "multiprocessing.shared_memory",
        "multiprocessing.managers.State",
        "multiprocessing.managers.ProcessLocalSet",
        "multiprocessing.managers.Namespace",
        "multiprocessing.managers.Server",
        "multiprocessing.managers.Value",
        "multiprocessing.pool",
        "multiprocessing.managers.MakeProxyType",
        "multiprocessing.managers.SyncManager",
        "multiprocessing.managers.ListProxy",
        "multiprocessing.managers.PoolProxy",
        "<builtin>.getattr",
        "multiprocessing.context",
        "<builtin>.type"
    ],
    "multiprocessing.context.BaseContext.Manager": [
        "multiprocessing.managers",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.managers.BaseManager.start"
    ],
    "multiprocessing.pool": [
        "multiprocessing.connection",
        "multiprocessing.pool.IMapUnorderedIterator",
        "threading",
        "warnings",
        "collections",
        "multiprocessing.pool.MapResult",
        "traceback",
        "queue",
        "multiprocessing.pool._PoolCache",
        "os",
        "multiprocessing.pool.Pool",
        "multiprocessing.util",
        "multiprocessing.pool.MaybeEncodingError",
        "multiprocessing.pool.ApplyResult",
        "multiprocessing.pool.ExceptionWithTraceback",
        "multiprocessing.pool.IMapIterator",
        "multiprocessing.pool.ThreadPool",
        "multiprocessing.pool.RemoteTraceback"
    ],
    "multiprocessing.pool.RemoteTraceback": [],
    "multiprocessing.pool.ExceptionWithTraceback": [],
    "multiprocessing.pool.MaybeEncodingError": [],
    "multiprocessing.pool._PoolCache": [],
    "multiprocessing.pool.Pool": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "multiprocessing.pool.ApplyResult": [],
    "multiprocessing.pool.MapResult": [],
    "multiprocessing.pool.IMapIterator": [],
    "multiprocessing.pool.IMapUnorderedIterator": [],
    "multiprocessing.pool.ThreadPool": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.shared_memory": [
        "secrets",
        "multiprocessing.shared_memory.ShareableList",
        "mmap",
        "_posixshmem",
        "functools",
        "multiprocessing.shared_memory.SharedMemory",
        "struct",
        "os"
    ],
    "mmap": [],
    "secrets": [
        "binascii",
        "hmac",
        "random",
        "base64",
        "os"
    ],
    "_posixshmem": [],
    "multiprocessing.shared_memory.SharedMemory": [
        "<builtin>.property"
    ],
    "multiprocessing.shared_memory.ShareableList": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "multiprocessing.managers.Token": [],
    "multiprocessing.managers.RemoteError": [],
    "multiprocessing.managers.Server": [],
    "multiprocessing.managers.State": [],
    "multiprocessing.managers.BaseManager": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "multiprocessing.managers.ProcessLocalSet": [],
    "multiprocessing.managers.BaseProxy": [
        "<builtin>.staticmethod",
        "multiprocessing.util.ForkAwareThreadLock.__init__"
    ],
    "multiprocessing.util.ForkAwareThreadLock.__init__": [
        "multiprocessing.util.ForkAwareThreadLock._reset",
        "multiprocessing.util.register_after_fork"
    ],
    "multiprocessing.util.ForkAwareThreadLock._reset": [
        "_thread.allocate_lock"
    ],
    "multiprocessing.util.register_after_fork": [
        "<builtin>.next",
        "<builtin>.id"
    ],
    "multiprocessing.managers.Namespace": [],
    "multiprocessing.managers.Value": [
        "<builtin>.property"
    ],
    "multiprocessing.managers.IteratorProxy": [],
    "multiprocessing.managers.AcquirerProxy": [],
    "multiprocessing.managers.ConditionProxy": [],
    "multiprocessing.managers.EventProxy": [],
    "multiprocessing.managers.BarrierProxy": [
        "<builtin>.property"
    ],
    "multiprocessing.managers.NamespaceProxy": [],
    "multiprocessing.managers.ValueProxy": [
        "<builtin>.property"
    ],
    "multiprocessing.managers.MakeProxyType": [
        "<builtin>.tuple",
        "<builtin>.exec",
        "<builtin>.type"
    ],
    "multiprocessing.managers.ListProxy": [],
    "multiprocessing.managers.PoolProxy": [],
    "multiprocessing.managers.SyncManager": [],
    "multiprocessing.managers.BaseManager.register": [
        "<builtin>.list",
        "<map>.copy",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "multiprocessing.managers._SharedMemoryTracker": [],
    "multiprocessing.managers.SharedMemoryServer": [],
    "multiprocessing.managers.SharedMemoryManager": [],
    "multiprocessing.context.BaseContext.get_context": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.managers.BaseManager.start": [
        "multiprocessing.connection.Pipe",
        "<builtin>.TypeError",
        "multiprocessing.connection._ConnectionBase.recv",
        "<builtin>.callable",
        "multiprocessing.connection._ConnectionBase.close",
        "multiprocessing.util.Finalize.__init__",
        "<builtin>.type",
        "<builtin>.str"
    ],
    "multiprocessing.connection.Pipe": [
        "multiprocessing.connection.arbitrary_address"
    ],
    "multiprocessing.connection.arbitrary_address": [
        "<builtin>.next",
        "multiprocessing.util.get_temp_dir",
        "<builtin>.ValueError",
        "tempfile.mktemp"
    ],
    "multiprocessing.util.get_temp_dir": [
        "shutil",
        "tempfile",
        "tempfile.mkdtemp",
        "multiprocessing.util.info",
        "multiprocessing.util.Finalize.__init__",
        "<map>.get",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.process.current_process": [],
    "multiprocessing.util.info": [
        "logging.Logger.log"
    ],
    "multiprocessing.util.Finalize.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.next",
        "<builtin>.type",
        "_weakref.ref",
        "<builtin>.ValueError"
    ],
    "multiprocessing.connection._ConnectionBase.recv": [
        "multiprocessing.connection.Connection._recv_bytes",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "pickle._loads",
        "multiprocessing.connection._ConnectionBase._check_readable",
        "multiprocessing.connection.PipeConnection._recv_bytes"
    ],
    "multiprocessing.connection._ConnectionBase._check_closed": [
        "<builtin>.OSError"
    ],
    "multiprocessing.connection._ConnectionBase._check_readable": [
        "<builtin>.OSError"
    ],
    "multiprocessing.connection.PipeConnection._recv_bytes": [
        "<builtin>.min",
        "<builtin>.RuntimeError",
        "_io.BytesIO"
    ],
    "multiprocessing.connection._ConnectionBase.close": [
        "multiprocessing.connection.Connection._close",
        "multiprocessing.connection.PipeConnection._close"
    ],
    "multiprocessing.connection.PipeConnection._close": [],
    "multiprocessing.context.BaseContext.Pipe": [
        "multiprocessing.connection",
        "multiprocessing.connection.Pipe"
    ],
    "multiprocessing.synchronize": [
        "multiprocessing.synchronize.Event",
        "multiprocessing.process",
        "<builtin>.list",
        "threading",
        "multiprocessing.synchronize.Semaphore",
        "tempfile",
        "multiprocessing.synchronize.BoundedSemaphore",
        "multiprocessing.synchronize.Lock",
        "multiprocessing.synchronize.Condition",
        "multiprocessing.synchronize.Barrier",
        "<builtin>.ImportError",
        "_multiprocessing",
        "multiprocessing.util",
        "multiprocessing.context",
        "multiprocessing.synchronize.RLock",
        "multiprocessing.synchronize.SemLock",
        "<builtin>.range"
    ],
    "multiprocessing.context.BaseContext.Lock": [
        "multiprocessing.synchronize.Lock.__init__",
        "multiprocessing.synchronize",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.synchronize.SemLock": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.synchronize.Semaphore": [],
    "multiprocessing.synchronize.BoundedSemaphore": [],
    "multiprocessing.synchronize.Lock": [],
    "multiprocessing.synchronize.RLock": [],
    "multiprocessing.synchronize.Condition": [],
    "multiprocessing.synchronize.Event": [],
    "multiprocessing.synchronize.Barrier": [
        "<builtin>.property"
    ],
    "multiprocessing.synchronize.Lock.__init__": [
        "multiprocessing.synchronize.SemLock.__init__"
    ],
    "multiprocessing.synchronize.SemLock.__init__": [
        "multiprocessing.util.debug",
        "multiprocessing.synchronize.SemLock._make_name",
        "multiprocessing.synchronize.SemLock._make_methods",
        "multiprocessing.resource_tracker.ResourceTracker.register",
        "multiprocessing.context.DefaultContext.get_context",
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.resource_tracker",
        "multiprocessing.util.register_after_fork",
        "<builtin>.range",
        "multiprocessing.context.BaseContext.get_start_method"
    ],
    "multiprocessing.context.DefaultContext.get_context": [
        "<builtin>.super"
    ],
    "multiprocessing.context.BaseContext.get_start_method": [],
    "multiprocessing.synchronize.SemLock._make_name": [
        "<builtin>.next",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.synchronize.SemLock._make_methods": [],
    "multiprocessing.resource_tracker": [
        "threading",
        "warnings",
        "multiprocessing.resource_tracker.ResourceTracker",
        "_posixshmem",
        "multiprocessing.spawn",
        "multiprocessing.resource_tracker.ResourceTracker.__init__",
        "signal",
        "_multiprocessing",
        "<map>.update",
        "os",
        "multiprocessing.util",
        "<builtin>.hasattr"
    ],
    "multiprocessing.spawn": [
        "multiprocessing.process",
        "posixpath.join",
        "runpy",
        "types",
        "ntpath.join",
        "os",
        "multiprocessing.util",
        "multiprocessing.context",
        "<builtin>.getattr"
    ],
    "runpy": [
        "runpy._ModifiedArgv0",
        "pkgutil",
        "runpy._run_module_as_main",
        "<builtin>.print",
        "types",
        "importlib.util",
        "os",
        "<builtin>.len",
        "runpy._Error",
        "importlib.machinery",
        "io",
        "runpy._TempModule"
    ],
    "runpy._TempModule": [],
    "runpy._ModifiedArgv0": [],
    "runpy._Error": [],
    "runpy._run_module_as_main": [
        "runpy._run_code",
        "runpy._get_module_details",
        "runpy._get_main_module_details"
    ],
    "runpy._get_main_module_details": [
        "runpy._get_module_details",
        "<builtin>.str"
    ],
    "runpy._get_module_details": [
        "<str>.endswith",
        "<builtin>.format",
        "runpy._get_module_details",
        "warnings",
        "<str>.startswith",
        "<builtin>.__import__",
        "<builtin>.RuntimeWarning",
        "<builtin>.type",
        "<builtin>.hasattr",
        "warnings.warn",
        "<str>.rpartition"
    ],
    "<builtin>.RuntimeWarning": [],
    "runpy._run_code": [
        "<map>.update",
        "<builtin>.exec"
    ],
    "multiprocessing.resource_tracker.ResourceTracker": [],
    "multiprocessing.resource_tracker.ResourceTracker.__init__": [
        "_thread.allocate_lock"
    ],
    "multiprocessing.resource_tracker.ResourceTracker.register": [
        "multiprocessing.resource_tracker.ResourceTracker._send"
    ],
    "multiprocessing.resource_tracker.ResourceTracker._send": [
        "multiprocessing.resource_tracker.ResourceTracker.ensure_running",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "multiprocessing.resource_tracker.ResourceTracker.ensure_running": [],
    "multiprocessing.context.BaseContext.RLock": [
        "multiprocessing.synchronize.RLock.__init__",
        "multiprocessing.synchronize",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.synchronize.RLock.__init__": [
        "multiprocessing.synchronize.SemLock.__init__"
    ],
    "multiprocessing.context.BaseContext.Condition": [
        "multiprocessing.synchronize",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize.Condition.__init__"
    ],
    "multiprocessing.synchronize.Condition.__init__": [
        "multiprocessing.synchronize.Condition._make_methods",
        "multiprocessing.context.BaseContext.RLock",
        "multiprocessing.context.BaseContext.Semaphore"
    ],
    "multiprocessing.context.BaseContext.Semaphore": [
        "multiprocessing.synchronize",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize.Semaphore.__init__"
    ],
    "multiprocessing.synchronize.Semaphore.__init__": [
        "multiprocessing.synchronize.SemLock.__init__"
    ],
    "multiprocessing.synchronize.Condition._make_methods": [],
    "multiprocessing.context.BaseContext.BoundedSemaphore": [
        "multiprocessing.synchronize.BoundedSemaphore.__init__",
        "multiprocessing.synchronize",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.synchronize.BoundedSemaphore.__init__": [
        "multiprocessing.synchronize.SemLock.__init__"
    ],
    "multiprocessing.context.BaseContext.Event": [
        "multiprocessing.synchronize.Event.__init__",
        "multiprocessing.synchronize",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.synchronize.Event.__init__": [
        "multiprocessing.context.BaseContext.Condition",
        "multiprocessing.context.BaseContext.Lock",
        "multiprocessing.context.BaseContext.Semaphore"
    ],
    "multiprocessing.context.BaseContext.Barrier": [
        "multiprocessing.synchronize",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize.Barrier.__init__"
    ],
    "multiprocessing.synchronize.Barrier.__init__": [
        "multiprocessing.context.BaseContext.Condition",
        "multiprocessing.synchronize.Barrier.__setstate__",
        "multiprocessing.heap",
        "struct",
        "multiprocessing.heap.BufferWrapper.__init__"
    ],
    "multiprocessing.heap": [
        "multiprocessing.reduction.ForkingPickler.register",
        "multiprocessing.heap.Arena",
        "threading",
        "tempfile",
        "mmap",
        "collections",
        "multiprocessing.heap.BufferWrapper",
        "os",
        "multiprocessing.heap.Heap",
        "multiprocessing.util",
        "multiprocessing.context",
        "bisect"
    ],
    "multiprocessing.heap.Arena": [],
    "multiprocessing.heap.Heap": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.heap.BufferWrapper": [
        "multiprocessing.heap.Heap.__init__"
    ],
    "multiprocessing.heap.Heap.__init__": [
        "_thread.allocate_lock",
        "_collections.defaultdict"
    ],
    "multiprocessing.heap.BufferWrapper.__init__": [
        "multiprocessing.heap.Heap.malloc",
        "multiprocessing.util.Finalize.__init__",
        "<builtin>.OverflowError",
        "<builtin>.ValueError"
    ],
    "multiprocessing.heap.Heap.malloc": [
        "<builtin>.OverflowError",
        "<builtin>.ValueError",
        "multiprocessing.heap.Heap.__init__"
    ],
    "multiprocessing.synchronize.Barrier.__setstate__": [],
    "multiprocessing.context.BaseContext.Queue": [
        "multiprocessing.queues",
        "multiprocessing.queues.Queue.__init__",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.queues.Queue.__init__": [
        "multiprocessing.connection.Pipe",
        "multiprocessing.context.BaseContext.Lock",
        "multiprocessing.context.BaseContext.BoundedSemaphore",
        "multiprocessing.synchronize",
        "multiprocessing.util.register_after_fork",
        "multiprocessing.queues.Queue._after_fork"
    ],
    "multiprocessing.queues.Queue._after_fork": [
        "_thread.allocate_lock",
        "multiprocessing.util.debug",
        "threading.Condition.__init__",
        "_collections.deque"
    ],
    "multiprocessing.context.BaseContext.JoinableQueue": [
        "multiprocessing.queues",
        "multiprocessing.queues.JoinableQueue.__init__",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.queues.JoinableQueue.__init__": [
        "multiprocessing.context.BaseContext.Condition",
        "multiprocessing.queues.Queue.__init__",
        "multiprocessing.context.BaseContext.Semaphore"
    ],
    "multiprocessing.context.BaseContext.SimpleQueue": [
        "multiprocessing.queues",
        "multiprocessing.queues.SimpleQueue.__init__",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.queues.SimpleQueue.__init__": [
        "multiprocessing.connection.Pipe",
        "multiprocessing.context.BaseContext.Lock"
    ],
    "multiprocessing.context.BaseContext.Pool": [
        "multiprocessing.pool",
        "multiprocessing.pool.Pool.__init__",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.pool.Pool.__init__": [
        "multiprocessing.pool.ThreadPool._setup_queues",
        "multiprocessing.pool.Pool._get_sentinels",
        "get_context",
        "multiprocessing.pool._PoolCache.__init__",
        "<builtin>.TypeError",
        "multiprocessing.pool.Pool._repopulate_pool",
        "threading.Thread.__init__",
        "queue._PySimpleQueue.__init__",
        "<builtin>.callable",
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.pool.Pool._setup_queues",
        "multiprocessing.pool.ThreadPool._get_sentinels",
        "threading.Thread.start",
        "<builtin>.ValueError"
    ],
    "get_context": [],
    "multiprocessing.pool.Pool._setup_queues": [],
    "multiprocessing.pool._PoolCache.__init__": [
        "<builtin>.super"
    ],
    "multiprocessing.pool.Pool._repopulate_pool": [
        "multiprocessing.pool.Pool._repopulate_pool_static"
    ],
    "multiprocessing.pool.Pool._repopulate_pool_static": [
        "<builtin>.len",
        "multiprocessing.pool.ThreadPool.Process",
        "multiprocessing.pool.Pool.Process",
        "multiprocessing.util.debug",
        "multiprocessing.dummy.DummyProcess.start",
        "<list>.append",
        "<builtin>.range"
    ],
    "multiprocessing.pool.Pool.Process": [],
    "multiprocessing.pool.Pool._get_sentinels": [],
    "multiprocessing.sharedctypes": [
        "multiprocessing.sharedctypes.SynchronizedString",
        "multiprocessing.heap",
        "weakref.WeakKeyDictionary.__init__",
        "multiprocessing.sharedctypes.SynchronizedArray",
        "multiprocessing.sharedctypes.SynchronizedBase",
        "multiprocessing.context",
        "weakref",
        "multiprocessing.sharedctypes.Synchronized",
        "ctypes"
    ],
    "multiprocessing.context.BaseContext.RawValue": [
        "multiprocessing.sharedctypes.RawValue",
        "multiprocessing.sharedctypes"
    ],
    "multiprocessing.sharedctypes.SynchronizedBase": [],
    "multiprocessing.sharedctypes.Synchronized": [
        "multiprocessing.sharedctypes.make_property"
    ],
    "multiprocessing.sharedctypes.make_property": [
        "<builtin>.exec"
    ],
    "multiprocessing.sharedctypes.SynchronizedArray": [],
    "multiprocessing.sharedctypes.SynchronizedString": [
        "multiprocessing.sharedctypes.make_property"
    ],
    "multiprocessing.sharedctypes.RawValue": [
        "<map>.__init__",
        "<map>.get",
        "multiprocessing.sharedctypes._new_value"
    ],
    "multiprocessing.sharedctypes._new_value": [
        "multiprocessing.sharedctypes.rebuild_ctype",
        "multiprocessing.heap.BufferWrapper.__init__"
    ],
    "multiprocessing.sharedctypes.rebuild_ctype": [
        "multiprocessing.reduction.ForkingPickler.register",
        "multiprocessing.heap.BufferWrapper.create_memoryview"
    ],
    "multiprocessing.heap.BufferWrapper.create_memoryview": [
        "<builtin>.memoryview"
    ],
    "<map>.__init__": [],
    "multiprocessing.context.BaseContext.RawArray": [
        "multiprocessing.sharedctypes.RawArray",
        "multiprocessing.sharedctypes"
    ],
    "multiprocessing.sharedctypes.RawArray": [
        "<builtin>.isinstance",
        "<map>.get",
        "<builtin>.len",
        "<map>.__init__",
        "multiprocessing.sharedctypes._new_value"
    ],
    "multiprocessing.context.BaseContext.Value": [
        "multiprocessing.sharedctypes.Value",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.sharedctypes"
    ],
    "multiprocessing.sharedctypes.Value": [
        "multiprocessing.sharedctypes.synchronized",
        "multiprocessing.sharedctypes.RawValue",
        "multiprocessing.context.BaseContext.RLock",
        "get_context",
        "<builtin>.AttributeError",
        "<builtin>.hasattr"
    ],
    "multiprocessing.sharedctypes.synchronized": [
        "multiprocessing.sharedctypes.make_property",
        "<builtin>.isinstance",
        "<builtin>.type",
        "get_context"
    ],
    "multiprocessing.context.BaseContext.Array": [
        "multiprocessing.sharedctypes.Array",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.sharedctypes"
    ],
    "multiprocessing.sharedctypes.Array": [
        "multiprocessing.sharedctypes.synchronized",
        "multiprocessing.context.BaseContext.RLock",
        "get_context",
        "multiprocessing.sharedctypes.RawArray",
        "<builtin>.AttributeError",
        "<builtin>.hasattr"
    ],
    "multiprocessing.context.BaseContext.freeze_support": [
        "multiprocessing.spawn.freeze_support",
        "multiprocessing.spawn",
        "<builtin>.getattr"
    ],
    "multiprocessing.spawn.freeze_support": [
        "multiprocessing.spawn.spawn_main",
        "<builtin>.int",
        "multiprocessing.spawn.is_forking"
    ],
    "multiprocessing.spawn.is_forking": [
        "<builtin>.len"
    ],
    "multiprocessing.spawn.spawn_main": [
        "multiprocessing.spawn._main",
        "multiprocessing.resource_tracker",
        "multiprocessing.reduction.duplicate",
        "multiprocessing.spawn.is_forking"
    ],
    "multiprocessing.reduction.duplicate": [],
    "multiprocessing.spawn._main": [
        "multiprocessing.spawn.prepare",
        "pickle._load",
        "os.fdopen",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.spawn.prepare": [
        "multiprocessing.spawn._fixup_main_from_path",
        "multiprocessing.spawn._fixup_main_from_name",
        "multiprocessing.util.get_logger",
        "multiprocessing.util.log_to_stderr",
        "set_start_method",
        "multiprocessing.process.current_process",
        "logging.Logger.setLevel"
    ],
    "multiprocessing.util.log_to_stderr": [
        "logging.Handler.setFormatter",
        "multiprocessing.util.get_logger",
        "logging",
        "logging.StreamHandler.__init__",
        "logging.Logger.addHandler",
        "logging.Logger.setLevel",
        "logging.Formatter.__init__"
    ],
    "multiprocessing.util.get_logger": [
        "<builtin>.hasattr",
        "logging.getLogger",
        "logging._acquireLock",
        "logging"
    ],
    "set_start_method": [],
    "multiprocessing.spawn._fixup_main_from_path": [
        "posixpath.splitext",
        "runpy.run_path",
        "ntpath.splitext",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "runpy.run_path": [
        "pkgutil.get_importer",
        "<builtin>.isinstance",
        "runpy._TempModule.__enter__",
        "runpy._run_module_code",
        "runpy._get_code_from_file",
        "runpy._TempModule.__init__",
        "<builtin>.type",
        "runpy._get_main_module_details",
        "runpy._TempModule.__exit__",
        "runpy._ModifiedArgv0.__init__",
        "<str>.rpartition"
    ],
    "runpy._TempModule.__init__": [],
    "runpy._TempModule.__enter__": [
        "<list>.append"
    ],
    "runpy._TempModule.__exit__": [],
    "runpy._ModifiedArgv0.__init__": [
        "<builtin>.object"
    ],
    "runpy._get_code_from_file": [
        "<builtin>.compile",
        "_io.open_code",
        "posixpath.abspath",
        "ntpath.abspath",
        "pkgutil.read_code"
    ],
    "_io.open_code": [],
    "runpy._run_module_code": [
        "runpy._TempModule.__exit__",
        "runpy._TempModule.__init__",
        "runpy._ModifiedArgv0.__init__",
        "runpy._TempModule.__enter__"
    ],
    "multiprocessing.spawn._fixup_main_from_name": [
        "runpy.run_module",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "runpy.run_module": [
        "runpy._run_code",
        "runpy._get_module_details",
        "runpy._run_module_code"
    ],
    "multiprocessing.context.BaseContext.get_logger": [
        "multiprocessing.util.get_logger",
        "multiprocessing.util"
    ],
    "multiprocessing.context.BaseContext.log_to_stderr": [
        "multiprocessing.util.log_to_stderr",
        "multiprocessing.util"
    ],
    "multiprocessing.context.BaseContext.allow_connection_pickling": [
        "multiprocessing.connection"
    ],
    "multiprocessing.context.BaseContext.set_executable": [
        "multiprocessing.spawn.set_executable",
        "multiprocessing.spawn"
    ],
    "multiprocessing.spawn.set_executable": [],
    "multiprocessing.forkserver": [
        "multiprocessing.connection",
        "multiprocessing.process",
        "multiprocessing.context",
        "threading",
        "warnings",
        "multiprocessing.spawn",
        "struct",
        "signal",
        "multiprocessing.forkserver.ForkServer",
        "multiprocessing.forkserver.ForkServer.__init__",
        "socket",
        "os",
        "multiprocessing.resource_tracker",
        "selectors",
        "multiprocessing.util"
    ],
    "multiprocessing.context.BaseContext.set_forkserver_preload": [
        "multiprocessing.forkserver",
        "multiprocessing.forkserver.ForkServer.set_forkserver_preload"
    ],
    "multiprocessing.forkserver.ForkServer": [],
    "multiprocessing.forkserver.ForkServer.__init__": [
        "_thread.allocate_lock"
    ],
    "multiprocessing.forkserver.ForkServer.set_forkserver_preload": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.all"
    ],
    "multiprocessing.context.BaseContext.set_start_method": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.context.BaseContext.reducer": [
        "<builtin>.globals"
    ],
    "multiprocessing.context.Process._Popen": [
        "multiprocessing.context.DefaultContext.get_context"
    ],
    "multiprocessing.context.DefaultContext.set_start_method": [
        "multiprocessing.context.DefaultContext.get_context",
        "<builtin>.RuntimeError"
    ],
    "multiprocessing.popen_spawn_win32": [
        "multiprocessing.popen_spawn_win32.Popen",
        "multiprocessing.spawn",
        "signal",
        "multiprocessing.popen_spawn_win32._path_eq",
        "os",
        "multiprocessing.util",
        "multiprocessing.context",
        "<builtin>.getattr"
    ],
    "multiprocessing.context.SpawnProcess._Popen": [
        "multiprocessing.popen_spawn_win32.Popen.__init__",
        "multiprocessing.popen_spawn_win32"
    ],
    "multiprocessing.popen_spawn_win32._path_eq": [
        "posixpath.normcase",
        "ntpath.normcase"
    ],
    "multiprocessing.popen_spawn_win32.Popen": [],
    "multiprocessing.popen_spawn_win32.Popen.__init__": [
        "<builtin>.int",
        "multiprocessing.spawn.get_preparation_data",
        "multiprocessing.popen_spawn_win32._path_eq",
        "multiprocessing.reduction.dump",
        "multiprocessing.util.Finalize.__init__",
        "<builtin>.open",
        "multiprocessing.spawn.get_executable",
        "os._Environ.copy",
        "multiprocessing.spawn.get_command_line",
        "multiprocessing.context.set_spawning_popen"
    ],
    "multiprocessing.spawn.get_preparation_data": [
        "<builtin>.dict",
        "<map>.copy",
        "posixpath.normpath",
        "posixpath.join",
        "logging.Logger.getEffectiveLevel",
        "multiprocessing.spawn._check_not_importing_main",
        "ntpath.join",
        "ntpath.normpath",
        "<builtin>.getattr",
        "multiprocessing.process.current_process",
        "posixpath.isabs",
        "os._Environ.copy",
        "ntpath.isabs",
        "get_start_method"
    ],
    "multiprocessing.spawn._check_not_importing_main": [
        "<builtin>.RuntimeError",
        "<builtin>.getattr",
        "multiprocessing.process.current_process"
    ],
    "get_start_method": [],
    "multiprocessing.spawn.get_command_line": [
        "subprocess._args_from_interpreter_flags",
        "<builtin>.getattr"
    ],
    "multiprocessing.spawn.get_executable": [],
    "multiprocessing.context.set_spawning_popen": [],
    "multiprocessing.reduction.dump": [
        "pickle._Pickler.dump",
        "multiprocessing.reduction.ForkingPickler.__init__"
    ],
    "multiprocessing.reduction.ForkingPickler.__init__": [
        "<map>.update",
        "<builtin>.super",
        "<map>.copy"
    ],
    "multiprocessing.popen_fork": [
        "signal",
        "os",
        "multiprocessing.popen_fork.Popen",
        "multiprocessing.util"
    ],
    "multiprocessing.context.ForkProcess._Popen": [
        "multiprocessing.popen_fork",
        "multiprocessing.popen_fork.Popen.__init__"
    ],
    "multiprocessing.popen_fork.Popen": [],
    "multiprocessing.popen_fork.Popen.__init__": [
        "multiprocessing.util._flush_std_streams",
        "multiprocessing.popen_forkserver.Popen._launch",
        "multiprocessing.popen_fork.Popen._launch"
    ],
    "multiprocessing.util._flush_std_streams": [
        "rich.file_proxy.FileProxy.flush"
    ],
    "multiprocessing.popen_fork.Popen._launch": [
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.popen_forkserver": [
        "multiprocessing.forkserver",
        "multiprocessing.spawn",
        "<builtin>.ImportError",
        "multiprocessing.popen_forkserver.Popen",
        "os",
        "multiprocessing.util",
        "multiprocessing.context",
        "multiprocessing.popen_forkserver._DupFd",
        "multiprocessing.popen_fork",
        "io"
    ],
    "multiprocessing.context.ForkServerProcess._Popen": [
        "multiprocessing.popen_forkserver",
        "multiprocessing.popen_forkserver.Popen.__init__"
    ],
    "multiprocessing.popen_forkserver._DupFd": [],
    "multiprocessing.popen_forkserver.Popen": [],
    "multiprocessing.popen_forkserver.Popen.__init__": [
        "<builtin>.super"
    ],
    "multiprocessing.context.ForkServerContext._check_available": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.context.get_spawning_popen": [
        "<builtin>.getattr"
    ],
    "multiprocessing.context.assert_spawning": [
        "multiprocessing.context.get_spawning_popen",
        "<builtin>.RuntimeError",
        "<builtin>.type"
    ],
    "multiprocessing.process.active_children": [
        "<builtin>.list",
        "multiprocessing.process._cleanup"
    ],
    "multiprocessing.process._cleanup": [
        "<builtin>.list"
    ],
    "multiprocessing.process.BaseProcess.__init__": [
        "<builtin>.dict",
        "<map>.copy",
        "<builtin>.next",
        "_weakrefset.WeakSet.add",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.str"
    ],
    "multiprocessing.process.BaseProcess._check_closed": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.process.BaseProcess.start": [
        "multiprocessing.process.BaseProcess._Popen",
        "multiprocessing.process.BaseProcess._check_closed",
        "<map>.get",
        "multiprocessing.process._cleanup"
    ],
    "multiprocessing.process.BaseProcess._Popen": [],
    "multiprocessing.process.BaseProcess.terminate": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.kill": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.join": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.is_alive": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.close": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.process.BaseProcess.daemon": [
        "<map>.get"
    ],
    "multiprocessing.process.BaseProcess.exitcode": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.ident": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.sentinel": [
        "multiprocessing.process.BaseProcess._check_closed",
        "<builtin>.ValueError"
    ],
    "multiprocessing.process.BaseProcess.__repr__": [
        "<map>.get",
        "<list>.append"
    ],
    "multiprocessing.process.BaseProcess._bootstrap": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "multiprocessing.util.info",
        "multiprocessing.util._run_after_forkers",
        "traceback",
        "multiprocessing.util",
        "rich.file_proxy.FileProxy.write",
        "threading.main_thread",
        "<builtin>.set",
        "codecs.StreamRecoder.write",
        "multiprocessing.process.BaseProcess.run",
        "multiprocessing.util._close_stdin",
        "multiprocessing.process._ParentProcess.__init__",
        "click._winconsole.ConsoleStream.write",
        "multiprocessing.context._force_start_method",
        "threading.Thread._set_native_id",
        "<map>.clear",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "multiprocessing.context",
        "traceback.print_exc"
    ],
    "multiprocessing.context._force_start_method": [],
    "multiprocessing.util._close_stdin": [
        "<builtin>.open"
    ],
    "multiprocessing.process._ParentProcess.__init__": [],
    "multiprocessing.util._run_after_forkers": [
        "multiprocessing.util.info",
        "weakref.WeakValueDictionary.items",
        "<builtin>.list"
    ],
    "multiprocessing.process.BaseProcess.run": [],
    "multiprocessing.process.AuthenticationString.__reduce__": [
        "multiprocessing.context.get_spawning_popen",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "multiprocessing.context"
    ],
    "multiprocessing.process._ParentProcess.is_alive": [
        "multiprocessing.connection",
        "multiprocessing.connection.wait"
    ],
    "multiprocessing.process._ParentProcess.join": [
        "multiprocessing.connection",
        "multiprocessing.connection.wait"
    ],
    "multiprocessing.reduction.ForkingPickler.dumps": [
        "pickle._Pickler.dump",
        "multiprocessing.reduction.ForkingPickler.__init__",
        "_io.BytesIO"
    ],
    "multiprocessing.reduction.sendfds": [
        "<builtin>.RuntimeError",
        "<builtin>.bytes"
    ],
    "multiprocessing.reduction.recvfds": [
        "<builtin>.AssertionError",
        "<builtin>.RuntimeError",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "multiprocessing.reduction.send_handle": [
        "multiprocessing.reduction.sendfds",
        "socket.fromfd"
    ],
    "multiprocessing.reduction.recv_handle": [
        "socket.fromfd",
        "multiprocessing.reduction.recvfds"
    ],
    "multiprocessing.reduction.DupFd": [
        "multiprocessing.context.get_spawning_popen",
        "multiprocessing.resource_sharer",
        "multiprocessing.resource_sharer.DupFd.__init__",
        "<builtin>.ValueError"
    ],
    "multiprocessing.resource_sharer": [
        "multiprocessing.resource_sharer.DupSocket",
        "multiprocessing.process",
        "multiprocessing.resource_sharer.DupFd",
        "threading",
        "multiprocessing.resource_sharer._ResourceSharer.__init__",
        "signal",
        "socket",
        "os",
        "multiprocessing.util",
        "multiprocessing.context",
        "multiprocessing.resource_sharer._ResourceSharer"
    ],
    "multiprocessing.resource_sharer.DupFd": [],
    "multiprocessing.resource_sharer.DupSocket": [],
    "multiprocessing.resource_sharer._ResourceSharer": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.__init__": [
        "_thread.allocate_lock",
        "multiprocessing.util.register_after_fork"
    ],
    "multiprocessing.resource_sharer.DupFd.__init__": [
        "multiprocessing.resource_sharer._ResourceSharer.register"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.register": [],
    "multiprocessing.reduction._reduce_socket": [
        "multiprocessing.reduction.DupFd"
    ],
    "multiprocessing.reduction._rebuild_socket": [
        "socket.socket.__init__"
    ],
    "multiprocessing.reduction.AbstractReducer.__init__": [
        "multiprocessing.reduction.ForkingPickler.register",
        "<builtin>.type"
    ],
    "multiprocessing.connection._validate_family": [
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "multiprocessing.connection.address_type": [
        "multiprocessing.util.is_abstract_socket_namespace",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "multiprocessing.util.is_abstract_socket_namespace": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "multiprocessing.connection._ConnectionBase.__init__": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.connection._ConnectionBase.__del__": [
        "multiprocessing.connection.Connection._close",
        "multiprocessing.connection.PipeConnection._close"
    ],
    "multiprocessing.connection._ConnectionBase._check_writable": [
        "<builtin>.OSError"
    ],
    "multiprocessing.connection._ConnectionBase._bad_message_length": [
        "<builtin>.OSError",
        "multiprocessing.connection._ConnectionBase.close"
    ],
    "multiprocessing.connection._ConnectionBase.fileno": [
        "multiprocessing.connection._ConnectionBase._check_closed"
    ],
    "multiprocessing.connection._ConnectionBase.send_bytes": [
        "multiprocessing.connection._ConnectionBase._check_writable",
        "<builtin>.memoryview",
        "<builtin>.bytes",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "multiprocessing.connection.Connection._send_bytes",
        "<builtin>.len",
        "<builtin>.ValueError",
        "multiprocessing.connection.PipeConnection._send_bytes"
    ],
    "multiprocessing.connection.PipeConnection._send_bytes": [
        "<builtin>.len"
    ],
    "multiprocessing.connection._ConnectionBase.send": [
        "multiprocessing.connection._ConnectionBase._check_writable",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "multiprocessing.reduction.ForkingPickler.dumps",
        "multiprocessing.connection.Connection._send_bytes",
        "multiprocessing.connection.PipeConnection._send_bytes"
    ],
    "multiprocessing.connection._ConnectionBase.recv_bytes": [
        "multiprocessing.connection.Connection._recv_bytes",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "multiprocessing.connection._ConnectionBase._bad_message_length",
        "multiprocessing.connection._ConnectionBase._check_readable",
        "multiprocessing.connection.PipeConnection._recv_bytes",
        "<builtin>.ValueError"
    ],
    "multiprocessing.connection._ConnectionBase.recv_bytes_into": [
        "multiprocessing.connection.Connection._recv_bytes",
        "<builtin>.memoryview",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "BufferTooShort",
        "<builtin>.len",
        "multiprocessing.connection._ConnectionBase._check_readable",
        "multiprocessing.connection.PipeConnection._recv_bytes",
        "<builtin>.ValueError"
    ],
    "BufferTooShort": [],
    "multiprocessing.connection._ConnectionBase.poll": [
        "multiprocessing.connection._ConnectionBase._check_closed",
        "multiprocessing.connection.Connection._poll",
        "multiprocessing.connection._ConnectionBase._check_readable",
        "multiprocessing.connection.PipeConnection._poll"
    ],
    "multiprocessing.connection.PipeConnection._poll": [
        "multiprocessing.connection.wait",
        "<builtin>.bool"
    ],
    "multiprocessing.connection._ConnectionBase.__exit__": [
        "multiprocessing.connection._ConnectionBase.close"
    ],
    "multiprocessing.connection.PipeConnection._get_more_data": [
        "_io.BytesIO",
        "multiprocessing.connection._ConnectionBase._bad_message_length",
        "<builtin>.len"
    ],
    "multiprocessing.connection.Connection._send": [
        "<builtin>.len"
    ],
    "multiprocessing.connection.Connection._recv": [
        "<builtin>.OSError",
        "_io.BytesIO",
        "<builtin>.len"
    ],
    "multiprocessing.connection.Connection._send_bytes": [
        "multiprocessing.connection.Connection._send",
        "<builtin>.len"
    ],
    "multiprocessing.connection.Connection._recv_bytes": [
        "multiprocessing.connection.Connection._recv"
    ],
    "multiprocessing.connection.Connection._poll": [
        "multiprocessing.connection.wait",
        "<builtin>.bool"
    ],
    "multiprocessing.connection.Listener.__init__": [
        "multiprocessing.connection._validate_family",
        "multiprocessing.connection.address_type",
        "multiprocessing.connection.arbitrary_address",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "multiprocessing.connection.PipeListener.__init__",
        "multiprocessing.connection.SocketListener.__init__"
    ],
    "multiprocessing.connection.SocketListener.__init__": [
        "multiprocessing.util.is_abstract_socket_namespace",
        "multiprocessing.util.Finalize.__init__",
        "<builtin>.getattr",
        "socket.socket.close",
        "socket.socket.__init__"
    ],
    "multiprocessing.connection.PipeListener.__init__": [
        "multiprocessing.util.sub_debug",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.util.sub_debug": [
        "logging.Logger.log"
    ],
    "multiprocessing.connection.Listener.accept": [
        "multiprocessing.connection.deliver_challenge",
        "multiprocessing.connection.answer_challenge",
        "multiprocessing.connection.SocketListener.accept",
        "multiprocessing.connection.PipeListener.accept",
        "<builtin>.OSError"
    ],
    "multiprocessing.connection.PipeListener.accept": [
        "<list>.pop",
        "<list>.append"
    ],
    "multiprocessing.connection.SocketListener.accept": [
        "socket.socket.detach",
        "socket.socket.accept"
    ],
    "multiprocessing.connection.deliver_challenge": [
        "hmac.new",
        "<builtin>.isinstance",
        "hmac",
        "AuthenticationError",
        "hmac.HMAC.digest",
        "<builtin>.type",
        "multiprocessing.connection._ConnectionBase.send_bytes",
        "multiprocessing.connection._ConnectionBase.recv_bytes",
        "<builtin>.ValueError"
    ],
    "AuthenticationError": [],
    "multiprocessing.connection.answer_challenge": [
        "hmac.new",
        "<builtin>.isinstance",
        "hmac",
        "AuthenticationError",
        "hmac.HMAC.digest",
        "multiprocessing.connection._ConnectionBase.send_bytes",
        "<builtin>.type",
        "<builtin>.len",
        "multiprocessing.connection._ConnectionBase.recv_bytes",
        "<builtin>.ValueError"
    ],
    "multiprocessing.connection.Listener.close": [
        "multiprocessing.connection.SocketListener.close",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.connection.SocketListener.close": [
        "socket.socket.close"
    ],
    "multiprocessing.connection.Listener.__exit__": [
        "multiprocessing.connection.Listener.close"
    ],
    "multiprocessing.connection.Client": [
        "multiprocessing.connection._validate_family",
        "multiprocessing.connection.address_type",
        "multiprocessing.connection.deliver_challenge",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "multiprocessing.connection.SocketClient",
        "multiprocessing.connection.PipeClient",
        "multiprocessing.connection.answer_challenge"
    ],
    "multiprocessing.connection.SocketClient": [
        "multiprocessing.connection.address_type",
        "socket.socket.__init__",
        "<builtin>.getattr"
    ],
    "multiprocessing.connection.PipeClient": [
        "multiprocessing.connection._check_timeout",
        "multiprocessing.connection._init_timeout"
    ],
    "multiprocessing.connection._init_timeout": [],
    "multiprocessing.connection._check_timeout": [],
    "multiprocessing.connection.PipeListener._finalize_pipe_listener": [
        "multiprocessing.util.sub_debug"
    ],
    "multiprocessing.connection.ConnectionWrapper.__init__": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "xmlrpc.client": [
        "datetime",
        "xmlrpc.client.ServerProxy",
        "xmlrpc.client.Fault",
        "<builtin>.print",
        "xmlrpc.client.Error",
        "decimal",
        "xmlrpc.client.GzipDecodedResponse",
        "xmlrpc.client.DateTime",
        "xmlrpc.client._MultiCallMethod",
        "urllib.parse",
        "xmlrpc.client.ExpatParser",
        "xmlrpc.client.ServerProxy.__init__",
        "xmlrpc.client.MultiCall",
        "base64",
        "xmlrpc.client.Marshaller",
        "xmlrpc.client.Binary",
        "xmlrpc.client.Transport",
        "xmlrpc.client.ResponseError",
        "xmlrpc.client.SafeTransport",
        "io",
        "gzip",
        "xmlrpc.client.Unmarshaller",
        "xmlrpc.client.MultiCall.__init__",
        "xmlrpc.client.MultiCallIterator",
        "xmlrpc.client._Method",
        "xmlrpc.client.ProtocolError",
        "http.client",
        "xml.parsers.expat"
    ],
    "multiprocessing.connection.XmlListener.accept": [
        "multiprocessing.connection.ConnectionWrapper.__init__",
        "xmlrpc.client",
        "multiprocessing.connection.Listener.accept"
    ],
    "xmlrpc.client.Error": [],
    "xmlrpc.client.ProtocolError": [],
    "xmlrpc.client.ResponseError": [],
    "xmlrpc.client.Fault": [],
    "xmlrpc.client.DateTime": [],
    "xmlrpc.client.Binary": [],
    "xmlrpc.client.ExpatParser": [],
    "xmlrpc.client.Marshaller": [
        "<builtin>.type"
    ],
    "xmlrpc.client.Unmarshaller": [],
    "xmlrpc.client._MultiCallMethod": [],
    "xmlrpc.client.MultiCallIterator": [],
    "xmlrpc.client.MultiCall": [],
    "xmlrpc.client.GzipDecodedResponse": [],
    "xmlrpc.client._Method": [],
    "xmlrpc.client.Transport": [],
    "xmlrpc.client.SafeTransport": [],
    "xmlrpc.client.ServerProxy": [],
    "xmlrpc.client.ServerProxy.__init__": [
        "<builtin>.OSError",
        "xmlrpc.client.Transport.__init__",
        "xmlrpc.client.SafeTransport.__init__"
    ],
    "xmlrpc.client.SafeTransport.__init__": [
        "<builtin>.super"
    ],
    "xmlrpc.client.Transport.__init__": [
        "<builtin>.list"
    ],
    "xmlrpc.client.MultiCall.__init__": [],
    "multiprocessing.connection.XmlClient": [
        "multiprocessing.connection.ConnectionWrapper.__init__",
        "multiprocessing.connection.Client",
        "xmlrpc.client"
    ],
    "multiprocessing.connection._exhaustive_wait": [
        "<list>.append",
        "<builtin>.RuntimeError",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "multiprocessing.connection.reduce_connection": [
        "multiprocessing.reduction.DupFd"
    ],
    "multiprocessing.connection.reduce_pipe_connection": [
        "multiprocessing.reduction.DupHandle.__init__"
    ],
    "multiprocessing.reduction.DupHandle.__init__": [],
    "multiprocessing.util.sub_warning": [
        "logging.Logger.log"
    ],
    "multiprocessing.util._remove_temp_dir": [
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.util.Finalize.__call__": [
        "multiprocessing.util.sub_debug"
    ],
    "multiprocessing.util.Finalize.__repr__": [
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "multiprocessing.util._run_finalizers": [
        "<builtin>.list",
        "<map>",
        "multiprocessing.util._run_finalizers.<lambda1>",
        "multiprocessing.util.sub_debug",
        "<map>.clear",
        "traceback",
        "<map>.get",
        "traceback.print_exc"
    ],
    "multiprocessing.util._run_finalizers.<lambda1>": [],
    "multiprocessing.util._exit_function": [
        "multiprocessing.process.active_children",
        "multiprocessing.util.info",
        "multiprocessing.util.debug",
        "multiprocessing.util._run_finalizers",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.util.ForkAwareLocal.__init__": [
        "multiprocessing.util.register_after_fork"
    ],
    "multiprocessing.util.ForkAwareLocal.__reduce__": [
        "<builtin>.type"
    ],
    "multiprocessing.util.close_all_fds_except": [
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "multiprocessing.util.spawnv_passfds": [
        "<builtin>.tuple",
        "_posixsubprocess",
        "<builtin>.map",
        "<builtin>.sorted"
    ],
    "test": [],
    "multiprocessing.util._cleanup_tests": [
        "test",
        "multiprocessing.forkserver.ForkServer._stop",
        "multiprocessing.forkserver",
        "multiprocessing.util._run_finalizers",
        "multiprocessing.resource_tracker",
        "multiprocessing.process._cleanup",
        "multiprocessing.resource_tracker.ResourceTracker._stop"
    ],
    "multiprocessing.forkserver.ForkServer._stop": [],
    "multiprocessing.resource_tracker.ResourceTracker._stop": [],
    "multiprocessing.queues.Queue.__getstate__": [
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.queues.Queue.__setstate__": [
        "multiprocessing.queues.Queue._after_fork"
    ],
    "multiprocessing.queues.Queue.put": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.queues.Queue.get": [
        "multiprocessing.connection._ConnectionBase.recv_bytes",
        "pickle._loads",
        "<builtin>.ValueError",
        "multiprocessing.connection._ConnectionBase.poll"
    ],
    "multiprocessing.queues.Queue.empty": [
        "multiprocessing.connection._ConnectionBase.poll"
    ],
    "multiprocessing.queues.Queue.get_nowait": [
        "multiprocessing.queues.Queue.get"
    ],
    "multiprocessing.queues.Queue.put_nowait": [
        "multiprocessing.queues.JoinableQueue.put",
        "multiprocessing.queues.Queue.put"
    ],
    "multiprocessing.queues.Queue.cancel_join_thread": [
        "multiprocessing.util.debug",
        "multiprocessing.util.Finalize.cancel"
    ],
    "multiprocessing.queues.Queue._start_thread": [
        "multiprocessing.util.debug",
        "multiprocessing.util.Finalize.__init__",
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "multiprocessing.queues.Queue._finalize_join": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.queues.Queue._finalize_close": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.queues.Queue._feed": [
        "multiprocessing.util.is_exiting",
        "multiprocessing.util.debug",
        "multiprocessing.util.info",
        "multiprocessing.reduction.ForkingPickler.dumps",
        "<builtin>.getattr"
    ],
    "multiprocessing.util.is_exiting": [],
    "multiprocessing.queues.Queue._on_queue_feeder_error": [
        "traceback",
        "traceback.print_exc"
    ],
    "multiprocessing.queues.JoinableQueue.__getstate__": [
        "multiprocessing.queues.Queue.__getstate__"
    ],
    "multiprocessing.queues.JoinableQueue.__setstate__": [
        "multiprocessing.queues.Queue.__setstate__"
    ],
    "multiprocessing.queues.JoinableQueue.put": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.queues.SimpleQueue.empty": [
        "multiprocessing.connection._ConnectionBase.poll"
    ],
    "multiprocessing.queues.SimpleQueue.__getstate__": [
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.queues.SimpleQueue.get": [
        "pickle._loads"
    ],
    "multiprocessing.queues.SimpleQueue.put": [
        "multiprocessing.reduction.ForkingPickler.dumps"
    ],
    "concurrent.futures.thread._python_exit": [
        "weakref.WeakKeyDictionary.items",
        "<builtin>.list"
    ],
    "concurrent.futures.thread._worker": [
        "logging.Logger.critical"
    ],
    "concurrent.futures.thread.ThreadPoolExecutor.__init__": [
        "<builtin>.set",
        "<builtin>.TypeError",
        "queue._PySimpleQueue.__init__",
        "<builtin>.callable",
        "_thread.allocate_lock",
        "threading.Semaphore.__init__",
        "<builtin>.min",
        "<builtin>.ValueError"
    ],
    "concurrent.futures.thread.ThreadPoolExecutor.submit": [
        "warnings",
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.len"
    ],
    "concurrent.futures.thread.ThreadPoolExecutor._adjust_thread_count": [
        "threading.Semaphore.acquire",
        "_weakref.ref",
        "<builtin>.len",
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "uuid.UUID.__eq__": [
        "<builtin>.isinstance"
    ],
    "uuid.UUID.__lt__": [
        "<builtin>.isinstance"
    ],
    "uuid.UUID.__gt__": [
        "<builtin>.isinstance"
    ],
    "uuid.UUID.__le__": [
        "<builtin>.isinstance"
    ],
    "uuid.UUID.__ge__": [
        "<builtin>.isinstance"
    ],
    "uuid.UUID.__hash__": [
        "<builtin>.hash"
    ],
    "uuid.UUID.__repr__": [
        "<builtin>.str"
    ],
    "uuid.UUID.__setattr__": [
        "<builtin>.TypeError"
    ],
    "uuid.UUID.urn": [
        "<builtin>.str"
    ],
    "uuid.UUID.version": [
        "<builtin>.int"
    ],
    "uuid._popen": [
        "<builtin>.dict",
        "shutil.which",
        "shutil",
        "subprocess.Popen.__init__",
        "os",
        "subprocess"
    ],
    "uuid._find_mac": [
        "uuid._popen"
    ],
    "uuid._ifconfig_getnode": [
        "uuid._find_mac"
    ],
    "uuid._ip_getnode": [
        "uuid._find_mac"
    ],
    "uuid._arp_getnode": [
        "socket",
        "os",
        "uuid._find_mac"
    ],
    "uuid._lanscan_getnode": [
        "uuid._find_mac"
    ],
    "uuid._netstat_getnode": [
        "uuid._popen"
    ],
    "uuid._ipconfig_getnode": [
        "ctypes.create_string_buffer",
        "subprocess.Popen.__init__",
        "subprocess",
        "os",
        "re",
        "<list>.insert",
        "ctypes"
    ],
    "uuid._netbios_getnode": [
        "<str>.ljust",
        "uuid._is_universal",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.range"
    ],
    "uuid._is_universal": [],
    "uuid._load_system_functions": [
        "ctypes.util.find_library",
        "<builtin>.int",
        "warnings",
        "ctypes.CDLL.__init__",
        "ctypes.util",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<list>.append",
        "ctypes",
        "warnings.warn"
    ],
    "ctypes.util": [
        "shutil",
        "ctypes._aix",
        "tempfile",
        "os",
        "re",
        "subprocess",
        "ctypes.macholib.dyld",
        "ctypes.util.test"
    ],
    "ctypes._aix": [
        "posixpath",
        "subprocess",
        "os",
        "re",
        "ctypes"
    ],
    "ctypes.macholib.dyld": [
        "ctypes.macholib.dylib",
        "ctypes.macholib.framework",
        "os",
        "ctypes.macholib.dyld.test_dyld_find"
    ],
    "ctypes.macholib.framework": [
        "re.compile",
        "ctypes.macholib.framework.test_framework_info",
        "re"
    ],
    "ctypes.macholib.framework.test_framework_info": [
        "ctypes.macholib.framework.test_framework_info.d",
        "ctypes.macholib.framework.framework_info"
    ],
    "ctypes.macholib.framework.framework_info": [
        "pathlib.PurePath.match"
    ],
    "ctypes.macholib.framework.test_framework_info.d": [
        "<builtin>.dict"
    ],
    "ctypes.macholib.dylib": [
        "re.compile",
        "ctypes.macholib.dylib.test_dylib_info",
        "re"
    ],
    "ctypes.macholib.dylib.test_dylib_info": [
        "ctypes.macholib.dylib.test_dylib_info.d",
        "ctypes.macholib.dylib.dylib_info"
    ],
    "ctypes.macholib.dylib.dylib_info": [
        "pathlib.PurePath.match"
    ],
    "ctypes.macholib.dylib.test_dylib_info.d": [
        "<builtin>.dict"
    ],
    "ctypes.macholib.dyld.test_dyld_find": [
        "ctypes.macholib.dyld.dyld_find"
    ],
    "ctypes.macholib.dyld.dyld_find": [
        "ctypes.macholib.dyld.dyld_override_search",
        "ctypes.macholib.dyld.dyld_default_search",
        "ctypes.macholib.dyld.dyld_executable_path_search",
        "genericpath.isfile",
        "ctypes.macholib.dyld.dyld_image_suffix_search",
        "<builtin>.ValueError"
    ],
    "ctypes.macholib.dyld.dyld_override_search": [
        "posixpath.join",
        "ctypes.macholib.dyld.dyld_library_path",
        "ctypes.macholib.dyld.dyld_framework_path",
        "ntpath.join",
        "ntpath.basename",
        "posixpath.basename",
        "ctypes.macholib.framework.framework_info"
    ],
    "ctypes.macholib.dyld.dyld_framework_path": [
        "ctypes.macholib.dyld.dyld_env"
    ],
    "ctypes.macholib.dyld.dyld_env": [],
    "ctypes.macholib.dyld.dyld_library_path": [
        "ctypes.macholib.dyld.dyld_env"
    ],
    "ctypes.macholib.dyld.dyld_executable_path_search": [
        "posixpath.join",
        "ntpath.join",
        "<builtin>.len",
        "<str>.startswith"
    ],
    "ctypes.macholib.dyld.dyld_default_search": [
        "ctypes.macholib.dyld.dyld_fallback_library_path",
        "posixpath.join",
        "ntpath.join",
        "ntpath.basename",
        "posixpath.basename",
        "ctypes.macholib.dyld.dyld_fallback_framework_path",
        "ctypes.macholib.framework.framework_info"
    ],
    "ctypes.macholib.dyld.dyld_fallback_framework_path": [
        "ctypes.macholib.dyld.dyld_env"
    ],
    "ctypes.macholib.dyld.dyld_fallback_library_path": [
        "ctypes.macholib.dyld.dyld_env"
    ],
    "ctypes.macholib.dyld.dyld_image_suffix_search": [
        "ctypes.macholib.dyld.dyld_image_suffix_search._inject",
        "ctypes.macholib.dyld.dyld_image_suffix"
    ],
    "ctypes.macholib.dyld.dyld_image_suffix": [],
    "ctypes.macholib.dyld.dyld_image_suffix_search._inject": [
        "<builtin>.len"
    ],
    "ctypes.util.test": [
        "ctypes",
        "ctypes.util.find_library",
        "ctypes.LibraryLoader.LoadLibrary",
        "<builtin>.print",
        "ctypes.CDLL.__init__"
    ],
    "ctypes.util.find_library": [
        "ctypes.util._findSoname_ldconfig",
        "ctypes.util._get_soname",
        "ctypes.util._findLib_gcc",
        "ctypes.util._findLib_ld"
    ],
    "ctypes.util._findSoname_ldconfig": [
        "re.escape",
        "os._fscodec.fsencode",
        "struct",
        "subprocess.Popen.__init__",
        "<map>.get",
        "re.search",
        "os._fscodec.fsdecode"
    ],
    "ctypes.util._findLib_gcc": [
        "<builtin>.dict",
        "shutil.which",
        "re.escape",
        "os._fscodec.fsencode",
        "subprocess.Popen.__init__",
        "tempfile.NamedTemporaryFile",
        "re.search",
        "os._fscodec.fsdecode"
    ],
    "ctypes.util._findLib_ld": [
        "subprocess.Popen.communicate",
        "re.escape",
        "<list>.extend",
        "subprocess.Popen.__init__",
        "re.search"
    ],
    "ctypes.util._get_soname": [
        "shutil.which",
        "re.search",
        "subprocess.Popen.__init__"
    ],
    "uuid._unix_getnode": [
        "uuid.UUID.__init__",
        "uuid._load_system_functions"
    ],
    "uuid._windll_getnode": [
        "uuid.UUID.__init__",
        "ctypes",
        "uuid._load_system_functions",
        "ctypes.create_string_buffer"
    ],
    "uuid._random_getnode": [
        "random"
    ],
    "uuid.uuid1": [
        "uuid.UUID.__init__",
        "random",
        "uuid.getnode",
        "uuid._load_system_functions"
    ],
    "uuid.getnode": [],
    "uuid.uuid3": [
        "uuid.UUID.__init__",
        "hashlib",
        "<builtin>.bytes"
    ],
    "uuid.uuid4": [
        "uuid.UUID.__init__"
    ],
    "uuid.uuid5": [
        "uuid.UUID.__init__",
        "hashlib",
        "<builtin>.bytes"
    ],
    "_strptime.TimeRE.compile": [
        "_strptime.TimeRE.pattern",
        "re.compile"
    ],
    "_strptime._strptime_time": [
        "_strptime._strptime"
    ],
    "glob.glob0": [
        "glob._glob0"
    ],
    "glob.glob1": [
        "glob._glob1"
    ],
    "glob.escape": [
        "ntpath.splitdrive",
        "posixpath.splitdrive",
        "<builtin>.isinstance"
    ],
    "click._textwrap.TextWrapper.indent_only": [
        "<builtin>.enumerate",
        "<list>.append"
    ],
    "email.generator.Generator._handle_multipart": [
        "email.generator.BytesGenerator.write",
        "<builtin>.isinstance",
        "email.generator.Generator._write_lines",
        "email.generator.Generator.clone",
        "<list>.pop",
        "email.generator.BytesGenerator._new_buffer",
        "email.generator.Generator._make_boundary",
        "<list>.append",
        "email.generator.Generator.write",
        "email.generator.Generator._new_buffer"
    ],
    "email.generator.Generator.clone": [],
    "email.generator.Generator._make_boundary": [
        "random.Random.randrange",
        "re.escape",
        "email.generator.Generator._compile_re",
        "<builtin>.str",
        "email.generator.BytesGenerator._compile_re"
    ],
    "email.generator.Generator._compile_re": [
        "re.compile"
    ],
    "email.generator.BytesGenerator._compile_re": [
        "re.compile"
    ],
    "email.generator.Generator._handle_multipart_signed": [
        "email.generator.Generator._handle_multipart"
    ],
    "email.generator.Generator._handle_message_delivery_status": [
        "email.generator.Generator.clone",
        "email.generator.BytesGenerator._new_buffer",
        "<list>.append",
        "email.generator.Generator.write",
        "email.generator.Generator._new_buffer"
    ],
    "email.generator.Generator._handle_message": [
        "<builtin>.isinstance",
        "email.generator.BytesGenerator._encode",
        "email.generator.Generator.clone",
        "email.generator.Generator._encode",
        "email.generator.BytesGenerator._new_buffer",
        "email.generator.Generator.write",
        "email.generator.Generator._new_buffer"
    ],
    "email.generator.DecodedGenerator.__init__": [
        "email.generator.Generator.__init__"
    ],
    "email.generator.DecodedGenerator._dispatch": [
        "<builtin>.print",
        "email.iterators.walk"
    ],
    "email.policy.EmailPolicy.fold": [
        "email.policy.EmailPolicy._fold"
    ],
    "email.policy.EmailPolicy._fold": [
        "email.utils._has_surrogates",
        "<builtin>.any",
        "<builtin>.len",
        "email.headerregistry.HeaderRegistry.__init__",
        "<builtin>.hasattr"
    ],
    "email.policy.EmailPolicy.fold_binary": [
        "email.policy.EmailPolicy._fold"
    ],
    "email.headerregistry.Address.__init__": [
        "<builtin>.TypeError",
        "email._header_value_parser.get_addr_spec",
        "<builtin>.ValueError"
    ],
    "email._header_value_parser.get_addr_spec": [
        "email._header_value_parser.get_local_part",
        "email._header_value_parser.get_domain",
        "<list>.append"
    ],
    "email._header_value_parser.get_local_part": [
        "<list>.append",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_obs_local_part",
        "<builtin>.str",
        "email._header_value_parser.get_word",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_dot_atom"
    ],
    "email._header_value_parser.get_cfws": [
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_comment"
    ],
    "email._header_value_parser.get_comment": [
        "<list>.append",
        "email._header_value_parser.get_qp_ctext",
        "email._header_value_parser.get_comment",
        "email._header_value_parser.get_fws"
    ],
    "email._header_value_parser.get_qp_ctext": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser._get_ptext_to_endchars": [
        "<map>",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.range",
        "<list>"
    ],
    "email._header_value_parser._validate_xtext": [
        "<map>",
        "email.utils._has_surrogates",
        "email.errors.NonPrintableDefect.__init__",
        "<list>.append",
        "<list>"
    ],
    "email._header_value_parser.get_fws": [
        "<str>.lstrip",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_dot_atom": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.get_dot_atom_text"
    ],
    "email._header_value_parser.get_dot_atom_text": [
        "email._header_value_parser.get_atext"
    ],
    "email._header_value_parser.get_atext": [
        "<map>",
        "pathlib.PurePath.match",
        "<builtin>.len",
        "<list>",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_encoded_word": [
        "<list>.append",
        "<map>",
        "<list>.extend",
        "<str>.startswith",
        "email._header_value_parser.get_fws",
        "<builtin>.len",
        "email._encoded_words.decode",
        "<list>",
        "email._header_value_parser._validate_xtext"
    ],
    "email._encoded_words.decode": [],
    "email._header_value_parser.get_word": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.get_atom"
    ],
    "email._header_value_parser.get_atom": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.get_atext"
    ],
    "email._header_value_parser.get_quoted_string": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_bare_quoted_string"
    ],
    "email._header_value_parser.get_bare_quoted_string": [
        "<list>.append",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.get_qcontent",
        "email._header_value_parser.get_fws"
    ],
    "email._header_value_parser.get_qcontent": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.TokenList.__init__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.get_obs_local_part": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_word",
        "<list>.append"
    ],
    "email._header_value_parser.get_domain": [
        "email._header_value_parser.get_atom",
        "email._header_value_parser.get_cfws",
        "<list>.append",
        "email._header_value_parser.get_domain_literal",
        "email._header_value_parser.get_dot_atom"
    ],
    "email._header_value_parser.get_domain_literal": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_dtext",
        "email._header_value_parser._check_for_early_dl_end"
    ],
    "email._header_value_parser._check_for_early_dl_end": [],
    "email._header_value_parser.get_dtext": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email.headerregistry.Address.addr_spec": [
        "email._header_value_parser.quote_string",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "email._header_value_parser.quote_string": [
        "<builtin>.str"
    ],
    "email.headerregistry.Address.__str__": [
        "email._header_value_parser.quote_string",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "email.headerregistry.Address.__eq__": [
        "<builtin>.type"
    ],
    "email.headerregistry.Group.__init__": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.Group.__str__": [
        "<builtin>.str",
        "email._header_value_parser.quote_string",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "email.headerregistry.Group.__eq__": [
        "<builtin>.type"
    ],
    "email.headerregistry.BaseHeader.__new__": [
        "email.utils._sanitize",
        "email.utils._has_surrogates"
    ],
    "email.utils._sanitize": [],
    "email.headerregistry.BaseHeader.defects": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.BaseHeader.__reduce__": [
        "<builtin>.str"
    ],
    "email.headerregistry.BaseHeader.fold": [
        "email._header_value_parser.TokenList.fold"
    ],
    "email._header_value_parser.TokenList.fold": [
        "email._header_value_parser._refold_parse_tree"
    ],
    "email._header_value_parser._refold_parse_tree": [
        "<list>.append",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.len",
        "email._header_value_parser._steal_trailing_WSP_if_exists",
        "<builtin>.any",
        "email._header_value_parser._fold_mime_parameters",
        "email._header_value_parser._fold_as_ew",
        "<builtin>.str",
        "<builtin>.hasattr"
    ],
    "email._header_value_parser._fold_mime_parameters": [
        "email._header_value_parser.quote_string",
        "<builtin>.len",
        "<builtin>.str",
        "email.utils._has_surrogates",
        "urllib.parse.quote",
        "<list>.append"
    ],
    "email._header_value_parser._steal_trailing_WSP_if_exists": [],
    "email._header_value_parser._fold_as_ew": [
        "email._header_value_parser.get_unstructured",
        "<list>.append",
        "email._encoded_words.encode",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_unstructured": [
        "<map>",
        "<str>.partition",
        "<str>.startswith",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_encoded_word",
        "<list>",
        "email._header_value_parser._validate_xtext"
    ],
    "email._encoded_words.encode": [],
    "email.headerregistry._reconstruct_header": [
        "<builtin>.type"
    ],
    "email.headerregistry.UnstructuredHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.DateHeader.parse": [
        "email.utils.parsedate_to_datetime",
        "<builtin>.isinstance",
        "email.utils.format_datetime",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email.headerregistry.DateHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.AddressHeader.value_parser": [
        "email._header_value_parser.get_address_list"
    ],
    "email._header_value_parser.get_address_list": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_address",
        "email._header_value_parser.get_invalid_mailbox",
        "<list>.append"
    ],
    "email._header_value_parser.get_address": [
        "email._header_value_parser.get_mailbox",
        "email._header_value_parser.get_group"
    ],
    "email._header_value_parser.get_group": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_display_name",
        "email._header_value_parser.get_group_list",
        "<list>.append"
    ],
    "email._header_value_parser.get_display_name": [
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.get_phrase": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_word",
        "<list>.append"
    ],
    "email._header_value_parser.get_group_list": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_mailbox_list",
        "<builtin>.len",
        "<list>.append"
    ],
    "email._header_value_parser.get_mailbox_list": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_mailbox",
        "email._header_value_parser.get_invalid_mailbox",
        "<list>.append"
    ],
    "email._header_value_parser.get_mailbox": [
        "email._header_value_parser.get_addr_spec",
        "<builtin>.any",
        "email._header_value_parser.get_name_addr",
        "<builtin>.isinstance"
    ],
    "email._header_value_parser.get_name_addr": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_display_name",
        "email._header_value_parser.get_angle_addr"
    ],
    "email._header_value_parser.get_angle_addr": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_addr_spec",
        "email._header_value_parser.get_obs_route",
        "<list>.append"
    ],
    "email._header_value_parser.get_obs_route": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_domain"
    ],
    "email._header_value_parser.get_invalid_mailbox": [
        "email._header_value_parser.get_phrase"
    ],
    "email.headerregistry.AddressHeader.parse": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "email.headerregistry.AddressHeader.value_parser",
        "<builtin>.str",
        "email.headerregistry.Address.__init__",
        "<builtin>.hasattr",
        "email.headerregistry.Group.__init__"
    ],
    "email.headerregistry.AddressHeader.init": [
        "<builtin>.tuple",
        "<builtin>.super"
    ],
    "email.headerregistry.AddressHeader.addresses": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.SingleAddressHeader.address": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "email.headerregistry.MIMEVersionHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.MIMEVersionHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.ParameterizedMIMEHeader.parse": [
        "email.utils._sanitize",
        "<builtin>.str"
    ],
    "email.headerregistry.ParameterizedMIMEHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.ContentTypeHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.ContentDispositionHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.MessageIDHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.HeaderRegistry.__getitem__": [
        "<builtin>.type",
        "<map>.get"
    ],
    "email._header_value_parser.TokenList.__str__": [
        "<builtin>.str"
    ],
    "email._header_value_parser.TokenList.__repr__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.TokenList.all_defects": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.TokenList.as_ew_allowed": [
        "<builtin>.all"
    ],
    "email._header_value_parser.TokenList.comments": [
        "<list>.extend"
    ],
    "email._header_value_parser.TokenList.pprint": [
        "email._header_value_parser.TokenList.ppstr",
        "<builtin>.print"
    ],
    "email._header_value_parser.TokenList.ppstr": [
        "email._header_value_parser.TokenList._pp"
    ],
    "email._header_value_parser.TokenList._pp": [
        "<builtin>.hasattr"
    ],
    "email._header_value_parser.QuotedString.quoted_value": [
        "<list>.append"
    ],
    "email._header_value_parser.BareQuotedString.__str__": [
        "email._header_value_parser.quote_string",
        "<builtin>.str"
    ],
    "email._header_value_parser.BareQuotedString.value": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment.__str__": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.Comment.quote": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment.content": [
        "<builtin>.str"
    ],
    "email._header_value_parser.AddressList.mailboxes": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.AddressList.all_mailboxes": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.NameAddr.display_name": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AngleAddr.addr_spec": [
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.Domain.domain": [
        "<builtin>.super"
    ],
    "email._header_value_parser.AddrSpec.domain": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AddrSpec.value": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AddrSpec.addr_spec": [
        "email._header_value_parser.quote_string",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "email._header_value_parser.DisplayName.display_name": [
        "<builtin>.len",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.DisplayName.value": [
        "<builtin>.super",
        "email._header_value_parser.quote_string",
        "<builtin>.len"
    ],
    "email._header_value_parser.LocalPart.local_part": [
        "<list>.append",
        "<builtin>.isinstance",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.DomainLiteral.domain": [
        "<builtin>.super"
    ],
    "email._header_value_parser.MimeParameters.params": [
        "urllib.parse.unquote_to_bytes",
        "<map>.items",
        "operator.itemgetter.__init__",
        "<builtin>.sorted",
        "<builtin>.len",
        "urllib.parse.unquote"
    ],
    "email._header_value_parser.MimeParameters.__str__": [
        "<list>.append"
    ],
    "email._header_value_parser.ParameterizedHeaderValue.params": [
        "<builtin>.reversed"
    ],
    "email._header_value_parser.MsgID.fold": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Terminal.__new__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.__repr__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.pprint": [
        "<builtin>.print"
    ],
    "email._header_value_parser.Terminal.all_defects": [
        "<builtin>.list"
    ],
    "email._header_value_parser.Terminal.__getnewargs__": [
        "<builtin>.str"
    ],
    "email._header_value_parser.get_no_fold_literal": [
        "email._header_value_parser.get_dtext"
    ],
    "email._header_value_parser.get_msg_id": [
        "email._header_value_parser.get_dot_atom_text",
        "email._header_value_parser.get_no_fold_literal",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_domain",
        "<list>.append",
        "email._header_value_parser.get_obs_local_part"
    ],
    "email._header_value_parser.parse_message_id": [
        "email._header_value_parser.get_unstructured",
        "email._header_value_parser.get_msg_id",
        "<list>.append"
    ],
    "email._header_value_parser.parse_mime_version": [
        "email._header_value_parser.get_cfws",
        "<str>.isdigit",
        "<builtin>.int",
        "<list>.append"
    ],
    "<str>.isdigit": [],
    "email._header_value_parser.get_invalid_parameter": [
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.get_ttext": [
        "<map>",
        "pathlib.PurePath.match",
        "<builtin>.len",
        "<list>",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_token": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_ttext"
    ],
    "email._header_value_parser.get_attrtext": [
        "<map>",
        "pathlib.PurePath.match",
        "<builtin>.len",
        "<list>",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_attribute": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_attrtext"
    ],
    "email._header_value_parser.get_extended_attrtext": [
        "<map>",
        "pathlib.PurePath.match",
        "<builtin>.len",
        "<list>",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_extended_attribute": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_extended_attrtext"
    ],
    "email._header_value_parser.get_section": [
        "<builtin>.int",
        "<list>.append"
    ],
    "email._header_value_parser.get_value": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.get_extended_attribute"
    ],
    "email._header_value_parser.get_parameter": [
        "email._header_value_parser.get_value",
        "email._header_value_parser.get_qcontent",
        "email._header_value_parser.get_attrtext",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_extended_attrtext",
        "<list>.append",
        "email._header_value_parser.get_attribute",
        "email._header_value_parser.get_section"
    ],
    "email._header_value_parser.parse_mime_parameters": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_invalid_parameter",
        "email._header_value_parser.get_parameter",
        "<list>.append"
    ],
    "email._header_value_parser._find_mime_parameters": [
        "email._header_value_parser.get_phrase",
        "email._header_value_parser.parse_mime_parameters"
    ],
    "email._header_value_parser.parse_content_type_header": [
        "email._header_value_parser.get_token",
        "email._header_value_parser._find_mime_parameters",
        "email._header_value_parser.parse_mime_parameters",
        "<list>.append"
    ],
    "email._header_value_parser.parse_content_disposition_header": [
        "email._header_value_parser.get_token",
        "email._header_value_parser._find_mime_parameters",
        "email._header_value_parser.parse_mime_parameters",
        "<list>.append"
    ],
    "email._header_value_parser.parse_content_transfer_encoding_header": [
        "email._header_value_parser.get_token",
        "email._header_value_parser.get_phrase",
        "<list>.append"
    ],
    "email.contentmanager.get_and_fixup_unknown_message_content": [
        "<builtin>.bytes"
    ],
    "email.contentmanager._prepare_set": [
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "email.contentmanager._encode_base64": [
        "<list>.append",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "email.contentmanager._encode_text": [
        "email.quoprimime.body_encode",
        "<builtin>.len",
        "email.contentmanager._encode_text.normal_body",
        "<builtin>.max",
        "email.contentmanager._encode_text.embedded_body"
    ],
    "email.contentmanager._encode_text.normal_body": [],
    "email.contentmanager._encode_text.embedded_body": [],
    "email.contentmanager.set_text_content": [
        "email.contentmanager._finalize_set",
        "email.contentmanager._encode_text",
        "email.contentmanager._prepare_set"
    ],
    "email.contentmanager._finalize_set": [],
    "email.contentmanager.set_message_content": [
        "email.contentmanager._finalize_set",
        "<builtin>.ValueError",
        "email.contentmanager._prepare_set"
    ],
    "email.contentmanager.set_bytes_content": [
        "email.contentmanager._finalize_set",
        "email.contentmanager._encode_base64",
        "email.contentmanager._prepare_set"
    ],
    "distutils.log.Log._log": [
        "codecs.StreamRecoder.write",
        "rich.file_proxy.FileProxy.flush",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.str",
        "rich.file_proxy.FileProxy.write",
        "<builtin>.ValueError"
    ],
    "distutils.log.Log.log": [
        "distutils.log.Log._log"
    ],
    "distutils.log.Log.debug": [
        "distutils.log.Log._log"
    ],
    "distutils.log.Log.info": [
        "distutils.log.Log._log"
    ],
    "distutils.log.Log.warn": [
        "distutils.log.Log._log"
    ],
    "distutils.log.Log.error": [
        "distutils.log.Log._log"
    ],
    "distutils.log.Log.fatal": [
        "distutils.log.Log._log"
    ],
    "distutils.log.set_verbosity": [
        "distutils.log.set_threshold"
    ],
    "distutils.log.set_threshold": [],
    "idna.core.decode": [
        "idna.core.uts46_remap",
        "idna.core.ulabel",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "idna.intranges.intranges_from_list": [
        "<builtin>.len",
        "<builtin>.sorted",
        "<builtin>.tuple",
        "<list>.append",
        "<builtin>.range"
    ],
    "ftplib.FTP.__exit__": [
        "ftplib.FTP.quit"
    ],
    "ftplib.FTP.getwelcome": [
        "<builtin>.print",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.abort": [
        "<builtin>.print",
        "ftplib.FTP.getmultiline",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.storbinary": [
        "ftplib.FTP.transfercmd",
        "ftplib.FTP.voidcmd",
        "<builtin>.isinstance",
        "ftplib.FTP.voidresp"
    ],
    "ftplib.FTP.storlines": [
        "<builtin>.isinstance",
        "ftplib.FTP.transfercmd",
        "ftplib.FTP.voidresp",
        "ftplib.FTP.voidcmd",
        "<builtin>.len"
    ],
    "ftplib.FTP.acct": [
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.nlst": [
        "ftplib.FTP.retrlines"
    ],
    "ftplib.FTP.mlsd": [
        "ftplib.FTP.sendcmd",
        "ftplib.FTP.retrlines"
    ],
    "ftplib.FTP.rename": [
        "ftplib.FTP.sendcmd",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.delete": [
        "ftplib.FTP.sendcmd"
    ],
    "ftplib.FTP.size": [
        "ftplib.FTP.sendcmd",
        "<builtin>.int"
    ],
    "ftplib.FTP.mkd": [
        "ftplib.parse257",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.rmd": [
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.ftpcp": [
        "ftplib.parse227"
    ],
    "netrc.netrc.__repr__": [
        "<map>.keys"
    ],
    "xml.dom.minidom.Node.toxml": [
        "xml.dom.minidom.Node.toprettyxml"
    ],
    "xml.dom.minidom.Node.toprettyxml": [
        "xml.dom.minidom.Document.writexml",
        "xml.dom.minidom.ProcessingInstruction.writexml",
        "_io.BytesIO",
        "xml.dom.minidom.Element.writexml",
        "_io.TextIOWrapper",
        "xml.dom.minidom.Text.writexml",
        "xml.dom.minidom.CDATASection.writexml",
        "xml.dom.minidom.Comment.writexml",
        "_io.StringIO",
        "xml.dom.minidom.DocumentType.writexml"
    ],
    "xml.dom.minidom.Element.writexml": [
        "xml.dom.minidom.Element._get_attributes",
        "xml.dom.minidom._write_data",
        "<builtin>.len",
        "xml.dom.minidom.NamedNodeMap.keys"
    ],
    "xml.dom.minidom.Element._get_attributes": [
        "xml.dom.minidom.Element._ensure_attributes",
        "xml.dom.minidom.NamedNodeMap.__init__"
    ],
    "xml.dom.minidom.NamedNodeMap.__init__": [],
    "xml.dom.minidom.NamedNodeMap.keys": [
        "<map>.keys"
    ],
    "xml.dom.minidom._write_data": [
        "<str>.replace"
    ],
    "xml.dom.minidom.Node.hasChildNodes": [
        "<builtin>.bool"
    ],
    "xml.dom.minidom.Node.insertBefore": [
        "xml.dom.minidom.Node.insertBefore",
        "xml.dom.minidom.Childless.appendChild",
        "xml.dom.minidom.Node.appendChild",
        "xml.dom.minidom.Document.appendChild",
        "xml.dom.minidom.Childless.insertBefore",
        "xml.dom.minidom._clear_id_cache",
        "<builtin>.tuple",
        "xml.dom.minidom.Entity.appendChild",
        "xml.dom.minidom.Entity.insertBefore",
        "<builtin>.repr"
    ],
    "xml.dom.minidom.Node.removeChild": [
        "xml.dom.minidom._clear_id_cache"
    ],
    "xml.dom.minidom.Node.replaceChild": [
        "xml.dom.minidom.Node.insertBefore",
        "xml.dom.minidom.Childless.insertBefore",
        "xml.dom.minidom._clear_id_cache",
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Document.removeChild",
        "xml.dom.minidom.Entity.insertBefore",
        "xml.dom.minidom.Entity.removeChild",
        "<builtin>.repr",
        "xml.dom.minidom.Node.removeChild"
    ],
    "xml.dom.minidom.Node.normalize": [
        "<list>.append"
    ],
    "xml.dom.minidom.Node.cloneNode": [
        "xml.dom.minidom._clone_node"
    ],
    "xml.dom.minidom._clone_node": [
        "xml.dom.minidom.Node.appendChild",
        "<list>.append",
        "<builtin>.repr",
        "xml.dom.minidom.Document.createElementNS",
        "xml.dom.minidom.Document.createCDATASection",
        "xml.dom.minidom.Entity.__init__",
        "xml.dom.minidom.Document.createProcessingInstruction",
        "xml.dom.minidom.Document.createDocumentFragment",
        "xml.dom.minidom.Document.createAttributeNS",
        "xml.dom.minidom._clone_node",
        "xml.dom.minidom.Node.isSameNode",
        "xml.dom.minidom.Notation.__init__",
        "xml.dom.minidom.Document.createComment",
        "xml.dom.minidom.Element.getAttributeNodeNS",
        "xml.dom.minidom.Document.createTextNode",
        "xml.dom.minidom.Element.setAttributeNS",
        "xml.dom.minidom.Node._call_user_data_handler",
        "xml.dom.minidom.DOMImplementation.createDocumentType",
        "<builtin>.hasattr"
    ],
    "xml.dom.minidom.Node.isSameNode": [],
    "xml.dom.minidom.Notation.__init__": [
        "xml.dom.minidom.Identified._identified_mixin_init"
    ],
    "xml.dom.minidom.Identified._identified_mixin_init": [],
    "xml.dom.minidom.Entity.__init__": [
        "xml.dom.minidom.Identified._identified_mixin_init"
    ],
    "xml.dom.minidom.Node._call_user_data_handler": [
        "<map>.items",
        "<builtin>.hasattr",
        "<builtin>.list"
    ],
    "xml.dom.minidom.Node.isSupported": [
        "xml.dom.minidom.DOMImplementation.hasFeature"
    ],
    "xml.dom.minidom.DOMImplementation.hasFeature": [],
    "xml.dom.minidom.Node.getInterface": [
        "xml.dom.minidom.Document.isSupported",
        "xml.dom.minidom.Node.isSupported"
    ],
    "xml.dom.minidom.Document.isSupported": [
        "xml.dom.minidom.DOMImplementation.hasFeature"
    ],
    "xml.dom.minidom.Node.__exit__": [
        "xml.dom.minidom.Attr.unlink",
        "xml.dom.minidom.Node.unlink",
        "xml.dom.minidom.Document.unlink",
        "xml.dom.minidom.Element.unlink"
    ],
    "xml.dom.minidom.Document.unlink": [
        "xml.dom.minidom.Attr.unlink",
        "xml.dom.minidom.Element.unlink",
        "xml.dom.minidom.Node.unlink"
    ],
    "xml.dom.minidom.Node.unlink": [],
    "xml.dom.minidom.Element.unlink": [
        "<builtin>.list",
        "<map>.values",
        "xml.dom.minidom.Node.unlink"
    ],
    "xml.dom.minidom._get_elements_by_tagName_helper": [
        "xml.dom.minidom._get_elements_by_tagName_helper"
    ],
    "xml.dom.minidom._get_elements_by_tagName_ns_helper": [
        "xml.dom.minidom._get_elements_by_tagName_ns_helper"
    ],
    "xml.dom.minidom.Attr._set_name": [
        "xml.dom.minidom._clear_id_cache"
    ],
    "xml.dom.minidom.Attr._set_value": [
        "xml.dom.minidom._clear_id_cache"
    ],
    "xml.dom.minidom.Attr._set_prefix": [
        "xml.dom.minidom._clear_id_cache"
    ],
    "xml.dom.minidom.Attr._get_isId": [
        "xml.dom.minidom.Document._get_elem_info"
    ],
    "xml.dom.minidom.Document._get_elem_info": [
        "<map>.get"
    ],
    "xml.dom.minidom.Attr._get_schemaType": [
        "xml.dom.minidom.Document._get_elem_info"
    ],
    "xml.dom.minidom.NamedNodeMap._get_length": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.NamedNodeMap.item": [
        "<map>.keys",
        "<builtin>.list"
    ],
    "xml.dom.minidom.NamedNodeMap.items": [
        "<map>.values",
        "<list>.append"
    ],
    "xml.dom.minidom.NamedNodeMap.itemsNS": [
        "<map>.values",
        "<list>.append"
    ],
    "xml.dom.minidom.NamedNodeMap.__contains__": [
        "<builtin>.isinstance"
    ],
    "xml.dom.minidom.NamedNodeMap.keysNS": [
        "<map>.keys"
    ],
    "xml.dom.minidom.NamedNodeMap.values": [
        "<map>.values"
    ],
    "xml.dom.minidom.NamedNodeMap.get": [
        "<map>.get"
    ],
    "xml.dom.minidom.NamedNodeMap._cmp": [
        "<builtin>.id",
        "<builtin>.getattr"
    ],
    "xml.dom.minidom.NamedNodeMap.__eq__": [
        "xml.dom.minidom.NamedNodeMap._cmp"
    ],
    "xml.dom.minidom.NamedNodeMap.__ge__": [
        "xml.dom.minidom.NamedNodeMap._cmp"
    ],
    "xml.dom.minidom.NamedNodeMap.__gt__": [
        "xml.dom.minidom.NamedNodeMap._cmp"
    ],
    "xml.dom.minidom.NamedNodeMap.__le__": [
        "xml.dom.minidom.NamedNodeMap._cmp"
    ],
    "xml.dom.minidom.NamedNodeMap.__lt__": [
        "xml.dom.minidom.NamedNodeMap._cmp"
    ],
    "xml.dom.minidom.NamedNodeMap.__getitem__": [
        "<builtin>.isinstance"
    ],
    "xml.dom.minidom.NamedNodeMap.__setitem__": [
        "<builtin>.TypeError",
        "xml.dom.minidom.Attr.__init__",
        "<builtin>.isinstance",
        "xml.dom.minidom.NamedNodeMap.setNamedItem"
    ],
    "xml.dom.minidom.NamedNodeMap.setNamedItem": [
        "<builtin>.repr",
        "xml.dom.minidom._clear_id_cache",
        "<builtin>.isinstance",
        "<map>.get"
    ],
    "xml.dom.minidom.NamedNodeMap.removeNamedItem": [
        "xml.dom.minidom.NamedNodeMap.getNamedItem",
        "<builtin>.hasattr",
        "xml.dom.minidom._clear_id_cache"
    ],
    "xml.dom.minidom.NamedNodeMap.getNamedItem": [],
    "xml.dom.minidom.NamedNodeMap.removeNamedItemNS": [
        "<builtin>.hasattr",
        "xml.dom.minidom._clear_id_cache",
        "xml.dom.minidom.NamedNodeMap.getNamedItemNS"
    ],
    "xml.dom.minidom.NamedNodeMap.getNamedItemNS": [],
    "xml.dom.minidom.NamedNodeMap.setNamedItemNS": [
        "xml.dom.minidom.NamedNodeMap.setNamedItem"
    ],
    "xml.dom.minidom.NamedNodeMap.__delitem__": [
        "xml.dom.minidom._clear_id_cache"
    ],
    "xml.dom.minidom.Element.setAttributeNS": [
        "xml.dom.minidom.Element.setAttributeNode",
        "xml.dom.minidom.Element.getAttributeNodeNS",
        "xml.dom.minidom.Attr.__init__",
        "xml.dom.minidom._clear_id_cache",
        "xml.dom.minidom._nssplit"
    ],
    "xml.dom.minidom._nssplit": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.Element.getAttributeNodeNS": [
        "<map>.get"
    ],
    "xml.dom.minidom.Element.removeAttribute": [
        "xml.dom.minidom.Element.removeAttributeNode"
    ],
    "xml.dom.minidom.Element.removeAttributeNS": [
        "xml.dom.minidom.Element.removeAttributeNode"
    ],
    "xml.dom.minidom.Element.getElementsByTagName": [
        "xml.dom.minidom._get_elements_by_tagName_helper"
    ],
    "xml.dom.minidom.Element.getElementsByTagNameNS": [
        "xml.dom.minidom._get_elements_by_tagName_ns_helper"
    ],
    "xml.dom.minidom.Element.__repr__": [
        "<builtin>.id"
    ],
    "xml.dom.minidom.Element.setIdAttribute": [
        "xml.dom.minidom.Element.setIdAttributeNode",
        "xml.dom.minidom.Element.getAttributeNode"
    ],
    "xml.dom.minidom.Element.setIdAttributeNode": [
        "xml.dom.minidom.Node.isSameNode",
        "xml.dom.minidom._clear_id_cache",
        "xml.dom.minidom._get_containing_entref"
    ],
    "xml.dom.minidom._get_containing_entref": [],
    "xml.dom.minidom.Element.setIdAttributeNS": [
        "xml.dom.minidom.Element.setIdAttributeNode",
        "xml.dom.minidom.Element.getAttributeNodeNS"
    ],
    "xml.dom.minidom.CharacterData._get_length": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.CharacterData.__repr__": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.CharacterData.substringData": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.CharacterData.insertData": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.CharacterData.deleteData": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.CharacterData.replaceData": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.Text.splitText": [
        "xml.dom.minidom.Node.insertBefore",
        "xml.dom.minidom.Childless.appendChild",
        "xml.dom.minidom.Node.appendChild",
        "xml.dom.minidom.Document.appendChild",
        "xml.dom.minidom.Childless.insertBefore",
        "xml.dom.minidom.Entity.appendChild",
        "<builtin>.len",
        "xml.dom.minidom.Entity.insertBefore"
    ],
    "xml.dom.minidom.Text.writexml": [
        "xml.dom.minidom._write_data"
    ],
    "xml.dom.minidom.Text._get_wholeText": [
        "<list>.insert",
        "<list>.append"
    ],
    "xml.dom.minidom.Text._get_isWhitespaceInElementContent": [
        "xml.dom.minidom.Document._get_elem_info",
        "xml.dom.minidom._get_containing_element",
        "<str>.strip"
    ],
    "xml.dom.minidom._get_containing_element": [],
    "xml.dom.minidom.Comment.__init__": [
        "xml.dom.minidom.CharacterData.__init__"
    ],
    "xml.dom.minidom.CharacterData.__init__": [],
    "xml.dom.minidom.Comment.writexml": [
        "<builtin>.ValueError"
    ],
    "xml.dom.minidom.CDATASection.writexml": [
        "<str>.find",
        "<builtin>.ValueError"
    ],
    "xml.dom.minidom.ReadOnlySequentialNamedNodeMap.__len__": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.ReadOnlySequentialNamedNodeMap._get_length": [
        "<builtin>.len"
    ],
    "xml.dom.minidom.ReadOnlySequentialNamedNodeMap.__getitem__": [
        "<builtin>.KeyError",
        "xml.dom.minidom.ReadOnlySequentialNamedNodeMap.getNamedItemNS",
        "<builtin>.isinstance",
        "xml.dom.minidom.ReadOnlySequentialNamedNodeMap.getNamedItem"
    ],
    "xml.dom.minidom.ReadOnlySequentialNamedNodeMap.getNamedItem": [],
    "xml.dom.minidom.ReadOnlySequentialNamedNodeMap.getNamedItemNS": [],
    "xml.dom.minidom.DocumentType.__init__": [
        "xml.dom.minidom._nssplit",
        "xml.dom.minidom.ReadOnlySequentialNamedNodeMap.__init__"
    ],
    "xml.dom.minidom.ReadOnlySequentialNamedNodeMap.__init__": [],
    "xml.dom.minidom.DocumentType.cloneNode": [
        "xml.dom.minidom.Entity.__init__",
        "xml.dom.minidom.Notation.__init__",
        "<list>.append",
        "xml.dom.minidom.Node._call_user_data_handler",
        "xml.dom.minidom.DocumentType.__init__"
    ],
    "xml.dom.minidom.DOMImplementation.createDocument": [
        "xml.dom.minidom.Document.createElementNS",
        "xml.dom.minidom._nssplit",
        "xml.dom.minidom.DOMImplementation._create_document",
        "xml.dom.minidom.Document.appendChild"
    ],
    "xml.dom.minidom.DOMImplementation._create_document": [
        "xml.dom.minidom.Document.__init__"
    ],
    "xml.dom.minidom.Document.createElementNS": [
        "xml.dom.minidom._nssplit",
        "xml.dom.minidom.Element.__init__"
    ],
    "xml.dom.minidom.Childless.appendChild": [],
    "xml.dom.minidom.DOMImplementation.createDocumentType": [
        "xml.dom.minidom.DocumentType.__init__"
    ],
    "xml.dom.minidom.DOMImplementation.getInterface": [
        "xml.dom.minidom.DOMImplementation.hasFeature"
    ],
    "xml.dom.minidom.Childless.removeChild": [],
    "xml.dom.minidom.Document.removeChild": [],
    "xml.dom.minidom.Document.cloneNode": [
        "xml.dom.minidom.Node._call_user_data_handler",
        "xml.dom.minidom.Node.isSameNode",
        "xml.dom.minidom.DOMImplementation.createDocument",
        "xml.dom.minidom._clone_node"
    ],
    "xml.dom.minidom.Document.createAttributeNS": [
        "xml.dom.minidom._nssplit",
        "xml.dom.minidom.Attr.__init__"
    ],
    "xml.dom.minidom.Document.createComment": [
        "xml.dom.minidom.Comment.__init__"
    ],
    "xml.dom.minidom.Document.createProcessingInstruction": [
        "xml.dom.minidom.ProcessingInstruction.__init__"
    ],
    "xml.dom.minidom.ProcessingInstruction.__init__": [],
    "xml.dom.minidom.Document.createCDATASection": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "xml.dom.minidom.Document.createTextNode": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "xml.dom.minidom.Document.createDocumentFragment": [
        "xml.dom.minidom.DocumentFragment.__init__"
    ],
    "xml.dom.minidom.DocumentFragment.__init__": [],
    "xml.dom.minidom.Document.createAttribute": [
        "xml.dom.minidom.Attr.__init__"
    ],
    "xml.dom.minidom.Document._create_entity": [
        "xml.dom.minidom.Entity.__init__"
    ],
    "xml.dom.minidom.Document._create_notation": [
        "xml.dom.minidom.Notation.__init__"
    ],
    "xml.dom.minidom.Document.getElementById": [
        "xml.dom.minidom.Document._get_elem_info",
        "<list>.pop",
        "<list>.extend"
    ],
    "xml.dom.minidom.Document.getElementsByTagName": [
        "xml.dom.minidom._get_elements_by_tagName_helper"
    ],
    "xml.dom.minidom.Document.getElementsByTagNameNS": [
        "xml.dom.minidom._get_elements_by_tagName_ns_helper"
    ],
    "xml.dom.minidom.Document.importNode": [
        "xml.dom.minidom._clone_node"
    ],
    "xml.dom.pulldom": [
        "xml.dom.pulldom.PullDOM",
        "xml.dom.pulldom.ErrorHandler",
        "xml.sax",
        "xml.dom.pulldom.DOMEventStream",
        "xml.dom.pulldom.SAX2DOM",
        "xml.sax.handler"
    ],
    "xml.dom.minidom.parse": [
        "xml.dom.expatbuilder",
        "xml.dom.minidom._do_pulldom_parse",
        "xml.dom.pulldom",
        "xml.dom.expatbuilder.parse"
    ],
    "xml.sax": [
        "xml.sax.xmlreader",
        "os",
        "xml.sax._exceptions",
        "xml.sax.handler",
        "xml.sax.expatreader"
    ],
    "xml.sax.xmlreader": [
        "xml.sax.xmlreader.Locator",
        "xml.sax.xmlreader.AttributesImpl",
        "xml.sax.handler",
        "xml.sax.xmlreader.InputSource",
        "xml.sax.xmlreader.AttributesNSImpl",
        "xml.sax.xmlreader.XMLReader",
        "xml.sax.xmlreader._test",
        "xml.sax._exceptions",
        "xml.sax.xmlreader.IncrementalParser"
    ],
    "xml.sax.handler": [
        "xml.sax.handler.DTDHandler",
        "xml.sax.handler.EntityResolver",
        "xml.sax.handler.ErrorHandler",
        "xml.sax.handler.ContentHandler"
    ],
    "xml.sax.handler.ErrorHandler": [],
    "xml.sax.handler.ContentHandler": [],
    "xml.sax.handler.DTDHandler": [],
    "xml.sax.handler.EntityResolver": [],
    "xml.sax._exceptions": [
        "xml.sax._exceptions.SAXNotSupportedException",
        "xml.sax._exceptions.SAXParseException",
        "xml.sax._exceptions.SAXReaderNotAvailable",
        "xml.sax._exceptions.SAXNotRecognizedException",
        "xml.sax._exceptions.SAXException"
    ],
    "xml.sax._exceptions.SAXException": [],
    "xml.sax._exceptions.SAXParseException": [],
    "xml.sax._exceptions.SAXNotRecognizedException": [],
    "xml.sax._exceptions.SAXNotSupportedException": [],
    "xml.sax._exceptions.SAXReaderNotAvailable": [],
    "xml.sax.xmlreader.XMLReader": [],
    "xml.sax.xmlreader.IncrementalParser": [],
    "xml.sax.xmlreader.Locator": [],
    "xml.sax.xmlreader.InputSource": [],
    "xml.sax.xmlreader.AttributesImpl": [],
    "xml.sax.xmlreader.AttributesNSImpl": [],
    "xml.sax.xmlreader._test": [
        "xml.sax.xmlreader.IncrementalParser.__init__",
        "xml.sax.xmlreader.XMLReader.__init__"
    ],
    "xml.sax.xmlreader.XMLReader.__init__": [
        "xml.sax.handler.ContentHandler.__init__"
    ],
    "xml.sax.handler.ContentHandler.__init__": [],
    "xml.sax.xmlreader.IncrementalParser.__init__": [
        "xml.sax.xmlreader.XMLReader.__init__"
    ],
    "xml.sax.expatreader": [
        "xml.sax.expatreader.ExpatParser.setContentHandler",
        "xml.sax.expatreader.ExpatLocator",
        "xml.sax.expatreader.create_parser",
        "xml.sax.xmlreader",
        "xml.sax.xmlreader.XMLReader.setErrorHandler",
        "xml.sax.saxutils",
        "xml.sax.expatreader.ExpatParser",
        "xml.sax.expatreader.ExpatParser.parse",
        "xml.sax._exceptions.SAXException.__init__",
        "xml.sax.expatreader._ClosedParser",
        "xml.sax._exceptions",
        "xml.sax.handler",
        "xml.parsers.expat"
    ],
    "xml.sax._exceptions.SAXException.__init__": [],
    "xml.sax.saxutils": [
        "xml.sax.xmlreader",
        "codecs",
        "os",
        "urllib.parse",
        "xml.sax.saxutils.XMLGenerator",
        "xml.sax.saxutils.XMLFilterBase",
        "urllib.request",
        "io",
        "xml.sax.handler"
    ],
    "xml.sax.saxutils.XMLGenerator": [],
    "xml.sax.saxutils.XMLFilterBase": [],
    "xml.sax.expatreader._ClosedParser": [],
    "xml.sax.expatreader.ExpatLocator": [],
    "xml.sax.expatreader.ExpatParser": [],
    "xml.sax.expatreader.create_parser": [
        "xml.sax.expatreader.ExpatParser.__init__"
    ],
    "xml.sax.expatreader.ExpatParser.__init__": [
        "xml.sax.xmlreader.InputSource.__init__",
        "xml.sax.xmlreader.IncrementalParser.__init__"
    ],
    "xml.sax.xmlreader.InputSource.__init__": [],
    "xml.sax.expatreader.ExpatParser.setContentHandler": [
        "xml.sax.expatreader.ExpatParser._reset_cont_handler",
        "xml.sax.xmlreader.XMLReader.setContentHandler"
    ],
    "xml.sax.xmlreader.XMLReader.setContentHandler": [],
    "xml.sax.expatreader.ExpatParser._reset_cont_handler": [],
    "xml.sax.xmlreader.XMLReader.setErrorHandler": [],
    "xml.sax.expatreader.ExpatParser.parse": [
        "xml.sax.handler.ContentHandler.setDocumentLocator",
        "xml.sax.xmlreader.IncrementalParser.parse",
        "xml.sax.saxutils.prepare_input_source",
        "xml.sax.expatreader.ExpatParser.reset",
        "xml.sax.expatreader.ExpatParser._close_source",
        "xml.sax.expatreader.ExpatLocator.__init__"
    ],
    "xml.sax.saxutils.prepare_input_source": [
        "xml.sax.xmlreader.InputSource.setByteStream",
        "<builtin>.isinstance",
        "posixpath.normpath",
        "xml.sax.xmlreader.InputSource.getByteStream",
        "posixpath.join",
        "xml.sax.xmlreader.InputSource.setSystemId",
        "zipfile.ZipFile.read",
        "ntpath.normpath",
        "xml.sax.xmlreader.InputSource.getSystemId",
        "xml.sax.xmlreader.InputSource.__init__",
        "xml.sax.xmlreader.InputSource.setCharacterStream",
        "os._fspath",
        "xml.sax.expatreader.ExpatParser.getSystemId",
        "xml.sax.xmlreader.InputSource.getCharacterStream",
        "<builtin>.open",
        "posixpath.dirname",
        "ntpath.join",
        "genericpath.isfile",
        "ntpath.dirname",
        "<builtin>.hasattr"
    ],
    "xml.sax.xmlreader.InputSource.getCharacterStream": [],
    "xml.sax.xmlreader.InputSource.getByteStream": [],
    "xml.sax.xmlreader.InputSource.getSystemId": [],
    "xml.sax.xmlreader.InputSource.setSystemId": [],
    "xml.sax.xmlreader.InputSource.setByteStream": [],
    "xml.sax.expatreader.ExpatParser.reset": [
        "xml.sax.expatreader.ExpatParser._reset_lex_handler_prop",
        "xml.sax.expatreader.ExpatParser._reset_cont_handler",
        "xml.sax.xmlreader.InputSource.getEncoding"
    ],
    "xml.sax.xmlreader.InputSource.getEncoding": [],
    "xml.sax.expatreader.ExpatParser._reset_lex_handler_prop": [],
    "xml.sax.expatreader.ExpatLocator.__init__": [
        "xml.sax.expatreader._mkproxy"
    ],
    "xml.sax.expatreader._mkproxy": [],
    "xml.sax.xmlreader.IncrementalParser.parse": [
        "xml.sax.xmlreader.IncrementalParser.close",
        "xml.sax.xmlreader.InputSource.getByteStream",
        "xml.sax.expatreader.ExpatParser.prepareParser",
        "xml.sax.expatreader.ExpatParser.close",
        "xml.sax.xmlreader.IncrementalParser.prepareParser",
        "xml.sax.xmlreader.IncrementalParser.feed",
        "xml.sax.saxutils.prepare_input_source",
        "xml.sax.expatreader.ExpatParser.feed",
        "zipfile.ZipFile.read",
        "xml.sax.xmlreader.InputSource.getCharacterStream",
        "xml.sax.saxutils"
    ],
    "xml.sax.xmlreader.InputSource.setCharacterStream": [],
    "xml.sax.expatreader.ExpatParser.getSystemId": [
        "xml.sax.expatreader.ExpatParser.getSystemId",
        "xml.sax.xmlreader.InputSource.getSystemId"
    ],
    "xml.sax.xmlreader.IncrementalParser.prepareParser": [
        "<builtin>.NotImplementedError"
    ],
    "xml.sax.expatreader.ExpatParser.prepareParser": [
        "xml.sax.expatreader.ExpatParser.getSystemId",
        "xml.sax.xmlreader.InputSource.getSystemId"
    ],
    "xml.sax.xmlreader.IncrementalParser.feed": [
        "<builtin>.NotImplementedError"
    ],
    "xml.sax.expatreader.ExpatParser.feed": [
        "xml.sax.expatreader.ExpatParser.reset",
        "xml.sax._exceptions.SAXParseException.__init__",
        "xml.sax.handler.ErrorHandler.fatalError",
        "xml.sax.handler.ContentHandler.startDocument"
    ],
    "xml.sax._exceptions.SAXParseException.__init__": [
        "xml.sax.expatreader.ExpatParser.getLineNumber",
        "xml.sax.expatreader.ExpatParser.getSystemId",
        "xml.sax.expatreader.ExpatParser.getColumnNumber",
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.expatreader.ExpatParser.getColumnNumber": [],
    "xml.sax.expatreader.ExpatParser.getLineNumber": [],
    "xml.sax.xmlreader.IncrementalParser.close": [
        "<builtin>.NotImplementedError"
    ],
    "xml.sax.expatreader.ExpatParser.close": [
        "xml.sax.handler.ContentHandler.endDocument",
        "<builtin>.isinstance",
        "xml.sax.expatreader.ExpatParser.feed"
    ],
    "xml.sax.expatreader.ExpatParser._close_source": [
        "xml.sax.expatreader.ExpatParser.close",
        "zipfile.ZipFile.close",
        "xml.sax.xmlreader.InputSource.getCharacterStream",
        "xmlrpc.client.GzipDecodedResponse.close"
    ],
    "xml.dom.pulldom.PullDOM": [],
    "xml.dom.pulldom.ErrorHandler": [],
    "xml.dom.pulldom.DOMEventStream": [],
    "xml.dom.pulldom.SAX2DOM": [],
    "xml.dom.minidom._do_pulldom_parse": [
        "xml.dom.pulldom.DOMEventStream.expandNode",
        "xml.dom.pulldom.parseString",
        "xml.dom.pulldom.parse",
        "xml.dom.pulldom.DOMEventStream.getEvent",
        "xml.dom.pulldom.DOMEventStream.clear"
    ],
    "xml.dom.pulldom.parse": [
        "<builtin>.open",
        "<builtin>.isinstance",
        "xml.dom.pulldom.DOMEventStream.__init__"
    ],
    "xml.dom.pulldom.DOMEventStream.__init__": [
        "xml.dom.pulldom.DOMEventStream.reset",
        "<builtin>.hasattr"
    ],
    "xml.dom.pulldom.DOMEventStream.reset": [
        "xml.dom.pulldom.PullDOM.__init__"
    ],
    "xml.dom.pulldom.PullDOM.__init__": [
        "xml.dom"
    ],
    "xml.dom.pulldom.DOMEventStream.getEvent": [],
    "xml.dom.pulldom.DOMEventStream.expandNode": [
        "xml.dom.pulldom.DOMEventStream.getEvent",
        "<list>.append"
    ],
    "xml.dom.pulldom.DOMEventStream.clear": [
        "xml.dom.pulldom.PullDOM.clear"
    ],
    "xml.dom.pulldom.PullDOM.clear": [],
    "xml.dom.expatbuilder": [
        "xml.dom.minidom.getDOMImplementation",
        "xml.dom.expatbuilder.ExpatBuilder",
        "xml.dom.expatbuilder.InternalSubsetExtractor",
        "xml.dom",
        "xml.dom.minidom.TypeInfo.__init__",
        "xml.dom.expatbuilder.ExpatBuilderNS",
        "xml.dom.expatbuilder.ElementInfo",
        "xml.dom.NodeFilter",
        "xml.dom.expatbuilder.FilterCrutch",
        "xml.dom.expatbuilder.Skipper",
        "xml.dom.minidom",
        "xml.dom.expatbuilder.Rejecter",
        "xml.parsers.expat",
        "xml.dom.expatbuilder.FragmentBuilder",
        "xml.dom.expatbuilder.FragmentBuilderNS",
        "xml.dom.expatbuilder.Namespaces",
        "xml.dom.expatbuilder.FilterVisibilityController",
        "xml.dom.expatbuilder.ParseEscape",
        "xml.dom.xmlbuilder"
    ],
    "xml.dom.minidom.getDOMImplementation": [
        "xml.dom.domreg._parse_feature_string",
        "xml.dom.minidom.DOMImplementation.hasFeature",
        "<builtin>.isinstance"
    ],
    "xml.dom.domreg._parse_feature_string": [
        "<list>.append",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "xml.dom.expatbuilder.ElementInfo": [],
    "xml.dom.expatbuilder.ExpatBuilder": [],
    "xml.dom.expatbuilder.FilterVisibilityController": [],
    "xml.dom.expatbuilder.FilterCrutch": [],
    "xml.dom.expatbuilder.Rejecter": [],
    "xml.dom.expatbuilder.Skipper": [],
    "xml.dom.expatbuilder.FragmentBuilder": [],
    "xml.dom.expatbuilder.Namespaces": [],
    "xml.dom.expatbuilder.ExpatBuilderNS": [],
    "xml.dom.expatbuilder.FragmentBuilderNS": [],
    "xml.dom.expatbuilder.ParseEscape": [],
    "xml.dom.expatbuilder.InternalSubsetExtractor": [],
    "xml.dom.expatbuilder.parse": [
        "xml.dom.expatbuilder.ExpatBuilder.parseFile",
        "<builtin>.open",
        "<builtin>.isinstance",
        "xml.dom.expatbuilder.ExpatBuilder.__init__"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.__init__": [
        "xml.dom.expatbuilder.ExpatBuilderNS.reset",
        "xml.dom.expatbuilder.ExpatBuilder.reset",
        "xml.dom.expatbuilder.FragmentBuilder.reset",
        "xml.dom.expatbuilder.FilterVisibilityController.__init__"
    ],
    "xml.dom.expatbuilder.FilterVisibilityController.__init__": [],
    "xml.dom.expatbuilder.ExpatBuilder.reset": [
        "xml.dom.minidom.DOMImplementation.createDocument"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.parseFile": [
        "xml.dom.expatbuilder.ExpatBuilderNS.reset",
        "xml.dom.expatbuilder.ExpatBuilder.reset",
        "xml.dom.expatbuilder.ExpatBuilder.getParser",
        "xml.dom.expatbuilder.FragmentBuilder.reset",
        "xml.dom.expatbuilder.ExpatBuilder._setup_subset"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.getParser": [
        "xml.dom.expatbuilder.ExpatBuilder.install",
        "xml.dom.expatbuilder.Namespaces.install",
        "xml.dom.expatbuilder.ExpatBuilder.createParser",
        "xml.dom.expatbuilder.Namespaces.createParser",
        "xml.dom.expatbuilder.InternalSubsetExtractor.install"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.createParser": [],
    "xml.dom.expatbuilder.Namespaces.createParser": [],
    "xml.dom.expatbuilder.ExpatBuilder.install": [],
    "xml.dom.expatbuilder.Namespaces.install": [
        "xml.dom.expatbuilder.ExpatBuilder.install"
    ],
    "xml.dom.expatbuilder.ExpatBuilder._setup_subset": [
        "xml.dom.expatbuilder.InternalSubsetExtractor.getSubset",
        "xml.dom.expatbuilder.InternalSubsetExtractor.parseString"
    ],
    "xml.dom.expatbuilder.InternalSubsetExtractor.parseString": [
        "xml.dom.expatbuilder.ExpatBuilder.parseString"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.parseString": [
        "xml.dom.expatbuilder.ExpatBuilderNS.reset",
        "xml.dom.expatbuilder.ExpatBuilder.reset",
        "xml.dom.expatbuilder.ExpatBuilder.getParser",
        "xml.dom.expatbuilder.FragmentBuilder.reset",
        "xml.dom.expatbuilder.ExpatBuilder._setup_subset"
    ],
    "xml.dom.expatbuilder.ExpatBuilderNS.reset": [
        "xml.dom.expatbuilder.Namespaces._initNamespaces",
        "xml.dom.expatbuilder.ExpatBuilder.reset"
    ],
    "xml.dom.expatbuilder.Namespaces._initNamespaces": [],
    "xml.dom.expatbuilder.InternalSubsetExtractor.getSubset": [],
    "xml.dom.minidom.parseString": [
        "xml.dom.expatbuilder",
        "xml.dom.minidom._do_pulldom_parse",
        "xml.dom.pulldom",
        "xml.dom.expatbuilder.parseString"
    ],
    "xml.dom.pulldom.parseString": [
        "_io.StringIO",
        "io",
        "xml.dom.pulldom.DOMEventStream.__init__",
        "<builtin>.len"
    ],
    "xml.dom.expatbuilder.parseString": [
        "xml.dom.expatbuilder.ExpatBuilder.__init__",
        "xml.dom.expatbuilder.ExpatBuilder.parseString"
    ],
    "xml.dom.DOMException.__init__": [
        "<builtin>.RuntimeError"
    ],
    "xml.dom.domreg.getDOMImplementation": [
        "<builtin>.isinstance",
        "<map>.keys",
        "<builtin>.ImportError",
        "xml.dom.domreg._good_enough",
        "<builtin>.__import__",
        "os",
        "<map>.get",
        "xml.dom.domreg._parse_feature_string",
        "xml.dom.domreg.getDOMImplementation",
        "<map>.values"
    ],
    "xml.dom.domreg._good_enough": [],
    "xml.dom.minicompat.NodeList.item": [
        "<builtin>.len"
    ],
    "xml.dom.minicompat.NodeList._get_length": [
        "<builtin>.len"
    ],
    "xml.dom.minicompat.defproperty.set": [
        "<builtin>.repr"
    ],
    "xml.dom.xmlbuilder.DOMBuilder.setFeature": [
        "<builtin>.repr",
        "xml.dom.xmlbuilder.DOMBuilder.supportsFeature",
        "xml.dom.xmlbuilder._name_xform"
    ],
    "xml.dom.xmlbuilder.DOMBuilder.supportsFeature": [
        "<builtin>.hasattr",
        "xml.dom.xmlbuilder._name_xform"
    ],
    "xml.dom.xmlbuilder._name_xform": [],
    "xml.dom.xmlbuilder.DOMBuilder.canSetFeature": [
        "xml.dom.xmlbuilder._name_xform"
    ],
    "xml.dom.xmlbuilder.DOMBuilder.getFeature": [
        "<builtin>.repr",
        "<builtin>.getattr",
        "xml.dom.xmlbuilder._name_xform"
    ],
    "xml.dom.xmlbuilder.DOMBuilder.parseURI": [
        "xml.dom.xmlbuilder.DOMBuilder.parse",
        "xml.dom.xmlbuilder.DOMEntityResolver.resolveEntity"
    ],
    "xml.dom.xmlbuilder.DOMEntityResolver.resolveEntity": [
        "posixpath.dirname",
        "xml.dom.xmlbuilder.DOMEntityResolver._get_opener",
        "posixpath",
        "xml.dom.xmlbuilder.DOMEntityResolver._guess_media_encoding",
        "urllib.parse",
        "xml.dom.xmlbuilder.DOMInputSource.__init__"
    ],
    "xml.dom.xmlbuilder.DOMInputSource.__init__": [],
    "xml.dom.xmlbuilder.DOMEntityResolver._get_opener": [
        "xml.dom.xmlbuilder.DOMEntityResolver._create_opener"
    ],
    "xml.dom.xmlbuilder.DOMEntityResolver._create_opener": [
        "urllib.request"
    ],
    "xml.dom.xmlbuilder.DOMEntityResolver._guess_media_encoding": [],
    "xml.dom.xmlbuilder.DOMBuilder.parse": [
        "copy.copy",
        "urllib.request",
        "xml.dom.xmlbuilder.DOMBuilder._parse_bytestream"
    ],
    "xml.dom.xmlbuilder.DOMBuilder._parse_bytestream": [
        "xml.dom.expatbuilder"
    ],
    "xml.dom.xmlbuilder.DOMBuilder.parseWithContext": [
        "<builtin>.NotImplementedError",
        "<builtin>.ValueError"
    ],
    "xml.dom.xmlbuilder.DocumentLS.abort": [
        "<builtin>.NotImplementedError"
    ],
    "xml.dom.xmlbuilder.DocumentLS.load": [
        "<builtin>.NotImplementedError"
    ],
    "xml.dom.xmlbuilder.DocumentLS.loadXML": [
        "<builtin>.NotImplementedError"
    ],
    "xml.dom.xmlbuilder.DOMImplementationLS.createDOMBuilder": [
        "xml.dom.xmlbuilder.DOMBuilder.__init__",
        "<builtin>.ValueError"
    ],
    "xml.dom.xmlbuilder.DOMBuilder.__init__": [],
    "xml.dom.xmlbuilder.DOMImplementationLS.createDOMWriter": [
        "<builtin>.NotImplementedError"
    ],
    "xml.dom.xmlbuilder.DOMImplementationLS.createDOMInputSource": [
        "xml.dom.xmlbuilder.DOMInputSource.__init__"
    ],
    "click.decorators.make_pass_decorator.decorator.new_func": [
        "click.globals.get_current_context",
        "<builtin>.RuntimeError"
    ],
    "click.decorators.pass_meta_key.decorator.new_func": [
        "click.globals.get_current_context"
    ],
    "gzip.GzipFile.readable": [],
    "gzip.GzipFile.writable": [],
    "gzip.GzipFile.seekable": [],
    "multiprocessing.pool.Pool._handle_results": [
        "multiprocessing.util.debug",
        "<builtin>.len",
        "threading.current_thread",
        "<builtin>.hasattr",
        "<builtin>.range"
    ],
    "multiprocessing.pool.Pool._handle_workers": [
        "multiprocessing.pool.ThreadPool._wait_for_updates",
        "multiprocessing.util.debug",
        "multiprocessing.pool.Pool._wait_for_updates",
        "threading.current_thread",
        "multiprocessing.pool.Pool._maintain_pool"
    ],
    "multiprocessing.pool.Pool._maintain_pool": [
        "multiprocessing.pool.Pool._join_exited_workers",
        "multiprocessing.pool.Pool._repopulate_pool_static"
    ],
    "multiprocessing.pool.Pool._join_exited_workers": [
        "multiprocessing.util.debug",
        "<builtin>.reversed",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "multiprocessing.pool.Pool._wait_for_updates": [
        "multiprocessing.connection.wait"
    ],
    "multiprocessing.pool.Pool._handle_tasks": [
        "<builtin>.iter",
        "threading.current_thread",
        "multiprocessing.util.debug"
    ],
    "asyncio.futures._chain_future._call_check_cancel": [
        "asyncio.tasks.Task.cancel"
    ],
    "random.SystemRandom.seed": [],
    "random.SystemRandom.random": [],
    "random.Random.uniform": [
        "random.SystemRandom.random"
    ],
    "random.Random.expovariate": [
        "random.SystemRandom.random"
    ],
    "random.Random.paretovariate": [
        "random.SystemRandom.random"
    ],
    "random.Random.weibullvariate": [
        "random.SystemRandom.random"
    ],
    "pygments.lexer.ProfilingRegexLexerMeta._process_regex.match_func": [
        "pathlib.PurePath.match"
    ],
    "importlib.metadata.Distribution.locate_file": [],
    "importlib_metadata.EntryPoint.module": [
        "pathlib.PurePath.match"
    ],
    "importlib_metadata.EntryPoint.attr": [
        "pathlib.PurePath.match"
    ],
    "importlib_metadata.Distribution.locate_file": [],
    "pkg_resources.extern.jaraco.functools.retry.decorate.wrapper": [
        "pkg_resources.extern.jaraco.functools.retry_call"
    ],
    "pkg_resources.extern.jaraco.functools.except_.decorate.wrapper": [
        "<builtin>.eval"
    ],
    "textual.widgets._header.Header.__rich_repr__": [],
    "textual.scrollbar.ScrollBar.__rich_repr__": [],
    "textual.widgets._footer.Footer.__rich_repr__": [],
    "http.cookies.Morsel.set": [
        "<map>",
        "<list>"
    ],
    "tarfile._FileInFile.seekable": [
        "bz2.BZ2File.seekable",
        "gzip.GzipFile.seekable",
        "lzma.LZMAFile.seekable"
    ],
    "concurrent.futures.process.ProcessPoolExecutor._start_queue_management_thread.weakref_cb": [
        "concurrent.futures.process._ThreadWakeup.wakeup",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.connection.Connection._close": [],
    "multiprocessing.connection.ConnectionWrapper.send": [
        "multiprocessing.connection._xml_dumps",
        "multiprocessing.connection._ConnectionBase.send_bytes"
    ],
    "multiprocessing.connection._xml_dumps": [],
    "multiprocessing.connection.ConnectionWrapper.recv": [
        "multiprocessing.connection._ConnectionBase.recv_bytes",
        "multiprocessing.connection._xml_loads"
    ],
    "multiprocessing.connection._xml_loads": [],
    "multiprocessing.util.Finalize.cancel": [],
    "concurrent.futures.thread.ThreadPoolExecutor._adjust_thread_count.weakref_cb": [
        "queue._PySimpleQueue.put"
    ],
    "uuid._load_system_functions._generate_time_safe": [
        "ctypes.create_string_buffer",
        "<builtin>.bytes"
    ],
    "xml.dom.minidom.ProcessingInstruction.writexml": [],
    "xml.dom.minidom.DocumentType.writexml": [],
    "xml.dom.minidom.Document.writexml": [],
    "xml.dom.minidom.Childless.insertBefore": [],
    "xml.dom.minidom.Attr.unlink": [],
    "xml.dom.minidom.Text.replaceWholeText": [
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Document.removeChild",
        "xml.dom.minidom.Node.removeChild",
        "xml.dom.minidom.Entity.removeChild"
    ],
    "gzip.open": [
        "<builtin>.isinstance",
        "<str>.replace",
        "<builtin>.TypeError",
        "gzip.GzipFile.__init__",
        "_io.TextIOWrapper",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "gzip._PaddedFile.read": [
        "gzip.GzipFile.read"
    ],
    "gzip._PaddedFile.prepend": [
        "<builtin>.len"
    ],
    "gzip._PaddedFile.seek": [
        "gzip.GzipFile.seek"
    ],
    "gzip.GzipFile.filename": [
        "warnings",
        "warnings.warn"
    ],
    "gzip.GzipFile.__repr__": [
        "<builtin>.hex",
        "<builtin>.repr",
        "<builtin>.id"
    ],
    "gzip.GzipFile.read1": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.peek": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.flush": [
        "gzip.GzipFile.flush",
        "_compression.BaseStream._check_not_closed",
        "gzip.GzipFile.write"
    ],
    "gzip.GzipFile.fileno": [
        "gzip.GzipFile.fileno"
    ],
    "gzip.GzipFile.rewind": [
        "<builtin>.OSError"
    ],
    "gzip.GzipFile.readline": [
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip._GzipReader._read_exact": [
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "gzip._GzipReader._read_gzip_header": [
        "gzip._GzipReader._read_exact"
    ],
    "gzip._GzipReader.read": [
        "<builtin>.EOFError",
        "<builtin>.len",
        "gzip._GzipReader._read_gzip_header",
        "gzip._GzipReader._read_eof",
        "gzip._GzipReader._add_read_data",
        "gzip._GzipReader._init_read"
    ],
    "gzip._GzipReader._read_eof": [
        "<builtin>.hex",
        "gzip._GzipReader._read_exact"
    ],
    "gzip._GzipReader._init_read": [],
    "gzip._GzipReader._add_read_data": [
        "<builtin>.len"
    ],
    "gzip._GzipReader._rewind": [
        "<builtin>.super"
    ],
    "gzip.compress": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO"
    ],
    "gzip.decompress": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO"
    ],
    "multiprocessing.managers.rebuild_as_list": [
        "<builtin>.list"
    ],
    "multiprocessing.managers.dispatch": [
        "multiprocessing.managers.convert_to_error"
    ],
    "multiprocessing.managers.convert_to_error": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "multiprocessing.managers.RemoteError.__str__": [
        "<builtin>.str"
    ],
    "multiprocessing.managers.all_methods": [
        "<builtin>.callable",
        "<builtin>.dir",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "multiprocessing.managers.public_methods": [
        "multiprocessing.managers.all_methods"
    ],
    "multiprocessing.managers.Server.__init__": [
        "_thread.allocate_lock",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "multiprocessing.managers.Server.serve_forever": [
        "threading.Event.is_set",
        "threading.Event.wait",
        "multiprocessing.process.current_process",
        "threading.Event.__init__",
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "multiprocessing.managers.Server.accepter": [
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "multiprocessing.managers.Server.handle_request": [
        "multiprocessing.connection.deliver_challenge",
        "multiprocessing.util.info",
        "traceback.format_exc",
        "multiprocessing.connection.answer_challenge",
        "<builtin>.getattr"
    ],
    "multiprocessing.managers.Server.serve_client": [
        "threading.Event.is_set",
        "multiprocessing.util.debug",
        "traceback.format_exc",
        "multiprocessing.util.info",
        "<builtin>.AttributeError",
        "<builtin>.type",
        "<builtin>.getattr",
        "threading.current_thread"
    ],
    "multiprocessing.managers.Server.fallback_str": [
        "<builtin>.str"
    ],
    "multiprocessing.managers.Server.fallback_repr": [
        "<builtin>.repr"
    ],
    "multiprocessing.managers.Server.number_of_objects": [
        "<builtin>.len"
    ],
    "multiprocessing.managers.Server.shutdown": [
        "traceback",
        "multiprocessing.util.debug",
        "traceback.print_exc"
    ],
    "multiprocessing.managers.Server.create": [
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "multiprocessing.managers.Server.incref",
        "<builtin>.len",
        "warnings.warn"
    ],
    "multiprocessing.managers.Server.incref": [],
    "multiprocessing.managers.Server.get_methods": [
        "<builtin>.tuple"
    ],
    "multiprocessing.managers.Server.accept_connection": [
        "threading.current_thread",
        "multiprocessing.managers.Server.serve_client"
    ],
    "multiprocessing.managers.Server.decref": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.BaseManager.__init__": [
        "get_context",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.managers.BaseManager.get_server": [
        "multiprocessing.managers.Server.__init__"
    ],
    "multiprocessing.managers.BaseManager.connect": [
        "multiprocessing.managers.dispatch"
    ],
    "multiprocessing.managers.BaseManager._run_server": [
        "multiprocessing.util.info",
        "signal.signal",
        "multiprocessing.managers.Server.serve_forever",
        "multiprocessing.managers.Server.__init__"
    ],
    "multiprocessing.managers.BaseManager._create": [
        "multiprocessing.managers.dispatch",
        "multiprocessing.managers.Token.__init__"
    ],
    "multiprocessing.managers.Token.__init__": [],
    "multiprocessing.managers.BaseManager._debug_info": [
        "multiprocessing.managers.dispatch"
    ],
    "multiprocessing.managers.BaseManager._number_of_objects": [
        "multiprocessing.managers.dispatch"
    ],
    "multiprocessing.managers.BaseManager.__enter__": [
        "multiprocessing.managers.BaseManager.start"
    ],
    "multiprocessing.managers.BaseManager.__exit__": [
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.managers.BaseManager._finalize_manager": [
        "multiprocessing.util.info",
        "multiprocessing.managers.dispatch",
        "<builtin>.hasattr"
    ],
    "multiprocessing.managers.ProcessLocalSet.__init__": [
        "multiprocessing.util.register_after_fork"
    ],
    "multiprocessing.managers.ProcessLocalSet.__reduce__": [
        "<builtin>.type"
    ],
    "multiprocessing.managers.BaseProxy.__init__": [
        "multiprocessing.util.register_after_fork",
        "multiprocessing.managers.BaseProxy._incref",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.managers.BaseProxy._incref": [
        "multiprocessing.util.debug",
        "multiprocessing.managers.dispatch",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.managers.BaseProxy._connect": [
        "multiprocessing.managers.dispatch",
        "multiprocessing.util.debug",
        "threading.current_thread",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.managers.BaseProxy._callmethod": [
        "multiprocessing.managers.BaseProxy._connect",
        "multiprocessing.managers.convert_to_error",
        "multiprocessing.util.debug",
        "multiprocessing.managers.dispatch",
        "threading.current_thread"
    ],
    "multiprocessing.managers.BaseProxy._getvalue": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BaseProxy._decref": [
        "multiprocessing.util.debug",
        "multiprocessing.managers.dispatch",
        "threading.current_thread",
        "<builtin>.hasattr"
    ],
    "multiprocessing.managers.BaseProxy._after_fork": [
        "multiprocessing.managers.BaseProxy._incref",
        "multiprocessing.util.info"
    ],
    "multiprocessing.managers.BaseProxy.__reduce__": [
        "multiprocessing.context.get_spawning_popen",
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "multiprocessing.managers.BaseProxy.__deepcopy__": [
        "multiprocessing.managers.BaseProxy._getvalue"
    ],
    "multiprocessing.managers.BaseProxy.__repr__": [
        "<builtin>.id",
        "<builtin>.type"
    ],
    "multiprocessing.managers.BaseProxy.__str__": [
        "multiprocessing.managers.BaseProxy._callmethod",
        "<builtin>.repr"
    ],
    "multiprocessing.managers.RebuildProxy": [
        "multiprocessing.util.debug",
        "<builtin>.getattr",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.managers.AutoProxy": [
        "multiprocessing.managers.MakeProxyType",
        "multiprocessing.managers.dispatch",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.managers.Namespace.__repr__": [
        "<list>.sort",
        "<builtin>.list",
        "<list>.append"
    ],
    "multiprocessing.managers.Value.__repr__": [
        "<builtin>.type"
    ],
    "multiprocessing.managers.IteratorProxy.__next__": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.IteratorProxy.send": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.IteratorProxy.throw": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.IteratorProxy.close": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.AcquirerProxy.acquire": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.AcquirerProxy.release": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.AcquirerProxy.__enter__": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.AcquirerProxy.__exit__": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ConditionProxy.wait": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ConditionProxy.notify": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ConditionProxy.notify_all": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ConditionProxy.wait_for": [
        "multiprocessing.managers.ConditionProxy.wait"
    ],
    "multiprocessing.managers.EventProxy.is_set": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.EventProxy.set": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.EventProxy.clear": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.EventProxy.wait": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.wait": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.abort": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.reset": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.parties": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.n_waiting": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.broken": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ValueProxy.get": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ValueProxy.set": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BaseManager.register.temp": [
        "multiprocessing.managers.AutoProxy",
        "multiprocessing.util.debug",
        "multiprocessing.managers.dispatch",
        "multiprocessing.managers.BaseManager._create"
    ],
    "multiprocessing.managers._SharedMemoryTracker.register_segment": [
        "multiprocessing.util.debug",
        "<list>.append"
    ],
    "multiprocessing.managers._SharedMemoryTracker.destroy_segment": [
        "multiprocessing.util.debug",
        "multiprocessing.shared_memory.SharedMemory.close",
        "multiprocessing.shared_memory.SharedMemory.unlink",
        "<list>.remove",
        "multiprocessing.shared_memory.SharedMemory.__init__"
    ],
    "multiprocessing.shared_memory.SharedMemory.__init__": [
        "<builtin>.memoryview",
        "multiprocessing.shared_memory._make_filename",
        "multiprocessing.resource_tracker.ResourceTracker.register",
        "multiprocessing.shared_memory.SharedMemory.unlink",
        "multiprocessing.resource_tracker",
        "<builtin>.FileExistsError",
        "<builtin>.ValueError"
    ],
    "multiprocessing.shared_memory._make_filename": [
        "secrets.token_hex",
        "<builtin>.len"
    ],
    "secrets.token_hex": [
        "secrets.token_bytes"
    ],
    "secrets.token_bytes": [],
    "multiprocessing.shared_memory.SharedMemory.unlink": [
        "multiprocessing.resource_tracker",
        "multiprocessing.resource_tracker.ResourceTracker.unregister"
    ],
    "multiprocessing.resource_tracker.ResourceTracker.unregister": [
        "multiprocessing.resource_tracker.ResourceTracker._send"
    ],
    "multiprocessing.shared_memory.SharedMemory.close": [],
    "multiprocessing.managers._SharedMemoryTracker.unlink": [
        "multiprocessing.managers._SharedMemoryTracker.destroy_segment"
    ],
    "multiprocessing.managers._SharedMemoryTracker.__del__": [
        "multiprocessing.util.debug",
        "multiprocessing.managers._SharedMemoryTracker.unlink"
    ],
    "multiprocessing.managers._SharedMemoryTracker.__setstate__": [
        "multiprocessing.managers._SharedMemoryTracker.__init__"
    ],
    "multiprocessing.managers._SharedMemoryTracker.__init__": [],
    "multiprocessing.managers.SharedMemoryServer.__init__": [
        "multiprocessing.util.debug",
        "multiprocessing.managers._SharedMemoryTracker.__init__",
        "<builtin>.isinstance",
        "multiprocessing.managers.Server.__init__"
    ],
    "multiprocessing.managers.SharedMemoryServer.create": [
        "multiprocessing.managers.Server.create",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.len"
    ],
    "multiprocessing.managers.SharedMemoryServer.shutdown": [
        "multiprocessing.managers.Server.shutdown",
        "multiprocessing.managers._SharedMemoryTracker.unlink"
    ],
    "multiprocessing.managers.SharedMemoryServer.track_segment": [
        "multiprocessing.managers._SharedMemoryTracker.register_segment"
    ],
    "multiprocessing.managers.SharedMemoryServer.release_segment": [
        "multiprocessing.managers._SharedMemoryTracker.destroy_segment"
    ],
    "multiprocessing.managers.SharedMemoryManager.__init__": [
        "multiprocessing.managers.BaseManager.__init__",
        "multiprocessing.resource_tracker.ResourceTracker.ensure_running",
        "multiprocessing.util.debug",
        "multiprocessing.resource_tracker"
    ],
    "multiprocessing.managers.SharedMemoryManager.__del__": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.SharedMemoryManager.get_server": [
        "multiprocessing.managers.SharedMemoryServer.__init__"
    ],
    "multiprocessing.managers.SharedMemoryManager.SharedMemory": [
        "multiprocessing.managers.dispatch",
        "multiprocessing.shared_memory.SharedMemory.unlink",
        "multiprocessing.shared_memory.SharedMemory.__init__"
    ],
    "multiprocessing.managers.SharedMemoryManager.ShareableList": [
        "multiprocessing.managers.dispatch",
        "multiprocessing.shared_memory.ShareableList.__init__",
        "multiprocessing.shared_memory.SharedMemory.unlink"
    ],
    "multiprocessing.shared_memory.ShareableList.__init__": [
        "<builtin>.sum",
        "<builtin>.isinstance",
        "<builtin>.int",
        "multiprocessing.shared_memory.ShareableList._extract_recreation_code",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.len",
        "multiprocessing.shared_memory.SharedMemory.__init__"
    ],
    "multiprocessing.shared_memory.ShareableList._extract_recreation_code": [
        "<builtin>.isinstance"
    ],
    "multiprocessing.pool.mapstar": [
        "<builtin>.list",
        "<builtin>.map"
    ],
    "multiprocessing.pool.starmapstar": [
        "<builtin>.list"
    ],
    "multiprocessing.pool.ExceptionWithTraceback.__init__": [
        "traceback.format_exception",
        "<builtin>.type"
    ],
    "multiprocessing.pool.rebuild_exc": [
        "multiprocessing.pool.RemoteTraceback.__init__"
    ],
    "multiprocessing.pool.RemoteTraceback.__init__": [],
    "multiprocessing.pool.MaybeEncodingError.__init__": [
        "<builtin>.super",
        "<builtin>.repr"
    ],
    "multiprocessing.pool.worker": [
        "<builtin>.isinstance",
        "multiprocessing.util.debug",
        "<builtin>.AssertionError",
        "multiprocessing.pool.MaybeEncodingError.__init__",
        "multiprocessing.pool.ExceptionWithTraceback.__init__",
        "<builtin>.hasattr"
    ],
    "multiprocessing.pool._PoolCache.__delitem__": [
        "<builtin>.super"
    ],
    "multiprocessing.pool.Pool.__del__": [
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "multiprocessing.pool.Pool.__repr__": [
        "<builtin>.len"
    ],
    "multiprocessing.pool.Pool._get_worker_sentinels": [
        "<builtin>.hasattr"
    ],
    "multiprocessing.pool.Pool._check_running": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.pool.Pool.apply": [
        "multiprocessing.pool.ApplyResult.get",
        "multiprocessing.pool.Pool.apply_async"
    ],
    "multiprocessing.pool.Pool.apply_async": [
        "multiprocessing.pool.ApplyResult.__init__",
        "queue._PySimpleQueue.put",
        "multiprocessing.pool.Pool._check_running"
    ],
    "multiprocessing.pool.ApplyResult.__init__": [
        "threading.Event.__init__",
        "<builtin>.next"
    ],
    "multiprocessing.pool.ApplyResult.get": [
        "multiprocessing.pool.ApplyResult.wait",
        "multiprocessing.pool.ApplyResult.ready"
    ],
    "multiprocessing.pool.ApplyResult.wait": [
        "threading.Event.wait"
    ],
    "multiprocessing.pool.ApplyResult.ready": [
        "threading.Event.is_set"
    ],
    "apply.get": [
        "TimeoutError"
    ],
    "TimeoutError": [],
    "multiprocessing.pool.Pool.map": [
        "multiprocessing.pool.ApplyResult.get",
        "multiprocessing.pool.Pool._map_async"
    ],
    "multiprocessing.pool.Pool._map_async": [
        "queue._PySimpleQueue.put",
        "<builtin>.list",
        "multiprocessing.pool.Pool._guarded_task_generation",
        "multiprocessing.pool.Pool._check_running",
        "<builtin>.len",
        "<builtin>.divmod",
        "multiprocessing.pool.MapResult.__init__",
        "<builtin>.hasattr",
        "multiprocessing.pool.Pool._get_tasks"
    ],
    "multiprocessing.pool.Pool._get_tasks": [
        "<builtin>.iter",
        "<builtin>.tuple"
    ],
    "multiprocessing.pool.MapResult.__init__": [
        "multiprocessing.pool.ApplyResult.__init__",
        "<builtin>.bool",
        "threading.Event.set"
    ],
    "multiprocessing.pool.Pool._guarded_task_generation": [
        "<builtin>.enumerate"
    ],
    "multiprocessing.pool.Pool.starmap": [
        "multiprocessing.pool.ApplyResult.get",
        "multiprocessing.pool.Pool._map_async"
    ],
    "multiprocessing.pool.Pool.starmap_async": [
        "multiprocessing.pool.Pool._map_async"
    ],
    "multiprocessing.pool.Pool.imap": [
        "queue._PySimpleQueue.put",
        "multiprocessing.pool.Pool._guarded_task_generation",
        "multiprocessing.pool.IMapIterator.__init__",
        "multiprocessing.pool.Pool._check_running",
        "multiprocessing.pool.Pool._get_tasks",
        "<builtin>.ValueError"
    ],
    "multiprocessing.pool.IMapIterator.__init__": [
        "_thread.allocate_lock",
        "<builtin>.next",
        "threading.Condition.__init__",
        "_collections.deque"
    ],
    "multiprocessing.pool.Pool.imap_unordered": [
        "queue._PySimpleQueue.put",
        "multiprocessing.pool.Pool._guarded_task_generation",
        "multiprocessing.pool.Pool._check_running",
        "multiprocessing.pool.Pool._get_tasks",
        "<builtin>.ValueError"
    ],
    "multiprocessing.pool.Pool.map_async": [
        "multiprocessing.pool.Pool._map_async"
    ],
    "multiprocessing.pool.Pool.__reduce__": [
        "<builtin>.NotImplementedError"
    ],
    "multiprocessing.pool.Pool.close": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.pool.Pool.terminate": [
        "multiprocessing.util.debug",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.pool.Pool.join": [
        "multiprocessing.util.debug",
        "<builtin>.ValueError",
        "threading.Thread.join"
    ],
    "multiprocessing.pool.Pool._help_stuff_finish": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.pool.Pool._terminate_pool": [
        "multiprocessing.pool.ThreadPool._help_stuff_finish",
        "multiprocessing.util.debug",
        "multiprocessing.pool.Pool._help_stuff_finish",
        "<builtin>.len",
        "threading.current_thread",
        "<builtin>.AssertionError",
        "<builtin>.hasattr"
    ],
    "multiprocessing.pool.Pool.__enter__": [
        "multiprocessing.pool.Pool._check_running"
    ],
    "multiprocessing.pool.Pool.__exit__": [
        "multiprocessing.pool.Pool.terminate"
    ],
    "multiprocessing.pool.ApplyResult.successful": [
        "<builtin>.ValueError",
        "multiprocessing.pool.ApplyResult.ready"
    ],
    "get": [
        "TimeoutError"
    ],
    "multiprocessing.pool.ApplyResult._set": [
        "multiprocessing.pool.Pool.__init__",
        "threading.Event.set",
        "multiprocessing.pool.ThreadPool.__init__"
    ],
    "multiprocessing.pool.MapResult._set": [
        "multiprocessing.pool.Pool.__init__",
        "threading.Event.set",
        "multiprocessing.pool.ThreadPool.__init__"
    ],
    "multiprocessing.dummy": [
        "array",
        "multiprocessing.dummy.Value",
        "threading",
        "multiprocessing.dummy.DummyProcess",
        "multiprocessing.dummy.connection",
        "multiprocessing.dummy.Namespace",
        "weakref.WeakKeyDictionary.__init__",
        "queue",
        "weakref",
        "threading.current_thread"
    ],
    "multiprocessing.pool.ThreadPool.Process": [
        "multiprocessing.dummy.DummyProcess.__init__",
        "multiprocessing.dummy"
    ],
    "multiprocessing.dummy.connection": [
        "queue",
        "multiprocessing.dummy.connection.Listener",
        "multiprocessing.dummy.connection.Connection"
    ],
    "multiprocessing.dummy.connection.Listener": [
        "<builtin>.property"
    ],
    "multiprocessing.dummy.connection.Connection": [],
    "multiprocessing.dummy.DummyProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.dummy.Namespace": [],
    "multiprocessing.dummy.Value": [
        "<builtin>.property"
    ],
    "multiprocessing.dummy.DummyProcess.__init__": [
        "weakref.WeakKeyDictionary.__init__",
        "threading.current_thread",
        "threading.Thread.__init__"
    ],
    "multiprocessing.pool.ThreadPool.__init__": [
        "multiprocessing.pool.Pool.__init__"
    ],
    "multiprocessing.pool.ThreadPool._setup_queues": [
        "queue._PySimpleQueue.__init__"
    ],
    "multiprocessing.pool.ThreadPool._help_stuff_finish": [
        "<builtin>.range"
    ],
    "multiprocessing.shared_memory.SharedMemory.__del__": [
        "multiprocessing.shared_memory.SharedMemory.close"
    ],
    "multiprocessing.shared_memory.SharedMemory.name": [
        "<str>.startswith"
    ],
    "multiprocessing.shared_memory.ShareableList._get_packing_format": [
        "<builtin>.IndexError"
    ],
    "multiprocessing.shared_memory.ShareableList._get_back_transform": [
        "<builtin>.IndexError"
    ],
    "multiprocessing.shared_memory.ShareableList._set_packing_format_and_transform": [
        "<builtin>.IndexError",
        "multiprocessing.shared_memory.ShareableList._extract_recreation_code"
    ],
    "multiprocessing.shared_memory.ShareableList.__getitem__": [
        "multiprocessing.shared_memory.ShareableList._get_back_transform",
        "<builtin>.sum",
        "<builtin>.IndexError",
        "multiprocessing.shared_memory.ShareableList._get_packing_format"
    ],
    "multiprocessing.shared_memory.ShareableList.__setitem__": [
        "<builtin>.sum",
        "<builtin>.isinstance",
        "multiprocessing.shared_memory.ShareableList._get_packing_format",
        "<builtin>.IndexError",
        "multiprocessing.shared_memory.ShareableList._set_packing_format_and_transform",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "multiprocessing.shared_memory.ShareableList.__repr__": [
        "<builtin>.list"
    ],
    "multiprocessing.shared_memory.ShareableList.format": [
        "<builtin>.range",
        "multiprocessing.shared_memory.ShareableList._get_packing_format"
    ],
    "multiprocessing.shared_memory.ShareableList._offset_packing_formats": [
        "<builtin>.sum"
    ],
    "multiprocessing.shared_memory.ShareableList.count": [
        "<builtin>.sum"
    ],
    "multiprocessing.shared_memory.ShareableList.index": [
        "<builtin>.enumerate"
    ],
    "secrets.randbelow": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.ValueError"
    ],
    "secrets.token_urlsafe": [
        "base64.urlsafe_b64encode",
        "secrets.token_bytes"
    ],
    "multiprocessing.synchronize.SemLock._cleanup": [
        "multiprocessing.resource_tracker",
        "multiprocessing.resource_tracker.ResourceTracker.unregister"
    ],
    "multiprocessing.synchronize.SemLock.__getstate__": [
        "multiprocessing.context.assert_spawning",
        "multiprocessing.context.get_spawning_popen"
    ],
    "multiprocessing.synchronize.SemLock.__setstate__": [
        "multiprocessing.util.debug",
        "multiprocessing.synchronize.SemLock._make_methods"
    ],
    "multiprocessing.synchronize.Lock.__repr__": [
        "threading.current_thread",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.synchronize.RLock.__repr__": [
        "threading.current_thread",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.synchronize.Condition.__getstate__": [
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.synchronize.Condition.__setstate__": [
        "multiprocessing.synchronize.Condition._make_methods"
    ],
    "multiprocessing.synchronize.Condition.wait": [
        "<builtin>.range"
    ],
    "multiprocessing.synchronize.Condition.notify": [
        "<builtin>.range"
    ],
    "multiprocessing.synchronize.Condition.notify_all": [
        "multiprocessing.synchronize.Condition.notify"
    ],
    "multiprocessing.synchronize.Condition.wait_for": [
        "multiprocessing.synchronize.Condition.wait"
    ],
    "multiprocessing.resource_tracker.ResourceTracker.getfd": [
        "multiprocessing.resource_tracker.ResourceTracker.ensure_running"
    ],
    "multiprocessing.resource_tracker.main": [
        "signal.pthread_sigmask",
        "<builtin>.set",
        "<map>.keys",
        "signal.signal",
        "<builtin>.open",
        "<map>.get",
        "<builtin>.RuntimeError",
        "<builtin>.ValueError"
    ],
    "multiprocessing.spawn.import_main_path": [
        "multiprocessing.spawn._fixup_main_from_path"
    ],
    "runpy._ModifiedArgv0.__enter__": [
        "<builtin>.RuntimeError"
    ],
    "multiprocessing.heap.Arena.__init__": [
        "tempfile.mkstemp",
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.heap.Arena._choose_dir"
    ],
    "multiprocessing.heap.Arena._choose_dir": [
        "multiprocessing.util.get_temp_dir"
    ],
    "multiprocessing.heap.reduce_arena": [
        "multiprocessing.reduction.DupFd",
        "<builtin>.ValueError"
    ],
    "multiprocessing.heap.rebuild_arena": [
        "multiprocessing.heap.Arena.__init__"
    ],
    "multiprocessing.heap.Heap._new_arena": [
        "multiprocessing.heap.Arena.__init__",
        "multiprocessing.heap.Heap._roundup",
        "multiprocessing.util.info",
        "<list>.append",
        "<builtin>.max"
    ],
    "multiprocessing.heap.Heap._roundup": [],
    "multiprocessing.heap.Heap._discard_arena": [
        "<list>.remove"
    ],
    "multiprocessing.heap.Heap._malloc": [
        "multiprocessing.heap.Heap._new_arena",
        "<builtin>.len",
        "bisect.bisect_left"
    ],
    "multiprocessing.heap.Heap._add_free_block": [
        "bisect.insort_right"
    ],
    "multiprocessing.heap.Heap._absorb": [
        "<list>.remove"
    ],
    "multiprocessing.heap.Heap._remove_allocated_block": [
        "multiprocessing.heap.Heap._discard_arena"
    ],
    "multiprocessing.heap.Heap._free_pending_blocks": [
        "<list>.pop",
        "multiprocessing.heap.Heap._add_free_block",
        "multiprocessing.heap.Heap._remove_allocated_block"
    ],
    "multiprocessing.heap.Heap.free": [
        "multiprocessing.heap.Heap._free_pending_blocks",
        "multiprocessing.heap.Heap._add_free_block",
        "multiprocessing.heap.Heap._remove_allocated_block",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "multiprocessing.sharedctypes.copy": [
        "<builtin>.type",
        "multiprocessing.sharedctypes._new_value"
    ],
    "multiprocessing.sharedctypes.reduce_ctype": [
        "multiprocessing.context.assert_spawning",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "multiprocessing.sharedctypes.SynchronizedBase.__init__": [
        "get_context"
    ],
    "multiprocessing.sharedctypes.SynchronizedBase.__reduce__": [
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.sharedctypes.SynchronizedBase.__repr__": [
        "<builtin>.type"
    ],
    "multiprocessing.sharedctypes.SynchronizedArray.__len__": [
        "<builtin>.len"
    ],
    "multiprocessing.forkserver.ForkServer._stop_unlocked": [
        "multiprocessing.util.is_abstract_socket_namespace"
    ],
    "multiprocessing.forkserver.ForkServer.connect_to_new_process": [
        "<builtin>.len",
        "multiprocessing.reduction.sendfds",
        "socket.socket.__init__",
        "<builtin>.ValueError",
        "multiprocessing.forkserver.ForkServer.ensure_running"
    ],
    "multiprocessing.forkserver.ForkServer.ensure_running": [],
    "multiprocessing.forkserver.main": [
        "selectors.KqueueSelector.__init__",
        "multiprocessing.spawn.import_main_path",
        "multiprocessing.process.current_process",
        "<map>.pop",
        "multiprocessing.forkserver._serve_one",
        "rich.file_proxy.FileProxy.flush",
        "multiprocessing.reduction.recvfds",
        "multiprocessing.forkserver.write_signed",
        "multiprocessing.util._close_stdin",
        "<builtin>.RuntimeError",
        "socket.socket.__init__",
        "warnings.warn",
        "<map>.items",
        "<list>.extend",
        "signal.signal",
        "selectors.SelectSelector.__init__",
        "<builtin>.__import__",
        "<builtin>.len",
        "<builtin>.AssertionError"
    ],
    "multiprocessing.forkserver.write_signed": [
        "<builtin>.RuntimeError"
    ],
    "multiprocessing.forkserver._serve_one": [
        "multiprocessing.spawn._main",
        "signal.signal"
    ],
    "multiprocessing.forkserver.read_signed": [
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "multiprocessing.popen_spawn_win32.Popen.duplicate_for_child": [
        "multiprocessing.context.get_spawning_popen",
        "multiprocessing.reduction.duplicate"
    ],
    "multiprocessing.popen_spawn_win32.Popen.wait": [
        "<builtin>.max",
        "<builtin>.int"
    ],
    "multiprocessing.popen_spawn_win32.Popen.poll": [
        "multiprocessing.popen_spawn_win32.Popen.wait"
    ],
    "multiprocessing.popen_spawn_win32.Popen.terminate": [
        "multiprocessing.popen_spawn_win32.Popen.wait",
        "<builtin>.int"
    ],
    "multiprocessing.popen_fork.Popen.wait": [
        "multiprocessing.connection",
        "multiprocessing.popen_fork.Popen.poll",
        "multiprocessing.popen_forkserver.Popen.poll",
        "multiprocessing.connection.wait"
    ],
    "multiprocessing.popen_fork.Popen.poll": [],
    "multiprocessing.popen_fork.Popen._send_signal": [
        "multiprocessing.popen_fork.Popen.wait"
    ],
    "multiprocessing.popen_fork.Popen.terminate": [
        "multiprocessing.popen_fork.Popen._send_signal"
    ],
    "multiprocessing.popen_fork.Popen.kill": [
        "multiprocessing.popen_fork.Popen._send_signal"
    ],
    "multiprocessing.popen_fork.Popen.close": [
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.popen_forkserver._DupFd.detach": [
        "multiprocessing.forkserver.ForkServer.get_inherited_fds"
    ],
    "multiprocessing.forkserver.ForkServer.get_inherited_fds": [],
    "multiprocessing.popen_forkserver.Popen.duplicate_for_child": [
        "<builtin>.len",
        "<list>.append"
    ],
    "multiprocessing.popen_forkserver.Popen._launch": [
        "_io.BytesIO",
        "multiprocessing.forkserver.ForkServer.connect_to_new_process",
        "multiprocessing.spawn.get_preparation_data",
        "multiprocessing.forkserver.read_signed",
        "multiprocessing.reduction.dump",
        "multiprocessing.util.Finalize.__init__",
        "<builtin>.open",
        "multiprocessing.context.set_spawning_popen"
    ],
    "multiprocessing.popen_forkserver.Popen.poll": [
        "multiprocessing.connection",
        "multiprocessing.forkserver.read_signed",
        "multiprocessing.connection.wait"
    ],
    "multiprocessing.resource_sharer.DupFd.detach": [
        "multiprocessing.reduction.recv_handle",
        "multiprocessing.resource_sharer._ResourceSharer.get_connection"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.get_connection": [
        "multiprocessing.connection",
        "multiprocessing.connection._ConnectionBase.send",
        "multiprocessing.connection.Client",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.resource_sharer.DupSocket.__init__": [
        "multiprocessing.resource_sharer._ResourceSharer.register"
    ],
    "multiprocessing.resource_sharer.DupSocket.detach": [
        "socket.fromshare",
        "multiprocessing.resource_sharer._ResourceSharer.get_connection"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.stop": [
        "multiprocessing.connection"
    ],
    "multiprocessing.resource_sharer._ResourceSharer._afterfork": [
        "<map>.items",
        "multiprocessing.connection.Listener.close",
        "<map>.clear",
        "<list>.append",
        "_thread.allocate_lock"
    ],
    "multiprocessing.resource_sharer._ResourceSharer._start": [
        "multiprocessing.connection",
        "threading.Thread.start",
        "multiprocessing.util.debug",
        "multiprocessing.process.current_process",
        "multiprocessing.connection.Listener.__init__",
        "threading.Thread.__init__"
    ],
    "multiprocessing.resource_sharer._ResourceSharer._serve": [
        "<map>.pop",
        "signal.pthread_sigmask",
        "<map>",
        "multiprocessing.util.is_exiting",
        "multiprocessing.connection.Listener.accept",
        "signal.valid_signals",
        "<builtin>.hasattr"
    ],
    "multiprocessing.resource_sharer.DupFd.__init__.send": [
        "multiprocessing.reduction.send_handle"
    ],
    "xmlrpc.client._strftime": [
        "xmlrpc.client._iso8601_format",
        "<builtin>.isinstance"
    ],
    "xmlrpc.client._iso8601_format": [],
    "xmlrpc.client.DateTime.__init__": [
        "xmlrpc.client._strftime",
        "<builtin>.isinstance"
    ],
    "xmlrpc.client.DateTime.make_comparable": [
        "<builtin>.isinstance",
        "xmlrpc.client._iso8601_format",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.type",
        "xmlrpc.client.DateTime.timetuple"
    ],
    "xmlrpc.client.DateTime.timetuple": [],
    "xmlrpc.client.DateTime.__lt__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__le__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__gt__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__ge__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__eq__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__repr__": [
        "<builtin>.id"
    ],
    "xmlrpc.client.DateTime.decode": [
        "<builtin>.str"
    ],
    "xmlrpc.client._datetime": [
        "xmlrpc.client.DateTime.__init__",
        "xmlrpc.client.DateTime.decode"
    ],
    "xmlrpc.client.Binary.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "xmlrpc.client.Binary.__str__": [
        "<builtin>.str"
    ],
    "xmlrpc.client.Binary.__eq__": [
        "<builtin>.isinstance"
    ],
    "xmlrpc.client.Binary.decode": [
        "base64.decodebytes"
    ],
    "xmlrpc.client.Binary.encode": [
        "base64.encodebytes"
    ],
    "xmlrpc.client._binary": [
        "xmlrpc.client.Binary.decode",
        "xmlrpc.client.Binary.__init__"
    ],
    "xmlrpc.client.Marshaller.dumps": [
        "<builtin>.isinstance",
        "<list>",
        "xmlrpc.client.Marshaller.__dump"
    ],
    "xmlrpc.client.Marshaller.__dump": [
        "<map>.keys",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "xmlrpc.client.Marshaller.dump_nil": [
        "<builtin>.TypeError"
    ],
    "xmlrpc.client.Marshaller.dump_long": [
        "<builtin>.str",
        "<builtin>.OverflowError",
        "<builtin>.int"
    ],
    "xmlrpc.client.Marshaller.dump_double": [
        "<builtin>.repr"
    ],
    "xmlrpc.client.Marshaller.dump_unicode": [
        "xmlrpc.client.escape"
    ],
    "xmlrpc.client.escape": [],
    "xmlrpc.client.Marshaller.dump_bytes": [
        "base64.encodebytes"
    ],
    "xmlrpc.client.Marshaller.dump_array": [
        "<builtin>.TypeError",
        "<builtin>.id",
        "xmlrpc.client.Marshaller.__dump"
    ],
    "xmlrpc.client.Marshaller.dump_struct": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "xmlrpc.client.escape",
        "xmlrpc.client.Marshaller.__dump",
        "<builtin>.id"
    ],
    "xmlrpc.client.Marshaller.dump_datetime": [
        "xmlrpc.client._strftime"
    ],
    "xmlrpc.client.Marshaller.dump_instance": [
        "xmlrpc.client.Marshaller.dump_struct"
    ],
    "xmlrpc.client.Unmarshaller.close": [
        "<builtin>.tuple",
        "xmlrpc.client.Fault.__init__"
    ],
    "xmlrpc.client.Fault.__init__": [],
    "xmlrpc.client.Unmarshaller.start": [
        "<list>.append"
    ],
    "xmlrpc.client.Unmarshaller.data": [
        "<list>.append"
    ],
    "xmlrpc.client.Unmarshaller.end_nil": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_boolean": [
        "<builtin>.TypeError",
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_int": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_double": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_bigdecimal": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_string": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_array": [
        "<list>.pop"
    ],
    "xmlrpc.client.Unmarshaller.end_struct": [
        "<list>.pop",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "xmlrpc.client.Unmarshaller.end_base64": [
        "xmlrpc.client.Binary.decode",
        "<list>",
        "xmlrpc.client.Binary.__init__"
    ],
    "xmlrpc.client.Unmarshaller.end_dateTime": [
        "xmlrpc.client.DateTime.__init__",
        "xmlrpc.client.DateTime.decode",
        "xmlrpc.client._datetime_type",
        "<list>"
    ],
    "xmlrpc.client._datetime_type": [],
    "xmlrpc.client.Unmarshaller.end_value": [
        "xmlrpc.client.Unmarshaller.end_string"
    ],
    "xmlrpc.client._MultiCallMethod.__getattr__": [
        "xmlrpc.client._MultiCallMethod.__init__"
    ],
    "xmlrpc.client._MultiCallMethod.__init__": [],
    "xmlrpc.client.MultiCallIterator.__getitem__": [
        "<builtin>.ValueError",
        "xmlrpc.client.Fault.__init__",
        "<builtin>.type"
    ],
    "xmlrpc.client.MultiCall.__repr__": [
        "<builtin>.id"
    ],
    "xmlrpc.client.MultiCall.__getattr__": [
        "xmlrpc.client._MultiCallMethod.__init__"
    ],
    "xmlrpc.client.MultiCall.__call__": [
        "xmlrpc.client.MultiCallIterator.__init__",
        "<list>.append"
    ],
    "xmlrpc.client.MultiCallIterator.__init__": [],
    "xmlrpc.client.getparser": [
        "xmlrpc.client.ExpatParser.__init__",
        "xmlrpc.client.Unmarshaller.__init__"
    ],
    "xmlrpc.client.Unmarshaller.__init__": [],
    "xmlrpc.client.ExpatParser.__init__": [
        "xmlrpc.client.Unmarshaller.xml"
    ],
    "xmlrpc.client.Unmarshaller.xml": [],
    "xmlrpc.client.dumps": [
        "xmlrpc.client.Marshaller.dumps",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.str",
        "xmlrpc.client.Marshaller.__init__"
    ],
    "xmlrpc.client.Marshaller.__init__": [],
    "xmlrpc.client.loads": [
        "xmlrpc.client.Unmarshaller.close",
        "xmlrpc.client.getparser",
        "xmlrpc.client.ExpatParser.close",
        "xmlrpc.client.ExpatParser.feed"
    ],
    "xmlrpc.client.ExpatParser.feed": [],
    "xmlrpc.client.ExpatParser.close": [],
    "xmlrpc.client.gzip_encode": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO"
    ],
    "xmlrpc.client.gzip_decode": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "xmlrpc.client.GzipDecodedResponse.__init__": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO"
    ],
    "xmlrpc.client.GzipDecodedResponse.close": [
        "gzip.GzipFile.close"
    ],
    "xmlrpc.client._Method.__getattr__": [
        "xmlrpc.client._Method.__init__"
    ],
    "xmlrpc.client._Method.__init__": [],
    "xmlrpc.client.Transport.request": [
        "xmlrpc.client.Transport.single_request"
    ],
    "xmlrpc.client.Transport.single_request": [
        "<builtin>.dict",
        "xmlrpc.client.Transport.parse_response",
        "xmlrpc.client.ProtocolError.__init__",
        "xmlrpc.client.Transport.send_request",
        "xmlrpc.client.Transport.close"
    ],
    "xmlrpc.client.Transport.send_request": [
        "xmlrpc.client.SafeTransport.make_connection",
        "xmlrpc.client.Transport.send_headers",
        "xmlrpc.client.Transport.make_connection",
        "xmlrpc.client.Transport.send_content"
    ],
    "xmlrpc.client.Transport.make_connection": [
        "xmlrpc.client.Transport.get_host_info"
    ],
    "xmlrpc.client.Transport.get_host_info": [
        "base64.encodebytes",
        "<builtin>.isinstance"
    ],
    "xmlrpc.client.Transport.send_headers": [],
    "xmlrpc.client.Transport.send_content": [
        "<builtin>.str",
        "xmlrpc.client.gzip_encode",
        "<builtin>.len"
    ],
    "xmlrpc.client.Transport.parse_response": [
        "xmlrpc.client.GzipDecodedResponse.__init__",
        "xmlrpc.client.GzipDecodedResponse.close",
        "xmlrpc.client.Transport.getparser",
        "<builtin>.print",
        "<builtin>.repr",
        "<builtin>.hasattr"
    ],
    "xmlrpc.client.Transport.getparser": [
        "xmlrpc.client.Transport.getparser"
    ],
    "xmlrpc.client.Transport.close": [],
    "xmlrpc.client.ProtocolError.__init__": [],
    "xmlrpc.client.SafeTransport.make_connection": [
        "<builtin>.NotImplementedError",
        "<builtin>.hasattr",
        "xmlrpc.client.Transport.get_host_info"
    ],
    "xmlrpc.client.ServerProxy.__close": [
        "xmlrpc.client.Transport.close"
    ],
    "xmlrpc.client.ServerProxy.__request": [
        "xmlrpc.client.dumps",
        "<builtin>.len",
        "xmlrpc.client.Transport.request"
    ],
    "xmlrpc.client.ServerProxy.__getattr__": [
        "xmlrpc.client._Method.__init__"
    ],
    "xmlrpc.client.ServerProxy.__call__": [
        "<builtin>.AttributeError"
    ],
    "xmlrpc.client.ServerProxy.__exit__": [
        "xmlrpc.client.ServerProxy.__close"
    ],
    "ctypes.util._findLib_crle": [
        "<builtin>.dict",
        "posixpath.join",
        "subprocess.Popen.__init__",
        "ntpath.join",
        "genericpath.exists"
    ],
    "ctypes.util._num_version": [
        "<list>.insert"
    ],
    "ctypes.util._get_build_version": [
        "<builtin>.int",
        "<builtin>.len"
    ],
    "ctypes.util.find_msvcrt": [
        "importlib.machinery",
        "ctypes.util._get_build_version"
    ],
    "ctypes._aix._last_version": [
        "<builtin>.max",
        "<builtin>.reversed"
    ],
    "ctypes._aix.get_ld_header_info": [
        "re.match",
        "<list>.append"
    ],
    "ctypes._aix.get_ld_headers": [
        "ctypes._aix.get_ld_header",
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__",
        "<list>.append"
    ],
    "ctypes._aix.get_ld_header": [],
    "ctypes._aix.get_shared": [
        "<list>.append"
    ],
    "ctypes._aix.get_one_match": [
        "<builtin>.filter",
        "re.search",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "ctypes._aix.get_legacy": [
        "re.escape",
        "ctypes._aix.get_one_match"
    ],
    "ctypes._aix.get_version": [
        "re.search",
        "ctypes._aix._last_version",
        "<list>.append"
    ],
    "ctypes._aix.get_member": [
        "ctypes._aix.get_version",
        "ctypes._aix.get_legacy",
        "ctypes._aix.get_one_match"
    ],
    "ctypes._aix.get_libpaths": [
        "<list>.extend",
        "ctypes._aix.get_ld_headers"
    ],
    "ctypes._aix.find_shared": [
        "ctypes._aix.get_shared",
        "re.escape",
        "ctypes._aix.get_member",
        "ctypes._aix.get_ld_headers"
    ],
    "ctypes._aix.find_library": [
        "ctypes._aix.get_libpaths",
        "ctypes._aix.find_shared"
    ],
    "ctypes.macholib.dyld.framework_find": [
        "posixpath.join",
        "ntpath.basename",
        "ntpath.join",
        "posixpath.basename",
        "<builtin>.len",
        "ctypes.macholib.dyld.dyld_find",
        "<str>.rfind"
    ],
    "xml.dom.pulldom.PullDOM.startPrefixMapping": [
        "<builtin>.hasattr",
        "<list>.append"
    ],
    "xml.dom.pulldom.PullDOM.endPrefixMapping": [
        "<list>.pop"
    ],
    "xml.dom.pulldom.PullDOM.startElementNS": [
        "xml.dom.pulldom.PullDOM.buildDocument",
        "<builtin>.getattr",
        "<list>"
    ],
    "xml.dom.pulldom.PullDOM.buildDocument": [
        "<builtin>.AssertionError",
        "<list>"
    ],
    "xml.dom.pulldom.PullDOM.startElement": [
        "xml.dom.pulldom.PullDOM.buildDocument",
        "<list>"
    ],
    "xml.dom.pulldom.PullDOM.comment": [
        "<list>.append"
    ],
    "xml.dom.pulldom.PullDOM.processingInstruction": [
        "<list>.append"
    ],
    "xml.dom.pulldom.PullDOM.startDocument": [
        "xml.dom.minidom"
    ],
    "xml.dom.pulldom.PullDOM.endDocument": [
        "xml.dom.pulldom.PullDOM.pop"
    ],
    "xml.dom.pulldom.PullDOM.pop": [],
    "xml.dom.pulldom.ErrorHandler.warning": [
        "<builtin>.print"
    ],
    "xml.dom.pulldom.DOMEventStream.__getitem__": [
        "warnings",
        "warnings.warn",
        "xml.dom.pulldom.DOMEventStream.getEvent"
    ],
    "xml.dom.pulldom.DOMEventStream.__next__": [
        "xml.dom.pulldom.DOMEventStream.getEvent"
    ],
    "xml.dom.pulldom.DOMEventStream._slurp": [
        "xml.dom.pulldom.DOMEventStream._emit"
    ],
    "xml.dom.pulldom.DOMEventStream._emit": [],
    "xml.dom.pulldom.SAX2DOM.startElementNS": [
        "xml.dom.pulldom.PullDOM.startElementNS"
    ],
    "xml.dom.pulldom.SAX2DOM.startElement": [
        "xml.dom.pulldom.PullDOM.startElement"
    ],
    "xml.dom.pulldom.SAX2DOM.processingInstruction": [
        "xml.dom.pulldom.PullDOM.processingInstruction"
    ],
    "xml.dom.pulldom.SAX2DOM.ignorableWhitespace": [
        "xml.dom.pulldom.PullDOM.ignorableWhitespace"
    ],
    "xml.dom.pulldom.PullDOM.ignorableWhitespace": [],
    "xml.dom.pulldom.SAX2DOM.characters": [
        "xml.dom.pulldom.PullDOM.characters"
    ],
    "xml.dom.pulldom.PullDOM.characters": [],
    "xml.sax.parse": [
        "xml.sax.make_parser"
    ],
    "xml.sax.make_parser": [
        "xml.sax._create_parser",
        "<builtin>.list",
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax._create_parser": [
        "<builtin>.__import__"
    ],
    "xml.sax.parseString": [
        "xml.sax.xmlreader.InputSource.setByteStream",
        "_io.BytesIO",
        "xml.sax.xmlreader.InputSource.__init__",
        "<builtin>.isinstance",
        "xml.sax.make_parser",
        "xml.sax.xmlreader.InputSource.setCharacterStream",
        "_io.StringIO",
        "io"
    ],
    "xml.sax.xmlreader.XMLReader.parse": [
        "<builtin>.NotImplementedError"
    ],
    "xml.sax.xmlreader.XMLReader.setLocale": [
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.xmlreader.XMLReader.getFeature": [
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.xmlreader.XMLReader.setFeature": [
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.xmlreader.XMLReader.getProperty": [
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.xmlreader.XMLReader.setProperty": [
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.xmlreader.IncrementalParser.reset": [
        "<builtin>.NotImplementedError"
    ],
    "xml.sax.xmlreader.AttributesImpl.getLength": [
        "<builtin>.len"
    ],
    "xml.sax.xmlreader.AttributesImpl.getNameByQName": [
        "<builtin>.KeyError"
    ],
    "xml.sax.xmlreader.AttributesImpl.getQNameByName": [
        "<builtin>.KeyError"
    ],
    "xml.sax.xmlreader.AttributesImpl.getNames": [
        "<builtin>.list"
    ],
    "xml.sax.xmlreader.AttributesImpl.getQNames": [
        "<builtin>.list"
    ],
    "xml.sax.xmlreader.AttributesImpl.__len__": [
        "<builtin>.len"
    ],
    "xml.sax.xmlreader.AttributesImpl.keys": [
        "<builtin>.list"
    ],
    "xml.sax.xmlreader.AttributesImpl.items": [
        "<builtin>.list"
    ],
    "xml.sax.xmlreader.AttributesImpl.values": [
        "<builtin>.list"
    ],
    "xml.sax.xmlreader.AttributesNSImpl.getValueByQName": [
        "<builtin>.KeyError",
        "<map>.items"
    ],
    "xml.sax.xmlreader.AttributesNSImpl.getNameByQName": [
        "<builtin>.KeyError",
        "<map>.items"
    ],
    "xml.sax.xmlreader.AttributesNSImpl.getQNames": [
        "<builtin>.list",
        "<map>.values"
    ],
    "xml.sax.handler.ErrorHandler.warning": [
        "<builtin>.print"
    ],
    "xml.sax._exceptions.SAXException.__getitem__": [
        "<builtin>.AttributeError"
    ],
    "xml.sax._exceptions.SAXParseException.getPublicId": [
        "xml.sax.expatreader.ExpatParser.getPublicId"
    ],
    "xml.sax.expatreader.ExpatParser.getPublicId": [
        "xml.sax.xmlreader.InputSource.getPublicId",
        "xml.sax.expatreader.ExpatParser.getPublicId"
    ],
    "xml.sax.xmlreader.InputSource.getPublicId": [],
    "xml.sax._exceptions.SAXParseException.__str__": [
        "xml.sax._exceptions.SAXParseException.getSystemId",
        "xml.sax._exceptions.SAXParseException.getLineNumber",
        "xml.sax._exceptions.SAXParseException.getColumnNumber"
    ],
    "xml.sax._exceptions.SAXParseException.getSystemId": [],
    "xml.sax._exceptions.SAXParseException.getLineNumber": [],
    "xml.sax._exceptions.SAXParseException.getColumnNumber": [],
    "xml.sax.handler.ContentHandler.setDocumentLocator": [],
    "xml.sax.expatreader.ExpatLocator.getPublicId": [
        "xml.sax.xmlreader.InputSource.getPublicId",
        "xml.sax.expatreader.ExpatParser.getPublicId"
    ],
    "xml.sax.expatreader.ExpatLocator.getSystemId": [
        "xml.sax.expatreader.ExpatParser.getSystemId",
        "xml.sax.xmlreader.InputSource.getSystemId"
    ],
    "xml.sax.expatreader.ExpatParser.getFeature": [
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.expatreader.ExpatParser.setFeature": [
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.expatreader.ExpatParser.getProperty": [
        "<builtin>.hasattr",
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.expatreader.ExpatParser.setProperty": [
        "xml.sax.expatreader.ExpatParser._reset_lex_handler_prop",
        "xml.sax._exceptions.SAXException.__init__"
    ],
    "xml.sax.handler.ContentHandler.startDocument": [],
    "xml.sax.handler.ErrorHandler.fatalError": [
        "xml.sax._exceptions.SAXParseException.__init__"
    ],
    "xml.sax.handler.ContentHandler.endDocument": [],
    "xml.sax.expatreader.ExpatParser.start_element": [
        "xml.sax.handler.ContentHandler.startElement",
        "xml.sax.xmlreader.AttributesImpl.__init__"
    ],
    "xml.sax.xmlreader.AttributesImpl.__init__": [],
    "xml.sax.handler.ContentHandler.startElement": [],
    "xml.sax.expatreader.ExpatParser.end_element": [
        "xml.sax.handler.ContentHandler.endElement"
    ],
    "xml.sax.handler.ContentHandler.endElement": [],
    "xml.sax.expatreader.ExpatParser.start_element_ns": [
        "xml.sax.xmlreader.AttributesNSImpl.__init__",
        "<builtin>.tuple",
        "xml.sax.handler.ContentHandler.startElementNS",
        "<builtin>.len"
    ],
    "xml.sax.xmlreader.AttributesNSImpl.__init__": [],
    "xml.sax.handler.ContentHandler.startElementNS": [],
    "xml.sax.expatreader.ExpatParser.end_element_ns": [
        "<builtin>.tuple",
        "xml.sax.handler.ContentHandler.endElementNS",
        "<builtin>.len"
    ],
    "xml.sax.handler.ContentHandler.endElementNS": [],
    "xml.sax.expatreader.ExpatParser.processing_instruction": [
        "xml.sax.handler.ContentHandler.processingInstruction"
    ],
    "xml.sax.handler.ContentHandler.processingInstruction": [],
    "xml.sax.expatreader.ExpatParser.character_data": [
        "xml.sax.handler.ContentHandler.characters"
    ],
    "xml.sax.handler.ContentHandler.characters": [],
    "xml.sax.expatreader.ExpatParser.start_namespace_decl": [
        "xml.sax.handler.ContentHandler.startPrefixMapping"
    ],
    "xml.sax.handler.ContentHandler.startPrefixMapping": [],
    "xml.sax.expatreader.ExpatParser.end_namespace_decl": [
        "xml.sax.handler.ContentHandler.endPrefixMapping"
    ],
    "xml.sax.handler.ContentHandler.endPrefixMapping": [],
    "xml.sax.expatreader.ExpatParser.unparsed_entity_decl": [
        "xml.sax.handler.DTDHandler.unparsedEntityDecl"
    ],
    "xml.sax.handler.DTDHandler.unparsedEntityDecl": [],
    "xml.sax.expatreader.ExpatParser.notation_decl": [
        "xml.sax.handler.DTDHandler.notationDecl"
    ],
    "xml.sax.handler.DTDHandler.notationDecl": [],
    "xml.sax.expatreader.ExpatParser.external_entity_ref": [
        "xml.sax.expatreader.ExpatParser.getSystemId",
        "xml.sax.xmlreader.IncrementalParser.parse",
        "xml.sax.saxutils.prepare_input_source",
        "xml.sax.handler.EntityResolver.resolveEntity",
        "xml.sax.xmlreader.InputSource.getSystemId",
        "<list>.append"
    ],
    "xml.sax.handler.EntityResolver.resolveEntity": [],
    "xml.sax.expatreader.ExpatParser.skipped_entity_handler": [
        "xml.sax.handler.ContentHandler.skippedEntity"
    ],
    "xml.sax.handler.ContentHandler.skippedEntity": [],
    "xml.sax.saxutils.escape": [
        "<str>.replace",
        "xml.sax.saxutils.__dict_replace"
    ],
    "xml.sax.saxutils.__dict_replace": [
        "<map>.items",
        "<str>.replace"
    ],
    "xml.sax.saxutils.unescape": [
        "<str>.replace",
        "xml.sax.saxutils.__dict_replace"
    ],
    "xml.sax.saxutils.quoteattr": [
        "<str>.replace",
        "xml.sax.saxutils.escape"
    ],
    "xml.sax.saxutils._gettextwriter": [
        "xml.sax.saxutils._gettextwriter._wrapper",
        "_io.TextIOWrapper",
        "<builtin>.isinstance"
    ],
    "xml.sax.saxutils._gettextwriter._wrapper": [],
    "xml.sax.saxutils.XMLGenerator.__init__": [
        "xml.sax.handler.ContentHandler.__init__",
        "xml.sax.saxutils._gettextwriter"
    ],
    "xml.sax.saxutils.XMLGenerator._finish_pending_start_element": [
        "codecs.StreamRecoder.write",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "xml.sax.saxutils.XMLGenerator.startDocument": [
        "codecs.StreamRecoder.write",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "xml.sax.saxutils.XMLGenerator.endDocument": [
        "rich.file_proxy.FileProxy.flush",
        "<map>",
        "<list>"
    ],
    "xml.sax.saxutils.XMLGenerator.startPrefixMapping": [
        "<list>.append"
    ],
    "xml.sax.saxutils.XMLGenerator.startElement": [
        "codecs.StreamRecoder.write",
        "xml.sax.saxutils.XMLGenerator._finish_pending_start_element",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>",
        "xml.sax.saxutils.quoteattr"
    ],
    "xml.sax.saxutils.XMLGenerator.endElement": [
        "codecs.StreamRecoder.write",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "xml.sax.saxutils.XMLGenerator.startElementNS": [
        "codecs.StreamRecoder.write",
        "xml.sax.saxutils.XMLGenerator._finish_pending_start_element",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "xml.sax.saxutils.quoteattr",
        "xml.sax.saxutils.XMLGenerator._qname",
        "<list>"
    ],
    "xml.sax.saxutils.XMLGenerator._qname": [],
    "xml.sax.saxutils.XMLGenerator.endElementNS": [
        "codecs.StreamRecoder.write",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "xml.sax.saxutils.XMLGenerator._qname",
        "<list>"
    ],
    "xml.sax.saxutils.XMLGenerator.characters": [
        "codecs.StreamRecoder.write",
        "xml.sax.saxutils.XMLGenerator._finish_pending_start_element",
        "<builtin>.isinstance",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "xml.sax.saxutils.escape",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.str",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "xml.sax.saxutils.XMLGenerator.ignorableWhitespace": [
        "codecs.StreamRecoder.write",
        "xml.sax.saxutils.XMLGenerator._finish_pending_start_element",
        "<builtin>.isinstance",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "<builtin>.str",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "xml.sax.saxutils.XMLGenerator.processingInstruction": [
        "codecs.StreamRecoder.write",
        "xml.sax.saxutils.XMLGenerator._finish_pending_start_element",
        "<map>",
        "click._compat.auto_wrap_for_ansi._safe_write",
        "click._winconsole.ConsoleStream.write",
        "rich.file_proxy.FileProxy.write",
        "<list>"
    ],
    "xml.sax.saxutils.XMLFilterBase.__init__": [
        "xml.sax.xmlreader.XMLReader.__init__"
    ],
    "xml.sax.saxutils.XMLFilterBase.error": [
        "xml.sax.handler.ErrorHandler.error"
    ],
    "xml.sax.handler.ErrorHandler.error": [],
    "xml.sax.saxutils.XMLFilterBase.fatalError": [
        "xml.sax.handler.ErrorHandler.fatalError"
    ],
    "xml.sax.saxutils.XMLFilterBase.warning": [
        "xml.sax.handler.ErrorHandler.warning"
    ],
    "xml.sax.saxutils.XMLFilterBase.setDocumentLocator": [
        "xml.sax.handler.ContentHandler.setDocumentLocator"
    ],
    "xml.sax.saxutils.XMLFilterBase.startDocument": [
        "xml.sax.handler.ContentHandler.startDocument"
    ],
    "xml.sax.saxutils.XMLFilterBase.endDocument": [
        "xml.sax.handler.ContentHandler.endDocument"
    ],
    "xml.sax.saxutils.XMLFilterBase.startPrefixMapping": [
        "xml.sax.handler.ContentHandler.startPrefixMapping"
    ],
    "xml.sax.saxutils.XMLFilterBase.endPrefixMapping": [
        "xml.sax.handler.ContentHandler.endPrefixMapping"
    ],
    "xml.sax.saxutils.XMLFilterBase.startElement": [
        "xml.sax.handler.ContentHandler.startElement"
    ],
    "xml.sax.saxutils.XMLFilterBase.endElement": [
        "xml.sax.handler.ContentHandler.endElement"
    ],
    "xml.sax.saxutils.XMLFilterBase.startElementNS": [
        "xml.sax.handler.ContentHandler.startElementNS"
    ],
    "xml.sax.saxutils.XMLFilterBase.endElementNS": [
        "xml.sax.handler.ContentHandler.endElementNS"
    ],
    "xml.sax.saxutils.XMLFilterBase.characters": [
        "xml.sax.handler.ContentHandler.characters"
    ],
    "xml.sax.saxutils.XMLFilterBase.ignorableWhitespace": [
        "xml.sax.handler.ContentHandler.ignorableWhitespace"
    ],
    "xml.sax.handler.ContentHandler.ignorableWhitespace": [],
    "xml.sax.saxutils.XMLFilterBase.processingInstruction": [
        "xml.sax.handler.ContentHandler.processingInstruction"
    ],
    "xml.sax.saxutils.XMLFilterBase.skippedEntity": [
        "xml.sax.handler.ContentHandler.skippedEntity"
    ],
    "xml.sax.saxutils.XMLFilterBase.notationDecl": [
        "xml.sax.handler.DTDHandler.notationDecl"
    ],
    "xml.sax.saxutils.XMLFilterBase.unparsedEntityDecl": [
        "xml.sax.handler.DTDHandler.unparsedEntityDecl"
    ],
    "xml.sax.saxutils.XMLFilterBase.resolveEntity": [
        "xml.sax.handler.EntityResolver.resolveEntity"
    ],
    "xml.dom.expatbuilder.ElementInfo.isIdNS": [
        "xml.dom.expatbuilder.ElementInfo.isId"
    ],
    "xml.dom.expatbuilder.ElementInfo.isId": [],
    "xml.dom.expatbuilder._parse_ns_name": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.start_doctype_decl_handler": [
        "xml.dom.minidom.DOMImplementation.createDocumentType",
        "xml.dom.expatbuilder.FilterVisibilityController.acceptNode",
        "xml.dom.minidom._append_child"
    ],
    "xml.dom.expatbuilder.FilterVisibilityController.acceptNode": [
        "xml.dom.minidom.Childless.appendChild",
        "xml.dom.minidom.Node.appendChild",
        "xml.dom.minidom.Document.appendChild",
        "xml.dom.minidom.Entity.appendChild",
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.pi_handler": [
        "xml.dom.expatbuilder.FilterVisibilityController.acceptNode",
        "xml.dom.minidom._append_child",
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Document.removeChild",
        "xml.dom.minidom.Document.createProcessingInstruction",
        "xml.dom.minidom.Node.removeChild"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.character_data_handler_cdata": [
        "xml.dom.minidom._append_child",
        "xml.dom.minidom.Document.createCDATASection"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.character_data_handler": [
        "xml.dom.minidom._append_child"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.entity_decl_handler": [
        "xml.dom.minidom.Document._create_entity",
        "xml.dom.expatbuilder.FilterVisibilityController.acceptNode",
        "xml.dom.minidom.Document.createTextNode",
        "<list>.append"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.notation_decl_handler": [
        "xml.dom.minidom.Document._create_notation",
        "xml.dom.expatbuilder.FilterVisibilityController.acceptNode",
        "<list>.append"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.comment_handler": [
        "xml.dom.expatbuilder.FilterVisibilityController.acceptNode",
        "xml.dom.minidom._append_child",
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Document.removeChild",
        "xml.dom.minidom.Document.createComment",
        "xml.dom.minidom.Node.removeChild"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.first_element_handler": [
        "xml.dom.expatbuilder.ExpatBuilder.start_element_handler",
        "xml.dom.expatbuilder.ExpatBuilder.getParser",
        "xml.dom.expatbuilder.Namespaces.start_element_handler",
        "xml.dom.expatbuilder.InternalSubsetExtractor.start_element_handler"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.start_element_handler": [
        "xml.dom.minidom._append_child",
        "xml.dom.expatbuilder.ExpatBuilder._finish_start_element",
        "xml.dom.minidom.Attr.__init__",
        "xml.dom.minidom.Document.createElement",
        "<builtin>.len",
        "xml.dom.minidom._set_attribute_node",
        "<builtin>.range"
    ],
    "xml.dom.expatbuilder.ExpatBuilder._finish_start_element": [
        "xml.dom.expatbuilder.FilterVisibilityController.startContainer",
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Document.removeChild",
        "xml.dom.expatbuilder.Rejecter.__init__",
        "xml.dom.minidom.Entity.removeChild",
        "xml.dom.minidom.Node.removeChild",
        "xml.dom.minidom.Element.unlink"
    ],
    "xml.dom.expatbuilder.FilterVisibilityController.startContainer": [
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "xml.dom.expatbuilder.Rejecter.__init__": [
        "<builtin>.setattr",
        "xml.dom.expatbuilder.FilterCrutch.__init__"
    ],
    "xml.dom.expatbuilder.FilterCrutch.__init__": [],
    "xml.dom.expatbuilder.Namespaces.start_element_handler": [
        "xml.dom.minidom._append_child",
        "xml.dom.minidom.Attr.__init__",
        "xml.dom.minidom.Element._ensure_attributes",
        "xml.dom.expatbuilder._intern",
        "xml.dom.expatbuilder._parse_ns_name",
        "<builtin>.len",
        "xml.dom.minidom._set_attribute_node",
        "<builtin>.range",
        "xml.dom.minidom.Element.__init__"
    ],
    "xml.dom.expatbuilder._intern": [],
    "xml.dom.expatbuilder.ExpatBuilder.end_element_handler": [
        "xml.dom.expatbuilder.ExpatBuilder._finish_end_element"
    ],
    "xml.dom.expatbuilder.ExpatBuilder._finish_end_element": [
        "xml.dom.minidom.Attr.unlink",
        "xml.dom.expatbuilder.FilterVisibilityController.acceptNode",
        "xml.dom.minidom.Entity.removeChild",
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Document.unlink",
        "xml.dom.minidom.Document.removeChild",
        "<map>.get",
        "xml.dom.minidom.Element.unlink",
        "xml.dom.expatbuilder.ExpatBuilder._handle_white_text_nodes",
        "xml.dom.minidom.Node.removeChild",
        "xml.dom.minidom.Node.unlink"
    ],
    "xml.dom.expatbuilder.ExpatBuilder._handle_white_text_nodes": [
        "<list>.append",
        "xml.dom.minidom.Childless.removeChild",
        "xml.dom.minidom.Document.removeChild",
        "xml.dom.minidom.Entity.removeChild",
        "xml.dom.minidom.Node.removeChild"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.element_decl_handler": [
        "xml.dom.expatbuilder.ElementInfo.__init__",
        "<map>.get"
    ],
    "xml.dom.expatbuilder.ElementInfo.__init__": [],
    "xml.dom.expatbuilder.ExpatBuilder.attlist_decl_handler": [
        "xml.dom.expatbuilder.ElementInfo.__init__",
        "<map>.get",
        "<list>.append"
    ],
    "xml.dom.expatbuilder.Rejecter.end_element_handler": [
        "xml.dom.expatbuilder.ExpatBuilder.install",
        "xml.dom.expatbuilder.Namespaces.install",
        "xml.dom.expatbuilder.InternalSubsetExtractor.install"
    ],
    "xml.dom.expatbuilder.FragmentBuilder.__init__": [
        "xml.dom.expatbuilder.ExpatBuilder.__init__"
    ],
    "xml.dom.expatbuilder.FragmentBuilder.reset": [
        "xml.dom.expatbuilder.ExpatBuilder.reset"
    ],
    "xml.dom.expatbuilder.FragmentBuilder.parseFile": [
        "xml.dom.expatbuilder.FragmentBuilder.parseString"
    ],
    "xml.dom.expatbuilder.FragmentBuilder.parseString": [
        "xml.dom.expatbuilder.FragmentBuilder._getNSattrs",
        "xml.dom.expatbuilder.FragmentBuilderNS.reset",
        "xml.dom.expatbuilder.ExpatBuilder.getParser",
        "xml.dom.expatbuilder.FragmentBuilder.reset",
        "xml.dom.expatbuilder.FragmentBuilder._getDeclarations",
        "xml.dom.expatbuilder.FragmentBuilderNS._getNSattrs"
    ],
    "xml.dom.expatbuilder.FragmentBuilder._getDeclarations": [
        "<builtin>.range"
    ],
    "xml.dom.expatbuilder.FragmentBuilder._getNSattrs": [],
    "xml.dom.expatbuilder.FragmentBuilder.external_entity_ref_handler": [
        "xml.dom.expatbuilder.ExpatBuilder.external_entity_ref_handler",
        "xml.dom.minidom.Document.createDocumentFragment"
    ],
    "xml.dom.expatbuilder.ExpatBuilder.external_entity_ref_handler": [],
    "xml.dom.expatbuilder.Namespaces.start_namespace_decl_handler": [
        "<list>.append"
    ],
    "xml.dom.expatbuilder.Namespaces.end_element_handler": [
        "xml.dom.expatbuilder._parse_ns_name"
    ],
    "xml.dom.expatbuilder.FragmentBuilderNS.reset": [
        "xml.dom.expatbuilder.Namespaces._initNamespaces",
        "xml.dom.expatbuilder.FragmentBuilder.reset"
    ],
    "xml.dom.expatbuilder.FragmentBuilderNS._getNSattrs": [
        "<builtin>.hasattr",
        "<list>.append"
    ],
    "xml.dom.expatbuilder.InternalSubsetExtractor.parseFile": [
        "xml.dom.expatbuilder.ExpatBuilder.parseFile"
    ],
    "xml.dom.expatbuilder.InternalSubsetExtractor.start_doctype_decl_handler": [
        "xml.dom.expatbuilder.ExpatBuilder.getParser"
    ],
    "xml.dom.expatbuilder.InternalSubsetExtractor.end_doctype_decl_handler": [
        "<str>.replace"
    ],
    "xml.dom.expatbuilder.parseFragment": [
        "xml.dom.expatbuilder.FragmentBuilder.parseFile",
        "<builtin>.open",
        "<builtin>.isinstance",
        "xml.dom.expatbuilder.FragmentBuilder.__init__"
    ],
    "xml.dom.expatbuilder.parseFragmentString": [
        "xml.dom.expatbuilder.FragmentBuilder.parseString",
        "xml.dom.expatbuilder.FragmentBuilder.__init__"
    ],
    "xml.dom.expatbuilder.makeBuilder": [
        "xml.dom.expatbuilder.ExpatBuilder.__init__"
    ],
    "difflib.IS_LINE_JUNK": [
        "pathlib.PurePath.match",
        "<map>",
        "<list>"
    ],
    "xml.sax.saxutils._gettextwriter.<lambda1>": [],
    "asyncio.sslproto.SSLProtocol.pause_writing": [
        "asyncio.streams.FlowControlMixin.pause_writing"
    ],
    "asyncio.sslproto.SSLProtocol.resume_writing": [
        "asyncio.streams.FlowControlMixin.resume_writing"
    ],
    "asyncio.streams.StreamReaderProtocol.data_received": [],
    "asyncio.streams.StreamReaderProtocol.eof_received": [],
    "asyncio.streams.StreamWriter.write": [
        "asyncio.sslproto._SSLProtocolTransport.write"
    ],
    "asyncio.streams.StreamWriter.writelines": [
        "asyncio.transports.WriteTransport.writelines"
    ],
    "asyncio.streams.StreamWriter.write_eof": [
        "asyncio.transports.WriteTransport.write_eof"
    ],
    "asyncio.transports.WriteTransport.write_eof": [],
    "asyncio.streams.StreamWriter.can_write_eof": [
        "asyncio.sslproto._SSLProtocolTransport.can_write_eof"
    ],
    "asyncio.sslproto._SSLProtocolTransport.can_write_eof": [],
    "asyncio.streams.StreamWriter.is_closing": [
        "asyncio.sslproto._SSLProtocolTransport.is_closing"
    ],
    "asyncio.sslproto._SSLProtocolTransport.is_closing": [],
    "asyncio.streams.StreamWriter.get_extra_info": [
        "asyncio.sslproto._SSLProtocolTransport.get_extra_info"
    ],
    "xml.dom.minidom.Entity.insertBefore": [],
    "xml.dom.minidom.Entity.appendChild": [],
    "xml.dom.minidom.Entity.removeChild": [],
    "multiprocessing.pool.ThreadPool._get_sentinels": [],
    "multiprocessing.dummy.DummyProcess.start": [
        "threading.current_thread",
        "<builtin>.hasattr",
        "<builtin>.RuntimeError",
        "threading.Thread.start"
    ],
    "multiprocessing.pool.ThreadPool._wait_for_updates": [],
    "xmlrpc.client._MultiCallMethod.__call__": [
        "<list>.append"
    ],
    "xmlrpc.client._Method.__call__": [
        "xmlrpc.client.ServerProxy.__request"
    ],
    "ctypes._aix._last_version._num_version": [
        "<list>.insert"
    ],
    "xml.sax.saxutils._gettextwriter._wrapper.__getattr__": [
        "<builtin>.getattr"
    ],
    "xml.dom.expatbuilder.InternalSubsetExtractor.install": [],
    "xml.dom.expatbuilder.InternalSubsetExtractor.start_element_handler": [],
    "multiprocessing.dummy.DummyProcess.exitcode": [
        "threading.Thread.is_alive"
    ],
    "multiprocessing.dummy.active_children": [
        "threading.current_thread",
        "<builtin>.list"
    ],
    "multiprocessing.dummy.Namespace.__repr__": [
        "<list>.sort",
        "<builtin>.list",
        "<list>.append"
    ],
    "multiprocessing.dummy.Value.__repr__": [
        "<builtin>.type"
    ],
    "multiprocessing.dummy.Pool": [
        "multiprocessing.pool",
        "multiprocessing.pool.ThreadPool.__init__"
    ],
    "multiprocessing.dummy.connection.Listener.__init__": [
        "queue.Queue.__init__"
    ],
    "multiprocessing.dummy.connection.Listener.accept": [
        "queue.Queue.get",
        "multiprocessing.dummy.connection.Connection.__init__"
    ],
    "multiprocessing.dummy.connection.Connection.__init__": [],
    "multiprocessing.dummy.connection.Listener.__exit__": [
        "multiprocessing.dummy.connection.Listener.close"
    ],
    "multiprocessing.dummy.connection.Listener.close": [],
    "multiprocessing.dummy.connection.Client": [
        "queue.Queue.__init__",
        "multiprocessing.dummy.connection.Connection.__init__"
    ],
    "multiprocessing.dummy.connection.Pipe": [
        "queue.Queue.__init__",
        "multiprocessing.dummy.connection.Connection.__init__"
    ],
    "multiprocessing.dummy.connection.Connection.poll": [
        "queue.Queue.qsize"
    ],
    "queue.Queue.qsize": [],
    "multiprocessing.dummy.connection.Connection.__exit__": [
        "multiprocessing.dummy.connection.Connection.close"
    ],
    "multiprocessing.dummy.connection.Connection.close": []
}