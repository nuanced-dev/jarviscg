{
    "sqlparse.utils": [
        "re.compile",
        "contextlib",
        "contextlib.contextmanager",
        "re",
        "collections"
    ],
    "re": [
        "<builtin>.globals",
        "re.Scanner",
        "<builtin>.chr",
        "functools.singledispatchmethod.__get__._method",
        "copyreg.pickle",
        "enum",
        "re.RegexFlag",
        "copyreg",
        "functools.singledispatch.wrapper",
        "sre_compile",
        "<builtin>.type",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools",
        "sre_compile.compile",
        "sre_parse"
    ],
    "enum": [
        "enum.IntFlag",
        "types",
        "enum.EnumMeta",
        "enum.Enum",
        "enum.Flag",
        "enum.IntEnum",
        "enum.auto",
        "enum._EnumDict",
        "<builtin>.object"
    ],
    "types": [
        "<builtin>.globals",
        "types._GeneratorWrapper",
        "types.DynamicClassAttribute",
        "types._c",
        "types._g",
        "types._C",
        "types._ag",
        "types._cell_factory",
        "<builtin>.object",
        "<builtin>.type"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "<builtin>.object": [],
    "types.DynamicClassAttribute": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "<builtin>.globals": [],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum.EnumMeta": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "<builtin>.classmethod": [],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "<builtin>.classmethod",
        "types.DynamicClassAttribute.__init__"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "<builtin>.getattr": [],
    "<builtin>.bool": [],
    "enum.IntEnum": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "sre_constants",
        "<builtin>.tuple",
        "sre_parse"
    ],
    "sre_parse": [
        "<builtin>.frozenset",
        "<builtin>.ord",
        "sre_parse.SubPattern",
        "sre_constants",
        "sre_parse.State",
        "sre_parse.Verbose",
        "sre_parse.Tokenizer"
    ],
    "sre_constants": [
        "sre_constants.error",
        "sre_constants.dump",
        "sre_constants._makecodes",
        "sre_constants._NamedIntConstant",
        "<builtin>.print",
        "<builtin>.open"
    ],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<str>.strip",
        "<builtin>.enumerate",
        "<str>.split"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.enumerate": [],
    "<builtin>.open": [],
    "sre_constants.dump": [
        "<builtin>.sorted"
    ],
    "<builtin>.sorted": [],
    "<builtin>.print": [],
    "<builtin>.frozenset": [],
    "<builtin>.ord": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.tuple": [],
    "functools": [
        "functools.cached_property",
        "functools.singledispatchmethod",
        "functools.partial",
        "abc",
        "reprlib",
        "collections",
        "functools._HashedSeq",
        "functools.partialmethod",
        "<builtin>.object",
        "collections.namedtuple"
    ],
    "abc": [
        "abc.abstractstaticmethod",
        "abc.ABC",
        "_py_abc",
        "abc.abstractproperty",
        "abc.abstractclassmethod"
    ],
    "abc.abstractclassmethod": [],
    "abc.abstractstaticmethod": [],
    "abc.abstractproperty": [],
    "_py_abc": [
        "_py_abc.ABCMeta",
        "_weakrefset"
    ],
    "_weakrefset": [
        "_weakrefset.WeakSet",
        "_weakrefset._IterationGuard"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset.WeakSet": [],
    "_py_abc.ABCMeta": [],
    "abc.ABC": [],
    "collections": [
        "keyword",
        "collections._OrderedDictItemsView",
        "collections._OrderedDictKeysView",
        "collections.abc",
        "operator",
        "reprlib",
        "collections._Link",
        "collections.OrderedDict",
        "collections.UserDict",
        "collections.UserString",
        "collections.ChainMap",
        "collections.Counter",
        "heapq",
        "collections._OrderedDictValuesView",
        "collections.UserList"
    ],
    "operator": [
        "operator.itemgetter",
        "operator.attrgetter",
        "operator.methodcaller"
    ],
    "operator.attrgetter": [],
    "operator.itemgetter": [],
    "operator.methodcaller": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "heapq": [
        "doctest",
        "doctest.testmod",
        "_heapq",
        "<builtin>.print"
    ],
    "_heapq": [],
    "doctest": [
        "os",
        "doctest.DocTestFailure",
        "doctest.DocTestParser",
        "doctest.DocTestCase",
        "linecache",
        "collections",
        "doctest.register_optionflag",
        "collections.namedtuple",
        "doctest._SpoofOut",
        "inspect",
        "unittest",
        "__future__",
        "doctest.OutputChecker",
        "difflib",
        "doctest.DebugRunner",
        "doctest.DocTestRunner",
        "doctest.Example",
        "doctest.SkipDocTestCase",
        "doctest._TestClass",
        "doctest._OutputRedirectingPdb",
        "traceback",
        "doctest._DocTestSuite",
        "io",
        "doctest.DocTest",
        "doctest._test",
        "re",
        "doctest.UnexpectedException",
        "doctest.DocFileCase",
        "doctest.DocTestFinder"
    ],
    "__future__": [
        "__future__._Feature.__init__",
        "__future__._Feature"
    ],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "difflib": [
        "re.compile",
        "difflib.HtmlDiff",
        "difflib._test",
        "re",
        "collections",
        "difflib.Differ",
        "heapq",
        "difflib.SequenceMatcher",
        "collections.namedtuple"
    ],
    "collections.namedtuple": [
        "collections.<lambda1>",
        "<str>.split",
        "<str>.replace",
        "<builtin>.list",
        "<builtin>.tuple",
        "<builtin>.enumerate",
        "<builtin>.reversed",
        "<builtin>.set",
        "<builtin>.map",
        "<builtin>.repr",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.zip",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.exec",
        "_collections._tuplegetter",
        "<builtin>.classmethod",
        "<builtin>.ValueError",
        "<builtin>.dict",
        "<builtin>.isinstance"
    ],
    "difflib.SequenceMatcher": [],
    "difflib.Differ": [],
    "re.compile": [
        "re._compile"
    ],
    "difflib.HtmlDiff": [],
    "difflib._test": [
        "difflib",
        "doctest",
        "doctest.testmod"
    ],
    "doctest.testmod": [
        "<builtin>.TypeError",
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestFinder.find",
        "doctest.DocTestRunner.summarize",
        "inspect.ismodule",
        "doctest.DocTestRunner.run",
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.merge",
        "doctest.DocTestFinder.__init__"
    ],
    "inspect": [
        "os",
        "collections.abc",
        "operator",
        "linecache",
        "inspect.Signature",
        "collections",
        "dis",
        "<builtin>.hasattr",
        "<map>.items",
        "functools",
        "collections.namedtuple",
        "<builtin>.object",
        "inspect.BoundArguments",
        "inspect.BlockFinder",
        "types",
        "inspect._ParameterKind",
        "abc",
        "tokenize",
        "inspect.EndOfBlock",
        "importlib.machinery",
        "<builtin>.type",
        "<builtin>.globals",
        "token",
        "inspect.Parameter",
        "inspect._empty",
        "inspect._void",
        "inspect._main",
        "enum",
        "re",
        "warnings"
    ],
    "dis": [
        "io",
        "types",
        "collections.namedtuple",
        "dis.Instruction",
        "dis._test",
        "collections",
        "dis.Bytecode",
        "opcode"
    ],
    "io": [
        "io.RawIOBase",
        "io.BufferedIOBase",
        "abc",
        "io.IOBase",
        "io.TextIOBase"
    ],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "opcode": [
        "opcode.def_op",
        "<builtin>.range",
        "_opcode",
        "opcode.jrel_op",
        "<list>.append",
        "opcode.name_op",
        "opcode.jabs_op"
    ],
    "_opcode": [],
    "<list>.append": [],
    "<builtin>.range": [],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "opcode.jrel_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "opcode.jabs_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "dis.Instruction": [],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "dis._test": [
        "dis.dis",
        "argparse.ArgumentParser.__init__",
        "argparse.FileType.__init__",
        "argparse._ActionsContainer.add_argument",
        "argparse",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.compile"
    ],
    "argparse": [
        "os",
        "argparse._StoreAction",
        "argparse.RawTextHelpFormatter",
        "argparse.ArgumentDefaultsHelpFormatter",
        "gettext",
        "argparse._VersionAction",
        "argparse._ArgumentGroup",
        "argparse.ArgumentTypeError",
        "argparse.HelpFormatter",
        "argparse.FileType",
        "argparse._CountAction",
        "argparse.ArgumentError",
        "argparse._StoreConstAction",
        "argparse._AppendConstAction",
        "argparse._SubParsersAction",
        "shutil",
        "argparse.MetavarTypeHelpFormatter",
        "argparse._AttributeHolder",
        "argparse._HelpAction",
        "argparse._StoreFalseAction",
        "argparse._ActionsContainer",
        "argparse.ArgumentParser",
        "argparse.Action",
        "argparse._StoreTrueAction",
        "argparse._MutuallyExclusiveGroup",
        "re",
        "argparse._ExtendAction",
        "argparse.Namespace",
        "argparse._AppendAction",
        "argparse.RawDescriptionHelpFormatter"
    ],
    "os": [
        "collections.abc",
        "<builtin>.ImportError",
        "os._createenviron",
        "ntpath",
        "os._add",
        "os._fscodec",
        "<list>.extend",
        "os._exists",
        "stat",
        "<builtin>.set",
        "abc",
        "<builtin>.globals",
        "os.PathLike",
        "os._Environ.__init__",
        "<list>.append",
        "os._Environ",
        "posixpath",
        "os._wrap_close",
        "os._AddedDllDirectory"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "<builtin>.hasattr",
        "genericpath",
        "os",
        "stat"
    ],
    "genericpath": [
        "os",
        "stat"
    ],
    "<builtin>.hasattr": [],
    "<list>.extend": [],
    "posixpath": [
        "genericpath",
        "os",
        "stat"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "<builtin>.set": [],
    "os._add": [],
    "os._Environ": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.TypeError": [],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os._wrap_close": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "os._AddedDllDirectory": [],
    "shutil": [
        "grp",
        "os",
        "stat",
        "shutil.SpecialFileError",
        "shutil.ExecError",
        "shutil._GiveupOnFastCopy",
        "fnmatch",
        "lzma",
        "shutil.SameFileError",
        "collections.namedtuple",
        "collections",
        "<builtin>.hasattr",
        "shutil.ReadError",
        "shutil.RegistryError",
        "<list>.append",
        "shutil.Error",
        "bz2",
        "zlib"
    ],
    "fnmatch": [
        "os",
        "functools.singledispatchmethod.__get__._method",
        "re",
        "functools.singledispatch.wrapper",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function",
        "functools",
        "posixpath"
    ],
    "functools.lru_cache": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "functools._lru_cache_wrapper",
        "functools.update_wrapper",
        "<builtin>.isinstance"
    ],
    "zlib": [],
    "bz2": [
        "io",
        "threading",
        "os",
        "bz2.BZ2File",
        "_bz2",
        "<builtin>.object",
        "_compression",
        "warnings"
    ],
    "warnings": [
        "warnings._processoptions",
        "warnings.catch_warnings",
        "warnings._OptionError",
        "warnings.WarningMessage",
        "<builtin>.hasattr",
        "warnings.filterwarnings",
        "warnings.simplefilter"
    ],
    "warnings._OptionError": [],
    "warnings.WarningMessage": [],
    "warnings.catch_warnings": [],
    "warnings._processoptions": [
        "warnings._setoption",
        "<builtin>.print"
    ],
    "warnings._setoption": [
        "<builtin>.int",
        "re.escape",
        "warnings._getaction",
        "re",
        "<builtin>.len",
        "warnings._getcategory",
        "warnings.filterwarnings"
    ],
    "<builtin>.len": [],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.issubclass",
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<str>.encode",
        "<builtin>.isinstance",
        "<str>.translate",
        "<builtin>.str"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "re.compile",
        "warnings._add_filter",
        "re",
        "<builtin>.isinstance",
        "<builtin>.issubclass"
    ],
    "warnings._add_filter": [
        "<list>.remove",
        "<list>.insert",
        "warnings._filters_mutated",
        "<list>.append"
    ],
    "<list>.remove": [],
    "<list>.insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "_compression": [
        "io",
        "_compression.BaseStream",
        "_compression.DecompressReader"
    ],
    "_compression.BaseStream": [],
    "_compression.DecompressReader": [],
    "threading": [
        "threading.Event",
        "os",
        "threading._RLock",
        "threading.Condition",
        "threading.Barrier",
        "_weakrefset.WeakSet.__init__",
        "threading._DummyThread",
        "collections",
        "<builtin>.hasattr",
        "itertools.count",
        "collections.namedtuple",
        "threading.Thread",
        "threading.BrokenBarrierError",
        "<builtin>.set",
        "threading.Semaphore",
        "threading._MainThread.__init__",
        "threading.BoundedSemaphore",
        "<list>.append",
        "threading.Timer",
        "traceback",
        "_weakrefset",
        "_thread.allocate_lock",
        "threading._MainThread",
        "_threading_local"
    ],
    "threading._RLock": [],
    "threading.Condition": [],
    "threading.Semaphore": [],
    "threading.BoundedSemaphore": [],
    "threading.Event": [],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakref.ref",
        "_weakrefset.WeakSet.update",
        "<builtin>.set"
    ],
    "_weakref.ref": [],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet._commit_removals": [
        "<list>.pop"
    ],
    "_weakrefset.WeakSet.add": [
        "_weakref.ref",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [
        "linecache",
        "traceback.TracebackException",
        "traceback.StackSummary",
        "collections",
        "traceback.FrameSummary"
    ],
    "linecache": [
        "functools",
        "os",
        "tokenize"
    ],
    "tokenize": [
        "tokenize.Untokenizer",
        "collections",
        "tokenize.StopTokenizing",
        "tokenize.TokenError",
        "collections.namedtuple",
        "tokenize.group",
        "tokenize.maybe",
        "<builtin>.set",
        "<builtin>.map",
        "<builtin>.sorted",
        "<builtin>.any",
        "tokenize.main",
        "re.compile",
        "token",
        "codecs",
        "tokenize._all_string_prefixes",
        "io",
        "re",
        "tokenize.TokenInfo"
    ],
    "codecs": [
        "codecs.StreamReaderWriter",
        "codecs.BufferedIncrementalEncoder",
        "codecs.IncrementalDecoder",
        "codecs.StreamWriter",
        "codecs.BufferedIncrementalDecoder",
        "encodings",
        "codecs.EncodedFile",
        "codecs.StreamReader",
        "codecs.CodecInfo",
        "codecs.Codec",
        "codecs.StreamRecoder",
        "codecs.IncrementalEncoder",
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.Codec": [],
    "codecs.IncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.IncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.StreamWriter": [],
    "codecs.StreamReader": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamRecoder": [],
    "encodings": [
        "encodings.aliases",
        "codecs",
        "encodings.CodecRegistryError"
    ],
    "encodings.CodecRegistryError": [],
    "codecs.EncodedFile": [
        "codecs.StreamRecoder.__init__"
    ],
    "codecs.StreamRecoder.__init__": [],
    "token": [
        "<builtin>.globals",
        "<list>.extend",
        "<builtin>.isinstance"
    ],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "<builtin>.any": [],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [
        "<str>.join"
    ],
    "<str>.join": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.map": [],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "tokenize.main": [
        "argparse.ArgumentParser.__init__",
        "builtins.open",
        "argparse._ActionsContainer.add_argument",
        "tokenize.tokenize",
        "argparse",
        "<builtin>.print",
        "tokenize.main.error",
        "tokenize.main.perror",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.list",
        "tokenize._tokenize"
    ],
    "argparse.ArgumentParser.__init__": [
        "gettext.gettext",
        "<builtin>.super",
        "argparse._ActionsContainer.register",
        "argparse._ActionsContainer.add_argument",
        "argparse._ActionsContainer.add_argument_group",
        "argparse._ActionsContainer._add_container_actions",
        "posixpath.basename",
        "ntpath.basename"
    ],
    "tokenize._tokenize": [
        "<map>.get",
        "<builtin>.IndentationError",
        "<builtin>.len",
        "codecs.StreamRecoder.readline",
        "<list>.append",
        "tokenize._compile"
    ],
    "codecs.StreamRecoder.readline": [],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "<map>.get": [],
    "builtins.open": [],
    "tokenize.tokenize": [
        "<builtin>.iter",
        "tokenize._tokenize",
        "tokenize.detect_encoding"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.read_or_stop",
        "tokenize.detect_encoding.find_cookie"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "<builtin>.SyntaxError",
        "<str>.format"
    ],
    "<str>.format": [],
    "<builtin>.SyntaxError": [],
    "tokenize._get_normal_name": [],
    "<builtin>.iter": [],
    "<builtin>.list": [],
    "tokenize.main.error": [
        "tokenize.main.perror"
    ],
    "tokenize.main.perror": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading.Timer": [],
    "threading._MainThread": [],
    "threading._DummyThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading.Event.set"
    ],
    "threading.Thread.__init__": [
        "<builtin>.str",
        "threading.current_thread",
        "threading.Event.__init__",
        "_weakrefset.WeakSet.add",
        "threading._make_invoke_excepthook",
        "threading._newname"
    ],
    "threading._newname": [],
    "<builtin>.str": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading.Event.set",
        "threading._newname"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "_collections.deque",
        "threading.RLock"
    ],
    "threading.RLock": [
        "_thread.RLock",
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [
        "_thread.allocate_lock"
    ],
    "_collections.deque": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "threading",
        "contextlib",
        "_threading_local.local",
        "contextlib.contextmanager",
        "_threading_local._localimpl",
        "weakref"
    ],
    "weakref": [
        "weakref.WeakMethod",
        "weakref.WeakValueDictionary",
        "collections.abc",
        "weakref.KeyedRef",
        "weakref.WeakKeyDictionary",
        "weakref.finalize",
        "_weakrefset"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakValueDictionary": [],
    "weakref.KeyedRef": [],
    "weakref.WeakKeyDictionary": [],
    "weakref.finalize": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "weakref.finalize._Info"
    ],
    "weakref.finalize._Info": [],
    "contextlib": [
        "contextlib.suppress",
        "collections.abc",
        "contextlib.ContextDecorator",
        "contextlib._GeneratorContextManager",
        "collections",
        "functools",
        "contextlib._GeneratorContextManagerBase",
        "contextlib.nullcontext",
        "contextlib.ExitStack",
        "contextlib.redirect_stdout",
        "types",
        "contextlib._AsyncGeneratorContextManager",
        "abc",
        "contextlib._RedirectStream",
        "contextlib.redirect_stderr",
        "contextlib.AbstractContextManager",
        "contextlib.AsyncExitStack",
        "contextlib._BaseExitStack",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.closing"
    ],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib.closing": [],
    "contextlib._RedirectStream": [],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.ExitStack": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.nullcontext": [],
    "_threading_local._localimpl": [],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "_threading_local.local": [],
    "_bz2": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [
        "io",
        "os",
        "lzma.LZMAFile",
        "_compression",
        "_lzma"
    ],
    "_lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "grp": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "gettext": [
        "re.compile",
        "<builtin>.enumerate",
        "os",
        "ntpath.join",
        "re",
        "posixpath.join",
        "gettext.GNUTranslations",
        "locale",
        "gettext.NullTranslations"
    ],
    "locale": [
        "<builtin>.globals",
        "re.compile",
        "<map>.items",
        "<map>.setdefault",
        "encodings",
        "collections.abc",
        "re",
        "<builtin>.print",
        "functools.wraps",
        "encodings.aliases",
        "<builtin>.sorted",
        "<builtin>.hasattr",
        "locale._test",
        "functools",
        "locale._print_locale"
    ],
    "encodings.aliases": [],
    "<map>.items": [],
    "<map>.setdefault": [],
    "locale._print_locale": [
        "locale.getlocale",
        "locale.getdefaultlocale",
        "locale.resetlocale",
        "<builtin>.print",
        "locale.setlocale",
        "locale._print_locale._init_categories",
        "<map>.items"
    ],
    "locale._print_locale._init_categories": [
        "<builtin>.globals"
    ],
    "locale.getdefaultlocale": [
        "os",
        "locale._parse_localename"
    ],
    "locale._parse_localename": [
        "<builtin>.tuple",
        "locale.normalize",
        "<builtin>.ValueError",
        "<str>.split"
    ],
    "locale.normalize": [
        "<map>.get",
        "locale._replace_encoding",
        "locale._append_modifier",
        "<str>.split",
        "<str>.replace",
        "<str>.lower"
    ],
    "<str>.replace": [],
    "locale._append_modifier": [
        "locale._replace_encoding",
        "<str>.partition"
    ],
    "locale._replace_encoding": [
        "<map>.get",
        "encodings.normalize_encoding",
        "<str>.index",
        "<str>.replace",
        "<str>.lower"
    ],
    "encodings.normalize_encoding": [
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.str"
    ],
    "<str>.lower": [],
    "<builtin>.ValueError": [],
    "locale.getlocale": [
        "<builtin>.TypeError",
        "locale.setlocale",
        "locale._parse_localename"
    ],
    "locale.setlocale": [],
    "<str>.partition": [],
    "<str>.index": [],
    "locale.resetlocale": [
        "locale.setlocale",
        "locale.getdefaultlocale",
        "locale._build_localename"
    ],
    "locale._build_localename": [
        "<builtin>.TypeError"
    ],
    "locale._test": [
        "<builtin>.str",
        "<builtin>.print",
        "locale.setlocale",
        "locale.format_string",
        "locale.atoi",
        "locale.atof"
    ],
    "locale.format_string": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<list>.append"
    ],
    "locale.atoi": [
        "<builtin>.int",
        "locale.delocalize"
    ],
    "locale.delocalize": [
        "locale.localeconv",
        "<str>.replace"
    ],
    "locale.localeconv": [],
    "locale.atof": [
        "locale.delocalize"
    ],
    "ntpath.join": [
        "os._fspath",
        "<builtin>.map",
        "genericpath._check_arg_types",
        "<builtin>.isinstance",
        "ntpath.splitdrive",
        "<str>.lower"
    ],
    "os._fspath": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "ntpath.splitdrive": [
        "<str>.find",
        "<builtin>.len",
        "os._fspath",
        "<builtin>.isinstance",
        "<str>.replace"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "posixpath.join": [
        "posixpath._get_sep",
        "os._fspath",
        "<builtin>.map",
        "<str>.endswith",
        "genericpath._check_arg_types"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "gettext.NullTranslations": [],
    "gettext.GNUTranslations": [],
    "argparse._AttributeHolder": [],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter._Section": [],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse._StoreAction": [],
    "argparse._StoreConstAction": [],
    "argparse._StoreTrueAction": [],
    "argparse._StoreFalseAction": [],
    "argparse._AppendAction": [],
    "argparse._AppendConstAction": [],
    "argparse._CountAction": [],
    "argparse._HelpAction": [],
    "argparse._VersionAction": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._ExtendAction": [],
    "argparse.FileType": [],
    "argparse.Namespace": [],
    "argparse._ActionsContainer": [],
    "argparse._ArgumentGroup": [],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse.ArgumentParser": [],
    "<builtin>.super": [],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "<builtin>.len",
        "ntpath.splitdrive",
        "ntpath._get_bothseps",
        "os._fspath"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "posixpath.basename": [
        "posixpath._get_sep",
        "os._fspath",
        "<str>.rfind"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.dgettext": [
        "<map>.get",
        "gettext.NullTranslations.gettext",
        "gettext.translation"
    ],
    "gettext.translation": [
        "<map>.get",
        "copy",
        "posixpath.abspath",
        "gettext.find",
        "<map>.setdefault",
        "warnings.warn",
        "<builtin>.FileNotFoundError",
        "collections.UserDict.__iter__",
        "ntpath.abspath",
        "warnings.catch_warnings.__init__",
        "warnings",
        "copy.copy",
        "gettext.NullTranslations.__init__",
        "<builtin>.open"
    ],
    "gettext.find": [
        "ntpath.join",
        "gettext._expand_lang",
        "posixpath.join",
        "genericpath.exists",
        "<list>.append"
    ],
    "gettext._expand_lang": [
        "locale.normalize",
        "<builtin>.range",
        "<str>.find",
        "<list>.reverse",
        "<list>.append"
    ],
    "<str>.find": [],
    "<list>.reverse": [],
    "genericpath.exists": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse",
        "gettext.GNUTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "<builtin>.FileNotFoundError": [],
    "ntpath.abspath": [],
    "posixpath.abspath": [
        "posixpath.normpath",
        "posixpath.isabs",
        "os._fspath",
        "posixpath.join",
        "<builtin>.isinstance"
    ],
    "posixpath.isabs": [
        "<str>.startswith",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "posixpath.normpath": [
        "os._fspath",
        "<str>.split",
        "<builtin>.isinstance",
        "<list>.append",
        "<str>.startswith",
        "<list>.pop"
    ],
    "<list>.pop": [],
    "copy": [
        "copy.Error",
        "types",
        "<builtin>.getattr",
        "copyreg",
        "weakref",
        "<builtin>.type"
    ],
    "copyreg": [],
    "copy.Error": [],
    "copy.copy": [
        "<map>.get",
        "copy._reconstruct",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<map>",
        "<builtin>.issubclass",
        "copy._copy_immutable",
        "<builtin>.type"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "copy.deepcopy",
        "<builtin>.setattr",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.id"
    ],
    "copy.deepcopy": [
        "<map>.get",
        "copy._reconstruct",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "copy._deepcopy_atomic",
        "copy._keep_alive",
        "<map>",
        "<builtin>.issubclass",
        "<builtin>.id",
        "<builtin>.type"
    ],
    "<builtin>.id": [],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "<builtin>.setattr": [],
    "warnings.warn": [
        "<builtin>.TypeError",
        "warnings._is_internal_frame",
        "<builtin>.range",
        "<builtin>.isinstance",
        "warnings._next_external_frame",
        "<builtin>.issubclass",
        "warnings.warn_explicit",
        "<builtin>.type"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<map>.get",
        "<builtin>.int",
        "<map>.clear",
        "warnings.WarningMessage.__init__",
        "<builtin>.str",
        "linecache",
        "linecache.getlines",
        "<builtin>.isinstance",
        "warnings._showwarnmsg",
        "<builtin>.issubclass",
        "<builtin>.RuntimeError"
    ],
    "<map>.clear": [],
    "linecache.getlines": [
        "linecache.clearcache",
        "linecache.updatecache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "linecache.lazycache",
        "ntpath.join",
        "ntpath.isabs",
        "posixpath.isabs",
        "<builtin>.len",
        "posixpath.join",
        "<str>.endswith",
        "tokenize.open",
        "<str>.startswith"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "linecache.lazycache": [
        "<map>.get",
        "<builtin>.getattr",
        "<builtin>.len",
        "<str>.endswith",
        "<str>.startswith"
    ],
    "ntpath.isabs": [
        "os._fspath",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<str>.replace",
        "<str>.startswith",
        "ntpath.splitdrive",
        "ntpath._get_bothseps"
    ],
    "tokenize.open": [
        "_io.TextIOWrapper",
        "builtins.open",
        "tokenize.detect_encoding"
    ],
    "_io.TextIOWrapper": [],
    "linecache.clearcache": [],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "asyncio.proactor_events._ProactorBaseWritePipeTransport.write",
        "asyncio.sslproto._SSLProtocolTransport.write",
        "asyncio.selector_events._SelectorSocketTransport.write",
        "asyncio.transports.WriteTransport.write",
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "tracemalloc",
        "<str>.strip",
        "linecache.getline",
        "linecache"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [
        "pickle",
        "tracemalloc.DomainFilter",
        "tracemalloc.Frame",
        "tracemalloc.Statistic",
        "tracemalloc.Filter",
        "collections.abc",
        "tracemalloc.Trace",
        "tracemalloc.BaseFilter",
        "tracemalloc.Traceback",
        "fnmatch",
        "linecache",
        "tracemalloc.Snapshot",
        "tracemalloc._Traces",
        "tracemalloc.StatisticDiff",
        "functools",
        "posixpath"
    ],
    "collections.abc": [
        "collections.abc"
    ],
    "pickle": [
        "copyreg",
        "argparse.ArgumentParser.print_help",
        "pickle._Unframer",
        "_compat_pickle",
        "struct",
        "functools",
        "<list>.extend",
        "argparse.ArgumentParser.__init__",
        "argparse.FileType.__init__",
        "pickle.PicklingError",
        "pickle.PickleError",
        "types",
        "pickle._Pickler",
        "_pickle",
        "pprint.pprint",
        "pickle._Stop",
        "argparse.ArgumentParser.parse_args",
        "pickle._load",
        "pickle._Framer",
        "codecs",
        "<list>.append",
        "io",
        "argparse._ActionsContainer.add_argument",
        "re",
        "argparse",
        "pprint",
        "pickle._Unpickler",
        "pickle._test",
        "pickle.UnpicklingError"
    ],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "_compat_pickle": [
        "<builtin>.dict",
        "<map>.items",
        "<map>.update",
        "<builtin>.len"
    ],
    "<builtin>.dict": [],
    "<map>.update": [],
    "_pickle": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "pickle._Framer": [],
    "pickle._Unframer": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Unpickler": [],
    "argparse.FileType.__init__": [],
    "argparse._ActionsContainer.add_argument": [
        "argparse._ActionsContainer._pop_action_class",
        "<builtin>.callable",
        "argparse._MutuallyExclusiveGroup._add_action",
        "argparse._ActionsContainer._get_optional_kwargs",
        "argparse.ArgumentParser._get_formatter",
        "<builtin>.len",
        "argparse.ArgumentParser._add_action",
        "argparse._ArgumentGroup._add_action",
        "<builtin>.hasattr",
        "argparse._ActionsContainer._add_action",
        "argparse._ActionsContainer._get_positional_kwargs",
        "argparse._ActionsContainer._registry_get",
        "argparse.HelpFormatter._format_args",
        "<builtin>.ValueError"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "gettext.gettext",
        "<builtin>.len",
        "<builtin>.dict",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.TypeError",
        "<builtin>.dict",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "<builtin>.callable": [],
    "argparse.ArgumentParser._get_formatter": [
        "argparse.HelpFormatter.__init__"
    ],
    "argparse.HelpFormatter.__init__": [
        "re.compile",
        "argparse.HelpFormatter._Section.__init__",
        "<builtin>.max",
        "<builtin>.min",
        "shutil.get_terminal_size"
    ],
    "shutil.get_terminal_size": [
        "<builtin>.int"
    ],
    "<builtin>.max": [],
    "<builtin>.min": [],
    "argparse.HelpFormatter._Section.__init__": [],
    "argparse.HelpFormatter._format_args": [
        "argparse.HelpFormatter._metavar_formatter",
        "argparse.HelpFormatter._metavar_formatter.format",
        "<builtin>.ValueError",
        "<builtin>.range"
    ],
    "argparse.HelpFormatter._metavar_formatter": [
        "<builtin>.str"
    ],
    "argparse.HelpFormatter._metavar_formatter.format": [
        "<builtin>.isinstance"
    ],
    "argparse.ArgumentParser._add_action": [
        "argparse._ArgumentGroup._add_action"
    ],
    "argparse._ActionsContainer._add_action": [
        "<list>.append",
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler",
        "<list>.append"
    ],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_args": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser.parse_known_args",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "<list>.extend",
        "argparse.ArgumentParser._parse_known_args",
        "argparse.Namespace.__init__",
        "<builtin>.setattr",
        "<builtin>.str",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.delattr",
        "argparse.ArgumentParser.error",
        "<builtin>.list"
    ],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "<builtin>.max",
        "<builtin>.hasattr",
        "<builtin>.iter",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_positional_actions",
        "<list>.extend",
        "<builtin>.enumerate",
        "<map>.setdefault",
        "<builtin>.setattr",
        "<builtin>.set",
        "argparse.ArgumentParser._get_value",
        "gettext.gettext",
        "<builtin>.getattr",
        "<list>.append",
        "argparse.ArgumentParser._parse_optional",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.isinstance",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "<builtin>.min"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "<list>.extend",
        "<builtin>.str",
        "argparse.ArgumentParser.error",
        "<list>.append",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.open",
        "argparse.ArgumentParser.convert_arg_line_to_args"
    ],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "argparse.ArgumentParser.error": [
        "argparse.ArgumentParser.exit",
        "gettext.gettext",
        "argparse.ArgumentParser.print_usage"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser._print_message",
        "argparse.ArgumentParser.format_usage"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter.format_help",
        "argparse.HelpFormatter.add_usage"
    ],
    "argparse.HelpFormatter.add_usage": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter._add_item": [
        "<list>.append"
    ],
    "argparse.HelpFormatter.format_help": [
        "<str>.strip",
        "argparse.HelpFormatter._Section.format_help"
    ],
    "argparse.HelpFormatter._Section.format_help": [
        "argparse.HelpFormatter._join_parts",
        "argparse.HelpFormatter._indent",
        "argparse.HelpFormatter._dedent"
    ],
    "argparse.HelpFormatter._indent": [],
    "argparse.HelpFormatter._join_parts": [],
    "argparse.HelpFormatter._dedent": [],
    "argparse.ArgumentParser._print_message": [
        "codecs.StreamRecoder.write"
    ],
    "codecs.StreamRecoder.write": [],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_option_tuples",
        "<builtin>.len",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_option_tuples": [
        "argparse.ArgumentParser.error",
        "<list>.append",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "argparse.ArgumentParser._match_arguments_partial",
        "<builtin>.zip",
        "<builtin>.len",
        "argparse.ArgumentParser._parse_known_args.take_action"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "<list>.extend",
        "<builtin>.range",
        "<builtin>.len",
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "<str>.replace"
    ],
    "re.match": [
        "re._compile"
    ],
    "<builtin>.zip": [],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "<map>.get",
        "argparse._get_action_name",
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._get_values"
    ],
    "argparse.ArgumentParser._get_values": [
        "<list>.remove",
        "argparse.ArgumentParser._check_value",
        "<builtin>.len",
        "<builtin>.isinstance",
        "argparse.ArgumentParser._get_value"
    ],
    "argparse.ArgumentParser._get_value": [
        "<builtin>.callable",
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "<builtin>.str",
        "<builtin>.getattr",
        "<builtin>.repr",
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse._get_action_name": [],
    "<builtin>.repr": [],
    "argparse.ArgumentParser._check_value": [
        "<builtin>.map",
        "argparse.ArgumentError.__init__",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._match_argument",
        "<list>.append",
        "argparse.ArgumentParser._parse_known_args.take_action"
    ],
    "argparse.ArgumentParser._match_argument": [
        "<map>.get",
        "gettext.ngettext",
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "<builtin>.len",
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "gettext.dngettext": [
        "<map>.get",
        "gettext.NullTranslations.ngettext",
        "gettext.translation"
    ],
    "gettext.NullTranslations.ngettext": [],
    "<builtin>.delattr": [],
    "pprint": [
        "io",
        "<builtin>.frozenset",
        "types",
        "re",
        "pprint.PrettyPrinter",
        "pprint._safe_key",
        "collections",
        "pprint._perfcheck",
        "<builtin>.type"
    ],
    "pprint._safe_key": [],
    "pprint.PrettyPrinter": [],
    "pprint._perfcheck": [
        "pprint.PrettyPrinter.__init__",
        "<builtin>.print",
        "pprint._safe_repr",
        "pprint.PrettyPrinter.pformat"
    ],
    "pprint.PrettyPrinter.__init__": [
        "<builtin>.int",
        "<builtin>.bool",
        "<builtin>.ValueError"
    ],
    "pprint._safe_repr": [
        "<builtin>.getattr",
        "<builtin>.len",
        "pprint._safe_repr",
        "pprint._recursion",
        "<builtin>.sorted",
        "<builtin>.repr",
        "<list>",
        "<builtin>.issubclass",
        "<builtin>.id",
        "<builtin>.type"
    ],
    "pprint._recursion": [
        "<builtin>.id",
        "<builtin>.type"
    ],
    "<list>": [],
    "pprint.PrettyPrinter.pformat": [
        "pprint.PrettyPrinter._format",
        "_io.StringIO"
    ],
    "_io.StringIO": [],
    "pprint.PrettyPrinter._format": [
        "<map>.get",
        "pprint.PrettyPrinter._repr",
        "pprint.PrettyPrinter._pprint_dict",
        "<builtin>.len",
        "pprint._recursion",
        "<builtin>.isinstance",
        "<map>",
        "codecs.StreamRecoder.write",
        "<builtin>.id"
    ],
    "pprint.PrettyPrinter._repr": [
        "pprint.PrettyPrinter.format",
        "<map>.copy"
    ],
    "<map>.copy": [],
    "pprint.PrettyPrinter.format": [
        "pprint._safe_repr"
    ],
    "pprint.PrettyPrinter._pprint_dict": [
        "<builtin>.sorted",
        "codecs.StreamRecoder.write",
        "pprint.PrettyPrinter._format_dict_items",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._format_dict_items": [
        "<builtin>.enumerate",
        "pprint.PrettyPrinter._repr",
        "<builtin>.len",
        "pprint.PrettyPrinter._format",
        "codecs.StreamRecoder.write"
    ],
    "pickle._load": [
        "pickle._Unpickler.load",
        "pickle._Unpickler.__init__"
    ],
    "pickle._Unpickler.__init__": [
        "<builtin>.iter"
    ],
    "pickle._Unpickler.load": [
        "pickle._Unframer.__init__",
        "<builtin>.hasattr",
        "pickle._Unframer.read",
        "<builtin>.isinstance"
    ],
    "pickle._Unframer.__init__": [],
    "pickle._Unframer.read": [
        "<builtin>.len"
    ],
    "pprint.pprint": [
        "pprint.PrettyPrinter.__init__",
        "pprint.PrettyPrinter.pprint"
    ],
    "pprint.PrettyPrinter.pprint": [
        "codecs.StreamRecoder.write",
        "pprint.PrettyPrinter._format"
    ],
    "argparse.ArgumentParser.print_help": [
        "argparse.ArgumentParser.format_help",
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser.format_help": [
        "argparse.HelpFormatter.add_text",
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter.start_section",
        "argparse.HelpFormatter.end_section",
        "argparse.HelpFormatter.format_help",
        "argparse.HelpFormatter.add_arguments",
        "argparse.HelpFormatter.add_usage"
    ],
    "argparse.HelpFormatter.add_text": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.start_section": [
        "argparse.HelpFormatter._Section.__init__",
        "argparse.HelpFormatter._add_item",
        "argparse.HelpFormatter._indent"
    ],
    "argparse.HelpFormatter.add_arguments": [
        "argparse.HelpFormatter.add_argument"
    ],
    "argparse.HelpFormatter.add_argument": [
        "<builtin>.max",
        "<builtin>.len",
        "argparse.HelpFormatter._add_item",
        "<list>.append",
        "argparse.HelpFormatter._iter_indented_subactions"
    ],
    "argparse.HelpFormatter._iter_indented_subactions": [],
    "argparse.HelpFormatter.end_section": [
        "argparse.HelpFormatter._dedent"
    ],
    "pickle._test": [
        "doctest",
        "doctest.testmod"
    ],
    "tracemalloc.Statistic": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "warnings.catch_warnings.__init__": [],
    "gettext.NullTranslations.gettext": [],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__",
        "<list>.append"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer.register": [
        "<map>.setdefault"
    ],
    "argparse._ActionsContainer._add_container_actions": [
        "<map>.get",
        "gettext.gettext",
        "argparse._ActionsContainer.add_argument_group",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<builtin>.ValueError"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__",
        "<list>.append"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "<builtin>.compile": [],
    "dis.dis": [
        "<builtin>.TypeError",
        "dis.dis",
        "dis._disassemble_str",
        "dis._disassemble_bytes",
        "<builtin>.print",
        "dis.distb",
        "<builtin>.sorted",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "dis._disassemble_recursive",
        "<builtin>.type"
    ],
    "dis.distb": [
        "dis.disassemble",
        "<builtin>.RuntimeError"
    ],
    "dis.disassemble": [
        "<builtin>.dict",
        "dis.findlinestarts",
        "dis._disassemble_bytes"
    ],
    "dis.findlinestarts": [
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "dis._disassemble_bytes": [
        "dis._get_instructions_bytes",
        "<builtin>.max",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.print"
    ],
    "dis._get_instructions_bytes": [
        "<builtin>.enumerate",
        "<builtin>.bool",
        "dis.findlabels",
        "dis._get_name_info",
        "<builtin>.repr",
        "dis._get_const_info",
        "dis._unpack_opargs"
    ],
    "dis.findlabels": [
        "<list>.append",
        "dis._unpack_opargs"
    ],
    "dis._unpack_opargs": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "dis._get_name_info": [
        "<builtin>.repr"
    ],
    "dis._get_const_info": [
        "<builtin>.repr"
    ],
    "dis._disassemble_str": [
        "dis._disassemble_recursive",
        "dis._try_compile"
    ],
    "dis._try_compile": [
        "<builtin>.compile"
    ],
    "dis._disassemble_recursive": [
        "dis._disassemble_recursive",
        "dis.disassemble",
        "<builtin>.hasattr",
        "<builtin>.print"
    ],
    "importlib.machinery": [],
    "inspect.EndOfBlock": [],
    "inspect.BlockFinder": [],
    "inspect._void": [],
    "inspect._empty": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "inspect._main": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument",
        "importlib.import_module",
        "importlib",
        "<builtin>.getattr",
        "argparse",
        "<builtin>.print",
        "inspect.findsource",
        "<builtin>.hasattr",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.repr",
        "inspect.getsource",
        "inspect.getsourcefile",
        "<builtin>.type"
    ],
    "importlib": [
        "types",
        "importlib._bootstrap_external._setup",
        "warnings",
        "importlib._bootstrap_external"
    ],
    "importlib.import_module": [
        "<builtin>.TypeError",
        "<str>.startswith"
    ],
    "inspect.getsource": [
        "inspect.getsourcelines"
    ],
    "inspect.getsourcelines": [
        "inspect.unwrap",
        "inspect.ismodule",
        "inspect.findsource",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.getblock"
    ],
    "inspect.unwrap": [
        "inspect.unwrap._is_wrapper",
        "<builtin>.id",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "<builtin>.hasattr"
    ],
    "inspect.findsource": [
        "<list>.sort",
        "<builtin>.range",
        "<builtin>.hasattr",
        "inspect.isclass",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.getsourcefile",
        "inspect.ismodule",
        "linecache.getlines",
        "inspect.iscode",
        "re.compile",
        "inspect.getfile",
        "linecache.checkcache",
        "<builtin>.len",
        "inspect.isfunction",
        "<list>.append",
        "inspect.getmodule",
        "<builtin>.OSError",
        "inspect.ismethod"
    ],
    "inspect.getsourcefile": [
        "inspect.getfile",
        "posixpath.splitext",
        "<builtin>.getattr",
        "ntpath.splitext",
        "genericpath.exists",
        "<builtin>.any",
        "inspect.getmodule"
    ],
    "inspect.getfile": [
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "inspect.ismodule",
        "inspect.isfunction",
        "inspect.ismethod",
        "<builtin>.hasattr",
        "inspect.isclass",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.iscode",
        "<builtin>.type"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "ntpath.splitext": [
        "genericpath._splitext",
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "genericpath._splitext": [
        "<builtin>.max",
        "<str>.rfind"
    ],
    "<str>.rfind": [],
    "posixpath.splitext": [
        "genericpath._splitext",
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "inspect.getmodule": [
        "<map>.get",
        "inspect.getabsfile",
        "<builtin>.getattr",
        "inspect.ismodule",
        "<builtin>.hasattr",
        "posixpath.realpath",
        "ntpath.realpath"
    ],
    "inspect.getabsfile": [
        "posixpath.normcase",
        "posixpath.abspath",
        "inspect.getfile",
        "ntpath.normcase",
        "ntpath.abspath",
        "inspect.getsourcefile"
    ],
    "ntpath.normcase": [
        "<str>.lower",
        "<builtin>.isinstance",
        "<str>.replace",
        "os._fspath"
    ],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "ntpath.realpath": [],
    "posixpath.realpath": [
        "posixpath.abspath",
        "os._fspath",
        "posixpath._joinrealpath"
    ],
    "posixpath._joinrealpath": [
        "posixpath.isabs",
        "posixpath.islink",
        "posixpath.join",
        "posixpath._joinrealpath",
        "<builtin>.isinstance",
        "posixpath.split"
    ],
    "posixpath.split": [
        "posixpath._get_sep",
        "<builtin>.len",
        "os._fspath",
        "<str>.rfind"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "<builtin>.OSError": [],
    "linecache.checkcache": [
        "<builtin>.len",
        "<builtin>.list",
        "<map>.keys"
    ],
    "<map>.keys": [],
    "<list>.sort": [],
    "inspect.getblock": [
        "<builtin>.iter",
        "inspect.BlockFinder.__init__",
        "tokenize.generate_tokens",
        "inspect.BlockFinder.tokeneater"
    ],
    "inspect.BlockFinder.__init__": [],
    "tokenize.generate_tokens": [
        "tokenize._tokenize"
    ],
    "inspect.BlockFinder.tokeneater": [],
    "unittest": [
        "<list>.extend",
        "unittest.loader",
        "unittest.signals",
        "unittest.result",
        "unittest.async_case",
        "unittest.suite",
        "unittest.main",
        "unittest.runner",
        "unittest.case"
    ],
    "unittest.result": [
        "io",
        "unittest.util",
        "unittest.result.TestResult",
        "traceback",
        "functools"
    ],
    "unittest.util": [
        "collections.namedtuple",
        "collections",
        "posixpath"
    ],
    "unittest.result.TestResult": [
        "unittest.result.failfast"
    ],
    "unittest.result.failfast": [
        "functools.wraps"
    ],
    "unittest.async_case": [
        "unittest.async_case.IsolatedAsyncioTestCase",
        "inspect",
        "asyncio",
        "unittest.case"
    ],
    "asyncio": [
        "asyncio.tasks",
        "asyncio.coroutines",
        "asyncio.streams",
        "asyncio.protocols",
        "asyncio.windows_events",
        "asyncio.subprocess",
        "asyncio.runners",
        "asyncio.futures",
        "asyncio.transports",
        "asyncio.locks",
        "asyncio.exceptions",
        "asyncio.base_events",
        "asyncio.events",
        "asyncio.queues"
    ],
    "asyncio.base_events": [
        "ssl",
        "os",
        "collections.abc",
        "socket",
        "asyncio.protocols",
        "asyncio.trsock",
        "asyncio.transports",
        "collections",
        "weakref",
        "asyncio.futures",
        "<builtin>.hasattr",
        "functools",
        "<builtin>.object",
        "threading",
        "stat",
        "asyncio.log",
        "subprocess",
        "heapq",
        "asyncio.coroutines",
        "asyncio.sslproto",
        "concurrent.futures",
        "asyncio.base_events.BaseEventLoop",
        "asyncio.base_events.Server",
        "traceback",
        "asyncio.base_events._SendfileFallbackProtocol",
        "asyncio.exceptions",
        "asyncio.tasks",
        "asyncio.staggered",
        "asyncio.constants",
        "warnings",
        "asyncio.events"
    ],
    "concurrent.futures": [
        "concurrent.futures._base"
    ],
    "concurrent.futures._base": [
        "threading",
        "logging.getLogger",
        "concurrent.futures._base._Waiter",
        "concurrent.futures._base.Future",
        "logging",
        "concurrent.futures._base.Executor",
        "concurrent.futures._base.InvalidStateError",
        "concurrent.futures._base.CancelledError",
        "concurrent.futures._base._AcquireFutures",
        "concurrent.futures._base._FirstCompletedWaiter",
        "collections",
        "concurrent.futures._base.Error",
        "concurrent.futures._base._AsCompletedWaiter",
        "concurrent.futures._base._AllCompletedWaiter",
        "concurrent.futures._base.BrokenExecutor",
        "collections.namedtuple",
        "concurrent.futures._base.TimeoutError"
    ],
    "logging": [
        "string",
        "posixpath.normcase",
        "logging.Handler",
        "os",
        "collections.abc",
        "logging.StreamHandler",
        "_weakrefset.WeakSet.__init__",
        "logging.FileHandler",
        "weakref",
        "<builtin>.hasattr",
        "logging.Manager.__init__",
        "weakref.WeakValueDictionary.__init__",
        "logging.Logger",
        "threading",
        "logging.Formatter.__init__",
        "ntpath.normcase",
        "logging.Filterer",
        "logging._StderrHandler.__init__",
        "logging._StderrHandler",
        "logging.RootLogger.__init__",
        "logging.PercentStyle",
        "logging.RootLogger",
        "logging.PlaceHolder",
        "logging.Filter",
        "logging.StrFormatStyle",
        "logging.BufferingFormatter",
        "traceback",
        "threading.RLock",
        "io",
        "logging.Formatter",
        "logging.LogRecord",
        "re",
        "logging.StringTemplateStyle",
        "logging.LoggerAdapter",
        "logging.NullHandler",
        "logging.Manager",
        "warnings"
    ],
    "string": [
        "string.Template",
        "string._TemplateMetaclass",
        "re",
        "collections",
        "string.Formatter"
    ],
    "string._TemplateMetaclass": [],
    "string.Template": [],
    "string.Formatter": [],
    "logging.LogRecord": [],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StringTemplateStyle": [],
    "logging.Formatter": [],
    "logging.Formatter.__init__": [
        "<builtin>.ValueError",
        "<map>.keys"
    ],
    "logging.BufferingFormatter": [],
    "logging.Filter": [],
    "logging.Filterer": [],
    "weakref.WeakValueDictionary.__init__": [
        "_weakref.ref",
        "weakref.WeakValueDictionary.update",
        "<builtin>.set"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.dict",
        "<builtin>.hasattr",
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary._commit_removals": [
        "<list>.pop",
        "_weakref._remove_dead_weakref"
    ],
    "_weakref._remove_dead_weakref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.StreamHandler": [],
    "logging.FileHandler": [],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel",
        "logging._addHandlerRef",
        "logging.Handler.createLock"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "<list>.append"
    ],
    "logging._acquireLock": [
        "threading._RLock.acquire"
    ],
    "threading._RLock.acquire": [
        "_thread.get_ident"
    ],
    "logging.Handler.createLock": [
        "logging._register_at_fork_reinit_lock",
        "threading.RLock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "_weakrefset.WeakSet.add",
        "logging._acquireLock"
    ],
    "logging.PlaceHolder": [],
    "logging.Manager": [],
    "logging.Logger": [],
    "logging.RootLogger": [],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Manager.__init__": [],
    "logging.NullHandler": [],
    "logging.getLogger": [
        "logging.Manager.getLogger"
    ],
    "concurrent.futures._base.Error": [],
    "concurrent.futures._base.CancelledError": [],
    "concurrent.futures._base.TimeoutError": [],
    "concurrent.futures._base.InvalidStateError": [],
    "concurrent.futures._base._Waiter": [],
    "concurrent.futures._base._AsCompletedWaiter": [],
    "concurrent.futures._base._FirstCompletedWaiter": [],
    "concurrent.futures._base._AllCompletedWaiter": [],
    "concurrent.futures._base._AcquireFutures": [],
    "concurrent.futures._base.Future": [],
    "concurrent.futures._base.Executor": [],
    "concurrent.futures._base.BrokenExecutor": [],
    "socket": [
        "io",
        "<list>.extend",
        "socket.socket",
        "socket._GiveupOnSendfile",
        "os",
        "socket.SocketIO",
        "<builtin>.getattr",
        "enum",
        "selectors",
        "<builtin>.hasattr",
        "<list>.append",
        "<builtin>.object",
        "_socket"
    ],
    "_socket": [],
    "selectors": [
        "<builtin>.globals",
        "math",
        "selectors._BaseSelectorImpl",
        "collections.abc",
        "select",
        "selectors._SelectorMapping",
        "selectors.BaseSelector",
        "selectors.SelectSelector",
        "selectors._PollLikeSelector",
        "abc",
        "selectors.KqueueSelector",
        "selectors.EpollSelector",
        "collections",
        "<builtin>.hasattr",
        "selectors.PollSelector",
        "selectors.DevpollSelector",
        "collections.namedtuple"
    ],
    "math": [],
    "select": [],
    "selectors._SelectorMapping": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors.SelectSelector": [],
    "selectors._PollLikeSelector": [],
    "selectors.PollSelector": [],
    "selectors.EpollSelector": [],
    "selectors.DevpollSelector": [],
    "selectors.KqueueSelector": [],
    "socket._GiveupOnSendfile": [],
    "socket.socket": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "subprocess": [
        "subprocess.CompletedProcess",
        "os",
        "contextlib",
        "<builtin>.hasattr",
        "signal",
        "threading",
        "subprocess.STARTUPINFO",
        "select",
        "subprocess.TimeoutExpired",
        "selectors",
        "subprocess.CalledProcessError",
        "<builtin>.getattr",
        "subprocess.Popen",
        "subprocess._use_posix_spawn",
        "io",
        "_posixsubprocess",
        "subprocess.SubprocessError",
        "warnings",
        "subprocess.Handle"
    ],
    "signal": [
        "<builtin>.globals",
        "functools.wraps",
        "functools",
        "enum"
    ],
    "_posixsubprocess": [],
    "subprocess.SubprocessError": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.STARTUPINFO": [],
    "subprocess.Handle": [],
    "subprocess.CompletedProcess": [],
    "subprocess._use_posix_spawn": [
        "<builtin>.map",
        "<builtin>.hasattr",
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "subprocess.Popen": [
        "<builtin>.property"
    ],
    "ssl": [
        "_ssl",
        "os",
        "socket",
        "ssl.Purpose",
        "ssl.TLSVersion",
        "collections",
        "<builtin>.hasattr",
        "ssl._ASN1Object",
        "collections.namedtuple",
        "ssl.SSLObject",
        "base64",
        "ssl._TLSContentType",
        "ssl.SSLContext",
        "<builtin>.getattr",
        "ssl._TLSAlertType",
        "ssl.SSLSocket",
        "enum",
        "ssl._TLSMessageType",
        "warnings"
    ],
    "_ssl": [],
    "ssl.TLSVersion": [],
    "ssl._TLSContentType": [],
    "ssl._TLSAlertType": [],
    "ssl._TLSMessageType": [],
    "base64": [
        "struct",
        "binascii",
        "re",
        "base64.main"
    ],
    "binascii": [],
    "base64.main": [
        "base64.test",
        "<builtin>.print",
        "base64.decode",
        "getopt",
        "<builtin>.open",
        "getopt.getopt",
        "base64.encode"
    ],
    "getopt": [
        "getopt.getopt",
        "os",
        "<builtin>.print",
        "gettext",
        "getopt.GetoptError"
    ],
    "getopt.GetoptError": [],
    "getopt.getopt": [
        "getopt.do_longs",
        "<builtin>.list",
        "getopt.do_shorts",
        "<builtin>.type"
    ],
    "getopt.do_shorts": [
        "getopt.short_has_arg",
        "getopt._",
        "<list>.append",
        "getopt.GetoptError.__init__"
    ],
    "getopt.short_has_arg": [
        "getopt._",
        "getopt.GetoptError.__init__",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "getopt._": [],
    "getopt.GetoptError.__init__": [],
    "getopt.do_longs": [
        "getopt.GetoptError.__init__",
        "<list>.index",
        "getopt._",
        "<list>.append",
        "getopt.long_has_args"
    ],
    "<list>.index": [],
    "getopt.long_has_args": [
        "getopt._",
        "getopt.GetoptError.__init__",
        "<builtin>.len"
    ],
    "base64.test": [
        "base64.decodebytes",
        "<builtin>.repr",
        "base64.encodebytes",
        "<builtin>.print"
    ],
    "base64.encodebytes": [
        "base64._input_type_check",
        "<list>.append",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "base64._input_type_check": [
        "<builtin>.TypeError",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "base64.decodebytes": [
        "base64._input_type_check"
    ],
    "base64.decode": [],
    "base64.encode": [
        "<builtin>.len"
    ],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.Purpose": [],
    "ssl.SSLContext": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "ssl.SSLObject": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ssl.SSLSocket": [
        "<builtin>.classmethod",
        "ssl._sslcopydoc",
        "<builtin>.property"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "asyncio.constants": [
        "asyncio.constants._SendfileMode",
        "enum"
    ],
    "asyncio.constants._SendfileMode": [],
    "asyncio.coroutines": [
        "inspect",
        "os",
        "asyncio.format_helpers",
        "asyncio.log",
        "collections.abc",
        "types",
        "asyncio.base_futures",
        "asyncio.coroutines.CoroWrapper",
        "<builtin>.set",
        "asyncio.constants",
        "<builtin>.object",
        "traceback",
        "functools",
        "warnings",
        "asyncio.coroutines._is_debug_mode"
    ],
    "asyncio.base_futures": [
        "asyncio.format_helpers",
        "reprlib"
    ],
    "reprlib": [
        "reprlib.Repr",
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "asyncio.format_helpers": [
        "inspect",
        "reprlib",
        "asyncio.constants",
        "traceback",
        "functools"
    ],
    "asyncio.log": [
        "logging",
        "logging.getLogger"
    ],
    "asyncio.coroutines._is_debug_mode": [
        "<builtin>.bool"
    ],
    "asyncio.coroutines.CoroWrapper": [
        "<builtin>.property"
    ],
    "asyncio.events": [
        "threading",
        "asyncio.events.TimerHandle",
        "asyncio.format_helpers",
        "os",
        "asyncio.events.AbstractServer",
        "socket",
        "_thread.allocate_lock",
        "contextvars",
        "_asyncio",
        "asyncio.events._RunningLoop",
        "subprocess",
        "asyncio.events.AbstractEventLoop",
        "asyncio.events.Handle",
        "asyncio.events.AbstractEventLoopPolicy",
        "asyncio.events.BaseDefaultEventLoopPolicy",
        "asyncio.exceptions"
    ],
    "contextvars": [
        "_contextvars"
    ],
    "_contextvars": [],
    "asyncio.exceptions": [
        "asyncio.exceptions.InvalidStateError",
        "asyncio.exceptions.IncompleteReadError",
        "asyncio.exceptions.SendfileNotAvailableError",
        "asyncio.exceptions.LimitOverrunError",
        "asyncio.exceptions.TimeoutError",
        "asyncio.exceptions.CancelledError"
    ],
    "asyncio.exceptions.CancelledError": [],
    "asyncio.exceptions.TimeoutError": [],
    "asyncio.exceptions.InvalidStateError": [],
    "asyncio.exceptions.SendfileNotAvailableError": [],
    "asyncio.exceptions.IncompleteReadError": [],
    "asyncio.exceptions.LimitOverrunError": [],
    "asyncio.events.Handle": [],
    "asyncio.events.TimerHandle": [],
    "asyncio.events.AbstractServer": [],
    "asyncio.events.AbstractEventLoop": [],
    "asyncio.events.AbstractEventLoopPolicy": [],
    "asyncio.events.BaseDefaultEventLoopPolicy": [
        "asyncio.events.BaseDefaultEventLoopPolicy._Local"
    ],
    "asyncio.events.BaseDefaultEventLoopPolicy._Local": [],
    "asyncio.events._RunningLoop": [],
    "_asyncio": [],
    "asyncio.futures": [
        "asyncio.format_helpers",
        "concurrent.futures",
        "asyncio.futures.Future",
        "asyncio.base_futures",
        "logging",
        "contextvars",
        "_asyncio",
        "asyncio.exceptions",
        "asyncio.events"
    ],
    "asyncio.futures.Future": [
        "<builtin>.property"
    ],
    "asyncio.protocols": [
        "asyncio.protocols.Protocol",
        "asyncio.protocols.BufferedProtocol",
        "asyncio.protocols.DatagramProtocol",
        "asyncio.protocols.BaseProtocol",
        "asyncio.protocols.SubprocessProtocol"
    ],
    "asyncio.protocols.BaseProtocol": [],
    "asyncio.protocols.Protocol": [],
    "asyncio.protocols.BufferedProtocol": [],
    "asyncio.protocols.DatagramProtocol": [],
    "asyncio.protocols.SubprocessProtocol": [],
    "asyncio.sslproto": [
        "ssl",
        "asyncio.sslproto.SSLProtocol",
        "asyncio.log",
        "asyncio.sslproto._SSLProtocolTransport",
        "asyncio.protocols",
        "asyncio.sslproto._SSLPipe",
        "asyncio.constants",
        "asyncio.transports",
        "collections",
        "warnings",
        "asyncio.base_events"
    ],
    "asyncio.transports": [
        "asyncio.transports.ReadTransport",
        "asyncio.transports.DatagramTransport",
        "asyncio.transports.Transport",
        "asyncio.transports.SubprocessTransport",
        "asyncio.transports._FlowControlMixin",
        "asyncio.transports.WriteTransport",
        "asyncio.transports.BaseTransport"
    ],
    "asyncio.transports.BaseTransport": [],
    "asyncio.transports.ReadTransport": [],
    "asyncio.transports.WriteTransport": [],
    "asyncio.transports.Transport": [],
    "asyncio.transports.DatagramTransport": [],
    "asyncio.transports.SubprocessTransport": [],
    "asyncio.transports._FlowControlMixin": [],
    "asyncio.sslproto._SSLPipe": [
        "<builtin>.property"
    ],
    "asyncio.sslproto._SSLProtocolTransport": [
        "<builtin>.property"
    ],
    "asyncio.sslproto.SSLProtocol": [],
    "asyncio.staggered": [
        "asyncio.tasks",
        "contextlib",
        "asyncio.locks",
        "asyncio.exceptions",
        "asyncio.events",
        "typing"
    ],
    "typing": [
        "typing._SpecialForm.__init__",
        "typing.SupportsAbs",
        "typing.TypeVar",
        "collections.abc",
        "contextlib",
        "typing.re",
        "operator",
        "typing._GenericAlias",
        "typing.SupportsIndex",
        "typing.TypedDict",
        "typing.SupportsBytes",
        "collections",
        "typing.BinaryIO",
        "functools",
        "typing.SupportsFloat",
        "typing._SpecialForm",
        "typing.TypeVar.__init__",
        "typing._TypingEmpty",
        "typing._VariadicGenericAlias",
        "types",
        "abc",
        "typing.IO",
        "typing.ForwardRef",
        "typing.SupportsInt",
        "typing.Generic",
        "typing._ProtocolMeta",
        "typing.SupportsRound",
        "typing._Immutable",
        "typing.Protocol",
        "typing._TypingEllipsis",
        "typing._alias",
        "typing.NamedTupleMeta",
        "typing.TextIO",
        "typing._TypedDictMeta",
        "re",
        "typing._Final",
        "typing.io",
        "typing.SupportsComplex",
        "typing.NamedTuple"
    ],
    "typing._Final": [],
    "typing._Immutable": [],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "functools.singledispatchmethod.__get__._method",
        "functools.singledispatch.wrapper",
        "<list>.append",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function",
        "functools.wraps"
    ],
    "typing._SpecialForm.__init__": [],
    "typing.ForwardRef": [],
    "typing.TypeVar": [],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing._TypingEmpty": [],
    "typing._TypingEllipsis": [],
    "typing._ProtocolMeta": [],
    "typing.Protocol": [],
    "typing.TypeVar.__init__": [
        "<builtin>.TypeError",
        "<builtin>.bool",
        "<builtin>.len",
        "typing._type_check",
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "typing._type_check": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.SyntaxError",
        "<builtin>.compile"
    ],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._GenericAlias.__init__": [
        "<map>.get",
        "typing._collect_type_vars",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "typing._collect_type_vars": [
        "<list>.extend",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<list>.append"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.NamedTupleMeta": [],
    "typing.NamedTuple": [],
    "typing._TypedDictMeta": [],
    "typing.TypedDict": [],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.io": [],
    "typing.re": [],
    "asyncio.locks": [
        "asyncio.locks._ContextManager",
        "asyncio.coroutines",
        "asyncio.locks.Lock",
        "asyncio.locks.BoundedSemaphore",
        "types",
        "asyncio.locks.Condition",
        "asyncio.locks._ContextManagerMixin",
        "asyncio.locks.Event",
        "asyncio.locks.Semaphore",
        "asyncio.futures",
        "collections",
        "warnings",
        "asyncio.exceptions",
        "asyncio.events"
    ],
    "asyncio.locks._ContextManager": [],
    "asyncio.locks._ContextManagerMixin": [
        "types.coroutine"
    ],
    "types.coroutine": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "collections.abc",
        "<builtin>.getattr",
        "functools.wraps",
        "functools"
    ],
    "asyncio.locks.Lock": [],
    "asyncio.locks.Event": [],
    "asyncio.locks.Condition": [],
    "asyncio.locks.Semaphore": [],
    "asyncio.locks.BoundedSemaphore": [],
    "asyncio.tasks": [
        "inspect",
        "asyncio.coroutines",
        "concurrent.futures",
        "types",
        "types.coroutine",
        "contextvars",
        "_asyncio",
        "asyncio.base_tasks",
        "asyncio.tasks._GatheringFuture",
        "_weakrefset.WeakSet.__init__",
        "weakref",
        "asyncio.futures",
        "asyncio.tasks.Task",
        "functools",
        "warnings",
        "asyncio.exceptions",
        "asyncio.events"
    ],
    "asyncio.base_tasks": [
        "asyncio.base_futures",
        "asyncio.coroutines",
        "linecache",
        "traceback"
    ],
    "asyncio.tasks.Task": [
        "<builtin>.classmethod"
    ],
    "asyncio.tasks._GatheringFuture": [],
    "asyncio.trsock": [
        "socket",
        "warnings",
        "asyncio.trsock.TransportSocket"
    ],
    "asyncio.trsock.TransportSocket": [
        "<builtin>.property"
    ],
    "asyncio.base_events._SendfileFallbackProtocol": [],
    "asyncio.base_events.Server": [
        "<builtin>.property"
    ],
    "asyncio.base_events.BaseEventLoop": [],
    "asyncio.runners": [
        "asyncio.tasks",
        "asyncio.coroutines",
        "asyncio.events"
    ],
    "asyncio.queues": [
        "asyncio.queues.LifoQueue",
        "asyncio.queues.QueueFull",
        "asyncio.queues.QueueEmpty",
        "collections",
        "asyncio.queues.PriorityQueue",
        "asyncio.locks",
        "heapq",
        "warnings",
        "asyncio.events",
        "asyncio.queues.Queue"
    ],
    "asyncio.queues.QueueEmpty": [],
    "asyncio.queues.QueueFull": [],
    "asyncio.queues.Queue": [
        "<builtin>.property"
    ],
    "asyncio.queues.PriorityQueue": [],
    "asyncio.queues.LifoQueue": [],
    "asyncio.streams": [
        "asyncio.tasks",
        "asyncio.streams.StreamReaderProtocol",
        "asyncio.format_helpers",
        "asyncio.coroutines",
        "asyncio.log",
        "asyncio.streams.FlowControlMixin",
        "socket",
        "asyncio.protocols",
        "asyncio.streams.StreamWriter",
        "<builtin>.hasattr",
        "weakref",
        "warnings",
        "asyncio.exceptions",
        "asyncio.events",
        "asyncio.streams.StreamReader"
    ],
    "asyncio.streams.FlowControlMixin": [],
    "asyncio.streams.StreamReaderProtocol": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamWriter": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamReader": [],
    "asyncio.subprocess": [
        "asyncio.tasks",
        "asyncio.log",
        "asyncio.protocols",
        "asyncio.subprocess.Process",
        "subprocess",
        "warnings",
        "asyncio.streams",
        "asyncio.subprocess.SubprocessStreamProtocol",
        "asyncio.events"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol": [],
    "asyncio.subprocess.Process": [
        "<builtin>.property"
    ],
    "asyncio.windows_events": [
        "asyncio.windows_events._WindowsSubprocessTransport",
        "asyncio.windows_utils",
        "asyncio.windows_events._WindowsSelectorEventLoop",
        "socket",
        "asyncio.windows_events._WaitHandleFuture",
        "asyncio.base_subprocess",
        "weakref",
        "asyncio.futures",
        "struct",
        "asyncio.log",
        "asyncio.proactor_events",
        "asyncio.windows_events.ProactorEventLoop",
        "asyncio.windows_events.WindowsSelectorEventLoopPolicy",
        "math",
        "asyncio.windows_events._WaitCancelFuture",
        "asyncio.exceptions",
        "asyncio.windows_events._BaseWaitHandleFuture",
        "asyncio.tasks",
        "asyncio.windows_events.IocpProactor",
        "asyncio.windows_events.PipeServer",
        "asyncio.selector_events",
        "asyncio.windows_events._OverlappedFuture",
        "asyncio.windows_events.WindowsProactorEventLoopPolicy",
        "asyncio.events"
    ],
    "asyncio.base_subprocess": [
        "asyncio.log",
        "asyncio.protocols",
        "asyncio.base_subprocess.BaseSubprocessTransport",
        "subprocess",
        "collections",
        "asyncio.transports",
        "warnings",
        "asyncio.base_subprocess.ReadSubprocessPipeProto",
        "asyncio.base_subprocess.WriteSubprocessPipeProto"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport": [],
    "asyncio.base_subprocess.WriteSubprocessPipeProto": [],
    "asyncio.base_subprocess.ReadSubprocessPipeProto": [],
    "asyncio.proactor_events": [
        "os",
        "asyncio.proactor_events.BaseProactorEventLoop",
        "socket",
        "asyncio.protocols",
        "asyncio.trsock",
        "asyncio.transports",
        "collections",
        "asyncio.futures",
        "asyncio.proactor_events._ProactorBasePipeTransport",
        "signal",
        "asyncio.proactor_events._ProactorReadPipeTransport",
        "threading",
        "asyncio.log",
        "asyncio.proactor_events._ProactorDatagramTransport",
        "asyncio.proactor_events._ProactorDuplexPipeTransport",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport",
        "asyncio.sslproto",
        "asyncio.proactor_events._ProactorSocketTransport",
        "asyncio.exceptions",
        "asyncio.base_events",
        "io",
        "asyncio.proactor_events._ProactorWritePipeTransport",
        "asyncio.constants",
        "warnings"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport": [],
    "asyncio.proactor_events._ProactorReadPipeTransport": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport": [],
    "asyncio.proactor_events._ProactorWritePipeTransport": [],
    "asyncio.proactor_events._ProactorDatagramTransport": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport": [],
    "asyncio.proactor_events._ProactorSocketTransport": [],
    "asyncio.proactor_events.BaseProactorEventLoop": [],
    "asyncio.selector_events": [
        "ssl",
        "socket",
        "asyncio.protocols",
        "asyncio.selector_events._SelectorTransport",
        "asyncio.trsock",
        "asyncio.transports",
        "collections",
        "weakref",
        "asyncio.futures",
        "functools",
        "asyncio.log",
        "selectors",
        "asyncio.selector_events._SelectorSocketTransport",
        "asyncio.sslproto",
        "asyncio.selector_events.BaseSelectorEventLoop",
        "asyncio.selector_events._SelectorDatagramTransport",
        "asyncio.base_events",
        "asyncio.constants",
        "warnings",
        "asyncio.events"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop": [],
    "asyncio.selector_events._SelectorTransport": [],
    "asyncio.selector_events._SelectorSocketTransport": [],
    "asyncio.selector_events._SelectorDatagramTransport": [],
    "asyncio.windows_utils": [
        "os",
        "asyncio.windows_utils.Popen",
        "<builtin>.ImportError",
        "asyncio.windows_utils.PipeHandle",
        "subprocess",
        "tempfile",
        "warnings"
    ],
    "tempfile": [
        "io",
        "shutil",
        "os",
        "tempfile._RandomNameSequence",
        "tempfile.TemporaryDirectory",
        "tempfile.SpooledTemporaryFile",
        "tempfile._TemporaryFileWrapper",
        "weakref",
        "<builtin>.hasattr",
        "tempfile._TemporaryFileCloser",
        "_thread.allocate_lock",
        "functools",
        "warnings",
        "random"
    ],
    "random": [
        "math",
        "random.Random",
        "os",
        "random.SystemRandom",
        "collections.abc",
        "random.Random.__init__",
        "random._test",
        "_sha512",
        "<builtin>.hasattr",
        "_random",
        "hashlib",
        "bisect",
        "warnings"
    ],
    "bisect": [
        "_bisect"
    ],
    "_bisect": [],
    "_sha512": [],
    "hashlib": [
        "<builtin>.globals",
        "<builtin>.range",
        "logging",
        "<builtin>.set",
        "hashlib.__get_openssl_constructor",
        "<builtin>.bytes",
        "_hashlib",
        "logging.exception",
        "hashlib.__get_builtin_constructor"
    ],
    "_hashlib": [],
    "<builtin>.bytes": [],
    "hashlib.__get_openssl_constructor": [
        "<builtin>.getattr",
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.__get_builtin_constructor": [
        "<map>.get",
        "_sha3",
        "_blake2",
        "_md5",
        "_sha512",
        "_sha1",
        "_sha256",
        "<builtin>.ValueError"
    ],
    "_sha3": [],
    "_blake2": [],
    "_sha256": [],
    "_md5": [],
    "_sha1": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.basicConfig",
        "logging.Logger.error",
        "<builtin>.len"
    ],
    "logging.basicConfig": [
        "logging.Handler.close",
        "logging.FileHandler.__init__",
        "logging.Logger.removeHandler",
        "logging.Logger.addHandler",
        "logging._acquireLock",
        "logging.FileHandler.close",
        "<builtin>.len",
        "<map>.keys",
        "logging.Formatter.__init__",
        "logging.Handler.setFormatter",
        "logging.StreamHandler.__init__",
        "<builtin>.ValueError",
        "logging.Logger.setLevel"
    ],
    "logging.Logger.removeHandler": [
        "<list>.remove",
        "logging._acquireLock"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "posixpath.abspath",
        "logging.FileHandler._open",
        "os._fspath",
        "logging.StreamHandler.__init__",
        "ntpath.abspath",
        "logging.Handler.__init__"
    ],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "logging.Handler.setFormatter": [],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "<list>.append"
    ],
    "logging.Logger.setLevel": [
        "logging.Manager._clear_cache",
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.isEnabledFor": [
        "logging.Logger.getEffectiveLevel",
        "logging._acquireLock"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "logging.Logger.findCaller",
        "logging.Logger.handle",
        "logging.Logger.makeRecord",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "logging.Logger.findCaller": [
        "posixpath.normcase",
        "traceback.print_stack",
        "_io.StringIO",
        "ntpath.normcase",
        "<builtin>.hasattr",
        "logging.currentframe"
    ],
    "logging.currentframe": [],
    "traceback.print_stack": [
        "traceback.extract_stack",
        "traceback.print_list"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "linecache.lazycache",
        "traceback.FrameSummary.__init__",
        "<builtin>.getattr",
        "<builtin>.set",
        "_collections.deque",
        "linecache.checkcache"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "traceback.print_list": [
        "traceback.StackSummary.from_list",
        "traceback.StackSummary.format",
        "<builtin>.print"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted",
        "<list>.append"
    ],
    "logging.Logger.makeRecord": [
        "logging.LogRecord.__init__",
        "<builtin>.KeyError"
    ],
    "logging.LogRecord.__init__": [
        "<builtin>.int",
        "_thread.get_ident",
        "posixpath.splitext",
        "ntpath.splitext",
        "<builtin>.len",
        "threading.current_thread",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "logging.getLevelName",
        "posixpath.basename",
        "ntpath.basename"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Logger.callHandlers",
        "logging.Filterer.filter"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Handler.acquire",
        "logging.FileHandler.emit",
        "logging.Handler.emit",
        "unittest.case._CapturingHandler.emit",
        "logging.StreamHandler.emit",
        "logging.Filterer.filter"
    ],
    "logging.Handler.acquire": [
        "threading._RLock.acquire"
    ],
    "logging.FileHandler.emit": [
        "logging.FileHandler._open",
        "logging.StreamHandler.emit"
    ],
    "logging.StreamHandler.emit": [
        "logging.Handler.handleError",
        "logging.Handler.format",
        "logging.StreamHandler.flush"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Formatter.format": [
        "logging.Formatter.formatTime",
        "logging.Formatter.formatStack",
        "logging.Formatter.formatException",
        "logging.Formatter.usesTime",
        "logging.LogRecord.getMessage",
        "logging.Formatter.formatMessage"
    ],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.Formatter.usesTime": [],
    "logging.Formatter.formatTime": [],
    "logging.Formatter.formatMessage": [],
    "logging.Formatter.formatException": [
        "traceback.print_exception",
        "_io.StringIO"
    ],
    "traceback.print_exception": [
        "traceback.TracebackException.format",
        "<builtin>.print",
        "traceback.TracebackException.__init__",
        "<builtin>.type"
    ],
    "traceback.TracebackException.__init__": [
        "traceback.TracebackException.__init__",
        "traceback.TracebackException._load_lines",
        "traceback._some_str",
        "<builtin>.str",
        "<builtin>.set",
        "traceback.StackSummary.extract",
        "<builtin>.issubclass",
        "traceback.walk_tb",
        "<builtin>.id",
        "<builtin>.type"
    ],
    "traceback.walk_tb": [],
    "traceback._some_str": [
        "<builtin>.str",
        "<builtin>.type"
    ],
    "traceback.TracebackException._load_lines": [
        "traceback.TracebackException._load_lines"
    ],
    "traceback.TracebackException.format": [
        "traceback.TracebackException.format",
        "traceback.TracebackException.format_exception_only",
        "traceback.StackSummary.format"
    ],
    "traceback.TracebackException.format_exception_only": [
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.issubclass",
        "<builtin>.min",
        "traceback._format_final_exc_line"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "logging.Formatter.formatStack": [],
    "logging.StreamHandler.flush": [
        "logging.Handler.acquire",
        "<builtin>.hasattr",
        "logging.StreamHandler.flush"
    ],
    "logging.Handler.handleError": [
        "traceback.print_stack",
        "traceback.print_exception",
        "ntpath.dirname",
        "posixpath.dirname"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "posixpath.dirname": [
        "posixpath._get_sep",
        "<builtin>.len",
        "os._fspath",
        "<str>.rfind"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "_random": [],
    "random.Random": [],
    "random.SystemRandom": [],
    "random.Random.__init__": [
        "random.Random.seed",
        "random.SystemRandom.seed"
    ],
    "random.Random.seed": [
        "<builtin>.ord",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "random._test": [
        "random._test_generator"
    ],
    "random._test_generator": [
        "random.Random.gauss",
        "random.Random.betavariate",
        "<builtin>.range",
        "random.Random.gammavariate",
        "<builtin>.max",
        "<builtin>.print",
        "random.Random.vonmisesvariate",
        "random.Random.lognormvariate",
        "random.Random.normalvariate",
        "<builtin>.round",
        "<builtin>.min",
        "random.Random.triangular"
    ],
    "<builtin>.round": [],
    "random.Random.normalvariate": [
        "random.SystemRandom.random"
    ],
    "random.Random.lognormvariate": [
        "random.Random.normalvariate"
    ],
    "random.Random.vonmisesvariate": [
        "random.SystemRandom.random"
    ],
    "random.Random.gammavariate": [
        "random.SystemRandom.random",
        "<builtin>.ValueError"
    ],
    "random.Random.gauss": [
        "random.SystemRandom.random"
    ],
    "random.Random.betavariate": [
        "random.Random.gammavariate"
    ],
    "random.Random.triangular": [
        "random.SystemRandom.random"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile._TemporaryFileCloser": [],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "asyncio.windows_utils.PipeHandle": [
        "<builtin>.property"
    ],
    "asyncio.windows_utils.Popen": [],
    "asyncio.windows_events._OverlappedFuture": [],
    "asyncio.windows_events._BaseWaitHandleFuture": [],
    "asyncio.windows_events._WaitCancelFuture": [],
    "asyncio.windows_events._WaitHandleFuture": [],
    "asyncio.windows_events.PipeServer": [],
    "asyncio.windows_events._WindowsSelectorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop": [],
    "asyncio.windows_events.IocpProactor": [],
    "asyncio.windows_events._WindowsSubprocessTransport": [],
    "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [],
    "asyncio.windows_events.WindowsProactorEventLoopPolicy": [],
    "unittest.case": [
        "unittest.case.FunctionTestCase",
        "unittest.util",
        "contextlib",
        "unittest.case._OrderedChainMap",
        "collections",
        "functools",
        "unittest.case._BaseTestCaseContext",
        "<builtin>.object",
        "collections.namedtuple",
        "types",
        "unittest.result",
        "logging",
        "unittest.case._Outcome",
        "unittest.case._AssertRaisesContext",
        "unittest.case.SkipTest",
        "difflib",
        "unittest.case.TestCase",
        "unittest.case._SubTest",
        "traceback",
        "unittest.case._AssertRaisesBaseContext",
        "unittest.case._CapturingHandler",
        "unittest.case._AssertWarnsContext",
        "unittest.case._UnexpectedSuccess",
        "unittest.case._AssertLogsContext",
        "re",
        "pprint",
        "warnings",
        "unittest.case._ShouldStop"
    ],
    "unittest.case.SkipTest": [],
    "unittest.case._ShouldStop": [],
    "unittest.case._UnexpectedSuccess": [],
    "unittest.case._Outcome": [
        "contextlib.contextmanager"
    ],
    "unittest.case._BaseTestCaseContext": [],
    "unittest.case._AssertRaisesBaseContext": [],
    "unittest.case._AssertRaisesContext": [],
    "unittest.case._AssertWarnsContext": [],
    "unittest.case._CapturingHandler": [],
    "unittest.case._AssertLogsContext": [],
    "unittest.case._OrderedChainMap": [],
    "unittest.case.TestCase": [
        "contextlib.contextmanager",
        "<builtin>.classmethod",
        "unittest.case.TestCase._deprecate"
    ],
    "unittest.case.TestCase._deprecate": [],
    "unittest.case.FunctionTestCase": [],
    "unittest.case._SubTest": [],
    "unittest.async_case.IsolatedAsyncioTestCase": [],
    "unittest.suite": [
        "unittest.util",
        "unittest.suite._DebugResult",
        "unittest.suite._ErrorHolder",
        "unittest.suite.BaseTestSuite",
        "unittest.suite.TestSuite",
        "unittest.case"
    ],
    "unittest.suite.BaseTestSuite": [],
    "unittest.suite.TestSuite": [],
    "unittest.suite._ErrorHolder": [],
    "unittest.suite._DebugResult": [],
    "unittest.loader": [
        "re.compile",
        "os",
        "unittest.util",
        "types",
        "fnmatch",
        "re",
        "unittest.loader.TestLoader",
        "unittest.suite",
        "traceback",
        "unittest.loader.TestLoader.__init__",
        "functools",
        "warnings",
        "unittest.loader._FailedTest",
        "unittest.case"
    ],
    "unittest.loader._FailedTest": [],
    "unittest.loader.TestLoader": [
        "<builtin>.staticmethod"
    ],
    "unittest.loader.TestLoader.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "unittest.main": [
        "os",
        "unittest.loader",
        "unittest.signals",
        "argparse",
        "unittest.runner",
        "unittest.main.TestProgram"
    ],
    "unittest.runner": [
        "unittest.runner._WritelnDecorator",
        "unittest.signals",
        "unittest.result",
        "unittest.runner.TextTestResult",
        "unittest.runner.TextTestRunner",
        "warnings"
    ],
    "unittest.signals": [
        "weakref.WeakKeyDictionary.__init__",
        "weakref",
        "signal",
        "unittest.signals._InterruptHandler",
        "functools"
    ],
    "unittest.signals._InterruptHandler": [],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "_weakref.ref",
        "<builtin>.set"
    ],
    "weakref.WeakKeyDictionary.update": [
        "<builtin>.len",
        "weakref.WeakKeyDictionary.update",
        "<builtin>.hasattr",
        "_weakref.ref",
        "<builtin>.type"
    ],
    "unittest.runner._WritelnDecorator": [],
    "unittest.runner.TextTestResult": [],
    "unittest.runner.TextTestRunner": [],
    "unittest.main.TestProgram": [],
    "doctest.register_optionflag": [
        "<map>.setdefault"
    ],
    "doctest._SpoofOut": [],
    "doctest._OutputRedirectingPdb": [],
    "doctest.Example": [],
    "doctest.DocTest": [],
    "doctest.DocTestParser": [
        "re.compile"
    ],
    "doctest.DocTestFinder": [],
    "doctest.DocTestRunner": [
        "re.compile"
    ],
    "doctest.OutputChecker": [],
    "doctest.DocTestFailure": [],
    "doctest.UnexpectedException": [],
    "doctest.DebugRunner": [],
    "doctest.DocTestCase": [],
    "doctest.SkipDocTestCase": [],
    "doctest._DocTestSuite": [],
    "doctest.DocFileCase": [],
    "doctest._TestClass": [],
    "doctest._test": [
        "argparse.ArgumentParser.__init__",
        "ntpath.split",
        "argparse._ActionsContainer.add_argument",
        "doctest.testmod",
        "<builtin>.__import__",
        "<map>.keys",
        "argparse",
        "doctest.testfile",
        "argparse.ArgumentParser.parse_args",
        "posixpath.split"
    ],
    "doctest.testfile": [
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestParser.get_doctest",
        "<map>.update",
        "doctest.DocTestRunner.summarize",
        "doctest.DocTestRunner.run",
        "doctest.DebugRunner.run",
        "doctest._load_testfile",
        "posixpath.basename",
        "doctest.DocTestRunner.merge",
        "ntpath.basename",
        "<builtin>.ValueError",
        "<map>.copy"
    ],
    "doctest._load_testfile": [
        "doctest._newline_convert",
        "<builtin>.getattr",
        "doctest._module_relative_path",
        "<builtin>.hasattr",
        "doctest._normalize_module",
        "<builtin>.open"
    ],
    "doctest._normalize_module": [
        "<builtin>.TypeError",
        "<builtin>.globals",
        "<builtin>.locals",
        "inspect.ismodule",
        "<builtin>.isinstance",
        "<builtin>.__import__"
    ],
    "<builtin>.locals": [],
    "doctest._module_relative_path": [
        "<builtin>.TypeError",
        "ntpath.split",
        "ntpath.join",
        "<builtin>.len",
        "posixpath.join",
        "inspect.ismodule",
        "genericpath.exists",
        "<str>.split",
        "<builtin>.hasattr",
        "<str>.startswith",
        "posixpath.split",
        "<builtin>.ValueError"
    ],
    "doctest._newline_convert": [],
    "doctest.DocTestRunner.__init__": [],
    "doctest.DocTestParser.get_doctest": [
        "doctest.DocTest.__init__",
        "doctest.DocTestParser.get_examples"
    ],
    "doctest.DocTestParser.get_examples": [
        "<builtin>.isinstance",
        "doctest.DocTestParser.parse"
    ],
    "doctest.DocTestParser.parse": [
        "doctest.DocTestParser._min_indent",
        "<list>.count",
        "<str>.expandtabs",
        "doctest.DocTestParser._parse_example",
        "<str>.count",
        "<str>.split",
        "<list>.append"
    ],
    "doctest.DocTestParser._min_indent": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "<str>.count": [],
    "doctest.DocTestParser._parse_example": [
        "doctest.DocTestParser._find_options",
        "<builtin>.len",
        "<str>.split",
        "re.match",
        "doctest.DocTestParser._check_prompt_blank",
        "doctest.DocTestParser._check_prefix"
    ],
    "doctest.DocTestParser._check_prompt_blank": [
        "<builtin>.enumerate",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "doctest.DocTestParser._check_prefix": [
        "<builtin>.enumerate",
        "<builtin>.ValueError"
    ],
    "doctest.DocTestParser._find_options": [
        "<builtin>.ValueError"
    ],
    "doctest.DocTest.__init__": [
        "<builtin>.isinstance",
        "<map>.copy"
    ],
    "doctest.DebugRunner.run": [
        "doctest.DocTestRunner.run",
        "<map>.clear"
    ],
    "doctest.DocTestRunner.run": [
        "doctest.DocTestRunner.__run",
        "doctest._extract_future_flags",
        "doctest._OutputRedirectingPdb.__init__"
    ],
    "doctest._extract_future_flags": [
        "<map>.get",
        "<builtin>.getattr"
    ],
    "doctest._OutputRedirectingPdb.__init__": [],
    "doctest.DocTestRunner.__run": [
        "doctest.DocTestRunner.report_failure",
        "doctest.DocTestRunner.report_success",
        "<builtin>.enumerate",
        "doctest.DocTestRunner.report_unexpected_exception",
        "doctest.DebugRunner.report_failure",
        "<builtin>.range",
        "doctest.DocTestRunner.report_start",
        "traceback.format_exception_only",
        "doctest._OutputRedirectingPdb.set_continue",
        "<builtin>.exec",
        "doctest._exception_traceback",
        "doctest.DocTestRunner.__record_outcome",
        "doctest.DebugRunner.report_unexpected_exception",
        "doctest._strip_exception_details",
        "doctest._SpoofOut.truncate",
        "<builtin>.compile",
        "doctest._SpoofOut.getvalue"
    ],
    "doctest.DocTestRunner.report_start": [
        "doctest.DocTestRunner.run.out",
        "doctest._indent"
    ],
    "doctest._indent": [
        "re.sub"
    ],
    "re.sub": [
        "re._compile"
    ],
    "doctest.DocTestRunner.run.out": [
        "<str>.encode",
        "codecs.StreamRecoder.write",
        "<builtin>.str"
    ],
    "<str>.encode": [],
    "<builtin>.exec": [],
    "doctest._SpoofOut.getvalue": [],
    "doctest._SpoofOut.truncate": [],
    "traceback.format_exception_only": [
        "<builtin>.list",
        "traceback.TracebackException.format_exception_only",
        "traceback.TracebackException.__init__"
    ],
    "doctest._exception_traceback": [
        "traceback.print_exception",
        "_io.StringIO"
    ],
    "doctest._strip_exception_details": [
        "<builtin>.len"
    ],
    "doctest.DocTestRunner.report_unexpected_exception": [
        "doctest.DocTestRunner.run.out",
        "doctest._exception_traceback",
        "doctest._indent",
        "doctest.DocTestRunner._failure_header"
    ],
    "doctest.DocTestRunner._failure_header": [
        "<list>.append"
    ],
    "doctest.DocTestRunner.report_failure": [
        "doctest.DocTestRunner.run.out",
        "doctest.DocTestRunner._failure_header"
    ],
    "doctest.DocTestRunner.report_success": [
        "doctest.DocTestRunner.run.out"
    ],
    "doctest.DocTestRunner.__record_outcome": [
        "<map>.get"
    ],
    "doctest.DocTestRunner.summarize": [
        "<list>.sort",
        "<builtin>.len",
        "<builtin>.print",
        "<list>.append",
        "<map>.items"
    ],
    "doctest.DocTestFinder.__init__": [],
    "doctest.DocTestFinder.find": [
        "<list>.sort",
        "<map>.update",
        "<builtin>.getattr",
        "doctest.DocTestFinder._find",
        "inspect.getmodule",
        "<map>.copy",
        "inspect.getsourcefile",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "doctest.DocTestFinder._find": [
        "inspect.unwrap",
        "doctest.DocTestFinder._find",
        "<builtin>.getattr",
        "inspect.ismodule",
        "doctest.DocTestFinder._get_test",
        "<builtin>.print",
        "inspect.isclass",
        "<builtin>.isinstance",
        "<list>.append",
        "inspect.isroutine",
        "doctest.DocTestFinder._from_module",
        "<builtin>.id",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "doctest.DocTestFinder._get_test": [
        "doctest.DocTestParser.get_doctest",
        "<builtin>.str",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "doctest.DocTestFinder._find_lineno"
    ],
    "doctest.DocTestFinder._find_lineno": [
        "re.compile",
        "<builtin>.enumerate",
        "<builtin>.range",
        "<builtin>.getattr",
        "<builtin>.len",
        "inspect.ismodule",
        "inspect.isfunction",
        "inspect.ismethod",
        "inspect.isclass",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.iscode"
    ],
    "<str>.expandtabs": [],
    "inspect.isroutine": [
        "inspect.isfunction",
        "inspect.ismethoddescriptor",
        "inspect.isbuiltin",
        "inspect.ismethod"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "inspect.isclass",
        "inspect.isfunction",
        "<builtin>.hasattr",
        "inspect.ismethod",
        "<builtin>.type"
    ],
    "doctest.DocTestFinder._from_module": [
        "inspect.isfunction",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "inspect.isclass",
        "inspect.getmodule",
        "inspect.ismethoddescriptor",
        "<builtin>.ValueError"
    ],
    "doctest.DocTestRunner.merge": [
        "<map>.items"
    ],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictValuesView": [],
    "collections._Link": [],
    "collections.OrderedDict": [
        "<builtin>.classmethod",
        "<builtin>.object",
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr",
        "<builtin>.property"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.UserList": [],
    "collections.UserString": [],
    "functools.partial": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "<builtin>.reversed": [],
    "collections.<lambda1>": [
        "<builtin>.property",
        "operator.itemgetter.__init__"
    ],
    "operator.itemgetter.__init__": [],
    "_collections._tuplegetter": [],
    "functools._HashedSeq": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [],
    "re.RegexFlag": [],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile.isstring",
        "sre_compile.dis",
        "sre_parse.parse",
        "<builtin>.print",
        "<map>.items",
        "<builtin>.tuple",
        "sre_compile._code"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.SubPattern.dump",
        "sre_parse._parse_sub",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.seek",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.Tokenizer.error",
        "sre_parse.State.__init__"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "sre_parse.Tokenizer.__next",
        "<builtin>.str"
    ],
    "sre_parse.Tokenizer.__next": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.tell",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "<list>.extend",
        "<builtin>.len",
        "<list>",
        "sre_parse.Tokenizer.match",
        "sre_parse.SubPattern.__init__",
        "<list>.append",
        "sre_parse.SubPattern.append",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [
        "<list>.append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_parse.SubPattern.dump": [
        "<builtin>.enumerate",
        "<builtin>.str",
        "<builtin>.isinstance",
        "<builtin>.print"
    ],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info",
        "<list>.append"
    ],
    "sre_compile._compile_info": [
        "<list>.extend",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._optimize_charset",
        "sre_compile._get_literal_prefix",
        "<builtin>.len",
        "<list>",
        "sre_compile._compile_charset",
        "sre_compile._get_charset_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "sre_compile._get_literal_prefix": [
        "<list>.extend",
        "sre_compile._get_literal_prefix",
        "<builtin>.len",
        "<list>",
        "sre_compile._get_iscased",
        "sre_compile._combine_flags"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "<builtin>.range",
        "<builtin>.map",
        "<builtin>.any",
        "<list>",
        "sre_compile._get_iscased",
        "sre_compile._combine_flags"
    ],
    "sre_compile._optimize_charset": [
        "<builtin>.range",
        "sre_compile._mk_bitmap",
        "sre_compile._bytes_to_codes",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.any",
        "<list>.append",
        "<builtin>.bytes",
        "<builtin>.bytearray"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "sre_compile._compile_charset": [
        "<list>.extend",
        "sre_constants.error.__init__",
        "<list>"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "sre_compile._compile": [
        "<map>.get",
        "sre_compile._simple",
        "sre_compile._optimize_charset",
        "sre_compile._compile_charset",
        "sre_constants.error.__init__",
        "<list>",
        "sre_compile._compile",
        "sre_compile._combine_flags"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "sre_compile.dis.dis_",
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "sre_compile.dis.dis_": [
        "sre_compile._hex_code",
        "<builtin>.chr",
        "<builtin>.range",
        "<builtin>.str",
        "sre_compile.dis.dis_.print_",
        "<builtin>.map",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.bin",
        "sre_compile.dis.dis_",
        "<builtin>.list",
        "<builtin>.ValueError"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "functools._lru_cache_wrapper": [
        "_thread.RLock",
        "<builtin>.object"
    ],
    "_thread.RLock": [],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools._lru_cache_wrapper",
        "functools.update_wrapper"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "typing.Generic.__class_getitem__",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "typing._GenericAlias.__getitem__",
        "fnmatch._compile_pattern",
        "typing._SpecialForm.__getitem__",
        "re._compile_repl",
        "pathlib._make_selector",
        "functools._make_key"
    ],
    "functools._make_key": [
        "functools._HashedSeq.__init__",
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "re._compile_repl": [
        "sre_parse.parse_template"
    ],
    "sre_parse.parse_template": [
        "sre_parse.Tokenizer.get",
        "<builtin>.int",
        "<str>.isidentifier",
        "<builtin>.chr",
        "sre_parse.Tokenizer.getuntil",
        "<builtin>.len",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.parse_template.addgroup",
        "<builtin>.isinstance",
        "<list>",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.error",
        "<list>.append",
        "<builtin>.IndexError"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.parse_template.addgroup": [
        "<list>.append",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "<str>.isidentifier": [],
    "<builtin>.IndexError": [],
    "copyreg.pickle": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "re.Scanner": [],
    "re._compile": [
        "<builtin>.TypeError",
        "sre_compile.isstring",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.iter",
        "<builtin>.next",
        "sre_compile.compile",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "<builtin>.next": [],
    "sqlparse.tokens": [
        "sqlparse.tokens._TokenType"
    ],
    "sqlparse.tokens._TokenType": [],
    "sqlparse.sql": [
        "sqlparse.sql.Token",
        "sqlparse.sql.Having",
        "sqlparse.sql.Comment",
        "sqlparse.tokens",
        "sqlparse.sql.Statement",
        "sqlparse.sql.Values",
        "sqlparse.sql.Command",
        "sqlparse.sql.Parenthesis",
        "sqlparse.sql.Assignment",
        "sqlparse.sql.NameAliasMixin",
        "sqlparse.sql.For",
        "sqlparse.sql.Comparison",
        "sqlparse.sql.Function",
        "sqlparse.sql.TokenList",
        "sqlparse.sql.IdentifierList",
        "sqlparse.sql.Begin",
        "sqlparse.sql.SquareBrackets",
        "sqlparse.sql.Operation",
        "sqlparse.sql.Where",
        "re",
        "sqlparse.utils",
        "sqlparse.sql.TypedLiteral",
        "sqlparse.sql.Identifier",
        "sqlparse.sql.Case",
        "sqlparse.sql.If"
    ],
    "sqlparse.sql.NameAliasMixin": [],
    "sqlparse.sql.Token": [],
    "sqlparse.sql.TokenList": [
        "<builtin>.property"
    ],
    "sqlparse.sql.Statement": [],
    "sqlparse.sql.Identifier": [],
    "sqlparse.sql.IdentifierList": [],
    "sqlparse.sql.TypedLiteral": [],
    "sqlparse.sql.Parenthesis": [
        "<builtin>.property"
    ],
    "sqlparse.sql.SquareBrackets": [
        "<builtin>.property"
    ],
    "sqlparse.sql.Assignment": [],
    "sqlparse.sql.If": [],
    "sqlparse.sql.For": [],
    "sqlparse.sql.Comparison": [
        "<builtin>.property"
    ],
    "sqlparse.sql.Comment": [],
    "sqlparse.sql.Where": [],
    "sqlparse.sql.Having": [],
    "sqlparse.sql.Case": [],
    "sqlparse.sql.Function": [],
    "sqlparse.sql.Begin": [],
    "sqlparse.sql.Operation": [],
    "sqlparse.sql.Values": [],
    "sqlparse.sql.Command": [],
    "sqlparse.keywords": [
        "re.compile",
        "sqlparse.tokens",
        "re"
    ],
    "sqlparse.lexer": [
        "io",
        "sqlparse.tokens",
        "sqlparse.utils",
        "sqlparse.lexer.Lexer",
        "sqlparse.keywords"
    ],
    "sqlparse.lexer.Lexer": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.formatter": [
        "sqlparse.filters",
        "sqlparse.exceptions"
    ],
    "sqlparse.filters": [
        "sqlparse.filters.others",
        "sqlparse.filters.output",
        "sqlparse.filters.tokens",
        "sqlparse.filters.reindent",
        "sqlparse.filters.aligned_indent",
        "sqlparse.filters.right_margin"
    ],
    "sqlparse.filters.others": [
        "sqlparse.filters.others.StripWhitespaceFilter",
        "sqlparse.sql",
        "sqlparse.filters.others.SpacesAroundOperatorsFilter",
        "sqlparse.tokens",
        "re",
        "sqlparse.utils",
        "sqlparse.filters.others.StripCommentsFilter",
        "sqlparse.filters.others.SerializerUnicode"
    ],
    "sqlparse.filters.others.StripCommentsFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.SerializerUnicode": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.output": [
        "sqlparse.sql",
        "sqlparse.filters.output.OutputPythonFilter",
        "sqlparse.tokens",
        "sqlparse.filters.output.OutputPHPFilter",
        "sqlparse.filters.output.OutputFilter"
    ],
    "sqlparse.filters.output.OutputFilter": [],
    "sqlparse.filters.output.OutputPythonFilter": [],
    "sqlparse.filters.output.OutputPHPFilter": [],
    "sqlparse.filters.tokens": [
        "sqlparse.filters.tokens.TruncateStringFilter",
        "sqlparse.filters.tokens._CaseFilter",
        "sqlparse.tokens",
        "sqlparse.filters.tokens.KeywordCaseFilter",
        "sqlparse.filters.tokens.IdentifierCaseFilter"
    ],
    "sqlparse.filters.tokens._CaseFilter": [],
    "sqlparse.filters.tokens.KeywordCaseFilter": [],
    "sqlparse.filters.tokens.IdentifierCaseFilter": [],
    "sqlparse.filters.tokens.TruncateStringFilter": [],
    "sqlparse.filters.reindent": [
        "sqlparse.utils",
        "sqlparse.tokens",
        "sqlparse.filters.reindent.ReindentFilter",
        "sqlparse.sql"
    ],
    "sqlparse.filters.reindent.ReindentFilter": [
        "<builtin>.property"
    ],
    "sqlparse.filters.right_margin": [
        "sqlparse.tokens",
        "sqlparse.filters.right_margin.RightMarginFilter",
        "re",
        "sqlparse.sql"
    ],
    "sqlparse.filters.right_margin.RightMarginFilter": [],
    "sqlparse.filters.aligned_indent": [
        "sqlparse.utils",
        "sqlparse.tokens",
        "sqlparse.sql",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter": [],
    "sqlparse.exceptions": [
        "sqlparse.exceptions.SQLParseError"
    ],
    "sqlparse.exceptions.SQLParseError": [],
    "sqlparse.cli": [
        "io",
        "sqlparse",
        "sqlparse.exceptions",
        "argparse"
    ],
    "sqlparse": [
        "sqlparse.sql",
        "sqlparse.filters",
        "sqlparse.tokens",
        "sqlparse.engine",
        "sqlparse.cli",
        "sqlparse.formatter"
    ],
    "sqlparse.engine": [
        "sqlparse.engine.grouping",
        "sqlparse.engine.statement_splitter",
        "sqlparse.engine.filter_stack"
    ],
    "sqlparse.engine.grouping": [
        "sqlparse.sql",
        "sqlparse.tokens",
        "sqlparse.utils.recurse.wrap",
        "sqlparse.utils.recurse",
        "sqlparse.utils"
    ],
    "sqlparse.utils.recurse": [],
    "sqlparse.utils.recurse.wrap": [],
    "sqlparse.engine.filter_stack": [
        "sqlparse.engine.grouping",
        "sqlparse.lexer",
        "sqlparse.engine.statement_splitter",
        "sqlparse.engine.filter_stack.FilterStack"
    ],
    "sqlparse.engine.statement_splitter": [
        "sqlparse.engine.statement_splitter.StatementSplitter",
        "sqlparse.tokens",
        "sqlparse.sql"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter": [],
    "sqlparse.engine.filter_stack.FilterStack": [],
    "sqlparse.__main__": [
        "sqlparse.cli.main",
        "sqlparse.cli"
    ],
    "sqlparse.cli.main": [
        "sqlparse.formatter.validate_options",
        "codecs.StreamRecoder.write",
        "<builtin>.vars",
        "sqlparse.cli._error",
        "sqlparse.cli.create_parser",
        "argparse.ArgumentParser.parse_args",
        "_io.TextIOWrapper",
        "sqlparse.format",
        "<builtin>.open"
    ],
    "sqlparse.cli.create_parser": [
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument_group"
    ],
    "sqlparse.cli._error": [],
    "<builtin>.vars": [],
    "sqlparse.formatter.validate_options": [
        "<builtin>.int"
    ],
    "sqlparse.format": [
        "sqlparse.formatter.validate_options",
        "sqlparse.engine.filter_stack.FilterStack.run",
        "<list>.append",
        "sqlparse.formatter.build_filter_stack",
        "sqlparse.engine.filter_stack.FilterStack.__init__"
    ],
    "sqlparse.engine.filter_stack.FilterStack.__init__": [],
    "sqlparse.formatter.build_filter_stack": [
        "sqlparse.engine.filter_stack.FilterStack.enable_grouping",
        "<list>.append"
    ],
    "sqlparse.engine.filter_stack.FilterStack.enable_grouping": [],
    "sqlparse.engine.filter_stack.FilterStack.run": [
        "sqlparse.engine.statement_splitter.StatementSplitter.process",
        "sqlparse.lexer.tokenize",
        "sqlparse.engine.grouping.group",
        "sqlparse.engine.statement_splitter.StatementSplitter.__init__"
    ],
    "sqlparse.lexer.tokenize": [
        "sqlparse.lexer.Lexer.get_tokens"
    ],
    "sqlparse.lexer.Lexer.get_tokens": [
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.callable",
        "sqlparse.utils.consume",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "sqlparse.utils.consume": [
        "_collections.deque"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter.__init__": [
        "sqlparse.engine.statement_splitter.StatementSplitter._reset"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter._reset": [],
    "sqlparse.engine.statement_splitter.StatementSplitter.process": [
        "sqlparse.engine.statement_splitter.StatementSplitter._reset",
        "sqlparse.engine.statement_splitter.StatementSplitter._change_splitlevel",
        "<list>.append",
        "<builtin>.all"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter._change_splitlevel": [
        "<builtin>.max"
    ],
    "<builtin>.all": [],
    "sqlparse.engine.grouping.group": [],
    "sqlparse.utils.split_unquoted_newlines": [
        "<builtin>.str",
        "<list>.append",
        "<str>.split"
    ],
    "sqlparse.utils.imt": [
        "<builtin>.any",
        "<builtin>.isinstance"
    ],
    "sqlparse.utils.recurse.wrap.wrapped_f": [
        "sqlparse.engine.grouping.align_comments",
        "sqlparse.engine.grouping.group_comments",
        "sqlparse.engine.grouping.group_where",
        "sqlparse.engine.grouping.group_identifier",
        "<builtin>.isinstance",
        "sqlparse.engine.grouping.group_aliased",
        "sqlparse.engine.grouping.group_functions",
        "sqlparse.utils.recurse.wrap.wrapped_f"
    ],
    "sqlparse.engine.grouping.align_comments": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_comments": [],
    "sqlparse.engine.grouping.group_where": [],
    "sqlparse.engine.grouping.group_identifier": [],
    "sqlparse.engine.grouping.group_aliased": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_functions": [
        "<builtin>.isinstance"
    ],
    "re.RegexFlag.__repr__": [
        "<list>.append",
        "<builtin>.len"
    ],
    "re.fullmatch": [
        "re._compile"
    ],
    "re.search": [
        "re._compile"
    ],
    "re.subn": [
        "re._compile"
    ],
    "re.split": [
        "re._compile",
        "<str>.split"
    ],
    "re.findall": [
        "re._compile"
    ],
    "re.finditer": [
        "re._compile"
    ],
    "re.purge": [
        "<map>.clear"
    ],
    "re.template": [
        "re._compile"
    ],
    "re._expand": [
        "sre_parse.expand_template",
        "sre_parse.parse_template"
    ],
    "sre_parse.expand_template": [
        "sre_constants.error.__init__"
    ],
    "re._subx": [
        "re._compile_repl",
        "<builtin>.len"
    ],
    "re.Scanner.__init__": [
        "sre_parse.State.closegroup",
        "sre_constants",
        "sre_parse.State.opengroup",
        "<builtin>.isinstance",
        "<list>.append",
        "sre_parse.SubPattern.__init__",
        "sre_parse.SubPattern.append",
        "sre_parse.State.__init__",
        "sre_compile.compile"
    ],
    "sre_parse.State.opengroup": [
        "<map>.get",
        "sre_constants.error.__init__",
        "<list>.append"
    ],
    "sre_parse.State.closegroup": [],
    "re.Scanner.scan": [
        "<list>",
        "<builtin>.callable"
    ],
    "enum._is_descriptor": [
        "<builtin>.hasattr"
    ],
    "enum._is_dunder": [
        "<builtin>.len"
    ],
    "enum._is_sunder": [
        "<builtin>.len"
    ],
    "enum._EnumDict.__init__": [
        "<builtin>.super"
    ],
    "enum._EnumDict.__setitem__": [
        "enum._is_sunder",
        "<builtin>.TypeError",
        "enum._is_descriptor",
        "<builtin>.setattr",
        "<builtin>.set",
        "<builtin>.len",
        "enum._is_dunder",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.list",
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "enum.EnumMeta.__prepare__": [
        "enum.EnumMeta._get_mixins_",
        "<builtin>.getattr",
        "enum._EnumDict.__init__"
    ],
    "enum.EnumMeta._get_mixins_": [
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "enum.EnumMeta._get_mixins_._find_data_type"
    ],
    "enum.EnumMeta._get_mixins_._find_data_type": [
        "<builtin>.issubclass"
    ],
    "enum.EnumMeta.__new__": [
        "<builtin>.TypeError",
        "enum._make_class_unpicklable",
        "<builtin>.setattr",
        "enum.EnumMeta._get_mixins_",
        "<builtin>.set",
        "<builtin>.getattr",
        "<builtin>.any",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "enum.EnumMeta._find_new_",
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "enum.EnumMeta._find_new_": [
        "<builtin>.getattr"
    ],
    "enum._make_class_unpicklable": [],
    "enum.EnumMeta.__call__": [
        "enum.EnumMeta._create_",
        "enum.EnumMeta.__new__"
    ],
    "enum.EnumMeta._create_": [
        "<builtin>.enumerate",
        "enum._make_class_unpicklable",
        "enum.EnumMeta._get_mixins_",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "enum.EnumMeta.__contains__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "enum.EnumMeta.__delattr__": [
        "<builtin>.super",
        "<builtin>.AttributeError"
    ],
    "<builtin>.AttributeError": [],
    "enum.EnumMeta.__getattr__": [
        "enum._is_dunder",
        "<builtin>.AttributeError"
    ],
    "enum.EnumMeta.__len__": [
        "<builtin>.len"
    ],
    "enum.EnumMeta.__reversed__": [
        "<builtin>.reversed"
    ],
    "enum.EnumMeta.__setattr__": [
        "<builtin>.super",
        "<builtin>.AttributeError"
    ],
    "enum.EnumMeta._convert_": [
        "<builtin>.filter",
        "<builtin>.vars"
    ],
    "<builtin>.filter": [],
    "enum.EnumMeta._convert": [
        "enum.EnumMeta._convert_",
        "warnings",
        "warnings.warn"
    ],
    "enum.Enum.__new__": [
        "<builtin>.TypeError",
        "enum.Enum._missing_",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "enum.Enum._missing_": [
        "<builtin>.ValueError"
    ],
    "enum.Enum._generate_next_value_": [
        "<builtin>.reversed"
    ],
    "enum.Enum.__format__": [
        "<builtin>.str"
    ],
    "enum.Enum.__hash__": [
        "<builtin>.hash"
    ],
    "enum.Flag._generate_next_value_": [
        "enum._high_bit",
        "<builtin>.reversed",
        "<builtin>.TypeError"
    ],
    "enum._high_bit": [
        "<int>.bit_length"
    ],
    "enum.Flag._missing_": [
        "enum.Flag._create_pseudo_member_"
    ],
    "enum.Flag._create_pseudo_member_": [
        "enum._decompose",
        "<builtin>.ValueError"
    ],
    "enum._decompose": [
        "<list>.sort",
        "<list>.pop",
        "enum._power_of_two",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.list"
    ],
    "enum._power_of_two": [
        "enum._high_bit"
    ],
    "enum.Flag.__contains__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "enum.Flag.__repr__": [
        "enum._decompose",
        "<builtin>.str"
    ],
    "enum.Flag.__str__": [
        "enum._decompose",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "enum.Flag.__bool__": [
        "<builtin>.bool"
    ],
    "enum.Flag.__or__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__and__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__xor__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__invert__": [
        "enum._decompose"
    ],
    "enum.IntFlag._missing_": [
        "<builtin>.isinstance",
        "enum.IntFlag._create_pseudo_member_",
        "<builtin>.ValueError"
    ],
    "enum.IntFlag._create_pseudo_member_": [
        "enum._decompose",
        "<builtin>.reversed",
        "<list>.append",
        "enum._high_bit"
    ],
    "<int>.bit_length": [],
    "enum.IntFlag.__or__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__and__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__xor__": [
        "<builtin>.isinstance"
    ],
    "enum.unique": [
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "types.new_class": [
        "<map>",
        "types.resolve_bases",
        "types.prepare_class"
    ],
    "types.resolve_bases": [
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.list",
        "<builtin>.tuple"
    ],
    "types.prepare_class": [
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "types._calculate_meta",
        "<map>.__prepare__",
        "<map>.pop",
        "<builtin>.type"
    ],
    "<map>.pop": [],
    "types._calculate_meta": [
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.type"
    ],
    "<map>.__prepare__": [],
    "types.DynamicClassAttribute.__get__": [
        "enum.Enum.name",
        "enum.Enum.value",
        "<builtin>.AttributeError"
    ],
    "enum.Enum.name": [],
    "enum.Enum.value": [],
    "types.DynamicClassAttribute.__set__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.__delete__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.getter": [
        "<builtin>.type"
    ],
    "types.DynamicClassAttribute.setter": [
        "<builtin>.type"
    ],
    "types.DynamicClassAttribute.deleter": [
        "<builtin>.type"
    ],
    "types._GeneratorWrapper.__init__": [
        "<builtin>.getattr"
    ],
    "types._GeneratorWrapper.__next__": [
        "<builtin>.next"
    ],
    "types.coroutine.wrapped": [
        "asyncio.tasks.__sleep0",
        "types._GeneratorWrapper.__init__",
        "asyncio.tasks._wrap_awaitable",
        "<builtin>.isinstance",
        "asyncio.locks._ContextManagerMixin.__iter__",
        "asyncio.coroutines.coroutine.coro"
    ],
    "asyncio.tasks.__sleep0": [],
    "asyncio.tasks._wrap_awaitable": [
        "asyncio.futures.Future.__await__"
    ],
    "asyncio.locks._ContextManagerMixin.__iter__": [
        "asyncio.locks._ContextManager.__init__",
        "warnings.warn"
    ],
    "asyncio.locks._ContextManager.__init__": [],
    "sre_compile._generate_overlap_table": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_parse.State.groups": [
        "<builtin>.len"
    ],
    "sre_parse.State.checklookbehindgroup": [
        "sre_parse.State.checkgroup"
    ],
    "sre_parse.State.checkgroup": [],
    "sre_parse.SubPattern.__repr__": [
        "<builtin>.repr"
    ],
    "sre_parse.SubPattern.__len__": [
        "<builtin>.len"
    ],
    "sre_parse.SubPattern.__getitem__": [
        "<builtin>.isinstance",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.SubPattern.insert": [
        "<list>.insert"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.range"
    ],
    "sre_parse.Tokenizer.pos": [
        "<builtin>.len"
    ],
    "sre_parse._class_escape": [
        "<map>.get",
        "<builtin>.int",
        "<builtin>.chr",
        "<builtin>.ord",
        "<builtin>.len",
        "unicodedata"
    ],
    "unicodedata": [],
    "sre_parse._escape": [
        "<map>.get",
        "<builtin>.int",
        "<builtin>.chr",
        "<builtin>.ord",
        "<builtin>.len",
        "unicodedata"
    ],
    "sre_parse._uniq": [
        "<builtin>.list"
    ],
    "sre_parse._parse": [
        "<builtin>.AssertionError",
        "<builtin>.int",
        "sre_parse._class_escape",
        "warnings.warn",
        "<builtin>.OverflowError",
        "<builtin>.range",
        "sre_parse._parse_sub",
        "sre_parse._parse",
        "sre_parse._parse_flags",
        "<builtin>.len",
        "<list>",
        "sre_parse.SubPattern.__init__",
        "sre_parse.SubPattern.append",
        "sre_parse._uniq",
        "warnings",
        "sre_parse._escape"
    ],
    "<builtin>.AssertionError": [],
    "sre_parse._parse_flags": [
        "<builtin>.len"
    ],
    "<builtin>.OverflowError": [],
    "sre_constants._NamedIntConstant.__new__": [
        "<builtin>.super"
    ],
    "functools.total_ordering": [
        "<builtin>.setattr",
        "<builtin>.max",
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "functools.cmp_to_key": [
        "functools.cmp_to_key.K"
    ],
    "functools.cmp_to_key.K": [],
    "functools.reduce": [
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.TypeError"
    ],
    "functools.partial.__new__": [
        "<builtin>.TypeError",
        "<builtin>.super",
        "<builtin>.hasattr",
        "<builtin>.callable"
    ],
    "functools.partial.__repr__": [
        "<list>.extend",
        "<builtin>.type"
    ],
    "functools.partial.__reduce__": [
        "<builtin>.type"
    ],
    "functools.partial.__setstate__": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.len",
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.type"
    ],
    "functools.partialmethod.__init__": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "warnings.warn",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<map>.pop",
        "warnings",
        "<builtin>.tuple"
    ],
    "functools.partialmethod.__repr__": [
        "<builtin>.map",
        "<map>.items"
    ],
    "functools.partialmethod.__get__": [
        "<builtin>.getattr",
        "functools.partialmethod._make_unbound_method"
    ],
    "functools.partialmethod._make_unbound_method": [],
    "functools.partialmethod.__isabstractmethod__": [
        "<builtin>.getattr"
    ],
    "functools._unwrap_partial": [
        "<builtin>.isinstance"
    ],
    "functools._c3_merge": [
        "<builtin>.RuntimeError",
        "<list>.append"
    ],
    "functools._c3_mro": [
        "<list>.remove",
        "<builtin>.enumerate",
        "<builtin>.reversed",
        "functools._c3_mro",
        "<builtin>.issubclass",
        "functools._c3_merge",
        "<builtin>.len",
        "<builtin>.any",
        "<builtin>.hasattr",
        "<list>.append",
        "<builtin>.list"
    ],
    "functools._compose_mro": [
        "<list>.sort",
        "functools._c3_mro",
        "functools._compose_mro.is_strict_base",
        "<builtin>.set",
        "<list>.append",
        "functools._compose_mro.is_related",
        "<builtin>.issubclass"
    ],
    "functools._compose_mro.is_related": [
        "<builtin>.issubclass",
        "<builtin>.hasattr"
    ],
    "functools._compose_mro.is_strict_base": [],
    "functools._find_impl": [
        "<map>.get",
        "<map>.keys",
        "<builtin>.issubclass",
        "<builtin>.RuntimeError",
        "functools._compose_mro"
    ],
    "functools.singledispatch": [
        "weakref.WeakKeyDictionary.__init__",
        "types",
        "functools.update_wrapper",
        "<builtin>.getattr",
        "weakref"
    ],
    "functools.singledispatchmethod.__init__": [
        "<builtin>.TypeError",
        "functools.singledispatch",
        "<builtin>.hasattr",
        "<builtin>.callable"
    ],
    "functools.singledispatchmethod.register": [
        "functools.singledispatch.register"
    ],
    "functools.singledispatch.register": [
        "<builtin>.TypeError",
        "typing.get_type_hints",
        "<builtin>.next",
        "_py_abc.get_cache_token",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.iter",
        "<map>.items",
        "_abc.get_cache_token",
        "typing"
    ],
    "typing.get_type_hints": [
        "<builtin>.TypeError",
        "<builtin>.reversed",
        "<builtin>.getattr",
        "<builtin>.dict",
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "typing._eval_type",
        "typing._get_defaults",
        "<map>.items",
        "<builtin>.type"
    ],
    "typing._eval_type": [
        "typing.ForwardRef._evaluate",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "typing._eval_type"
    ],
    "typing.ForwardRef._evaluate": [
        "typing._type_check",
        "<builtin>.eval"
    ],
    "<builtin>.eval": [],
    "typing._get_defaults": [
        "<builtin>.dict",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "_py_abc.get_cache_token": [],
    "_abc.get_cache_token": [],
    "functools.singledispatchmethod.__get__": [
        "functools.update_wrapper"
    ],
    "functools.singledispatchmethod.__isabstractmethod__": [
        "<builtin>.getattr"
    ],
    "functools.cached_property.__init__": [
        "_thread.RLock"
    ],
    "functools.cached_property.__set_name__": [
        "<builtin>.TypeError"
    ],
    "functools.cached_property.__get__": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "abc.abstractclassmethod.__init__": [
        "<builtin>.super"
    ],
    "abc.abstractstaticmethod.__init__": [
        "<builtin>.super"
    ],
    "_py_abc.ABCMeta.__new__": [
        "<builtin>.frozenset",
        "<builtin>.set",
        "<builtin>.getattr",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.super"
    ],
    "_py_abc.ABCMeta.register": [
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.isinstance",
        "<builtin>.RuntimeError"
    ],
    "_py_abc.ABCMeta._dump_registry": [
        "<builtin>.getattr",
        "<builtin>.set",
        "<builtin>.print",
        "<builtin>.isinstance",
        "_py_abc.get_cache_token"
    ],
    "_py_abc.ABCMeta.__instancecheck__": [
        "<builtin>.any",
        "_py_abc.ABCMeta.__subclasscheck__",
        "<builtin>.type"
    ],
    "_py_abc.ABCMeta.__subclasscheck__": [
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.isinstance",
        "_weakrefset.WeakSet.add",
        "<builtin>.issubclass"
    ],
    "_weakrefset._IterationGuard.__init__": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__iter__": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "_weakrefset.WeakSet.__len__": [
        "<builtin>.len"
    ],
    "_weakrefset.WeakSet.__contains__": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__reduce__": [
        "<builtin>.list",
        "<builtin>.getattr"
    ],
    "_weakrefset.WeakSet.clear": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.pop": [
        "<builtin>.KeyError",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.remove": [
        "_weakref.ref",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.discard": [
        "_weakref.ref",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.__ior__": [
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.difference": [
        "_weakrefset.WeakSet.copy"
    ],
    "_weakrefset.WeakSet.copy": [],
    "_weakrefset.WeakSet.difference_update": [
        "_weakrefset.WeakSet.__isub__"
    ],
    "_weakrefset.WeakSet.__isub__": [
        "_weakref.ref",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.intersection_update": [
        "_weakrefset.WeakSet.__iand__"
    ],
    "_weakrefset.WeakSet.__iand__": [
        "_weakref.ref",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.issubset": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__lt__": [
        "<builtin>.map",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.issuperset": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__gt__": [
        "<builtin>.map",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.__eq__": [
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.symmetric_difference": [
        "_weakrefset.WeakSet.copy"
    ],
    "_weakrefset.WeakSet.symmetric_difference_update": [
        "_weakrefset.WeakSet.__ixor__"
    ],
    "_weakrefset.WeakSet.__ixor__": [
        "_weakref.ref",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.isdisjoint": [
        "<builtin>.len",
        "_weakrefset.WeakSet.intersection"
    ],
    "_weakrefset.WeakSet.intersection": [],
    "_weakrefset.WeakSet.__repr__": [
        "<builtin>.repr"
    ],
    "collections.__getattr__": [
        "<builtin>.globals",
        "warnings.warn",
        "<builtin>.getattr",
        "warnings",
        "<builtin>.AttributeError"
    ],
    "collections._OrderedDictKeysView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._OrderedDictItemsView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._OrderedDictValuesView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections.OrderedDict.__init__": [
        "_weakref.proxy"
    ],
    "_weakref.proxy": [],
    "collections.OrderedDict.__setitem__": [
        "_weakref.proxy"
    ],
    "collections.OrderedDict.__delitem__": [
        "<map>.pop"
    ],
    "collections.OrderedDict.clear": [
        "<map>.clear"
    ],
    "collections.OrderedDict.popitem": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.__sizeof__": [
        "<builtin>.len"
    ],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.__repr__": [
        "<builtin>.list",
        "collections.OrderedDict.items"
    ],
    "collections.OrderedDict.items": [],
    "collections.OrderedDict.__reduce__": [
        "collections.OrderedDict.__init__",
        "<builtin>.iter",
        "<builtin>.vars",
        "collections.OrderedDict.items"
    ],
    "collections.OrderedDict.fromkeys": [
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.__eq__": [
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "collections.Counter.__init__": [
        "collections.Counter.update",
        "<builtin>.super"
    ],
    "collections.Counter.update": [
        "collections._count_elements",
        "collections.Counter.update",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "collections._count_elements": [],
    "collections.Counter.most_common": [
        "<builtin>.sorted",
        "heapq.nlargest",
        "operator.itemgetter.__init__"
    ],
    "heapq.nlargest": [
        "<builtin>.zip",
        "operator.itemgetter.__init__",
        "<builtin>.range",
        "heapq.heapreplace",
        "<builtin>.max",
        "<builtin>.len",
        "heapq.heapify",
        "<builtin>.iter",
        "<builtin>.object"
    ],
    "heapq.heapify": [
        "heapq._siftup",
        "<builtin>.reversed",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "heapq._siftup": [
        "heapq._siftdown",
        "<builtin>.len"
    ],
    "heapq._siftdown": [],
    "heapq.heapreplace": [
        "heapq._siftup"
    ],
    "collections.Counter.elements": [
        "itertools.starmap"
    ],
    "itertools.starmap": [],
    "collections.Counter.fromkeys": [
        "<builtin>.NotImplementedError"
    ],
    "collections.Counter.subtract": [
        "<builtin>.isinstance",
        "collections.Counter.subtract"
    ],
    "collections.Counter.__reduce__": [
        "<builtin>.dict"
    ],
    "collections.Counter.__delitem__": [
        "<builtin>.super"
    ],
    "collections.Counter.__repr__": [
        "<builtin>.map",
        "<builtin>.dict",
        "collections.Counter.most_common"
    ],
    "collections.Counter.__add__": [
        "<builtin>.isinstance",
        "collections.Counter.__init__"
    ],
    "collections.Counter.__sub__": [
        "<builtin>.isinstance",
        "collections.Counter.__init__"
    ],
    "collections.Counter.__or__": [
        "<builtin>.isinstance",
        "collections.Counter.__init__"
    ],
    "collections.Counter.__and__": [
        "<builtin>.isinstance",
        "collections.Counter.__init__"
    ],
    "collections.Counter.__pos__": [
        "collections.Counter.__init__"
    ],
    "collections.Counter.__neg__": [
        "collections.Counter.__init__"
    ],
    "collections.Counter.__iadd__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter._keep_positive": [],
    "collections.Counter.__isub__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__ior__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__iand__": [
        "collections.Counter._keep_positive"
    ],
    "collections.ChainMap.__init__": [
        "<builtin>.list"
    ],
    "collections.ChainMap.__missing__": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.__getitem__": [
        "collections.ChainMap.__missing__"
    ],
    "collections.ChainMap.__len__": [
        "<builtin>.set",
        "<builtin>.len"
    ],
    "collections.ChainMap.__iter__": [
        "<map>.update",
        "<builtin>.iter",
        "<builtin>.reversed"
    ],
    "collections.ChainMap.__contains__": [
        "<builtin>.any"
    ],
    "collections.ChainMap.__bool__": [
        "<builtin>.any"
    ],
    "collections.ChainMap.__repr__": [
        "<builtin>.map"
    ],
    "collections.ChainMap.fromkeys": [
        "collections.ChainMap.__init__"
    ],
    "collections.ChainMap.__delitem__": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.popitem": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.pop": [
        "<builtin>.KeyError"
    ],
    "collections.UserDict.__init__": [
        "<builtin>.TypeError",
        "warnings",
        "<builtin>.len",
        "warnings.warn"
    ],
    "collections.UserDict.__len__": [
        "<builtin>.len"
    ],
    "collections.UserDict.__getitem__": [
        "<builtin>.hasattr",
        "<builtin>.KeyError"
    ],
    "collections.UserDict.__iter__": [
        "<builtin>.iter"
    ],
    "collections.UserDict.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserDict.copy": [
        "copy",
        "<map>.update",
        "collections.UserDict.__init__",
        "copy.copy",
        "<map>.copy"
    ],
    "collections.UserDict.fromkeys": [
        "collections.UserDict.__init__"
    ],
    "collections.UserList.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserList.__lt__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__cast": [
        "<builtin>.isinstance"
    ],
    "collections.UserList.__le__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__eq__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__gt__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__ge__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__len__": [
        "<builtin>.len"
    ],
    "collections.UserList.__getitem__": [
        "<builtin>.isinstance"
    ],
    "collections.UserList.__add__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__radd__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__iadd__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.append": [
        "<list>.append"
    ],
    "collections.UserList.insert": [
        "<list>.insert"
    ],
    "collections.UserList.pop": [
        "<list>.pop"
    ],
    "collections.UserList.remove": [
        "<list>.remove"
    ],
    "collections.UserList.clear": [
        "<list>.clear"
    ],
    "<list>.clear": [],
    "collections.UserList.count": [
        "<list>.count"
    ],
    "<list>.count": [],
    "collections.UserList.index": [
        "<list>.index"
    ],
    "collections.UserList.reverse": [
        "<list>.reverse"
    ],
    "collections.UserList.sort": [
        "<list>.sort"
    ],
    "collections.UserList.extend": [
        "<list>.extend",
        "<builtin>.isinstance"
    ],
    "collections.UserString.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__str__": [
        "<builtin>.str"
    ],
    "collections.UserString.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserString.__int__": [
        "<builtin>.int"
    ],
    "collections.UserString.__float__": [
        "<builtin>.float"
    ],
    "<builtin>.float": [],
    "collections.UserString.__complex__": [
        "<builtin>.complex"
    ],
    "<builtin>.complex": [],
    "collections.UserString.__hash__": [
        "<builtin>.hash"
    ],
    "collections.UserString.__eq__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__lt__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__le__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__gt__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__ge__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__contains__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__len__": [
        "<builtin>.len"
    ],
    "collections.UserString.__add__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__radd__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__rmod__": [
        "<builtin>.str"
    ],
    "collections.UserString.count": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.find": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.replace": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.rfind": [
        "<builtin>.isinstance"
    ],
    "collections.namedtuple._make": [
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "collections.namedtuple._replace": [
        "<builtin>.list",
        "<builtin>.ValueError"
    ],
    "operator.abs": [
        "builtins.abs"
    ],
    "builtins.abs": [],
    "operator.concat": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "operator.indexOf": [
        "<builtin>.enumerate"
    ],
    "operator.length_hint": [
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.TypeError",
        "<str>.split",
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "operator.attrgetter.__call__": [
        "operator.attrgetter.__init__.func"
    ],
    "operator.attrgetter.__init__.func": [
        "<builtin>.tuple"
    ],
    "operator.attrgetter.__repr__": [
        "<builtin>.map"
    ],
    "operator.itemgetter.__call__": [
        "operator.itemgetter.__init__.func"
    ],
    "operator.itemgetter.__init__.func": [
        "<builtin>.tuple"
    ],
    "operator.itemgetter.__repr__": [
        "<builtin>.map"
    ],
    "operator.methodcaller.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "operator.methodcaller.__call__": [
        "<builtin>.getattr"
    ],
    "operator.methodcaller.__repr__": [
        "<list>.extend"
    ],
    "operator.methodcaller.__reduce__": [
        "functools"
    ],
    "operator.iconcat": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "heapq.heappush": [
        "heapq._siftdown",
        "<list>.append",
        "<builtin>.len"
    ],
    "heapq.heappop": [
        "<list>.pop",
        "heapq._siftup"
    ],
    "heapq.heappushpop": [
        "heapq._siftup"
    ],
    "heapq._heappop_max": [
        "heapq._siftup_max",
        "<list>.pop"
    ],
    "heapq._siftup_max": [
        "heapq._siftdown_max",
        "<builtin>.len"
    ],
    "heapq._siftdown_max": [],
    "heapq._heapreplace_max": [
        "heapq._siftup_max"
    ],
    "heapq._heapify_max": [
        "heapq._siftup_max",
        "<builtin>.reversed",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "heapq.merge": [
        "<builtin>.enumerate",
        "heapq._heappop_max",
        "heapq.heapreplace",
        "heapq._heapify_max",
        "<builtin>.len",
        "heapq.heappop",
        "<builtin>.map",
        "heapq._heapreplace_max",
        "heapq.heapify",
        "<list>",
        "<builtin>.next"
    ],
    "heapq.nsmallest": [
        "<builtin>.zip",
        "<builtin>.range",
        "heapq._heapify_max",
        "<builtin>.len",
        "heapq._heapreplace_max",
        "<builtin>.iter",
        "<builtin>.object",
        "<builtin>.min"
    ],
    "doctest._ellipsis_match": [
        "<str>.find",
        "<builtin>.len",
        "<str>.split",
        "<str>.endswith",
        "<str>.startswith"
    ],
    "doctest.Example.__eq__": [
        "<builtin>.type"
    ],
    "doctest.Example.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTest.__repr__": [
        "<builtin>.len"
    ],
    "doctest.DocTest.__eq__": [
        "<builtin>.type"
    ],
    "doctest.DocTest.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTest.__lt__": [
        "<builtin>.isinstance",
        "<builtin>.id"
    ],
    "doctest._OutputRedirectingPdb.set_continue": [],
    "doctest.DebugRunner.report_unexpected_exception": [
        "doctest.UnexpectedException.__init__"
    ],
    "doctest.UnexpectedException.__init__": [],
    "doctest.DebugRunner.report_failure": [
        "doctest.DocTestFailure.__init__"
    ],
    "doctest.DocTestFailure.__init__": [],
    "doctest.DocTestRunner.__patched_linecache_getlines": [
        "linecache.getlines",
        "<builtin>.int"
    ],
    "doctest.OutputChecker._toAscii": [
        "<str>.encode",
        "<builtin>.str"
    ],
    "doctest.OutputChecker.check_output": [
        "re.escape",
        "doctest._ellipsis_match",
        "<str>.split",
        "re.sub",
        "doctest.OutputChecker._toAscii"
    ],
    "<str>.translate": [],
    "doctest.OutputChecker.output_difference": [
        "difflib.unified_diff",
        "difflib.context_diff",
        "doctest._indent",
        "difflib.Differ.compare",
        "doctest.OutputChecker._do_a_fancy_diff",
        "difflib.Differ.__init__",
        "re.sub",
        "<builtin>.list",
        "<str>.splitlines"
    ],
    "doctest.OutputChecker._do_a_fancy_diff": [
        "<str>.count"
    ],
    "<str>.splitlines": [],
    "difflib.Differ.__init__": [],
    "difflib.Differ.compare": [
        "difflib.Differ._fancy_replace",
        "difflib.SequenceMatcher.__init__",
        "difflib.Differ._dump",
        "difflib.SequenceMatcher.get_opcodes",
        "<builtin>.ValueError"
    ],
    "difflib.SequenceMatcher.__init__": [
        "difflib.SequenceMatcher.set_seqs"
    ],
    "difflib.SequenceMatcher.set_seqs": [
        "difflib.SequenceMatcher.set_seq2",
        "difflib.SequenceMatcher.set_seq1"
    ],
    "difflib.SequenceMatcher.set_seq1": [],
    "difflib.SequenceMatcher.set_seq2": [
        "difflib.SequenceMatcher.__chain_b"
    ],
    "difflib.SequenceMatcher.__chain_b": [
        "difflib.IS_CHARACTER_JUNK",
        "<builtin>.enumerate",
        "<map>.setdefault",
        "<builtin>.set",
        "<builtin>.len",
        "<map>.keys",
        "<map>.items"
    ],
    "difflib.SequenceMatcher.get_opcodes": [
        "difflib.SequenceMatcher.get_matching_blocks",
        "<list>.append"
    ],
    "difflib.SequenceMatcher.get_matching_blocks": [
        "<list>.sort",
        "difflib.SequenceMatcher.find_longest_match",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.map",
        "<list>.append",
        "<list>.pop"
    ],
    "difflib.SequenceMatcher.find_longest_match": [
        "<map>.get",
        "<map>",
        "<builtin>.range"
    ],
    "difflib.Differ._dump": [
        "<builtin>.range"
    ],
    "difflib.Differ._fancy_replace": [
        "difflib.SequenceMatcher.set_seq2",
        "difflib.Differ._qformat",
        "difflib.SequenceMatcher.set_seqs",
        "<builtin>.range",
        "difflib.SequenceMatcher.ratio",
        "difflib.Differ._plain_replace",
        "difflib.Differ._fancy_helper",
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.real_quick_ratio",
        "difflib.SequenceMatcher.quick_ratio",
        "difflib.SequenceMatcher.get_opcodes",
        "<builtin>.ValueError"
    ],
    "difflib.SequenceMatcher.real_quick_ratio": [
        "<builtin>.min",
        "difflib._calculate_ratio",
        "<builtin>.len"
    ],
    "difflib._calculate_ratio": [],
    "difflib.SequenceMatcher.quick_ratio": [
        "<map>.get",
        "difflib._calculate_ratio",
        "<builtin>.len"
    ],
    "difflib.SequenceMatcher.ratio": [
        "difflib.SequenceMatcher.get_matching_blocks",
        "<builtin>.sum",
        "<builtin>.len",
        "difflib._calculate_ratio"
    ],
    "<builtin>.sum": [],
    "difflib.Differ._plain_replace": [
        "difflib.Differ._dump"
    ],
    "difflib.Differ._fancy_helper": [
        "difflib.Differ._fancy_replace",
        "difflib.Differ._dump"
    ],
    "difflib.Differ._qformat": [
        "difflib._keep_original_ws",
        "<str>.rstrip"
    ],
    "difflib._keep_original_ws": [
        "<builtin>.zip"
    ],
    "<str>.rstrip": [],
    "difflib.context_diff": [
        "difflib.SequenceMatcher.get_grouped_opcodes",
        "<builtin>.dict",
        "<builtin>.any",
        "difflib.SequenceMatcher.__init__",
        "difflib._format_range_context",
        "difflib._check_types"
    ],
    "difflib._check_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "difflib.SequenceMatcher.get_grouped_opcodes": [
        "<builtin>.max",
        "<builtin>.len",
        "<list>.append",
        "difflib.SequenceMatcher.get_opcodes",
        "<builtin>.min"
    ],
    "difflib._format_range_context": [],
    "difflib.unified_diff": [
        "difflib._check_types",
        "difflib._format_range_unified",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.get_grouped_opcodes"
    ],
    "difflib._format_range_unified": [],
    "doctest.DocTestFailure.__str__": [
        "<builtin>.str"
    ],
    "doctest.UnexpectedException.__str__": [
        "<builtin>.str"
    ],
    "doctest.run_docstring_examples": [
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestFinder.find",
        "doctest.DocTestRunner.run",
        "doctest.DocTestFinder.__init__"
    ],
    "doctest.set_unittest_reportflags": [
        "<builtin>.ValueError"
    ],
    "doctest.DocTestCase.__init__": [
        "unittest.case.TestCase.__init__"
    ],
    "unittest.case.TestCase.__init__": [
        "unittest.case.TestCase.addTypeEqualityFunc",
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "unittest.case.TestCase.addTypeEqualityFunc": [],
    "doctest.DocTestCase.runTest": [
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestCase.format_failure",
        "_io.StringIO",
        "doctest.DocFileCase.format_failure",
        "doctest.DocTestRunner.run"
    ],
    "doctest.DocTestCase.format_failure": [],
    "doctest.DocTestCase.debug": [
        "doctest.DocTestCase.tearDown",
        "doctest.DocTestCase.setUp",
        "doctest.SkipDocTestCase.setUp",
        "doctest.DebugRunner.run"
    ],
    "doctest.DocTestCase.setUp": [],
    "doctest.DocTestCase.tearDown": [],
    "doctest.DocTestCase.__eq__": [
        "<builtin>.type"
    ],
    "doctest.DocTestCase.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.SkipDocTestCase.__init__": [
        "doctest.DocTestCase.__init__"
    ],
    "doctest.SkipDocTestCase.setUp": [
        "unittest.case.TestCase.skipTest"
    ],
    "unittest.case.TestCase.skipTest": [],
    "doctest.DocTestSuite": [
        "unittest.suite.BaseTestSuite.addTest",
        "doctest.DocTestFinder.find",
        "<list>.sort",
        "<builtin>.len",
        "doctest.DocTestCase.__init__",
        "doctest._normalize_module",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTestFinder.__init__"
    ],
    "unittest.suite.BaseTestSuite.addTest": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.repr",
        "<list>.append",
        "<builtin>.issubclass"
    ],
    "doctest.DocFileTest": [
        "doctest.DocTestParser.get_doctest",
        "doctest._load_testfile",
        "posixpath.basename",
        "ntpath.basename",
        "<builtin>.ValueError",
        "<map>.copy"
    ],
    "doctest.DocFileSuite": [
        "unittest.suite.BaseTestSuite.addTest",
        "doctest._normalize_module",
        "doctest.DocFileTest"
    ],
    "doctest.script_from_examples": [
        "doctest.DocTestParser.parse",
        "doctest._comment_line",
        "<builtin>.isinstance",
        "<list>.append",
        "<list>.pop"
    ],
    "doctest._comment_line": [],
    "doctest.testsource": [
        "doctest.script_from_examples",
        "doctest.DocTestFinder.find",
        "doctest._normalize_module",
        "doctest.DocTestFinder.__init__",
        "<builtin>.ValueError"
    ],
    "doctest.debug_src": [
        "doctest.debug_script",
        "doctest.script_from_examples"
    ],
    "doctest.debug_script": [
        "<builtin>.exec",
        "<map>.copy",
        "<builtin>.print"
    ],
    "doctest.debug": [
        "doctest.testsource",
        "doctest.debug_script",
        "doctest._normalize_module"
    ],
    "__future__._Feature.__repr__": [
        "<builtin>.repr"
    ],
    "difflib.IS_CHARACTER_JUNK": [],
    "difflib.get_close_matches": [
        "difflib.SequenceMatcher.set_seq2",
        "heapq.nlargest",
        "difflib.SequenceMatcher.ratio",
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.__init__",
        "<list>.append",
        "difflib.SequenceMatcher.real_quick_ratio",
        "difflib.SequenceMatcher.quick_ratio",
        "<builtin>.ValueError"
    ],
    "difflib.diff_bytes": [
        "<builtin>.map",
        "<builtin>.list",
        "difflib.diff_bytes.decode"
    ],
    "difflib.diff_bytes.decode": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "difflib.ndiff": [
        "difflib.Differ.compare",
        "difflib.Differ.__init__"
    ],
    "difflib._mdiff": [
        "re.compile",
        "re",
        "difflib.ndiff",
        "difflib._mdiff._line_pair_iterator",
        "<builtin>.next"
    ],
    "difflib._mdiff._line_pair_iterator": [
        "<builtin>.next",
        "<builtin>.len",
        "<list>.append",
        "difflib._mdiff._line_iterator",
        "<list>.pop"
    ],
    "difflib._mdiff._line_iterator": [
        "difflib._mdiff._make_line",
        "<str>.startswith",
        "<list>.append",
        "<builtin>.len"
    ],
    "difflib._mdiff._make_line": [
        "<list>.pop",
        "<builtin>.reversed"
    ],
    "difflib.HtmlDiff.make_file": [
        "<builtin>.dict",
        "<str>.encode",
        "difflib.HtmlDiff.make_table"
    ],
    "difflib.HtmlDiff.make_table": [
        "difflib._mdiff",
        "<builtin>.range",
        "difflib.HtmlDiff._collect_lines",
        "difflib.HtmlDiff._convert_flags",
        "<builtin>.len",
        "difflib.HtmlDiff._tab_newline_replace",
        "difflib.HtmlDiff._line_wrapper",
        "<builtin>.dict",
        "<str>.replace",
        "<list>.append",
        "difflib.HtmlDiff._make_prefix"
    ],
    "difflib.HtmlDiff._make_prefix": [],
    "difflib.HtmlDiff._tab_newline_replace": [
        "difflib.HtmlDiff._tab_newline_replace.expand_tabs"
    ],
    "difflib.HtmlDiff._tab_newline_replace.expand_tabs": [],
    "difflib.HtmlDiff._line_wrapper": [
        "<list>.pop",
        "difflib.HtmlDiff._split_line"
    ],
    "difflib.HtmlDiff._split_line": [
        "<str>.count",
        "<list>.append",
        "<builtin>.len",
        "difflib.HtmlDiff._split_line"
    ],
    "difflib.HtmlDiff._collect_lines": [
        "<list>.append"
    ],
    "difflib.HtmlDiff._convert_flags": [
        "<builtin>.max",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "difflib.restore": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "inspect.isdatadescriptor": [
        "inspect.isclass",
        "inspect.isfunction",
        "<builtin>.hasattr",
        "inspect.ismethod",
        "<builtin>.type"
    ],
    "inspect._has_code_flag": [
        "inspect.isfunction",
        "functools._unwrap_partial",
        "<builtin>.bool",
        "inspect.ismethod"
    ],
    "inspect.isgeneratorfunction": [
        "inspect._has_code_flag"
    ],
    "inspect.iscoroutinefunction": [
        "inspect._has_code_flag"
    ],
    "inspect.isasyncgenfunction": [
        "inspect._has_code_flag"
    ],
    "inspect.isasyncgen": [
        "<builtin>.isinstance"
    ],
    "inspect.isgenerator": [
        "<builtin>.isinstance"
    ],
    "inspect.iscoroutine": [
        "<builtin>.isinstance"
    ],
    "inspect.isawaitable": [
        "<builtin>.isinstance",
        "<builtin>.bool"
    ],
    "inspect.isabstract": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.issubclass",
        "<builtin>.type"
    ],
    "inspect.getmembers": [
        "<list>.sort",
        "<builtin>.dir",
        "<builtin>.set",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<list>.append",
        "inspect.isclass",
        "inspect.getmro"
    ],
    "inspect.getmro": [],
    "<builtin>.dir": [],
    "inspect.classify_class_attrs": [
        "<builtin>.dir",
        "<builtin>.set",
        "<builtin>.getattr",
        "<builtin>.Exception",
        "<builtin>.isinstance",
        "<list>.append",
        "inspect.isroutine",
        "<builtin>.tuple",
        "inspect.getmro",
        "<builtin>.type"
    ],
    "<builtin>.Exception": [],
    "inspect.indentsize": [
        "<builtin>.len"
    ],
    "inspect._findclass": [
        "<builtin>.getattr",
        "inspect.isclass"
    ],
    "inspect._finddoc": [
        "inspect._findclass",
        "inspect.isbuiltin",
        "<builtin>.getattr",
        "inspect.isclass",
        "inspect.isfunction",
        "inspect.isdatadescriptor",
        "<builtin>.isinstance",
        "inspect.ismethod",
        "inspect.ismemberdescriptor",
        "inspect.ismethoddescriptor"
    ],
    "inspect.ismemberdescriptor": [],
    "inspect.getdoc": [
        "inspect.cleandoc",
        "inspect._finddoc",
        "<builtin>.isinstance"
    ],
    "inspect.cleandoc": [],
    "inspect.getmodulename": [
        "posixpath.basename",
        "ntpath.basename",
        "<builtin>.len"
    ],
    "inspect.getcomments": [
        "inspect.indentsize",
        "<builtin>.len",
        "inspect.ismodule",
        "inspect.findsource",
        "<list>.append"
    ],
    "inspect.walktree": [
        "<list>.sort",
        "<list>.append",
        "operator.attrgetter.__init__"
    ],
    "inspect.getclasstree": [
        "inspect.walktree",
        "<list>.append"
    ],
    "inspect.getargs": [
        "<builtin>.TypeError",
        "inspect.iscode",
        "<builtin>.list"
    ],
    "inspect.getargspec": [
        "inspect.getfullargspec",
        "<builtin>.ValueError",
        "warnings.warn"
    ],
    "inspect.getfullargspec": [
        "<builtin>.TypeError",
        "<list>.append",
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "<builtin>.TypeError",
        "inspect._signature_from_function",
        "inspect._signature_from_builtin",
        "inspect.unwrap",
        "<builtin>.callable",
        "inspect._signature_is_functionlike",
        "inspect._signature_is_builtin",
        "inspect.isfunction",
        "<builtin>.isinstance",
        "<builtin>.type",
        "inspect._signature_get_user_defined_method",
        "inspect.Signature.from_callable",
        "inspect._signature_get_partial",
        "inspect._signature_bound_method",
        "<builtin>.ValueError",
        "inspect._signature_from_callable"
    ],
    "inspect._signature_bound_method": [
        "<builtin>.tuple",
        "inspect.Signature.replace",
        "<builtin>.ValueError"
    ],
    "inspect._signature_from_callable.<lambda1>": [],
    "inspect._signature_is_functionlike": [
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.callable",
        "inspect.isclass"
    ],
    "inspect._signature_from_function": [
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "inspect._signature_is_functionlike",
        "<builtin>.getattr",
        "<builtin>.len",
        "inspect.isfunction",
        "inspect.Signature.__init__",
        "<list>.append",
        "inspect._signature_fromstr"
    ],
    "inspect._signature_fromstr": [
        "<builtin>.zip",
        "<builtin>.enumerate",
        "<builtin>.reversed",
        "<list>.pop",
        "inspect._signature_strip_non_python_syntax",
        "inspect._signature_fromstr.RewriteSymbolics",
        "<builtin>.getattr",
        "inspect.ismodule",
        "inspect.Signature.__init__",
        "<builtin>.isinstance",
        "inspect._signature_fromstr.p",
        "ast",
        "ast.parse",
        "<builtin>.list",
        "<builtin>.object",
        "<builtin>.ValueError"
    ],
    "ast": [
        "ast.Num",
        "<builtin>.property",
        "ast.Bytes",
        "ast._ABC",
        "ast.Ellipsis",
        "ast.NodeTransformer",
        "ast.NameConstant",
        "ast.Str",
        "ast.NodeVisitor",
        "<builtin>.type"
    ],
    "ast.NodeVisitor": [],
    "ast.NodeTransformer": [],
    "ast._ABC": [],
    "ast.Num": [],
    "ast.Str": [],
    "ast.Bytes": [],
    "ast.NameConstant": [],
    "ast.Ellipsis": [],
    "inspect._signature_strip_non_python_syntax": [
        "<builtin>.iter",
        "tokenize.tokenize",
        "<list>",
        "<builtin>.next"
    ],
    "ast.parse": [
        "<builtin>.isinstance",
        "<builtin>.compile"
    ],
    "inspect._signature_fromstr.RewriteSymbolics": [],
    "inspect._signature_fromstr.p": [
        "ast.literal_eval",
        "ast.NodeVisitor.visit",
        "<list>.append",
        "inspect._signature_fromstr.parse_name"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ast.literal_eval": [
        "ast.parse",
        "<builtin>.isinstance",
        "ast.literal_eval._convert"
    ],
    "ast.literal_eval._convert": [
        "<builtin>.zip",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.map",
        "<builtin>.dict",
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num",
        "ast.literal_eval._convert_signed_num",
        "<builtin>.tuple"
    ],
    "ast.literal_eval._convert_signed_num": [
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.isinstance",
        "<builtin>.repr",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "inspect.Signature.__init__": [
        "collections.OrderedDict.__init__",
        "<builtin>.enumerate",
        "<builtin>.ValueError"
    ],
    "inspect._signature_is_builtin": [
        "<builtin>.isinstance",
        "inspect.ismethoddescriptor",
        "inspect.isbuiltin"
    ],
    "inspect._signature_from_builtin": [
        "<builtin>.TypeError",
        "inspect._signature_is_builtin",
        "<builtin>.getattr",
        "inspect._signature_fromstr",
        "<builtin>.ValueError"
    ],
    "inspect._signature_get_partial": [
        "inspect.Signature.bind_partial",
        "collections.OrderedDict.__init__",
        "collections.OrderedDict.move_to_end",
        "collections.OrderedDict.pop",
        "inspect.Signature.replace",
        "collections.OrderedDict.values",
        "<builtin>.ValueError"
    ],
    "inspect.Signature.bind_partial": [
        "inspect.Signature._bind"
    ],
    "inspect.Signature._bind": [
        "<builtin>.TypeError",
        "inspect.BoundArguments.__init__",
        "collections.OrderedDict.__init__",
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "inspect.BoundArguments.__init__": [],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.values": [],
    "inspect.Signature.replace": [
        "<builtin>.type"
    ],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect.getargvalues": [
        "inspect.getargs"
    ],
    "inspect.formatannotation": [
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.repr"
    ],
    "inspect.formatannotationrelativeto": [
        "<builtin>.getattr"
    ],
    "inspect.<lambda3>": [
        "<builtin>.repr"
    ],
    "inspect.formatargspec": [
        "<builtin>.enumerate",
        "inspect.<lambda4>",
        "warnings.warn",
        "inspect.<lambda3>",
        "<builtin>.len",
        "inspect.formatannotation",
        "<list>.append",
        "warnings",
        "inspect.formatargspec.formatargandannotation"
    ],
    "inspect.formatargspec.formatargandannotation": [
        "inspect.formatannotation"
    ],
    "inspect.<lambda4>": [],
    "inspect.<lambda7>": [
        "<builtin>.repr"
    ],
    "inspect.formatargvalues": [
        "<list>.append",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "inspect._missing_arguments": [
        "<builtin>.TypeError",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "inspect._too_many": [
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "inspect.getcallargs": [
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.range",
        "inspect._too_many",
        "inspect.getfullargspec",
        "<builtin>.set",
        "<builtin>.len",
        "inspect.ismethod",
        "<builtin>.tuple",
        "inspect._missing_arguments",
        "<builtin>.min"
    ],
    "inspect.getclosurevars": [
        "<builtin>.TypeError",
        "<builtin>.zip",
        "<builtin>.set",
        "inspect.ismodule",
        "inspect.isfunction",
        "inspect.ismethod"
    ],
    "inspect.getframeinfo": [
        "<builtin>.TypeError",
        "inspect.getfile",
        "inspect.findsource",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.getsourcefile"
    ],
    "inspect.getouterframes": [
        "<list>.append",
        "inspect.getframeinfo"
    ],
    "inspect.getinnerframes": [
        "<list>.append",
        "inspect.getframeinfo"
    ],
    "inspect.currentframe": [
        "<builtin>.hasattr"
    ],
    "inspect.stack": [
        "inspect.getouterframes"
    ],
    "inspect.trace": [
        "inspect.getinnerframes"
    ],
    "inspect._check_class": [
        "inspect._static_getmro",
        "inspect._shadowed_dict",
        "<builtin>.type"
    ],
    "inspect._static_getmro": [],
    "inspect._shadowed_dict": [
        "inspect._static_getmro"
    ],
    "inspect._is_type": [
        "inspect._static_getmro"
    ],
    "inspect.getattr_static": [
        "<builtin>.AttributeError",
        "inspect._check_class",
        "inspect._static_getmro",
        "inspect._is_type",
        "inspect._shadowed_dict",
        "inspect._check_instance",
        "<builtin>.type"
    ],
    "inspect._check_instance": [],
    "inspect.getgeneratorlocals": [
        "<builtin>.TypeError",
        "inspect.isgenerator",
        "<builtin>.getattr"
    ],
    "inspect.getcoroutinelocals": [
        "<builtin>.getattr"
    ],
    "inspect.Parameter.__init__": [
        "<builtin>.TypeError",
        "<str>.isidentifier",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "inspect.Parameter.__reduce__": [
        "<builtin>.type"
    ],
    "inspect.Parameter.replace": [
        "<builtin>.type"
    ],
    "inspect.Parameter.__str__": [
        "inspect.formatannotation",
        "<builtin>.repr"
    ],
    "inspect.Parameter.__hash__": [
        "<builtin>.hash"
    ],
    "inspect.Parameter.__eq__": [
        "<builtin>.isinstance"
    ],
    "inspect.BoundArguments.args": [
        "<builtin>.tuple"
    ],
    "inspect.BoundArguments.apply_defaults": [
        "collections.OrderedDict.__init__",
        "<list>.append"
    ],
    "inspect.BoundArguments.__eq__": [
        "<builtin>.isinstance"
    ],
    "inspect.BoundArguments.__repr__": [
        "<list>.append",
        "collections.OrderedDict.items"
    ],
    "inspect.Signature.from_function": [
        "inspect._signature_from_function",
        "warnings.warn"
    ],
    "inspect.Signature.from_builtin": [
        "inspect._signature_from_builtin",
        "warnings.warn"
    ],
    "inspect.Signature._hash_basis": [
        "<builtin>.tuple"
    ],
    "inspect.Signature.__hash__": [
        "<builtin>.frozenset",
        "inspect.Signature._hash_basis",
        "<builtin>.hash"
    ],
    "inspect.Signature.__eq__": [
        "<builtin>.isinstance",
        "inspect.Signature._hash_basis"
    ],
    "inspect.Signature.bind": [
        "inspect.Signature._bind"
    ],
    "inspect.Signature.__reduce__": [
        "<builtin>.tuple",
        "<builtin>.type"
    ],
    "inspect.Signature.__str__": [
        "inspect.formatannotation",
        "<builtin>.str",
        "<list>.append"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "dis.pretty_flags": [
        "<list>.append",
        "<builtin>.range"
    ],
    "dis._get_code_object": [
        "<builtin>.TypeError",
        "dis._try_compile",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "dis.code_info": [
        "dis._format_code_info",
        "dis._get_code_object"
    ],
    "dis._format_code_info": [
        "<builtin>.enumerate",
        "<list>.append"
    ],
    "dis.show_code": [
        "dis.code_info",
        "<builtin>.print"
    ],
    "dis.Instruction._disassemble": [
        "<list>.append",
        "<str>.rstrip"
    ],
    "dis.get_instructions": [
        "<builtin>.dict",
        "dis._get_instructions_bytes",
        "dis.findlinestarts",
        "dis._get_code_object"
    ],
    "dis.Bytecode.__init__": [
        "<builtin>.dict",
        "dis.findlinestarts",
        "dis._get_code_object"
    ],
    "dis.Bytecode.__iter__": [
        "dis._get_instructions_bytes"
    ],
    "dis.Bytecode.from_traceback": [
        "dis.Bytecode.__init__"
    ],
    "dis.Bytecode.info": [
        "dis._format_code_info"
    ],
    "dis.Bytecode.dis": [
        "dis._disassemble_bytes",
        "_io.StringIO"
    ],
    "argparse._AttributeHolder.__repr__": [
        "argparse._AttributeHolder._get_kwargs",
        "argparse._AttributeHolder._get_args",
        "<list>.append",
        "<builtin>.type"
    ],
    "argparse._AttributeHolder._get_args": [],
    "argparse._AttributeHolder._get_kwargs": [
        "<builtin>.sorted"
    ],
    "argparse._copy_items": [
        "copy",
        "copy.copy",
        "<builtin>.type"
    ],
    "argparse.HelpFormatter._format_usage": [
        "<list>.extend",
        "re.findall",
        "gettext.gettext",
        "<builtin>.format",
        "<builtin>.len",
        "<builtin>.dict",
        "argparse.HelpFormatter._format_usage.get_lines",
        "<list>.append"
    ],
    "<builtin>.format": [],
    "argparse.HelpFormatter._format_usage.get_lines": [
        "<list>.append",
        "<builtin>.len"
    ],
    "argparse.HelpFormatter._format_actions_usage": [
        "<map>.get",
        "<str>.strip",
        "<builtin>.enumerate",
        "<builtin>.set",
        "argparse.HelpFormatter._get_default_metavar_for_positional",
        "<builtin>.sorted",
        "re.sub",
        "<list>.append",
        "<map>.pop",
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "argparse.HelpFormatter._format_args"
    ],
    "argparse.HelpFormatter._get_default_metavar_for_optional": [],
    "argparse.HelpFormatter._get_default_metavar_for_positional": [],
    "argparse.HelpFormatter._format_text": [
        "<builtin>.dict",
        "<builtin>.max",
        "argparse.HelpFormatter._fill_text"
    ],
    "argparse.HelpFormatter._fill_text": [
        "textwrap.fill",
        "textwrap",
        "<str>.strip"
    ],
    "textwrap": [
        "re.compile",
        "re",
        "<builtin>.print",
        "textwrap.dedent",
        "textwrap.TextWrapper"
    ],
    "textwrap.TextWrapper": [
        "re.compile",
        "re.escape",
        "<builtin>.ord"
    ],
    "textwrap.dedent": [
        "re.sub",
        "<builtin>.zip",
        "<builtin>.enumerate",
        "<str>.split"
    ],
    "textwrap.fill": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.fill"
    ],
    "textwrap.TextWrapper.__init__": [],
    "textwrap.TextWrapper.fill": [
        "textwrap.TextWrapper.wrap"
    ],
    "textwrap.TextWrapper.wrap": [
        "textwrap.TextWrapper._fix_sentence_endings",
        "textwrap.TextWrapper._split_chunks",
        "textwrap.TextWrapper._wrap_chunks"
    ],
    "textwrap.TextWrapper._split_chunks": [
        "textwrap.TextWrapper._split",
        "textwrap.TextWrapper._munge_whitespace"
    ],
    "textwrap.TextWrapper._munge_whitespace": [
        "<str>.expandtabs",
        "<str>.translate"
    ],
    "textwrap.TextWrapper._split": [
        "<str>.split"
    ],
    "textwrap.TextWrapper._fix_sentence_endings": [
        "<builtin>.len"
    ],
    "textwrap.TextWrapper._wrap_chunks": [
        "textwrap.TextWrapper._handle_long_word",
        "<builtin>.len",
        "<builtin>.map",
        "<list>.append",
        "<builtin>.sum",
        "<builtin>.ValueError"
    ],
    "textwrap.TextWrapper._handle_long_word": [
        "<list>.append"
    ],
    "argparse.HelpFormatter._format_action": [
        "<builtin>.max",
        "argparse.HelpFormatter._split_lines",
        "<builtin>.len",
        "<str>.endswith",
        "argparse.HelpFormatter._join_parts",
        "<builtin>.min",
        "<list>.append",
        "argparse.HelpFormatter._expand_help",
        "argparse.HelpFormatter._iter_indented_subactions",
        "argparse.HelpFormatter._format_action_invocation"
    ],
    "argparse.HelpFormatter._format_action_invocation": [
        "<list>.extend",
        "argparse.HelpFormatter._metavar_formatter",
        "argparse.HelpFormatter._get_default_metavar_for_positional",
        "<list>.append",
        "argparse.HelpFormatter._metavar_formatter.format",
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "argparse.HelpFormatter._format_args"
    ],
    "argparse.HelpFormatter._expand_help": [
        "<builtin>.vars",
        "<builtin>.str",
        "argparse.HelpFormatter._get_help_string",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "<builtin>.list"
    ],
    "argparse.HelpFormatter._get_help_string": [],
    "argparse.HelpFormatter._split_lines": [
        "textwrap",
        "<str>.strip",
        "textwrap.wrap"
    ],
    "textwrap.wrap": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.wrap"
    ],
    "argparse.ArgumentError.__str__": [
        "<builtin>.dict"
    ],
    "argparse.Action._get_kwargs": [
        "<builtin>.getattr"
    ],
    "argparse.Action.__call__": [
        "<builtin>.NotImplementedError",
        "gettext.gettext"
    ],
    "argparse._StoreAction.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "argparse._StoreAction.__call__": [
        "<builtin>.setattr"
    ],
    "argparse._StoreConstAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._StoreConstAction.__call__": [
        "<builtin>.setattr"
    ],
    "argparse._StoreTrueAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._StoreFalseAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._AppendAction.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "argparse._AppendAction.__call__": [
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<list>.append",
        "argparse._copy_items"
    ],
    "argparse._AppendConstAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._AppendConstAction.__call__": [
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<list>.append",
        "argparse._copy_items"
    ],
    "argparse._CountAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._CountAction.__call__": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "argparse._HelpAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._VersionAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction.add_parser": [
        "argparse._SubParsersAction._ChoicesPseudoAction.__init__",
        "<list>.append"
    ],
    "argparse._SubParsersAction.__call__": [
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "<builtin>.setattr",
        "<builtin>.vars",
        "<builtin>.getattr"
    ],
    "argparse._ExtendAction.__call__": [
        "<list>.extend",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "argparse._copy_items"
    ],
    "argparse.FileType.__call__": [
        "<builtin>.open",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse.FileType.__repr__": [
        "<builtin>.repr",
        "<builtin>.type"
    ],
    "argparse.Namespace.__eq__": [
        "<builtin>.vars",
        "<builtin>.isinstance"
    ],
    "argparse._ActionsContainer.__init__": [
        "argparse._ActionsContainer._get_handler",
        "argparse._ActionsContainer.register",
        "<builtin>.super",
        "re.compile"
    ],
    "argparse._ActionsContainer.set_defaults": [
        "<map>.update"
    ],
    "argparse._ActionsContainer.get_default": [
        "<map>.get"
    ],
    "argparse._ArgumentGroup._add_action": [
        "<builtin>.super",
        "<list>.append"
    ],
    "argparse._ActionsContainer._remove_action": [
        "<list>.remove"
    ],
    "argparse._ActionsContainer._handle_conflict_error": [
        "argparse.ArgumentError.__init__",
        "gettext.ngettext",
        "<builtin>.len"
    ],
    "argparse._ActionsContainer._handle_conflict_resolve": [
        "<map>.pop"
    ],
    "argparse._ArgumentGroup._remove_action": [
        "<list>.remove",
        "<builtin>.super"
    ],
    "argparse._MutuallyExclusiveGroup._add_action": [
        "argparse._MutuallyExclusiveGroup._add_action",
        "gettext.gettext",
        "argparse.ArgumentParser._add_action",
        "<list>.append",
        "argparse._ActionsContainer._add_action",
        "argparse._ArgumentGroup._add_action",
        "<builtin>.ValueError"
    ],
    "argparse._MutuallyExclusiveGroup._remove_action": [
        "<list>.remove",
        "argparse._ArgumentGroup._remove_action",
        "argparse._ActionsContainer._remove_action",
        "argparse._MutuallyExclusiveGroup._remove_action"
    ],
    "argparse.ArgumentParser._get_kwargs": [
        "<builtin>.getattr"
    ],
    "argparse.ArgumentParser.add_subparsers": [
        "argparse._ActionsContainer._pop_action_class",
        "<str>.strip",
        "gettext.gettext",
        "argparse.ArgumentParser._get_formatter",
        "argparse._ActionsContainer.add_argument_group",
        "argparse._ArgumentGroup._add_action",
        "argparse.HelpFormatter.format_help",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_positional_actions",
        "argparse.HelpFormatter.add_usage",
        "<builtin>.type"
    ],
    "argparse.ArgumentParser.parse_intermixed_args": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser.parse_known_intermixed_args",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_known_intermixed_args": [
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.getattr",
        "argparse.ArgumentParser.parse_known_args",
        "argparse.ArgumentParser._get_optional_actions",
        "argparse.ArgumentParser.format_usage",
        "<builtin>.hasattr",
        "<builtin>.delattr",
        "warnings",
        "argparse.ArgumentParser._get_positional_actions"
    ],
    "argparse.ArgumentParser._get_optional_actions": [],
    "os._get_exports_list": [
        "<builtin>.list",
        "<builtin>.dir"
    ],
    "os.makedirs": [
        "ntpath.split",
        "genericpath.exists",
        "<builtin>.isinstance",
        "genericpath.isdir",
        "<builtin>.bytes",
        "os.makedirs",
        "posixpath.split",
        "nt._isdir"
    ],
    "nt._isdir": [],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "os.removedirs": [
        "ntpath.split",
        "posixpath.split"
    ],
    "os.renames": [
        "ntpath.split",
        "genericpath.exists",
        "os.makedirs",
        "posixpath.split",
        "os.removedirs"
    ],
    "os.walk": [
        "ntpath.islink",
        "ntpath.join",
        "os.walk",
        "os._fspath",
        "posixpath.join",
        "posixpath.islink"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "os.fwalk": [
        "stat.S_ISDIR",
        "os._fwalk",
        "os._fspath",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "genericpath.samestat",
        "<builtin>.open"
    ],
    "genericpath.samestat": [],
    "os._fwalk": [
        "<builtin>.zip",
        "os._fwalk",
        "ntpath.join",
        "os._fscodec.fsencode",
        "posixpath.join",
        "os._fscodec.fsdecode",
        "<list>.append",
        "genericpath.samestat",
        "<builtin>.open"
    ],
    "os._fscodec.fsdecode": [
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "os._fscodec.fsencode": [
        "<str>.encode",
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "os.execlp": [
        "os.execvp"
    ],
    "os.execvp": [
        "os._execvpe"
    ],
    "os._execvpe": [
        "os.get_exec_path",
        "ntpath.dirname",
        "posixpath.dirname",
        "ntpath.join",
        "os._fscodec.fsencode",
        "posixpath.join",
        "<builtin>.map",
        "os._fscodec.fsdecode"
    ],
    "os.get_exec_path": [
        "warnings.catch_warnings.__init__",
        "warnings",
        "<str>.split"
    ],
    "os.execlpe": [
        "os.execvpe"
    ],
    "os.execvpe": [
        "os._execvpe"
    ],
    "os._Environ.__getitem__": [
        "os._createenviron.decode",
        "os._createenviron.encodekey",
        "<builtin>.KeyError",
        "os._check_bytes"
    ],
    "os._check_bytes": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "os._createenviron.decode": [],
    "os._Environ.__setitem__": [
        "os._createenviron.encode",
        "os.<lambda1>",
        "os._createenviron.encodekey",
        "os._check_bytes"
    ],
    "os.<lambda1>": [],
    "os._Environ.__delitem__": [
        "os.<lambda2>",
        "os._createenviron.encodekey",
        "<builtin>.KeyError",
        "os._check_bytes"
    ],
    "os.<lambda2>": [
        "os.<lambda1>"
    ],
    "os._Environ.__iter__": [
        "<builtin>.list",
        "os._createenviron.decode"
    ],
    "os._Environ.__len__": [
        "<builtin>.len"
    ],
    "os._Environ.__repr__": [
        "<map>.items",
        "os._createenviron.decode"
    ],
    "os._Environ.copy": [
        "<builtin>.dict"
    ],
    "os._createenviron.check_str": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "os._spawnvef": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "os.execvpe",
        "nt._exit",
        "posix._exit",
        "<builtin>.OSError"
    ],
    "nt._exit": [],
    "posix._exit": [],
    "os.spawnv": [
        "os._spawnvef"
    ],
    "os.spawnve": [
        "os._spawnvef"
    ],
    "os.spawnvp": [
        "os._spawnvef"
    ],
    "os.spawnvpe": [
        "os._spawnvef"
    ],
    "os.spawnl": [
        "os.spawnv"
    ],
    "os.spawnle": [
        "os.spawnve"
    ],
    "os.spawnlp": [
        "os.spawnvp"
    ],
    "os.spawnlpe": [
        "os.spawnvpe"
    ],
    "os.popen": [
        "<builtin>.TypeError",
        "io",
        "os._wrap_close.__init__",
        "<builtin>.isinstance",
        "subprocess",
        "subprocess.Popen.__init__",
        "_io.TextIOWrapper",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "subprocess.Popen.__init__": [
        "<builtin>.TypeError",
        "<builtin>.filter",
        "warnings.warn",
        "subprocess.Popen._execute_child",
        "<builtin>.bool",
        "_io.open",
        "subprocess._cleanup",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.hasattr",
        "_thread.allocate_lock",
        "subprocess.Popen._get_handles",
        "_io.TextIOWrapper",
        "<builtin>.ValueError"
    ],
    "subprocess._cleanup": [
        "<list>.remove"
    ],
    "subprocess.Popen._get_handles": [
        "<builtin>.isinstance",
        "subprocess.Popen._get_devnull"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "_io.open": [],
    "subprocess.Popen._execute_child": [
        "ntpath.dirname",
        "os._fscodec.fsdecode",
        "<builtin>.hasattr",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.list",
        "<builtin>.tuple",
        "ntpath.join",
        "subprocess.Popen._posix_spawn",
        "os._fscodec.fsencode",
        "<builtin>.set",
        "<builtin>.map",
        "<builtin>.sorted",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.TypeError",
        "os.get_exec_path",
        "posixpath.dirname",
        "<builtin>.getattr",
        "<builtin>.len",
        "posixpath.join",
        "<list>.append",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.issubclass",
        "<builtin>.ValueError",
        "<builtin>.int",
        "<builtin>.isinstance"
    ],
    "subprocess.Popen._posix_spawn": [
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "os._wrap_close.__init__": [],
    "os._wrap_close.close": [
        "subprocess.Popen.wait"
    ],
    "subprocess.Popen.wait": [
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time",
        "time.monotonic",
        "<builtin>.min"
    ],
    "time.monotonic": [],
    "subprocess.Popen._wait": [
        "subprocess.Popen._try_wait",
        "subprocess.Popen._remaining_time",
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.min"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "os._wrap_close.__exit__": [
        "os._wrap_close.close"
    ],
    "os._wrap_close.__getattr__": [
        "<builtin>.getattr"
    ],
    "os._wrap_close.__iter__": [
        "<builtin>.iter"
    ],
    "os.fdopen": [
        "<builtin>.TypeError",
        "io",
        "_io.open",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "os.PathLike.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc._check_methods": [],
    "os._AddedDllDirectory.__exit__": [
        "os._AddedDllDirectory.close"
    ],
    "os._AddedDllDirectory.close": [],
    "os.add_dll_directory": [
        "os._AddedDllDirectory.__init__"
    ],
    "os._AddedDllDirectory.__init__": [],
    "stat.S_ISCHR": [
        "stat.S_IFMT"
    ],
    "stat.S_ISBLK": [
        "stat.S_IFMT"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "stat.S_ISFIFO": [
        "stat.S_IFMT"
    ],
    "stat.S_ISSOCK": [
        "stat.S_IFMT"
    ],
    "stat.filemode": [
        "<list>.append"
    ],
    "ntpath.ismount": [
        "<str>.rstrip",
        "os._fspath",
        "nt._getvolumepathname",
        "ntpath.abspath",
        "ntpath.splitdrive",
        "ntpath._get_bothseps"
    ],
    "nt._getvolumepathname": [],
    "ntpath.expanduser": [
        "ntpath.dirname",
        "ntpath.join",
        "os._fscodec.fsencode",
        "os._fspath",
        "<builtin>.len",
        "os._fscodec.fsdecode",
        "<builtin>.isinstance",
        "<str>.startswith",
        "ntpath._get_bothseps"
    ],
    "ntpath.expandvars": [
        "string",
        "<builtin>.getattr",
        "os._fscodec.fsencode",
        "os._fspath",
        "<builtin>.len",
        "<str>.index",
        "os._fscodec.fsdecode",
        "<list>.index",
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "ntpath.normpath": [
        "os._fspath",
        "<str>.split",
        "<builtin>.len",
        "<str>.endswith",
        "<builtin>.isinstance",
        "<str>.replace",
        "<list>.append",
        "<str>.startswith",
        "ntpath.splitdrive",
        "<str>.lstrip"
    ],
    "<str>.lstrip": [],
    "ntpath._abspath_fallback": [
        "ntpath.join",
        "ntpath.isabs",
        "ntpath.normpath",
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "ntpath.relpath": [
        "<builtin>.zip",
        "ntpath.join",
        "ntpath.normpath",
        "os._fspath",
        "<builtin>.len",
        "genericpath._check_arg_types",
        "<builtin>.isinstance",
        "ntpath.normcase",
        "ntpath.abspath",
        "ntpath.splitdrive",
        "<builtin>.ValueError"
    ],
    "ntpath.commonpath": [
        "<builtin>.enumerate",
        "<builtin>.max",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.min",
        "<builtin>.isinstance",
        "genericpath._check_arg_types",
        "ntpath.splitdrive",
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "genericpath.commonprefix": [
        "<builtin>.enumerate",
        "<builtin>.max",
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.min"
    ],
    "genericpath.samefile": [
        "genericpath.samestat"
    ],
    "genericpath.sameopenfile": [
        "genericpath.samestat"
    ],
    "posixpath.splitdrive": [
        "os._fspath"
    ],
    "posixpath.ismount": [
        "<builtin>.isinstance",
        "posixpath.realpath",
        "posixpath.join"
    ],
    "posixpath.expanduser": [
        "posixpath._get_sep",
        "<str>.find",
        "<builtin>.str",
        "os._fscodec.fsencode",
        "<str>.rstrip",
        "os._fspath",
        "<builtin>.len",
        "os._fscodec.fsdecode",
        "<builtin>.isinstance",
        "<str>.startswith"
    ],
    "posixpath.expandvars": [
        "re.compile",
        "<builtin>.getattr",
        "re",
        "os._fspath",
        "os._fscodec.fsencode",
        "<str>.endswith",
        "os._fscodec.fsdecode",
        "<builtin>.isinstance",
        "<str>.startswith"
    ],
    "posixpath.relpath": [
        "posixpath.abspath",
        "os._fspath",
        "<str>.split",
        "<builtin>.len",
        "posixpath.join",
        "genericpath._check_arg_types",
        "<builtin>.isinstance",
        "genericpath.commonprefix",
        "<builtin>.ValueError"
    ],
    "posixpath.commonpath": [
        "<builtin>.enumerate",
        "<builtin>.max",
        "<builtin>.set",
        "<builtin>.map",
        "<builtin>.min",
        "<builtin>.isinstance",
        "genericpath._check_arg_types",
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "shutil._fastcopy_sendfile": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "shutil._copyfileobj_readinto": [
        "<builtin>.bytearray",
        "<builtin>.memoryview"
    ],
    "shutil._samefile": [
        "posixpath.normcase",
        "posixpath.abspath",
        "genericpath.samefile",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "ntpath.normcase",
        "ntpath.abspath",
        "genericpath.samestat"
    ],
    "shutil._stat": [
        "<builtin>.isinstance"
    ],
    "shutil._islink": [
        "<builtin>.isinstance",
        "ntpath.islink",
        "posixpath.islink"
    ],
    "shutil.copyfile": [
        "<builtin>.enumerate",
        "shutil._stat",
        "shutil.copyfileobj",
        "shutil._fastcopy_sendfile",
        "shutil._samefile",
        "<builtin>.min",
        "shutil._islink",
        "shutil._fastcopy_fcopyfile",
        "shutil._copyfileobj_readinto",
        "<builtin>.open"
    ],
    "shutil._fastcopy_fcopyfile": [],
    "shutil.copyfileobj": [
        "tarfile._Stream.read",
        "gzip.GzipFile.write",
        "gzip.GzipFile.read",
        "tarfile._Stream.write",
        "lzma.LZMAFile.read",
        "bz2.BZ2File.read",
        "bz2.BZ2File.write",
        "lzma.LZMAFile.write"
    ],
    "shutil.copymode": [
        "ntpath.islink",
        "shutil._stat",
        "posixpath.islink",
        "<builtin>.hasattr",
        "stat.S_IMODE",
        "shutil._islink"
    ],
    "stat.S_IMODE": [],
    "shutil.copystat": [
        "ntpath.islink",
        "shutil.copystat._nop",
        "<builtin>.getattr",
        "posixpath.islink",
        "shutil._copyxattr",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "stat.S_IMODE",
        "shutil._islink",
        "shutil.copystat.lookup"
    ],
    "shutil.copystat.lookup": [
        "<builtin>.getattr"
    ],
    "shutil.copystat._nop": [],
    "shutil._copyxattr": [],
    "shutil.copy": [
        "ntpath.join",
        "shutil.copymode",
        "posixpath.join",
        "nt._isdir",
        "shutil.copyfile",
        "genericpath.isdir",
        "posixpath.basename",
        "ntpath.basename"
    ],
    "shutil.copy2": [
        "ntpath.join",
        "posixpath.join",
        "nt._isdir",
        "shutil.copyfile",
        "genericpath.isdir",
        "shutil.copystat",
        "posixpath.basename",
        "ntpath.basename"
    ],
    "shutil._copytree": [
        "<list>.extend",
        "shutil.copy2",
        "shutil.copytree",
        "ntpath.join",
        "<builtin>.set",
        "<builtin>.getattr",
        "os._fspath",
        "posixpath.join",
        "genericpath.exists",
        "shutil.copystat",
        "<list>.append",
        "os.makedirs"
    ],
    "shutil.copytree": [
        "<builtin>.list",
        "shutil._copytree"
    ],
    "shutil._rmtree_islink": [
        "ntpath.islink",
        "posixpath.islink"
    ],
    "shutil._rmtree_unsafe": [
        "shutil.rmtree.onerror",
        "shutil._rmtree_isdir",
        "shutil._rmtree_unsafe",
        "<builtin>.list",
        "<builtin>.OSError"
    ],
    "shutil._rmtree_isdir": [],
    "shutil._rmtree_safe_fd": [
        "<builtin>.list",
        "shutil.rmtree.onerror",
        "posixpath.join",
        "ntpath.join"
    ],
    "shutil.rmtree": [
        "shutil.rmtree.onerror",
        "shutil._rmtree_islink",
        "shutil._rmtree_safe_fd",
        "shutil._rmtree_unsafe",
        "<builtin>.isinstance",
        "genericpath.samestat",
        "<builtin>.OSError"
    ],
    "shutil.rmtree.onerror": [],
    "shutil._basename": [
        "posixpath.basename",
        "ntpath.basename"
    ],
    "shutil.move": [
        "shutil.rmtree",
        "shutil.copytree",
        "ntpath.islink",
        "ntpath.join",
        "shutil._destinsrc",
        "posixpath.islink",
        "posixpath.join",
        "genericpath.exists",
        "shutil._samefile",
        "genericpath.isdir",
        "shutil.copy2",
        "shutil._basename",
        "nt._isdir"
    ],
    "shutil._destinsrc": [
        "<str>.endswith",
        "<str>.startswith",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "shutil._get_uid": [
        "pwd.getpwnam"
    ],
    "pwd.getpwnam": [],
    "shutil._make_tarball": [
        "ntpath.dirname",
        "shutil._get_gid",
        "posixpath.dirname",
        "tarfile",
        "tarfile.TarFile.open",
        "tarfile.TarFile.add",
        "genericpath.exists",
        "os.makedirs",
        "shutil._get_uid",
        "<builtin>.ValueError"
    ],
    "tarfile": [
        "tarfile.SubsequentHeaderError",
        "tarfile.ExFileObject",
        "os",
        "tarfile.InvalidHeaderError",
        "struct",
        "tarfile.EOFHeaderError",
        "tarfile._FileInFile",
        "stat",
        "tarfile.main",
        "tarfile.HeaderError",
        "tarfile.TruncatedHeaderError",
        "copy",
        "grp",
        "shutil",
        "tarfile.CompressionError",
        "tarfile.StreamError",
        "tarfile.EmptyHeaderError",
        "tarfile.ExtractError",
        "tarfile._Stream",
        "tarfile.TarError",
        "io",
        "tarfile.TarFile",
        "re",
        "tarfile.ReadError",
        "tarfile._LowLevelFile",
        "tarfile.TarInfo",
        "tarfile._StreamProxy"
    ],
    "tarfile.TarError": [],
    "tarfile.ExtractError": [],
    "tarfile.ReadError": [],
    "tarfile.CompressionError": [],
    "tarfile.StreamError": [],
    "tarfile.HeaderError": [],
    "tarfile.EmptyHeaderError": [],
    "tarfile.TruncatedHeaderError": [],
    "tarfile.EOFHeaderError": [],
    "tarfile.InvalidHeaderError": [],
    "tarfile.SubsequentHeaderError": [],
    "tarfile._LowLevelFile": [],
    "tarfile._Stream": [],
    "tarfile._StreamProxy": [],
    "tarfile._FileInFile": [],
    "tarfile.ExFileObject": [],
    "tarfile.TarInfo": [
        "<builtin>.dict",
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "tarfile.TarFile": [
        "<builtin>.classmethod"
    ],
    "tarfile.main": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument",
        "posixpath.splitext",
        "ntpath.splitext",
        "argparse",
        "tarfile.TarFile.open",
        "<builtin>.print",
        "<builtin>.len",
        "argparse.ArgumentParser.format_help",
        "argparse.ArgumentParser.parse_args",
        "tarfile.is_tarfile",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<list>.pop",
        "argparse.ArgumentParser.exit",
        "<builtin>.open"
    ],
    "tarfile.TarFile.open": [
        "tarfile._Stream.close",
        "tarfile._Stream.__init__",
        "tarfile.TarFile.__init__",
        "<builtin>.getattr",
        "<str>.split",
        "<builtin>.sorted",
        "tarfile.TarFile.taropen",
        "<builtin>.ValueError"
    ],
    "tarfile.TarFile.taropen": [
        "tarfile.TarFile.__init__",
        "<builtin>.ValueError"
    ],
    "tarfile.TarFile.__init__": [
        "builtins.open",
        "bz2.BZ2File.close",
        "gzip.GzipFile.seek",
        "tarfile._Stream.write",
        "tarfile.TarInfo.create_pax_global_header",
        "<builtin>.hasattr",
        "lzma.LZMAFile.seek",
        "<map>.copy",
        "gzip.GzipFile.write",
        "lzma.LZMAFile.close",
        "gzip.GzipFile.close",
        "ntpath.abspath",
        "bz2.BZ2File.seek",
        "bz2.BZ2File.write",
        "tarfile._Stream.close",
        "tarfile.TarInfo.fromtarfile",
        "<builtin>.str",
        "<builtin>.len",
        "tarfile.TarFile.next",
        "tarfile._Stream.tell",
        "<list>.append",
        "<builtin>.ValueError",
        "posixpath.abspath",
        "genericpath.exists",
        "lzma.LZMAFile.tell",
        "<builtin>.isinstance",
        "tarfile._Stream.seek",
        "bz2.BZ2File.tell",
        "lzma.LZMAFile.write"
    ],
    "tarfile.TarFile.next": [
        "tarfile.TarFile._dbg",
        "tarfile.TarInfo.fromtarfile",
        "lzma.LZMAFile.seek",
        "<builtin>.str",
        "tarfile._Stream.read",
        "gzip.GzipFile.seek",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "lzma.LZMAFile.tell",
        "bz2.BZ2File.read",
        "tarfile._Stream.tell",
        "tarfile._Stream.seek",
        "<list>.append",
        "tarfile.TarFile._check",
        "bz2.BZ2File.seek",
        "bz2.BZ2File.tell"
    ],
    "tarfile.TarFile._check": [
        "<builtin>.OSError"
    ],
    "tarfile.TarInfo.fromtarfile": [
        "tarfile.TarInfo._proc_member",
        "tarfile._Stream.read",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "lzma.LZMAFile.tell",
        "bz2.BZ2File.read",
        "tarfile._Stream.tell",
        "bz2.BZ2File.tell",
        "tarfile.TarInfo.frombuf"
    ],
    "tarfile.TarInfo.frombuf": [
        "tarfile.nti",
        "tarfile.nts",
        "<builtin>.range",
        "tarfile.calc_chksums",
        "<builtin>.bool",
        "<str>.rstrip",
        "<builtin>.len",
        "<str>.endswith",
        "<list>.append",
        "tarfile.TarInfo.__init__",
        "tarfile.TarInfo.isdir"
    ],
    "tarfile.nti": [
        "tarfile.nts",
        "<str>.strip",
        "<builtin>.int",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "tarfile.nts": [
        "<str>.find"
    ],
    "tarfile.calc_chksums": [
        "<builtin>.sum"
    ],
    "tarfile.TarInfo.__init__": [],
    "tarfile.TarInfo.isdir": [],
    "tarfile.TarInfo._proc_member": [
        "tarfile.TarInfo._proc_builtin",
        "tarfile.TarInfo._proc_gnulong",
        "tarfile.TarInfo._proc_sparse",
        "tarfile.TarInfo._proc_pax"
    ],
    "tarfile.TarInfo._proc_builtin": [
        "tarfile.TarInfo._apply_pax_info",
        "lzma.LZMAFile.tell",
        "tarfile._Stream.tell",
        "tarfile.TarInfo._block",
        "bz2.BZ2File.tell",
        "tarfile.TarInfo.isreg"
    ],
    "tarfile.TarInfo.isreg": [],
    "tarfile.TarInfo._block": [
        "<builtin>.divmod"
    ],
    "<builtin>.divmod": [],
    "tarfile.TarInfo._apply_pax_info": [
        "<builtin>.setattr",
        "<map>.items",
        "<builtin>.int",
        "<map>.copy"
    ],
    "tarfile.TarInfo._proc_pax": [
        "<map>.get",
        "re.compile",
        "<builtin>.int",
        "tarfile.TarInfo._apply_pax_info",
        "tarfile.TarInfo._proc_gnusparse_00",
        "tarfile.TarInfo.fromtarfile",
        "tarfile.TarInfo._proc_gnusparse_01",
        "tarfile._Stream.read",
        "re.search",
        "gzip.GzipFile.read",
        "tarfile.TarInfo._decode_pax_field",
        "lzma.LZMAFile.read",
        "bz2.BZ2File.read",
        "tarfile.TarInfo._block",
        "tarfile.TarInfo._proc_gnusparse_10",
        "tarfile.TarInfo.isreg",
        "<map>.copy"
    ],
    "tarfile.TarInfo._decode_pax_field": [],
    "tarfile.TarInfo._proc_gnusparse_10": [
        "<builtin>.int",
        "<builtin>.zip",
        "tarfile._Stream.read",
        "<builtin>.len",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "lzma.LZMAFile.tell",
        "bz2.BZ2File.read",
        "<list>.append",
        "tarfile._Stream.tell",
        "<builtin>.list",
        "bz2.BZ2File.tell"
    ],
    "tarfile.TarInfo._proc_gnusparse_00": [
        "<builtin>.zip",
        "<builtin>.list",
        "<list>.append",
        "re.finditer"
    ],
    "tarfile.TarInfo._proc_gnusparse_01": [
        "<builtin>.int",
        "<builtin>.list",
        "<builtin>.zip"
    ],
    "tarfile.TarInfo._proc_sparse": [
        "tarfile.nti",
        "<builtin>.range",
        "<builtin>.bool",
        "tarfile._Stream.read",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "lzma.LZMAFile.tell",
        "bz2.BZ2File.read",
        "<list>.append",
        "tarfile.TarInfo._block",
        "tarfile._Stream.tell",
        "bz2.BZ2File.tell"
    ],
    "tarfile.TarInfo._proc_gnulong": [
        "tarfile.nts",
        "tarfile.TarInfo.fromtarfile",
        "tarfile._Stream.read",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "bz2.BZ2File.read",
        "tarfile.TarInfo._block"
    ],
    "tarfile.TarFile._dbg": [
        "<builtin>.print"
    ],
    "tarfile.TarInfo.create_pax_global_header": [
        "tarfile.TarInfo._create_pax_generic_header"
    ],
    "tarfile.TarInfo._create_pax_generic_header": [
        "<builtin>.str",
        "<builtin>.len",
        "tarfile.TarInfo._create_payload",
        "<builtin>.bytes",
        "<map>.items",
        "tarfile.TarInfo._create_header"
    ],
    "tarfile.TarInfo._create_header": [
        "tarfile.calc_chksums",
        "<builtin>.bytes"
    ],
    "tarfile.TarInfo._create_payload": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "tarfile._Stream.__init__": [
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.__init__",
        "tarfile._Stream._init_write_gz",
        "tarfile._Stream._init_read_gz",
        "tarfile._LowLevelFile.close",
        "lzma",
        "tarfile._StreamProxy.__init__",
        "tarfile._StreamProxy.getcomptype",
        "bz2",
        "zlib"
    ],
    "tarfile._LowLevelFile.__init__": [
        "<builtin>.hasattr"
    ],
    "tarfile._StreamProxy.__init__": [
        "tarfile._LowLevelFile.read",
        "tarfile._StreamProxy.read"
    ],
    "tarfile._LowLevelFile.read": [],
    "tarfile._StreamProxy.getcomptype": [],
    "tarfile._Stream._init_write_gz": [
        "<builtin>.int",
        "tarfile._Stream.__write"
    ],
    "tarfile._Stream.__write": [
        "tarfile._LowLevelFile.write",
        "<builtin>.len"
    ],
    "tarfile._Stream._init_read_gz": [
        "tarfile._Stream.read",
        "<builtin>.ord",
        "tarfile._Stream.__read"
    ],
    "tarfile._Stream.__read": [
        "tarfile._LowLevelFile.read",
        "tarfile._StreamProxy.read",
        "<list>.append",
        "<builtin>.len"
    ],
    "tarfile._Stream.read": [
        "tarfile._Stream._read",
        "<builtin>.len"
    ],
    "tarfile._Stream._read": [
        "<builtin>.len",
        "tarfile._StreamProxy.read",
        "<list>.append",
        "tarfile._Stream.__read",
        "tarfile._LowLevelFile.read"
    ],
    "tarfile._Stream.tell": [],
    "tarfile._Stream.seek": [
        "tarfile._Stream.read",
        "<builtin>.range",
        "<builtin>.divmod"
    ],
    "tarfile._StreamProxy.read": [],
    "tarfile._Stream.write": [
        "tarfile._Stream.__write",
        "<builtin>.len"
    ],
    "tarfile._Stream.close": [
        "tarfile._LowLevelFile.write"
    ],
    "tarfile._LowLevelFile.write": [],
    "tarfile.is_tarfile": [
        "tarfile.TarFile.close",
        "<builtin>.open"
    ],
    "tarfile.TarFile.close": [
        "<builtin>.divmod",
        "gzip.GzipFile.write",
        "tarfile._Stream.write",
        "bz2.BZ2File.write",
        "lzma.LZMAFile.write"
    ],
    "shutil._get_gid": [],
    "tarfile.TarFile.add": [
        "<builtin>.filter",
        "tarfile.TarFile._dbg",
        "tarfile.TarFile.addfile",
        "builtins.open",
        "posixpath.abspath",
        "ntpath.join",
        "tarfile.TarFile.add",
        "posixpath.join",
        "<builtin>.sorted",
        "tarfile.TarInfo.isdir",
        "ntpath.abspath",
        "tarfile.TarFile._check",
        "tarfile.TarFile.gettarinfo",
        "tarfile.TarInfo.isreg"
    ],
    "tarfile.TarFile.gettarinfo": [
        "<list>",
        "collections.UserDict.__init__",
        "stat.S_ISREG",
        "posixpath.splitdrive",
        "<map>",
        "<builtin>.hasattr",
        "stat.S_ISLNK",
        "stat.S_ISFIFO",
        "<str>.replace",
        "tarfile.TarInfo.__init__",
        "tarfile.TarFile._check",
        "ntpath.splitdrive",
        "stat.S_ISCHR",
        "<str>.lstrip",
        "stat.S_ISBLK",
        "stat.S_ISDIR"
    ],
    "tarfile.TarFile.addfile": [
        "tarfile.TarInfo.tobuf",
        "<builtin>.divmod",
        "bz2.BZ2File.write",
        "tarfile.copyfileobj",
        "gzip.GzipFile.write",
        "<builtin>.len",
        "tarfile._Stream.write",
        "<list>.append",
        "tarfile.TarFile._check",
        "copy.copy",
        "lzma.LZMAFile.write"
    ],
    "tarfile.TarInfo.tobuf": [
        "tarfile.TarInfo.create_gnu_header",
        "tarfile.TarInfo.get_info",
        "tarfile.TarInfo.create_pax_header",
        "<builtin>.ValueError",
        "tarfile.TarInfo.create_ustar_header"
    ],
    "tarfile.TarInfo.get_info": [],
    "tarfile.TarInfo.create_pax_header": [
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance",
        "tarfile.TarInfo._create_pax_generic_header",
        "tarfile.TarInfo._create_header",
        "<map>.copy"
    ],
    "tarfile.TarInfo.create_gnu_header": [
        "tarfile.TarInfo._create_header",
        "tarfile.TarInfo._create_gnu_long_header",
        "<builtin>.len"
    ],
    "tarfile.TarInfo._create_gnu_long_header": [
        "tarfile.TarInfo._create_header",
        "<builtin>.len",
        "tarfile.TarInfo._create_payload"
    ],
    "tarfile.TarInfo.create_ustar_header": [
        "tarfile.TarInfo._posix_split_name",
        "tarfile.TarInfo._create_header",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "tarfile.TarInfo._posix_split_name": [
        "<builtin>.len",
        "<str>.encode",
        "<str>.split",
        "<builtin>.range"
    ],
    "tarfile.copyfileobj": [
        "<builtin>.range",
        "<builtin>.divmod",
        "shutil.copyfileobj",
        "tarfile._Stream.read",
        "gzip.GzipFile.write",
        "<builtin>.len",
        "tarfile._Stream.write",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "bz2.BZ2File.read",
        "bz2.BZ2File.write",
        "lzma.LZMAFile.write"
    ],
    "zipfile": [
        "zipfile._SharedFile",
        "os",
        "contextlib",
        "struct",
        "functools",
        "threading",
        "zipfile.LZMADecompressor",
        "zipfile.ZipFile",
        "stat",
        "zipfile.ZipExtFile",
        "importlib.util",
        "zipfile._ZipWriteFile",
        "bz2",
        "shutil",
        "zipfile._Tellable",
        "lzma",
        "zipfile.Path",
        "zipfile.ZipInfo",
        "zipfile.PyZipFile",
        "zipfile.main",
        "posixpath",
        "zipfile.FastLookup",
        "zlib",
        "io",
        "binascii",
        "zipfile.LZMACompressor",
        "zipfile.BadZipFile",
        "zipfile.CompleteDirs",
        "zipfile.LargeZipFile"
    ],
    "shutil._make_zipfile": [
        "genericpath.isfile",
        "ntpath.dirname",
        "posixpath.normpath",
        "posixpath.dirname",
        "ntpath.join",
        "os.walk",
        "ntpath.normpath",
        "posixpath.join",
        "genericpath.exists",
        "<builtin>.sorted",
        "os.makedirs",
        "zipfile",
        "collections.UserDict.__iter__",
        "zipfile.ZipFile.__init__"
    ],
    "importlib.util": [
        "contextlib",
        "types",
        "contextlib.contextmanager",
        "importlib.util._LazyModule",
        "importlib.util.LazyLoader",
        "importlib.abc",
        "functools",
        "warnings"
    ],
    "importlib.util._LazyModule": [],
    "importlib.util.LazyLoader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipfile.BadZipFile": [],
    "zipfile.LargeZipFile": [],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile.LZMACompressor": [],
    "zipfile.LZMADecompressor": [],
    "zipfile._SharedFile": [],
    "zipfile._Tellable": [],
    "zipfile.ZipExtFile": [],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "zipfile.PyZipFile": [],
    "zipfile.CompleteDirs": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipfile.FastLookup": [],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "zipfile.main": [
        "argparse.ArgumentParser.__init__",
        "ntpath.dirname",
        "posixpath.dirname",
        "zipfile.ZipFile.extractall",
        "argparse._ActionsContainer.add_argument",
        "zipfile.ZipFile.printdir",
        "zipfile.main.addToZip",
        "argparse",
        "zipfile.ZipFile.__enter__",
        "<builtin>.print",
        "zipfile.ZipFile.__exit__",
        "argparse.ArgumentParser.parse_args",
        "zipfile.ZipFile.testzip",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "posixpath.basename",
        "<list>.pop",
        "ntpath.basename",
        "zipfile.ZipFile.__init__"
    ],
    "zipfile.ZipFile.__init__": [
        "zipfile.ZipFile._RealGetContents",
        "<builtin>.getattr",
        "os._fspath",
        "zipfile._check_compression",
        "_io.open",
        "zipfile.ZipFile._fpclose",
        "<builtin>.isinstance",
        "zipfile._Tellable.tell",
        "zipfile._Tellable.__init__",
        "threading.RLock",
        "<builtin>.ValueError"
    ],
    "zipfile._check_compression": [
        "<builtin>.RuntimeError",
        "<builtin>.NotImplementedError"
    ],
    "zipfile.ZipFile._RealGetContents": [
        "zipfile.ZipInfo.__init__",
        "zipfile._EndRecData",
        "<builtin>.len",
        "<builtin>.print",
        "zipfile.ZipInfo._decodeExtra",
        "<list>.append",
        "zipfile.ZipFile.read",
        "_io.BytesIO",
        "<builtin>.NotImplementedError"
    ],
    "zipfile._EndRecData": [
        "<str>.rfind",
        "<builtin>.max",
        "<builtin>.len",
        "zipfile.ZipFile.read",
        "zipfile._EndRecData64",
        "zipfile._Tellable.tell",
        "<builtin>.list"
    ],
    "zipfile._EndRecData64": [
        "zipfile.ZipFile.read",
        "<builtin>.len"
    ],
    "_io.BytesIO": [],
    "zipfile.ZipInfo.__init__": [
        "<str>.replace",
        "<builtin>.ValueError",
        "<str>.find"
    ],
    "zipfile.ZipInfo._decodeExtra": [
        "<builtin>.len"
    ],
    "zipfile._Tellable.__init__": [],
    "zipfile.ZipFile._fpclose": [
        "xmlrpc.client.GzipDecodedResponse.close",
        "zipfile.ZipFile.close",
        "zipfile._Tellable.close"
    ],
    "zipfile._Tellable.close": [
        "xmlrpc.client.GzipDecodedResponse.close",
        "zipfile.ZipFile.close",
        "zipfile._Tellable.close"
    ],
    "zipfile._Tellable.tell": [],
    "zipfile.ZipFile.__enter__": [],
    "zipfile.ZipFile.__exit__": [
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile.close": [
        "<builtin>.ValueError"
    ],
    "zipfile.main.addToZip": [
        "genericpath.isfile",
        "ntpath.join",
        "zipfile.main.addToZip",
        "posixpath.join",
        "<builtin>.sorted",
        "genericpath.isdir",
        "nt._isdir",
        "zipfile.ZipFile.write"
    ],
    "zipfile.ZipFile.write": [
        "zipfile.ZipFile.open",
        "shutil.copyfileobj",
        "zipfile.ZipInfo.is_dir",
        "zipfile.ZipInfo.from_file",
        "<builtin>.ValueError",
        "<builtin>.open"
    ],
    "zipfile.ZipInfo.from_file": [
        "zipfile.ZipInfo.__init__",
        "posixpath.normpath",
        "posixpath.splitdrive",
        "ntpath.normpath",
        "os._fspath",
        "<builtin>.isinstance",
        "ntpath.splitdrive",
        "stat.S_ISDIR"
    ],
    "zipfile.ZipInfo.is_dir": [],
    "zipfile.ZipFile.open": [
        "<builtin>.TypeError",
        "zipfile.ZipFile._open_to_write",
        "zipfile.ZipInfo.__init__",
        "zipfile._SharedFile.__init__",
        "<builtin>.len",
        "<builtin>.isinstance",
        "zipfile.ZipFile.getinfo",
        "zipfile._SharedFile.read",
        "zipfile._SharedFile.close",
        "<builtin>.RuntimeError",
        "zipfile.ZipExtFile.__init__",
        "<builtin>.NotImplementedError",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "zipfile.ZipFile.getinfo": [
        "<map>.get",
        "<builtin>.KeyError"
    ],
    "zipfile.ZipFile._open_to_write": [
        "zipfile._Tellable.write",
        "zipfile.ZipFile._writecheck",
        "zipfile.ZipInfo.FileHeader",
        "zipfile.ZipFile.write",
        "<builtin>.hasattr",
        "zipfile._ZipWriteFile.__init__",
        "zipfile._Tellable.tell",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipFile._writecheck": [
        "warnings.warn",
        "<builtin>.len",
        "zipfile._check_compression",
        "warnings",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipInfo.FileHeader": [
        "zipfile.ZipInfo._encodeFilenameFlags",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "zipfile.ZipInfo._encodeFilenameFlags": [
        "<str>.encode"
    ],
    "zipfile._Tellable.write": [
        "zipfile._Tellable.write",
        "zipfile.ZipFile.write"
    ],
    "zipfile._ZipWriteFile.__init__": [
        "zipfile._get_compressor"
    ],
    "zipfile._get_compressor": [
        "zipfile.LZMACompressor.__init__"
    ],
    "zipfile.LZMACompressor.__init__": [],
    "zipfile._SharedFile.__init__": [],
    "zipfile._SharedFile.read": [],
    "zipfile.ZipExtFile.__init__": [
        "zipfile._get_decompressor",
        "<builtin>.hasattr",
        "<list>",
        "<map>",
        "zipfile._Tellable.tell",
        "<builtin>.RuntimeError",
        "zipfile.ZipExtFile._init_decrypter"
    ],
    "zipfile._get_decompressor": [
        "<map>.get",
        "zipfile.LZMADecompressor.__init__",
        "<builtin>.NotImplementedError",
        "zipfile._check_compression"
    ],
    "zipfile.LZMADecompressor.__init__": [],
    "zipfile.ZipExtFile._init_decrypter": [
        "zipfile._ZipDecrypter.decrypter",
        "zipfile._SharedFile.read",
        "zipfile._ZipDecrypter"
    ],
    "zipfile._ZipDecrypter": [
        "<builtin>.map",
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.list",
        "<builtin>.range"
    ],
    "zipfile._ZipDecrypter.update_keys": [
        "zipfile._ZipDecrypter.crc32"
    ],
    "zipfile._ZipDecrypter.crc32": [],
    "zipfile._SharedFile.close": [
        "zipfile.ZipFile._fpclose"
    ],
    "zipfile.ZipFile.extractall": [
        "zipfile.ZipFile.namelist",
        "os._fspath",
        "zipfile.ZipFile._extract_member"
    ],
    "zipfile.ZipFile.namelist": [],
    "zipfile.ZipFile._extract_member": [
        "ntpath.dirname",
        "shutil.copyfileobj",
        "<str>.split",
        "<str>.replace",
        "ntpath.join",
        "zipfile.ZipFile._sanitize_windows_name",
        "<builtin>.open",
        "zipfile.ZipFile.open",
        "posixpath.normpath",
        "posixpath.dirname",
        "posixpath.splitdrive",
        "ntpath.normpath",
        "posixpath.join",
        "genericpath.isdir",
        "os.makedirs",
        "nt._isdir",
        "genericpath.exists",
        "<builtin>.isinstance",
        "zipfile.ZipFile.getinfo",
        "ntpath.splitdrive"
    ],
    "zipfile.ZipFile._sanitize_windows_name": [
        "<str>.translate",
        "<builtin>.len",
        "<str>.split"
    ],
    "zipfile.ZipFile.printdir": [
        "<builtin>.print"
    ],
    "zipfile.ZipFile.testzip": [
        "zipfile.ZipFile.open"
    ],
    "shutil.get_archive_formats": [
        "<map>.items"
    ],
    "shutil.register_archive_format": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.callable",
        "<builtin>.len"
    ],
    "shutil.make_archive": [
        "<builtin>.ValueError",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "shutil.get_unpack_formats": [
        "<map>.items"
    ],
    "shutil._check_unpack_options": [
        "<builtin>.TypeError",
        "<map>.items",
        "<builtin>.callable"
    ],
    "shutil.register_unpack_format": [
        "shutil._check_unpack_options"
    ],
    "shutil._ensure_directory": [
        "ntpath.dirname",
        "posixpath.dirname",
        "genericpath.isdir",
        "os.makedirs",
        "nt._isdir"
    ],
    "shutil._unpack_zipfile": [
        "ntpath.join",
        "shutil._ensure_directory",
        "posixpath.join",
        "zipfile.is_zipfile",
        "zipfile.ZipFile.read",
        "<builtin>.open",
        "zipfile",
        "zipfile.ZipFile.infolist",
        "zipfile.ZipFile.__init__"
    ],
    "zipfile.is_zipfile": [
        "<builtin>.hasattr",
        "zipfile._check_zipfile",
        "<builtin>.open"
    ],
    "zipfile._check_zipfile": [
        "zipfile._EndRecData"
    ],
    "zipfile.ZipFile.infolist": [],
    "zipfile.ZipFile.read": [
        "zipfile.ZipFile.open"
    ],
    "shutil._unpack_tarfile": [
        "tarfile.TarFile.open",
        "tarfile",
        "tarfile.TarFile.extractall"
    ],
    "tarfile.TarFile.extractall": [
        "tarfile.TarFile._dbg",
        "<list>.sort",
        "tarfile.TarFile.utime",
        "ntpath.join",
        "tarfile.TarFile.chmod",
        "posixpath.join",
        "<list>.reverse",
        "tarfile.TarFile.__iter__",
        "tarfile.TarFile.extract",
        "<list>.append",
        "tarfile.TarFile.chown",
        "copy.copy",
        "tarfile.TarInfo.isdir"
    ],
    "tarfile.TarFile.__iter__": [
        "tarfile.TarFile.next",
        "<builtin>.len"
    ],
    "tarfile.TarFile.extract": [
        "tarfile.TarFile._dbg",
        "ntpath.join",
        "tarfile.TarFile._extract_member",
        "posixpath.join",
        "tarfile.TarFile.getmember",
        "<builtin>.isinstance",
        "tarfile.TarInfo.islnk",
        "tarfile.TarFile._check"
    ],
    "tarfile.TarFile.getmember": [
        "tarfile.TarFile._getmember",
        "<builtin>.KeyError"
    ],
    "tarfile.TarFile._getmember": [
        "<builtin>.reversed",
        "posixpath.normpath",
        "ntpath.normpath",
        "<list>.index",
        "tarfile.TarFile.getmembers"
    ],
    "tarfile.TarFile.getmembers": [
        "tarfile.TarFile._check",
        "tarfile.TarFile._load"
    ],
    "tarfile.TarFile._load": [
        "tarfile.TarFile.next"
    ],
    "tarfile.TarInfo.islnk": [],
    "tarfile.TarFile._extract_member": [
        "ntpath.dirname",
        "tarfile.TarInfo.isfifo",
        "tarfile.TarFile.makedir",
        "tarfile.TarFile.chmod",
        "tarfile.TarInfo.islnk",
        "<str>.replace",
        "tarfile.TarInfo.issym",
        "tarfile.TarInfo.ischr",
        "<str>.rstrip",
        "tarfile.TarInfo.isblk",
        "tarfile.TarFile.makefile",
        "tarfile.TarFile.makefifo",
        "tarfile.TarFile.makeunknown",
        "tarfile.TarFile.chown",
        "tarfile.TarFile.utime",
        "posixpath.dirname",
        "tarfile.TarFile.makelink",
        "os.makedirs",
        "tarfile.TarInfo.isdir",
        "tarfile.TarInfo.isreg",
        "tarfile.TarFile._dbg",
        "tarfile.TarFile.makedev",
        "genericpath.exists"
    ],
    "tarfile.TarInfo.issym": [],
    "tarfile.TarInfo.isfifo": [],
    "tarfile.TarInfo.ischr": [],
    "tarfile.TarInfo.isblk": [],
    "tarfile.TarFile.makefile": [
        "builtins.open",
        "tarfile.copyfileobj",
        "gzip.GzipFile.seek",
        "tarfile._Stream.seek",
        "lzma.LZMAFile.seek",
        "bz2.BZ2File.seek"
    ],
    "tarfile.TarFile.makeunknown": [
        "tarfile.TarFile.makefile",
        "tarfile.TarFile._dbg"
    ],
    "tarfile.TarFile.makelink": [
        "genericpath.exists",
        "tarfile.TarInfo.issym",
        "tarfile.TarFile._extract_member",
        "tarfile.TarFile._find_link_target"
    ],
    "tarfile.TarFile._find_link_target": [
        "<builtin>.filter",
        "ntpath.dirname",
        "posixpath.dirname",
        "tarfile.TarInfo.issym",
        "tarfile.TarFile._getmember",
        "<builtin>.KeyError"
    ],
    "tarfile.TarFile.makedev": [
        "<builtin>.hasattr",
        "tarfile.TarInfo.isblk"
    ],
    "tarfile.TarFile.makefifo": [
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.makedir": [],
    "tarfile.TarFile.chown": [
        "tarfile.TarInfo.issym",
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.chmod": [],
    "tarfile.TarFile.utime": [
        "<builtin>.hasattr"
    ],
    "shutil._find_unpack_format": [
        "<str>.endswith",
        "<map>.items"
    ],
    "shutil.unpack_archive": [
        "shutil._find_unpack_format",
        "<builtin>.dict",
        "<builtin>.ValueError",
        "os._fspath"
    ],
    "shutil.chown": [
        "shutil._get_gid",
        "<builtin>.isinstance",
        "<builtin>.LookupError",
        "shutil._get_uid",
        "<builtin>.ValueError"
    ],
    "<builtin>.LookupError": [],
    "shutil._access_check": [
        "genericpath.exists",
        "nt._isdir",
        "genericpath.isdir"
    ],
    "shutil.which": [
        "posixpath.normcase",
        "ntpath.dirname",
        "posixpath.dirname",
        "ntpath.join",
        "<list>.insert",
        "os._fscodec.fsencode",
        "<builtin>.set",
        "<str>.split",
        "posixpath.join",
        "os._fscodec.fsdecode",
        "shutil._access_check",
        "<builtin>.isinstance",
        "<builtin>.any",
        "ntpath.normcase"
    ],
    "fnmatch.fnmatch": [
        "posixpath.normcase",
        "fnmatch.fnmatchcase",
        "ntpath.normcase"
    ],
    "fnmatch.fnmatchcase": [
        "fnmatch._compile_pattern"
    ],
    "fnmatch._compile_pattern": [
        "re.compile",
        "<builtin>.str",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "fnmatch.translate"
    ],
    "fnmatch.translate": [
        "re.escape",
        "<str>.find",
        "<builtin>.len",
        "re.sub",
        "<str>.replace",
        "<list>.append"
    ],
    "fnmatch.filter": [
        "posixpath.normcase",
        "ntpath.normcase",
        "fnmatch._compile_pattern",
        "<list>.append"
    ],
    "bz2.BZ2File.__init__": [
        "<builtin>.TypeError",
        "builtins.open",
        "warnings.warn",
        "_io.BufferedReader",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "_compression.DecompressReader.__init__",
        "threading.RLock",
        "<builtin>.ValueError"
    ],
    "_compression.DecompressReader.__init__": [],
    "_io.BufferedReader": [],
    "bz2.BZ2File.fileno": [
        "_compression.BaseStream._check_not_closed"
    ],
    "_compression.BaseStream._check_not_closed": [
        "<builtin>.ValueError"
    ],
    "bz2.BZ2File.seekable": [
        "bz2.BZ2File.readable"
    ],
    "bz2.BZ2File.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.readline": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "bz2.BZ2File.readlines": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "bz2.open": [
        "bz2.BZ2File.__init__",
        "_io.TextIOWrapper",
        "<str>.replace",
        "<builtin>.ValueError"
    ],
    "bz2.decompress": [
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "warnings.showwarning": [
        "warnings.WarningMessage.__init__",
        "warnings._showwarnmsg_impl"
    ],
    "warnings.formatwarning": [
        "warnings.WarningMessage.__init__",
        "warnings._formatwarnmsg_impl"
    ],
    "warnings.resetwarnings": [
        "warnings._filters_mutated"
    ],
    "warnings.catch_warnings.__repr__": [
        "<list>.append",
        "<builtin>.type"
    ],
    "warnings.catch_warnings.__enter__": [
        "<builtin>.RuntimeError"
    ],
    "warnings.catch_warnings.__exit__": [
        "<builtin>.RuntimeError"
    ],
    "warnings._warn_unawaited_coroutine": [
        "warnings.warn",
        "<str>.rstrip",
        "linecache",
        "<list>.append",
        "traceback.format_list",
        "traceback",
        "warnings._warn_unawaited_coroutine.extract",
        "<builtin>.list"
    ],
    "warnings._warn_unawaited_coroutine.extract": [
        "<builtin>.reversed",
        "linecache.getline"
    ],
    "traceback.format_list": [
        "traceback.StackSummary.from_list",
        "traceback.StackSummary.format"
    ],
    "_compression.BaseStream._check_can_read": [
        "lzma.LZMAFile.readable",
        "_io.UnsupportedOperation",
        "bz2.BZ2File.readable",
        "gzip.GzipFile.readable"
    ],
    "_io.UnsupportedOperation": [],
    "_compression.BaseStream._check_can_write": [
        "lzma.LZMAFile.writable",
        "_io.UnsupportedOperation",
        "gzip.GzipFile.writable",
        "bz2.BZ2File.writable"
    ],
    "_compression.BaseStream._check_can_seek": [
        "lzma.LZMAFile.seekable",
        "gzip.GzipFile.readable",
        "gzip.GzipFile.seekable",
        "lzma.LZMAFile.readable",
        "_io.UnsupportedOperation",
        "bz2.BZ2File.readable",
        "bz2.BZ2File.seekable"
    ],
    "_compression.DecompressReader.close": [
        "<builtin>.super"
    ],
    "_compression.DecompressReader.readinto": [
        "<builtin>.len",
        "_compression.DecompressReader.read",
        "<builtin>.memoryview",
        "gzip._GzipReader.read"
    ],
    "_compression.DecompressReader.read": [
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "<builtin>.EOFError": [],
    "_compression.DecompressReader.seek": [
        "<builtin>.len",
        "gzip._GzipReader._rewind",
        "_compression.DecompressReader.read",
        "_compression.DecompressReader._rewind",
        "<builtin>.ValueError",
        "<builtin>.min",
        "gzip._GzipReader.read"
    ],
    "_compression.DecompressReader._rewind": [],
    "threading._RLock.__repr__": [
        "<builtin>.hex",
        "<builtin>.id"
    ],
    "<builtin>.hex": [],
    "_thread.get_ident": [],
    "threading._RLock.release": [
        "_thread.get_ident",
        "<builtin>.RuntimeError"
    ],
    "threading._RLock.__exit__": [
        "threading._RLock.release"
    ],
    "threading._RLock._release_save": [
        "<builtin>.RuntimeError"
    ],
    "threading._RLock._is_owned": [
        "_thread.get_ident"
    ],
    "threading.Condition.__enter__": [
        "threading._RLock.acquire"
    ],
    "threading.Condition.__exit__": [
        "threading._RLock.__exit__"
    ],
    "threading.Condition.__repr__": [
        "<builtin>.len"
    ],
    "threading.Condition._release_save": [
        "threading._RLock.release"
    ],
    "threading.Condition._acquire_restore": [
        "threading._RLock.acquire"
    ],
    "threading.Condition._is_owned": [
        "threading._RLock.release",
        "threading._RLock.acquire"
    ],
    "threading.Condition.wait": [
        "_thread.allocate_lock",
        "threading.Condition._release_save",
        "<builtin>.RuntimeError",
        "threading.Condition._is_owned"
    ],
    "threading.Condition.wait_for": [
        "threading.Condition.wait",
        "threading.Barrier._wait.<lambda1>",
        "time.monotonic"
    ],
    "threading.Condition.notify": [
        "_collections.deque",
        "<builtin>.RuntimeError",
        "itertools.islice",
        "threading.Condition._is_owned"
    ],
    "itertools.islice": [],
    "threading.Condition.notify_all": [
        "<builtin>.len",
        "threading.Condition.notify"
    ],
    "threading.Semaphore.__init__": [
        "threading.Condition.__init__",
        "_thread.allocate_lock",
        "<builtin>.ValueError"
    ],
    "threading.Semaphore.acquire": [
        "<builtin>.ValueError"
    ],
    "threading.Semaphore.__exit__": [
        "threading.Semaphore.release"
    ],
    "threading.Semaphore.release": [],
    "threading.BoundedSemaphore.__init__": [
        "threading.Semaphore.__init__"
    ],
    "threading.Event._reset_internal_locks": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "threading.Barrier.__init__": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "threading.Barrier._enter": [
        "threading.Condition.wait"
    ],
    "threading.Barrier._release": [
        "threading.Condition.notify_all",
        "threading.Barrier._break"
    ],
    "threading.Barrier._break": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._wait": [
        "threading.Condition.wait_for",
        "threading.Barrier._break"
    ],
    "threading.Barrier._wait.<lambda1>": [],
    "threading.Barrier._exit": [
        "threading.Condition.notify_all"
    ],
    "threading.Thread._reset_internal_locks": [
        "threading.Thread._set_tstate_lock",
        "threading.Event._reset_internal_locks"
    ],
    "threading.Thread.__repr__": [
        "threading.Event.is_set",
        "threading.Thread.is_alive",
        "threading._DummyThread.is_alive"
    ],
    "threading.Event.is_set": [],
    "threading._DummyThread.is_alive": [
        "threading.Event.is_set"
    ],
    "threading.Thread.is_alive": [
        "threading.Thread._wait_for_tstate_lock",
        "threading.Event.is_set"
    ],
    "threading.Thread._wait_for_tstate_lock": [
        "threading._DummyThread._stop",
        "threading.Thread._stop"
    ],
    "threading._DummyThread._stop": [],
    "threading.Thread._stop": [],
    "threading.Thread.start": [
        "threading.Event.wait",
        "<builtin>.RuntimeError",
        "threading.Event.is_set"
    ],
    "threading.Event.wait": [],
    "threading.Thread._bootstrap": [
        "threading.Thread._bootstrap_inner"
    ],
    "threading.Thread._bootstrap_inner": [
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_native_id",
        "threading.Thread.run",
        "threading._make_invoke_excepthook.invoke_excepthook",
        "threading.Thread._set_ident",
        "threading.Event.set"
    ],
    "threading.Thread.run": [
        "multiprocessing.managers.Server.handle_request",
        "multiprocessing.resource_sharer._ResourceSharer._serve",
        "multiprocessing.pool.Pool._handle_tasks",
        "concurrent.futures.thread._worker",
        "concurrent.futures.process._queue_management_worker",
        "multiprocessing.managers.Server.accepter",
        "multiprocessing.pool.Pool._handle_results",
        "multiprocessing.queues.Queue._feed",
        "multiprocessing.pool.Pool._handle_workers"
    ],
    "threading._make_invoke_excepthook.invoke_excepthook": [
        "threading.ExceptHookArgs",
        "threading.excepthook"
    ],
    "threading.ExceptHookArgs": [],
    "threading.excepthook": [
        "_thread.get_ident",
        "traceback.print_exception",
        "<builtin>.print"
    ],
    "threading.Thread.join": [
        "threading.Thread._wait_for_tstate_lock",
        "<builtin>.max",
        "threading.current_thread",
        "threading.Event.is_set",
        "<builtin>.RuntimeError"
    ],
    "threading.Thread.isAlive": [
        "warnings",
        "threading.Thread.is_alive",
        "threading._DummyThread.is_alive",
        "warnings.warn"
    ],
    "threading.Timer.__init__": [
        "threading.Event.__init__",
        "threading.Thread.__init__"
    ],
    "threading.Timer.cancel": [
        "threading.Event.set"
    ],
    "threading.Timer.run": [
        "threading.Event.wait",
        "threading.Event.is_set",
        "threading.Event.set"
    ],
    "threading._enumerate": [
        "<builtin>.list",
        "<map>.values"
    ],
    "<map>.values": [],
    "threading._shutdown": [
        "threading.Thread._stop"
    ],
    "threading._after_fork": [
        "_thread.allocate_lock",
        "_thread.get_ident",
        "threading._MainThread.__init__",
        "<builtin>.set"
    ],
    "traceback.print_tb": [
        "traceback.extract_tb",
        "traceback.print_list"
    ],
    "traceback.extract_tb": [
        "traceback.walk_tb",
        "traceback.StackSummary.extract"
    ],
    "traceback.format_tb": [
        "traceback.extract_tb",
        "traceback.StackSummary.format"
    ],
    "traceback.format_exception": [
        "traceback.TracebackException.format",
        "<builtin>.list",
        "traceback.TracebackException.__init__",
        "<builtin>.type"
    ],
    "traceback.print_exc": [
        "traceback.print_exception"
    ],
    "traceback.format_exc": [
        "traceback.format_exception"
    ],
    "traceback.print_last": [
        "traceback.print_exception",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "traceback.format_stack": [
        "traceback.extract_stack",
        "traceback.format_list"
    ],
    "traceback.FrameSummary.__eq__": [
        "<builtin>.isinstance"
    ],
    "traceback.FrameSummary.__iter__": [
        "<builtin>.iter"
    ],
    "traceback.FrameSummary.line": [
        "<str>.strip",
        "linecache.getline"
    ],
    "traceback.TracebackException.from_exception": [
        "traceback.TracebackException.__init__",
        "<builtin>.type"
    ],
    "tokenize.any": [
        "tokenize.group"
    ],
    "tokenize.Untokenizer.add_whitespace": [
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "tokenize.Untokenizer.untokenize": [
        "tokenize.Untokenizer.compat",
        "<builtin>.len",
        "<list>.append",
        "tokenize.Untokenizer.add_whitespace",
        "<builtin>.iter",
        "<list>.pop"
    ],
    "tokenize.Untokenizer.compat": [
        "<list>.pop",
        "<list>.append",
        "<list>"
    ],
    "tokenize.untokenize": [
        "tokenize.Untokenizer.__init__",
        "tokenize.Untokenizer.untokenize",
        "<str>.encode"
    ],
    "tokenize.Untokenizer.__init__": [],
    "codecs.CodecInfo.__repr__": [
        "<builtin>.id"
    ],
    "codecs.BufferedIncrementalEncoder.__init__": [
        "codecs.IncrementalEncoder.__init__"
    ],
    "codecs.IncrementalEncoder.__init__": [],
    "codecs.BufferedIncrementalEncoder.encode": [
        "codecs.BufferedIncrementalEncoder._buffer_encode"
    ],
    "codecs.BufferedIncrementalEncoder._buffer_encode": [],
    "codecs.BufferedIncrementalEncoder.reset": [
        "codecs.IncrementalEncoder.reset"
    ],
    "codecs.IncrementalEncoder.reset": [],
    "codecs.BufferedIncrementalDecoder.__init__": [
        "codecs.IncrementalDecoder.__init__"
    ],
    "codecs.IncrementalDecoder.__init__": [],
    "codecs.BufferedIncrementalDecoder.decode": [
        "codecs.BufferedIncrementalDecoder._buffer_decode"
    ],
    "codecs.BufferedIncrementalDecoder._buffer_decode": [],
    "codecs.BufferedIncrementalDecoder.reset": [
        "codecs.IncrementalDecoder.reset"
    ],
    "codecs.IncrementalDecoder.reset": [],
    "codecs.StreamWriter.write": [
        "codecs.Codec.encode"
    ],
    "codecs.Codec.encode": [],
    "codecs.StreamWriter.writelines": [
        "codecs.StreamWriter.write"
    ],
    "codecs.StreamWriter.seek": [
        "codecs.StreamWriter.reset"
    ],
    "codecs.StreamWriter.reset": [],
    "codecs.StreamWriter.__getattr__": [
        "<builtin>.getattr"
    ],
    "codecs.StreamReader.read": [
        "<builtin>.len",
        "codecs.StreamReader.decode"
    ],
    "codecs.StreamReader.decode": [],
    "codecs.StreamReader.readline": [
        "<builtin>.isinstance",
        "codecs.StreamReader.read",
        "<builtin>.len"
    ],
    "codecs.StreamReader.readlines": [
        "codecs.StreamReader.read"
    ],
    "codecs.StreamReader.seek": [
        "codecs.StreamReader.reset"
    ],
    "codecs.StreamReader.reset": [],
    "codecs.StreamReader.__next__": [
        "codecs.StreamReader.readline"
    ],
    "codecs.StreamReader.__getattr__": [
        "<builtin>.getattr"
    ],
    "codecs.StreamReaderWriter.__next__": [
        "<builtin>.next"
    ],
    "codecs.StreamReaderWriter.__getattr__": [
        "<builtin>.getattr"
    ],
    "codecs.StreamRecoder.__next__": [
        "<builtin>.next"
    ],
    "codecs.StreamRecoder.__getattr__": [
        "<builtin>.getattr"
    ],
    "codecs.open": [
        "codecs.StreamReaderWriter.__init__"
    ],
    "codecs.StreamReaderWriter.__init__": [],
    "codecs.getincrementalencoder": [
        "<builtin>.LookupError"
    ],
    "codecs.getincrementaldecoder": [
        "<builtin>.LookupError"
    ],
    "codecs.iterencode": [
        "codecs.getincrementalencoder"
    ],
    "codecs.iterdecode": [
        "codecs.getincrementaldecoder"
    ],
    "encodings.search_function": [
        "<map>.get",
        "<builtin>.callable",
        "encodings.normalize_encoding",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.__import__"
    ],
    "encodings.mbcs": [
        "encodings.mbcs.IncrementalEncoder",
        "codecs",
        "encodings.mbcs.StreamReader",
        "encodings.mbcs.StreamWriter",
        "encodings.mbcs.IncrementalDecoder"
    ],
    "encodings._alias_mbcs": [
        "encodings.mbcs.getregentry",
        "encodings.mbcs"
    ],
    "encodings.mbcs.IncrementalEncoder": [],
    "encodings.mbcs.IncrementalDecoder": [],
    "encodings.mbcs.StreamWriter": [],
    "encodings.mbcs.StreamReader": [],
    "encodings.mbcs.getregentry": [],
    "_threading_local._localimpl.__init__": [
        "<builtin>.str",
        "<builtin>.id"
    ],
    "_threading_local._localimpl.get_dict": [
        "threading.current_thread",
        "<builtin>.id"
    ],
    "_threading_local._localimpl.create_dict": [
        "threading.current_thread",
        "_weakref.ref",
        "<builtin>.id"
    ],
    "_threading_local.local.__new__": [
        "<builtin>.TypeError",
        "_threading_local._localimpl.create_dict",
        "threading.RLock",
        "_threading_local._localimpl.__init__"
    ],
    "_threading_local.local.__getattribute__": [
        "_threading_local._patch"
    ],
    "_threading_local._patch": [],
    "_threading_local.local.__setattr__": [
        "_threading_local._patch",
        "<builtin>.AttributeError"
    ],
    "_threading_local.local.__delattr__": [
        "_threading_local._patch",
        "<builtin>.AttributeError"
    ],
    "weakref.WeakMethod.__new__": [
        "<builtin>.TypeError",
        "_weakref.ref",
        "<builtin>.type"
    ],
    "weakref.WeakMethod.__call__": [
        "<builtin>.super"
    ],
    "weakref.WeakMethod.__eq__": [
        "<builtin>.isinstance"
    ],
    "weakref.WeakMethod.__ne__": [
        "<builtin>.isinstance"
    ],
    "weakref.WeakValueDictionary.__getitem__": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.KeyError"
    ],
    "weakref.WeakValueDictionary.__delitem__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__len__": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.len"
    ],
    "weakref.WeakValueDictionary.__contains__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__repr__": [
        "<builtin>.id"
    ],
    "weakref.WeakValueDictionary.__setitem__": [
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary.copy": [
        "weakref.WeakValueDictionary.__init__",
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.__deepcopy__": [
        "copy",
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.get": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.items": [
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.keys": [
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.itervaluerefs": [
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.values": [
        "weakref.WeakValueDictionary._commit_removals",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.popitem": [
        "<map>.popitem",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "<map>.popitem": [],
    "weakref.WeakValueDictionary.pop": [
        "<map>",
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.KeyError",
        "<map>.pop"
    ],
    "weakref.WeakValueDictionary.setdefault": [
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary.valuerefs": [
        "<builtin>.list",
        "<map>.values",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakKeyDictionary._commit_removals": [
        "<list>.pop"
    ],
    "weakref.WeakKeyDictionary.__delitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__getitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__len__": [
        "weakref.WeakKeyDictionary._scrub_removals",
        "<builtin>.len"
    ],
    "weakref.WeakKeyDictionary._scrub_removals": [],
    "weakref.WeakKeyDictionary.__repr__": [
        "<builtin>.id"
    ],
    "weakref.WeakKeyDictionary.__setitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.copy": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "weakref.WeakKeyDictionary.__deepcopy__": [
        "copy",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.get": [
        "<map>.get"
    ],
    "weakref.WeakKeyDictionary.__contains__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.items": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.keys": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.values": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.keyrefs": [
        "<builtin>.list"
    ],
    "weakref.WeakKeyDictionary.popitem": [
        "<map>.popitem",
        "<map>"
    ],
    "weakref.WeakKeyDictionary.pop": [
        "<map>.pop"
    ],
    "weakref.WeakKeyDictionary.setdefault": [
        "<map>.setdefault"
    ],
    "weakref.finalize.__init__": [
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.len",
        "_weakref.ref",
        "<builtin>.next",
        "warnings",
        "<builtin>.tuple"
    ],
    "weakref.finalize.__call__": [
        "<map>.pop"
    ],
    "weakref.finalize.detach": [
        "<map>.get",
        "<map>.pop"
    ],
    "weakref.finalize.peek": [
        "<map>.get"
    ],
    "weakref.finalize.atexit": [
        "<map>.get",
        "<builtin>.bool"
    ],
    "weakref.finalize.__repr__": [
        "<map>.get",
        "<builtin>.id",
        "<builtin>.type"
    ],
    "weakref.finalize._select_for_exit": [
        "<map>.items"
    ],
    "weakref.finalize._exitfunc": [
        "weakref.finalize._select_for_exit"
    ],
    "weakref.WeakValueDictionary.__init__.remove": [
        "_weakref._remove_dead_weakref"
    ],
    "contextlib.ContextDecorator.__call__": [
        "functools.wraps"
    ],
    "contextlib._GeneratorContextManagerBase.__init__": [
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "contextlib._GeneratorContextManager.__enter__": [
        "<builtin>.next",
        "<builtin>.RuntimeError"
    ],
    "contextlib._GeneratorContextManager.__exit__": [
        "<builtin>.next",
        "<builtin>.RuntimeError",
        "<builtin>.type"
    ],
    "contextlib._AsyncGeneratorContextManager.__aenter__": [
        "<builtin>.RuntimeError"
    ],
    "contextlib._AsyncGeneratorContextManager.__aexit__": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance"
    ],
    "contextlib.asynccontextmanager": [
        "functools.wraps"
    ],
    "contextlib._RedirectStream.__enter__": [
        "<builtin>.setattr",
        "<list>.append"
    ],
    "contextlib._RedirectStream.__exit__": [
        "<builtin>.setattr",
        "<list>.pop"
    ],
    "contextlib.suppress.__exit__": [
        "<builtin>.issubclass"
    ],
    "contextlib._BaseExitStack.__init__": [
        "_collections.deque"
    ],
    "contextlib._BaseExitStack.pop_all": [
        "_collections.deque",
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack.push": [
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack._push_exit_callback": [],
    "contextlib._BaseExitStack.enter_context": [
        "contextlib._BaseExitStack._push_cm_exit",
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack._push_cm_exit": [
        "contextlib._BaseExitStack._push_exit_callback",
        "contextlib._BaseExitStack._create_exit_wrapper"
    ],
    "contextlib._BaseExitStack._create_exit_wrapper": [],
    "contextlib._BaseExitStack.callback": [
        "<builtin>.TypeError",
        "contextlib._BaseExitStack._create_cb_wrapper",
        "warnings.warn",
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.len",
        "warnings"
    ],
    "contextlib._BaseExitStack._create_cb_wrapper": [],
    "contextlib.ExitStack.__exit__": [
        "contextlib.ExitStack.__exit__._fix_exception_context"
    ],
    "contextlib.ExitStack.__exit__._fix_exception_context": [],
    "contextlib.ExitStack.close": [
        "contextlib.ExitStack.__exit__"
    ],
    "contextlib.AsyncExitStack.enter_async_context": [
        "contextlib.AsyncExitStack._push_async_cm_exit",
        "<builtin>.type"
    ],
    "contextlib.AsyncExitStack._push_async_cm_exit": [
        "contextlib._BaseExitStack._push_exit_callback",
        "contextlib.AsyncExitStack._create_async_exit_wrapper"
    ],
    "contextlib.AsyncExitStack._create_async_exit_wrapper": [],
    "contextlib.AsyncExitStack.push_async_exit": [
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.type"
    ],
    "contextlib.AsyncExitStack.push_async_callback": [
        "<builtin>.TypeError",
        "warnings.warn",
        "contextlib.AsyncExitStack._create_async_cb_wrapper",
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.len",
        "warnings"
    ],
    "contextlib.AsyncExitStack._create_async_cb_wrapper": [],
    "contextlib.AsyncExitStack.aclose": [
        "contextlib.AsyncExitStack.__aexit__"
    ],
    "contextlib.AsyncExitStack.__aexit__": [
        "contextlib.AsyncExitStack.__aexit__._fix_exception_context"
    ],
    "contextlib.AsyncExitStack.__aexit__._fix_exception_context": [],
    "lzma.LZMAFile.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "_compression.DecompressReader.__init__",
        "_io.BufferedReader",
        "<builtin>.ValueError"
    ],
    "lzma.LZMAFile.fileno": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.seekable": [
        "lzma.LZMAFile.readable"
    ],
    "lzma.LZMAFile.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.peek": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.read": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.read1": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.readline": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.write": [
        "_compression.BaseStream._check_can_write",
        "<builtin>.len"
    ],
    "lzma.LZMAFile.seek": [
        "_compression.BaseStream._check_can_seek"
    ],
    "lzma.LZMAFile.tell": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.open": [
        "_io.TextIOWrapper",
        "<str>.replace",
        "<builtin>.ValueError",
        "lzma.LZMAFile.__init__"
    ],
    "lzma.decompress": [
        "<list>.append"
    ],
    "gettext._tokenize": [
        "re.finditer",
        "<builtin>.ValueError"
    ],
    "gettext._error": [
        "<builtin>.ValueError"
    ],
    "gettext._parse": [
        "<map>.get",
        "<builtin>.int",
        "gettext._parse",
        "gettext._error",
        "<builtin>.next",
        "<builtin>.ValueError"
    ],
    "gettext._as_int": [
        "<builtin>.TypeError",
        "warnings",
        "<builtin>.round",
        "warnings.warn"
    ],
    "gettext.c2py": [
        "gettext._parse",
        "<builtin>.len",
        "gettext._tokenize",
        "<builtin>.exec",
        "gettext._error",
        "<builtin>.ValueError"
    ],
    "gettext.NullTranslations.lgettext": [
        "warnings.catch_warnings.__init__",
        "warnings",
        "locale.getpreferredencoding",
        "warnings.warn"
    ],
    "locale.getpreferredencoding": [
        "locale.getdefaultlocale"
    ],
    "gettext.NullTranslations.lngettext": [
        "warnings.catch_warnings.__init__",
        "warnings",
        "locale.getpreferredencoding",
        "warnings.warn"
    ],
    "gettext.NullTranslations.output_charset": [
        "warnings",
        "warnings.warn"
    ],
    "gettext.NullTranslations.set_output_charset": [
        "warnings",
        "warnings.warn"
    ],
    "gettext.NullTranslations.install": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "gettext.GNUTranslations._parse": [
        "<builtin>.enumerate",
        "<builtin>.range",
        "gettext.c2py",
        "<builtin>.str",
        "<builtin>.getattr",
        "<builtin>.len",
        "gettext.GNUTranslations._get_versions",
        "struct",
        "<builtin>.OSError"
    ],
    "gettext.GNUTranslations._get_versions": [],
    "gettext.GNUTranslations.lgettext": [
        "<map>.get",
        "warnings.warn",
        "warnings",
        "<builtin>.object",
        "locale.getpreferredencoding"
    ],
    "gettext.GNUTranslations.lngettext": [
        "gettext.GNUTranslations._parse.<lambda1>",
        "warnings",
        "locale.getpreferredencoding",
        "warnings.warn"
    ],
    "gettext.GNUTranslations._parse.<lambda1>": [
        "<builtin>.int"
    ],
    "gettext.GNUTranslations.gettext": [
        "<map>.get",
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.ngettext": [
        "gettext.GNUTranslations._parse.<lambda1>"
    ],
    "gettext.GNUTranslations.pgettext": [
        "<map>.get",
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.npgettext": [
        "gettext.GNUTranslations._parse.<lambda1>"
    ],
    "gettext.install": [
        "gettext.NullTranslations.install",
        "gettext.translation"
    ],
    "gettext.bindtextdomain": [
        "<map>.get"
    ],
    "gettext.bind_textdomain_codeset": [
        "<map>.get",
        "warnings",
        "warnings.warn"
    ],
    "gettext.ldgettext": [
        "<map>.get",
        "warnings.warn",
        "warnings.catch_warnings.__init__",
        "warnings",
        "locale.getpreferredencoding"
    ],
    "gettext.ldngettext": [
        "<map>.get",
        "warnings.warn",
        "warnings.catch_warnings.__init__",
        "warnings",
        "locale.getpreferredencoding"
    ],
    "gettext.dpgettext": [
        "<map>.get",
        "gettext.translation",
        "gettext.NullTranslations.pgettext"
    ],
    "gettext.NullTranslations.pgettext": [],
    "gettext.dnpgettext": [
        "<map>.get",
        "gettext.translation",
        "gettext.NullTranslations.npgettext"
    ],
    "gettext.NullTranslations.npgettext": [],
    "gettext.lgettext": [
        "warnings.catch_warnings.__init__",
        "warnings",
        "warnings.warn"
    ],
    "gettext.lngettext": [
        "warnings.catch_warnings.__init__",
        "warnings",
        "warnings.warn"
    ],
    "gettext.pgettext": [
        "gettext.dpgettext"
    ],
    "gettext.npgettext": [
        "gettext.dnpgettext"
    ],
    "locale._grouping_intervals": [
        "<builtin>.ValueError"
    ],
    "locale._group": [
        "locale.localeconv",
        "locale._grouping_intervals",
        "<str>.rstrip",
        "<builtin>.len",
        "<list>.reverse",
        "<list>.append"
    ],
    "locale._strip_padding": [
        "<builtin>.len"
    ],
    "locale._format": [
        "locale._strip_padding",
        "locale.localeconv",
        "locale._group",
        "<str>.split"
    ],
    "locale.format": [
        "warnings.warn",
        "<builtin>.len",
        "locale._format",
        "<builtin>.repr",
        "warnings",
        "<builtin>.ValueError"
    ],
    "locale.currency": [
        "locale.localeconv",
        "<builtin>.abs",
        "<str>.replace",
        "locale._format",
        "<builtin>.ValueError"
    ],
    "<builtin>.abs": [],
    "locale.str": [
        "locale._format"
    ],
    "copy._deepcopy_list": [
        "<builtin>.id",
        "<list>"
    ],
    "copy._deepcopy_tuple": [
        "<builtin>.zip",
        "<builtin>.id",
        "<builtin>.tuple",
        "copy.deepcopy"
    ],
    "copy._deepcopy_dict": [
        "<builtin>.id",
        "copy.deepcopy"
    ],
    "copy._deepcopy_method": [
        "copy.deepcopy",
        "<builtin>.type"
    ],
    "copyreg._reduce_ex": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "copyreg._slotnames": [
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<list>.append"
    ],
    "copyreg.add_extension": [
        "<map>.get",
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "copyreg.remove_extension": [
        "<map>.get",
        "<builtin>.ValueError"
    ],
    "copyreg.clear_extension_cache": [
        "<map>.clear"
    ],
    "tracemalloc._format_size": [
        "<builtin>.abs"
    ],
    "tracemalloc.Statistic.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Statistic.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.StatisticDiff.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.StatisticDiff.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.StatisticDiff._sort_key": [
        "<builtin>.abs"
    ],
    "tracemalloc._compare_grouped_stats": [
        "<map>.items",
        "<list>.append",
        "tracemalloc.StatisticDiff.__init__"
    ],
    "tracemalloc.StatisticDiff.__init__": [],
    "tracemalloc.Frame.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Traceback.__init__": [
        "<builtin>.tuple",
        "<builtin>.reversed"
    ],
    "tracemalloc.Traceback.__len__": [
        "<builtin>.len"
    ],
    "tracemalloc.Traceback.__getitem__": [
        "tracemalloc.Frame.__init__",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "tracemalloc.Frame.__init__": [],
    "tracemalloc.Traceback.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Traceback.__str__": [
        "<builtin>.str"
    ],
    "tracemalloc.Traceback.__repr__": [
        "<builtin>.tuple"
    ],
    "tracemalloc.Traceback.format": [
        "<str>.strip",
        "<list>.append",
        "<builtin>.reversed",
        "linecache.getline"
    ],
    "tracemalloc.get_object_traceback": [
        "tracemalloc.Traceback.__init__",
        "_tracemalloc._get_object_traceback"
    ],
    "_tracemalloc._get_object_traceback": [],
    "tracemalloc.Trace.traceback": [
        "tracemalloc.Traceback.__init__"
    ],
    "tracemalloc.Trace.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Trace.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.Trace.__repr__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc._Traces.__len__": [
        "<builtin>.len"
    ],
    "tracemalloc._Traces.__getitem__": [
        "tracemalloc.Trace.__init__",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "tracemalloc.Trace.__init__": [],
    "tracemalloc._Traces.__repr__": [
        "<builtin>.len"
    ],
    "tracemalloc.Filter.__init__": [
        "<builtin>.super",
        "tracemalloc._normalize_filename"
    ],
    "tracemalloc._normalize_filename": [],
    "tracemalloc.Filter._match_frame_impl": [
        "fnmatch.fnmatch",
        "tracemalloc._normalize_filename"
    ],
    "tracemalloc.Filter._match_frame": [
        "tracemalloc.Filter._match_frame_impl"
    ],
    "tracemalloc.Filter._match_traceback": [
        "<builtin>.any",
        "tracemalloc.Filter._match_frame_impl",
        "tracemalloc.Filter._match_frame"
    ],
    "tracemalloc.Filter._match": [
        "tracemalloc.Filter._match_traceback"
    ],
    "tracemalloc.DomainFilter.__init__": [
        "<builtin>.super"
    ],
    "tracemalloc.Snapshot.__init__": [
        "tracemalloc._Traces.__init__"
    ],
    "tracemalloc._Traces.__init__": [],
    "tracemalloc.Snapshot.dump": [
        "pickle._dump",
        "<builtin>.open"
    ],
    "pickle._dump": [
        "pickle._Pickler.dump",
        "pickle._Pickler.__init__"
    ],
    "pickle._Pickler.__init__": [
        "<builtin>.TypeError",
        "<builtin>.int",
        "pickle._Framer.__init__",
        "<builtin>.ValueError"
    ],
    "pickle._Framer.__init__": [],
    "pickle._Pickler.dump": [
        "pickle._Framer.end_framing",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.hasattr",
        "pickle._Framer.start_framing"
    ],
    "pickle._Framer.write": [],
    "pickle._Framer.start_framing": [
        "_io.BytesIO"
    ],
    "pickle._Pickler.save": [
        "<map>.get",
        "pickle._Pickler.save_pers",
        "pickle._Pickler.save_reduce",
        "pickle._Framer.write",
        "<builtin>.getattr",
        "<builtin>.len",
        "pickle._Pickler.persistent_id",
        "pickle._Pickler.save_global",
        "<builtin>.isinstance",
        "pickle._Framer.commit_frame",
        "<map>",
        "<builtin>.issubclass",
        "pickle._Pickler.get",
        "<builtin>.type"
    ],
    "pickle._Framer.commit_frame": [
        "pickle._Framer.write",
        "<builtin>.len",
        "_io.BytesIO"
    ],
    "pickle._Pickler.persistent_id": [],
    "pickle._Pickler.save_pers": [
        "<builtin>.str",
        "pickle._Framer.write",
        "pickle._Pickler.save"
    ],
    "pickle._Pickler.get": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.save_global": [
        "<map>.get",
        "pickle._Pickler.save_reduce",
        "pickle.whichmodule",
        "pickle._Framer.write",
        "<builtin>.getattr",
        "pickle._Pickler.save",
        "<str>.rpartition",
        "pickle._getattribute",
        "<builtin>.bytes",
        "<builtin>.__import__",
        "pickle._Pickler.memoize"
    ],
    "pickle.whichmodule": [
        "<builtin>.list",
        "<builtin>.getattr",
        "pickle._getattribute"
    ],
    "pickle._getattribute": [
        "<builtin>.getattr",
        "<str>.split",
        "<builtin>.AttributeError"
    ],
    "pickle._Pickler.save_reduce": [
        "<builtin>.callable",
        "pickle._Pickler.get",
        "pickle._Pickler._batch_appends",
        "pickle._Framer.write",
        "<builtin>.getattr",
        "pickle._Pickler.save",
        "pickle._Pickler._batch_setitems",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.id",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.memoize": [
        "pickle._Pickler.put",
        "pickle._Framer.write",
        "<builtin>.id",
        "<builtin>.len"
    ],
    "pickle._Pickler.put": [
        "<builtin>.repr"
    ],
    "pickle._Pickler._batch_appends": [
        "itertools.islice",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.len",
        "<builtin>.iter",
        "<builtin>.list"
    ],
    "pickle._Pickler._batch_setitems": [
        "itertools.islice",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.len",
        "<builtin>.iter",
        "<builtin>.list"
    ],
    "<str>.rpartition": [],
    "pickle._Framer.end_framing": [
        "pickle._Framer.commit_frame"
    ],
    "tracemalloc.Snapshot.load": [
        "pickle._load",
        "<builtin>.open"
    ],
    "tracemalloc.Snapshot._filter_trace": [
        "<builtin>.any"
    ],
    "tracemalloc.Snapshot.filter_traces": [
        "<builtin>.TypeError",
        "tracemalloc.Snapshot._filter_trace",
        "<builtin>.isinstance",
        "tracemalloc.Snapshot.__init__",
        "<list>.append",
        "<builtin>.type"
    ],
    "tracemalloc.Snapshot._group_by": [
        "tracemalloc.Traceback.__init__",
        "tracemalloc.Statistic.__init__",
        "<builtin>.ValueError"
    ],
    "tracemalloc.Statistic.__init__": [],
    "tracemalloc.Snapshot.statistics": [
        "<builtin>.list",
        "<map>.values",
        "tracemalloc.Snapshot._group_by"
    ],
    "tracemalloc.Snapshot.compare_to": [
        "tracemalloc._compare_grouped_stats",
        "tracemalloc.Snapshot._group_by",
        "<list>.sort"
    ],
    "tracemalloc.take_snapshot": [
        "<builtin>.RuntimeError",
        "tracemalloc.Snapshot.__init__",
        "_tracemalloc._get_traces"
    ],
    "_tracemalloc._get_traces": [],
    "pickle._Framer.write_large_bytes": [
        "pickle._Framer.commit_frame"
    ],
    "pickle._Unframer.readinto": [
        "<builtin>.len"
    ],
    "pickle._Unframer.load_frame": [
        "_io.BytesIO"
    ],
    "pickle._Pickler.clear_memo": [
        "<map>.clear"
    ],
    "pickle._Pickler.save_none": [
        "pickle._Framer.write"
    ],
    "pickle._Pickler.save_bool": [
        "pickle._Framer.write"
    ],
    "pickle._Pickler.save_long": [
        "pickle.encode_long",
        "pickle._Framer.write",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "pickle.encode_long": [],
    "pickle._Pickler.save_float": [
        "pickle._Framer.write",
        "<builtin>.repr"
    ],
    "pickle._Pickler.save_bytes": [
        "pickle._Framer.write_large_bytes",
        "pickle._Pickler.save_reduce",
        "<builtin>.str",
        "pickle._Framer.write",
        "<builtin>.len",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_bytearray": [
        "pickle._Framer.write_large_bytes",
        "pickle._Pickler.save_reduce",
        "pickle._Framer.write",
        "<builtin>.len",
        "<builtin>.bytes"
    ],
    "pickle._Pickler.save_picklebuffer": [
        "pickle._Pickler.save_bytes",
        "<builtin>.bool",
        "pickle._Framer.write",
        "pickle._Pickler.save_bytearray"
    ],
    "pickle._Pickler.save_str": [
        "pickle._Framer.write_large_bytes",
        "pickle._Framer.write",
        "pickle._Pickler.memoize",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_tuple": [
        "pickle._Pickler.get",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.len",
        "<builtin>.id",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_list": [
        "pickle._Framer.write",
        "pickle._Pickler.memoize",
        "pickle._Pickler._batch_appends"
    ],
    "pickle._Pickler.save_dict": [
        "pickle._Pickler._batch_setitems",
        "pickle._Framer.write",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_set": [
        "itertools.islice",
        "pickle._Pickler.save_reduce",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.len",
        "<builtin>.iter",
        "<builtin>.list",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_frozenset": [
        "pickle._Pickler.get",
        "pickle._Pickler.save_reduce",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.list",
        "<builtin>.id",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_type": [
        "pickle._Pickler.save_global",
        "pickle._Pickler.save_reduce",
        "<builtin>.type"
    ],
    "pickle._Unpickler.pop_mark": [
        "<list>.pop"
    ],
    "pickle._Unpickler.load_proto": [
        "pickle._Unframer.read",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_frame": [
        "pickle._Unframer.load_frame",
        "pickle._Unframer.read",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_persid": [
        "<list>",
        "pickle._Unframer.readline"
    ],
    "pickle._Unframer.readline": [],
    "pickle._Unpickler.load_binpersid": [
        "<list>.pop",
        "<list>"
    ],
    "pickle._Unpickler.load_none": [
        "<list>"
    ],
    "pickle._Unpickler.load_false": [
        "<list>"
    ],
    "pickle._Unpickler.load_true": [
        "<list>"
    ],
    "pickle._Unpickler.load_int": [
        "<list>",
        "<builtin>.int",
        "pickle._Unframer.readline"
    ],
    "pickle._Unpickler.load_binint": [
        "<list>"
    ],
    "pickle._Unpickler.load_binint1": [
        "<list>"
    ],
    "pickle._Unpickler.load_binint2": [
        "<list>"
    ],
    "pickle._Unpickler.load_long": [
        "<list>",
        "pickle._Unframer.readline"
    ],
    "pickle._Unpickler.load_long1": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_long4": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_float": [
        "<list>"
    ],
    "pickle._Unpickler.load_binfloat": [
        "<list>"
    ],
    "pickle._Unpickler.load_string": [
        "<list>",
        "pickle._Unframer.readline",
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_binstring": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_binbytes": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_unicode": [
        "<list>"
    ],
    "pickle._Unpickler.load_binunicode": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_binunicode8": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_binbytes8": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_bytearray8": [
        "<builtin>.bytearray",
        "pickle._Unframer.readinto",
        "pickle._Unframer.read",
        "<list>"
    ],
    "pickle._Unpickler.load_next_buffer": [
        "<builtin>.next",
        "<list>"
    ],
    "pickle._Unpickler.load_readonly_buffer": [
        "<builtin>.memoryview"
    ],
    "pickle._Unpickler.load_short_binstring": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_short_binbytes": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_short_binunicode": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_tuple": [
        "pickle._Unpickler.pop_mark",
        "<list>"
    ],
    "pickle._Unpickler.load_empty_tuple": [
        "<list>"
    ],
    "pickle._Unpickler.load_empty_list": [
        "<list>"
    ],
    "pickle._Unpickler.load_empty_dictionary": [
        "<list>"
    ],
    "pickle._Unpickler.load_empty_set": [
        "<list>"
    ],
    "pickle._Unpickler.load_frozenset": [
        "pickle._Unpickler.pop_mark",
        "<list>"
    ],
    "pickle._Unpickler.load_list": [
        "pickle._Unpickler.pop_mark",
        "<list>"
    ],
    "pickle._Unpickler.load_dict": [
        "pickle._Unpickler.pop_mark",
        "<list>",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pickle._Unpickler._instantiate": [
        "<builtin>.TypeError",
        "<list>.__new__",
        "<builtin>.str",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<list>"
    ],
    "pickle._Unpickler.load_inst": [
        "pickle._Unpickler._instantiate",
        "pickle._Unpickler.find_class",
        "pickle._Unpickler.pop_mark",
        "pickle._Unframer.readline"
    ],
    "pickle._Unpickler.find_class": [
        "<builtin>.__import__",
        "<builtin>.getattr",
        "pickle._getattribute"
    ],
    "pickle._Unpickler.load_obj": [
        "pickle._Unpickler._instantiate",
        "<list>.pop",
        "pickle._Unpickler.pop_mark"
    ],
    "<list>.__new__": [],
    "pickle._Unpickler.load_newobj": [
        "<list>.pop",
        "<list>.__new__",
        "<list>"
    ],
    "pickle._Unpickler.load_newobj_ex": [
        "<list>.pop",
        "<list>.__new__",
        "<list>"
    ],
    "pickle._Unpickler.load_global": [
        "<list>",
        "pickle._Unpickler.find_class",
        "pickle._Unframer.readline"
    ],
    "pickle._Unpickler.load_stack_global": [
        "<list>.pop",
        "<list>",
        "<builtin>.type"
    ],
    "pickle._Unpickler.load_ext1": [
        "pickle._Unpickler.get_extension",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.get_extension": [
        "<map>.get",
        "pickle._Unpickler.find_class",
        "<list>",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_ext2": [
        "pickle._Unpickler.get_extension",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_ext4": [
        "pickle._Unpickler.get_extension",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_reduce": [
        "<list>.pop"
    ],
    "pickle._Unpickler.load_pop": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_pop_mark": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_dup": [
        "<list>"
    ],
    "pickle._Unpickler.load_get": [
        "<list>",
        "<builtin>.int",
        "pickle._Unframer.readline"
    ],
    "pickle._Unpickler.load_binget": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_long_binget": [
        "<list>",
        "pickle._Unframer.read"
    ],
    "pickle._Unpickler.load_put": [
        "<builtin>.int",
        "pickle._Unframer.readline",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_binput": [
        "pickle._Unframer.read",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_long_binput": [
        "pickle._Unframer.read",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_memoize": [
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_append": [
        "<list>.pop"
    ],
    "pickle._Unpickler.load_appends": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_setitem": [
        "<list>.pop"
    ],
    "pickle._Unpickler.load_setitems": [
        "pickle._Unpickler.pop_mark",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pickle._Unpickler.load_additems": [
        "<builtin>.isinstance",
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_build": [
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<list>.pop",
        "<builtin>.type"
    ],
    "pickle._Unpickler.load_mark": [
        "<list>.append"
    ],
    "pickle._Unpickler.load_stop": [
        "<list>.pop",
        "pickle._Stop.__init__"
    ],
    "pickle._Stop.__init__": [],
    "pickle._dumps": [
        "pickle._Pickler.dump",
        "pickle._Pickler.__init__",
        "<builtin>.isinstance",
        "_io.BytesIO"
    ],
    "pickle._loads": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "pickle._Unpickler.__init__",
        "_io.BytesIO",
        "pickle._Unpickler.load"
    ],
    "pprint.pformat": [
        "pprint.PrettyPrinter.__init__",
        "pprint.PrettyPrinter.pformat"
    ],
    "pprint.pp": [
        "pprint.pprint"
    ],
    "pprint.saferepr": [
        "pprint._safe_repr"
    ],
    "pprint.isreadable": [
        "pprint._safe_repr"
    ],
    "pprint.isrecursive": [
        "pprint._safe_repr"
    ],
    "pprint._safe_key.__lt__": [
        "<builtin>.str",
        "<builtin>.id",
        "<builtin>.type"
    ],
    "pprint._safe_tuple": [
        "pprint._safe_key.__init__"
    ],
    "pprint._safe_key.__init__": [],
    "pprint.PrettyPrinter.isrecursive": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter.isreadable": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter._pprint_ordered_dict": [
        "<builtin>.list",
        "<builtin>.repr",
        "<builtin>.len",
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_list": [
        "pprint.PrettyPrinter._format_items"
    ],
    "pprint.PrettyPrinter._format_items": [
        "pprint.PrettyPrinter._repr",
        "<builtin>.len",
        "pprint.PrettyPrinter._format",
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "pprint.PrettyPrinter._pprint_tuple": [
        "pprint.PrettyPrinter._format_items",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_set": [
        "<builtin>.sorted",
        "pprint.PrettyPrinter._format_items",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_str": [
        "re.findall",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.repr"
    ],
    "pprint.PrettyPrinter._pprint_bytes": [
        "pprint._wrap_bytes_repr",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "pprint._wrap_bytes_repr": [
        "<builtin>.repr",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pprint.PrettyPrinter._pprint_bytearray": [
        "pprint.PrettyPrinter._pprint_bytes",
        "<builtin>.bytes"
    ],
    "pprint.PrettyPrinter._pprint_mappingproxy": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_default_dict": [
        "pprint.PrettyPrinter._pprint_dict",
        "<builtin>.repr",
        "<builtin>.len",
        "pprint.PrettyPrinter._repr"
    ],
    "pprint.PrettyPrinter._pprint_counter": [
        "pprint.PrettyPrinter._format_dict_items",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_chain_map": [
        "<builtin>.enumerate",
        "<builtin>.repr",
        "<builtin>.len",
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_deque": [
        "pprint.PrettyPrinter._format_items",
        "<builtin>.repr",
        "<builtin>.len",
        "pprint.PrettyPrinter._repr"
    ],
    "pprint.PrettyPrinter._pprint_user_dict": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_user_list": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_user_string": [
        "pprint.PrettyPrinter._format"
    ],
    "importlib.invalidate_caches": [
        "<builtin>.hasattr"
    ],
    "importlib.find_loader": [
        "<builtin>.ImportError",
        "<builtin>.ValueError",
        "warnings.warn"
    ],
    "importlib.reload": [
        "<builtin>.TypeError",
        "<builtin>.ImportError",
        "<builtin>.ModuleNotFoundError",
        "<builtin>.isinstance"
    ],
    "<builtin>.ModuleNotFoundError": [],
    "unittest.load_tests": [
        "posixpath"
    ],
    "unittest.result.TestResult.startTest": [
        "unittest.result.TestResult._setupStdout"
    ],
    "unittest.result.TestResult._setupStdout": [
        "_io.StringIO"
    ],
    "unittest.result.TestResult.stopTest": [
        "unittest.result.TestResult._restoreStdout"
    ],
    "unittest.result.TestResult._restoreStdout": [
        "codecs.StreamRecoder.write",
        "doctest._SpoofOut.getvalue"
    ],
    "unittest.result.TestResult.addError": [
        "<list>.append"
    ],
    "unittest.result.failfast.inner": [
        "unittest.result.TestResult.addUnexpectedSuccess",
        "unittest.result.TestResult.addError",
        "unittest.result.TestResult.addFailure",
        "<builtin>.getattr"
    ],
    "unittest.result.TestResult.addUnexpectedSuccess": [
        "<list>.append"
    ],
    "unittest.result.TestResult.addFailure": [
        "<list>.append"
    ],
    "unittest.result.TestResult.addSubTest": [
        "unittest.result.TestResult.stop",
        "<builtin>.issubclass",
        "<builtin>.getattr",
        "<list>.append"
    ],
    "unittest.result.TestResult.stop": [],
    "unittest.result.TestResult.addSkip": [
        "<list>.append"
    ],
    "unittest.result.TestResult.addExpectedFailure": [
        "<list>.append"
    ],
    "unittest.result.TestResult.wasSuccessful": [
        "<builtin>.hasattr",
        "<builtin>.len"
    ],
    "unittest.result.TestResult._exc_info_to_string": [
        "unittest.result.TestResult._count_relevant_tb_levels",
        "traceback.TracebackException.format",
        "traceback.TracebackException.__init__",
        "unittest.result.TestResult._is_relevant_tb_level",
        "<builtin>.list",
        "doctest._SpoofOut.getvalue"
    ],
    "unittest.result.TestResult._is_relevant_tb_level": [],
    "unittest.result.TestResult._count_relevant_tb_levels": [
        "unittest.result.TestResult._is_relevant_tb_level"
    ],
    "unittest.result.TestResult.__repr__": [
        "<builtin>.len",
        "unittest.util.strclass"
    ],
    "unittest.util.strclass": [],
    "unittest.util._shorten": [
        "<builtin>.len"
    ],
    "unittest.util._common_shorten_repr": [
        "<builtin>.max",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.tuple",
        "genericpath.commonprefix",
        "unittest.util._shorten"
    ],
    "unittest.util.safe_repr": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "unittest.util.sorted_list_difference": [
        "<list>.extend",
        "<list>.append"
    ],
    "unittest.util.unorderable_list_difference": [
        "<list>.append"
    ],
    "unittest.util._count_diff_all_purpose": [
        "<builtin>.enumerate",
        "<builtin>.range",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.list",
        "<builtin>.object"
    ],
    "unittest.util._count_diff_hashable": [
        "collections.Counter.__init__",
        "<list>.append"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.__init__": [
        "<builtin>.super"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup": [
        "unittest.case.TestCase.addCleanup"
    ],
    "unittest.case.TestCase.addCleanup": [
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.len",
        "<list>.append",
        "warnings",
        "<builtin>.tuple"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callSetUp": [
        "unittest.case.TestCase.setUp",
        "unittest.async_case.IsolatedAsyncioTestCase._callAsync"
    ],
    "unittest.case.TestCase.setUp": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callAsync": [
        "inspect.isawaitable",
        "asyncio.queues.Queue.put_nowait"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callTestMethod": [
        "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync": [
        "inspect.isawaitable",
        "asyncio.queues.Queue.put_nowait"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callTearDown": [
        "unittest.case.TestCase.tearDown",
        "unittest.async_case.IsolatedAsyncioTestCase._callAsync"
    ],
    "unittest.case.TestCase.tearDown": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callCleanup": [
        "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner": [
        "asyncio.queues.Queue.task_done",
        "asyncio.queues.Queue.__init__",
        "asyncio.queues.Queue.get"
    ],
    "asyncio.queues.Queue.__init__": [
        "asyncio.locks.Event.set",
        "asyncio.locks.Event.__init__",
        "warnings.warn",
        "_collections.deque",
        "asyncio.queues.Queue._init",
        "asyncio.events.get_event_loop"
    ],
    "asyncio.events.get_event_loop": [
        "asyncio.events._get_running_loop",
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.events._get_running_loop": [],
    "asyncio.events.get_event_loop_policy": [
        "asyncio.events._init_event_loop_policy"
    ],
    "asyncio.events._init_event_loop_policy": [],
    "asyncio.locks.Event.__init__": [
        "_collections.deque",
        "asyncio.events.get_event_loop",
        "warnings.warn"
    ],
    "asyncio.locks.Event.set": [],
    "asyncio.queues.Queue._init": [
        "_collections.deque"
    ],
    "asyncio.queues.Queue.get": [
        "asyncio.futures.Future.cancel",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.queues.Queue._wakeup_next",
        "asyncio.futures.Future.cancelled",
        "asyncio.queues.Queue.get_nowait",
        "asyncio.queues.Queue.empty"
    ],
    "asyncio.queues.Queue.empty": [],
    "asyncio.queues.Queue._wakeup_next": [],
    "asyncio.queues.Queue.get_nowait": [
        "asyncio.queues.Queue._wakeup_next",
        "asyncio.queues.Queue._get",
        "asyncio.queues.Queue.empty"
    ],
    "asyncio.queues.Queue._get": [],
    "asyncio.queues.Queue.task_done": [
        "asyncio.locks.Event.set",
        "<builtin>.ValueError"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop": [
        "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner",
        "asyncio.events.new_event_loop",
        "asyncio.events.set_event_loop"
    ],
    "asyncio.events.new_event_loop": [
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.events.set_event_loop": [
        "asyncio.events.get_event_loop_policy"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop": [
        "asyncio.tasks.all_tasks",
        "asyncio.queues.Queue.join",
        "asyncio.tasks.gather",
        "asyncio.queues.Queue.put_nowait"
    ],
    "asyncio.queues.Queue.put_nowait": [
        "asyncio.queues.Queue._wakeup_next",
        "asyncio.locks.Event.clear",
        "asyncio.queues.Queue._put",
        "asyncio.queues.Queue.full"
    ],
    "asyncio.queues.Queue.full": [
        "asyncio.queues.Queue.qsize"
    ],
    "asyncio.queues.Queue.qsize": [
        "<builtin>.len"
    ],
    "asyncio.queues.Queue._put": [],
    "asyncio.locks.Event.clear": [],
    "asyncio.queues.Queue.join": [
        "asyncio.locks.Event.wait"
    ],
    "asyncio.locks.Event.wait": [
        "asyncio.base_events.BaseEventLoop.create_future"
    ],
    "asyncio.tasks.all_tasks": [
        "asyncio.events.get_running_loop",
        "<builtin>.list",
        "asyncio.futures._get_loop"
    ],
    "asyncio.events.get_running_loop": [
        "asyncio.events._get_running_loop",
        "<builtin>.RuntimeError"
    ],
    "asyncio.futures._get_loop": [],
    "asyncio.tasks.gather": [
        "asyncio.tasks._GatheringFuture.__init__",
        "warnings.warn",
        "asyncio.futures.Future.set_result",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.ensure_future",
        "asyncio.events.get_event_loop",
        "asyncio.futures._get_loop"
    ],
    "asyncio.tasks.ensure_future": [
        "asyncio.base_futures.isfuture",
        "<builtin>.TypeError",
        "asyncio.base_events.BaseEventLoop.create_task",
        "asyncio.tasks._wrap_awaitable",
        "asyncio.coroutines.iscoroutine",
        "inspect.isawaitable",
        "asyncio.tasks.ensure_future",
        "asyncio.events.get_event_loop",
        "asyncio.futures._get_loop",
        "<builtin>.ValueError"
    ],
    "asyncio.coroutines.iscoroutine": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "asyncio.base_futures.isfuture": [
        "<builtin>.hasattr"
    ],
    "asyncio.tasks._GatheringFuture.__init__": [
        "<builtin>.super"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.run": [
        "<builtin>.super",
        "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop"
    ],
    "asyncio.base_events._format_handle": [
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.repr",
        "<builtin>.str"
    ],
    "asyncio.base_events._format_pipe": [
        "<builtin>.repr"
    ],
    "asyncio.base_events._set_reuseport": [
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events._ipaddr_info": [
        "<builtin>.int",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<list>.append"
    ],
    "asyncio.base_events._interleave_addrinfos": [
        "collections.OrderedDict.__init__",
        "collections.OrderedDict.values",
        "<builtin>.list"
    ],
    "asyncio.base_events._run_until_complete_cb": [
        "asyncio.futures._get_loop",
        "<builtin>.isinstance",
        "asyncio.base_events.BaseEventLoop.stop"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.drain": [
        "<builtin>.ConnectionError"
    ],
    "<builtin>.ConnectionError": [],
    "asyncio.base_events._SendfileFallbackProtocol.connection_made": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.connection_lost": [
        "<builtin>.ConnectionError"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.data_received": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events._SendfileFallbackProtocol.eof_received": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events.Server._detach": [
        "asyncio.base_events.Server._wakeup"
    ],
    "asyncio.base_events.Server._wakeup": [],
    "asyncio.base_events.Server.sockets": [
        "asyncio.trsock.TransportSocket.__init__",
        "<builtin>.tuple"
    ],
    "asyncio.trsock.TransportSocket.__init__": [],
    "asyncio.base_events.Server.close": [
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.cancel",
        "asyncio.base_events.Server._wakeup",
        "asyncio.selector_events.BaseSelectorEventLoop._stop_serving",
        "asyncio.proactor_events.BaseProactorEventLoop._stop_serving"
    ],
    "asyncio.base_events.Server.start_serving": [
        "asyncio.base_events.Server._start_serving",
        "asyncio.tasks.sleep"
    ],
    "asyncio.base_events.Server._start_serving": [
        "asyncio.proactor_events.BaseProactorEventLoop._start_serving",
        "asyncio.selector_events.BaseSelectorEventLoop._start_serving"
    ],
    "asyncio.tasks.sleep": [
        "asyncio.events.get_running_loop",
        "warnings.warn",
        "asyncio.tasks.__sleep0",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.base_events.BaseEventLoop.call_later"
    ],
    "asyncio.base_events.Server.serve_forever": [
        "asyncio.base_events.Server.close",
        "asyncio.base_events.Server.wait_closed",
        "asyncio.base_events.Server._start_serving",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events.Server.wait_closed": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "<list>.append"
    ],
    "asyncio.base_events.BaseEventLoop.__init__": [
        "_collections.deque",
        "asyncio.base_events.BaseEventLoop.set_debug",
        "asyncio.coroutines._is_debug_mode",
        "_weakrefset.WeakSet.__init__"
    ],
    "asyncio.base_events.BaseEventLoop.set_debug": [
        "asyncio.base_events.BaseEventLoop.call_soon_threadsafe",
        "asyncio.base_events.BaseEventLoop.is_running"
    ],
    "asyncio.base_events.BaseEventLoop.is_running": [],
    "asyncio.base_events.BaseEventLoop.call_soon_threadsafe": [
        "asyncio.base_events.BaseEventLoop._write_to_self",
        "asyncio.selector_events.BaseSelectorEventLoop._write_to_self",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.base_events.BaseEventLoop._call_soon",
        "asyncio.proactor_events.BaseProactorEventLoop._write_to_self",
        "asyncio.base_events.BaseEventLoop._check_callback"
    ],
    "asyncio.base_events.BaseEventLoop._check_closed": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events.BaseEventLoop._check_callback": [
        "<builtin>.TypeError",
        "asyncio.coroutines.iscoroutinefunction",
        "<builtin>.callable",
        "asyncio.coroutines.iscoroutine"
    ],
    "asyncio.coroutines.iscoroutinefunction": [
        "<builtin>.getattr",
        "inspect.iscoroutinefunction"
    ],
    "asyncio.base_events.BaseEventLoop._call_soon": [
        "asyncio.events.Handle.__init__"
    ],
    "asyncio.events.Handle.__init__": [
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.format_helpers.extract_stack"
    ],
    "asyncio.base_events.BaseEventLoop.get_debug": [],
    "asyncio.format_helpers.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "asyncio.base_events.BaseEventLoop._write_to_self": [],
    "asyncio.base_events.BaseEventLoop.__repr__": [
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.base_events.BaseEventLoop.is_running"
    ],
    "asyncio.base_events.BaseEventLoop.is_closed": [],
    "asyncio.base_events.BaseEventLoop.create_future": [
        "asyncio.futures.Future.__init__"
    ],
    "asyncio.futures.Future.__init__": [
        "asyncio.events.get_event_loop",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.format_helpers.extract_stack"
    ],
    "asyncio.base_events.BaseEventLoop.create_task": [
        "asyncio.tasks.Task.__init__",
        "asyncio.tasks._set_task_name",
        "asyncio.base_events.BaseEventLoop._check_closed"
    ],
    "asyncio.tasks._set_task_name": [],
    "asyncio.tasks.Task.__init__": [
        "<builtin>.TypeError",
        "<builtin>.str",
        "asyncio.coroutines.iscoroutine",
        "asyncio.base_events.BaseEventLoop.call_soon",
        "<builtin>.super",
        "asyncio.tasks._register_task"
    ],
    "asyncio.base_events.BaseEventLoop.call_soon": [
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.base_events.BaseEventLoop._call_soon",
        "asyncio.base_events.BaseEventLoop._check_thread",
        "asyncio.base_events.BaseEventLoop._check_callback"
    ],
    "asyncio.base_events.BaseEventLoop._check_thread": [
        "_thread.get_ident",
        "<builtin>.RuntimeError"
    ],
    "asyncio.tasks._register_task": [
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.base_events.BaseEventLoop.set_task_factory": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "asyncio.base_events.BaseEventLoop._asyncgen_finalizer_hook": [
        "_weakrefset.WeakSet.discard",
        "asyncio.base_events.BaseEventLoop.call_soon_threadsafe",
        "asyncio.base_events.BaseEventLoop.is_closed"
    ],
    "asyncio.base_events.BaseEventLoop._asyncgen_firstiter_hook": [
        "_weakrefset.WeakSet.add",
        "warnings.warn"
    ],
    "asyncio.base_events.BaseEventLoop.shutdown_asyncgens": [
        "<builtin>.zip",
        "<builtin>.len",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "<builtin>.isinstance",
        "<builtin>.list",
        "_weakrefset.WeakSet.clear",
        "asyncio.tasks.gather"
    ],
    "asyncio.futures.Future.set_result": [
        "asyncio.futures.Future.__schedule_callbacks"
    ],
    "asyncio.futures.Future.__schedule_callbacks": [
        "asyncio.base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.futures.Future.add_done_callback": [
        "asyncio.base_events.BaseEventLoop.call_soon",
        "<list>.append"
    ],
    "asyncio.base_events.BaseEventLoop.call_exception_handler": [
        "asyncio.base_events.BaseEventLoop.default_exception_handler",
        "logging.Logger.error"
    ],
    "asyncio.base_events.BaseEventLoop.default_exception_handler": [
        "<map>.get",
        "<str>.rstrip",
        "logging.Logger.error",
        "<builtin>.sorted",
        "traceback.format_list",
        "<builtin>.repr",
        "<list>.append",
        "<builtin>.type"
    ],
    "asyncio.base_events.BaseEventLoop._check_running": [
        "asyncio.events._get_running_loop",
        "<builtin>.RuntimeError",
        "asyncio.base_events.BaseEventLoop.is_running"
    ],
    "asyncio.base_events.BaseEventLoop.run_forever": [
        "_thread.get_ident",
        "asyncio.base_events.BaseEventLoop._set_coroutine_origin_tracking",
        "asyncio.base_events.BaseEventLoop._check_running",
        "asyncio.events._set_running_loop",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.base_events.BaseEventLoop._run_once"
    ],
    "asyncio.base_events.BaseEventLoop._set_coroutine_origin_tracking": [
        "<builtin>.bool"
    ],
    "asyncio.events._set_running_loop": [],
    "asyncio.base_events.BaseEventLoop._run_once": [
        "asyncio.proactor_events.BaseProactorEventLoop._process_events",
        "logging.Logger.warning",
        "<builtin>.range",
        "asyncio.base_events.BaseEventLoop.time",
        "selectors.KqueueSelector.select",
        "<builtin>.max",
        "asyncio.selector_events.BaseSelectorEventLoop._process_events",
        "<builtin>.len",
        "heapq.heappop",
        "asyncio.base_events.BaseEventLoop._process_events",
        "heapq.heapify",
        "selectors.EpollSelector.select",
        "<list>.append",
        "selectors._PollLikeSelector.select",
        "selectors.SelectSelector.select",
        "asyncio.base_events._format_handle",
        "<builtin>.min"
    ],
    "asyncio.base_events.BaseEventLoop.time": [],
    "asyncio.base_events.BaseEventLoop._process_events": [],
    "logging.Logger.warning": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "asyncio.base_events.BaseEventLoop.run_until_complete": [
        "asyncio.base_futures.isfuture",
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.exception",
        "asyncio.windows_events.ProactorEventLoop.run_forever",
        "asyncio.base_events.BaseEventLoop._check_running",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.futures.Future.result",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.ensure_future",
        "asyncio.base_events.BaseEventLoop.run_forever",
        "<builtin>.RuntimeError",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.futures.Future.done": [],
    "asyncio.futures.Future.cancelled": [],
    "asyncio.futures.Future.exception": [],
    "asyncio.futures.Future.result": [],
    "asyncio.base_events.BaseEventLoop.close": [
        "<list>.clear",
        "logging.Logger.debug",
        "<builtin>.RuntimeError",
        "asyncio.base_events.BaseEventLoop.is_running"
    ],
    "logging.Logger.debug": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "asyncio.base_events.BaseEventLoop.__del__": [
        "asyncio.proactor_events.BaseProactorEventLoop.close",
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.base_events.BaseEventLoop.is_running",
        "warnings.warn",
        "asyncio.selector_events.BaseSelectorEventLoop.close",
        "asyncio.base_events.BaseEventLoop.close"
    ],
    "asyncio.base_events.BaseEventLoop.call_later": [
        "asyncio.base_events.BaseEventLoop.time",
        "asyncio.base_events.BaseEventLoop.call_at"
    ],
    "asyncio.base_events.BaseEventLoop.call_at": [
        "heapq.heappush",
        "asyncio.events.TimerHandle.__init__",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.base_events.BaseEventLoop._check_thread",
        "asyncio.base_events.BaseEventLoop._check_callback"
    ],
    "asyncio.events.TimerHandle.__init__": [
        "<builtin>.super"
    ],
    "asyncio.base_events.BaseEventLoop.run_in_executor": [
        "asyncio.base_events.BaseEventLoop._check_closed",
        "asyncio.futures.wrap_future",
        "asyncio.base_events.BaseEventLoop._check_callback"
    ],
    "asyncio.futures.wrap_future": [
        "asyncio.base_futures.isfuture",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.isinstance",
        "asyncio.futures._chain_future",
        "asyncio.events.get_event_loop"
    ],
    "asyncio.futures._chain_future": [
        "asyncio.base_futures.isfuture",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.futures._get_loop"
    ],
    "asyncio.base_events.BaseEventLoop.set_default_executor": [
        "<builtin>.isinstance",
        "warnings.warn"
    ],
    "asyncio.base_events.BaseEventLoop._getaddrinfo_debug": [
        "asyncio.base_events.BaseEventLoop.time",
        "logging.Logger.debug",
        "<list>.append",
        "logging.Logger.info",
        "socket.getaddrinfo"
    ],
    "socket.getaddrinfo": [
        "<list>.append"
    ],
    "logging.Logger.info": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "asyncio.base_events.BaseEventLoop.getaddrinfo": [
        "asyncio.base_events.BaseEventLoop.run_in_executor"
    ],
    "asyncio.base_events.BaseEventLoop.getnameinfo": [
        "asyncio.base_events.BaseEventLoop.run_in_executor"
    ],
    "asyncio.base_events.BaseEventLoop.sock_sendfile": [
        "asyncio.base_events.BaseEventLoop._check_sendfile_params",
        "asyncio.base_events.BaseEventLoop._sock_sendfile_fallback",
        "asyncio.proactor_events.BaseProactorEventLoop._sock_sendfile_native",
        "asyncio.base_events.BaseEventLoop._sock_sendfile_native",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events.BaseEventLoop._check_sendfile_params": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events.BaseEventLoop._sock_sendfile_native": [],
    "asyncio.base_events.BaseEventLoop._sock_sendfile_fallback": [
        "asyncio.events.AbstractEventLoop.sock_sendall",
        "asyncio.selector_events.BaseSelectorEventLoop.sock_sendall",
        "<builtin>.min",
        "asyncio.proactor_events.BaseProactorEventLoop.sock_sendall",
        "<builtin>.bytearray",
        "<builtin>.memoryview",
        "asyncio.base_events.BaseEventLoop.run_in_executor"
    ],
    "asyncio.events.AbstractEventLoop.sock_sendall": [],
    "asyncio.base_events.BaseEventLoop._connect_sock": [
        "asyncio.selector_events.BaseSelectorEventLoop.sock_connect",
        "asyncio.proactor_events.BaseProactorEventLoop.sock_connect",
        "socket.socket.__init__",
        "socket.socket.close",
        "<list>.append",
        "asyncio.events.AbstractEventLoop.sock_connect",
        "<builtin>.OSError"
    ],
    "socket.socket.__init__": [],
    "asyncio.events.AbstractEventLoop.sock_connect": [],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket._real_close": [],
    "asyncio.base_events.BaseEventLoop.create_connection": [
        "<builtin>.all",
        "asyncio.staggered.staggered_race",
        "<builtin>.str",
        "<builtin>.len",
        "logging.Logger.debug",
        "asyncio.base_events._interleave_addrinfos",
        "asyncio.base_events.BaseEventLoop._create_connection_transport",
        "<builtin>.ValueError",
        "asyncio.base_events.BaseEventLoop._connect_sock",
        "<builtin>.OSError",
        "asyncio.base_events.BaseEventLoop._ensure_resolved"
    ],
    "asyncio.base_events.BaseEventLoop._ensure_resolved": [
        "asyncio.base_events.BaseEventLoop.getaddrinfo",
        "asyncio.base_events._ipaddr_info"
    ],
    "asyncio.staggered.staggered_race": [
        "asyncio.events.get_running_loop",
        "<builtin>.enumerate",
        "asyncio.tasks.wait",
        "asyncio.base_events.BaseEventLoop.create_task",
        "<builtin>.len",
        "asyncio.staggered.staggered_race.run_one_coro",
        "<list>.append"
    ],
    "asyncio.staggered.staggered_race.run_one_coro": [
        "asyncio.locks.Event.set",
        "contextlib.suppress.__init__",
        "asyncio.locks.Event.__init__",
        "asyncio.base_events.BaseEventLoop.create_task",
        "<builtin>.len",
        "asyncio.staggered.staggered_race.run_one_coro",
        "<list>.append",
        "<builtin>.next"
    ],
    "contextlib.suppress.__init__": [],
    "asyncio.tasks.wait": [
        "asyncio.base_futures.isfuture",
        "<builtin>.TypeError",
        "asyncio.events.get_running_loop",
        "warnings.warn",
        "asyncio.tasks._wait",
        "<builtin>.set",
        "asyncio.coroutines.iscoroutine",
        "asyncio.tasks.ensure_future",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "asyncio.tasks._wait": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.base_events.BaseEventLoop.call_later",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "asyncio.base_events.BaseEventLoop._create_connection_transport": [
        "asyncio.base_events.BaseEventLoop._make_ssl_transport",
        "asyncio.selector_events._SelectorTransport.close",
        "asyncio.selector_events.BaseSelectorEventLoop._make_socket_transport",
        "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport",
        "asyncio.streams.open_connection.<lambda3>",
        "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._make_ssl_transport",
        "asyncio.streams.open_connection.<lambda2>",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.isinstance",
        "asyncio.base_events.BaseEventLoop._make_socket_transport",
        "asyncio.streams.open_connection.<lambda1>",
        "asyncio.sslproto._SSLProtocolTransport.close",
        "asyncio.streams.open_connection.<lambda4>",
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.base_events.BaseEventLoop._make_socket_transport": [],
    "asyncio.base_events.BaseEventLoop._make_ssl_transport": [],
    "asyncio.base_events.BaseEventLoop.sendfile": [
        "asyncio.selector_events.BaseSelectorEventLoop._sendfile_native",
        "<builtin>.getattr",
        "asyncio.proactor_events.BaseProactorEventLoop._sendfile_native",
        "asyncio.base_events.BaseEventLoop._sendfile_fallback",
        "asyncio.base_events.BaseEventLoop._sendfile_native",
        "<builtin>.RuntimeError"
    ],
    "asyncio.base_events.BaseEventLoop._sendfile_native": [],
    "asyncio.base_events.BaseEventLoop._sendfile_fallback": [
        "asyncio.base_events._SendfileFallbackProtocol.__init__",
        "<builtin>.min",
        "asyncio.base_events._SendfileFallbackProtocol.drain",
        "<builtin>.bytearray",
        "<builtin>.memoryview",
        "asyncio.base_events.BaseEventLoop.run_in_executor"
    ],
    "asyncio.base_events.BaseEventLoop.start_tls": [
        "<builtin>.TypeError",
        "asyncio.events.Handle.cancel",
        "<builtin>.getattr",
        "asyncio.base_events.BaseEventLoop.call_soon",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.isinstance",
        "asyncio.sslproto.SSLProtocol.__init__",
        "<builtin>.RuntimeError"
    ],
    "asyncio.sslproto.SSLProtocol.__init__": [
        "asyncio.sslproto._create_transport_context",
        "<builtin>.dict",
        "_collections.deque",
        "asyncio.sslproto._SSLProtocolTransport.__init__",
        "<builtin>.RuntimeError",
        "asyncio.sslproto.SSLProtocol._set_app_protocol",
        "<builtin>.ValueError"
    ],
    "asyncio.sslproto._create_transport_context": [
        "<builtin>.ValueError",
        "ssl.create_default_context"
    ],
    "ssl.create_default_context": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "ssl.SSLContext.load_default_certs"
    ],
    "ssl.SSLContext.load_default_certs": [
        "<builtin>.TypeError",
        "ssl.SSLContext._load_windows_store_certs",
        "<builtin>.isinstance"
    ],
    "ssl.SSLContext._load_windows_store_certs": [
        "<builtin>.bytearray",
        "warnings.warn"
    ],
    "asyncio.sslproto.SSLProtocol._set_app_protocol": [
        "<builtin>.isinstance"
    ],
    "asyncio.sslproto._SSLProtocolTransport.__init__": [],
    "asyncio.events.Handle.cancel": [
        "asyncio.base_events.BaseEventLoop.get_debug",
        "<builtin>.repr"
    ],
    "asyncio.base_events.BaseEventLoop.create_datagram_endpoint": [
        "asyncio.selector_events.BaseSelectorEventLoop.sock_connect",
        "asyncio.proactor_events.BaseProactorEventLoop._make_datagram_transport",
        "socket.socket.close",
        "<builtin>.hasattr",
        "<map>.items",
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "asyncio.base_events.BaseEventLoop._ensure_resolved",
        "asyncio.base_events.BaseEventLoop._make_datagram_transport",
        "stat.S_ISSOCK",
        "logging.Logger.info",
        "<builtin>.TypeError",
        "socket.socket.__init__",
        "asyncio.base_events._set_reuseport",
        "<builtin>.len",
        "logging.Logger.debug",
        "asyncio.selector_events.BaseSelectorEventLoop._make_datagram_transport",
        "<list>.append",
        "<builtin>.ValueError",
        "<builtin>.OSError",
        "asyncio.selector_events._SelectorTransport.close",
        "warnings.warn",
        "asyncio.proactor_events.BaseProactorEventLoop.sock_connect",
        "logging.Logger.error",
        "<builtin>.dict",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.isinstance",
        "asyncio.events.AbstractEventLoop.sock_connect"
    ],
    "asyncio.base_events.BaseEventLoop._make_datagram_transport": [],
    "asyncio.base_events.BaseEventLoop._create_server_getaddrinfo": [
        "<builtin>.OSError",
        "asyncio.base_events.BaseEventLoop._ensure_resolved"
    ],
    "asyncio.base_events.BaseEventLoop.create_server": [
        "<builtin>.TypeError",
        "logging.Logger.warning",
        "asyncio.base_events.Server.__init__",
        "<builtin>.set",
        "socket.socket.__init__",
        "asyncio.base_events._set_reuseport",
        "asyncio.base_events.Server._start_serving",
        "asyncio.base_events.BaseEventLoop._create_server_getaddrinfo",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<list>.append",
        "<builtin>.OSError",
        "asyncio.tasks.sleep",
        "logging.Logger.info",
        "<builtin>.ValueError",
        "asyncio.tasks.gather"
    ],
    "asyncio.base_events.Server.__init__": [],
    "asyncio.base_events.BaseEventLoop.connect_accepted_socket": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop._create_connection_transport",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events.BaseEventLoop.connect_read_pipe": [
        "asyncio.base_events.BaseEventLoop._make_read_pipe_transport",
        "logging.Logger.debug",
        "asyncio.proactor_events.BaseProactorEventLoop._make_read_pipe_transport",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.base_events.BaseEventLoop._make_read_pipe_transport": [],
    "asyncio.base_events.BaseEventLoop.connect_write_pipe": [
        "asyncio.proactor_events.BaseProactorEventLoop._make_write_pipe_transport",
        "asyncio.base_events.BaseEventLoop._make_write_pipe_transport",
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.base_events.BaseEventLoop._make_write_pipe_transport": [],
    "asyncio.base_events.BaseEventLoop._log_subprocess": [
        "logging.Logger.debug",
        "<list>.append"
    ],
    "asyncio.base_events.BaseEventLoop.subprocess_shell": [
        "asyncio.subprocess.create_subprocess_shell.<lambda1>",
        "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport",
        "asyncio.base_events.BaseEventLoop._make_subprocess_transport",
        "<builtin>.isinstance",
        "asyncio.base_events.BaseEventLoop._log_subprocess",
        "logging.Logger.info",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events.BaseEventLoop._make_subprocess_transport": [],
    "asyncio.base_events.BaseEventLoop.subprocess_exec": [
        "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport",
        "asyncio.subprocess.create_subprocess_exec.<lambda1>",
        "asyncio.base_events.BaseEventLoop._make_subprocess_transport",
        "asyncio.base_events.BaseEventLoop._log_subprocess",
        "logging.Logger.info",
        "<builtin>.ValueError"
    ],
    "asyncio.base_events.BaseEventLoop.set_exception_handler": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "asyncio.base_events.BaseEventLoop._add_callback": [
        "<builtin>.isinstance"
    ],
    "asyncio.base_events.BaseEventLoop._add_callback_signalsafe": [
        "asyncio.selector_events.BaseSelectorEventLoop._write_to_self",
        "asyncio.proactor_events.BaseProactorEventLoop._write_to_self",
        "asyncio.base_events.BaseEventLoop._write_to_self",
        "asyncio.base_events.BaseEventLoop._add_callback"
    ],
    "concurrent.futures.process": [
        "concurrent.futures.process.ProcessPoolExecutor",
        "os",
        "concurrent.futures.process._ExceptionWithTraceback",
        "weakref",
        "multiprocessing",
        "multiprocessing.connection",
        "concurrent.futures.process._RemoteTraceback",
        "functools",
        "threading",
        "multiprocessing.queues",
        "concurrent.futures.process._ResultItem",
        "concurrent.futures.process._WorkItem",
        "queue",
        "concurrent.futures.process._SafeQueue",
        "traceback",
        "concurrent.futures._base",
        "concurrent.futures.process._CallItem",
        "weakref.WeakKeyDictionary.__init__",
        "concurrent.futures.process._ThreadWakeup",
        "concurrent.futures.process.BrokenProcessPool"
    ],
    "concurrent.futures.__getattr__": [
        "concurrent.futures.process",
        "concurrent.futures.thread",
        "<builtin>.AttributeError"
    ],
    "queue": [
        "threading",
        "queue.LifoQueue",
        "queue.Queue",
        "queue._PySimpleQueue",
        "queue.Empty",
        "collections",
        "queue.Full",
        "queue.PriorityQueue",
        "heapq",
        "_queue"
    ],
    "_queue": [],
    "queue.Empty": [],
    "queue.Full": [],
    "queue.Queue": [],
    "queue.PriorityQueue": [],
    "queue.LifoQueue": [],
    "queue._PySimpleQueue": [],
    "multiprocessing": [
        "<builtin>.globals",
        "multiprocessing.context",
        "<builtin>.getattr",
        "<builtin>.dir"
    ],
    "multiprocessing.context": [
        "multiprocessing.context.DefaultContext",
        "os",
        "multiprocessing.context.SpawnContext",
        "_thread._local",
        "multiprocessing.context.Process",
        "multiprocessing.context.DefaultContext.__init__",
        "multiprocessing.context.TimeoutError",
        "multiprocessing.context.ProcessError",
        "multiprocessing.process",
        "threading",
        "multiprocessing.context.ForkServerProcess",
        "multiprocessing.context.AuthenticationError",
        "multiprocessing.context.BaseContext",
        "multiprocessing.context.ForkContext",
        "multiprocessing.context.ForkServerContext",
        "multiprocessing.context.BufferTooShort",
        "multiprocessing.context.SpawnProcess",
        "multiprocessing.reduction",
        "multiprocessing.context.ForkProcess"
    ],
    "multiprocessing.process": [
        "threading",
        "signal",
        "os",
        "posixpath.abspath",
        "multiprocessing.process.AuthenticationString",
        "<builtin>.set",
        "multiprocessing.process._MainProcess.__init__",
        "multiprocessing.process._MainProcess",
        "_weakrefset.WeakSet.__init__",
        "multiprocessing.process._ParentProcess",
        "ntpath.abspath",
        "_weakrefset",
        "<builtin>.list",
        "multiprocessing.process.BaseProcess"
    ],
    "multiprocessing.process.BaseProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process.AuthenticationString": [],
    "multiprocessing.process._ParentProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process._MainProcess": [],
    "multiprocessing.process._MainProcess.__init__": [],
    "multiprocessing.reduction": [
        "io",
        "pickle",
        "os",
        "multiprocessing.reduction.ForkingPickler.register",
        "multiprocessing.reduction.DupHandle",
        "socket",
        "multiprocessing.reduction._C",
        "copyreg",
        "abc",
        "multiprocessing.reduction.AbstractReducer",
        "multiprocessing.reduction.ForkingPickler",
        "<builtin>.hasattr",
        "multiprocessing.context",
        "functools",
        "array",
        "<builtin>.type"
    ],
    "multiprocessing.reduction.ForkingPickler": [
        "<builtin>.classmethod"
    ],
    "array": [],
    "multiprocessing.reduction.DupHandle": [],
    "multiprocessing.reduction._C": [],
    "multiprocessing.reduction.ForkingPickler.register": [],
    "multiprocessing.reduction.AbstractReducer": [],
    "multiprocessing.context.ProcessError": [],
    "multiprocessing.context.BufferTooShort": [],
    "multiprocessing.context.TimeoutError": [],
    "multiprocessing.context.AuthenticationError": [],
    "multiprocessing.context.BaseContext": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "multiprocessing.context.Process": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.DefaultContext": [],
    "multiprocessing.context.SpawnProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.SpawnContext": [],
    "multiprocessing.context.DefaultContext.__init__": [],
    "multiprocessing.context.ForkProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.ForkServerProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.ForkContext": [],
    "multiprocessing.context.ForkServerContext": [],
    "_thread._local": [],
    "multiprocessing.connection": [
        "os",
        "socket",
        "multiprocessing.connection.PipeConnection",
        "<builtin>.hasattr",
        "struct",
        "tempfile",
        "multiprocessing.connection.ConnectionWrapper",
        "selectors",
        "multiprocessing.context",
        "multiprocessing.connection._ConnectionBase",
        "multiprocessing.connection.Connection",
        "multiprocessing.util",
        "_multiprocessing",
        "multiprocessing.connection.PipeListener",
        "multiprocessing.connection.Listener",
        "io",
        "multiprocessing.connection.SocketListener",
        "multiprocessing.connection.XmlListener",
        "multiprocessing.reduction.ForkingPickler.register"
    ],
    "_multiprocessing": [],
    "multiprocessing.util": [
        "multiprocessing.process",
        "threading",
        "multiprocessing.util.Finalize",
        "os",
        "multiprocessing.util._platform_supports_abstract_sockets",
        "multiprocessing.util.ForkAwareLocal",
        "subprocess",
        "weakref",
        "weakref.WeakValueDictionary.__init__",
        "multiprocessing.util.ForkAwareThreadLock"
    ],
    "multiprocessing.util._platform_supports_abstract_sockets": [
        "<builtin>.hasattr"
    ],
    "multiprocessing.util.Finalize": [],
    "multiprocessing.util.ForkAwareThreadLock": [],
    "multiprocessing.util.ForkAwareLocal": [],
    "multiprocessing.connection._ConnectionBase": [
        "<builtin>.property"
    ],
    "multiprocessing.connection.PipeConnection": [],
    "multiprocessing.connection.Connection": [],
    "multiprocessing.connection.Listener": [
        "<builtin>.property"
    ],
    "multiprocessing.connection.SocketListener": [],
    "multiprocessing.connection.PipeListener": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.connection.ConnectionWrapper": [],
    "multiprocessing.connection.XmlListener": [],
    "multiprocessing.queues": [
        "threading",
        "multiprocessing.util",
        "os",
        "_multiprocessing",
        "multiprocessing.queues.SimpleQueue",
        "multiprocessing.queues.JoinableQueue",
        "queue",
        "multiprocessing.queues.Queue",
        "collections",
        "weakref",
        "multiprocessing.connection",
        "multiprocessing.context",
        "<builtin>.object"
    ],
    "multiprocessing.queues.Queue": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.queues.JoinableQueue": [],
    "multiprocessing.queues.SimpleQueue": [],
    "concurrent.futures.process._ThreadWakeup": [],
    "concurrent.futures.process._RemoteTraceback": [],
    "concurrent.futures.process._ExceptionWithTraceback": [],
    "concurrent.futures.process._WorkItem": [],
    "concurrent.futures.process._ResultItem": [],
    "concurrent.futures.process._CallItem": [],
    "concurrent.futures.process._SafeQueue": [],
    "concurrent.futures.process.BrokenProcessPool": [],
    "concurrent.futures.process.ProcessPoolExecutor": [],
    "concurrent.futures.thread": [
        "threading",
        "os",
        "weakref.WeakKeyDictionary.__init__",
        "concurrent.futures.thread.BrokenThreadPool",
        "concurrent.futures.thread._WorkItem",
        "queue",
        "weakref",
        "concurrent.futures.thread.ThreadPoolExecutor",
        "concurrent.futures._base"
    ],
    "concurrent.futures.thread._WorkItem": [],
    "concurrent.futures.thread.BrokenThreadPool": [],
    "concurrent.futures.thread.ThreadPoolExecutor": [],
    "concurrent.futures._base._Waiter.__init__": [
        "threading.Event.__init__"
    ],
    "concurrent.futures._base._Waiter.add_result": [
        "<list>.append"
    ],
    "concurrent.futures._base._Waiter.add_exception": [
        "<list>.append"
    ],
    "concurrent.futures._base._Waiter.add_cancelled": [
        "<list>.append"
    ],
    "concurrent.futures._base._AsCompletedWaiter.__init__": [
        "_thread.allocate_lock",
        "<builtin>.super"
    ],
    "concurrent.futures._base._FirstCompletedWaiter.add_result": [
        "<builtin>.super",
        "threading.Event.set"
    ],
    "concurrent.futures._base._FirstCompletedWaiter.add_exception": [
        "<builtin>.super",
        "threading.Event.set"
    ],
    "concurrent.futures._base._FirstCompletedWaiter.add_cancelled": [
        "<builtin>.super",
        "threading.Event.set"
    ],
    "concurrent.futures._base._AllCompletedWaiter.__init__": [
        "_thread.allocate_lock",
        "<builtin>.super"
    ],
    "concurrent.futures._base._AllCompletedWaiter.add_result": [
        "<builtin>.super",
        "concurrent.futures._base._AllCompletedWaiter._decrement_pending_calls"
    ],
    "concurrent.futures._base._AllCompletedWaiter._decrement_pending_calls": [],
    "concurrent.futures._base._AllCompletedWaiter.add_exception": [
        "<builtin>.super",
        "threading.Event.set",
        "concurrent.futures._base._AllCompletedWaiter._decrement_pending_calls"
    ],
    "concurrent.futures._base._AllCompletedWaiter.add_cancelled": [
        "<builtin>.super",
        "concurrent.futures._base._AllCompletedWaiter._decrement_pending_calls"
    ],
    "concurrent.futures._base._AcquireFutures.__init__": [
        "<builtin>.sorted"
    ],
    "concurrent.futures._base._create_and_install_waiters": [
        "concurrent.futures._base._AllCompletedWaiter.__init__",
        "<builtin>.sum",
        "<builtin>.ValueError",
        "concurrent.futures._base._AsCompletedWaiter.__init__"
    ],
    "concurrent.futures._base.as_completed": [
        "<builtin>.TimeoutError",
        "<builtin>.set",
        "<builtin>.len",
        "concurrent.futures._base._AcquireFutures.__init__",
        "<builtin>.list",
        "concurrent.futures._base._yield_finished_futures"
    ],
    "concurrent.futures._base._yield_finished_futures": [],
    "<builtin>.TimeoutError": [],
    "concurrent.futures._base.wait": [
        "concurrent.futures._base._AcquireFutures.__init__",
        "<builtin>.set"
    ],
    "concurrent.futures._base.Future.__init__": [
        "threading.Condition.__init__"
    ],
    "concurrent.futures._base.Future._invoke_callbacks": [
        "logging.Logger.exception"
    ],
    "logging.Logger.exception": [
        "logging.Logger.error"
    ],
    "concurrent.futures._base.Future.cancel": [
        "concurrent.futures._base.Future._invoke_callbacks"
    ],
    "concurrent.futures._base.Future.add_done_callback": [
        "logging.Logger.exception"
    ],
    "concurrent.futures._base.Future.set_result": [
        "concurrent.futures._base.Future._invoke_callbacks"
    ],
    "concurrent.futures._base.Future.set_exception": [
        "concurrent.futures._base.Future._invoke_callbacks"
    ],
    "concurrent.futures._base.Executor.submit": [
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.len",
        "warnings",
        "<builtin>.NotImplementedError"
    ],
    "concurrent.futures._base.Executor.map": [
        "<builtin>.zip",
        "concurrent.futures._base.Executor.submit",
        "concurrent.futures._base.Executor.map.result_iterator"
    ],
    "concurrent.futures._base.Executor.map.result_iterator": [],
    "concurrent.futures._base.Executor.__exit__": [
        "concurrent.futures._base.Executor.shutdown"
    ],
    "concurrent.futures._base.Executor.shutdown": [],
    "logging.addLevelName": [
        "logging._acquireLock"
    ],
    "logging._releaseLock": [
        "threading._RLock.release"
    ],
    "logging._after_at_fork_child_reinit_locks": [
        "_weakrefset.WeakSet.__iter__",
        "logging._releaseLock",
        "<builtin>.print"
    ],
    "logging.makeLogRecord": [
        "logging.LogRecord.__init__"
    ],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.PercentStyle.format": [
        "logging.StringTemplateStyle._format",
        "logging.PercentStyle._format",
        "logging.StrFormatStyle._format",
        "<builtin>.ValueError"
    ],
    "logging.PercentStyle._format": [],
    "logging.StrFormatStyle.validate": [
        "string.Formatter.parse",
        "<builtin>.set",
        "<builtin>.ValueError"
    ],
    "string.Formatter.parse": [],
    "logging.StringTemplateStyle.__init__": [
        "string.Template.__init__"
    ],
    "string.Template.__init__": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.set",
        "<builtin>.ValueError"
    ],
    "logging.StringTemplateStyle._format": [
        "string.Template.substitute"
    ],
    "string.Template.substitute": [
        "collections.ChainMap.__init__"
    ],
    "logging.BufferingFormatter.format": [
        "logging.Formatter.format",
        "logging.BufferingFormatter.formatHeader",
        "<builtin>.len",
        "logging.BufferingFormatter.formatFooter"
    ],
    "logging.BufferingFormatter.formatHeader": [],
    "logging.BufferingFormatter.formatFooter": [],
    "logging.Filter.__init__": [
        "<builtin>.len"
    ],
    "logging.Filterer.addFilter": [
        "<list>.append"
    ],
    "logging.Filterer.removeFilter": [
        "<list>.remove"
    ],
    "logging._removeHandlerRef": [
        "<list>.remove",
        "logging._acquireLock"
    ],
    "logging.Handler.set_name": [
        "logging._acquireLock"
    ],
    "logging.Handler.release": [
        "threading._RLock.release"
    ],
    "logging.Handler.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Handler.close": [
        "logging._acquireLock"
    ],
    "logging.Handler.__repr__": [
        "logging.getLevelName"
    ],
    "logging.StreamHandler.setStream": [
        "logging.Handler.acquire",
        "logging.StreamHandler.flush"
    ],
    "logging.StreamHandler.__repr__": [
        "<builtin>.str",
        "<builtin>.getattr",
        "logging.getLevelName"
    ],
    "logging.FileHandler.close": [
        "logging.Handler.acquire",
        "logging.StreamHandler.flush"
    ],
    "logging.FileHandler.__repr__": [
        "logging.getLevelName"
    ],
    "logging.setLoggerClass": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "logging.Manager.getLogger": [
        "<builtin>.TypeError",
        "logging.Manager._fixupParents",
        "logging.Manager._fixupChildren",
        "logging._acquireLock",
        "<builtin>.isinstance"
    ],
    "logging.Manager._fixupParents": [
        "<builtin>.isinstance",
        "logging.PlaceHolder.__init__"
    ],
    "logging.PlaceHolder.__init__": [],
    "logging.Manager._fixupChildren": [
        "<builtin>.len"
    ],
    "logging.Manager.setLoggerClass": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "logging.Manager._clear_cache": [
        "<map>.clear",
        "<map>.values",
        "logging._acquireLock",
        "<builtin>.isinstance",
        "logging._releaseLock"
    ],
    "logging.Logger.warn": [
        "logging.Logger.warning",
        "warnings.warn"
    ],
    "logging.Logger.critical": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.log": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.getChild": [
        "logging.Manager.getLogger"
    ],
    "logging.Logger.__repr__": [
        "logging.Logger.getEffectiveLevel",
        "logging.getLevelName"
    ],
    "logging.Logger.__reduce__": [
        "pickle",
        "logging.getLogger"
    ],
    "logging.LoggerAdapter.debug": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.log": [
        "logging.LoggerAdapter.isEnabledFor",
        "logging.LoggerAdapter.process"
    ],
    "logging.LoggerAdapter.isEnabledFor": [],
    "logging.LoggerAdapter.process": [],
    "logging.LoggerAdapter.info": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.warning": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.warn": [
        "logging.LoggerAdapter.warning",
        "warnings.warn"
    ],
    "logging.LoggerAdapter.error": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.exception": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.critical": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.__repr__": [
        "logging.getLevelName"
    ],
    "logging.critical": [
        "logging.basicConfig",
        "logging.Logger.critical",
        "<builtin>.len"
    ],
    "logging.warning": [
        "logging.basicConfig",
        "logging.Logger.warning",
        "<builtin>.len"
    ],
    "logging.warn": [
        "logging.warning",
        "warnings.warn"
    ],
    "logging.info": [
        "logging.basicConfig",
        "logging.Logger.info",
        "<builtin>.len"
    ],
    "logging.debug": [
        "logging.basicConfig",
        "logging.Logger.debug",
        "<builtin>.len"
    ],
    "logging.log": [
        "logging.basicConfig",
        "logging.Logger.log",
        "<builtin>.len"
    ],
    "logging.shutdown": [
        "<builtin>.reversed"
    ],
    "logging._showwarning": [
        "logging.Logger.warning",
        "logging.getLogger",
        "warnings.formatwarning",
        "logging.Logger.addHandler",
        "warnings.showwarning"
    ],
    "string._TemplateMetaclass.__init__": [
        "re.compile",
        "re.escape",
        "<builtin>.super"
    ],
    "string.Template._invalid": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "string.Template.safe_substitute": [
        "collections.ChainMap.__init__"
    ],
    "string.Formatter.format": [
        "string.Formatter.vformat"
    ],
    "string.Formatter.vformat": [
        "string.Formatter._vformat",
        "<builtin>.set",
        "string.Formatter.check_unused_args"
    ],
    "string.Formatter._vformat": [
        "<builtin>.str",
        "<list>.append",
        "string.Formatter.convert_field",
        "string.Formatter._vformat",
        "string.Formatter.parse",
        "string.Formatter.get_field",
        "<builtin>.ValueError"
    ],
    "string.Formatter.get_field": [
        "string.Formatter.get_value",
        "<builtin>.getattr"
    ],
    "string.Formatter.get_value": [
        "<builtin>.isinstance"
    ],
    "string.Formatter.convert_field": [
        "<builtin>.ascii",
        "<builtin>.str",
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "<builtin>.ascii": [],
    "string.Formatter.check_unused_args": [],
    "string.Formatter.format_field": [
        "<builtin>.format"
    ],
    "string.Template.substitute.convert": [
        "string.Template._invalid",
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "socket.socket.__exit__": [
        "socket.socket.close"
    ],
    "socket.socket.__repr__": [
        "<builtin>.str",
        "<builtin>.getattr"
    ],
    "socket.socket.__getstate__": [
        "<builtin>.TypeError"
    ],
    "socket.socket.dup": [
        "socket.socket.dup"
    ],
    "socket.socket.accept": [
        "socket.socket.__init__"
    ],
    "socket.socket.makefile": [
        "<builtin>.set",
        "_io.BufferedRWPair",
        "_io.BufferedWriter",
        "socket.SocketIO.__init__",
        "_io.TextIOWrapper",
        "_io.BufferedReader",
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.__init__": [
        "<builtin>.ValueError"
    ],
    "_io.BufferedWriter": [],
    "_io.BufferedRWPair": [],
    "socket.socket._sendfile_use_send": [
        "socket.socket._check_sendfile_params",
        "<builtin>.min",
        "<builtin>.memoryview",
        "<builtin>.ValueError"
    ],
    "socket.socket._check_sendfile_params": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "socket.socket.sendfile": [
        "socket.socket._sendfile_use_sendfile",
        "socket.socket._sendfile_use_send"
    ],
    "socket.socket._sendfile_use_sendfile": [],
    "socket.socket._decref_socketios": [
        "socket.socket.close"
    ],
    "socket.socket.detach": [
        "<builtin>.super"
    ],
    "socket.socket.family": [
        "socket._intenum_converter",
        "<builtin>.super"
    ],
    "socket._intenum_converter": [],
    "socket.socket.type": [
        "socket._intenum_converter",
        "<builtin>.super"
    ],
    "socket.fromfd": [
        "socket.socket.__init__"
    ],
    "socket.fromshare": [
        "socket.socket.__init__"
    ],
    "socket.socketpair": [
        "socket.socket.accept",
        "socket.socket.close",
        "socket.socket.__init__",
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.readinto": [
        "<builtin>.OSError"
    ],
    "socket.SocketIO.readable": [
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.writable": [
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.seekable": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.name": [
        "socket.SocketIO.fileno"
    ],
    "socket.SocketIO.fileno": [],
    "socket.SocketIO.close": [
        "socket.socket._decref_socketios"
    ],
    "socket.getfqdn": [
        "<str>.strip"
    ],
    "socket.create_connection": [
        "socket.socket.close",
        "socket.socket.__init__",
        "socket.getaddrinfo"
    ],
    "socket.has_dualstack_ipv6": [
        "socket.socket.__init__",
        "<builtin>.hasattr",
        "socket.socket.__enter__",
        "socket.socket.__exit__"
    ],
    "socket.socket.__enter__": [],
    "socket.create_server": [
        "socket.socket.__init__",
        "socket.socket.close",
        "<builtin>.hasattr",
        "socket.has_dualstack_ipv6",
        "<builtin>.ValueError"
    ],
    "selectors._fileobj_to_fd": [
        "<builtin>.int",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "selectors._SelectorMapping.__len__": [
        "<builtin>.len"
    ],
    "selectors._SelectorMapping.__getitem__": [
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.KeyError"
    ],
    "selectors._SelectorMapping.__iter__": [
        "<builtin>.iter"
    ],
    "selectors.BaseSelector.modify": [
        "selectors._PollLikeSelector.register",
        "selectors._PollLikeSelector.unregister",
        "selectors.BaseSelector.unregister",
        "selectors.KqueueSelector.register",
        "selectors.KqueueSelector.unregister",
        "selectors.SelectSelector.unregister",
        "selectors.BaseSelector.register",
        "selectors.SelectSelector.register"
    ],
    "selectors.BaseSelector.unregister": [],
    "selectors.BaseSelector.register": [],
    "selectors.BaseSelector.get_key": [
        "selectors._BaseSelectorImpl.get_map",
        "<builtin>.RuntimeError",
        "selectors.BaseSelector.get_map",
        "<builtin>.KeyError"
    ],
    "selectors.BaseSelector.get_map": [],
    "selectors.BaseSelector.__exit__": [
        "selectors.DevpollSelector.close",
        "selectors._BaseSelectorImpl.close",
        "selectors.KqueueSelector.close",
        "selectors.BaseSelector.close",
        "selectors.EpollSelector.close"
    ],
    "selectors.BaseSelector.close": [],
    "selectors._BaseSelectorImpl.__init__": [
        "selectors._SelectorMapping.__init__"
    ],
    "selectors._SelectorMapping.__init__": [],
    "selectors._BaseSelectorImpl._fileobj_lookup": [
        "<map>.values",
        "selectors._fileobj_to_fd"
    ],
    "selectors._BaseSelectorImpl.register": [
        "<builtin>.KeyError",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.ValueError"
    ],
    "selectors._BaseSelectorImpl.unregister": [
        "<builtin>.KeyError",
        "<map>.pop"
    ],
    "selectors._BaseSelectorImpl.modify": [
        "selectors._PollLikeSelector.register",
        "selectors._PollLikeSelector.unregister",
        "selectors.KqueueSelector.register",
        "selectors.KqueueSelector.unregister",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "selectors.SelectSelector.unregister",
        "selectors._BaseSelectorImpl.unregister",
        "selectors.SelectSelector.register",
        "selectors._BaseSelectorImpl.register",
        "<builtin>.KeyError"
    ],
    "selectors._BaseSelectorImpl.close": [
        "<map>.clear"
    ],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "selectors.SelectSelector.register": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.max",
        "selectors.SelectSelector._select",
        "<builtin>.set",
        "<list>.append"
    ],
    "selectors.SelectSelector._select": [],
    "selectors._BaseSelectorImpl._key_from_fd": [],
    "selectors._PollLikeSelector.__init__": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.register": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.modify": [
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.super",
        "<builtin>.KeyError"
    ],
    "selectors._PollLikeSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd",
        "<list>.append"
    ],
    "selectors.EpollSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.max",
        "<list>.append",
        "<builtin>.len"
    ],
    "selectors.EpollSelector.close": [
        "<builtin>.super"
    ],
    "selectors.DevpollSelector.close": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.__init__": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.register": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.max",
        "<list>.append",
        "<builtin>.len"
    ],
    "selectors.KqueueSelector.close": [
        "<builtin>.super"
    ],
    "subprocess.STARTUPINFO.copy": [
        "subprocess.STARTUPINFO.__init__",
        "<builtin>.list"
    ],
    "subprocess.STARTUPINFO.__init__": [],
    "subprocess.Handle.Detach": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "subprocess.Handle.__repr__": [
        "<builtin>.int"
    ],
    "subprocess._optim_args_from_interpreter_flags": [
        "<list>.append"
    ],
    "subprocess._args_from_interpreter_flags": [
        "<list>.extend",
        "subprocess._optim_args_from_interpreter_flags",
        "<builtin>.getattr",
        "<list>.append",
        "<map>.items"
    ],
    "subprocess.call": [
        "subprocess.Popen.wait",
        "subprocess.Popen.__enter__",
        "subprocess.Popen.kill",
        "subprocess.Popen.__init__",
        "subprocess.Popen.__exit__"
    ],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [],
    "subprocess.check_call": [
        "subprocess.call",
        "subprocess.CalledProcessError.__init__"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.check_output": [
        "subprocess.run",
        "<builtin>.ValueError"
    ],
    "subprocess.run": [
        "subprocess.Popen.wait",
        "subprocess.CalledProcessError.__init__",
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.__enter__",
        "subprocess.Popen.poll",
        "subprocess.Popen.communicate",
        "subprocess.Popen.kill",
        "subprocess.Popen.__init__",
        "subprocess.Popen.__exit__",
        "<builtin>.ValueError"
    ],
    "subprocess.Popen.communicate": [
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._wait",
        "<list>.count",
        "time.monotonic",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen.wait",
        "<builtin>.min",
        "subprocess.Popen._communicate",
        "<builtin>.ValueError"
    ],
    "subprocess.Popen._communicate": [
        "subprocess.Popen._remaining_time",
        "subprocess.Popen.wait",
        "subprocess.Popen._save_input",
        "subprocess.Popen._translate_newlines",
        "selectors.SelectSelector.__init__",
        "<builtin>.RuntimeError",
        "subprocess.Popen._check_timeout",
        "<builtin>.memoryview"
    ],
    "subprocess.Popen._save_input": [],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic"
    ],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CompletedProcess.__init__": [],
    "subprocess.CompletedProcess.__repr__": [
        "<list>.append",
        "<builtin>.type"
    ],
    "subprocess.CompletedProcess.check_returncode": [
        "subprocess.CalledProcessError.__init__"
    ],
    "subprocess.list2cmdline": [
        "<builtin>.map",
        "<list>.extend",
        "<list>.append"
    ],
    "subprocess.getstatusoutput": [
        "subprocess.check_output"
    ],
    "subprocess.getoutput": [
        "subprocess.getstatusoutput"
    ],
    "subprocess.Popen.__del__": [
        "subprocess.Popen._internal_poll",
        "<list>.append",
        "warnings.warn"
    ],
    "subprocess.Popen.terminate": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen._filter_handle_list": [
        "<builtin>.list"
    ],
    "signal._enum_to_int": [
        "<builtin>.int"
    ],
    "signal.signal": [
        "signal._int_to_enum",
        "signal._enum_to_int"
    ],
    "signal._int_to_enum": [],
    "signal.getsignal": [
        "signal._int_to_enum"
    ],
    "signal.pthread_sigmask": [
        "signal._int_to_enum",
        "<builtin>.set"
    ],
    "signal.sigpending": [
        "signal._int_to_enum"
    ],
    "signal.sigwait": [
        "signal._int_to_enum"
    ],
    "signal.valid_signals": [
        "signal._int_to_enum"
    ],
    "ssl._inet_paton": [
        "<builtin>.ValueError"
    ],
    "ssl._ipaddress_match": [
        "ssl._inet_paton"
    ],
    "ssl.match_hostname": [
        "ssl._dnsname_match",
        "<builtin>.len",
        "ssl._ipaddress_match",
        "<builtin>.map",
        "ssl._inet_paton",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "ssl._dnsname_match": [],
    "ssl.get_default_verify_paths": [
        "genericpath.isfile",
        "nt._isdir",
        "genericpath.isdir"
    ],
    "ssl._ASN1Object.__new__": [
        "<builtin>.super"
    ],
    "ssl._ASN1Object.fromnid": [
        "<builtin>.super"
    ],
    "ssl._ASN1Object.fromname": [
        "<builtin>.super"
    ],
    "ssl.SSLContext._encode_hostname": [
        "<builtin>.isinstance"
    ],
    "ssl.SSLContext.wrap_socket": [
        "ssl.SSLSocket._create"
    ],
    "ssl.SSLSocket._create": [
        "ssl.SSLContext._encode_hostname",
        "<builtin>.dict",
        "<builtin>.super",
        "<builtin>.NotImplementedError",
        "<builtin>.ValueError"
    ],
    "ssl.SSLContext.wrap_bio": [
        "ssl.SSLObject._create",
        "ssl.SSLContext._encode_hostname"
    ],
    "ssl.SSLObject._create": [],
    "ssl.SSLContext.set_npn_protocols": [
        "<builtin>.bytearray",
        "<builtin>.len",
        "<builtin>.bytes"
    ],
    "ssl.SSLContext.set_servername_callback": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "ssl.SSLContext.set_alpn_protocols": [
        "<builtin>.bytearray",
        "<builtin>.len",
        "<builtin>.bytes"
    ],
    "ssl.SSLContext.minimum_version": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.maximum_version": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.options": [
        "<builtin>.super"
    ],
    "ssl.SSLContext._msg_callback": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.protocol": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.verify_flags": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.verify_mode": [
        "<builtin>.super"
    ],
    "ssl._create_unverified_context": [
        "<builtin>.TypeError",
        "ssl.SSLContext.load_default_certs",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "ssl.SSLObject.__init__": [
        "<builtin>.TypeError"
    ],
    "ssl.SSLSocket.__init__": [
        "<builtin>.TypeError"
    ],
    "ssl.SSLSocket.dup": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.read": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket._checkClosed": [],
    "ssl.SSLSocket.write": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.getpeercert": [
        "ssl.SSLSocket._check_connected",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket._check_connected": [],
    "ssl.SSLSocket.selected_npn_protocol": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.selected_alpn_protocol": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.cipher": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.shared_ciphers": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.compression": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.send": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.sendto": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.sendmsg": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.sendall": [
        "<builtin>.len",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.ValueError",
        "ssl.SSLSocket.send",
        "<builtin>.super",
        "<builtin>.memoryview"
    ],
    "ssl.SSLSocket.sendfile": [
        "<builtin>.super"
    ],
    "ssl.SSLSocket.recv": [
        "ssl.SSLSocket.read",
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.recv_into": [
        "ssl.SSLSocket.read",
        "<builtin>.len",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "ssl.SSLSocket.recvfrom": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.recvfrom_into": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.recvmsg": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.recvmsg_into": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.pending": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.shutdown": [
        "<builtin>.super",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.unwrap": [
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "ssl.SSLSocket.verify_client_post_handshake": [
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "ssl.SSLSocket._real_close": [
        "<builtin>.super"
    ],
    "ssl.SSLSocket.do_handshake": [
        "ssl.SSLSocket._check_connected"
    ],
    "ssl.SSLSocket._real_connect": [
        "ssl.SSLSocket.do_handshake",
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "ssl.SSLSocket.connect": [
        "ssl.SSLSocket._real_connect"
    ],
    "ssl.SSLSocket.connect_ex": [
        "ssl.SSLSocket._real_connect"
    ],
    "ssl.SSLSocket.accept": [
        "<builtin>.super"
    ],
    "ssl.SSLSocket.get_channel_binding": [
        "<builtin>.ValueError"
    ],
    "ssl.wrap_socket": [
        "ssl.SSLContext.wrap_socket",
        "<builtin>.ValueError"
    ],
    "calendar": [
        "calendar._localized_day",
        "calendar.LocaleHTMLCalendar",
        "<builtin>.range",
        "calendar.IllegalMonthError",
        "calendar._localized_month",
        "calendar.TextCalendar",
        "calendar._localized_day.__init__",
        "calendar.LocaleTextCalendar",
        "datetime",
        "locale",
        "calendar.main",
        "calendar.different_locale",
        "datetime.date.toordinal",
        "calendar._localized_month.__init__",
        "calendar.IllegalWeekdayError",
        "calendar.Calendar",
        "calendar.HTMLCalendar"
    ],
    "ssl.cert_time_to_seconds": [
        "calendar",
        "<builtin>.ValueError",
        "<str>.index"
    ],
    "datetime": [
        "datetime.timezone._create",
        "math",
        "datetime.date",
        "datetime.timedelta",
        "datetime._days_before_year",
        "datetime.time",
        "datetime.timezone",
        "datetime.datetime",
        "<list>.append",
        "datetime.tzinfo",
        "_datetime"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.tzinfo": [],
    "datetime.time": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.datetime": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.timezone": [
        "<builtin>.staticmethod",
        "<builtin>.object",
        "<builtin>.classmethod"
    ],
    "datetime.timezone._create": [],
    "_datetime": [],
    "calendar.IllegalMonthError": [],
    "calendar.IllegalWeekdayError": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.TextCalendar": [],
    "calendar.HTMLCalendar": [],
    "calendar.different_locale": [],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleHTMLCalendar": [],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_before_month",
        "datetime._days_before_year",
        "datetime._days_in_month"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "calendar.main": [
        "calendar.TextCalendar.formatmonth",
        "argparse.ArgumentParser.__init__",
        "calendar.TextCalendar.formatyear",
        "codecs.StreamRecoder.write",
        "calendar.HTMLCalendar.formatyearpage",
        "argparse._ActionsContainer.add_argument",
        "datetime.date.today",
        "argparse._ActionsContainer.add_argument_group",
        "argparse",
        "calendar.LocaleTextCalendar.__init__",
        "<builtin>.dict",
        "argparse.ArgumentParser.parse_args",
        "argparse.ArgumentParser.error",
        "<str>.encode",
        "calendar.LocaleHTMLCalendar.__init__"
    ],
    "calendar.LocaleTextCalendar.__init__": [
        "locale.getdefaultlocale",
        "calendar.Calendar.__init__"
    ],
    "calendar.Calendar.__init__": [],
    "calendar.TextCalendar.formatmonth": [
        "calendar.TextCalendar.formatweekheader",
        "<builtin>.max",
        "<str>.rstrip",
        "calendar.TextCalendar.formatmonthname",
        "calendar.TextCalendar.formatweek",
        "calendar.Calendar.monthdays2calendar",
        "calendar.LocaleTextCalendar.formatmonthname"
    ],
    "calendar.LocaleTextCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.different_locale.__init__": [],
    "calendar.TextCalendar.formatmonthname": [
        "<str>.center"
    ],
    "<str>.center": [],
    "calendar.TextCalendar.formatweekheader": [
        "calendar.TextCalendar.formatweekday",
        "calendar.Calendar.iterweekdays",
        "calendar.LocaleTextCalendar.formatweekday"
    ],
    "calendar.LocaleTextCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.TextCalendar.formatweekday": [],
    "calendar.Calendar.iterweekdays": [
        "<builtin>.range"
    ],
    "calendar.Calendar.monthdays2calendar": [
        "<builtin>.list",
        "calendar.Calendar.itermonthdays2",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.Calendar.itermonthdays2": [
        "<builtin>.enumerate",
        "calendar.Calendar.itermonthdays"
    ],
    "calendar.Calendar.itermonthdays": [
        "calendar.monthrange",
        "itertools.repeat",
        "<builtin>.range"
    ],
    "calendar.monthrange": [
        "calendar.isleap",
        "calendar.IllegalMonthError.__init__",
        "calendar.weekday"
    ],
    "calendar.IllegalMonthError.__init__": [],
    "calendar.weekday": [
        "datetime.date.weekday"
    ],
    "datetime.date.weekday": [
        "datetime.date.toordinal"
    ],
    "calendar.isleap": [],
    "itertools.repeat": [],
    "calendar.TextCalendar.formatweek": [
        "calendar.TextCalendar.formatday"
    ],
    "calendar.TextCalendar.formatday": [
        "<str>.center"
    ],
    "calendar.TextCalendar.formatyear": [
        "calendar.TextCalendar.formatweekheader",
        "calendar.Calendar.yeardays2calendar",
        "<builtin>.enumerate",
        "<builtin>.range",
        "<builtin>.max",
        "calendar.TextCalendar.formatmonthname",
        "<builtin>.len",
        "<list>",
        "<list>.append",
        "calendar.LocaleTextCalendar.formatmonthname",
        "<builtin>.min"
    ],
    "calendar.Calendar.yeardays2calendar": [
        "calendar.Calendar.monthdays2calendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "datetime.date.today": [
        "datetime.date.fromtimestamp",
        "datetime.datetime.fromtimestamp"
    ],
    "datetime.date.fromtimestamp": [],
    "calendar.LocaleHTMLCalendar.__init__": [
        "locale.getdefaultlocale",
        "calendar.Calendar.__init__"
    ],
    "calendar.HTMLCalendar.formatyearpage": [
        "<str>.encode",
        "<list>"
    ],
    "ssl.DER_cert_to_PEM_cert": [
        "<builtin>.range",
        "<builtin>.str",
        "<builtin>.len",
        "<list>.append",
        "base64.standard_b64encode"
    ],
    "base64.standard_b64encode": [
        "base64.b64encode"
    ],
    "base64.b64encode": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "ssl.PEM_cert_to_DER_cert": [
        "<builtin>.len",
        "base64.decodebytes",
        "<builtin>.ValueError"
    ],
    "ssl.get_server_certificate": [
        "ssl.SSLContext.wrap_socket",
        "ssl.DER_cert_to_PEM_cert",
        "socket.create_connection",
        "ssl._create_unverified_context"
    ],
    "base64._bytes_from_decode_data": [
        "<builtin>.TypeError",
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "base64.b64decode": [
        "re.fullmatch",
        "base64._bytes_from_decode_data",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "base64.standard_b64decode": [
        "base64.b64decode"
    ],
    "base64.urlsafe_b64encode": [
        "base64.b64encode"
    ],
    "base64.urlsafe_b64decode": [
        "base64._bytes_from_decode_data",
        "base64.b64decode"
    ],
    "base64.b32encode": [
        "<builtin>.range",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.memoryview"
    ],
    "base64.b32decode": [
        "<builtin>.enumerate",
        "<int>.to_bytes",
        "<builtin>.range",
        "base64._bytes_from_decode_data",
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.bytes",
        "<builtin>.bytearray"
    ],
    "<int>.to_bytes": [],
    "base64.b16decode": [
        "base64._bytes_from_decode_data",
        "re.search"
    ],
    "base64._85encode": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.memoryview"
    ],
    "base64.a85encode": [
        "<builtin>.range",
        "<builtin>.max",
        "<builtin>.len",
        "<builtin>.bytes",
        "base64._85encode"
    ],
    "base64.a85decode": [
        "<builtin>.len",
        "base64._bytes_from_decode_data",
        "<list>",
        "<builtin>.ValueError"
    ],
    "base64.b85encode": [
        "<builtin>.bytes",
        "base64._85encode"
    ],
    "base64.b85decode": [
        "<builtin>.enumerate",
        "<builtin>.range",
        "base64._bytes_from_decode_data",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "base64.encodestring": [
        "warnings",
        "base64.encodebytes",
        "warnings.warn"
    ],
    "base64.decodestring": [
        "warnings",
        "base64.decodebytes",
        "warnings.warn"
    ],
    "getopt.gnu_getopt": [
        "getopt.do_shorts",
        "getopt.do_longs",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.list"
    ],
    "asyncio.coroutines.CoroWrapper.__init__": [
        "inspect.isgenerator",
        "asyncio.format_helpers.extract_stack",
        "inspect.iscoroutine",
        "<builtin>.getattr"
    ],
    "asyncio.coroutines.CoroWrapper.__repr__": [
        "asyncio.coroutines._format_coroutine"
    ],
    "asyncio.coroutines._format_coroutine": [
        "asyncio.coroutines._format_coroutine.is_running",
        "asyncio.coroutines.iscoroutine",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "asyncio.coroutines._format_coroutine.get_name",
        "inspect.isgeneratorfunction",
        "asyncio.format_helpers._get_function_source"
    ],
    "asyncio.coroutines._format_coroutine.get_name": [
        "asyncio.format_helpers._format_callback",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "asyncio.format_helpers._format_callback": [
        "asyncio.format_helpers._format_args_and_kwargs",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.repr",
        "asyncio.format_helpers._format_callback"
    ],
    "asyncio.format_helpers._format_args_and_kwargs": [
        "<list>.extend"
    ],
    "asyncio.coroutines._format_coroutine.is_running": [],
    "asyncio.format_helpers._get_function_source": [
        "inspect.isfunction",
        "<builtin>.isinstance",
        "inspect.unwrap",
        "asyncio.format_helpers._get_function_source"
    ],
    "asyncio.coroutines.CoroWrapper.__del__": [
        "<builtin>.getattr",
        "traceback.format_list",
        "logging.Logger.error",
        "<str>.rstrip"
    ],
    "asyncio.coroutines.coroutine": [
        "warnings.warn",
        "types.coroutine",
        "inspect.iscoroutinefunction",
        "inspect.isgeneratorfunction",
        "functools.wraps"
    ],
    "asyncio.base_futures._format_callbacks": [
        "asyncio.base_futures._format_callbacks.format_cb",
        "<builtin>.len"
    ],
    "asyncio.base_futures._format_callbacks.format_cb": [
        "asyncio.format_helpers._format_callback_source"
    ],
    "asyncio.format_helpers._format_callback_source": [
        "asyncio.format_helpers._format_callback",
        "asyncio.format_helpers._get_function_source"
    ],
    "asyncio.base_futures._future_repr_info": [
        "<list>.append",
        "reprlib.Repr.repr"
    ],
    "reprlib.Repr.repr": [
        "reprlib.Repr.repr1"
    ],
    "reprlib.Repr.repr1": [
        "<builtin>.getattr",
        "<str>.split",
        "<builtin>.hasattr",
        "reprlib.Repr.repr_instance",
        "<builtin>.type"
    ],
    "reprlib.Repr.repr_instance": [
        "<builtin>.max",
        "<builtin>.id",
        "<builtin>.len"
    ],
    "reprlib.Repr._repr_iterable": [
        "reprlib.Repr.repr1",
        "itertools.islice",
        "<builtin>.len"
    ],
    "reprlib.Repr.repr_tuple": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_list": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_array": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_set": [
        "reprlib.Repr._repr_iterable",
        "reprlib._possibly_sorted"
    ],
    "reprlib._possibly_sorted": [
        "<builtin>.sorted",
        "<builtin>.list"
    ],
    "reprlib.Repr.repr_frozenset": [
        "reprlib.Repr._repr_iterable",
        "reprlib._possibly_sorted"
    ],
    "reprlib.Repr.repr_deque": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_dict": [
        "itertools.islice",
        "reprlib.Repr.repr1",
        "<builtin>.len",
        "reprlib._possibly_sorted",
        "<list>.append"
    ],
    "reprlib.Repr.repr_str": [
        "<builtin>.max",
        "<builtin>.len"
    ],
    "reprlib.Repr.repr_int": [
        "<builtin>.max",
        "<builtin>.len"
    ],
    "reprlib.recursive_repr.decorating_function.wrapper": [
        "collections.OrderedDict.__repr__",
        "functools.partial.__repr__",
        "collections.ChainMap.__repr__",
        "_thread.get_ident",
        "<builtin>.id"
    ],
    "asyncio.events.Handle._repr_info": [
        "<list>.append"
    ],
    "asyncio.events.Handle.__repr__": [
        "asyncio.events.Handle._repr_info",
        "asyncio.events.TimerHandle._repr_info"
    ],
    "asyncio.events.Handle._run": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.format_helpers._format_callback_source"
    ],
    "asyncio.events.TimerHandle._repr_info": [
        "<builtin>.super"
    ],
    "asyncio.events.TimerHandle.__hash__": [
        "<builtin>.hash"
    ],
    "asyncio.events.TimerHandle.__le__": [
        "asyncio.events.TimerHandle.__eq__"
    ],
    "asyncio.events.TimerHandle.__eq__": [
        "<builtin>.isinstance"
    ],
    "asyncio.events.TimerHandle.__ge__": [
        "asyncio.events.TimerHandle.__eq__"
    ],
    "asyncio.events.TimerHandle.__ne__": [
        "asyncio.events.TimerHandle.__eq__"
    ],
    "asyncio.events.TimerHandle.cancel": [
        "<builtin>.super",
        "asyncio.base_events.BaseEventLoop._timer_handle_cancelled"
    ],
    "asyncio.base_events.BaseEventLoop._timer_handle_cancelled": [],
    "asyncio.events.AbstractServer.__aexit__": [
        "asyncio.events.AbstractServer.wait_closed",
        "asyncio.events.AbstractServer.close"
    ],
    "asyncio.events.AbstractServer.close": [],
    "asyncio.events.AbstractServer.wait_closed": [],
    "asyncio.events.AbstractEventLoop.call_soon": [
        "asyncio.events.AbstractEventLoop.call_later",
        "asyncio.base_events.BaseEventLoop.call_later"
    ],
    "asyncio.events.AbstractEventLoop.call_later": [],
    "asyncio.events.BaseDefaultEventLoopPolicy.get_event_loop": [
        "asyncio.events.BaseDefaultEventLoopPolicy.new_event_loop",
        "threading.current_thread",
        "<builtin>.isinstance",
        "asyncio.events.BaseDefaultEventLoopPolicy.set_event_loop",
        "<builtin>.RuntimeError"
    ],
    "asyncio.events.BaseDefaultEventLoopPolicy.new_event_loop": [],
    "asyncio.events.BaseDefaultEventLoopPolicy.set_event_loop": [
        "<builtin>.isinstance"
    ],
    "asyncio.events.set_event_loop_policy": [
        "<builtin>.isinstance"
    ],
    "asyncio.events.get_child_watcher": [
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.events.set_child_watcher": [
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.exceptions.IncompleteReadError.__init__": [
        "<builtin>.super",
        "<builtin>.len"
    ],
    "asyncio.exceptions.IncompleteReadError.__reduce__": [
        "<builtin>.type"
    ],
    "asyncio.exceptions.LimitOverrunError.__init__": [
        "<builtin>.super"
    ],
    "asyncio.exceptions.LimitOverrunError.__reduce__": [
        "<builtin>.type"
    ],
    "asyncio.futures.Future.__repr__": [
        "asyncio.base_futures._future_repr_info",
        "asyncio.windows_events._OverlappedFuture._repr_info",
        "asyncio.tasks.Task._repr_info",
        "asyncio.windows_events._BaseWaitHandleFuture._repr_info"
    ],
    "asyncio.tasks.Task._repr_info": [
        "asyncio.base_tasks._task_repr_info"
    ],
    "asyncio.base_tasks._task_repr_info": [
        "<list>.insert",
        "asyncio.coroutines._format_coroutine",
        "asyncio.base_futures._future_repr_info"
    ],
    "asyncio.futures.Future.__del__": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler"
    ],
    "asyncio.futures.Future.get_loop": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.futures.Future.cancel": [
        "asyncio.futures.Future.__schedule_callbacks"
    ],
    "asyncio.futures.Future.remove_done_callback": [
        "<builtin>.len"
    ],
    "asyncio.futures.Future.set_exception": [
        "<builtin>.TypeError",
        "asyncio.futures.Future.__schedule_callbacks",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "asyncio.futures.Future.__await__": [
        "asyncio.futures.Future.done",
        "<builtin>.RuntimeError",
        "asyncio.futures.Future.result"
    ],
    "asyncio.futures._convert_future_exc": [
        "<builtin>.type"
    ],
    "asyncio.futures._set_concurrent_future_state": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures._convert_future_exc",
        "asyncio.futures.Future.cancel"
    ],
    "asyncio.futures._copy_future_state": [
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.cancel",
        "asyncio.futures._convert_future_exc",
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.futures._chain_future._set_state": [
        "asyncio.base_futures.isfuture",
        "asyncio.futures._set_concurrent_future_state",
        "asyncio.futures._copy_future_state"
    ],
    "asyncio.futures._chain_future._call_set_state": [
        "asyncio.futures.Future.cancelled",
        "asyncio.futures._chain_future._set_state"
    ],
    "asyncio.protocols._feed_data_to_buffered_proto": [
        "<builtin>.RuntimeError",
        "<builtin>.len"
    ],
    "asyncio.sslproto._SSLPipe.do_handshake": [
        "ssl.SSLContext.wrap_bio",
        "<builtin>.RuntimeError",
        "asyncio.sslproto._SSLPipe.feed_ssldata",
        "<builtin>.len"
    ],
    "asyncio.sslproto._SSLPipe.feed_ssldata": [
        "asyncio.sslproto.SSLProtocol._finalize",
        "<builtin>.getattr",
        "<list>.append",
        "asyncio.sslproto.SSLProtocol._on_handshake_complete"
    ],
    "asyncio.sslproto._SSLPipe.shutdown": [
        "<builtin>.RuntimeError",
        "asyncio.sslproto._SSLPipe.feed_ssldata"
    ],
    "asyncio.sslproto._SSLPipe.feed_eof": [
        "asyncio.sslproto._SSLPipe.feed_ssldata"
    ],
    "asyncio.sslproto._SSLPipe.feed_appdata": [
        "<builtin>.memoryview",
        "<builtin>.getattr",
        "<list>.append",
        "<builtin>.len"
    ],
    "asyncio.sslproto._SSLProtocolTransport.get_extra_info": [
        "asyncio.sslproto.SSLProtocol._get_extra_info"
    ],
    "asyncio.sslproto.SSLProtocol._get_extra_info": [],
    "asyncio.sslproto._SSLProtocolTransport.set_protocol": [
        "asyncio.sslproto.SSLProtocol._set_app_protocol"
    ],
    "asyncio.sslproto._SSLProtocolTransport.close": [
        "asyncio.sslproto.SSLProtocol._start_shutdown"
    ],
    "asyncio.sslproto.SSLProtocol._start_shutdown": [
        "asyncio.sslproto.SSLProtocol._write_appdata",
        "asyncio.sslproto.SSLProtocol._abort"
    ],
    "asyncio.sslproto.SSLProtocol._write_appdata": [
        "asyncio.sslproto.SSLProtocol._process_write_backlog",
        "<builtin>.len"
    ],
    "asyncio.sslproto.SSLProtocol._process_write_backlog": [
        "asyncio.sslproto._SSLPipe.feed_appdata",
        "<builtin>.range",
        "asyncio.sslproto._SSLPipe.shutdown",
        "<builtin>.len",
        "asyncio.sslproto._SSLPipe.do_handshake",
        "asyncio.sslproto.SSLProtocol._on_handshake_complete",
        "asyncio.sslproto.SSLProtocol._fatal_error"
    ],
    "asyncio.sslproto.SSLProtocol._fatal_error": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "<builtin>.isinstance",
        "logging.Logger.debug"
    ],
    "asyncio.sslproto.SSLProtocol._on_handshake_complete": [
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.base_events.BaseEventLoop.time",
        "asyncio.events.TimerHandle.cancel",
        "asyncio.streams.StreamReaderProtocol.connection_made",
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.call_soon",
        "<builtin>.isinstance",
        "asyncio.sslproto.SSLProtocol._wakeup_waiter",
        "asyncio.sslproto.SSLProtocol._fatal_error"
    ],
    "asyncio.sslproto.SSLProtocol._wakeup_waiter": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.sslproto.SSLProtocol._abort": [],
    "asyncio.sslproto._SSLProtocolTransport.__del__": [
        "asyncio.sslproto._SSLProtocolTransport.close",
        "warnings.warn"
    ],
    "asyncio.sslproto._SSLProtocolTransport.is_reading": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.sslproto._SSLProtocolTransport.write": [
        "<builtin>.TypeError",
        "asyncio.sslproto.SSLProtocol._write_appdata",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "asyncio.sslproto._SSLProtocolTransport.abort": [
        "asyncio.sslproto.SSLProtocol._abort"
    ],
    "asyncio.sslproto.SSLProtocol.connection_made": [
        "asyncio.sslproto.SSLProtocol._start_handshake",
        "asyncio.sslproto._SSLPipe.__init__"
    ],
    "asyncio.sslproto._SSLPipe.__init__": [],
    "asyncio.sslproto.SSLProtocol._start_handshake": [
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.base_events.BaseEventLoop.time",
        "logging.Logger.debug",
        "asyncio.sslproto.SSLProtocol._process_write_backlog",
        "asyncio.base_events.BaseEventLoop.call_later"
    ],
    "asyncio.sslproto.SSLProtocol.connection_lost": [
        "asyncio.events.TimerHandle.cancel",
        "asyncio.base_events.BaseEventLoop.call_soon",
        "<builtin>.getattr",
        "asyncio.sslproto.SSLProtocol._wakeup_waiter"
    ],
    "asyncio.sslproto.SSLProtocol.data_received": [
        "asyncio.sslproto.SSLProtocol._start_shutdown",
        "asyncio.sslproto._SSLPipe.feed_ssldata",
        "asyncio.streams.StreamReaderProtocol.data_received",
        "asyncio.sslproto.SSLProtocol._fatal_error",
        "asyncio.protocols._feed_data_to_buffered_proto"
    ],
    "asyncio.sslproto.SSLProtocol.eof_received": [
        "logging.Logger.warning",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.streams.StreamReaderProtocol.eof_received",
        "logging.Logger.debug",
        "asyncio.sslproto.SSLProtocol._wakeup_waiter"
    ],
    "asyncio.sslproto.SSLProtocol._check_handshake_timeout": [
        "asyncio.sslproto.SSLProtocol._fatal_error",
        "<builtin>.ConnectionAbortedError"
    ],
    "<builtin>.ConnectionAbortedError": [],
    "asyncio.transports.BaseTransport.get_extra_info": [
        "<map>.get"
    ],
    "asyncio.transports.WriteTransport.writelines": [
        "asyncio.transports.WriteTransport.write"
    ],
    "asyncio.transports.WriteTransport.write": [],
    "asyncio.transports._FlowControlMixin.__init__": [
        "asyncio.transports._FlowControlMixin._set_write_buffer_limits",
        "<builtin>.super"
    ],
    "asyncio.transports._FlowControlMixin._set_write_buffer_limits": [
        "<builtin>.ValueError"
    ],
    "asyncio.transports._FlowControlMixin._maybe_pause_protocol": [
        "asyncio.transports._FlowControlMixin.get_write_buffer_size",
        "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size",
        "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size",
        "asyncio.selector_events._SelectorDatagramTransport.get_write_buffer_size",
        "asyncio.selector_events._SelectorTransport.get_write_buffer_size"
    ],
    "asyncio.transports._FlowControlMixin.get_write_buffer_size": [],
    "asyncio.transports._FlowControlMixin._maybe_resume_protocol": [
        "asyncio.transports._FlowControlMixin.get_write_buffer_size",
        "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size",
        "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size",
        "asyncio.selector_events._SelectorDatagramTransport.get_write_buffer_size",
        "asyncio.selector_events._SelectorTransport.get_write_buffer_size"
    ],
    "asyncio.transports._FlowControlMixin.set_write_buffer_limits": [
        "asyncio.transports._FlowControlMixin._set_write_buffer_limits",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol"
    ],
    "typing._type_repr": [
        "<builtin>.isinstance",
        "<builtin>.repr"
    ],
    "typing._subs_tvars": [
        "<builtin>.enumerate",
        "typing._GenericAlias.copy_with",
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.tuple",
        "typing._subs_tvars"
    ],
    "typing._check_generic": [
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "typing._remove_dups_flatten": [
        "<list>.extend",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.tuple"
    ],
    "typing._Final.__init_subclass__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__new__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.super",
        "<builtin>.len"
    ],
    "typing._SpecialForm.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing._SpecialForm.__hash__": [
        "<builtin>.hash"
    ],
    "typing._SpecialForm.__call__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__instancecheck__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__subclasscheck__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__getitem__": [
        "<builtin>.TypeError",
        "<builtin>.len",
        "typing._type_check",
        "<builtin>.isinstance",
        "typing._GenericAlias.__init__",
        "<builtin>.tuple",
        "typing._remove_dups_flatten",
        "<builtin>.type"
    ],
    "typing._tp_cache.inner": [
        "typing.Generic.__class_getitem__",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "pathlib._WildcardSelector.__init__",
        "pathlib._PreciseSelector.__init__",
        "functools.singledispatchmethod.__get__._method",
        "typing._GenericAlias.__getitem__",
        "functools.singledispatch.wrapper",
        "typing._SpecialForm.__getitem__",
        "<list>",
        "functools._lru_cache_wrapper.wrapper",
        "<map>",
        "typing._GenericAlias.__init__",
        "pathlib._RecursiveWildcardSelector.__init__"
    ],
    "functools.singledispatchmethod.__get__._method": [
        "functools.singledispatch.dispatch",
        "<map>"
    ],
    "functools.singledispatch.dispatch": [
        "_py_abc.get_cache_token",
        "_abc.get_cache_token",
        "functools._find_impl"
    ],
    "functools.singledispatch.wrapper": [
        "<builtin>.TypeError",
        "functools.singledispatch.dispatch",
        "<map>"
    ],
    "typing.Generic.__class_getitem__": [
        "<builtin>.TypeError",
        "typing._check_generic",
        "<builtin>.set",
        "<builtin>.len",
        "typing._type_check",
        "<builtin>.isinstance",
        "typing._GenericAlias.__init__",
        "<builtin>.tuple",
        "<builtin>.all"
    ],
    "typing._GenericAlias.__getitem__": [
        "<builtin>.TypeError",
        "typing._check_generic",
        "typing._type_check",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "typing._subs_tvars"
    ],
    "typing._GenericAlias.copy_with": [
        "typing._GenericAlias.__init__"
    ],
    "typing._VariadicGenericAlias.__getitem_inner__": [
        "<builtin>.super",
        "<builtin>.len",
        "typing._GenericAlias.copy_with",
        "typing._type_check",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "typing.ForwardRef.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing.ForwardRef.__hash__": [
        "<builtin>.hash"
    ],
    "typing._GenericAlias.__repr__": [
        "typing._type_repr",
        "<builtin>.len"
    ],
    "typing._GenericAlias.__eq__": [
        "<builtin>.isinstance",
        "<builtin>.frozenset"
    ],
    "typing._GenericAlias.__hash__": [
        "<builtin>.frozenset",
        "<builtin>.hash"
    ],
    "typing._GenericAlias.__call__": [
        "<builtin>.TypeError",
        "typing.TypeVar.__init__",
        "typing._SpecialForm.__init__",
        "collections.Counter.__init__",
        "collections.OrderedDict.__init__",
        "collections.ChainMap.__init__",
        "_collections.defaultdict",
        "_collections.deque"
    ],
    "_collections.defaultdict": [],
    "typing._GenericAlias.__mro_entries__": [
        "<builtin>.any",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.issubclass",
        "<builtin>.tuple"
    ],
    "typing._GenericAlias.__getattr__": [
        "<builtin>.AttributeError",
        "<builtin>.getattr",
        "typing._is_dunder"
    ],
    "typing._is_dunder": [],
    "typing._GenericAlias.__setattr__": [
        "<builtin>.setattr",
        "<builtin>.super",
        "typing._is_dunder"
    ],
    "typing._GenericAlias.__instancecheck__": [
        "typing._GenericAlias.__subclasscheck__",
        "<builtin>.type"
    ],
    "typing._GenericAlias.__subclasscheck__": [
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.isinstance"
    ],
    "typing._GenericAlias.__reduce__": [
        "<builtin>.globals",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.tuple"
    ],
    "typing._VariadicGenericAlias.__getitem__": [
        "<builtin>.TypeError",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "typing.Generic.__new__": [
        "<builtin>.TypeError",
        "<builtin>.super"
    ],
    "typing.Generic.__init_subclass__": [
        "<builtin>.TypeError",
        "<builtin>.str",
        "typing._collect_type_vars",
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.super",
        "<builtin>.tuple"
    ],
    "typing._get_protocol_attrs": [
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "typing._is_callable_members_only": [
        "<builtin>.getattr",
        "<builtin>.callable",
        "<builtin>.all",
        "typing._get_protocol_attrs"
    ],
    "typing._no_init": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "typing._ProtocolMeta.__instancecheck__": [
        "typing._is_callable_members_only",
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "typing._get_protocol_attrs",
        "<builtin>.issubclass",
        "<builtin>.super",
        "<builtin>.all"
    ],
    "typing.Protocol.__init_subclass__": [
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.any",
        "<builtin>.super"
    ],
    "typing.runtime_checkable": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "typing.get_origin": [
        "<builtin>.isinstance"
    ],
    "typing.get_args": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "typing.get_origin"
    ],
    "typing.no_type_check": [
        "<builtin>.isinstance",
        "typing.no_type_check"
    ],
    "typing.no_type_check_decorator": [
        "functools.wraps"
    ],
    "typing._overload_dummy": [
        "<builtin>.NotImplementedError"
    ],
    "typing._make_nmtuple": [
        "<builtin>.dict",
        "typing._type_check",
        "collections.namedtuple"
    ],
    "typing.NamedTupleMeta.__new__": [
        "<builtin>.TypeError",
        "<builtin>.setattr",
        "<map>.keys",
        "typing._make_nmtuple",
        "<builtin>.dict",
        "<list>.append",
        "<builtin>.super",
        "<builtin>.tuple",
        "<builtin>.AttributeError"
    ],
    "typing.NamedTuple.__new__": [
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.len",
        "typing._make_nmtuple",
        "warnings"
    ],
    "typing._dict_new": [
        "<builtin>.dict"
    ],
    "typing._typeddict_new": [
        "<builtin>.TypeError",
        "<builtin>.dict"
    ],
    "typing._check_fails": [
        "<builtin>.TypeError"
    ],
    "typing._TypedDictMeta.__new__": [
        "typing._type_check",
        "<builtin>.hasattr",
        "<builtin>.super"
    ],
    "asyncio.locks._ContextManagerMixin.__enter__": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.locks._ContextManagerMixin.__acquire_ctx": [
        "asyncio.locks._ContextManager.__init__"
    ],
    "asyncio.locks._ContextManagerMixin.__await__": [
        "asyncio.locks._ContextManagerMixin.__acquire_ctx",
        "warnings.warn"
    ],
    "asyncio.locks.Lock.__init__": [
        "asyncio.events.get_event_loop",
        "warnings.warn"
    ],
    "asyncio.locks.Lock.__repr__": [
        "<builtin>.super",
        "<builtin>.len"
    ],
    "asyncio.locks.Lock.acquire": [
        "_collections.deque",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.all",
        "asyncio.locks.Lock._wake_up_first"
    ],
    "asyncio.locks.Lock._wake_up_first": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "asyncio.locks.Lock.release": [
        "asyncio.locks.Lock._wake_up_first",
        "<builtin>.RuntimeError"
    ],
    "asyncio.locks.Event.__repr__": [
        "<builtin>.super",
        "<builtin>.len"
    ],
    "asyncio.locks.Condition.__init__": [
        "warnings.warn",
        "asyncio.locks.Lock.__init__",
        "_collections.deque",
        "asyncio.events.get_event_loop",
        "<builtin>.ValueError"
    ],
    "asyncio.locks.Condition.__repr__": [
        "asyncio.locks.Lock.locked",
        "<builtin>.super",
        "<builtin>.len"
    ],
    "asyncio.locks.Lock.locked": [],
    "asyncio.locks.Condition.wait": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.locks.Lock.locked",
        "<builtin>.RuntimeError",
        "asyncio.locks.Lock.release"
    ],
    "asyncio.locks.Condition.wait_for": [
        "asyncio.locks.Condition.wait"
    ],
    "asyncio.locks.Condition.notify": [
        "asyncio.locks.Lock.locked",
        "<builtin>.RuntimeError"
    ],
    "asyncio.locks.Condition.notify_all": [
        "<builtin>.len",
        "asyncio.locks.Condition.notify"
    ],
    "asyncio.locks.Semaphore.__init__": [
        "_collections.deque",
        "asyncio.events.get_event_loop",
        "<builtin>.ValueError",
        "warnings.warn"
    ],
    "asyncio.locks.Semaphore.__repr__": [
        "asyncio.locks.Semaphore.locked",
        "<builtin>.super",
        "<builtin>.len"
    ],
    "asyncio.locks.Semaphore.locked": [],
    "asyncio.locks.Semaphore.acquire": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.locks.Semaphore._wake_up_next",
        "asyncio.futures.Future.cancelled",
        "asyncio.futures.Future.cancel"
    ],
    "asyncio.locks.Semaphore._wake_up_next": [],
    "asyncio.locks.Semaphore.release": [
        "asyncio.locks.Semaphore._wake_up_next"
    ],
    "asyncio.locks.BoundedSemaphore.__init__": [
        "<builtin>.super",
        "warnings.warn"
    ],
    "asyncio.locks.BoundedSemaphore.release": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "asyncio.tasks.current_task": [
        "<map>.get",
        "asyncio.events.get_running_loop"
    ],
    "asyncio.tasks._all_tasks_compat": [
        "asyncio.events.get_event_loop",
        "<builtin>.list",
        "asyncio.futures._get_loop"
    ],
    "asyncio.tasks.Task.current_task": [
        "asyncio.events.get_event_loop",
        "asyncio.tasks.Task.current_task",
        "warnings.warn"
    ],
    "asyncio.tasks.Task.all_tasks": [
        "asyncio.tasks._all_tasks_compat",
        "warnings.warn"
    ],
    "asyncio.tasks.Task.__del__": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "<builtin>.super"
    ],
    "asyncio.tasks.Task.set_name": [
        "<builtin>.str"
    ],
    "asyncio.tasks.Task.set_result": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.tasks.Task.set_exception": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.tasks.Task.get_stack": [
        "asyncio.base_tasks._task_get_stack"
    ],
    "asyncio.base_tasks._task_get_stack": [
        "<list>.reverse",
        "<builtin>.hasattr",
        "<list>.append"
    ],
    "asyncio.tasks.Task.print_stack": [
        "asyncio.base_tasks._task_print_stack"
    ],
    "asyncio.base_tasks._task_print_stack": [
        "traceback.format_exception_only",
        "asyncio.tasks.Task.get_stack",
        "<builtin>.set",
        "<builtin>.print",
        "<list>.append",
        "linecache.getline",
        "linecache.checkcache",
        "traceback.print_list"
    ],
    "asyncio.tasks.Task.cancel": [
        "asyncio.futures.Future.done"
    ],
    "asyncio.tasks.Task.__step": [
        "<builtin>.super",
        "asyncio.futures.Future.done",
        "<builtin>.isinstance",
        "asyncio.tasks._enter_task"
    ],
    "asyncio.tasks._enter_task": [
        "<map>.get",
        "<builtin>.RuntimeError"
    ],
    "asyncio.tasks.Task.__wakeup": [
        "asyncio.tasks.Task.__step"
    ],
    "asyncio.tasks.create_task": [
        "asyncio.events.get_running_loop",
        "asyncio.base_events.BaseEventLoop.create_task",
        "asyncio.tasks._set_task_name"
    ],
    "asyncio.tasks.wait_for": [
        "asyncio.events.get_running_loop",
        "asyncio.futures.Future.done",
        "warnings.warn",
        "asyncio.futures.Future.remove_done_callback",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.result",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.ensure_future",
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.tasks._cancel_and_wait",
        "asyncio.tasks.Task.cancel"
    ],
    "asyncio.tasks._cancel_and_wait": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.Task.cancel"
    ],
    "asyncio.tasks.as_completed": [
        "asyncio.base_futures.isfuture",
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.range",
        "<builtin>.set",
        "asyncio.coroutines.iscoroutine",
        "<builtin>.len",
        "asyncio.queues.Queue.__init__",
        "asyncio.tasks.ensure_future",
        "asyncio.events.get_event_loop",
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.tasks.as_completed._wait_for_one",
        "asyncio.queues",
        "<builtin>.type"
    ],
    "asyncio.tasks.as_completed._wait_for_one": [
        "asyncio.queues.Queue.get"
    ],
    "asyncio.tasks._GatheringFuture.cancel": [
        "asyncio.futures.Future.done"
    ],
    "asyncio.tasks.shield": [
        "asyncio.futures.Future.done",
        "warnings.warn",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.tasks.ensure_future",
        "asyncio.futures._get_loop"
    ],
    "asyncio.tasks.run_coroutine_threadsafe": [
        "<builtin>.TypeError",
        "asyncio.coroutines.iscoroutine"
    ],
    "asyncio.tasks._leave_task": [
        "<map>.get",
        "<builtin>.RuntimeError"
    ],
    "asyncio.tasks._unregister_task": [
        "_weakrefset.WeakSet.discard"
    ],
    "asyncio.tasks.gather._done_callback": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.done",
        "<list>.append"
    ],
    "asyncio.trsock.TransportSocket._na": [
        "warnings.warn"
    ],
    "asyncio.trsock.TransportSocket.__repr__": [
        "asyncio.trsock.TransportSocket.getsockname",
        "asyncio.trsock.TransportSocket.getpeername",
        "asyncio.trsock.TransportSocket.fileno"
    ],
    "asyncio.trsock.TransportSocket.fileno": [],
    "asyncio.trsock.TransportSocket.getsockname": [],
    "asyncio.trsock.TransportSocket.getpeername": [],
    "asyncio.trsock.TransportSocket.__getstate__": [
        "<builtin>.TypeError"
    ],
    "asyncio.trsock.TransportSocket.accept": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.connect": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.connect_ex": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.bind": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.ioctl": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.listen": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.makefile": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendfile": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.close": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.detach": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendmsg_afalg": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendmsg": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendto": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.send": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.sendall": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.set_inheritable": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.share": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recv_into": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recvfrom_into": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recvmsg_into": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recvmsg": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recvfrom": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.recv": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.settimeout": [
        "<builtin>.ValueError"
    ],
    "asyncio.trsock.TransportSocket.setblocking": [
        "<builtin>.ValueError"
    ],
    "asyncio.trsock.TransportSocket.__enter__": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.trsock.TransportSocket.__exit__": [
        "asyncio.trsock.TransportSocket._na"
    ],
    "asyncio.runners.run": [
        "asyncio.events._get_running_loop",
        "asyncio.events.new_event_loop",
        "asyncio.events.set_event_loop",
        "asyncio.coroutines.iscoroutine",
        "<builtin>.RuntimeError",
        "<builtin>.ValueError"
    ],
    "asyncio.runners._cancel_all_tasks": [
        "asyncio.tasks.all_tasks",
        "asyncio.tasks.gather"
    ],
    "asyncio.queues.Queue.__repr__": [
        "asyncio.queues.Queue._format",
        "<builtin>.id",
        "<builtin>.type"
    ],
    "asyncio.queues.Queue._format": [
        "<builtin>.list",
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "asyncio.queues.Queue.__str__": [
        "asyncio.queues.Queue._format",
        "<builtin>.type"
    ],
    "asyncio.queues.Queue.put": [
        "asyncio.futures.Future.cancel",
        "asyncio.queues.Queue.put_nowait",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.queues.Queue.full",
        "asyncio.queues.Queue._wakeup_next",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.queues.PriorityQueue._put": [
        "heapq.heappush"
    ],
    "asyncio.queues.PriorityQueue._get": [
        "heapq.heappop"
    ],
    "asyncio.queues.LifoQueue._put": [
        "<list>.append"
    ],
    "asyncio.queues.LifoQueue._get": [
        "<list>.pop"
    ],
    "asyncio.streams.open_connection": [
        "asyncio.base_events.BaseEventLoop.create_connection",
        "warnings.warn",
        "asyncio.streams.StreamReaderProtocol.__init__",
        "asyncio.streams.StreamReader.__init__",
        "asyncio.events.get_event_loop",
        "asyncio.streams.StreamWriter.__init__"
    ],
    "asyncio.streams.StreamReader.__init__": [
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.format_helpers.extract_stack",
        "<builtin>.bytearray",
        "asyncio.events.get_event_loop",
        "<builtin>.ValueError"
    ],
    "asyncio.streams.StreamReaderProtocol.__init__": [
        "_weakref.ref",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.super"
    ],
    "asyncio.streams.open_connection.<lambda1>": [],
    "asyncio.streams.StreamWriter.__init__": [
        "asyncio.futures.Future.set_result",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.isinstance"
    ],
    "asyncio.streams.start_server": [
        "asyncio.events.get_event_loop",
        "asyncio.base_events.BaseEventLoop.create_server",
        "warnings.warn"
    ],
    "asyncio.streams.open_unix_connection": [
        "warnings.warn",
        "asyncio.streams.StreamReaderProtocol.__init__",
        "asyncio.streams.StreamReader.__init__",
        "asyncio.events.AbstractEventLoop.create_unix_connection",
        "asyncio.events.get_event_loop",
        "asyncio.streams.StreamWriter.__init__"
    ],
    "asyncio.events.AbstractEventLoop.create_unix_connection": [],
    "asyncio.streams.start_unix_server": [
        "asyncio.events.get_event_loop",
        "asyncio.events.AbstractEventLoop.create_unix_server",
        "warnings.warn"
    ],
    "asyncio.events.AbstractEventLoop.create_unix_server": [],
    "asyncio.streams.FlowControlMixin.__init__": [
        "asyncio.events.get_event_loop"
    ],
    "asyncio.streams.FlowControlMixin.pause_writing": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.streams.FlowControlMixin.resume_writing": [
        "asyncio.futures.Future.set_result",
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "asyncio.futures.Future.done"
    ],
    "asyncio.streams.FlowControlMixin._drain_helper": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.cancelled",
        "<builtin>.ConnectionResetError"
    ],
    "<builtin>.ConnectionResetError": [],
    "asyncio.streams.StreamReaderProtocol.connection_made": [
        "asyncio.sslproto._SSLProtocolTransport.get_extra_info",
        "asyncio.base_events.BaseEventLoop.create_task",
        "asyncio.streams.StreamWriter.__init__",
        "asyncio.coroutines.iscoroutine",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.sslproto._SSLProtocolTransport.abort"
    ],
    "asyncio.streams.StreamReaderProtocol.connection_lost": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.done",
        "<builtin>.super"
    ],
    "asyncio.streams.StreamReaderProtocol.__del__": [
        "asyncio.futures.Future.exception",
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.streams.StreamWriter.__repr__": [
        "<list>.append"
    ],
    "asyncio.streams.StreamWriter.wait_closed": [
        "asyncio.subprocess.SubprocessStreamProtocol._get_close_waiter",
        "asyncio.streams.StreamReaderProtocol._get_close_waiter"
    ],
    "asyncio.streams.StreamReaderProtocol._get_close_waiter": [],
    "asyncio.streams.StreamWriter.drain": [
        "asyncio.streams.FlowControlMixin._drain_helper",
        "asyncio.streams.StreamReader.exception",
        "asyncio.sslproto._SSLProtocolTransport.is_closing",
        "asyncio.tasks.sleep"
    ],
    "asyncio.streams.StreamReader.exception": [],
    "asyncio.streams.StreamReader.__repr__": [
        "<list>.append"
    ],
    "asyncio.streams.StreamReader._maybe_resume_transport": [
        "<builtin>.len"
    ],
    "asyncio.streams.StreamReader.feed_eof": [
        "asyncio.streams.StreamReader._wakeup_waiter"
    ],
    "asyncio.streams.StreamReader._wakeup_waiter": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.streams.StreamReader.feed_data": [
        "asyncio.streams.StreamReader._wakeup_waiter",
        "<builtin>.len"
    ],
    "asyncio.streams.StreamReader._wait_for_data": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.RuntimeError"
    ],
    "asyncio.streams.StreamReader.readline": [
        "<builtin>.ValueError",
        "asyncio.streams.StreamReader._maybe_resume_transport",
        "<builtin>.len",
        "asyncio.streams.StreamReader.readuntil"
    ],
    "asyncio.streams.StreamReader.readuntil": [
        "<builtin>.len",
        "<builtin>.bytes",
        "asyncio.exceptions.IncompleteReadError.__init__",
        "asyncio.streams.StreamReader._wait_for_data",
        "asyncio.exceptions.LimitOverrunError.__init__",
        "asyncio.streams.StreamReader._maybe_resume_transport",
        "<builtin>.ValueError"
    ],
    "asyncio.streams.StreamReader.read": [
        "asyncio.streams.StreamReader.read",
        "<list>.append",
        "<builtin>.bytes",
        "asyncio.streams.StreamReader._wait_for_data",
        "asyncio.streams.StreamReader._maybe_resume_transport"
    ],
    "asyncio.streams.StreamReader.readexactly": [
        "<builtin>.len",
        "<builtin>.bytes",
        "asyncio.exceptions.IncompleteReadError.__init__",
        "asyncio.streams.StreamReader._wait_for_data",
        "asyncio.streams.StreamReader._maybe_resume_transport",
        "<builtin>.ValueError"
    ],
    "asyncio.streams.StreamReader.__anext__": [
        "asyncio.streams.StreamReader.readline"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.__init__": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.super"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.__repr__": [
        "<list>.append"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.connection_made": [
        "asyncio.streams.StreamReader.__init__",
        "asyncio.streams.StreamReader.set_transport",
        "<list>.append",
        "asyncio.streams.StreamWriter.__init__"
    ],
    "asyncio.streams.StreamReader.set_transport": [],
    "asyncio.subprocess.SubprocessStreamProtocol.pipe_data_received": [
        "asyncio.streams.StreamReader.feed_data"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.pipe_connection_lost": [
        "<list>.remove",
        "asyncio.futures.Future.set_exception",
        "asyncio.streams.FlowControlMixin.connection_lost",
        "asyncio.futures.Future.set_result",
        "asyncio.streams.StreamWriter.close",
        "asyncio.streams.StreamReader.set_exception",
        "asyncio.subprocess.SubprocessStreamProtocol._maybe_close_transport",
        "asyncio.streams.StreamReader.feed_eof"
    ],
    "asyncio.streams.StreamWriter.close": [
        "asyncio.sslproto._SSLProtocolTransport.close"
    ],
    "asyncio.streams.FlowControlMixin.connection_lost": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.done"
    ],
    "asyncio.streams.StreamReader.set_exception": [
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.cancelled"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol._maybe_close_transport": [
        "<builtin>.len"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol.process_exited": [
        "asyncio.subprocess.SubprocessStreamProtocol._maybe_close_transport"
    ],
    "asyncio.subprocess.Process._feed_stdin": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug",
        "<builtin>.len"
    ],
    "asyncio.subprocess.Process._read_stream": [
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.get_debug"
    ],
    "asyncio.subprocess.Process.communicate": [
        "asyncio.subprocess.Process._feed_stdin",
        "asyncio.subprocess.Process._read_stream",
        "asyncio.subprocess.Process.wait",
        "asyncio.subprocess.Process._noop",
        "asyncio.tasks.gather"
    ],
    "asyncio.subprocess.Process._noop": [],
    "asyncio.subprocess.Process.wait": [],
    "asyncio.subprocess.create_subprocess_shell": [
        "asyncio.events.get_event_loop",
        "asyncio.base_events.BaseEventLoop.subprocess_shell",
        "asyncio.subprocess.Process.__init__",
        "warnings.warn"
    ],
    "asyncio.subprocess.create_subprocess_shell.<lambda1>": [
        "asyncio.subprocess.SubprocessStreamProtocol.__init__"
    ],
    "asyncio.subprocess.Process.__init__": [],
    "asyncio.subprocess.create_subprocess_exec": [
        "asyncio.base_events.BaseEventLoop.subprocess_exec",
        "asyncio.events.get_event_loop",
        "asyncio.subprocess.Process.__init__",
        "warnings.warn"
    ],
    "asyncio.subprocess.create_subprocess_exec.<lambda1>": [
        "asyncio.subprocess.SubprocessStreamProtocol.__init__"
    ],
    "asyncio.windows_events._OverlappedFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture._repr_info": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture._cancel_overlapped": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler"
    ],
    "asyncio.windows_events._OverlappedFuture.cancel": [
        "<builtin>.super",
        "asyncio.windows_events._OverlappedFuture._cancel_overlapped"
    ],
    "asyncio.windows_events._OverlappedFuture.set_exception": [
        "<builtin>.super",
        "asyncio.windows_events._OverlappedFuture._cancel_overlapped"
    ],
    "asyncio.windows_events._OverlappedFuture.set_result": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._repr_info": [
        "asyncio.windows_events._BaseWaitHandleFuture._poll",
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._poll": [],
    "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb": [],
    "asyncio.windows_events._BaseWaitHandleFuture.cancel": [
        "asyncio.windows_events._WaitHandleFuture._unregister_wait",
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.set_exception": [
        "asyncio.windows_events._WaitHandleFuture._unregister_wait",
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.set_result": [
        "asyncio.windows_events._WaitHandleFuture._unregister_wait",
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._WaitCancelFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitCancelFuture.cancel": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.windows_events._WaitCancelFuture.set_result": [
        "<builtin>.super",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb"
    ],
    "asyncio.windows_events._WaitCancelFuture.set_exception": [
        "<builtin>.super",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb"
    ],
    "asyncio.windows_events._WaitHandleFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb": [
        "<builtin>.super",
        "asyncio.windows_events.IocpProactor._unregister"
    ],
    "asyncio.windows_events._WaitHandleFuture._unregister_wait": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.windows_events.IocpProactor._wait_cancel"
    ],
    "asyncio.windows_events.PipeServer.__init__": [
        "_weakrefset.WeakSet.__init__",
        "asyncio.windows_events.PipeServer._server_pipe_handle"
    ],
    "asyncio.windows_events.PipeServer._server_pipe_handle": [
        "_weakrefset.WeakSet.add",
        "asyncio.windows_utils.PipeHandle.__init__",
        "asyncio.windows_events.PipeServer.closed"
    ],
    "asyncio.windows_events.PipeServer.closed": [],
    "asyncio.windows_utils.PipeHandle.__init__": [],
    "asyncio.windows_events.PipeServer._get_unconnected_pipe": [
        "asyncio.windows_events.PipeServer._server_pipe_handle"
    ],
    "asyncio.windows_events.PipeServer.close": [
        "_weakrefset.WeakSet.__iter__",
        "_weakrefset.WeakSet.clear"
    ],
    "asyncio.windows_events.ProactorEventLoop.__init__": [
        "asyncio.windows_events.IocpProactor.__init__",
        "<builtin>.super"
    ],
    "asyncio.windows_events.IocpProactor.__init__": [
        "_weakrefset.WeakSet.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop.run_forever": [
        "asyncio.base_events.BaseEventLoop.call_soon",
        "<builtin>.super"
    ],
    "asyncio.windows_events.ProactorEventLoop.create_pipe_connection": [
        "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport": [],
    "asyncio.windows_events.ProactorEventLoop.start_serving_pipe": [
        "asyncio.base_events.BaseEventLoop.call_soon",
        "asyncio.windows_events.PipeServer.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport": [
        "asyncio.base_subprocess.BaseSubprocessTransport._wait",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.base_subprocess.BaseSubprocessTransport.close"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport.close": [
        "logging.Logger.warning",
        "<map>.values",
        "subprocess.Popen.poll",
        "subprocess.Popen.kill"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._wait": [
        "<list>.append"
    ],
    "asyncio.windows_events.IocpProactor._check_closed": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.windows_events.IocpProactor.__repr__": [
        "<list>.append"
    ],
    "asyncio.windows_events.IocpProactor.select": [
        "asyncio.windows_events.IocpProactor._poll"
    ],
    "asyncio.windows_events.IocpProactor._poll": [
        "<list>.clear",
        "<list>.append",
        "<builtin>.ValueError",
        "<map>.pop"
    ],
    "asyncio.windows_events.IocpProactor.recv": [
        "<builtin>.isinstance",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._result",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor._register_with_iocp": [
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.windows_events.IocpProactor._result": [],
    "asyncio.windows_events.IocpProactor._register": [
        "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile",
        "asyncio.windows_events._OverlappedFuture.set_exception",
        "asyncio.windows_events.IocpProactor._check_closed",
        "asyncio.windows_events.IocpProactor.recv.finish_recv",
        "asyncio.windows_events._OverlappedFuture.__init__",
        "asyncio.windows_events.IocpProactor.sendto.finish_send",
        "asyncio.windows_events.IocpProactor.accept.finish_accept",
        "asyncio.windows_events.IocpProactor.connect.finish_connect",
        "asyncio.windows_events.IocpProactor.recv_into.finish_recv",
        "asyncio.windows_events.IocpProactor.recvfrom.finish_recv",
        "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe",
        "asyncio.windows_events.IocpProactor.send.finish_send"
    ],
    "asyncio.windows_events.IocpProactor.recv.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.recv_into": [
        "<builtin>.isinstance",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._result",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.recv_into.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.recvfrom": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._result"
    ],
    "asyncio.windows_events.IocpProactor.recvfrom.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.sendto": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp"
    ],
    "asyncio.windows_events.IocpProactor.sendto.finish_send": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.send": [
        "<builtin>.isinstance",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.send.finish_send": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.accept": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.tasks.ensure_future",
        "asyncio.windows_events.IocpProactor._get_accept_socket",
        "asyncio.windows_events.IocpProactor.accept.accept_coro"
    ],
    "asyncio.windows_events.IocpProactor._get_accept_socket": [
        "socket.socket.__init__"
    ],
    "asyncio.windows_events.IocpProactor.accept.finish_accept": [],
    "asyncio.windows_events.IocpProactor.accept.accept_coro": [
        "socket.socket.close"
    ],
    "asyncio.windows_events.IocpProactor.connect": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp"
    ],
    "asyncio.windows_events.IocpProactor.connect.finish_connect": [],
    "asyncio.windows_events.IocpProactor.sendfile": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp"
    ],
    "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.accept_pipe": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._result"
    ],
    "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe": [],
    "asyncio.windows_events.IocpProactor.connect_pipe": [
        "asyncio.windows_utils.PipeHandle.__init__",
        "<builtin>.min",
        "asyncio.tasks.sleep"
    ],
    "asyncio.windows_events.IocpProactor.wait_for_handle": [
        "asyncio.windows_events.IocpProactor._wait_for_handle"
    ],
    "asyncio.windows_events.IocpProactor._wait_for_handle": [
        "asyncio.windows_events._WaitHandleFuture.__init__",
        "asyncio.windows_events.IocpProactor._check_closed",
        "asyncio.windows_events._WaitCancelFuture.__init__"
    ],
    "asyncio.windows_events.IocpProactor._wait_cancel": [
        "asyncio.windows_events.IocpProactor._wait_for_handle"
    ],
    "asyncio.windows_events.IocpProactor._unregister": [
        "asyncio.windows_events.IocpProactor._check_closed",
        "<list>.append"
    ],
    "asyncio.windows_events.IocpProactor._stop_serving": [
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.windows_events.IocpProactor.close": [
        "asyncio.windows_events.IocpProactor._poll",
        "<builtin>.list",
        "logging.Logger.debug",
        "<builtin>.isinstance",
        "<map>.items"
    ],
    "asyncio.windows_events.IocpProactor.__del__": [
        "asyncio.windows_events.IocpProactor.close"
    ],
    "asyncio.windows_events._WindowsSubprocessTransport._start": [
        "<builtin>.int",
        "asyncio.windows_utils.Popen.__init__"
    ],
    "asyncio.windows_utils.Popen.__init__": [
        "asyncio.windows_utils.pipe",
        "<builtin>.super"
    ],
    "asyncio.windows_utils.pipe": [
        "tempfile.mktemp",
        "<builtin>.next"
    ],
    "tempfile.mktemp": [
        "tempfile._exists",
        "<builtin>.FileExistsError",
        "ntpath.join",
        "<builtin>.range",
        "tempfile._get_candidate_names",
        "posixpath.join",
        "tempfile.gettempdir",
        "<builtin>.next"
    ],
    "tempfile.gettempdir": [
        "tempfile._get_default_tempdir"
    ],
    "tempfile._get_default_tempdir": [
        "posixpath.abspath",
        "<builtin>.range",
        "ntpath.join",
        "<builtin>.FileNotFoundError",
        "_io.open",
        "posixpath.join",
        "tempfile._candidate_tempdir_list",
        "genericpath.isdir",
        "ntpath.abspath",
        "<builtin>.next",
        "nt._isdir"
    ],
    "tempfile._candidate_tempdir_list": [
        "<list>.extend",
        "<list>.append",
        "os.getenv"
    ],
    "os.getenv": [],
    "tempfile._get_candidate_names": [],
    "tempfile._exists": [],
    "<builtin>.FileExistsError": [],
    "asyncio.base_subprocess.BaseSubprocessTransport.__init__": [
        "asyncio.base_subprocess.BaseSubprocessTransport._connect_pipes",
        "asyncio.windows_events._WindowsSubprocessTransport._start",
        "asyncio.base_subprocess.BaseSubprocessTransport._start",
        "_collections.deque",
        "logging.Logger.debug",
        "<builtin>.isinstance",
        "<builtin>.super",
        "asyncio.base_subprocess.BaseSubprocessTransport.close"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._start": [],
    "asyncio.base_subprocess.BaseSubprocessTransport._connect_pipes": [],
    "asyncio.base_subprocess.BaseSubprocessTransport.__repr__": [
        "<map>.get",
        "<list>.append"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport.__del__": [
        "asyncio.base_subprocess.BaseSubprocessTransport.close",
        "warnings.warn"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._check_proc": [
        "<builtin>.ProcessLookupError"
    ],
    "<builtin>.ProcessLookupError": [],
    "asyncio.base_subprocess.BaseSubprocessTransport.send_signal": [
        "asyncio.base_subprocess.BaseSubprocessTransport._check_proc",
        "subprocess.Popen.send_signal"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport.terminate": [
        "asyncio.base_subprocess.BaseSubprocessTransport._check_proc",
        "subprocess.Popen.terminate"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport.kill": [
        "asyncio.base_subprocess.BaseSubprocessTransport._check_proc",
        "subprocess.Popen.kill"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._pipe_connection_lost": [
        "asyncio.base_subprocess.BaseSubprocessTransport._try_finish",
        "asyncio.base_subprocess.BaseSubprocessTransport._call"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._call": [],
    "asyncio.base_subprocess.BaseSubprocessTransport._try_finish": [
        "<map>.values",
        "<builtin>.all",
        "asyncio.base_subprocess.BaseSubprocessTransport._call"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._pipe_data_received": [
        "asyncio.base_subprocess.BaseSubprocessTransport._call"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport._process_exited": [
        "logging.Logger.info",
        "asyncio.base_subprocess.BaseSubprocessTransport._try_finish",
        "asyncio.base_subprocess.BaseSubprocessTransport._call"
    ],
    "asyncio.proactor_events._set_socket_extra": [
        "asyncio.trsock.TransportSocket.__init__",
        "logging.Logger.warning"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.__init__": [
        "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol",
        "asyncio.proactor_events._ProactorDatagramTransport._set_extra",
        "asyncio.proactor_events._ProactorBasePipeTransport._set_extra",
        "asyncio.proactor_events._ProactorSocketTransport._set_extra",
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._set_extra": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.__repr__": [
        "<list>.append"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.__del__": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "warnings.warn"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.close": [],
    "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error": [
        "logging.Logger.debug",
        "<builtin>.isinstance"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size": [
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.pause_reading": [
        "logging.Logger.debug"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.resume_reading": [
        "logging.Logger.debug"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._eof_received": [
        "logging.Logger.debug",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._data_received": [
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "asyncio.proactor_events._ProactorReadPipeTransport._eof_received",
        "asyncio.protocols._feed_data_to_buffered_proto",
        "<builtin>.isinstance"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._loop_reading": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close",
        "logging.Logger.debug",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._force_close": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.write": [
        "<builtin>.TypeError",
        "logging.Logger.warning",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.RuntimeError",
        "<builtin>.type"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing": [
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "asyncio.transports._FlowControlMixin._maybe_resume_protocol",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "<builtin>.len",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.write_eof": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.abort": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._make_empty_waiter": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.proactor_events._ProactorWritePipeTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorWritePipeTransport._pipe_closed": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close",
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "<builtin>.BrokenPipeError"
    ],
    "<builtin>.BrokenPipeError": [],
    "asyncio.proactor_events._ProactorDatagramTransport.__init__": [
        "_collections.deque",
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._set_extra": [
        "asyncio.proactor_events._set_socket_extra"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.abort": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.sendto": [
        "<builtin>.TypeError",
        "logging.Logger.warning",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "asyncio.proactor_events._ProactorDatagramTransport._loop_writing",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._loop_writing": [
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error"
    ],
    "asyncio.proactor_events._ProactorSocketTransport.__init__": [
        "asyncio.base_events._set_nodelay",
        "<builtin>.super"
    ],
    "asyncio.base_events._set_nodelay": [],
    "asyncio.proactor_events._ProactorSocketTransport._set_extra": [
        "asyncio.proactor_events._set_socket_extra"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop.__init__": [
        "threading.main_thread",
        "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe",
        "logging.Logger.debug",
        "threading.current_thread",
        "<builtin>.super"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe": [
        "socket.socketpair"
    ],
    "threading.main_thread": [],
    "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport": [
        "asyncio.proactor_events._ProactorSocketTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport": [
        "asyncio.proactor_events._ProactorSocketTransport.__init__",
        "asyncio.sslproto.SSLProtocol.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_datagram_transport": [
        "asyncio.proactor_events._ProactorDatagramTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_read_pipe_transport": [
        "asyncio.proactor_events._ProactorReadPipeTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_write_pipe_transport": [
        "asyncio.proactor_events._ProactorWritePipeTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop.close": [
        "threading.main_thread",
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.base_events.BaseEventLoop.is_running",
        "threading.current_thread",
        "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures",
        "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe",
        "<builtin>.RuntimeError",
        "<builtin>.super"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures": [
        "<map>.values",
        "<map>.clear"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe": [
        "socket.socket.close"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._sock_sendfile_native": [
        "<builtin>.min"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._sendfile_native": [
        "asyncio.base_events.BaseEventLoop.sock_sendfile"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._loop_self_reading": [
        "asyncio.base_events.BaseEventLoop.call_exception_handler"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._write_to_self": [
        "logging.Logger.debug"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._start_serving": [
        "asyncio.base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._stop_serving": [
        "<map>.pop"
    ],
    "asyncio.selector_events._check_ssl_socket": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.__init__": [
        "selectors.KqueueSelector.__init__",
        "logging.Logger.debug",
        "selectors.SelectSelector.__init__",
        "weakref.WeakValueDictionary.__init__",
        "<builtin>.super",
        "asyncio.selector_events.BaseSelectorEventLoop._make_self_pipe"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._make_self_pipe": [
        "socket.socketpair",
        "asyncio.selector_events.BaseSelectorEventLoop._add_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._add_reader": [
        "selectors._PollLikeSelector.register",
        "selectors.KqueueSelector.register",
        "selectors.BaseSelector.get_key",
        "asyncio.events.Handle.__init__",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "selectors.SelectSelector.register"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._make_socket_transport": [
        "asyncio.selector_events._SelectorSocketTransport.__init__"
    ],
    "asyncio.selector_events._SelectorSocketTransport.__init__": [
        "asyncio.base_events._set_nodelay",
        "<builtin>.super"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._make_ssl_transport": [
        "asyncio.selector_events._SelectorSocketTransport.__init__",
        "asyncio.sslproto.SSLProtocol.__init__"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._make_datagram_transport": [
        "asyncio.selector_events._SelectorDatagramTransport.__init__"
    ],
    "asyncio.selector_events._SelectorDatagramTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.close": [
        "selectors.DevpollSelector.close",
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.base_events.BaseEventLoop.is_running",
        "selectors._BaseSelectorImpl.close",
        "selectors.KqueueSelector.close",
        "asyncio.selector_events.BaseSelectorEventLoop._close_self_pipe",
        "<builtin>.RuntimeError",
        "<builtin>.super",
        "selectors.EpollSelector.close"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._close_self_pipe": [
        "socket.socket.close",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._remove_reader": [
        "selectors.BaseSelector.get_key",
        "asyncio.base_events.BaseEventLoop.is_closed"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._read_from_self": [
        "asyncio.selector_events.BaseSelectorEventLoop._process_self_data"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._process_self_data": [],
    "asyncio.selector_events.BaseSelectorEventLoop._write_to_self": [
        "logging.Logger.debug"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._start_serving": [
        "asyncio.selector_events.BaseSelectorEventLoop._add_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._accept_connection": [
        "<builtin>.range",
        "asyncio.trsock.TransportSocket.__init__",
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.base_events.BaseEventLoop.call_later",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._accept_connection2": [
        "asyncio.selector_events._SelectorTransport.close",
        "asyncio.selector_events.BaseSelectorEventLoop._make_socket_transport",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.selector_events.BaseSelectorEventLoop._make_ssl_transport",
        "asyncio.sslproto._SSLProtocolTransport.close"
    ],
    "asyncio.selector_events._SelectorTransport.close": [],
    "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport": [
        "<builtin>.int",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._add_writer": [
        "selectors._PollLikeSelector.register",
        "selectors.KqueueSelector.register",
        "selectors.BaseSelector.get_key",
        "asyncio.events.Handle.__init__",
        "asyncio.base_events.BaseEventLoop._check_closed",
        "selectors.SelectSelector.register"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._remove_writer": [
        "selectors.BaseSelector.get_key",
        "asyncio.base_events.BaseEventLoop.is_closed"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.add_reader": [
        "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._add_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.remove_reader": [
        "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.add_writer": [
        "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._add_writer"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.remove_writer": [
        "asyncio.selector_events.BaseSelectorEventLoop._ensure_fd_no_transport",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_writer"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_recv": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.selector_events._check_ssl_socket",
        "asyncio.selector_events.BaseSelectorEventLoop.add_reader",
        "<builtin>.ValueError"
    ],
    "selectors._BaseSelectorImpl.get_map": [],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_read_done": [
        "asyncio.selector_events.BaseSelectorEventLoop.remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_recv_into": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.selector_events._check_ssl_socket",
        "asyncio.selector_events.BaseSelectorEventLoop.add_reader",
        "<builtin>.ValueError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_sendall": [
        "asyncio.selector_events.BaseSelectorEventLoop.add_writer",
        "<builtin>.len",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.memoryview",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.selector_events._check_ssl_socket",
        "<builtin>.ValueError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_sendall": [
        "<builtin>.len"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_connect": [
        "asyncio.base_events.BaseEventLoop.create_future",
        "asyncio.selector_events.BaseSelectorEventLoop._sock_connect",
        "<builtin>.hasattr",
        "asyncio.selector_events._check_ssl_socket",
        "<builtin>.ValueError",
        "asyncio.base_events.BaseEventLoop._ensure_resolved"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_connect": [
        "asyncio.selector_events.BaseSelectorEventLoop.add_writer",
        "asyncio.futures.Future.add_done_callback",
        "asyncio.futures.Future.set_exception"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_write_done": [
        "asyncio.selector_events.BaseSelectorEventLoop.remove_writer"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_connect_cb": [
        "<builtin>.OSError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop.sock_accept": [
        "asyncio.selector_events.BaseSelectorEventLoop._sock_accept",
        "asyncio.selector_events._check_ssl_socket",
        "asyncio.base_events.BaseEventLoop.create_future",
        "<builtin>.ValueError"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sock_accept": [
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.done",
        "asyncio.selector_events.BaseSelectorEventLoop.add_reader",
        "asyncio.selector_events.BaseSelectorEventLoop.remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._sendfile_native": [
        "asyncio.base_events.BaseEventLoop.sock_sendfile"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._process_events": [
        "asyncio.selector_events.BaseSelectorEventLoop._remove_writer",
        "asyncio.base_events.BaseEventLoop._add_callback",
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop._stop_serving": [
        "asyncio.selector_events.BaseSelectorEventLoop._remove_reader"
    ],
    "asyncio.selector_events._SelectorTransport.__init__": [
        "asyncio.selector_events._SelectorSocketTransport.set_protocol",
        "asyncio.trsock.TransportSocket.__init__",
        "asyncio.selector_events._SelectorTransport.set_protocol",
        "_collections.deque",
        "<builtin>.super"
    ],
    "asyncio.selector_events._SelectorSocketTransport.set_protocol": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "asyncio.selector_events._SelectorTransport.set_protocol": [],
    "asyncio.selector_events._SelectorTransport.__repr__": [
        "asyncio.selector_events._test_selector_event",
        "asyncio.selector_events._SelectorDatagramTransport.get_write_buffer_size",
        "<list>.append",
        "asyncio.selector_events._SelectorTransport.get_write_buffer_size"
    ],
    "asyncio.selector_events._test_selector_event": [],
    "asyncio.selector_events._SelectorTransport.get_write_buffer_size": [
        "<builtin>.len"
    ],
    "asyncio.selector_events._SelectorTransport.abort": [
        "asyncio.selector_events._SelectorTransport._force_close"
    ],
    "asyncio.selector_events._SelectorTransport._force_close": [],
    "asyncio.selector_events._SelectorTransport.__del__": [
        "warnings.warn"
    ],
    "asyncio.selector_events._SelectorTransport._fatal_error": [
        "logging.Logger.debug",
        "asyncio.selector_events._SelectorTransport._force_close",
        "<builtin>.isinstance"
    ],
    "asyncio.selector_events._SelectorSocketTransport.pause_reading": [
        "logging.Logger.debug"
    ],
    "asyncio.selector_events._SelectorSocketTransport.resume_reading": [
        "asyncio.selector_events._SelectorTransport._add_reader",
        "logging.Logger.debug"
    ],
    "asyncio.selector_events._SelectorTransport._add_reader": [],
    "asyncio.selector_events._SelectorSocketTransport._read_ready": [
        "asyncio.selector_events._SelectorSocketTransport._read_ready__get_buffer",
        "asyncio.selector_events._SelectorSocketTransport._read_ready__data_received"
    ],
    "asyncio.selector_events._SelectorSocketTransport._read_ready__get_buffer": [
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "<builtin>.RuntimeError",
        "asyncio.selector_events._SelectorSocketTransport._read_ready__on_eof",
        "<builtin>.len"
    ],
    "asyncio.selector_events._SelectorSocketTransport._read_ready__on_eof": [
        "logging.Logger.debug",
        "asyncio.selector_events._SelectorTransport.close",
        "asyncio.selector_events._SelectorTransport._fatal_error"
    ],
    "asyncio.selector_events._SelectorSocketTransport._read_ready__data_received": [
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "asyncio.selector_events._SelectorSocketTransport._read_ready__on_eof"
    ],
    "asyncio.selector_events._SelectorSocketTransport.write": [
        "<builtin>.TypeError",
        "logging.Logger.warning",
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.isinstance",
        "<builtin>.RuntimeError",
        "<builtin>.type"
    ],
    "asyncio.selector_events._SelectorSocketTransport._write_ready": [
        "asyncio.selector_events._SelectorTransport._fatal_error"
    ],
    "asyncio.selector_events._SelectorSocketTransport._call_connection_lost": [
        "<builtin>.ConnectionError",
        "<builtin>.super"
    ],
    "asyncio.selector_events._SelectorSocketTransport._make_empty_waiter": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.selector_events._SelectorDatagramTransport.get_write_buffer_size": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "asyncio.selector_events._SelectorDatagramTransport._read_ready": [
        "asyncio.selector_events._SelectorTransport._fatal_error"
    ],
    "asyncio.selector_events._SelectorDatagramTransport.sendto": [
        "<builtin>.TypeError",
        "logging.Logger.warning",
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "asyncio.transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "asyncio.selector_events._SelectorDatagramTransport._sendto_ready": [
        "asyncio.selector_events._SelectorTransport._fatal_error",
        "asyncio.selector_events._SelectorTransport._call_connection_lost",
        "asyncio.transports._FlowControlMixin._maybe_resume_protocol"
    ],
    "asyncio.selector_events._SelectorTransport._call_connection_lost": [],
    "asyncio.windows_utils.PipeHandle.fileno": [
        "<builtin>.ValueError"
    ],
    "asyncio.windows_utils.PipeHandle.__del__": [
        "asyncio.windows_utils.PipeHandle.close",
        "warnings.warn"
    ],
    "asyncio.windows_utils.PipeHandle.close": [],
    "asyncio.windows_utils.PipeHandle.__exit__": [
        "asyncio.windows_utils.PipeHandle.close"
    ],
    "tempfile._infer_return_type": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "tempfile._sanitize_params": [
        "tempfile._infer_return_type",
        "tempfile.gettempdirb",
        "os._fscodec.fsencode",
        "tempfile.gettempdir",
        "os._fscodec.fsdecode"
    ],
    "tempfile.gettempdirb": [
        "tempfile.gettempdir",
        "os._fscodec.fsdecode",
        "os._fscodec.fsencode"
    ],
    "tempfile._RandomNameSequence.rng": [
        "random.Random.__init__",
        "<builtin>.getattr"
    ],
    "tempfile._RandomNameSequence.__next__": [
        "<builtin>.range"
    ],
    "tempfile._mkstemp_inner": [
        "<builtin>.FileExistsError",
        "posixpath.abspath",
        "ntpath.join",
        "<builtin>.range",
        "tempfile._get_candidate_names",
        "posixpath.join",
        "<builtin>.map",
        "genericpath.isdir",
        "ntpath.abspath",
        "<builtin>.next",
        "nt._isdir"
    ],
    "tempfile.gettempprefixb": [
        "os._fscodec.fsdecode",
        "tempfile.gettempprefix",
        "os._fscodec.fsencode"
    ],
    "tempfile.gettempprefix": [],
    "tempfile.mkstemp": [
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner"
    ],
    "tempfile.mkdtemp": [
        "<builtin>.FileExistsError",
        "<builtin>.range",
        "tempfile._get_candidate_names",
        "ntpath.join",
        "tempfile._sanitize_params",
        "posixpath.join",
        "<builtin>.map",
        "genericpath.isdir",
        "<builtin>.next",
        "nt._isdir"
    ],
    "tempfile._TemporaryFileCloser.__del__": [
        "tempfile._TemporaryFileCloser.close"
    ],
    "tempfile._TemporaryFileCloser.close": [],
    "tempfile._TemporaryFileWrapper.__init__": [
        "tempfile._TemporaryFileCloser.__init__"
    ],
    "tempfile._TemporaryFileCloser.__init__": [],
    "tempfile._TemporaryFileWrapper.__getattr__": [
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "functools.wraps"
    ],
    "tempfile._TemporaryFileWrapper.__exit__": [
        "tempfile._TemporaryFileWrapper.close"
    ],
    "tempfile._TemporaryFileWrapper.close": [
        "tempfile._TemporaryFileCloser.close"
    ],
    "tempfile.NamedTemporaryFile": [
        "tempfile._TemporaryFileWrapper.__init__",
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner",
        "_io.open"
    ],
    "tempfile.TemporaryFile": [
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner",
        "_io.open"
    ],
    "tempfile.SpooledTemporaryFile.__init__": [
        "_io.TextIOWrapper",
        "_io.BytesIO"
    ],
    "tempfile.SpooledTemporaryFile._check": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.rollover": [
        "tempfile.TemporaryFile",
        "<builtin>.hasattr"
    ],
    "tempfile.SpooledTemporaryFile.__enter__": [
        "<builtin>.ValueError"
    ],
    "tempfile.SpooledTemporaryFile.fileno": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.truncate": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.write": [
        "tempfile.SpooledTemporaryFile._check"
    ],
    "tempfile.SpooledTemporaryFile.writelines": [
        "tempfile.SpooledTemporaryFile._check"
    ],
    "tempfile.TemporaryDirectory.__init__": [
        "weakref.finalize.__init__",
        "tempfile.mkdtemp"
    ],
    "tempfile.TemporaryDirectory._rmtree": [
        "shutil.rmtree"
    ],
    "tempfile.TemporaryDirectory._cleanup": [
        "tempfile.TemporaryDirectory._rmtree",
        "warnings.warn"
    ],
    "tempfile.TemporaryDirectory.__exit__": [
        "tempfile.TemporaryDirectory.cleanup"
    ],
    "tempfile.TemporaryDirectory.cleanup": [
        "tempfile.TemporaryDirectory._rmtree",
        "weakref.finalize.detach"
    ],
    "random.Random.getstate": [
        "<builtin>.super"
    ],
    "random.Random.setstate": [
        "<builtin>.super",
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "random.Random.__getstate__": [
        "random.Random.getstate",
        "random.SystemRandom._notimplemented"
    ],
    "random.Random.__setstate__": [
        "random.Random.setstate",
        "random.SystemRandom._notimplemented"
    ],
    "random.Random.__reduce__": [
        "random.Random.getstate",
        "random.SystemRandom._notimplemented"
    ],
    "random.Random.randrange": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.ValueError"
    ],
    "random.Random._randbelow_with_getrandbits": [
        "random.SystemRandom.getrandbits"
    ],
    "random.Random.randint": [
        "random.Random.randrange"
    ],
    "random.Random._randbelow_without_getrandbits": [
        "<builtin>.int",
        "random.SystemRandom.random",
        "<builtin>.ValueError",
        "warnings.warn"
    ],
    "random.Random.choice": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.len",
        "<builtin>.IndexError"
    ],
    "random.Random.shuffle": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.reversed",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "random.Random.sample": [
        "<builtin>.TypeError",
        "<builtin>.range",
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "random.Random.choices": [
        "<builtin>.TypeError",
        "bisect.bisect_right",
        "itertools.accumulate",
        "<builtin>.len",
        "itertools.repeat",
        "random.SystemRandom.random",
        "<builtin>.list",
        "<builtin>.ValueError"
    ],
    "itertools.accumulate": [],
    "bisect.bisect_right": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "random.SystemRandom.getrandbits": [
        "<builtin>.ValueError"
    ],
    "random.SystemRandom._notimplemented": [
        "<builtin>.NotImplementedError"
    ],
    "bisect.insort_right": [
        "bisect.bisect_right",
        "<list>.insert"
    ],
    "bisect.insort_left": [
        "bisect.bisect_left"
    ],
    "bisect.bisect_left": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "hashlib.__py_new": [
        "hashlib.__get_builtin_constructor",
        "<map>"
    ],
    "hashlib.__hash_new": [
        "hashlib.__get_builtin_constructor",
        "<map>"
    ],
    "hashlib.pbkdf2_hmac": [
        "<builtin>.TypeError",
        "<int>.to_bytes",
        "hashlib.pbkdf2_hmac.prf",
        "hashlib.__hash_new",
        "<map>.update",
        "<builtin>.range",
        "<builtin>.getattr",
        "<builtin>.len",
        "<builtin>.memoryview",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.bytes",
        "hashlib.__py_new"
    ],
    "hashlib.pbkdf2_hmac.prf": [
        "<map>.update",
        "<map>.copy"
    ],
    "unittest.case._Outcome.__init__": [
        "<builtin>.hasattr"
    ],
    "unittest.case._Outcome.testPartExecutor": [
        "<list>.append"
    ],
    "unittest.case.addModuleCleanup": [
        "<list>.append"
    ],
    "unittest.case.doModuleCleanups": [
        "<list>.pop",
        "<list>.append",
        "<list>"
    ],
    "unittest.case.skip": [
        "unittest.case.skip.decorator",
        "<builtin>.isinstance"
    ],
    "unittest.case.skip.decorator": [
        "functools.wraps",
        "<builtin>.isinstance"
    ],
    "unittest.case.skipIf": [
        "unittest.case.skip"
    ],
    "unittest.case.skipUnless": [
        "unittest.case.skip"
    ],
    "unittest.case._is_subtype": [
        "unittest.case._is_subtype",
        "<builtin>.issubclass",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "unittest.case._AssertRaisesBaseContext.__init__": [
        "re.compile",
        "unittest.case._BaseTestCaseContext.__init__"
    ],
    "unittest.case._BaseTestCaseContext.__init__": [],
    "unittest.case._AssertRaisesBaseContext.handle": [
        "<builtin>.TypeError",
        "unittest.case._is_subtype",
        "<builtin>.str",
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "unittest.case._AssertRaisesContext.__exit__": [
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "<builtin>.issubclass",
        "<builtin>.str",
        "traceback.clear_frames"
    ],
    "traceback.clear_frames": [],
    "unittest.case._BaseTestCaseContext._raiseFailure": [
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case._AssertWarnsContext.__enter__": [
        "warnings.catch_warnings.__init__",
        "warnings.simplefilter",
        "<builtin>.getattr",
        "warnings.catch_warnings.__enter__"
    ],
    "unittest.case._AssertWarnsContext.__exit__": [
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "warnings.catch_warnings.__exit__",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "unittest.case._CapturingHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "unittest.case._CapturingHandler.emit": [
        "logging.Handler.format"
    ],
    "unittest.case._AssertLogsContext.__init__": [
        "<map>.get",
        "unittest.case._BaseTestCaseContext.__init__"
    ],
    "unittest.case._AssertLogsContext.__enter__": [
        "logging.getLogger",
        "logging.Formatter.__init__",
        "logging.Handler.setFormatter",
        "<builtin>.isinstance",
        "unittest.case._CapturingHandler.__init__",
        "logging.Logger.setLevel"
    ],
    "unittest.case._AssertLogsContext.__exit__": [
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "logging.getLevelName",
        "<builtin>.len",
        "logging.Logger.setLevel"
    ],
    "unittest.case._OrderedChainMap.__iter__": [
        "<builtin>.set"
    ],
    "unittest.case.TestCase.defaultTestResult": [
        "unittest.result.TestResult.__init__"
    ],
    "unittest.result.TestResult.__init__": [],
    "unittest.case.TestCase.shortDescription": [
        "<str>.strip",
        "<str>.split"
    ],
    "unittest.case.TestCase.id": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase.__eq__": [
        "<builtin>.type"
    ],
    "unittest.case.TestCase.__hash__": [
        "<builtin>.hash",
        "<builtin>.type"
    ],
    "unittest.case.TestCase.__str__": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase.__repr__": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase._addSkip": [
        "unittest.result.TestResult.addSuccess",
        "<builtin>.getattr",
        "warnings.warn"
    ],
    "unittest.case.TestCase.subTest": [
        "unittest.case._SubTest.__init__",
        "unittest.case._Outcome.testPartExecutor",
        "collections.ChainMap.new_child"
    ],
    "unittest.case._SubTest.__init__": [
        "<builtin>.super"
    ],
    "unittest.case.TestCase._feedErrorsToResult": [
        "unittest.result.TestResult.addSubTest",
        "unittest.result.TestResult.addFailure",
        "unittest.result.TestResult.addError",
        "<builtin>.isinstance",
        "<builtin>.issubclass"
    ],
    "unittest.case.TestCase._addExpectedFailure": [
        "unittest.result.TestResult.addSuccess",
        "warnings.warn"
    ],
    "unittest.case.TestCase._addUnexpectedSuccess": [
        "unittest.result.TestResult.addFailure",
        "warnings.warn"
    ],
    "unittest.case.TestCase._callSetUp": [
        "doctest.DocTestCase.setUp",
        "doctest.SkipDocTestCase.setUp",
        "unittest.case.TestCase.setUp"
    ],
    "unittest.case.TestCase._callTearDown": [
        "doctest.DocTestCase.tearDown",
        "unittest.case.TestCase.tearDown"
    ],
    "unittest.case.TestCase.run": [
        "<builtin>.getattr",
        "unittest.case.TestCase._feedErrorsToResult",
        "unittest.case.TestCase._addExpectedFailure",
        "unittest.case.TestCase.defaultTestResult",
        "unittest.result.TestResult.startTest",
        "unittest.case._Outcome.__init__",
        "unittest.case._Outcome.testPartExecutor",
        "unittest.case.TestCase.doCleanups",
        "unittest.case.TestCase._addSkip",
        "unittest.case.TestCase._addUnexpectedSuccess",
        "unittest.result.TestResult.addSuccess"
    ],
    "unittest.result.TestResult.addSuccess": [],
    "unittest.case.TestCase.doCleanups": [
        "<list>.pop",
        "unittest.case._Outcome.__init__"
    ],
    "unittest.case.TestCase.doClassCleanups": [
        "<list>.pop",
        "<list>.append",
        "<list>"
    ],
    "unittest.case.TestCase.__call__": [
        "unittest.case.TestCase.run",
        "unittest.async_case.IsolatedAsyncioTestCase.run"
    ],
    "unittest.case.TestCase.debug": [
        "doctest.SkipDocTestCase.setUp",
        "unittest.case.TestCase.setUp",
        "<builtin>.getattr",
        "doctest.DocTestCase.tearDown",
        "<list>",
        "doctest.DocTestCase.setUp",
        "<list>.pop",
        "unittest.case.TestCase.tearDown"
    ],
    "unittest.case.TestCase.assertFalse": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase._formatMessage": [
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase.assertTrue": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase.assertRaises": [
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertWarns": [
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertLogs": [
        "unittest.case._AssertLogsContext.__init__"
    ],
    "unittest.case.TestCase._getAssertEqualityFunc": [
        "<map>.get",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "unittest.case.TestCase._baseAssertEqual": [
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertEqual": [
        "<map>",
        "unittest.case.TestCase._baseAssertEqual",
        "unittest.case.TestCase._getAssertEqualityFunc"
    ],
    "unittest.case.TestCase.assertNotEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase.assertAlmostEqual": [
        "<builtin>.TypeError",
        "<builtin>.abs",
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.round"
    ],
    "unittest.case.TestCase.assertNotAlmostEqual": [
        "<builtin>.TypeError",
        "<builtin>.abs",
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.round"
    ],
    "unittest.case.TestCase.assertSequenceEqual": [
        "<str>.capitalize",
        "unittest.case.TestCase.fail",
        "<builtin>.range",
        "unittest.util.safe_repr",
        "<builtin>.len",
        "difflib.ndiff",
        "unittest.util._common_shorten_repr",
        "<builtin>.isinstance",
        "unittest.case.TestCase._truncateMessage",
        "pprint.pformat",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.min"
    ],
    "<str>.capitalize": [],
    "unittest.case.TestCase._truncateMessage": [
        "<builtin>.len"
    ],
    "unittest.case.TestCase.fail": [],
    "unittest.case.TestCase.assertListEqual": [
        "unittest.case.TestCase.assertSequenceEqual"
    ],
    "unittest.case.TestCase.assertTupleEqual": [
        "unittest.case.TestCase.assertSequenceEqual"
    ],
    "unittest.case.TestCase.assertSetEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail",
        "<list>.append"
    ],
    "unittest.case.TestCase.assertIn": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertNotIn": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIs": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIsNot": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertDictEqual": [
        "unittest.case.TestCase.assertIsInstance",
        "unittest.case.TestCase.fail",
        "difflib.ndiff",
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._truncateMessage",
        "pprint.pformat",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIsInstance": [
        "unittest.case.TestCase._formatMessage",
        "<builtin>.isinstance",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertDictContainsSubset": [
        "unittest.case.TestCase.fail",
        "warnings.warn",
        "unittest.util.safe_repr",
        "<list>.append",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertCountEqual": [
        "collections.Counter.__init__",
        "unittest.case.TestCase.fail",
        "unittest.util._count_diff_all_purpose",
        "unittest.case.TestCase._truncateMessage",
        "<builtin>.list",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertMultiLineEqual": [
        "unittest.case.TestCase.assertIsInstance",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._baseAssertEqual",
        "<builtin>.len",
        "difflib.ndiff",
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._truncateMessage",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertLess": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertLessEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertGreater": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertGreaterEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIsNone": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIsNotNone": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertNotIsInstance": [
        "unittest.case.TestCase._formatMessage",
        "<builtin>.isinstance",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertRaisesRegex": [
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertWarnsRegex": [
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertRegex": [
        "re.compile",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.isinstance"
    ],
    "unittest.case.TestCase.assertNotRegex": [
        "re.compile",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.isinstance"
    ],
    "unittest.case.TestCase._deprecate.deprecated_func": [
        "unittest.async_case.IsolatedAsyncioTestCase.__init__",
        "warnings.warn",
        "doctest.DocTestCase.__init__",
        "doctest.SkipDocTestCase.__init__",
        "unittest.case.TestCase.__init__"
    ],
    "unittest.case.FunctionTestCase.__init__": [
        "<builtin>.super"
    ],
    "unittest.case.FunctionTestCase.__eq__": [
        "<builtin>.isinstance"
    ],
    "unittest.case.FunctionTestCase.__hash__": [
        "<builtin>.hash",
        "<builtin>.type"
    ],
    "unittest.case.FunctionTestCase.__str__": [
        "unittest.util.strclass"
    ],
    "unittest.case.FunctionTestCase.__repr__": [
        "unittest.util.strclass"
    ],
    "unittest.case._SubTest.runTest": [
        "<builtin>.NotImplementedError"
    ],
    "unittest.case._SubTest._subDescription": [
        "<list>.append"
    ],
    "unittest.case._SubTest.id": [
        "unittest.case._SubTest._subDescription",
        "doctest.DocTestCase.id",
        "unittest.case.TestCase.id",
        "doctest.DocFileCase.id"
    ],
    "doctest.DocTestCase.id": [],
    "unittest.case._SubTest.shortDescription": [
        "doctest.SkipDocTestCase.shortDescription",
        "doctest.DocTestCase.shortDescription",
        "unittest.case.TestCase.shortDescription"
    ],
    "doctest.DocTestCase.shortDescription": [],
    "doctest.SkipDocTestCase.shortDescription": [],
    "unittest.case._SubTest.__str__": [
        "unittest.case._SubTest._subDescription"
    ],
    "unittest.suite._call_if_exists": [
        "<builtin>.getattr"
    ],
    "unittest.suite.BaseTestSuite.__init__": [
        "unittest.suite.BaseTestSuite.addTests"
    ],
    "unittest.suite.BaseTestSuite.addTests": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "unittest.suite.BaseTestSuite.addTest"
    ],
    "unittest.suite.BaseTestSuite.__repr__": [
        "<builtin>.list",
        "unittest.util.strclass"
    ],
    "unittest.suite.BaseTestSuite.__eq__": [
        "<builtin>.list",
        "<builtin>.isinstance"
    ],
    "unittest.suite.BaseTestSuite.__iter__": [
        "<builtin>.iter"
    ],
    "unittest.suite.BaseTestSuite.countTestCases": [
        "unittest.suite.BaseTestSuite.__iter__"
    ],
    "unittest.suite.BaseTestSuite.run": [
        "<builtin>.enumerate",
        "unittest.suite.BaseTestSuite._removeTestAtIndex",
        "doctest._DocTestSuite._removeTestAtIndex"
    ],
    "doctest._DocTestSuite._removeTestAtIndex": [],
    "unittest.suite.BaseTestSuite._removeTestAtIndex": [],
    "unittest.suite.BaseTestSuite.__call__": [
        "unittest.suite.BaseTestSuite.run",
        "unittest.suite.TestSuite.run"
    ],
    "unittest.suite.TestSuite.run": [
        "<builtin>.enumerate",
        "unittest.suite.TestSuite._handleClassSetUp",
        "<builtin>.getattr",
        "unittest.suite._isnotsuite",
        "unittest.suite.TestSuite._handleModuleTearDown",
        "unittest.suite.BaseTestSuite._removeTestAtIndex",
        "unittest.suite.TestSuite._tearDownPreviousClass",
        "doctest._DocTestSuite._removeTestAtIndex",
        "unittest.suite.TestSuite._handleModuleFixture"
    ],
    "unittest.suite._isnotsuite": [
        "<builtin>.iter"
    ],
    "unittest.suite.TestSuite._tearDownPreviousClass": [
        "unittest.util.strclass",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite._call_if_exists"
    ],
    "unittest.suite.TestSuite._createClassOrModuleLevelException": [
        "unittest.suite.TestSuite._addClassOrModuleLevelException"
    ],
    "unittest.suite.TestSuite._addClassOrModuleLevelException": [
        "unittest.suite._ErrorHolder.__init__",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "unittest.suite._ErrorHolder.__init__": [],
    "unittest.suite.TestSuite._handleModuleFixture": [
        "unittest.case.doModuleCleanups",
        "<builtin>.getattr",
        "unittest.suite.TestSuite._handleModuleTearDown",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._get_previous_module",
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite._call_if_exists"
    ],
    "unittest.suite.TestSuite._get_previous_module": [
        "<builtin>.getattr"
    ],
    "unittest.suite.TestSuite._handleModuleTearDown": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._get_previous_module",
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite._call_if_exists"
    ],
    "unittest.suite.TestSuite._handleClassSetUp": [
        "unittest.util.strclass",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite._call_if_exists"
    ],
    "unittest.suite.BaseTestSuite.debug": [
        "unittest.suite.BaseTestSuite.__iter__"
    ],
    "unittest.suite.TestSuite.debug": [
        "unittest.suite.TestSuite.run"
    ],
    "unittest.suite._ErrorHolder.__str__": [
        "unittest.suite._ErrorHolder.id"
    ],
    "unittest.suite._ErrorHolder.id": [],
    "unittest.suite._ErrorHolder.__call__": [
        "unittest.suite._ErrorHolder.run"
    ],
    "unittest.suite._ErrorHolder.run": [],
    "unittest.loader._FailedTest.__init__": [
        "<builtin>.super"
    ],
    "unittest.loader._FailedTest.__getattr__": [
        "<builtin>.super"
    ],
    "unittest.loader._make_failed_import_test": [
        "<builtin>.ImportError",
        "unittest.loader._make_failed_test",
        "traceback.format_exc"
    ],
    "unittest.loader._make_failed_test": [
        "unittest.loader._FailedTest.__init__"
    ],
    "unittest.loader._make_failed_load_tests": [
        "unittest.loader._make_failed_test",
        "traceback.format_exc"
    ],
    "unittest.loader._make_skipped_test": [
        "unittest.case.skip.decorator",
        "<builtin>.str",
        "unittest.case.skip.decorator.skip_wrapper",
        "unittest.loader._make_skipped_test.testSkipped",
        "unittest.case.skip",
        "<builtin>.type"
    ],
    "unittest.case.skip.decorator.skip_wrapper": [],
    "unittest.loader._jython_aware_splitext": [
        "<str>.endswith",
        "posixpath.splitext",
        "ntpath.splitext",
        "<str>.lower"
    ],
    "unittest.loader.TestLoader.loadTestsFromTestCase": [
        "<builtin>.TypeError",
        "<builtin>.map",
        "<builtin>.hasattr",
        "unittest.loader.TestLoader.getTestCaseNames",
        "<builtin>.issubclass"
    ],
    "unittest.loader.TestLoader.getTestCaseNames": [
        "<builtin>.filter",
        "functools.cmp_to_key",
        "<builtin>.list",
        "<builtin>.dir"
    ],
    "unittest.loader.TestLoader.loadTestsFromModule": [
        "<builtin>.TypeError",
        "<builtin>.dir",
        "warnings.warn",
        "<builtin>.getattr",
        "<builtin>.len",
        "<builtin>.sorted",
        "<builtin>.isinstance",
        "<list>.append",
        "unittest.loader._make_failed_load_tests",
        "<builtin>.issubclass"
    ],
    "unittest.loader.TestLoader.loadTestsFromName": [
        "<builtin>.TypeError",
        "unittest.loader._make_failed_import_test",
        "<builtin>.callable",
        "<builtin>.issubclass",
        "unittest.loader._make_failed_test",
        "unittest.loader.TestLoader.loadTestsFromModule",
        "<builtin>.getattr",
        "traceback.format_exc",
        "<builtin>.isinstance",
        "<list>.append",
        "unittest.loader.TestLoader.loadTestsFromTestCase",
        "<builtin>.__import__"
    ],
    "unittest.loader.TestLoader.loadTestsFromNames": [
        "unittest.loader.TestLoader.loadTestsFromName"
    ],
    "unittest.loader.TestLoader.discover": [
        "genericpath.isfile",
        "posixpath.abspath",
        "ntpath.join",
        "<builtin>.list",
        "posixpath.join",
        "<builtin>.ImportError",
        "unittest.loader.TestLoader._find_tests",
        "genericpath.isdir",
        "ntpath.abspath",
        "<builtin>.__import__",
        "nt._isdir"
    ],
    "unittest.loader.TestLoader._find_tests": [
        "ntpath.join",
        "posixpath.join",
        "unittest.loader.TestLoader._find_tests",
        "<builtin>.sorted",
        "unittest.loader.TestLoader._find_test_path",
        "unittest.loader.TestLoader._get_name_from_path"
    ],
    "unittest.loader.TestLoader._get_name_from_path": [
        "posixpath.normpath",
        "ntpath.isabs",
        "ntpath.relpath",
        "ntpath.normpath",
        "posixpath.isabs",
        "<str>.replace",
        "posixpath.relpath",
        "<str>.startswith",
        "unittest.loader._jython_aware_splitext"
    ],
    "unittest.loader.TestLoader._find_test_path": [
        "genericpath.isfile",
        "unittest.loader._make_failed_import_test",
        "unittest.loader.TestLoader._match_path",
        "ntpath.join",
        "ntpath.basename",
        "posixpath.join",
        "unittest.loader.TestLoader._get_module_from_name",
        "genericpath.isdir",
        "unittest.loader._make_skipped_test",
        "<list>.append",
        "posixpath.basename",
        "unittest.loader.TestLoader._get_name_from_path",
        "nt._isdir"
    ],
    "unittest.loader.TestLoader._get_module_from_name": [
        "<builtin>.__import__"
    ],
    "unittest.loader.TestLoader._match_path": [
        "fnmatch"
    ],
    "unittest.loader.TestLoader._get_directory_containing_module": [
        "ntpath.dirname",
        "posixpath.abspath",
        "posixpath.dirname",
        "ntpath.abspath",
        "posixpath.basename",
        "ntpath.basename"
    ],
    "unittest.loader._makeLoader": [
        "unittest.loader.TestLoader.__init__"
    ],
    "unittest.loader.getTestCaseNames": [
        "unittest.loader.TestLoader.getTestCaseNames",
        "unittest.loader._makeLoader"
    ],
    "unittest.loader.makeSuite": [
        "unittest.loader.TestLoader.loadTestsFromTestCase",
        "unittest.loader._makeLoader"
    ],
    "unittest.loader.findTestCases": [
        "unittest.loader.TestLoader.loadTestsFromModule",
        "unittest.loader._makeLoader"
    ],
    "unittest.main._convert_name": [
        "genericpath.isfile",
        "ntpath.isabs",
        "ntpath.relpath",
        "posixpath.isabs",
        "<str>.endswith",
        "posixpath.relpath",
        "<str>.startswith",
        "<str>.lower"
    ],
    "unittest.main._convert_names": [
        "unittest.main._convert_name"
    ],
    "unittest.main.TestProgram.__init__": [
        "unittest.main.TestProgram.parseArgs",
        "<builtin>.getattr",
        "<str>.split",
        "unittest.main.TestProgram.runTests",
        "<builtin>.isinstance",
        "posixpath.basename",
        "<builtin>.__import__",
        "ntpath.basename"
    ],
    "unittest.main.TestProgram.parseArgs": [
        "<builtin>.len",
        "unittest.main.TestProgram._initArgParsers",
        "unittest.main._convert_names",
        "unittest.main.TestProgram.createTests",
        "<builtin>.isinstance",
        "unittest.main.TestProgram._do_discovery",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.list"
    ],
    "unittest.main.TestProgram._initArgParsers": [
        "unittest.main.TestProgram._getParentArgParser",
        "unittest.main.TestProgram._getDiscoveryArgParser",
        "unittest.main.TestProgram._getMainArgParser"
    ],
    "unittest.main.TestProgram._getParentArgParser": [
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__"
    ],
    "unittest.main.TestProgram._getMainArgParser": [
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__"
    ],
    "unittest.main.TestProgram._getDiscoveryArgParser": [
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__"
    ],
    "unittest.main.TestProgram._do_discovery": [
        "unittest.main.TestProgram.createTests",
        "argparse.ArgumentParser.parse_args",
        "unittest.main.TestProgram._initArgParsers"
    ],
    "unittest.main.TestProgram.createTests": [
        "unittest.loader.TestLoader.loadTestsFromModule",
        "unittest.loader.TestLoader.loadTestsFromNames"
    ],
    "unittest.main.TestProgram.runTests": [
        "unittest.signals.installHandler",
        "unittest.runner.TextTestRunner.__init__",
        "<builtin>.isinstance",
        "unittest.result.TestResult.wasSuccessful",
        "unittest.runner.TextTestRunner.run"
    ],
    "unittest.signals.installHandler": [
        "unittest.signals._InterruptHandler.__init__",
        "signal.getsignal",
        "signal.signal"
    ],
    "unittest.signals._InterruptHandler.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "unittest.runner.TextTestRunner.__init__": [
        "unittest.runner._WritelnDecorator.__init__"
    ],
    "unittest.runner._WritelnDecorator.__init__": [],
    "unittest.runner.TextTestRunner.run": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.len",
        "unittest.runner.TextTestResult.printErrors",
        "<builtin>.map",
        "<builtin>.hasattr",
        "unittest.result.TestResult.wasSuccessful",
        "<list>.append",
        "unittest.runner.TextTestRunner._makeResult",
        "unittest.signals.registerResult"
    ],
    "unittest.runner.TextTestRunner._makeResult": [
        "unittest.runner.TextTestResult.__init__"
    ],
    "unittest.runner.TextTestResult.__init__": [
        "<builtin>.super"
    ],
    "unittest.signals.registerResult": [],
    "unittest.runner.TextTestResult.printErrors": [
        "unittest.runner.TextTestResult.printErrorList",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner._WritelnDecorator.writeln": [],
    "unittest.runner.TextTestResult.printErrorList": [
        "unittest.runner.TextTestResult.getDescription",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.getDescription": [
        "<builtin>.str"
    ],
    "unittest.main.TestProgram.usageExit": [
        "unittest.main.TestProgram._initArgParsers",
        "unittest.main.TestProgram._print_help",
        "<builtin>.print"
    ],
    "unittest.main.TestProgram._print_help": [
        "argparse.ArgumentParser.format_help",
        "argparse.ArgumentParser.print_help",
        "<builtin>.print"
    ],
    "unittest.runner._WritelnDecorator.__getattr__": [
        "<builtin>.getattr",
        "<builtin>.AttributeError"
    ],
    "unittest.runner.TextTestResult.startTest": [
        "unittest.runner.TextTestResult.getDescription",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addSuccess": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addError": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addFailure": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addSkip": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addExpectedFailure": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.runner.TextTestResult.addUnexpectedSuccess": [
        "<builtin>.super",
        "unittest.runner._WritelnDecorator.writeln"
    ],
    "unittest.signals._InterruptHandler.__call__": [
        "signal.getsignal",
        "weakref.WeakKeyDictionary.keys",
        "unittest.signals._InterruptHandler.__init__.default_handler"
    ],
    "unittest.signals._InterruptHandler.__init__.default_handler": [],
    "unittest.signals.removeResult": [
        "<builtin>.bool",
        "weakref.WeakKeyDictionary.pop"
    ],
    "unittest.signals.removeHandler": [
        "functools.wraps",
        "signal.signal"
    ],
    "sqlparse.tokens._TokenType.__contains__": [
        "<builtin>.len"
    ],
    "sqlparse.tokens._TokenType.__getattr__": [
        "<builtin>.setattr"
    ],
    "sqlparse.sql.NameAliasMixin.get_alias": [
        "sqlparse.sql.TokenList._get_first_name",
        "sqlparse.sql.TokenList.token_next_by",
        "<builtin>.len"
    ],
    "sqlparse.sql.Token.__init__": [
        "<str>.upper",
        "<builtin>.str"
    ],
    "sqlparse.sql.Token.__repr__": [
        "<builtin>.locals",
        "sqlparse.sql.Token._get_repr_name",
        "<str>.endswith",
        "sqlparse.sql.Token._get_repr_value",
        "<str>.startswith",
        "<builtin>.id"
    ],
    "sqlparse.sql.Token._get_repr_name": [
        "<builtin>.str"
    ],
    "sqlparse.sql.Token._get_repr_value": [
        "re.sub",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "sqlparse.sql.Token.match": [
        "re.compile",
        "<builtin>.isinstance"
    ],
    "sqlparse.sql.Token.within": [
        "<builtin>.isinstance"
    ],
    "sqlparse.sql.TokenList.__init__": [
        "<builtin>.setattr",
        "<builtin>.str",
        "<builtin>.super"
    ],
    "sqlparse.sql.TokenList.__str__": [
        "sqlparse.sql.TokenList.flatten"
    ],
    "sqlparse.sql.TokenList.flatten": [],
    "sqlparse.sql.TokenList.__iter__": [
        "<builtin>.iter"
    ],
    "sqlparse.sql.TokenList._get_repr_name": [
        "<builtin>.type"
    ],
    "sqlparse.sql.TokenList._pprint_tree": [
        "<builtin>.enumerate",
        "<builtin>.locals",
        "<builtin>.len",
        "<builtin>.print"
    ],
    "sqlparse.sql.TokenList.get_token_at_offset": [
        "<builtin>.len",
        "sqlparse.sql.TokenList.flatten"
    ],
    "sqlparse.sql.TokenList._token_matching": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sqlparse.sql.TokenList.token_first": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_next_by": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_not_matching": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_matching": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_prev": [
        "sqlparse.sql.TokenList.token_next"
    ],
    "sqlparse.sql.TokenList.token_next": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_index": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.TokenList.group_tokens": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "sqlparse.sql.TokenList.insert_before": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.TokenList.insert_after": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.TokenList.has_alias": [
        "sqlparse.sql.TokenList.get_alias",
        "sqlparse.sql.NameAliasMixin.get_alias"
    ],
    "sqlparse.sql.TokenList.get_alias": [],
    "sqlparse.sql.TokenList.get_name": [
        "sqlparse.sql.TokenList.get_alias",
        "sqlparse.sql.TokenList.get_real_name",
        "sqlparse.sql.NameAliasMixin.get_real_name",
        "sqlparse.sql.NameAliasMixin.get_alias"
    ],
    "sqlparse.sql.TokenList.get_real_name": [],
    "sqlparse.sql.TokenList.get_parent_name": [
        "sqlparse.utils.remove_quotes",
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.utils.remove_quotes": [],
    "sqlparse.sql.TokenList._get_first_name": [
        "sqlparse.utils.remove_quotes",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.reversed"
    ],
    "sqlparse.sql.Statement.get_type": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_first",
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.Identifier.is_wildcard": [
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.Identifier.get_typecast": [
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.Identifier.get_ordering": [
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.Identifier.get_array_indices": [
        "<builtin>.isinstance"
    ],
    "sqlparse.sql.Case.get_cases": [
        "<list>.append"
    ],
    "sqlparse.sql.Function.get_parameters": [
        "sqlparse.utils.imt",
        "<builtin>.isinstance"
    ],
    "sqlparse.keywords.is_keyword": [
        "<map>.get"
    ],
    "sqlparse.filters.others.StripCommentsFilter._process": [
        "sqlparse.filters.others.StripCommentsFilter._process.get_next_comment",
        "sqlparse.filters.others.StripCommentsFilter._process._get_insert_token"
    ],
    "sqlparse.filters.others.StripCommentsFilter._process.get_next_comment": [],
    "sqlparse.filters.others.StripCommentsFilter._process._get_insert_token": [
        "sqlparse.sql.Token.__init__",
        "re.search"
    ],
    "<str>.upper": [],
    "sqlparse.filters.others.StripCommentsFilter.process": [
        "sqlparse.filters.others.StripCommentsFilter.process",
        "sqlparse.filters.others.StripCommentsFilter._process"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws": [
        "<builtin>.getattr",
        "<str>.lower",
        "<builtin>.type"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_identifierlist": [
        "<builtin>.list",
        "sqlparse.filters.others.StripWhitespaceFilter._stripws_default"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_default": [],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_parenthesis": [
        "sqlparse.filters.others.StripWhitespaceFilter._stripws_default"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter.process": [
        "sqlparse.filters.others.StripWhitespaceFilter._stripws",
        "sqlparse.filters.others.StripWhitespaceFilter.process"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter._process": [
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter.process": [
        "sqlparse.filters.others.SpacesAroundOperatorsFilter._process",
        "sqlparse.filters.others.SpacesAroundOperatorsFilter.process"
    ],
    "sqlparse.filters.others.SerializerUnicode.process": [
        "sqlparse.utils.split_unquoted_newlines"
    ],
    "sqlparse.filters.output.OutputFilter.process": [
        "<builtin>.str",
        "<builtin>.len",
        "sqlparse.filters.output.OutputFilter._process"
    ],
    "sqlparse.filters.output.OutputFilter._process": [],
    "sqlparse.filters.output.OutputPythonFilter._process": [
        "sqlparse.sql.Token.__init__",
        "<builtin>.len"
    ],
    "sqlparse.filters.output.OutputPHPFilter._process": [
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.tokens._CaseFilter.__init__": [
        "<builtin>.getattr"
    ],
    "sqlparse.filters.tokens.TruncateStringFilter.process": [
        "<builtin>.len"
    ],
    "sqlparse.filters.reindent.ReindentFilter._flatten_up_to_token": [
        "<builtin>.next"
    ],
    "sqlparse.filters.reindent.ReindentFilter._get_offset": [
        "sqlparse.filters.reindent.ReindentFilter._flatten_up_to_token",
        "<builtin>.map",
        "<builtin>.len"
    ],
    "sqlparse.filters.reindent.ReindentFilter.nl": [
        "<builtin>.max",
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.reindent.ReindentFilter._next_token": [
        "sqlparse.filters.reindent.ReindentFilter._next_token"
    ],
    "sqlparse.filters.reindent.ReindentFilter._split_kwds": [
        "sqlparse.filters.reindent.ReindentFilter._next_token",
        "<builtin>.str",
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._split_statements": [
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process": [
        "<builtin>.getattr",
        "<str>.lower",
        "<builtin>.type"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_where": [
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_function": [
        "sqlparse.filters.reindent.ReindentFilter._process_default"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_default": [
        "sqlparse.filters.reindent.ReindentFilter._split_kwds",
        "sqlparse.filters.reindent.ReindentFilter._split_statements",
        "sqlparse.filters.reindent.ReindentFilter._process"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_identifierlist": [
        "sqlparse.sql.Token.__init__",
        "sqlparse.filters.reindent.ReindentFilter._get_offset",
        "<builtin>.next",
        "<builtin>.len",
        "sqlparse.filters.reindent.ReindentFilter._process_default",
        "<builtin>.list",
        "<builtin>.sum"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_case": [
        "<builtin>.iter",
        "<builtin>.next",
        "sqlparse.filters.reindent.ReindentFilter._get_offset"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_values": [
        "sqlparse.filters.reindent.ReindentFilter._get_offset",
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter.process": [
        "sqlparse.sql.Token.__init__",
        "sqlparse.filters.reindent.ReindentFilter._process",
        "<builtin>.str"
    ],
    "sqlparse.filters.right_margin.RightMarginFilter._process": [
        "sqlparse.sql.Token.__init__",
        "<builtin>.str",
        "sqlparse.filters.right_margin.RightMarginFilter._process",
        "re.search",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.__init__": [
        "<builtin>.len"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl": [
        "sqlparse.sql.Token.__init__",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_statement": [
        "sqlparse.sql.TokenList.__init__",
        "<builtin>.len",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process": [
        "<builtin>.getattr",
        "<str>.lower",
        "<builtin>.type"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_parenthesis": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_identifierlist": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "<builtin>.list",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_default"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_default": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._split_kwds"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._split_kwds": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "<builtin>.str",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_case": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "sqlparse.sql.Token.__init__",
        "<builtin>.enumerate",
        "<builtin>.max",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.map"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.process": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process"
    ],
    "sqlparse.parse": [
        "sqlparse.parsestream",
        "<builtin>.tuple"
    ],
    "sqlparse.parsestream": [
        "sqlparse.engine.filter_stack.FilterStack.run",
        "sqlparse.engine.filter_stack.FilterStack.enable_grouping",
        "sqlparse.engine.filter_stack.FilterStack.__init__"
    ],
    "sqlparse.split": [
        "sqlparse.engine.filter_stack.FilterStack.run",
        "<builtin>.str",
        "sqlparse.engine.filter_stack.FilterStack.__init__"
    ],
    "sqlparse.engine.grouping._group_matching": [
        "<builtin>.enumerate",
        "<list>.pop",
        "sqlparse.engine.grouping._group_matching",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.list"
    ],
    "sqlparse.engine.grouping.group_brackets": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_parenthesis": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_case": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_if": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_for": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_begin": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_typecasts": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping._group": [
        "sqlparse.engine.grouping.group_tzcasts.valid_prev",
        "sqlparse.engine.grouping.group_as.post",
        "sqlparse.engine.grouping.group_operator.post",
        "sqlparse.engine.grouping.<lambda1>",
        "sqlparse.engine.grouping.group_tzcasts.post",
        "sqlparse.engine.grouping.group_typed_literal.match",
        "sqlparse.engine.grouping.group_identifier_list.match",
        "sqlparse.engine.grouping._group",
        "sqlparse.engine.grouping.<lambda2>",
        "<builtin>.list",
        "sqlparse.engine.grouping.group_period.valid_next",
        "sqlparse.engine.grouping.group_tzcasts.match",
        "sqlparse.engine.grouping.group_typed_literal.post",
        "<builtin>.enumerate",
        "sqlparse.engine.grouping.group_identifier_list.valid",
        "sqlparse.engine.grouping.group_identifier_list.post",
        "sqlparse.engine.grouping.group_typed_literal.match_to_extend",
        "sqlparse.engine.grouping.group_typecasts.valid",
        "sqlparse.engine.grouping.group_period.post",
        "sqlparse.engine.grouping.group_assignment.valid",
        "sqlparse.engine.grouping.group_as.valid_next",
        "sqlparse.engine.grouping.group_period.match",
        "sqlparse.engine.grouping.group_comparison.match",
        "sqlparse.engine.grouping.group_tzcasts.valid_next",
        "sqlparse.engine.grouping.group_typed_literal.valid_prev",
        "sqlparse.engine.grouping.group_typed_literal.valid_final",
        "sqlparse.engine.grouping.group_arrays.post",
        "sqlparse.engine.grouping.group_assignment.post",
        "sqlparse.engine.grouping.group_operator.match",
        "sqlparse.engine.grouping.group_typecasts.match",
        "sqlparse.engine.grouping.group_assignment.match",
        "sqlparse.engine.grouping.group_arrays.valid_prev",
        "sqlparse.engine.grouping.group_period.valid_prev",
        "sqlparse.engine.grouping.group_arrays.match",
        "sqlparse.engine.grouping.group_as.valid_prev",
        "sqlparse.engine.grouping.group_typecasts.post",
        "sqlparse.engine.grouping.group_as.match",
        "sqlparse.engine.grouping.group_operator.valid",
        "<builtin>.isinstance",
        "sqlparse.engine.grouping.group_comparison.valid",
        "sqlparse.engine.grouping.group_comparison.post",
        "sqlparse.engine.grouping.group_arrays.valid_next",
        "sqlparse.engine.grouping.group_typed_literal.valid_next"
    ],
    "sqlparse.engine.grouping.group_typecasts.match": [],
    "sqlparse.engine.grouping.<lambda1>": [],
    "sqlparse.engine.grouping.group_typecasts.valid": [],
    "sqlparse.engine.grouping.<lambda2>": [],
    "sqlparse.engine.grouping.group_typecasts.post": [],
    "sqlparse.engine.grouping.group_tzcasts": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_tzcasts.match": [],
    "sqlparse.engine.grouping.group_tzcasts.valid_prev": [],
    "sqlparse.engine.grouping.group_tzcasts.valid_next": [],
    "sqlparse.engine.grouping.group_tzcasts.post": [],
    "sqlparse.engine.grouping.group_typed_literal": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_typed_literal.match": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_typed_literal.valid_prev": [],
    "sqlparse.engine.grouping.group_typed_literal.valid_next": [],
    "sqlparse.engine.grouping.group_typed_literal.post": [],
    "sqlparse.engine.grouping.group_typed_literal.match_to_extend": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_typed_literal.valid_final": [],
    "sqlparse.engine.grouping.group_period": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_period.match": [],
    "sqlparse.engine.grouping.group_period.valid_prev": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_period.valid_next": [],
    "sqlparse.engine.grouping.group_period.post": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_as": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_as.match": [],
    "sqlparse.engine.grouping.group_as.valid_prev": [],
    "sqlparse.engine.grouping.group_as.valid_next": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_as.post": [],
    "sqlparse.engine.grouping.group_assignment": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_assignment.match": [],
    "sqlparse.engine.grouping.group_assignment.valid": [],
    "sqlparse.engine.grouping.group_assignment.post": [],
    "sqlparse.engine.grouping.group_comparison": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_comparison.match": [],
    "sqlparse.engine.grouping.group_comparison.valid": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_comparison.post": [],
    "sqlparse.engine.grouping.group_arrays": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_arrays.match": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_arrays.valid_prev": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_arrays.valid_next": [],
    "sqlparse.engine.grouping.group_arrays.post": [],
    "sqlparse.engine.grouping.group_operator": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_operator.match": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_operator.valid": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_operator.post": [],
    "sqlparse.engine.grouping.group_identifier_list": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_identifier_list.match": [],
    "sqlparse.engine.grouping.group_identifier_list.valid": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_identifier_list.post": [],
    "sqlparse.engine.grouping.group_order": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_values": [
        "<builtin>.isinstance"
    ],
    "re._subx.filter": [
        "sre_parse.expand_template"
    ],
    "enum._make_class_unpicklable._break_on_call_reduce": [
        "<builtin>.TypeError"
    ],
    "asyncio.coroutines.coroutine.coro": [
        "asyncio.base_futures.isfuture",
        "inspect.isgenerator",
        "<builtin>.isinstance"
    ],
    "functools.cmp_to_key.K.__lt__": [
        "unittest.util.three_way_cmp"
    ],
    "unittest.util.three_way_cmp": [],
    "functools.cmp_to_key.K.__gt__": [
        "unittest.util.three_way_cmp"
    ],
    "functools.cmp_to_key.K.__eq__": [
        "unittest.util.three_way_cmp"
    ],
    "functools.cmp_to_key.K.__le__": [
        "unittest.util.three_way_cmp"
    ],
    "functools.cmp_to_key.K.__ge__": [
        "unittest.util.three_way_cmp"
    ],
    "functools.partialmethod._make_unbound_method._method": [
        "<map>"
    ],
    "_py_abc.ABCMeta._abc_caches_clear": [
        "_weakrefset.WeakSet.clear"
    ],
    "doctest.DocFileCase.format_failure": [],
    "difflib._mdiff._make_line.record_sub_info": [
        "<list>.append"
    ],
    "inspect._signature_fromstr.wrap_value": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance",
        "<builtin>.eval",
        "<builtin>.type"
    ],
    "inspect._signature_fromstr.RewriteSymbolics.visit_Attribute": [
        "inspect._signature_fromstr.wrap_value",
        "<builtin>.reversed",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.RuntimeError"
    ],
    "inspect._signature_fromstr.RewriteSymbolics.visit_Name": [
        "<builtin>.isinstance",
        "inspect._signature_fromstr.wrap_value",
        "<builtin>.ValueError"
    ],
    "inspect.formatannotationrelativeto._formatannotation": [
        "inspect.formatannotation"
    ],
    "inspect.formatargvalues.convert": [
        "inspect.<lambda7>"
    ],
    "shutil.ignore_patterns._ignore_patterns": [
        "<list>.extend",
        "<builtin>.set"
    ],
    "contextlib.ContextDecorator.__call__.inner": [
        "contextlib.ContextDecorator._recreate_cm"
    ],
    "contextlib.ContextDecorator._recreate_cm": [],
    "contextlib._BaseExitStack._create_cb_wrapper._exit_wrapper": [
        "contextlib._BaseExitStack.callback"
    ],
    "asyncio.base_events.BaseEventLoop.stop": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_sendall": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_connect": [],
    "asyncio.proactor_events.BaseProactorEventLoop._process_events": [],
    "logging.StrFormatStyle._format": [],
    "string.Template.safe_substitute.convert": [
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "ssl.SSLContext.set_servername_callback.shim_cb": [
        "ssl.SSLContext._encode_hostname"
    ],
    "asyncio.coroutines.coroutine.wrapper": [
        "asyncio.coroutines.coroutine.coro",
        "asyncio.coroutines.CoroWrapper.__init__",
        "<builtin>.getattr"
    ],
    "asyncio.sslproto.SSLProtocol._finalize": [],
    "typing.Protocol.__init_subclass__._proto_hook": [
        "<builtin>.TypeError",
        "typing._is_callable_members_only",
        "<builtin>.getattr",
        "typing._allow_reckless_class_cheks",
        "<builtin>.isinstance",
        "typing._get_protocol_attrs",
        "<builtin>.issubclass"
    ],
    "typing._allow_reckless_class_cheks": [],
    "typing.no_type_check_decorator.wrapped_decorator": [
        "typing.no_type_check"
    ],
    "asyncio.tasks._wait._on_completion": [
        "asyncio.events.TimerHandle.cancel",
        "asyncio.futures.Future.done",
        "asyncio.futures.Future.set_result"
    ],
    "asyncio.tasks.as_completed._on_timeout": [
        "asyncio.queues.Queue.put_nowait"
    ],
    "asyncio.tasks.as_completed._on_completion": [
        "asyncio.events.TimerHandle.cancel",
        "asyncio.queues.Queue.put_nowait"
    ],
    "asyncio.tasks.shield._inner_done_callback": [
        "asyncio.futures.Future.set_result",
        "asyncio.futures.Future.set_exception",
        "asyncio.futures.Future.cancelled",
        "asyncio.futures.Future.cancel"
    ],
    "asyncio.tasks.shield._outer_done_callback": [
        "asyncio.futures.Future.remove_done_callback",
        "asyncio.futures.Future.done"
    ],
    "asyncio.tasks.run_coroutine_threadsafe.callback": [
        "asyncio.futures._chain_future",
        "asyncio.tasks.ensure_future"
    ],
    "asyncio.streams.open_connection.<lambda3>": [],
    "asyncio.streams.open_connection.<lambda4>": [],
    "asyncio.streams.open_connection.<lambda2>": [],
    "asyncio.subprocess.SubprocessStreamProtocol._get_close_waiter": [],
    "asyncio.streams.start_server.factory": [
        "asyncio.streams.StreamReader.__init__",
        "asyncio.streams.StreamReaderProtocol.__init__"
    ],
    "asyncio.streams.start_unix_server.factory": [
        "asyncio.streams.StreamReader.__init__",
        "asyncio.streams.StreamReaderProtocol.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop.start_serving_pipe.loop_accept_pipe": [
        "logging.Logger.warning",
        "asyncio.windows_events.PipeServer.closed",
        "asyncio.windows_utils.PipeHandle.fileno",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.windows_utils.PipeHandle.close",
        "_weakrefset.WeakSet.discard",
        "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport",
        "asyncio.windows_events.PipeServer._get_unconnected_pipe"
    ],
    "asyncio.windows_events.IocpProactor._wait_for_handle.finish_wait_for_handle": [
        "asyncio.windows_events._BaseWaitHandleFuture._poll"
    ],
    "asyncio.windows_events._WindowsSubprocessTransport._start.callback": [
        "subprocess.Popen.poll",
        "asyncio.base_subprocess.BaseSubprocessTransport._process_exited"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._start_serving.loop": [
        "asyncio.base_events.BaseEventLoop.is_closed",
        "asyncio.trsock.TransportSocket.__init__",
        "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport",
        "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport",
        "logging.Logger.debug",
        "asyncio.base_events.BaseEventLoop.call_exception_handler",
        "asyncio.streams.start_server.factory"
    ],
    "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper": [
        "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper"
    ],
    "tempfile.TemporaryDirectory._rmtree.onerror": [
        "ntpath.dirname",
        "posixpath.dirname",
        "tempfile.TemporaryDirectory._rmtree.onerror.resetperms",
        "tempfile.TemporaryDirectory._rmtree",
        "<builtin>.issubclass"
    ],
    "tempfile.TemporaryDirectory._rmtree.onerror.resetperms": [],
    "collections.ChainMap.new_child": [],
    "doctest.DocFileCase.id": [],
    "unittest.loader._make_skipped_test.testSkipped": [],
    "unittest.loader._FailedTest.__getattr__.testFailure": [
        "unittest.suite.BaseTestSuite.__init__"
    ],
    "unittest.loader.TestLoader.getTestCaseNames.shouldIncludeMethod": [
        "<builtin>.any",
        "fnmatch.fnmatchcase",
        "<builtin>.getattr",
        "<builtin>.callable"
    ],
    "unittest.signals.removeHandler.inner": [
        "unittest.signals.removeHandler",
        "signal.getsignal"
    ],
    "sqlparse.sql.NameAliasMixin.get_real_name": [
        "sqlparse.sql.TokenList._get_first_name",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.TokenList.token_first.matcher": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.sql.TokenList.token_next_by.<lambda1>": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.sql.TokenList.token_next.matcher": [
        "sqlparse.utils.imt"
    ],
    "ast.dump": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "ast.dump._format"
    ],
    "ast.dump._format": [
        "ast.dump._format",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.repr",
        "<list>.append"
    ],
    "ast.copy_location": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "ast.fix_missing_locations": [
        "ast.fix_missing_locations._fix"
    ],
    "ast.fix_missing_locations._fix": [
        "<builtin>.hasattr",
        "ast.iter_child_nodes",
        "ast.fix_missing_locations._fix"
    ],
    "ast.iter_child_nodes": [
        "<builtin>.isinstance",
        "ast.iter_fields"
    ],
    "ast.iter_fields": [
        "<builtin>.getattr"
    ],
    "ast.increment_lineno": [
        "ast.walk",
        "<builtin>.getattr"
    ],
    "ast.walk": [
        "_collections.deque",
        "collections",
        "ast.iter_child_nodes"
    ],
    "ast.get_docstring": [
        "<builtin>.TypeError",
        "inspect.cleandoc",
        "<builtin>.isinstance",
        "inspect"
    ],
    "ast._splitlines_no_ff": [
        "<list>.append",
        "<builtin>.len"
    ],
    "ast.get_source_segment": [
        "<list>.insert",
        "<list>.append",
        "ast._splitlines_no_ff",
        "ast._pad_whitespace"
    ],
    "ast._pad_whitespace": [],
    "ast.NodeVisitor.generic_visit": [
        "ast.NodeVisitor.visit",
        "<builtin>.isinstance",
        "ast.iter_fields"
    ],
    "ast.NodeVisitor.visit_Constant": [
        "<map>.get",
        "ast.NodeTransformer.generic_visit",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "ast.NodeVisitor.generic_visit",
        "<map>.items"
    ],
    "ast.NodeTransformer.generic_visit": [
        "<list>.extend",
        "<builtin>.setattr",
        "ast.iter_fields",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.delattr",
        "ast.NodeVisitor.visit"
    ],
    "ast._ABC.__instancecheck__": [
        "<builtin>.isinstance"
    ],
    "textwrap.shorten": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.fill"
    ],
    "textwrap.indent": [
        "textwrap.indent.prefixed_lines"
    ],
    "textwrap.indent.prefixed_lines": [
        "textwrap.indent.predicate"
    ],
    "textwrap.indent.predicate": [],
    "tarfile.stn": [
        "<builtin>.len"
    ],
    "tarfile.itn": [
        "<builtin>.int",
        "<builtin>.range",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.ValueError"
    ],
    "tarfile._safe_print": [
        "<str>.encode",
        "<builtin>.getattr",
        "<builtin>.print"
    ],
    "tarfile._LowLevelFile.close": [],
    "tarfile._StreamProxy.close": [
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.close"
    ],
    "tarfile._Stream.__del__": [
        "tarfile._Stream.close",
        "<builtin>.hasattr"
    ],
    "tarfile._FileInFile.__init__": [
        "<builtin>.getattr"
    ],
    "tarfile._FileInFile.seek": [
        "<builtin>.min",
        "<builtin>.max",
        "<builtin>.ValueError"
    ],
    "tarfile._FileInFile.read": [
        "tarfile._Stream.read",
        "gzip.GzipFile.seek",
        "<builtin>.len",
        "gzip.GzipFile.read",
        "lzma.LZMAFile.read",
        "bz2.BZ2File.read",
        "tarfile._Stream.seek",
        "lzma.LZMAFile.seek",
        "bz2.BZ2File.seek",
        "<builtin>.min"
    ],
    "tarfile._FileInFile.readinto": [
        "tarfile._FileInFile.read",
        "<builtin>.len"
    ],
    "tarfile.ExFileObject.__init__": [
        "tarfile._FileInFile.__init__",
        "<builtin>.super"
    ],
    "tarfile.TarInfo.__repr__": [
        "<builtin>.id"
    ],
    "tarfile.TarInfo.isfile": [
        "tarfile.TarInfo.isreg"
    ],
    "tarfile.TarFile.gzopen": [
        "gzip",
        "gzip.GzipFile.__init__",
        "gzip.GzipFile.close",
        "tarfile.TarFile.taropen",
        "<builtin>.ValueError"
    ],
    "gzip": [
        "io",
        "os",
        "_compression",
        "gzip.main",
        "gzip.GzipFile",
        "gzip._PaddedFile",
        "struct",
        "gzip.BadGzipFile",
        "gzip._GzipReader",
        "zlib"
    ],
    "gzip._PaddedFile": [],
    "gzip.BadGzipFile": [],
    "gzip.GzipFile": [
        "<builtin>.property"
    ],
    "gzip._GzipReader": [],
    "gzip.main": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument",
        "gzip.GzipFile.write",
        "argparse",
        "<builtin>.print",
        "gzip.GzipFile.read",
        "gzip.GzipFile.__init__",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.repr",
        "gzip.GzipFile.close",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<builtin>.open"
    ],
    "gzip.GzipFile.__init__": [
        "<builtin>.getattr",
        "gzip._GzipReader.__init__",
        "os._fspath",
        "gzip.GzipFile._write_gzip_header",
        "<builtin>.isinstance",
        "_io.BufferedReader",
        "<str>.startswith",
        "gzip.GzipFile._init_write",
        "<builtin>.ValueError"
    ],
    "gzip.GzipFile._init_write": [],
    "gzip._GzipReader.__init__": [
        "gzip._PaddedFile.__init__",
        "<builtin>.super"
    ],
    "gzip._PaddedFile.__init__": [
        "<builtin>.len"
    ],
    "gzip.GzipFile._write_gzip_header": [
        "<builtin>.int",
        "<builtin>.chr",
        "gzip.write32u",
        "gzip.GzipFile.write",
        "<builtin>.isinstance",
        "posixpath.basename",
        "ntpath.basename"
    ],
    "gzip.write32u": [
        "gzip.GzipFile.write"
    ],
    "gzip.GzipFile.read": [
        "_compression.BaseStream._check_not_closed",
        "<builtin>.OSError"
    ],
    "gzip.GzipFile.write": [
        "_compression.BaseStream._check_not_closed",
        "gzip.GzipFile.write",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.OSError",
        "<builtin>.memoryview"
    ],
    "gzip.GzipFile.close": [
        "gzip.write32u",
        "gzip.GzipFile.write"
    ],
    "gzip.GzipFile.seek": [
        "<builtin>.range",
        "_compression.BaseStream._check_not_closed",
        "gzip.GzipFile.write",
        "<builtin>.ValueError",
        "<builtin>.OSError"
    ],
    "tarfile.TarFile.bz2open": [
        "bz2.BZ2File.close",
        "bz2.BZ2File.__init__",
        "bz2",
        "tarfile.TarFile.taropen",
        "<builtin>.ValueError"
    ],
    "bz2.BZ2File.tell": [],
    "bz2.BZ2File.seek": [],
    "bz2.BZ2File.write": [],
    "bz2.BZ2File.close": [],
    "tarfile.TarFile.xzopen": [
        "lzma",
        "lzma.LZMAFile.close",
        "lzma.LZMAFile.__init__",
        "tarfile.TarFile.taropen",
        "<builtin>.ValueError"
    ],
    "lzma.LZMAFile.close": [],
    "tarfile.TarFile.getnames": [
        "tarfile.TarFile.getmembers"
    ],
    "tarfile.TarFile.list": [
        "tarfile.TarInfo.ischr",
        "stat.filemode",
        "tarfile.TarInfo.isblk",
        "<builtin>.print",
        "tarfile.TarFile.__iter__",
        "tarfile.TarInfo.islnk",
        "tarfile.TarFile._check",
        "tarfile.TarInfo.issym",
        "tarfile._safe_print",
        "tarfile.TarInfo.isdir"
    ],
    "bz2.BZ2File.read": [],
    "tarfile.TarFile.extractfile": [
        "tarfile.TarFile.extractfile",
        "tarfile.TarFile.getmember",
        "<builtin>.isinstance",
        "tarfile.TarInfo.islnk",
        "tarfile.ExFileObject.__init__",
        "tarfile.TarFile._check",
        "tarfile.TarInfo.issym",
        "tarfile.TarInfo.isreg",
        "tarfile.TarFile._find_link_target"
    ],
    "tarfile.TarFile.__enter__": [
        "tarfile.TarFile._check"
    ],
    "tarfile.TarFile.__exit__": [
        "tarfile.TarFile.close",
        "tarfile._Stream.close",
        "bz2.BZ2File.close",
        "lzma.LZMAFile.close",
        "gzip.GzipFile.close"
    ],
    "zipfile._strip_extra": [
        "<list>.append",
        "<builtin>.len"
    ],
    "zipfile.ZipInfo.__repr__": [
        "zipfile.ZipInfo.is_dir",
        "<list>.append"
    ],
    "zipfile._gen_crc": [
        "<builtin>.range"
    ],
    "zipfile.LZMACompressor._init": [
        "<builtin>.len"
    ],
    "zipfile.LZMACompressor.compress": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMACompressor.flush": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMADecompressor.decompress": [
        "<builtin>.len"
    ],
    "zipfile._Tellable.flush": [
        "zipfile._Tellable.flush"
    ],
    "zipfile._ZipDecrypter.decrypter": [
        "<builtin>.bytearray",
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.bytes"
    ],
    "zipfile.ZipExtFile.__repr__": [
        "<list>.append"
    ],
    "zipfile.ZipExtFile.peek": [
        "zipfile.ZipExtFile.read",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile.read": [
        "zipfile.ZipExtFile._read1",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile._read1": [
        "zipfile.ZipExtFile._update_crc",
        "<builtin>.max",
        "<builtin>.len",
        "zipfile.ZipExtFile._read2",
        "zipfile.LZMADecompressor.decompress"
    ],
    "zipfile.ZipExtFile._read2": [
        "<builtin>.max",
        "zipfile._ZipDecrypter.decrypter",
        "<builtin>.len",
        "zipfile._SharedFile.read",
        "<builtin>.min"
    ],
    "zipfile.ZipExtFile._update_crc": [],
    "zipfile.ZipExtFile.read1": [
        "zipfile.ZipExtFile._read1",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile.close": [
        "zipfile._SharedFile.close"
    ],
    "zipfile.ZipExtFile.seek": [
        "zipfile._get_decompressor",
        "zipfile._SharedFile.seek",
        "<builtin>.len",
        "zipfile.ZipExtFile.read",
        "<builtin>.min",
        "_io.UnsupportedOperation",
        "zipfile.ZipExtFile.tell",
        "<builtin>.ValueError",
        "zipfile.ZipExtFile._init_decrypter"
    ],
    "zipfile.ZipExtFile.tell": [
        "_io.UnsupportedOperation",
        "<builtin>.len"
    ],
    "zipfile._SharedFile.seek": [],
    "zipfile._ZipWriteFile.write": [
        "<builtin>.len",
        "zipfile.LZMACompressor.compress",
        "<builtin>.ValueError"
    ],
    "zipfile._ZipWriteFile.close": [
        "zipfile.ZipInfo.FileHeader",
        "zipfile.LZMACompressor.flush",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.RuntimeError",
        "<builtin>.super"
    ],
    "zipfile.ZipFile.__repr__": [
        "<list>.append"
    ],
    "zipfile.ZipFile.setpassword": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "zipfile.ZipFile.extract": [
        "os._fspath",
        "zipfile.ZipFile._extract_member"
    ],
    "zipfile.ZipFile.writestr": [
        "zipfile.ZipInfo.__init__",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipFile.__del__": [
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile._write_end_record": [
        "zipfile._Tellable.write",
        "<builtin>.max",
        "zipfile.ZipFile.write",
        "<builtin>.len",
        "<builtin>.print",
        "zipfile._Tellable.flush",
        "zipfile._strip_extra",
        "<list>.append",
        "zipfile._Tellable.tell",
        "<builtin>.min"
    ],
    "zipfile.PyZipFile.__init__": [
        "zipfile.ZipFile.__init__"
    ],
    "zipfile.PyZipFile.writepy": [
        "ntpath.split",
        "genericpath.isfile",
        "ntpath.join",
        "zipfile.PyZipFile.writepy",
        "posixpath.splitext",
        "zipfile.PyZipFile._get_codename",
        "os._fspath",
        "<builtin>.print",
        "posixpath.join",
        "<builtin>.sorted",
        "ntpath.splitext",
        "genericpath.isdir",
        "posixpath.split",
        "<builtin>.RuntimeError",
        "nt._isdir",
        "zipfile.ZipFile.write"
    ],
    "zipfile.PyZipFile._get_codename": [
        "genericpath.isfile",
        "ntpath.split",
        "<builtin>.ValueError",
        "posixpath.split",
        "zipfile.PyZipFile._get_codename._compile"
    ],
    "zipfile.PyZipFile._get_codename._compile": [
        "py_compile.compile",
        "py_compile",
        "<builtin>.print"
    ],
    "py_compile": [
        "importlib._bootstrap_external",
        "os",
        "py_compile.main",
        "enum",
        "importlib.util",
        "py_compile.PyCompileError",
        "traceback",
        "py_compile.PycInvalidationMode",
        "importlib.machinery",
        "posixpath"
    ],
    "importlib._bootstrap_external": [
        "importlib._bootstrap_external.FileLoader",
        "importlib._bootstrap_external.WindowsRegistryFinder",
        "importlib._bootstrap_external._NamespacePath",
        "<int>.to_bytes",
        "importlib._bootstrap_external.SourcelessFileLoader",
        "importlib._bootstrap_external.SourceFileLoader",
        "importlib._bootstrap_external.PathFinder",
        "importlib._bootstrap_external.FileFinder",
        "importlib._bootstrap_external._LoaderBasics",
        "importlib._bootstrap_external._NamespaceLoader",
        "<builtin>.object",
        "importlib._bootstrap_external.ExtensionFileLoader",
        "importlib._bootstrap_external.SourceLoader",
        "<builtin>.type"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external._LoaderBasics": [],
    "importlib._bootstrap_external.SourceLoader": [],
    "importlib._bootstrap_external.FileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._check_name": [
        "importlib._bootstrap_external._check_name._wrap"
    ],
    "importlib._bootstrap_external._check_name._wrap": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "importlib._bootstrap_external.SourceFileLoader": [],
    "importlib._bootstrap_external.SourcelessFileLoader": [],
    "importlib._bootstrap_external.ExtensionFileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._NamespacePath": [],
    "importlib._bootstrap_external._NamespaceLoader": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.PathFinder": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.FileFinder": [
        "<builtin>.classmethod"
    ],
    "py_compile.PyCompileError": [],
    "py_compile.PycInvalidationMode": [],
    "py_compile.main": [
        "<builtin>.compile",
        "codecs.StreamRecoder.readline"
    ],
    "py_compile.compile": [
        "genericpath.isfile",
        "ntpath.islink",
        "<builtin>.FileExistsError",
        "ntpath.dirname",
        "posixpath.dirname",
        "py_compile._get_default_invalidation_mode",
        "py_compile.PyCompileError.__init__",
        "posixpath.islink",
        "genericpath.exists",
        "os.makedirs"
    ],
    "py_compile._get_default_invalidation_mode": [],
    "py_compile.PyCompileError.__init__": [
        "traceback.format_exception_only",
        "<str>.replace"
    ],
    "zipfile._parents": [
        "zipfile._ancestry"
    ],
    "zipfile._ancestry": [
        "posixpath.split"
    ],
    "zipfile._difference": [
        "<builtin>.set"
    ],
    "zipfile.CompleteDirs._implied_dirs": [
        "<builtin>.map",
        "zipfile._difference"
    ],
    "zipfile.CompleteDirs.namelist": [
        "<builtin>.list",
        "<builtin>.super",
        "zipfile.CompleteDirs._implied_dirs"
    ],
    "zipfile.CompleteDirs._name_set": [
        "zipfile.CompleteDirs.namelist",
        "zipfile.FastLookup.namelist",
        "<builtin>.set"
    ],
    "zipfile.CompleteDirs.resolve_dir": [
        "zipfile.FastLookup._name_set",
        "zipfile.CompleteDirs._name_set"
    ],
    "zipfile.CompleteDirs.make": [
        "<builtin>.vars",
        "<builtin>.isinstance"
    ],
    "zipfile.FastLookup.namelist": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "zipfile.FastLookup._name_set": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "zipfile.Path.__init__": [
        "zipfile.CompleteDirs.make"
    ],
    "zipfile.Path.name": [
        "posixpath.basename",
        "<str>.rstrip"
    ],
    "zipfile.Path.read_text": [
        "_io.TextIOWrapper",
        "zipfile.Path.open"
    ],
    "zipfile.Path.open": [],
    "zipfile.Path.read_bytes": [
        "zipfile.Path.open"
    ],
    "zipfile.Path._is_child": [
        "<str>.rstrip",
        "posixpath.dirname"
    ],
    "zipfile.Path._next": [
        "zipfile.Path.__init__"
    ],
    "zipfile.Path.is_dir": [
        "<str>.endswith"
    ],
    "zipfile.Path.is_file": [
        "zipfile.Path.is_dir"
    ],
    "zipfile.Path.exists": [
        "zipfile.FastLookup._name_set",
        "zipfile.CompleteDirs._name_set"
    ],
    "zipfile.Path.iterdir": [
        "zipfile.Path.is_dir",
        "<builtin>.filter",
        "zipfile.FastLookup.namelist",
        "zipfile.CompleteDirs.namelist",
        "<builtin>.map",
        "<builtin>.ValueError"
    ],
    "zipfile.Path.__str__": [
        "posixpath.join"
    ],
    "zipfile.Path.joinpath": [
        "zipfile.CompleteDirs.resolve_dir",
        "zipfile.Path._next",
        "posixpath.join"
    ],
    "zipfile.Path.parent": [
        "<str>.rstrip",
        "zipfile.Path._next",
        "posixpath.dirname"
    ],
    "importlib.util.resolve_name": [
        "_bootstrap._resolve_name",
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "_bootstrap._resolve_name": [],
    "importlib.util._find_spec_from_path": [
        "_bootstrap._find_spec",
        "<builtin>.ValueError"
    ],
    "_bootstrap._find_spec": [],
    "importlib.util.find_spec": [
        "importlib.util.resolve_name",
        "<builtin>.__import__",
        "_bootstrap._find_spec",
        "<builtin>.ModuleNotFoundError",
        "<builtin>.ValueError"
    ],
    "importlib.util._module_to_load": [
        "<builtin>.type"
    ],
    "importlib.util.set_package": [
        "functools.wraps"
    ],
    "importlib.util.set_loader": [
        "functools.wraps"
    ],
    "importlib.util.module_for_loader": [
        "functools.wraps",
        "warnings.warn"
    ],
    "importlib.util._LazyModule.__getattribute__": [
        "<builtin>.id",
        "<builtin>.ValueError",
        "<builtin>.getattr"
    ],
    "importlib.util._LazyModule.__delattr__": [
        "importlib.util._LazyModule.__getattribute__",
        "<builtin>.delattr"
    ],
    "importlib.util.LazyLoader.__check_eager_loader": [
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "importlib.util.LazyLoader.factory": [
        "importlib.util.LazyLoader.__check_eager_loader"
    ],
    "importlib.util.LazyLoader.__init__": [
        "importlib.util.LazyLoader.__check_eager_loader"
    ],
    "concurrent.futures.process._python_exit": [
        "<builtin>.list",
        "weakref.WeakKeyDictionary.items"
    ],
    "concurrent.futures.process._ExceptionWithTraceback.__init__": [
        "traceback.format_exception",
        "<builtin>.type"
    ],
    "concurrent.futures.process._rebuild_exc": [
        "concurrent.futures.process._RemoteTraceback.__init__"
    ],
    "concurrent.futures.process._RemoteTraceback.__init__": [],
    "concurrent.futures.process._SafeQueue.__init__": [
        "<builtin>.super"
    ],
    "concurrent.futures.process._SafeQueue._on_queue_feeder_error": [
        "concurrent.futures.process._RemoteTraceback.__init__",
        "<builtin>.isinstance",
        "<map>.pop",
        "<builtin>.super",
        "traceback.format_exception",
        "<builtin>.type"
    ],
    "concurrent.futures.process._get_chunks": [
        "<builtin>.zip",
        "<builtin>.tuple"
    ],
    "concurrent.futures.process._sendback_result": [
        "concurrent.futures.process._ResultItem.__init__",
        "concurrent.futures.process._ExceptionWithTraceback.__init__"
    ],
    "concurrent.futures.process._ResultItem.__init__": [],
    "concurrent.futures.process._process_worker": [
        "concurrent.futures.process._sendback_result",
        "logging.Logger.critical",
        "concurrent.futures.process._ExceptionWithTraceback.__init__"
    ],
    "concurrent.futures.process._queue_management_worker": [
        "concurrent.futures.process._queue_management_worker.shutdown_worker",
        "concurrent.futures.process._RemoteTraceback.__init__",
        "multiprocessing.connection.wait",
        "concurrent.futures.process._add_call_item_to_queue",
        "<builtin>.isinstance",
        "concurrent.futures.process._queue_management_worker.shutting_down",
        "traceback.format_exception",
        "<builtin>.type"
    ],
    "concurrent.futures.process._add_call_item_to_queue": [],
    "multiprocessing.connection.wait": [
        "selectors.SelectSelector.__init__"
    ],
    "concurrent.futures.process._queue_management_worker.shutdown_worker": [
        "<builtin>.sum",
        "<builtin>.range"
    ],
    "concurrent.futures.process._queue_management_worker.shutting_down": [],
    "concurrent.futures.process._check_system_limits": [
        "<builtin>.NotImplementedError"
    ],
    "concurrent.futures.process.ProcessPoolExecutor.__init__": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "concurrent.futures.process._check_system_limits",
        "concurrent.futures.process._SafeQueue.__init__",
        "<builtin>.ValueError",
        "concurrent.futures.process._ThreadWakeup.__init__",
        "_thread.allocate_lock",
        "queue.Queue.__init__",
        "<builtin>.min"
    ],
    "queue.Queue.__init__": [
        "_thread.allocate_lock",
        "queue.Queue._init",
        "threading.Condition.__init__"
    ],
    "queue.Queue._init": [
        "_collections.deque"
    ],
    "concurrent.futures.process._ThreadWakeup.__init__": [],
    "concurrent.futures.process.ProcessPoolExecutor._start_queue_management_thread": [
        "concurrent.futures.process.ProcessPoolExecutor._adjust_process_count",
        "_weakref.ref",
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "concurrent.futures.process.ProcessPoolExecutor._adjust_process_count": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "concurrent.futures.process.ProcessPoolExecutor.submit": [
        "<builtin>.TypeError",
        "warnings",
        "<builtin>.len",
        "warnings.warn"
    ],
    "concurrent.futures.process.ProcessPoolExecutor.map": [
        "<builtin>.super",
        "concurrent.futures.process._chain_from_iterable_of_lists",
        "<builtin>.ValueError",
        "concurrent.futures.process._get_chunks"
    ],
    "concurrent.futures.process._chain_from_iterable_of_lists": [],
    "concurrent.futures.process.ProcessPoolExecutor.shutdown": [
        "multiprocessing.queues.Queue.close",
        "multiprocessing.queues.Queue.join_thread",
        "concurrent.futures.process._ThreadWakeup.close",
        "concurrent.futures.process._ThreadWakeup.wakeup",
        "threading.Thread.join"
    ],
    "concurrent.futures.process._ThreadWakeup.wakeup": [],
    "multiprocessing.queues.Queue.close": [
        "multiprocessing.connection._ConnectionBase.close"
    ],
    "multiprocessing.queues.Queue.join_thread": [
        "multiprocessing.util.debug",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.util.debug": [
        "logging.Logger.log"
    ],
    "concurrent.futures.process._ThreadWakeup.close": [],
    "queue.Queue.put_nowait": [
        "queue.Queue.put"
    ],
    "queue.Queue.put": [],
    "queue.Queue.get_nowait": [
        "queue.Queue.get"
    ],
    "queue.Queue.get": [],
    "queue.Queue._qsize": [
        "<builtin>.len"
    ],
    "queue.PriorityQueue._qsize": [
        "<builtin>.len"
    ],
    "queue.PriorityQueue._put": [
        "heapq.heappush"
    ],
    "queue.PriorityQueue._get": [
        "heapq.heappop"
    ],
    "queue.LifoQueue._qsize": [
        "<builtin>.len"
    ],
    "queue.LifoQueue._put": [
        "<list>.append"
    ],
    "queue.LifoQueue._get": [
        "<list>.pop"
    ],
    "queue._PySimpleQueue.__init__": [
        "_collections.deque",
        "threading.Semaphore.__init__"
    ],
    "queue._PySimpleQueue.put": [
        "threading.Semaphore.release"
    ],
    "queue._PySimpleQueue.get": [
        "threading.Semaphore.acquire",
        "<builtin>.ValueError"
    ],
    "queue._PySimpleQueue.put_nowait": [
        "queue._PySimpleQueue.put"
    ],
    "queue._PySimpleQueue.get_nowait": [
        "queue._PySimpleQueue.get"
    ],
    "queue._PySimpleQueue.empty": [
        "<builtin>.len"
    ],
    "queue._PySimpleQueue.qsize": [
        "<builtin>.len"
    ],
    "multiprocessing.context.BaseContext.cpu_count": [
        "<builtin>.NotImplementedError"
    ],
    "multiprocessing.managers": [
        "os",
        "multiprocessing.managers.BaseManager",
        "multiprocessing.shared_memory",
        "multiprocessing.managers.ConditionProxy",
        "multiprocessing.connection",
        "signal",
        "multiprocessing.managers.Namespace",
        "multiprocessing.process",
        "threading",
        "multiprocessing.managers.Server",
        "multiprocessing.managers.EventProxy",
        "multiprocessing.managers.SharedMemoryServer",
        "multiprocessing.context",
        "multiprocessing.managers.NamespaceProxy",
        "<builtin>.type",
        "multiprocessing.util",
        "multiprocessing.managers.IteratorProxy",
        "multiprocessing.managers.BaseManager.register",
        "multiprocessing.managers._SharedMemoryTracker",
        "multiprocessing.managers.State",
        "multiprocessing.managers.Value",
        "multiprocessing.managers.SyncManager",
        "<builtin>.getattr",
        "multiprocessing.managers.BarrierProxy",
        "multiprocessing.managers.SharedMemoryManager",
        "queue",
        "traceback",
        "multiprocessing.managers.PoolProxy",
        "multiprocessing.managers.Token",
        "array",
        "multiprocessing.managers.RemoteError",
        "multiprocessing.pool",
        "multiprocessing.managers.BaseProxy",
        "multiprocessing.reduction.ForkingPickler.register",
        "multiprocessing.managers.AcquirerProxy",
        "multiprocessing.managers.ValueProxy",
        "multiprocessing.managers.MakeProxyType",
        "multiprocessing.managers.ListProxy",
        "multiprocessing.managers.ProcessLocalSet"
    ],
    "multiprocessing.context.BaseContext.Manager": [
        "multiprocessing.managers",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.managers.BaseManager.start"
    ],
    "multiprocessing.pool": [
        "multiprocessing.pool.ApplyResult",
        "threading",
        "multiprocessing.util",
        "multiprocessing.pool.ExceptionWithTraceback",
        "multiprocessing.connection",
        "os",
        "multiprocessing.pool._PoolCache",
        "multiprocessing.pool.ThreadPool",
        "multiprocessing.pool.Pool",
        "multiprocessing.pool.RemoteTraceback",
        "multiprocessing.pool.MaybeEncodingError",
        "multiprocessing.pool.MapResult",
        "queue",
        "multiprocessing.pool.IMapIterator",
        "collections",
        "multiprocessing.pool.IMapUnorderedIterator",
        "traceback",
        "warnings"
    ],
    "multiprocessing.pool.RemoteTraceback": [],
    "multiprocessing.pool.ExceptionWithTraceback": [],
    "multiprocessing.pool.MaybeEncodingError": [],
    "multiprocessing.pool._PoolCache": [],
    "multiprocessing.pool.Pool": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "multiprocessing.pool.ApplyResult": [],
    "multiprocessing.pool.MapResult": [],
    "multiprocessing.pool.IMapIterator": [],
    "multiprocessing.pool.IMapUnorderedIterator": [],
    "multiprocessing.pool.ThreadPool": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.shared_memory": [
        "os",
        "secrets",
        "_posixshmem",
        "multiprocessing.shared_memory.SharedMemory",
        "struct",
        "functools",
        "mmap",
        "multiprocessing.shared_memory.ShareableList"
    ],
    "mmap": [],
    "secrets": [
        "binascii",
        "os",
        "hmac",
        "base64",
        "random"
    ],
    "hmac": [
        "<builtin>.range",
        "<builtin>.bytes",
        "hmac.HMAC",
        "hashlib",
        "_hashlib",
        "warnings"
    ],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "_posixshmem": [],
    "multiprocessing.shared_memory.SharedMemory": [
        "<builtin>.property"
    ],
    "multiprocessing.shared_memory.ShareableList": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "multiprocessing.managers.Token": [],
    "multiprocessing.managers.RemoteError": [],
    "multiprocessing.managers.Server": [],
    "multiprocessing.managers.State": [],
    "multiprocessing.managers.BaseManager": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "multiprocessing.managers.ProcessLocalSet": [],
    "multiprocessing.managers.BaseProxy": [
        "<builtin>.staticmethod",
        "multiprocessing.util.ForkAwareThreadLock.__init__"
    ],
    "multiprocessing.util.ForkAwareThreadLock.__init__": [
        "multiprocessing.util.register_after_fork",
        "multiprocessing.util.ForkAwareThreadLock._reset"
    ],
    "multiprocessing.util.ForkAwareThreadLock._reset": [
        "_thread.allocate_lock"
    ],
    "multiprocessing.util.register_after_fork": [
        "<builtin>.next",
        "<builtin>.id"
    ],
    "multiprocessing.managers.Namespace": [],
    "multiprocessing.managers.Value": [
        "<builtin>.property"
    ],
    "multiprocessing.managers.IteratorProxy": [],
    "multiprocessing.managers.AcquirerProxy": [],
    "multiprocessing.managers.ConditionProxy": [],
    "multiprocessing.managers.EventProxy": [],
    "multiprocessing.managers.BarrierProxy": [
        "<builtin>.property"
    ],
    "multiprocessing.managers.NamespaceProxy": [],
    "multiprocessing.managers.ValueProxy": [
        "<builtin>.property"
    ],
    "multiprocessing.managers.MakeProxyType": [
        "<builtin>.exec",
        "<builtin>.tuple",
        "<builtin>.type"
    ],
    "multiprocessing.managers.ListProxy": [],
    "multiprocessing.managers.PoolProxy": [],
    "multiprocessing.managers.SyncManager": [],
    "multiprocessing.managers.BaseManager.register": [
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<map>.copy",
        "<builtin>.list",
        "<builtin>.type"
    ],
    "multiprocessing.managers._SharedMemoryTracker": [],
    "multiprocessing.managers.SharedMemoryServer": [],
    "multiprocessing.managers.SharedMemoryManager": [],
    "multiprocessing.context.BaseContext.get_context": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.managers.BaseManager.start": [
        "<builtin>.TypeError",
        "multiprocessing.connection._ConnectionBase.close",
        "<builtin>.callable",
        "multiprocessing.connection.Pipe",
        "<builtin>.str",
        "multiprocessing.connection._ConnectionBase.recv",
        "multiprocessing.util.Finalize.__init__",
        "<builtin>.type"
    ],
    "multiprocessing.connection.Pipe": [
        "multiprocessing.connection.arbitrary_address"
    ],
    "multiprocessing.connection.arbitrary_address": [
        "multiprocessing.util.get_temp_dir",
        "tempfile.mktemp",
        "<builtin>.next",
        "<builtin>.ValueError"
    ],
    "multiprocessing.util.get_temp_dir": [
        "<map>.get",
        "shutil",
        "tempfile.mkdtemp",
        "multiprocessing.process.current_process",
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.util.info",
        "tempfile"
    ],
    "multiprocessing.process.current_process": [],
    "multiprocessing.util.info": [
        "logging.Logger.log"
    ],
    "multiprocessing.util.Finalize.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "_weakref.ref",
        "<builtin>.next",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "multiprocessing.connection._ConnectionBase.recv": [
        "multiprocessing.connection.Connection._recv_bytes",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "multiprocessing.connection._ConnectionBase._check_readable",
        "pickle._loads",
        "multiprocessing.connection.PipeConnection._recv_bytes"
    ],
    "multiprocessing.connection._ConnectionBase._check_closed": [
        "<builtin>.OSError"
    ],
    "multiprocessing.connection._ConnectionBase._check_readable": [
        "<builtin>.OSError"
    ],
    "multiprocessing.connection.PipeConnection._recv_bytes": [
        "<builtin>.RuntimeError",
        "<builtin>.min",
        "_io.BytesIO"
    ],
    "multiprocessing.connection._ConnectionBase.close": [
        "multiprocessing.connection.PipeConnection._close",
        "multiprocessing.connection.Connection._close"
    ],
    "multiprocessing.connection.PipeConnection._close": [],
    "multiprocessing.context.BaseContext.Pipe": [
        "multiprocessing.connection.Pipe",
        "multiprocessing.connection"
    ],
    "multiprocessing.synchronize": [
        "multiprocessing.process",
        "threading",
        "multiprocessing.util",
        "<builtin>.range",
        "_multiprocessing",
        "multiprocessing.synchronize.Barrier",
        "<builtin>.list",
        "multiprocessing.synchronize.Event",
        "<builtin>.ImportError",
        "multiprocessing.synchronize.BoundedSemaphore",
        "multiprocessing.synchronize.SemLock",
        "multiprocessing.synchronize.RLock",
        "multiprocessing.synchronize.Condition",
        "multiprocessing.context",
        "tempfile",
        "multiprocessing.synchronize.Lock",
        "multiprocessing.synchronize.Semaphore"
    ],
    "multiprocessing.context.BaseContext.Lock": [
        "multiprocessing.synchronize.Lock.__init__",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize"
    ],
    "multiprocessing.synchronize.SemLock": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.synchronize.Semaphore": [],
    "multiprocessing.synchronize.BoundedSemaphore": [],
    "multiprocessing.synchronize.Lock": [],
    "multiprocessing.synchronize.RLock": [],
    "multiprocessing.synchronize.Condition": [],
    "multiprocessing.synchronize.Event": [],
    "multiprocessing.synchronize.Barrier": [
        "<builtin>.property"
    ],
    "multiprocessing.synchronize.Lock.__init__": [
        "multiprocessing.synchronize.SemLock.__init__"
    ],
    "multiprocessing.synchronize.SemLock.__init__": [
        "multiprocessing.util.register_after_fork",
        "multiprocessing.context.BaseContext.get_start_method",
        "<builtin>.range",
        "multiprocessing.context.DefaultContext.get_context",
        "multiprocessing.resource_tracker",
        "multiprocessing.synchronize.SemLock._make_methods",
        "multiprocessing.synchronize.SemLock._make_name",
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.resource_tracker.ResourceTracker.register",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.context.DefaultContext.get_context": [
        "<builtin>.super"
    ],
    "multiprocessing.context.BaseContext.get_start_method": [],
    "multiprocessing.synchronize.SemLock._make_name": [
        "<builtin>.next",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.synchronize.SemLock._make_methods": [],
    "multiprocessing.resource_tracker": [
        "threading",
        "multiprocessing.util",
        "os",
        "_multiprocessing",
        "<map>.update",
        "multiprocessing.spawn",
        "multiprocessing.resource_tracker.ResourceTracker",
        "_posixshmem",
        "multiprocessing.resource_tracker.ResourceTracker.__init__",
        "<builtin>.hasattr",
        "signal",
        "warnings"
    ],
    "multiprocessing.spawn": [
        "multiprocessing.process",
        "multiprocessing.util",
        "runpy",
        "os",
        "ntpath.join",
        "types",
        "<builtin>.getattr",
        "posixpath.join",
        "multiprocessing.context"
    ],
    "runpy": [
        "io",
        "os",
        "pkgutil",
        "types",
        "runpy._TempModule",
        "runpy._ModifiedArgv0",
        "<builtin>.len",
        "<builtin>.print",
        "runpy._run_module_as_main",
        "runpy._Error",
        "importlib.util",
        "importlib.machinery"
    ],
    "pkgutil": [
        "pkgutil.ImpImporter",
        "os",
        "functools.singledispatch",
        "types",
        "importlib",
        "pkgutil.ImpLoader",
        "importlib.util",
        "collections",
        "importlib.machinery",
        "functools",
        "warnings",
        "collections.namedtuple",
        "posixpath"
    ],
    "pkgutil.ImpImporter": [],
    "pkgutil.ImpLoader": [],
    "runpy._TempModule": [],
    "runpy._ModifiedArgv0": [],
    "runpy._Error": [],
    "runpy._run_module_as_main": [
        "runpy._run_code",
        "runpy._get_module_details",
        "runpy._get_main_module_details"
    ],
    "runpy._get_main_module_details": [
        "runpy._get_module_details",
        "<builtin>.str"
    ],
    "runpy._get_module_details": [
        "warnings.warn",
        "<str>.rpartition",
        "<builtin>.RuntimeWarning",
        "<builtin>.format",
        "<str>.endswith",
        "runpy._get_module_details",
        "<builtin>.hasattr",
        "<str>.startswith",
        "<builtin>.__import__",
        "warnings",
        "<builtin>.type"
    ],
    "<builtin>.RuntimeWarning": [],
    "runpy._run_code": [
        "<builtin>.exec",
        "<map>.update"
    ],
    "multiprocessing.resource_tracker.ResourceTracker": [],
    "multiprocessing.resource_tracker.ResourceTracker.__init__": [
        "_thread.allocate_lock"
    ],
    "multiprocessing.resource_tracker.ResourceTracker.register": [
        "multiprocessing.resource_tracker.ResourceTracker._send"
    ],
    "multiprocessing.resource_tracker.ResourceTracker._send": [
        "<builtin>.ValueError",
        "<str>.encode",
        "multiprocessing.resource_tracker.ResourceTracker.ensure_running",
        "<builtin>.len"
    ],
    "multiprocessing.resource_tracker.ResourceTracker.ensure_running": [],
    "multiprocessing.context.BaseContext.RLock": [
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize.RLock.__init__",
        "multiprocessing.synchronize"
    ],
    "multiprocessing.synchronize.RLock.__init__": [
        "multiprocessing.synchronize.SemLock.__init__"
    ],
    "multiprocessing.context.BaseContext.Condition": [
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize.Condition.__init__",
        "multiprocessing.synchronize"
    ],
    "multiprocessing.synchronize.Condition.__init__": [
        "multiprocessing.context.BaseContext.Semaphore",
        "multiprocessing.context.BaseContext.RLock",
        "multiprocessing.synchronize.Condition._make_methods"
    ],
    "multiprocessing.context.BaseContext.Semaphore": [
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize.Semaphore.__init__",
        "multiprocessing.synchronize"
    ],
    "multiprocessing.synchronize.Semaphore.__init__": [
        "multiprocessing.synchronize.SemLock.__init__"
    ],
    "multiprocessing.synchronize.Condition._make_methods": [],
    "multiprocessing.context.BaseContext.BoundedSemaphore": [
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize",
        "multiprocessing.synchronize.BoundedSemaphore.__init__"
    ],
    "multiprocessing.synchronize.BoundedSemaphore.__init__": [
        "multiprocessing.synchronize.SemLock.__init__"
    ],
    "multiprocessing.context.BaseContext.Event": [
        "multiprocessing.synchronize.Event.__init__",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize"
    ],
    "multiprocessing.synchronize.Event.__init__": [
        "multiprocessing.context.BaseContext.Semaphore",
        "multiprocessing.context.BaseContext.Condition",
        "multiprocessing.context.BaseContext.Lock"
    ],
    "multiprocessing.context.BaseContext.Barrier": [
        "multiprocessing.synchronize.Barrier.__init__",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.synchronize"
    ],
    "multiprocessing.synchronize.Barrier.__init__": [
        "multiprocessing.heap.BufferWrapper.__init__",
        "multiprocessing.context.BaseContext.Condition",
        "multiprocessing.heap",
        "multiprocessing.synchronize.Barrier.__setstate__",
        "struct"
    ],
    "multiprocessing.heap": [
        "multiprocessing.heap.Heap",
        "threading",
        "multiprocessing.util",
        "os",
        "multiprocessing.reduction.ForkingPickler.register",
        "multiprocessing.heap.BufferWrapper",
        "multiprocessing.heap.Arena",
        "multiprocessing.context",
        "collections",
        "bisect",
        "tempfile",
        "mmap"
    ],
    "multiprocessing.heap.Arena": [],
    "multiprocessing.heap.Heap": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.heap.BufferWrapper": [
        "multiprocessing.heap.Heap.__init__"
    ],
    "multiprocessing.heap.Heap.__init__": [
        "_thread.allocate_lock",
        "_collections.defaultdict"
    ],
    "multiprocessing.heap.BufferWrapper.__init__": [
        "multiprocessing.heap.Heap.malloc",
        "multiprocessing.util.Finalize.__init__",
        "<builtin>.ValueError",
        "<builtin>.OverflowError"
    ],
    "multiprocessing.heap.Heap.malloc": [
        "multiprocessing.heap.Heap.__init__",
        "<builtin>.ValueError",
        "<builtin>.OverflowError"
    ],
    "multiprocessing.synchronize.Barrier.__setstate__": [],
    "multiprocessing.context.BaseContext.Queue": [
        "multiprocessing.queues",
        "multiprocessing.queues.Queue.__init__",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.queues.Queue.__init__": [
        "multiprocessing.util.register_after_fork",
        "multiprocessing.synchronize",
        "multiprocessing.context.BaseContext.BoundedSemaphore",
        "multiprocessing.context.BaseContext.Lock",
        "multiprocessing.connection.Pipe",
        "multiprocessing.queues.Queue._after_fork"
    ],
    "multiprocessing.queues.Queue._after_fork": [
        "_collections.deque",
        "_thread.allocate_lock",
        "multiprocessing.util.debug",
        "threading.Condition.__init__"
    ],
    "multiprocessing.context.BaseContext.JoinableQueue": [
        "multiprocessing.queues",
        "multiprocessing.queues.JoinableQueue.__init__",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.queues.JoinableQueue.__init__": [
        "multiprocessing.context.BaseContext.Semaphore",
        "multiprocessing.context.BaseContext.Condition",
        "multiprocessing.queues.Queue.__init__"
    ],
    "multiprocessing.context.BaseContext.SimpleQueue": [
        "multiprocessing.queues",
        "multiprocessing.queues.SimpleQueue.__init__",
        "multiprocessing.context.BaseContext.get_context"
    ],
    "multiprocessing.queues.SimpleQueue.__init__": [
        "multiprocessing.connection.Pipe",
        "multiprocessing.context.BaseContext.Lock"
    ],
    "multiprocessing.context.BaseContext.Pool": [
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.pool.Pool.__init__",
        "multiprocessing.pool"
    ],
    "multiprocessing.pool.Pool.__init__": [
        "<builtin>.TypeError",
        "multiprocessing.pool.Pool._setup_queues",
        "multiprocessing.pool.Pool._repopulate_pool",
        "threading.Thread.start",
        "<builtin>.callable",
        "get_context",
        "multiprocessing.pool.ThreadPool._setup_queues",
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.pool._PoolCache.__init__",
        "queue._PySimpleQueue.__init__",
        "threading.Thread.__init__",
        "multiprocessing.pool.ThreadPool._get_sentinels",
        "<builtin>.ValueError",
        "multiprocessing.pool.Pool._get_sentinels"
    ],
    "get_context": [],
    "multiprocessing.pool.Pool._setup_queues": [],
    "multiprocessing.pool._PoolCache.__init__": [
        "<builtin>.super"
    ],
    "multiprocessing.pool.Pool._repopulate_pool": [
        "multiprocessing.pool.Pool._repopulate_pool_static"
    ],
    "multiprocessing.pool.Pool._repopulate_pool_static": [
        "<builtin>.range",
        "multiprocessing.dummy.DummyProcess.start",
        "<builtin>.len",
        "<list>.append",
        "multiprocessing.pool.ThreadPool.Process",
        "multiprocessing.util.debug",
        "multiprocessing.pool.Pool.Process"
    ],
    "multiprocessing.pool.Pool.Process": [],
    "multiprocessing.pool.Pool._get_sentinels": [],
    "multiprocessing.sharedctypes": [
        "weakref.WeakKeyDictionary.__init__",
        "multiprocessing.sharedctypes.Synchronized",
        "multiprocessing.sharedctypes.SynchronizedArray",
        "multiprocessing.heap",
        "weakref",
        "multiprocessing.context",
        "multiprocessing.sharedctypes.SynchronizedString",
        "ctypes",
        "multiprocessing.sharedctypes.SynchronizedBase"
    ],
    "multiprocessing.context.BaseContext.RawValue": [
        "multiprocessing.sharedctypes",
        "multiprocessing.sharedctypes.RawValue"
    ],
    "ctypes": [
        "ctypes.c_wchar",
        "os",
        "ctypes.c_char",
        "ctypes.CDLL",
        "ctypes.LibraryLoader",
        "ctypes.HRESULT",
        "ctypes._endian",
        "ctypes._reset_cache",
        "struct",
        "ctypes.c_ulong",
        "ctypes.c_byte",
        "ctypes.c_char_p",
        "ctypes.c_int",
        "ctypes.c_wchar_p",
        "ctypes.c_short",
        "ctypes.LibraryLoader.__init__",
        "ctypes.c_void_p",
        "ctypes.c_long",
        "<builtin>.Exception",
        "ctypes.c_float",
        "_ctypes",
        "ctypes.c_ubyte",
        "ctypes.WinDLL",
        "ctypes.PYFUNCTYPE",
        "ctypes.c_longlong",
        "ctypes.c_double",
        "ctypes.PyDLL",
        "ctypes.c_uint",
        "ctypes.c_bool",
        "ctypes.OleDLL",
        "ctypes._check_size",
        "ctypes.py_object",
        "<builtin>.int",
        "ctypes.c_ulonglong",
        "ctypes.CFUNCTYPE",
        "ctypes.c_longdouble",
        "ctypes.c_ushort"
    ],
    "_ctypes": [],
    "ctypes.py_object": [],
    "ctypes._check_size": [
        "struct",
        "<builtin>.SystemError"
    ],
    "ctypes.c_short": [],
    "ctypes.c_ushort": [],
    "ctypes.c_long": [],
    "ctypes.c_ulong": [],
    "ctypes.c_int": [],
    "ctypes.c_uint": [],
    "ctypes.c_float": [],
    "ctypes.c_double": [],
    "ctypes.c_longdouble": [],
    "ctypes.c_longlong": [],
    "ctypes.c_ulonglong": [],
    "ctypes.c_ubyte": [],
    "ctypes.c_byte": [],
    "ctypes.c_char": [],
    "ctypes.c_char_p": [],
    "ctypes.c_void_p": [],
    "ctypes.c_bool": [],
    "ctypes.c_wchar_p": [],
    "ctypes.c_wchar": [],
    "ctypes.CDLL": [],
    "ctypes.PyDLL": [],
    "ctypes.WinDLL": [],
    "ctypes.HRESULT": [],
    "ctypes.OleDLL": [],
    "ctypes.LibraryLoader": [],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "ctypes.CFUNCTYPE.CFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.CFUNCTYPE.CFunctionType": [],
    "ctypes.PYFUNCTYPE": [
        "ctypes.PYFUNCTYPE.CFunctionType"
    ],
    "ctypes.PYFUNCTYPE.CFunctionType": [],
    "ctypes._endian": [
        "ctypes._endian.BigEndianStructure",
        "ctypes._endian._swapped_meta",
        "ctypes",
        "<builtin>.type"
    ],
    "ctypes._endian._swapped_meta": [],
    "ctypes._endian.BigEndianStructure": [],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "multiprocessing.sharedctypes.SynchronizedBase": [],
    "multiprocessing.sharedctypes.Synchronized": [
        "multiprocessing.sharedctypes.make_property"
    ],
    "multiprocessing.sharedctypes.make_property": [
        "<builtin>.exec"
    ],
    "multiprocessing.sharedctypes.SynchronizedArray": [],
    "multiprocessing.sharedctypes.SynchronizedString": [
        "multiprocessing.sharedctypes.make_property"
    ],
    "multiprocessing.sharedctypes.RawValue": [
        "<map>.get",
        "<map>.__init__",
        "multiprocessing.sharedctypes._new_value"
    ],
    "multiprocessing.sharedctypes._new_value": [
        "multiprocessing.sharedctypes.rebuild_ctype",
        "multiprocessing.heap.BufferWrapper.__init__"
    ],
    "multiprocessing.sharedctypes.rebuild_ctype": [
        "multiprocessing.heap.BufferWrapper.create_memoryview",
        "multiprocessing.reduction.ForkingPickler.register"
    ],
    "multiprocessing.heap.BufferWrapper.create_memoryview": [
        "<builtin>.memoryview"
    ],
    "<map>.__init__": [],
    "multiprocessing.context.BaseContext.RawArray": [
        "multiprocessing.sharedctypes",
        "multiprocessing.sharedctypes.RawArray"
    ],
    "multiprocessing.sharedctypes.RawArray": [
        "<map>.get",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<map>.__init__",
        "multiprocessing.sharedctypes._new_value"
    ],
    "multiprocessing.context.BaseContext.Value": [
        "multiprocessing.sharedctypes",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.sharedctypes.Value"
    ],
    "multiprocessing.sharedctypes.Value": [
        "multiprocessing.context.BaseContext.RLock",
        "multiprocessing.sharedctypes.synchronized",
        "get_context",
        "multiprocessing.sharedctypes.RawValue",
        "<builtin>.hasattr",
        "<builtin>.AttributeError"
    ],
    "multiprocessing.sharedctypes.synchronized": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "multiprocessing.sharedctypes.make_property",
        "get_context"
    ],
    "multiprocessing.context.BaseContext.Array": [
        "multiprocessing.sharedctypes",
        "multiprocessing.context.BaseContext.get_context",
        "multiprocessing.sharedctypes.Array"
    ],
    "multiprocessing.sharedctypes.Array": [
        "multiprocessing.context.BaseContext.RLock",
        "multiprocessing.sharedctypes.synchronized",
        "get_context",
        "<builtin>.hasattr",
        "multiprocessing.sharedctypes.RawArray",
        "<builtin>.AttributeError"
    ],
    "multiprocessing.context.BaseContext.freeze_support": [
        "multiprocessing.spawn",
        "multiprocessing.spawn.freeze_support",
        "<builtin>.getattr"
    ],
    "multiprocessing.spawn.freeze_support": [
        "<builtin>.int",
        "multiprocessing.spawn.is_forking",
        "multiprocessing.spawn.spawn_main"
    ],
    "multiprocessing.spawn.is_forking": [
        "<builtin>.len"
    ],
    "multiprocessing.spawn.spawn_main": [
        "multiprocessing.spawn._main",
        "multiprocessing.reduction.duplicate",
        "multiprocessing.resource_tracker",
        "multiprocessing.spawn.is_forking"
    ],
    "multiprocessing.reduction.duplicate": [],
    "multiprocessing.spawn._main": [
        "multiprocessing.spawn.prepare",
        "os.fdopen",
        "multiprocessing.process.current_process",
        "pickle._load"
    ],
    "multiprocessing.spawn.prepare": [
        "multiprocessing.spawn._fixup_main_from_name",
        "set_start_method",
        "multiprocessing.util.log_to_stderr",
        "multiprocessing.process.current_process",
        "multiprocessing.spawn._fixup_main_from_path",
        "multiprocessing.util.get_logger",
        "logging.Logger.setLevel"
    ],
    "multiprocessing.util.log_to_stderr": [
        "logging.Logger.addHandler",
        "logging",
        "logging.Formatter.__init__",
        "logging.Handler.setFormatter",
        "logging.StreamHandler.__init__",
        "multiprocessing.util.get_logger",
        "logging.Logger.setLevel"
    ],
    "multiprocessing.util.get_logger": [
        "logging",
        "logging._acquireLock",
        "<builtin>.hasattr",
        "logging.getLogger"
    ],
    "set_start_method": [],
    "multiprocessing.spawn._fixup_main_from_path": [
        "posixpath.splitext",
        "<builtin>.getattr",
        "ntpath.splitext",
        "runpy.run_path",
        "<list>.append",
        "posixpath.basename",
        "ntpath.basename"
    ],
    "runpy.run_path": [
        "runpy._TempModule.__exit__",
        "pkgutil.get_importer",
        "<str>.rpartition",
        "runpy._TempModule.__enter__",
        "runpy._get_main_module_details",
        "runpy._TempModule.__init__",
        "<builtin>.isinstance",
        "runpy._ModifiedArgv0.__init__",
        "runpy._run_module_code",
        "runpy._get_code_from_file",
        "<builtin>.type"
    ],
    "pkgutil.get_importer": [],
    "runpy._TempModule.__init__": [],
    "runpy._TempModule.__enter__": [
        "<list>.append"
    ],
    "runpy._TempModule.__exit__": [],
    "runpy._ModifiedArgv0.__init__": [
        "<builtin>.object"
    ],
    "runpy._get_code_from_file": [
        "_io.open_code",
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.compile",
        "pkgutil.read_code"
    ],
    "_io.open_code": [],
    "pkgutil.read_code": [],
    "runpy._run_module_code": [
        "runpy._TempModule.__enter__",
        "runpy._TempModule.__exit__",
        "runpy._ModifiedArgv0.__init__",
        "runpy._TempModule.__init__"
    ],
    "multiprocessing.spawn._fixup_main_from_name": [
        "<builtin>.getattr",
        "<list>.append",
        "runpy.run_module"
    ],
    "runpy.run_module": [
        "runpy._run_code",
        "runpy._get_module_details",
        "runpy._run_module_code"
    ],
    "multiprocessing.context.BaseContext.get_logger": [
        "multiprocessing.util",
        "multiprocessing.util.get_logger"
    ],
    "multiprocessing.context.BaseContext.log_to_stderr": [
        "multiprocessing.util",
        "multiprocessing.util.log_to_stderr"
    ],
    "multiprocessing.context.BaseContext.allow_connection_pickling": [
        "multiprocessing.connection"
    ],
    "multiprocessing.context.BaseContext.set_executable": [
        "multiprocessing.spawn",
        "multiprocessing.spawn.set_executable"
    ],
    "multiprocessing.spawn.set_executable": [],
    "multiprocessing.forkserver": [
        "multiprocessing.process",
        "threading",
        "multiprocessing.util",
        "multiprocessing.connection",
        "os",
        "socket",
        "multiprocessing.spawn",
        "multiprocessing.forkserver.ForkServer",
        "multiprocessing.context",
        "selectors",
        "signal",
        "struct",
        "warnings",
        "multiprocessing.forkserver.ForkServer.__init__",
        "multiprocessing.resource_tracker"
    ],
    "multiprocessing.context.BaseContext.set_forkserver_preload": [
        "multiprocessing.forkserver",
        "multiprocessing.forkserver.ForkServer.set_forkserver_preload"
    ],
    "multiprocessing.forkserver.ForkServer": [],
    "multiprocessing.forkserver.ForkServer.__init__": [
        "_thread.allocate_lock"
    ],
    "multiprocessing.forkserver.ForkServer.set_forkserver_preload": [
        "<builtin>.TypeError",
        "<builtin>.all",
        "<builtin>.type"
    ],
    "multiprocessing.context.BaseContext.set_start_method": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.context.BaseContext.reducer": [
        "<builtin>.globals"
    ],
    "multiprocessing.context.Process._Popen": [
        "multiprocessing.context.DefaultContext.get_context"
    ],
    "multiprocessing.context.DefaultContext.set_start_method": [
        "multiprocessing.context.DefaultContext.get_context",
        "<builtin>.RuntimeError"
    ],
    "multiprocessing.popen_spawn_win32": [
        "multiprocessing.util",
        "os",
        "multiprocessing.popen_spawn_win32.Popen",
        "multiprocessing.spawn",
        "<builtin>.getattr",
        "multiprocessing.popen_spawn_win32._path_eq",
        "signal",
        "multiprocessing.context"
    ],
    "multiprocessing.context.SpawnProcess._Popen": [
        "multiprocessing.popen_spawn_win32",
        "multiprocessing.popen_spawn_win32.Popen.__init__"
    ],
    "multiprocessing.popen_spawn_win32._path_eq": [
        "posixpath.normcase",
        "ntpath.normcase"
    ],
    "multiprocessing.popen_spawn_win32.Popen": [],
    "multiprocessing.popen_spawn_win32.Popen.__init__": [
        "<builtin>.int",
        "multiprocessing.spawn.get_command_line",
        "multiprocessing.reduction.dump",
        "multiprocessing.context.set_spawning_popen",
        "os._Environ.copy",
        "multiprocessing.popen_spawn_win32._path_eq",
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.spawn.get_preparation_data",
        "multiprocessing.spawn.get_executable",
        "<builtin>.open"
    ],
    "multiprocessing.spawn.get_preparation_data": [
        "get_start_method",
        "ntpath.join",
        "multiprocessing.spawn._check_not_importing_main",
        "posixpath.normpath",
        "ntpath.isabs",
        "multiprocessing.process.current_process",
        "<builtin>.getattr",
        "posixpath.isabs",
        "ntpath.normpath",
        "posixpath.join",
        "<builtin>.dict",
        "logging.Logger.getEffectiveLevel"
    ],
    "multiprocessing.spawn._check_not_importing_main": [
        "<builtin>.RuntimeError",
        "multiprocessing.process.current_process",
        "<builtin>.getattr"
    ],
    "get_start_method": [],
    "multiprocessing.spawn.get_command_line": [
        "<builtin>.getattr",
        "subprocess._args_from_interpreter_flags"
    ],
    "multiprocessing.spawn.get_executable": [],
    "multiprocessing.context.set_spawning_popen": [],
    "multiprocessing.reduction.dump": [
        "multiprocessing.reduction.ForkingPickler.__init__",
        "pickle._Pickler.dump"
    ],
    "multiprocessing.reduction.ForkingPickler.__init__": [
        "<map>.update",
        "<builtin>.super",
        "<map>.copy"
    ],
    "multiprocessing.popen_fork": [
        "multiprocessing.util",
        "multiprocessing.popen_fork.Popen",
        "os",
        "signal"
    ],
    "multiprocessing.context.ForkProcess._Popen": [
        "multiprocessing.popen_fork.Popen.__init__",
        "multiprocessing.popen_fork"
    ],
    "multiprocessing.popen_fork.Popen": [],
    "multiprocessing.popen_fork.Popen.__init__": [
        "multiprocessing.popen_fork.Popen._launch",
        "multiprocessing.util._flush_std_streams",
        "multiprocessing.popen_forkserver.Popen._launch"
    ],
    "multiprocessing.util._flush_std_streams": [],
    "multiprocessing.popen_fork.Popen._launch": [
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.popen_forkserver": [
        "io",
        "multiprocessing.util",
        "os",
        "multiprocessing.popen_forkserver._DupFd",
        "multiprocessing.spawn",
        "<builtin>.ImportError",
        "multiprocessing.popen_forkserver.Popen",
        "multiprocessing.context",
        "multiprocessing.forkserver",
        "multiprocessing.popen_fork"
    ],
    "multiprocessing.context.ForkServerProcess._Popen": [
        "multiprocessing.popen_forkserver.Popen.__init__",
        "multiprocessing.popen_forkserver"
    ],
    "multiprocessing.popen_forkserver._DupFd": [],
    "multiprocessing.popen_forkserver.Popen": [],
    "multiprocessing.popen_forkserver.Popen.__init__": [
        "<builtin>.super"
    ],
    "multiprocessing.context.ForkServerContext._check_available": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.context.get_spawning_popen": [
        "<builtin>.getattr"
    ],
    "multiprocessing.context.assert_spawning": [
        "multiprocessing.context.get_spawning_popen",
        "<builtin>.RuntimeError",
        "<builtin>.type"
    ],
    "multiprocessing.process.active_children": [
        "multiprocessing.process._cleanup",
        "<builtin>.list"
    ],
    "multiprocessing.process._cleanup": [
        "<builtin>.list"
    ],
    "multiprocessing.process.BaseProcess.__init__": [
        "<builtin>.str",
        "<builtin>.dict",
        "<map>.copy",
        "_weakrefset.WeakSet.add",
        "<builtin>.next",
        "<builtin>.tuple",
        "<builtin>.type"
    ],
    "multiprocessing.process.BaseProcess._check_closed": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.process.BaseProcess.start": [
        "<map>.get",
        "multiprocessing.process._cleanup",
        "multiprocessing.process.BaseProcess._check_closed",
        "multiprocessing.process.BaseProcess._Popen"
    ],
    "multiprocessing.process.BaseProcess._Popen": [],
    "multiprocessing.process.BaseProcess.terminate": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.kill": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.join": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.is_alive": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.close": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.process.BaseProcess.daemon": [
        "<map>.get"
    ],
    "multiprocessing.process.BaseProcess.exitcode": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.ident": [
        "multiprocessing.process.BaseProcess._check_closed"
    ],
    "multiprocessing.process.BaseProcess.sentinel": [
        "multiprocessing.process.BaseProcess._check_closed",
        "<builtin>.ValueError"
    ],
    "multiprocessing.process.BaseProcess.__repr__": [
        "<map>.get",
        "<list>.append"
    ],
    "multiprocessing.process.BaseProcess._bootstrap": [
        "multiprocessing.util",
        "threading.main_thread",
        "threading.Thread._set_native_id",
        "multiprocessing.process.BaseProcess.run",
        "<map>.clear",
        "traceback",
        "<builtin>.str",
        "<builtin>.set",
        "multiprocessing.util._close_stdin",
        "<builtin>.isinstance",
        "multiprocessing.process._ParentProcess.__init__",
        "multiprocessing.util._run_after_forkers",
        "multiprocessing.util.info",
        "multiprocessing.context",
        "traceback.print_exc",
        "multiprocessing.context._force_start_method"
    ],
    "multiprocessing.context._force_start_method": [],
    "multiprocessing.util._close_stdin": [
        "<builtin>.open"
    ],
    "multiprocessing.process._ParentProcess.__init__": [],
    "multiprocessing.util._run_after_forkers": [
        "multiprocessing.util.info",
        "<builtin>.list",
        "weakref.WeakValueDictionary.items"
    ],
    "multiprocessing.process.BaseProcess.run": [],
    "multiprocessing.process.AuthenticationString.__reduce__": [
        "<builtin>.TypeError",
        "multiprocessing.context",
        "multiprocessing.context.get_spawning_popen",
        "<builtin>.bytes"
    ],
    "multiprocessing.process._ParentProcess.is_alive": [
        "multiprocessing.connection.wait",
        "multiprocessing.connection"
    ],
    "multiprocessing.process._ParentProcess.join": [
        "multiprocessing.connection.wait",
        "multiprocessing.connection"
    ],
    "multiprocessing.reduction.ForkingPickler.dumps": [
        "multiprocessing.reduction.ForkingPickler.__init__",
        "pickle._Pickler.dump",
        "_io.BytesIO"
    ],
    "multiprocessing.reduction.sendfds": [
        "<builtin>.RuntimeError",
        "<builtin>.bytes"
    ],
    "multiprocessing.reduction.recvfds": [
        "<builtin>.list",
        "<builtin>.AssertionError",
        "<builtin>.RuntimeError",
        "<builtin>.len"
    ],
    "multiprocessing.reduction.send_handle": [
        "multiprocessing.reduction.sendfds",
        "socket.fromfd"
    ],
    "multiprocessing.reduction.recv_handle": [
        "multiprocessing.reduction.recvfds",
        "socket.fromfd"
    ],
    "multiprocessing.reduction.DupFd": [
        "multiprocessing.resource_sharer.DupFd.__init__",
        "multiprocessing.context.get_spawning_popen",
        "<builtin>.ValueError",
        "multiprocessing.resource_sharer"
    ],
    "multiprocessing.resource_sharer": [
        "multiprocessing.process",
        "threading",
        "multiprocessing.util",
        "os",
        "multiprocessing.resource_sharer.DupSocket",
        "socket",
        "multiprocessing.resource_sharer.DupFd",
        "multiprocessing.resource_sharer._ResourceSharer.__init__",
        "multiprocessing.resource_sharer._ResourceSharer",
        "signal",
        "multiprocessing.context"
    ],
    "multiprocessing.resource_sharer.DupFd": [],
    "multiprocessing.resource_sharer.DupSocket": [],
    "multiprocessing.resource_sharer._ResourceSharer": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.__init__": [
        "multiprocessing.util.register_after_fork",
        "_thread.allocate_lock"
    ],
    "multiprocessing.resource_sharer.DupFd.__init__": [
        "multiprocessing.resource_sharer._ResourceSharer.register"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.register": [],
    "multiprocessing.reduction._reduce_socket": [
        "multiprocessing.reduction.DupFd"
    ],
    "multiprocessing.reduction._rebuild_socket": [
        "socket.socket.__init__"
    ],
    "multiprocessing.reduction.AbstractReducer.__init__": [
        "multiprocessing.reduction.ForkingPickler.register",
        "<builtin>.type"
    ],
    "multiprocessing.connection._validate_family": [
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "multiprocessing.connection.address_type": [
        "<builtin>.ValueError",
        "multiprocessing.util.is_abstract_socket_namespace",
        "<builtin>.type"
    ],
    "multiprocessing.util.is_abstract_socket_namespace": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "multiprocessing.connection._ConnectionBase.__init__": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.connection._ConnectionBase.__del__": [
        "multiprocessing.connection.PipeConnection._close",
        "multiprocessing.connection.Connection._close"
    ],
    "multiprocessing.connection._ConnectionBase._check_writable": [
        "<builtin>.OSError"
    ],
    "multiprocessing.connection._ConnectionBase._bad_message_length": [
        "multiprocessing.connection._ConnectionBase.close",
        "<builtin>.OSError"
    ],
    "multiprocessing.connection._ConnectionBase.fileno": [
        "multiprocessing.connection._ConnectionBase._check_closed"
    ],
    "multiprocessing.connection._ConnectionBase.send_bytes": [
        "multiprocessing.connection.Connection._send_bytes",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "<builtin>.len",
        "multiprocessing.connection.PipeConnection._send_bytes",
        "<builtin>.ValueError",
        "<builtin>.bytes",
        "multiprocessing.connection._ConnectionBase._check_writable",
        "<builtin>.memoryview"
    ],
    "multiprocessing.connection.PipeConnection._send_bytes": [
        "<builtin>.len"
    ],
    "multiprocessing.connection._ConnectionBase.send": [
        "multiprocessing.connection.Connection._send_bytes",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "multiprocessing.connection.PipeConnection._send_bytes",
        "multiprocessing.reduction.ForkingPickler.dumps",
        "multiprocessing.connection._ConnectionBase._check_writable"
    ],
    "multiprocessing.connection._ConnectionBase.recv_bytes": [
        "multiprocessing.connection._ConnectionBase._bad_message_length",
        "multiprocessing.connection.Connection._recv_bytes",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "multiprocessing.connection._ConnectionBase._check_readable",
        "multiprocessing.connection.PipeConnection._recv_bytes",
        "<builtin>.ValueError"
    ],
    "multiprocessing.connection._ConnectionBase.recv_bytes_into": [
        "BufferTooShort",
        "multiprocessing.connection.Connection._recv_bytes",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "<builtin>.len",
        "multiprocessing.connection._ConnectionBase._check_readable",
        "<builtin>.memoryview",
        "multiprocessing.connection.PipeConnection._recv_bytes",
        "<builtin>.ValueError"
    ],
    "BufferTooShort": [],
    "multiprocessing.connection._ConnectionBase.poll": [
        "multiprocessing.connection._ConnectionBase._check_readable",
        "multiprocessing.connection.Connection._poll",
        "multiprocessing.connection._ConnectionBase._check_closed",
        "multiprocessing.connection.PipeConnection._poll"
    ],
    "multiprocessing.connection.PipeConnection._poll": [
        "<builtin>.bool",
        "multiprocessing.connection.wait"
    ],
    "multiprocessing.connection._ConnectionBase.__exit__": [
        "multiprocessing.connection._ConnectionBase.close"
    ],
    "multiprocessing.connection.PipeConnection._get_more_data": [
        "multiprocessing.connection._ConnectionBase._bad_message_length",
        "<builtin>.len",
        "_io.BytesIO"
    ],
    "multiprocessing.connection.Connection._send": [
        "<builtin>.len"
    ],
    "multiprocessing.connection.Connection._recv": [
        "<builtin>.OSError",
        "<builtin>.len",
        "_io.BytesIO"
    ],
    "multiprocessing.connection.Connection._send_bytes": [
        "multiprocessing.connection.Connection._send",
        "<builtin>.len"
    ],
    "multiprocessing.connection.Connection._recv_bytes": [
        "multiprocessing.connection.Connection._recv"
    ],
    "multiprocessing.connection.Connection._poll": [
        "<builtin>.bool",
        "multiprocessing.connection.wait"
    ],
    "multiprocessing.connection.Listener.__init__": [
        "<builtin>.TypeError",
        "multiprocessing.connection.PipeListener.__init__",
        "multiprocessing.connection.SocketListener.__init__",
        "multiprocessing.connection.address_type",
        "multiprocessing.connection.arbitrary_address",
        "<builtin>.isinstance",
        "multiprocessing.connection._validate_family"
    ],
    "multiprocessing.connection.SocketListener.__init__": [
        "socket.socket.__init__",
        "<builtin>.getattr",
        "socket.socket.close",
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.util.is_abstract_socket_namespace"
    ],
    "multiprocessing.connection.PipeListener.__init__": [
        "multiprocessing.util.sub_debug",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.util.sub_debug": [
        "logging.Logger.log"
    ],
    "multiprocessing.connection.Listener.accept": [
        "multiprocessing.connection.answer_challenge",
        "multiprocessing.connection.deliver_challenge",
        "multiprocessing.connection.SocketListener.accept",
        "multiprocessing.connection.PipeListener.accept",
        "<builtin>.OSError"
    ],
    "multiprocessing.connection.SocketListener.accept": [
        "socket.socket.detach",
        "socket.socket.accept"
    ],
    "multiprocessing.connection.PipeListener.accept": [
        "<list>.pop",
        "<list>.append"
    ],
    "multiprocessing.connection.deliver_challenge": [
        "hmac",
        "hmac.HMAC.digest",
        "hmac.new",
        "multiprocessing.connection._ConnectionBase.send_bytes",
        "<builtin>.isinstance",
        "multiprocessing.connection._ConnectionBase.recv_bytes",
        "AuthenticationError",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "hmac.new": [
        "hmac.HMAC.__init__"
    ],
    "hmac.HMAC.__init__": [
        "<builtin>.TypeError",
        "<str>.ljust",
        "hmac.HMAC.__init__.<lambda1>",
        "<builtin>.callable",
        "warnings.warn",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "hmac.HMAC.update",
        "<str>.translate",
        "<builtin>.type"
    ],
    "hmac.HMAC.__init__.<lambda1>": [],
    "<str>.ljust": [],
    "hmac.HMAC.update": [],
    "hmac.HMAC.digest": [
        "hmac.HMAC._current"
    ],
    "hmac.HMAC._current": [],
    "AuthenticationError": [],
    "multiprocessing.connection.answer_challenge": [
        "hmac",
        "hmac.HMAC.digest",
        "<builtin>.len",
        "hmac.new",
        "multiprocessing.connection._ConnectionBase.recv_bytes",
        "<builtin>.isinstance",
        "multiprocessing.connection._ConnectionBase.send_bytes",
        "AuthenticationError",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "multiprocessing.connection.Listener.close": [
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.connection.SocketListener.close"
    ],
    "multiprocessing.connection.SocketListener.close": [
        "socket.socket.close"
    ],
    "multiprocessing.connection.Listener.__exit__": [
        "multiprocessing.connection.Listener.close"
    ],
    "multiprocessing.connection.Client": [
        "<builtin>.TypeError",
        "multiprocessing.connection.answer_challenge",
        "multiprocessing.connection.deliver_challenge",
        "multiprocessing.connection.SocketClient",
        "multiprocessing.connection.PipeClient",
        "multiprocessing.connection.address_type",
        "<builtin>.isinstance",
        "multiprocessing.connection._validate_family"
    ],
    "multiprocessing.connection.SocketClient": [
        "socket.socket.__init__",
        "<builtin>.getattr",
        "multiprocessing.connection.address_type"
    ],
    "multiprocessing.connection.PipeClient": [
        "multiprocessing.connection._init_timeout",
        "multiprocessing.connection._check_timeout"
    ],
    "multiprocessing.connection._init_timeout": [],
    "multiprocessing.connection._check_timeout": [],
    "multiprocessing.connection.PipeListener._finalize_pipe_listener": [
        "multiprocessing.util.sub_debug"
    ],
    "multiprocessing.connection.ConnectionWrapper.__init__": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "xmlrpc.client": [
        "xmlrpc.client.Marshaller",
        "xmlrpc.client.ResponseError",
        "xmlrpc.client.MultiCall",
        "xmlrpc.client.Fault",
        "xmlrpc.client.Unmarshaller",
        "http.client",
        "xmlrpc.client._MultiCallMethod",
        "xmlrpc.client.ServerProxy",
        "xmlrpc.client.ProtocolError",
        "xmlrpc.client.GzipDecodedResponse",
        "decimal",
        "base64",
        "xmlrpc.client.Transport",
        "xmlrpc.client.MultiCall.__init__",
        "xmlrpc.client._Method",
        "xmlrpc.client.Binary",
        "xmlrpc.client.MultiCallIterator",
        "io",
        "urllib.parse",
        "xmlrpc.client.ExpatParser",
        "gzip",
        "xmlrpc.client.SafeTransport",
        "xmlrpc.client.Error",
        "xmlrpc.client.DateTime",
        "<builtin>.print",
        "datetime",
        "xml.parsers.expat",
        "xmlrpc.client.ServerProxy.__init__"
    ],
    "multiprocessing.connection.XmlListener.accept": [
        "multiprocessing.connection.Listener.accept",
        "xmlrpc.client",
        "multiprocessing.connection.ConnectionWrapper.__init__"
    ],
    "decimal": [
        "_pydecimal",
        "_decimal"
    ],
    "_decimal": [],
    "_pydecimal": [
        "_pydecimal._Log10Memoize.__init__",
        "numbers",
        "_pydecimal.ConversionSyntax",
        "_pydecimal._ContextManager",
        "_pydecimal.Context",
        "_pydecimal.Inexact",
        "collections",
        "_pydecimal.Subnormal",
        "_pydecimal.Decimal",
        "_pydecimal.InvalidContext",
        "collections.namedtuple",
        "<builtin>.pow",
        "_pydecimal.DecimalException",
        "_pydecimal.Underflow",
        "_pydecimal.DivisionUndefined",
        "_pydecimal.Context.__init__",
        "math",
        "_pydecimal.InvalidOperation",
        "_pydecimal.Rounded",
        "re.compile",
        "locale",
        "_pydecimal.Overflow",
        "_pydecimal.DivisionByZero",
        "_pydecimal._Log10Memoize",
        "_pydecimal.Clamped",
        "contextvars",
        "re",
        "_pydecimal._WorkRep",
        "_pydecimal.DivisionImpossible",
        "_pydecimal.FloatOperation"
    ],
    "numbers": [
        "numbers.Number",
        "numbers.Rational",
        "numbers.Integral",
        "numbers.Real",
        "abc",
        "numbers.Complex"
    ],
    "numbers.Number": [],
    "numbers.Complex": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Real": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Rational": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Integral": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "_pydecimal.DecimalException": [],
    "_pydecimal.Clamped": [],
    "_pydecimal.InvalidOperation": [],
    "_pydecimal.ConversionSyntax": [],
    "_pydecimal.DivisionByZero": [],
    "_pydecimal.DivisionImpossible": [],
    "_pydecimal.DivisionUndefined": [],
    "_pydecimal.Inexact": [],
    "_pydecimal.InvalidContext": [],
    "_pydecimal.Rounded": [],
    "_pydecimal.Subnormal": [],
    "_pydecimal.Overflow": [],
    "_pydecimal.Underflow": [],
    "_pydecimal.FloatOperation": [],
    "_pydecimal.Decimal": [
        "<builtin>.dict",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "_pydecimal._ContextManager": [],
    "_pydecimal.Context": [],
    "_pydecimal._WorkRep": [],
    "_pydecimal._Log10Memoize": [],
    "_pydecimal._Log10Memoize.__init__": [],
    "_pydecimal.Context.__init__": [
        "<builtin>.dict",
        "<list>.copy",
        "<builtin>.int",
        "<builtin>.isinstance"
    ],
    "<builtin>.pow": [],
    "http.client": [
        "ssl",
        "collections.abc",
        "socket",
        "http.client.HTTPException",
        "http.client.HTTPMessage",
        "http.client.InvalidURL",
        "http.client.CannotSendRequest",
        "http.client.UnimplementedFileMode",
        "http.client.CannotSendHeader",
        "http.client.ResponseNotReady",
        "http.client.RemoteDisconnected",
        "http.client.HTTPConnection",
        "<builtin>.globals",
        "re.compile",
        "http.client.IncompleteRead",
        "http.client.NotConnected",
        "email.parser",
        "io",
        "urllib.parse",
        "http.client.UnknownProtocol",
        "http.client.UnknownTransferEncoding",
        "http.client.ImproperConnectionState",
        "http",
        "email.message",
        "re",
        "http.client.BadStatusLine",
        "http.client.LineTooLong",
        "http.client.HTTPResponse"
    ],
    "email.parser": [
        "io",
        "email.parser.Parser",
        "email.feedparser",
        "email._policybase",
        "email.parser.BytesParser",
        "email.parser.BytesHeaderParser",
        "email.parser.HeaderParser"
    ],
    "email.feedparser": [
        "io",
        "re.compile",
        "email.errors",
        "email._policybase",
        "email.feedparser.BytesFeedParser",
        "re",
        "email.feedparser.BufferedSubFile",
        "email.feedparser.FeedParser",
        "collections",
        "<builtin>.object"
    ],
    "email.errors": [
        "email.errors.MessageError",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.MessageParseError",
        "email.errors.CharsetError",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.MultipartConversionError",
        "email.errors.UndecodableBytesDefect",
        "email.errors.HeaderParseError",
        "email.errors.HeaderDefect",
        "email.errors.InvalidHeaderDefect",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.BoundaryError",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.MessageDefect"
    ],
    "email.errors.MessageError": [],
    "email.errors.MessageParseError": [],
    "email.errors.HeaderParseError": [],
    "email.errors.BoundaryError": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.CharsetError": [],
    "email.errors.MessageDefect": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "email._policybase": [
        "email._policybase.Compat32",
        "email._policybase.Policy",
        "email._policybase._PolicyBase",
        "email.header",
        "abc",
        "email.utils",
        "email.charset"
    ],
    "email.header": [
        "re.compile",
        "binascii",
        "email.charset.Charset.__init__",
        "email.errors",
        "email.header.Header",
        "re",
        "email.header._Accumulator",
        "email.base64mime",
        "email.header._ValueFormatter",
        "email.charset",
        "email.quoprimime"
    ],
    "email.quoprimime": [
        "string",
        "<builtin>.chr",
        "<builtin>.range",
        "<builtin>.ord",
        "re",
        "<str>.encode"
    ],
    "email.base64mime": [
        "binascii",
        "base64"
    ],
    "email.charset": [
        "email.errors",
        "email.charset.Charset",
        "email.base64mime",
        "email.encoders",
        "functools",
        "email.quoprimime"
    ],
    "email.encoders": [
        "base64",
        "quopri"
    ],
    "quopri": [
        "binascii",
        "quopri.main"
    ],
    "quopri.main": [
        "quopri.decode",
        "<builtin>.print",
        "getopt",
        "<builtin>.open",
        "getopt.getopt",
        "quopri.encode"
    ],
    "quopri.encode": [
        "quopri.quote",
        "<builtin>.len",
        "quopri.needsquoting",
        "<list>.append",
        "<builtin>.bytes",
        "quopri.encode.write"
    ],
    "quopri.needsquoting": [
        "<builtin>.isinstance"
    ],
    "quopri.quote": [
        "<builtin>.isinstance",
        "<builtin>.ord",
        "<builtin>.bytes",
        "<builtin>.len"
    ],
    "quopri.encode.write": [
        "quopri.quote"
    ],
    "quopri.decode": [
        "quopri.ishex",
        "<builtin>.bytes",
        "quopri.unhex",
        "<builtin>.len"
    ],
    "quopri.ishex": [
        "<builtin>.isinstance"
    ],
    "quopri.unhex": [
        "<builtin>.ord",
        "<builtin>.repr",
        "<builtin>.bytes"
    ],
    "email.charset.Charset": [],
    "email.charset.Charset.__init__": [
        "<map>.get",
        "<builtin>.str",
        "<builtin>.isinstance",
        "<str>.encode",
        "<str>.lower"
    ],
    "email.header.Header": [],
    "email.header._ValueFormatter": [],
    "email.header._Accumulator": [],
    "email.utils": [
        "re.compile",
        "urllib.parse",
        "email._parseaddr",
        "os",
        "socket",
        "re",
        "datetime",
        "email.charset",
        "random"
    ],
    "urllib.parse": [
        "<builtin>.frozenset",
        "urllib.parse.SplitResultBytes",
        "urllib.parse.DefragResultBytes",
        "urllib.parse._ResultMixinBytes",
        "collections",
        "collections.namedtuple",
        "re.compile",
        "urllib.parse._NetlocResultMixinBase",
        "urllib.parse._fix_result_transcoding",
        "urllib.parse.Quoter",
        "<builtin>.bytes",
        "urllib.parse.ParseResult",
        "urllib.parse.ParseResultBytes",
        "urllib.parse._NetlocResultMixinStr",
        "urllib.parse.SplitResult",
        "re",
        "urllib.parse._ResultMixinStr",
        "urllib.parse._NetlocResultMixinBytes",
        "warnings",
        "urllib.parse.DefragResult"
    ],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse.DefragResult": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.ParseResult": [],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse._fix_result_transcoding": [],
    "urllib.parse.Quoter": [],
    "email._parseaddr": [
        "calendar",
        "email._parseaddr.AddressList",
        "email._parseaddr.AddrlistClass"
    ],
    "email._parseaddr.AddrlistClass": [],
    "email._parseaddr.AddressList": [],
    "email._policybase._PolicyBase": [],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase.Compat32": [],
    "email.feedparser.BufferedSubFile": [],
    "email.feedparser.FeedParser": [],
    "email.feedparser.BytesFeedParser": [],
    "email.parser.Parser": [],
    "email.parser.HeaderParser": [],
    "email.parser.BytesParser": [],
    "email.parser.BytesHeaderParser": [],
    "email.message": [
        "io",
        "re.compile",
        "uu",
        "email.errors",
        "email._encoded_words",
        "email.message.Message",
        "email._policybase",
        "email.message.MIMEPart",
        "quopri",
        "re",
        "email.utils",
        "email.charset",
        "email.message.EmailMessage"
    ],
    "uu": [
        "uu.Error",
        "binascii",
        "uu.test",
        "os"
    ],
    "uu.Error": [],
    "uu.test": [
        "optparse.OptionContainer.add_option",
        "optparse.OptionParser.parse_args",
        "optparse.OptionParser.error",
        "<builtin>.len",
        "<builtin>.print",
        "optparse.OptionParser.__init__",
        "uu.encode",
        "<builtin>.isinstance",
        "uu.decode",
        "optparse",
        "<builtin>.open"
    ],
    "optparse": [
        "optparse.OptionParser",
        "textwrap",
        "optparse.IndentedHelpFormatter",
        "optparse.OptionError",
        "optparse.OptParseError",
        "os",
        "optparse.AmbiguousOptionError",
        "optparse.Option",
        "optparse.OptionContainer",
        "optparse.OptionValueError",
        "optparse.HelpFormatter",
        "optparse.BadOptionError",
        "optparse.TitledHelpFormatter",
        "optparse.gettext",
        "optparse.OptionConflictError",
        "gettext",
        "optparse.OptionGroup",
        "optparse.Values"
    ],
    "optparse.OptParseError": [],
    "optparse.OptionError": [],
    "optparse.OptionConflictError": [],
    "optparse.OptionValueError": [],
    "optparse.BadOptionError": [],
    "optparse.AmbiguousOptionError": [],
    "optparse.HelpFormatter": [],
    "optparse.IndentedHelpFormatter": [],
    "optparse.TitledHelpFormatter": [],
    "optparse.gettext": [],
    "optparse.Option": [],
    "optparse.Values": [],
    "optparse.OptionContainer": [],
    "optparse.OptionGroup": [],
    "optparse.OptionParser": [],
    "optparse.OptionParser.__init__": [
        "optparse.OptionContainer.__init__",
        "optparse.IndentedHelpFormatter.__init__",
        "optparse.OptionParser.set_usage",
        "optparse.OptionParser._populate_option_list",
        "optparse.HelpFormatter.set_parser",
        "optparse.OptionParser._init_parsing_state"
    ],
    "optparse.OptionContainer.__init__": [
        "optparse.OptionGroup._create_option_list",
        "optparse.OptionParser._create_option_list",
        "optparse.OptionContainer.set_description",
        "optparse.OptionContainer.set_conflict_handler"
    ],
    "optparse.OptionContainer.set_conflict_handler": [
        "<builtin>.ValueError"
    ],
    "optparse.OptionContainer.set_description": [],
    "optparse.OptionParser.set_usage": [
        "<str>.startswith",
        "optparse.gettext",
        "<str>.lower"
    ],
    "optparse.IndentedHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.HelpFormatter.__init__": [
        "<builtin>.int",
        "<builtin>.max",
        "<builtin>.min"
    ],
    "optparse.HelpFormatter.set_parser": [],
    "optparse.OptionParser._populate_option_list": [
        "optparse.OptionParser._add_version_option",
        "optparse.OptionParser._add_help_option",
        "optparse.OptionContainer.add_options"
    ],
    "optparse.OptionContainer.add_options": [
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionContainer.add_option": [
        "<builtin>.TypeError",
        "<builtin>.len",
        "optparse.OptionParser.__init__",
        "optparse.OptionContainer._check_conflict",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "optparse.OptionContainer._check_conflict": [
        "optparse.OptionError.__init__",
        "<list>.append"
    ],
    "optparse.OptionError.__init__": [
        "<builtin>.str"
    ],
    "optparse.OptionParser._add_version_option": [
        "optparse.gettext",
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionParser._add_help_option": [
        "optparse.gettext",
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionParser._init_parsing_state": [],
    "optparse.OptionParser.parse_args": [
        "optparse.OptionParser.get_default_values",
        "<builtin>.str",
        "optparse.OptionParser.error",
        "optparse.OptionParser._get_args",
        "optparse.OptionParser.check_values",
        "optparse.OptionParser._process_args"
    ],
    "optparse.OptionParser._get_args": [],
    "optparse.OptionParser.get_default_values": [
        "<map>.get",
        "optparse.OptionParser._get_all_options",
        "<builtin>.isinstance",
        "optparse.Values.__init__",
        "<map>.copy"
    ],
    "optparse.Values.__init__": [
        "<builtin>.setattr",
        "<map>.items"
    ],
    "optparse.OptionParser._get_all_options": [],
    "optparse.OptionParser._process_args": [
        "optparse.OptionParser._process_short_opts",
        "<list>.append",
        "<builtin>.len",
        "optparse.OptionParser._process_long_opt"
    ],
    "optparse.OptionParser._process_short_opts": [
        "optparse.BadOptionError.__init__",
        "<map>.get",
        "optparse.ngettext",
        "optparse.OptionParser.error",
        "<builtin>.len",
        "<builtin>.tuple"
    ],
    "optparse.BadOptionError.__init__": [],
    "optparse.ngettext": [],
    "optparse.OptionParser.error": [
        "optparse.OptionParser.print_usage",
        "optparse.OptionParser.get_prog_name",
        "optparse.OptionParser.exit"
    ],
    "optparse.OptionParser.print_usage": [
        "<builtin>.print",
        "optparse.OptionParser.get_usage"
    ],
    "optparse.OptionParser.get_usage": [
        "optparse.IndentedHelpFormatter.format_usage",
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionParser.expand_prog_name": [
        "<str>.replace"
    ],
    "optparse.IndentedHelpFormatter.format_usage": [
        "optparse.gettext"
    ],
    "optparse.OptionParser.get_prog_name": [
        "posixpath.basename",
        "ntpath.basename"
    ],
    "optparse.OptionParser.exit": [],
    "optparse.OptionParser._process_long_opt": [
        "optparse.ngettext",
        "optparse.OptionParser.error",
        "<builtin>.len",
        "optparse.OptionParser._match_long_opt",
        "optparse.gettext",
        "<builtin>.tuple"
    ],
    "optparse.OptionParser._match_long_opt": [
        "optparse._match_abbrev"
    ],
    "optparse._match_abbrev": [
        "optparse.AmbiguousOptionError.__init__",
        "<map>.keys",
        "optparse.BadOptionError.__init__",
        "<builtin>.len"
    ],
    "optparse.AmbiguousOptionError.__init__": [
        "optparse.BadOptionError.__init__"
    ],
    "optparse.OptionParser.check_values": [],
    "uu.encode": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "<str>.replace",
        "<list>.append",
        "posixpath.basename",
        "<str>.encode",
        "ntpath.basename",
        "<builtin>.open"
    ],
    "uu.decode": [
        "<builtin>.int",
        "<builtin>.len",
        "genericpath.exists",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.open"
    ],
    "email._encoded_words": [
        "string",
        "binascii",
        "re.compile",
        "email.errors",
        "base64",
        "<builtin>.ord",
        "re",
        "email._encoded_words._QByteMap",
        "functools"
    ],
    "email._encoded_words._QByteMap": [],
    "email.message.Message": [
        "email.iterators"
    ],
    "email.iterators": [
        "io"
    ],
    "email.message.MIMEPart": [],
    "email.message.EmailMessage": [],
    "http": [
        "http.HTTPStatus",
        "enum"
    ],
    "http.HTTPStatus": [],
    "http.client.HTTPMessage": [],
    "http.client.HTTPResponse": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "http.client.HTTPException": [],
    "http.client.NotConnected": [],
    "http.client.InvalidURL": [],
    "http.client.UnknownProtocol": [],
    "http.client.UnknownTransferEncoding": [],
    "http.client.UnimplementedFileMode": [],
    "http.client.IncompleteRead": [],
    "http.client.ImproperConnectionState": [],
    "http.client.CannotSendRequest": [],
    "http.client.CannotSendHeader": [],
    "http.client.ResponseNotReady": [],
    "http.client.BadStatusLine": [],
    "http.client.LineTooLong": [],
    "http.client.RemoteDisconnected": [],
    "xml.parsers.expat": [
        "pyexpat"
    ],
    "pyexpat": [],
    "xmlrpc.client.Error": [],
    "xmlrpc.client.ProtocolError": [],
    "xmlrpc.client.ResponseError": [],
    "xmlrpc.client.Fault": [],
    "xmlrpc.client.DateTime": [],
    "xmlrpc.client.Binary": [],
    "xmlrpc.client.ExpatParser": [],
    "xmlrpc.client.Marshaller": [
        "<builtin>.type"
    ],
    "xmlrpc.client.Unmarshaller": [],
    "xmlrpc.client._MultiCallMethod": [],
    "xmlrpc.client.MultiCallIterator": [],
    "xmlrpc.client.MultiCall": [],
    "xmlrpc.client.GzipDecodedResponse": [],
    "xmlrpc.client._Method": [],
    "xmlrpc.client.Transport": [],
    "xmlrpc.client.SafeTransport": [],
    "xmlrpc.client.ServerProxy": [],
    "xmlrpc.client.ServerProxy.__init__": [
        "xmlrpc.client.SafeTransport.__init__",
        "xmlrpc.client.Transport.__init__",
        "<builtin>.OSError"
    ],
    "xmlrpc.client.SafeTransport.__init__": [
        "<builtin>.super"
    ],
    "xmlrpc.client.Transport.__init__": [
        "<builtin>.list"
    ],
    "xmlrpc.client.MultiCall.__init__": [],
    "multiprocessing.connection.XmlClient": [
        "multiprocessing.connection.ConnectionWrapper.__init__",
        "multiprocessing.connection.Client",
        "xmlrpc.client"
    ],
    "multiprocessing.connection._exhaustive_wait": [
        "<builtin>.list",
        "<builtin>.RuntimeError",
        "<list>.append",
        "<builtin>.len"
    ],
    "multiprocessing.connection.reduce_connection": [
        "multiprocessing.reduction.DupFd"
    ],
    "multiprocessing.connection.reduce_pipe_connection": [
        "multiprocessing.reduction.DupHandle.__init__"
    ],
    "multiprocessing.reduction.DupHandle.__init__": [],
    "multiprocessing.util.sub_warning": [
        "logging.Logger.log"
    ],
    "multiprocessing.util._remove_temp_dir": [
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.util.Finalize.__call__": [
        "multiprocessing.util.sub_debug"
    ],
    "multiprocessing.util.Finalize.__repr__": [
        "<builtin>.str",
        "<builtin>.getattr"
    ],
    "multiprocessing.util._run_finalizers": [
        "<map>.get",
        "<map>.clear",
        "multiprocessing.util._run_finalizers.<lambda1>",
        "traceback",
        "<map>",
        "<builtin>.list",
        "traceback.print_exc",
        "multiprocessing.util.sub_debug"
    ],
    "multiprocessing.util._run_finalizers.<lambda1>": [],
    "multiprocessing.util._exit_function": [
        "multiprocessing.util._run_finalizers",
        "multiprocessing.process.current_process",
        "multiprocessing.process.active_children",
        "multiprocessing.util.info",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.util.ForkAwareLocal.__init__": [
        "multiprocessing.util.register_after_fork"
    ],
    "multiprocessing.util.ForkAwareLocal.__reduce__": [
        "<builtin>.type"
    ],
    "multiprocessing.util.close_all_fds_except": [
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "multiprocessing.util.spawnv_passfds": [
        "<builtin>.map",
        "_posixsubprocess",
        "<builtin>.tuple",
        "<builtin>.sorted"
    ],
    "test": [],
    "multiprocessing.util._cleanup_tests": [
        "multiprocessing.forkserver.ForkServer._stop",
        "multiprocessing.process._cleanup",
        "test",
        "multiprocessing.util._run_finalizers",
        "multiprocessing.forkserver",
        "multiprocessing.resource_tracker",
        "multiprocessing.resource_tracker.ResourceTracker._stop"
    ],
    "multiprocessing.forkserver.ForkServer._stop": [],
    "multiprocessing.resource_tracker.ResourceTracker._stop": [],
    "multiprocessing.queues.Queue.__getstate__": [
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.queues.Queue.__setstate__": [
        "multiprocessing.queues.Queue._after_fork"
    ],
    "multiprocessing.queues.Queue.put": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.queues.Queue.get": [
        "pickle._loads",
        "multiprocessing.connection._ConnectionBase.recv_bytes",
        "multiprocessing.connection._ConnectionBase.poll",
        "<builtin>.ValueError"
    ],
    "multiprocessing.queues.Queue.empty": [
        "multiprocessing.connection._ConnectionBase.poll"
    ],
    "multiprocessing.queues.Queue.get_nowait": [
        "multiprocessing.queues.Queue.get"
    ],
    "multiprocessing.queues.Queue.put_nowait": [
        "multiprocessing.queues.Queue.put",
        "multiprocessing.queues.JoinableQueue.put"
    ],
    "multiprocessing.queues.Queue.cancel_join_thread": [
        "multiprocessing.util.Finalize.cancel",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.queues.Queue._start_thread": [
        "threading.Thread.start",
        "threading.Thread.__init__",
        "multiprocessing.util.debug",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.queues.Queue._finalize_join": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.queues.Queue._finalize_close": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.queues.Queue._feed": [
        "multiprocessing.util.is_exiting",
        "<builtin>.getattr",
        "multiprocessing.util.info",
        "multiprocessing.reduction.ForkingPickler.dumps",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.util.is_exiting": [],
    "multiprocessing.queues.Queue._on_queue_feeder_error": [
        "traceback.print_exc",
        "traceback"
    ],
    "multiprocessing.queues.JoinableQueue.__getstate__": [
        "multiprocessing.queues.Queue.__getstate__"
    ],
    "multiprocessing.queues.JoinableQueue.__setstate__": [
        "multiprocessing.queues.Queue.__setstate__"
    ],
    "multiprocessing.queues.JoinableQueue.put": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.queues.SimpleQueue.empty": [
        "multiprocessing.connection._ConnectionBase.poll"
    ],
    "multiprocessing.queues.SimpleQueue.__getstate__": [
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.queues.SimpleQueue.get": [
        "pickle._loads"
    ],
    "multiprocessing.queues.SimpleQueue.put": [
        "multiprocessing.reduction.ForkingPickler.dumps"
    ],
    "concurrent.futures.thread._python_exit": [
        "<builtin>.list",
        "weakref.WeakKeyDictionary.items"
    ],
    "concurrent.futures.thread._worker": [
        "logging.Logger.critical"
    ],
    "concurrent.futures.thread.ThreadPoolExecutor.__init__": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.set",
        "<builtin>.min",
        "_thread.allocate_lock",
        "threading.Semaphore.__init__",
        "queue._PySimpleQueue.__init__",
        "<builtin>.ValueError"
    ],
    "concurrent.futures.thread.ThreadPoolExecutor.submit": [
        "<builtin>.TypeError",
        "warnings",
        "<builtin>.len",
        "warnings.warn"
    ],
    "concurrent.futures.thread.ThreadPoolExecutor._adjust_thread_count": [
        "threading.Semaphore.acquire",
        "threading.Thread.start",
        "<builtin>.len",
        "_weakref.ref",
        "threading.Thread.__init__"
    ],
    "calendar._localized_month.__getitem__": [
        "<builtin>.isinstance"
    ],
    "calendar._localized_day.__getitem__": [
        "<builtin>.isinstance"
    ],
    "calendar._monthlen": [
        "calendar.isleap"
    ],
    "calendar.Calendar.itermonthdates": [
        "calendar.Calendar.itermonthdays3"
    ],
    "calendar.Calendar.itermonthdays3": [
        "calendar.monthrange",
        "<builtin>.range",
        "calendar._monthlen",
        "calendar._prevmonth",
        "calendar._nextmonth"
    ],
    "calendar._prevmonth": [],
    "calendar._nextmonth": [],
    "calendar.Calendar.itermonthdays4": [
        "<builtin>.enumerate",
        "calendar.Calendar.itermonthdays3"
    ],
    "calendar.Calendar.monthdatescalendar": [
        "calendar.Calendar.itermonthdates",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.Calendar.monthdayscalendar": [
        "<builtin>.list",
        "calendar.Calendar.itermonthdays",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.Calendar.yeardatescalendar": [
        "calendar.Calendar.monthdatescalendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.Calendar.yeardayscalendar": [
        "calendar.Calendar.monthdayscalendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.TextCalendar.prweek": [
        "<builtin>.print",
        "calendar.TextCalendar.formatweek"
    ],
    "calendar.TextCalendar.prmonth": [
        "calendar.TextCalendar.formatmonth",
        "<builtin>.print"
    ],
    "calendar.TextCalendar.pryear": [
        "calendar.TextCalendar.formatyear",
        "<builtin>.print"
    ],
    "calendar.HTMLCalendar.formatweek": [
        "calendar.HTMLCalendar.formatday"
    ],
    "calendar.HTMLCalendar.formatday": [],
    "calendar.HTMLCalendar.formatweekheader": [
        "calendar.HTMLCalendar.formatweekday",
        "calendar.Calendar.iterweekdays",
        "calendar.LocaleHTMLCalendar.formatweekday"
    ],
    "calendar.HTMLCalendar.formatweekday": [],
    "calendar.LocaleHTMLCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.HTMLCalendar.formatmonth": [
        "calendar.Calendar.monthdays2calendar",
        "<list>"
    ],
    "calendar.HTMLCalendar.formatyear": [
        "<builtin>.max",
        "<list>",
        "<builtin>.min",
        "<builtin>.range"
    ],
    "calendar.different_locale.__enter__": [
        "locale.setlocale",
        "locale.getlocale"
    ],
    "calendar.different_locale.__exit__": [
        "locale.setlocale"
    ],
    "calendar.LocaleHTMLCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.setfirstweekday": [
        "calendar.IllegalWeekdayError.__init__"
    ],
    "calendar.IllegalWeekdayError.__init__": [],
    "calendar.format": [
        "calendar.formatstring",
        "<builtin>.print"
    ],
    "calendar.formatstring": [],
    "calendar.timegm": [
        "datetime.date.toordinal"
    ],
    "datetime._ord2ymd": [
        "datetime._days_in_month",
        "datetime._is_leap",
        "<builtin>.divmod"
    ],
    "datetime._build_struct_time": [
        "datetime._days_before_month",
        "datetime._ymd2ord"
    ],
    "datetime._format_time": [
        "<builtin>.ValueError"
    ],
    "datetime._format_offset": [
        "<builtin>.divmod"
    ],
    "datetime._wrap_strftime": [
        "datetime.time.tzname",
        "datetime.datetime.tzname",
        "<builtin>.divmod",
        "<builtin>.getattr",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<list>.append",
        "<list>",
        "datetime.datetime.utcoffset",
        "datetime.time.utcoffset"
    ],
    "datetime._parse_isoformat_date": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "datetime._parse_hh_mm_ss_ff": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "datetime._parse_isoformat_time": [
        "datetime._parse_hh_mm_ss_ff",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.ValueError",
        "<builtin>.all"
    ],
    "datetime._check_tzname": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "datetime._check_utc_offset": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "datetime._check_int_field": [
        "<builtin>.TypeError",
        "<int>.__int__",
        "<int>.__index__",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "datetime._check_date_fields": [
        "datetime._check_int_field",
        "<builtin>.ValueError",
        "datetime._days_in_month"
    ],
    "datetime._check_time_fields": [
        "datetime._check_int_field",
        "<builtin>.ValueError"
    ],
    "datetime._check_tzinfo_arg": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime._cmperror": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "datetime._divide_and_round": [
        "<builtin>.divmod"
    ],
    "datetime.timedelta.__new__": [
        "<builtin>.int",
        "<builtin>.abs",
        "<builtin>.divmod",
        "<builtin>.OverflowError",
        "<builtin>.isinstance",
        "<builtin>.round"
    ],
    "datetime.timedelta.__repr__": [
        "<list>.append"
    ],
    "datetime.timedelta.__str__": [
        "datetime.timedelta.__str__.plural",
        "<builtin>.divmod"
    ],
    "datetime.timedelta.__str__.plural": [
        "<builtin>.abs"
    ],
    "datetime.timedelta.__add__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__sub__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__rsub__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__mul__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance",
        "datetime._divide_and_round"
    ],
    "datetime.timedelta._to_microseconds": [],
    "datetime.timedelta.__floordiv__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__truediv__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance",
        "datetime._divide_and_round"
    ],
    "datetime.timedelta.__mod__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__divmod__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance",
        "<builtin>.divmod"
    ],
    "datetime.timedelta.__eq__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta._cmp": [
        "datetime.timedelta._getstate",
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta._getstate": [],
    "datetime.timedelta.__le__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta.__lt__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta.__ge__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta.__gt__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta.__hash__": [
        "datetime.timedelta._getstate",
        "<builtin>.hash"
    ],
    "datetime.timedelta.__reduce__": [
        "datetime.timedelta._getstate"
    ],
    "datetime.date.__new__": [
        "<builtin>.ord",
        "datetime.date.__setstate",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "datetime._check_date_fields"
    ],
    "datetime.date.__setstate": [],
    "datetime.date.fromordinal": [
        "datetime._ord2ymd"
    ],
    "datetime.date.fromisoformat": [
        "<builtin>.TypeError",
        "datetime._parse_isoformat_date",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.date.fromisocalendar": [
        "datetime._ord2ymd",
        "datetime._is_leap",
        "datetime._ymd2ord",
        "datetime._isoweek1monday",
        "<builtin>.ValueError"
    ],
    "datetime._isoweek1monday": [
        "datetime._ymd2ord"
    ],
    "datetime.date.ctime": [
        "datetime.date.toordinal"
    ],
    "datetime.date.strftime": [
        "datetime.datetime.timetuple",
        "datetime._wrap_strftime",
        "datetime.date.timetuple"
    ],
    "datetime.date.timetuple": [
        "datetime._build_struct_time"
    ],
    "datetime.date.__format__": [
        "<builtin>.TypeError",
        "datetime.date.strftime",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "datetime.date.replace": [
        "<builtin>.type"
    ],
    "datetime.date.__eq__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date._cmp": [
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__le__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__lt__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__ge__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__gt__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.date._cmp"
    ],
    "datetime.date.__hash__": [
        "datetime.date._getstate",
        "datetime.datetime._getstate",
        "<builtin>.hash"
    ],
    "datetime.date._getstate": [
        "<builtin>.bytes",
        "<builtin>.divmod"
    ],
    "datetime.date.__add__": [
        "datetime.date.toordinal",
        "<builtin>.isinstance",
        "<builtin>.OverflowError",
        "<builtin>.type"
    ],
    "datetime.date.__sub__": [
        "datetime.date.toordinal",
        "<builtin>.isinstance"
    ],
    "datetime.date.isoweekday": [
        "datetime.date.toordinal"
    ],
    "datetime.date.isocalendar": [
        "datetime._ymd2ord",
        "datetime._isoweek1monday",
        "<builtin>.divmod"
    ],
    "datetime.date.__reduce__": [
        "datetime.date._getstate",
        "datetime.datetime._getstate"
    ],
    "datetime.tzinfo.tzname": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.utcoffset": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.dst": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.fromutc": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.tzinfo.__reduce__": [
        "<builtin>.getattr"
    ],
    "datetime.time.__new__": [
        "datetime.time.__setstate",
        "<builtin>.ord",
        "<builtin>.len",
        "datetime._check_tzinfo_arg",
        "<builtin>.isinstance",
        "datetime._check_time_fields",
        "<builtin>.ValueError"
    ],
    "datetime.time.__setstate": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "<int>.__index__": [],
    "<int>.__int__": [],
    "datetime.time.__eq__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time._cmp": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "datetime.time.utcoffset",
        "datetime.time._cmp"
    ],
    "datetime.time.utcoffset": [
        "datetime._check_utc_offset"
    ],
    "datetime.time.__le__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__lt__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__ge__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__gt__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__hash__": [
        "<builtin>.divmod",
        "datetime.time._getstate",
        "datetime.time.replace",
        "<builtin>.hash",
        "datetime.time.utcoffset"
    ],
    "datetime.time.replace": [
        "<builtin>.type"
    ],
    "datetime.time._getstate": [
        "<builtin>.bytes",
        "<builtin>.divmod"
    ],
    "datetime.time._tzstr": [
        "datetime._format_offset",
        "datetime.time.utcoffset"
    ],
    "datetime.time.isoformat": [
        "datetime.time._tzstr",
        "datetime._format_time"
    ],
    "datetime.time.fromisoformat": [
        "<builtin>.TypeError",
        "datetime._parse_isoformat_time",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.time.strftime": [
        "datetime._wrap_strftime"
    ],
    "datetime.time.tzname": [
        "datetime._check_tzname"
    ],
    "datetime.time.__format__": [
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance",
        "datetime.time.strftime",
        "<builtin>.type"
    ],
    "datetime.time.dst": [
        "datetime._check_utc_offset"
    ],
    "datetime.time.__reduce_ex__": [
        "datetime.time._getstate"
    ],
    "datetime.time.__reduce__": [
        "datetime.time.__reduce_ex__"
    ],
    "datetime.datetime.__new__": [
        "datetime.datetime.__setstate",
        "<builtin>.ord",
        "<builtin>.len",
        "datetime._check_tzinfo_arg",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "datetime._check_time_fields",
        "<builtin>.ValueError",
        "datetime._check_date_fields"
    ],
    "datetime.datetime.__setstate": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime.datetime._fromtimestamp": [
        "<builtin>.round",
        "<builtin>.min"
    ],
    "datetime.datetime.fromtimestamp": [
        "datetime._check_tzinfo_arg",
        "datetime.datetime._fromtimestamp"
    ],
    "datetime.datetime.utcfromtimestamp": [
        "datetime.datetime._fromtimestamp"
    ],
    "datetime.datetime.now": [
        "datetime.datetime.fromtimestamp"
    ],
    "datetime.datetime.utcnow": [
        "datetime.datetime.utcfromtimestamp"
    ],
    "datetime.datetime.combine": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.fromisoformat": [
        "<builtin>.TypeError",
        "datetime._parse_isoformat_date",
        "datetime._parse_isoformat_time",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.datetime.timetuple": [
        "datetime._build_struct_time",
        "datetime.datetime.dst"
    ],
    "datetime.datetime.dst": [
        "datetime._check_utc_offset"
    ],
    "datetime.datetime._mktime": [
        "datetime.datetime._mktime.local"
    ],
    "datetime.datetime._mktime.local": [],
    "datetime.datetime.timestamp": [
        "datetime.datetime._mktime"
    ],
    "datetime.datetime.utctimetuple": [
        "datetime.datetime.utcoffset",
        "datetime._build_struct_time"
    ],
    "datetime.datetime.utcoffset": [
        "datetime._check_utc_offset"
    ],
    "datetime.datetime.date": [
        "datetime.datetime.date"
    ],
    "datetime.datetime.time": [
        "datetime.datetime.time"
    ],
    "datetime.datetime.timetz": [
        "datetime.datetime.time"
    ],
    "datetime.datetime.replace": [
        "<builtin>.type"
    ],
    "datetime.datetime._local_timezone": [
        "datetime.datetime._mktime"
    ],
    "datetime.datetime.astimezone": [
        "<builtin>.TypeError",
        "datetime.datetime._local_timezone",
        "datetime.datetime.replace",
        "<builtin>.isinstance",
        "datetime.timezone.fromutc",
        "datetime.timezone.utcoffset"
    ],
    "datetime.timezone.utcoffset": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime.timezone.fromutc": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "datetime.datetime.ctime": [
        "datetime.date.toordinal"
    ],
    "datetime.datetime.isoformat": [
        "datetime.datetime.utcoffset",
        "datetime._format_time",
        "datetime._format_offset"
    ],
    "datetime.datetime.__repr__": [
        "<builtin>.map"
    ],
    "datetime.datetime.__str__": [
        "datetime.datetime.isoformat"
    ],
    "_strptime": [
        "_strptime.TimeRE.__init__",
        "re",
        "calendar",
        "datetime",
        "locale",
        "_thread.allocate_lock",
        "_strptime.LocaleTime",
        "_strptime.TimeRE"
    ],
    "datetime.datetime.strptime": [
        "_strptime._strptime_datetime",
        "_strptime"
    ],
    "_strptime.LocaleTime": [],
    "_strptime.TimeRE": [],
    "_thread.allocate_lock": [],
    "_strptime.TimeRE.__init__": [
        "_strptime.TimeRE.__seqToRE",
        "<builtin>.super",
        "_strptime.LocaleTime.__init__",
        "_strptime.TimeRE.pattern"
    ],
    "_strptime.LocaleTime.__init__": [
        "_strptime.LocaleTime.__calc_timezone",
        "_strptime.LocaleTime.__calc_date_time",
        "_strptime.LocaleTime.__calc_am_pm",
        "_strptime._getlang",
        "_strptime.LocaleTime.__calc_month",
        "<builtin>.ValueError",
        "_strptime.LocaleTime.__calc_weekday"
    ],
    "_strptime._getlang": [
        "locale.getlocale"
    ],
    "_strptime.LocaleTime.__calc_weekday": [
        "<builtin>.range"
    ],
    "_strptime.LocaleTime.__calc_month": [
        "<builtin>.range"
    ],
    "_strptime.LocaleTime.__calc_am_pm": [
        "<list>.append"
    ],
    "_strptime.LocaleTime.__calc_timezone": [
        "<builtin>.frozenset"
    ],
    "_strptime.LocaleTime.__calc_date_time": [
        "<list>.extend"
    ],
    "_strptime.TimeRE.__seqToRE": [
        "<builtin>.sorted",
        "re.escape"
    ],
    "_strptime.TimeRE.pattern": [
        "re.compile",
        "<str>.index"
    ],
    "_strptime._strptime_datetime": [
        "_strptime._strptime"
    ],
    "_strptime._strptime": [
        "<builtin>.TypeError",
        "_strptime._calc_julian_from_U_or_W",
        "<builtin>.int",
        "<builtin>.enumerate",
        "calendar.isleap",
        "_strptime._calc_julian_from_V",
        "<builtin>.len",
        "datetime.date.weekday",
        "datetime.date.fromordinal",
        "<builtin>.isinstance",
        "datetime.date.toordinal",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "_strptime._calc_julian_from_V": [
        "datetime.date.isoweekday",
        "datetime.date.toordinal"
    ],
    "_strptime._calc_julian_from_U_or_W": [
        "datetime.date.weekday"
    ],
    "datetime.datetime.tzname": [
        "datetime._check_tzname"
    ],
    "datetime.datetime.__eq__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.datetime._cmp": [
        "<builtin>.TypeError",
        "datetime.datetime.replace",
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime.datetime.utcoffset"
    ],
    "datetime.datetime.__le__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime._cmperror"
    ],
    "datetime.datetime.__lt__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime._cmperror"
    ],
    "datetime.datetime.__ge__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime._cmperror"
    ],
    "datetime.datetime.__gt__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance",
        "datetime._cmperror"
    ],
    "datetime.datetime.__add__": [
        "<builtin>.divmod",
        "<builtin>.OverflowError",
        "<builtin>.isinstance",
        "datetime.datetime.time",
        "datetime.date.toordinal",
        "<builtin>.type"
    ],
    "datetime.datetime.__sub__": [
        "datetime.datetime.utcoffset",
        "datetime.date.toordinal",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.__hash__": [
        "datetime.datetime._getstate",
        "datetime.datetime.replace",
        "<builtin>.hash",
        "datetime._ymd2ord",
        "datetime.datetime.utcoffset"
    ],
    "datetime.datetime._getstate": [
        "<builtin>.bytes",
        "<builtin>.divmod"
    ],
    "datetime.datetime.__reduce_ex__": [
        "datetime.datetime._getstate"
    ],
    "datetime.datetime.__reduce__": [
        "datetime.datetime.__reduce_ex__"
    ],
    "datetime.timezone.__new__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "datetime.timezone._create"
    ],
    "datetime.timezone.__eq__": [
        "<builtin>.isinstance"
    ],
    "datetime.timezone.__hash__": [
        "<builtin>.hash"
    ],
    "datetime.timezone.__str__": [
        "datetime.timezone.tzname"
    ],
    "datetime.timezone.tzname": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "datetime.timezone._name_from_offset"
    ],
    "datetime.timezone._name_from_offset": [
        "<builtin>.divmod"
    ],
    "datetime.timezone.dst": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "gzip.GzipFile.readable": [],
    "gzip.GzipFile.writable": [],
    "gzip.GzipFile.seekable": [],
    "multiprocessing.pool.Pool._handle_tasks": [
        "<builtin>.iter",
        "threading.current_thread",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.pool.Pool._handle_results": [
        "<builtin>.range",
        "<builtin>.len",
        "threading.current_thread",
        "<builtin>.hasattr",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.pool.Pool._handle_workers": [
        "multiprocessing.pool.Pool._maintain_pool",
        "multiprocessing.pool.Pool._wait_for_updates",
        "threading.current_thread",
        "multiprocessing.util.debug",
        "multiprocessing.pool.ThreadPool._wait_for_updates"
    ],
    "multiprocessing.pool.Pool._maintain_pool": [
        "multiprocessing.pool.Pool._join_exited_workers",
        "multiprocessing.pool.Pool._repopulate_pool_static"
    ],
    "multiprocessing.pool.Pool._join_exited_workers": [
        "multiprocessing.util.debug",
        "<builtin>.reversed",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "multiprocessing.pool.Pool._wait_for_updates": [
        "multiprocessing.connection.wait"
    ],
    "importlib._bootstrap_external._setup": [
        "<list>.extend",
        "<builtin>.setattr",
        "<builtin>.len",
        "<list>.append",
        "importlib._bootstrap_external._make_relax_case",
        "<builtin>.all"
    ],
    "importlib._bootstrap_external._make_relax_case": [],
    "asyncio.futures._chain_future._call_check_cancel": [
        "asyncio.tasks.Task.cancel"
    ],
    "random.SystemRandom.seed": [],
    "random.SystemRandom.random": [],
    "random.Random.uniform": [
        "random.SystemRandom.random"
    ],
    "random.Random.expovariate": [
        "random.SystemRandom.random"
    ],
    "random.Random.paretovariate": [
        "random.SystemRandom.random"
    ],
    "random.Random.weibullvariate": [
        "random.SystemRandom.random"
    ],
    "sqlparse.sql.TokenList.token_next_by.<lambda2>": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.sql.TokenList.token_next_by.<lambda3>": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.sql.TokenList.token_next_by.<lambda4>": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.sql.TokenList.token_next_by.<lambda5>": [
        "sqlparse.utils.imt"
    ],
    "tarfile._FileInFile.seekable": [
        "gzip.GzipFile.seekable",
        "bz2.BZ2File.seekable",
        "lzma.LZMAFile.seekable"
    ],
    "importlib.util.set_package.set_package_wrapper": [
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "warnings.warn"
    ],
    "importlib.util.set_loader.set_loader_wrapper": [
        "<builtin>.getattr",
        "warnings.warn"
    ],
    "importlib.util.module_for_loader.module_for_loader_wrapper": [
        "importlib.util._module_to_load"
    ],
    "importlib.util.LazyLoader.factory.<lambda1>": [
        "importlib.util.LazyLoader.__init__"
    ],
    "concurrent.futures.process.ProcessPoolExecutor._start_queue_management_thread.weakref_cb": [
        "concurrent.futures.process._ThreadWakeup.wakeup",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.connection.Connection._close": [],
    "multiprocessing.connection.ConnectionWrapper.send": [
        "multiprocessing.connection._xml_dumps",
        "multiprocessing.connection._ConnectionBase.send_bytes"
    ],
    "multiprocessing.connection._xml_dumps": [],
    "multiprocessing.connection.ConnectionWrapper.recv": [
        "multiprocessing.connection._ConnectionBase.recv_bytes",
        "multiprocessing.connection._xml_loads"
    ],
    "multiprocessing.connection._xml_loads": [],
    "multiprocessing.util.Finalize.cancel": [],
    "concurrent.futures.thread.ThreadPoolExecutor._adjust_thread_count.weakref_cb": [
        "queue._PySimpleQueue.put"
    ],
    "gzip.open": [
        "<builtin>.TypeError",
        "gzip.GzipFile.__init__",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<str>.replace",
        "_io.TextIOWrapper",
        "<builtin>.ValueError"
    ],
    "gzip._PaddedFile.read": [
        "gzip.GzipFile.read"
    ],
    "gzip._PaddedFile.prepend": [
        "<builtin>.len"
    ],
    "gzip._PaddedFile.seek": [
        "gzip.GzipFile.seek"
    ],
    "gzip.GzipFile.filename": [
        "warnings",
        "warnings.warn"
    ],
    "gzip.GzipFile.__repr__": [
        "<builtin>.hex",
        "<builtin>.id",
        "<builtin>.repr"
    ],
    "gzip.GzipFile.read1": [
        "_compression.BaseStream._check_not_closed",
        "<builtin>.OSError"
    ],
    "gzip.GzipFile.peek": [
        "_compression.BaseStream._check_not_closed",
        "<builtin>.OSError"
    ],
    "gzip.GzipFile.flush": [
        "_compression.BaseStream._check_not_closed",
        "gzip.GzipFile.write",
        "gzip.GzipFile.flush"
    ],
    "gzip.GzipFile.fileno": [
        "gzip.GzipFile.fileno"
    ],
    "gzip.GzipFile.rewind": [
        "<builtin>.OSError"
    ],
    "gzip.GzipFile.readline": [
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip._GzipReader._read_exact": [
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "gzip._GzipReader._read_gzip_header": [
        "gzip._GzipReader._read_exact"
    ],
    "gzip._GzipReader.read": [
        "gzip._GzipReader._add_read_data",
        "<builtin>.len",
        "gzip._GzipReader._read_gzip_header",
        "gzip._GzipReader._init_read",
        "<builtin>.EOFError",
        "gzip._GzipReader._read_eof"
    ],
    "gzip._GzipReader._read_eof": [
        "<builtin>.hex",
        "gzip._GzipReader._read_exact"
    ],
    "gzip._GzipReader._init_read": [],
    "gzip._GzipReader._add_read_data": [
        "<builtin>.len"
    ],
    "gzip._GzipReader._rewind": [
        "<builtin>.super"
    ],
    "gzip.compress": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO"
    ],
    "gzip.decompress": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO"
    ],
    "importlib._bootstrap_external._pack_uint32": [
        "<builtin>.int"
    ],
    "importlib._bootstrap_external._unpack_uint32": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._unpack_uint16": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._path_split": [
        "<str>.rpartition",
        "<builtin>.reversed",
        "<builtin>.len",
        "<str>.rsplit"
    ],
    "importlib._bootstrap_external._path_is_mode_type": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external._path_stat": [],
    "importlib._bootstrap_external._path_isfile": [
        "importlib._bootstrap_external._path_is_mode_type"
    ],
    "importlib._bootstrap_external._path_isdir": [
        "importlib._bootstrap_external._path_is_mode_type"
    ],
    "importlib._bootstrap_external._write_atomic": [
        "<builtin>.id"
    ],
    "importlib._bootstrap_external.cache_from_source": [
        "<builtin>.TypeError",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_isabs",
        "importlib._bootstrap_external._path_join",
        "<builtin>.str",
        "<str>.isalnum",
        "<str>.lstrip",
        "<builtin>.NotImplementedError",
        "<builtin>.ValueError"
    ],
    "<str>.isalnum": [],
    "importlib._bootstrap_external._path_isabs": [
        "<str>.startswith"
    ],
    "importlib._bootstrap_external._path_join": [],
    "importlib._bootstrap_external.source_from_cache": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join",
        "<builtin>.len",
        "<str>.startswith",
        "<builtin>.NotImplementedError",
        "<builtin>.ValueError"
    ],
    "<str>.rsplit": [],
    "importlib._bootstrap_external._get_sourcefile": [
        "importlib._bootstrap_external.source_from_cache",
        "importlib._bootstrap_external._path_isfile",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._get_cached": [
        "importlib._bootstrap_external.cache_from_source",
        "<builtin>.tuple"
    ],
    "importlib._bootstrap_external._calc_mode": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external._find_module_shim": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._classify_pyc": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external._unpack_uint32",
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._validate_timestamp_pyc": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external._unpack_uint32"
    ],
    "importlib._bootstrap_external._validate_hash_pyc": [
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap_external._compile_bytecode": [
        "<builtin>.ImportError",
        "<builtin>.isinstance"
    ],
    "importlib._bootstrap_external._code_to_timestamp_pyc": [
        "<builtin>.bytearray",
        "importlib._bootstrap_external._pack_uint32"
    ],
    "importlib._bootstrap_external._code_to_hash_pyc": [
        "<builtin>.bytearray",
        "<builtin>.len",
        "importlib._bootstrap_external._pack_uint32"
    ],
    "importlib._bootstrap_external.decode_source": [
        "tokenize",
        "tokenize.detect_encoding"
    ],
    "importlib._bootstrap_external.spec_from_file_location": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._get_supported_file_loaders",
        "<str>.endswith",
        "<builtin>.hasattr",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external._LoaderBasics.is_package"
    ],
    "importlib._bootstrap_external._get_supported_file_loaders": [],
    "importlib._bootstrap_external.WindowsRegistryFinder._search_registry": [
        "importlib._bootstrap_external.WindowsRegistryFinder._open_registry"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder._open_registry": [],
    "importlib._bootstrap_external.WindowsRegistryFinder.find_spec": [
        "importlib._bootstrap_external.WindowsRegistryFinder._search_registry",
        "<builtin>.tuple",
        "importlib._bootstrap_external._path_stat",
        "importlib._bootstrap_external._get_supported_file_loaders"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder.find_module": [
        "importlib._bootstrap_external.WindowsRegistryFinder.find_spec"
    ],
    "importlib._bootstrap_external._LoaderBasics.is_package": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external.FileLoader.get_filename"
    ],
    "importlib._bootstrap_external._LoaderBasics.exec_module": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.SourceLoader.get_code",
        "importlib._bootstrap_external.SourcelessFileLoader.get_code"
    ],
    "importlib._bootstrap_external.SourceLoader.path_stats": [
        "importlib._bootstrap_external.SourceLoader.path_mtime"
    ],
    "importlib._bootstrap_external.SourceLoader.path_mtime": [],
    "importlib._bootstrap_external.SourceLoader._cache_bytecode": [
        "importlib._bootstrap_external.SourceLoader.set_data",
        "importlib._bootstrap_external.SourceFileLoader.set_data"
    ],
    "importlib._bootstrap_external.SourceLoader.set_data": [],
    "importlib._bootstrap_external.SourceLoader.get_source": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.FileLoader.get_data",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external.decode_source"
    ],
    "importlib._bootstrap_external.SourceLoader.get_code": [
        "importlib._bootstrap_external.cache_from_source",
        "importlib._bootstrap_external._code_to_timestamp_pyc",
        "importlib._bootstrap_external.SourceLoader.source_to_code",
        "importlib._bootstrap_external._code_to_hash_pyc",
        "<builtin>.len",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external.SourceFileLoader._cache_bytecode",
        "importlib._bootstrap_external.FileLoader.get_data",
        "importlib._bootstrap_external.SourceLoader._cache_bytecode"
    ],
    "importlib._bootstrap_external.SourceLoader.source_to_code": [],
    "importlib._bootstrap_external.FileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "importlib._bootstrap_external.FileLoader.load_module": [
        "<builtin>.super"
    ],
    "importlib._bootstrap_external._check_name._check_name_wrapper": [
        "importlib._bootstrap_external.FileLoader.get_resource_reader",
        "importlib._bootstrap_external.FileLoader.load_module",
        "importlib._bootstrap_external.ExtensionFileLoader.get_filename",
        "<builtin>.ImportError",
        "importlib._bootstrap_external.FileLoader.get_filename"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.get_filename": [],
    "importlib._bootstrap_external.FileLoader.get_resource_reader": [
        "importlib._bootstrap_external.ExtensionFileLoader.is_package",
        "importlib._bootstrap_external._LoaderBasics.is_package"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.is_package": [
        "importlib._bootstrap_external._path_split",
        "<builtin>.any"
    ],
    "importlib._bootstrap_external.FileLoader.get_filename": [],
    "importlib._bootstrap_external.FileLoader.get_data": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "importlib._bootstrap_external.FileLoader.open_resource": [
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._path_split"
    ],
    "importlib._bootstrap_external.FileLoader.resource_path": [
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external.FileLoader.is_resource"
    ],
    "importlib._bootstrap_external.FileLoader.is_resource": [
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_isfile"
    ],
    "importlib._bootstrap_external.FileLoader.contents": [
        "<builtin>.iter",
        "importlib._bootstrap_external._path_split"
    ],
    "importlib._bootstrap_external.SourceFileLoader.path_stats": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external.SourceFileLoader._cache_bytecode": [
        "importlib._bootstrap_external._calc_mode",
        "importlib._bootstrap_external.SourceFileLoader.set_data"
    ],
    "importlib._bootstrap_external.SourceFileLoader.set_data": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._write_atomic",
        "<builtin>.reversed",
        "importlib._bootstrap_external._path_join",
        "<list>.append",
        "importlib._bootstrap_external._path_isdir"
    ],
    "importlib._bootstrap_external.SourcelessFileLoader.get_code": [
        "importlib._bootstrap_external._classify_pyc",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external.FileLoader.get_data",
        "<builtin>.memoryview",
        "importlib._bootstrap_external._compile_bytecode"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "importlib._bootstrap_external._NamespacePath.__init__": [
        "<builtin>.tuple",
        "importlib._bootstrap_external._NamespacePath._get_parent_path"
    ],
    "importlib._bootstrap_external._NamespacePath._get_parent_path": [
        "<builtin>.getattr",
        "importlib._bootstrap_external._NamespacePath._find_parent_path_names"
    ],
    "importlib._bootstrap_external._NamespacePath._find_parent_path_names": [],
    "importlib._bootstrap_external._NamespacePath._recalculate": [
        "<builtin>.tuple",
        "importlib._bootstrap_external.PathFinder._get_spec",
        "importlib._bootstrap_external._NamespacePath._get_parent_path"
    ],
    "importlib._bootstrap_external._NamespacePath.__iter__": [
        "<builtin>.iter",
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__getitem__": [
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__len__": [
        "<builtin>.len",
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__contains__": [
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespaceLoader.__init__": [
        "importlib._bootstrap_external._NamespacePath.__init__"
    ],
    "importlib._bootstrap_external._NamespaceLoader.get_code": [
        "<builtin>.compile"
    ],
    "importlib._bootstrap_external.PathFinder.invalidate_caches": [
        "<builtin>.list",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external.PathFinder._path_importer_cache": [
        "importlib._bootstrap_external.PathFinder._path_hooks"
    ],
    "importlib._bootstrap_external.PathFinder._path_hooks": [],
    "importlib._bootstrap_external.PathFinder._legacy_get_spec": [
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external.PathFinder._get_spec": [
        "importlib._bootstrap_external.PathFinder._path_importer_cache",
        "<list>.extend",
        "<builtin>.ImportError",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "importlib._bootstrap_external.PathFinder._legacy_get_spec"
    ],
    "importlib._bootstrap_external.PathFinder.find_spec": [
        "importlib._bootstrap_external._NamespacePath.__init__",
        "importlib._bootstrap_external.PathFinder._get_spec"
    ],
    "importlib._bootstrap_external.PathFinder.find_module": [
        "importlib._bootstrap_external.PathFinder.find_spec"
    ],
    "importlib.metadata": [
        "importlib.metadata.DistributionFinder",
        "os",
        "importlib.metadata.PackageNotFoundError",
        "contextlib",
        "operator",
        "collections",
        "importlib.abc",
        "functools",
        "collections.namedtuple",
        "importlib.metadata.FileHash",
        "csv",
        "abc",
        "importlib.metadata.PackagePath",
        "importlib.metadata.FastPath",
        "zipfile",
        "importlib.metadata.Prepared",
        "importlib.metadata.EntryPoint",
        "email",
        "importlib.metadata.Distribution",
        "importlib.metadata.PathDistribution",
        "posixpath",
        "io",
        "pathlib",
        "importlib",
        "importlib.metadata.MetadataPathFinder",
        "re",
        "configparser"
    ],
    "importlib._bootstrap_external.PathFinder.find_distributions": [
        "importlib.metadata.MetadataPathFinder.find_distributions",
        "importlib.metadata"
    ],
    "csv": [
        "io",
        "csv.DictReader",
        "csv.DictWriter",
        "re",
        "csv.Sniffer",
        "csv.excel",
        "csv.excel_tab",
        "csv.Dialect",
        "_csv",
        "csv.unix_dialect"
    ],
    "_csv": [],
    "csv.Dialect": [],
    "csv.excel": [],
    "csv.excel_tab": [],
    "csv.unix_dialect": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "csv.DictWriter": [],
    "csv.Sniffer": [],
    "email": [],
    "pathlib": [
        "pathlib._TerminatingSelector",
        "pathlib.PosixPath",
        "os",
        "collections.abc",
        "operator",
        "pathlib._Flavour",
        "functools.singledispatch.wrapper",
        "pathlib._PreciseSelector",
        "<builtin>.hasattr",
        "pathlib.PurePosixPath",
        "pathlib.PureWindowsPath",
        "functools",
        "ntpath",
        "stat",
        "pathlib._Accessor",
        "pathlib.Path",
        "pathlib._WindowsFlavour",
        "pathlib._PosixFlavour",
        "pathlib._PathParents",
        "pathlib.WindowsPath",
        "pathlib._Selector",
        "pathlib._RecursiveWildcardSelector",
        "pathlib.PurePath",
        "functools.lru_cache.decorating_function",
        "posixpath",
        "io",
        "urllib.parse",
        "functools.singledispatchmethod.__get__._method",
        "fnmatch",
        "re",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "pathlib._NormalAccessor",
        "pathlib._WildcardSelector"
    ],
    "pathlib._Flavour": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.set",
        "<builtin>.range"
    ],
    "pathlib._PosixFlavour": [],
    "pathlib._Accessor": [],
    "pathlib._NormalAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.hasattr"
    ],
    "pathlib._Selector": [],
    "pathlib._TerminatingSelector": [],
    "pathlib._PreciseSelector": [],
    "pathlib._WildcardSelector": [],
    "pathlib._RecursiveWildcardSelector": [],
    "pathlib._PathParents": [],
    "pathlib.PurePath": [
        "<builtin>.classmethod",
        "operator.attrgetter.__init__",
        "<builtin>.property"
    ],
    "pathlib.PurePosixPath": [],
    "pathlib.PureWindowsPath": [],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "pathlib.PosixPath": [],
    "pathlib.WindowsPath": [],
    "configparser": [
        "os",
        "configparser.InterpolationSyntaxError",
        "collections.abc",
        "configparser.SafeConfigParser",
        "collections",
        "configparser.MissingSectionHeaderError",
        "functools",
        "configparser.DuplicateSectionError",
        "<builtin>.object",
        "configparser.ExtendedInterpolation",
        "configparser.LegacyInterpolation",
        "configparser.Interpolation",
        "configparser.InterpolationError",
        "configparser.InterpolationMissingOptionError",
        "configparser.SectionProxy",
        "configparser.NoSectionError",
        "configparser.NoOptionError",
        "configparser.ConfigParser",
        "configparser.DuplicateOptionError",
        "io",
        "configparser.ConverterMapping",
        "configparser.ParsingError",
        "re",
        "configparser.RawConfigParser",
        "configparser.InterpolationDepthError",
        "configparser.BasicInterpolation",
        "warnings",
        "configparser.Error"
    ],
    "configparser.Error": [],
    "configparser.NoSectionError": [],
    "configparser.DuplicateSectionError": [],
    "configparser.DuplicateOptionError": [],
    "configparser.NoOptionError": [],
    "configparser.InterpolationError": [],
    "configparser.InterpolationMissingOptionError": [],
    "configparser.InterpolationSyntaxError": [],
    "configparser.InterpolationDepthError": [],
    "configparser.ParsingError": [
        "<builtin>.property"
    ],
    "configparser.MissingSectionHeaderError": [],
    "configparser.Interpolation": [],
    "configparser.BasicInterpolation": [
        "re.compile"
    ],
    "configparser.ExtendedInterpolation": [
        "re.compile"
    ],
    "configparser.LegacyInterpolation": [
        "re.compile",
        "<builtin>.staticmethod"
    ],
    "configparser.RawConfigParser": [
        "re.compile",
        "<builtin>.property"
    ],
    "configparser.ConfigParser": [],
    "configparser.SafeConfigParser": [],
    "configparser.SectionProxy": [
        "<builtin>.property"
    ],
    "configparser.ConverterMapping": [
        "re.compile"
    ],
    "importlib.abc": [
        "importlib.abc.ExecutionLoader",
        "importlib._bootstrap_external",
        "importlib.abc.ResourceLoader",
        "importlib.abc.ResourceReader",
        "importlib.abc.FileLoader",
        "importlib.abc.SourceLoader",
        "importlib.abc.Finder",
        "importlib.abc.MetaPathFinder",
        "abc",
        "importlib.abc.InspectLoader",
        "importlib.abc.Loader",
        "importlib.abc.PathEntryFinder",
        "importlib.machinery",
        "warnings",
        "importlib.abc._register"
    ],
    "importlib.abc.Finder": [],
    "importlib.abc.MetaPathFinder": [],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.PathEntryFinder": [],
    "importlib.abc.Loader": [],
    "importlib.abc.ResourceLoader": [],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib.abc.ExecutionLoader": [],
    "importlib.abc.FileLoader": [],
    "importlib.abc.SourceLoader": [],
    "importlib.abc.ResourceReader": [],
    "importlib.metadata.PackageNotFoundError": [],
    "importlib.metadata.EntryPoint": [
        "re.compile",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.PackagePath": [],
    "importlib.metadata.FileHash": [],
    "importlib.metadata.Distribution": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder": [
        "importlib.metadata.DistributionFinder.Context",
        "importlib.metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib.metadata.FastPath": [],
    "importlib.metadata.Prepared": [],
    "importlib.metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.PathDistribution": [],
    "importlib.metadata.MetadataPathFinder.find_distributions": [
        "<builtin>.map",
        "importlib.metadata.MetadataPathFinder._search_paths"
    ],
    "importlib.metadata.MetadataPathFinder._search_paths": [
        "<builtin>.map",
        "importlib.metadata.Prepared.__init__"
    ],
    "importlib.metadata.Prepared.__init__": [],
    "importlib._bootstrap_external.FileFinder.__init__": [
        "<list>.extend",
        "<builtin>.set"
    ],
    "importlib._bootstrap_external.FileFinder.find_loader": [
        "importlib._bootstrap_external.FileFinder.find_spec"
    ],
    "importlib._bootstrap_external.FileFinder.find_spec": [
        "importlib._bootstrap_external._path_stat",
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external.FileFinder._get_spec",
        "importlib._bootstrap_external.FileFinder._fill_cache",
        "importlib._bootstrap_external._path_isfile"
    ],
    "importlib._bootstrap_external.FileFinder._fill_cache": [
        "<builtin>.set"
    ],
    "importlib._bootstrap_external.FileFinder._get_spec": [
        "importlib._bootstrap_external.spec_from_file_location"
    ],
    "importlib._bootstrap_external._fix_up_module": [
        "importlib._bootstrap_external.spec_from_file_location"
    ],
    "importlib._bootstrap_external._install": [
        "importlib._bootstrap_external._setup",
        "importlib._bootstrap_external._get_supported_file_loaders"
    ],
    "multiprocessing.managers.rebuild_as_list": [
        "<builtin>.list"
    ],
    "multiprocessing.managers.dispatch": [
        "multiprocessing.managers.convert_to_error"
    ],
    "multiprocessing.managers.convert_to_error": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "multiprocessing.managers.RemoteError.__str__": [
        "<builtin>.str"
    ],
    "multiprocessing.managers.all_methods": [
        "<builtin>.callable",
        "<list>.append",
        "<builtin>.getattr",
        "<builtin>.dir"
    ],
    "multiprocessing.managers.public_methods": [
        "multiprocessing.managers.all_methods"
    ],
    "multiprocessing.managers.Server.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "_thread.allocate_lock",
        "<builtin>.type"
    ],
    "multiprocessing.managers.Server.serve_forever": [
        "threading.Thread.start",
        "multiprocessing.process.current_process",
        "threading.Event.__init__",
        "threading.Event.is_set",
        "threading.Event.wait",
        "threading.Thread.__init__"
    ],
    "multiprocessing.managers.Server.accepter": [
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "multiprocessing.managers.Server.handle_request": [
        "multiprocessing.connection.answer_challenge",
        "multiprocessing.connection.deliver_challenge",
        "<builtin>.getattr",
        "traceback.format_exc",
        "multiprocessing.util.info"
    ],
    "multiprocessing.managers.Server.serve_client": [
        "<builtin>.getattr",
        "traceback.format_exc",
        "threading.current_thread",
        "threading.Event.is_set",
        "<builtin>.type",
        "multiprocessing.util.info",
        "multiprocessing.util.debug",
        "<builtin>.AttributeError"
    ],
    "multiprocessing.managers.Server.fallback_str": [
        "<builtin>.str"
    ],
    "multiprocessing.managers.Server.fallback_repr": [
        "<builtin>.repr"
    ],
    "multiprocessing.managers.Server.number_of_objects": [
        "<builtin>.len"
    ],
    "multiprocessing.managers.Server.shutdown": [
        "traceback.print_exc",
        "multiprocessing.util.debug",
        "traceback"
    ],
    "multiprocessing.managers.Server.create": [
        "<builtin>.TypeError",
        "multiprocessing.managers.Server.incref",
        "warnings.warn",
        "<builtin>.len",
        "warnings",
        "<builtin>.tuple"
    ],
    "multiprocessing.managers.Server.incref": [],
    "multiprocessing.managers.Server.get_methods": [
        "<builtin>.tuple"
    ],
    "multiprocessing.managers.Server.accept_connection": [
        "threading.current_thread",
        "multiprocessing.managers.Server.serve_client"
    ],
    "multiprocessing.managers.Server.decref": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.BaseManager.__init__": [
        "multiprocessing.process.current_process",
        "get_context"
    ],
    "multiprocessing.managers.BaseManager.get_server": [
        "multiprocessing.managers.Server.__init__"
    ],
    "multiprocessing.managers.BaseManager.connect": [
        "multiprocessing.managers.dispatch"
    ],
    "multiprocessing.managers.BaseManager._run_server": [
        "multiprocessing.util.info",
        "multiprocessing.managers.Server.__init__",
        "multiprocessing.managers.Server.serve_forever",
        "signal.signal"
    ],
    "multiprocessing.managers.BaseManager._create": [
        "multiprocessing.managers.Token.__init__",
        "multiprocessing.managers.dispatch"
    ],
    "multiprocessing.managers.Token.__init__": [],
    "multiprocessing.managers.BaseManager._debug_info": [
        "multiprocessing.managers.dispatch"
    ],
    "multiprocessing.managers.BaseManager._number_of_objects": [
        "multiprocessing.managers.dispatch"
    ],
    "multiprocessing.managers.BaseManager.__enter__": [
        "multiprocessing.managers.BaseManager.start"
    ],
    "multiprocessing.managers.BaseManager.__exit__": [
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.managers.BaseManager._finalize_manager": [
        "multiprocessing.util.info",
        "multiprocessing.managers.dispatch",
        "<builtin>.hasattr"
    ],
    "multiprocessing.managers.ProcessLocalSet.__init__": [
        "multiprocessing.util.register_after_fork"
    ],
    "multiprocessing.managers.ProcessLocalSet.__reduce__": [
        "<builtin>.type"
    ],
    "multiprocessing.managers.BaseProxy.__init__": [
        "multiprocessing.util.register_after_fork",
        "multiprocessing.managers.BaseProxy._incref",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.managers.BaseProxy._incref": [
        "multiprocessing.managers.dispatch",
        "multiprocessing.util.debug",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.managers.BaseProxy._connect": [
        "multiprocessing.managers.dispatch",
        "threading.current_thread",
        "multiprocessing.process.current_process",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.BaseProxy._callmethod": [
        "multiprocessing.managers.BaseProxy._connect",
        "threading.current_thread",
        "multiprocessing.managers.convert_to_error",
        "multiprocessing.managers.dispatch",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.BaseProxy._getvalue": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BaseProxy._decref": [
        "threading.current_thread",
        "multiprocessing.managers.dispatch",
        "<builtin>.hasattr",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.BaseProxy._after_fork": [
        "multiprocessing.util.info",
        "multiprocessing.managers.BaseProxy._incref"
    ],
    "multiprocessing.managers.BaseProxy.__reduce__": [
        "multiprocessing.context.get_spawning_popen",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "multiprocessing.managers.BaseProxy.__deepcopy__": [
        "multiprocessing.managers.BaseProxy._getvalue"
    ],
    "multiprocessing.managers.BaseProxy.__repr__": [
        "<builtin>.id",
        "<builtin>.type"
    ],
    "multiprocessing.managers.BaseProxy.__str__": [
        "<builtin>.repr",
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.RebuildProxy": [
        "multiprocessing.process.current_process",
        "<builtin>.getattr",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.AutoProxy": [
        "multiprocessing.managers.dispatch",
        "multiprocessing.process.current_process",
        "multiprocessing.managers.MakeProxyType"
    ],
    "multiprocessing.managers.Namespace.__repr__": [
        "<builtin>.list",
        "<list>.sort",
        "<list>.append"
    ],
    "multiprocessing.managers.Value.__repr__": [
        "<builtin>.type"
    ],
    "multiprocessing.managers.IteratorProxy.__next__": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.IteratorProxy.send": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.IteratorProxy.throw": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.IteratorProxy.close": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.AcquirerProxy.acquire": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.AcquirerProxy.release": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.AcquirerProxy.__enter__": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.AcquirerProxy.__exit__": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ConditionProxy.wait": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ConditionProxy.notify": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ConditionProxy.notify_all": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ConditionProxy.wait_for": [
        "multiprocessing.managers.ConditionProxy.wait"
    ],
    "multiprocessing.managers.EventProxy.is_set": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.EventProxy.set": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.EventProxy.clear": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.EventProxy.wait": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.wait": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.abort": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.reset": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.parties": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.n_waiting": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BarrierProxy.broken": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ValueProxy.get": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.ValueProxy.set": [
        "multiprocessing.managers.BaseProxy._callmethod"
    ],
    "multiprocessing.managers.BaseManager.register.temp": [
        "multiprocessing.managers.AutoProxy",
        "multiprocessing.managers.BaseManager._create",
        "multiprocessing.managers.dispatch",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers._SharedMemoryTracker.register_segment": [
        "<list>.append",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers._SharedMemoryTracker.destroy_segment": [
        "<list>.remove",
        "multiprocessing.shared_memory.SharedMemory.unlink",
        "multiprocessing.shared_memory.SharedMemory.close",
        "multiprocessing.shared_memory.SharedMemory.__init__",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.shared_memory.SharedMemory.__init__": [
        "multiprocessing.shared_memory.SharedMemory.unlink",
        "<builtin>.FileExistsError",
        "<builtin>.memoryview",
        "multiprocessing.shared_memory._make_filename",
        "multiprocessing.resource_tracker.ResourceTracker.register",
        "multiprocessing.resource_tracker",
        "<builtin>.ValueError"
    ],
    "multiprocessing.shared_memory._make_filename": [
        "secrets.token_hex",
        "<builtin>.len"
    ],
    "secrets.token_hex": [
        "secrets.token_bytes"
    ],
    "secrets.token_bytes": [],
    "multiprocessing.shared_memory.SharedMemory.unlink": [
        "multiprocessing.resource_tracker.ResourceTracker.unregister",
        "multiprocessing.resource_tracker"
    ],
    "multiprocessing.resource_tracker.ResourceTracker.unregister": [
        "multiprocessing.resource_tracker.ResourceTracker._send"
    ],
    "multiprocessing.shared_memory.SharedMemory.close": [],
    "multiprocessing.managers._SharedMemoryTracker.unlink": [
        "multiprocessing.managers._SharedMemoryTracker.destroy_segment"
    ],
    "multiprocessing.managers._SharedMemoryTracker.__del__": [
        "multiprocessing.managers._SharedMemoryTracker.unlink",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers._SharedMemoryTracker.__setstate__": [
        "multiprocessing.managers._SharedMemoryTracker.__init__"
    ],
    "multiprocessing.managers._SharedMemoryTracker.__init__": [],
    "multiprocessing.managers.SharedMemoryServer.__init__": [
        "multiprocessing.managers._SharedMemoryTracker.__init__",
        "multiprocessing.managers.Server.__init__",
        "<builtin>.isinstance",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.SharedMemoryServer.create": [
        "<builtin>.TypeError",
        "multiprocessing.managers.Server.create",
        "<builtin>.hasattr",
        "<builtin>.len"
    ],
    "multiprocessing.managers.SharedMemoryServer.shutdown": [
        "multiprocessing.managers.Server.shutdown",
        "multiprocessing.managers._SharedMemoryTracker.unlink"
    ],
    "multiprocessing.managers.SharedMemoryServer.track_segment": [
        "multiprocessing.managers._SharedMemoryTracker.register_segment"
    ],
    "multiprocessing.managers.SharedMemoryServer.release_segment": [
        "multiprocessing.managers._SharedMemoryTracker.destroy_segment"
    ],
    "multiprocessing.managers.SharedMemoryManager.__init__": [
        "multiprocessing.managers.BaseManager.__init__",
        "multiprocessing.resource_tracker.ResourceTracker.ensure_running",
        "multiprocessing.resource_tracker",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.SharedMemoryManager.__del__": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.managers.SharedMemoryManager.get_server": [
        "multiprocessing.managers.SharedMemoryServer.__init__"
    ],
    "multiprocessing.managers.SharedMemoryManager.SharedMemory": [
        "multiprocessing.shared_memory.SharedMemory.__init__",
        "multiprocessing.managers.dispatch",
        "multiprocessing.shared_memory.SharedMemory.unlink"
    ],
    "multiprocessing.managers.SharedMemoryManager.ShareableList": [
        "multiprocessing.managers.dispatch",
        "multiprocessing.shared_memory.ShareableList.__init__",
        "multiprocessing.shared_memory.SharedMemory.unlink"
    ],
    "multiprocessing.shared_memory.ShareableList.__init__": [
        "<builtin>.int",
        "multiprocessing.shared_memory.ShareableList._extract_recreation_code",
        "<builtin>.len",
        "<builtin>.isinstance",
        "multiprocessing.shared_memory.SharedMemory.__init__",
        "<builtin>.tuple",
        "<builtin>.sum",
        "<builtin>.type"
    ],
    "multiprocessing.shared_memory.ShareableList._extract_recreation_code": [
        "<builtin>.isinstance"
    ],
    "multiprocessing.pool.mapstar": [
        "<builtin>.map",
        "<builtin>.list"
    ],
    "multiprocessing.pool.starmapstar": [
        "<builtin>.list"
    ],
    "multiprocessing.pool.ExceptionWithTraceback.__init__": [
        "traceback.format_exception",
        "<builtin>.type"
    ],
    "multiprocessing.pool.rebuild_exc": [
        "multiprocessing.pool.RemoteTraceback.__init__"
    ],
    "multiprocessing.pool.RemoteTraceback.__init__": [],
    "multiprocessing.pool.MaybeEncodingError.__init__": [
        "<builtin>.super",
        "<builtin>.repr"
    ],
    "multiprocessing.pool.worker": [
        "<builtin>.AssertionError",
        "multiprocessing.pool.ExceptionWithTraceback.__init__",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "multiprocessing.util.debug",
        "multiprocessing.pool.MaybeEncodingError.__init__"
    ],
    "multiprocessing.pool._PoolCache.__delitem__": [
        "<builtin>.super"
    ],
    "multiprocessing.pool.Pool.__del__": [
        "<builtin>.getattr",
        "warnings.warn"
    ],
    "multiprocessing.pool.Pool.__repr__": [
        "<builtin>.len"
    ],
    "multiprocessing.pool.Pool._get_worker_sentinels": [
        "<builtin>.hasattr"
    ],
    "multiprocessing.pool.Pool._check_running": [
        "<builtin>.ValueError"
    ],
    "multiprocessing.pool.Pool.apply": [
        "multiprocessing.pool.Pool.apply_async",
        "multiprocessing.pool.ApplyResult.get"
    ],
    "multiprocessing.pool.Pool.apply_async": [
        "queue._PySimpleQueue.put",
        "multiprocessing.pool.ApplyResult.__init__",
        "multiprocessing.pool.Pool._check_running"
    ],
    "multiprocessing.pool.ApplyResult.__init__": [
        "threading.Event.__init__",
        "<builtin>.next"
    ],
    "multiprocessing.pool.ApplyResult.get": [
        "multiprocessing.pool.ApplyResult.ready",
        "multiprocessing.pool.ApplyResult.wait"
    ],
    "multiprocessing.pool.ApplyResult.wait": [
        "threading.Event.wait"
    ],
    "multiprocessing.pool.ApplyResult.ready": [
        "threading.Event.is_set"
    ],
    "apply.get": [
        "TimeoutError"
    ],
    "TimeoutError": [],
    "multiprocessing.pool.Pool.map": [
        "multiprocessing.pool.ApplyResult.get",
        "multiprocessing.pool.Pool._map_async"
    ],
    "multiprocessing.pool.Pool._map_async": [
        "multiprocessing.pool.MapResult.__init__",
        "queue._PySimpleQueue.put",
        "<builtin>.divmod",
        "<builtin>.len",
        "<builtin>.hasattr",
        "multiprocessing.pool.Pool._check_running",
        "multiprocessing.pool.Pool._guarded_task_generation",
        "multiprocessing.pool.Pool._get_tasks",
        "<builtin>.list"
    ],
    "multiprocessing.pool.Pool._get_tasks": [
        "<builtin>.iter",
        "<builtin>.tuple"
    ],
    "multiprocessing.pool.MapResult.__init__": [
        "multiprocessing.pool.ApplyResult.__init__",
        "<builtin>.bool",
        "threading.Event.set"
    ],
    "multiprocessing.pool.Pool._guarded_task_generation": [
        "<builtin>.enumerate"
    ],
    "multiprocessing.pool.Pool.starmap": [
        "multiprocessing.pool.ApplyResult.get",
        "multiprocessing.pool.Pool._map_async"
    ],
    "multiprocessing.pool.Pool.starmap_async": [
        "multiprocessing.pool.Pool._map_async"
    ],
    "multiprocessing.pool.Pool.imap": [
        "multiprocessing.pool.IMapIterator.__init__",
        "queue._PySimpleQueue.put",
        "multiprocessing.pool.Pool._guarded_task_generation",
        "multiprocessing.pool.Pool._check_running",
        "multiprocessing.pool.Pool._get_tasks",
        "<builtin>.ValueError"
    ],
    "multiprocessing.pool.IMapIterator.__init__": [
        "_thread.allocate_lock",
        "_collections.deque",
        "<builtin>.next",
        "threading.Condition.__init__"
    ],
    "multiprocessing.pool.Pool.imap_unordered": [
        "queue._PySimpleQueue.put",
        "multiprocessing.pool.Pool._guarded_task_generation",
        "multiprocessing.pool.Pool._check_running",
        "multiprocessing.pool.Pool._get_tasks",
        "<builtin>.ValueError"
    ],
    "multiprocessing.pool.Pool.map_async": [
        "multiprocessing.pool.Pool._map_async"
    ],
    "multiprocessing.pool.Pool.__reduce__": [
        "<builtin>.NotImplementedError"
    ],
    "multiprocessing.pool.Pool.close": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.pool.Pool.terminate": [
        "multiprocessing.util.debug",
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.pool.Pool.join": [
        "threading.Thread.join",
        "multiprocessing.util.debug",
        "<builtin>.ValueError"
    ],
    "multiprocessing.pool.Pool._help_stuff_finish": [
        "multiprocessing.util.debug"
    ],
    "multiprocessing.pool.Pool._terminate_pool": [
        "<builtin>.AssertionError",
        "multiprocessing.pool.Pool._help_stuff_finish",
        "<builtin>.len",
        "multiprocessing.pool.ThreadPool._help_stuff_finish",
        "threading.current_thread",
        "<builtin>.hasattr",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.pool.Pool.__enter__": [
        "multiprocessing.pool.Pool._check_running"
    ],
    "multiprocessing.pool.Pool.__exit__": [
        "multiprocessing.pool.Pool.terminate"
    ],
    "multiprocessing.pool.ApplyResult.successful": [
        "multiprocessing.pool.ApplyResult.ready",
        "<builtin>.ValueError"
    ],
    "get": [
        "TimeoutError"
    ],
    "multiprocessing.pool.ApplyResult._set": [
        "multiprocessing.pool.ThreadPool.__init__",
        "multiprocessing.pool.Pool.__init__",
        "threading.Event.set"
    ],
    "multiprocessing.pool.MapResult._set": [
        "multiprocessing.pool.ThreadPool.__init__",
        "multiprocessing.pool.Pool.__init__",
        "threading.Event.set"
    ],
    "multiprocessing.dummy": [
        "threading",
        "weakref.WeakKeyDictionary.__init__",
        "multiprocessing.dummy.Value",
        "queue",
        "threading.current_thread",
        "weakref",
        "array",
        "multiprocessing.dummy.Namespace",
        "multiprocessing.dummy.connection",
        "multiprocessing.dummy.DummyProcess"
    ],
    "multiprocessing.pool.ThreadPool.Process": [
        "multiprocessing.dummy.DummyProcess.__init__",
        "multiprocessing.dummy"
    ],
    "multiprocessing.dummy.connection": [
        "multiprocessing.dummy.connection.Listener",
        "queue",
        "multiprocessing.dummy.connection.Connection"
    ],
    "multiprocessing.dummy.connection.Listener": [
        "<builtin>.property"
    ],
    "multiprocessing.dummy.connection.Connection": [],
    "multiprocessing.dummy.DummyProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.dummy.Namespace": [],
    "multiprocessing.dummy.Value": [
        "<builtin>.property"
    ],
    "multiprocessing.dummy.DummyProcess.__init__": [
        "threading.current_thread",
        "threading.Thread.__init__",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "multiprocessing.pool.ThreadPool.__init__": [
        "multiprocessing.pool.Pool.__init__"
    ],
    "multiprocessing.pool.ThreadPool._setup_queues": [
        "queue._PySimpleQueue.__init__"
    ],
    "multiprocessing.pool.ThreadPool._help_stuff_finish": [
        "<builtin>.range"
    ],
    "multiprocessing.shared_memory.SharedMemory.__del__": [
        "multiprocessing.shared_memory.SharedMemory.close"
    ],
    "multiprocessing.shared_memory.SharedMemory.name": [
        "<str>.startswith"
    ],
    "multiprocessing.shared_memory.ShareableList._get_packing_format": [
        "<builtin>.IndexError"
    ],
    "multiprocessing.shared_memory.ShareableList._get_back_transform": [
        "<builtin>.IndexError"
    ],
    "multiprocessing.shared_memory.ShareableList._set_packing_format_and_transform": [
        "multiprocessing.shared_memory.ShareableList._extract_recreation_code",
        "<builtin>.IndexError"
    ],
    "multiprocessing.shared_memory.ShareableList.__getitem__": [
        "multiprocessing.shared_memory.ShareableList._get_packing_format",
        "multiprocessing.shared_memory.ShareableList._get_back_transform",
        "<builtin>.sum",
        "<builtin>.IndexError"
    ],
    "multiprocessing.shared_memory.ShareableList.__setitem__": [
        "<builtin>.len",
        "multiprocessing.shared_memory.ShareableList._set_packing_format_and_transform",
        "<builtin>.isinstance",
        "<builtin>.type",
        "multiprocessing.shared_memory.ShareableList._get_packing_format",
        "<builtin>.sum",
        "<builtin>.ValueError",
        "<builtin>.IndexError"
    ],
    "multiprocessing.shared_memory.ShareableList.__repr__": [
        "<builtin>.list"
    ],
    "multiprocessing.shared_memory.ShareableList.format": [
        "multiprocessing.shared_memory.ShareableList._get_packing_format",
        "<builtin>.range"
    ],
    "multiprocessing.shared_memory.ShareableList._offset_packing_formats": [
        "<builtin>.sum"
    ],
    "multiprocessing.shared_memory.ShareableList.count": [
        "<builtin>.sum"
    ],
    "multiprocessing.shared_memory.ShareableList.index": [
        "<builtin>.enumerate"
    ],
    "secrets.randbelow": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.ValueError"
    ],
    "secrets.token_urlsafe": [
        "base64.urlsafe_b64encode",
        "secrets.token_bytes"
    ],
    "hmac.HMAC.hexdigest": [
        "hmac.HMAC._current"
    ],
    "hmac.digest": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.len",
        "<builtin>.isinstance",
        "hmac.digest.<lambda1>"
    ],
    "hmac.digest.<lambda1>": [],
    "multiprocessing.synchronize.SemLock._cleanup": [
        "multiprocessing.resource_tracker.ResourceTracker.unregister",
        "multiprocessing.resource_tracker"
    ],
    "multiprocessing.synchronize.SemLock.__getstate__": [
        "multiprocessing.context.get_spawning_popen",
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.synchronize.SemLock.__setstate__": [
        "multiprocessing.synchronize.SemLock._make_methods",
        "multiprocessing.util.debug"
    ],
    "multiprocessing.synchronize.Lock.__repr__": [
        "threading.current_thread",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.synchronize.RLock.__repr__": [
        "threading.current_thread",
        "multiprocessing.process.current_process"
    ],
    "multiprocessing.synchronize.Condition.__getstate__": [
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.synchronize.Condition.__setstate__": [
        "multiprocessing.synchronize.Condition._make_methods"
    ],
    "multiprocessing.synchronize.Condition.wait": [
        "<builtin>.range"
    ],
    "multiprocessing.synchronize.Condition.notify": [
        "<builtin>.range"
    ],
    "multiprocessing.synchronize.Condition.notify_all": [
        "multiprocessing.synchronize.Condition.notify"
    ],
    "multiprocessing.synchronize.Condition.wait_for": [
        "multiprocessing.synchronize.Condition.wait"
    ],
    "multiprocessing.resource_tracker.ResourceTracker.getfd": [
        "multiprocessing.resource_tracker.ResourceTracker.ensure_running"
    ],
    "multiprocessing.resource_tracker.main": [
        "<map>.get",
        "signal.pthread_sigmask",
        "<builtin>.set",
        "<map>.keys",
        "<builtin>.ValueError",
        "<builtin>.RuntimeError",
        "signal.signal",
        "<builtin>.open"
    ],
    "multiprocessing.spawn.import_main_path": [
        "multiprocessing.spawn._fixup_main_from_path"
    ],
    "runpy._ModifiedArgv0.__enter__": [
        "<builtin>.RuntimeError"
    ],
    "pkgutil._get_spec": [
        "pkgutil.ImpImporter.find_module",
        "_bootstrap.spec_from_loader"
    ],
    "_bootstrap.spec_from_loader": [],
    "pkgutil.walk_packages": [
        "<builtin>.__import__",
        "pkgutil.iter_modules"
    ],
    "pkgutil.iter_modules": [
        "<builtin>.map",
        "<builtin>.isinstance",
        "pkgutil.iter_importer_modules",
        "<builtin>.ValueError",
        "pkgutil.iter_importers"
    ],
    "pkgutil.iter_importers": [
        "pkgutil.get_importer",
        "<str>.rpartition",
        "importlib.import_module",
        "<builtin>.getattr",
        "<builtin>.ImportError",
        "<str>.startswith"
    ],
    "pkgutil.iter_importer_modules": [
        "<builtin>.hasattr"
    ],
    "pkgutil._iter_file_finder_modules": [
        "inspect",
        "<list>.sort",
        "ntpath.join",
        "posixpath.join",
        "genericpath.isdir",
        "inspect.getmodulename",
        "nt._isdir"
    ],
    "pkgutil._import_imp": [
        "warnings.catch_warnings.__init__"
    ],
    "pkgutil.ImpImporter.__init__": [
        "pkgutil._import_imp",
        "warnings.warn"
    ],
    "pkgutil.ImpImporter.find_module": [
        "<str>.split",
        "pkgutil.ImpLoader.__init__"
    ],
    "pkgutil.ImpLoader.__init__": [
        "pkgutil._import_imp",
        "warnings.warn"
    ],
    "pkgutil.ImpImporter.iter_modules": [
        "inspect",
        "<list>.sort",
        "ntpath.join",
        "posixpath.join",
        "genericpath.isdir",
        "inspect.getmodulename",
        "nt._isdir"
    ],
    "pkgutil.ImpLoader.load_module": [
        "pkgutil.ImpLoader._reopen"
    ],
    "pkgutil.ImpLoader._reopen": [
        "<builtin>.open"
    ],
    "pkgutil.ImpLoader.get_data": [
        "<builtin>.open"
    ],
    "pkgutil.ImpLoader._fix_name": [
        "<builtin>.ImportError"
    ],
    "pkgutil.ImpLoader.is_package": [
        "pkgutil.ImpLoader._fix_name"
    ],
    "pkgutil.ImpLoader.get_code": [
        "pkgutil.ImpLoader._get_delegate",
        "pkgutil.ImpLoader._fix_name",
        "pkgutil.ImpLoader.get_source",
        "<builtin>.compile",
        "pkgutil.read_code",
        "pkgutil.ImpLoader._reopen"
    ],
    "pkgutil.ImpLoader._get_delegate": [
        "pkgutil._get_spec",
        "pkgutil.ImpImporter.__init__"
    ],
    "pkgutil.ImpLoader.get_source": [
        "pkgutil.ImpLoader._get_delegate",
        "pkgutil.ImpLoader._fix_name",
        "genericpath.exists",
        "<builtin>.open",
        "pkgutil.ImpLoader._reopen"
    ],
    "pkgutil.ImpLoader.get_filename": [
        "pkgutil.ImpLoader._get_delegate",
        "pkgutil.ImpLoader._fix_name"
    ],
    "pkgutil.iter_zipimport_modules": [
        "<builtin>.sorted",
        "inspect",
        "inspect.getmodulename",
        "<builtin>.len"
    ],
    "pkgutil.get_loader": [
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "pkgutil.find_loader"
    ],
    "pkgutil.find_loader": [
        "<builtin>.ImportError",
        "importlib.util.find_spec",
        "<builtin>.type"
    ],
    "pkgutil.extend_path": [
        "genericpath.isfile",
        "ntpath.join",
        "pkgutil.get_importer",
        "posixpath.join",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.open"
    ],
    "pkgutil.get_data": [
        "ntpath.dirname",
        "ntpath.join",
        "posixpath.dirname",
        "importlib.util.find_spec",
        "posixpath.join",
        "<builtin>.hasattr"
    ],
    "multiprocessing.heap.Arena.__init__": [
        "multiprocessing.util.Finalize.__init__",
        "multiprocessing.heap.Arena._choose_dir",
        "tempfile.mkstemp"
    ],
    "multiprocessing.heap.Arena._choose_dir": [
        "multiprocessing.util.get_temp_dir"
    ],
    "multiprocessing.heap.reduce_arena": [
        "<builtin>.ValueError",
        "multiprocessing.reduction.DupFd"
    ],
    "multiprocessing.heap.rebuild_arena": [
        "multiprocessing.heap.Arena.__init__"
    ],
    "multiprocessing.heap.Heap._new_arena": [
        "<builtin>.max",
        "multiprocessing.heap.Arena.__init__",
        "<list>.append",
        "multiprocessing.util.info",
        "multiprocessing.heap.Heap._roundup"
    ],
    "multiprocessing.heap.Heap._roundup": [],
    "multiprocessing.heap.Heap._discard_arena": [
        "<list>.remove"
    ],
    "multiprocessing.heap.Heap._malloc": [
        "bisect.bisect_left",
        "multiprocessing.heap.Heap._new_arena",
        "<builtin>.len"
    ],
    "multiprocessing.heap.Heap._add_free_block": [
        "bisect.insort_right"
    ],
    "multiprocessing.heap.Heap._absorb": [
        "<list>.remove"
    ],
    "multiprocessing.heap.Heap._remove_allocated_block": [
        "multiprocessing.heap.Heap._discard_arena"
    ],
    "multiprocessing.heap.Heap._free_pending_blocks": [
        "multiprocessing.heap.Heap._add_free_block",
        "<list>.pop",
        "multiprocessing.heap.Heap._remove_allocated_block"
    ],
    "multiprocessing.heap.Heap.free": [
        "multiprocessing.heap.Heap._add_free_block",
        "multiprocessing.heap.Heap._remove_allocated_block",
        "<list>.append",
        "multiprocessing.heap.Heap._free_pending_blocks",
        "<builtin>.ValueError"
    ],
    "multiprocessing.sharedctypes.copy": [
        "multiprocessing.sharedctypes._new_value",
        "<builtin>.type"
    ],
    "multiprocessing.sharedctypes.reduce_ctype": [
        "<builtin>.isinstance",
        "multiprocessing.context.assert_spawning",
        "<builtin>.type"
    ],
    "multiprocessing.sharedctypes.SynchronizedBase.__init__": [
        "get_context"
    ],
    "multiprocessing.sharedctypes.SynchronizedBase.__reduce__": [
        "multiprocessing.context.assert_spawning"
    ],
    "multiprocessing.sharedctypes.SynchronizedBase.__repr__": [
        "<builtin>.type"
    ],
    "multiprocessing.sharedctypes.SynchronizedArray.__len__": [
        "<builtin>.len"
    ],
    "ctypes.create_string_buffer": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "ctypes.c_buffer": [
        "ctypes.create_string_buffer"
    ],
    "ctypes.WINFUNCTYPE": [
        "ctypes.WINFUNCTYPE.WinFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.WINFUNCTYPE.WinFunctionType": [],
    "ctypes.py_object.__repr__": [
        "<builtin>.super",
        "<builtin>.type"
    ],
    "ctypes.create_unicode_buffer": [
        "<builtin>.TypeError",
        "<builtin>.ord",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.sum"
    ],
    "ctypes.SetPointerType": [
        "<builtin>.RuntimeError",
        "<builtin>.id"
    ],
    "ctypes.CDLL.__init__": [
        "ctypes.CDLL.__init__._FuncPtr"
    ],
    "ctypes.CDLL.__init__._FuncPtr": [],
    "ctypes.CDLL.__repr__": [
        "<builtin>.id"
    ],
    "ctypes.CDLL.__getattr__": [
        "ctypes.CDLL.__getitem__",
        "<builtin>.setattr",
        "<builtin>.AttributeError"
    ],
    "ctypes.CDLL.__getitem__": [
        "<builtin>.isinstance"
    ],
    "ctypes.LibraryLoader.__getattr__": [
        "<builtin>.setattr",
        "ctypes.CDLL.__init__",
        "<builtin>.AttributeError"
    ],
    "ctypes.LibraryLoader.__getitem__": [
        "<builtin>.getattr"
    ],
    "ctypes.LibraryLoader.LoadLibrary": [
        "ctypes.CDLL.__init__"
    ],
    "ctypes.WinError": [
        "<builtin>.OSError"
    ],
    "ctypes.DllGetClassObject": [
        "<builtin>.globals",
        "<builtin>.__import__",
        "<builtin>.locals"
    ],
    "ctypes.DllCanUnloadNow": [
        "<builtin>.globals",
        "<builtin>.__import__",
        "<builtin>.locals"
    ],
    "ctypes._endian._other_endian": [
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.issubclass",
        "ctypes._endian._other_endian"
    ],
    "ctypes._endian._swapped_meta.__setattr__": [
        "<builtin>.super",
        "<list>.append"
    ],
    "multiprocessing.forkserver.ForkServer._stop_unlocked": [
        "multiprocessing.util.is_abstract_socket_namespace"
    ],
    "multiprocessing.forkserver.ForkServer.connect_to_new_process": [
        "multiprocessing.reduction.sendfds",
        "socket.socket.__init__",
        "<builtin>.len",
        "multiprocessing.forkserver.ForkServer.ensure_running",
        "<builtin>.ValueError"
    ],
    "multiprocessing.forkserver.ForkServer.ensure_running": [],
    "multiprocessing.forkserver.main": [
        "<list>.extend",
        "<builtin>.AssertionError",
        "<map>.items",
        "warnings.warn",
        "multiprocessing.process.current_process",
        "socket.socket.__init__",
        "multiprocessing.spawn.import_main_path",
        "<builtin>.len",
        "selectors.KqueueSelector.__init__",
        "multiprocessing.forkserver._serve_one",
        "<map>.pop",
        "multiprocessing.reduction.recvfds",
        "selectors.SelectSelector.__init__",
        "<builtin>.__import__",
        "<builtin>.RuntimeError",
        "multiprocessing.util._close_stdin",
        "signal.signal",
        "multiprocessing.forkserver.write_signed"
    ],
    "multiprocessing.forkserver.write_signed": [
        "<builtin>.RuntimeError"
    ],
    "multiprocessing.forkserver._serve_one": [
        "signal.signal",
        "multiprocessing.spawn._main"
    ],
    "multiprocessing.forkserver.read_signed": [
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "multiprocessing.popen_spawn_win32.Popen.duplicate_for_child": [
        "multiprocessing.context.get_spawning_popen",
        "multiprocessing.reduction.duplicate"
    ],
    "multiprocessing.popen_spawn_win32.Popen.wait": [
        "<builtin>.int",
        "<builtin>.max"
    ],
    "multiprocessing.popen_spawn_win32.Popen.poll": [
        "multiprocessing.popen_spawn_win32.Popen.wait"
    ],
    "multiprocessing.popen_spawn_win32.Popen.terminate": [
        "<builtin>.int",
        "multiprocessing.popen_spawn_win32.Popen.wait"
    ],
    "multiprocessing.popen_fork.Popen.wait": [
        "multiprocessing.popen_forkserver.Popen.poll",
        "multiprocessing.popen_fork.Popen.poll",
        "multiprocessing.connection.wait",
        "multiprocessing.connection"
    ],
    "multiprocessing.popen_fork.Popen.poll": [],
    "multiprocessing.popen_fork.Popen._send_signal": [
        "multiprocessing.popen_fork.Popen.wait"
    ],
    "multiprocessing.popen_fork.Popen.terminate": [
        "multiprocessing.popen_fork.Popen._send_signal"
    ],
    "multiprocessing.popen_fork.Popen.kill": [
        "multiprocessing.popen_fork.Popen._send_signal"
    ],
    "multiprocessing.popen_fork.Popen.close": [
        "multiprocessing.util.Finalize.__init__"
    ],
    "multiprocessing.popen_forkserver._DupFd.detach": [
        "multiprocessing.forkserver.ForkServer.get_inherited_fds"
    ],
    "multiprocessing.forkserver.ForkServer.get_inherited_fds": [],
    "multiprocessing.popen_forkserver.Popen.duplicate_for_child": [
        "<list>.append",
        "<builtin>.len"
    ],
    "multiprocessing.popen_forkserver.Popen._launch": [
        "multiprocessing.forkserver.ForkServer.connect_to_new_process",
        "multiprocessing.reduction.dump",
        "multiprocessing.context.set_spawning_popen",
        "multiprocessing.util.Finalize.__init__",
        "_io.BytesIO",
        "multiprocessing.forkserver.read_signed",
        "multiprocessing.spawn.get_preparation_data",
        "<builtin>.open"
    ],
    "multiprocessing.popen_forkserver.Popen.poll": [
        "multiprocessing.forkserver.read_signed",
        "multiprocessing.connection.wait",
        "multiprocessing.connection"
    ],
    "multiprocessing.resource_sharer.DupFd.detach": [
        "multiprocessing.reduction.recv_handle",
        "multiprocessing.resource_sharer._ResourceSharer.get_connection"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.get_connection": [
        "multiprocessing.connection.Client",
        "multiprocessing.process.current_process",
        "multiprocessing.connection._ConnectionBase.send",
        "multiprocessing.connection"
    ],
    "multiprocessing.resource_sharer.DupSocket.__init__": [
        "multiprocessing.resource_sharer._ResourceSharer.register"
    ],
    "multiprocessing.resource_sharer.DupSocket.detach": [
        "socket.fromshare",
        "multiprocessing.resource_sharer._ResourceSharer.get_connection"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.stop": [
        "multiprocessing.connection"
    ],
    "multiprocessing.resource_sharer._ResourceSharer._afterfork": [
        "multiprocessing.connection.Listener.close",
        "<map>.clear",
        "<list>.append",
        "_thread.allocate_lock",
        "<map>.items"
    ],
    "multiprocessing.resource_sharer._ResourceSharer._start": [
        "threading.Thread.start",
        "multiprocessing.process.current_process",
        "multiprocessing.connection",
        "threading.Thread.__init__",
        "multiprocessing.util.debug",
        "multiprocessing.connection.Listener.__init__"
    ],
    "multiprocessing.resource_sharer._ResourceSharer._serve": [
        "multiprocessing.connection.Listener.accept",
        "multiprocessing.util.is_exiting",
        "signal.pthread_sigmask",
        "<map>",
        "signal.valid_signals",
        "<builtin>.hasattr",
        "<map>.pop"
    ],
    "multiprocessing.resource_sharer.DupFd.__init__.send": [
        "multiprocessing.reduction.send_handle"
    ],
    "xmlrpc.client._strftime": [
        "xmlrpc.client._iso8601_format",
        "<builtin>.isinstance"
    ],
    "xmlrpc.client._iso8601_format": [],
    "xmlrpc.client.DateTime.__init__": [
        "xmlrpc.client._strftime",
        "<builtin>.isinstance"
    ],
    "xmlrpc.client.DateTime.make_comparable": [
        "<builtin>.TypeError",
        "xmlrpc.client._iso8601_format",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "xmlrpc.client.DateTime.timetuple",
        "<builtin>.type"
    ],
    "xmlrpc.client.DateTime.timetuple": [],
    "xmlrpc.client.DateTime.__lt__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__le__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__gt__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__ge__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__eq__": [
        "xmlrpc.client.DateTime.make_comparable"
    ],
    "xmlrpc.client.DateTime.__repr__": [
        "<builtin>.id"
    ],
    "xmlrpc.client.DateTime.decode": [
        "<builtin>.str"
    ],
    "xmlrpc.client._datetime": [
        "xmlrpc.client.DateTime.__init__",
        "xmlrpc.client.DateTime.decode"
    ],
    "xmlrpc.client.Binary.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "xmlrpc.client.Binary.__str__": [
        "<builtin>.str"
    ],
    "xmlrpc.client.Binary.__eq__": [
        "<builtin>.isinstance"
    ],
    "xmlrpc.client.Binary.decode": [
        "base64.decodebytes"
    ],
    "xmlrpc.client.Binary.encode": [
        "base64.encodebytes"
    ],
    "xmlrpc.client._binary": [
        "xmlrpc.client.Binary.decode",
        "xmlrpc.client.Binary.__init__"
    ],
    "xmlrpc.client.Marshaller.dumps": [
        "<builtin>.isinstance",
        "<list>",
        "xmlrpc.client.Marshaller.__dump"
    ],
    "xmlrpc.client.Marshaller.__dump": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<map>.keys",
        "<builtin>.type"
    ],
    "xmlrpc.client.Marshaller.dump_nil": [
        "<builtin>.TypeError"
    ],
    "xmlrpc.client.Marshaller.dump_long": [
        "<builtin>.int",
        "<builtin>.str",
        "<builtin>.OverflowError"
    ],
    "xmlrpc.client.Marshaller.dump_double": [
        "<builtin>.repr"
    ],
    "xmlrpc.client.Marshaller.dump_unicode": [
        "xmlrpc.client.escape"
    ],
    "xmlrpc.client.escape": [],
    "xmlrpc.client.Marshaller.dump_bytes": [
        "base64.encodebytes"
    ],
    "xmlrpc.client.Marshaller.dump_array": [
        "<builtin>.TypeError",
        "<builtin>.id",
        "xmlrpc.client.Marshaller.__dump"
    ],
    "xmlrpc.client.Marshaller.dump_struct": [
        "<builtin>.TypeError",
        "xmlrpc.client.escape",
        "xmlrpc.client.Marshaller.__dump",
        "<builtin>.isinstance",
        "<builtin>.id"
    ],
    "xmlrpc.client.Marshaller.dump_datetime": [
        "xmlrpc.client._strftime"
    ],
    "xmlrpc.client.Marshaller.dump_instance": [
        "xmlrpc.client.Marshaller.dump_struct"
    ],
    "xmlrpc.client.Unmarshaller.close": [
        "xmlrpc.client.Fault.__init__",
        "<builtin>.tuple"
    ],
    "xmlrpc.client.Fault.__init__": [],
    "xmlrpc.client.Unmarshaller.start": [
        "<list>.append"
    ],
    "xmlrpc.client.Unmarshaller.data": [
        "<list>.append"
    ],
    "xmlrpc.client.Unmarshaller.end_nil": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_boolean": [
        "<builtin>.TypeError",
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_int": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_double": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_bigdecimal": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_string": [
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_array": [
        "<list>.pop"
    ],
    "xmlrpc.client.Unmarshaller.end_struct": [
        "<list>.pop",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "xmlrpc.client.Unmarshaller.end_base64": [
        "xmlrpc.client.Binary.decode",
        "xmlrpc.client.Binary.__init__",
        "<list>"
    ],
    "xmlrpc.client.Unmarshaller.end_dateTime": [
        "xmlrpc.client.DateTime.__init__",
        "xmlrpc.client.DateTime.decode",
        "<list>",
        "xmlrpc.client._datetime_type"
    ],
    "xmlrpc.client._datetime_type": [],
    "xmlrpc.client.Unmarshaller.end_value": [
        "xmlrpc.client.Unmarshaller.end_string"
    ],
    "xmlrpc.client._MultiCallMethod.__getattr__": [
        "xmlrpc.client._MultiCallMethod.__init__"
    ],
    "xmlrpc.client._MultiCallMethod.__init__": [],
    "xmlrpc.client.MultiCallIterator.__getitem__": [
        "xmlrpc.client.Fault.__init__",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "xmlrpc.client.MultiCall.__repr__": [
        "<builtin>.id"
    ],
    "xmlrpc.client.MultiCall.__getattr__": [
        "xmlrpc.client._MultiCallMethod.__init__"
    ],
    "xmlrpc.client.MultiCall.__call__": [
        "<list>.append",
        "xmlrpc.client.MultiCallIterator.__init__"
    ],
    "xmlrpc.client.MultiCallIterator.__init__": [],
    "xmlrpc.client.getparser": [
        "xmlrpc.client.Unmarshaller.__init__",
        "xmlrpc.client.ExpatParser.__init__"
    ],
    "xmlrpc.client.Unmarshaller.__init__": [],
    "xmlrpc.client.ExpatParser.__init__": [
        "xmlrpc.client.Unmarshaller.xml"
    ],
    "xmlrpc.client.Unmarshaller.xml": [],
    "xmlrpc.client.dumps": [
        "xmlrpc.client.Marshaller.__init__",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance",
        "xmlrpc.client.Marshaller.dumps"
    ],
    "xmlrpc.client.Marshaller.__init__": [],
    "xmlrpc.client.loads": [
        "xmlrpc.client.ExpatParser.feed",
        "xmlrpc.client.ExpatParser.close",
        "xmlrpc.client.getparser",
        "xmlrpc.client.Unmarshaller.close"
    ],
    "xmlrpc.client.ExpatParser.feed": [],
    "xmlrpc.client.ExpatParser.close": [],
    "xmlrpc.client.gzip_encode": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO"
    ],
    "xmlrpc.client.gzip_decode": [
        "gzip.GzipFile.__init__",
        "<builtin>.len",
        "<builtin>.ValueError",
        "_io.BytesIO"
    ],
    "xmlrpc.client.GzipDecodedResponse.__init__": [
        "gzip.GzipFile.__init__",
        "_io.BytesIO"
    ],
    "xmlrpc.client.GzipDecodedResponse.close": [
        "gzip.GzipFile.close"
    ],
    "xmlrpc.client._Method.__getattr__": [
        "xmlrpc.client._Method.__init__"
    ],
    "xmlrpc.client._Method.__init__": [],
    "xmlrpc.client.Transport.request": [
        "xmlrpc.client.Transport.single_request"
    ],
    "xmlrpc.client.Transport.single_request": [
        "xmlrpc.client.Transport.send_request",
        "xmlrpc.client.Transport.close",
        "<builtin>.dict",
        "xmlrpc.client.Transport.parse_response",
        "xmlrpc.client.ProtocolError.__init__"
    ],
    "xmlrpc.client.Transport.send_request": [
        "xmlrpc.client.Transport.make_connection",
        "xmlrpc.client.Transport.send_content",
        "xmlrpc.client.SafeTransport.make_connection",
        "xmlrpc.client.Transport.send_headers"
    ],
    "xmlrpc.client.Transport.make_connection": [
        "xmlrpc.client.Transport.get_host_info"
    ],
    "xmlrpc.client.Transport.get_host_info": [
        "<builtin>.isinstance",
        "base64.encodebytes",
        "<str>.split"
    ],
    "xmlrpc.client.Transport.send_headers": [],
    "xmlrpc.client.Transport.send_content": [
        "xmlrpc.client.gzip_encode",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "xmlrpc.client.Transport.parse_response": [
        "xmlrpc.client.GzipDecodedResponse.__init__",
        "xmlrpc.client.GzipDecodedResponse.close",
        "<builtin>.print",
        "<builtin>.hasattr",
        "<builtin>.repr",
        "xmlrpc.client.Transport.getparser"
    ],
    "xmlrpc.client.Transport.getparser": [
        "xmlrpc.client.Transport.getparser"
    ],
    "xmlrpc.client.Transport.close": [],
    "xmlrpc.client.ProtocolError.__init__": [],
    "xmlrpc.client.SafeTransport.make_connection": [
        "xmlrpc.client.Transport.get_host_info",
        "<builtin>.hasattr",
        "<builtin>.NotImplementedError"
    ],
    "xmlrpc.client.ServerProxy.__close": [
        "xmlrpc.client.Transport.close"
    ],
    "xmlrpc.client.ServerProxy.__request": [
        "xmlrpc.client.Transport.request",
        "xmlrpc.client.dumps",
        "<builtin>.len"
    ],
    "xmlrpc.client.ServerProxy.__getattr__": [
        "xmlrpc.client._Method.__init__"
    ],
    "xmlrpc.client.ServerProxy.__call__": [
        "<builtin>.AttributeError"
    ],
    "xmlrpc.client.ServerProxy.__exit__": [
        "xmlrpc.client.ServerProxy.__close"
    ],
    "<list>.copy": [],
    "_pydecimal.InvalidOperation.handle": [
        "_pydecimal._dec_from_triple"
    ],
    "_pydecimal._dec_from_triple": [],
    "_pydecimal.Overflow.handle": [
        "_pydecimal._dec_from_triple"
    ],
    "_pydecimal.getcontext": [
        "_pydecimal.Context.__init__"
    ],
    "_pydecimal.localcontext": [
        "_pydecimal._ContextManager.__init__",
        "_pydecimal.getcontext"
    ],
    "_pydecimal._ContextManager.__init__": [
        "_pydecimal.Context.copy"
    ],
    "_pydecimal.Context.copy": [
        "<list>.copy",
        "_pydecimal.Context.__init__"
    ],
    "_pydecimal.Decimal.__new__": [
        "<builtin>.TypeError",
        "<str>.strip",
        "<builtin>.int",
        "<builtin>.abs",
        "_pydecimal.getcontext",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.isinstance",
        "<str>.replace",
        "<list>.append",
        "_pydecimal.Decimal.from_float",
        "_pydecimal.Context._raise_error",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Context._raise_error": [
        "<map>.get",
        "_pydecimal.DecimalException.handle",
        "_pydecimal.DivisionImpossible.handle",
        "_pydecimal.Decimal.exp",
        "_pydecimal.InvalidOperation.handle",
        "_pydecimal.DivisionUndefined.handle",
        "_pydecimal.ConversionSyntax.handle",
        "<map>"
    ],
    "_pydecimal.ConversionSyntax.handle": [],
    "_pydecimal.DecimalException.handle": [],
    "_pydecimal.Decimal.from_float": [
        "<builtin>.TypeError",
        "<builtin>.abs",
        "<builtin>.str",
        "_pydecimal._dec_from_triple",
        "<builtin>.isinstance",
        "<builtin>.repr"
    ],
    "_pydecimal.Decimal._check_nans": [
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fix_nan",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal._isnan": [],
    "_pydecimal.Decimal._fix_nan": [
        "_pydecimal._dec_from_triple",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal._compare_check_nans": [
        "_pydecimal.Decimal.is_qnan",
        "_pydecimal.Decimal.is_snan",
        "_pydecimal.Context._raise_error",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal.is_snan": [],
    "_pydecimal.Decimal.is_qnan": [],
    "_pydecimal.Decimal._cmp": [
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Decimal.adjusted"
    ],
    "_pydecimal.Decimal._isinfinity": [],
    "_pydecimal.Decimal.adjusted": [
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.__eq__": [
        "_pydecimal._convert_for_comparison",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._cmp"
    ],
    "_pydecimal._convert_for_comparison": [
        "<builtin>.int",
        "_pydecimal.getcontext",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "<builtin>.isinstance",
        "_pydecimal.Decimal.from_float",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__lt__": [
        "_pydecimal._convert_for_comparison",
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal.Decimal._cmp"
    ],
    "_pydecimal.Decimal.__le__": [
        "_pydecimal._convert_for_comparison",
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal.Decimal._cmp"
    ],
    "_pydecimal.Decimal.__gt__": [
        "_pydecimal._convert_for_comparison",
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal.Decimal._cmp"
    ],
    "_pydecimal.Decimal.__ge__": [
        "_pydecimal._convert_for_comparison",
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal.Decimal._cmp"
    ],
    "_pydecimal.Decimal.compare": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._cmp"
    ],
    "_pydecimal._convert_other": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "_pydecimal.Decimal.from_float"
    ],
    "_pydecimal.Decimal.__hash__": [
        "<builtin>.TypeError",
        "<builtin>.int",
        "_pydecimal.Decimal.is_nan",
        "_pydecimal.Decimal.is_snan",
        "<builtin>.pow"
    ],
    "_pydecimal.Decimal.is_nan": [],
    "_pydecimal.Decimal.as_tuple": [
        "<builtin>.map",
        "_pydecimal.<lambda1>",
        "<builtin>.tuple"
    ],
    "_pydecimal.<lambda1>": [],
    "_pydecimal.Decimal.as_integer_ratio": [
        "<builtin>.int",
        "<builtin>.OverflowError",
        "<builtin>.ValueError",
        "_pydecimal.Decimal.is_nan",
        "<builtin>.min"
    ],
    "_pydecimal.Decimal.__repr__": [
        "<builtin>.str"
    ],
    "_pydecimal.Decimal.__str__": [
        "<builtin>.len",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal.to_eng_string": [
        "_pydecimal.Decimal.__str__"
    ],
    "_pydecimal.Decimal.__neg__": [
        "_pydecimal.Decimal.copy_negate",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.copy_negate": [
        "_pydecimal._dec_from_triple"
    ],
    "_pydecimal.Decimal.copy_abs": [
        "_pydecimal._dec_from_triple"
    ],
    "_pydecimal.Decimal._fix": [
        "<builtin>.int",
        "_pydecimal.Decimal._fix_nan",
        "_pydecimal.Context.Etop",
        "<builtin>.max",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "<builtin>.len",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Context._raise_error",
        "<builtin>.min"
    ],
    "_pydecimal.Context.Etiny": [
        "<builtin>.int"
    ],
    "_pydecimal.Context.Etop": [
        "<builtin>.int"
    ],
    "_pydecimal.Decimal.__pos__": [
        "_pydecimal.Decimal._fix",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal.__abs__": [
        "_pydecimal.Decimal.__pos__",
        "_pydecimal.Decimal.__neg__",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal.copy_abs"
    ],
    "_pydecimal.Decimal.__add__": [
        "_pydecimal.Decimal._fix",
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other",
        "<builtin>.max",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal._normalize",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._rescale",
        "<builtin>.min"
    ],
    "_pydecimal.Decimal._rescale": [
        "<builtin>.int",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "_pydecimal._WorkRep.__init__": [
        "<builtin>.int",
        "<builtin>.isinstance"
    ],
    "_pydecimal._normalize": [
        "<builtin>.min",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.__sub__": [
        "_pydecimal.Decimal.copy_negate",
        "_pydecimal.Decimal.__add__",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans"
    ],
    "_pydecimal.Decimal.__rsub__": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__sub__"
    ],
    "_pydecimal.Decimal.__mul__": [
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other",
        "<builtin>.str",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.__truediv__": [
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "<builtin>.divmod",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other",
        "<builtin>.str",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.len",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.DivisionUndefined.handle": [],
    "_pydecimal.Decimal._divide": [
        "_pydecimal.Decimal.adjusted",
        "<builtin>.divmod",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._rescale",
        "<builtin>.min"
    ],
    "_pydecimal.Decimal.__rtruediv__": [
        "_pydecimal.Decimal.__truediv__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.__divmod__": [
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._divide",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.DivisionImpossible.handle": [],
    "_pydecimal.Decimal.__rdivmod__": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__divmod__"
    ],
    "_pydecimal.Decimal.__mod__": [
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._divide",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__rmod__": [
        "_pydecimal.Decimal.__mod__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.remainder_near": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "<builtin>.divmod",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other",
        "<builtin>.str",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.min",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._rescale",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.__floordiv__": [
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._divide",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.__rfloordiv__": [
        "_pydecimal.Decimal.__floordiv__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.__float__": [
        "<builtin>.str",
        "<builtin>.float",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Decimal.is_snan",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.__int__": [
        "<builtin>.int",
        "<builtin>.OverflowError",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Decimal._isnan",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.__complex__": [
        "<builtin>.float",
        "<builtin>.complex"
    ],
    "_pydecimal.Decimal._round_up": [
        "_pydecimal.Decimal._round_down"
    ],
    "_pydecimal.Decimal._round_down": [],
    "_pydecimal.Decimal._round_half_down": [
        "_pydecimal.Decimal._round_half_up"
    ],
    "_pydecimal.Decimal._round_half_up": [],
    "_pydecimal.Decimal._round_half_even": [
        "_pydecimal.Decimal._round_half_up"
    ],
    "_pydecimal.Decimal._round_ceiling": [
        "_pydecimal.Decimal._round_down"
    ],
    "_pydecimal.Decimal._round_floor": [
        "_pydecimal.Decimal._round_down"
    ],
    "_pydecimal.Decimal._round_05up": [
        "_pydecimal.Decimal._round_down"
    ],
    "_pydecimal.Decimal.__round__": [
        "<builtin>.TypeError",
        "<builtin>.int",
        "<builtin>.OverflowError",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal.quantize",
        "<builtin>.isinstance",
        "_pydecimal.Decimal.is_nan",
        "_pydecimal.Decimal._rescale",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.quantize": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.len",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._rescale",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.exp": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._dexp",
        "_pydecimal.Decimal._isinfinity",
        "<builtin>.str",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._shallow_copy",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.len",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal._dexp": [
        "_pydecimal._Log10Memoize.getdigits",
        "<builtin>.divmod",
        "_pydecimal._iexp",
        "<builtin>.max",
        "<builtin>.str",
        "<builtin>.len",
        "_pydecimal._div_nearest"
    ],
    "_pydecimal._Log10Memoize.getdigits": [
        "<builtin>.int",
        "_pydecimal._ilog",
        "<builtin>.str",
        "<str>.rstrip",
        "<builtin>.len",
        "_pydecimal._div_nearest",
        "<builtin>.ValueError"
    ],
    "_pydecimal._ilog": [
        "<builtin>.int",
        "<builtin>.abs",
        "_pydecimal._rshift_nearest",
        "<builtin>.range",
        "<builtin>.str",
        "_pydecimal._sqrt_nearest",
        "<builtin>.len",
        "_pydecimal._div_nearest"
    ],
    "_pydecimal._rshift_nearest": [],
    "_pydecimal._sqrt_nearest": [
        "<builtin>.ValueError"
    ],
    "_pydecimal._div_nearest": [
        "<builtin>.divmod"
    ],
    "_pydecimal._iexp": [
        "<builtin>.int",
        "<builtin>.range",
        "<builtin>.str",
        "<builtin>.len",
        "_pydecimal._div_nearest"
    ],
    "_pydecimal.Context._shallow_copy": [
        "_pydecimal.Context.__init__"
    ],
    "_pydecimal.Context._set_rounding": [],
    "_pydecimal.Decimal.__floor__": [
        "<builtin>.int",
        "<builtin>.OverflowError",
        "_pydecimal.Decimal.is_nan",
        "_pydecimal.Decimal._rescale",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.__ceil__": [
        "<builtin>.int",
        "<builtin>.OverflowError",
        "_pydecimal.Decimal.is_nan",
        "_pydecimal.Decimal._rescale",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.fma": [
        "<builtin>.int",
        "_pydecimal.Decimal.__add__",
        "_pydecimal.getcontext",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal._convert_other",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal._power_modulo": [
        "<builtin>.int",
        "_pydecimal.Decimal._fix_nan",
        "_pydecimal.Decimal.adjusted",
        "<builtin>.abs",
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal.Decimal._iseven",
        "<builtin>.range",
        "_pydecimal.Decimal._isinteger",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.to_integral_value",
        "<builtin>.str",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Context._raise_error",
        "<builtin>.pow"
    ],
    "_pydecimal.Decimal._isinteger": [
        "<builtin>.len"
    ],
    "_pydecimal.Decimal._iseven": [],
    "_pydecimal.Decimal.to_integral_value": [
        "_pydecimal.Decimal._rescale",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal._power_exact": [
        "<builtin>.int",
        "<builtin>.abs",
        "<builtin>.divmod",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal._log10_lb",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal._decimal_lshift_exact",
        "<builtin>.len",
        "_pydecimal.Decimal._isinteger",
        "<builtin>.min"
    ],
    "_pydecimal._decimal_lshift_exact": [
        "<builtin>.len",
        "<builtin>.str",
        "<builtin>.abs"
    ],
    "_pydecimal._log10_lb": [
        "<builtin>.len",
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.__pow__": [
        "_pydecimal.Decimal.copy_negate",
        "_pydecimal.getcontext",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._power_exact",
        "_pydecimal.Decimal._iseven",
        "_pydecimal._convert_other",
        "_pydecimal.Context.copy",
        "_pydecimal.Decimal.adjusted",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal.Decimal._isinteger",
        "<builtin>.str",
        "<builtin>.len",
        "_pydecimal.Decimal._power_modulo",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._log10_exp_bound",
        "<builtin>.int",
        "_pydecimal._dpower",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Context.clear_flags",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal._log10_exp_bound": [
        "_pydecimal._WorkRep.__init__",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "_pydecimal._dpower": [
        "<builtin>.abs",
        "_pydecimal._dexp",
        "<builtin>.str",
        "<builtin>.len",
        "_pydecimal._dlog",
        "_pydecimal._div_nearest"
    ],
    "_pydecimal._dlog": [
        "_pydecimal._Log10Memoize.getdigits",
        "_pydecimal._ilog",
        "<builtin>.abs",
        "<builtin>.str",
        "<builtin>.len",
        "_pydecimal._div_nearest"
    ],
    "_pydecimal.Context.clear_flags": [],
    "_pydecimal.Decimal.__rpow__": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__pow__"
    ],
    "_pydecimal.Decimal.normalize": [
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.len",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.same_quantum": [
        "_pydecimal.Decimal.is_nan",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.is_infinite"
    ],
    "_pydecimal.Decimal.is_infinite": [],
    "_pydecimal.Decimal._round": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Decimal._rescale",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Decimal.to_integral_exact": [
        "_pydecimal.getcontext",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._rescale"
    ],
    "_pydecimal.Decimal.sqrt": [
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "<builtin>.divmod",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "<builtin>.str",
        "_pydecimal.Context._shallow_copy",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.len",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.max": [
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._cmp",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Decimal.compare_total",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.compare_total": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._isnan",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.min": [
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._cmp",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Decimal.compare_total",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.compare_signal": [
        "_pydecimal.Decimal._compare_check_nans",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.compare"
    ],
    "_pydecimal.Decimal.compare_total_mag": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.copy_abs"
    ],
    "_pydecimal.Decimal.copy_sign": [
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.is_normal": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal.is_subnormal": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal._ln_exp_bound": [
        "_pydecimal._WorkRep.__init__",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.ln": [
        "<builtin>.int",
        "<builtin>.abs",
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal.Context._shallow_copy",
        "_pydecimal.Decimal._isinfinity",
        "<builtin>.str",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.len",
        "_pydecimal._dlog",
        "_pydecimal.Decimal._ln_exp_bound",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.log10": [
        "_pydecimal._dlog10",
        "<builtin>.int",
        "<builtin>.abs",
        "_pydecimal.getcontext",
        "_pydecimal._WorkRep.__init__",
        "_pydecimal.Context._shallow_copy",
        "_pydecimal.Decimal._isinfinity",
        "<builtin>.str",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._set_rounding",
        "<builtin>.len",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._log10_exp_bound",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal._dlog10": [
        "_pydecimal._Log10Memoize.getdigits",
        "_pydecimal._ilog",
        "<builtin>.str",
        "<builtin>.len",
        "_pydecimal._div_nearest"
    ],
    "_pydecimal.Decimal.logb": [
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal._fill_logical": [
        "<builtin>.len"
    ],
    "_pydecimal.Decimal.logical_and": [
        "<builtin>.int",
        "<builtin>.zip",
        "_pydecimal.getcontext",
        "<builtin>.str",
        "_pydecimal._convert_other",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._islogical",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fill_logical",
        "<str>.lstrip"
    ],
    "_pydecimal.Decimal._islogical": [],
    "_pydecimal.Decimal.logical_invert": [
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal.logical_xor",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.Decimal.logical_xor": [
        "<builtin>.int",
        "<builtin>.zip",
        "_pydecimal.getcontext",
        "<builtin>.str",
        "_pydecimal._convert_other",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._islogical",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fill_logical",
        "<str>.lstrip"
    ],
    "_pydecimal.Decimal.logical_or": [
        "<builtin>.int",
        "<builtin>.zip",
        "_pydecimal.getcontext",
        "<builtin>.str",
        "_pydecimal._convert_other",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Decimal._islogical",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fill_logical",
        "<str>.lstrip"
    ],
    "_pydecimal.Decimal.max_mag": [
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Decimal.compare_total",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.min_mag": [
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Decimal.compare_total",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.next_minus": [
        "_pydecimal.getcontext",
        "_pydecimal.Context.Etop",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._ignore_all_flags",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context.copy",
        "_pydecimal.Decimal.__sub__",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Context._ignore_all_flags": [
        "_pydecimal.Context._ignore_flags"
    ],
    "_pydecimal.Context._ignore_flags": [
        "<builtin>.list"
    ],
    "_pydecimal.Decimal.next_plus": [
        "_pydecimal.Decimal.__add__",
        "_pydecimal.getcontext",
        "_pydecimal.Context.Etop",
        "_pydecimal.Context._set_rounding",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal.Context._ignore_all_flags",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context.copy",
        "_pydecimal.Context.Etiny",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Decimal.next_toward": [
        "_pydecimal.Decimal.next_plus",
        "_pydecimal.Decimal.adjusted",
        "_pydecimal.Decimal._cmp",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Decimal.copy_sign",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Decimal.next_minus",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.number_class": [
        "_pydecimal.Decimal.is_qnan",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal.is_subnormal",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal.Decimal.is_zero",
        "_pydecimal.Decimal.is_snan"
    ],
    "_pydecimal.Decimal.is_zero": [],
    "_pydecimal.Decimal.rotate": [
        "<builtin>.int",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.len",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.scaleb": [
        "<builtin>.int",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "_pydecimal.Context._raise_error"
    ],
    "_pydecimal.Decimal.shift": [
        "<builtin>.int",
        "_pydecimal.getcontext",
        "_pydecimal.Decimal._isinfinity",
        "_pydecimal._dec_from_triple",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal._check_nans",
        "<builtin>.len",
        "_pydecimal.Context._raise_error",
        "<str>.lstrip"
    ],
    "_pydecimal.Decimal.__reduce__": [
        "<builtin>.str"
    ],
    "_pydecimal.Decimal.__copy__": [
        "<builtin>.str",
        "<builtin>.type"
    ],
    "_pydecimal.Decimal.__deepcopy__": [
        "<builtin>.str",
        "<builtin>.type"
    ],
    "_pydecimal.Decimal.__format__": [
        "_pydecimal._format_sign",
        "_pydecimal._parse_format_specifier",
        "_pydecimal.Decimal.copy_abs",
        "_pydecimal.getcontext",
        "<builtin>.str",
        "_pydecimal._dec_from_triple",
        "<builtin>.len",
        "_pydecimal._format_align",
        "_pydecimal._format_number",
        "_pydecimal.Decimal._rescale",
        "_pydecimal.Decimal._round"
    ],
    "_pydecimal._parse_format_specifier": [
        "<builtin>.int",
        "locale.localeconv",
        "<builtin>.ValueError"
    ],
    "_pydecimal._format_sign": [],
    "_pydecimal._format_align": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "_pydecimal._format_number": [
        "_pydecimal._format_sign",
        "_pydecimal._insert_thousands_sep",
        "_pydecimal._format_align",
        "<builtin>.len"
    ],
    "_pydecimal._insert_thousands_sep": [
        "<builtin>.reversed",
        "<builtin>.max",
        "_pydecimal._group_lengths",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<list>.append",
        "<builtin>.min"
    ],
    "_pydecimal._group_lengths": [
        "itertools.repeat",
        "itertools.chain",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "itertools.chain": [],
    "_pydecimal._ContextManager.__enter__": [
        "_pydecimal.setcontext",
        "_pydecimal.getcontext"
    ],
    "_pydecimal.setcontext": [
        "_pydecimal.Context.copy",
        "_pydecimal.Context.clear_flags"
    ],
    "_pydecimal._ContextManager.__exit__": [
        "_pydecimal.setcontext"
    ],
    "_pydecimal.Context._set_integer_check": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "_pydecimal.Context._set_signal_dict": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.KeyError"
    ],
    "_pydecimal.Context.__setattr__": [
        "<builtin>.TypeError",
        "_pydecimal.Context._set_signal_dict",
        "_pydecimal.Context._set_integer_check",
        "<builtin>.AttributeError"
    ],
    "_pydecimal.Context.__delattr__": [
        "<builtin>.AttributeError"
    ],
    "_pydecimal.Context.__repr__": [
        "<list>.append"
    ],
    "_pydecimal.Context._regard_flags": [
        "<list>.remove",
        "<builtin>.isinstance"
    ],
    "_pydecimal.Context.create_decimal": [
        "<str>.strip",
        "<builtin>.len",
        "<builtin>.isinstance",
        "_pydecimal.Decimal._isnan",
        "_pydecimal.Context._raise_error",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Context.create_decimal_from_float": [
        "_pydecimal.Decimal.from_float",
        "_pydecimal.Decimal._fix"
    ],
    "_pydecimal.Context.abs": [
        "_pydecimal.Decimal.__abs__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.add": [
        "<builtin>.TypeError",
        "_pydecimal.Decimal.__add__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context._apply": [
        "<builtin>.str"
    ],
    "_pydecimal.Context.canonical": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "_pydecimal.Context.compare": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.compare"
    ],
    "_pydecimal.Context.compare_signal": [
        "_pydecimal.Decimal.compare_signal",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.compare_total": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.compare_total"
    ],
    "_pydecimal.Context.compare_total_mag": [
        "_pydecimal.Decimal.compare_total_mag",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.copy_abs": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.copy_abs"
    ],
    "_pydecimal.Context.copy_decimal": [
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.copy_negate": [
        "_pydecimal.Decimal.copy_negate",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.copy_sign": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.copy_sign"
    ],
    "_pydecimal.Context.divide": [
        "<builtin>.TypeError",
        "_pydecimal.Decimal.__truediv__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.divide_int": [
        "<builtin>.TypeError",
        "_pydecimal.Decimal.__floordiv__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.divmod": [
        "<builtin>.TypeError",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__divmod__"
    ],
    "_pydecimal.Context.exp": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.exp"
    ],
    "_pydecimal.Context.fma": [
        "_pydecimal.Decimal.fma",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_canonical": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "_pydecimal.Context.is_finite": [
        "_pydecimal.Decimal.is_finite",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.is_finite": [],
    "_pydecimal.Context.is_infinite": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.is_infinite"
    ],
    "_pydecimal.Context.is_nan": [
        "_pydecimal.Decimal.is_nan",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_normal": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.is_normal"
    ],
    "_pydecimal.Context.is_qnan": [
        "_pydecimal.Decimal.is_qnan",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_signed": [
        "_pydecimal.Decimal.is_signed",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Decimal.is_signed": [],
    "_pydecimal.Context.is_snan": [
        "_pydecimal.Decimal.is_snan",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.is_subnormal": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.is_subnormal"
    ],
    "_pydecimal.Context.is_zero": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.is_zero"
    ],
    "_pydecimal.Context.ln": [
        "_pydecimal.Decimal.ln",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.log10": [
        "_pydecimal.Decimal.log10",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.logb": [
        "_pydecimal.Decimal.logb",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.logical_and": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.logical_and"
    ],
    "_pydecimal.Context.logical_invert": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.logical_invert"
    ],
    "_pydecimal.Context.logical_or": [
        "_pydecimal.Decimal.logical_or",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.logical_xor": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.logical_xor"
    ],
    "_pydecimal.Context.max": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.max"
    ],
    "_pydecimal.Context.max_mag": [
        "_pydecimal.Decimal.max_mag",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.min": [
        "_pydecimal.Decimal.min",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.min_mag": [
        "_pydecimal.Decimal.min_mag",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.minus": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__neg__"
    ],
    "_pydecimal.Context.multiply": [
        "<builtin>.TypeError",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__mul__"
    ],
    "_pydecimal.Context.next_minus": [
        "_pydecimal.Decimal.next_minus",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.next_plus": [
        "_pydecimal.Decimal.next_plus",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.next_toward": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.next_toward"
    ],
    "_pydecimal.Context.normalize": [
        "_pydecimal.Decimal.normalize",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.number_class": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.number_class"
    ],
    "_pydecimal.Context.plus": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__pos__"
    ],
    "_pydecimal.Context.power": [
        "<builtin>.TypeError",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__pow__"
    ],
    "_pydecimal.Context.quantize": [
        "_pydecimal.Decimal.quantize",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.remainder": [
        "_pydecimal.Decimal.__mod__",
        "_pydecimal._convert_other",
        "<builtin>.TypeError"
    ],
    "_pydecimal.Context.remainder_near": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.remainder_near"
    ],
    "_pydecimal.Context.rotate": [
        "_pydecimal.Decimal.rotate",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.same_quantum": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.same_quantum"
    ],
    "_pydecimal.Context.scaleb": [
        "_pydecimal.Decimal.scaleb",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.shift": [
        "_pydecimal.Decimal.shift",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.sqrt": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.sqrt"
    ],
    "_pydecimal.Context.subtract": [
        "<builtin>.TypeError",
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.__sub__"
    ],
    "_pydecimal.Context.to_eng_string": [
        "_pydecimal._convert_other",
        "_pydecimal.Decimal.to_eng_string"
    ],
    "_pydecimal.Context.to_sci_string": [
        "_pydecimal.Decimal.__str__",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.to_integral_exact": [
        "_pydecimal.Decimal.to_integral_exact",
        "_pydecimal._convert_other"
    ],
    "_pydecimal.Context.to_integral_value": [
        "_pydecimal.Decimal.to_integral_value",
        "_pydecimal._convert_other"
    ],
    "numbers.Real.__complex__": [
        "<builtin>.float",
        "<builtin>.complex"
    ],
    "numbers.Integral.__index__": [
        "<builtin>.int"
    ],
    "numbers.Integral.__float__": [
        "<builtin>.int",
        "<builtin>.float"
    ],
    "http.client._encode": [
        "<str>.title",
        "<builtin>.UnicodeEncodeError"
    ],
    "<str>.title": [],
    "<builtin>.UnicodeEncodeError": [],
    "http.client.HTTPMessage.getallmatchingheaders": [
        "<list>.append",
        "<builtin>.len"
    ],
    "http.client.parse_headers": [
        "<list>.append",
        "http.client.LineTooLong.__init__",
        "<builtin>.len"
    ],
    "http.client.LineTooLong.__init__": [],
    "http.client.HTTPResponse._read_status": [
        "<builtin>.int",
        "http.client.LineTooLong.__init__",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.print",
        "http.client.BadStatusLine.__init__",
        "http.client.RemoteDisconnected.__init__",
        "<builtin>.repr",
        "<str>.startswith",
        "http.client.HTTPResponse._close_conn"
    ],
    "http.client.RemoteDisconnected.__init__": [
        "http.client.BadStatusLine.__init__"
    ],
    "http.client.BadStatusLine.__init__": [
        "<builtin>.repr"
    ],
    "http.client.HTTPResponse._close_conn": [
        "socket.SocketIO.close"
    ],
    "http.client.HTTPResponse.begin": [
        "<str>.strip",
        "<builtin>.int",
        "http.client.UnknownProtocol.__init__",
        "http.client.LineTooLong.__init__",
        "<builtin>.len",
        "<builtin>.print",
        "http.client.HTTPResponse._check_close",
        "http.client.HTTPResponse._read_status",
        "<str>.startswith",
        "http.client.parse_headers"
    ],
    "http.client.UnknownProtocol.__init__": [],
    "http.client.HTTPResponse._check_close": [],
    "http.client.HTTPResponse.close": [
        "<builtin>.super"
    ],
    "http.client.HTTPResponse.flush": [
        "<builtin>.super"
    ],
    "http.client.HTTPResponse.read": [
        "http.client.HTTPResponse._readall_chunked",
        "http.client.HTTPResponse.readinto",
        "http.client.HTTPResponse._safe_read",
        "<builtin>.bytearray",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.memoryview"
    ],
    "http.client.HTTPResponse._readall_chunked": [
        "http.client.IncompleteRead.__init__",
        "<list>.append",
        "http.client.HTTPResponse._get_chunk_left"
    ],
    "http.client.HTTPResponse._get_chunk_left": [
        "http.client.HTTPResponse._read_and_discard_trailer",
        "http.client.HTTPResponse._safe_read",
        "http.client.IncompleteRead.__init__",
        "http.client.HTTPResponse._read_next_chunk_size",
        "http.client.HTTPResponse._close_conn"
    ],
    "http.client.HTTPResponse._safe_read": [
        "http.client.IncompleteRead.__init__",
        "<builtin>.len"
    ],
    "http.client.IncompleteRead.__init__": [],
    "http.client.HTTPResponse._read_next_chunk_size": [
        "http.client.HTTPResponse._close_conn",
        "<builtin>.int",
        "http.client.LineTooLong.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._read_and_discard_trailer": [
        "http.client.LineTooLong.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.readinto": [
        "socket.SocketIO.readinto",
        "<builtin>.len",
        "http.client.HTTPResponse._readinto_chunked",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.memoryview"
    ],
    "http.client.HTTPResponse._readinto_chunked": [
        "<builtin>.len",
        "http.client.IncompleteRead.__init__",
        "http.client.HTTPResponse._safe_readinto",
        "<builtin>.bytes",
        "<builtin>.memoryview",
        "http.client.HTTPResponse._get_chunk_left"
    ],
    "http.client.HTTPResponse._safe_readinto": [
        "socket.SocketIO.readinto",
        "http.client.IncompleteRead.__init__",
        "<builtin>.bytes",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.read1": [
        "http.client.HTTPResponse._read1_chunked",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._read1_chunked": [
        "http.client.IncompleteRead.__init__",
        "<builtin>.len",
        "http.client.HTTPResponse._get_chunk_left"
    ],
    "http.client.HTTPResponse.peek": [
        "http.client.HTTPResponse._peek_chunked"
    ],
    "http.client.HTTPResponse._peek_chunked": [
        "http.client.HTTPResponse._get_chunk_left"
    ],
    "http.client.HTTPResponse.readline": [
        "<builtin>.super",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.getheader": [
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "http.client.HTTPResponse.getheaders": [
        "<builtin>.list"
    ],
    "http.client.HTTPConnection._is_textIO": [
        "<builtin>.isinstance"
    ],
    "http.client.HTTPConnection._get_content_length": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.memoryview"
    ],
    "http.client.HTTPConnection.__init__": [
        "http.client.HTTPConnection._validate_host",
        "http.client.HTTPConnection._get_hostport"
    ],
    "http.client.HTTPConnection._get_hostport": [
        "<builtin>.int"
    ],
    "http.client.HTTPConnection._validate_host": [],
    "http.client.HTTPConnection.set_tunnel": [
        "<builtin>.RuntimeError",
        "http.client.HTTPConnection._get_hostport",
        "<map>.clear"
    ],
    "http.client.HTTPConnection._tunnel": [
        "http.client.LineTooLong.__init__",
        "http.client.HTTPConnection.close",
        "<builtin>.len",
        "<builtin>.print",
        "http.client.HTTPResponse._read_status",
        "http.client.HTTPConnection.send",
        "http.client.HTTPResponse.__init__",
        "<map>.items",
        "<builtin>.OSError"
    ],
    "http.client.HTTPConnection.send": [
        "<builtin>.TypeError",
        "http.client.HTTPConnection._is_textIO",
        "<builtin>.print",
        "http.client.HTTPConnection.connect",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.repr",
        "<builtin>.type"
    ],
    "http.client.HTTPConnection.connect": [
        "http.client.HTTPConnection._tunnel",
        "socket.create_connection"
    ],
    "http.client.HTTPResponse.__init__": [
        "socket.socket.makefile"
    ],
    "http.client.HTTPConnection.close": [
        "socket.socket.close"
    ],
    "http.client.HTTPConnection._output": [
        "<list>.append"
    ],
    "http.client.HTTPConnection._read_readable": [
        "http.client.HTTPConnection._is_textIO",
        "<builtin>.print"
    ],
    "http.client.HTTPConnection._send_output": [
        "<list>.extend",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.print",
        "<builtin>.hasattr",
        "<builtin>.iter",
        "http.client.HTTPConnection.send",
        "http.client.HTTPConnection._read_readable",
        "<builtin>.memoryview",
        "<builtin>.type"
    ],
    "http.client.HTTPConnection.putrequest": [
        "http.client.HTTPConnection._validate_path",
        "urllib.parse.urlsplit",
        "http.client.HTTPResponse.isclosed",
        "http.client.HTTPConnection._encode_request",
        "http.client.HTTPConnection.putheader",
        "http.client.HTTPConnection._output"
    ],
    "http.client.HTTPConnection._validate_path": [],
    "http.client.HTTPConnection._encode_request": [],
    "urllib.parse.urlsplit": [
        "<map>.get",
        "urllib.parse._splitnetloc",
        "<str>.find",
        "urllib.parse._checknetloc",
        "<builtin>.bool",
        "<builtin>.len",
        "urllib.parse.clear_cache",
        "<str>.split",
        "urllib.parse._coerce_args",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "urllib.parse._coerce_args": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "urllib.parse._decode_args"
    ],
    "urllib.parse._decode_args": [
        "<builtin>.tuple"
    ],
    "urllib.parse.clear_cache": [
        "<map>.clear"
    ],
    "urllib.parse._splitnetloc": [
        "<builtin>.min",
        "<builtin>.len",
        "<str>.find"
    ],
    "urllib.parse._checknetloc": [
        "<str>.isascii",
        "<str>.replace",
        "unicodedata",
        "<builtin>.ValueError"
    ],
    "<str>.isascii": [],
    "http.client.HTTPConnection.putheader": [
        "http.client.HTTPConnection._output",
        "<builtin>.enumerate",
        "<builtin>.str",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.list",
        "<builtin>.ValueError"
    ],
    "http.client.HTTPConnection.endheaders": [
        "http.client.HTTPConnection._send_output"
    ],
    "http.client.HTTPConnection.request": [
        "http.client.HTTPConnection._send_request"
    ],
    "http.client.HTTPConnection._send_request": [
        "<builtin>.frozenset",
        "<builtin>.str",
        "http.client.HTTPConnection.putrequest",
        "http.client.HTTPConnection._get_content_length",
        "<builtin>.print",
        "<builtin>.isinstance",
        "http.client.HTTPConnection.putheader",
        "http.client._encode",
        "http.client.HTTPConnection.endheaders",
        "<map>.items"
    ],
    "http.client.HTTPConnection.getresponse": [
        "http.client.HTTPResponse.close",
        "http.client.HTTPResponse.isclosed",
        "http.client.HTTPConnection.close",
        "http.client.HTTPResponse.begin",
        "http.client.HTTPResponse.__init__"
    ],
    "http.client.IncompleteRead.__repr__": [
        "<builtin>.len"
    ],
    "email.parser.Parser.parse": [
        "email.feedparser.FeedParser.__init__",
        "email.feedparser.FeedParser.close",
        "email.feedparser.FeedParser._set_headersonly",
        "email.feedparser.FeedParser.feed"
    ],
    "email.feedparser.FeedParser.__init__": [
        "email.message",
        "email.feedparser.BufferedSubFile.__init__",
        "email.feedparser.FeedParser._parsegen"
    ],
    "email.feedparser.BufferedSubFile.__init__": [
        "_collections.deque",
        "_io.StringIO"
    ],
    "email.feedparser.FeedParser._parsegen": [
        "email.feedparser.BufferedSubFile.unreadline",
        "email.feedparser.FeedParser._pop_message",
        "email.message.Message.get",
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_content_type",
        "email.feedparser.BufferedSubFile.push_eof_matcher",
        "re.compile",
        "email.feedparser.FeedParser._parse_headers",
        "<builtin>.str",
        "<builtin>.len",
        "<list>.append",
        "re.escape",
        "email.feedparser.BufferedSubFile.readline",
        "email.feedparser.BufferedSubFile.__iter__",
        "email.feedparser.BufferedSubFile.pop_eof_matcher",
        "email.feedparser.FeedParser._new_message",
        "email.feedparser.BufferedSubFile.__next__",
        "email.message.Message.get_boundary",
        "<builtin>.isinstance",
        "email.message.Message.set_payload",
        "email.feedparser.FeedParser._parsegen"
    ],
    "email.feedparser.FeedParser._new_message": [
        "email.message.Message.get_content_type",
        "<list>.append",
        "email.message.Message.__init__",
        "email.message.Message.set_default_type"
    ],
    "email.message.Message.__init__": [],
    "email.message.Message.set_default_type": [],
    "email.feedparser.FeedParser._parse_headers": [
        "email.message.Message.set_raw",
        "<builtin>.enumerate",
        "email.feedparser.BufferedSubFile.unreadline",
        "<builtin>.len",
        "email.message.Message.set_unixfrom",
        "<list>.append"
    ],
    "email.message.Message.set_raw": [
        "<list>.append"
    ],
    "email.message.Message.set_unixfrom": [],
    "email.message.Message.set_payload": [
        "email.message.Message.set_charset",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "email.charset.Charset.__init__"
    ],
    "email.message.Message.set_charset": [
        "email.charset.Charset.__init__",
        "email.encoders.encode_7or8bit",
        "email.charset.Charset.body_encode",
        "email.message.Message.del_param",
        "email.message.Message.add_header",
        "email.charset.Charset.get_body_encoding",
        "<builtin>.isinstance",
        "<map>",
        "email.message.Message.set_param",
        "email.charset.Charset.get_output_charset"
    ],
    "email.message.Message.del_param": [
        "email.message._formatparam",
        "email.message.Message.get_params",
        "email.message.Message.get",
        "<str>.lower"
    ],
    "email.message.Message.get_params": [
        "<builtin>.object",
        "email.message._unquotevalue",
        "email.message.Message._get_params_preserve"
    ],
    "email.message.Message._get_params_preserve": [
        "<str>.strip",
        "email.message.Message.get",
        "email.utils.decode_params",
        "<list>.append",
        "email.message._parseparam",
        "<builtin>.object"
    ],
    "email.message.Message.get": [
        "email.policy.EmailPolicy.header_fetch_parse",
        "email._policybase.Compat32.header_fetch_parse",
        "<str>.lower"
    ],
    "email._policybase.Compat32.header_fetch_parse": [
        "email._policybase.Compat32._sanitize_header"
    ],
    "email._policybase.Compat32._sanitize_header": [
        "email.utils._has_surrogates",
        "<builtin>.isinstance",
        "email.header.Header.__init__"
    ],
    "email.utils._has_surrogates": [],
    "email.header.Header.__init__": [
        "email.header.Header.append",
        "<builtin>.isinstance",
        "email.charset.Charset.__init__",
        "<builtin>.len"
    ],
    "email.header.Header.append": [
        "<builtin>.isinstance",
        "email.charset.Charset.__init__",
        "<list>.append"
    ],
    "email.message._parseparam": [
        "<str>.find",
        "<builtin>.str",
        "<builtin>.len",
        "<str>.count",
        "<list>.append"
    ],
    "email.utils.decode_params": [
        "<builtin>.int",
        "<map>.items",
        "<map>.setdefault",
        "<str>.endswith",
        "email.utils.decode_rfc2231",
        "<list>.append",
        "<list>.pop",
        "email.utils.unquote",
        "email._parseaddr.quote"
    ],
    "email.utils.unquote": [
        "<str>.endswith",
        "<str>.startswith",
        "<builtin>.len"
    ],
    "email._parseaddr.quote": [
        "<str>.replace"
    ],
    "email.utils.decode_rfc2231": [
        "<builtin>.len",
        "<str>.split"
    ],
    "email.message._unquotevalue": [
        "<builtin>.isinstance",
        "email.utils.unquote"
    ],
    "email.message._formatparam": [
        "email.utils.encode_rfc2231",
        "<builtin>.isinstance",
        "<builtin>.len",
        "email._parseaddr.quote"
    ],
    "email.utils.encode_rfc2231": [],
    "email.message.Message.add_header": [
        "<list>.insert",
        "<list>.append"
    ],
    "email.charset.Charset.get_output_charset": [],
    "email.message.Message.set_param": [
        "email.message._formatparam",
        "email.message.Message.replace_header",
        "email.message.Message.get_param",
        "email.message.Message.get",
        "email.message.Message.get_params",
        "<builtin>.isinstance",
        "<str>.lower"
    ],
    "email.message.Message.get_param": [
        "email.message.Message._get_params_preserve",
        "email.message._unquotevalue",
        "<str>.lower"
    ],
    "email.message.Message.replace_header": [
        "<builtin>.zip",
        "<builtin>.range",
        "email.policy.EmailPolicy.header_store_parse",
        "email._policybase.Compat32.header_store_parse",
        "<builtin>.len",
        "<str>.lower"
    ],
    "email._policybase.Compat32.header_store_parse": [],
    "email.charset.Charset.body_encode": [
        "<builtin>.isinstance"
    ],
    "email.charset.Charset.get_body_encoding": [],
    "email.encoders.encode_7or8bit": [
        "email.message.Message.get_payload"
    ],
    "email.message.Message.get_payload": [
        "<builtin>.TypeError",
        "email._encoded_words.decode_b",
        "<builtin>.str",
        "email.message.Message.get_param",
        "email.message.Message.is_multipart",
        "email.message.Message.get",
        "quopri.decodestring",
        "<builtin>.isinstance",
        "uu.decode",
        "email._policybase.Policy.handle_defect",
        "_io.BytesIO",
        "email.utils._has_surrogates",
        "<str>.splitlines",
        "<builtin>.type"
    ],
    "email.message.Message.is_multipart": [
        "<builtin>.isinstance"
    ],
    "email._encoded_words.decode_b": [
        "base64.b64decode",
        "<builtin>.len"
    ],
    "email._policybase.Policy.handle_defect": [
        "email._policybase.Policy.register_defect"
    ],
    "email._policybase.Policy.register_defect": [
        "<list>.append"
    ],
    "quopri.decodestring": [
        "io",
        "quopri.decode",
        "_io.BytesIO"
    ],
    "email.message.Message.get_content_type": [
        "email.message._splitparam",
        "email.message.Message.get",
        "email.message.Message.get_default_type",
        "<builtin>.object"
    ],
    "email.message.Message.get_default_type": [],
    "email.message._splitparam": [
        "<builtin>.str"
    ],
    "email.feedparser.FeedParser._pop_message": [
        "<list>.pop"
    ],
    "email.message.Message.get_content_maintype": [
        "email.message.Message.get_content_type",
        "<str>.split"
    ],
    "email.message.Message.get_boundary": [
        "email.message.Message.get_param",
        "<builtin>.object",
        "email.utils.collapse_rfc2231_value",
        "<str>.rstrip"
    ],
    "email.utils.collapse_rfc2231_value": [
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "email.utils.unquote"
    ],
    "email.feedparser.FeedParser._set_headersonly": [],
    "email.feedparser.FeedParser.feed": [
        "email.feedparser.FeedParser._call_parse",
        "email.feedparser.BufferedSubFile.push"
    ],
    "email.feedparser.BufferedSubFile.push": [
        "email.feedparser.BufferedSubFile.pushlines"
    ],
    "email.feedparser.BufferedSubFile.pushlines": [],
    "email.feedparser.FeedParser._call_parse": [],
    "email.feedparser.FeedParser.close": [
        "email.feedparser.BufferedSubFile.close",
        "email.feedparser.FeedParser._pop_message",
        "email.feedparser.FeedParser._call_parse"
    ],
    "email.feedparser.BufferedSubFile.close": [
        "email.feedparser.BufferedSubFile.pushlines"
    ],
    "email.parser.Parser.parsestr": [
        "email.parser.Parser.parse",
        "_io.StringIO"
    ],
    "email.parser.HeaderParser.parse": [
        "email.parser.Parser.parse"
    ],
    "email.parser.HeaderParser.parsestr": [
        "email.parser.Parser.parsestr"
    ],
    "email.parser.BytesParser.__init__": [
        "email.parser.Parser.__init__"
    ],
    "email.parser.Parser.__init__": [],
    "email.parser.BytesParser.parse": [
        "_io.TextIOWrapper",
        "email.parser.Parser.parse"
    ],
    "email.parser.BytesParser.parsebytes": [
        "email.parser.Parser.parsestr"
    ],
    "email.parser.BytesHeaderParser.parse": [
        "email.parser.BytesParser.parse"
    ],
    "email.parser.BytesHeaderParser.parsebytes": [
        "email.parser.BytesParser.parsebytes"
    ],
    "email.feedparser.BufferedSubFile.push_eof_matcher": [
        "<list>.append"
    ],
    "email.feedparser.BufferedSubFile.pop_eof_matcher": [
        "<list>.pop"
    ],
    "email.feedparser.BufferedSubFile.readline": [
        "<builtin>.reversed"
    ],
    "email.feedparser.BufferedSubFile.__next__": [
        "email.feedparser.BufferedSubFile.readline"
    ],
    "email.feedparser.BufferedSubFile.__iter__": [],
    "email.feedparser.BufferedSubFile.unreadline": [],
    "email.feedparser.BytesFeedParser.feed": [
        "<builtin>.super"
    ],
    "email.errors.MessageDefect.__init__": [
        "<builtin>.super"
    ],
    "email.errors.HeaderDefect.__init__": [
        "<builtin>.super"
    ],
    "email.errors.NonPrintableDefect.__init__": [
        "<builtin>.super"
    ],
    "email._policybase._PolicyBase.__init__": [
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.super"
    ],
    "email._policybase._PolicyBase.clone": [
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "email._policybase._PolicyBase.__setattr__": [
        "<builtin>.hasattr",
        "<builtin>.AttributeError"
    ],
    "email._policybase._PolicyBase.__add__": [
        "email._policybase._PolicyBase.clone"
    ],
    "email._policybase._extend_docstrings": [
        "email._policybase._append_doc",
        "<builtin>.getattr"
    ],
    "email._policybase._append_doc": [],
    "email._policybase.Compat32.fold": [
        "email._policybase.Compat32._fold"
    ],
    "email._policybase.Compat32._fold": [
        "email.utils._has_surrogates",
        "<builtin>.isinstance",
        "<list>.append",
        "email.header.Header.__init__"
    ],
    "email._policybase.Compat32.fold_binary": [
        "email._policybase.Compat32._fold"
    ],
    "email.header.decode_header": [
        "<builtin>.AssertionError",
        "<builtin>.enumerate",
        "<builtin>.reversed",
        "email.charset._encode",
        "<builtin>.str",
        "<str>.split",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<list>.append",
        "<builtin>.bytes",
        "<str>.lstrip",
        "<str>.lower"
    ],
    "email.charset._encode": [],
    "email.header.make_header": [
        "email.header.Header.append",
        "<builtin>.isinstance",
        "email.charset.Charset.__init__",
        "email.header.Header.__init__"
    ],
    "email.header.Header.__str__": [
        "<list>.append",
        "email.header.Header._normalize",
        "email.header.Header._nonctext"
    ],
    "email.header.Header._normalize": [
        "<list>.append"
    ],
    "email.header.Header._nonctext": [],
    "email.header.Header.__eq__": [
        "<builtin>.str"
    ],
    "email.header.Header.encode": [
        "email.header._ValueFormatter.feed",
        "<builtin>.len",
        "email.header._ValueFormatter.add_transition",
        "email.header.Header._normalize",
        "email.header._ValueFormatter.__init__",
        "email.header._ValueFormatter._str",
        "email.header._ValueFormatter.newline",
        "email.header.Header._nonctext"
    ],
    "email.header._ValueFormatter.__init__": [
        "email.header._Accumulator.__init__",
        "<builtin>.len"
    ],
    "email.header._Accumulator.__init__": [
        "<builtin>.super"
    ],
    "email.header._ValueFormatter.add_transition": [
        "email.header._Accumulator.push"
    ],
    "email.header._Accumulator.push": [],
    "email.header._ValueFormatter.feed": [
        "email.header._ValueFormatter._maxlengths",
        "email.header._ValueFormatter._append_chunk",
        "email.header._ValueFormatter._ascii_split",
        "<list>.append",
        "email.header._Accumulator.push",
        "email.header._ValueFormatter.newline"
    ],
    "email.header._ValueFormatter._ascii_split": [
        "<builtin>.zip",
        "re.split",
        "email.header._ValueFormatter._append_chunk"
    ],
    "email.header._ValueFormatter._append_chunk": [
        "<builtin>.range",
        "email.header._Accumulator.reset",
        "<builtin>.len",
        "email.header._Accumulator.part_count",
        "<list>.append",
        "email.header._Accumulator.push",
        "email.header._Accumulator.pop_from"
    ],
    "email.header._Accumulator.part_count": [
        "<builtin>.super"
    ],
    "email.header._Accumulator.pop_from": [],
    "email.header._Accumulator.reset": [],
    "email.header._ValueFormatter._maxlengths": [
        "<builtin>.len"
    ],
    "email.header._ValueFormatter.newline": [
        "email.header._Accumulator.reset",
        "email.header._Accumulator.is_onlyws",
        "<builtin>.str",
        "<builtin>.len",
        "<list>.append",
        "email.header._Accumulator.push",
        "email.header._Accumulator.pop"
    ],
    "email.header._Accumulator.pop": [
        "<builtin>.super",
        "email.header._Accumulator.part_count"
    ],
    "email.header._Accumulator.is_onlyws": [
        "<builtin>.str"
    ],
    "email.header._ValueFormatter._str": [
        "email.header._ValueFormatter.newline"
    ],
    "email.header._ValueFormatter.__str__": [
        "email.header._ValueFormatter._str"
    ],
    "email.header._Accumulator.__len__": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email.quoprimime.header_check": [
        "<builtin>.chr"
    ],
    "email.quoprimime.body_check": [
        "<builtin>.chr"
    ],
    "email.quoprimime.header_length": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email.quoprimime.body_length": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email.quoprimime._max_append": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.chr"
    ],
    "email.quoprimime.unquote": [
        "<builtin>.int",
        "<builtin>.chr"
    ],
    "email.quoprimime.quote": [
        "<builtin>.ord"
    ],
    "email.quoprimime.body_encode": [
        "<builtin>.len",
        "email.quoprimime.quote",
        "<list>",
        "<builtin>.ValueError"
    ],
    "email.quoprimime.decode": [
        "<str>.endswith",
        "email.quoprimime.unquote",
        "<builtin>.len"
    ],
    "email.quoprimime._unquote_match": [
        "email.quoprimime.unquote"
    ],
    "email.quoprimime.header_decode": [
        "re.sub"
    ],
    "email.base64mime.header_length": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "email.base64mime.header_encode": [
        "<builtin>.isinstance",
        "base64.b64encode"
    ],
    "email.base64mime.body_encode": [
        "<list>.append",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email.base64mime.decode": [
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "email.charset.add_charset": [
        "<builtin>.ValueError"
    ],
    "email.charset.Charset.__eq__": [
        "<builtin>.str"
    ],
    "email.charset.Charset.header_encode": [
        "email.charset._encode",
        "email.charset.Charset._get_encoder"
    ],
    "email.charset.Charset._get_encoder": [],
    "email.charset.Charset.header_encode_lines": [
        "<list>.pop",
        "email.charset._encode",
        "email.charset.Charset._get_encoder",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.next",
        "email.charset.Charset.get_output_charset"
    ],
    "email.encoders._qencode": [
        "quopri.encodestring"
    ],
    "quopri.encodestring": [
        "io",
        "quopri.encode",
        "_io.BytesIO"
    ],
    "email.encoders.encode_base64": [
        "<builtin>.str",
        "base64.encodebytes"
    ],
    "email.encoders.encode_quopri": [
        "email.encoders._qencode"
    ],
    "email.utils.formataddr": [
        "email.charset.Charset.header_encode",
        "<builtin>.isinstance",
        "email.charset.Charset.__init__"
    ],
    "email.utils.getaddresses": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email._parseaddr.AddressList.__init__": [
        "email._parseaddr.AddrlistClass.__init__",
        "email._parseaddr.AddrlistClass.getaddrlist"
    ],
    "email._parseaddr.AddrlistClass.__init__": [
        "<str>.replace"
    ],
    "email._parseaddr.AddrlistClass.getaddrlist": [
        "email._parseaddr.AddrlistClass.getaddress",
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getaddress": [
        "email._parseaddr.AddrlistClass.gotonext",
        "email._parseaddr.AddrlistClass.getphraselist",
        "email._parseaddr.AddrlistClass.getrouteaddr",
        "email._parseaddr.AddrlistClass.getaddress",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getaddrspec"
    ],
    "email._parseaddr.AddrlistClass.gotonext": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getphraselist": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getrouteaddr": [
        "email._parseaddr.AddrlistClass.getdomain",
        "email._parseaddr.AddrlistClass.gotonext",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getaddrspec"
    ],
    "email._parseaddr.AddrlistClass.getaddrspec": [
        "email._parseaddr.AddrlistClass.gotonext",
        "email._parseaddr.AddrlistClass.getdomain",
        "<builtin>.len",
        "<list>.append",
        "<list>.pop"
    ],
    "email._parseaddr.AddrlistClass.getdomain": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email.utils.formatdate": [
        "email.utils.format_datetime",
        "datetime.datetime.astimezone",
        "datetime.datetime.fromtimestamp",
        "datetime.datetime.utcfromtimestamp"
    ],
    "email.utils.format_datetime": [
        "email.utils._format_timetuple_and_zone",
        "datetime.datetime.timetuple",
        "<builtin>.ValueError",
        "datetime.date.strftime"
    ],
    "email.utils._format_timetuple_and_zone": [],
    "email.utils.make_msgid": [
        "socket.getfqdn",
        "<builtin>.int"
    ],
    "email.utils.parsedate_to_datetime": [
        "email._parseaddr._parsedate_tz"
    ],
    "email._parseaddr._parsedate_tz": [
        "<builtin>.int",
        "<builtin>.len",
        "<list>.index"
    ],
    "email.utils.parseaddr": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email.utils.localtime": [
        "datetime.datetime.astimezone",
        "datetime.datetime.now"
    ],
    "urllib.parse._NetlocResultMixinBase.hostname": [
        "<builtin>.isinstance"
    ],
    "urllib.parse._NetlocResultMixinBase.port": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "urllib.parse.SplitResult.geturl": [
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.urlunsplit": [
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.ParseResult.geturl": [
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.urlunparse": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.SplitResultBytes.geturl": [
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.ParseResultBytes.geturl": [
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.urlparse": [
        "urllib.parse.urlsplit",
        "urllib.parse._coerce_args",
        "urllib.parse._splitparams"
    ],
    "urllib.parse._splitparams": [
        "<str>.find"
    ],
    "urllib.parse.urljoin": [
        "<builtin>.filter",
        "urllib.parse.urlunparse",
        "urllib.parse._coerce_args",
        "urllib.parse.urlparse",
        "<list>.append",
        "<list>.pop"
    ],
    "urllib.parse.urldefrag": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlparse",
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.unquote_to_bytes": [
        "<builtin>.isinstance",
        "<list>",
        "<builtin>.len"
    ],
    "urllib.parse.unquote": [
        "<builtin>.len",
        "<list>",
        "<str>.split",
        "<builtin>.range"
    ],
    "urllib.parse.parse_qs": [
        "urllib.parse.parse_qsl"
    ],
    "urllib.parse.parse_qsl": [
        "urllib.parse.unquote",
        "<builtin>.len",
        "urllib.parse._coerce_args",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "urllib.parse.unquote_plus": [
        "urllib.parse.unquote"
    ],
    "urllib.parse.Quoter.__repr__": [
        "<builtin>.dict"
    ],
    "urllib.parse.Quoter.__missing__": [
        "<builtin>.chr"
    ],
    "urllib.parse.quote": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "urllib.parse.quote_from_bytes"
    ],
    "urllib.parse.quote_from_bytes": [
        "<builtin>.TypeError",
        "<str>.rstrip",
        "urllib.parse.Quoter.__init__",
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "urllib.parse.Quoter.__init__": [],
    "urllib.parse.quote_plus": [
        "urllib.parse.quote",
        "<builtin>.isinstance",
        "<str>.replace"
    ],
    "urllib.parse.urlencode": [
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<list>.append",
        "urllib.parse.quote_plus"
    ],
    "urllib.parse.to_bytes": [
        "urllib.parse._to_bytes",
        "warnings.warn"
    ],
    "urllib.parse._to_bytes": [
        "<builtin>.UnicodeError",
        "<builtin>.isinstance",
        "<builtin>.repr"
    ],
    "<builtin>.UnicodeError": [],
    "urllib.parse.unwrap": [
        "<builtin>.str"
    ],
    "urllib.parse.splittype": [
        "urllib.parse._splittype",
        "warnings.warn"
    ],
    "urllib.parse._splittype": [
        "re.compile",
        "<str>.lower"
    ],
    "urllib.parse.splithost": [
        "urllib.parse._splithost",
        "warnings.warn"
    ],
    "urllib.parse._splithost": [
        "re.compile"
    ],
    "urllib.parse.splituser": [
        "urllib.parse._splituser",
        "warnings.warn"
    ],
    "urllib.parse._splituser": [],
    "urllib.parse.splitpasswd": [
        "urllib.parse._splitpasswd",
        "warnings.warn"
    ],
    "urllib.parse._splitpasswd": [],
    "urllib.parse.splitport": [
        "urllib.parse._splitport",
        "warnings.warn"
    ],
    "urllib.parse._splitport": [
        "re.compile"
    ],
    "urllib.parse.splitnport": [
        "urllib.parse._splitnport",
        "warnings.warn"
    ],
    "urllib.parse._splitnport": [
        "<builtin>.int"
    ],
    "urllib.parse.splitquery": [
        "urllib.parse._splitquery",
        "warnings.warn"
    ],
    "urllib.parse._splitquery": [],
    "urllib.parse.splittag": [
        "urllib.parse._splittag",
        "warnings.warn"
    ],
    "urllib.parse._splittag": [],
    "urllib.parse.splitattr": [
        "urllib.parse._splitattr",
        "warnings.warn"
    ],
    "urllib.parse._splitattr": [],
    "urllib.parse.splitvalue": [
        "urllib.parse._splitvalue",
        "warnings.warn"
    ],
    "urllib.parse._splitvalue": [],
    "email._parseaddr.parsedate_tz": [
        "<builtin>.tuple",
        "email._parseaddr._parsedate_tz"
    ],
    "email._parseaddr.parsedate": [
        "<builtin>.isinstance",
        "email._parseaddr.parsedate_tz"
    ],
    "email._parseaddr.mktime_tz": [
        "calendar.timegm"
    ],
    "email._parseaddr.AddrlistClass.getdelimited": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getquote": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getcomment": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getdomainliteral": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getatom": [
        "<list>.append",
        "<builtin>.len"
    ],
    "email._parseaddr.AddressList.__len__": [
        "<builtin>.len"
    ],
    "email._parseaddr.AddressList.__add__": [
        "email._parseaddr.AddressList.__init__",
        "<list>.append"
    ],
    "email._parseaddr.AddressList.__iadd__": [
        "<list>.append"
    ],
    "email._parseaddr.AddressList.__sub__": [
        "email._parseaddr.AddressList.__init__",
        "<list>.append"
    ],
    "email._parseaddr.AddressList.__isub__": [
        "<list>.remove"
    ],
    "email.message.Message.__str__": [
        "email.message.Message.as_string",
        "email.message.MIMEPart.as_string"
    ],
    "email.message.Message.as_string": [
        "email.generator",
        "email.generator.Generator.flatten",
        "email.generator.Generator.__init__",
        "_io.StringIO"
    ],
    "email.generator": [
        "copy",
        "io",
        "re.compile",
        "re",
        "<builtin>.len",
        "email.generator.DecodedGenerator",
        "<builtin>.repr",
        "email.utils",
        "email.generator.BytesGenerator",
        "email.generator.Generator",
        "random"
    ],
    "email.generator.Generator": [
        "<builtin>.classmethod"
    ],
    "email.generator.BytesGenerator": [
        "<builtin>.classmethod"
    ],
    "email.generator.DecodedGenerator": [],
    "email.generator.Generator.__init__": [],
    "email.generator.Generator.flatten": [
        "email.generator.BytesGenerator.write",
        "email.generator.Generator.write",
        "email.message.Message.get_unixfrom",
        "email.generator.Generator._write",
        "email.generator.Generator._encode",
        "email.generator.BytesGenerator._encode"
    ],
    "email.generator.Generator._encode": [],
    "email.message.Message.get_unixfrom": [],
    "email.generator.Generator.write": [],
    "email.generator.Generator._write": [
        "email.generator.Generator._dispatch",
        "copy.deepcopy",
        "email.message.Message.replace_header",
        "email.generator.BytesGenerator._write_headers",
        "<builtin>.getattr",
        "email.generator.Generator._new_buffer",
        "email.generator.BytesGenerator._new_buffer",
        "email.generator.Generator._write_headers"
    ],
    "email.generator.Generator._new_buffer": [
        "_io.StringIO"
    ],
    "email.generator.Generator._dispatch": [
        "email.generator.BytesGenerator._handle_text",
        "email.message.Message.get_content_subtype",
        "<builtin>.getattr",
        "email.generator.Generator._handle_text",
        "email.message.Message.get_content_maintype",
        "<str>.replace"
    ],
    "email.message.Message.get_content_subtype": [
        "email.message.Message.get_content_type",
        "<str>.split"
    ],
    "email.generator.Generator._handle_text": [
        "<builtin>.TypeError",
        "copy.deepcopy",
        "email.message.Message.get_param",
        "email.generator.Generator._write_lines",
        "<builtin>.isinstance",
        "email.message.Message.set_payload",
        "email.message.Message.get_payload",
        "email.utils._has_surrogates",
        "<builtin>.type"
    ],
    "email.generator.Generator._write_lines": [
        "email.generator.BytesGenerator.write",
        "email.generator.Generator.write",
        "<str>.split"
    ],
    "email.generator.Generator._write_headers": [
        "email.generator.BytesGenerator.write",
        "email.generator.Generator.write",
        "email.message.Message.raw_items"
    ],
    "email.message.Message.raw_items": [
        "<list>.copy",
        "<builtin>.iter"
    ],
    "email.message.Message.__bytes__": [
        "email.message.Message.as_bytes"
    ],
    "email.message.Message.as_bytes": [
        "email.generator",
        "email.generator.Generator.flatten",
        "_io.BytesIO"
    ],
    "email.message.Message.attach": [
        "<builtin>.TypeError",
        "<list>.append"
    ],
    "email.message.Message.__len__": [
        "<builtin>.len"
    ],
    "email.message.Message.__getitem__": [
        "email.message.Message.get"
    ],
    "email.message.Message.__setitem__": [
        "email.policy.EmailPolicy.header_max_count",
        "<list>.append",
        "<builtin>.ValueError",
        "email._policybase.Policy.header_max_count"
    ],
    "email._policybase.Policy.header_max_count": [],
    "email.message.Message.__delitem__": [
        "<list>.append"
    ],
    "email.message.Message.values": [
        "email.policy.EmailPolicy.header_fetch_parse",
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.message.Message.items": [
        "email.policy.EmailPolicy.header_fetch_parse",
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.message.Message.get_all": [
        "<list>.append"
    ],
    "email.message.Message.set_type": [
        "email.message.Message.set_param",
        "email.message.Message.get_params",
        "<str>.lower"
    ],
    "email.message.Message.get_filename": [
        "email.message.Message.get_param",
        "<str>.strip",
        "<builtin>.object",
        "email.utils.collapse_rfc2231_value"
    ],
    "email.message.Message.set_boundary": [
        "<builtin>.object",
        "<list>.append",
        "email.message.Message._get_params_preserve"
    ],
    "email.message.Message.get_content_charset": [
        "email.message.Message.get_param",
        "<builtin>.str",
        "<builtin>.isinstance",
        "<builtin>.object",
        "<str>.lower"
    ],
    "email.message.Message.get_charsets": [
        "email.iterators.walk"
    ],
    "email.iterators.walk": [],
    "email.message.Message.get_content_disposition": [
        "email.message._splitparam",
        "email.message.Message.get"
    ],
    "email.policy": [
        "re.compile",
        "email.contentmanager",
        "email._policybase",
        "email.message",
        "email.policy.EmailPolicy",
        "re",
        "email.policy.EmailPolicy.__init__",
        "email._policybase._PolicyBase.clone",
        "email.utils",
        "email.headerregistry"
    ],
    "email.message.MIMEPart.__init__": [
        "email.policy",
        "email.message.Message.__init__"
    ],
    "email.headerregistry": [
        "email.headerregistry.SingleAddressHeader",
        "email._header_value_parser",
        "email.headerregistry.UniqueDateHeader",
        "email.headerregistry.DateHeader",
        "email.headerregistry.Group",
        "email.headerregistry.UniqueAddressHeader",
        "email.headerregistry.MIMEVersionHeader",
        "email.headerregistry.UnstructuredHeader",
        "email.headerregistry.BaseHeader",
        "types",
        "email.headerregistry.ContentTransferEncodingHeader",
        "email.utils",
        "email.headerregistry.AddressHeader",
        "email.headerregistry.ContentTypeHeader",
        "email.headerregistry.Address",
        "email.headerregistry.UniqueUnstructuredHeader",
        "email.headerregistry.MessageIDHeader",
        "email.errors",
        "email.headerregistry.HeaderRegistry",
        "email.headerregistry.ParameterizedMIMEHeader",
        "email.headerregistry.ContentDispositionHeader",
        "email.headerregistry.UniqueSingleAddressHeader"
    ],
    "email._header_value_parser": [
        "string",
        "email._header_value_parser.Value",
        "email._header_value_parser.MailboxList",
        "email._header_value_parser.InvalidParameter",
        "operator",
        "email._header_value_parser.GroupList",
        "email._header_value_parser.Mailbox",
        "email._header_value_parser.Phrase",
        "email._header_value_parser.NoFoldLiteral",
        "email._header_value_parser.Comment",
        "email._header_value_parser.LocalPart",
        "email._header_value_parser.TokenList",
        "email._header_value_parser.InvalidMailbox",
        "email._header_value_parser.Token",
        "email._header_value_parser.Address",
        "email._header_value_parser.AddrSpec",
        "email._header_value_parser.MimeParameters",
        "email._header_value_parser.DomainLiteral",
        "email._header_value_parser.Attribute",
        "email._header_value_parser.AddressList",
        "email._header_value_parser.EWWhiteSpaceTerminal",
        "<builtin>.set",
        "email._header_value_parser.ObsRoute",
        "email._header_value_parser.Domain",
        "email._header_value_parser.NameAddr",
        "email._header_value_parser.MsgID",
        "email._header_value_parser.Terminal",
        "urllib",
        "email.utils",
        "email._header_value_parser.InvalidMessageID",
        "email._header_value_parser.DisplayName",
        "email._header_value_parser.ContentTransferEncoding",
        "re.compile",
        "email._header_value_parser.ContentType",
        "email._header_value_parser.MIMEVersion",
        "email._header_value_parser.Group",
        "email._header_value_parser.ValueTerminal",
        "email._header_value_parser.ObsLocalPart",
        "email._header_value_parser.EncodedWord",
        "email._header_value_parser.Header",
        "email._header_value_parser.DotAtom",
        "email._header_value_parser.Parameter",
        "email._header_value_parser.Section",
        "email._header_value_parser.Atom",
        "email._header_value_parser.AngleAddr",
        "re.escape",
        "email.errors",
        "email._encoded_words",
        "email._header_value_parser.DotAtomText",
        "email._header_value_parser.ParameterizedHeaderValue",
        "email._header_value_parser.MessageID",
        "email._header_value_parser._InvalidEwError",
        "re",
        "email._header_value_parser.Word",
        "email._header_value_parser.HeaderLabel",
        "email._header_value_parser.WhiteSpaceTerminal",
        "email._header_value_parser.BareQuotedString",
        "email._header_value_parser.QuotedString",
        "email._header_value_parser.CFWSList",
        "email._header_value_parser.WhiteSpaceTokenList",
        "email._header_value_parser.ContentDisposition",
        "email._header_value_parser.UnstructuredTokenList"
    ],
    "urllib": [],
    "email._header_value_parser.TokenList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.WhiteSpaceTokenList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.UnstructuredTokenList": [],
    "email._header_value_parser.Phrase": [],
    "email._header_value_parser.Word": [],
    "email._header_value_parser.CFWSList": [],
    "email._header_value_parser.Atom": [],
    "email._header_value_parser.Token": [],
    "email._header_value_parser.EncodedWord": [],
    "email._header_value_parser.QuotedString": [
        "<builtin>.property"
    ],
    "email._header_value_parser.BareQuotedString": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Comment": [
        "<builtin>.property"
    ],
    "email._header_value_parser.AddressList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Address": [
        "<builtin>.property"
    ],
    "email._header_value_parser.MailboxList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.GroupList": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Group": [
        "<builtin>.property"
    ],
    "email._header_value_parser.NameAddr": [
        "<builtin>.property"
    ],
    "email._header_value_parser.AngleAddr": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ObsRoute": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Mailbox": [
        "<builtin>.property"
    ],
    "email._header_value_parser.InvalidMailbox": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Domain": [
        "<builtin>.property"
    ],
    "email._header_value_parser.DotAtom": [],
    "email._header_value_parser.DotAtomText": [],
    "email._header_value_parser.NoFoldLiteral": [],
    "email._header_value_parser.AddrSpec": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ObsLocalPart": [],
    "email._header_value_parser.DisplayName": [
        "<builtin>.property"
    ],
    "email._header_value_parser.LocalPart": [
        "<builtin>.property"
    ],
    "email._header_value_parser.DomainLiteral": [
        "<builtin>.property"
    ],
    "email._header_value_parser.MIMEVersion": [],
    "email._header_value_parser.Parameter": [
        "<builtin>.property"
    ],
    "email._header_value_parser.InvalidParameter": [],
    "email._header_value_parser.Attribute": [
        "<builtin>.property"
    ],
    "email._header_value_parser.Section": [],
    "email._header_value_parser.Value": [
        "<builtin>.property"
    ],
    "email._header_value_parser.MimeParameters": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ParameterizedHeaderValue": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ContentType": [],
    "email._header_value_parser.ContentDisposition": [],
    "email._header_value_parser.ContentTransferEncoding": [],
    "email._header_value_parser.HeaderLabel": [],
    "email._header_value_parser.MsgID": [],
    "email._header_value_parser.MessageID": [],
    "email._header_value_parser.InvalidMessageID": [],
    "email._header_value_parser.Header": [],
    "email._header_value_parser.Terminal": [
        "<builtin>.property"
    ],
    "email._header_value_parser.WhiteSpaceTerminal": [
        "<builtin>.property"
    ],
    "email._header_value_parser.ValueTerminal": [
        "<builtin>.property"
    ],
    "email._header_value_parser.EWWhiteSpaceTerminal": [
        "<builtin>.property"
    ],
    "email._header_value_parser._InvalidEwError": [],
    "email.headerregistry.Address": [
        "<builtin>.property"
    ],
    "email.headerregistry.Group": [
        "<builtin>.property"
    ],
    "email.headerregistry.BaseHeader": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "email.headerregistry.UnstructuredHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "email.headerregistry.UniqueUnstructuredHeader": [],
    "email.headerregistry.DateHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.UniqueDateHeader": [],
    "email.headerregistry.AddressHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.UniqueAddressHeader": [],
    "email.headerregistry.SingleAddressHeader": [
        "<builtin>.property"
    ],
    "email.headerregistry.UniqueSingleAddressHeader": [],
    "email.headerregistry.MIMEVersionHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.ParameterizedMIMEHeader": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.ContentTypeHeader": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.ContentDispositionHeader": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.ContentTransferEncodingHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "email.headerregistry.MessageIDHeader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "email.headerregistry.HeaderRegistry": [],
    "email.contentmanager": [
        "binascii",
        "email.errors",
        "email.message",
        "<str>.split",
        "email.contentmanager.ContentManager.add_set_handler",
        "email.contentmanager.ContentManager.add_get_handler",
        "email.contentmanager.ContentManager.__init__",
        "email.charset",
        "email.quoprimime",
        "email.contentmanager.ContentManager"
    ],
    "email.contentmanager.ContentManager": [],
    "email.contentmanager.ContentManager.__init__": [],
    "email.contentmanager.ContentManager.add_get_handler": [],
    "email.contentmanager.ContentManager.add_set_handler": [],
    "email.policy.EmailPolicy": [
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.headerregistry.HeaderRegistry.__init__": [
        "<map>.update"
    ],
    "email.policy.EmailPolicy.__init__": [
        "<builtin>.super",
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.message.MIMEPart.as_string": [
        "<builtin>.super"
    ],
    "email.message.MIMEPart.__str__": [
        "email.message.MIMEPart.as_string",
        "email._policybase._PolicyBase.clone"
    ],
    "email.message.MIMEPart.is_attachment": [
        "email.message.Message.get"
    ],
    "email.message.MIMEPart._find_body": [
        "email.message.MIMEPart._find_body",
        "email.message.MIMEPart.iter_parts",
        "email.message.Message.get_param",
        "<str>.index",
        "email.message.MIMEPart.is_attachment",
        "email.message.Message.get_payload",
        "email.message.Message.get_content_type"
    ],
    "email.message.MIMEPart.get_body": [
        "email.message.MIMEPart._find_body",
        "<builtin>.len"
    ],
    "email.message.MIMEPart.iter_parts": [
        "email.message.Message.get_payload",
        "email.message.Message.get_content_maintype"
    ],
    "email.message.MIMEPart.iter_attachments": [
        "<list>.copy",
        "email.message.Message.get_param",
        "<list>.append",
        "<map>.pop",
        "email.message.Message.get_payload",
        "<list>.pop",
        "email.message.Message.get_content_type",
        "<map>.copy"
    ],
    "email.message.MIMEPart.get_content": [
        "email.contentmanager.ContentManager.get_content"
    ],
    "email.contentmanager.ContentManager.get_content": [
        "<builtin>.KeyError",
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_content_type"
    ],
    "email.message.MIMEPart.set_content": [
        "email.contentmanager.ContentManager.set_content"
    ],
    "email.contentmanager.ContentManager.set_content": [
        "<builtin>.TypeError",
        "email.message.Message.get_content_maintype",
        "email.contentmanager.ContentManager._find_set_handler",
        "email.message.MIMEPart.clear_content"
    ],
    "email.contentmanager.ContentManager._find_set_handler": [
        "<builtin>.getattr",
        "<builtin>.KeyError",
        "<builtin>.type"
    ],
    "email.message.MIMEPart.clear_content": [],
    "email.message.MIMEPart._make_multipart": [
        "email.message.Message.get_content_subtype",
        "email.message.Message.get_content_maintype",
        "<list>.append",
        "email.message.Message.set_param",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "email.message.MIMEPart.make_related": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart.make_alternative": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart.make_mixed": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart._add_multipart": [
        "email.message.Message.get_content_subtype",
        "<builtin>.getattr",
        "email.message.Message.attach",
        "email.message.Message.get_content_maintype",
        "<builtin>.type"
    ],
    "email.message.MIMEPart.add_related": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.add_alternative": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.add_attachment": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.EmailMessage.set_content": [
        "<builtin>.super"
    ],
    "optparse._repr": [
        "<builtin>.id"
    ],
    "optparse.BadOptionError.__str__": [
        "optparse.gettext"
    ],
    "optparse.AmbiguousOptionError.__str__": [
        "optparse.gettext"
    ],
    "optparse.HelpFormatter.set_short_opt_delimiter": [
        "<builtin>.ValueError"
    ],
    "optparse.HelpFormatter.set_long_opt_delimiter": [
        "<builtin>.ValueError"
    ],
    "optparse.HelpFormatter.format_usage": [
        "<builtin>.NotImplementedError"
    ],
    "optparse.HelpFormatter.format_heading": [
        "<builtin>.NotImplementedError"
    ],
    "optparse.HelpFormatter._format_text": [
        "textwrap.fill",
        "<builtin>.max"
    ],
    "optparse.HelpFormatter.format_description": [
        "optparse.HelpFormatter._format_text"
    ],
    "optparse.HelpFormatter.format_epilog": [
        "optparse.HelpFormatter._format_text"
    ],
    "optparse.HelpFormatter.expand_default": [
        "<map>.get",
        "<builtin>.str"
    ],
    "optparse.HelpFormatter.format_option": [
        "<list>.extend",
        "optparse.HelpFormatter.expand_default",
        "<builtin>.len",
        "<list>.append",
        "textwrap.wrap"
    ],
    "optparse.HelpFormatter.store_option_strings": [
        "optparse.HelpFormatter.format_option_strings",
        "<builtin>.max",
        "<builtin>.len",
        "<builtin>.min",
        "optparse.HelpFormatter.dedent",
        "optparse.HelpFormatter.indent"
    ],
    "optparse.HelpFormatter.indent": [],
    "optparse.HelpFormatter.format_option_strings": [],
    "optparse.HelpFormatter.dedent": [],
    "optparse.TitledHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.TitledHelpFormatter.format_usage": [
        "optparse.TitledHelpFormatter.format_heading",
        "optparse.gettext"
    ],
    "optparse.TitledHelpFormatter.format_heading": [
        "<builtin>.len"
    ],
    "optparse._parse_num": [
        "<builtin>.type"
    ],
    "optparse._parse_int": [
        "optparse._parse_num"
    ],
    "optparse.check_builtin": [
        "optparse.OptParseError.__init__",
        "optparse.gettext"
    ],
    "optparse.OptParseError.__init__": [],
    "optparse.check_choice": [
        "<builtin>.map",
        "optparse.OptParseError.__init__",
        "optparse.gettext"
    ],
    "optparse.Option.__init__": [
        "optparse.Option._check_opt_strings",
        "optparse.Option._set_attrs",
        "optparse.Option._set_opt_strings"
    ],
    "optparse.Option._check_opt_strings": [
        "<builtin>.TypeError"
    ],
    "optparse.Option._set_opt_strings": [
        "<list>.append",
        "optparse.OptionError.__init__",
        "<builtin>.len"
    ],
    "optparse.Option._set_attrs": [
        "<builtin>.setattr",
        "optparse.OptionError.__init__",
        "<builtin>.sorted"
    ],
    "optparse.Option._check_action": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_type": [
        "<builtin>.isinstance",
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_choice": [
        "<builtin>.isinstance",
        "optparse.OptionError.__init__",
        "<builtin>.str",
        "<builtin>.type"
    ],
    "optparse.Option._check_const": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_nargs": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_callback": [
        "<builtin>.isinstance",
        "<builtin>.callable",
        "optparse.OptionError.__init__"
    ],
    "optparse.Option.check_value": [
        "<map>.get",
        "<map>"
    ],
    "optparse.Option.convert_value": [
        "optparse.Option.check_value",
        "<builtin>.tuple"
    ],
    "optparse.Option.process": [
        "optparse.Option.convert_value",
        "optparse.Option.take_action"
    ],
    "optparse.Option.take_action": [
        "<builtin>.setattr",
        "<builtin>.ValueError"
    ],
    "optparse.Values.__str__": [
        "<builtin>.str"
    ],
    "optparse.Values.__eq__": [
        "<builtin>.isinstance"
    ],
    "optparse.Values._update_careful": [
        "<builtin>.setattr",
        "<builtin>.dir"
    ],
    "optparse.Values._update": [
        "optparse.Values._update_careful",
        "<builtin>.ValueError",
        "optparse.Values._update_loose"
    ],
    "optparse.Values._update_loose": [],
    "optparse.Values.read_module": [
        "optparse.Values._update",
        "<builtin>.__import__",
        "<builtin>.vars"
    ],
    "optparse.Values.read_file": [
        "<builtin>.exec",
        "optparse.Values._update",
        "<builtin>.open"
    ],
    "optparse.Values.ensure_value": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "optparse.OptionParser._create_option_list": [
        "optparse.OptionContainer._create_option_mappings"
    ],
    "optparse.OptionContainer._create_option_mappings": [],
    "optparse.OptionContainer.get_option": [
        "<map>.get"
    ],
    "optparse.OptionContainer.remove_option": [
        "<map>.get",
        "<builtin>.ValueError"
    ],
    "optparse.OptionContainer.format_option_help": [
        "<list>.append"
    ],
    "optparse.OptionContainer.format_description": [
        "optparse.OptionParser.get_description",
        "optparse.OptionContainer.get_description"
    ],
    "optparse.OptionParser.get_description": [
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionContainer.get_description": [],
    "optparse.OptionContainer.format_help": [
        "<list>.append"
    ],
    "optparse.OptionGroup.__init__": [
        "optparse.OptionContainer.__init__"
    ],
    "optparse.OptionGroup._create_option_list": [
        "optparse.OptionContainer._share_option_mappings"
    ],
    "optparse.OptionContainer._share_option_mappings": [],
    "optparse.OptionGroup.destroy": [
        "optparse.OptionContainer.destroy"
    ],
    "optparse.OptionContainer.destroy": [],
    "optparse.OptionGroup.format_help": [
        "optparse.OptionContainer.format_help"
    ],
    "optparse.OptionParser.destroy": [
        "optparse.OptionContainer.destroy"
    ],
    "optparse.OptionParser.set_defaults": [
        "<map>.update"
    ],
    "optparse.OptionParser.add_option_group": [
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<list>.append",
        "optparse.OptionGroup.__init__",
        "<builtin>.ValueError"
    ],
    "optparse.OptionParser.get_option_group": [
        "<map>.get"
    ],
    "optparse.OptionParser.get_version": [
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionParser.print_version": [
        "optparse.OptionParser.get_version",
        "<builtin>.print"
    ],
    "optparse.OptionParser.format_option_help": [
        "optparse.HelpFormatter.dedent",
        "<list>.append",
        "optparse.HelpFormatter.store_option_strings",
        "optparse.HelpFormatter.indent"
    ],
    "optparse.OptionParser.format_help": [
        "<list>.append"
    ],
    "optparse.OptionParser.print_help": [
        "optparse.OptionParser.format_help",
        "codecs.StreamRecoder.write"
    ],
    "email._encoded_words._QByteMap.__missing__": [
        "<builtin>.chr"
    ],
    "email._encoded_words.len_q": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email._encoded_words.encode_b": [
        "base64.b64encode"
    ],
    "email._encoded_words.len_b": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "email.iterators.body_line_iterator": [
        "<builtin>.isinstance",
        "_io.StringIO"
    ],
    "email.iterators._structure": [
        "email.iterators._structure",
        "<builtin>.print"
    ],
    "_strptime.TimeRE.compile": [
        "re.compile",
        "_strptime.TimeRE.pattern"
    ],
    "_strptime._strptime_time": [
        "_strptime._strptime"
    ],
    "pathlib._make_selector": [
        "pathlib._WildcardSelector.__init__",
        "pathlib._PreciseSelector.__init__",
        "pathlib._is_wildcard_pattern",
        "pathlib._RecursiveWildcardSelector.__init__",
        "<builtin>.ValueError"
    ],
    "pathlib._is_wildcard_pattern": [],
    "pathlib._PreciseSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._Selector.__init__": [
        "pathlib._make_selector"
    ],
    "pathlib._RecursiveWildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._WildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "asyncio.sslproto.SSLProtocol.pause_writing": [
        "asyncio.streams.FlowControlMixin.pause_writing"
    ],
    "asyncio.sslproto.SSLProtocol.resume_writing": [
        "asyncio.streams.FlowControlMixin.resume_writing"
    ],
    "asyncio.streams.StreamReaderProtocol.data_received": [],
    "asyncio.streams.StreamReaderProtocol.eof_received": [],
    "asyncio.streams.StreamWriter.write": [
        "asyncio.sslproto._SSLProtocolTransport.write"
    ],
    "asyncio.streams.StreamWriter.writelines": [
        "asyncio.transports.WriteTransport.writelines"
    ],
    "asyncio.streams.StreamWriter.write_eof": [
        "asyncio.transports.WriteTransport.write_eof"
    ],
    "asyncio.transports.WriteTransport.write_eof": [],
    "asyncio.streams.StreamWriter.can_write_eof": [
        "asyncio.sslproto._SSLProtocolTransport.can_write_eof"
    ],
    "asyncio.sslproto._SSLProtocolTransport.can_write_eof": [],
    "asyncio.streams.StreamWriter.is_closing": [
        "asyncio.sslproto._SSLProtocolTransport.is_closing"
    ],
    "asyncio.sslproto._SSLProtocolTransport.is_closing": [],
    "asyncio.streams.StreamWriter.get_extra_info": [
        "asyncio.sslproto._SSLProtocolTransport.get_extra_info"
    ],
    "importlib._bootstrap_external.FileFinder.path_hook.path_hook_for_FileFinder": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.FileFinder.__init__",
        "importlib._bootstrap_external._path_isdir"
    ],
    "multiprocessing.pool.ThreadPool._get_sentinels": [],
    "multiprocessing.dummy.DummyProcess.start": [
        "threading.current_thread",
        "<builtin>.RuntimeError",
        "<builtin>.hasattr",
        "threading.Thread.start"
    ],
    "multiprocessing.pool.ThreadPool._wait_for_updates": [],
    "xmlrpc.client._MultiCallMethod.__call__": [
        "<list>.append"
    ],
    "xmlrpc.client._Method.__call__": [
        "xmlrpc.client.ServerProxy.__request"
    ],
    "http.client.HTTPResponse.fileno": [
        "socket.SocketIO.fileno"
    ],
    "http.client.HTTPResponse.isclosed": [],
    "email.generator.BytesGenerator._encode": [],
    "email.generator.BytesGenerator.write": [],
    "email.generator.BytesGenerator._new_buffer": [
        "_io.BytesIO"
    ],
    "email.generator.BytesGenerator._handle_text": [
        "email.generator.Generator._write_lines",
        "email.utils._has_surrogates",
        "<builtin>.super"
    ],
    "email.policy.EmailPolicy.header_fetch_parse": [
        "<builtin>.hasattr",
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.policy.EmailPolicy.header_store_parse": [
        "email.headerregistry.HeaderRegistry.__init__",
        "<builtin>.len",
        "<str>.lower",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "<str>.splitlines"
    ],
    "email.generator.BytesGenerator._write_headers": [
        "email.generator.BytesGenerator.write",
        "email.message.Message.raw_items"
    ],
    "email.policy.EmailPolicy.header_max_count": [],
    "importlib.metadata.EntryPoint.load": [
        "<builtin>.filter",
        "importlib.import_module",
        "functools.reduce"
    ],
    "importlib.metadata.EntryPoint.extras": [
        "<builtin>.list",
        "re.finditer"
    ],
    "importlib.metadata.EntryPoint._from_text": [
        "importlib.metadata.EntryPoint._from_config",
        "configparser.RawConfigParser.readfp",
        "configparser.RawConfigParser.read_string",
        "_io.StringIO"
    ],
    "configparser.RawConfigParser.read_string": [
        "configparser.RawConfigParser.read_file",
        "_io.StringIO"
    ],
    "configparser.RawConfigParser.read_file": [
        "configparser.RawConfigParser._read"
    ],
    "configparser.RawConfigParser._read": [
        "<builtin>.enumerate",
        "configparser.ParsingError.__init__",
        "configparser.DuplicateOptionError.__init__",
        "configparser.MissingSectionHeaderError.__init__",
        "<builtin>.set",
        "<str>.rstrip",
        "configparser.RawConfigParser.optionxform",
        "<builtin>.min",
        "configparser.SectionProxy.__init__",
        "<map>.items",
        "configparser.RawConfigParser._join_multiline_values",
        "configparser.DuplicateSectionError.__init__",
        "configparser.RawConfigParser._handle_error"
    ],
    "configparser.RawConfigParser._handle_error": [
        "configparser.ParsingError.append",
        "configparser.ParsingError.__init__",
        "<builtin>.repr"
    ],
    "configparser.ParsingError.__init__": [
        "configparser.Error.__init__",
        "<builtin>.ValueError"
    ],
    "configparser.Error.__init__": [],
    "configparser.ParsingError.append": [
        "<list>.append"
    ],
    "configparser.RawConfigParser.optionxform": [
        "<str>.lower"
    ],
    "configparser.DuplicateOptionError.__init__": [
        "<list>.extend",
        "<list>.insert",
        "configparser.Error.__init__",
        "<list>.append"
    ],
    "configparser.MissingSectionHeaderError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.SectionProxy.__init__": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "configparser.DuplicateSectionError.__init__": [
        "<list>.extend",
        "<list>.insert",
        "configparser.Error.__init__",
        "<list>.append"
    ],
    "configparser.RawConfigParser._join_multiline_values": [
        "configparser.Interpolation.before_read",
        "<builtin>.isinstance",
        "<str>.rstrip"
    ],
    "configparser.RawConfigParser.readfp": [
        "configparser.RawConfigParser.read_file",
        "warnings.warn"
    ],
    "importlib.metadata.EntryPoint._from_config": [
        "configparser.RawConfigParser.sections",
        "configparser.RawConfigParser.items"
    ],
    "configparser.RawConfigParser.sections": [
        "<builtin>.list"
    ],
    "configparser.RawConfigParser.items": [
        "configparser.RawConfigParser.items.<lambda1>",
        "configparser.RawConfigParser.optionxform",
        "configparser.NoSectionError.__init__",
        "<builtin>.list",
        "<builtin>.super"
    ],
    "configparser.NoSectionError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.RawConfigParser.items.<lambda1>": [
        "configparser.Interpolation.before_get",
        "configparser.BasicInterpolation.before_get"
    ],
    "importlib.metadata.EntryPoint.__iter__": [
        "<builtin>.iter"
    ],
    "importlib.metadata.PackagePath.read_text": [
        "importlib.metadata.PackagePath.locate"
    ],
    "importlib.metadata.PackagePath.locate": [],
    "importlib.metadata.PackagePath.read_binary": [
        "importlib.metadata.PackagePath.locate"
    ],
    "importlib.metadata.Distribution.from_name": [
        "<builtin>.next",
        "importlib.metadata.DistributionFinder.Context.__init__",
        "importlib.metadata.Distribution._discover_resolvers"
    ],
    "importlib.metadata.Distribution._discover_resolvers": [
        "<builtin>.filter",
        "<builtin>.getattr"
    ],
    "importlib.metadata.Distribution.discover": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.ValueError",
        "importlib.metadata.Distribution._discover_resolvers"
    ],
    "importlib.metadata.Distribution.at": [
        "importlib.metadata.PathDistribution.__init__"
    ],
    "importlib.metadata.PathDistribution.__init__": [],
    "importlib.metadata.Distribution.metadata": [
        "importlib.metadata.Distribution.read_text",
        "email.message_from_string"
    ],
    "importlib.metadata.Distribution.read_text": [],
    "email.message_from_string": [
        "email.parser.Parser.parsestr",
        "email.parser",
        "email.parser.Parser.__init__"
    ],
    "importlib.metadata.Distribution.entry_points": [
        "importlib.metadata.Distribution.read_text",
        "importlib.metadata.EntryPoint._from_text"
    ],
    "importlib.metadata.Distribution.files": [
        "importlib.metadata.Distribution._read_files_egginfo",
        "<builtin>.list",
        "importlib.metadata.Distribution._read_files_distinfo",
        "itertools.starmap"
    ],
    "importlib.metadata.Distribution._read_files_distinfo": [
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution._read_files_egginfo": [
        "<builtin>.map",
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution.requires": [
        "importlib.metadata.Distribution._read_dist_info_reqs",
        "<builtin>.list",
        "importlib.metadata.Distribution._read_egg_info_reqs"
    ],
    "importlib.metadata.Distribution._read_dist_info_reqs": [],
    "importlib.metadata.Distribution._read_egg_info_reqs": [
        "importlib.metadata.Distribution.read_text",
        "importlib.metadata.Distribution._deps_from_requires_text"
    ],
    "importlib.metadata.Distribution._deps_from_requires_text": [
        "operator.itemgetter.__init__",
        "importlib.metadata.Distribution._read_sections",
        "<builtin>.map",
        "<builtin>.list",
        "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs"
    ],
    "importlib.metadata.Distribution._read_sections": [
        "<builtin>.filter",
        "<builtin>.locals",
        "re.match"
    ],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs": [
        "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition"
    ],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition": [
        "<builtin>.filter",
        "<builtin>.list"
    ],
    "importlib.metadata.DistributionFinder.Context.path": [
        "<builtin>.vars"
    ],
    "importlib.metadata.FastPath.__init__": [
        "posixpath.basename",
        "ntpath.basename"
    ],
    "importlib.metadata.FastPath.children": [
        "contextlib.suppress.__init__"
    ],
    "importlib.metadata.FastPath.zip_children": [
        "zipfile.Path.__init__",
        "zipfile.CompleteDirs.namelist",
        "zipfile.FastLookup.namelist",
        "posixpath.split"
    ],
    "importlib.metadata.FastPath.search": [
        "importlib.metadata.FastPath.is_egg",
        "importlib.metadata.FastPath.joinpath",
        "importlib.metadata.FastPath.children"
    ],
    "importlib.metadata.FastPath.is_egg": [],
    "importlib.metadata.FastPath.joinpath": [],
    "importlib.metadata.PathDistribution.read_text": [
        "contextlib.suppress.__init__"
    ],
    "importlib.metadata.distribution": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.distributions": [
        "importlib.metadata.Distribution.discover"
    ],
    "importlib.metadata.metadata": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.version": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.entry_points": [
        "<builtin>.sorted",
        "operator.attrgetter.__init__",
        "<builtin>.tuple",
        "importlib.metadata.distributions"
    ],
    "importlib.metadata.files": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.requires": [
        "importlib.metadata.distribution"
    ],
    "csv.Dialect.__init__": [
        "csv.Dialect._validate"
    ],
    "csv.Dialect._validate": [
        "<builtin>.str"
    ],
    "csv.DictReader.fieldnames": [
        "<builtin>.next"
    ],
    "csv.DictReader.__next__": [
        "<builtin>.dict",
        "<builtin>.next",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "csv.DictWriter.__init__": [
        "<builtin>.ValueError",
        "<str>.lower"
    ],
    "csv.DictWriter.writeheader": [
        "<builtin>.dict",
        "<builtin>.zip",
        "csv.DictWriter.writerow"
    ],
    "csv.DictWriter.writerow": [
        "csv.DictWriter._dict_to_list"
    ],
    "csv.DictWriter._dict_to_list": [
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "csv.DictWriter.writerows": [
        "<builtin>.map"
    ],
    "csv.Sniffer.sniff": [
        "csv.Sniffer._guess_delimiter",
        "csv.Sniffer._guess_quote_and_delimiter",
        "csv.Sniffer.sniff.dialect"
    ],
    "csv.Sniffer._guess_quote_and_delimiter": [
        "re.compile",
        "<builtin>.max",
        "re.escape",
        "<map>.get"
    ],
    "csv.Sniffer._guess_delimiter": [
        "<builtin>.filter",
        "<map>.get",
        "<map>.items",
        "<builtin>.chr",
        "<builtin>.range",
        "<builtin>.max",
        "<builtin>.len",
        "<map>.keys",
        "<builtin>.float",
        "<builtin>.list",
        "<builtin>.sum",
        "<builtin>.min"
    ],
    "csv.Sniffer.sniff.dialect": [],
    "csv.Sniffer.has_header": [
        "csv.Sniffer.sniff",
        "<map>.items",
        "<builtin>.range",
        "<builtin>.list",
        "<builtin>.len",
        "_io.StringIO",
        "<map>.keys",
        "<builtin>.next",
        "<builtin>.type"
    ],
    "email.message_from_bytes": [
        "email.parser",
        "email.parser.BytesParser.__init__",
        "email.parser.BytesParser.parsebytes"
    ],
    "email.message_from_file": [
        "email.parser",
        "email.parser.Parser.parse",
        "email.parser.Parser.__init__"
    ],
    "email.message_from_binary_file": [
        "email.parser",
        "email.parser.BytesParser.__init__",
        "email.parser.BytesParser.parse"
    ],
    "pathlib._ignore_error": [
        "<builtin>.getattr"
    ],
    "pathlib._Flavour.parse_parts": [
        "<list>.reverse",
        "pathlib._WindowsFlavour.splitroot",
        "<list>.append",
        "<builtin>.reversed"
    ],
    "pathlib._WindowsFlavour.splitroot": [
        "pathlib._WindowsFlavour._split_extended_path",
        "<builtin>.len"
    ],
    "pathlib._WindowsFlavour._split_extended_path": [
        "<str>.startswith"
    ],
    "pathlib._WindowsFlavour.compile_pattern": [
        "fnmatch.translate",
        "re.compile"
    ],
    "pathlib._WindowsFlavour.resolve": [
        "ntpath.split",
        "nt._getfinalpathname",
        "<builtin>.str",
        "pathlib._WindowsFlavour._ext_to_normal",
        "<list>.append",
        "posixpath.split"
    ],
    "nt._getfinalpathname": [],
    "pathlib._WindowsFlavour._ext_to_normal": [
        "pathlib._WindowsFlavour._split_extended_path"
    ],
    "pathlib._WindowsFlavour.make_uri": [
        "urllib.parse.quote_from_bytes",
        "<builtin>.len"
    ],
    "pathlib._WindowsFlavour.gethomedir": [
        "<builtin>.RuntimeError",
        "pathlib._Flavour.parse_parts"
    ],
    "pathlib._PosixFlavour.splitroot": [
        "<builtin>.len"
    ],
    "pathlib._PosixFlavour.compile_pattern": [
        "fnmatch.translate",
        "re.compile"
    ],
    "pathlib._PosixFlavour.resolve": [
        "pathlib._PosixFlavour.resolve._resolve",
        "<builtin>.str"
    ],
    "pathlib._PosixFlavour.resolve._resolve": [
        "<str>.rpartition",
        "<builtin>.RuntimeError"
    ],
    "pathlib._PosixFlavour.make_uri": [
        "urllib.parse.quote_from_bytes",
        "<builtin>.bytes"
    ],
    "pathlib._PosixFlavour.gethomedir": [
        "<builtin>.RuntimeError"
    ],
    "pathlib._NormalAccessor.lchmod": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._NormalAccessor.link_to": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._Selector.select_from": [
        "pathlib._WildcardSelector._select_from",
        "pathlib._RecursiveWildcardSelector._select_from",
        "pathlib._PreciseSelector._select_from",
        "<builtin>.iter",
        "<builtin>.type"
    ],
    "pathlib._PreciseSelector._select_from": [
        "pathlib._WildcardSelector._select_from",
        "pathlib.Path._make_child_relpath",
        "pathlib._RecursiveWildcardSelector._select_from",
        "pathlib._PreciseSelector._select_from",
        "pathlib._TerminatingSelector._select_from"
    ],
    "pathlib._TerminatingSelector._select_from": [],
    "pathlib._RecursiveWildcardSelector._select_from": [
        "<builtin>.set",
        "pathlib._WildcardSelector._select_from",
        "pathlib._RecursiveWildcardSelector._select_from",
        "pathlib._PreciseSelector._select_from",
        "pathlib._RecursiveWildcardSelector._iterate_directories",
        "pathlib._TerminatingSelector._select_from"
    ],
    "pathlib._RecursiveWildcardSelector._iterate_directories": [
        "pathlib._RecursiveWildcardSelector._iterate_directories",
        "<builtin>.list",
        "pathlib.Path._make_child_relpath",
        "pathlib._ignore_error"
    ],
    "pathlib._WildcardSelector._select_from": [
        "pathlib._WildcardSelector._select_from",
        "pathlib.Path._make_child_relpath",
        "pathlib._RecursiveWildcardSelector._select_from",
        "pathlib._PreciseSelector._select_from",
        "<builtin>.list",
        "pathlib._TerminatingSelector._select_from",
        "pathlib._ignore_error"
    ],
    "pathlib._PathParents.__init__": [
        "<builtin>.type"
    ],
    "pathlib._PathParents.__len__": [
        "<builtin>.len"
    ],
    "pathlib._PathParents.__getitem__": [
        "<builtin>.len",
        "<builtin>.IndexError"
    ],
    "pathlib.PurePath.__new__": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath._from_parts": [],
    "pathlib.PurePath.__reduce__": [
        "<builtin>.tuple"
    ],
    "pathlib.PurePath._parse_args": [
        "<builtin>.TypeError",
        "os._fspath",
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.type"
    ],
    "pathlib.PurePath._make_child": [
        "pathlib.PurePath._from_parsed_parts",
        "pathlib.PurePath._parse_args"
    ],
    "pathlib.PurePath._from_parsed_parts": [],
    "pathlib.PurePath.__str__": [
        "pathlib.PurePath._format_parsed_parts"
    ],
    "pathlib.PurePath._format_parsed_parts": [],
    "pathlib.PurePath.__fspath__": [
        "<builtin>.str"
    ],
    "pathlib.PurePath.as_posix": [
        "<builtin>.str"
    ],
    "pathlib.PurePath.__bytes__": [
        "os._fscodec.fsdecode",
        "os._fscodec.fsencode"
    ],
    "pathlib.PurePath.__repr__": [
        "pathlib.PurePath.as_posix"
    ],
    "pathlib.PurePath.as_uri": [
        "pathlib.PurePath.is_absolute",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.is_absolute": [
        "<builtin>.bool"
    ],
    "pathlib.PurePath.__eq__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "pathlib.PurePath.__lt__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__le__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__gt__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__ge__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.name": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.suffix": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.stem": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.with_name": [
        "<builtin>.len",
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.with_suffix": [
        "<builtin>.len",
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.relative_to": [
        "<builtin>.TypeError",
        "<builtin>.str",
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.len",
        "pathlib.PurePath._parse_args",
        "pathlib.PurePath._format_parsed_parts",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.parts": [
        "<builtin>.tuple"
    ],
    "pathlib.PurePath.joinpath": [
        "pathlib.PurePath._make_child"
    ],
    "pathlib.PurePath.__truediv__": [
        "pathlib.PurePath._make_child"
    ],
    "pathlib.PurePath.__rtruediv__": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath.parent": [
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.len"
    ],
    "pathlib.PurePath.parents": [
        "pathlib._PathParents.__init__"
    ],
    "pathlib.PurePath.match": [
        "<builtin>.zip",
        "<builtin>.reversed",
        "<builtin>.len",
        "fnmatch.fnmatchcase",
        "<builtin>.ValueError"
    ],
    "pathlib.Path.__new__": [
        "<builtin>.NotImplementedError",
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.Path._make_child_relpath": [
        "pathlib.PurePath._from_parsed_parts"
    ],
    "pathlib.Path.__enter__": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path._raise_closed": [
        "<builtin>.ValueError"
    ],
    "pathlib.Path._raw_open": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.samefile": [
        "genericpath.samestat",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.stat": [],
    "pathlib.Path.iterdir": [
        "pathlib.Path._make_child_relpath",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.glob": [
        "pathlib._Selector.select_from",
        "<builtin>.NotImplementedError",
        "pathlib._make_selector",
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "pathlib.Path.rglob": [
        "pathlib._make_selector",
        "<builtin>.tuple",
        "<builtin>.NotImplementedError",
        "pathlib._Selector.select_from"
    ],
    "pathlib.Path.absolute": [
        "pathlib.PurePath.is_absolute",
        "pathlib.PurePath._from_parts",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.resolve": [
        "pathlib.Path.stat",
        "pathlib.Path._raise_closed",
        "<builtin>.str",
        "pathlib.PurePath._from_parts",
        "pathlib.Path.absolute"
    ],
    "pathlib.Path.owner": [
        "pathlib.Path.stat"
    ],
    "pathlib.Path.group": [
        "grp",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.open": [
        "_io.open",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.read_bytes": [
        "pathlib.Path.open"
    ],
    "pathlib.Path.read_text": [
        "pathlib.Path.open"
    ],
    "pathlib.Path.write_bytes": [
        "pathlib.Path.open",
        "<builtin>.memoryview"
    ],
    "pathlib.Path.write_text": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "pathlib.Path.open"
    ],
    "pathlib.Path.touch": [
        "pathlib.Path._raw_open",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.mkdir": [
        "pathlib.Path.is_dir",
        "pathlib.Path.mkdir",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.is_dir": [
        "pathlib.Path.stat",
        "stat.S_ISDIR",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.chmod": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.lchmod": [
        "pathlib._NormalAccessor.lchmod",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.unlink": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.rmdir": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.lstat": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.link_to": [
        "pathlib._NormalAccessor.link_to",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.rename": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.replace": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.symlink_to": [
        "pathlib._NormalAccessor.symlink",
        "pathlib.Path._raise_closed"
    ],
    "pathlib._NormalAccessor.symlink": [],
    "pathlib.Path.exists": [
        "pathlib.Path.stat",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.is_file": [
        "stat.S_ISREG",
        "pathlib.Path.stat",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.is_mount": [
        "pathlib.Path.is_dir",
        "pathlib.Path.exists",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_symlink": [
        "pathlib.Path.lstat",
        "stat.S_ISLNK",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.is_block_device": [
        "pathlib.Path.stat",
        "stat.S_ISBLK",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.is_char_device": [
        "stat.S_ISCHR",
        "pathlib.Path.stat",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.is_fifo": [
        "pathlib.Path.stat",
        "stat.S_ISFIFO",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.is_socket": [
        "stat.S_ISSOCK",
        "pathlib.Path.stat",
        "pathlib._ignore_error"
    ],
    "pathlib.Path.expanduser": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.WindowsPath.owner": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib.WindowsPath.group": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib.WindowsPath.is_mount": [
        "<builtin>.NotImplementedError"
    ],
    "configparser.NoOptionError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.InterpolationError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.InterpolationMissingOptionError.__init__": [
        "configparser.InterpolationError.__init__"
    ],
    "configparser.InterpolationDepthError.__init__": [
        "configparser.InterpolationError.__init__"
    ],
    "configparser.ParsingError.filename": [
        "warnings.warn"
    ],
    "configparser.BasicInterpolation.before_get": [
        "configparser.BasicInterpolation._interpolate_some"
    ],
    "configparser.BasicInterpolation._interpolate_some": [
        "configparser.RawConfigParser.get",
        "configparser.InterpolationMissingOptionError.__init__",
        "configparser.InterpolationDepthError.__init__",
        "configparser.InterpolationError.__init__",
        "configparser.RawConfigParser.optionxform",
        "configparser.BasicInterpolation._interpolate_some",
        "<list>.append"
    ],
    "configparser.BasicInterpolation.before_set": [
        "<builtin>.ValueError",
        "<str>.find"
    ],
    "configparser.ExtendedInterpolation.before_get": [
        "configparser.ExtendedInterpolation._interpolate_some"
    ],
    "configparser.ExtendedInterpolation._interpolate_some": [
        "configparser.InterpolationMissingOptionError.__init__",
        "configparser.ExtendedInterpolation._interpolate_some",
        "configparser.InterpolationDepthError.__init__",
        "configparser.InterpolationError.__init__",
        "<builtin>.len",
        "<builtin>.dict",
        "<list>.append"
    ],
    "configparser.ExtendedInterpolation.before_set": [
        "<builtin>.ValueError",
        "<str>.find"
    ],
    "configparser.LegacyInterpolation.before_get": [
        "configparser.InterpolationMissingOptionError.__init__",
        "configparser.InterpolationDepthError.__init__"
    ],
    "configparser.RawConfigParser.__init__": [
        "re.compile",
        "configparser.RawConfigParser._read_defaults",
        "re.escape",
        "configparser.ConverterMapping.__init__",
        "configparser.SectionProxy.__init__",
        "configparser.ConfigParser._read_defaults",
        "<builtin>.tuple"
    ],
    "configparser.ConverterMapping.__init__": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.dir"
    ],
    "configparser.RawConfigParser._read_defaults": [
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.ConfigParser._read_defaults": [
        "configparser.RawConfigParser.read_dict"
    ],
    "configparser.RawConfigParser.read_dict": [
        "configparser.DuplicateOptionError.__init__",
        "configparser.RawConfigParser.add_section",
        "<builtin>.str",
        "<builtin>.set",
        "configparser.RawConfigParser.optionxform",
        "configparser.ConfigParser.set",
        "configparser.ConfigParser.add_section",
        "<map>.items",
        "configparser.RawConfigParser.set"
    ],
    "configparser.RawConfigParser.add_section": [
        "configparser.DuplicateSectionError.__init__",
        "configparser.SectionProxy.__init__",
        "<builtin>.ValueError"
    ],
    "configparser.ConfigParser.add_section": [
        "configparser.RawConfigParser._validate_value_types",
        "<builtin>.super"
    ],
    "configparser.RawConfigParser._validate_value_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "configparser.RawConfigParser.set": [
        "configparser.RawConfigParser.optionxform",
        "configparser.NoSectionError.__init__",
        "configparser.Interpolation.before_set",
        "configparser.BasicInterpolation.before_set"
    ],
    "configparser.Interpolation.before_set": [],
    "configparser.ConfigParser.set": [
        "configparser.RawConfigParser._validate_value_types",
        "<builtin>.super"
    ],
    "configparser.RawConfigParser.options": [
        "<builtin>.list",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.RawConfigParser.read": [
        "os._fspath",
        "configparser.RawConfigParser._read",
        "<builtin>.isinstance",
        "<builtin>.open"
    ],
    "configparser.RawConfigParser.get": [
        "configparser.RawConfigParser._unify_values",
        "configparser.Interpolation.before_get",
        "configparser.RawConfigParser.optionxform",
        "configparser.NoOptionError.__init__",
        "configparser.BasicInterpolation.before_get"
    ],
    "configparser.RawConfigParser._unify_values": [
        "configparser.RawConfigParser.optionxform",
        "collections.ChainMap.__init__",
        "<builtin>.str",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.Interpolation.before_get": [],
    "configparser.RawConfigParser._get": [
        "configparser.RawConfigParser.get",
        "configparser.RawConfigParser._convert_to_boolean"
    ],
    "configparser.RawConfigParser._get_conv": [
        "configparser.RawConfigParser._get"
    ],
    "configparser.RawConfigParser.getint": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.getfloat": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.getboolean": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser._convert_to_boolean": [
        "<builtin>.ValueError",
        "<str>.lower"
    ],
    "configparser.RawConfigParser.popitem": [
        "configparser.RawConfigParser.sections"
    ],
    "configparser.RawConfigParser.has_option": [
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.write": [
        "configparser.RawConfigParser._write_section"
    ],
    "configparser.RawConfigParser._write_section": [
        "<builtin>.str",
        "configparser.Interpolation.before_write"
    ],
    "configparser.Interpolation.before_write": [],
    "configparser.RawConfigParser.remove_option": [
        "configparser.RawConfigParser.optionxform",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.RawConfigParser.__getitem__": [
        "configparser.RawConfigParser.has_section",
        "<builtin>.KeyError"
    ],
    "configparser.RawConfigParser.has_section": [],
    "configparser.RawConfigParser.__setitem__": [
        "configparser.RawConfigParser.read_dict"
    ],
    "configparser.RawConfigParser.__delitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.has_section",
        "configparser.RawConfigParser.remove_section",
        "<builtin>.ValueError"
    ],
    "configparser.RawConfigParser.remove_section": [],
    "configparser.RawConfigParser.__contains__": [
        "configparser.RawConfigParser.has_section"
    ],
    "configparser.RawConfigParser.__len__": [
        "<builtin>.len"
    ],
    "configparser.Interpolation.before_read": [],
    "configparser.SafeConfigParser.__init__": [
        "<builtin>.super",
        "warnings.warn"
    ],
    "configparser.SectionProxy.__getitem__": [
        "configparser.RawConfigParser.get",
        "configparser.RawConfigParser.has_option",
        "<builtin>.KeyError"
    ],
    "configparser.SectionProxy.__setitem__": [
        "configparser.ConfigParser.set",
        "configparser.RawConfigParser._validate_value_types",
        "configparser.RawConfigParser.set"
    ],
    "configparser.SectionProxy.__delitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.has_option",
        "configparser.RawConfigParser.remove_option"
    ],
    "configparser.SectionProxy.__contains__": [
        "configparser.RawConfigParser.has_option"
    ],
    "configparser.SectionProxy.__len__": [
        "configparser.SectionProxy._options",
        "<builtin>.len"
    ],
    "configparser.SectionProxy._options": [
        "configparser.RawConfigParser.defaults",
        "configparser.RawConfigParser.options"
    ],
    "configparser.RawConfigParser.defaults": [],
    "configparser.SectionProxy.__iter__": [
        "configparser.SectionProxy._options"
    ],
    "configparser.SectionProxy.get": [
        "configparser.RawConfigParser.get"
    ],
    "configparser.ConverterMapping.__setitem__": [
        "<builtin>.setattr",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "configparser.ConverterMapping.__delitem__": [
        "<builtin>.delattr",
        "<builtin>.KeyError"
    ],
    "configparser.ConverterMapping.__iter__": [
        "<builtin>.iter"
    ],
    "configparser.ConverterMapping.__len__": [
        "<builtin>.len"
    ],
    "importlib.abc.MetaPathFinder.find_module": [
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "importlib.abc.PathEntryFinder.find_loader": [
        "<builtin>.hasattr",
        "warnings.warn"
    ],
    "importlib.abc.Loader.load_module": [
        "<builtin>.hasattr"
    ],
    "importlib.abc.InspectLoader.get_code": [
        "importlib.abc.InspectLoader.get_source",
        "importlib.abc.InspectLoader.source_to_code"
    ],
    "importlib.abc.InspectLoader.get_source": [],
    "importlib.abc.InspectLoader.source_to_code": [
        "<builtin>.compile"
    ],
    "importlib.abc.ExecutionLoader.get_code": [
        "importlib.abc.InspectLoader.get_source",
        "importlib.abc.InspectLoader.source_to_code",
        "importlib.abc.ExecutionLoader.get_filename"
    ],
    "importlib.abc.ExecutionLoader.get_filename": [],
    "importlib.abc.SourceLoader.path_mtime": [
        "<builtin>.int",
        "importlib.abc.SourceLoader.path_stats"
    ],
    "importlib.abc.SourceLoader.path_stats": [
        "importlib.abc.SourceLoader.path_mtime"
    ],
    "multiprocessing.dummy.DummyProcess.exitcode": [
        "threading.Thread.is_alive"
    ],
    "multiprocessing.dummy.active_children": [
        "threading.current_thread",
        "<builtin>.list"
    ],
    "multiprocessing.dummy.Namespace.__repr__": [
        "<builtin>.list",
        "<list>.sort",
        "<list>.append"
    ],
    "multiprocessing.dummy.Value.__repr__": [
        "<builtin>.type"
    ],
    "multiprocessing.dummy.Pool": [
        "multiprocessing.pool.ThreadPool.__init__",
        "multiprocessing.pool"
    ],
    "multiprocessing.dummy.connection.Listener.__init__": [
        "queue.Queue.__init__"
    ],
    "multiprocessing.dummy.connection.Listener.accept": [
        "multiprocessing.dummy.connection.Connection.__init__",
        "queue.Queue.get"
    ],
    "multiprocessing.dummy.connection.Connection.__init__": [],
    "multiprocessing.dummy.connection.Listener.__exit__": [
        "multiprocessing.dummy.connection.Listener.close"
    ],
    "multiprocessing.dummy.connection.Listener.close": [],
    "multiprocessing.dummy.connection.Client": [
        "multiprocessing.dummy.connection.Connection.__init__",
        "queue.Queue.__init__"
    ],
    "multiprocessing.dummy.connection.Pipe": [
        "multiprocessing.dummy.connection.Connection.__init__",
        "queue.Queue.__init__"
    ],
    "multiprocessing.dummy.connection.Connection.poll": [
        "queue.Queue.qsize"
    ],
    "queue.Queue.qsize": [],
    "multiprocessing.dummy.connection.Connection.__exit__": [
        "multiprocessing.dummy.connection.Connection.close"
    ],
    "multiprocessing.dummy.connection.Connection.close": [],
    "email.generator.Generator._handle_multipart": [
        "email.generator.BytesGenerator.write",
        "email.generator.Generator._make_boundary",
        "email.generator.Generator.write",
        "email.generator.Generator.clone",
        "email.generator.Generator._write_lines",
        "<builtin>.isinstance",
        "email.generator.Generator._new_buffer",
        "<list>.append",
        "<list>.pop",
        "email.generator.BytesGenerator._new_buffer"
    ],
    "email.generator.Generator.clone": [],
    "email.generator.Generator._make_boundary": [
        "re.escape",
        "random.Random.randrange",
        "email.generator.Generator._compile_re",
        "<builtin>.str",
        "email.generator.BytesGenerator._compile_re"
    ],
    "email.generator.BytesGenerator._compile_re": [
        "re.compile"
    ],
    "email.generator.Generator._compile_re": [
        "re.compile"
    ],
    "email.generator.Generator._handle_multipart_signed": [
        "email.generator.Generator._handle_multipart"
    ],
    "email.generator.Generator._handle_message_delivery_status": [
        "email.generator.Generator.clone",
        "email.generator.Generator._new_buffer",
        "email.generator.BytesGenerator._new_buffer",
        "<list>.append"
    ],
    "email.generator.Generator._handle_message": [
        "email.generator.Generator.clone",
        "email.generator.Generator._new_buffer",
        "<builtin>.isinstance",
        "email.generator.Generator._encode",
        "email.generator.BytesGenerator._encode",
        "email.generator.BytesGenerator._new_buffer"
    ],
    "email.generator.DecodedGenerator.__init__": [
        "email.generator.Generator.__init__"
    ],
    "email.generator.DecodedGenerator._dispatch": [
        "<builtin>.print"
    ],
    "email.policy.EmailPolicy.fold": [
        "email.policy.EmailPolicy._fold"
    ],
    "email.policy.EmailPolicy._fold": [
        "email.headerregistry.HeaderRegistry.__init__",
        "<builtin>.len",
        "<builtin>.any",
        "<builtin>.hasattr",
        "email.utils._has_surrogates"
    ],
    "email.policy.EmailPolicy.fold_binary": [
        "email.policy.EmailPolicy._fold"
    ],
    "email.headerregistry.Address.__init__": [
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "email._header_value_parser.get_addr_spec"
    ],
    "email._header_value_parser.get_addr_spec": [
        "email._header_value_parser.get_local_part",
        "<list>.append",
        "email._header_value_parser.get_domain"
    ],
    "email._header_value_parser.get_local_part": [
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.str",
        "email._header_value_parser.get_obs_local_part",
        "email._header_value_parser.get_word",
        "<list>.append",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_dot_atom"
    ],
    "email._header_value_parser.get_cfws": [
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_comment"
    ],
    "email._header_value_parser.get_comment": [
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_qp_ctext",
        "<list>.append",
        "email._header_value_parser.get_comment"
    ],
    "email._header_value_parser.get_qp_ctext": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser._get_ptext_to_endchars": [
        "<list>.append",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email._header_value_parser._validate_xtext": [
        "email.utils._has_surrogates",
        "email.errors.NonPrintableDefect.__init__"
    ],
    "email._header_value_parser.get_fws": [
        "<str>.lstrip",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_dot_atom": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.get_dot_atom_text"
    ],
    "email._header_value_parser.get_dot_atom_text": [
        "email._header_value_parser.get_atext"
    ],
    "email._header_value_parser.get_atext": [
        "email._header_value_parser._validate_xtext",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_encoded_word": [
        "<list>.extend",
        "<builtin>.len",
        "email._encoded_words.decode",
        "<list>.append",
        "email._header_value_parser._validate_xtext",
        "email._header_value_parser.get_fws",
        "<str>.startswith"
    ],
    "email._encoded_words.decode": [],
    "email._header_value_parser.get_word": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.get_atom"
    ],
    "email._header_value_parser.get_atom": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.get_atext"
    ],
    "email._header_value_parser.get_quoted_string": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_bare_quoted_string"
    ],
    "email._header_value_parser.get_bare_quoted_string": [
        "email._header_value_parser.get_qcontent",
        "email._header_value_parser.get_encoded_word",
        "<list>.append",
        "email._header_value_parser.get_fws"
    ],
    "email._header_value_parser.get_qcontent": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.TokenList.__init__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.get_obs_local_part": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_word",
        "<list>.append"
    ],
    "email._header_value_parser.get_domain": [
        "email._header_value_parser.get_atom",
        "email._header_value_parser.get_domain_literal",
        "<list>.append",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_dot_atom"
    ],
    "email._header_value_parser.get_domain_literal": [
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_dtext",
        "email._header_value_parser._check_for_early_dl_end"
    ],
    "email._header_value_parser._check_for_early_dl_end": [],
    "email._header_value_parser.get_dtext": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email.headerregistry.Address.addr_spec": [
        "email._header_value_parser.quote_string",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "email._header_value_parser.quote_string": [
        "<builtin>.str"
    ],
    "email.headerregistry.Address.__str__": [
        "email._header_value_parser.quote_string",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "email.headerregistry.Address.__eq__": [
        "<builtin>.type"
    ],
    "email.headerregistry.Group.__init__": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.Group.__str__": [
        "email._header_value_parser.quote_string",
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "email.headerregistry.Group.__eq__": [
        "<builtin>.type"
    ],
    "email.headerregistry.BaseHeader.__new__": [
        "email.utils._sanitize",
        "email.utils._has_surrogates"
    ],
    "email.utils._sanitize": [],
    "email.headerregistry.BaseHeader.defects": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.BaseHeader.__reduce__": [
        "<builtin>.str"
    ],
    "email.headerregistry.BaseHeader.fold": [
        "email._header_value_parser.TokenList.fold"
    ],
    "email._header_value_parser.TokenList.fold": [
        "email._header_value_parser._refold_parse_tree"
    ],
    "email._header_value_parser._refold_parse_tree": [
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.len",
        "email._header_value_parser._fold_as_ew",
        "<builtin>.any",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<list>.append",
        "email._header_value_parser._steal_trailing_WSP_if_exists",
        "email._header_value_parser._fold_mime_parameters",
        "<builtin>.list"
    ],
    "email._header_value_parser._fold_mime_parameters": [
        "email._header_value_parser.quote_string",
        "urllib.parse.quote",
        "<builtin>.str",
        "<builtin>.len",
        "<list>.append",
        "email.utils._has_surrogates"
    ],
    "email._header_value_parser._steal_trailing_WSP_if_exists": [],
    "email._header_value_parser._fold_as_ew": [
        "email._encoded_words.encode",
        "<builtin>.str",
        "<builtin>.len",
        "<list>.append",
        "email._header_value_parser.get_unstructured"
    ],
    "email._header_value_parser.get_unstructured": [
        "<str>.partition",
        "email._header_value_parser._validate_xtext",
        "email._header_value_parser.get_fws",
        "<str>.startswith",
        "email._header_value_parser.get_encoded_word"
    ],
    "email._encoded_words.encode": [],
    "email.headerregistry._reconstruct_header": [
        "<builtin>.type"
    ],
    "email.headerregistry.UnstructuredHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.DateHeader.parse": [
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.isinstance",
        "email.utils.format_datetime",
        "email.utils.parsedate_to_datetime"
    ],
    "email.headerregistry.DateHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.AddressHeader.value_parser": [
        "email._header_value_parser.get_address_list"
    ],
    "email._header_value_parser.get_address_list": [
        "email._header_value_parser.get_address",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_invalid_mailbox",
        "<list>.append"
    ],
    "email._header_value_parser.get_address": [
        "email._header_value_parser.get_group",
        "email._header_value_parser.get_mailbox"
    ],
    "email._header_value_parser.get_group": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_group_list",
        "<list>.append",
        "email._header_value_parser.get_display_name"
    ],
    "email._header_value_parser.get_display_name": [
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.get_phrase": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_word",
        "<list>.append"
    ],
    "email._header_value_parser.get_group_list": [
        "email._header_value_parser.get_mailbox_list",
        "email._header_value_parser.get_cfws",
        "<list>.append",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_mailbox_list": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_invalid_mailbox",
        "<list>.append",
        "email._header_value_parser.get_mailbox"
    ],
    "email._header_value_parser.get_mailbox": [
        "<builtin>.any",
        "<builtin>.isinstance",
        "email._header_value_parser.get_addr_spec",
        "email._header_value_parser.get_name_addr"
    ],
    "email._header_value_parser.get_name_addr": [
        "email._header_value_parser.get_angle_addr",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_display_name"
    ],
    "email._header_value_parser.get_angle_addr": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_obs_route",
        "<list>.append",
        "email._header_value_parser.get_addr_spec"
    ],
    "email._header_value_parser.get_obs_route": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_domain"
    ],
    "email._header_value_parser.get_invalid_mailbox": [
        "email._header_value_parser.get_phrase"
    ],
    "email.headerregistry.AddressHeader.parse": [
        "email.headerregistry.Group.__init__",
        "<builtin>.str",
        "email.headerregistry.AddressHeader.value_parser",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "email.headerregistry.Address.__init__",
        "<builtin>.list"
    ],
    "email.headerregistry.AddressHeader.init": [
        "<builtin>.super",
        "<builtin>.tuple"
    ],
    "email.headerregistry.AddressHeader.addresses": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.SingleAddressHeader.address": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "email.headerregistry.MIMEVersionHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.MIMEVersionHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.ParameterizedMIMEHeader.parse": [
        "email.utils._sanitize",
        "<builtin>.str"
    ],
    "email.headerregistry.ParameterizedMIMEHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.ContentTypeHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.ContentDispositionHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.MessageIDHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.HeaderRegistry.__getitem__": [
        "<map>.get",
        "<builtin>.type"
    ],
    "email._header_value_parser.TokenList.__str__": [
        "<builtin>.str"
    ],
    "email._header_value_parser.TokenList.__repr__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.TokenList.all_defects": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.TokenList.as_ew_allowed": [
        "<builtin>.all"
    ],
    "email._header_value_parser.TokenList.comments": [
        "<list>.extend"
    ],
    "email._header_value_parser.TokenList.pprint": [
        "email._header_value_parser.TokenList.ppstr",
        "<builtin>.print"
    ],
    "email._header_value_parser.TokenList.ppstr": [
        "email._header_value_parser.TokenList._pp"
    ],
    "email._header_value_parser.TokenList._pp": [
        "<builtin>.hasattr"
    ],
    "email._header_value_parser.QuotedString.quoted_value": [
        "<list>.append"
    ],
    "email._header_value_parser.BareQuotedString.__str__": [
        "email._header_value_parser.quote_string",
        "<builtin>.str"
    ],
    "email._header_value_parser.BareQuotedString.value": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment.__str__": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.Comment.quote": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment.content": [
        "<builtin>.str"
    ],
    "email._header_value_parser.AddressList.mailboxes": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.AddressList.all_mailboxes": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.NameAddr.display_name": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AngleAddr.addr_spec": [
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.Domain.domain": [
        "<builtin>.super"
    ],
    "email._header_value_parser.AddrSpec.domain": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AddrSpec.value": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AddrSpec.addr_spec": [
        "email._header_value_parser.quote_string",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "email._header_value_parser.DisplayName.display_name": [
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.len"
    ],
    "email._header_value_parser.DisplayName.value": [
        "email._header_value_parser.quote_string",
        "<builtin>.super",
        "<builtin>.len"
    ],
    "email._header_value_parser.LocalPart.local_part": [
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.isinstance",
        "<list>.append"
    ],
    "email._header_value_parser.DomainLiteral.domain": [
        "<builtin>.super"
    ],
    "email._header_value_parser.MimeParameters.params": [
        "urllib.parse.unquote",
        "operator.itemgetter.__init__",
        "<builtin>.len",
        "<builtin>.sorted",
        "urllib.parse.unquote_to_bytes",
        "<map>.items"
    ],
    "email._header_value_parser.MimeParameters.__str__": [
        "<list>.append"
    ],
    "email._header_value_parser.ParameterizedHeaderValue.params": [
        "<builtin>.reversed"
    ],
    "email._header_value_parser.MsgID.fold": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Terminal.__new__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.__repr__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.pprint": [
        "<builtin>.print"
    ],
    "email._header_value_parser.Terminal.all_defects": [
        "<builtin>.list"
    ],
    "email._header_value_parser.Terminal.__getnewargs__": [
        "<builtin>.str"
    ],
    "email._header_value_parser.get_no_fold_literal": [
        "email._header_value_parser.get_dtext"
    ],
    "email._header_value_parser.get_msg_id": [
        "email._header_value_parser.get_no_fold_literal",
        "email._header_value_parser.get_dot_atom_text",
        "email._header_value_parser.get_domain",
        "email._header_value_parser.get_obs_local_part",
        "<list>.append",
        "email._header_value_parser.get_cfws"
    ],
    "email._header_value_parser.parse_message_id": [
        "email._header_value_parser.get_msg_id",
        "email._header_value_parser.get_unstructured",
        "<list>.append"
    ],
    "email._header_value_parser.parse_mime_version": [
        "<str>.isdigit",
        "email._header_value_parser.get_cfws",
        "<builtin>.int",
        "<list>.append"
    ],
    "<str>.isdigit": [],
    "email._header_value_parser.get_invalid_parameter": [
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.get_ttext": [
        "email._header_value_parser._validate_xtext",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_token": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_ttext"
    ],
    "email._header_value_parser.get_attrtext": [
        "email._header_value_parser._validate_xtext",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_attribute": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_attrtext"
    ],
    "email._header_value_parser.get_extended_attrtext": [
        "email._header_value_parser._validate_xtext",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_extended_attribute": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_extended_attrtext"
    ],
    "email._header_value_parser.get_section": [
        "<builtin>.int",
        "<list>.append"
    ],
    "email._header_value_parser.get_value": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_extended_attribute",
        "email._header_value_parser.get_quoted_string"
    ],
    "email._header_value_parser.get_parameter": [
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.get_attrtext",
        "email._header_value_parser.get_section",
        "email._header_value_parser.get_attribute",
        "email._header_value_parser.get_qcontent",
        "email._header_value_parser.get_extended_attrtext",
        "<list>.append",
        "email._header_value_parser.get_value",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_cfws"
    ],
    "email._header_value_parser.parse_mime_parameters": [
        "email._header_value_parser.get_cfws",
        "<list>.append",
        "email._header_value_parser.get_invalid_parameter",
        "email._header_value_parser.get_parameter"
    ],
    "email._header_value_parser._find_mime_parameters": [
        "email._header_value_parser.parse_mime_parameters",
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.parse_content_type_header": [
        "email._header_value_parser.parse_mime_parameters",
        "email._header_value_parser._find_mime_parameters",
        "<list>.append",
        "email._header_value_parser.get_token"
    ],
    "email._header_value_parser.parse_content_disposition_header": [
        "email._header_value_parser.parse_mime_parameters",
        "email._header_value_parser._find_mime_parameters",
        "<list>.append",
        "email._header_value_parser.get_token"
    ],
    "email._header_value_parser.parse_content_transfer_encoding_header": [
        "email._header_value_parser.get_phrase",
        "<list>.append",
        "email._header_value_parser.get_token"
    ],
    "email.contentmanager.get_and_fixup_unknown_message_content": [
        "<builtin>.bytes"
    ],
    "email.contentmanager._prepare_set": [
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "email.contentmanager._encode_base64": [
        "<list>.append",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email.contentmanager._encode_text": [
        "<builtin>.max",
        "<builtin>.len",
        "email.quoprimime.body_encode",
        "email.contentmanager._encode_text.normal_body",
        "email.contentmanager._encode_text.embedded_body"
    ],
    "email.contentmanager._encode_text.normal_body": [],
    "email.contentmanager._encode_text.embedded_body": [],
    "email.contentmanager.set_text_content": [
        "email.contentmanager._prepare_set",
        "email.contentmanager._encode_text",
        "email.contentmanager._finalize_set"
    ],
    "email.contentmanager._finalize_set": [],
    "email.contentmanager.set_message_content": [
        "email.contentmanager._prepare_set",
        "email.contentmanager._finalize_set",
        "<builtin>.ValueError"
    ],
    "email.contentmanager.set_bytes_content": [
        "email.contentmanager._prepare_set",
        "email.contentmanager._encode_base64",
        "email.contentmanager._finalize_set"
    ]
}