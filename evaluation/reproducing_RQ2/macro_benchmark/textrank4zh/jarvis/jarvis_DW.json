{
    "textrank4zh.util": [
        "textrank4zh.util.AttrDict",
        "networkx",
        "os",
        "__future__",
        "math",
        "numpy"
    ],
    "__future__": [
        "__future__._Feature.__init__",
        "__future__._Feature"
    ],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "os": [
        "os._AddedDllDirectory",
        "os._Environ.__init__",
        "os._fscodec",
        "<builtin>.ImportError",
        "abc",
        "os.PathLike",
        "<builtin>.globals",
        "posixpath",
        "os._add",
        "stat",
        "ntpath",
        "os._Environ",
        "os._createenviron",
        "os._wrap_close",
        "os._get_exports_list",
        "os._exists",
        "<builtin>.set"
    ],
    "abc": [
        "abc.ABC",
        "abc.abstractproperty",
        "abc.abstractclassmethod",
        "abc.abstractstaticmethod",
        "_py_abc"
    ],
    "abc.abstractclassmethod": [],
    "abc.abstractstaticmethod": [],
    "abc.abstractproperty": [],
    "_py_abc": [
        "_weakrefset",
        "_py_abc.ABCMeta"
    ],
    "_weakrefset": [
        "_weakrefset._IterationGuard",
        "_weakrefset.WeakSet"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset.WeakSet": [],
    "_py_abc.ABCMeta": [],
    "abc.ABC": [],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "<builtin>.hasattr",
        "stat",
        "genericpath",
        "os"
    ],
    "genericpath": [
        "stat",
        "os"
    ],
    "<builtin>.hasattr": [],
    "os._get_exports_list": [
        "<builtin>.dir",
        "<builtin>.list"
    ],
    "<builtin>.list": [],
    "<builtin>.dir": [],
    "posixpath": [
        "stat",
        "genericpath",
        "os"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "<builtin>.globals": [],
    "<builtin>.set": [],
    "os._add": [],
    "os._Environ": [],
    "os._createenviron": [
        "os._createenviron.encodekey",
        "os._Environ.__init__"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.type": [],
    "<builtin>.TypeError": [],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os._wrap_close": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "<builtin>.classmethod": [],
    "os._AddedDllDirectory": [],
    "math": [],
    "networkx": [
        "networkx.classes",
        "networkx.convert",
        "networkx.linalg",
        "networkx.generators",
        "networkx.relabel",
        "networkx.readwrite",
        "networkx.algorithms",
        "networkx.utils",
        "networkx.exception",
        "networkx.drawing",
        "networkx.classes.filters",
        "networkx.convert_matrix",
        "networkx.lazy_imports"
    ],
    "networkx.lazy_imports": [
        "networkx.lazy_imports.DelayedImportErrorModule",
        "os",
        "inspect",
        "importlib",
        "importlib.util",
        "types"
    ],
    "importlib": [
        "warnings",
        "types"
    ],
    "types": [
        "types._GeneratorWrapper",
        "types._c",
        "types._g",
        "types._cell_factory",
        "types._C",
        "types.DynamicClassAttribute",
        "<builtin>.globals",
        "<builtin>.object",
        "types._ag",
        "<builtin>.type"
    ],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "<builtin>.object": [],
    "types.DynamicClassAttribute": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "warnings": [
        "warnings.WarningMessage",
        "warnings.simplefilter",
        "<builtin>.hasattr",
        "warnings.catch_warnings",
        "warnings._OptionError",
        "warnings.filterwarnings",
        "warnings._processoptions"
    ],
    "warnings._OptionError": [],
    "warnings.WarningMessage": [],
    "warnings.catch_warnings": [],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "re",
        "<builtin>.len",
        "warnings._getcategory",
        "<builtin>.int",
        "re.escape",
        "warnings._getaction",
        "warnings.filterwarnings"
    ],
    "<builtin>.len": [],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.issubclass",
        "<builtin>.getattr",
        "<builtin>.__import__"
    ],
    "<builtin>.__import__": [],
    "<builtin>.getattr": [],
    "<builtin>.issubclass": [],
    "re": [
        "functools.lru_cache.decorating_function",
        "sre_compile",
        "enum",
        "<builtin>.globals",
        "copyreg.pickle",
        "re.Scanner",
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.type",
        "sre_parse",
        "functools.lru_cache",
        "re.RegexFlag",
        "<builtin>.chr",
        "functools",
        "copyreg",
        "sre_compile.compile"
    ],
    "enum": [
        "enum._EnumDict",
        "enum.EnumMeta",
        "enum.auto",
        "<builtin>.object",
        "enum.Flag",
        "enum.IntFlag",
        "enum.IntEnum",
        "types",
        "enum.Enum"
    ],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum.EnumMeta": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "<builtin>.classmethod",
        "types.DynamicClassAttribute.__init__"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "<builtin>.bool": [],
    "enum.IntEnum": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple",
        "sre_constants",
        "sre_parse"
    ],
    "sre_parse": [
        "sre_parse.Verbose",
        "<builtin>.frozenset",
        "sre_parse.State",
        "sre_parse.Tokenizer",
        "sre_constants",
        "sre_parse.SubPattern"
    ],
    "sre_constants": [
        "sre_constants._makecodes",
        "sre_constants._NamedIntConstant",
        "sre_constants.error"
    ],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._makecodes": [
        "<str>.strip",
        "<str>.split",
        "<builtin>.enumerate",
        "<builtin>.globals"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.enumerate": [],
    "<builtin>.frozenset": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.tuple": [],
    "functools": [
        "functools._HashedSeq",
        "functools.singledispatchmethod",
        "functools.partialmethod",
        "abc",
        "reprlib",
        "collections",
        "functools.cached_property",
        "<builtin>.object",
        "collections.namedtuple",
        "functools.partial"
    ],
    "collections": [
        "collections._OrderedDictItemsView",
        "collections.UserDict",
        "collections._OrderedDictValuesView",
        "keyword",
        "collections._OrderedDictKeysView",
        "operator",
        "reprlib",
        "collections.Counter",
        "collections.ChainMap",
        "collections.UserList",
        "collections.UserString",
        "heapq",
        "collections.OrderedDict",
        "collections._Link"
    ],
    "operator": [
        "operator.methodcaller",
        "operator.attrgetter",
        "operator.itemgetter"
    ],
    "operator.attrgetter": [],
    "operator.itemgetter": [],
    "operator.methodcaller": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "heapq": [
        "_heapq"
    ],
    "_heapq": [],
    "reprlib": [
        "reprlib.Repr.__init__",
        "reprlib.Repr"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictValuesView": [],
    "collections._Link": [],
    "collections.OrderedDict": [
        "<builtin>.object",
        "reprlib.recursive_repr",
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.property",
        "reprlib.recursive_repr",
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.UserList": [],
    "collections.UserString": [],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.ValueError",
        "<builtin>.tuple",
        "<str>.split",
        "_collections._tuplegetter",
        "<builtin>.set",
        "<builtin>.classmethod",
        "<builtin>.map",
        "<builtin>.repr",
        "<builtin>.type",
        "<str>.replace",
        "<builtin>.zip",
        "<builtin>.exec",
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.str",
        "<builtin>.dict",
        "<str>.join",
        "<builtin>.isinstance",
        "<builtin>.reversed",
        "collections.<lambda1>",
        "<builtin>.TypeError",
        "<builtin>.enumerate"
    ],
    "<builtin>.map": [],
    "<builtin>.str": [],
    "<builtin>.ValueError": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<builtin>.repr": [],
    "<str>.join": [],
    "<builtin>.exec": [],
    "_collections._tuplegetter": [],
    "collections.<lambda1>": [
        "<builtin>.property",
        "operator.itemgetter.__init__"
    ],
    "operator.itemgetter.__init__": [],
    "functools._HashedSeq": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [],
    "re.RegexFlag": [],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile._code",
        "<builtin>.print",
        "<map>.items",
        "sre_parse.parse",
        "sre_compile.isstring",
        "<builtin>.tuple",
        "sre_compile.dis"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse._parse_sub",
        "sre_parse.SubPattern.dump",
        "sre_parse.Tokenizer.seek",
        "sre_parse.Tokenizer.error",
        "sre_parse.State.__init__",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.fix_flags"
    ],
    "sre_parse.Tokenizer.__init__": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "sre_parse.Tokenizer.__next": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "<builtin>.len",
        "sre_parse.SubPattern.append",
        "sre_parse.Tokenizer.tell",
        "sre_parse.Tokenizer.match",
        "sre_parse._parse",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse._parse": [
        "sre_parse.State.checklookbehindgroup",
        "<builtin>.AssertionError",
        "<builtin>.range",
        "sre_parse._class_escape",
        "<map>.get",
        "sre_parse._parse_flags",
        "sre_parse._parse_sub",
        "sre_parse.State.opengroup",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.State.checkgroup",
        "sre_parse._escape",
        "warnings",
        "sre_parse.SubPattern.__init__",
        "<builtin>.OverflowError",
        "sre_parse.Tokenizer.match",
        "<builtin>.int",
        "sre_parse._parse",
        "sre_parse._uniq",
        "sre_parse.Tokenizer.get",
        "warnings.warn",
        "<str>.isidentifier",
        "sre_parse.SubPattern.append",
        "<builtin>.len",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.seek",
        "sre_parse.State.closegroup",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "<builtin>.AssertionError": [],
    "sre_parse.SubPattern.append": [],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse._parse_flags": [
        "sre_parse.Tokenizer.get",
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "warnings.warn": [
        "warnings.warn_explicit",
        "warnings._next_external_frame",
        "<builtin>.issubclass",
        "warnings._is_internal_frame",
        "<builtin>.isinstance",
        "<str>.format",
        "<builtin>.type",
        "<builtin>.range",
        "<builtin>.TypeError"
    ],
    "<str>.format": [],
    "warnings._is_internal_frame": [],
    "<builtin>.range": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "linecache",
        "linecache.getlines",
        "warnings.WarningMessage.__init__",
        "<builtin>.issubclass",
        "<builtin>.int",
        "<builtin>.str",
        "<builtin>.isinstance",
        "<map>.clear",
        "<builtin>.RuntimeError",
        "<map>.get",
        "warnings._showwarnmsg"
    ],
    "<builtin>.int": [],
    "<map>.get": [],
    "<map>.clear": [],
    "linecache": [
        "tokenize",
        "functools",
        "os"
    ],
    "tokenize": [
        "re",
        "tokenize._all_string_prefixes",
        "<builtin>.set",
        "tokenize.TokenInfo",
        "tokenize.maybe",
        "<builtin>.map",
        "codecs",
        "tokenize.StopTokenizing",
        "<builtin>.any",
        "collections",
        "tokenize.TokenError",
        "tokenize.Untokenizer",
        "re.compile",
        "io",
        "tokenize.group",
        "collections.namedtuple",
        "<builtin>.sorted",
        "token"
    ],
    "codecs": [
        "codecs.StreamRecoder",
        "codecs.IncrementalDecoder",
        "codecs.StreamReader",
        "codecs.BufferedIncrementalDecoder",
        "encodings",
        "codecs.BufferedIncrementalEncoder",
        "codecs.StreamWriter",
        "<builtin>.SystemError",
        "codecs.CodecInfo",
        "codecs.StreamReaderWriter",
        "codecs.IncrementalEncoder",
        "codecs.Codec"
    ],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.Codec": [],
    "codecs.IncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.IncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.StreamWriter": [],
    "codecs.StreamReader": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamRecoder": [],
    "encodings": [
        "codecs",
        "encodings.CodecRegistryError"
    ],
    "encodings.CodecRegistryError": [],
    "io": [
        "io.TextIOBase",
        "io.BufferedIOBase",
        "abc",
        "io.IOBase",
        "io.RawIOBase"
    ],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "token": [
        "<builtin>.isinstance",
        "<builtin>.globals"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "sre_compile.isstring",
        "<builtin>.iter",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.next",
        "sre_compile.compile"
    ],
    "<str>.replace": [],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "<builtin>.any": [],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "linecache.getlines": [
        "linecache.clearcache",
        "<builtin>.len",
        "linecache.updatecache"
    ],
    "linecache.updatecache": [
        "<str>.startswith",
        "<str>.endswith",
        "ntpath.isabs",
        "<builtin>.len",
        "ntpath.join",
        "posixpath.join",
        "tokenize.open",
        "linecache.lazycache",
        "posixpath.isabs"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "linecache.lazycache": [
        "<str>.startswith",
        "<str>.endswith",
        "<builtin>.len",
        "<builtin>.getattr"
    ],
    "ntpath.isabs": [
        "<str>.startswith",
        "<builtin>.len",
        "os._fspath",
        "<builtin>.isinstance",
        "<str>.replace",
        "ntpath._get_bothseps",
        "ntpath.splitdrive"
    ],
    "os._fspath": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "ntpath.splitdrive": [
        "<str>.find",
        "<builtin>.len",
        "os._fspath",
        "<builtin>.isinstance",
        "<str>.replace"
    ],
    "<str>.find": [],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "<str>.startswith",
        "posixpath._get_sep"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "ntpath.join": [
        "genericpath._check_arg_types",
        "<builtin>.map",
        "os._fspath",
        "<builtin>.isinstance",
        "ntpath.splitdrive"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "posixpath.join": [
        "<str>.endswith",
        "genericpath._check_arg_types",
        "<builtin>.map",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "tokenize.open": [
        "_io.TextIOWrapper",
        "tokenize.detect_encoding",
        "builtins.open"
    ],
    "builtins.open": [],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.read_or_stop",
        "tokenize.detect_encoding.find_cookie"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "<builtin>.SyntaxError",
        "tokenize._get_normal_name"
    ],
    "<builtin>.SyntaxError": [],
    "tokenize._get_normal_name": [],
    "_io.TextIOWrapper": [],
    "linecache.clearcache": [],
    "<builtin>.RuntimeError": [],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "linecache.getline",
        "linecache",
        "tracemalloc",
        "<str>.strip"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [
        "tracemalloc.Filter",
        "linecache",
        "tracemalloc.DomainFilter",
        "fnmatch",
        "tracemalloc.Traceback",
        "posixpath",
        "tracemalloc.Frame",
        "tracemalloc.Trace",
        "pickle",
        "tracemalloc.BaseFilter",
        "collections.abc",
        "tracemalloc.Snapshot",
        "tracemalloc.Statistic",
        "functools",
        "tracemalloc.StatisticDiff",
        "tracemalloc._Traces"
    ],
    "collections.abc": [
        "collections.abc"
    ],
    "fnmatch": [
        "re",
        "functools.lru_cache.decorating_function",
        "os",
        "posixpath",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "functools"
    ],
    "functools.lru_cache": [
        "functools.update_wrapper",
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "functools._lru_cache_wrapper"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object",
        "_thread.RLock"
    ],
    "_thread.RLock": [],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key"
    ],
    "functools._make_key": [
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.len",
        "functools._HashedSeq.__init__"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "pickle": [
        "_pickle",
        "codecs",
        "pickle.PickleError",
        "functools",
        "re",
        "re.match",
        "pickle._Framer",
        "_compat_pickle",
        "pickle.PicklingError",
        "pickle._Pickler",
        "pickle._Stop",
        "copyreg",
        "types",
        "<builtin>.dir",
        "struct",
        "pickle._Unframer",
        "io",
        "pickle._Unpickler",
        "pickle.UnpicklingError"
    ],
    "copyreg": [],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "_compat_pickle": [
        "<builtin>.dict",
        "<map>.update",
        "<map>.items",
        "<builtin>.len"
    ],
    "<map>.items": [],
    "<map>.update": [],
    "_pickle": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "re.match": [
        "re._compile"
    ],
    "pickle._Framer": [],
    "pickle._Unframer": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Unpickler": [],
    "tracemalloc.Statistic": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "<str>.isidentifier": [],
    "sre_parse.State.checklookbehindgroup": [
        "sre_parse.State.checkgroup",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.State.checkgroup": [],
    "sre_parse.State.opengroup": [
        "sre_constants.error.__init__",
        "<map>.get"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "<builtin>.super": [],
    "sre_parse.State.closegroup": [],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "<builtin>.OverflowError": [],
    "sre_parse._class_escape": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.getwhile",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.match",
        "<builtin>.int",
        "unicodedata",
        "<builtin>.ord",
        "<map>.get",
        "<builtin>.chr"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.range"
    ],
    "unicodedata": [],
    "<builtin>.ord": [],
    "sre_parse._uniq": [
        "<builtin>.list"
    ],
    "sre_parse._escape": [
        "sre_parse.State.checklookbehindgroup",
        "sre_parse.Tokenizer.get",
        "<builtin>.len",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.getwhile",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.match",
        "<builtin>.int",
        "unicodedata",
        "<builtin>.ord",
        "<map>.get",
        "sre_parse.State.checkgroup",
        "<builtin>.chr"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_parse.SubPattern.dump": [
        "<builtin>.enumerate",
        "<builtin>.print",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "sre_compile._compile_info",
        "sre_compile._compile"
    ],
    "sre_compile._compile_info": [
        "sre_compile._generate_overlap_table",
        "sre_compile._compile_charset",
        "<builtin>.len",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._optimize_charset",
        "sre_compile._get_charset_prefix",
        "sre_compile._get_literal_prefix",
        "<builtin>.min"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "sre_compile._combine_flags",
        "sre_compile._get_literal_prefix",
        "sre_compile._get_iscased",
        "<builtin>.len"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "<builtin>.map",
        "<builtin>.any",
        "sre_compile._get_iscased",
        "<builtin>.range",
        "sre_compile._combine_flags"
    ],
    "sre_compile._optimize_charset": [
        "sre_compile._mk_bitmap",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.bytearray",
        "<builtin>.bytes",
        "sre_compile._bytes_to_codes",
        "<builtin>.any",
        "<builtin>.range"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "sre_constants.error.__init__"
    ],
    "sre_compile._generate_overlap_table": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "sre_compile._compile": [
        "sre_compile._compile_charset",
        "sre_constants.error.__init__",
        "sre_compile._optimize_charset",
        "sre_compile._simple",
        "sre_compile._combine_flags",
        "sre_compile._compile"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "<builtin>.set",
        "<builtin>.len",
        "sre_compile.dis.dis_",
        "<builtin>.str"
    ],
    "sre_compile.dis.dis_": [
        "sre_compile._hex_code",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.map",
        "<builtin>.bin",
        "<builtin>.ValueError",
        "sre_compile.dis.dis_.print_",
        "<builtin>.list",
        "<builtin>.str",
        "<builtin>.range",
        "sre_compile.dis.dis_",
        "<builtin>.chr"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "copyreg.pickle": [
        "<builtin>.callable",
        "copyreg.constructor",
        "<builtin>.TypeError"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "re.Scanner": [],
    "re.escape": [
        "<str>.translate",
        "<str>.encode",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "warnings.filterwarnings": [
        "re",
        "<builtin>.issubclass",
        "<builtin>.isinstance",
        "re.compile",
        "warnings._add_filter"
    ],
    "warnings._add_filter": [
        "warnings._filters_mutated"
    ],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "importlib.util": [
        "types",
        "contextlib.contextmanager",
        "importlib.util._LazyModule",
        "importlib.util.LazyLoader",
        "contextlib",
        "functools",
        "warnings"
    ],
    "contextlib": [
        "contextlib.redirect_stderr",
        "abc",
        "collections",
        "collections.abc",
        "functools",
        "contextlib._GeneratorContextManager",
        "contextlib.closing",
        "contextlib._GeneratorContextManagerBase",
        "contextlib._BaseExitStack",
        "contextlib.ExitStack",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib.suppress",
        "contextlib.ContextDecorator",
        "contextlib.nullcontext",
        "contextlib.redirect_stdout",
        "types",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.AsyncExitStack",
        "contextlib.AbstractContextManager",
        "contextlib._RedirectStream"
    ],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib.closing": [],
    "contextlib._RedirectStream": [],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.ExitStack": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.nullcontext": [],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "importlib.util._LazyModule": [],
    "importlib.util.LazyLoader": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "inspect": [
        "linecache",
        "abc",
        "<builtin>.globals",
        "collections",
        "inspect.BoundArguments",
        "inspect._void",
        "collections.abc",
        "collections.namedtuple",
        "functools",
        "re",
        "os",
        "tokenize",
        "operator",
        "warnings",
        "inspect._ParameterKind",
        "inspect.Signature",
        "inspect.EndOfBlock",
        "<builtin>.object",
        "<builtin>.type",
        "token",
        "types",
        "inspect.Parameter",
        "<map>.items",
        "enum",
        "importlib.machinery",
        "<builtin>.hasattr",
        "dis",
        "inspect.BlockFinder",
        "inspect._empty"
    ],
    "dis": [
        "dis.Instruction",
        "dis.Bytecode",
        "opcode",
        "collections",
        "io",
        "collections.namedtuple",
        "types"
    ],
    "opcode": [
        "opcode.jrel_op",
        "opcode.def_op",
        "opcode.jabs_op",
        "opcode.name_op",
        "<builtin>.range",
        "_opcode"
    ],
    "_opcode": [],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "opcode.def_op"
    ],
    "dis.Instruction": [],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "inspect.EndOfBlock": [],
    "inspect.BlockFinder": [],
    "inspect._void": [],
    "inspect._empty": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "networkx.lazy_imports.DelayedImportErrorModule": [],
    "networkx.exception": [
        "networkx.exception.NetworkXAlgorithmError",
        "networkx.exception.NetworkXNoPath",
        "networkx.exception.HasACycle",
        "networkx.exception.NetworkXPointlessConcept",
        "networkx.exception.NetworkXException",
        "networkx.exception.NetworkXUnfeasible",
        "networkx.exception.NetworkXNotImplemented",
        "networkx.exception.NodeNotFound",
        "networkx.exception.NetworkXError",
        "networkx.exception.NetworkXUnbounded",
        "networkx.exception.AmbiguousSolution",
        "networkx.exception.PowerIterationFailedConvergence",
        "networkx.exception.ExceededMaxIterations",
        "networkx.exception.NetworkXNoCycle"
    ],
    "networkx.exception.NetworkXException": [],
    "networkx.exception.NetworkXError": [],
    "networkx.exception.NetworkXPointlessConcept": [],
    "networkx.exception.NetworkXAlgorithmError": [],
    "networkx.exception.NetworkXUnfeasible": [],
    "networkx.exception.NetworkXNoPath": [],
    "networkx.exception.NetworkXNoCycle": [],
    "networkx.exception.HasACycle": [],
    "networkx.exception.NetworkXUnbounded": [],
    "networkx.exception.NetworkXNotImplemented": [],
    "networkx.exception.NodeNotFound": [],
    "networkx.exception.AmbiguousSolution": [],
    "networkx.exception.ExceededMaxIterations": [],
    "networkx.exception.PowerIterationFailedConvergence": [],
    "networkx.utils": [
        "networkx.utils.heaps",
        "networkx.utils.misc",
        "networkx.utils.random_sequence",
        "networkx.utils.decorators",
        "networkx.utils.rcm",
        "networkx.utils.union_find"
    ],
    "networkx.utils.misc": [
        "uuid",
        "networkx",
        "networkx.utils.misc.PythonRandomInterface",
        "collections",
        "collections.abc",
        "warnings"
    ],
    "uuid": [
        "os",
        "enum",
        "uuid.SafeUUID",
        "platform",
        "uuid.UUID",
        "platform.system",
        "_uuid",
        "uuid.UUID.__init__"
    ],
    "platform": [
        "re",
        "os",
        "collections",
        "re.compile",
        "collections.namedtuple"
    ],
    "platform.system": [
        "platform.uname"
    ],
    "platform.uname": [
        "platform._syscmd_uname",
        "<builtin>.list",
        "platform.java_ver",
        "<builtin>.filter",
        "platform.win32_ver",
        "platform._node",
        "platform._syscmd_ver"
    ],
    "<builtin>.filter": [],
    "platform._node": [
        "socket"
    ],
    "socket": [
        "_socket",
        "socket._GiveupOnSendfile",
        "os",
        "enum",
        "socket.SocketIO",
        "<builtin>.hasattr",
        "<builtin>.object",
        "io",
        "<builtin>.getattr",
        "os._get_exports_list",
        "socket.socket",
        "selectors"
    ],
    "_socket": [],
    "selectors": [
        "selectors._BaseSelectorImpl",
        "selectors.PollSelector",
        "selectors.DevpollSelector",
        "abc",
        "select",
        "<builtin>.globals",
        "collections",
        "selectors._PollLikeSelector",
        "selectors._SelectorMapping",
        "selectors.BaseSelector",
        "<builtin>.hasattr",
        "collections.abc",
        "selectors.SelectSelector",
        "selectors.EpollSelector",
        "collections.namedtuple",
        "math",
        "selectors.KqueueSelector"
    ],
    "select": [],
    "selectors._SelectorMapping": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors.SelectSelector": [],
    "selectors._PollLikeSelector": [],
    "selectors.PollSelector": [],
    "selectors.EpollSelector": [],
    "selectors.DevpollSelector": [],
    "selectors.KqueueSelector": [],
    "socket._GiveupOnSendfile": [],
    "socket.socket": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "platform.win32_ver": [
        "<builtin>.getattr",
        "sys.getwindowsversion",
        "<map>.get"
    ],
    "sys.getwindowsversion": [],
    "platform._syscmd_ver": [
        "platform._norm_version",
        "subprocess.check_output",
        "subprocess"
    ],
    "subprocess": [
        "subprocess._use_posix_spawn",
        "subprocess.TimeoutExpired",
        "<builtin>.getattr",
        "contextlib",
        "subprocess.CompletedProcess",
        "os",
        "threading",
        "warnings",
        "subprocess.SubprocessError",
        "select",
        "signal",
        "subprocess.Handle",
        "subprocess.CalledProcessError",
        "subprocess.STARTUPINFO",
        "<builtin>.hasattr",
        "subprocess.Popen",
        "_posixsubprocess",
        "io",
        "selectors"
    ],
    "signal": [
        "enum",
        "functools.wraps",
        "functools",
        "<builtin>.globals"
    ],
    "threading": [
        "threading._MainThread",
        "threading.BoundedSemaphore",
        "collections",
        "_threading_local",
        "_weakrefset",
        "collections.namedtuple",
        "threading._RLock",
        "<builtin>.set",
        "itertools.count",
        "threading.Condition",
        "threading.Barrier",
        "os",
        "threading._MainThread.__init__",
        "traceback",
        "threading.Thread",
        "threading.BrokenBarrierError",
        "threading.Timer",
        "threading.Semaphore",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.hasattr",
        "threading.Event",
        "threading._DummyThread"
    ],
    "threading._RLock": [],
    "threading.Condition": [],
    "threading.Semaphore": [],
    "threading.BoundedSemaphore": [],
    "threading.Event": [],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "_weakrefset.WeakSet.__init__": [
        "<builtin>.set",
        "_weakref.ref",
        "_weakrefset.WeakSet.update"
    ],
    "_weakref.ref": [],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakref.ref",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [
        "traceback.TracebackException",
        "linecache",
        "traceback.StackSummary",
        "collections",
        "traceback.FrameSummary"
    ],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading.Timer": [],
    "threading._MainThread": [],
    "threading._DummyThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread.__init__",
        "threading.Thread._set_tstate_lock",
        "threading.Event.set",
        "threading.Thread._set_ident"
    ],
    "threading.Thread.__init__": [
        "_weakrefset.WeakSet.add",
        "<builtin>.str",
        "threading.current_thread",
        "threading._make_invoke_excepthook",
        "threading._newname",
        "threading.Event.__init__"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "_thread.get_ident": [],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_native_id",
        "threading._newname",
        "threading.Thread.__init__",
        "threading.Thread._set_ident"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock",
        "_collections.deque"
    ],
    "threading.RLock": [
        "threading._RLock.__init__",
        "_thread.RLock"
    ],
    "threading._RLock.__init__": [],
    "_collections.deque": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "contextlib.contextmanager",
        "_threading_local.local",
        "_threading_local._localimpl",
        "threading",
        "weakref",
        "contextlib"
    ],
    "weakref": [
        "weakref.KeyedRef",
        "weakref.WeakMethod",
        "weakref.WeakKeyDictionary",
        "weakref.finalize",
        "collections.abc",
        "weakref.WeakValueDictionary",
        "_weakrefset"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakValueDictionary": [],
    "weakref.KeyedRef": [],
    "weakref.WeakKeyDictionary": [],
    "weakref.finalize": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "weakref.finalize._Info"
    ],
    "weakref.finalize._Info": [],
    "_threading_local._localimpl": [],
    "_threading_local.local": [],
    "_posixsubprocess": [],
    "subprocess.SubprocessError": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.STARTUPINFO": [],
    "subprocess.Handle": [],
    "subprocess.CompletedProcess": [],
    "subprocess._use_posix_spawn": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.hasattr"
    ],
    "subprocess.Popen": [
        "<builtin>.property"
    ],
    "subprocess.check_output": [
        "subprocess.run",
        "<builtin>.ValueError"
    ],
    "subprocess.run": [
        "<builtin>.ValueError",
        "subprocess.Popen.wait",
        "subprocess.Popen.__init__",
        "subprocess.Popen.poll",
        "subprocess.Popen.__enter__",
        "subprocess.Popen.kill",
        "subprocess.CalledProcessError.__init__",
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.__exit__",
        "subprocess.Popen.communicate"
    ],
    "subprocess.Popen.__init__": [
        "subprocess._cleanup",
        "warnings.warn",
        "subprocess.Popen._get_handles",
        "<builtin>.bool",
        "<builtin>.ValueError",
        "_io.open",
        "<builtin>.filter",
        "<builtin>.hasattr",
        "_io.TextIOWrapper",
        "<builtin>.isinstance",
        "subprocess.Popen._execute_child",
        "<builtin>.TypeError"
    ],
    "subprocess._cleanup": [],
    "subprocess.Popen._get_handles": [
        "<builtin>.isinstance",
        "subprocess.Popen._get_devnull"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "_io.open": [],
    "subprocess.Popen._execute_child": [
        "subprocess.Popen._posix_spawn",
        "<builtin>.ValueError",
        "<builtin>.tuple",
        "<builtin>.getattr",
        "<builtin>.set",
        "os.get_exec_path",
        "ntpath.dirname",
        "<builtin>.bytes",
        "posixpath.dirname",
        "<builtin>.map",
        "<builtin>.bytearray",
        "<builtin>.int",
        "<builtin>.len",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.list",
        "<builtin>.issubclass",
        "<builtin>.hasattr",
        "ntpath.join",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "posixpath.join",
        "<builtin>.sorted",
        "subprocess.Popen._handle_exitstatus"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "os._fspath",
        "ntpath._get_bothseps",
        "<builtin>.len",
        "ntpath.splitdrive"
    ],
    "posixpath.dirname": [
        "os._fspath",
        "<builtin>.len",
        "<str>.rfind",
        "posixpath._get_sep"
    ],
    "<str>.rfind": [],
    "subprocess.Popen._posix_spawn": [
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.getattr"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "os.get_exec_path": [
        "<str>.split",
        "warnings",
        "warnings.catch_warnings.__init__"
    ],
    "warnings.catch_warnings.__init__": [],
    "subprocess.Popen._handle_exitstatus": [],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [],
    "subprocess.Popen.communicate": [
        "<builtin>.ValueError",
        "subprocess.Popen._wait",
        "subprocess.Popen.wait",
        "subprocess.Popen._communicate",
        "time.monotonic",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen._remaining_time",
        "<builtin>.min"
    ],
    "time.monotonic": [],
    "subprocess.Popen._communicate": [
        "subprocess.Popen._translate_newlines",
        "subprocess.Popen.wait",
        "<builtin>.memoryview",
        "<builtin>.RuntimeError",
        "subprocess.Popen._check_timeout",
        "subprocess.Popen._remaining_time",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._save_input"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.Popen.wait": [
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time",
        "<builtin>.min",
        "time.monotonic"
    ],
    "subprocess.Popen._wait": [
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._try_wait",
        "<builtin>.min",
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "platform._norm_version": [
        "<str>.split",
        "<builtin>.map"
    ],
    "platform.java_ver": [
        "platform._java_getprop"
    ],
    "platform._java_getprop": [],
    "platform._syscmd_uname": [
        "subprocess.check_output",
        "subprocess"
    ],
    "uuid.SafeUUID": [],
    "uuid.UUID": [
        "<builtin>.property"
    ],
    "_uuid": [],
    "uuid.UUID.__init__": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.repr",
        "<str>.strip",
        "<builtin>.isinstance",
        "<str>.replace",
        "<builtin>.TypeError"
    ],
    "networkx.utils.misc.PythonRandomInterface": [],
    "networkx.utils.decorators": [
        "re",
        "networkx",
        "_collections.defaultdict",
        "bz2",
        "collections",
        "posixpath",
        "networkx.utils.decorators.argmap",
        "pathlib",
        "networkx.utils",
        "contextlib",
        "gzip",
        "inspect"
    ],
    "bz2": [
        "os",
        "_compression",
        "_bz2",
        "<builtin>.object",
        "threading",
        "bz2.BZ2File",
        "io",
        "warnings"
    ],
    "_compression": [
        "_compression.BaseStream",
        "_compression.DecompressReader",
        "io"
    ],
    "_compression.BaseStream": [],
    "_compression.DecompressReader": [],
    "_bz2": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "gzip": [
        "gzip.GzipFile",
        "os",
        "gzip.BadGzipFile",
        "_compression",
        "gzip._PaddedFile",
        "struct",
        "io",
        "zlib",
        "gzip._GzipReader"
    ],
    "zlib": [],
    "gzip._PaddedFile": [],
    "gzip.BadGzipFile": [],
    "gzip.GzipFile": [
        "<builtin>.property"
    ],
    "gzip._GzipReader": [],
    "pathlib": [
        "pathlib.Path",
        "pathlib._RecursiveWildcardSelector",
        "posixpath",
        "ntpath",
        "collections.abc",
        "pathlib._Flavour",
        "functools",
        "re",
        "functools.lru_cache.decorating_function",
        "os",
        "operator",
        "pathlib.PurePosixPath",
        "pathlib.WindowsPath",
        "pathlib._NormalAccessor",
        "pathlib._PathParents",
        "pathlib._PosixFlavour",
        "pathlib._Accessor",
        "pathlib._WildcardSelector",
        "pathlib._Selector",
        "pathlib._PreciseSelector",
        "fnmatch",
        "stat",
        "urllib.parse",
        "<builtin>.hasattr",
        "functools._lru_cache_wrapper.wrapper",
        "pathlib._TerminatingSelector",
        "functools.lru_cache",
        "pathlib.PurePath",
        "io",
        "pathlib._WindowsFlavour",
        "pathlib.PosixPath",
        "pathlib.PureWindowsPath"
    ],
    "urllib.parse": [
        "collections",
        "urllib.parse._NetlocResultMixinStr",
        "urllib.parse.ParseResult",
        "urllib.parse.SplitResultBytes",
        "collections.namedtuple",
        "re",
        "urllib.parse._ResultMixinBytes",
        "urllib.parse._ResultMixinStr",
        "<builtin>.bytes",
        "urllib.parse._fix_result_transcoding",
        "warnings",
        "<builtin>.frozenset",
        "urllib.parse.Quoter",
        "urllib.parse._NetlocResultMixinBytes",
        "re.compile",
        "urllib.parse.DefragResultBytes",
        "urllib.parse.ParseResultBytes",
        "urllib.parse._NetlocResultMixinBase",
        "urllib.parse.DefragResult",
        "urllib.parse.SplitResult"
    ],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse.DefragResult": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.ParseResult": [],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse._fix_result_transcoding": [],
    "urllib.parse.Quoter": [],
    "pathlib._Flavour": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.range",
        "<builtin>.set"
    ],
    "pathlib._PosixFlavour": [],
    "pathlib._Accessor": [],
    "pathlib._NormalAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.hasattr"
    ],
    "pathlib._Selector": [],
    "pathlib._TerminatingSelector": [],
    "pathlib._PreciseSelector": [],
    "pathlib._WildcardSelector": [],
    "pathlib._RecursiveWildcardSelector": [],
    "pathlib._PathParents": [],
    "pathlib.PurePath": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "operator.attrgetter.__init__"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.map",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<str>.split",
        "<builtin>.TypeError"
    ],
    "pathlib.PurePosixPath": [],
    "pathlib.PureWindowsPath": [],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "pathlib.PosixPath": [],
    "pathlib.WindowsPath": [],
    "_collections.defaultdict": [],
    "networkx.utils.decorators.argmap": [
        "collections.namedtuple",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "re.compile"
    ],
    "networkx.utils.random_sequence": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.py_random_state",
        "networkx",
        "networkx.utils"
    ],
    "networkx.utils.decorators.py_random_state": [
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.utils.decorators.argmap.__init__": [],
    "networkx.utils.union_find": [
        "networkx.utils.union_find.UnionFind",
        "networkx.utils"
    ],
    "networkx.utils.union_find.UnionFind": [],
    "networkx.utils.rcm": [
        "networkx",
        "operator",
        "collections",
        "networkx.utils"
    ],
    "networkx.utils.heaps": [
        "networkx.utils.heaps.BinaryHeap",
        "networkx",
        "networkx.utils.heaps.MinHeap",
        "networkx.utils.heaps.PairingHeap",
        "heapq"
    ],
    "networkx.utils.heaps.MinHeap": [
        "networkx.utils.heaps.MinHeap._Item"
    ],
    "networkx.utils.heaps.MinHeap._Item": [],
    "networkx.utils.heaps.PairingHeap": [
        "networkx.utils.heaps.PairingHeap._Node"
    ],
    "networkx.utils.heaps.PairingHeap._Node": [],
    "networkx.utils.heaps.BinaryHeap": [],
    "networkx.classes": [
        "networkx.classes.digraph",
        "networkx.classes.coreviews",
        "networkx.classes.reportviews",
        "networkx.classes.graph",
        "networkx.classes.filters",
        "networkx.classes.graphviews",
        "networkx.classes.function",
        "networkx.classes.multidigraph",
        "networkx.classes.backends",
        "networkx.classes.multigraph"
    ],
    "networkx.classes.graph": [
        "networkx.classes.coreviews",
        "networkx.classes.reportviews",
        "networkx",
        "networkx.classes.graph._CachedPropertyResetterAdj",
        "networkx.classes.graph._CachedPropertyResetterNode",
        "networkx.convert",
        "networkx.exception",
        "networkx.classes.graph.Graph",
        "functools",
        "copy"
    ],
    "copy": [
        "<builtin>.type",
        "<builtin>.getattr",
        "weakref",
        "copy.Error",
        "copyreg",
        "types"
    ],
    "copy.Error": [],
    "networkx.convert": [
        "networkx",
        "collections.abc",
        "warnings"
    ],
    "networkx.classes.coreviews": [
        "networkx.classes.coreviews.UnionAdjacency",
        "networkx.classes.coreviews.MultiAdjacencyView",
        "networkx.classes.coreviews.AdjacencyView",
        "networkx.classes.coreviews.UnionMultiInner",
        "networkx.classes.coreviews.UnionMultiAdjacency",
        "networkx.classes.coreviews.FilterAtlas",
        "networkx.classes.coreviews.FilterAdjacency",
        "networkx.classes.coreviews.FilterMultiAdjacency",
        "networkx.classes.coreviews.FilterMultiInner",
        "collections.abc",
        "networkx.classes.coreviews.UnionAtlas",
        "networkx.classes.coreviews.AtlasView"
    ],
    "networkx.classes.coreviews.AtlasView": [],
    "networkx.classes.coreviews.AdjacencyView": [],
    "networkx.classes.coreviews.MultiAdjacencyView": [],
    "networkx.classes.coreviews.UnionAtlas": [],
    "networkx.classes.coreviews.UnionAdjacency": [],
    "networkx.classes.coreviews.UnionMultiInner": [],
    "networkx.classes.coreviews.UnionMultiAdjacency": [],
    "networkx.classes.coreviews.FilterAtlas": [],
    "networkx.classes.coreviews.FilterAdjacency": [],
    "networkx.classes.coreviews.FilterMultiInner": [],
    "networkx.classes.coreviews.FilterMultiAdjacency": [],
    "networkx.classes.reportviews": [
        "networkx.classes.reportviews.MultiDegreeView",
        "collections.abc",
        "networkx.classes.reportviews.OutDegreeView",
        "networkx.classes.reportviews.InDegreeView",
        "networkx.classes.reportviews.InMultiEdgeDataView",
        "networkx.classes.reportviews.OutEdgeView",
        "networkx.classes.reportviews.InEdgeView",
        "networkx.classes.reportviews.DegreeView",
        "networkx.classes.reportviews.OutMultiEdgeDataView",
        "networkx.classes.reportviews.MultiEdgeView",
        "networkx.classes.reportviews.InEdgeDataView",
        "networkx",
        "networkx.classes.reportviews.OutMultiEdgeView",
        "networkx.classes.reportviews.InMultiDegreeView",
        "networkx.classes.reportviews.OutMultiDegreeView",
        "networkx.classes.reportviews.OutEdgeDataView",
        "networkx.classes.reportviews.DiMultiDegreeView",
        "networkx.classes.reportviews.NodeDataView",
        "networkx.classes.reportviews.MultiEdgeDataView",
        "networkx.classes.reportviews.DiDegreeView",
        "networkx.classes.reportviews.NodeView",
        "networkx.classes.reportviews.EdgeView",
        "networkx.classes.reportviews.InMultiEdgeView",
        "networkx.classes.reportviews.EdgeDataView"
    ],
    "networkx.classes.reportviews.NodeView": [
        "<builtin>.classmethod"
    ],
    "networkx.classes.reportviews.NodeDataView": [
        "<builtin>.classmethod"
    ],
    "networkx.classes.reportviews.DiDegreeView": [],
    "networkx.classes.reportviews.DegreeView": [],
    "networkx.classes.reportviews.OutDegreeView": [],
    "networkx.classes.reportviews.InDegreeView": [],
    "networkx.classes.reportviews.MultiDegreeView": [],
    "networkx.classes.reportviews.DiMultiDegreeView": [],
    "networkx.classes.reportviews.InMultiDegreeView": [],
    "networkx.classes.reportviews.OutMultiDegreeView": [],
    "networkx.classes.reportviews.OutEdgeDataView": [],
    "networkx.classes.reportviews.EdgeDataView": [],
    "networkx.classes.reportviews.InEdgeDataView": [],
    "networkx.classes.reportviews.OutMultiEdgeDataView": [],
    "networkx.classes.reportviews.MultiEdgeDataView": [],
    "networkx.classes.reportviews.InMultiEdgeDataView": [],
    "networkx.classes.reportviews.OutEdgeView": [
        "<builtin>.classmethod"
    ],
    "networkx.classes.reportviews.EdgeView": [],
    "networkx.classes.reportviews.InEdgeView": [],
    "networkx.classes.reportviews.OutMultiEdgeView": [],
    "networkx.classes.reportviews.MultiEdgeView": [],
    "networkx.classes.reportviews.InMultiEdgeView": [],
    "networkx.classes.graph._CachedPropertyResetterAdj": [],
    "networkx.classes.graph._CachedPropertyResetterNode": [],
    "networkx.classes.graph.Graph": [
        "<builtin>.property",
        "functools.cached_property.__init__"
    ],
    "functools.cached_property.__init__": [
        "_thread.RLock"
    ],
    "networkx.classes.digraph": [
        "networkx.classes.coreviews",
        "networkx.classes.reportviews",
        "networkx",
        "networkx.classes.graph",
        "networkx.convert",
        "networkx.classes.digraph.DiGraph",
        "networkx.classes.digraph._CachedPropertyResetterAdjAndSucc",
        "networkx.exception",
        "networkx.classes.digraph._CachedPropertyResetterPred",
        "functools",
        "copy"
    ],
    "networkx.classes.digraph._CachedPropertyResetterAdjAndSucc": [],
    "networkx.classes.digraph._CachedPropertyResetterPred": [],
    "networkx.classes.digraph.DiGraph": [
        "functools.cached_property.__init__"
    ],
    "networkx.classes.multigraph": [
        "networkx.classes.coreviews",
        "networkx.classes.reportviews",
        "networkx",
        "networkx.classes.graph",
        "networkx.convert",
        "functools",
        "networkx.classes.multigraph.MultiGraph",
        "copy"
    ],
    "networkx.classes.multigraph.MultiGraph": [
        "functools.cached_property.__init__"
    ],
    "networkx.classes.multidigraph": [
        "networkx.classes.coreviews",
        "networkx.classes.digraph",
        "networkx.classes.reportviews",
        "networkx.classes.multidigraph.MultiDiGraph",
        "networkx",
        "networkx.convert",
        "networkx.exception",
        "networkx.classes.multigraph",
        "functools",
        "copy"
    ],
    "networkx.classes.multidigraph.MultiDiGraph": [
        "functools.cached_property.__init__"
    ],
    "networkx.classes.backends": [
        "importlib.metadata",
        "<builtin>.Exception",
        "pytest",
        "<builtin>.ImportError",
        "os",
        "networkx.classes.backends.PluginInfo.__init__",
        "networkx.classes.backends.PluginInfo",
        "networkx.exception",
        "functools",
        "inspect"
    ],
    "importlib.metadata": [
        "importlib.metadata.FileHash",
        "importlib.metadata.PathDistribution",
        "abc",
        "posixpath",
        "collections",
        "importlib.metadata.Distribution",
        "zipfile",
        "importlib",
        "collections.namedtuple",
        "contextlib",
        "functools",
        "importlib.metadata.PackagePath",
        "re",
        "configparser",
        "os",
        "operator",
        "importlib.metadata.MetadataPathFinder",
        "csv",
        "importlib.metadata.EntryPoint",
        "importlib.metadata.FastPath",
        "importlib.metadata.PackageNotFoundError",
        "pathlib",
        "importlib.abc",
        "importlib.metadata.DistributionFinder",
        "importlib.metadata.Prepared",
        "email",
        "io"
    ],
    "csv": [
        "csv.unix_dialect",
        "re",
        "csv.Dialect",
        "_csv",
        "csv.DictWriter",
        "csv.Sniffer",
        "csv.DictReader",
        "io",
        "csv.excel_tab",
        "csv.excel"
    ],
    "_csv": [],
    "csv.Dialect": [],
    "csv.excel": [],
    "csv.excel_tab": [],
    "csv.unix_dialect": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "csv.DictWriter": [],
    "csv.Sniffer": [],
    "email": [],
    "zipfile": [
        "zipfile.LZMACompressor",
        "binascii",
        "zipfile.LargeZipFile",
        "zipfile.ZipExtFile",
        "posixpath",
        "zipfile.CompleteDirs",
        "contextlib",
        "functools",
        "shutil",
        "os",
        "bz2",
        "threading",
        "importlib.util",
        "zipfile.ZipFile",
        "zipfile._ZipWriteFile",
        "zipfile.FastLookup",
        "zipfile.LZMADecompressor",
        "zipfile.PyZipFile",
        "zlib",
        "zipfile._SharedFile",
        "zipfile._Tellable",
        "zipfile.BadZipFile",
        "stat",
        "struct",
        "lzma",
        "io",
        "zipfile.ZipInfo",
        "zipfile.Path"
    ],
    "binascii": [],
    "shutil": [
        "shutil._GiveupOnFastCopy",
        "shutil.ExecError",
        "os",
        "grp",
        "collections.namedtuple",
        "shutil.RegistryError",
        "fnmatch",
        "bz2",
        "collections",
        "shutil.ReadError",
        "stat",
        "<builtin>.hasattr",
        "shutil.Error",
        "lzma",
        "shutil.SpecialFileError",
        "shutil.SameFileError",
        "zlib"
    ],
    "lzma": [
        "lzma.LZMAFile",
        "os",
        "_compression",
        "_lzma",
        "io"
    ],
    "_lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "grp": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "zipfile.BadZipFile": [],
    "zipfile.LargeZipFile": [],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile.LZMACompressor": [],
    "zipfile.LZMADecompressor": [],
    "zipfile._SharedFile": [],
    "zipfile._Tellable": [],
    "zipfile.ZipExtFile": [],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "zipfile.PyZipFile": [],
    "zipfile.CompleteDirs": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipfile.FastLookup": [],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "configparser": [
        "configparser.SafeConfigParser",
        "configparser.SectionProxy",
        "collections",
        "configparser.BasicInterpolation",
        "collections.abc",
        "configparser.InterpolationMissingOptionError",
        "functools",
        "configparser.MissingSectionHeaderError",
        "re",
        "configparser.InterpolationSyntaxError",
        "configparser.ConfigParser",
        "os",
        "configparser.InterpolationDepthError",
        "configparser.ExtendedInterpolation",
        "configparser.NoOptionError",
        "warnings",
        "configparser.ConverterMapping",
        "<builtin>.object",
        "configparser.DuplicateOptionError",
        "configparser.RawConfigParser",
        "configparser.Error",
        "configparser.Interpolation",
        "configparser.ParsingError",
        "configparser.InterpolationError",
        "configparser.NoSectionError",
        "configparser.DuplicateSectionError",
        "io",
        "configparser.LegacyInterpolation"
    ],
    "configparser.Error": [],
    "configparser.NoSectionError": [],
    "configparser.DuplicateSectionError": [],
    "configparser.DuplicateOptionError": [],
    "configparser.NoOptionError": [],
    "configparser.InterpolationError": [],
    "configparser.InterpolationMissingOptionError": [],
    "configparser.InterpolationSyntaxError": [],
    "configparser.InterpolationDepthError": [],
    "configparser.ParsingError": [
        "<builtin>.property"
    ],
    "configparser.MissingSectionHeaderError": [],
    "configparser.Interpolation": [],
    "configparser.BasicInterpolation": [
        "re.compile"
    ],
    "configparser.ExtendedInterpolation": [
        "re.compile"
    ],
    "configparser.LegacyInterpolation": [
        "re.compile",
        "<builtin>.staticmethod"
    ],
    "configparser.RawConfigParser": [
        "<builtin>.property",
        "re.compile"
    ],
    "configparser.ConfigParser": [],
    "configparser.SafeConfigParser": [],
    "configparser.SectionProxy": [
        "<builtin>.property"
    ],
    "configparser.ConverterMapping": [
        "re.compile"
    ],
    "importlib.abc": [
        "importlib.abc.FileLoader",
        "importlib.abc.ResourceReader",
        "importlib.abc.SourceLoader",
        "abc",
        "importlib.abc._register",
        "importlib.machinery",
        "importlib.abc.ResourceLoader",
        "importlib.abc.ExecutionLoader",
        "importlib.abc.Loader",
        "importlib.abc.Finder",
        "importlib.abc.MetaPathFinder",
        "importlib.abc.PathEntryFinder",
        "importlib.abc.InspectLoader",
        "warnings"
    ],
    "importlib.abc.Finder": [],
    "importlib.abc.MetaPathFinder": [],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.PathEntryFinder": [],
    "importlib.abc.Loader": [],
    "importlib.abc.ResourceLoader": [],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib.abc.ExecutionLoader": [],
    "importlib.abc.FileLoader": [],
    "importlib.abc.SourceLoader": [],
    "importlib.abc.ResourceReader": [],
    "importlib.metadata.PackageNotFoundError": [],
    "importlib.metadata.EntryPoint": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "re.compile"
    ],
    "importlib.metadata.PackagePath": [],
    "importlib.metadata.FileHash": [],
    "importlib.metadata.Distribution": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder": [
        "importlib.metadata.DistributionFinder.Context",
        "abc.abstractmethod",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "<builtin>.vars": [],
    "importlib.metadata.FastPath": [],
    "importlib.metadata.Prepared": [],
    "importlib.metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.PathDistribution": [],
    "networkx.classes.backends.PluginInfo": [
        "<builtin>.property"
    ],
    "networkx.classes.backends.PluginInfo.__init__": [],
    "<builtin>.Exception": [],
    "pytest": [
        "_pytest.config",
        "_pytest.logging",
        "_pytest.pytester",
        "pytest.collect",
        "_pytest",
        "_pytest.warning_types",
        "_pytest.mark",
        "_pytest.debugging",
        "_pytest.main",
        "_pytest.capture",
        "_pytest.recwarn",
        "_pytest.freeze_support",
        "_pytest.nodes",
        "_pytest.python",
        "_pytest.assertion",
        "_pytest.tmpdir",
        "_pytest.cacheprovider",
        "_pytest.outcomes",
        "_pytest.python_api",
        "_pytest.monkeypatch",
        "_pytest.fixtures"
    ],
    "pytest.collect": [
        "warnings",
        "pytest",
        "pytest.collect.FakeCollectModule.__init__",
        "typing",
        "pytest.collect.FakeCollectModule",
        "_pytest.deprecated",
        "types"
    ],
    "typing": [
        "typing.NamedTuple",
        "abc",
        "collections",
        "typing.Generic",
        "typing._Immutable",
        "collections.abc",
        "contextlib",
        "typing.TypedDict",
        "functools",
        "typing.TextIO",
        "re",
        "typing._Final",
        "typing.NamedTupleMeta",
        "typing._SpecialForm",
        "operator",
        "typing._alias",
        "typing.SupportsInt",
        "typing.SupportsFloat",
        "typing.io",
        "typing._GenericAlias",
        "typing.TypeVar",
        "typing.SupportsComplex",
        "typing.SupportsBytes",
        "typing._TypingEmpty",
        "typing.ForwardRef",
        "typing.SupportsAbs",
        "typing.TypeVar.__init__",
        "types",
        "typing.IO",
        "typing.BinaryIO",
        "typing.SupportsIndex",
        "typing._VariadicGenericAlias",
        "typing.Protocol",
        "typing.re",
        "typing._TypingEllipsis",
        "typing.SupportsRound",
        "typing._SpecialForm.__init__",
        "typing._TypedDictMeta",
        "typing._ProtocolMeta"
    ],
    "typing._Final": [],
    "typing._Immutable": [],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "functools._lru_cache_wrapper.wrapper",
        "functools.wraps",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "typing._SpecialForm.__init__": [],
    "typing.ForwardRef": [],
    "typing.TypeVar": [],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing._TypingEmpty": [],
    "typing._TypingEllipsis": [],
    "typing._ProtocolMeta": [],
    "typing.Protocol": [],
    "typing.TypeVar.__init__": [
        "<builtin>.len",
        "<builtin>.bool",
        "<builtin>.ValueError",
        "<builtin>.tuple",
        "typing._type_check",
        "<builtin>.TypeError"
    ],
    "typing._type_check": [
        "typing.ForwardRef.__init__",
        "<builtin>.callable",
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.SyntaxError",
        "<builtin>.isinstance",
        "<builtin>.compile",
        "<builtin>.TypeError"
    ],
    "<builtin>.compile": [],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._GenericAlias.__init__": [
        "typing._collect_type_vars",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<map>.get"
    ],
    "typing._collect_type_vars": [
        "<builtin>.tuple",
        "<builtin>.isinstance"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.NamedTupleMeta": [],
    "typing.NamedTuple": [],
    "typing._TypedDictMeta": [],
    "typing.TypedDict": [],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.io": [],
    "typing.re": [],
    "_pytest.deprecated": [
        "_pytest.warning_types",
        "warnings"
    ],
    "_pytest.warning_types": [
        "_pytest.warning_types.PytestUnraisableExceptionWarning",
        "_pytest.warning_types.PytestWarning",
        "_pytest.warning_types.PytestExperimentalApiWarning",
        "_pytest.warning_types.PytestUnhandledCoroutineWarning",
        "_pytest.warning_types.PytestCacheWarning",
        "_pytest.warning_types.UnformattedWarning",
        "typing",
        "_pytest.warning_types.PytestConfigWarning",
        "_pytest.warning_types.PytestUnknownMarkWarning",
        "_pytest.warning_types.PytestCollectionWarning",
        "_pytest.warning_types.PytestDeprecationWarning",
        "_pytest.compat",
        "attr",
        "typing.TypeVar.__init__",
        "_pytest.warning_types.PytestUnhandledThreadExceptionWarning",
        "_pytest.warning_types.PytestAssertRewriteWarning"
    ],
    "attr": [
        "attr.validators",
        "attr.setters",
        "attr.filters",
        "__future__",
        "attr._funcs",
        "attr._cmp",
        "attr._make",
        "attr.converters",
        "attr._config",
        "attr._version_info",
        "attr._version_info.VersionInfo._from_version_string",
        "functools",
        "attr._next_gen",
        "attr.exceptions"
    ],
    "attr.converters": [
        "attr._compat",
        "__future__",
        "attr._make",
        "typing",
        "inspect"
    ],
    "attr._compat": [
        "platform.python_implementation",
        "types",
        "attr._compat.ReadOnlyDict",
        "__future__",
        "platform",
        "collections",
        "collections.abc",
        "attr._compat.make_set_closure_cell",
        "warnings"
    ],
    "platform.python_implementation": [
        "platform._sys_version"
    ],
    "platform._sys_version": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.hasattr",
        "<builtin>.repr",
        "<map>.get"
    ],
    "attr._compat.ReadOnlyDict": [],
    "attr._compat.make_set_closure_cell": [
        "attr._compat.make_set_closure_cell.make_func_with_cell",
        "attr._compat.make_set_closure_cell.set_closure_cell"
    ],
    "attr._compat.make_set_closure_cell.make_func_with_cell": [],
    "attr._compat.make_set_closure_cell.set_closure_cell": [],
    "attr._make": [
        "attr._make._CacheHashWrapper",
        "linecache",
        "attr._compat",
        "_thread._local",
        "attr._config",
        "inspect",
        "__future__",
        "operator",
        "attr._make._AndValidator",
        "attr._make.Attribute.__init__",
        "typing",
        "threading",
        "attr._make.Attribute",
        "attr._make._ClassBuilder",
        "attr._make.Factory",
        "attr._make._add_repr",
        "warnings",
        "copy",
        "attr.setters",
        "uuid",
        "attr._make._add_eq",
        "attr._make._Nothing",
        "<builtin>.object",
        "attr._compat.metadata_proxy",
        "attr._make._CountingAttr",
        "attr._make._add_hash",
        "attr._make._make_attr_tuple_class",
        "attr.exceptions"
    ],
    "attr._config": [
        "__future__"
    ],
    "attr.setters": [
        "<builtin>.object",
        "__future__",
        "attr.exceptions",
        "attr._config"
    ],
    "attr.exceptions": [
        "attr.exceptions.FrozenError",
        "attr.exceptions.NotAnAttrsClassError",
        "attr.exceptions.AttrsAttributeNotFoundError",
        "attr.exceptions.NotCallableError",
        "attr.exceptions.FrozenInstanceError",
        "__future__",
        "attr.exceptions.UnannotatedAttributeError",
        "attr.exceptions.PythonTooOldError",
        "attr.exceptions.DefaultAlreadySetError",
        "attr.exceptions.FrozenAttributeError"
    ],
    "attr.exceptions.FrozenError": [],
    "attr.exceptions.FrozenInstanceError": [],
    "attr.exceptions.FrozenAttributeError": [],
    "attr.exceptions.AttrsAttributeNotFoundError": [],
    "attr.exceptions.NotAnAttrsClassError": [],
    "attr.exceptions.DefaultAlreadySetError": [],
    "attr.exceptions.UnannotatedAttributeError": [],
    "attr.exceptions.PythonTooOldError": [],
    "attr.exceptions.NotCallableError": [],
    "attr._compat.metadata_proxy": [
        "<builtin>.dict"
    ],
    "attr._make._Nothing": [],
    "attr._make._CacheHashWrapper": [
        "<builtin>.type"
    ],
    "attr._make._make_attr_tuple_class": [
        "<builtin>.enumerate",
        "attr._make._compile_and_eval"
    ],
    "attr._make._compile_and_eval": [
        "<builtin>.eval",
        "<builtin>.compile"
    ],
    "<builtin>.eval": [],
    "attr._make._ClassBuilder": [],
    "_thread._local": [],
    "attr._make.Attribute": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "attr._make.Attribute.__init__": [
        "attr._compat.metadata_proxy",
        "attr._make._determine_attrib_eq_order"
    ],
    "attr._make._determine_attrib_eq_order": [
        "attr._make._determine_attrib_eq_order.decide_callable_or_boolean",
        "<builtin>.any",
        "<builtin>.ValueError"
    ],
    "attr._make._determine_attrib_eq_order.decide_callable_or_boolean": [
        "<builtin>.callable"
    ],
    "attr._make._add_repr": [
        "attr._make._make_repr"
    ],
    "attr._make._make_repr": [
        "<builtin>.tuple"
    ],
    "attr._make._add_eq": [
        "attr._make._make_ne",
        "attr._make._make_eq"
    ],
    "attr._make._make_eq": [
        "attr._make._generate_unique_filename",
        "attr._make._make_method"
    ],
    "attr._make._generate_unique_filename": [
        "uuid.uuid4",
        "<map>.setdefault",
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "uuid.uuid4": [
        "uuid.UUID.__init__"
    ],
    "<map>.setdefault": [],
    "attr._make._make_method": [
        "<builtin>.len",
        "attr._make._compile_and_eval",
        "<str>.splitlines"
    ],
    "<str>.splitlines": [],
    "attr._make._make_ne": [],
    "attr._make._add_hash": [
        "attr._make._make_hash"
    ],
    "attr._make._make_hash": [
        "attr._make._generate_unique_filename",
        "<builtin>.hash",
        "attr._make._make_hash.append_hash_computation_lines",
        "<builtin>.tuple",
        "attr._make._make_method"
    ],
    "attr._make._make_hash.append_hash_computation_lines": [],
    "attr._make._CountingAttr": [
        "<builtin>.tuple",
        "attr._make.Attribute.__init__"
    ],
    "attr._make.Factory": [],
    "attr._make._AndValidator": [
        "attr._make.attrib"
    ],
    "attr._make.attrib": [
        "attr._make.Factory.__init__",
        "<builtin>.ValueError",
        "attr._make._determine_attrib_eq_order",
        "<builtin>.callable",
        "attr._make.and_",
        "attr.setters.pipe",
        "attr._make._CountingAttr.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "attr._make.pipe"
    ],
    "attr._make.Factory.__init__": [],
    "attr.setters.pipe": [],
    "attr._make.and_": [],
    "attr._make.pipe": [],
    "attr._make._CountingAttr.__init__": [],
    "attr.filters": [
        "__future__",
        "attr._make",
        "attr._compat"
    ],
    "attr.validators": [
        "re",
        "attr.validators._IsCallableValidator",
        "__future__",
        "attr.validators._DeepIterable",
        "attr.validators._OptionalValidator",
        "attr._make",
        "attr.validators._ProvidesValidator",
        "attr.validators._MatchesReValidator",
        "attr.validators._InstanceOfValidator",
        "attr.validators._InValidator",
        "attr.validators._DeepMapping",
        "attr.exceptions"
    ],
    "attr.validators._InstanceOfValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MatchesReValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._ProvidesValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._OptionalValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._InValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._IsCallableValidator": [],
    "attr.validators._DeepIterable": [
        "attr._make.attrib",
        "attr.validators.is_callable",
        "attr.validators.optional"
    ],
    "attr.validators.is_callable": [],
    "attr.validators.optional": [
        "<builtin>.isinstance"
    ],
    "attr.validators._DeepMapping": [
        "attr._make.attrib",
        "attr.validators.is_callable",
        "attr.validators.optional"
    ],
    "attr._cmp": [
        "__future__",
        "functools",
        "attr._make",
        "attr._compat"
    ],
    "attr._funcs": [
        "attr._compat",
        "__future__",
        "attr._make",
        "attr.exceptions",
        "copy"
    ],
    "attr._version_info": [
        "__future__",
        "attr._funcs",
        "attr._make",
        "attr._version_info.VersionInfo",
        "functools"
    ],
    "attr._version_info.VersionInfo": [
        "attr._make.attrib",
        "<builtin>.classmethod"
    ],
    "attr._version_info.VersionInfo._from_version_string": [
        "<str>.split",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "attr._next_gen": [
        "attr.setters",
        "functools",
        "attr.exceptions",
        "attr._make"
    ],
    "_pytest.compat": [
        "importlib_metadata",
        "<builtin>.range",
        "contextlib",
        "functools",
        "inspect",
        "re",
        "typing",
        "_pytest.compat._PytestWrapper",
        "importlib.metadata",
        "typing_extensions",
        "_pytest.compat.NotSetType",
        "pathlib",
        "<builtin>.type",
        "re.compile",
        "attr",
        "typing.TypeVar.__init__",
        "contextlib.contextmanager",
        "enum",
        "_pytest.compat.cached_property",
        "<builtin>.ord",
        "_pytest.outcomes"
    ],
    "_pytest.outcomes": [
        "typing.TypeVar.__init__",
        "_pytest.outcomes.OutcomeException",
        "_pytest.outcomes._WithException",
        "typing_extensions",
        "_pytest.outcomes._with_exception",
        "typing",
        "_pytest.outcomes.Failed",
        "_pytest.outcomes.Skipped",
        "_pytest.outcomes.XFailed",
        "_pytest.outcomes.Exit",
        "_pytest.outcomes._with_exception.decorate"
    ],
    "typing_extensions": [
        "typing_extensions._AnnotatedAlias",
        "abc",
        "inspect.signature",
        "typing_extensions._TypeGuardForm",
        "collections",
        "typing_extensions._ConcatenateForm",
        "collections.abc",
        "typing_extensions._TypeAliasForm",
        "typing_extensions._SpecialForm",
        "typing_extensions._UnpackForm",
        "functools",
        "inspect",
        "typing_extensions.TypeVar",
        "typing_extensions._DefaultMixin",
        "typing_extensions.ParamSpecKwargs",
        "typing_extensions.SupportsIndex",
        "typing_extensions._TypedDictMeta.__init__",
        "typing_extensions._ProtocolMeta",
        "operator",
        "typing._alias",
        "typing",
        "typing_extensions._NamedTupleMeta",
        "typing_extensions._UnpackSpecialForm",
        "typing_extensions._TypedDictMeta",
        "warnings",
        "typing_extensions.ParamSpecArgs",
        "typing_extensions.TypeVarTuple",
        "_collections.defaultdict",
        "typing_extensions._ConcatenateGenericAlias",
        "typing_extensions._FinalForm",
        "typing_extensions._RequiredForm",
        "<builtin>.frozenset",
        "typing_extensions.Annotated",
        "typing_extensions._AnyMeta",
        "<builtin>.object",
        "typing_extensions._LiteralForm",
        "typing_extensions.Protocol",
        "typing.TypeVar.__init__",
        "typing_extensions._Immutable",
        "types",
        "typing_extensions._SpecialForm.__init__",
        "typing_extensions._UnpackAlias",
        "<builtin>.hasattr",
        "typing._tp_cache",
        "typing_extensions.Any",
        "typing_extensions.ParamSpec",
        "typing_extensions._ExtensionsSpecialForm"
    ],
    "typing_extensions._AnyMeta": [],
    "typing_extensions.Any": [],
    "typing_extensions._FinalForm": [],
    "typing_extensions._LiteralForm": [],
    "typing_extensions._ProtocolMeta": [],
    "typing_extensions.Protocol": [
        "typing._tp_cache"
    ],
    "typing_extensions.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "inspect._signature_from_builtin",
        "inspect._signature_bound_method",
        "inspect._signature_from_callable",
        "inspect.isfunction",
        "<builtin>.ValueError",
        "<builtin>.callable",
        "inspect.unwrap",
        "inspect._signature_is_functionlike",
        "inspect._signature_get_user_defined_method",
        "inspect._signature_from_function",
        "inspect.Signature.from_callable",
        "inspect._signature_is_builtin",
        "inspect._signature_get_partial",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "inspect._signature_bound_method": [
        "inspect.Signature.replace",
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "inspect.unwrap": [
        "inspect.unwrap._is_wrapper",
        "<builtin>.id",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "<builtin>.id": [],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "inspect._signature_from_callable.<lambda2>",
        "<builtin>.hasattr"
    ],
    "inspect._signature_from_callable.<lambda1>": [],
    "inspect._signature_from_callable.<lambda2>": [],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_is_functionlike": [
        "<builtin>.callable",
        "inspect.isclass",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_function": [
        "inspect._signature_fromstr",
        "<builtin>.len",
        "inspect.isfunction",
        "inspect._signature_is_functionlike",
        "inspect.Parameter.__init__",
        "inspect.Signature.__init__",
        "<builtin>.getattr",
        "<builtin>.TypeError",
        "<builtin>.enumerate"
    ],
    "inspect._signature_fromstr": [
        "ast.parse",
        "inspect._signature_fromstr.RewriteSymbolics",
        "<builtin>.ValueError",
        "inspect._signature_fromstr.p",
        "<builtin>.list",
        "ast",
        "<builtin>.object",
        "inspect.ismodule",
        "<builtin>.isinstance",
        "inspect._signature_strip_non_python_syntax",
        "<builtin>.reversed",
        "<builtin>.getattr",
        "inspect.Signature.__init__",
        "<builtin>.enumerate",
        "<builtin>.zip"
    ],
    "ast": [
        "ast.Ellipsis",
        "ast._ABC",
        "ast.Num",
        "ast.NodeTransformer",
        "ast.Bytes",
        "ast.Str",
        "<builtin>.type",
        "ast.NodeVisitor",
        "<builtin>.property",
        "ast.NameConstant"
    ],
    "ast.NodeVisitor": [],
    "ast.NodeTransformer": [],
    "ast._ABC": [],
    "ast.Num": [],
    "ast.Str": [],
    "ast.Bytes": [],
    "ast.NameConstant": [],
    "ast.Ellipsis": [],
    "inspect._signature_strip_non_python_syntax": [
        "tokenize.tokenize",
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "<builtin>.iter": [],
    "tokenize.tokenize": [
        "<builtin>.iter",
        "tokenize._tokenize",
        "tokenize.detect_encoding"
    ],
    "tokenize._tokenize": [
        "<builtin>.IndentationError",
        "<builtin>.len",
        "tokenize._compile",
        "<map>.get"
    ],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "<builtin>.next": [],
    "ast.parse": [
        "<builtin>.isinstance",
        "<builtin>.compile"
    ],
    "inspect._signature_fromstr.RewriteSymbolics": [],
    "inspect._signature_fromstr.p": [
        "inspect.Parameter.__init__",
        "ast.NodeVisitor.visit",
        "inspect._signature_fromstr.parse_name",
        "ast.literal_eval"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ast.literal_eval": [
        "<builtin>.isinstance",
        "ast.literal_eval._convert",
        "ast.parse"
    ],
    "ast.literal_eval._convert": [
        "<builtin>.map",
        "ast.literal_eval._convert_signed_num",
        "<builtin>.list",
        "<builtin>.dict",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num",
        "<builtin>.set",
        "<builtin>.zip"
    ],
    "ast.literal_eval._convert_signed_num": [
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.repr"
    ],
    "inspect.Parameter.__init__": [
        "<str>.isidentifier",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.Signature.__init__": [
        "<builtin>.enumerate",
        "collections.OrderedDict.__init__",
        "<builtin>.ValueError"
    ],
    "collections.OrderedDict.__init__": [
        "_weakref.proxy"
    ],
    "_weakref.proxy": [],
    "inspect._signature_is_builtin": [
        "inspect.isbuiltin",
        "<builtin>.isinstance",
        "inspect.ismethoddescriptor"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "inspect.isfunction",
        "inspect.isclass",
        "<builtin>.hasattr",
        "inspect.ismethod",
        "<builtin>.type"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_builtin": [
        "inspect._signature_fromstr",
        "<builtin>.ValueError",
        "inspect._signature_is_builtin",
        "<builtin>.getattr",
        "<builtin>.TypeError"
    ],
    "inspect._signature_get_partial": [
        "inspect.Signature.bind_partial",
        "<builtin>.ValueError",
        "collections.OrderedDict.pop",
        "collections.OrderedDict.move_to_end",
        "collections.OrderedDict.values",
        "inspect.Signature.replace",
        "collections.OrderedDict.__init__"
    ],
    "inspect.Signature.bind_partial": [
        "inspect.Signature._bind"
    ],
    "inspect.Signature._bind": [
        "inspect.BoundArguments.__init__",
        "<builtin>.iter",
        "collections.OrderedDict.__init__",
        "<builtin>.TypeError",
        "<builtin>.next"
    ],
    "inspect.BoundArguments.__init__": [],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "<builtin>.KeyError": [],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.values": [],
    "inspect.Signature.replace": [
        "<builtin>.type"
    ],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr"
    ],
    "typing_extensions._TypedDictMeta": [],
    "typing_extensions._TypedDictMeta.__init__": [
        "<builtin>.super"
    ],
    "typing_extensions._AnnotatedAlias": [],
    "typing_extensions.Annotated": [
        "typing._tp_cache"
    ],
    "typing_extensions._TypeAliasForm": [],
    "typing_extensions._DefaultMixin": [],
    "typing_extensions.TypeVar": [],
    "typing_extensions._Immutable": [],
    "typing_extensions.ParamSpecArgs": [],
    "typing_extensions.ParamSpecKwargs": [],
    "typing_extensions.ParamSpec": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateGenericAlias": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateForm": [],
    "typing_extensions._TypeGuardForm": [],
    "typing_extensions._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialForm.__init__": [],
    "typing_extensions._RequiredForm": [],
    "typing_extensions._ExtensionsSpecialForm": [],
    "typing_extensions._UnpackAlias": [],
    "typing_extensions._UnpackForm": [],
    "typing_extensions._UnpackSpecialForm": [],
    "typing_extensions.TypeVarTuple": [],
    "typing_extensions._NamedTupleMeta": [],
    "_pytest.outcomes.OutcomeException": [],
    "_pytest.outcomes.Skipped": [],
    "_pytest.outcomes.Failed": [],
    "_pytest.outcomes.Exit": [],
    "_pytest.outcomes._WithException": [],
    "_pytest.outcomes._with_exception": [],
    "_pytest.outcomes._with_exception.decorate": [
        "typing.cast"
    ],
    "typing.cast": [],
    "_pytest.outcomes.XFailed": [],
    "_pytest.compat.NotSetType": [],
    "importlib_metadata": [
        "importlib_metadata.EntryPoint",
        "abc",
        "importlib_metadata.EntryPoints",
        "posixpath",
        "collections",
        "importlib",
        "contextlib",
        "importlib_metadata._compat",
        "functools",
        "importlib_metadata.Distribution",
        "inspect",
        "importlib_metadata._py39compat",
        "re",
        "importlib_metadata.FileHash",
        "os",
        "importlib_metadata.DeprecatedTuple",
        "importlib_metadata.FastPath",
        "operator",
        "typing",
        "zipp",
        "importlib_metadata.Lookup",
        "csv",
        "warnings",
        "importlib_metadata.PackageNotFoundError",
        "importlib_metadata._itertools",
        "importlib_metadata.Prepared",
        "importlib_metadata.PackagePath",
        "importlib_metadata.DistributionFinder",
        "pathlib",
        "importlib.abc",
        "importlib_metadata.PathDistribution",
        "importlib_metadata._adapters",
        "importlib_metadata.Sectioned",
        "email",
        "importlib_metadata._meta",
        "importlib_metadata.MetadataPathFinder",
        "textwrap"
    ],
    "zipp": [
        "re",
        "zipp.FastLookup",
        "zipp.Path",
        "zipp.InitializedState",
        "fnmatch",
        "posixpath",
        "pathlib",
        "zipfile",
        "io",
        "zipp.CompleteDirs",
        "contextlib",
        "zipp.py310compat"
    ],
    "zipp.py310compat": [
        "<builtin>.eval",
        "<str>.replace",
        "io"
    ],
    "zipp.InitializedState": [],
    "zipp.CompleteDirs": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipp.FastLookup": [],
    "zipp.Path": [
        "<builtin>.property"
    ],
    "textwrap": [
        "re",
        "re.compile",
        "textwrap.TextWrapper"
    ],
    "textwrap.TextWrapper": [
        "re.escape",
        "re.compile",
        "<builtin>.ord"
    ],
    "<str>.translate": [],
    "<str>.encode": [],
    "importlib_metadata._adapters": [
        "re",
        "importlib_metadata._compat.pypy_partial",
        "email.message",
        "importlib_metadata._adapters.Message",
        "importlib_metadata._text",
        "importlib_metadata._compat",
        "functools",
        "textwrap",
        "warnings"
    ],
    "email.message": [
        "email.message.MIMEPart",
        "re",
        "email._policybase",
        "uu",
        "email.charset",
        "email.utils",
        "re.compile",
        "io",
        "email.errors",
        "email.message.Message",
        "quopri",
        "email._encoded_words",
        "email.message.EmailMessage"
    ],
    "uu": [
        "binascii",
        "uu.Error",
        "os"
    ],
    "uu.Error": [],
    "quopri": [
        "binascii"
    ],
    "email.utils": [
        "re",
        "socket",
        "os",
        "email.charset",
        "random",
        "urllib.parse",
        "email._parseaddr",
        "re.compile",
        "datetime"
    ],
    "random": [
        "os",
        "random.SystemRandom",
        "bisect",
        "_random",
        "random.Random.__init__",
        "random.Random",
        "<builtin>.hasattr",
        "_sha512",
        "collections.abc",
        "hashlib",
        "math",
        "warnings"
    ],
    "bisect": [
        "_bisect"
    ],
    "_bisect": [],
    "_sha512": [],
    "hashlib": [
        "logging.exception",
        "_hashlib",
        "<builtin>.bytes",
        "hashlib.__get_openssl_constructor",
        "<builtin>.globals",
        "hashlib.__get_builtin_constructor",
        "<builtin>.range",
        "<builtin>.set",
        "logging"
    ],
    "_hashlib": [],
    "hashlib.__get_openssl_constructor": [
        "hashlib.__get_builtin_constructor",
        "<builtin>.getattr"
    ],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "_sha3",
        "_blake2",
        "_md5",
        "_sha512",
        "<map>.get",
        "_sha1",
        "_sha256"
    ],
    "_sha3": [],
    "_blake2": [],
    "_sha256": [],
    "_md5": [],
    "_sha1": [],
    "logging": [
        "logging.PercentStyle",
        "logging.StringTemplateStyle",
        "string",
        "logging.Handler",
        "collections.abc",
        "weakref",
        "logging.Filter",
        "re",
        "logging.Logger",
        "os",
        "logging.StrFormatStyle",
        "logging.PlaceHolder",
        "logging.Manager",
        "traceback",
        "logging.LoggerAdapter",
        "logging.FileHandler",
        "threading",
        "logging.StreamHandler",
        "logging.RootLogger",
        "logging.Filterer",
        "warnings",
        "logging.NullHandler",
        "logging._StderrHandler",
        "threading.RLock",
        "logging.Formatter.__init__",
        "logging.BufferingFormatter",
        "posixpath.normcase",
        "logging.Manager.__init__",
        "ntpath.normcase",
        "weakref.WeakValueDictionary.__init__",
        "logging.RootLogger.__init__",
        "logging._StderrHandler.__init__",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.hasattr",
        "logging.Formatter",
        "io",
        "logging.LogRecord"
    ],
    "string": [
        "re",
        "string.Formatter",
        "collections",
        "string.Template",
        "string._TemplateMetaclass"
    ],
    "string._TemplateMetaclass": [],
    "string.Template": [],
    "string.Formatter": [],
    "ntpath.normcase": [
        "os._fspath",
        "<str>.lower",
        "<builtin>.isinstance",
        "<str>.replace"
    ],
    "<str>.lower": [],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "logging.LogRecord": [],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StringTemplateStyle": [],
    "logging.Formatter": [],
    "logging.Formatter.__init__": [
        "<map>.keys",
        "<builtin>.ValueError"
    ],
    "<map>.keys": [],
    "logging.BufferingFormatter": [],
    "logging.Filter": [],
    "logging.Filterer": [],
    "weakref.WeakValueDictionary.__init__": [
        "_weakref.ref",
        "<builtin>.set",
        "weakref.WeakValueDictionary.update"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.dict",
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__",
        "<builtin>.hasattr"
    ],
    "weakref.WeakValueDictionary._commit_removals": [
        "_weakref._remove_dead_weakref"
    ],
    "_weakref._remove_dead_weakref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.StreamHandler": [],
    "logging.FileHandler": [],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging._addHandlerRef",
        "logging.Filterer.__init__",
        "logging._checkLevel",
        "logging.Handler.createLock"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.str"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "_weakref.ref"
    ],
    "logging._acquireLock": [
        "threading._RLock.acquire"
    ],
    "threading._RLock.acquire": [
        "_thread.get_ident"
    ],
    "logging.Handler.createLock": [
        "logging._register_at_fork_reinit_lock",
        "threading.RLock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging.PlaceHolder": [],
    "logging.Manager": [],
    "logging.Logger": [],
    "logging.RootLogger": [],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Manager.__init__": [],
    "logging.NullHandler": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.Logger.error",
        "<builtin>.len",
        "logging.basicConfig"
    ],
    "logging.basicConfig": [
        "logging._acquireLock",
        "<builtin>.len",
        "logging.Logger.addHandler",
        "<builtin>.ValueError",
        "logging.StreamHandler.__init__",
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__",
        "<map>.keys",
        "logging.FileHandler.__init__",
        "logging.Logger.setLevel",
        "logging.Logger.removeHandler"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "logging.Handler.__init__",
        "logging.StreamHandler.__init__",
        "os._fspath",
        "ntpath.abspath",
        "posixpath.abspath",
        "logging.FileHandler._open"
    ],
    "ntpath.abspath": [],
    "posixpath.abspath": [
        "posixpath.normpath",
        "os._fspath",
        "posixpath.join",
        "<builtin>.isinstance",
        "posixpath.isabs"
    ],
    "posixpath.normpath": [
        "os._fspath",
        "<builtin>.isinstance",
        "<str>.split",
        "<str>.startswith"
    ],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "<builtin>.open": [],
    "logging.Handler.setFormatter": [],
    "logging.Logger.addHandler": [
        "logging._acquireLock"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "logging.Logger.handle",
        "logging.Logger.findCaller",
        "<builtin>.isinstance",
        "<builtin>.type",
        "logging.Logger.makeRecord"
    ],
    "logging.Logger.findCaller": [
        "logging.currentframe",
        "<builtin>.hasattr",
        "posixpath.normcase",
        "traceback.print_stack",
        "ntpath.normcase",
        "_io.StringIO"
    ],
    "logging.currentframe": [],
    "_io.StringIO": [],
    "traceback.print_stack": [
        "traceback.extract_stack",
        "traceback.print_list"
    ],
    "traceback.extract_stack": [
        "traceback.StackSummary.extract",
        "traceback.walk_stack"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "linecache.checkcache",
        "traceback.FrameSummary.__init__",
        "_collections.deque",
        "<builtin>.getattr",
        "linecache.lazycache",
        "<builtin>.set"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "linecache.checkcache": [
        "<builtin>.len",
        "<builtin>.list",
        "<map>.keys"
    ],
    "traceback.print_list": [
        "<builtin>.print",
        "traceback.StackSummary.format",
        "traceback.StackSummary.from_list"
    ],
    "traceback.StackSummary.from_list": [
        "<builtin>.isinstance",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted"
    ],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.LogRecord.__init__": [
        "_thread.get_ident",
        "<builtin>.len",
        "posixpath.splitext",
        "<builtin>.int",
        "<builtin>.hasattr",
        "ntpath.splitext",
        "<builtin>.isinstance",
        "posixpath.basename",
        "threading.current_thread",
        "logging.getLevelName",
        "ntpath.basename"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "posixpath.basename": [
        "os._fspath",
        "<str>.rfind",
        "posixpath._get_sep"
    ],
    "ntpath.splitext": [
        "os._fspath",
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "genericpath._splitext": [
        "<builtin>.max",
        "<str>.rfind"
    ],
    "posixpath.splitext": [
        "os._fspath",
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Handler.emit",
        "logging.StreamHandler.emit",
        "logging.Filterer.filter",
        "logging.Handler.acquire",
        "logging.FileHandler.emit"
    ],
    "logging.Handler.acquire": [
        "threading._RLock.acquire"
    ],
    "logging.StreamHandler.emit": [
        "logging.Handler.handleError",
        "logging.Handler.format",
        "logging.StreamHandler.flush"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Formatter.format": [
        "logging.Formatter.formatException",
        "logging.LogRecord.getMessage",
        "logging.Formatter.formatMessage",
        "logging.Formatter.formatTime",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatStack"
    ],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.Formatter.usesTime": [],
    "logging.Formatter.formatTime": [],
    "logging.Formatter.formatMessage": [],
    "logging.Formatter.formatException": [
        "traceback.print_exception",
        "_io.StringIO"
    ],
    "traceback.print_exception": [
        "traceback.TracebackException.__init__",
        "<builtin>.type",
        "traceback.TracebackException.format",
        "<builtin>.print"
    ],
    "traceback.TracebackException.__init__": [
        "traceback.walk_tb",
        "<builtin>.issubclass",
        "<builtin>.str",
        "<builtin>.id",
        "traceback.TracebackException.__init__",
        "<builtin>.type",
        "traceback.TracebackException._load_lines",
        "traceback.StackSummary.extract",
        "<builtin>.set",
        "traceback._some_str"
    ],
    "traceback.walk_tb": [],
    "traceback._some_str": [
        "<builtin>.type",
        "<builtin>.str"
    ],
    "traceback.TracebackException._load_lines": [],
    "traceback.TracebackException.format": [
        "traceback.StackSummary.format",
        "traceback.TracebackException.format_exception_only",
        "traceback.TracebackException.format"
    ],
    "traceback.TracebackException.format_exception_only": [
        "<builtin>.len",
        "traceback._format_final_exc_line",
        "<builtin>.issubclass",
        "<builtin>.str",
        "<builtin>.min"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "logging.Formatter.formatStack": [],
    "logging.StreamHandler.flush": [
        "logging.StreamHandler.flush",
        "logging.Handler.acquire",
        "<builtin>.hasattr"
    ],
    "logging.Handler.handleError": [
        "posixpath.dirname",
        "traceback.print_exception",
        "ntpath.dirname",
        "traceback.print_stack"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "logging.FileHandler.emit": [
        "logging.StreamHandler.emit",
        "logging.FileHandler._open"
    ],
    "_random": [],
    "random.Random": [],
    "random.SystemRandom": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.ord",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "datetime": [
        "datetime.timezone",
        "datetime.timedelta",
        "datetime.time",
        "datetime.timezone._create",
        "datetime.date",
        "datetime.datetime",
        "datetime.tzinfo",
        "datetime._days_before_year",
        "math",
        "_datetime"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.tzinfo": [],
    "datetime.time": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.datetime": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.timezone": [
        "<builtin>.object",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "datetime.timezone._create": [],
    "_datetime": [],
    "email._parseaddr": [
        "email._parseaddr.AddrlistClass",
        "email._parseaddr.AddressList",
        "calendar"
    ],
    "calendar": [
        "calendar._localized_month",
        "calendar._localized_day",
        "calendar.IllegalMonthError",
        "calendar.HTMLCalendar",
        "calendar.IllegalWeekdayError",
        "calendar.TextCalendar",
        "calendar.Calendar",
        "calendar.LocaleHTMLCalendar",
        "calendar._localized_day.__init__",
        "calendar._localized_month.__init__",
        "<builtin>.range",
        "calendar.different_locale",
        "datetime",
        "calendar.LocaleTextCalendar",
        "locale",
        "datetime.date.toordinal"
    ],
    "locale": [
        "re",
        "encodings.aliases",
        "<map>.items",
        "functools.wraps",
        "<builtin>.globals",
        "<builtin>.hasattr",
        "encodings",
        "collections.abc",
        "re.compile",
        "<map>.setdefault",
        "functools",
        "<builtin>.sorted"
    ],
    "encodings.aliases": [],
    "calendar.IllegalMonthError": [],
    "calendar.IllegalWeekdayError": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.TextCalendar": [],
    "calendar.HTMLCalendar": [],
    "calendar.different_locale": [],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleHTMLCalendar": [],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_in_month",
        "datetime._days_before_month",
        "datetime._days_before_year"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email._parseaddr.AddrlistClass": [],
    "email._parseaddr.AddressList": [],
    "email.charset": [
        "email.charset.Charset",
        "email.quoprimime",
        "email.base64mime",
        "email.errors",
        "email.encoders",
        "functools"
    ],
    "email.base64mime": [
        "binascii",
        "base64"
    ],
    "base64": [
        "binascii",
        "re",
        "struct"
    ],
    "email.quoprimime": [
        "re",
        "<builtin>.ord",
        "string",
        "<str>.encode",
        "<builtin>.range",
        "<builtin>.chr"
    ],
    "email.errors": [
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.InvalidHeaderDefect",
        "email.errors.HeaderParseError",
        "email.errors.UndecodableBytesDefect",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.MessageParseError",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.MessageError",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.MultipartConversionError",
        "email.errors.HeaderDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.BoundaryError",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.CharsetError",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.MessageDefect"
    ],
    "email.errors.MessageError": [],
    "email.errors.MessageParseError": [],
    "email.errors.HeaderParseError": [],
    "email.errors.BoundaryError": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.CharsetError": [],
    "email.errors.MessageDefect": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "email.encoders": [
        "quopri",
        "base64"
    ],
    "email.charset.Charset": [],
    "email._policybase": [
        "email._policybase._PolicyBase",
        "email.charset",
        "abc",
        "email.header",
        "email._policybase.Policy",
        "email._policybase.Compat32",
        "email.utils"
    ],
    "email.header": [
        "email.header.Header",
        "re",
        "email.charset.Charset.__init__",
        "email.quoprimime",
        "email.header._Accumulator",
        "binascii",
        "email.charset",
        "re.compile",
        "email.errors",
        "email.base64mime",
        "email.header._ValueFormatter"
    ],
    "email.charset.Charset.__init__": [
        "<str>.lower",
        "<builtin>.str",
        "<str>.encode",
        "<builtin>.isinstance",
        "<map>.get"
    ],
    "email.header.Header": [],
    "email.header._ValueFormatter": [],
    "email.header._Accumulator": [],
    "email._policybase._PolicyBase": [],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase.Compat32": [],
    "email._encoded_words": [
        "re",
        "base64",
        "binascii",
        "<builtin>.ord",
        "string",
        "email._encoded_words._QByteMap",
        "re.compile",
        "email.errors",
        "functools"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.message.Message": [
        "email.iterators"
    ],
    "email.iterators": [
        "io"
    ],
    "email.message.MIMEPart": [],
    "email.message.EmailMessage": [],
    "importlib_metadata._text": [
        "re",
        "importlib_metadata._text.FoldedCase"
    ],
    "importlib_metadata._text.FoldedCase": [
        "_functools.method_cache"
    ],
    "_functools.method_cache": [],
    "importlib_metadata._compat": [
        "importlib_metadata._compat.NullFinder",
        "typing_extensions",
        "platform",
        "typing"
    ],
    "importlib_metadata._compat.NullFinder": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata._compat.pypy_partial": [
        "platform.python_implementation"
    ],
    "importlib_metadata._adapters.Message": [
        "<builtin>.property",
        "<builtin>.set",
        "<builtin>.map"
    ],
    "importlib_metadata._meta": [
        "importlib_metadata._meta.PackageMetadata",
        "importlib_metadata._meta.SimplePath",
        "typing",
        "typing.TypeVar.__init__",
        "importlib_metadata._compat"
    ],
    "importlib_metadata._meta.PackageMetadata": [
        "typing.overload",
        "<builtin>.property"
    ],
    "typing.overload": [],
    "importlib_metadata._meta.SimplePath": [
        "<builtin>.property"
    ],
    "importlib_metadata._py39compat": [
        "typing"
    ],
    "importlib_metadata._itertools": [],
    "importlib_metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib_metadata.Sectioned": [
        "<str>.lstrip",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "textwrap.dedent"
    ],
    "textwrap.dedent": [
        "<builtin>.enumerate",
        "<str>.split",
        "<builtin>.zip",
        "re.sub"
    ],
    "re.sub": [
        "re._compile"
    ],
    "<str>.lstrip": [],
    "importlib_metadata.DeprecatedTuple": [
        "importlib_metadata._compat.pypy_partial"
    ],
    "importlib_metadata.EntryPoint": [
        "<builtin>.property",
        "re.compile"
    ],
    "importlib_metadata.EntryPoints": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.PackagePath": [],
    "importlib_metadata.FileHash": [],
    "importlib_metadata.Distribution": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder": [
        "importlib_metadata.DistributionFinder.Context",
        "importlib_metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib_metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib_metadata.FastPath": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "_functools.method_cache",
        "<builtin>.property"
    ],
    "importlib_metadata.Lookup": [],
    "importlib_metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "importlib_metadata.DistributionFinder.Context.__init__"
    ],
    "importlib_metadata.PathDistribution": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "_pytest.compat._PytestWrapper": [
        "attr._make.attrib"
    ],
    "_pytest.compat.cached_property": [],
    "_pytest.warning_types.PytestWarning": [],
    "_pytest.warning_types.PytestAssertRewriteWarning": [],
    "_pytest.warning_types.PytestCacheWarning": [],
    "_pytest.warning_types.PytestConfigWarning": [],
    "_pytest.warning_types.PytestCollectionWarning": [],
    "_pytest.warning_types.PytestDeprecationWarning": [],
    "_pytest.warning_types.PytestExperimentalApiWarning": [
        "<builtin>.classmethod"
    ],
    "_pytest.warning_types.PytestUnhandledCoroutineWarning": [],
    "_pytest.warning_types.PytestUnknownMarkWarning": [],
    "_pytest.warning_types.PytestUnraisableExceptionWarning": [],
    "_pytest.warning_types.PytestUnhandledThreadExceptionWarning": [],
    "_pytest.warning_types.UnformattedWarning": [
        "attr._make.attrib"
    ],
    "pytest.collect.FakeCollectModule": [],
    "pytest.collect.FakeCollectModule.__init__": [
        "<builtin>.super",
        "<builtin>.list"
    ],
    "_pytest": [
        "_pytest._version"
    ],
    "_pytest._version": [],
    "_pytest.assertion": [
        "_pytest.assertion.util",
        "_pytest.config",
        "_pytest.main",
        "_pytest.assertion.AssertionState",
        "_pytest.assertion.rewrite",
        "pluggy._hooks.HookimplMarker.__init__",
        "_pytest.assertion.truncate",
        "typing",
        "_pytest.config.argparsing",
        "_pytest.assertion.DummyRewriteHook",
        "_pytest.nodes"
    ],
    "_pytest.assertion.rewrite": [
        "_pytest.config",
        "_pytest._io.saferepr",
        "functools",
        "_pytest.assertion.util",
        "os",
        "tokenize",
        "typing",
        "ast",
        "py",
        "_pytest._version",
        "importlib.util",
        "_pytest.main",
        "_pytest.assertion.rewrite.AssertionRewriter",
        "pathlib",
        "importlib.abc",
        "_pytest.assertion.rewrite.AssertionRewritingHook",
        "types",
        "_pytest.pathlib",
        "_pytest.assertion",
        "_pytest.store",
        "importlib.machinery",
        "struct",
        "io"
    ],
    "py": [
        "py._version",
        "py._vendored_packages.apipkg",
        "py._vendored_packages.apipkg.initpkg",
        "py._error"
    ],
    "py._error": [
        "py._error.ErrorMaker",
        "py._error.Error",
        "types",
        "os"
    ],
    "py._error.Error": [],
    "py._error.ErrorMaker": [],
    "py._vendored_packages.apipkg": [
        "py._vendored_packages.apipkg.ApiModule",
        "py._vendored_packages.apipkg.version",
        "types",
        "os"
    ],
    "py._vendored_packages.apipkg.version": [],
    "py._vendored_packages.apipkg.ApiModule": [
        "<builtin>.property"
    ],
    "py._version": [],
    "py._vendored_packages.apipkg.initpkg": [
        "py._vendored_packages.apipkg.ApiModule.__init__",
        "py._vendored_packages.apipkg._py_abspath",
        "<builtin>.list",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<map>.update"
    ],
    "py._vendored_packages.apipkg._py_abspath": [
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "py._vendored_packages.apipkg.ApiModule.__init__": [
        "<map>.items",
        "py._vendored_packages.apipkg.ApiModule.__init__",
        "<builtin>.setattr",
        "<builtin>.isinstance",
        "py._vendored_packages.apipkg.AliasModule",
        "<map>.pop"
    ],
    "<builtin>.setattr": [],
    "<map>.pop": [],
    "py._vendored_packages.apipkg.AliasModule": [
        "<builtin>.str",
        "py._vendored_packages.apipkg.AliasModule.AliasModule"
    ],
    "py._vendored_packages.apipkg.AliasModule.AliasModule": [],
    "_pytest._io.saferepr": [
        "reprlib",
        "typing",
        "_pytest._io.saferepr.SafeRepr",
        "pprint",
        "_pytest._io.saferepr.AlwaysDispatchingPrettyPrinter"
    ],
    "pprint": [
        "re",
        "pprint._safe_key",
        "<builtin>.frozenset",
        "collections",
        "<builtin>.type",
        "io",
        "pprint.PrettyPrinter",
        "types"
    ],
    "pprint._safe_key": [],
    "pprint.PrettyPrinter": [],
    "_pytest._io.saferepr.SafeRepr": [],
    "_pytest._io.saferepr.AlwaysDispatchingPrettyPrinter": [],
    "_pytest.assertion.util": [
        "typing",
        "_pytest._io.saferepr",
        "pprint",
        "_pytest.outcomes",
        "_pytest._code",
        "collections.abc"
    ],
    "_pytest._code": [
        "_pytest._code.code",
        "_pytest._code.source"
    ],
    "_pytest._code.code": [
        "_pytest._code.code.Code",
        "_pytest._code.code.ReprExceptionInfo",
        "_pytest._code.code.ExceptionRepr",
        "<builtin>.compile",
        "_pytest._code.code.ReprFileLocation",
        "_pytest._io.saferepr",
        "_pytest._code.code.ReprLocals",
        "_pytest._code.code.ReprEntryNative",
        "weakref",
        "_pytest.compat",
        "inspect",
        "re",
        "_pytest._code.code.ReprTracebackNative",
        "_pytest",
        "_pytest._code.code.ExceptionInfo",
        "_pytest._io",
        "_pytest._code.code.TerminalRepr",
        "_pytest._code.code.TracebackEntry",
        "traceback",
        "typing",
        "py",
        "_pytest._code.code.Frame",
        "_pytest._code.code.FormattedExcinfo",
        "typing_extensions",
        "pathlib",
        "attr",
        "typing.TypeVar.__init__",
        "_pytest._code.code.ReprTraceback",
        "_pytest._code.code.ReprEntry",
        "types",
        "pluggy",
        "_pytest._code.source",
        "_pytest._code.code.Traceback",
        "_pytest._code.code.ExceptionChainRepr",
        "io",
        "_pytest._code.code.ReprFuncArgs"
    ],
    "pluggy": [
        "pluggy._version",
        "pluggy._callers",
        "pluggy._hooks",
        "pluggy._manager"
    ],
    "pluggy._version": [],
    "pluggy._manager": [
        "importlib.metadata",
        "inspect",
        "importlib_metadata",
        "pluggy._tracing",
        "pluggy._callers",
        "pluggy._manager.DistFacade",
        "pluggy._manager.PluginValidationError",
        "pluggy._manager.PluginManager",
        "pluggy._hooks",
        "warnings"
    ],
    "pluggy._tracing": [
        "pluggy._tracing.TagTracer",
        "pluggy._tracing.TagTracerSub"
    ],
    "pluggy._tracing.TagTracer": [],
    "pluggy._tracing.TagTracerSub": [],
    "pluggy._callers": [
        "pluggy._result"
    ],
    "pluggy._result": [
        "pluggy._result.HookCallError",
        "pluggy._result._Result"
    ],
    "pluggy._result.HookCallError": [],
    "pluggy._result._Result": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pluggy._hooks": [
        "inspect",
        "pluggy._hooks.HookimplMarker",
        "pluggy._hooks.HookImpl",
        "pluggy._hooks.HookSpec",
        "<builtin>.hasattr",
        "pluggy._hooks._HookCaller",
        "pluggy._hooks._HookRelay",
        "pluggy._hooks.HookspecMarker",
        "warnings"
    ],
    "pluggy._hooks.HookspecMarker": [],
    "pluggy._hooks.HookimplMarker": [],
    "pluggy._hooks._HookRelay": [],
    "pluggy._hooks._HookCaller": [],
    "pluggy._hooks.HookImpl": [],
    "pluggy._hooks.HookSpec": [],
    "pluggy._manager.PluginValidationError": [],
    "pluggy._manager.DistFacade": [
        "<builtin>.property"
    ],
    "pluggy._manager.PluginManager": [],
    "_pytest._code.source": [
        "warnings",
        "inspect",
        "tokenize",
        "bisect",
        "_pytest._code.source.Source",
        "typing",
        "ast",
        "textwrap",
        "types"
    ],
    "_pytest._code.source.Source": [
        "typing.overload"
    ],
    "_pytest._io": [
        "_pytest._io.terminalwriter"
    ],
    "_pytest._io.terminalwriter": [
        "shutil",
        "os",
        "typing",
        "_pytest._io.wcwidth",
        "_pytest.compat",
        "_pytest._io.terminalwriter.TerminalWriter"
    ],
    "_pytest._io.wcwidth": [
        "functools.lru_cache.decorating_function",
        "unicodedata",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "functools"
    ],
    "_pytest._io.terminalwriter.TerminalWriter": [
        "<builtin>.dict",
        "<builtin>.property"
    ],
    "_pytest._code.code.Code": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "_pytest._code.code.Frame": [
        "<builtin>.property"
    ],
    "_pytest._code.code.TracebackEntry": [
        "<builtin>.property"
    ],
    "_pytest._code.code.Traceback": [
        "typing.overload"
    ],
    "_pytest._code.code.ExceptionInfo": [
        "<builtin>.property",
        "attr._make.attrib",
        "<builtin>.classmethod"
    ],
    "_pytest._code.code.FormattedExcinfo": [
        "attr._make.Factory.__init__",
        "attr._make.attrib"
    ],
    "_pytest._code.code.TerminalRepr": [],
    "_pytest._code.code.ExceptionRepr": [],
    "_pytest._code.code.ExceptionChainRepr": [
        "attr._make.attrib"
    ],
    "_pytest._code.code.ReprExceptionInfo": [
        "attr._make.attrib"
    ],
    "_pytest._code.code.ReprTraceback": [
        "attr._make.attrib"
    ],
    "_pytest._code.code.ReprTracebackNative": [],
    "_pytest._code.code.ReprEntryNative": [
        "attr._make.attrib"
    ],
    "_pytest._code.code.ReprEntry": [
        "attr._make.attrib"
    ],
    "_pytest._code.code.ReprFileLocation": [
        "attr._make.attrib"
    ],
    "_pytest._code.code.ReprLocals": [
        "attr._make.attrib"
    ],
    "_pytest._code.code.ReprFuncArgs": [
        "attr._make.attrib"
    ],
    "_pytest.config": [
        "pluggy._hooks.HookspecMarker.__init__",
        "_pytest.config.exceptions",
        "_pytest.terminal",
        "_pytest.config.argparsing",
        "collections.abc",
        "_pytest._code",
        "_pytest.compat",
        "contextlib",
        "functools",
        "<builtin>.set",
        "inspect",
        "re",
        "_pytest.config.findpaths",
        "functools.lru_cache.decorating_function",
        "argparse",
        "os",
        "shlex",
        "_pytest._io",
        "typing",
        "_pytest._code.code",
        "_pytest.config.cmdline",
        "py",
        "_pytest.config.PytestPluginManager",
        "_pytest.warning_types",
        "_pytest.config.Config",
        "_pytest.deprecated",
        "warnings",
        "copy",
        "_pytest.hookspec",
        "pathlib",
        "_pytest.config.ExitCode",
        "attr",
        "_pytest.config.ConftestImportFailure",
        "types",
        "_pytest.pathlib",
        "pluggy._hooks.HookimplMarker.__init__",
        "pluggy",
        "enum",
        "_pytest.store",
        "functools._lru_cache_wrapper.wrapper",
        "_pytest.outcomes",
        "functools.lru_cache",
        "_pytest.config.Notset"
    ],
    "argparse": [
        "argparse.RawTextHelpFormatter",
        "argparse._MutuallyExclusiveGroup",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse._StoreAction",
        "argparse.FileType",
        "argparse._StoreTrueAction",
        "argparse.Action",
        "argparse.HelpFormatter",
        "re",
        "shutil",
        "os",
        "argparse._VersionAction",
        "argparse._SubParsersAction",
        "gettext",
        "argparse.ArgumentError",
        "argparse._CountAction",
        "argparse._ActionsContainer",
        "argparse.ArgumentParser",
        "argparse._HelpAction",
        "argparse.RawDescriptionHelpFormatter",
        "argparse._AttributeHolder",
        "argparse._AppendConstAction",
        "argparse._AppendAction",
        "argparse.Namespace",
        "argparse.MetavarTypeHelpFormatter",
        "argparse.ArgumentTypeError",
        "argparse._StoreConstAction",
        "argparse._StoreFalseAction",
        "argparse._ArgumentGroup",
        "argparse._ExtendAction"
    ],
    "gettext": [
        "re",
        "gettext.NullTranslations",
        "os",
        "ntpath.join",
        "gettext.GNUTranslations",
        "re.compile",
        "<builtin>.enumerate",
        "posixpath.join",
        "locale"
    ],
    "gettext.NullTranslations": [],
    "gettext.GNUTranslations": [],
    "argparse._AttributeHolder": [],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter._Section": [],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse._StoreAction": [],
    "argparse._StoreConstAction": [],
    "argparse._StoreTrueAction": [],
    "argparse._StoreFalseAction": [],
    "argparse._AppendAction": [],
    "argparse._AppendConstAction": [],
    "argparse._CountAction": [],
    "argparse._HelpAction": [],
    "argparse._VersionAction": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._ExtendAction": [],
    "argparse.FileType": [],
    "argparse.Namespace": [],
    "argparse._ActionsContainer": [],
    "argparse._ArgumentGroup": [],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse.ArgumentParser": [],
    "shlex": [
        "re",
        "os",
        "shlex.shlex",
        "collections",
        "re.compile",
        "io"
    ],
    "shlex.shlex": [
        "<builtin>.property"
    ],
    "_pytest.hookspec": [
        "_pytest.runner",
        "_pytest.config",
        "_pytest.main",
        "pluggy._hooks.HookspecMarker.__init__",
        "pluggy",
        "typing_extensions",
        "_pytest.terminal",
        "typing",
        "_pytest._code.code",
        "_pytest.reports",
        "py",
        "_pytest.config.argparsing",
        "_pytest.outcomes",
        "_pytest.deprecated",
        "_pytest.nodes",
        "_pytest.fixtures",
        "warnings",
        "_pytest.python"
    ],
    "_pytest.config.argparsing": [
        "_pytest.config.argparsing.DropShorterLongHelpFormatter",
        "argparse",
        "_pytest.config.argparsing.ArgumentError",
        "_pytest.config.argparsing.Argument",
        "_pytest._io",
        "_pytest.config.exceptions",
        "typing_extensions",
        "_pytest.config.argparsing.Parser",
        "_pytest.config.argparsing.OptionGroup",
        "typing",
        "py",
        "gettext",
        "_pytest.compat",
        "_pytest.config.argparsing.MyOptionParser",
        "warnings"
    ],
    "_pytest.config.exceptions": [
        "_pytest.compat",
        "_pytest.config.exceptions.PrintHelp",
        "_pytest.config.exceptions.UsageError"
    ],
    "_pytest.config.exceptions.UsageError": [],
    "_pytest.config.exceptions.PrintHelp": [],
    "_pytest.config.argparsing.Parser": [],
    "_pytest.config.argparsing.ArgumentError": [],
    "_pytest.config.argparsing.Argument": [],
    "_pytest.config.argparsing.OptionGroup": [],
    "_pytest.config.argparsing.MyOptionParser": [],
    "_pytest.config.argparsing.DropShorterLongHelpFormatter": [],
    "_pytest.fixtures": [
        "_pytest.config",
        "collections",
        "_pytest.mark.structures",
        "_pytest.fixtures.FixtureFunctionMarker",
        "_pytest.config.argparsing",
        "_pytest._code",
        "_pytest.compat",
        "functools",
        "inspect",
        "_pytest.fixtures.FuncFixtureInfo",
        "os",
        "_pytest",
        "_pytest.fixtures.fixture",
        "_pytest._io",
        "typing",
        "_pytest._code.code",
        "py",
        "_pytest.fixtures.SubRequest",
        "_pytest.fixtures.FixtureDef",
        "_pytest.deprecated",
        "_pytest.mark",
        "warnings",
        "_pytest.main",
        "typing.overload",
        "typing_extensions",
        "attr",
        "typing.TypeVar.__init__",
        "_pytest.nodes",
        "_pytest.fixtures.PseudoFixtureDef",
        "types",
        "_pytest.python",
        "_pytest.pathlib",
        "_pytest.fixtures.FixtureRequest",
        "_pytest.fixtures.FixtureLookupErrorRepr",
        "_pytest.store",
        "_pytest.fixtures.FixtureLookupError",
        "_pytest.outcomes",
        "_pytest.fixtures.FixtureManager"
    ],
    "_pytest.nodes": [
        "_pytest.config",
        "_pytest.mark.structures",
        "_pytest.nodes.Collector",
        "_pytest.nodes.NodeMeta",
        "_pytest._code",
        "_pytest.compat",
        "_pytest.nodes.FSCollector",
        "os",
        "typing",
        "_pytest._code.code",
        "py",
        "_pytest.deprecated",
        "_pytest.nodes.File",
        "warnings",
        "_pytest.main",
        "_pytest.nodes.Item",
        "pathlib",
        "typing.TypeVar.__init__",
        "_pytest.pathlib",
        "_pytest.store",
        "_pytest.outcomes",
        "_pytest.nodes.Node"
    ],
    "_pytest.mark.structures": [
        "_pytest.config",
        "collections.abc",
        "_pytest._code",
        "_pytest.compat",
        "inspect",
        "_pytest.mark.structures._FilterwarningsMarkDecorator",
        "_pytest.mark.structures._SkipifMarkDecorator",
        "typing",
        "_pytest.warning_types",
        "_pytest.mark.structures.ParameterSet",
        "_pytest.mark.structures.NodeKeywords",
        "warnings",
        "attr",
        "typing.TypeVar.__init__",
        "_pytest.nodes",
        "_pytest.mark.structures.MarkGenerator",
        "_pytest.mark.structures._ParametrizeMarkDecorator",
        "_pytest.mark.structures.Mark",
        "_pytest.mark.structures._XfailMarkDecorator",
        "_pytest.mark.structures._SkipMarkDecorator",
        "_pytest.mark.structures.MarkDecorator",
        "_pytest.outcomes",
        "_pytest.fixtures",
        "_pytest.mark.structures._UsefixturesMarkDecorator"
    ],
    "_pytest.mark.structures.ParameterSet": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "_pytest.mark.structures.Mark": [
        "attr._make.attrib"
    ],
    "_pytest.mark.structures.MarkDecorator": [
        "typing.overload",
        "<builtin>.property",
        "attr._make.attrib",
        "attr.validators.instance_of"
    ],
    "attr.validators.instance_of": [],
    "_pytest.mark.structures._SkipMarkDecorator": [
        "typing.overload"
    ],
    "_pytest.mark.structures._SkipifMarkDecorator": [],
    "_pytest.mark.structures._XfailMarkDecorator": [
        "typing.overload"
    ],
    "_pytest.mark.structures._ParametrizeMarkDecorator": [],
    "_pytest.mark.structures._UsefixturesMarkDecorator": [],
    "_pytest.mark.structures._FilterwarningsMarkDecorator": [],
    "_pytest.mark.structures.MarkGenerator": [
        "<builtin>.set"
    ],
    "_pytest.mark.structures.NodeKeywords": [],
    "_pytest.pathlib": [
        "posixpath",
        "_pytest.compat",
        "contextlib",
        "functools",
        "shutil",
        "os",
        "typing",
        "py",
        "_pytest.warning_types",
        "importlib.util",
        "warnings",
        "uuid",
        "pathlib",
        "typing.TypeVar.__init__",
        "types",
        "_pytest.pathlib.ImportMode",
        "enum",
        "fnmatch",
        "_pytest.pathlib.ImportPathMismatchError",
        "_pytest.outcomes"
    ],
    "_pytest.pathlib.ImportMode": [],
    "_pytest.pathlib.ImportPathMismatchError": [],
    "_pytest.store": [
        "typing.TypeVar.__init__",
        "_pytest.store.Store",
        "_pytest.store.StoreKey",
        "typing"
    ],
    "_pytest.store.StoreKey": [],
    "_pytest.store.Store": [],
    "_pytest.main": [
        "_pytest.config",
        "_pytest.main.Failed",
        "_pytest.config.argparsing",
        "_pytest._code",
        "importlib",
        "_pytest.compat",
        "functools",
        "_pytest.main._bestrelpath_cache",
        "argparse",
        "os",
        "_pytest.main.FSHookProxy",
        "_pytest.main.Session",
        "typing",
        "_pytest.main.Interrupted",
        "py",
        "typing_extensions",
        "pathlib",
        "_pytest.reports",
        "attr",
        "_pytest.nodes",
        "_pytest.pathlib",
        "_pytest.runner",
        "fnmatch",
        "_pytest.outcomes",
        "_pytest.fixtures"
    ],
    "_pytest.reports": [
        "_pytest.config",
        "_pytest.reports.TestReport",
        "_pytest.compat",
        "_pytest._io",
        "typing",
        "_pytest._code.code",
        "py",
        "typing_extensions",
        "pathlib",
        "_pytest.reports.CollectReport",
        "attr",
        "typing.TypeVar.__init__",
        "_pytest.nodes",
        "_pytest.runner",
        "_pytest.reports.BaseReport",
        "_pytest.reports.CollectErrorRepr",
        "pprint",
        "_pytest.outcomes",
        "io"
    ],
    "_pytest.runner": [
        "_pytest.main",
        "os",
        "typing_extensions",
        "_pytest.terminal",
        "typing",
        "_pytest.reports",
        "_pytest._code.code",
        "_pytest.timing",
        "_pytest.config.argparsing",
        "_pytest.outcomes",
        "_pytest.compat",
        "_pytest.runner.SetupState",
        "_pytest.runner.CallInfo",
        "bdb",
        "typing.TypeVar.__init__",
        "_pytest.nodes",
        "attr"
    ],
    "bdb": [
        "bdb.Breakpoint",
        "os",
        "fnmatch",
        "bdb.BdbQuit",
        "bdb.Bdb",
        "bdb.Tdb",
        "inspect"
    ],
    "bdb.BdbQuit": [],
    "bdb.Bdb": [],
    "bdb.Breakpoint": [],
    "bdb.Tdb": [],
    "_pytest.timing": [],
    "_pytest.terminal": [
        "_pytest.config",
        "collections",
        "_pytest.timing",
        "_pytest.config.argparsing",
        "_pytest._code",
        "_pytest.compat",
        "functools",
        "datetime",
        "inspect",
        "argparse",
        "typing",
        "_pytest._code.code",
        "_pytest._io.wcwidth",
        "py",
        "_pytest._version",
        "_pytest.terminal.TerminalReporter",
        "warnings",
        "_pytest.terminal.WarningReport",
        "_pytest.main",
        "_pytest.terminal.MoreQuietAction",
        "typing_extensions",
        "pathlib",
        "_pytest.reports",
        "attr",
        "_pytest.nodes",
        "_pytest.pathlib",
        "pluggy",
        "platform"
    ],
    "_pytest.terminal.MoreQuietAction": [],
    "_pytest.terminal.WarningReport": [
        "attr._make.attrib"
    ],
    "_pytest.terminal.TerminalReporter": [
        "<builtin>.property"
    ],
    "_pytest.runner.CallInfo": [
        "<builtin>.property",
        "attr._make.attrib",
        "<builtin>.classmethod"
    ],
    "_pytest.runner.SetupState": [],
    "_pytest.reports.BaseReport": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "_pytest.reports.TestReport": [
        "<builtin>.classmethod"
    ],
    "_pytest.reports.CollectReport": [
        "<builtin>.property"
    ],
    "_pytest.reports.CollectErrorRepr": [],
    "_pytest.main.FSHookProxy": [],
    "_pytest.main.Interrupted": [],
    "_pytest.main.Failed": [],
    "_pytest.main._bestrelpath_cache": [
        "attr._make.attrib"
    ],
    "_pytest.main.Session": [
        "typing.overload",
        "<builtin>.classmethod"
    ],
    "_pytest.nodes.NodeMeta": [],
    "_pytest.nodes.Node": [
        "typing.overload",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "_pytest.nodes.Collector": [
        "_pytest.nodes.Collector.CollectError"
    ],
    "_pytest.nodes.Collector.CollectError": [],
    "_pytest.nodes.FSCollector": [
        "<builtin>.classmethod"
    ],
    "_pytest.nodes.File": [],
    "_pytest.nodes.Item": [
        "_pytest.compat.cached_property.__init__"
    ],
    "_pytest.compat.cached_property.__init__": [],
    "_pytest.mark": [
        "_pytest.config",
        "_pytest.mark.expression",
        "_pytest.mark.MarkMatcher",
        "_pytest.mark.KeywordMatcher",
        "_pytest.store",
        "_pytest.mark.structures",
        "typing",
        "_pytest.config.argparsing",
        "attr",
        "_pytest.deprecated",
        "_pytest.nodes",
        "warnings"
    ],
    "_pytest.mark.expression": [
        "_pytest.mark.expression.Scanner",
        "re",
        "_pytest.mark.expression.ParseError",
        "_pytest.mark.expression.TokenType",
        "enum",
        "_pytest.mark.expression.Expression",
        "_pytest.mark.expression.Token",
        "typing",
        "ast",
        "_pytest.mark.expression.MatcherAdapter",
        "attr",
        "types"
    ],
    "_pytest.mark.expression.TokenType": [],
    "_pytest.mark.expression.Token": [
        "attr._make.attrib"
    ],
    "_pytest.mark.expression.ParseError": [],
    "_pytest.mark.expression.Scanner": [],
    "_pytest.mark.expression.MatcherAdapter": [],
    "_pytest.mark.expression.Expression": [
        "<builtin>.classmethod"
    ],
    "_pytest.mark.KeywordMatcher": [
        "attr._make.attrib",
        "<builtin>.classmethod"
    ],
    "_pytest.mark.MarkMatcher": [
        "attr._make.attrib",
        "<builtin>.classmethod"
    ],
    "_pytest.python": [
        "_pytest.config",
        "_pytest.python.Function",
        "collections",
        "_pytest.mark.structures",
        "_pytest._io.saferepr",
        "_pytest.config.argparsing",
        "_pytest._code",
        "_pytest.compat",
        "functools",
        "inspect",
        "_pytest.python.Module",
        "os",
        "_pytest",
        "_pytest._io",
        "typing",
        "_pytest._code.code",
        "_pytest.python.PyCollector",
        "py",
        "_pytest.python.Class",
        "_pytest.warning_types",
        "_pytest.deprecated",
        "_pytest.mark",
        "_pytest.python._EmptyClass",
        "warnings",
        "_pytest.python.FunctionDefinition",
        "_pytest.main",
        "_pytest.python.Package",
        "<builtin>.frozenset",
        "typing_extensions",
        "_pytest.python.Metafunc",
        "_pytest.python.PyobjMixin",
        "_pytest.nodes",
        "types",
        "_pytest.pathlib",
        "_pytest.python.Instance",
        "enum",
        "<builtin>.dir",
        "fnmatch",
        "_pytest.python.CallSpec2",
        "_pytest.outcomes",
        "_pytest.fixtures"
    ],
    "_pytest.python.PyobjMixin": [
        "<builtin>.property"
    ],
    "_pytest.python._EmptyClass": [],
    "_pytest.python.PyCollector": [],
    "_pytest.python.Module": [],
    "_pytest.python.Package": [],
    "_pytest.python.Class": [
        "<builtin>.classmethod"
    ],
    "_pytest.python.Instance": [],
    "_pytest.python.CallSpec2": [
        "<builtin>.property"
    ],
    "_pytest.python.Metafunc": [],
    "_pytest.python.Function": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "_pytest.python.FunctionDefinition": [],
    "_pytest.fixtures.PseudoFixtureDef": [
        "attr._make.attrib"
    ],
    "_pytest.fixtures.FuncFixtureInfo": [
        "attr._make.attrib"
    ],
    "_pytest.fixtures.FixtureRequest": [
        "<builtin>.property"
    ],
    "_pytest.fixtures.SubRequest": [],
    "_pytest.fixtures.FixtureLookupError": [],
    "_pytest.fixtures.FixtureLookupErrorRepr": [],
    "_pytest.fixtures.FixtureDef": [],
    "_pytest.fixtures.FixtureFunctionMarker": [
        "attr._make.attrib"
    ],
    "_pytest.fixtures.fixture": [],
    "_pytest.fixtures.FixtureManager": [],
    "pluggy._hooks.HookspecMarker.__init__": [],
    "_pytest.config.findpaths": [
        "_pytest.pathlib",
        "os",
        "_pytest.config.exceptions",
        "typing",
        "pathlib",
        "_pytest.outcomes",
        "iniconfig"
    ],
    "iniconfig": [
        "iniconfig.SectionWrapper",
        "iniconfig.ParseError",
        "iniconfig.IniConfig"
    ],
    "iniconfig.ParseError": [],
    "iniconfig.SectionWrapper": [],
    "iniconfig.IniConfig": [],
    "pluggy._hooks.HookimplMarker.__init__": [],
    "_pytest.config.ExitCode": [],
    "_pytest.config.ConftestImportFailure": [],
    "_pytest.config.cmdline": [
        "<builtin>.staticmethod"
    ],
    "_pytest.config.PytestPluginManager": [
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "_pytest.config.Notset": [],
    "_pytest.config.Config": [
        "_pytest.config.Config.InvocationParams",
        "<builtin>.property",
        "<builtin>.classmethod",
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.config.Config.InvocationParams": [
        "attr._make.attrib"
    ],
    "_pytest.assertion.rewrite.AssertionRewritingHook": [],
    "_pytest.assertion.rewrite.AssertionRewriter": [
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.staticmethod"
    ],
    "_pytest.assertion.truncate": [
        "_pytest.nodes",
        "typing",
        "os"
    ],
    "_pytest.assertion.DummyRewriteHook": [],
    "_pytest.assertion.AssertionState": [],
    "_pytest.cacheprovider": [
        "_pytest.config",
        "json",
        "_pytest.config.argparsing",
        "_pytest.compat",
        "os",
        "_pytest.fixtures.fixture",
        "_pytest._io",
        "typing",
        "py",
        "_pytest.cacheprovider.Cache",
        "_pytest.deprecated",
        "_pytest.cacheprovider.NFPlugin",
        "_pytest.main",
        "_pytest.cacheprovider.LFPluginCollSkipfiles",
        "pathlib",
        "_pytest.reports",
        "attr",
        "_pytest.nodes",
        "_pytest.python",
        "_pytest.pathlib",
        "pluggy._hooks.HookimplMarker.__init__",
        "_pytest.cacheprovider.LFPluginCollWrapper",
        "_pytest.cacheprovider.LFPlugin",
        "_pytest.fixtures"
    ],
    "json": [
        "decoder.JSONDecoder",
        "codecs",
        "encoder.JSONEncoder"
    ],
    "encoder.JSONEncoder": [],
    "decoder.JSONDecoder": [],
    "_pytest.cacheprovider.Cache": [
        "attr._make.attrib",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "_pytest.cacheprovider.LFPluginCollWrapper": [
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.cacheprovider.LFPluginCollSkipfiles": [
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.cacheprovider.LFPlugin": [
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.cacheprovider.NFPlugin": [
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.capture": [
        "_pytest.config",
        "_pytest.capture.DontReadFromInput",
        "_pytest.capture.TeeCaptureIO",
        "_pytest.config.argparsing",
        "_pytest.compat",
        "contextlib",
        "functools",
        "_pytest.capture.CaptureResult",
        "os",
        "_pytest.capture.FDCaptureBinary",
        "_pytest.fixtures.fixture",
        "typing",
        "_pytest.deprecated",
        "_pytest.capture.SysCapture",
        "_pytest.capture.FDCapture",
        "_pytest.capture.CaptureManager",
        "_pytest.capture.CaptureFixture",
        "typing_extensions",
        "_pytest.capture.SysCaptureBinary",
        "_pytest.capture.NoCapture",
        "_pytest.capture.MultiCapture",
        "_pytest.nodes",
        "pluggy._hooks.HookimplMarker.__init__",
        "_pytest.capture.CaptureIO",
        "_pytest.capture.EncodedFile",
        "tempfile",
        "io",
        "_pytest.fixtures"
    ],
    "tempfile": [
        "tempfile.SpooledTemporaryFile",
        "tempfile._TemporaryFileCloser",
        "shutil",
        "os",
        "tempfile.TemporaryDirectory",
        "tempfile._RandomNameSequence",
        "random",
        "<builtin>.hasattr",
        "tempfile._TemporaryFileWrapper",
        "io",
        "weakref",
        "functools",
        "warnings"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile._TemporaryFileCloser": [],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "_pytest.capture.EncodedFile": [
        "<builtin>.property"
    ],
    "_pytest.capture.CaptureIO": [],
    "_pytest.capture.TeeCaptureIO": [],
    "_pytest.capture.DontReadFromInput": [
        "<builtin>.property"
    ],
    "_pytest.capture.NoCapture": [],
    "_pytest.capture.SysCaptureBinary": [],
    "_pytest.capture.SysCapture": [],
    "_pytest.capture.FDCaptureBinary": [],
    "_pytest.capture.FDCapture": [],
    "_pytest.capture.CaptureResult": [],
    "_pytest.capture.MultiCapture": [],
    "_pytest.capture.CaptureManager": [
        "contextlib.contextmanager",
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.capture.CaptureFixture": [
        "contextlib.contextmanager"
    ],
    "_pytest.debugging": [
        "_pytest.runner",
        "_pytest.config",
        "_pytest.capture",
        "argparse",
        "_pytest.debugging.PdbInvoke",
        "_pytest.config.exceptions",
        "typing",
        "_pytest.reports",
        "_pytest.config.argparsing",
        "_pytest.outcomes",
        "_pytest._code",
        "_pytest.debugging.pytestPDB",
        "_pytest.debugging.PdbTrace",
        "_pytest.nodes",
        "functools",
        "types"
    ],
    "_pytest.debugging.pytestPDB": [
        "<builtin>.classmethod"
    ],
    "_pytest.debugging.PdbInvoke": [],
    "_pytest.debugging.PdbTrace": [
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.freeze_support": [
        "types",
        "typing"
    ],
    "_pytest.logging": [
        "_pytest.config",
        "_pytest.terminal",
        "_pytest.config.argparsing",
        "_pytest.logging.LoggingPlugin",
        "_pytest.compat",
        "contextlib",
        "re",
        "os",
        "_pytest.fixtures.fixture",
        "_pytest._io",
        "_pytest.logging._FileHandler",
        "typing",
        "_pytest.logging.catching_logs",
        "_pytest.logging.LogCaptureHandler",
        "_pytest.deprecated",
        "logging",
        "_pytest.main",
        "_pytest.capture",
        "_pytest.logging._LiveLoggingNullHandler",
        "_pytest.logging.ColoredLevelFormatter",
        "pathlib",
        "re.compile",
        "typing.TypeVar.__init__",
        "_pytest.nodes",
        "pluggy._hooks.HookimplMarker.__init__",
        "_pytest.logging._LiveLoggingStreamHandler",
        "_pytest.store",
        "_pytest.logging.PercentStyleMultiline",
        "io",
        "_pytest.fixtures",
        "_pytest.logging.LogCaptureFixture"
    ],
    "_pytest.logging.ColoredLevelFormatter": [
        "<builtin>.set",
        "re.compile"
    ],
    "_pytest.logging.PercentStyleMultiline": [
        "<builtin>.staticmethod"
    ],
    "_pytest.logging.catching_logs": [],
    "_pytest.logging.LogCaptureHandler": [],
    "_pytest.logging.LogCaptureFixture": [
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "_pytest.logging.LoggingPlugin": [
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.logging._FileHandler": [],
    "_pytest.logging._LiveLoggingStreamHandler": [],
    "_pytest.logging._LiveLoggingNullHandler": [],
    "_pytest.monkeypatch": [
        "typing.TypeVar.__init__",
        "re",
        "os",
        "_pytest.fixtures.fixture",
        "_pytest.monkeypatch.Notset",
        "_pytest.monkeypatch.MonkeyPatch",
        "typing",
        "pathlib",
        "_pytest.warning_types",
        "re.compile",
        "_pytest.compat",
        "contextlib",
        "_pytest.fixtures",
        "warnings"
    ],
    "_pytest.monkeypatch.Notset": [],
    "_pytest.monkeypatch.MonkeyPatch": [
        "typing.overload",
        "contextlib.contextmanager",
        "<builtin>.classmethod"
    ],
    "_pytest.pytester": [
        "_pytest.config",
        "_pytest.pytester.SysPathsSnapshot",
        "pexpect",
        "_pytest.pytester.LineComp",
        "_pytest.timing",
        "_pytest.config.argparsing",
        "collections.abc",
        "_pytest._code",
        "importlib",
        "weakref",
        "contextlib",
        "_pytest.compat",
        "_pytest.pytester.PytestArg",
        "_pytest.pytester.LsofFdLeakChecker",
        "subprocess",
        "re",
        "shutil",
        "os",
        "_pytest.fixtures.fixture",
        "_pytest.pytester.ParsedCall",
        "traceback",
        "typing",
        "py",
        "_pytest.warning_types",
        "_pytest.pytester.LineMatcher",
        "_pytest.deprecated",
        "_pytest.main",
        "_pytest.capture",
        "_pytest.pytester.HookRecorder",
        "_pytest.pytester.RunResult",
        "_pytest.pytester.CwdSnapshot",
        "typing_extensions",
        "pathlib",
        "_pytest.reports",
        "re.compile",
        "iniconfig",
        "attr",
        "_pytest.nodes",
        "_pytest.pytester.SysModulesSnapshot",
        "_pytest.pathlib",
        "_pytest.pytester.Pytester",
        "fnmatch",
        "platform",
        "_pytest.tmpdir",
        "_pytest.outcomes",
        "io",
        "_pytest.pytester.Testdir",
        "_pytest.monkeypatch",
        "_pytest.fixtures"
    ],
    "_pytest.tmpdir": [
        "_pytest.pathlib",
        "re",
        "_pytest.config",
        "_pytest.tmpdir.TempPathFactory",
        "_pytest.tmpdir.TempdirFactory",
        "os",
        "_pytest.fixtures.fixture",
        "typing",
        "pathlib",
        "tempfile",
        "py",
        "_pytest.compat",
        "attr",
        "_pytest.deprecated",
        "_pytest.monkeypatch",
        "_pytest.fixtures"
    ],
    "_pytest.tmpdir.TempPathFactory": [
        "attr._make.attrib",
        "<builtin>.classmethod"
    ],
    "_pytest.tmpdir.TempdirFactory": [
        "attr._make.attrib"
    ],
    "pexpect": [
        "pexpect.exceptions",
        "pexpect.run",
        "pexpect.expect",
        "pexpect.utils",
        "pexpect.pty_spawn"
    ],
    "pexpect.exceptions": [
        "pexpect.exceptions.TIMEOUT",
        "pexpect.exceptions.EOF",
        "pexpect.exceptions.ExceptionPexpect",
        "traceback"
    ],
    "pexpect.exceptions.ExceptionPexpect": [],
    "pexpect.exceptions.EOF": [],
    "pexpect.exceptions.TIMEOUT": [],
    "pexpect.utils": [
        "select",
        "stat",
        "os"
    ],
    "pexpect.expect": [
        "pexpect.expect.Expecter",
        "pexpect.expect.searcher_string",
        "pexpect.expect.searcher_re",
        "pexpect.exceptions"
    ],
    "pexpect.expect.Expecter": [],
    "pexpect.expect.searcher_string": [],
    "pexpect.expect.searcher_re": [],
    "pexpect.pty_spawn": [
        "contextlib.contextmanager",
        "pexpect.pty_spawn.spawn",
        "os",
        "signal",
        "pexpect.exceptions",
        "ptyprocess",
        "tty",
        "pexpect.utils",
        "contextlib",
        "pexpect.spawnbase",
        "pty",
        "ptyprocess.ptyprocess"
    ],
    "pty": [
        "select",
        "tty",
        "os"
    ],
    "tty": [
        "termios"
    ],
    "termios": [],
    "ptyprocess": [
        "ptyprocess.ptyprocess"
    ],
    "ptyprocess.ptyprocess": [
        "resource",
        "os",
        "termios",
        "codecs",
        "signal",
        "ptyprocess.ptyprocess.TimeoutError",
        "struct",
        "io",
        "ptyprocess._fork_pty",
        "ptyprocess.ptyprocess.PtyProcessUnicode",
        "ptyprocess.ptyprocess.FileNotFoundError",
        "pty",
        "ptyprocess.ptyprocess.PtyProcess",
        "ptyprocess.util",
        "fcntl"
    ],
    "fcntl": [],
    "resource": [],
    "ptyprocess.util": [
        "ptyprocess.util.PtyProcessError",
        "shutil",
        "os"
    ],
    "ptyprocess.util.PtyProcessError": [],
    "ptyprocess._fork_pty": [
        "pty",
        "ptyprocess.util",
        "os"
    ],
    "ptyprocess.ptyprocess.FileNotFoundError": [],
    "ptyprocess.ptyprocess.TimeoutError": [],
    "ptyprocess.ptyprocess.PtyProcess": [
        "<str>.encode",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "ptyprocess.ptyprocess.PtyProcessUnicode": [],
    "pexpect.spawnbase": [
        "re",
        "os",
        "codecs",
        "pexpect.exceptions",
        "pexpect.spawnbase._NullCoder",
        "pexpect.expect",
        "io",
        "pexpect.spawnbase.SpawnBase"
    ],
    "pexpect.spawnbase._NullCoder": [
        "<builtin>.staticmethod"
    ],
    "pexpect.spawnbase.SpawnBase": [
        "<builtin>.property"
    ],
    "pexpect.pty_spawn.spawn": [
        "<builtin>.property",
        "<builtin>.chr"
    ],
    "pexpect.run": [
        "pexpect.exceptions",
        "types",
        "pexpect.pty_spawn"
    ],
    "_pytest.pytester.LsofFdLeakChecker": [
        "pluggy._hooks.HookimplMarker.__init__"
    ],
    "_pytest.pytester.PytestArg": [],
    "_pytest.pytester.ParsedCall": [],
    "_pytest.pytester.HookRecorder": [
        "typing.overload"
    ],
    "_pytest.pytester.RunResult": [
        "<builtin>.classmethod"
    ],
    "_pytest.pytester.CwdSnapshot": [],
    "_pytest.pytester.SysModulesSnapshot": [],
    "_pytest.pytester.SysPathsSnapshot": [],
    "_pytest.pytester.Pytester": [
        "<builtin>.property",
        "_pytest.pytester.Pytester.TimeoutExpired"
    ],
    "_pytest.pytester.Pytester.TimeoutExpired": [],
    "_pytest.pytester.LineComp": [],
    "_pytest.pytester.Testdir": [
        "<builtin>.property"
    ],
    "_pytest.pytester.LineMatcher": [
        "<builtin>.property"
    ],
    "_pytest.python_api": [
        "decimal",
        "collections.abc",
        "_pytest._code",
        "_pytest.compat",
        "math",
        "_pytest.python_api.ApproxScalar",
        "numbers",
        "typing",
        "typing.overload",
        "_pytest.python_api.ApproxNumpy",
        "_pytest.python_api.ApproxMapping",
        "_pytest.python_api.RaisesContext",
        "_pytest.python_api.ApproxBase",
        "typing.TypeVar.__init__",
        "_pytest.python_api.ApproxSequencelike",
        "types",
        "_pytest.python_api.ApproxDecimal",
        "pprint",
        "_pytest.outcomes",
        "numpy"
    ],
    "decimal": [
        "_pydecimal",
        "decimal"
    ],
    "_pydecimal": [
        "_pydecimal.Rounded",
        "_pydecimal.InvalidOperation",
        "_pydecimal.ConversionSyntax",
        "collections",
        "_pydecimal._Log10Memoize",
        "collections.namedtuple",
        "math",
        "_pydecimal._Log10Memoize.__init__",
        "_pydecimal._ContextManager",
        "numbers",
        "_pydecimal.DivisionByZero",
        "re",
        "contextvars",
        "<builtin>.pow",
        "_pydecimal.InvalidContext",
        "_pydecimal.Inexact",
        "_pydecimal.Subnormal",
        "_pydecimal.DecimalException",
        "_pydecimal.Context",
        "_pydecimal.DivisionImpossible",
        "_pydecimal.Overflow",
        "_pydecimal.FloatOperation",
        "_pydecimal.Clamped",
        "_pydecimal.DivisionUndefined",
        "re.compile",
        "locale",
        "_pydecimal.Underflow",
        "_pydecimal.Context.__init__",
        "_pydecimal.Decimal",
        "_pydecimal._WorkRep"
    ],
    "numbers": [
        "numbers.Real",
        "numbers.Rational",
        "numbers.Complex",
        "abc",
        "numbers.Number",
        "numbers.Integral"
    ],
    "numbers.Number": [],
    "numbers.Complex": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Real": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Rational": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Integral": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "_pydecimal.DecimalException": [],
    "_pydecimal.Clamped": [],
    "_pydecimal.InvalidOperation": [],
    "_pydecimal.ConversionSyntax": [],
    "_pydecimal.DivisionByZero": [],
    "_pydecimal.DivisionImpossible": [],
    "_pydecimal.DivisionUndefined": [],
    "_pydecimal.Inexact": [],
    "_pydecimal.InvalidContext": [],
    "_pydecimal.Rounded": [],
    "_pydecimal.Subnormal": [],
    "_pydecimal.Overflow": [],
    "_pydecimal.Underflow": [],
    "_pydecimal.FloatOperation": [],
    "contextvars": [
        "_contextvars"
    ],
    "_contextvars": [],
    "_pydecimal.Decimal": [
        "<builtin>.dict",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "_pydecimal._ContextManager": [],
    "_pydecimal.Context": [],
    "_pydecimal._WorkRep": [],
    "_pydecimal._Log10Memoize": [],
    "_pydecimal._Log10Memoize.__init__": [],
    "_pydecimal.Context.__init__": [
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "<builtin>.pow": [],
    "numpy": [
        "<builtin>.ImportError",
        "warnings.catch_warnings.__init__",
        "<builtin>.globals",
        "numpy._sanity_check",
        "<builtin>.tuple",
        "<builtin>.RuntimeError",
        "<builtin>.getattr",
        "_version.get_versions",
        "os",
        "numpy._pytesttester",
        "<map>.update",
        "warnings",
        "numpy._pytesttester.PytestTester.__init__",
        "<builtin>.int",
        "<map>.items",
        "<builtin>.len",
        "<builtin>.str",
        "numpy.testing",
        "numpy._mac_os_check",
        "warnings.filterwarnings",
        "numpy.__config__"
    ],
    "numpy.__config__": [
        "ntpath.dirname",
        "nt._isdir",
        "os",
        "os.add_dll_directory",
        "posixpath.dirname",
        "ntpath.join",
        "genericpath.isdir",
        "posixpath.join",
        "os._Environ.setdefault"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "nt._isdir": [],
    "os._Environ.setdefault": [],
    "os.add_dll_directory": [
        "os._AddedDllDirectory.__init__"
    ],
    "os._AddedDllDirectory.__init__": [],
    "_version.get_versions": [],
    "numpy.testing": [
        "numpy.testing._private.decorators",
        "numpy.testing._private.nosetester",
        "numpy._pytesttester.PytestTester.__init__",
        "unittest",
        "numpy.testing._private.utils",
        "numpy._pytesttester"
    ],
    "unittest": [
        "unittest.signals",
        "unittest.loader",
        "unittest.async_case",
        "unittest.case",
        "unittest.suite",
        "unittest.result",
        "unittest.main",
        "unittest.runner"
    ],
    "unittest.result": [
        "unittest.result.TestResult",
        "unittest.util",
        "traceback",
        "io",
        "functools"
    ],
    "unittest.util": [
        "collections.namedtuple",
        "collections",
        "posixpath"
    ],
    "unittest.result.TestResult": [
        "unittest.result.failfast"
    ],
    "unittest.result.failfast": [
        "functools.wraps"
    ],
    "unittest.async_case": [
        "unittest.async_case.IsolatedAsyncioTestCase",
        "unittest.case",
        "asyncio",
        "inspect"
    ],
    "asyncio": [
        "asyncio.base_events",
        "asyncio.locks",
        "asyncio.runners",
        "asyncio.tasks",
        "asyncio.events",
        "asyncio.protocols",
        "asyncio.transports",
        "asyncio.windows_events",
        "asyncio.subprocess",
        "asyncio.futures",
        "asyncio.queues",
        "asyncio.exceptions",
        "asyncio.coroutines",
        "asyncio.streams"
    ],
    "asyncio.base_events": [
        "socket",
        "asyncio.transports",
        "asyncio.constants",
        "collections",
        "collections.abc",
        "weakref",
        "functools",
        "asyncio.coroutines",
        "subprocess",
        "asyncio.sslproto",
        "asyncio.log",
        "os",
        "asyncio.trsock",
        "concurrent.futures",
        "asyncio.staggered",
        "traceback",
        "threading",
        "asyncio.futures",
        "warnings",
        "asyncio.tasks",
        "asyncio.base_events.BaseEventLoop",
        "<builtin>.object",
        "ssl",
        "asyncio.protocols",
        "asyncio.events",
        "stat",
        "<builtin>.hasattr",
        "asyncio.base_events._SendfileFallbackProtocol",
        "asyncio.base_events.Server",
        "asyncio.exceptions",
        "heapq"
    ],
    "concurrent.futures": [
        "concurrent.futures._base"
    ],
    "concurrent.futures._base": [
        "concurrent.futures._base.Future",
        "concurrent.futures._base.TimeoutError",
        "concurrent.futures._base.Error",
        "collections",
        "concurrent.futures._base.InvalidStateError",
        "concurrent.futures._base._AsCompletedWaiter",
        "concurrent.futures._base._AllCompletedWaiter",
        "threading",
        "concurrent.futures._base._FirstCompletedWaiter",
        "concurrent.futures._base.Executor",
        "concurrent.futures._base.BrokenExecutor",
        "logging.getLogger",
        "collections.namedtuple",
        "concurrent.futures._base._AcquireFutures",
        "logging",
        "concurrent.futures._base._Waiter",
        "concurrent.futures._base.CancelledError"
    ],
    "logging.getLogger": [],
    "concurrent.futures._base.Error": [],
    "concurrent.futures._base.CancelledError": [],
    "concurrent.futures._base.TimeoutError": [],
    "concurrent.futures._base.InvalidStateError": [],
    "concurrent.futures._base._Waiter": [],
    "concurrent.futures._base._AsCompletedWaiter": [],
    "concurrent.futures._base._FirstCompletedWaiter": [],
    "concurrent.futures._base._AllCompletedWaiter": [],
    "concurrent.futures._base._AcquireFutures": [],
    "concurrent.futures._base.Future": [],
    "concurrent.futures._base.Executor": [],
    "concurrent.futures._base.BrokenExecutor": [],
    "ssl": [
        "ssl.SSLContext",
        "ssl.Purpose",
        "socket",
        "collections",
        "<builtin>.getattr",
        "collections.namedtuple",
        "ssl._TLSContentType",
        "os",
        "warnings",
        "ssl._TLSMessageType",
        "ssl.SSLObject",
        "ssl.SSLSocket",
        "ssl._TLSAlertType",
        "ssl._ASN1Object",
        "base64",
        "enum",
        "ssl.TLSVersion",
        "<builtin>.hasattr",
        "_ssl"
    ],
    "_ssl": [],
    "ssl.TLSVersion": [],
    "ssl._TLSContentType": [],
    "ssl._TLSAlertType": [],
    "ssl._TLSMessageType": [],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.Purpose": [],
    "ssl.SSLContext": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "ssl.SSLObject": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ssl.SSLSocket": [
        "ssl._sslcopydoc",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "asyncio.constants": [
        "enum",
        "asyncio.constants._SendfileMode"
    ],
    "asyncio.constants._SendfileMode": [],
    "asyncio.coroutines": [
        "warnings",
        "types",
        "asyncio.log",
        "os",
        "asyncio.coroutines._is_debug_mode",
        "asyncio.constants",
        "traceback",
        "<builtin>.object",
        "asyncio.base_futures",
        "collections.abc",
        "functools",
        "<builtin>.set",
        "asyncio.format_helpers",
        "inspect",
        "asyncio.coroutines.CoroWrapper"
    ],
    "asyncio.base_futures": [
        "reprlib",
        "asyncio.format_helpers"
    ],
    "asyncio.format_helpers": [
        "reprlib",
        "asyncio.constants",
        "traceback",
        "functools",
        "inspect"
    ],
    "asyncio.log": [
        "logging.getLogger",
        "logging"
    ],
    "asyncio.coroutines._is_debug_mode": [
        "<builtin>.bool"
    ],
    "asyncio.coroutines.CoroWrapper": [
        "<builtin>.property"
    ],
    "asyncio.events": [
        "asyncio.events.AbstractServer",
        "contextvars",
        "socket",
        "asyncio.events.AbstractEventLoopPolicy",
        "os",
        "_asyncio",
        "asyncio.events._RunningLoop",
        "asyncio.events.AbstractEventLoop",
        "threading",
        "asyncio.events.BaseDefaultEventLoopPolicy",
        "asyncio.events.Handle",
        "asyncio.exceptions",
        "asyncio.events.TimerHandle",
        "asyncio.format_helpers",
        "subprocess"
    ],
    "asyncio.exceptions": [
        "asyncio.exceptions.SendfileNotAvailableError",
        "asyncio.exceptions.InvalidStateError",
        "asyncio.exceptions.TimeoutError",
        "asyncio.exceptions.LimitOverrunError",
        "asyncio.exceptions.IncompleteReadError",
        "asyncio.exceptions.CancelledError"
    ],
    "asyncio.exceptions.CancelledError": [],
    "asyncio.exceptions.TimeoutError": [],
    "asyncio.exceptions.InvalidStateError": [],
    "asyncio.exceptions.SendfileNotAvailableError": [],
    "asyncio.exceptions.IncompleteReadError": [],
    "asyncio.exceptions.LimitOverrunError": [],
    "asyncio.events.Handle": [],
    "asyncio.events.TimerHandle": [],
    "asyncio.events.AbstractServer": [],
    "asyncio.events.AbstractEventLoop": [],
    "asyncio.events.AbstractEventLoopPolicy": [],
    "asyncio.events.BaseDefaultEventLoopPolicy": [
        "asyncio.events.BaseDefaultEventLoopPolicy._Local"
    ],
    "asyncio.events.BaseDefaultEventLoopPolicy._Local": [],
    "asyncio.events._RunningLoop": [],
    "_asyncio": [],
    "asyncio.futures": [
        "contextvars",
        "asyncio.events",
        "asyncio.futures.Future",
        "_asyncio",
        "concurrent.futures",
        "asyncio.base_futures",
        "asyncio.format_helpers",
        "asyncio.exceptions",
        "logging"
    ],
    "asyncio.futures.Future": [
        "<builtin>.property"
    ],
    "asyncio.protocols": [
        "asyncio.protocols.SubprocessProtocol",
        "asyncio.protocols.BufferedProtocol",
        "asyncio.protocols.DatagramProtocol",
        "asyncio.protocols.BaseProtocol",
        "asyncio.protocols.Protocol"
    ],
    "asyncio.protocols.BaseProtocol": [],
    "asyncio.protocols.Protocol": [],
    "asyncio.protocols.BufferedProtocol": [],
    "asyncio.protocols.DatagramProtocol": [],
    "asyncio.protocols.SubprocessProtocol": [],
    "asyncio.sslproto": [
        "asyncio.sslproto._SSLProtocolTransport",
        "asyncio.base_events",
        "asyncio.log",
        "asyncio.transports",
        "asyncio.constants",
        "collections",
        "ssl",
        "asyncio.sslproto.SSLProtocol",
        "asyncio.sslproto._SSLPipe",
        "asyncio.protocols",
        "warnings"
    ],
    "asyncio.transports": [
        "asyncio.transports._FlowControlMixin",
        "asyncio.transports.ReadTransport",
        "asyncio.transports.Transport",
        "asyncio.transports.SubprocessTransport",
        "asyncio.transports.DatagramTransport",
        "asyncio.transports.BaseTransport",
        "asyncio.transports.WriteTransport"
    ],
    "asyncio.transports.BaseTransport": [],
    "asyncio.transports.ReadTransport": [],
    "asyncio.transports.WriteTransport": [],
    "asyncio.transports.Transport": [],
    "asyncio.transports.DatagramTransport": [],
    "asyncio.transports.SubprocessTransport": [],
    "asyncio.transports._FlowControlMixin": [],
    "asyncio.sslproto._SSLPipe": [
        "<builtin>.property"
    ],
    "asyncio.sslproto._SSLProtocolTransport": [
        "<builtin>.property"
    ],
    "asyncio.sslproto.SSLProtocol": [],
    "asyncio.staggered": [
        "asyncio.locks",
        "asyncio.tasks",
        "asyncio.events",
        "typing",
        "contextlib",
        "asyncio.exceptions"
    ],
    "asyncio.locks": [
        "types",
        "asyncio.locks.Semaphore",
        "asyncio.events",
        "asyncio.locks.Event",
        "asyncio.locks.Condition",
        "collections",
        "asyncio.locks.BoundedSemaphore",
        "asyncio.locks.Lock",
        "asyncio.locks._ContextManagerMixin",
        "asyncio.futures",
        "asyncio.locks._ContextManager",
        "asyncio.exceptions",
        "asyncio.coroutines",
        "warnings"
    ],
    "asyncio.locks._ContextManager": [],
    "asyncio.locks._ContextManagerMixin": [
        "types.coroutine"
    ],
    "types.coroutine": [
        "<builtin>.callable",
        "functools.wraps",
        "collections.abc",
        "<builtin>.getattr",
        "<builtin>.TypeError",
        "functools"
    ],
    "asyncio.locks.Lock": [],
    "asyncio.locks.Event": [],
    "asyncio.locks.Condition": [],
    "asyncio.locks.Semaphore": [],
    "asyncio.locks.BoundedSemaphore": [],
    "asyncio.tasks": [
        "warnings",
        "asyncio.tasks._GatheringFuture",
        "contextvars",
        "asyncio.events",
        "inspect",
        "types.coroutine",
        "_asyncio",
        "_weakrefset.WeakSet.__init__",
        "concurrent.futures",
        "asyncio.base_tasks",
        "asyncio.exceptions",
        "asyncio.tasks.Task",
        "weakref",
        "asyncio.futures",
        "functools",
        "asyncio.coroutines",
        "types"
    ],
    "asyncio.base_tasks": [
        "linecache",
        "asyncio.coroutines",
        "asyncio.base_futures",
        "traceback"
    ],
    "asyncio.tasks.Task": [
        "<builtin>.classmethod"
    ],
    "asyncio.tasks._GatheringFuture": [],
    "asyncio.trsock": [
        "socket",
        "asyncio.trsock.TransportSocket",
        "warnings"
    ],
    "asyncio.trsock.TransportSocket": [
        "<builtin>.property"
    ],
    "asyncio.base_events._SendfileFallbackProtocol": [],
    "asyncio.base_events.Server": [
        "<builtin>.property"
    ],
    "asyncio.base_events.BaseEventLoop": [],
    "asyncio.runners": [
        "asyncio.tasks",
        "asyncio.coroutines",
        "asyncio.events"
    ],
    "asyncio.queues": [
        "asyncio.locks",
        "asyncio.events",
        "asyncio.queues.PriorityQueue",
        "collections",
        "asyncio.queues.QueueEmpty",
        "asyncio.queues.QueueFull",
        "asyncio.queues.Queue",
        "asyncio.queues.LifoQueue",
        "heapq",
        "warnings"
    ],
    "asyncio.queues.QueueEmpty": [],
    "asyncio.queues.QueueFull": [],
    "asyncio.queues.Queue": [
        "<builtin>.property"
    ],
    "asyncio.queues.PriorityQueue": [],
    "asyncio.queues.LifoQueue": [],
    "asyncio.streams": [
        "socket",
        "asyncio.log",
        "asyncio.tasks",
        "asyncio.events",
        "asyncio.protocols",
        "asyncio.streams.StreamReaderProtocol",
        "asyncio.streams.StreamWriter",
        "asyncio.streams.StreamReader",
        "<builtin>.hasattr",
        "weakref",
        "asyncio.exceptions",
        "asyncio.coroutines",
        "asyncio.format_helpers",
        "warnings",
        "asyncio.streams.FlowControlMixin"
    ],
    "asyncio.streams.FlowControlMixin": [],
    "asyncio.streams.StreamReaderProtocol": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamWriter": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamReader": [],
    "asyncio.subprocess": [
        "subprocess",
        "asyncio.log",
        "asyncio.tasks",
        "asyncio.subprocess.SubprocessStreamProtocol",
        "asyncio.events",
        "asyncio.subprocess.Process",
        "asyncio.protocols",
        "warnings",
        "asyncio.streams"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol": [],
    "asyncio.subprocess.Process": [
        "<builtin>.property"
    ],
    "asyncio.windows_events": [
        "asyncio.windows_events._BaseWaitHandleFuture",
        "asyncio.windows_events.ProactorEventLoop",
        "socket",
        "asyncio.windows_utils",
        "asyncio.windows_events._WaitHandleFuture",
        "weakref",
        "asyncio.windows_events.PipeServer",
        "math",
        "asyncio.windows_events.WindowsSelectorEventLoopPolicy",
        "asyncio.log",
        "asyncio.windows_events._WindowsSubprocessTransport",
        "asyncio.proactor_events",
        "asyncio.base_subprocess",
        "asyncio.futures",
        "asyncio.tasks",
        "asyncio.windows_events.IocpProactor",
        "asyncio.windows_events.WindowsProactorEventLoopPolicy",
        "asyncio.events",
        "asyncio.windows_events._WaitCancelFuture",
        "asyncio.windows_events._OverlappedFuture",
        "asyncio.windows_events._WindowsSelectorEventLoop",
        "struct",
        "asyncio.selector_events",
        "asyncio.exceptions"
    ],
    "asyncio.base_subprocess": [
        "asyncio.base_subprocess.BaseSubprocessTransport",
        "asyncio.log",
        "asyncio.transports",
        "asyncio.base_subprocess.WriteSubprocessPipeProto",
        "collections",
        "asyncio.base_subprocess.ReadSubprocessPipeProto",
        "asyncio.protocols",
        "warnings",
        "subprocess"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport": [],
    "asyncio.base_subprocess.WriteSubprocessPipeProto": [],
    "asyncio.base_subprocess.ReadSubprocessPipeProto": [],
    "asyncio.proactor_events": [
        "socket",
        "asyncio.transports",
        "asyncio.constants",
        "collections",
        "asyncio.proactor_events.BaseProactorEventLoop",
        "asyncio.base_events",
        "asyncio.sslproto",
        "asyncio.log",
        "asyncio.proactor_events._ProactorDatagramTransport",
        "os",
        "asyncio.trsock",
        "asyncio.proactor_events._ProactorSocketTransport",
        "asyncio.proactor_events._ProactorBasePipeTransport",
        "threading",
        "asyncio.proactor_events._ProactorWritePipeTransport",
        "asyncio.futures",
        "asyncio.proactor_events._ProactorReadPipeTransport",
        "warnings",
        "signal",
        "asyncio.protocols",
        "asyncio.proactor_events._ProactorDuplexPipeTransport",
        "io",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport",
        "asyncio.exceptions"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport": [],
    "asyncio.proactor_events._ProactorReadPipeTransport": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport": [],
    "asyncio.proactor_events._ProactorWritePipeTransport": [],
    "asyncio.proactor_events._ProactorDatagramTransport": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport": [],
    "asyncio.proactor_events._ProactorSocketTransport": [],
    "asyncio.proactor_events.BaseProactorEventLoop": [],
    "asyncio.selector_events": [
        "socket",
        "asyncio.transports",
        "asyncio.constants",
        "collections",
        "weakref",
        "functools",
        "asyncio.selector_events.BaseSelectorEventLoop",
        "asyncio.base_events",
        "asyncio.sslproto",
        "asyncio.log",
        "asyncio.selector_events._SelectorSocketTransport",
        "asyncio.trsock",
        "asyncio.selector_events._SelectorTransport",
        "asyncio.futures",
        "warnings",
        "ssl",
        "asyncio.protocols",
        "asyncio.events",
        "asyncio.selector_events._SelectorDatagramTransport",
        "selectors"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop": [],
    "asyncio.selector_events._SelectorTransport": [],
    "asyncio.selector_events._SelectorSocketTransport": [],
    "asyncio.selector_events._SelectorDatagramTransport": [],
    "asyncio.windows_utils": [
        "<builtin>.ImportError",
        "os",
        "asyncio.windows_utils.PipeHandle",
        "tempfile",
        "asyncio.windows_utils.Popen",
        "warnings",
        "subprocess"
    ],
    "asyncio.windows_utils.PipeHandle": [
        "<builtin>.property"
    ],
    "asyncio.windows_utils.Popen": [],
    "asyncio.windows_events._OverlappedFuture": [],
    "asyncio.windows_events._BaseWaitHandleFuture": [],
    "asyncio.windows_events._WaitCancelFuture": [],
    "asyncio.windows_events._WaitHandleFuture": [],
    "asyncio.windows_events.PipeServer": [],
    "asyncio.windows_events._WindowsSelectorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop": [],
    "asyncio.windows_events.IocpProactor": [],
    "asyncio.windows_events._WindowsSubprocessTransport": [],
    "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [],
    "asyncio.windows_events.WindowsProactorEventLoopPolicy": [],
    "unittest.case": [
        "unittest.case.TestCase",
        "collections",
        "unittest.case._CapturingHandler",
        "contextlib",
        "collections.namedtuple",
        "functools",
        "re",
        "unittest.case.SkipTest",
        "unittest.case._AssertLogsContext",
        "traceback",
        "unittest.result",
        "unittest.case._ShouldStop",
        "logging",
        "warnings",
        "difflib",
        "unittest.case._SubTest",
        "<builtin>.object",
        "unittest.case._Outcome",
        "types",
        "unittest.case._UnexpectedSuccess",
        "unittest.util",
        "unittest.case._OrderedChainMap",
        "unittest.case._AssertWarnsContext",
        "unittest.case._AssertRaisesBaseContext",
        "pprint",
        "unittest.case._BaseTestCaseContext",
        "unittest.case._AssertRaisesContext",
        "unittest.case.FunctionTestCase"
    ],
    "difflib": [
        "re",
        "difflib.SequenceMatcher",
        "collections",
        "re.compile",
        "difflib.Differ",
        "difflib.HtmlDiff",
        "collections.namedtuple",
        "heapq"
    ],
    "difflib.SequenceMatcher": [],
    "difflib.Differ": [],
    "difflib.HtmlDiff": [],
    "unittest.case.SkipTest": [],
    "unittest.case._ShouldStop": [],
    "unittest.case._UnexpectedSuccess": [],
    "unittest.case._Outcome": [
        "contextlib.contextmanager"
    ],
    "unittest.case._BaseTestCaseContext": [],
    "unittest.case._AssertRaisesBaseContext": [],
    "unittest.case._AssertRaisesContext": [],
    "unittest.case._AssertWarnsContext": [],
    "unittest.case._CapturingHandler": [],
    "unittest.case._AssertLogsContext": [],
    "unittest.case._OrderedChainMap": [],
    "unittest.case.TestCase": [
        "unittest.case.TestCase._deprecate",
        "contextlib.contextmanager",
        "<builtin>.classmethod"
    ],
    "unittest.case.TestCase._deprecate": [],
    "unittest.case.FunctionTestCase": [],
    "unittest.case._SubTest": [],
    "unittest.async_case.IsolatedAsyncioTestCase": [],
    "unittest.suite": [
        "unittest.suite._DebugResult",
        "unittest.suite.TestSuite",
        "unittest.util",
        "unittest.case",
        "unittest.suite.BaseTestSuite",
        "unittest.suite._ErrorHolder"
    ],
    "unittest.suite.BaseTestSuite": [],
    "unittest.suite.TestSuite": [],
    "unittest.suite._ErrorHolder": [],
    "unittest.suite._DebugResult": [],
    "unittest.loader": [
        "warnings",
        "re",
        "unittest.util",
        "os",
        "unittest.case",
        "fnmatch",
        "traceback",
        "unittest.suite",
        "unittest.loader.TestLoader",
        "unittest.loader._FailedTest",
        "re.compile",
        "functools",
        "types",
        "unittest.loader.TestLoader.__init__"
    ],
    "unittest.loader._FailedTest": [],
    "unittest.loader.TestLoader": [
        "<builtin>.staticmethod"
    ],
    "unittest.loader.TestLoader.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "unittest.main": [
        "unittest.signals",
        "argparse",
        "os",
        "unittest.loader",
        "unittest.main.TestProgram",
        "unittest.runner"
    ],
    "unittest.runner": [
        "unittest.signals",
        "unittest.runner.TextTestRunner",
        "unittest.result",
        "unittest.runner._WritelnDecorator",
        "unittest.runner.TextTestResult",
        "warnings"
    ],
    "unittest.signals": [
        "weakref.WeakKeyDictionary.__init__",
        "signal",
        "weakref",
        "unittest.signals._InterruptHandler",
        "functools"
    ],
    "unittest.signals._InterruptHandler": [],
    "weakref.WeakKeyDictionary.__init__": [
        "_weakref.ref",
        "<builtin>.set",
        "weakref.WeakKeyDictionary.update"
    ],
    "weakref.WeakKeyDictionary.update": [
        "_weakref.ref",
        "<builtin>.len",
        "weakref.WeakKeyDictionary.update",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "unittest.runner._WritelnDecorator": [],
    "unittest.runner.TextTestResult": [],
    "unittest.runner.TextTestRunner": [],
    "unittest.main.TestProgram": [],
    "numpy.testing._private.utils": [
        "numpy.testing._private.utils.suppress_warnings",
        "numpy.testing._private.utils.clear_and_catch_warnings",
        "numpy.testing._private.utils.KnownFailureException",
        "<builtin>.getattr",
        "contextlib",
        "functools",
        "re",
        "shutil",
        "os",
        "operator",
        "numpy.core",
        "warnings",
        "numpy.testing._private.utils._Dummy",
        "numpy.linalg.lapack_lite",
        "unittest",
        "numpy.testing._private.utils.IgnoreException",
        "platform.python_implementation",
        "contextlib.contextmanager",
        "unittest.case",
        "platform",
        "tempfile",
        "pprint",
        "io",
        "numpy"
    ],
    "numpy.core": [
        "numpy._pytesttester.PytestTester.__init__",
        "<builtin>.ImportError",
        "os",
        "numpy.version",
        "copyreg.pickle",
        "numpy._pytesttester",
        "<builtin>.hasattr",
        "<builtin>.type",
        "copyreg"
    ],
    "numpy.version": [
        "_version.get_versions"
    ],
    "numpy._pytesttester": [
        "numpy._pytesttester.PytestTester",
        "os"
    ],
    "numpy._pytesttester.PytestTester": [],
    "numpy._pytesttester.PytestTester.__init__": [],
    "numpy.linalg.lapack_lite": [],
    "numpy.testing._private.utils.KnownFailureException": [],
    "numpy.testing._private.utils._Dummy": [],
    "numpy.testing._private.utils.IgnoreException": [],
    "numpy.testing._private.utils.clear_and_catch_warnings": [],
    "numpy.testing._private.utils.suppress_warnings": [],
    "numpy.testing._private.decorators": [
        "numpy.testing._private.utils",
        "collections.abc",
        "warnings",
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.testing._private.decorators.skipif": [],
    "numpy.testing._private.nosetester": [
        "os",
        "numpy.testing._private.utils",
        "numpy.testing._private.nosetester.NoseTester",
        "numpy",
        "warnings"
    ],
    "numpy.testing._private.nosetester.NoseTester": [],
    "numpy._sanity_check": [
        "<builtin>.abs",
        "<builtin>.RuntimeError",
        "<builtin>.AssertionError"
    ],
    "<builtin>.abs": [],
    "numpy._mac_os_check": [],
    "_pytest.python_api.ApproxBase": [],
    "_pytest.python_api.ApproxNumpy": [],
    "_pytest.python_api.ApproxMapping": [],
    "_pytest.python_api.ApproxSequencelike": [],
    "_pytest.python_api.ApproxScalar": [
        "<builtin>.property"
    ],
    "_pytest.python_api.ApproxDecimal": [],
    "_pytest.python_api.RaisesContext": [],
    "_pytest.recwarn": [
        "typing.TypeVar.__init__",
        "re",
        "types",
        "_pytest.fixtures.fixture",
        "typing.overload",
        "_pytest.recwarn.WarningsRecorder",
        "_pytest.recwarn.WarningsChecker",
        "typing",
        "_pytest.outcomes",
        "_pytest.compat",
        "_pytest.deprecated",
        "_pytest.fixtures",
        "warnings"
    ],
    "_pytest.recwarn.WarningsRecorder": [
        "<builtin>.property"
    ],
    "_pytest.recwarn.WarningsChecker": [],
    "networkx.classes.function": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.classes.graphviews",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.classes.graphviews": [
        "networkx.classes.coreviews",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.exception",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.classes.filters"
    ],
    "networkx.classes.filters": [
        "networkx.classes.filters.show_nodes"
    ],
    "networkx.classes.filters.show_nodes": [],
    "networkx.utils.decorators.not_implemented_for": [
        "<builtin>.KeyError",
        "<builtin>.set",
        "networkx.utils.decorators.argmap.__init__",
        "<builtin>.ValueError"
    ],
    "networkx.convert_matrix": [
        "networkx",
        "collections",
        "networkx.utils"
    ],
    "networkx.relabel": [
        "networkx"
    ],
    "networkx.generators": [
        "networkx.generators.joint_degree_seq",
        "networkx.generators.nonisomorphic_trees",
        "networkx.generators.mycielski",
        "networkx.generators.expanders",
        "networkx.generators.internet_as_graphs",
        "networkx.generators.lattice",
        "networkx.generators.directed",
        "networkx.generators.stochastic",
        "networkx.generators.social",
        "networkx.generators.line",
        "networkx.generators.trees",
        "networkx.generators.sudoku",
        "networkx.generators.atlas",
        "networkx.generators.classic",
        "networkx.generators.cographs",
        "networkx.generators.random_graphs",
        "networkx.generators.interval_graph",
        "networkx.generators.geometric",
        "networkx.generators.duplication",
        "networkx.generators.ego",
        "networkx.generators.degree_seq",
        "networkx.generators.spectral_graph_forge",
        "networkx.generators.intersection",
        "networkx.generators.small",
        "networkx.generators.triads",
        "networkx.generators.community",
        "networkx.generators.random_clustered"
    ],
    "networkx.generators.atlas": [
        "ntpath.dirname",
        "networkx",
        "os",
        "posixpath",
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.join",
        "ntpath.abspath",
        "gzip",
        "posixpath.abspath"
    ],
    "networkx.generators.classic": [
        "networkx",
        "networkx.classes",
        "networkx.utils",
        "networkx.exception",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.nodes_or_number",
        "numbers"
    ],
    "networkx.utils.decorators.nodes_or_number": [
        "<builtin>.iter",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.generators.cographs": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.utils.py_random_state": [],
    "networkx.generators.community": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "math"
    ],
    "networkx.generators.degree_seq": [
        "networkx",
        "networkx.generators.degree_seq.DegreeSequenceRandomGraph",
        "operator",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "math",
        "heapq"
    ],
    "networkx.generators.degree_seq.DegreeSequenceRandomGraph": [],
    "networkx.generators.directed": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "collections",
        "networkx.generators.classic",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "numbers"
    ],
    "networkx.generators.duplication": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.exception",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.generators.ego": [
        "networkx.classes.backends._dispatch",
        "networkx"
    ],
    "networkx.classes.backends._dispatch": [
        "functools.wraps",
        "<builtin>.isinstance",
        "networkx.classes.backends._register_algo"
    ],
    "networkx.classes.backends._register_algo": [
        "<builtin>.KeyError"
    ],
    "networkx.generators.expanders": [
        "networkx"
    ],
    "networkx.generators.geometric": [
        "networkx",
        "bisect",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "math"
    ],
    "networkx.generators.internet_as_graphs": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "networkx.generators.internet_as_graphs.AS_graph_generator"
    ],
    "networkx.generators.internet_as_graphs.AS_graph_generator": [],
    "networkx.generators.intersection": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.generators.interval_graph": [
        "networkx",
        "collections.abc"
    ],
    "networkx.generators.joint_degree_seq": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.generators.lattice": [
        "networkx.classes",
        "networkx.generators.classic",
        "networkx.utils",
        "networkx.exception",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.nodes_or_number",
        "math",
        "networkx.relabel"
    ],
    "networkx.generators.line": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.utils.decorators",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "functools"
    ],
    "networkx.generators.mycielski": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.generators.nonisomorphic_trees": [
        "networkx"
    ],
    "networkx.generators.random_clustered": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.generators.random_graphs": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "collections",
        "networkx.generators.classic",
        "networkx.utils",
        "networkx.generators.degree_seq",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "math"
    ],
    "networkx.generators.small": [
        "networkx",
        "networkx.generators.classic",
        "networkx.exception",
        "functools",
        "networkx.generators.small._raise_on_directed"
    ],
    "networkx.generators.small._raise_on_directed": [
        "functools.wraps"
    ],
    "networkx.generators.social": [
        "networkx"
    ],
    "networkx.generators.sudoku": [
        "networkx",
        "networkx.exception"
    ],
    "networkx.generators.spectral_graph_forge": [
        "networkx.utils.decorators.np_random_state",
        "networkx.utils.decorators.argmap.__init__",
        "networkx",
        "networkx.utils"
    ],
    "networkx.utils.decorators.np_random_state": [
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.generators.stochastic": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.classes"
    ],
    "networkx.generators.trees": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.generators.triads": [
        "networkx.classes"
    ],
    "networkx.readwrite": [
        "networkx.readwrite.json_graph",
        "networkx.readwrite.graph6",
        "networkx.readwrite.leda",
        "networkx.readwrite.gml",
        "networkx.readwrite.multiline_adjlist",
        "networkx.readwrite.graphml",
        "networkx.readwrite.text",
        "networkx.readwrite.edgelist",
        "networkx.readwrite.pajek",
        "networkx.readwrite.adjlist",
        "networkx.readwrite.gexf",
        "networkx.readwrite.sparse6"
    ],
    "networkx.readwrite.adjlist": [
        "networkx.utils.decorators.open_file",
        "networkx.utils.decorators.argmap.__init__",
        "networkx",
        "networkx.utils"
    ],
    "networkx.utils.decorators.open_file": [
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.readwrite.multiline_adjlist": [
        "networkx.utils.decorators.open_file",
        "networkx.utils.decorators.argmap.__init__",
        "networkx",
        "networkx.utils"
    ],
    "networkx.readwrite.edgelist": [
        "networkx.utils.decorators.open_file",
        "networkx.utils.decorators.argmap.__init__",
        "networkx",
        "networkx.utils"
    ],
    "networkx.readwrite.pajek": [
        "networkx",
        "networkx.utils.decorators.open_file",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "warnings"
    ],
    "networkx.readwrite.leda": [
        "networkx",
        "networkx.utils.decorators.open_file",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.exception"
    ],
    "networkx.readwrite.sparse6": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.open_file",
        "networkx.readwrite.graph6",
        "networkx.utils",
        "networkx.exception",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.readwrite.graph6": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.open_file",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.exception"
    ],
    "networkx.readwrite.gml": [
        "re",
        "html.entities",
        "networkx",
        "enum",
        "networkx.utils.decorators.open_file",
        "networkx.readwrite.gml.Pattern",
        "collections",
        "typing",
        "ast",
        "networkx.utils",
        "io",
        "networkx.exception",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.readwrite.gml.Token",
        "warnings"
    ],
    "html.entities": [
        "<builtin>.chr",
        "<map>.items"
    ],
    "networkx.readwrite.gml.Pattern": [],
    "networkx.readwrite.gml.Token": [],
    "networkx.readwrite.graphml": [
        "networkx",
        "networkx.readwrite.graphml.GraphMLReader",
        "networkx.utils.decorators.open_file",
        "networkx.readwrite.graphml.GraphMLWriter",
        "collections",
        "networkx.readwrite.graphml.GraphML",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.readwrite.graphml.IncrementalElement",
        "warnings",
        "networkx.readwrite.graphml.GraphMLWriterLxml"
    ],
    "networkx.readwrite.graphml.GraphML": [],
    "networkx.readwrite.graphml.GraphMLWriter": [],
    "networkx.readwrite.graphml.IncrementalElement": [],
    "networkx.readwrite.graphml.GraphMLWriterLxml": [],
    "networkx.readwrite.graphml.GraphMLReader": [],
    "networkx.readwrite.gexf": [
        "networkx.readwrite.gexf.GEXFReader",
        "networkx",
        "networkx.utils.decorators.open_file",
        "networkx.readwrite.gexf.GEXF",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "xml.etree.ElementTree",
        "networkx.readwrite.gexf.GEXFWriter"
    ],
    "xml.etree.ElementTree": [
        "xml.etree.ElementTree.Element",
        "collections",
        "xml.etree.ElementTree.ElementTree",
        "collections.abc",
        "contextlib",
        "<builtin>.set",
        "re",
        "_elementtree",
        "xml.etree.ElementTree.ParseError",
        "xml.etree.ElementTree.XMLPullParser",
        "xml.etree.ElementTree._ListDataStream",
        "warnings",
        "re.compile",
        "contextlib.contextmanager",
        "xml.etree.ElementTree.TreeBuilder",
        "xml.etree.ElementTree.QName",
        "xml.etree.ElementTree.XMLParser",
        "xml.etree.ElementTree.C14NWriterTarget",
        "io"
    ],
    "xml.etree.ElementTree.ParseError": [],
    "xml.etree.ElementTree.Element": [],
    "xml.etree.ElementTree.QName": [],
    "xml.etree.ElementTree.ElementTree": [],
    "xml.etree.ElementTree._ListDataStream": [],
    "xml.etree.ElementTree.XMLPullParser": [],
    "xml.etree.ElementTree.TreeBuilder": [],
    "xml.etree.ElementTree.XMLParser": [],
    "xml.etree.ElementTree.C14NWriterTarget": [],
    "_elementtree": [],
    "networkx.readwrite.gexf.GEXF": [],
    "networkx.readwrite.gexf.GEXFWriter": [],
    "networkx.readwrite.gexf.GEXFReader": [],
    "networkx.readwrite.json_graph": [
        "networkx.readwrite.json_graph.node_link",
        "networkx.readwrite.json_graph.tree",
        "networkx.readwrite.json_graph.adjacency",
        "networkx.readwrite.json_graph.cytoscape"
    ],
    "networkx.readwrite.json_graph.node_link": [
        "networkx"
    ],
    "networkx.readwrite.json_graph.adjacency": [
        "networkx"
    ],
    "networkx.readwrite.json_graph.tree": [
        "networkx"
    ],
    "networkx.readwrite.json_graph.cytoscape": [
        "networkx"
    ],
    "networkx.readwrite.text": [
        "networkx",
        "networkx.readwrite.text._UtfBaseGlyphs",
        "networkx.readwrite.text._AsciiBaseGlyphs",
        "networkx.readwrite.text.UtfDirectedGlyphs",
        "networkx.utils.decorators.open_file",
        "collections",
        "networkx.readwrite.text.UtfUndirectedGlyphs",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.readwrite.text.AsciiDirectedGlyphs",
        "networkx.readwrite.text.AsciiUndirectedGlyphs",
        "warnings"
    ],
    "networkx.readwrite.text._AsciiBaseGlyphs": [],
    "networkx.readwrite.text.AsciiDirectedGlyphs": [],
    "networkx.readwrite.text.AsciiUndirectedGlyphs": [],
    "networkx.readwrite.text._UtfBaseGlyphs": [],
    "networkx.readwrite.text.UtfDirectedGlyphs": [],
    "networkx.readwrite.text.UtfUndirectedGlyphs": [],
    "networkx.algorithms": [
        "networkx.algorithms.traversal",
        "networkx.algorithms.centrality",
        "networkx.algorithms.dominating",
        "networkx.algorithms.tree.recognition",
        "networkx.algorithms.mis",
        "networkx.algorithms.covering",
        "networkx.algorithms.simple_paths",
        "networkx.algorithms.isolate",
        "networkx.algorithms.components",
        "networkx.algorithms.tree.coding",
        "networkx.algorithms.regular",
        "networkx.algorithms.reciprocity",
        "networkx.algorithms.shortest_paths",
        "networkx.algorithms.structuralholes",
        "networkx.algorithms.distance_regular",
        "networkx.algorithms.graphical",
        "networkx.algorithms.swap",
        "networkx.algorithms.non_randomness",
        "networkx.algorithms.dominance",
        "networkx.algorithms.minors",
        "networkx.algorithms.d_separation",
        "networkx.algorithms.polynomials",
        "networkx.algorithms.coloring",
        "networkx.algorithms.link_analysis",
        "networkx.algorithms.richclub",
        "networkx.algorithms.smallworld",
        "networkx.algorithms.asteroidal",
        "networkx.algorithms.smetric",
        "networkx.algorithms.summarization",
        "networkx.algorithms.triads",
        "networkx.algorithms.hybrid",
        "networkx.algorithms.matching",
        "networkx.algorithms.vitality",
        "networkx.algorithms.approximation",
        "networkx.algorithms.community",
        "networkx.algorithms.distance_measures",
        "networkx.algorithms.communicability_alg",
        "networkx.algorithms.bipartite",
        "networkx.algorithms.assortativity",
        "networkx.algorithms.graph_hashing",
        "networkx.algorithms.cluster",
        "networkx.algorithms.efficiency_measures",
        "networkx.algorithms.cuts",
        "networkx.algorithms.voronoi",
        "networkx.algorithms.lowest_common_ancestors",
        "networkx.algorithms.chains",
        "networkx.algorithms.operators",
        "networkx.algorithms.flow",
        "networkx.algorithms.planarity",
        "networkx.algorithms.planar_drawing",
        "networkx.algorithms.wiener",
        "networkx.algorithms.tree",
        "networkx.algorithms.bridges",
        "networkx.algorithms.moral",
        "networkx.algorithms.core",
        "networkx.algorithms.tree.mst",
        "networkx.algorithms.clique",
        "networkx.algorithms.sparsifiers",
        "networkx.algorithms.euler",
        "networkx.algorithms.node_classification",
        "networkx.algorithms.cycles",
        "networkx.algorithms.chordal",
        "networkx.algorithms.link_prediction",
        "networkx.algorithms.tournament",
        "networkx.algorithms.connectivity",
        "networkx.algorithms.tree.operations",
        "networkx.algorithms.tree.branchings",
        "networkx.algorithms.hierarchy",
        "networkx.algorithms.isomorphism.vf2pp",
        "networkx.algorithms.similarity",
        "networkx.algorithms.dag",
        "networkx.algorithms.isomorphism",
        "networkx.algorithms.boundary",
        "networkx.algorithms.tree.decomposition"
    ],
    "networkx.algorithms.assortativity": [
        "networkx.algorithms.assortativity.pairs",
        "networkx.algorithms.assortativity.neighbor_degree",
        "networkx.algorithms.assortativity.mixing",
        "networkx.algorithms.assortativity.correlation",
        "networkx.algorithms.assortativity.connectivity"
    ],
    "networkx.algorithms.assortativity.connectivity": [
        "networkx",
        "collections"
    ],
    "networkx.algorithms.assortativity.correlation": [
        "networkx.algorithms.assortativity.pairs",
        "networkx.algorithms.assortativity.mixing"
    ],
    "networkx.algorithms.assortativity.mixing": [
        "networkx.algorithms.assortativity.pairs",
        "networkx.utils"
    ],
    "networkx.algorithms.assortativity.pairs": [],
    "networkx.algorithms.assortativity.neighbor_degree": [
        "networkx"
    ],
    "networkx.algorithms.asteroidal": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.boundary": [
        "networkx.classes.backends._dispatch.wrapper",
        "networkx.classes.backends._dispatch",
        "networkx"
    ],
    "networkx.classes.backends._dispatch.wrapper": [
        "networkx.generators.ego.ego_graph",
        "<builtin>.hasattr",
        "networkx.algorithms.boundary.node_boundary",
        "<builtin>.getattr",
        "<builtin>.TypeError",
        "networkx.algorithms.boundary.edge_boundary"
    ],
    "networkx.generators.ego.ego_graph": [
        "<builtin>.dict"
    ],
    "networkx.algorithms.boundary.node_boundary": [
        "<builtin>.set"
    ],
    "networkx.algorithms.boundary.edge_boundary": [
        "<builtin>.set"
    ],
    "networkx.algorithms.bridges": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.chains": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.centrality": [
        "networkx.algorithms.centrality.current_flow_betweenness_subset",
        "networkx.algorithms.centrality.betweenness_subset",
        "networkx.algorithms.centrality.voterank_alg",
        "networkx.algorithms.centrality.group",
        "networkx.algorithms.centrality.second_order",
        "networkx.algorithms.centrality.eigenvector",
        "networkx.algorithms.centrality.degree_alg",
        "networkx.algorithms.centrality.load",
        "networkx.algorithms.centrality.current_flow_betweenness",
        "networkx.algorithms.centrality.trophic",
        "networkx.algorithms.centrality.current_flow_closeness",
        "networkx.algorithms.centrality.reaching",
        "networkx.algorithms.centrality.laplacian",
        "networkx.algorithms.centrality.closeness",
        "networkx.algorithms.centrality.percolation",
        "networkx.algorithms.centrality.harmonic",
        "networkx.algorithms.centrality.betweenness",
        "networkx.algorithms.centrality.katz",
        "networkx.algorithms.centrality.subgraph_alg",
        "networkx.algorithms.centrality.dispersion"
    ],
    "networkx.algorithms.centrality.betweenness": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.algorithms.shortest_paths.weighted",
        "collections",
        "networkx.utils.decorators",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "heapq"
    ],
    "networkx.algorithms.shortest_paths.weighted": [
        "networkx.classes.backends._dispatch",
        "networkx",
        "collections",
        "networkx.algorithms.shortest_paths.generic",
        "heapq"
    ],
    "networkx.algorithms.shortest_paths.generic": [
        "networkx.classes.backends._dispatch",
        "networkx",
        "warnings"
    ],
    "networkx.algorithms.centrality.betweenness_subset": [
        "networkx.algorithms.centrality.betweenness"
    ],
    "networkx.algorithms.centrality.closeness": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators",
        "networkx.exception",
        "networkx.utils.decorators.argmap.__init__",
        "functools"
    ],
    "networkx.algorithms.centrality.current_flow_betweenness": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.algorithms.centrality.flow_matrix",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.centrality.flow_matrix": [
        "networkx",
        "networkx.algorithms.centrality.flow_matrix.InverseLaplacian",
        "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian",
        "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian",
        "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian"
    ],
    "networkx.algorithms.centrality.flow_matrix.InverseLaplacian": [],
    "networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian": [],
    "networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian": [],
    "networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian": [],
    "networkx.algorithms.centrality.current_flow_betweenness_subset": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.centrality.flow_matrix",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.centrality.current_flow_closeness": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.centrality.flow_matrix",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.centrality.degree_alg": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.centrality.dispersion": [],
    "networkx.algorithms.centrality.eigenvector": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "math"
    ],
    "networkx.algorithms.centrality.group": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.centrality.betweenness",
        "networkx.utils.decorators",
        "networkx.utils.decorators.argmap.__init__",
        "copy"
    ],
    "networkx.algorithms.centrality.harmonic": [
        "functools",
        "networkx"
    ],
    "networkx.algorithms.centrality.katz": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "math"
    ],
    "networkx.algorithms.centrality.load": [
        "operator",
        "networkx"
    ],
    "networkx.algorithms.centrality.percolation": [
        "networkx.algorithms.centrality.betweenness",
        "networkx"
    ],
    "networkx.algorithms.centrality.reaching": [
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.centrality.second_order": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.centrality.subgraph_alg": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.centrality.trophic": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.centrality.voterank_alg": [],
    "networkx.algorithms.centrality.laplacian": [
        "networkx"
    ],
    "networkx.algorithms.chordal": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.components",
        "networkx.algorithms.chordal.NetworkXTreewidthBoundExceeded",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.components": [
        "networkx.algorithms.components.semiconnected",
        "networkx.algorithms.components.weakly_connected",
        "networkx.algorithms.components.connected",
        "networkx.algorithms.components.attracting",
        "networkx.algorithms.components.strongly_connected",
        "networkx.algorithms.components.biconnected"
    ],
    "networkx.algorithms.components.connected": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.components.strongly_connected": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.components.weakly_connected": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.components.attracting": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators"
    ],
    "networkx.algorithms.components.biconnected": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators"
    ],
    "networkx.algorithms.components.semiconnected": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.chordal.NetworkXTreewidthBoundExceeded": [],
    "networkx.algorithms.cluster": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.classes.backends._dispatch.wrapper",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.clique": [
        "networkx.algorithms.clique.MaxWeightClique",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.clique.MaxWeightClique": [],
    "networkx.algorithms.communicability_alg": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.coloring": [
        "networkx.algorithms.coloring.greedy_coloring",
        "networkx.algorithms.coloring.equitable_coloring"
    ],
    "networkx.algorithms.coloring.greedy_coloring": [
        "networkx.algorithms.coloring.greedy_coloring._Node",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "collections",
        "networkx.algorithms.coloring.greedy_coloring._AdjEntry",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.coloring.greedy_coloring._Node": [],
    "networkx.algorithms.coloring.greedy_coloring._AdjEntry": [],
    "networkx.algorithms.coloring.equitable_coloring": [
        "networkx",
        "collections"
    ],
    "networkx.algorithms.core": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.exception"
    ],
    "networkx.algorithms.covering": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "functools"
    ],
    "networkx.algorithms.cycles": [
        "networkx.algorithms.cycles._NeighborhoodCache",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.cycles._NeighborhoodCache": [],
    "networkx.algorithms.cuts": [
        "networkx.classes.backends._dispatch",
        "networkx"
    ],
    "networkx.algorithms.d_separation": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.dag": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "math",
        "functools",
        "heapq"
    ],
    "networkx.algorithms.distance_measures": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.distance_regular": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.distance_measures",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.dominance": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "functools"
    ],
    "networkx.algorithms.dominating": [
        "networkx.classes.backends._dispatch",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.efficiency_measures": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.exception"
    ],
    "networkx.algorithms.euler": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.graphical": [
        "heapq",
        "networkx"
    ],
    "networkx.algorithms.hierarchy": [
        "networkx"
    ],
    "networkx.algorithms.hybrid": [
        "networkx",
        "copy"
    ],
    "networkx.algorithms.link_analysis": [
        "networkx.algorithms.link_analysis.pagerank_alg",
        "networkx.algorithms.link_analysis.hits_alg"
    ],
    "networkx.algorithms.link_analysis.hits_alg": [
        "networkx.classes.backends._dispatch",
        "networkx"
    ],
    "networkx.algorithms.link_analysis.pagerank_alg": [
        "networkx.classes.backends._dispatch",
        "networkx",
        "warnings"
    ],
    "networkx.algorithms.link_prediction": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "math"
    ],
    "networkx.algorithms.lowest_common_ancestors": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "collections.abc",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.isolate": [
        "networkx.classes.backends._dispatch",
        "networkx"
    ],
    "networkx.algorithms.matching": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.minors": [
        "networkx.algorithms.minors.contraction"
    ],
    "networkx.algorithms.minors.contraction": [
        "networkx",
        "networkx.exception",
        "networkx.utils"
    ],
    "networkx.algorithms.mis": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.moral": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.non_randomness": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "math"
    ],
    "networkx.algorithms.operators": [
        "networkx.algorithms.operators.all",
        "networkx.algorithms.operators.unary",
        "networkx.algorithms.operators.product",
        "networkx.algorithms.operators.binary"
    ],
    "networkx.algorithms.operators.all": [
        "networkx"
    ],
    "networkx.algorithms.operators.binary": [
        "networkx"
    ],
    "networkx.algorithms.operators.product": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.operators.unary": [
        "networkx"
    ],
    "networkx.algorithms.planarity": [
        "networkx.algorithms.planarity.ConflictPair",
        "networkx",
        "networkx.algorithms.planarity.Interval",
        "networkx.algorithms.planarity.PlanarEmbedding",
        "collections",
        "networkx.algorithms.planarity.LRPlanarity"
    ],
    "networkx.algorithms.planarity.Interval": [],
    "networkx.algorithms.planarity.ConflictPair": [
        "networkx.algorithms.planarity.Interval.__init__"
    ],
    "networkx.algorithms.planarity.Interval.__init__": [],
    "networkx.algorithms.planarity.LRPlanarity": [],
    "networkx.algorithms.planarity.PlanarEmbedding": [],
    "networkx.algorithms.planar_drawing": [
        "networkx",
        "collections"
    ],
    "networkx.algorithms.reciprocity": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.regular": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.richclub": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.shortest_paths": [
        "networkx.algorithms.shortest_paths.dense",
        "networkx.algorithms.shortest_paths.weighted",
        "networkx.algorithms.shortest_paths.generic",
        "networkx.algorithms.shortest_paths.astar",
        "networkx.algorithms.shortest_paths.unweighted"
    ],
    "networkx.algorithms.shortest_paths.unweighted": [
        "networkx.classes.backends._dispatch",
        "networkx",
        "warnings"
    ],
    "networkx.algorithms.shortest_paths.astar": [
        "heapq",
        "networkx",
        "networkx.algorithms.shortest_paths.weighted"
    ],
    "networkx.algorithms.shortest_paths.dense": [
        "networkx.classes.backends._dispatch",
        "networkx"
    ],
    "networkx.algorithms.similarity": [
        "dataclasses",
        "math",
        "networkx",
        "warnings"
    ],
    "dataclasses": [
        "copy",
        "re",
        "types",
        "dataclasses.FrozenInstanceError",
        "keyword",
        "dataclasses.InitVar",
        "dataclasses._FIELD_BASE",
        "dataclasses.Field",
        "dataclasses._FIELD_BASE.__init__",
        "dataclasses._HAS_DEFAULT_FACTORY_CLASS",
        "re.compile",
        "dataclasses._InitVarMeta",
        "dataclasses._DataclassParams",
        "functools",
        "dataclasses._MISSING_TYPE",
        "inspect"
    ],
    "dataclasses.FrozenInstanceError": [],
    "dataclasses._HAS_DEFAULT_FACTORY_CLASS": [],
    "dataclasses._MISSING_TYPE": [],
    "dataclasses._FIELD_BASE": [],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses._InitVarMeta": [],
    "dataclasses.InitVar": [],
    "dataclasses.Field": [],
    "dataclasses._DataclassParams": [],
    "networkx.algorithms.graph_hashing": [
        "hashlib",
        "collections"
    ],
    "networkx.algorithms.simple_paths": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.shortest_paths.weighted",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.algorithms.simple_paths.PathBuffer",
        "heapq"
    ],
    "networkx.algorithms.simple_paths.PathBuffer": [],
    "networkx.algorithms.smallworld": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.smetric": [
        "networkx.classes.backends._dispatch",
        "networkx"
    ],
    "networkx.algorithms.structuralholes": [
        "networkx.classes.backends._dispatch",
        "networkx"
    ],
    "networkx.algorithms.sparsifiers": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "math"
    ],
    "networkx.algorithms.summarization": [
        "networkx",
        "collections"
    ],
    "networkx.algorithms.swap": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "math"
    ],
    "networkx.algorithms.traversal": [
        "networkx.algorithms.traversal.breadth_first_search",
        "networkx.algorithms.traversal.edgedfs",
        "networkx.algorithms.traversal.edgebfs",
        "networkx.algorithms.traversal.beamsearch",
        "networkx.algorithms.traversal.depth_first_search"
    ],
    "networkx.algorithms.traversal.beamsearch": [
        "networkx.algorithms.traversal.breadth_first_search"
    ],
    "networkx.algorithms.traversal.breadth_first_search": [
        "networkx",
        "networkx.classes.backends._dispatch",
        "collections"
    ],
    "networkx.algorithms.traversal.depth_first_search": [
        "networkx",
        "collections"
    ],
    "networkx.algorithms.traversal.edgedfs": [
        "networkx"
    ],
    "networkx.algorithms.traversal.edgebfs": [
        "networkx",
        "networkx.classes.backends._dispatch",
        "collections"
    ],
    "networkx.algorithms.triads": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "collections",
        "networkx.classes.backends._dispatch.wrapper",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "<builtin>.enumerate",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.vitality": [
        "functools",
        "networkx"
    ],
    "networkx.algorithms.voronoi": [
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.wiener": [
        "networkx.algorithms.components",
        "networkx.algorithms.shortest_paths"
    ],
    "networkx.algorithms.polynomials": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.approximation": [
        "networkx.algorithms.approximation.dominating_set",
        "networkx.algorithms.approximation.steinertree",
        "networkx.algorithms.approximation.connectivity",
        "networkx.algorithms.approximation.vertex_cover",
        "networkx.algorithms.approximation.matching",
        "networkx.algorithms.approximation.clique",
        "networkx.algorithms.approximation.traveling_salesman",
        "networkx.algorithms.approximation.maxcut",
        "networkx.algorithms.approximation.clustering_coefficient",
        "networkx.algorithms.approximation.distance_measures",
        "networkx.algorithms.approximation.treewidth",
        "networkx.algorithms.approximation.ramsey",
        "networkx.algorithms.approximation.kcomponents"
    ],
    "networkx.algorithms.approximation.clustering_coefficient": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.approximation.clique": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.algorithms.approximation.ramsey"
    ],
    "networkx.algorithms.approximation.ramsey": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.approximation.connectivity": [
        "operator",
        "networkx"
    ],
    "networkx.algorithms.approximation.distance_measures": [
        "networkx.utils.decorators.py_random_state",
        "networkx",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators"
    ],
    "networkx.algorithms.approximation.dominating_set": [
        "networkx.algorithms.matching",
        "networkx.utils.decorators.not_implemented_for",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.approximation.kcomponents": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.approximation",
        "networkx.algorithms.approximation.kcomponents._AntiGraph",
        "collections",
        "collections.abc",
        "networkx.exception",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "functools"
    ],
    "networkx.algorithms.approximation.kcomponents._AntiGraph": [
        "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView",
        "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView",
        "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView",
        "functools.cached_property.__init__"
    ],
    "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView": [],
    "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView": [],
    "networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView": [],
    "networkx.algorithms.approximation.matching": [
        "networkx"
    ],
    "networkx.algorithms.approximation.steinertree": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.approximation.traveling_salesman": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.algorithms.tree.mst",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "math"
    ],
    "networkx.algorithms.tree.mst": [
        "dataclasses",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "enum",
        "operator",
        "networkx.utils.decorators.py_random_state",
        "networkx.algorithms.tree.mst.SpanningTreeIterator",
        "networkx.algorithms.tree.mst.EdgePartition",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "math",
        "heapq",
        "queue"
    ],
    "queue": [
        "queue.Full",
        "queue.Queue",
        "queue.Empty",
        "collections",
        "threading",
        "queue.PriorityQueue",
        "queue.LifoQueue",
        "heapq",
        "_queue",
        "queue._PySimpleQueue"
    ],
    "_queue": [],
    "queue.Empty": [],
    "queue.Full": [],
    "queue.Queue": [],
    "queue.PriorityQueue": [],
    "queue.LifoQueue": [],
    "queue._PySimpleQueue": [],
    "networkx.algorithms.tree.mst.EdgePartition": [],
    "networkx.algorithms.tree.mst.SpanningTreeIterator": [
        "networkx.algorithms.tree.mst.SpanningTreeIterator.Partition"
    ],
    "networkx.algorithms.tree.mst.SpanningTreeIterator.Partition": [
        "dataclasses.field"
    ],
    "dataclasses.field": [
        "dataclasses.Field.__init__",
        "<builtin>.ValueError"
    ],
    "dataclasses.Field.__init__": [],
    "networkx.algorithms.approximation.treewidth": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "heapq"
    ],
    "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic": [],
    "networkx.algorithms.approximation.vertex_cover": [],
    "networkx.algorithms.approximation.maxcut": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils.decorators",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.bipartite": [
        "networkx.algorithms.bipartite.generators",
        "networkx.algorithms.bipartite.cluster",
        "networkx.algorithms.bipartite.covering",
        "networkx.algorithms.bipartite.spectral",
        "networkx.algorithms.bipartite.matrix",
        "networkx.algorithms.bipartite.projection",
        "networkx.algorithms.bipartite.basic",
        "networkx.algorithms.bipartite.centrality",
        "networkx.algorithms.bipartite.redundancy",
        "networkx.algorithms.bipartite.edgelist",
        "networkx.algorithms.bipartite.matching"
    ],
    "networkx.algorithms.bipartite.basic": [
        "networkx.algorithms.components",
        "networkx.classes.backends._dispatch",
        "networkx",
        "networkx.exception"
    ],
    "networkx.algorithms.bipartite.centrality": [
        "networkx"
    ],
    "networkx.algorithms.bipartite.cluster": [
        "networkx"
    ],
    "networkx.algorithms.bipartite.covering": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx.algorithms.covering",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.algorithms.bipartite.matching"
    ],
    "networkx.algorithms.bipartite.matching": [
        "networkx",
        "<builtin>.float",
        "collections",
        "networkx.algorithms.bipartite",
        "networkx.algorithms.bipartite.matrix"
    ],
    "networkx.algorithms.bipartite.matrix": [
        "networkx.convert_matrix",
        "networkx"
    ],
    "<builtin>.float": [],
    "networkx.algorithms.bipartite.edgelist": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.open_file",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.bipartite.projection": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.exception"
    ],
    "networkx.algorithms.bipartite.redundancy": [
        "networkx"
    ],
    "networkx.algorithms.bipartite.spectral": [
        "networkx"
    ],
    "networkx.algorithms.bipartite.generators": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.nodes_or_number",
        "math",
        "functools",
        "networkx.utils.py_random_state",
        "numbers"
    ],
    "networkx.algorithms.node_classification": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.connectivity": [
        "networkx.algorithms.connectivity.cuts",
        "networkx.algorithms.connectivity.kcutsets",
        "networkx.algorithms.connectivity.edge_kcomponents",
        "networkx.algorithms.connectivity.connectivity",
        "networkx.algorithms.connectivity.kcomponents",
        "networkx.algorithms.connectivity.disjoint_paths",
        "networkx.algorithms.connectivity.utils",
        "networkx.algorithms.connectivity.edge_augmentation",
        "networkx.algorithms.connectivity.stoerwagner"
    ],
    "networkx.algorithms.connectivity.connectivity": [
        "operator",
        "networkx.algorithms.connectivity.utils",
        "networkx.algorithms.flow",
        "networkx"
    ],
    "networkx.algorithms.flow": [
        "networkx.algorithms.flow.shortestaugmentingpath",
        "networkx.algorithms.flow.gomory_hu",
        "networkx.algorithms.flow.preflowpush",
        "networkx.algorithms.flow.maxflow",
        "networkx.algorithms.flow.utils",
        "networkx.algorithms.flow.boykovkolmogorov",
        "networkx.algorithms.flow.edmondskarp",
        "networkx.algorithms.flow.networksimplex",
        "networkx.algorithms.flow.mincost",
        "networkx.algorithms.flow.capacityscaling",
        "networkx.algorithms.flow.dinitz_alg"
    ],
    "networkx.algorithms.flow.maxflow": [
        "networkx.algorithms.flow.shortestaugmentingpath",
        "networkx",
        "networkx.algorithms.flow.preflowpush",
        "networkx.algorithms.flow.utils",
        "networkx.algorithms.flow.edmondskarp",
        "networkx.algorithms.flow.boykovkolmogorov",
        "networkx.algorithms.flow.dinitz_alg"
    ],
    "networkx.algorithms.flow.boykovkolmogorov": [
        "networkx",
        "networkx.algorithms.flow.utils",
        "operator",
        "collections"
    ],
    "networkx.algorithms.flow.utils": [
        "networkx",
        "networkx.algorithms.flow.utils.Level",
        "networkx.algorithms.flow.utils.GlobalRelabelThreshold",
        "collections",
        "networkx.algorithms.flow.utils.CurrentEdge"
    ],
    "networkx.algorithms.flow.utils.CurrentEdge": [],
    "networkx.algorithms.flow.utils.Level": [],
    "networkx.algorithms.flow.utils.GlobalRelabelThreshold": [],
    "networkx.algorithms.flow.dinitz_alg": [
        "networkx",
        "networkx.algorithms.flow.utils",
        "collections",
        "networkx.utils"
    ],
    "networkx.algorithms.flow.edmondskarp": [
        "networkx.algorithms.flow.utils",
        "networkx"
    ],
    "networkx.algorithms.flow.preflowpush": [
        "networkx",
        "networkx.algorithms.flow.utils",
        "collections",
        "networkx.utils"
    ],
    "networkx.algorithms.flow.shortestaugmentingpath": [
        "networkx",
        "networkx.algorithms.flow.utils",
        "networkx.algorithms.flow.edmondskarp",
        "collections"
    ],
    "networkx.algorithms.flow.mincost": [
        "networkx"
    ],
    "networkx.algorithms.flow.gomory_hu": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.flow.utils",
        "networkx.algorithms.flow.edmondskarp",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.flow.capacityscaling": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "math"
    ],
    "networkx.algorithms.flow.networksimplex": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "math"
    ],
    "networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions": [],
    "networkx.algorithms.connectivity.utils": [
        "networkx"
    ],
    "networkx.algorithms.connectivity.cuts": [
        "networkx.algorithms.connectivity.utils",
        "networkx.algorithms.flow",
        "networkx"
    ],
    "networkx.algorithms.connectivity.edge_augmentation": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "collections.namedtuple",
        "math",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.connectivity.edge_kcomponents": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.algorithms.bridges",
        "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph",
        "functools"
    ],
    "networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph": [
        "<builtin>.classmethod"
    ],
    "networkx.algorithms.connectivity.disjoint_paths": [
        "networkx.algorithms.connectivity.utils",
        "networkx.algorithms.flow",
        "networkx",
        "networkx.exception"
    ],
    "networkx.algorithms.connectivity.kcomponents": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "operator",
        "networkx.algorithms.flow",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.connectivity.kcutsets": [
        "networkx",
        "operator",
        "networkx.algorithms.flow",
        "collections",
        "networkx.algorithms.connectivity.utils",
        "copy"
    ],
    "networkx.algorithms.connectivity.stoerwagner": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.algorithms.community": [
        "networkx.algorithms.community.modularity_max",
        "networkx.algorithms.community.lukes",
        "networkx.algorithms.community.quality",
        "networkx.algorithms.community.community_utils",
        "networkx.algorithms.community.label_propagation",
        "networkx.algorithms.community.asyn_fluid",
        "networkx.algorithms.community.kclique",
        "networkx.algorithms.community.centrality",
        "networkx.algorithms.community.kernighan_lin",
        "networkx.algorithms.community.louvain"
    ],
    "networkx.algorithms.community.asyn_fluid": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx.utils.decorators.py_random_state",
        "collections",
        "networkx.algorithms.components",
        "networkx.utils",
        "networkx.exception",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.community.centrality": [
        "networkx"
    ],
    "networkx.algorithms.community.kclique": [
        "networkx",
        "collections"
    ],
    "networkx.algorithms.community.kernighan_lin": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.community.community_utils",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.community.community_utils": [],
    "networkx.algorithms.community.label_propagation": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.community.lukes": [
        "networkx",
        "random",
        "networkx.utils",
        "functools",
        "copy"
    ],
    "networkx.algorithms.community.modularity_max": [
        "networkx.algorithms.community.quality",
        "networkx",
        "networkx.utils.decorators.not_implemented_for",
        "networkx.utils.mapped_queue",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.community.quality": [
        "networkx.algorithms.community.quality.NotAPartition",
        "networkx.classes.backends._dispatch",
        "networkx",
        "networkx.algorithms.community.community_utils",
        "networkx.utils.decorators",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.community.quality.NotAPartition": [],
    "networkx.utils.mapped_queue": [
        "networkx.utils.mapped_queue.MappedQueue",
        "heapq",
        "networkx.utils.mapped_queue._HeapElement"
    ],
    "networkx.utils.mapped_queue._HeapElement": [],
    "networkx.utils.mapped_queue.MappedQueue": [],
    "networkx.algorithms.community.louvain": [
        "networkx",
        "networkx.utils.decorators.py_random_state",
        "networkx.algorithms.community",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.isomorphism": [
        "networkx.algorithms.isomorphism.tree_isomorphism",
        "networkx.algorithms.isomorphism.isomorph",
        "networkx.algorithms.isomorphism.temporalisomorphvf2",
        "networkx.algorithms.isomorphism.matchhelpers",
        "networkx.algorithms.isomorphism.vf2pp",
        "networkx.algorithms.isomorphism.vf2userfunc",
        "networkx.algorithms.isomorphism.ismags"
    ],
    "networkx.algorithms.isomorphism.isomorph": [
        "networkx",
        "networkx.exception"
    ],
    "networkx.algorithms.isomorphism.vf2userfunc": [
        "networkx.algorithms.isomorphism.isomorphvf2",
        "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher",
        "networkx.algorithms.isomorphism.vf2userfunc.MultiGraphMatcher",
        "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher",
        "networkx.algorithms.isomorphism.vf2userfunc.MultiDiGraphMatcher"
    ],
    "networkx.algorithms.isomorphism.isomorphvf2": [
        "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher",
        "networkx.algorithms.isomorphism.isomorphvf2.GMState",
        "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher",
        "networkx.algorithms.isomorphism.isomorphvf2.DiGMState"
    ],
    "networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher": [],
    "networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher": [],
    "networkx.algorithms.isomorphism.isomorphvf2.GMState": [],
    "networkx.algorithms.isomorphism.isomorphvf2.DiGMState": [],
    "networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher": [],
    "networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher": [],
    "networkx.algorithms.isomorphism.vf2userfunc.MultiGraphMatcher": [],
    "networkx.algorithms.isomorphism.vf2userfunc.MultiDiGraphMatcher": [],
    "networkx.algorithms.isomorphism.matchhelpers": [
        "networkx.algorithms.isomorphism.matchhelpers.copyfunc",
        "math",
        "<str>.replace",
        "types"
    ],
    "networkx.algorithms.isomorphism.matchhelpers.copyfunc": [],
    "networkx.algorithms.isomorphism.temporalisomorphvf2": [
        "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher",
        "networkx.algorithms.isomorphism.isomorphvf2",
        "networkx",
        "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher"
    ],
    "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher": [],
    "networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher": [],
    "networkx.algorithms.isomorphism.ismags": [
        "networkx.algorithms.isomorphism.ismags.ISMAGS",
        "functools",
        "collections"
    ],
    "networkx.algorithms.isomorphism.ismags.ISMAGS": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "networkx.algorithms.isomorphism.tree_isomorphism": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators"
    ],
    "networkx.algorithms.isomorphism.vf2pp": [
        "networkx",
        "collections.namedtuple",
        "collections"
    ],
    "networkx.algorithms.tournament": [
        "networkx.classes.backends._dispatch",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.simple_paths",
        "networkx.utils.decorators.py_random_state",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state"
    ],
    "networkx.algorithms.tree": [
        "networkx.algorithms.tree.recognition",
        "networkx.algorithms.tree.operations",
        "networkx.algorithms.tree.mst",
        "networkx.algorithms.tree.branchings",
        "networkx.algorithms.tree.coding",
        "networkx.algorithms.tree.decomposition"
    ],
    "networkx.algorithms.tree.branchings": [
        "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey",
        "dataclasses",
        "networkx",
        "networkx.algorithms.tree.recognition",
        "enum",
        "<builtin>.float",
        "operator",
        "networkx.utils.decorators.py_random_state",
        "networkx.algorithms.tree.branchings.Edmonds",
        "networkx.algorithms.tree.branchings.ArborescenceIterator",
        "string",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.py_random_state",
        "queue"
    ],
    "networkx.algorithms.tree.recognition": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey": [],
    "networkx.algorithms.tree.branchings.Edmonds": [],
    "networkx.algorithms.tree.branchings.ArborescenceIterator": [
        "networkx.algorithms.tree.branchings.ArborescenceIterator.Partition"
    ],
    "networkx.algorithms.tree.branchings.ArborescenceIterator.Partition": [
        "dataclasses.field"
    ],
    "networkx.algorithms.tree.coding": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms.tree.coding.NotATree",
        "collections",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.algorithms.tree.coding.NotATree": [],
    "networkx.algorithms.tree.operations": [
        "functools",
        "networkx"
    ],
    "networkx.algorithms.tree.decomposition": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.algorithms",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.algorithms.moral"
    ],
    "networkx.linalg": [
        "networkx.linalg.spectrum",
        "networkx.linalg.algebraicconnectivity",
        "networkx.linalg.modularitymatrix",
        "networkx.linalg.bethehessianmatrix",
        "networkx.linalg.laplacianmatrix",
        "networkx.linalg.graphmatrix",
        "networkx.linalg.attrmatrix"
    ],
    "networkx.linalg.attrmatrix": [],
    "networkx.linalg.spectrum": [
        "networkx"
    ],
    "networkx.linalg.graphmatrix": [
        "networkx"
    ],
    "networkx.linalg.laplacianmatrix": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.linalg.algebraicconnectivity": [
        "networkx.linalg.algebraicconnectivity._PCGSolver",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.np_random_state",
        "networkx.linalg.algebraicconnectivity._LUSolver",
        "functools"
    ],
    "networkx.linalg.algebraicconnectivity._PCGSolver": [],
    "networkx.linalg.algebraicconnectivity._LUSolver": [],
    "networkx.linalg.modularitymatrix": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.linalg.bethehessianmatrix": [
        "networkx.utils.decorators.argmap.__init__",
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "networkx.utils"
    ],
    "networkx.drawing": [
        "networkx.drawing.nx_pydot",
        "networkx.drawing.nx_agraph",
        "networkx.drawing.layout",
        "networkx.drawing.nx_pylab",
        "networkx.drawing.nx_latex"
    ],
    "networkx.drawing.layout": [
        "networkx.utils.decorators.np_random_state",
        "networkx.utils.decorators.argmap.__init__",
        "networkx",
        "networkx.utils"
    ],
    "networkx.drawing.nx_latex": [
        "networkx.utils.decorators.not_implemented_for",
        "networkx",
        "os",
        "networkx.utils.decorators.open_file",
        "networkx.utils.decorators.argmap.__init__",
        "numbers"
    ],
    "networkx.drawing.nx_pylab": [
        "networkx.drawing.layout",
        "networkx",
        "numbers"
    ],
    "networkx.drawing.nx_agraph": [
        "networkx",
        "os",
        "networkx.utils.decorators.open_file",
        "tempfile",
        "networkx.utils.decorators.argmap.__init__"
    ],
    "networkx.drawing.nx_pydot": [
        "networkx",
        "networkx.utils.decorators.open_file",
        "networkx.utils",
        "networkx.utils.decorators.argmap.__init__",
        "locale",
        "warnings"
    ],
    "textrank4zh.util.AttrDict": [],
    "textrank4zh.TextRank4Sentence": [
        "networkx",
        "__future__",
        "textrank4zh.Segmentation",
        "textrank4zh.util",
        "numpy",
        "textrank4zh.TextRank4Sentence.TextRank4Sentence"
    ],
    "textrank4zh.Segmentation": [
        "textrank4zh.Segmentation.SentenceSegmentation",
        "textrank4zh.Segmentation.WordSegmentation",
        "os",
        "__future__",
        "codecs",
        "jieba.posseg",
        "textrank4zh.Segmentation.Segmentation",
        "textrank4zh.util"
    ],
    "jieba.posseg": [
        "re",
        "jieba.posseg.pair",
        "jieba.posseg.POSTokenizer.__init__",
        "jieba.posseg.load_model",
        "__future__",
        "jieba.posseg.POSTokenizer",
        "pickle",
        "jieba._compat",
        "re.compile",
        "jieba.posseg.viterbi",
        "jieba"
    ],
    "jieba": [
        "re",
        "shutil",
        "jieba.finalseg",
        "logging.Logger.addHandler",
        "__future__",
        "logging.StreamHandler.__init__",
        "jieba.Tokenizer.__init__",
        "jieba.Tokenizer",
        "tempfile",
        "threading",
        "jieba._compat",
        "logging.getLogger",
        "logging.Logger.setLevel",
        "hashlib",
        "re.compile",
        "math"
    ],
    "jieba.finalseg": [
        "re",
        "os",
        "jieba.finalseg.load_model",
        "__future__",
        "pickle",
        "jieba._compat",
        "re.compile",
        "<builtin>.set"
    ],
    "jieba._compat": [
        "pkg_resources",
        "os",
        "logging.StreamHandler.__init__",
        "logging.Logger.setLevel",
        "logging.getLogger",
        "logging"
    ],
    "pkg_resources": [
        "pkg_resources.EmptyProvider.__init__",
        "pkg_resources.PathMetadata",
        "pkg_resources.MemoizedZipManifests",
        "pkg_resources.ContextualVersionConflict",
        "pkg_resources.register_namespace_handler",
        "<builtin>.globals",
        "collections",
        "posixpath",
        "ntpath",
        "zipfile",
        "pkg_resources.IMetadataProvider",
        "pkg_resources.UnknownExtra",
        "<builtin>.RuntimeError",
        "pkg_resources.ResolutionError",
        "pkg_resources._ReqExtras",
        "pkg_resources.ResourceManager",
        "functools",
        "email.parser",
        "pkg_resources.Requirement",
        "inspect",
        "pkg_resources.RequirementParseError",
        "re",
        "os",
        "pkg_resources.EggProvider",
        "__future__",
        "operator",
        "plistlib",
        "pkg_resources.WorkingSet",
        "pkg_resources.EntryPoint",
        "pkg_resources._call_aside",
        "pkg_resources.DefaultProvider._register",
        "warnings",
        "pkg_resources.PkgResourcesDeprecationWarning",
        "pkg_resources.DistInfoDistribution",
        "pkg_resources.DefaultProvider",
        "pkg_resources.register_finder",
        "pkg_resources.NullProvider",
        "pkg_resources.NoDists",
        "pkg_resources.ZipProvider",
        "pkg_resources.DistributionNotFound",
        "pkg_resources.register_loader_type",
        "re.compile",
        "pkg_resources.Distribution",
        "types",
        "pkg_resources.ZipManifests",
        "pkgutil",
        "pkg_resources._declare_state",
        "pkg_resources.Environment",
        "pkg_resources.ExtractionError",
        "warnings.filterwarnings",
        "pkg_resources.PEP440Warning",
        "pkg_resources.VersionConflict",
        "pkg_resources.IResourceProvider",
        "pkg_resources.EmptyProvider",
        "importlib.machinery",
        "platform",
        "pkg_resources.FileMetadata",
        "pkg_resources.EggMetadata",
        "stat",
        "imp",
        "tempfile",
        "<builtin>.__import__",
        "<builtin>.hasattr",
        "io",
        "pkg_resources.EggInfoDistribution",
        "textwrap"
    ],
    "pkgutil": [
        "warnings",
        "pkgutil.ImpLoader",
        "os",
        "pkgutil.ImpImporter",
        "importlib.machinery",
        "collections",
        "posixpath",
        "functools.singledispatch",
        "importlib",
        "importlib.util",
        "collections.namedtuple",
        "functools",
        "types"
    ],
    "functools.singledispatch": [
        "functools.update_wrapper",
        "weakref.WeakKeyDictionary.__init__",
        "<builtin>.getattr",
        "weakref",
        "types"
    ],
    "pkgutil.ImpImporter": [],
    "pkgutil.ImpLoader": [],
    "plistlib": [
        "binascii",
        "codecs",
        "<builtin>.globals",
        "contextlib",
        "datetime",
        "re",
        "plistlib.Data",
        "os",
        "warnings",
        "plistlib._PlistParser",
        "plistlib.UID",
        "plistlib._BinaryPlistWriter",
        "<builtin>.object",
        "xml.parsers.expat",
        "re.compile",
        "contextlib.contextmanager",
        "plistlib._BinaryPlistParser",
        "enum",
        "<builtin>.dict",
        "plistlib._DumbXMLWriter",
        "struct",
        "plistlib._PlistWriter",
        "io",
        "plistlib.InvalidFileException"
    ],
    "xml.parsers.expat": [
        "pyexpat"
    ],
    "pyexpat": [],
    "plistlib.Data": [
        "<builtin>.classmethod"
    ],
    "plistlib.UID": [],
    "plistlib._PlistParser": [],
    "plistlib._DumbXMLWriter": [],
    "plistlib._PlistWriter": [],
    "plistlib.InvalidFileException": [],
    "plistlib._BinaryPlistParser": [],
    "plistlib._BinaryPlistWriter": [],
    "email.parser": [
        "email.parser.HeaderParser",
        "email.parser.Parser",
        "email._policybase",
        "email.feedparser",
        "email.parser.BytesHeaderParser",
        "email.parser.BytesParser",
        "io"
    ],
    "email.feedparser": [
        "email.feedparser.FeedParser",
        "re",
        "email._policybase",
        "email.feedparser.BytesFeedParser",
        "email.feedparser.BufferedSubFile",
        "collections",
        "<builtin>.object",
        "re.compile",
        "io",
        "email.errors"
    ],
    "email.feedparser.BufferedSubFile": [],
    "email.feedparser.FeedParser": [],
    "email.feedparser.BytesFeedParser": [],
    "email.parser.Parser": [],
    "email.parser.HeaderParser": [],
    "email.parser.BytesParser": [],
    "email.parser.BytesHeaderParser": [],
    "imp": [
        "warnings",
        "importlib._bootstrap_external",
        "warnings.warn",
        "os",
        "tokenize",
        "importlib.machinery",
        "imp._HackedGetData",
        "imp.NullImporter",
        "imp._LoadSourceCompatibility",
        "imp._LoadCompiledCompatibility",
        "importlib",
        "importlib.util",
        "importlib._bootstrap",
        "types"
    ],
    "importlib._bootstrap": [
        "importlib._bootstrap.ModuleSpec",
        "importlib._bootstrap.FrozenImporter",
        "importlib._bootstrap._DummyModuleLock",
        "importlib._bootstrap.BuiltinImporter",
        "<builtin>.object",
        "importlib._bootstrap._ImportLockContext",
        "importlib._bootstrap._ModuleLockManager",
        "importlib._bootstrap._ModuleLock",
        "importlib._bootstrap._DeadlockError"
    ],
    "importlib._bootstrap._DeadlockError": [],
    "importlib._bootstrap._ModuleLock": [],
    "importlib._bootstrap._DummyModuleLock": [],
    "importlib._bootstrap._ModuleLockManager": [],
    "importlib._bootstrap.ModuleSpec": [
        "<builtin>.property"
    ],
    "importlib._bootstrap.BuiltinImporter": [
        "importlib._bootstrap._requires_builtin",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "importlib._bootstrap._requires_builtin": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap._wrap": [
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap.FrozenImporter": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "importlib._bootstrap._requires_frozen"
    ],
    "importlib._bootstrap._requires_frozen": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap._ImportLockContext": [],
    "importlib._bootstrap_external": [
        "importlib._bootstrap_external.FileFinder",
        "<int>.to_bytes",
        "importlib._bootstrap_external.SourceLoader",
        "importlib._bootstrap_external.SourceFileLoader",
        "importlib._bootstrap_external._NamespaceLoader",
        "<builtin>.object",
        "importlib._bootstrap_external.FileLoader",
        "<builtin>.type",
        "importlib._bootstrap_external.SourcelessFileLoader",
        "importlib._bootstrap_external.PathFinder",
        "importlib._bootstrap_external.WindowsRegistryFinder",
        "importlib._bootstrap_external._LoaderBasics",
        "importlib._bootstrap_external.ExtensionFileLoader",
        "importlib._bootstrap_external._NamespacePath"
    ],
    "<int>.to_bytes": [],
    "importlib._bootstrap_external.WindowsRegistryFinder": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external._LoaderBasics": [],
    "importlib._bootstrap_external.SourceLoader": [],
    "importlib._bootstrap_external.FileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._check_name": [
        "importlib._bootstrap_external._check_name._wrap"
    ],
    "importlib._bootstrap_external._check_name._wrap": [
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external.SourceFileLoader": [],
    "importlib._bootstrap_external.SourcelessFileLoader": [],
    "importlib._bootstrap_external.ExtensionFileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._NamespacePath": [],
    "importlib._bootstrap_external._NamespaceLoader": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.PathFinder": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.FileFinder": [
        "<builtin>.classmethod"
    ],
    "imp.NullImporter": [],
    "imp._HackedGetData": [],
    "imp._LoadSourceCompatibility": [],
    "imp._LoadCompiledCompatibility": [],
    "pkg_resources.PEP440Warning": [],
    "pkg_resources.ResolutionError": [],
    "pkg_resources.VersionConflict": [
        "<builtin>.property"
    ],
    "pkg_resources.ContextualVersionConflict": [
        "<builtin>.property"
    ],
    "pkg_resources.DistributionNotFound": [
        "<builtin>.property"
    ],
    "pkg_resources.UnknownExtra": [],
    "pkg_resources.IMetadataProvider": [],
    "pkg_resources.IResourceProvider": [],
    "pkg_resources.WorkingSet": [
        "<builtin>.classmethod"
    ],
    "pkg_resources._ReqExtras": [],
    "pkg_resources.Environment": [
        "pkg_resources.get_supported_platform"
    ],
    "pkg_resources.get_supported_platform": [
        "pkg_resources.get_build_platform",
        "pkg_resources._macosx_vers"
    ],
    "pkg_resources.get_build_platform": [
        "<str>.startswith",
        "sysconfig",
        "sysconfig.get_platform",
        "pkg_resources._macosx_arch",
        "<builtin>.int",
        "pkg_resources._macosx_vers"
    ],
    "sysconfig": [
        "<str>.endswith",
        "<str>.lower",
        "posixpath.normpath",
        "ntpath.dirname",
        "sysconfig._get_default_scheme",
        "ntpath.normpath",
        "os",
        "posixpath",
        "sysconfig._fix_pcbuild",
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.join",
        "<builtin>.getattr",
        "sysconfig._safe_realpath",
        "sysconfig.is_python_build"
    ],
    "ntpath.normpath": [
        "<str>.startswith",
        "<builtin>.len",
        "<str>.lstrip",
        "os._fspath",
        "<builtin>.isinstance",
        "<str>.split",
        "<str>.replace",
        "ntpath.splitdrive"
    ],
    "sysconfig._safe_realpath": [
        "posixpath.realpath"
    ],
    "posixpath.realpath": [
        "os._fspath",
        "posixpath._joinrealpath",
        "posixpath.abspath"
    ],
    "posixpath._joinrealpath": [
        "posixpath.islink",
        "posixpath.join",
        "<builtin>.isinstance",
        "posixpath._joinrealpath",
        "posixpath.split",
        "posixpath.isabs"
    ],
    "posixpath.split": [
        "os._fspath",
        "<builtin>.len",
        "<str>.rfind",
        "posixpath._get_sep"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "sysconfig._fix_pcbuild": [
        "<str>.startswith",
        "posixpath.normcase",
        "ntpath.normcase"
    ],
    "sysconfig.is_python_build": [
        "sysconfig._is_python_source_dir"
    ],
    "sysconfig._is_python_source_dir": [
        "ntpath.join",
        "posixpath.join",
        "genericpath.isfile"
    ],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "sysconfig._get_default_scheme": [],
    "sysconfig.get_platform": [
        "re",
        "sysconfig.get_config_vars",
        "<builtin>.int",
        "<builtin>.hasattr",
        "re.compile",
        "_osx_support",
        "_osx_support.get_platform_osx"
    ],
    "_osx_support": [
        "re",
        "os"
    ],
    "sysconfig.get_config_vars": [
        "ntpath.dirname",
        "sysconfig._init_posix",
        "sysconfig._init_non_posix",
        "sysconfig.get_makefile_filename",
        "_osx_support.customize_config_vars",
        "posixpath.dirname",
        "ntpath.join",
        "sysconfig._getuserbase",
        "<map>.get",
        "_osx_support",
        "posixpath.join",
        "sysconfig._safe_realpath"
    ],
    "sysconfig._init_non_posix": [
        "posixpath.dirname",
        "sysconfig._safe_realpath",
        "ntpath.dirname",
        "sysconfig.get_path"
    ],
    "sysconfig.get_path": [
        "sysconfig.get_paths"
    ],
    "sysconfig.get_paths": [
        "sysconfig._expand_vars"
    ],
    "sysconfig._expand_vars": [
        "posixpath.normpath",
        "ntpath.normpath",
        "sysconfig.get_config_vars",
        "sysconfig._extend_dict",
        "sysconfig._subst_vars",
        "ntpath.expanduser",
        "posixpath.expanduser"
    ],
    "sysconfig._extend_dict": [
        "<map>.keys"
    ],
    "ntpath.expanduser": [
        "<str>.startswith",
        "ntpath.dirname",
        "<builtin>.len",
        "os._fspath",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath._get_bothseps"
    ],
    "posixpath.expanduser": [
        "<str>.startswith",
        "<str>.find",
        "<builtin>.len",
        "posixpath._get_sep",
        "os._fspath",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "sysconfig._subst_vars": [
        "<builtin>.AttributeError"
    ],
    "<builtin>.AttributeError": [],
    "sysconfig._init_posix": [
        "<builtin>.locals",
        "<builtin>.globals",
        "sysconfig._get_sysconfigdata_name",
        "<builtin>.__import__"
    ],
    "sysconfig._get_sysconfigdata_name": [
        "<builtin>.getattr"
    ],
    "<builtin>.locals": [],
    "sysconfig._getuserbase": [
        "sysconfig._getuserbase.joinuser"
    ],
    "sysconfig._getuserbase.joinuser": [
        "ntpath.join",
        "ntpath.expanduser",
        "posixpath.join",
        "posixpath.expanduser"
    ],
    "sysconfig.get_makefile_filename": [
        "ntpath.join",
        "posixpath.join",
        "sysconfig.get_path",
        "<builtin>.hasattr"
    ],
    "_osx_support.customize_config_vars": [
        "_osx_support._supports_universal_builds",
        "_osx_support._override_all_archs",
        "_osx_support._check_for_unavailable_sdk",
        "_osx_support._remove_universal_flags"
    ],
    "_osx_support._supports_universal_builds": [
        "_osx_support._get_system_version",
        "<builtin>.bool",
        "<builtin>.int",
        "<builtin>.tuple",
        "<str>.split"
    ],
    "_osx_support._get_system_version": [
        "<builtin>.open"
    ],
    "_osx_support._remove_universal_flags": [
        "_osx_support._save_modified_value",
        "re.sub"
    ],
    "_osx_support._save_modified_value": [],
    "_osx_support._override_all_archs": [
        "_osx_support._save_modified_value",
        "re.sub"
    ],
    "_osx_support._check_for_unavailable_sdk": [
        "_osx_support._save_modified_value",
        "re.search",
        "genericpath.exists",
        "re.sub"
    ],
    "re.search": [
        "re._compile"
    ],
    "genericpath.exists": [],
    "_osx_support.get_platform_osx": [
        "_osx_support._get_system_version",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.int",
        "<builtin>.tuple",
        "<map>.get",
        "re.findall",
        "<builtin>.set",
        "<builtin>.sorted"
    ],
    "re.findall": [
        "re._compile"
    ],
    "pkg_resources._macosx_vers": [
        "plistlib.readPlist",
        "genericpath.exists",
        "platform.mac_ver",
        "<builtin>.hasattr"
    ],
    "platform.mac_ver": [
        "platform._mac_ver_xml"
    ],
    "platform._mac_ver_xml": [
        "<builtin>.open",
        "plistlib.load",
        "plistlib",
        "genericpath.exists"
    ],
    "plistlib.load": [
        "<map>.values"
    ],
    "<map>.values": [],
    "plistlib.readPlist": [
        "warnings.warn",
        "plistlib.load",
        "plistlib._maybe_open"
    ],
    "plistlib._maybe_open": [
        "<builtin>.open",
        "<builtin>.isinstance"
    ],
    "pkg_resources._macosx_arch": [],
    "pkg_resources.ExtractionError": [],
    "pkg_resources.ResourceManager": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources.NullProvider": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources.register_loader_type": [],
    "pkg_resources.EggProvider": [],
    "pkg_resources.DefaultProvider": [
        "<builtin>.classmethod"
    ],
    "pkg_resources.DefaultProvider._register": [
        "<builtin>.type",
        "pkg_resources.register_loader_type",
        "<builtin>.getattr"
    ],
    "pkg_resources.EmptyProvider": [],
    "pkg_resources.EmptyProvider.__init__": [],
    "pkg_resources.ZipManifests": [
        "<builtin>.classmethod"
    ],
    "pkg_resources.MemoizedZipManifests": [
        "collections.namedtuple"
    ],
    "pkg_resources.ZipProvider": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pkg_resources.FileMetadata": [],
    "pkg_resources.PathMetadata": [],
    "pkg_resources.EggMetadata": [],
    "pkg_resources._declare_state": [
        "<map>.update",
        "<builtin>.globals"
    ],
    "pkg_resources.register_finder": [],
    "pkg_resources.NoDists": [],
    "pkg_resources.register_namespace_handler": [],
    "pkg_resources.EntryPoint": [
        "<builtin>.classmethod",
        "re.compile"
    ],
    "pkg_resources.Distribution": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.hasattr"
    ],
    "pkg_resources.EggInfoDistribution": [],
    "pkg_resources.DistInfoDistribution": [
        "<builtin>.property",
        "re.compile"
    ],
    "pkg_resources.RequirementParseError": [],
    "pkg_resources.Requirement": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources._call_aside": [
        "pkg_resources._initialize_master_working_set",
        "pkg_resources._initialize"
    ],
    "pkg_resources._initialize": [
        "pkg_resources.ResourceManager.__init__",
        "<builtin>.dir",
        "<builtin>.getattr"
    ],
    "pkg_resources.ResourceManager.__init__": [],
    "pkg_resources._initialize_master_working_set": [
        "pkg_resources._declare_state",
        "<builtin>.map",
        "<builtin>.list",
        "pkg_resources.WorkingSet.subscribe",
        "<builtin>.globals",
        "<builtin>.locals",
        "<builtin>.tuple",
        "pkg_resources.WorkingSet._build_master"
    ],
    "pkg_resources.WorkingSet._build_master": [
        "__main__",
        "pkg_resources.WorkingSet._build_from_requirements",
        "pkg_resources.WorkingSet.require",
        "pkg_resources.WorkingSet.__init__"
    ],
    "pkg_resources.WorkingSet.__init__": [
        "pkg_resources.WorkingSet.add_entry"
    ],
    "pkg_resources.WorkingSet.add_entry": [
        "pkg_resources.find_distributions",
        "pkg_resources.WorkingSet.add"
    ],
    "pkg_resources.find_distributions": [
        "pkg_resources._find_adapter",
        "pkgutil.get_importer"
    ],
    "pkgutil.get_importer": [],
    "pkg_resources._find_adapter": [
        "inspect.getmro",
        "<builtin>.type",
        "<builtin>.getattr",
        "pkg_resources._always_object"
    ],
    "inspect.getmro": [],
    "pkg_resources._always_object": [],
    "pkg_resources.WorkingSet.add": [
        "pkg_resources.WorkingSet._added_new"
    ],
    "pkg_resources.WorkingSet._added_new": [],
    "__main__": [
        "argparse",
        "json",
        "pythoncg",
        "utils.constants",
        "formats"
    ],
    "formats": [],
    "pythoncg": [
        "machinery.classes",
        "machinery.callgraph",
        "os",
        "machinery.imports",
        "json",
        "machinery.modules",
        "machinery.nodes",
        "utils",
        "processing.extProcessor",
        "machinery.definitions",
        "machinery.returns",
        "machinery.scopes",
        "machinery.gol",
        "pythoncg.CallGraphGenerator"
    ],
    "processing.extProcessor": [
        "machinery.classes",
        "processing.base",
        "machinery.callgraph",
        "processing.extProcessor.ExtProcessor",
        "machinery.imports",
        "machinery.nodes",
        "machinery.modules",
        "utils",
        "ast",
        "machinery.definitions",
        "machinery.scopes",
        "machinery.gol",
        "functools"
    ],
    "machinery.definitions": [
        "machinery.definitions.ChangeItem",
        "machinery.definitions.DefinitionManager",
        "machinery.definitions.DefinitionError",
        "utils",
        "machinery.definitions.ChangeManager",
        "machinery.definitions.PointItem",
        "machinery.gol",
        "math",
        "machinery.definitions.Definition",
        "heapq"
    ],
    "utils": [],
    "machinery.gol": [],
    "machinery.definitions.PointItem": [
        "<builtin>.set"
    ],
    "machinery.definitions.DefinitionManager": [],
    "machinery.definitions.Definition": [],
    "machinery.definitions.ChangeManager": [],
    "machinery.definitions.ChangeItem": [],
    "machinery.definitions.DefinitionError": [],
    "machinery.classes": [
        "machinery.classes.ClassManager",
        "machinery.classes.ClassNode"
    ],
    "machinery.classes.ClassManager": [],
    "machinery.classes.ClassNode": [],
    "machinery.scopes": [
        "machinery.scopes.ScopeError",
        "machinery.scopes.ScopeItem",
        "symtable",
        "utils",
        "machinery.scopes.ScopeManager",
        "copy"
    ],
    "symtable": [
        "symtable.SymbolTableFactory.__init__",
        "symtable.SymbolTable",
        "symtable.Class",
        "symtable.SymbolTableFactory",
        "symtable.Symbol",
        "weakref",
        "symtable.Function"
    ],
    "symtable.SymbolTableFactory": [],
    "symtable.SymbolTableFactory.__init__": [
        "weakref.WeakValueDictionary.__init__"
    ],
    "symtable.SymbolTable": [],
    "symtable.Function": [],
    "symtable.Class": [],
    "symtable.Symbol": [],
    "machinery.scopes.ScopeManager": [],
    "machinery.scopes.ScopeItem": [],
    "machinery.scopes.ScopeError": [],
    "processing.base": [
        "os",
        "utils",
        "ast",
        "machinery.definitions",
        "processing.base.ProcessingBase",
        "functools"
    ],
    "processing.base.ProcessingBase": [
        "<builtin>.property"
    ],
    "machinery.imports": [
        "machinery.imports.ImportManager",
        "pkg_resources",
        "os",
        "utils",
        "ast",
        "machinery.imports.ImportManagerError",
        "importlib",
        "copy"
    ],
    "machinery.imports.ImportManager": [],
    "machinery.imports.ImportManagerError": [],
    "machinery.nodes": [
        "machinery.nodes.NodeManager"
    ],
    "machinery.nodes.NodeManager": [],
    "machinery.modules": [
        "machinery.modules.Module",
        "machinery.modules.ModuleManager"
    ],
    "machinery.modules.ModuleManager": [],
    "machinery.modules.Module": [],
    "machinery.callgraph": [
        "re",
        "machinery.callgraph.CallGraph",
        "machinery.callgraph.CallGraphError",
        "utils"
    ],
    "machinery.callgraph.CallGraph": [],
    "machinery.callgraph.CallGraphError": [],
    "processing.extProcessor.ExtProcessor": [
        "<builtin>.set"
    ],
    "machinery.returns": [
        "machinery.returns.ReturnManager",
        "machinery.returns.ReturnItem",
        "utils"
    ],
    "machinery.returns.ReturnManager": [],
    "machinery.returns.ReturnItem": [],
    "pythoncg.CallGraphGenerator": [
        "<builtin>.set"
    ],
    "utils.constants": [],
    "pkg_resources.WorkingSet.require": [
        "pkg_resources.parse_requirements",
        "pkg_resources.WorkingSet.resolve",
        "pkg_resources.WorkingSet.add"
    ],
    "pkg_resources.parse_requirements": [
        "<builtin>.iter",
        "<builtin>.next",
        "pkg_resources.Requirement.__init__",
        "pkg_resources.yield_lines"
    ],
    "pkg_resources.yield_lines": [
        "<builtin>.isinstance",
        "pkg_resources.yield_lines"
    ],
    "pkg_resources.Requirement.__init__": [
        "pkg_resources.safe_name",
        "<str>.lower",
        "<builtin>.hash",
        "<builtin>.frozenset",
        "<builtin>.map",
        "<builtin>.str",
        "<builtin>.tuple",
        "<builtin>.super"
    ],
    "pkg_resources.safe_name": [
        "re.sub"
    ],
    "pkg_resources.WorkingSet.resolve": [
        "_collections.defaultdict",
        "pkg_resources.WorkingSet.__init__",
        "<builtin>.list",
        "pkg_resources.Environment.__init__",
        "<map>.get",
        "pkg_resources.VersionConflict.with_context",
        "pkg_resources._ReqExtras.markers_pass",
        "pkg_resources.Environment.best_match"
    ],
    "pkg_resources._ReqExtras.markers_pass": [
        "<builtin>.any"
    ],
    "pkg_resources.Environment.__init__": [
        "pkg_resources.Environment.scan"
    ],
    "pkg_resources.Environment.scan": [
        "pkg_resources.find_distributions",
        "pkg_resources.Environment.add"
    ],
    "pkg_resources.Environment.add": [
        "operator.attrgetter.__init__",
        "pkg_resources.Environment.can_add"
    ],
    "pkg_resources.Environment.can_add": [
        "pkg_resources.compatible_platforms"
    ],
    "pkg_resources.compatible_platforms": [
        "<builtin>.int"
    ],
    "pkg_resources.Environment.best_match": [
        "pkg_resources.WorkingSet.find",
        "pkg_resources.Environment.obtain"
    ],
    "pkg_resources.WorkingSet.find": [
        "<map>.get"
    ],
    "pkg_resources.Environment.obtain": [],
    "pkg_resources.VersionConflict.with_context": [],
    "pkg_resources.WorkingSet._build_from_requirements": [
        "pkg_resources.WorkingSet.__init__",
        "pkg_resources.Environment.__init__",
        "pkg_resources.WorkingSet.add",
        "pkg_resources.WorkingSet.add_entry",
        "pkg_resources.parse_requirements",
        "pkg_resources.WorkingSet.resolve"
    ],
    "pkg_resources.WorkingSet.subscribe": [
        "pkg_resources._initialize_master_working_set.<lambda2>",
        "pkg_resources._initialize_master_working_set.<lambda1>",
        "pkg_resources.WorkingSet.__iter__"
    ],
    "pkg_resources.WorkingSet.__iter__": [],
    "pkg_resources._initialize_master_working_set.<lambda2>": [],
    "pkg_resources._initialize_master_working_set.<lambda1>": [],
    "pkg_resources.PkgResourcesDeprecationWarning": [],
    "jieba.finalseg.load_model": [
        "jieba._compat.<lambda1>",
        "pickle._load",
        "jieba._compat.<lambda2>"
    ],
    "jieba._compat.<lambda1>": [
        "ntpath.join",
        "posixpath.join"
    ],
    "jieba._compat.<lambda2>": [
        "ntpath.dirname",
        "posixpath.normpath",
        "ntpath.normpath",
        "<builtin>.open",
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.join"
    ],
    "pickle._load": [
        "pickle._Unpickler.load",
        "pickle._Unpickler.__init__"
    ],
    "pickle._Unpickler.__init__": [
        "<builtin>.iter"
    ],
    "pickle._Unpickler.load": [
        "pickle._Unframer.__init__",
        "<builtin>.isinstance",
        "pickle._Unframer.read",
        "<builtin>.hasattr"
    ],
    "pickle._Unframer.__init__": [],
    "pickle._Unframer.read": [
        "<builtin>.len"
    ],
    "jieba.Tokenizer": [
        "<builtin>.staticmethod"
    ],
    "jieba.Tokenizer.__init__": [
        "threading.RLock",
        "jieba.<lambda1>"
    ],
    "jieba.<lambda1>": [
        "ntpath.join",
        "posixpath.join",
        "posixpath.normpath",
        "ntpath.normpath"
    ],
    "jieba.posseg.viterbi": [
        "operator",
        "<builtin>.float"
    ],
    "jieba.posseg.load_model": [
        "jieba._compat.<lambda1>",
        "pickle._load",
        "jieba._compat.<lambda2>"
    ],
    "jieba.posseg.pair": [],
    "jieba.posseg.POSTokenizer": [],
    "jieba.posseg.POSTokenizer.__init__": [
        "jieba.Tokenizer.__init__",
        "jieba.posseg.POSTokenizer.load_word_tag"
    ],
    "jieba.posseg.POSTokenizer.load_word_tag": [
        "<builtin>.enumerate",
        "jieba._compat.resolve_filename",
        "<builtin>.ValueError"
    ],
    "jieba._compat.resolve_filename": [
        "<builtin>.repr"
    ],
    "textrank4zh.Segmentation.WordSegmentation": [],
    "textrank4zh.Segmentation.SentenceSegmentation": [],
    "textrank4zh.Segmentation.Segmentation": [],
    "textrank4zh.TextRank4Sentence.TextRank4Sentence": [],
    "textrank4zh.TextRank4Keyword": [
        "networkx",
        "__future__",
        "textrank4zh.Segmentation",
        "textrank4zh.util",
        "numpy",
        "textrank4zh.TextRank4Keyword.TextRank4Keyword"
    ],
    "textrank4zh.TextRank4Keyword.TextRank4Keyword": [],
    "textrank4zh.TextRank4Sentence.TextRank4Sentence.__init__": [
        "textrank4zh.Segmentation.Segmentation.__init__"
    ],
    "textrank4zh.Segmentation.Segmentation.__init__": [
        "textrank4zh.Segmentation.WordSegmentation.__init__",
        "textrank4zh.Segmentation.SentenceSegmentation.__init__"
    ],
    "textrank4zh.Segmentation.WordSegmentation.__init__": [
        "codecs.StreamReaderWriter.__next__",
        "textrank4zh.util.as_text",
        "codecs.StreamReaderWriter.__iter__",
        "codecs.open",
        "textrank4zh.Segmentation.get_default_stop_words_file",
        "<builtin>.type",
        "<builtin>.set"
    ],
    "textrank4zh.util.as_text": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.ValueError"
    ],
    "textrank4zh.Segmentation.get_default_stop_words_file": [
        "ntpath.dirname",
        "posixpath.realpath",
        "ntpath.realpath",
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.join"
    ],
    "ntpath.realpath": [],
    "codecs.open": [
        "codecs.StreamReaderWriter.__init__"
    ],
    "codecs.StreamReaderWriter.__init__": [],
    "codecs.StreamReaderWriter.__iter__": [],
    "codecs.StreamReaderWriter.__next__": [],
    "textrank4zh.Segmentation.SentenceSegmentation.__init__": [
        "<builtin>.set",
        "textrank4zh.util.as_text"
    ],
    "textrank4zh.TextRank4Sentence.TextRank4Sentence.analyze": [
        "textrank4zh.util.sort_sentences",
        "textrank4zh.Segmentation.Segmentation.segment"
    ],
    "textrank4zh.Segmentation.Segmentation.segment": [
        "textrank4zh.util.AttrDict.__init__",
        "textrank4zh.util.as_text",
        "textrank4zh.Segmentation.WordSegmentation.segment_sentences",
        "textrank4zh.Segmentation.SentenceSegmentation.segment"
    ],
    "textrank4zh.Segmentation.SentenceSegmentation.segment": [
        "textrank4zh.util.debug",
        "<builtin>.len",
        "textrank4zh.util.as_text"
    ],
    "textrank4zh.util.debug": [
        "<builtin>.print",
        "<builtin>.str"
    ],
    "textrank4zh.Segmentation.WordSegmentation.segment_sentences": [
        "textrank4zh.Segmentation.WordSegmentation.segment"
    ],
    "textrank4zh.Segmentation.WordSegmentation.segment": [
        "<builtin>.len",
        "jieba.posseg.cut",
        "textrank4zh.util.as_text"
    ],
    "jieba.posseg.cut": [
        "jieba.lac_small.predict.get_result",
        "jieba.posseg.POSTokenizer.cut",
        "<builtin>.enumerate",
        "jieba.lac_small.predict",
        "jieba.posseg.pair.__init__",
        "jieba._compat.strdecode"
    ],
    "jieba.lac_small.predict": [
        "ntpath.dirname",
        "argparse",
        "os",
        "jieba.lac_small.utils",
        "posixpath.dirname",
        "ntpath.join",
        "ntpath.abspath",
        "jieba.lac_small.utils.init_checkpoint",
        "jieba.lac_small.reader_small",
        "jieba.lac_small.creator",
        "jieba.lac_small.reader_small.Dataset.__init__",
        "posixpath.join",
        "posixpath.abspath",
        "numpy"
    ],
    "jieba.lac_small.utils": [
        "__future__",
        "numpy",
        "io",
        "os"
    ],
    "jieba.lac_small.creator": [
        "math",
        "jieba.lac_small.nets",
        "os"
    ],
    "jieba.lac_small.nets": [
        "math",
        "os"
    ],
    "jieba.lac_small.reader_small": [
        "jieba.lac_small.reader_small.Dataset",
        "__future__",
        "io",
        "os"
    ],
    "jieba.lac_small.reader_small.Dataset": [
        "<builtin>.property"
    ],
    "jieba.lac_small.reader_small.Dataset.__init__": [
        "ntpath.dirname",
        "jieba.lac_small.reader_small.load_kv_dict",
        "posixpath.dirname",
        "ntpath.join",
        "ntpath.abspath",
        "posixpath.join",
        "posixpath.abspath"
    ],
    "jieba.lac_small.reader_small.load_kv_dict": [
        "<builtin>.KeyError",
        "_io.open",
        "<builtin>.len"
    ],
    "jieba.lac_small.utils.init_checkpoint": [
        "genericpath.exists"
    ],
    "jieba._compat.strdecode": [
        "<builtin>.isinstance"
    ],
    "jieba.lac_small.predict.get_result": [
        "jieba.lac_small.utils.parse_result",
        "jieba.lac_small.reader_small.Dataset.get_vars"
    ],
    "jieba.lac_small.reader_small.Dataset.get_vars": [
        "jieba.lac_small.reader_small.Dataset.word_to_ids"
    ],
    "jieba.lac_small.reader_small.Dataset.word_to_ids": [],
    "jieba.lac_small.utils.parse_result": [
        "<builtin>.enumerate",
        "<builtin>.range",
        "<builtin>.len",
        "<builtin>.str"
    ],
    "jieba.posseg.pair.__init__": [],
    "jieba.posseg.POSTokenizer.cut": [
        "jieba.posseg.POSTokenizer.__cut_internal",
        "jieba.posseg.pair.__iter__"
    ],
    "jieba.posseg.POSTokenizer.__cut_internal": [
        "jieba.posseg.POSTokenizer.__cut_DAG",
        "jieba.posseg.pair.__iter__",
        "jieba.posseg.POSTokenizer.__cut_DAG_NO_HMM",
        "<str>.split",
        "jieba.posseg.POSTokenizer.makesure_userdict_loaded",
        "jieba.posseg.pair.__init__",
        "jieba._compat.strdecode"
    ],
    "jieba.posseg.POSTokenizer.makesure_userdict_loaded": [
        "<map>.update"
    ],
    "jieba.posseg.POSTokenizer.__cut_DAG_NO_HMM": [
        "jieba.posseg.pair.__init__",
        "<builtin>.len",
        "<map>.get"
    ],
    "jieba.posseg.POSTokenizer.__cut_DAG": [
        "jieba.posseg.pair.__iter__",
        "<builtin>.len",
        "<map>.get",
        "jieba.posseg.POSTokenizer.__cut_detail",
        "jieba.posseg.pair.__init__"
    ],
    "jieba.posseg.POSTokenizer.__cut_detail": [
        "jieba.posseg.POSTokenizer.__cut",
        "<str>.split",
        "jieba.posseg.pair.__init__",
        "jieba.posseg.pair.__iter__"
    ],
    "jieba.posseg.POSTokenizer.__cut": [
        "<builtin>.enumerate",
        "jieba.posseg.pair.__init__",
        "<builtin>.len",
        "jieba.posseg.viterbi"
    ],
    "jieba.posseg.pair.__iter__": [],
    "textrank4zh.util.AttrDict.__init__": [
        "<builtin>.super"
    ],
    "textrank4zh.util.sort_sentences": [
        "networkx.algorithms.link_analysis.pagerank_alg.pagerank",
        "<builtin>.len",
        "textrank4zh.util.AttrDict.__init__",
        "textrank4zh.util.get_similarity",
        "<builtin>.sorted"
    ],
    "textrank4zh.util.get_similarity": [
        "<builtin>.len",
        "<builtin>.float",
        "<builtin>.list",
        "<builtin>.sum",
        "<builtin>.set",
        "<builtin>.abs"
    ],
    "<builtin>.sum": [],
    "networkx.algorithms.link_analysis.pagerank_alg.pagerank": [
        "networkx.algorithms.link_analysis.pagerank_alg._pagerank_scipy"
    ],
    "networkx.algorithms.link_analysis.pagerank_alg._pagerank_scipy": [
        "networkx.exception.PowerIterationFailedConvergence.__init__",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.list",
        "networkx.convert_matrix.to_scipy_sparse_array",
        "<builtin>.sum",
        "<builtin>.dict",
        "<builtin>.range",
        "<builtin>.zip",
        "numpy"
    ],
    "networkx.convert_matrix.to_scipy_sparse_array": [
        "networkx.NetworkXError",
        "<builtin>.len",
        "<builtin>.list",
        "networkx.algorithms.centrality.closeness.NetworkXError",
        "<builtin>.dict",
        "<builtin>.range",
        "networkx.classes.function.selfloop_edges",
        "<builtin>.set",
        "<builtin>.zip"
    ],
    "networkx.NetworkXError": [],
    "networkx.algorithms.centrality.closeness.NetworkXError": [],
    "networkx.classes.function.selfloop_edges": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "networkx.exception.PowerIterationFailedConvergence.__init__": [
        "<builtin>.super"
    ],
    "textrank4zh.TextRank4Sentence.TextRank4Sentence.get_key_sentences": [
        "<builtin>.len"
    ],
    "textrank4zh.util.is_text": [
        "<builtin>.isinstance"
    ],
    "textrank4zh.util.combine": [
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "textrank4zh.util.sort_words": [
        "textrank4zh.util.debug",
        "networkx.algorithms.link_analysis.pagerank_alg.pagerank",
        "textrank4zh.util.combine",
        "textrank4zh.util.AttrDict.__init__",
        "<builtin>.sorted"
    ],
    "textrank4zh.TextRank4Keyword.TextRank4Keyword.__init__": [
        "textrank4zh.Segmentation.Segmentation.__init__"
    ],
    "textrank4zh.TextRank4Keyword.TextRank4Keyword.analyze": [
        "textrank4zh.util.debug",
        "textrank4zh.util.sort_words",
        "textrank4zh.Segmentation.Segmentation.segment"
    ],
    "textrank4zh.TextRank4Keyword.TextRank4Keyword.get_keywords": [
        "<builtin>.len"
    ],
    "textrank4zh.TextRank4Keyword.TextRank4Keyword.get_keyphrases": [
        "<str>.count",
        "textrank4zh.TextRank4Keyword.TextRank4Keyword.get_keywords",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "<str>.count": []
}