{
    "_py_abc": [
        "_py_abc.ABCMeta",
        "_weakrefset"
    ],
    "_weakrefset": [
        "_weakrefset.WeakSet",
        "_weakrefset._IterationGuard"
    ],
    "abc": [
        "_py_abc",
        "abc.ABC",
        "abc.ABCMeta",
        "abc.abstractclassmethod",
        "abc.abstractstaticmethod",
        "abc.abstractproperty"
    ],
    "os": [
        "posixpath",
        "abc",
        "<builtin>.ImportError",
        "os._createenviron",
        "os.PathLike",
        "os._AddedDllDirectory",
        "os._wrap_close",
        "ntpath",
        "<builtin>.set",
        "os._get_exports_list",
        "os._exists",
        "os._Environ",
        "os._Environ.__init__",
        "os._fscodec",
        "collections.abc",
        "<builtin>.globals",
        "os._add",
        "stat"
    ],
    "stat": [],
    "_collections_abc": [
        "_collections_abc.ByteString",
        "_collections_abc.Callable",
        "_collections_abc.MutableMapping",
        "<builtin>.iter",
        "_collections_abc.Sequence",
        "<builtin>.type",
        "_collections_abc.AsyncIterable",
        "_collections_abc.Generator",
        "_collections_abc.Collection",
        "_collections_abc.Coroutine",
        "_collections_abc.Awaitable",
        "<builtin>.range",
        "<builtin>.reversed",
        "<builtin>.zip",
        "<builtin>.set",
        "_collections_abc.Sized",
        "_collections_abc.MutableSequence",
        "_collections_abc.AsyncGenerator",
        "_collections_abc.MappingView",
        "_collections_abc.KeysView",
        "_collections_abc.ValuesView",
        "_collections_abc.AsyncIterator",
        "_collections_abc.Set",
        "abc",
        "_collections_abc.Reversible",
        "_collections_abc.Hashable",
        "_collections_abc.Iterator",
        "_collections_abc.Mapping",
        "_collections_abc.ItemsView",
        "_collections_abc.Container",
        "_collections_abc.Iterable",
        "_collections_abc.MutableSet",
        "<builtin>.bytearray"
    ],
    "posixpath": [
        "stat",
        "genericpath",
        "os"
    ],
    "genericpath": [
        "stat",
        "os"
    ],
    "functools": [
        "abc",
        "functools.singledispatchmethod",
        "collections.namedtuple",
        "<builtin>.object",
        "collections",
        "functools.cached_property",
        "functools._HashedSeq",
        "functools.partialmethod",
        "functools.partial",
        "reprlib"
    ],
    "operator.methodcaller.__reduce__": [
        "functools",
        "_functools.partial"
    ],
    "collections": [
        "collections.UserList",
        "operator",
        "collections.UserDict",
        "collections.Counter",
        "heapq",
        "collections.UserString",
        "keyword",
        "collections.OrderedDict",
        "collections._Link",
        "collections._OrderedDictKeysView",
        "collections.ChainMap",
        "reprlib",
        "collections._OrderedDictItemsView",
        "collections._OrderedDictValuesView"
    ],
    "operator": [
        "operator.methodcaller",
        "operator.attrgetter",
        "operator.itemgetter"
    ],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "heapq": [
        "doctest.testmod",
        "<builtin>.print",
        "_heapq",
        "doctest"
    ],
    "_heapq": [],
    "doctest": [
        "doctest._OutputRedirectingPdb",
        "doctest.DocTestCase",
        "doctest.OutputChecker",
        "inspect",
        "doctest.register_optionflag",
        "re",
        "doctest.DebugRunner",
        "os",
        "__future__",
        "sys.exit",
        "traceback",
        "doctest.DocTestRunner",
        "doctest._DocTestSuite",
        "io",
        "doctest._test",
        "doctest.DocTest",
        "collections.namedtuple",
        "doctest.Example",
        "doctest.UnexpectedException",
        "doctest._SpoofOut",
        "difflib",
        "doctest.DocTestFailure",
        "linecache",
        "collections",
        "doctest.SkipDocTestCase",
        "doctest.DocTestFinder",
        "doctest.DocFileCase",
        "doctest.DocTestParser",
        "doctest._TestClass",
        "unittest"
    ],
    "__future__": [
        "__future__._Feature.__init__",
        "__future__._Feature"
    ],
    "difflib": [
        "collections.namedtuple",
        "heapq",
        "collections",
        "difflib.Differ",
        "difflib._test",
        "difflib.SequenceMatcher",
        "difflib.HtmlDiff",
        "re"
    ],
    "re": [
        "sre_compile",
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools.singledispatchmethod.__get__._method",
        "re.Scanner",
        "re.RegexFlag",
        "functools",
        "enum",
        "sre_parse",
        "<builtin>.chr",
        "sre_compile.compile",
        "functools.lru_cache",
        "functools.singledispatch.wrapper",
        "copyreg.pickle",
        "<builtin>.globals",
        "copyreg",
        "<builtin>.type"
    ],
    "difflib._mdiff": [
        "difflib.ndiff",
        "re.compile",
        "difflib._mdiff._line_pair_iterator",
        "<builtin>.next",
        "re"
    ],
    "difflib._test": [
        "doctest.testmod",
        "difflib",
        "doctest"
    ],
    "inspect": [
        "operator",
        "inspect.BoundArguments",
        "inspect.Signature",
        "enum",
        "types",
        "inspect.EndOfBlock",
        "inspect._empty",
        "tokenize",
        "<builtin>.type",
        "re",
        "inspect._main",
        "os",
        "<builtin>.hasattr",
        "inspect._ParameterKind",
        "collections.namedtuple",
        "importlib.machinery",
        "token",
        "inspect.Parameter",
        "<builtin>.globals",
        "inspect.BlockFinder",
        "abc",
        "dis",
        "linecache",
        "<builtin>.object",
        "collections",
        "functools",
        "inspect._void",
        "warnings",
        "collections.abc"
    ],
    "dis": [
        "collections.namedtuple",
        "opcode",
        "dis._test",
        "collections",
        "types",
        "dis.Instruction",
        "dis.Bytecode",
        "io"
    ],
    "types": [
        "types._GeneratorWrapper",
        "<builtin>.object",
        "types.DynamicClassAttribute",
        "sys.exc_info",
        "types._cell_factory",
        "types._g",
        "types._C",
        "<builtin>.globals",
        "<builtin>.type"
    ],
    "io": [
        "abc",
        "io.BufferedIOBase",
        "io.TextIOBase",
        "_io._IOBase.register",
        "io.RawIOBase",
        "io.IOBase",
        "_io._RawIOBase.register"
    ],
    "opcode": [
        "_opcode",
        "<builtin>.range",
        "opcode.def_op",
        "opcode.jrel_op",
        "opcode.jabs_op",
        "opcode.name_op"
    ],
    "_opcode": [],
    "argparse": [
        "argparse._AttributeHolder",
        "argparse.HelpFormatter",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse._AppendAction",
        "argparse.RawDescriptionHelpFormatter",
        "re",
        "os",
        "argparse._ExtendAction",
        "argparse._ArgumentGroup",
        "argparse._StoreConstAction",
        "argparse._MutuallyExclusiveGroup",
        "argparse._CountAction",
        "argparse.ArgumentTypeError",
        "argparse.MetavarTypeHelpFormatter",
        "gettext",
        "argparse.Namespace",
        "argparse._StoreFalseAction",
        "argparse.RawTextHelpFormatter",
        "argparse._ActionsContainer",
        "argparse.ArgumentParser",
        "argparse.FileType",
        "argparse._HelpAction",
        "argparse._StoreAction",
        "argparse._AppendConstAction",
        "argparse._VersionAction",
        "argparse.Action",
        "shutil",
        "argparse._StoreTrueAction",
        "argparse.ArgumentError",
        "argparse._SubParsersAction"
    ],
    "shutil": [
        "shutil.SameFileError",
        "shutil.SpecialFileError",
        "os",
        "sys.platform.startswith",
        "collections.namedtuple",
        "collections",
        "shutil.RegistryError",
        "zlib",
        "lzma",
        "shutil._GiveupOnFastCopy",
        "shutil.ReadError",
        "bz2",
        "shutil.Error",
        "shutil.ExecError",
        "fnmatch",
        "<builtin>.hasattr",
        "stat",
        "grp"
    ],
    "fnmatch": [
        "posixpath",
        "functools._lru_cache_wrapper.wrapper",
        "os",
        "functools.singledispatchmethod.__get__._method",
        "functools.singledispatch.wrapper",
        "functools",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function",
        "re"
    ],
    "zlib": [],
    "bz2": [
        "os",
        "_compression",
        "_bz2",
        "<builtin>.object",
        "warnings",
        "bz2.BZ2File",
        "threading",
        "io"
    ],
    "linecache": [
        "tokenize",
        "functools",
        "os"
    ],
    "encodings": [
        "encodings.CodecRegistryError",
        "codecs"
    ],
    "codecs": [
        "codecs.StreamReader",
        "codecs.BufferedIncrementalDecoder",
        "codecs.StreamWriter",
        "codecs.StreamRecoder",
        "codecs.CodecInfo",
        "codecs.StreamReaderWriter",
        "codecs.EncodedFile",
        "codecs.IncrementalDecoder",
        "encodings",
        "codecs.BufferedIncrementalEncoder",
        "codecs.IncrementalEncoder",
        "codecs.Codec",
        "<builtin>.SystemError"
    ],
    "encodings.mbcs": [
        "encodings.mbcs.StreamReader",
        "encodings.mbcs.StreamWriter",
        "encodings.mbcs.IncrementalEncoder",
        "encodings.mbcs.IncrementalDecoder",
        "codecs"
    ],
    "encodings._alias_mbcs": [
        "encodings.mbcs.getregentry",
        "_winapi.GetACP",
        "encodings.mbcs"
    ],
    "tokenize": [
        "tokenize.group",
        "tokenize._all_string_prefixes",
        "tokenize.StopTokenizing",
        "tokenize.Untokenizer",
        "collections",
        "token",
        "tokenize.TokenError",
        "re.compile",
        "<builtin>.map",
        "<builtin>.set",
        "tokenize.main",
        "tokenize.maybe",
        "codecs",
        "tokenize.TokenInfo",
        "tokenize.any",
        "<builtin>.sorted",
        "io",
        "re"
    ],
    "token": [
        "<builtin>.globals",
        "<builtin>.isinstance"
    ],
    "tokenize.main": [
        "argparse.ArgumentParser.__init__",
        "builtins.open",
        "tokenize.main.error",
        "<builtin>.list",
        "<builtin>.print",
        "tokenize.main.perror",
        "tokenize.tokenize",
        "argparse",
        "tokenize._tokenize",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_argument"
    ],
    "warnings._formatwarnmsg_impl": [
        "tracemalloc",
        "tracemalloc.get_object_traceback",
        "linecache",
        "linecache.getline"
    ],
    "collections.abc": [
        "collections.abc"
    ],
    "tracemalloc": [
        "posixpath",
        "tracemalloc.DomainFilter",
        "pickle",
        "tracemalloc.Filter",
        "linecache",
        "functools",
        "tracemalloc._Traces",
        "tracemalloc.BaseFilter",
        "tracemalloc.Traceback",
        "tracemalloc.StatisticDiff",
        "tracemalloc.Trace",
        "collections.abc",
        "fnmatch",
        "tracemalloc.Snapshot",
        "tracemalloc.Statistic",
        "tracemalloc.Frame"
    ],
    "os.path": [
        "stat",
        "genericpath",
        "os"
    ],
    "os.path.expandvars": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "re.compile",
        "<builtin>.len",
        "re"
    ],
    "pickle": [
        "pickle._Unpickler",
        "re.match",
        "pickle.PicklingError",
        "types",
        "_pickle",
        "pickle.UnpicklingError",
        "codecs",
        "pickle.PickleError",
        "argparse.ArgumentParser.parse_args",
        "_compat_pickle",
        "copyreg",
        "re",
        "pickle._Framer",
        "struct",
        "pickle._Unframer",
        "io",
        "pprint",
        "pickle._Pickler",
        "argparse.FileType.__init__",
        "argparse",
        "pickle._test",
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__",
        "pickle._load",
        "functools",
        "<builtin>.dir",
        "pickle._Stop",
        "argparse.ArgumentParser.print_help"
    ],
    "copyreg": [
        "copyreg.pickle"
    ],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "_compat_pickle": [
        "<builtin>.dict",
        "<builtin>.len"
    ],
    "_pickle": [],
    "pickle._test": [
        "doctest.testmod",
        "doctest"
    ],
    "pprint": [
        "pprint._perfcheck",
        "<builtin>.frozenset",
        "collections",
        "pprint.PrettyPrinter",
        "types",
        "<builtin>.type",
        "pprint._safe_key",
        "io",
        "re"
    ],
    "warnings.filterwarnings": [
        "<builtin>.isinstance",
        "re.compile",
        "warnings._add_filter",
        "<builtin>.issubclass",
        "re"
    ],
    "warnings._setoption": [
        "<builtin>.int",
        "re.escape",
        "warnings.filterwarnings",
        "warnings._getcategory",
        "sys.warnoptions.split",
        "warnings._getaction",
        "<builtin>.len",
        "re"
    ],
    "warnings.warn_explicit": [
        "<builtin>.isinstance",
        "linecache",
        "warnings.WarningMessage.__init__",
        "linecache.getlines",
        "_warnings._onceregistry.get",
        "<builtin>.RuntimeError",
        "<builtin>.str",
        "<builtin>.issubclass",
        "warnings._showwarnmsg",
        "<builtin>.int"
    ],
    "warnings._warn_unawaited_coroutine": [
        "warnings._warn_unawaited_coroutine.extract",
        "<builtin>.list",
        "linecache",
        "traceback.format_list",
        "traceback",
        "_warnings.warn"
    ],
    "traceback": [
        "linecache",
        "collections",
        "traceback.TracebackException",
        "traceback.FrameSummary",
        "traceback.StackSummary"
    ],
    "warnings": [
        "warnings._processoptions",
        "warnings.catch_warnings",
        "warnings.WarningMessage",
        "warnings.simplefilter",
        "warnings.filterwarnings",
        "warnings._OptionError",
        "<builtin>.hasattr"
    ],
    "_compression": [
        "_compression.BaseStream",
        "_compression.DecompressReader",
        "io"
    ],
    "threading": [
        "threading._MainThread.__init__",
        "threading.Condition",
        "threading.Thread",
        "threading._RLock",
        "threading.Event",
        "threading.Barrier",
        "os",
        "traceback",
        "threading._DummyThread",
        "<builtin>.set",
        "_weakrefset",
        "<builtin>.hasattr",
        "collections.namedtuple",
        "_weakrefset.WeakSet.__init__",
        "itertools.count",
        "threading.BrokenBarrierError",
        "_threading_local",
        "threading.Semaphore",
        "threading._MainThread",
        "threading.Timer",
        "collections",
        "threading.BoundedSemaphore",
        "_thread.allocate_lock"
    ],
    "threading.Thread.isAlive": [
        "threading._DummyThread.is_alive",
        "warnings.warn",
        "warnings",
        "threading.Thread.is_alive"
    ],
    "weakref": [
        "weakref.KeyedRef",
        "weakref.WeakMethod",
        "_weakrefset",
        "weakref.finalize",
        "collections.abc",
        "weakref.WeakKeyDictionary",
        "weakref.WeakValueDictionary"
    ],
    "copy": [
        "<builtin>.getattr",
        "copy.Error",
        "types",
        "weakref",
        "copyreg",
        "<builtin>.type"
    ],
    "weakref.WeakValueDictionary.__deepcopy__": [
        "_weakrefset._IterationGuard.__init__",
        "copy",
        "weakref.WeakValueDictionary._commit_removals",
        "copy.deepcopy"
    ],
    "weakref.WeakKeyDictionary.__deepcopy__": [
        "_weakrefset._IterationGuard.__init__",
        "copy",
        "copy.deepcopy"
    ],
    "weakref.finalize.__init__": [
        "warnings.warn",
        "<builtin>.tuple",
        "warnings",
        "atexit.register",
        "<builtin>.TypeError",
        "_weakref.ref",
        "<builtin>.len",
        "<builtin>.next"
    ],
    "_threading_local": [
        "_threading_local._localimpl",
        "_threading_local.local",
        "weakref",
        "contextlib",
        "threading",
        "contextlib.contextmanager"
    ],
    "contextlib": [
        "contextlib._RedirectStream",
        "contextlib.AbstractAsyncContextManager",
        "contextlib._BaseExitStack",
        "types",
        "contextlib.closing",
        "contextlib.ExitStack",
        "contextlib._GeneratorContextManagerBase",
        "contextlib.ContextDecorator",
        "contextlib.redirect_stderr",
        "contextlib.AbstractContextManager",
        "contextlib.suppress",
        "contextlib.redirect_stdout",
        "contextlib.AsyncExitStack",
        "abc",
        "contextlib._AsyncGeneratorContextManager",
        "collections",
        "functools",
        "contextlib._GeneratorContextManager",
        "contextlib.nullcontext",
        "collections.abc"
    ],
    "contextlib._BaseExitStack.callback": [
        "<builtin>.len",
        "warnings",
        "<builtin>.TypeError",
        "warnings.warn"
    ],
    "contextlib.AsyncExitStack.push_async_callback": [
        "<builtin>.len",
        "warnings",
        "<builtin>.TypeError",
        "warnings.warn"
    ],
    "_bz2": [],
    "lzma": [
        "lzma.LZMAFile",
        "_lzma",
        "os",
        "_compression",
        "io"
    ],
    "_lzma": [],
    "grp": [],
    "tarfile": [
        "tarfile.EOFHeaderError",
        "tarfile.TarError",
        "tarfile.TarFile",
        "tarfile.TarInfo",
        "grp",
        "re",
        "copy",
        "tarfile._LowLevelFile",
        "os",
        "tarfile.SubsequentHeaderError",
        "struct",
        "tarfile.InvalidHeaderError",
        "tarfile.main",
        "io",
        "tarfile.ExtractError",
        "tarfile.StreamError",
        "tarfile.EmptyHeaderError",
        "tarfile.CompressionError",
        "tarfile.TruncatedHeaderError",
        "sys.getfilesystemencoding",
        "tarfile._StreamProxy",
        "stat",
        "tarfile._Stream",
        "tarfile.ExFileObject",
        "tarfile._FileInFile",
        "shutil",
        "tarfile.ReadError",
        "tarfile.HeaderError"
    ],
    "tarfile._Stream.__init__": [
        "tarfile._LowLevelFile.__init__",
        "zlib",
        "tarfile._StreamProxy.getcomptype",
        "lzma",
        "tarfile._LowLevelFile.close",
        "tarfile._Stream._init_read_gz",
        "bz2",
        "tarfile._StreamProxy.close",
        "tarfile._Stream._init_write_gz",
        "tarfile._StreamProxy.__init__"
    ],
    "gzip": [
        "gzip.main",
        "gzip._PaddedFile",
        "os",
        "_compression",
        "gzip._GzipReader",
        "struct",
        "zlib",
        "gzip.GzipFile",
        "gzip.BadGzipFile",
        "io"
    ],
    "gzip.GzipFile.filename": [
        "warnings.warn",
        "warnings"
    ],
    "gzip.main": [
        "builtins.open",
        "gzip.GzipFile.write",
        "bz2.BZ2File.read",
        "sys.stdout.buffer.write",
        "argparse.ArgumentParser.parse_args",
        "lzma.LZMAFile.close",
        "gzip.open",
        "bz2.BZ2File.close",
        "lzma.LZMAFile.read",
        "<builtin>.print",
        "gzip.GzipFile.close",
        "<builtin>.repr",
        "argparse",
        "asyncio.windows_utils.PipeHandle.close",
        "sys.stdin.buffer.read",
        "sys.stdin.buffer.close",
        "argparse._ActionsContainer.add_argument",
        "lzma.LZMAFile.write",
        "argparse.ArgumentParser.__init__",
        "sys.stdout.buffer.close",
        "bz2.BZ2File.write",
        "gzip.GzipFile.__init__",
        "gzip.GzipFile.read",
        "argparse._ActionsContainer.add_mutually_exclusive_group"
    ],
    "tarfile.TarFile.gzopen": [
        "tarfile.TarFile.taropen",
        "gzip.GzipFile.close",
        "gzip.GzipFile.__init__",
        "<builtin>.ValueError",
        "gzip"
    ],
    "tarfile.TarFile.bz2open": [
        "tarfile.TarFile.taropen",
        "bz2.BZ2File.close",
        "bz2.BZ2File.__init__",
        "bz2",
        "<builtin>.ValueError"
    ],
    "tarfile.TarFile.xzopen": [
        "tarfile.TarFile.taropen",
        "lzma",
        "<builtin>.ValueError",
        "lzma.LZMAFile.__init__",
        "lzma.LZMAFile.close"
    ],
    "tarfile.main": [
        "argparse.ArgumentParser.__init__",
        "tarfile.is_tarfile",
        "<builtin>.len",
        "argparse.ArgumentParser.format_help",
        "posixpath.splitext",
        "ntpath.splitext",
        "tarfile.TarFile.open",
        "argparse.ArgumentParser.exit",
        "argparse",
        "<builtin>.print",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "argparse._ActionsContainer.add_argument"
    ],
    "shutil._make_tarball": [
        "ntpath.exists",
        "shutil._get_gid",
        "shutil._get_uid",
        "tarfile",
        "ntpath.dirname",
        "<builtin>.ValueError",
        "posixpath.exists",
        "os.makedirs",
        "posixpath.dirname"
    ],
    "zipfile": [
        "binascii",
        "zipfile._ZipWriteFile",
        "zipfile.ZipFile",
        "zipfile.BadZipFile",
        "zlib",
        "zipfile.ZipExtFile",
        "importlib.util",
        "os",
        "zipfile.PyZipFile",
        "zipfile.LZMADecompressor",
        "zipfile.LargeZipFile",
        "struct",
        "zipfile.Path",
        "io",
        "zipfile.FastLookup",
        "zipfile.CompleteDirs",
        "zipfile._SharedFile",
        "contextlib",
        "bz2",
        "threading",
        "zipfile.LZMACompressor",
        "zipfile._Tellable",
        "zipfile.main",
        "posixpath",
        "functools",
        "shutil",
        "lzma",
        "zipfile.ZipInfo",
        "stat"
    ],
    "binascii": [],
    "importlib.util": [
        "functools",
        "types",
        "contextlib",
        "warnings",
        "importlib.util._LazyModule",
        "contextlib.contextmanager",
        "importlib.util.LazyLoader"
    ],
    "zipfile.ZipFile.comment": [
        "<builtin>.isinstance",
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "zipfile.ZipFile._writecheck": [
        "warnings.warn",
        "warnings",
        "<builtin>.ValueError",
        "<builtin>.len",
        "zipfile._check_compression"
    ],
    "py_compile": [
        "posixpath",
        "os",
        "sys.exit",
        "importlib.machinery",
        "enum",
        "importlib._bootstrap_external",
        "traceback",
        "py_compile.main",
        "importlib.util",
        "py_compile.PycInvalidationMode",
        "py_compile.PyCompileError"
    ],
    "enum": [
        "enum._EnumDict",
        "enum.IntEnum",
        "<builtin>.object",
        "enum.auto",
        "enum.Flag",
        "types",
        "enum.EnumMeta",
        "enum.IntFlag",
        "enum.Enum"
    ],
    "importlib._bootstrap_external.decode_source": [
        "tokenize"
    ],
    "importlib.metadata": [
        "importlib.metadata.PackageNotFoundError",
        "importlib",
        "operator",
        "importlib.metadata.DistributionFinder",
        "email",
        "re",
        "importlib.metadata.PathDistribution",
        "os",
        "importlib.metadata.Prepared",
        "io",
        "contextlib",
        "importlib.metadata.PackagePath",
        "importlib.metadata.FastPath",
        "importlib.abc",
        "posixpath",
        "abc",
        "importlib.metadata.Distribution",
        "zipfile",
        "collections",
        "functools",
        "csv",
        "pathlib",
        "configparser",
        "importlib.metadata.FileHash",
        "importlib.metadata.EntryPoint",
        "importlib.metadata.MetadataPathFinder"
    ],
    "csv": [
        "csv.unix_dialect",
        "csv.DictWriter",
        "csv.excel",
        "_csv",
        "csv.DictReader",
        "csv.Dialect",
        "csv.Sniffer",
        "csv.excel_tab",
        "io",
        "re"
    ],
    "_csv": [],
    "email.parser": [
        "email.parser.HeaderParser",
        "email.parser.BytesParser",
        "email.feedparser",
        "email._policybase",
        "email.parser.Parser",
        "email.parser.BytesHeaderParser",
        "io"
    ],
    "email.feedparser": [
        "<builtin>.object",
        "collections",
        "email.feedparser.BufferedSubFile",
        "email._policybase",
        "re.compile",
        "email.feedparser.FeedParser",
        "email.feedparser.BytesFeedParser",
        "email.errors",
        "io",
        "re"
    ],
    "email.errors": [
        "email.errors.BoundaryError",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.MessageError",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.HeaderDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.CharsetError",
        "email.errors.MultipartConversionError",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.UndecodableBytesDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.MessageParseError",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.HeaderParseError",
        "email.errors.InvalidHeaderDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.MessageDefect"
    ],
    "email._policybase": [
        "abc",
        "email.header",
        "email._policybase.Compat32",
        "email.charset",
        "email.utils",
        "email._policybase._PolicyBase.__init__",
        "email._policybase._PolicyBase",
        "email._policybase.Policy"
    ],
    "email.header": [
        "binascii",
        "email.charset.Charset.__init__",
        "email.charset",
        "email.header._ValueFormatter",
        "re.compile",
        "email.quoprimime",
        "re",
        "email.errors",
        "email.header.Header",
        "email.header._Accumulator",
        "email.base64mime"
    ],
    "email.quoprimime": [
        "string",
        "<builtin>.range",
        "<builtin>.ord",
        "<builtin>.chr",
        "re"
    ],
    "string": [
        "string.Template",
        "string.Formatter",
        "collections",
        "string._TemplateMetaclass",
        "re"
    ],
    "base64": [
        "binascii",
        "base64.main",
        "struct",
        "re"
    ],
    "base64.encodestring": [
        "warnings.warn",
        "base64.encodebytes",
        "warnings"
    ],
    "base64.decodestring": [
        "warnings.warn",
        "warnings",
        "base64.decodebytes"
    ],
    "getopt": [
        "getopt.GetoptError",
        "os",
        "gettext",
        "getopt.getopt",
        "<builtin>.print"
    ],
    "locale": [
        "functools.wraps",
        "sys.platform.startswith",
        "locale._test",
        "functools",
        "_functools.partial",
        "locale._print_locale",
        "re.compile",
        "encodings",
        "<builtin>.sorted",
        "<builtin>.print",
        "collections.abc",
        "<builtin>.globals",
        "<builtin>.hasattr",
        "encodings.aliases",
        "re"
    ],
    "encodings.aliases": [],
    "locale.format": [
        "<builtin>.repr",
        "warnings.warn",
        "locale._format",
        "warnings",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "locale.getdefaultlocale": [
        "locale._parse_localename",
        "os",
        "_locale._getdefaultlocale",
        "<builtin>.int"
    ],
    "_bootlocale.getpreferredencoding": [
        "locale",
        "locale.getpreferredencoding",
        "_locale.nl_langinfo",
        "_locale._getdefaultlocale"
    ],
    "locale.getpreferredencoding": [
        "locale.setlocale",
        "_bootlocale.getpreferredencoding",
        "locale.getdefaultlocale",
        "_bootlocale"
    ],
    "_bootlocale": [
        "<builtin>.hasattr",
        "sys.platform.startswith"
    ],
    "gettext": [
        "locale",
        "os",
        "posixpath.join",
        "ntpath.join",
        "re.compile",
        "gettext.NullTranslations",
        "<builtin>.enumerate",
        "gettext.GNUTranslations",
        "re"
    ],
    "gettext._as_int": [
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.round"
    ],
    "gettext.NullTranslations.lgettext": [
        "warnings.warn",
        "warnings.filterwarnings",
        "warnings",
        "locale.getpreferredencoding",
        "warnings.catch_warnings.__init__"
    ],
    "gettext.NullTranslations.lngettext": [
        "warnings.warn",
        "warnings.filterwarnings",
        "warnings",
        "locale.getpreferredencoding",
        "warnings.catch_warnings.__init__"
    ],
    "gettext.NullTranslations.output_charset": [
        "warnings.warn",
        "warnings"
    ],
    "gettext.NullTranslations.set_output_charset": [
        "warnings.warn",
        "warnings"
    ],
    "gettext.GNUTranslations._parse": [
        "<builtin>.getattr",
        "gettext.GNUTranslations._get_versions",
        "<builtin>.OSError",
        "struct",
        "<builtin>.range",
        "<builtin>.enumerate",
        "<builtin>.str",
        "<builtin>.len",
        "gettext.c2py"
    ],
    "gettext.GNUTranslations.lgettext": [
        "warnings.warn",
        "warnings",
        "<builtin>.object",
        "locale.getpreferredencoding"
    ],
    "gettext.GNUTranslations.lngettext": [
        "warnings.warn",
        "gettext.GNUTranslations._parse.<lambda1>",
        "warnings",
        "locale.getpreferredencoding"
    ],
    "gettext.translation": [
        "posixpath.abspath",
        "copy",
        "ntpath.abspath",
        "warnings.warn",
        "<builtin>.FileNotFoundError",
        "tarfile.TarFile.__iter__",
        "warnings.filterwarnings",
        "<builtin>.open",
        "gettext.NullTranslations.__init__",
        "warnings",
        "warnings.catch_warnings.__init__",
        "gettext.find"
    ],
    "gettext.bind_textdomain_codeset": [
        "warnings.warn",
        "warnings"
    ],
    "gettext.ldgettext": [
        "warnings.warn",
        "gettext.translation",
        "warnings.filterwarnings",
        "warnings",
        "locale.getpreferredencoding",
        "gettext.NullTranslations.lgettext",
        "warnings.catch_warnings.__init__"
    ],
    "gettext.ldngettext": [
        "warnings.warn",
        "gettext.translation",
        "gettext.NullTranslations.lngettext",
        "warnings.filterwarnings",
        "warnings",
        "locale.getpreferredencoding",
        "warnings.catch_warnings.__init__"
    ],
    "gettext.lgettext": [
        "warnings.warn",
        "warnings.filterwarnings",
        "warnings",
        "warnings.catch_warnings.__init__",
        "gettext.ldgettext"
    ],
    "gettext.lngettext": [
        "gettext.ldngettext",
        "warnings.warn",
        "warnings.filterwarnings",
        "warnings",
        "warnings.catch_warnings.__init__"
    ],
    "base64.main": [
        "getopt",
        "base64.test",
        "sys.exit",
        "<builtin>.open",
        "base64.decode",
        "<builtin>.print",
        "base64.encode"
    ],
    "email.base64mime": [
        "binascii",
        "base64"
    ],
    "email.charset": [
        "functools",
        "email.quoprimime",
        "email.charset.Charset",
        "email.errors",
        "email.base64mime",
        "email.encoders"
    ],
    "email.encoders": [
        "base64",
        "quopri"
    ],
    "quopri": [
        "binascii",
        "quopri.main"
    ],
    "quopri.encodestring": [
        "quopri.encode",
        "_io.BytesIO",
        "io"
    ],
    "quopri.decodestring": [
        "quopri.decode",
        "_io.BytesIO",
        "io"
    ],
    "quopri.main": [
        "getopt",
        "sys.exit",
        "<builtin>.open",
        "sys.stderr.write",
        "quopri.decode",
        "quopri.encode",
        "sys.stdin.buffer.close",
        "<builtin>.print"
    ],
    "email.utils": [
        "os",
        "socket",
        "datetime",
        "email._parseaddr",
        "email.charset",
        "re.compile",
        "random",
        "urllib.parse",
        "re"
    ],
    "random": [
        "bisect",
        "_sha512",
        "os",
        "random.Random",
        "hashlib",
        "random.Random.__init__",
        "warnings",
        "_random",
        "random._test",
        "math",
        "random.SystemRandom",
        "collections.abc",
        "<builtin>.hasattr"
    ],
    "math": [],
    "bisect": [
        "_bisect"
    ],
    "_bisect": [],
    "_sha512": [],
    "hashlib.__get_builtin_constructor": [
        "_sha512",
        "_sha3",
        "_md5",
        "<builtin>.ValueError",
        "_sha256",
        "_blake2",
        "_sha1"
    ],
    "_sha1": [],
    "_md5": [],
    "_sha256": [],
    "_blake2": [],
    "_sha3": [],
    "hashlib": [
        "_hashlib",
        "logging.exception",
        "hashlib.__get_openssl_constructor",
        "<builtin>.range",
        "hashlib.__get_builtin_constructor",
        "<builtin>.bytes",
        "<builtin>.set",
        "<builtin>.globals",
        "logging"
    ],
    "_hashlib": [],
    "logging": [
        "logging.RootLogger",
        "string",
        "logging.RootLogger.__init__",
        "logging._StderrHandler",
        "time.time",
        "ntpath.normcase",
        "logging.LoggerAdapter",
        "logging.PlaceHolder",
        "logging.StrFormatStyle",
        "re",
        "logging.Filter",
        "logging.StreamHandler",
        "os",
        "logging.Manager.__init__",
        "logging.Handler",
        "traceback",
        "posixpath.normcase",
        "logging.Filterer",
        "weakref",
        "<builtin>.hasattr",
        "io",
        "weakref.WeakValueDictionary.__init__",
        "logging.Formatter",
        "logging.FileHandler",
        "logging.StringTemplateStyle",
        "logging._StderrHandler.__init__",
        "atexit.register",
        "threading",
        "threading.RLock",
        "logging.Formatter.__init__",
        "logging.NullHandler",
        "logging.BufferingFormatter",
        "warnings",
        "logging.PercentStyle",
        "logging.Manager",
        "logging.LogRecord",
        "collections.abc",
        "logging.Logger"
    ],
    "logging.Logger.__reduce__": [
        "logging.getLogger",
        "pickle"
    ],
    "_random": [],
    "socket": [
        "<builtin>.getattr",
        "selectors",
        "os",
        "socket._GiveupOnSendfile",
        "socket.socket",
        "<builtin>.object",
        "enum",
        "sys.platform.lower",
        "<builtin>.hasattr",
        "os._get_exports_list",
        "socket.SocketIO",
        "_socket",
        "io"
    ],
    "_socket": [],
    "selectors": [
        "abc",
        "selectors.BaseSelector",
        "collections.namedtuple",
        "selectors._SelectorMapping",
        "selectors._PollLikeSelector",
        "selectors._BaseSelectorImpl",
        "selectors.SelectSelector",
        "collections",
        "selectors.KqueueSelector",
        "select",
        "<builtin>.globals",
        "selectors.DevpollSelector",
        "math",
        "collections.abc",
        "selectors.PollSelector",
        "<builtin>.hasattr",
        "selectors.EpollSelector"
    ],
    "select": [],
    "datetime": [
        "datetime._days_before_year",
        "datetime.timezone",
        "datetime.timezone._create",
        "datetime.timedelta",
        "datetime.date",
        "datetime.time",
        "datetime.datetime",
        "math",
        "_datetime",
        "datetime.tzinfo"
    ],
    "datetime._check_int_field": [
        "<builtin>.isinstance",
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "_strptime": [
        "locale",
        "calendar",
        "datetime",
        "_strptime.TimeRE.__init__",
        "_thread.allocate_lock",
        "_strptime.LocaleTime",
        "_strptime.TimeRE",
        "re"
    ],
    "calendar": [
        "locale",
        "calendar.Calendar",
        "calendar.LocaleHTMLCalendar",
        "calendar._localized_day.__init__",
        "calendar.Calendar.__init__",
        "calendar._localized_month.__init__",
        "datetime",
        "<builtin>.range",
        "calendar.TextCalendar",
        "calendar.IllegalWeekdayError",
        "calendar._localized_day",
        "calendar.main",
        "calendar.HTMLCalendar",
        "calendar.LocaleTextCalendar",
        "datetime.datetime.date",
        "calendar.IllegalMonthError",
        "calendar._localized_month",
        "calendar.different_locale"
    ],
    "calendar.main": [
        "calendar.TextCalendar.formatmonth",
        "sys.getdefaultencoding",
        "calendar.Calendar.__init__",
        "calendar.TextCalendar.formatyear",
        "sys.stdout.buffer.write",
        "calendar.LocaleTextCalendar.__init__",
        "argparse.ArgumentParser.parse_args",
        "sys.exit",
        "argparse._ActionsContainer.add_argument_group",
        "calendar.HTMLCalendar.formatyear",
        "sys.stdout.write",
        "calendar.LocaleHTMLCalendar.__init__",
        "argparse",
        "<builtin>.dict",
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.error",
        "calendar.HTMLCalendar.formatmonth",
        "calendar.HTMLCalendar.formatyearpage"
    ],
    "datetime.datetime.strptime": [
        "_strptime"
    ],
    "_datetime": [],
    "urllib.parse": [
        "re",
        "re.compile",
        "<builtin>.bytes",
        "urllib.parse._NetlocResultMixinStr",
        "urllib.parse._ResultMixinBytes",
        "urllib.parse._fix_result_transcoding",
        "collections.namedtuple",
        "<builtin>.frozenset",
        "urllib.parse.DefragResultBytes",
        "urllib.parse._NetlocResultMixinBytes",
        "urllib.parse.DefragResult",
        "urllib.parse.Quoter",
        "urllib.parse._ResultMixinStr",
        "urllib.parse.SplitResultBytes",
        "urllib.parse._NetlocResultMixinBase",
        "collections",
        "urllib.parse.SplitResult",
        "urllib.parse.ParseResultBytes",
        "warnings",
        "urllib.parse.ParseResult"
    ],
    "urllib.parse._checknetloc": [
        "unicodedata",
        "<builtin>.ValueError"
    ],
    "unicodedata": [],
    "email._parseaddr": [
        "calendar",
        "email._parseaddr.AddrlistClass",
        "email._parseaddr.AddressList"
    ],
    "email.message": [
        "email._encoded_words",
        "email.message.MIMEPart",
        "email.message.EmailMessage",
        "quopri",
        "email.charset",
        "email._policybase",
        "re.compile",
        "email.message.Message",
        "uu",
        "email.utils",
        "email.errors",
        "io",
        "re"
    ],
    "uu": [
        "binascii",
        "uu.test",
        "os",
        "uu.Error"
    ],
    "optparse": [
        "os",
        "optparse.OptionGroup",
        "optparse.OptionConflictError",
        "optparse.Values",
        "optparse.TitledHelpFormatter",
        "optparse.Option",
        "textwrap",
        "gettext",
        "optparse.AmbiguousOptionError",
        "optparse.IndentedHelpFormatter",
        "optparse.BadOptionError",
        "optparse.HelpFormatter",
        "optparse.OptionError",
        "optparse.OptionContainer",
        "optparse.OptionParser",
        "optparse.OptionValueError",
        "optparse.OptParseError",
        "gettext.gettext"
    ],
    "textwrap": [
        "textwrap.dedent",
        "re.compile",
        "<builtin>.print",
        "textwrap.TextWrapper",
        "re"
    ],
    "uu.test": [
        "optparse.OptionParser.error",
        "<builtin>.print",
        "<builtin>.isinstance",
        "sys.exit",
        "optparse.OptionContainer.add_option",
        "optparse",
        "uu.decode",
        "<builtin>.open",
        "uu.encode",
        "<builtin>.len",
        "optparse.OptionParser.parse_args",
        "optparse.OptionParser.__init__"
    ],
    "email._encoded_words": [
        "binascii",
        "string",
        "<builtin>.ord",
        "functools",
        "re.compile",
        "email._encoded_words._QByteMap",
        "email.errors",
        "base64",
        "re"
    ],
    "email.generator": [
        "copy",
        "<builtin>.repr",
        "re.compile",
        "email.generator.Generator",
        "email.utils",
        "random",
        "email.generator.DecodedGenerator",
        "<builtin>.len",
        "email.generator.BytesGenerator",
        "io",
        "re"
    ],
    "email.message.Message.as_string": [
        "email.generator.Generator.flatten",
        "email.generator",
        "_io.StringIO",
        "email.generator.Generator.__init__"
    ],
    "email.message.Message.as_bytes": [
        "_io.BytesIO",
        "email.generator",
        "email.generator.Generator.flatten",
        "email.generator.Generator.__init__"
    ],
    "email.iterators": [
        "io"
    ],
    "email.message.Message": [
        "email.iterators"
    ],
    "email.policy": [
        "email._policybase._PolicyBase.clone",
        "email.message",
        "email.contentmanager",
        "email.headerregistry",
        "email._policybase",
        "re.compile",
        "email.policy.EmailPolicy.__init__",
        "email.utils",
        "email.policy.EmailPolicy",
        "re"
    ],
    "email.headerregistry": [
        "email.headerregistry.BaseHeader",
        "email.headerregistry.UnstructuredHeader",
        "email.headerregistry.ParameterizedMIMEHeader",
        "types",
        "email.headerregistry.UniqueSingleAddressHeader",
        "email.headerregistry.DateHeader",
        "email.headerregistry.UniqueDateHeader",
        "email.headerregistry.UniqueUnstructuredHeader",
        "email.utils",
        "email.headerregistry.MIMEVersionHeader",
        "email.headerregistry.AddressHeader",
        "email.headerregistry.MessageIDHeader",
        "email.headerregistry.UniqueAddressHeader",
        "email.headerregistry.Address",
        "email.errors",
        "email.headerregistry.Group",
        "email.headerregistry.ContentDispositionHeader",
        "email._header_value_parser",
        "email.headerregistry.ContentTypeHeader",
        "email.headerregistry.HeaderRegistry",
        "email.headerregistry.ContentTransferEncodingHeader",
        "email.headerregistry.SingleAddressHeader"
    ],
    "email._header_value_parser": [
        "operator",
        "email._header_value_parser.Atom",
        "email._header_value_parser.Comment",
        "email._header_value_parser.AngleAddr",
        "string",
        "email._header_value_parser.Parameter",
        "email._header_value_parser.ObsRoute",
        "email._header_value_parser.ObsLocalPart",
        "email._header_value_parser.BareQuotedString",
        "email._header_value_parser.DomainLiteral",
        "email._header_value_parser.Group",
        "email._header_value_parser.TokenList",
        "email._header_value_parser.InvalidMailbox",
        "email._header_value_parser.Terminal",
        "re",
        "urllib",
        "email._header_value_parser.Phrase",
        "email._header_value_parser.Token",
        "email._header_value_parser.MessageID",
        "email._header_value_parser.NameAddr",
        "re.escape",
        "email._header_value_parser.ValueTerminal",
        "re.compile",
        "email._header_value_parser.EWWhiteSpaceTerminal",
        "<builtin>.set",
        "email._header_value_parser.NoFoldLiteral",
        "email._header_value_parser.WhiteSpaceTokenList",
        "email.utils",
        "email._header_value_parser._InvalidEwError",
        "email._header_value_parser.DotAtomText",
        "email._header_value_parser.MsgID",
        "email._header_value_parser.ContentDisposition",
        "email._header_value_parser.DotAtom",
        "email._header_value_parser.InvalidMessageID",
        "email._header_value_parser.Domain",
        "email._header_value_parser.DisplayName",
        "email._header_value_parser.MailboxList",
        "email._encoded_words",
        "email._header_value_parser.ContentType",
        "email._header_value_parser.UnstructuredTokenList",
        "email._header_value_parser.Attribute",
        "email._header_value_parser.AddrSpec",
        "email._header_value_parser.Address",
        "email._header_value_parser.GroupList",
        "email._header_value_parser.WhiteSpaceTerminal",
        "email._header_value_parser.MimeParameters",
        "email._header_value_parser.Word",
        "email._header_value_parser.EncodedWord",
        "email._header_value_parser.ContentTransferEncoding",
        "email.errors",
        "email._header_value_parser.Header",
        "email._header_value_parser.HeaderLabel",
        "email._header_value_parser.Value",
        "email._header_value_parser.LocalPart",
        "email._header_value_parser.MIMEVersion",
        "email._header_value_parser.AddressList",
        "email._header_value_parser.Mailbox",
        "email._header_value_parser.InvalidParameter",
        "email._header_value_parser.Section",
        "email._header_value_parser.CFWSList",
        "email._header_value_parser.ParameterizedHeaderValue",
        "email._header_value_parser.QuotedString"
    ],
    "urllib": [],
    "email.contentmanager": [
        "binascii",
        "email.contentmanager.ContentManager.__init__",
        "email.message",
        "email.charset",
        "email.contentmanager.ContentManager.add_get_handler",
        "email.quoprimime",
        "email.contentmanager.ContentManager",
        "email.errors",
        "email.contentmanager.ContentManager.add_set_handler"
    ],
    "email.message.MIMEPart.__init__": [
        "email.policy",
        "email.message.Message.__init__"
    ],
    "email.feedparser.FeedParser.__init__": [
        "email.message",
        "email.feedparser.FeedParser._parsegen",
        "email.feedparser.BufferedSubFile.__init__"
    ],
    "email.message_from_string": [
        "email.parser",
        "email.parser.Parser.__init__",
        "email.parser.Parser.parsestr"
    ],
    "email.message_from_bytes": [
        "email.parser",
        "email.parser.BytesParser.__init__",
        "email.parser.BytesParser.parsebytes"
    ],
    "email.message_from_file": [
        "email.parser",
        "email.parser.Parser.__init__",
        "email.parser.Parser.parse"
    ],
    "email.message_from_binary_file": [
        "email.parser",
        "email.parser.BytesParser.parse",
        "email.parser.BytesParser.__init__"
    ],
    "email": [],
    "pathlib": [
        "operator",
        "functools._lru_cache_wrapper.wrapper",
        "pathlib.PurePosixPath",
        "pathlib.PureWindowsPath",
        "sys.getwindowsversion",
        "urllib.parse",
        "functools.lru_cache.decorating_function",
        "pathlib._Selector",
        "pathlib._TerminatingSelector",
        "re",
        "pathlib._PathParents",
        "os",
        "pathlib._RecursiveWildcardSelector",
        "functools.lru_cache",
        "fnmatch",
        "<builtin>.hasattr",
        "io",
        "pathlib._Accessor",
        "functools.singledispatchmethod.__get__._method",
        "pathlib.Path",
        "functools.singledispatch.wrapper",
        "pathlib._PreciseSelector",
        "pathlib.WindowsPath",
        "posixpath",
        "pathlib._Flavour",
        "pathlib.PurePath",
        "functools",
        "pathlib._PosixFlavour",
        "pathlib._Flavour.__init__",
        "pathlib._WindowsFlavour",
        "ntpath",
        "pathlib._NormalAccessor",
        "pathlib.PosixPath",
        "pathlib._WildcardSelector",
        "collections.abc",
        "stat"
    ],
    "ntpath": [
        "genericpath",
        "os",
        "sys.getwindowsversion",
        "<builtin>.hasattr",
        "stat"
    ],
    "ntpath.expandvars": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "string",
        "<builtin>.bytes",
        "<builtin>.len"
    ],
    "pathlib.Path.group": [
        "grp",
        "pathlib.Path.stat"
    ],
    "configparser": [
        "configparser.ConfigParser",
        "configparser.ConverterMapping",
        "configparser.Interpolation",
        "re",
        "configparser.BasicInterpolation",
        "os",
        "configparser.DuplicateOptionError",
        "configparser.ParsingError",
        "configparser.Error",
        "configparser.InterpolationMissingOptionError",
        "configparser.InterpolationDepthError",
        "io",
        "configparser.LegacyInterpolation",
        "configparser.SafeConfigParser",
        "configparser.MissingSectionHeaderError",
        "configparser.SectionProxy",
        "configparser.NoOptionError",
        "configparser.NoSectionError",
        "configparser.InterpolationError",
        "collections",
        "configparser.InterpolationSyntaxError",
        "<builtin>.object",
        "functools",
        "warnings",
        "configparser.ExtendedInterpolation",
        "configparser.RawConfigParser",
        "collections.abc",
        "configparser.DuplicateSectionError"
    ],
    "_frozen_importlib._install_external_importers": [
        "importlib._bootstrap_external"
    ],
    "importlib._bootstrap_external": [
        "importlib._bootstrap_external.ExtensionFileLoader",
        "importlib._bootstrap_external.SourceLoader",
        "importlib._bootstrap_external.WindowsRegistryFinder",
        "importlib._bootstrap_external._NamespacePath",
        "importlib._bootstrap_external._NamespaceLoader",
        "<builtin>.object",
        "importlib._bootstrap_external.SourcelessFileLoader",
        "importlib._bootstrap_external.PathFinder",
        "importlib._bootstrap_external.SourceFileLoader",
        "importlib._bootstrap_external.FileFinder",
        "importlib._bootstrap_external.FileLoader",
        "<builtin>.type",
        "importlib._bootstrap_external._LoaderBasics"
    ],
    "_frozen_importlib_external.decode_source": [
        "tokenize"
    ],
    "_frozen_importlib_external.PathFinder.find_distributions": [
        "importlib.metadata",
        "importlib.metadata.MetadataPathFinder.find_distributions"
    ],
    "importlib": [
        "_bootstrap_external._setup",
        "importlib._bootstrap_external",
        "types",
        "warnings",
        "_bootstrap._setup",
        "_frozen_importlib_external._setup",
        "_frozen_importlib._setup"
    ],
    "importlib.abc": [
        "abc",
        "importlib.abc.PathEntryFinder",
        "importlib.abc.ResourceLoader",
        "importlib.abc.ExecutionLoader",
        "importlib._bootstrap_external",
        "importlib.abc.ResourceReader",
        "importlib.abc.InspectLoader",
        "importlib.abc.FileLoader",
        "warnings",
        "importlib.abc.SourceLoader",
        "importlib.abc._register",
        "importlib.abc.Finder",
        "importlib.abc.MetaPathFinder",
        "importlib.abc.Loader"
    ],
    "importlib._bootstrap_external.PathFinder.find_distributions": [
        "importlib.metadata",
        "importlib.metadata.MetadataPathFinder.find_distributions"
    ],
    "importlib.machinery": [],
    "zipfile.PyZipFile._get_codename._compile": [
        "<builtin>.print",
        "py_compile.compile",
        "py_compile"
    ],
    "zipfile.main": [
        "argparse.ArgumentParser.__init__",
        "posixpath.basename",
        "zipfile.ZipFile.__init__",
        "ntpath.basename",
        "argparse",
        "ntpath.dirname",
        "zipfile.main.addToZip",
        "<builtin>.print",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "posixpath.dirname"
    ],
    "shutil._make_zipfile": [
        "ntpath.exists",
        "posixpath.normpath",
        "ntpath.normpath",
        "ntpath.isfile",
        "posixpath.join",
        "zipfile",
        "os.walk",
        "ntpath.join",
        "posixpath.isfile",
        "ntpath.dirname",
        "<builtin>.sorted",
        "posixpath.exists",
        "zipfile.ZipFile.__init__",
        "os.makedirs",
        "posixpath.dirname"
    ],
    "shutil._unpack_zipfile": [
        "zipfile.is_zipfile",
        "zipfile.ZipFile.close",
        "posixpath.join",
        "zipfile",
        "ntpath.join",
        "shutil._ensure_directory",
        "<builtin>.open",
        "zipfile.ZipFile.read",
        "zipfile.ZipFile.infolist",
        "zipfile.ZipFile.__init__"
    ],
    "shutil._unpack_tarfile": [
        "tarfile"
    ],
    "argparse._copy_items": [
        "copy",
        "<builtin>.type"
    ],
    "argparse.HelpFormatter._split_lines": [
        "textwrap",
        "textwrap.wrap"
    ],
    "argparse.HelpFormatter._fill_text": [
        "textwrap",
        "textwrap.fill"
    ],
    "argparse.ArgumentParser.parse_known_intermixed_args": [
        "<builtin>.getattr",
        "argparse.ArgumentParser._get_optional_actions",
        "argparse.ArgumentParser.format_usage",
        "warnings",
        "argparse.ArgumentParser._get_positional_actions",
        "<builtin>.TypeError",
        "<builtin>.delattr",
        "<builtin>.hasattr",
        "argparse.ArgumentParser.parse_known_args",
        "_warnings.warn"
    ],
    "dis._test": [
        "argparse.ArgumentParser.__init__",
        "dis.dis",
        "<builtin>.compile",
        "argparse.FileType.__init__",
        "argparse",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_argument"
    ],
    "inspect.formatargspec": [
        "inspect.<lambda1>",
        "inspect.<lambda3>",
        "inspect.<lambda2>",
        "inspect.<lambda4>",
        "inspect.formatargspec.formatargandannotation",
        "warnings",
        "<builtin>.enumerate",
        "<builtin>.len",
        "inspect.formatannotation",
        "_warnings.warn"
    ],
    "ast.get_docstring": [
        "inspect.cleandoc",
        "inspect",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "ast.walk": [
        "ast.iter_child_nodes",
        "collections"
    ],
    "ast.NodeVisitor.visit_Constant": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "warnings.warn",
        "warnings",
        "ast.NodeVisitor.generic_visit",
        "<builtin>.type"
    ],
    "inspect._signature_fromstr": [
        "<builtin>.getattr",
        "inspect.ismodule",
        "inspect._signature_fromstr.RewriteSymbolics",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.object",
        "<builtin>.reversed",
        "inspect._signature_fromstr.p",
        "<builtin>.zip",
        "inspect.Signature.__init__",
        "ast.parse",
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "itertools.zip_longest",
        "sys.modules.copy",
        "ast",
        "inspect._signature_strip_non_python_syntax",
        "sys.modules.get"
    ],
    "ast": [
        "ast.Bytes",
        "ast.Str",
        "ast.Num",
        "<builtin>.property",
        "ast.NodeTransformer",
        "ast.NodeVisitor",
        "ast._ABC",
        "ast.NameConstant",
        "ast.Ellipsis",
        "<builtin>.type"
    ],
    "inspect._main": [
        "argparse.ArgumentParser.__init__",
        "<builtin>.getattr",
        "importlib",
        "<builtin>.repr",
        "inspect.findsource",
        "inspect.getsource",
        "sys.exit",
        "importlib.import_module",
        "argparse",
        "inspect.getsourcefile",
        "<builtin>.print",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.hasattr",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.type"
    ],
    "unittest.result": [
        "unittest.util",
        "functools",
        "unittest.result.TestResult",
        "traceback",
        "io"
    ],
    "unittest.util": [
        "posixpath",
        "collections",
        "collections.namedtuple"
    ],
    "unittest": [
        "unittest.case",
        "unittest.main",
        "unittest.runner",
        "unittest.signals",
        "unittest.suite",
        "unittest.async_case",
        "unittest.loader",
        "unittest.result"
    ],
    "asyncio.windows_events": [
        "asyncio.windows_events._BaseWaitHandleFuture",
        "asyncio.windows_events._WindowsSelectorEventLoop",
        "asyncio.windows_events._WaitCancelFuture",
        "asyncio.windows_events.IocpProactor",
        "asyncio.windows_events.ProactorEventLoop",
        "asyncio.windows_events._WindowsSubprocessTransport",
        "socket",
        "struct",
        "asyncio.windows_events.WindowsSelectorEventLoopPolicy",
        "asyncio.windows_events._WaitHandleFuture",
        "asyncio.windows_events.PipeServer",
        "math",
        "asyncio.proactor_events",
        "weakref",
        "asyncio.windows_events.WindowsProactorEventLoopPolicy",
        "asyncio.windows_events._OverlappedFuture",
        "asyncio.windows_utils"
    ],
    "asyncio.proactor_events": [
        "asyncio.proactor_events._ProactorWritePipeTransport",
        "asyncio.proactor_events.BaseProactorEventLoop",
        "asyncio.proactor_events._ProactorDuplexPipeTransport",
        "os",
        "socket",
        "collections",
        "asyncio.proactor_events._ProactorDatagramTransport",
        "asyncio.proactor_events._ProactorSocketTransport",
        "warnings",
        "signal",
        "threading",
        "asyncio.proactor_events._ProactorReadPipeTransport",
        "asyncio.proactor_events._ProactorBasePipeTransport",
        "io",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport"
    ],
    "signal": [
        "functools.wraps",
        "functools",
        "_functools.partial",
        "enum",
        "<builtin>.globals"
    ],
    "asyncio.windows_utils": [
        "<builtin>.ImportError",
        "tempfile",
        "os",
        "asyncio.windows_utils.Popen",
        "asyncio.windows_utils.PipeHandle",
        "warnings",
        "subprocess",
        "itertools.count"
    ],
    "subprocess": [
        "selectors",
        "os",
        "subprocess.CompletedProcess",
        "subprocess.STARTUPINFO",
        "<builtin>.hasattr",
        "subprocess.CalledProcessError",
        "io",
        "contextlib",
        "subprocess._use_posix_spawn",
        "threading",
        "subprocess.Popen",
        "subprocess.TimeoutExpired",
        "subprocess.Handle",
        "<builtin>.getattr",
        "subprocess.SubprocessError",
        "_posixsubprocess",
        "select",
        "warnings",
        "signal"
    ],
    "_posixsubprocess": [],
    "tempfile": [
        "_thread.allocate_lock",
        "tempfile.TemporaryDirectory",
        "os",
        "tempfile._TemporaryFileWrapper",
        "tempfile._TemporaryFileCloser",
        "tempfile.SpooledTemporaryFile",
        "shutil",
        "functools",
        "warnings",
        "random",
        "tempfile._RandomNameSequence",
        "weakref",
        "<builtin>.hasattr",
        "io"
    ],
    "asyncio": [
        "asyncio.windows_events"
    ],
    "unittest.async_case": [
        "asyncio",
        "unittest.case",
        "inspect",
        "unittest.async_case.IsolatedAsyncioTestCase"
    ],
    "unittest.case": [
        "types",
        "re",
        "unittest.case.FunctionTestCase",
        "unittest.case._Outcome",
        "unittest.case._AssertWarnsContext",
        "traceback",
        "unittest.case.TestCase",
        "unittest.case.SkipTest",
        "unittest.case._AssertLogsContext",
        "logging",
        "pprint",
        "collections.namedtuple",
        "unittest.case._AssertRaisesBaseContext",
        "unittest.case._OrderedChainMap",
        "unittest.case._AssertRaisesContext",
        "contextlib",
        "unittest.case._BaseTestCaseContext",
        "unittest.result",
        "unittest.case._SubTest",
        "unittest.case._ShouldStop",
        "unittest.util",
        "<builtin>.object",
        "collections",
        "unittest.case._CapturingHandler",
        "functools",
        "warnings",
        "unittest.case._UnexpectedSuccess",
        "difflib"
    ],
    "unittest.case.TestCase.addCleanup": [
        "warnings.warn",
        "<builtin>.tuple",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "unittest.suite": [
        "unittest.case",
        "unittest.util",
        "unittest.suite.BaseTestSuite",
        "unittest.suite._DebugResult",
        "unittest.suite._ErrorHolder",
        "unittest.suite.TestSuite"
    ],
    "unittest.loader": [
        "unittest.case",
        "os",
        "unittest.util",
        "unittest.loader.TestLoader",
        "unittest.loader.TestLoader.__init__",
        "functools",
        "traceback",
        "re.compile",
        "types",
        "warnings",
        "unittest.suite",
        "unittest.loader._FailedTest",
        "fnmatch",
        "re"
    ],
    "unittest.main": [
        "os",
        "unittest.signals",
        "argparse",
        "unittest.main.TestProgram",
        "unittest.loader",
        "unittest.runner"
    ],
    "unittest.runner": [
        "unittest.runner._WritelnDecorator",
        "unittest.runner.TextTestResult",
        "unittest.signals",
        "warnings",
        "unittest.runner.TextTestRunner",
        "unittest.result"
    ],
    "unittest.signals": [
        "weakref.WeakKeyDictionary.__init__",
        "functools",
        "signal",
        "weakref",
        "unittest.signals._InterruptHandler"
    ],
    "unittest.load_tests": [
        "posixpath"
    ],
    "doctest._test": [
        "posixpath.split",
        "argparse.ArgumentParser.__init__",
        "sys.path.insert",
        "ntpath.split",
        "argparse",
        "<builtin>.__import__",
        "doctest.testmod",
        "doctest.testfile",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_argument"
    ],
    "reprlib": [
        "reprlib.Repr.__init__",
        "reprlib.Repr"
    ],
    "collections.__getattr__": [
        "<builtin>.getattr",
        "<builtin>.AttributeError",
        "warnings.warn",
        "warnings",
        "<builtin>.globals"
    ],
    "collections.UserDict.__init__": [
        "<builtin>.len",
        "warnings",
        "<builtin>.TypeError",
        "warnings.warn"
    ],
    "collections.UserDict.copy": [
        "copy",
        "collections.UserDict.__init__"
    ],
    "functools.partialmethod.__init__": [
        "<builtin>.isinstance",
        "warnings.warn",
        "<builtin>.tuple",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "functools.singledispatch": [
        "<builtin>.getattr",
        "weakref.WeakKeyDictionary.__init__",
        "types",
        "functools.update_wrapper",
        "weakref"
    ],
    "typing": [
        "typing.TypeVar.__init__",
        "operator",
        "typing.io",
        "typing.SupportsRound",
        "typing.BinaryIO",
        "types",
        "typing.SupportsAbs",
        "re",
        "typing._GenericAlias.__init__",
        "typing._Immutable",
        "typing.SupportsIndex",
        "typing._SpecialForm",
        "typing.TypedDict",
        "typing.IO",
        "typing.TextIO",
        "typing.TypeVar",
        "typing.SupportsBytes",
        "typing.SupportsFloat",
        "typing._SpecialForm.__init__",
        "typing._GenericAlias",
        "typing._TypingEllipsis",
        "typing._TypedDictMeta",
        "typing._VariadicGenericAlias",
        "typing._alias",
        "typing._ProtocolMeta",
        "typing.NamedTuple",
        "contextlib",
        "typing.Generic",
        "abc",
        "typing.NamedTupleMeta",
        "typing._Final",
        "collections",
        "typing.SupportsInt",
        "typing.SupportsComplex",
        "functools",
        "typing.ForwardRef",
        "typing._TypingEmpty",
        "typing.Protocol",
        "collections.abc",
        "typing.re"
    ],
    "typing.NamedTuple.__new__": [
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len",
        "typing._make_nmtuple"
    ],
    "functools.singledispatch.register": [
        "<builtin>.getattr",
        "collections.ChainMap.clear",
        "<builtin>.isinstance",
        "<builtin>.iter",
        "typing",
        "typing.get_type_hints",
        "_collections_abc.MutableMapping.clear",
        "<builtin>.TypeError",
        "_py_abc.get_cache_token",
        "<builtin>.next",
        "<builtin>.hasattr",
        "_abc.get_cache_token"
    ],
    "types.coroutine": [
        "<builtin>.getattr",
        "functools.wraps",
        "functools",
        "_functools.partial",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "collections.abc"
    ],
    "enum.EnumMeta._convert": [
        "warnings.warn",
        "warnings",
        "enum.EnumMeta._convert_"
    ],
    "sre_parse": [
        "sre_parse.Verbose",
        "<builtin>.frozenset",
        "<builtin>.ord",
        "sre_parse.State",
        "sre_constants",
        "sre_parse.SubPattern",
        "sre_parse.Tokenizer"
    ],
    "sre_constants": [
        "sre_constants._NamedIntConstant",
        "sre_constants.dump",
        "sre_constants.error",
        "<builtin>.open",
        "<builtin>.print",
        "sre_constants._makecodes"
    ],
    "sre_parse._class_escape": [
        "unicodedata",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.getwhile",
        "<builtin>.ord",
        "<builtin>.chr",
        "<builtin>.len",
        "sre_parse.Tokenizer.error",
        "<builtin>.int"
    ],
    "sre_parse._escape": [
        "unicodedata",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.get",
        "sre_parse.State.checkgroup",
        "sre_parse.State.checklookbehindgroup",
        "sre_parse.Tokenizer.getwhile",
        "<builtin>.ord",
        "<builtin>.chr",
        "<builtin>.len",
        "sre_parse.Tokenizer.error",
        "<builtin>.int"
    ],
    "sre_parse._parse": [
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.State.checkgroup",
        "sre_parse._escape",
        "sre_parse._parse_flags",
        "sre_parse.Tokenizer.error",
        "<builtin>.int",
        "<builtin>.AssertionError",
        "warnings.warn",
        "<builtin>.range",
        "<builtin>.OverflowError",
        "sre_parse._parse_sub",
        "sre_parse.Tokenizer.match",
        "sre_parse.State.checklookbehindgroup",
        "sre_parse.Tokenizer.tell",
        "sre_parse._uniq",
        "sre_parse.SubPattern.__init__",
        "sre_parse._class_escape",
        "sre_parse.SubPattern.append",
        "sre_parse._parse",
        "warnings",
        "sre_parse.State.opengroup",
        "sre_parse.Tokenizer.seek",
        "<builtin>.len",
        "sre_parse.State.closegroup"
    ],
    "sre_compile": [
        "sre_constants",
        "<builtin>.tuple",
        "sre_parse"
    ],
    "re.Scanner.__init__": [
        "<builtin>.isinstance",
        "sre_parse.SubPattern.append",
        "sre_parse.SubPattern.__init__",
        "sre_compile.compile",
        "sre_constants",
        "sre_parse.State.__init__",
        "sre_parse.State.opengroup",
        "sre_parse.State.closegroup",
        "sre_parse.parse"
    ],
    "posixpath.expandvars": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "re.compile",
        "<builtin>.len",
        "re"
    ],
    "os.get_exec_path": [
        "<builtin>.isinstance",
        "warnings.simplefilter",
        "warnings",
        "<builtin>.ValueError",
        "warnings.catch_warnings.__init__"
    ],
    "os.popen": [
        "os._wrap_close.__init__",
        "<builtin>.isinstance",
        "subprocess.Popen.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "subprocess",
        "io.TextIOWrapper",
        "io",
        "<builtin>.type"
    ],
    "os.fdopen": [
        "io.open",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "io",
        "<builtin>.type"
    ],
    "sshtunnel": [
        "binascii",
        "sshtunnel._cli_main",
        "socketserver",
        "sshtunnel._ThreadingStreamForwardServer",
        "os",
        "socket",
        "sshtunnel._ThreadingForwardServer",
        "logging",
        "sshtunnel._ForwardHandler",
        "queue",
        "sshtunnel.BaseSSHTunnelForwarderError",
        "argparse",
        "threading",
        "sshtunnel._StreamForwardServer",
        "sshtunnel.SSHTunnelForwarder",
        "posixpath.join",
        "sshtunnel.HandlerSSHTunnelForwarderError",
        "ntpath.join",
        "paramiko",
        "sshtunnel._ForwardServer",
        "select",
        "warnings",
        "logging.addLevelName",
        "getpass"
    ],
    "getpass": [
        "os",
        "contextlib",
        "warnings",
        "termios",
        "getpass.GetPassWarning",
        "io"
    ],
    "termios": [],
    "paramiko": [
        "paramiko.sftp",
        "paramiko.sftp_attr",
        "paramiko.config",
        "paramiko.message",
        "paramiko.sftp_handle",
        "paramiko.pkey",
        "paramiko.ssh_exception",
        "paramiko.file",
        "paramiko.rsakey",
        "paramiko.ecdsakey",
        "paramiko.dsskey",
        "paramiko.sftp_server",
        "paramiko.sftp_si",
        "paramiko.hostkeys",
        "paramiko.ssh_gss",
        "paramiko.channel",
        "paramiko.server",
        "paramiko.proxy",
        "paramiko.agent",
        "paramiko.common",
        "paramiko.auth_handler",
        "paramiko.packet",
        "paramiko.ed25519key",
        "paramiko._version",
        "paramiko.transport",
        "paramiko.client",
        "paramiko.sftp_client",
        "paramiko.sftp_file"
    ],
    "paramiko._version": [
        "<builtin>.map"
    ],
    "paramiko.transport": [
        "cryptography.hazmat.backends",
        "hashlib",
        "paramiko.py3compat",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "paramiko.message",
        "paramiko.kex_ecdh_nist",
        "os",
        "__future__",
        "paramiko.primes",
        "socket",
        "paramiko.ssh_exception",
        "paramiko.kex_gex",
        "paramiko.kex_group1",
        "paramiko.transport.Transport",
        "paramiko.rsakey",
        "weakref",
        "cryptography.hazmat.primitives.ciphers",
        "paramiko.kex_curve25519",
        "paramiko.ecdsakey",
        "cryptography.hazmat.primitives.ciphers.modes",
        "paramiko.dsskey",
        "paramiko.compress",
        "paramiko.kex_gss",
        "paramiko.kex_group14",
        "atexit.register",
        "threading",
        "paramiko.transport.SecurityOptions",
        "paramiko.ssh_gss",
        "paramiko.channel",
        "paramiko.server",
        "paramiko.transport.ChannelMap",
        "paramiko.kex_group16",
        "paramiko.common",
        "paramiko.auth_handler",
        "paramiko.packet",
        "paramiko",
        "paramiko.ed25519key",
        "paramiko.util",
        "paramiko.sftp_client"
    ],
    "cryptography.hazmat.backends": [
        "typing"
    ],
    "cryptography.hazmat.backends.openssl.backend": [
        "cryptography.hazmat.backends.openssl.dh",
        "cryptography.hazmat.backends.openssl.backend._RC2",
        "cryptography.hazmat.primitives.serialization.ssh",
        "cryptography.hazmat.backends.openssl.ec",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.hazmat.backends.openssl.backend.Backend",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName",
        "cryptography.hazmat.backends.openssl.rsa",
        "cryptography.x509",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.bindings._rust",
        "cryptography.utils",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.hazmat.backends.openssl.aead",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.backends.openssl.backend.Backend.__init__",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.backends.openssl.poly1305",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.backends.openssl.ciphers",
        "cryptography.hazmat.backends.openssl.cmac",
        "collections.namedtuple",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.backends.openssl.hashes",
        "cryptography.hazmat.primitives.kdf.scrypt",
        "cryptography.hazmat.backends.openssl.hmac",
        "cryptography.hazmat.backends.openssl.ed448",
        "contextlib",
        "cryptography.hazmat.backends.openssl.ed25519",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.backends.openssl.x25519",
        "cryptography.hazmat.backends.openssl.dsa",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "collections",
        "cryptography.hazmat.primitives.serialization.pkcs7",
        "typing",
        "cryptography.hazmat.bindings.openssl.binding",
        "cryptography.hazmat.primitives.serialization.pkcs12",
        "cryptography.hazmat.backends.openssl.x448",
        "warnings",
        "cryptography.exceptions"
    ],
    "cryptography.utils": [
        "abc",
        "cryptography.utils._ModuleWithDeprecations",
        "cryptography.utils.InterfaceNotImplemented",
        "cryptography.utils.Enum",
        "typing",
        "enum",
        "types",
        "warnings",
        "inspect",
        "cryptography.utils._DeprecatedValue",
        "cryptography.utils.CryptographyDeprecationWarning"
    ],
    "cryptography.x509.certificate_transparency": [
        "abc",
        "cryptography.x509.certificate_transparency.Version",
        "cryptography.hazmat.bindings._rust",
        "datetime",
        "cryptography.x509.certificate_transparency.LogEntryType",
        "cryptography.utils",
        "cryptography.x509.certificate_transparency.SignatureAlgorithm",
        "cryptography.x509.certificate_transparency.SignedCertificateTimestamp",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.bindings._rust": [],
    "cryptography.hazmat.primitives.hashes": [
        "cryptography.hazmat.primitives.hashes.SHA512",
        "cryptography.hazmat.primitives.hashes.SHA3_384",
        "cryptography.hazmat.primitives.hashes.SHAKE128",
        "cryptography.hazmat.primitives.hashes.BLAKE2b",
        "cryptography.utils",
        "cryptography.hazmat.primitives.hashes.HashContext",
        "cryptography.hazmat.primitives.hashes.SHA3_512",
        "cryptography.hazmat.primitives.hashes.SM3",
        "cryptography.hazmat.primitives.hashes.SHA512_224",
        "cryptography.hazmat.primitives.hashes.SHA256",
        "cryptography.hazmat.primitives.hashes.Hash",
        "cryptography.hazmat.primitives.hashes.MD5",
        "cryptography.hazmat.primitives.hashes.SHA3_256",
        "cryptography.hazmat.primitives.hashes.HashAlgorithm",
        "cryptography.hazmat.primitives.hashes.SHA3_224",
        "cryptography.hazmat.primitives.hashes.SHA384",
        "cryptography.hazmat.primitives.hashes.SHAKE256",
        "cryptography.hazmat.primitives.hashes.BLAKE2s",
        "abc",
        "cryptography.hazmat.primitives.hashes.SHA224",
        "typing",
        "cryptography.hazmat.primitives.hashes.SHA512_256",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction",
        "cryptography.hazmat.primitives.hashes.SHA1"
    ],
    "cryptography.exceptions": [
        "cryptography.exceptions.AlreadyFinalized",
        "cryptography.exceptions.NotYetFinalized",
        "cryptography.exceptions.InvalidSignature",
        "cryptography.exceptions.InvalidTag",
        "cryptography.exceptions._Reasons",
        "cryptography.utils",
        "typing",
        "cryptography.hazmat.bindings.openssl.binding",
        "cryptography.exceptions.UnsupportedAlgorithm",
        "cryptography.exceptions.AlreadyUpdated",
        "cryptography.exceptions.InternalError",
        "cryptography.exceptions.InvalidKey"
    ],
    "cryptography.hazmat.bindings.openssl.binding": [
        "cryptography",
        "typing",
        "cryptography.utils",
        "cryptography.hazmat.bindings.openssl.binding.Binding",
        "cryptography.hazmat.bindings.openssl._conditional",
        "types",
        "warnings",
        "cryptography.exceptions",
        "cryptography.hazmat.bindings.openssl.binding._verify_package_version",
        "threading",
        "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks",
        "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version",
        "cryptography.hazmat.bindings.openssl.binding._OpenSSLError",
        "cryptography.hazmat.bindings._openssl"
    ],
    "cryptography": [
        "warnings.warn",
        "warnings",
        "cryptography.__about__",
        "cryptography.utils"
    ],
    "cryptography.__about__": [],
    "cryptography.hazmat.bindings._openssl": [],
    "cryptography.hazmat.bindings.openssl._conditional": [
        "typing"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.create_hash_ctx",
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509": [
        "cryptography.x509.base",
        "cryptography.x509.extensions",
        "cryptography.x509.name",
        "cryptography.x509.certificate_transparency",
        "cryptography.x509.general_name",
        "cryptography.x509.oid"
    ],
    "cryptography.x509.base": [
        "cryptography.x509.base.CertificateSigningRequestBuilder",
        "cryptography.x509.base.Version",
        "cryptography.x509.base.CertificateRevocationListBuilder",
        "datetime",
        "cryptography.x509.extensions",
        "cryptography.x509.base.CertificateRevocationList",
        "cryptography.x509.base.Attributes",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.x509.base.Attribute",
        "cryptography.x509.base._RawRevokedCertificate",
        "os",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.bindings._rust",
        "cryptography.utils",
        "cryptography.x509.base.Certificate",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.x509.base.RevokedCertificateBuilder",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.x509.base.RevokedCertificate",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.x509.base.AttributeNotFound",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "abc",
        "cryptography.x509.base.CertificateSigningRequest",
        "cryptography.x509.base.CertificateBuilder",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.x509.base.InvalidVersion",
        "typing",
        "cryptography.x509.name",
        "cryptography.x509.oid"
    ],
    "cryptography.hazmat.primitives._serialization": [
        "cryptography.hazmat.primitives._serialization.PBES",
        "abc",
        "cryptography.hazmat.primitives._serialization.BestAvailableEncryption",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryption",
        "cryptography.hazmat.primitives._serialization.Encoding",
        "cryptography.hazmat.primitives._serialization.PrivateFormat",
        "cryptography.hazmat.primitives._serialization._KeySerializationEncryption",
        "cryptography.utils",
        "typing",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives._serialization.NoEncryption",
        "cryptography.hazmat.primitives._serialization.PublicFormat",
        "cryptography.hazmat.primitives._serialization.ParameterFormat"
    ],
    "cryptography.hazmat.primitives.serialization": [
        "cryptography.hazmat.primitives.serialization.ssh",
        "cryptography.hazmat.primitives.serialization.base",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.serialization.base": [
        "cryptography.hazmat.primitives.asymmetric.dh",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.types"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh": [
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey",
        "typing",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameters"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.generate_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_parameters",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_parameter_numbers",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_public_numbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_private_numbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.types": [
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives.asymmetric.rsa"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa": [
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.utils"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils": [
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.utils.Prehashed"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.parameters": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_parameter_numbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_public_numbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_private_numbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.generate_parameters": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_parameters"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key_and_parameters"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec": [
        "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDH",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers",
        "cryptography.utils",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2",
        "warnings",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
        "cryptography.hazmat._oid",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1"
    ],
    "cryptography.hazmat._oid": [
        "cryptography.hazmat._oid.ExtensionOID",
        "cryptography.hazmat._oid.NameOID",
        "cryptography.hazmat._oid.SignatureAlgorithmOID",
        "cryptography.hazmat._oid.AttributeOID",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat._oid.CRLEntryExtensionOID",
        "cryptography.hazmat._oid.CertificatePoliciesOID",
        "typing",
        "cryptography.hazmat._oid.ExtendedKeyUsageOID",
        "cryptography.hazmat._oid.AuthorityInformationAccessOID",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat._oid.SubjectInformationAccessOID",
        "cryptography.hazmat._oid.OCSPExtensionOID"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.from_encoded_point": [
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.isinstance",
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_public_bytes"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_elliptic_curve_private_key"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.derive_private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend.derive_elliptic_curve_private_key",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_public_numbers",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_private_numbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519": [
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey.from_public_bytes": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_public_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_supported"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.generate": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_generate_key",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_supported"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.from_private_bytes": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_private_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_supported"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448": [
        "abc",
        "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey.from_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_public_bytes",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey.generate": [
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_generate_key",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey.from_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_supported",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_private_bytes",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa": [
        "abc",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers",
        "typing",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.hashes",
        "math",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
        "cryptography.hazmat.primitives._asymmetric"
    ],
    "cryptography.hazmat.primitives._asymmetric": [
        "abc",
        "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_rsa_private_key",
        "cryptography.hazmat.primitives.asymmetric.rsa._verify_rsa_parameters"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_rsa_private_numbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_rsa_public_numbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519": [
        "abc",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey.from_public_bytes": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_public_bytes"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.from_private_bytes": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_private_bytes",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448": [
        "abc",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey.from_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_supported",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_public_bytes"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.generate": [
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_supported",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_generate_key",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.from_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_private_bytes",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_pem_private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_private_key"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_pem_public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_public_key"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_pem_parameters": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_parameters"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_der_private_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_der_public_key": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_public_key"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_der_parameters": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_parameters"
    ],
    "cryptography.hazmat.primitives.serialization.ssh": [
        "binascii",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519",
        "bcrypt",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "re",
        "os",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "<builtin>.range",
        "cryptography.utils",
        "re.compile",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.ciphers.modes",
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA",
        "typing",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.serialization.ssh._FragList",
        "base64",
        "<builtin>.bytearray"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm": [
        "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm",
        "abc",
        "typing",
        "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm"
    ],
    "cryptography.hazmat.primitives.ciphers": [
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.hazmat.primitives.ciphers.base"
    ],
    "cryptography.hazmat.primitives.ciphers.base": [
        "typing.TypeVar.__init__",
        "abc",
        "cryptography.hazmat.backends.openssl.ciphers",
        "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.CipherContext",
        "typing",
        "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext",
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext",
        "cryptography.hazmat.primitives.ciphers.base.Cipher"
    ],
    "cryptography.hazmat.primitives.ciphers.modes": [
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector",
        "cryptography.hazmat.primitives.ciphers.modes.CBC",
        "cryptography.hazmat.primitives.ciphers.modes.XTS",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.hazmat.primitives.ciphers.modes.Mode",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag",
        "cryptography.utils",
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.hazmat.primitives.ciphers.modes.CFB",
        "cryptography.hazmat.primitives.ciphers.modes.CTR",
        "cryptography.hazmat.primitives.ciphers.modes.ECB",
        "cryptography.hazmat.primitives.ciphers.modes.CFB8",
        "cryptography.hazmat.primitives.ciphers.modes.GCM",
        "abc",
        "cryptography.hazmat.primitives.ciphers.modes.OFB",
        "typing",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms": [
        "cryptography.hazmat.primitives.ciphers.algorithms.SM4",
        "cryptography.hazmat.primitives.ciphers.algorithms.CAST5",
        "cryptography.hazmat.primitives.ciphers.algorithms.IDEA",
        "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20",
        "cryptography.utils.deprecated",
        "cryptography.hazmat.primitives.ciphers.algorithms.Camellia",
        "cryptography.utils",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES128",
        "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish",
        "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES",
        "cryptography.hazmat.primitives.ciphers.algorithms.SEED",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES256",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES",
        "cryptography.hazmat.primitives.ciphers.algorithms.ARC4",
        "cryptography.hazmat.primitives.ciphers"
    ],
    "cryptography.hazmat.backends.openssl.ciphers": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.ciphers.modes",
        "typing",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext",
        "cryptography.hazmat.primitives.ciphers"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.encryptor": [
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.ciphers.base.Cipher._wrap_ctx",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_encryption_ctx"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.ciphers.base.Cipher._wrap_ctx",
        "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_decryption_ctx"
    ],
    "bcrypt": [
        "hmac",
        "os",
        "__future__",
        "bcrypt.__about__",
        "bcrypt._bcrypt",
        "warnings"
    ],
    "hmac": [
        "_hashlib",
        "<builtin>.frozenset",
        "hashlib",
        "<builtin>.range",
        "hmac.HMAC",
        "<builtin>.bytes",
        "warnings"
    ],
    "bcrypt.__about__": [
        "__future__"
    ],
    "bcrypt._bcrypt": [],
    "cryptography.x509.extensions": [
        "typing.TypeVar.__init__",
        "cryptography.x509.extensions.DistributionPoint",
        "cryptography.x509.extensions.AccessDescription",
        "hashlib",
        "cryptography.x509.extensions.CertificatePolicies",
        "datetime",
        "cryptography.x509.extensions.SignedCertificateTimestamps",
        "cryptography.x509.extensions.IssuerAlternativeName",
        "cryptography.x509.extensions.AuthorityInformationAccess",
        "cryptography.x509.extensions.NameConstraints",
        "cryptography.x509.extensions.InvalidityDate",
        "cryptography.x509.certificate_transparency",
        "cryptography.x509.extensions.UserNotice",
        "cryptography.x509.extensions.ExtensionNotFound",
        "cryptography.x509.extensions.KeyUsage",
        "cryptography.x509.extensions.CertificateIssuer",
        "cryptography.x509.extensions.SubjectAlternativeName",
        "cryptography.x509.extensions.ReasonFlags",
        "cryptography.x509.extensions.OCSPNonce",
        "cryptography.x509.extensions.TLSFeature",
        "cryptography.hazmat.bindings._rust",
        "cryptography.utils",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.x509.general_name",
        "cryptography.x509.extensions.CRLReason",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.x509.extensions.SubjectKeyIdentifier",
        "cryptography.x509.extensions.PolicyInformation",
        "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps",
        "cryptography.x509.extensions.IssuingDistributionPoint",
        "cryptography.x509.extensions.CRLNumber",
        "cryptography.x509.extensions.BasicConstraints",
        "cryptography.x509.extensions.Extension",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.x509.extensions.CRLDistributionPoints",
        "cryptography.x509.extensions.NoticeReference",
        "cryptography.x509.extensions.DeltaCRLIndicator",
        "ipaddress",
        "cryptography.x509.extensions.PrecertPoison",
        "cryptography.x509.extensions.ExtendedKeyUsage",
        "cryptography.x509.extensions.Extensions",
        "cryptography.x509.extensions.SubjectInformationAccess",
        "cryptography.x509.extensions.OCSPNoCheck",
        "abc",
        "cryptography.x509.extensions.GeneralNames",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "typing",
        "cryptography.x509.extensions.FreshestCRL",
        "cryptography.x509.extensions.TLSFeatureType",
        "cryptography.x509.name",
        "cryptography.x509.extensions.PolicyConstraints",
        "cryptography.x509.extensions.InhibitAnyPolicy",
        "cryptography.x509.extensions.ExtensionType",
        "cryptography.x509.extensions.AuthorityKeyIdentifier",
        "cryptography.x509.extensions.UnrecognizedExtension",
        "cryptography.x509.oid",
        "cryptography.x509.extensions.DuplicateExtension"
    ],
    "ipaddress": [
        "ipaddress.NetmaskValueError",
        "ipaddress.IPv6Interface",
        "ipaddress._BaseNetwork",
        "ipaddress._IPAddressBase",
        "ipaddress._BaseV4",
        "ipaddress.IPv4Interface",
        "functools",
        "ipaddress.IPv6Network",
        "ipaddress._IPv4Constants",
        "ipaddress.IPv6Address",
        "ipaddress.IPv4Address",
        "ipaddress.IPv4Network",
        "ipaddress._BaseV6",
        "ipaddress._IPv6Constants",
        "ipaddress._BaseAddress",
        "ipaddress.AddressValueError"
    ],
    "cryptography.hazmat.primitives.constant_time": [
        "hmac"
    ],
    "cryptography.x509.general_name": [
        "abc",
        "cryptography.x509.general_name.RegisteredID",
        "cryptography.x509.general_name.GeneralName",
        "cryptography.x509.general_name.UniformResourceIdentifier",
        "cryptography.x509.general_name.IPAddress",
        "cryptography.x509.general_name.UnsupportedGeneralNameType",
        "cryptography.x509.general_name.OtherName",
        "typing",
        "cryptography.x509.general_name.DirectoryName",
        "cryptography.x509.name",
        "email.utils",
        "ipaddress",
        "cryptography.x509.oid",
        "cryptography.x509.general_name.RFC822Name",
        "cryptography.x509.general_name.DNSName"
    ],
    "cryptography.x509.name": [
        "binascii",
        "cryptography.x509.name.Name",
        "cryptography.x509.name._RFC4514NameParser",
        "cryptography.hazmat.bindings._rust",
        "typing",
        "cryptography.utils",
        "cryptography.x509.name.NameAttribute",
        "cryptography.x509.name._ASN1Type",
        "warnings",
        "cryptography.x509.name.RelativeDistinguishedName",
        "cryptography.x509.oid",
        "re"
    ],
    "cryptography.x509.oid": [
        "cryptography.hazmat._oid"
    ],
    "cryptography.hazmat.backends.openssl.aead": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.exceptions",
        "typing",
        "cryptography.hazmat.primitives.ciphers.aead"
    ],
    "cryptography.hazmat.primitives.ciphers.aead": [
        "cryptography.hazmat.backends.openssl.backend",
        "os",
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305",
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM",
        "typing",
        "cryptography.utils",
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM",
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV",
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.aead"
    ],
    "cryptography.hazmat.backends.openssl.aead._aead_cipher_name": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.ciphers.aead"
    ],
    "cryptography.hazmat.backends.openssl.aead._encrypt": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.ciphers.aead",
        "cryptography.hazmat.backends.openssl.aead._set_length",
        "cryptography.hazmat.backends.openssl.aead._process_aad",
        "cryptography.hazmat.backends.openssl.aead._process_data",
        "cryptography.hazmat.backends.openssl.aead._aead_setup",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.aead._aead_cipher_name"
    ],
    "cryptography.hazmat.backends.openssl.aead._decrypt": [
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.ciphers.aead",
        "cryptography.hazmat.backends.openssl.aead._set_length",
        "cryptography.hazmat.backends.openssl.aead._process_aad",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.aead._process_data",
        "cryptography.hazmat.backends.openssl.aead._aead_setup",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.aead._aead_cipher_name"
    ],
    "cryptography.hazmat.backends.openssl.cmac": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.cmac._CMACContext",
        "cryptography.hazmat.primitives.ciphers.modes",
        "typing",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers"
    ],
    "cryptography.hazmat.backends.openssl.dh": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.dh._DHParameters",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.backends.openssl.dsa": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.utils",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.backends.openssl.utils": [
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.hashes",
        "typing"
    ],
    "cryptography.hazmat.backends.openssl.ec": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.backends.openssl.utils",
        "typing",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.backends.openssl.ed25519": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.backends.openssl.ed448": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.backends.openssl.hashes": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.hashes._HashContext",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.backends.openssl.hmac": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.backends.openssl.hmac._HMACContext",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.backends.openssl.poly1305": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.rsa": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.utils",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes",
        "threading",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding": [
        "cryptography.hazmat.primitives.asymmetric.padding._Auto",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
        "cryptography.hazmat.primitives.asymmetric.padding._MaxLength",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.padding._DigestLength",
        "cryptography.hazmat.primitives.asymmetric.padding.PSS",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF",
        "cryptography.hazmat.primitives.asymmetric.padding.OAEP",
        "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives._asymmetric"
    ],
    "cryptography.hazmat.backends.openssl.x25519": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey",
        "cryptography.hazmat.backends.openssl.utils",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.backends.openssl.x448": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.utils",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt": [
        "cryptography.hazmat.primitives.kdf",
        "cryptography.utils",
        "typing",
        "cryptography.hazmat.primitives.kdf.scrypt.Scrypt",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.kdf": [
        "abc",
        "cryptography.hazmat.primitives.kdf.KeyDerivationFunction"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt.__init__": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.utils._check_bytes",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend.scrypt_supported"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt.derive": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.backend.Backend.derive_scrypt"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7": [
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder",
        "cryptography.utils",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.x509",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_pkcs7_certificates",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_pkcs7_certificates"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.serialize_certificates": [
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_serialize_certificates"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.sign": [
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_sign"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12": [
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.x509",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives.serialization"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.load_key_and_certificates": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_key_and_certificates_from_pkcs12",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.load_pkcs12": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pkcs12",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.serialize_key_and_certificates": [
        "cryptography.hazmat.backends.openssl.backend.Backend.serialize_key_and_certificates_to_pkcs12",
        "cryptography.hazmat.backends.openssl.backend",
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.default_backend": [
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl": [
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "paramiko.util": [
        "paramiko.util.ClosingContextManager",
        "paramiko.util.PFilter",
        "threading.local",
        "paramiko.common",
        "__future__",
        "paramiko.py3compat",
        "struct",
        "traceback",
        "paramiko.config",
        "threading",
        "logging"
    ],
    "paramiko.common": [
        "paramiko.py3compat",
        "<builtin>.range",
        "paramiko.py3compat.byte_chr",
        "logging"
    ],
    "paramiko.py3compat": [
        "locale",
        "collections",
        "struct",
        "paramiko.py3compat.long",
        "paramiko.py3compat.X",
        "<builtin>.len",
        "base64",
        "io",
        "<builtin>.int"
    ],
    "paramiko.config": [
        "paramiko.config.SSHConfigDict",
        "os",
        "shlex",
        "hashlib",
        "socket",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "functools",
        "paramiko.config.LazyFqdn",
        "paramiko.config.SSHConfig",
        "fnmatch",
        "getpass",
        "re"
    ],
    "shlex": [
        "shlex._print_tokens",
        "os",
        "shlex.shlex",
        "shlex.shlex.__init__",
        "collections",
        "re.compile",
        "<builtin>.open",
        "<builtin>.len",
        "io",
        "re"
    ],
    "paramiko.ssh_exception": [
        "paramiko.ssh_exception.IncompatiblePeer",
        "paramiko.ssh_exception.BadAuthenticationType",
        "paramiko.ssh_exception.CouldNotCanonicalize",
        "paramiko.ssh_exception.AuthenticationException",
        "paramiko.ssh_exception.NoValidConnectionsError",
        "paramiko.ssh_exception.SSHException",
        "socket",
        "paramiko.ssh_exception.ChannelException",
        "paramiko.ssh_exception.BadHostKeyException",
        "paramiko.ssh_exception.PartialAuthentication",
        "paramiko.ssh_exception.ProxyCommandFailure",
        "paramiko.ssh_exception.PasswordRequiredException",
        "paramiko.ssh_exception.ConfigParseError"
    ],
    "paramiko.hostkeys": [
        "binascii",
        "hmac",
        "paramiko.ecdsakey",
        "os",
        "paramiko.hostkeys.HostKeys",
        "paramiko.dsskey",
        "hashlib",
        "collections",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "paramiko.hostkeys.InvalidHostKey",
        "paramiko.util",
        "paramiko.hostkeys.HostKeyEntry",
        "paramiko.ed25519key",
        "paramiko.rsakey",
        "collections.abc"
    ],
    "paramiko.dsskey": [
        "paramiko.pkey",
        "paramiko.common",
        "cryptography.hazmat.backends",
        "paramiko.ber",
        "paramiko.ssh_exception",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes",
        "paramiko.message",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "paramiko.util",
        "paramiko.dsskey.DSSKey",
        "cryptography.hazmat.primitives.serialization"
    ],
    "paramiko.message": [
        "paramiko.message.Message",
        "paramiko.common",
        "paramiko.py3compat",
        "struct",
        "paramiko.util"
    ],
    "paramiko.ber": [
        "paramiko.common",
        "paramiko.py3compat",
        "paramiko.ber.BERException",
        "paramiko.ber.BER",
        "paramiko.util"
    ],
    "paramiko.pkey": [
        "binascii",
        "cryptography.hazmat.backends",
        "hashlib",
        "paramiko.py3compat",
        "bcrypt",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "paramiko.message",
        "paramiko.pkey.PublicBlob",
        "re",
        "os",
        "paramiko.pkey.PKey",
        "paramiko.ssh_exception",
        "struct",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.ciphers",
        "six",
        "cryptography.hazmat.primitives.ciphers.modes",
        "paramiko.common",
        "paramiko.util",
        "base64"
    ],
    "six": [
        "six.Module_six_moves_urllib_request",
        "operator",
        "six._SixMetaPathImporter",
        "six._MovedItems",
        "sys.meta_path.append",
        "types",
        "<builtin>.setattr",
        "six.Module_six_moves_urllib_response",
        "six.Module_six_moves_urllib_robotparser",
        "six.Module_six_moves_urllib_error",
        "importlib.util",
        "<builtin>.type",
        "<builtin>.int",
        "six.MovedAttribute.__init__",
        "<builtin>.isinstance",
        "__future__",
        "sys.platform.startswith",
        "six.Module_six_moves_urllib",
        "struct",
        "six.X",
        "six._LazyModule",
        "six.MovedModule",
        "io",
        "operator.itemgetter.__init__",
        "operator.methodcaller.__init__",
        "six._LazyDescr",
        "operator.attrgetter.__init__",
        "six.Module_six_moves_urllib_parse",
        "<builtin>.globals",
        "six._SixMetaPathImporter.__init__",
        "<builtin>.getattr",
        "six._add_doc",
        "six._LazyModule.__init__",
        "six.exec_",
        "six.Iterator",
        "functools",
        "six.MovedModule.__init__",
        "six.MovedAttribute",
        "<builtin>.enumerate",
        "<builtin>.len",
        "six._SixMetaPathImporter._add_module"
    ],
    "paramiko.rsakey": [
        "paramiko.pkey",
        "cryptography.hazmat.backends",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes",
        "paramiko.message",
        "paramiko.rsakey.RSAKey",
        "cryptography.hazmat.primitives.serialization"
    ],
    "paramiko.ecdsakey": [
        "paramiko.pkey",
        "paramiko.ecdsakey._ECDSACurve",
        "paramiko.common",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.backends",
        "paramiko.ssh_exception",
        "paramiko.ecdsakey._ECDSACurveSet",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.hashes",
        "paramiko.message",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "paramiko.util",
        "paramiko.ecdsakey.ECDSAKey",
        "cryptography.hazmat.primitives.serialization"
    ],
    "paramiko.ed25519key": [
        "paramiko.pkey",
        "cryptography.hazmat.backends",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "bcrypt",
        "nacl.signing",
        "paramiko.message",
        "paramiko.ed25519key.Ed25519Key",
        "cryptography.hazmat.primitives.ciphers"
    ],
    "nacl.signing": [
        "nacl.signing.SigningKey",
        "nacl.public",
        "nacl.encoding",
        "typing",
        "nacl.bindings",
        "nacl.signing.SignedMessage",
        "nacl.utils",
        "nacl.signing.VerifyKey",
        "nacl.exceptions"
    ],
    "nacl.bindings.crypto_aead": [
        "nacl.exceptions",
        "typing",
        "nacl._sodium"
    ],
    "nacl.exceptions": [
        "nacl.exceptions.TypeError",
        "nacl.exceptions.CryptoError",
        "nacl.exceptions.UnavailableError",
        "nacl.exceptions.CryptPrefixError",
        "typing",
        "nacl.exceptions.RuntimeError",
        "nacl.exceptions.ValueError",
        "nacl.exceptions.InvalidkeyError",
        "nacl.exceptions.BadSignatureError",
        "nacl.exceptions.AssertionError"
    ],
    "nacl._sodium": [],
    "nacl.bindings": [
        "nacl.bindings.randombytes",
        "nacl.bindings.sodium_core.sodium_init",
        "nacl.bindings.crypto_scalarmult",
        "nacl.bindings.crypto_core",
        "nacl.bindings.sodium_core",
        "nacl.bindings.crypto_secretbox",
        "nacl.bindings.crypto_generichash",
        "nacl.bindings.crypto_aead",
        "nacl.bindings.crypto_shorthash",
        "nacl.bindings.crypto_secretstream",
        "nacl.bindings.crypto_kx",
        "nacl.bindings.crypto_pwhash",
        "nacl.bindings.utils",
        "nacl.bindings.crypto_hash",
        "nacl.bindings.crypto_sign",
        "nacl.bindings.crypto_box"
    ],
    "nacl.bindings.crypto_box": [
        "nacl.exceptions",
        "typing",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_core": [
        "<builtin>.bool",
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_generichash": [
        "typing.TypeVar.__init__",
        "typing",
        "nacl.bindings.crypto_generichash.Blake2State",
        "nacl._sodium",
        "nacl.exceptions"
    ],
    "nacl.bindings.crypto_hash": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_kx": [
        "nacl.exceptions",
        "typing",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_pwhash": [
        "<builtin>.bool",
        "nacl.exceptions",
        "typing",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_scalarmult": [
        "<builtin>.bool",
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_secretbox": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_secretstream": [
        "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_state",
        "nacl.exceptions",
        "typing",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_shorthash": [
        "<builtin>.bool",
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_sign": [
        "nacl.bindings.crypto_sign.crypto_sign_ed25519ph_state",
        "nacl.exceptions",
        "typing",
        "nacl._sodium"
    ],
    "nacl.bindings.randombytes": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.sodium_core": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.utils": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.encoding": [
        "binascii",
        "nacl.encoding.RawEncoder",
        "abc",
        "nacl.encoding.Base16Encoder",
        "nacl.encoding.Base64Encoder",
        "typing",
        "nacl.encoding.Encodable",
        "nacl.encoding.Base32Encoder",
        "nacl.encoding._Encoder",
        "nacl.encoding.URLSafeBase64Encoder",
        "base64",
        "nacl.encoding.HexEncoder"
    ],
    "nacl.public": [
        "typing.TypeVar.__init__",
        "nacl.public.Box",
        "nacl.public.SealedBox",
        "nacl.public.PrivateKey",
        "nacl.encoding",
        "typing",
        "nacl.bindings",
        "nacl.utils",
        "nacl.public.PublicKey",
        "nacl.exceptions"
    ],
    "nacl.utils": [
        "typing.TypeVar.__init__",
        "nacl.utils.StringFixer",
        "os",
        "nacl.utils.EncryptedMessage",
        "nacl.encoding",
        "typing",
        "nacl.bindings"
    ],
    "paramiko.ed25519key.Ed25519Key._parse_signing_key_data": [
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.update",
        "<builtin>.len",
        "paramiko.message.Message.get_text",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.finalize",
        "paramiko.pkey._unpad_openssh",
        "paramiko.message.Message.get_bytes",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor",
        "<builtin>.range",
        "paramiko.message.Message.get_int",
        "bcrypt.kdf",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.get_binary",
        "cryptography.hazmat.backends.default_backend",
        "paramiko.py3compat.b",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.finalize",
        "paramiko.transport",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__"
    ],
    "paramiko.util.load_host_keys": [
        "paramiko.hostkeys.HostKeys.__init__",
        "paramiko.hostkeys"
    ],
    "paramiko.auth_handler": [
        "paramiko.common",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "paramiko.message",
        "paramiko.auth_handler.AuthHandler",
        "paramiko.ssh_gss",
        "weakref",
        "paramiko.auth_handler.GssapiWithMicAuthHandler",
        "paramiko.server",
        "re"
    ],
    "paramiko.server": [
        "paramiko.common",
        "paramiko.py3compat",
        "paramiko.server.SubsystemHandler",
        "paramiko.server.ServerInterface",
        "threading",
        "paramiko.util",
        "paramiko.server.InteractiveQuery"
    ],
    "paramiko.ssh_gss": [
        "paramiko.ssh_gss._SSH_GSSAPI_NEW",
        "paramiko.common",
        "os",
        "paramiko.ssh_gss._SSH_GSSAuth",
        "paramiko.ssh_exception",
        "struct",
        "paramiko._version",
        "paramiko.ssh_gss._SSH_SSPI",
        "<builtin>.hasattr",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD"
    ],
    "pyasn1.type.univ": [
        "pyasn1.type.univ.Null",
        "pyasn1.type.univ.Integer",
        "pyasn1.type.univ.ObjectIdentifier",
        "pyasn1.type.univ.Enumerated",
        "pyasn1.type.tag",
        "math",
        "pyasn1.type.univ.Sequence",
        "pyasn1.type.univ.Any",
        "pyasn1.type.tagmap",
        "pyasn1.type.univ.Choice",
        "pyasn1.error",
        "pyasn1.type.univ.SequenceAndSetBase",
        "pyasn1.type.constraint",
        "pyasn1.type.univ.SizedInteger",
        "pyasn1.type.univ.BitString",
        "pyasn1.codec.ber.eoo",
        "pyasn1.type.univ.Set",
        "pyasn1.type.univ.OctetString",
        "pyasn1.type.base",
        "pyasn1.compat.octets",
        "pyasn1.type.namedval",
        "pyasn1.type.univ.SequenceOfAndSetOfBase",
        "pyasn1.type.univ.Real",
        "pyasn1.type.univ.SequenceOf",
        "pyasn1.type.univ.Boolean",
        "pyasn1.type.namedtype",
        "pyasn1.compat.binary",
        "pyasn1.type.univ.SetOf",
        "pyasn1.compat.integer"
    ],
    "pyasn1.error": [
        "pyasn1.error.ValueConstraintError",
        "pyasn1.error.PyAsn1UnicodeEncodeError",
        "pyasn1.error.SubstrateUnderrunError",
        "pyasn1.error.PyAsn1Error",
        "pyasn1.error.PyAsn1UnicodeError",
        "pyasn1.error.PyAsn1UnicodeDecodeError"
    ],
    "pyasn1.type.base": [
        "pyasn1.type.base.ConstructedAsn1Type",
        "pyasn1.type.tagmap",
        "pyasn1.type.base.Asn1Item",
        "pyasn1.type.base.SimpleAsn1Type",
        "pyasn1.error",
        "pyasn1.type.tag",
        "pyasn1.compat.calling",
        "pyasn1.type.base.Asn1Type",
        "pyasn1.type.constraint",
        "pyasn1.type.base.NoValue"
    ],
    "pyasn1.compat.calling": [
        "collections"
    ],
    "pyasn1.type.error": [
        "pyasn1.type.error.ValueConstraintError",
        "pyasn1.error"
    ],
    "pyasn1.type.constraint": [
        "pyasn1.type.constraint.ComponentAbsentConstraint",
        "pyasn1.type.constraint.AbstractConstraintSet",
        "pyasn1.type.constraint.ConstraintsIntersection",
        "pyasn1.type.constraint.AbstractConstraint",
        "pyasn1.type.constraint.InnerTypeConstraint",
        "pyasn1.type.constraint.SingleValueConstraint",
        "pyasn1.type.constraint.ValueRangeConstraint",
        "pyasn1.type.constraint.ComponentPresentConstraint",
        "pyasn1.type.constraint.PermittedAlphabetConstraint",
        "pyasn1.type.error",
        "pyasn1.type.constraint.ConstraintsUnion",
        "pyasn1.type.constraint.WithComponentsConstraint",
        "pyasn1.type.constraint.ValueSizeConstraint",
        "pyasn1.type.constraint.ConstraintsExclusion",
        "pyasn1.type.constraint.ContainedSubtypeConstraint"
    ],
    "pyasn1.type.tag": [
        "pyasn1.error",
        "pyasn1.type.tag.Tag",
        "pyasn1.type.tag.TagSet"
    ],
    "pyasn1.type.tagmap": [
        "pyasn1.type.tagmap.TagMap",
        "pyasn1.error"
    ],
    "pyasn1.codec.ber.eoo": [
        "pyasn1.type.base.SimpleAsn1Type.__init__",
        "pyasn1.type.tag",
        "pyasn1.codec.ber.eoo.EndOfOctets",
        "pyasn1.type.base"
    ],
    "pyasn1.compat.binary": [],
    "platform": [
        "collections.namedtuple",
        "os",
        "platform.platform",
        "sys.exit",
        "collections",
        "re.compile",
        "<builtin>.print",
        "re"
    ],
    "platform._syscmd_ver": [
        "subprocess",
        "platform._norm_version",
        "subprocess.check_output"
    ],
    "plistlib": [
        "binascii",
        "plistlib._PlistWriter",
        "plistlib._DumbXMLWriter",
        "datetime",
        "enum",
        "plistlib.InvalidFileException",
        "plistlib._PlistParser",
        "codecs",
        "re",
        "plistlib.Data",
        "os",
        "struct",
        "re.compile",
        "io",
        "plistlib._BinaryPlistParser",
        "contextlib",
        "<builtin>.dict",
        "<builtin>.globals",
        "plistlib.UID",
        "plistlib._BinaryPlistWriter",
        "<builtin>.object",
        "xml.parsers.expat",
        "warnings",
        "contextlib.contextmanager"
    ],
    "xml.parsers.expat": [
        "pyexpat"
    ],
    "pyexpat": [],
    "platform._mac_ver_xml": [
        "ntpath.exists",
        "plistlib.load",
        "<builtin>.open",
        "posixpath.exists",
        "plistlib"
    ],
    "platform._node": [
        "socket"
    ],
    "platform._syscmd_uname": [
        "subprocess",
        "subprocess.check_output"
    ],
    "platform._syscmd_file": [
        "<builtin>.dict",
        "subprocess",
        "platform._follow_symlinks",
        "subprocess.check_output"
    ],
    "platform.architecture": [
        "platform._syscmd_file",
        "struct",
        "<builtin>.str"
    ],
    "pyasn1.compat.integer": [
        "binascii",
        "platform",
        "pyasn1.compat.octets"
    ],
    "pyasn1.compat.octets": [
        "pyasn1.compat.octets.<lambda1>"
    ],
    "pyasn1.type.namedtype": [
        "pyasn1.type.namedtype.NamedType",
        "pyasn1.type.tagmap",
        "pyasn1.error",
        "pyasn1.type.namedtype.DefaultedNamedType",
        "pyasn1.type.tag",
        "pyasn1.type.namedtype.NamedTypes",
        "pyasn1.type.namedtype.OptionalNamedType"
    ],
    "pyasn1.type.namedval": [
        "pyasn1.type.namedval.NamedValues",
        "pyasn1.error"
    ],
    "paramiko.ssh_gss._SSH_GSSAuth.ssh_gss_oids": [
        "pyasn1.type.base.SimpleAsn1Type.__init__",
        "paramiko.ssh_gss._SSH_GSSAuth._make_uint32",
        "pyasn1.type.univ",
        "pyasn1.codec.der.encoder",
        "<builtin>.len"
    ],
    "pyasn1.codec.der.encoder": [
        "pyasn1.codec.der.encoder.SetEncoder",
        "pyasn1.error",
        "pyasn1.type.univ",
        "pyasn1.codec.ber.encoder.Encoder.__init__",
        "pyasn1.codec.der.encoder.Encoder",
        "pyasn1.codec.cer.encoder"
    ],
    "pyasn1.codec.cer.encoder": [
        "pyasn1.codec.cer.encoder.BooleanEncoder",
        "pyasn1.codec.cer.encoder.RealEncoder",
        "pyasn1.codec.cer.encoder.Encoder",
        "pyasn1.codec.cer.encoder.SetEncoder",
        "pyasn1.error",
        "pyasn1.codec.cer.encoder.UTCTimeEncoder",
        "pyasn1.codec.cer.encoder.SequenceEncoder",
        "pyasn1.codec.cer.encoder.TimeEncoderMixIn",
        "pyasn1.type.univ",
        "pyasn1.compat.octets",
        "pyasn1.type.useful",
        "pyasn1.codec.cer.encoder.GeneralizedTimeEncoder",
        "pyasn1.codec.ber.encoder.Encoder.__init__",
        "pyasn1.codec.cer.encoder.SequenceOfEncoder",
        "pyasn1.codec.cer.encoder.SetOfEncoder",
        "pyasn1.codec.ber.encoder"
    ],
    "pyasn1.debug": [
        "pyasn1.debug.NullHandler",
        "pyasn1.debug.Scope",
        "pyasn1.error",
        "pyasn1.compat.octets",
        "pyasn1.debug.Printer",
        "pyasn1.debug.Debug",
        "pyasn1.debug.Scope.__init__",
        "<builtin>.hasattr",
        "pyasn1",
        "logging"
    ],
    "pyasn1": [
        "<builtin>.RuntimeError"
    ],
    "pyasn1.codec.ber.encoder": [
        "pyasn1.codec.ber.encoder.BooleanEncoder",
        "pyasn1.codec.ber.encoder.SequenceEncoder",
        "pyasn1.codec.ber.encoder.RealEncoder",
        "pyasn1.type.univ",
        "pyasn1.debug.registerLoggee",
        "pyasn1.type.tag",
        "pyasn1.codec.ber.encoder.AbstractItemEncoder",
        "pyasn1.codec.ber.encoder.IntegerEncoder",
        "pyasn1.type.char",
        "pyasn1.codec.ber.encoder.EndOfOctetsEncoder",
        "pyasn1.codec.ber.encoder.ObjectIdentifierEncoder",
        "pyasn1.debug",
        "pyasn1.error",
        "pyasn1.codec.ber.encoder.Encoder",
        "pyasn1.type.useful",
        "pyasn1.codec.ber.encoder.AnyEncoder",
        "pyasn1.codec.ber.encoder.BitStringEncoder",
        "pyasn1.codec.ber.eoo",
        "pyasn1.codec.ber.encoder.NullEncoder",
        "pyasn1.codec.ber.encoder.ChoiceEncoder",
        "pyasn1.compat.octets",
        "pyasn1.codec.ber.encoder.OctetStringEncoder",
        "pyasn1.codec.ber.encoder.Encoder.__init__",
        "pyasn1.codec.ber.encoder.SequenceOfEncoder",
        "pyasn1.compat.integer"
    ],
    "pyasn1.type.char": [
        "pyasn1.type.char.UniversalString",
        "pyasn1.type.char.VideotexString",
        "pyasn1.type.char.NumericString",
        "pyasn1.type.char.TeletexString",
        "pyasn1.type.char.AbstractCharacterString",
        "pyasn1.type.char.IA5String",
        "pyasn1.type.char.GraphicString",
        "pyasn1.type.char.VisibleString",
        "pyasn1.error",
        "pyasn1.type.char.T61String",
        "pyasn1.type.char.ISO646String",
        "pyasn1.type.char.GeneralString",
        "pyasn1.type.univ",
        "pyasn1.type.char.BMPString",
        "pyasn1.type.tag",
        "pyasn1.type.char.UTF8String",
        "pyasn1.type.char.PrintableString"
    ],
    "pyasn1.type.useful": [
        "pyasn1.type.char",
        "pyasn1.compat.string",
        "datetime",
        "pyasn1.error",
        "pyasn1.type.univ",
        "pyasn1.compat.dateandtime",
        "pyasn1.type.useful.ObjectDescriptor",
        "pyasn1.type.tag",
        "pyasn1.type.useful.TimeMixIn",
        "pyasn1.type.useful.GeneralizedTime",
        "pyasn1.type.useful.UTCTime"
    ],
    "pyasn1.compat.dateandtime": [
        "datetime"
    ],
    "pyasn1.compat.string": [],
    "pyasn1.codec.cer.decoder": [
        "pyasn1.error",
        "pyasn1.type.univ",
        "pyasn1.compat.octets",
        "pyasn1.codec.ber.decoder",
        "pyasn1.codec.cer.decoder.BooleanDecoder",
        "pyasn1.codec.cer.decoder.Decoder",
        "pyasn1.codec.ber.decoder.Decoder.__init__"
    ],
    "pyasn1.codec.ber.decoder": [
        "pyasn1.codec.ber.decoder.SetOfDecoder",
        "pyasn1.codec.ber.decoder.GraphicStringDecoder",
        "pyasn1.codec.ber.decoder.ObjectIdentifierDecoder",
        "pyasn1.type.univ",
        "pyasn1.codec.ber.decoder.SequenceOfDecoder",
        "pyasn1.debug.registerLoggee",
        "pyasn1.codec.ber.decoder.IntegerDecoder",
        "pyasn1.codec.ber.decoder.SetDecoder",
        "pyasn1.type.tag",
        "pyasn1.codec.ber.decoder.BitStringDecoder",
        "pyasn1.codec.ber.decoder.BooleanDecoder",
        "pyasn1.codec.ber.decoder.VisibleStringDecoder",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder",
        "pyasn1.codec.ber.decoder.AnyDecoder",
        "pyasn1.codec.ber.decoder.ChoiceDecoder",
        "pyasn1.type.char",
        "pyasn1.codec.ber.decoder.BMPStringDecoder",
        "pyasn1.type.tagmap",
        "pyasn1.debug",
        "pyasn1.codec.ber.decoder.Decoder.__init__",
        "pyasn1.error",
        "<builtin>.range",
        "pyasn1.type.useful",
        "pyasn1.codec.ber.decoder.ExplicitTagDecoder",
        "pyasn1.codec.ber.decoder.TeletexStringDecoder",
        "pyasn1.codec.ber.eoo",
        "pyasn1.codec.ber.decoder.GeneralStringDecoder",
        "pyasn1.codec.ber.decoder.SequenceOrSequenceOfDecoder",
        "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder",
        "pyasn1.codec.ber.decoder.RealDecoder",
        "pyasn1.codec.ber.decoder.NullDecoder",
        "pyasn1.codec.ber.decoder.SequenceDecoder",
        "pyasn1.type.base",
        "pyasn1.compat.octets",
        "pyasn1.codec.ber.decoder.NumericStringDecoder",
        "pyasn1.codec.ber.decoder.IA5StringDecoder",
        "pyasn1.codec.ber.decoder.ObjectDescriptorDecoder",
        "pyasn1.codec.ber.decoder.UniversalStringDecoder",
        "pyasn1.codec.ber.decoder.GeneralizedTimeDecoder",
        "pyasn1.codec.ber.decoder.VideotexStringDecoder",
        "pyasn1.codec.ber.decoder.AbstractConstructedDecoder",
        "pyasn1.codec.ber.decoder.UTCTimeDecoder",
        "pyasn1.codec.ber.decoder.Decoder",
        "pyasn1.codec.ber.decoder.PrintableStringDecoder",
        "pyasn1.codec.ber.decoder.SetOrSetOfDecoder",
        "pyasn1.codec.ber.decoder.UTF8StringDecoder",
        "pyasn1.codec.ber.decoder.AbstractDecoder",
        "pyasn1.compat.integer",
        "pyasn1.codec.ber.decoder.OctetStringDecoder"
    ],
    "pyasn1.codec.der.decoder": [
        "pyasn1.codec.der.decoder.BitStringDecoder",
        "pyasn1.codec.der.decoder.Decoder",
        "pyasn1.type.univ",
        "pyasn1.codec.cer.decoder",
        "pyasn1.codec.der.decoder.OctetStringDecoder",
        "pyasn1.codec.ber.decoder.Decoder.__init__"
    ],
    "paramiko.ssh_gss._SSH_GSSAuth.ssh_check_mech": [
        "pyasn1.codec.der.decoder"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_init_sec_context": [
        "gssapi.GSSException",
        "gssapi.InitContext",
        "gssapi.OID.mech_from_string",
        "gssapi.Name",
        "gssapi.Context",
        "sys.exc_info",
        "pyasn1.codec.der.decoder"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_init_sec_context": [
        "gssapi.Name",
        "gssapi.SecurityContext",
        "pyasn1.codec.der.decoder"
    ],
    "paramiko.ssh_gss._SSH_SSPI.ssh_init_sec_context": [
        "sspi.ClientAuth",
        "pyasn1.codec.der.decoder"
    ],
    "paramiko.channel": [
        "binascii",
        "os",
        "paramiko.common",
        "paramiko.pipe",
        "socket",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "functools",
        "paramiko.channel.Channel",
        "paramiko.file",
        "paramiko.buffered_pipe",
        "paramiko.channel.ChannelStdinFile",
        "paramiko.message",
        "threading",
        "paramiko.channel.ChannelFile",
        "paramiko.util",
        "paramiko.channel.ChannelStderrFile"
    ],
    "paramiko.file": [
        "paramiko.file.BufferedFile",
        "paramiko.py3compat",
        "paramiko.common",
        "paramiko.util"
    ],
    "paramiko.buffered_pipe": [
        "paramiko.py3compat",
        "paramiko.buffered_pipe.PipeTimeout",
        "paramiko.buffered_pipe.BufferedPipe",
        "threading",
        "array"
    ],
    "array": [],
    "paramiko.pipe": [
        "paramiko.pipe.WindowsPipe",
        "os",
        "socket",
        "paramiko.pipe.OrPipe",
        "paramiko.pipe.PosixPipe"
    ],
    "paramiko.compress": [
        "paramiko.compress.ZlibCompressor",
        "paramiko.compress.ZlibDecompressor",
        "zlib"
    ],
    "paramiko.kex_curve25519": [
        "binascii",
        "hashlib",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "<builtin>.range",
        "paramiko.kex_curve25519.KexCurve25519",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.exceptions",
        "paramiko.message",
        "paramiko.py3compat.byte_chr",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.primitives.serialization"
    ],
    "paramiko.kex_gex": [
        "paramiko.common",
        "os",
        "hashlib",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "<builtin>.range",
        "paramiko.kex_gex.KexGexSHA256",
        "paramiko.message",
        "paramiko.py3compat.byte_chr",
        "paramiko.kex_gex.KexGex",
        "paramiko.util"
    ],
    "paramiko.kex_group1": [
        "paramiko.common",
        "os",
        "hashlib",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "<builtin>.range",
        "paramiko.message",
        "paramiko.py3compat.byte_chr",
        "paramiko.util",
        "paramiko.kex_group1.KexGroup1"
    ],
    "paramiko.kex_group14": [
        "hashlib",
        "paramiko.kex_group14.KexGroup14",
        "paramiko.kex_group1",
        "paramiko.kex_group14.KexGroup14SHA256"
    ],
    "paramiko.kex_group16": [
        "hashlib",
        "paramiko.kex_group1",
        "paramiko.kex_group16.KexGroup16SHA512"
    ],
    "paramiko.kex_ecdh_nist": [
        "binascii",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.backends",
        "hashlib",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "<builtin>.range",
        "paramiko.kex_ecdh_nist.KexNistp521",
        "paramiko.message",
        "paramiko.py3compat.byte_chr",
        "paramiko.kex_ecdh_nist.KexNistp384",
        "cryptography.hazmat.primitives.serialization",
        "paramiko.kex_ecdh_nist.KexNistp256"
    ],
    "paramiko.kex_gss": [
        "paramiko.kex_gss.KexGSSGex",
        "paramiko.common",
        "os",
        "hashlib",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "<builtin>.range",
        "paramiko.kex_gss.KexGSSGroup1",
        "paramiko.kex_gss.KexGSSGroup14",
        "paramiko.kex_gss.NullHostKey",
        "paramiko.message",
        "paramiko.py3compat.byte_chr",
        "paramiko.util"
    ],
    "paramiko.packet": [
        "hmac",
        "os",
        "paramiko.common",
        "socket",
        "paramiko.py3compat",
        "struct",
        "paramiko.ssh_exception",
        "paramiko.message",
        "threading",
        "paramiko.packet.Packetizer",
        "paramiko.util",
        "paramiko.packet.NeedRekeyException"
    ],
    "paramiko.primes": [
        "os",
        "paramiko.py3compat",
        "paramiko.ssh_exception",
        "paramiko.primes.ModulusPack",
        "paramiko.util"
    ],
    "paramiko.sftp_client": [
        "binascii",
        "os",
        "paramiko.common",
        "paramiko.sftp",
        "paramiko.py3compat",
        "paramiko.sftp_attr",
        "paramiko.ssh_exception",
        "paramiko.util",
        "paramiko.sftp_client.SFTPClient",
        "paramiko.message",
        "threading",
        "paramiko.sftp_client.SFTP",
        "weakref",
        "paramiko.channel",
        "stat",
        "paramiko.sftp_file"
    ],
    "paramiko.sftp": [
        "paramiko.sftp.SFTPError",
        "paramiko.common",
        "paramiko.sftp.BaseSFTP",
        "socket",
        "paramiko.py3compat",
        "struct",
        "<builtin>.range",
        "select",
        "paramiko.message",
        "paramiko.util"
    ],
    "paramiko.sftp_attr": [
        "paramiko.py3compat",
        "paramiko.common",
        "stat",
        "paramiko.sftp_attr.SFTPAttributes"
    ],
    "paramiko.sftp_file": [
        "binascii",
        "paramiko.common",
        "__future__",
        "paramiko.sftp",
        "collections",
        "socket",
        "paramiko.py3compat",
        "paramiko.sftp_attr",
        "paramiko.file",
        "paramiko.sftp_file.SFTPFile",
        "threading"
    ],
    "paramiko.client": [
        "binascii",
        "paramiko.py3compat",
        "paramiko.config",
        "inspect",
        "os",
        "socket",
        "paramiko.ssh_exception",
        "paramiko.client.RejectPolicy",
        "paramiko.client.SSHClient",
        "paramiko.rsakey",
        "paramiko.ecdsakey",
        "paramiko.client.AutoAddPolicy",
        "paramiko.dsskey",
        "paramiko.hostkeys",
        "paramiko.client.MissingHostKeyPolicy",
        "paramiko.common",
        "paramiko.agent",
        "paramiko.ed25519key",
        "warnings",
        "paramiko.transport",
        "paramiko.util",
        "paramiko.client.WarningPolicy",
        "getpass"
    ],
    "paramiko.agent": [
        "paramiko.py3compat",
        "paramiko.message",
        "paramiko.py3compat.byte_chr",
        "paramiko.pkey",
        "os",
        "socket",
        "paramiko.ssh_exception",
        "struct",
        "paramiko.agent.AgentClientProxy",
        "paramiko.agent.AgentSSH",
        "paramiko.agent.AgentLocalProxy",
        "paramiko.agent.Agent",
        "paramiko.agent.AgentProxyThread",
        "tempfile",
        "threading",
        "paramiko.agent.AgentServerProxy",
        "paramiko.agent.AgentRequestHandler",
        "paramiko.common",
        "paramiko.agent.AgentKey",
        "select",
        "paramiko.agent.AgentRemoteProxy",
        "paramiko.util",
        "stat"
    ],
    "paramiko.agent.AgentProxyThread._communicate": [
        "<builtin>.len",
        "paramiko.agent.AgentProxyThread._close",
        "fcntl",
        "time.sleep"
    ],
    "fcntl": [],
    "paramiko.win_pageant": [
        "paramiko.win_pageant.COPYDATASTRUCT",
        "platform",
        "paramiko._winapi",
        "paramiko.common",
        "paramiko.py3compat",
        "struct",
        "paramiko.win_pageant.PageantConnection",
        "ctypes.wintypes",
        "array"
    ],
    "ctypes": [
        "ctypes.c_uint",
        "ctypes.c_ulonglong",
        "ctypes.c_short",
        "ctypes.c_ulong",
        "ctypes.c_longlong",
        "ctypes.CDLL",
        "ctypes.PYFUNCTYPE",
        "ctypes._check_size",
        "ctypes.c_char",
        "ctypes.LibraryLoader.__init__",
        "ctypes.c_float",
        "<builtin>.int",
        "ctypes.c_wchar",
        "ctypes.CFUNCTYPE",
        "os",
        "_ctypes",
        "struct",
        "ctypes.c_wchar_p",
        "ctypes.HRESULT",
        "ctypes.c_long",
        "ctypes.c_char_p",
        "ctypes.OleDLL",
        "ctypes.c_ushort",
        "ctypes.c_ubyte",
        "ctypes.PyDLL",
        "ctypes.WinDLL",
        "ctypes._reset_cache",
        "ctypes.c_bool",
        "ctypes.c_void_p",
        "ctypes._endian",
        "ctypes.LibraryLoader",
        "ctypes.c_int",
        "<builtin>.Exception",
        "ctypes.CDLL.__init__",
        "ctypes.c_double",
        "ctypes.c_longdouble",
        "ctypes.py_object",
        "ctypes.c_byte"
    ],
    "_ctypes": [],
    "ctypes._check_size": [
        "struct",
        "<builtin>.SystemError"
    ],
    "ctypes._endian": [
        "ctypes._endian._swapped_meta",
        "ctypes._endian.LittleEndianStructure",
        "ctypes",
        "ctypes._endian.BigEndianStructure",
        "<builtin>.RuntimeError",
        "<builtin>.type"
    ],
    "ctypes.wintypes": [
        "ctypes.wintypes.WIN32_FIND_DATAW",
        "ctypes.wintypes.FILETIME",
        "ctypes.wintypes.WIN32_FIND_DATAA",
        "ctypes",
        "ctypes.wintypes.SIZE",
        "ctypes.wintypes.POINT",
        "ctypes.wintypes.VARIANT_BOOL",
        "ctypes.wintypes.MSG",
        "ctypes.wintypes.RECT",
        "ctypes.wintypes._COORD",
        "ctypes.wintypes._SMALL_RECT"
    ],
    "paramiko._winapi": [
        "paramiko._winapi.SECURITY_DESCRIPTOR",
        "paramiko._winapi.SECURITY_ATTRIBUTES",
        "paramiko._winapi.TokenAccess",
        "paramiko.py3compat",
        "paramiko._winapi.WindowsError",
        "paramiko._winapi.MemoryMap",
        "ctypes.wintypes",
        "paramiko._winapi.TOKEN_USER",
        "paramiko._winapi.TokenInformationClass"
    ],
    "paramiko.agent.get_agent_connection": [
        "paramiko.win_pageant.PageantConnection.__init__",
        "paramiko.util.retry_on_signal",
        "paramiko.win_openssh",
        "paramiko.win_openssh.can_talk_to_agent",
        "paramiko.win_pageant",
        "paramiko.win_openssh.OpenSSHAgentConnection.__init__",
        "paramiko.win_pageant.can_talk_to_agent"
    ],
    "paramiko.win_openssh": [
        "posixpath",
        "paramiko.win_openssh.OpenSSHAgentConnection"
    ],
    "paramiko.sftp_server": [
        "os",
        "paramiko.common",
        "paramiko.sftp",
        "hashlib",
        "paramiko.sftp_attr",
        "paramiko.py3compat",
        "paramiko.sftp_si",
        "paramiko.sftp_server.SFTPServer",
        "paramiko.util",
        "paramiko.server",
        "paramiko.sftp_handle"
    ],
    "paramiko.sftp_si": [
        "paramiko.sftp",
        "paramiko.sftp_si.SFTPServerInterface",
        "os"
    ],
    "paramiko.sftp_handle": [
        "os",
        "paramiko.sftp",
        "paramiko.sftp_handle.SFTPHandle",
        "paramiko.sftp_server",
        "paramiko.util"
    ],
    "paramiko.proxy": [
        "os",
        "shlex",
        "socket",
        "paramiko.ssh_exception",
        "paramiko.util",
        "select",
        "signal",
        "subprocess",
        "paramiko.proxy.ProxyCommand"
    ],
    "queue": [
        "queue.LifoQueue",
        "queue.Full",
        "_queue",
        "heapq",
        "collections",
        "queue.Queue",
        "queue.PriorityQueue",
        "queue._PySimpleQueue",
        "queue.Empty",
        "threading"
    ],
    "_queue": [],
    "socketserver": [
        "selectors",
        "socketserver.ForkingMixIn",
        "socketserver.ThreadingTCPServer",
        "socketserver.ThreadingUDPServer",
        "socketserver.ThreadingUnixStreamServer",
        "socketserver._SocketWriter",
        "socketserver.ForkingUDPServer",
        "os",
        "socket",
        "socketserver.UnixDatagramServer",
        "socketserver.TCPServer",
        "socketserver.UnixStreamServer",
        "<builtin>.hasattr",
        "io",
        "socketserver.BaseServer",
        "socketserver.ThreadingUnixDatagramServer",
        "socketserver.BaseRequestHandler",
        "threading",
        "socketserver.ThreadingMixIn",
        "socketserver.UDPServer",
        "socketserver.DatagramRequestHandler",
        "socketserver.StreamRequestHandler",
        "socketserver.ForkingTCPServer"
    ],
    "socketserver.BaseServer.handle_error": [
        "<builtin>.print",
        "traceback.print_exc",
        "traceback"
    ],
    "socketserver.DatagramRequestHandler.setup": [
        "_io.BytesIO",
        "io"
    ],
    "logging.addLevelName": [
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "posixpath.join": [
        "sys.path.endswith",
        "<builtin>.map",
        "sys.executable.endswith",
        "genericpath._check_arg_types",
        "posixpath._get_sep",
        "sys.base_prefix.endswith"
    ],
    "ntpath.join": [
        "<builtin>.map",
        "genericpath._check_arg_types",
        "ntpath.splitdrive",
        "<builtin>.isinstance"
    ],
    "sshtunnel.check_host": [
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.type": [],
    "sshtunnel.check_port": [
        "<builtin>.isinstance"
    ],
    "sshtunnel.check_address": [
        "ntpath.exists",
        "<builtin>.isinstance",
        "sshtunnel.check_port",
        "sshtunnel.check_host",
        "ntpath.dirname",
        "<builtin>.ValueError",
        "posixpath.exists",
        "<builtin>.type",
        "posixpath.dirname"
    ],
    "<builtin>.ValueError": [],
    "ntpath.exists": [],
    "posixpath.exists": [],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "posixpath.dirname": [
        "sys.executable.rfind",
        "sys.base_prefix.rfind",
        "sys.path.rfind",
        "posixpath._get_sep",
        "<builtin>.len"
    ],
    "sshtunnel.check_addresses": [
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.any",
        "<builtin>.AssertionError",
        "sshtunnel.check_address"
    ],
    "<builtin>.all": [],
    "<builtin>.any": [],
    "<builtin>.AssertionError": [],
    "sshtunnel.create_logger": [
        "<builtin>.isinstance",
        "logging.StreamHandler.__init__",
        "<builtin>.any",
        "logging.captureWarnings",
        "logging.getLogger",
        "sshtunnel._add_handler",
        "sshtunnel._check_paramiko_handlers"
    ],
    "logging.getLogger": [
        "logging.Manager.getLogger"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "sshtunnel._add_handler": [
        "logging.Handler.setLevel",
        "logging.Formatter.__init__",
        "logging.Handler.setFormatter"
    ],
    "sshtunnel._check_paramiko_handlers": [
        "logging.StreamHandler.__init__",
        "logging.getLogger",
        "logging.Handler.setFormatter",
        "logging.Logger.addHandler",
        "logging.Formatter.__init__"
    ],
    "logging.captureWarnings": [],
    "logging.Handler.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Formatter.__init__": [
        "<builtin>.ValueError"
    ],
    "logging.Handler.setFormatter": [],
    "logging.Logger.addHandler": [
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "sshtunnel.address_to_str": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<builtin>.str": [],
    "sshtunnel.get_connection_id": [],
    "sshtunnel._remove_none_values": [
        "<builtin>.map",
        "<builtin>.list"
    ],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "sshtunnel.BaseSSHTunnelForwarderError": [],
    "sshtunnel.BaseSSHTunnelForwarderError.__init__": [],
    "sshtunnel.BaseSSHTunnelForwarderError.__str__": [],
    "sshtunnel.HandlerSSHTunnelForwarderError": [],
    "sshtunnel._ForwardHandler": [],
    "sshtunnel._ForwardHandler._redirect": [
        "SocketServer.BaseRequestHandler.request.sendall",
        "SocketServer.BaseRequestHandler.request.recv"
    ],
    "SocketServer.BaseRequestHandler.request.recv": [],
    "SocketServer.BaseRequestHandler.request.sendall": [],
    "sshtunnel._ForwardHandler.handle": [
        "sshtunnel._ForwardHandler._redirect",
        "<builtin>.isinstance",
        "<builtin>.repr",
        "SocketServer.BaseRequestHandler.request.getpeername",
        "SocketServer.BaseRequestHandler.request.close",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__",
        "sshtunnel.get_connection_id"
    ],
    "SocketServer.BaseRequestHandler.request.getpeername": [],
    "<builtin>.repr": [],
    "SocketServer.BaseRequestHandler.request.close": [],
    "sshtunnel._ForwardServer": [],
    "sshtunnel._ForwardServer.__init__": [
        "queue.Queue.__init__",
        "sshtunnel.create_logger",
        "SocketServer.TCPServer.__init__",
        "socketserver.TCPServer.__init__"
    ],
    "queue.Queue.__init__": [
        "threading.Condition.__init__",
        "queue.Queue._init"
    ],
    "SocketServer.TCPServer.__init__": [],
    "socketserver.TCPServer.__init__": [
        "socketserver.TCPServer.server_close",
        "socketserver.TCPServer.server_activate",
        "socketserver.BaseServer.__init__",
        "socketserver.TCPServer.server_bind"
    ],
    "sshtunnel._ForwardServer.handle_error": [
        "queue.Queue.put",
        "sys.exc_info"
    ],
    "sys.exc_info": [],
    "queue.Queue.put": [
        "queue.Queue._put",
        "threading.Condition.notify",
        "threading.Condition.wait",
        "<builtin>.ValueError",
        "queue.Queue._qsize",
        "time.monotonic"
    ],
    "sshtunnel._ForwardServer.local_address": [],
    "sshtunnel._ForwardServer.local_host": [],
    "sshtunnel._ForwardServer.local_port": [],
    "sshtunnel._ForwardServer.remote_address": [],
    "sshtunnel._ForwardServer.remote_host": [],
    "sshtunnel._ForwardServer.remote_port": [],
    "sshtunnel._ThreadingForwardServer": [],
    "sshtunnel._StreamForwardServer": [],
    "sshtunnel._StreamForwardServer.__init__": [
        "queue.Queue.__init__",
        "sshtunnel.create_logger"
    ],
    "sshtunnel._StreamForwardServer.local_address": [],
    "sshtunnel._StreamForwardServer.local_host": [],
    "sshtunnel._StreamForwardServer.local_port": [],
    "sshtunnel._StreamForwardServer.remote_address": [],
    "sshtunnel._StreamForwardServer.remote_host": [],
    "sshtunnel._StreamForwardServer.remote_port": [],
    "sshtunnel._ThreadingStreamForwardServer": [],
    "sshtunnel.SSHTunnelForwarder": [],
    "sshtunnel.SSHTunnelForwarder.local_is_up": [
        "sshtunnel.SSHTunnelForwarder.check_tunnels",
        "sshtunnel.check_address"
    ],
    "sshtunnel.SSHTunnelForwarder.check_tunnels": [
        "sshtunnel.SSHTunnelForwarder._check_tunnel"
    ],
    "sshtunnel.SSHTunnelForwarder._check_tunnel": [
        "<builtin>.isinstance"
    ],
    "sshtunnel.SSHTunnelForwarder._make_ssh_forward_handler_class": [
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_handler_class.Handler"
    ],
    "sshtunnel.SSHTunnelForwarder._make_ssh_forward_handler_class.Handler": [],
    "sshtunnel.SSHTunnelForwarder._make_ssh_forward_server_class": [],
    "sshtunnel.SSHTunnelForwarder._make_stream_ssh_forward_server_class": [],
    "sshtunnel.SSHTunnelForwarder._make_ssh_forward_server": [
        "<builtin>.isinstance",
        "sshtunnel.address_to_str",
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_handler_class",
        "sshtunnel.SSHTunnelForwarder._raise"
    ],
    "sshtunnel.SSHTunnelForwarder._raise": [
        "<builtin>.repr",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__"
    ],
    "sshtunnel.SSHTunnelForwarder.__init__": [
        "<builtin>.isinstance",
        "sshtunnel.SSHTunnelForwarder._get_binds",
        "sshtunnel.SSHTunnelForwarder._consolidate_binds",
        "sshtunnel.check_port",
        "sshtunnel.SSHTunnelForwarder._process_deprecated",
        "sshtunnel.check_host",
        "sshtunnel.SSHTunnelForwarder._consolidate_auth",
        "sshtunnel.check_address",
        "sshtunnel.create_logger",
        "<builtin>.ValueError",
        "sshtunnel._check_paramiko_handlers",
        "sshtunnel.SSHTunnelForwarder._read_ssh_config"
    ],
    "sshtunnel.SSHTunnelForwarder._process_deprecated": [
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "sshtunnel.SSHTunnelForwarder._get_binds": [
        "<builtin>.isinstance",
        "sshtunnel.check_addresses",
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "sshtunnel.SSHTunnelForwarder._consolidate_binds": [
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "sshtunnel.SSHTunnelForwarder._read_ssh_config": [
        "paramiko.config.SSHConfig.parse",
        "ntpath.expanduser",
        "posixpath.expanduser",
        "<builtin>.open",
        "paramiko.config.SSHConfig.lookup",
        "<builtin>.int"
    ],
    "sshtunnel.SSHTunnelForwarder._consolidate_auth": [
        "ntpath.exists",
        "<builtin>.isinstance",
        "sshtunnel.SSHTunnelForwarder.read_private_key_file",
        "ntpath.expanduser",
        "sshtunnel.SSHTunnelForwarder.get_keys",
        "posixpath.expanduser",
        "<builtin>.ValueError",
        "posixpath.exists"
    ],
    "posixpath.expanduser": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "sys.path.startswith",
        "sys.executable.startswith",
        "pwd.getpwnam",
        "pwd.getpwuid",
        "posixpath._get_sep",
        "sys.base_prefix.startswith",
        "sys.executable.find",
        "sys.path.find",
        "<builtin>.str",
        "sys.base_prefix.find"
    ],
    "ntpath.expanduser": [
        "ntpath._get_bothseps",
        "<builtin>.isinstance",
        "sys.path.startswith",
        "sys.executable.startswith",
        "ntpath.join",
        "ntpath.dirname",
        "sys.base_prefix.startswith",
        "<builtin>.len"
    ],
    "<builtin>.open": [],
    "paramiko.config.SSHConfig.parse": [
        "paramiko.config.SSHConfig._get_matches",
        "re.match",
        "paramiko.config.SSHConfig._get_hosts"
    ],
    "paramiko.config.SSHConfig.lookup": [
        "paramiko.config.SSHConfig._lookup",
        "paramiko.config.SSHConfig.canonicalize",
        "<builtin>.int"
    ],
    "<builtin>.int": [],
    "sshtunnel.SSHTunnelForwarder.get_agent_keys": [
        "<builtin>.len",
        "<builtin>.list",
        "paramiko.agent.AgentSSH.get_keys"
    ],
    "paramiko.agent.AgentSSH.get_keys": [],
    "<builtin>.len": [],
    "sshtunnel.SSHTunnelForwarder.get_keys": [
        "ntpath.isfile",
        "posixpath.join",
        "sshtunnel.SSHTunnelForwarder.read_private_key_file",
        "ntpath.join",
        "ntpath.expanduser",
        "posixpath.isfile",
        "posixpath.expanduser",
        "<builtin>.len",
        "<builtin>.hasattr",
        "sshtunnel.SSHTunnelForwarder.get_agent_keys"
    ],
    "<builtin>.hasattr": [],
    "ntpath.isfile": [],
    "posixpath.isfile": [],
    "sshtunnel.SSHTunnelForwarder.read_private_key_file": [
        "<builtin>.hasattr"
    ],
    "<builtin>.range": [],
    "sshtunnel.SSHTunnelForwarder._get_transport": [
        "paramiko.transport.Transport.set_keepalive",
        "<builtin>.repr",
        "<builtin>.isinstance",
        "paramiko.transport.Transport.use_compression"
    ],
    "paramiko.transport.Transport.set_keepalive": [
        "paramiko.packet.Packetizer.set_keepalive"
    ],
    "paramiko.transport.Transport.use_compression": [],
    "sshtunnel.SSHTunnelForwarder._create_tunnels": [
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_server",
        "sshtunnel.SSHTunnelForwarder._connect_to_gateway",
        "<builtin>.zip"
    ],
    "sshtunnel.SSHTunnelForwarder._connect_to_gateway": [
        "<builtin>.len",
        "paramiko.transport.Transport.connect",
        "sshtunnel.SSHTunnelForwarder._get_transport",
        "sshtunnel.SSHTunnelForwarder._stop_transport"
    ],
    "<builtin>.zip": [],
    "<builtin>.enumerate": [],
    "warnings.warn": [
        "sys.__dict__.setdefault",
        "<builtin>.isinstance",
        "<builtin>.range",
        "warnings._next_external_frame",
        "<builtin>.TypeError",
        "sys._getframe",
        "<builtin>.issubclass",
        "_warnings.warn_explicit",
        "warnings._is_internal_frame",
        "<builtin>.type"
    ],
    "sshtunnel.SSHTunnelForwarder.start": [
        "sshtunnel.SSHTunnelForwarder._raise",
        "threading.Thread.__init__",
        "<builtin>.any",
        "sshtunnel.SSHTunnelForwarder._check_tunnel",
        "threading.Thread.start",
        "sshtunnel.address_to_str",
        "sshtunnel.SSHTunnelForwarder._create_tunnels"
    ],
    "threading.Thread.__init__": [
        "threading._make_invoke_excepthook",
        "_weakrefset.WeakSet.add",
        "threading._newname",
        "threading.Event.__init__",
        "threading.current_thread",
        "<builtin>.str"
    ],
    "threading.Thread.start": [
        "_thread.start_new_thread",
        "threading.Event.wait",
        "<builtin>.RuntimeError",
        "threading.Event.is_set"
    ],
    "sshtunnel.SSHTunnelForwarder.stop": [
        "sshtunnel.address_to_str",
        "sshtunnel.SSHTunnelForwarder._stop_transport"
    ],
    "sshtunnel.SSHTunnelForwarder._stop_transport": [
        "<builtin>.repr",
        "<builtin>.isinstance",
        "paramiko.transport.Transport.stop_thread",
        "paramiko.transport.Transport.close",
        "sshtunnel.SSHTunnelForwarder._check_is_started",
        "sshtunnel.address_to_str"
    ],
    "sshtunnel.SSHTunnelForwarder.close": [
        "sshtunnel.SSHTunnelForwarder.stop"
    ],
    "sshtunnel.SSHTunnelForwarder.restart": [
        "sshtunnel.SSHTunnelForwarder.stop",
        "sshtunnel.SSHTunnelForwarder.start"
    ],
    "paramiko.transport.Transport.connect": [
        "paramiko.transport.Transport.get_remote_server_key",
        "<builtin>.repr",
        "<builtin>.isinstance",
        "paramiko.transport.Transport.start_client",
        "paramiko.transport.Transport.auth_gssapi_keyex",
        "paramiko.transport.Transport.set_gss_host",
        "paramiko.transport.Transport._log",
        "paramiko.transport.Transport.auth_password",
        "paramiko.transport.Transport.auth_gssapi_with_mic",
        "paramiko.transport.Transport.auth_publickey"
    ],
    "sshtunnel.SSHTunnelForwarder._serve_forever_wrapper": [
        "sshtunnel.address_to_str"
    ],
    "sshtunnel.SSHTunnelForwarder._check_is_started": [
        "sshtunnel.BaseSSHTunnelForwarderError.__init__"
    ],
    "paramiko.transport.Transport.close": [
        "paramiko.transport.Transport.stop_thread",
        "<builtin>.list",
        "paramiko.transport.ChannelMap.values"
    ],
    "paramiko.transport.Transport.stop_thread": [
        "paramiko.packet.Packetizer.close",
        "threading.Thread.is_alive",
        "threading._DummyThread.is_alive",
        "threading._DummyThread.join",
        "threading.current_thread",
        "threading.Thread.join"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_port": [
        "<builtin>.len",
        "sshtunnel.SSHTunnelForwarder._check_is_started",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_host": [
        "<builtin>.len",
        "sshtunnel.SSHTunnelForwarder._check_is_started",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_address": [
        "<builtin>.len",
        "sshtunnel.SSHTunnelForwarder._check_is_started",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_ports": [
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_hosts": [
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_addresses": [
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.tunnel_bindings": [
        "<builtin>.dict"
    ],
    "<builtin>.dict": [],
    "sshtunnel.SSHTunnelForwarder.is_active": [
        "paramiko.transport.Transport.is_active"
    ],
    "paramiko.transport.Transport.is_active": [],
    "sshtunnel.SSHTunnelForwarder.__str__": [
        "sshtunnel._remove_none_values",
        "<builtin>.any",
        "logging.getLevelName"
    ],
    "logging.getLevelName": [],
    "sshtunnel.SSHTunnelForwarder.__repr__": [
        "sshtunnel.SSHTunnelForwarder.__str__"
    ],
    "sshtunnel.SSHTunnelForwarder.__enter__": [
        "sshtunnel.SSHTunnelForwarder.__exit__",
        "sshtunnel.SSHTunnelForwarder.start"
    ],
    "sshtunnel.SSHTunnelForwarder.__exit__": [
        "sshtunnel.SSHTunnelForwarder.stop"
    ],
    "sshtunnel.SSHTunnelForwarder.__del__": [
        "sshtunnel.SSHTunnelForwarder.stop"
    ],
    "sshtunnel.open_tunnel": [
        "sshtunnel.SSHTunnelForwarder.__init__",
        "<builtin>.isinstance",
        "warnings.warn",
        "sshtunnel.SSHTunnelForwarder._process_deprecated",
        "sshtunnel.create_logger"
    ],
    "sshtunnel._bindlist": [
        "<builtin>.len",
        "<builtin>.int"
    ],
    "sshtunnel._parse_arguments": [
        "argparse.ArgumentParser.__init__",
        "<builtin>.vars",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_argument",
        "logging.getLevelName"
    ],
    "argparse.ArgumentParser.__init__": [
        "posixpath.basename",
        "argparse._ActionsContainer.register",
        "ntpath.basename",
        "argparse._ActionsContainer.add_argument_group",
        "argparse._ActionsContainer._add_container_actions",
        "<builtin>.super",
        "argparse._ActionsContainer.add_argument",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer.add_argument": [
        "argparse._ActionsContainer._pop_action_class",
        "argparse._ActionsContainer._add_action",
        "argparse.ArgumentParser._add_action",
        "argparse.ArgumentParser._get_formatter",
        "argparse._ActionsContainer._registry_get",
        "argparse._ActionsContainer._get_positional_kwargs",
        "<builtin>.ValueError",
        "<builtin>.callable",
        "argparse._ActionsContainer._get_optional_kwargs",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "argparse.ArgumentParser.parse_args": [
        "gettext.gettext",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser.parse_known_args"
    ],
    "<builtin>.vars": [],
    "sshtunnel._cli_main": [
        "sshtunnel._remove_none_values",
        "<builtin>.min",
        "sshtunnel.open_tunnel",
        "sshtunnel._parse_arguments"
    ],
    "<builtin>.min": [],
    "queue.Empty": [],
    "queue.Full": [],
    "queue.Queue": [],
    "queue.Queue._init": [
        "_collections.deque"
    ],
    "threading.Condition.__init__": [
        "_collections.deque",
        "threading.RLock"
    ],
    "queue.Queue.task_done": [
        "<builtin>.ValueError",
        "threading.Condition.notify_all"
    ],
    "threading.Condition.notify_all": [
        "<builtin>.len",
        "threading.Condition.notify"
    ],
    "queue.Queue.join": [
        "threading.Condition.wait"
    ],
    "threading.Condition.wait": [
        "threading.Condition._release_save",
        "threading.Condition._is_owned",
        "<builtin>.RuntimeError",
        "_thread.allocate_lock",
        "threading.Condition._acquire_restore"
    ],
    "queue.Queue.qsize": [
        "queue.Queue._qsize"
    ],
    "queue.Queue._qsize": [
        "<builtin>.len"
    ],
    "queue.Queue.empty": [
        "queue.Queue._qsize"
    ],
    "queue.Queue.full": [
        "queue.Queue._qsize"
    ],
    "time.monotonic": [],
    "queue.Queue._put": [],
    "threading.Condition.notify": [
        "_collections.deque",
        "threading.Condition._is_owned",
        "itertools.islice",
        "<builtin>.RuntimeError"
    ],
    "queue.Queue.get": [
        "threading.Condition.notify",
        "threading.Condition.wait",
        "<builtin>.ValueError",
        "queue.Queue._get",
        "queue.Queue._qsize",
        "time.monotonic"
    ],
    "queue.Queue._get": [],
    "queue.Queue.put_nowait": [
        "queue.Queue.put"
    ],
    "queue.Queue.get_nowait": [
        "queue.Queue.get"
    ],
    "_collections.deque": [],
    "queue.PriorityQueue": [],
    "queue.PriorityQueue._init": [],
    "queue.PriorityQueue._qsize": [
        "<builtin>.len"
    ],
    "queue.PriorityQueue._put": [
        "heapq.heappush"
    ],
    "heapq.heappush": [
        "heapq._siftdown",
        "<builtin>.len"
    ],
    "queue.PriorityQueue._get": [
        "heapq.heappop"
    ],
    "heapq.heappop": [
        "heapq._siftup"
    ],
    "queue.LifoQueue": [],
    "queue.LifoQueue._init": [],
    "queue.LifoQueue._qsize": [
        "<builtin>.len"
    ],
    "queue.LifoQueue._put": [],
    "queue.LifoQueue._get": [],
    "queue._PySimpleQueue": [],
    "queue._PySimpleQueue.__init__": [
        "_collections.deque",
        "threading.Semaphore.__init__"
    ],
    "threading.Semaphore.__init__": [
        "threading.Condition.__init__",
        "_thread.allocate_lock",
        "<builtin>.ValueError"
    ],
    "queue._PySimpleQueue.put": [
        "threading.Semaphore.release"
    ],
    "threading.Semaphore.release": [
        "threading.Condition.notify"
    ],
    "queue._PySimpleQueue.get": [
        "<builtin>.ValueError",
        "threading.Semaphore.acquire"
    ],
    "threading.Semaphore.acquire": [
        "<builtin>.ValueError",
        "time.monotonic",
        "threading.Condition.wait"
    ],
    "queue._PySimpleQueue.put_nowait": [
        "queue._PySimpleQueue.put"
    ],
    "queue._PySimpleQueue.get_nowait": [
        "queue._PySimpleQueue.get"
    ],
    "queue._PySimpleQueue.empty": [
        "<builtin>.len"
    ],
    "queue._PySimpleQueue.qsize": [
        "<builtin>.len"
    ],
    "heapq._siftdown": [],
    "heapq._siftup": [
        "heapq._siftdown",
        "<builtin>.len"
    ],
    "heapq.heapreplace": [
        "heapq._siftup"
    ],
    "heapq.heappushpop": [
        "heapq._siftup"
    ],
    "heapq.heapify": [
        "<builtin>.len",
        "heapq._siftup",
        "<builtin>.range",
        "<builtin>.reversed"
    ],
    "<builtin>.reversed": [],
    "heapq._heappop_max": [
        "heapq._siftup_max"
    ],
    "heapq._siftup_max": [
        "<builtin>.len",
        "heapq._siftdown_max"
    ],
    "heapq._heapreplace_max": [
        "heapq._siftup_max"
    ],
    "heapq._heapify_max": [
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.reversed",
        "heapq._siftup_max"
    ],
    "heapq._siftdown_max": [],
    "heapq.merge": [
        "heapq.heapreplace",
        "heapq._heappop_max",
        "heapq.heappop",
        "<builtin>.map",
        "heapq._heapify_max",
        "heapq.heapify",
        "<builtin>.enumerate",
        "heapq._heapreplace_max",
        "<builtin>.len"
    ],
    "heapq.nsmallest": [
        "<builtin>.iter",
        "<builtin>.object",
        "<builtin>.min",
        "<builtin>.range",
        "<builtin>.zip",
        "heapq._heapify_max",
        "heapq._heapreplace_max",
        "<builtin>.len",
        "<builtin>.sorted"
    ],
    "<builtin>.iter": [],
    "<builtin>.object": [],
    "<builtin>.sorted": [],
    "heapq.nlargest": [
        "<builtin>.max",
        "operator.itemgetter.__init__",
        "<builtin>.iter",
        "<builtin>.object",
        "<builtin>.range",
        "heapq.heapreplace",
        "<builtin>.zip",
        "heapq.heapify",
        "<builtin>.len",
        "<builtin>.sorted"
    ],
    "<builtin>.max": [],
    "operator.itemgetter.__init__": [],
    "doctest.testmod": [
        "doctest.DocTestFinder.__init__",
        "inspect.ismodule",
        "doctest.DocTestRunner.summarize",
        "doctest.DocTestRunner.run",
        "<builtin>.TypeError",
        "doctest.DocTestFinder.find",
        "doctest.DocTestRunner.merge",
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.__init__",
        "sys.modules.get"
    ],
    "<builtin>.print": [],
    "collections.namedtuple": [
        "<builtin>.str",
        "<builtin>.type",
        "<builtin>.isinstance",
        "collections.<lambda1>",
        "<builtin>.reversed",
        "<builtin>.zip",
        "<builtin>.set",
        "<builtin>.TypeError",
        "sys.intern",
        "<builtin>.exec",
        "<builtin>.repr",
        "<builtin>.ValueError",
        "<builtin>.dict",
        "<builtin>.list",
        "_collections._tuplegetter",
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.enumerate",
        "sys._getframe",
        "<builtin>.len"
    ],
    "doctest.register_optionflag": [
        "<builtin>.len"
    ],
    "doctest._extract_future_flags": [
        "<builtin>.getattr"
    ],
    "<builtin>.getattr": [],
    "doctest._normalize_module": [
        "inspect.ismodule",
        "<builtin>.isinstance",
        "<builtin>.__import__",
        "<builtin>.locals",
        "sys._getframe",
        "<builtin>.TypeError",
        "<builtin>.globals"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "<builtin>.globals": [],
    "<builtin>.locals": [],
    "<builtin>.__import__": [],
    "sys._getframe": [],
    "<builtin>.TypeError": [],
    "doctest._newline_convert": [],
    "doctest._load_testfile": [
        "<builtin>.getattr",
        "doctest._newline_convert",
        "doctest._normalize_module",
        "<builtin>.hasattr",
        "<builtin>.open",
        "doctest._module_relative_path"
    ],
    "doctest._module_relative_path": [
        "posixpath.split",
        "<builtin>.len",
        "inspect.ismodule",
        "ntpath.exists",
        "ntpath.split",
        "sys.base_prefix.split",
        "sys.path.startswith",
        "posixpath.join",
        "sys.executable.startswith",
        "ntpath.join",
        "sys.path.split",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "sys.base_prefix.startswith",
        "sys.executable.split",
        "posixpath.exists",
        "<builtin>.hasattr"
    ],
    "doctest._indent": [
        "re.sub"
    ],
    "re.sub": [
        "re._compile"
    ],
    "doctest._exception_traceback": [
        "traceback.print_exception",
        "_io.StringIO"
    ],
    "_io.StringIO": [],
    "traceback.print_exception": [
        "traceback.TracebackException.format",
        "<builtin>.print",
        "traceback.TracebackException.__init__",
        "<builtin>.type"
    ],
    "doctest._SpoofOut": [],
    "doctest._SpoofOut.getvalue": [
        "_io.StringIO.getvalue"
    ],
    "_io.StringIO.getvalue": [],
    "doctest._SpoofOut.truncate": [
        "io.StringIO.seek",
        "_io.StringIO.truncate"
    ],
    "io.StringIO.seek": [],
    "_io.StringIO.truncate": [],
    "doctest._ellipsis_match": [
        "<builtin>.len"
    ],
    "doctest._comment_line": [],
    "doctest._strip_exception_details": [
        "<builtin>.len"
    ],
    "doctest._OutputRedirectingPdb": [],
    "doctest._OutputRedirectingPdb.__init__": [
        "pdb.Pdb.__init__"
    ],
    "pdb.Pdb.__init__": [],
    "doctest._OutputRedirectingPdb.set_trace": [
        "pdb.Pdb.set_trace",
        "sys._getframe"
    ],
    "pdb.Pdb.set_trace": [],
    "doctest._OutputRedirectingPdb.set_continue": [
        "pdb.Pdb.set_continue"
    ],
    "pdb.Pdb.set_continue": [],
    "doctest._OutputRedirectingPdb.trace_dispatch": [
        "pdb.Pdb.trace_dispatch"
    ],
    "pdb.Pdb.trace_dispatch": [],
    "sys.executable.startswith": [],
    "sys.base_prefix.startswith": [],
    "sys.path.startswith": [],
    "sys.path.split": [],
    "sys.executable.split": [],
    "sys.base_prefix.split": [],
    "posixpath.split": [
        "sys.executable.rfind",
        "sys.base_prefix.rfind",
        "sys.path.rfind",
        "posixpath._get_sep",
        "<builtin>.len"
    ],
    "ntpath.split": [
        "ntpath._get_bothseps",
        "ntpath.splitdrive",
        "<builtin>.len"
    ],
    "doctest.Example": [],
    "doctest.Example.__init__": [],
    "doctest.Example.__eq__": [
        "<builtin>.type"
    ],
    "doctest.Example.__hash__": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "doctest.DocTest": [],
    "doctest.DocTest.__init__": [
        "<builtin>.isinstance"
    ],
    "doctest.DocTest.__repr__": [
        "<builtin>.len"
    ],
    "doctest.DocTest.__eq__": [
        "<builtin>.type"
    ],
    "doctest.DocTest.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTest.__lt__": [
        "<builtin>.id",
        "<builtin>.isinstance"
    ],
    "<builtin>.id": [],
    "doctest.DocTestParser": [
        "re.compile"
    ],
    "re.compile": [
        "re._compile"
    ],
    "doctest.DocTestParser.parse": [
        "doctest.DocTestParser._parse_example",
        "doctest.Example.__init__",
        "<builtin>.len",
        "doctest.DocTestParser._min_indent"
    ],
    "doctest.DocTestParser._min_indent": [
        "<builtin>.len",
        "<builtin>.min"
    ],
    "doctest.DocTestParser._parse_example": [
        "doctest.DocTestParser._find_options",
        "doctest.DocTestParser._check_prefix",
        "re.match",
        "<builtin>.len",
        "doctest.DocTestParser._check_prompt_blank"
    ],
    "doctest.DocTestParser.get_doctest": [
        "doctest.DocTestParser.get_examples",
        "doctest.DocTest.__init__"
    ],
    "doctest.DocTestParser.get_examples": [
        "<builtin>.isinstance",
        "doctest.DocTestParser.parse"
    ],
    "doctest.DocTestParser._check_prompt_blank": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.enumerate"
    ],
    "doctest.DocTestParser._check_prefix": [
        "<builtin>.ValueError",
        "<builtin>.enumerate"
    ],
    "re.match": [
        "re._compile"
    ],
    "doctest.DocTestParser._find_options": [
        "<builtin>.ValueError"
    ],
    "doctest.DocTestFinder": [],
    "doctest.DocTestFinder.__init__": [],
    "doctest.DocTestFinder.find": [
        "<builtin>.getattr",
        "doctest.DocTestFinder._find",
        "inspect.getmodule",
        "inspect.getsourcefile",
        "<builtin>.ValueError",
        "linecache.getlines",
        "inspect.getfile",
        "<builtin>.type"
    ],
    "inspect.getmodule": [
        "<builtin>.getattr",
        "inspect.ismodule",
        "inspect.getabsfile",
        "posixpath.realpath",
        "sys.modules.copy",
        "ntpath.realpath",
        "<builtin>.hasattr",
        "sys.modules.get"
    ],
    "inspect.getsourcefile": [
        "ntpath.exists",
        "<builtin>.getattr",
        "ntpath.splitext",
        "<builtin>.any",
        "inspect.getmodule",
        "inspect.getfile",
        "posixpath.exists",
        "posixpath.splitext"
    ],
    "inspect.getfile": [
        "<builtin>.getattr",
        "inspect.iscode",
        "inspect.ismodule",
        "inspect.isclass",
        "inspect.istraceback",
        "inspect.isfunction",
        "<builtin>.TypeError",
        "inspect.isframe",
        "<builtin>.hasattr",
        "inspect.ismethod",
        "<builtin>.type",
        "sys.modules.get"
    ],
    "linecache.getlines": [
        "<builtin>.len",
        "linecache.updatecache",
        "linecache.clearcache"
    ],
    "doctest.DocTestFinder._find": [
        "inspect.isroutine",
        "<builtin>.getattr",
        "inspect.ismodule",
        "<builtin>.id",
        "inspect.unwrap",
        "inspect.isclass",
        "doctest.DocTestFinder._from_module",
        "<builtin>.isinstance",
        "doctest.DocTestFinder._get_test",
        "doctest.DocTestFinder._find",
        "<builtin>.ValueError",
        "<builtin>.print",
        "<builtin>.type"
    ],
    "doctest.DocTestFinder._from_module": [
        "inspect.isclass",
        "<builtin>.isinstance",
        "inspect.getmodule",
        "inspect.isfunction",
        "inspect.ismethoddescriptor",
        "<builtin>.ValueError",
        "<builtin>.hasattr"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "inspect.isclass",
        "inspect.isfunction",
        "<builtin>.hasattr",
        "inspect.ismethod",
        "<builtin>.type"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "doctest.DocTestFinder._get_test": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "doctest.DocTestParser.get_doctest",
        "doctest.DocTestFinder._find_lineno",
        "<builtin>.str"
    ],
    "inspect.unwrap": [
        "<builtin>.id",
        "sys.getrecursionlimit",
        "<builtin>.ValueError",
        "inspect.unwrap._is_wrapper",
        "<builtin>.len"
    ],
    "inspect.isroutine": [
        "inspect.ismethoddescriptor",
        "inspect.isfunction",
        "inspect.isbuiltin",
        "inspect.ismethod"
    ],
    "doctest.DocTestFinder._find_lineno": [
        "<builtin>.getattr",
        "inspect.iscode",
        "inspect.ismodule",
        "inspect.isclass",
        "<builtin>.range",
        "re.compile",
        "inspect.isfunction",
        "inspect.istraceback",
        "<builtin>.enumerate",
        "<builtin>.len",
        "inspect.isframe",
        "inspect.ismethod"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "doctest.DocTestRunner": [
        "re.compile"
    ],
    "doctest.DocTestRunner.__init__": [
        "_io.StringIO.__init__",
        "io.StringIO.__init__"
    ],
    "_io.StringIO.__init__": [],
    "io.StringIO.__init__": [],
    "doctest.DocTestRunner.report_start": [
        "doctest.DocTestRunner.__init__",
        "doctest._indent",
        "doctest.DocTest.__init__",
        "doctest.SkipDocTestCase.__init__"
    ],
    "doctest.SkipDocTestCase.__init__": [
        "doctest.DocTestCase.__init__"
    ],
    "doctest.DocTestRunner.report_success": [
        "doctest.DocTest.__init__",
        "doctest.DocTestRunner.__init__",
        "doctest.SkipDocTestCase.__init__"
    ],
    "doctest.DocTestRunner.report_failure": [
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestRunner._failure_header",
        "doctest.DocTest.__init__",
        "doctest.SkipDocTestCase.__init__"
    ],
    "doctest.DocTestRunner._failure_header": [
        "doctest._indent"
    ],
    "doctest.DocTestRunner.report_unexpected_exception": [
        "doctest._exception_traceback",
        "doctest.DocTestRunner._failure_header",
        "doctest.SkipDocTestCase.__init__",
        "doctest._indent",
        "doctest.DocTest.__init__",
        "doctest.DocTestRunner.__init__"
    ],
    "doctest.DocTestRunner.__run": [
        "<builtin>.exec",
        "doctest._exception_traceback",
        "doctest.DocTestRunner.report_failure",
        "doctest.DocTestRunner.__record_outcome",
        "doctest.DebugRunner.report_unexpected_exception",
        "doctest.DocTestRunner.report_start",
        "<builtin>.range",
        "<builtin>.compile",
        "sys.exc_info",
        "traceback.format_exception_only",
        "doctest._OutputRedirectingPdb.set_continue",
        "<builtin>.enumerate",
        "doctest._SpoofOut.truncate",
        "doctest.DocTestRunner.report_unexpected_exception",
        "doctest._SpoofOut.getvalue",
        "doctest._strip_exception_details",
        "doctest.DocTestRunner.report_success",
        "doctest.DebugRunner.report_failure"
    ],
    "<builtin>.compile": [],
    "<builtin>.exec": [],
    "traceback.format_exception_only": [
        "<builtin>.list",
        "traceback.TracebackException.format_exception_only",
        "traceback.TracebackException.__init__"
    ],
    "doctest.DebugRunner.report_failure": [
        "doctest.DocTestFailure.__init__"
    ],
    "doctest.DebugRunner.report_unexpected_exception": [
        "doctest.UnexpectedException.__init__"
    ],
    "doctest.DocTestRunner.__record_outcome": [],
    "doctest.DocTestRunner.__patched_linecache_getlines": [
        "linecache.getlines",
        "<builtin>.int"
    ],
    "doctest.DocTestRunner.run": [
        "sys.gettrace",
        "doctest._extract_future_flags",
        "doctest._OutputRedirectingPdb.__init__",
        "doctest.DocTestRunner.__run",
        "sys.settrace",
        "pdb.Pdb.reset"
    ],
    "doctest.DocTestRunner.run.out": [
        "sys.stdout.write",
        "<builtin>.str"
    ],
    "sys.stdout.write": [],
    "sys.gettrace": [],
    "pdb.Pdb.reset": [],
    "sys.settrace": [],
    "doctest.DocTestRunner.summarize": [
        "<builtin>.len",
        "<builtin>.print"
    ],
    "doctest.DocTestRunner.merge": [],
    "doctest.OutputChecker": [],
    "doctest.OutputChecker._toAscii": [
        "<builtin>.str"
    ],
    "doctest.OutputChecker.check_output": [
        "doctest.OutputChecker._toAscii",
        "doctest._ellipsis_match",
        "re.sub",
        "re.escape"
    ],
    "re.escape": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "doctest.OutputChecker._do_a_fancy_diff": [],
    "doctest.OutputChecker.output_difference": [
        "<builtin>.list",
        "re.sub",
        "difflib.unified_diff",
        "doctest.OutputChecker._do_a_fancy_diff",
        "difflib.context_diff",
        "difflib.Differ.__init__",
        "doctest._indent",
        "difflib.Differ.compare"
    ],
    "difflib.unified_diff": [
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.get_grouped_opcodes",
        "difflib._check_types",
        "difflib._format_range_unified"
    ],
    "difflib.context_diff": [
        "<builtin>.any",
        "difflib._format_range_context",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.get_grouped_opcodes",
        "difflib._check_types",
        "<builtin>.dict"
    ],
    "difflib.Differ.__init__": [],
    "difflib.Differ.compare": [
        "difflib.SequenceMatcher.get_opcodes",
        "difflib.Differ._dump",
        "difflib.SequenceMatcher.__init__",
        "<builtin>.ValueError",
        "difflib.Differ._fancy_replace"
    ],
    "doctest.DocTestFailure": [],
    "doctest.DocTestFailure.__init__": [],
    "doctest.DocTestFailure.__str__": [
        "<builtin>.str"
    ],
    "doctest.UnexpectedException": [],
    "doctest.UnexpectedException.__init__": [],
    "doctest.UnexpectedException.__str__": [
        "<builtin>.str"
    ],
    "doctest.DebugRunner": [],
    "doctest.DebugRunner.run": [
        "doctest.DocTestRunner.run",
        "doctest.DebugRunner.run"
    ],
    "sys.modules.get": [],
    "doctest.testfile": [
        "posixpath.basename",
        "doctest.DocTestRunner.summarize",
        "doctest.DocTestRunner.run",
        "ntpath.basename",
        "doctest.DocTestParser.get_doctest",
        "doctest._load_testfile",
        "<builtin>.ValueError",
        "doctest.DocTestRunner.merge",
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.__init__"
    ],
    "posixpath.basename": [
        "sys.executable.rfind",
        "sys.base_prefix.rfind",
        "sys.stdin.buffer.rfind",
        "sys.path.rfind",
        "posixpath._get_sep"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "doctest.run_docstring_examples": [
        "doctest.DocTestFinder.__init__",
        "doctest.DocTestRunner.run",
        "doctest.DocTestFinder.find",
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.__init__"
    ],
    "doctest.set_unittest_reportflags": [
        "<builtin>.ValueError"
    ],
    "doctest.DocTestCase": [],
    "doctest.DocTestCase.__init__": [
        "unittest.case.TestCase.__init__"
    ],
    "unittest.case.TestCase.__init__": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "unittest.case.TestCase.addTypeEqualityFunc"
    ],
    "doctest.DocTestCase.setUp": [],
    "doctest.DocTestCase.tearDown": [],
    "doctest.DocTestCase.runTest": [
        "doctest.DocFileCase.format_failure",
        "doctest.DocTestRunner.run",
        "_io.StringIO",
        "doctest.DocTestCase.format_failure",
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.__init__"
    ],
    "doctest.DocFileCase.format_failure": [],
    "doctest.DocTestCase.format_failure": [],
    "doctest.DocTestCase.debug": [
        "doctest.DocTestCase.tearDown",
        "doctest.DocTestCase.setUp",
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.__init__"
    ],
    "doctest.DocTestCase.id": [],
    "doctest.DocTestCase.__eq__": [
        "<builtin>.type"
    ],
    "doctest.DocTestCase.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTestCase.__repr__": [],
    "doctest.DocTestCase.shortDescription": [],
    "doctest.SkipDocTestCase": [],
    "doctest.SkipDocTestCase.setUp": [
        "unittest.case.TestCase.skipTest"
    ],
    "unittest.case.TestCase.skipTest": [],
    "doctest.SkipDocTestCase.test_skip": [],
    "doctest.SkipDocTestCase.shortDescription": [],
    "doctest._DocTestSuite": [],
    "doctest._DocTestSuite._removeTestAtIndex": [],
    "doctest.DocTestSuite": [
        "doctest.DocTestFinder.__init__",
        "doctest._normalize_module",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTestCase.__init__",
        "<builtin>.len",
        "doctest.DocTestFinder.find"
    ],
    "doctest.DocFileCase": [],
    "doctest.DocFileCase.id": [],
    "doctest.DocFileCase.__repr__": [],
    "doctest.DocFileTest": [
        "posixpath.basename",
        "doctest.DocTestParser.get_doctest",
        "ntpath.basename",
        "doctest._load_testfile",
        "<builtin>.ValueError",
        "doctest.DocTestCase.__init__"
    ],
    "doctest.DocFileSuite": [
        "doctest._normalize_module",
        "doctest.DocFileTest"
    ],
    "doctest.script_from_examples": [
        "doctest._comment_line",
        "<builtin>.isinstance",
        "doctest.DocTestParser.parse"
    ],
    "doctest.testsource": [
        "doctest.DocTestFinder.__init__",
        "doctest._normalize_module",
        "<builtin>.ValueError",
        "doctest.script_from_examples",
        "doctest.DocTestFinder.find"
    ],
    "doctest.debug_src": [
        "doctest.script_from_examples",
        "doctest.debug_script"
    ],
    "doctest.debug_script": [
        "sys.exc_info",
        "<builtin>.exec",
        "<builtin>.print",
        "pdb.Pdb"
    ],
    "pdb.Pdb": [],
    "doctest.debug": [
        "doctest._normalize_module",
        "doctest.testsource",
        "doctest.debug_script"
    ],
    "doctest._TestClass": [],
    "doctest._TestClass.__init__": [],
    "doctest._TestClass.square": [],
    "doctest._TestClass.get": [],
    "sys.path.insert": [],
    "sys.exit": [],
    "unittest.main._convert_name": [
        "sys.base_prefix.lower",
        "sys.path.startswith",
        "ntpath.isfile",
        "posixpath.relpath",
        "sys.executable.startswith",
        "posixpath.isfile",
        "ntpath.relpath",
        "ntpath.isabs",
        "sys.base_prefix.startswith",
        "sys.path.lower",
        "sys.executable.lower",
        "posixpath.isabs"
    ],
    "sys.executable.lower": [],
    "sys.base_prefix.lower": [],
    "sys.path.lower": [],
    "posixpath.isabs": [
        "sys.executable.startswith",
        "sys.base_prefix.startswith",
        "posixpath._get_sep",
        "sys.path.startswith"
    ],
    "ntpath.isabs": [
        "<builtin>.len",
        "ntpath._get_bothseps",
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "sys.base_prefix.replace",
        "sys.executable.replace",
        "sys.path.replace"
    ],
    "posixpath.relpath": [
        "posixpath.abspath",
        "<builtin>.isinstance",
        "posixpath.join",
        "<builtin>.ValueError",
        "genericpath._check_arg_types",
        "genericpath.commonprefix",
        "<builtin>.len"
    ],
    "ntpath.relpath": [
        "ntpath.normpath",
        "ntpath.splitdrive",
        "ntpath._abspath_fallback",
        "<builtin>.isinstance",
        "ntpath.join",
        "<builtin>.zip",
        "ntpath.normcase",
        "<builtin>.ValueError",
        "genericpath._check_arg_types",
        "<builtin>.len"
    ],
    "unittest.main._convert_names": [
        "unittest.main._convert_name"
    ],
    "unittest.main._convert_select_pattern": [],
    "unittest.main.TestProgram": [],
    "unittest.main.TestProgram.__init__": [
        "<builtin>.getattr",
        "posixpath.basename",
        "unittest.main.TestProgram.runTests",
        "<builtin>.isinstance",
        "ntpath.basename",
        "<builtin>.__import__",
        "unittest.main.TestProgram.parseArgs"
    ],
    "unittest.main.TestProgram.parseArgs": [
        "unittest.main.TestProgram._do_discovery",
        "<builtin>.list",
        "unittest.main.TestProgram._initArgParsers",
        "unittest.main._convert_names",
        "<builtin>.isinstance",
        "unittest.main.TestProgram.createTests",
        "<builtin>.len",
        "argparse.ArgumentParser.parse_args"
    ],
    "unittest.main.TestProgram.runTests": [
        "<builtin>.isinstance",
        "sys.exit",
        "unittest.runner.TextTestRunner.run",
        "unittest.runner.TextTestRunner.__init__",
        "unittest.signals.installHandler"
    ],
    "unittest.main.TestProgram.usageExit": [
        "sys.exit",
        "<builtin>.print",
        "unittest.main.TestProgram._initArgParsers",
        "unittest.main.TestProgram._print_help"
    ],
    "unittest.main.TestProgram._initArgParsers": [
        "unittest.main.TestProgram._getDiscoveryArgParser",
        "unittest.main.TestProgram._getParentArgParser",
        "unittest.main.TestProgram._getMainArgParser"
    ],
    "unittest.main.TestProgram._print_help": [
        "argparse.ArgumentParser.format_help",
        "<builtin>.print",
        "argparse.ArgumentParser.print_help"
    ],
    "argparse.ArgumentParser.format_help": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "argparse.ArgumentParser.print_help": [
        "argparse.ArgumentParser.format_help",
        "argparse.ArgumentParser._print_message"
    ],
    "unittest.main.TestProgram._do_discovery": [
        "unittest.main.TestProgram.createTests",
        "argparse.ArgumentParser.parse_args",
        "unittest.main.TestProgram._initArgParsers"
    ],
    "unittest.main.TestProgram.createTests": [],
    "unittest.main.TestProgram._getParentArgParser": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument"
    ],
    "unittest.main.TestProgram._getMainArgParser": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument"
    ],
    "unittest.main.TestProgram._getDiscoveryArgParser": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument"
    ],
    "unittest.signals.installHandler": [
        "unittest.signals._InterruptHandler.__init__"
    ],
    "unittest.runner.TextTestRunner.__init__": [
        "unittest.runner._WritelnDecorator.__init__"
    ],
    "unittest.runner.TextTestRunner.run": [
        "<builtin>.getattr",
        "unittest.result.TestResult.wasSuccessful",
        "unittest.runner.TextTestRunner._makeResult",
        "time.perf_counter",
        "unittest.signals.registerResult",
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.hasattr",
        "unittest.runner.TextTestResult.printErrors"
    ],
    "argparse._AttributeHolder": [],
    "argparse._AttributeHolder.__repr__": [
        "argparse.ArgumentParser._get_kwargs",
        "argparse._AttributeHolder._get_args",
        "<builtin>.repr",
        "argparse._AttributeHolder._get_kwargs"
    ],
    "argparse._AttributeHolder._get_args": [],
    "argparse.ArgumentParser._get_kwargs": [
        "<builtin>.getattr"
    ],
    "argparse._AttributeHolder._get_kwargs": [
        "<builtin>.sorted"
    ],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter.__init__": [
        "argparse.HelpFormatter._Section.__init__",
        "<builtin>.max",
        "shutil.get_terminal_size",
        "<builtin>.min",
        "re.compile"
    ],
    "shutil.get_terminal_size": [
        "sys.__stdout__.fileno",
        "<builtin>.int"
    ],
    "argparse.HelpFormatter._Section.__init__": [],
    "argparse.HelpFormatter._indent": [],
    "argparse.HelpFormatter._dedent": [],
    "argparse.HelpFormatter._Section": [],
    "argparse.HelpFormatter._Section.format_help": [
        "argparse.HelpFormatter._dedent",
        "argparse.HelpFormatter._indent"
    ],
    "argparse.HelpFormatter._add_item": [],
    "argparse.HelpFormatter.start_section": [
        "argparse.HelpFormatter._add_item",
        "argparse.HelpFormatter._Section.__init__",
        "argparse.HelpFormatter._indent"
    ],
    "argparse.HelpFormatter.end_section": [
        "argparse.HelpFormatter._dedent"
    ],
    "argparse.HelpFormatter.add_text": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.add_usage": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.add_argument": [
        "<builtin>.max",
        "argparse.HelpFormatter._format_action_invocation",
        "argparse.HelpFormatter._add_item",
        "argparse.HelpFormatter._iter_indented_subactions",
        "<builtin>.len"
    ],
    "argparse.HelpFormatter._format_action_invocation": [
        "argparse.HelpFormatter._format_args",
        "argparse.HelpFormatter._get_default_metavar_for_positional",
        "argparse.HelpFormatter._metavar_formatter.format",
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "argparse.HelpFormatter._metavar_formatter"
    ],
    "argparse.HelpFormatter._iter_indented_subactions": [
        "argparse.HelpFormatter._dedent",
        "argparse.HelpFormatter._indent"
    ],
    "argparse.HelpFormatter.add_arguments": [
        "argparse.HelpFormatter.add_argument"
    ],
    "argparse.HelpFormatter.format_help": [
        "argparse.HelpFormatter._Section.format_help"
    ],
    "argparse.HelpFormatter._join_parts": [],
    "argparse.HelpFormatter._format_usage": [
        "<builtin>.len",
        "argparse.HelpFormatter._format_usage.get_lines",
        "argparse.HelpFormatter._format_actions_usage",
        "re.findall",
        "<builtin>.dict",
        "gettext.gettext"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "argparse.HelpFormatter._format_actions_usage": [
        "argparse.HelpFormatter._format_args",
        "argparse.HelpFormatter._get_default_metavar_for_positional",
        "re.sub",
        "<builtin>.range",
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "<builtin>.set",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.sorted"
    ],
    "re.findall": [
        "re._compile"
    ],
    "argparse.HelpFormatter._format_usage.get_lines": [
        "<builtin>.len"
    ],
    "<builtin>.set": [],
    "argparse.HelpFormatter._get_default_metavar_for_positional": [],
    "argparse.HelpFormatter._format_args": [
        "<builtin>.range",
        "<builtin>.ValueError",
        "argparse.HelpFormatter._metavar_formatter",
        "argparse.HelpFormatter._metavar_formatter.format"
    ],
    "argparse.HelpFormatter._get_default_metavar_for_optional": [],
    "argparse.HelpFormatter._format_text": [
        "<builtin>.dict",
        "argparse.HelpFormatter._fill_text",
        "<builtin>.max"
    ],
    "argparse.HelpFormatter._format_action": [
        "argparse.HelpFormatter._format_action",
        "<builtin>.max",
        "argparse.HelpFormatter._split_lines",
        "<builtin>.min",
        "argparse.HelpFormatter._expand_help",
        "argparse.HelpFormatter._format_action_invocation",
        "argparse.HelpFormatter._join_parts",
        "argparse.HelpFormatter._iter_indented_subactions",
        "<builtin>.len"
    ],
    "argparse.HelpFormatter._expand_help": [
        "argparse.HelpFormatter._get_help_string",
        "<builtin>.list",
        "<builtin>.vars",
        "<builtin>.str",
        "<builtin>.dict",
        "<builtin>.hasattr"
    ],
    "argparse.HelpFormatter._metavar_formatter": [
        "<builtin>.str"
    ],
    "argparse.HelpFormatter._metavar_formatter.format": [
        "<builtin>.isinstance"
    ],
    "argparse.HelpFormatter._get_help_string": [],
    "textwrap.wrap": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.wrap"
    ],
    "textwrap.fill": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.fill"
    ],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawDescriptionHelpFormatter._fill_text": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.RawTextHelpFormatter._split_lines": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter._get_help_string": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter._get_default_metavar_for_optional": [],
    "argparse.MetavarTypeHelpFormatter._get_default_metavar_for_positional": [],
    "argparse._get_action_name": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse.ArgumentError.__str__": [
        "<builtin>.dict"
    ],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse.Action.__init__": [],
    "argparse.Action._get_kwargs": [
        "<builtin>.getattr"
    ],
    "argparse.Action.__call__": [
        "<builtin>.NotImplementedError",
        "gettext.gettext"
    ],
    "<builtin>.NotImplementedError": [],
    "argparse._StoreAction": [],
    "argparse._StoreAction.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "<builtin>.super": [],
    "argparse._StoreAction.__call__": [
        "<builtin>.setattr"
    ],
    "<builtin>.setattr": [],
    "argparse._StoreConstAction": [],
    "argparse._StoreConstAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._StoreConstAction.__call__": [
        "<builtin>.setattr"
    ],
    "argparse._StoreTrueAction": [],
    "argparse._StoreTrueAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._StoreFalseAction": [],
    "argparse._StoreFalseAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._AppendAction": [],
    "argparse._AppendAction.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "argparse._AppendAction.__call__": [
        "<builtin>.getattr",
        "argparse._copy_items",
        "<builtin>.setattr"
    ],
    "argparse._AppendConstAction": [],
    "argparse._AppendConstAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._AppendConstAction.__call__": [
        "<builtin>.getattr",
        "argparse._copy_items",
        "<builtin>.setattr"
    ],
    "argparse._CountAction": [],
    "argparse._CountAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._CountAction.__call__": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "argparse._HelpAction": [],
    "argparse._HelpAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._HelpAction.__call__": [],
    "argparse._VersionAction": [],
    "argparse._VersionAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._VersionAction.__call__": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._SubParsersAction._ChoicesPseudoAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction.add_parser": [
        "argparse._SubParsersAction._ChoicesPseudoAction.__init__"
    ],
    "argparse._SubParsersAction._get_subactions": [],
    "argparse._SubParsersAction.__call__": [
        "<builtin>.getattr",
        "<builtin>.vars",
        "<builtin>.setattr",
        "argparse.ArgumentError.__init__",
        "gettext.gettext"
    ],
    "argparse._ExtendAction": [],
    "argparse._ExtendAction.__call__": [
        "<builtin>.getattr",
        "argparse._copy_items",
        "<builtin>.setattr"
    ],
    "argparse.FileType": [],
    "argparse.FileType.__init__": [],
    "argparse.FileType.__call__": [
        "<builtin>.open",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse.FileType.__repr__": [
        "<builtin>.repr",
        "<builtin>.type"
    ],
    "argparse.Namespace": [],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse.Namespace.__eq__": [
        "<builtin>.vars",
        "<builtin>.isinstance"
    ],
    "argparse.Namespace.__contains__": [],
    "argparse._ActionsContainer": [],
    "argparse._ActionsContainer.__init__": [
        "re.compile",
        "argparse._ActionsContainer.register",
        "<builtin>.super",
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer.register": [],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "argparse._ActionsContainer.set_defaults": [],
    "argparse._ActionsContainer.get_default": [],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "gettext.gettext",
        "<builtin>.TypeError"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.dict",
        "<builtin>.len",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "<builtin>.callable": [],
    "argparse.ArgumentParser._get_formatter": [
        "argparse.HelpFormatter.__init__"
    ],
    "argparse.ArgumentParser._add_action": [],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer._remove_action": [],
    "argparse._ActionsContainer._add_container_actions": [
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "argparse._ActionsContainer.add_argument_group",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._handle_conflict_error": [
        "gettext.ngettext",
        "<builtin>.len",
        "argparse.ArgumentError.__init__"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "argparse._ActionsContainer._handle_conflict_resolve": [],
    "argparse._ArgumentGroup": [],
    "argparse._ArgumentGroup._add_action": [
        "<builtin>.super"
    ],
    "argparse._ArgumentGroup._remove_action": [
        "<builtin>.super"
    ],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse._MutuallyExclusiveGroup._add_action": [
        "argparse.ArgumentParser._add_action",
        "argparse._ActionsContainer._add_action",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._MutuallyExclusiveGroup._remove_action": [
        "argparse._ActionsContainer._remove_action"
    ],
    "argparse.ArgumentParser": [],
    "argparse.ArgumentParser.__init__.identity": [],
    "argparse.ArgumentParser.add_subparsers": [
        "argparse._ActionsContainer._pop_action_class",
        "argparse.ArgumentParser._get_formatter",
        "argparse._ActionsContainer.add_argument_group",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_positional_actions",
        "gettext.gettext",
        "<builtin>.type",
        "argparse._ArgumentGroup._add_action"
    ],
    "argparse.ArgumentParser.error": [
        "argparse.ArgumentParser.print_usage",
        "gettext.gettext",
        "argparse.ArgumentParser.exit"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._get_optional_actions": [],
    "argparse.ArgumentParser.parse_known_args": [
        "<builtin>.getattr",
        "<builtin>.list",
        "argparse.Namespace.__init__",
        "argparse.ArgumentParser._parse_known_args",
        "sys.exc_info",
        "<builtin>.setattr",
        "argparse.ArgumentParser.error",
        "<builtin>.str",
        "<builtin>.delattr",
        "<builtin>.hasattr"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.getattr",
        "argparse.ArgumentParser._parse_optional",
        "<builtin>.max",
        "<builtin>.isinstance",
        "<builtin>.iter",
        "<builtin>.min",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "<builtin>.set",
        "argparse.ArgumentParser._get_positional_actions",
        "<builtin>.setattr",
        "<builtin>.enumerate",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_value",
        "argparse._get_action_name",
        "<builtin>.hasattr",
        "gettext.gettext"
    ],
    "<builtin>.delattr": [],
    "argparse.ArgumentParser._read_args_from_files": [
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.open",
        "sys.exc_info",
        "argparse.ArgumentParser.error",
        "<builtin>.str",
        "argparse.ArgumentParser.convert_arg_line_to_args"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "<builtin>.len",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_option_tuples",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse._get_action_name",
        "argparse.ArgumentParser._get_values",
        "gettext.gettext",
        "argparse.ArgumentError.__init__"
    ],
    "argparse.ArgumentParser._get_values": [
        "argparse.ArgumentParser._get_value",
        "<builtin>.len",
        "<builtin>.isinstance",
        "argparse.ArgumentParser._check_value"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "argparse.ArgumentParser._match_argument",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "gettext.gettext",
        "argparse.ArgumentError.__init__"
    ],
    "argparse.ArgumentParser._match_argument": [
        "argparse.ArgumentParser._get_nargs_pattern",
        "re.match",
        "gettext.ngettext",
        "gettext.gettext",
        "<builtin>.len",
        "argparse.ArgumentError.__init__"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "<builtin>.len",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "argparse.ArgumentParser._match_arguments_partial",
        "<builtin>.zip"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "<builtin>.len",
        "<builtin>.range",
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern"
    ],
    "argparse.ArgumentParser._get_value": [
        "<builtin>.getattr",
        "<builtin>.repr",
        "argparse._ActionsContainer._registry_get",
        "gettext.gettext",
        "sys.exc_info",
        "<builtin>.str",
        "<builtin>.callable",
        "argparse.ArgumentError.__init__"
    ],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "argparse.ArgumentParser._get_nargs_pattern": [],
    "argparse.ArgumentParser._get_option_tuples": [
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_intermixed_args": [
        "argparse.ArgumentParser.parse_known_intermixed_args",
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "_warnings.warn": [],
    "argparse.ArgumentParser._check_value": [
        "<builtin>.map",
        "gettext.gettext",
        "argparse.ArgumentError.__init__"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser.format_usage",
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser._print_message": [
        "sys.stderr.write",
        "sys.stdout.write"
    ],
    "sys.stderr.write": [],
    "argparse.ArgumentParser.exit": [
        "sys.exit",
        "argparse.ArgumentParser._print_message"
    ],
    "copy.Error": [],
    "copy.copy": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "copy._copy_immutable",
        "copy._reconstruct",
        "<builtin>.issubclass",
        "<builtin>.type"
    ],
    "<builtin>.issubclass": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.id",
        "<builtin>.isinstance",
        "copy.deepcopy",
        "<builtin>.setattr",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "copy.deepcopy": [
        "<builtin>.getattr",
        "<builtin>.id",
        "<builtin>.isinstance",
        "copy._keep_alive",
        "copy._reconstruct",
        "<builtin>.issubclass",
        "<builtin>.type",
        "copy._deepcopy_atomic"
    ],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "copy._deepcopy_list": [
        "<builtin>.id",
        "copy.deepcopy"
    ],
    "copy._deepcopy_tuple": [
        "<builtin>.id",
        "copy.deepcopy",
        "<builtin>.tuple",
        "<builtin>.zip"
    ],
    "<builtin>.tuple": [],
    "copy._deepcopy_dict": [
        "<builtin>.id",
        "copy.deepcopy"
    ],
    "copy._deepcopy_method": [
        "copy.deepcopy",
        "email.message.Message.__init__",
        "<builtin>.type"
    ],
    "email.message.Message.__init__": [],
    "types._f": [],
    "types.<lambda1>": [],
    "types._cell_factory": [],
    "types._cell_factory.f": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "types._C._m": [],
    "types.new_class": [
        "types.resolve_bases",
        "types.prepare_class"
    ],
    "types.resolve_bases": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "types.prepare_class": [
        "types._calculate_meta",
        "<builtin>.isinstance",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "types._calculate_meta": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.issubclass"
    ],
    "types.DynamicClassAttribute": [],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.bool": [],
    "types.DynamicClassAttribute.__get__": [
        "<builtin>.AttributeError"
    ],
    "<builtin>.AttributeError": [],
    "types.DynamicClassAttribute.__set__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.__delete__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.getter": [
        "<builtin>.type"
    ],
    "types.DynamicClassAttribute.setter": [
        "<builtin>.type"
    ],
    "types.DynamicClassAttribute.deleter": [
        "<builtin>.type"
    ],
    "types._GeneratorWrapper": [],
    "types._GeneratorWrapper.__init__": [
        "<builtin>.getattr"
    ],
    "types._GeneratorWrapper.send": [],
    "types._GeneratorWrapper.throw": [],
    "types._GeneratorWrapper.close": [],
    "types._GeneratorWrapper.gi_code": [],
    "types._GeneratorWrapper.gi_frame": [],
    "types._GeneratorWrapper.gi_running": [],
    "types._GeneratorWrapper.gi_yieldfrom": [],
    "types._GeneratorWrapper.__next__": [
        "<builtin>.next"
    ],
    "<builtin>.next": [],
    "types._GeneratorWrapper.__iter__": [],
    "functools.wraps": [
        "_functools.partial"
    ],
    "_functools.partial": [],
    "types.coroutine.wrapped": [
        "types._GeneratorWrapper.__init__",
        "<builtin>.isinstance"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "functools._gt_from_lt": [],
    "functools._le_from_lt": [],
    "functools._ge_from_lt": [],
    "functools._ge_from_le": [],
    "functools._lt_from_le": [],
    "functools._gt_from_le": [],
    "functools._lt_from_gt": [],
    "functools._ge_from_gt": [],
    "functools._le_from_gt": [],
    "functools._le_from_ge": [],
    "functools._gt_from_ge": [],
    "functools._lt_from_ge": [],
    "functools.total_ordering": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.ValueError",
        "<builtin>.max"
    ],
    "functools.cmp_to_key": [
        "functools.cmp_to_key.K"
    ],
    "functools.cmp_to_key.K": [],
    "functools.cmp_to_key.K.__init__": [],
    "functools.cmp_to_key.K.__lt__": [],
    "functools.cmp_to_key.K.__gt__": [],
    "functools.cmp_to_key.K.__eq__": [],
    "functools.cmp_to_key.K.__le__": [],
    "functools.cmp_to_key.K.__ge__": [],
    "functools.reduce": [
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.TypeError"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partial.__new__": [
        "<builtin>.callable",
        "<builtin>.super",
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "functools.partial.__call__": [],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "functools.partial.__repr__": [
        "_functools.partial.keywords.items",
        "<builtin>.repr",
        "<builtin>.type"
    ],
    "_functools.partial.keywords.items": [],
    "functools.partial.__reduce__": [
        "<builtin>.type"
    ],
    "functools.partial.__setstate__": [
        "<builtin>.isinstance",
        "<builtin>.dict",
        "<builtin>.tuple",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "functools.partialmethod": [],
    "functools.partialmethod.__repr__": [
        "<builtin>.map"
    ],
    "functools.partialmethod._make_unbound_method": [],
    "functools.partialmethod._make_unbound_method._method": [],
    "functools.partialmethod.__get__": [
        "<builtin>.getattr",
        "functools.partialmethod._make_unbound_method",
        "_functools.partial"
    ],
    "functools.partialmethod.__isabstractmethod__": [
        "<builtin>.getattr"
    ],
    "functools._unwrap_partial": [
        "<builtin>.isinstance"
    ],
    "functools._HashedSeq": [],
    "functools._HashedSeq.__init__": [],
    "functools._HashedSeq.__hash__": [],
    "functools._make_key": [
        "functools._HashedSeq.__init__"
    ],
    "functools.lru_cache": [
        "<builtin>.isinstance",
        "_functools._lru_cache_wrapper",
        "functools.update_wrapper",
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "_functools._lru_cache_wrapper": [],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "_functools._lru_cache_wrapper"
    ],
    "functools._lru_cache_wrapper": [
        "<builtin>.object",
        "_thread.RLock"
    ],
    "_thread.RLock": [],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key"
    ],
    "functools._lru_cache_wrapper.cache_info": [],
    "functools._lru_cache_wrapper.cache_clear": [],
    "functools._c3_merge": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "functools._c3_mro": [
        "<builtin>.list",
        "<builtin>.any",
        "functools._c3_mro",
        "<builtin>.reversed",
        "functools._c3_merge",
        "<builtin>.enumerate",
        "<builtin>.issubclass",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "functools._compose_mro": [
        "functools._c3_mro",
        "<builtin>.set",
        "functools._compose_mro.is_related",
        "<builtin>.issubclass",
        "functools._compose_mro.is_strict_base"
    ],
    "functools._compose_mro.is_related": [
        "<builtin>.hasattr",
        "<builtin>.issubclass"
    ],
    "functools._compose_mro.is_strict_base": [],
    "functools._find_impl": [
        "functools._compose_mro",
        "<builtin>.RuntimeError",
        "<builtin>.issubclass"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.set",
        "_weakrefset.WeakSet.update"
    ],
    "functools.singledispatch.dispatch": [
        "collections.ChainMap.clear",
        "functools._find_impl",
        "_collections_abc.MutableMapping.clear",
        "_py_abc.get_cache_token",
        "_abc.get_cache_token"
    ],
    "_py_abc.get_cache_token": [],
    "_abc.get_cache_token": [],
    "collections.ChainMap.clear": [],
    "_collections_abc.MutableMapping.clear": [
        "weakref.WeakKeyDictionary.popitem",
        "collections.ChainMap.popitem",
        "weakref.WeakValueDictionary.popitem",
        "_collections_abc.MutableMapping.popitem"
    ],
    "functools.singledispatch.register.<lambda1>": [
        "functools.singledispatch.register"
    ],
    "typing.get_type_hints": [
        "<builtin>.getattr",
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "typing._get_defaults",
        "<builtin>.reversed",
        "typing._eval_type",
        "<builtin>.TypeError",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "functools.singledispatch.wrapper": [
        "functools.singledispatch.dispatch",
        "<builtin>.TypeError"
    ],
    "functools.singledispatchmethod": [],
    "functools.singledispatchmethod.__init__": [
        "<builtin>.callable",
        "functools.singledispatch",
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "functools.singledispatchmethod.register": [],
    "functools.singledispatchmethod.__get__": [
        "functools.update_wrapper"
    ],
    "functools.singledispatchmethod.__get__._method": [],
    "functools.singledispatchmethod.__isabstractmethod__": [
        "<builtin>.getattr"
    ],
    "functools.cached_property": [],
    "functools.cached_property.__init__": [
        "_thread.RLock"
    ],
    "functools.cached_property.__set_name__": [
        "<builtin>.TypeError"
    ],
    "functools.cached_property.__get__": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "abc.abstractmethod": [],
    "abc.abstractclassmethod": [],
    "abc.abstractclassmethod.__init__": [
        "<builtin>.super"
    ],
    "abc.abstractstaticmethod": [],
    "abc.abstractstaticmethod.__init__": [
        "<builtin>.super"
    ],
    "abc.abstractproperty": [],
    "abc.ABCMeta": [],
    "abc.ABCMeta.__new__": [
        "_abc._abc_init",
        "<builtin>.super"
    ],
    "_abc._abc_init": [],
    "abc.ABCMeta.register": [
        "_abc._abc_register"
    ],
    "_abc._abc_register": [],
    "abc.ABCMeta.__instancecheck__": [
        "_abc._abc_instancecheck"
    ],
    "_abc._abc_instancecheck": [],
    "abc.ABCMeta.__subclasscheck__": [
        "_abc._abc_subclasscheck"
    ],
    "_abc._abc_subclasscheck": [],
    "abc.ABCMeta._dump_registry": [
        "<builtin>.print",
        "_abc._get_dump",
        "_py_abc.get_cache_token",
        "_abc.get_cache_token"
    ],
    "_abc._get_dump": [],
    "abc.ABCMeta._abc_registry_clear": [
        "_abc._reset_registry"
    ],
    "_abc._reset_registry": [],
    "abc.ABCMeta._abc_caches_clear": [
        "_abc._reset_caches"
    ],
    "_abc._reset_caches": [],
    "abc.ABC": [],
    "_py_abc.ABCMeta": [],
    "_py_abc.ABCMeta.__new__": [
        "<builtin>.getattr",
        "<builtin>.frozenset",
        "<builtin>.set",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.super"
    ],
    "<builtin>.frozenset": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "<builtin>.set",
        "weakref.WeakKeyDictionary.update",
        "weakref.WeakValueDictionary.update"
    ],
    "_py_abc.ABCMeta.register": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.TypeError"
    ],
    "_py_abc.ABCMeta._dump_registry": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.set",
        "_py_abc.get_cache_token",
        "<builtin>.print"
    ],
    "_py_abc.ABCMeta._abc_registry_clear": [],
    "_py_abc.ABCMeta._abc_caches_clear": [
        "_weakrefset.WeakSet.clear"
    ],
    "_weakrefset.WeakSet.clear": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_py_abc.ABCMeta.__instancecheck__": [
        "<builtin>.any",
        "_py_abc.ABCMeta.__subclasscheck__",
        "<builtin>.type"
    ],
    "_py_abc.ABCMeta.__subclasscheck__": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "_weakrefset.WeakSet.add",
        "<builtin>.TypeError",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.issubclass"
    ],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset._IterationGuard.__init__": [
        "_weakref.ref"
    ],
    "_weakref.ref": [],
    "_weakrefset._IterationGuard.__enter__": [],
    "_weakrefset._IterationGuard.__exit__": [],
    "_weakrefset.WeakSet": [],
    "_weakrefset.WeakSet.__init__._remove": [],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "weakref.WeakKeyDictionary.update": [
        "_weakref.ref",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.dict",
        "weakref.KeyedRef.__init__",
        "<builtin>.hasattr"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.__iter__": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "_weakrefset.WeakSet.__len__": [
        "<builtin>.len"
    ],
    "_weakrefset.WeakSet.__contains__": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__reduce__": [
        "<builtin>.getattr",
        "<builtin>.list"
    ],
    "_weakrefset.WeakSet.copy": [],
    "_weakrefset.WeakSet.pop": [
        "_weakrefset.WeakSet._commit_removals",
        "<builtin>.KeyError"
    ],
    "<builtin>.KeyError": [],
    "_weakrefset.WeakSet.remove": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.discard": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__ior__": [
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.difference": [
        "_weakrefset.WeakSet.copy"
    ],
    "_weakrefset.WeakSet.difference_update": [
        "_weakrefset.WeakSet.__isub__"
    ],
    "_weakrefset.WeakSet.__isub__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.intersection": [],
    "_weakrefset.WeakSet.intersection_update": [
        "_weakrefset.WeakSet.__iand__"
    ],
    "_weakrefset.WeakSet.__iand__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.issubset": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__lt__": [
        "<builtin>.map",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.issuperset": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__gt__": [
        "<builtin>.map",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.__eq__": [
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "_weakrefset.WeakSet.symmetric_difference": [
        "_weakrefset.WeakSet.copy"
    ],
    "_weakrefset.WeakSet.symmetric_difference_update": [
        "_weakrefset.WeakSet.__ixor__"
    ],
    "_weakrefset.WeakSet.__ixor__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.union": [],
    "_weakrefset.WeakSet.isdisjoint": [
        "_weakrefset.WeakSet.intersection",
        "<builtin>.len"
    ],
    "_weakrefset.WeakSet.__repr__": [
        "<builtin>.repr"
    ],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictKeysView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictItemsView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._OrderedDictValuesView": [],
    "collections._OrderedDictValuesView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._Link": [],
    "collections.OrderedDict": [
        "reprlib.recursive_repr",
        "<builtin>.object",
        "reprlib.recursive_repr.decorating_function"
    ],
    "collections.OrderedDict.__init__": [
        "_weakref.proxy"
    ],
    "_weakref.proxy": [],
    "collections.OrderedDict.__setitem__": [
        "_weakref.proxy"
    ],
    "collections.OrderedDict.__delitem__": [
        "_collections.OrderedDict.__map.pop"
    ],
    "_collections.OrderedDict.__map.pop": [],
    "collections.OrderedDict.__iter__": [],
    "collections.OrderedDict.__reversed__": [],
    "collections.OrderedDict.clear": [
        "_collections.OrderedDict.__map.clear"
    ],
    "_collections.OrderedDict.__map.clear": [],
    "collections.OrderedDict.popitem": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.__sizeof__": [
        "sys.getsizeof",
        "<builtin>.len"
    ],
    "sys.getsizeof": [],
    "collections.OrderedDict.keys": [],
    "collections.OrderedDict.items": [],
    "collections.OrderedDict.values": [],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.setdefault": [],
    "collections.OrderedDict.__repr__": [
        "<builtin>.list",
        "_collections.OrderedDict.items"
    ],
    "_collections.OrderedDict.items": [],
    "collections.OrderedDict.__reduce__": [
        "<builtin>.iter",
        "<builtin>.vars",
        "_collections.OrderedDict.items",
        "_collections.OrderedDict"
    ],
    "_collections.OrderedDict": [],
    "collections.OrderedDict.copy": [
        "_collections.OrderedDict.__class__"
    ],
    "_collections.OrderedDict.__class__": [],
    "collections.OrderedDict.fromkeys": [
        "_collections.OrderedDict"
    ],
    "collections.OrderedDict.__eq__": [
        "<builtin>.map",
        "<builtin>.all",
        "<builtin>.isinstance"
    ],
    "collections.<lambda1>": [
        "<builtin>.property",
        "operator.itemgetter.__init__"
    ],
    "<builtin>.property": [],
    "sys.intern": [],
    "collections.namedtuple._make": [
        "<builtin>.len",
        "<builtin>.TypeError"
    ],
    "collections.namedtuple._replace": [
        "<builtin>.list",
        "<builtin>.ValueError"
    ],
    "collections.namedtuple.__repr__": [],
    "collections.namedtuple._asdict": [],
    "collections.namedtuple.__getnewargs__": [],
    "_collections._tuplegetter": [],
    "collections._count_elements": [],
    "collections.Counter": [],
    "collections.Counter.__init__": [
        "<builtin>.super"
    ],
    "collections.Counter.__missing__": [],
    "collections.Counter.most_common": [
        "heapq.nlargest",
        "<builtin>.sorted",
        "operator.itemgetter.__init__"
    ],
    "collections.Counter.elements": [
        "itertools.chain.from_iterable",
        "itertools.starmap"
    ],
    "itertools.starmap": [],
    "itertools.chain.from_iterable": [],
    "collections.Counter.fromkeys": [
        "<builtin>.NotImplementedError"
    ],
    "collections.Counter.update": [
        "<builtin>.super",
        "_collections._count_elements",
        "<builtin>.isinstance"
    ],
    "_collections._count_elements": [],
    "collections.Counter.subtract": [
        "<builtin>.isinstance"
    ],
    "collections.Counter.copy": [],
    "collections.Counter.__reduce__": [
        "<builtin>.dict"
    ],
    "collections.Counter.__delitem__": [
        "<builtin>.super"
    ],
    "collections.Counter.__repr__": [
        "<builtin>.map",
        "<builtin>.dict",
        "collections.Counter.most_common"
    ],
    "collections.Counter.__add__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__sub__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__or__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__and__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__pos__": [
        "collections.Counter.__init__"
    ],
    "collections.Counter.__neg__": [
        "collections.Counter.__init__"
    ],
    "collections.Counter._keep_positive": [],
    "collections.Counter.__iadd__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__isub__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__ior__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__iand__": [
        "collections.Counter._keep_positive"
    ],
    "collections.ChainMap": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "collections.ChainMap.__init__": [
        "<builtin>.list"
    ],
    "collections.ChainMap.__missing__": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.__getitem__": [
        "collections.ChainMap.__missing__"
    ],
    "collections.ChainMap.get": [],
    "collections.ChainMap.__len__": [
        "<builtin>.len",
        "<builtin>.set"
    ],
    "collections.ChainMap.__iter__": [
        "<builtin>.iter",
        "<builtin>.reversed"
    ],
    "collections.ChainMap.__contains__": [
        "<builtin>.any"
    ],
    "collections.ChainMap.__bool__": [
        "<builtin>.any"
    ],
    "collections.ChainMap.__repr__": [
        "<builtin>.map"
    ],
    "collections.ChainMap.fromkeys": [
        "collections.ChainMap.__init__"
    ],
    "collections.ChainMap.copy": [],
    "collections.ChainMap.new_child": [],
    "collections.ChainMap.parents": [],
    "collections.ChainMap.__setitem__": [],
    "collections.ChainMap.__delitem__": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.popitem": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.pop": [
        "<builtin>.KeyError"
    ],
    "collections.UserDict": [],
    "collections.UserDict.__len__": [
        "<builtin>.len"
    ],
    "collections.UserDict.__getitem__": [
        "<builtin>.hasattr",
        "<builtin>.KeyError"
    ],
    "collections.UserDict.__setitem__": [],
    "collections.UserDict.__delitem__": [],
    "collections.UserDict.__iter__": [
        "<builtin>.iter"
    ],
    "collections.UserDict.__contains__": [],
    "collections.UserDict.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserDict.__copy__": [],
    "collections.UserDict.fromkeys": [
        "collections.UserDict.__init__"
    ],
    "collections.UserList": [],
    "collections.UserList.__init__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserList.__lt__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__cast": [
        "<builtin>.isinstance"
    ],
    "collections.UserList.__le__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__eq__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__gt__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__ge__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__contains__": [],
    "collections.UserList.__len__": [
        "<builtin>.len"
    ],
    "collections.UserList.__getitem__": [
        "<builtin>.isinstance"
    ],
    "collections.UserList.__setitem__": [],
    "collections.UserList.__delitem__": [],
    "collections.UserList.__add__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__radd__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__iadd__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "collections.UserList.__mul__": [],
    "collections.UserList.__imul__": [],
    "collections.UserList.__copy__": [],
    "collections.UserList.append": [],
    "collections.UserList.insert": [],
    "collections.UserList.pop": [],
    "collections.UserList.remove": [],
    "collections.UserList.clear": [],
    "collections.UserList.copy": [],
    "collections.UserList.count": [],
    "collections.UserList.index": [],
    "collections.UserList.reverse": [],
    "collections.UserList.sort": [],
    "collections.UserList.extend": [
        "<builtin>.isinstance"
    ],
    "collections.UserString": [],
    "collections.UserString.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__str__": [
        "<builtin>.str"
    ],
    "collections.UserString.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserString.__int__": [
        "<builtin>.int"
    ],
    "collections.UserString.__float__": [
        "<builtin>.float"
    ],
    "<builtin>.float": [],
    "collections.UserString.__complex__": [
        "<builtin>.complex"
    ],
    "<builtin>.complex": [],
    "collections.UserString.__hash__": [
        "<builtin>.hash"
    ],
    "collections.UserString.__getnewargs__": [],
    "collections.UserString.__eq__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__lt__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__le__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__gt__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__ge__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__contains__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__len__": [
        "<builtin>.len"
    ],
    "collections.UserString.__getitem__": [],
    "collections.UserString.__add__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__radd__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__mul__": [],
    "collections.UserString.__mod__": [],
    "collections.UserString.__rmod__": [
        "<builtin>.str"
    ],
    "collections.UserString.capitalize": [],
    "collections.UserString.casefold": [],
    "collections.UserString.center": [],
    "collections.UserString.count": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.encode": [],
    "collections.UserString.endswith": [],
    "collections.UserString.expandtabs": [],
    "collections.UserString.find": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.format": [],
    "collections.UserString.format_map": [],
    "collections.UserString.index": [],
    "collections.UserString.isalpha": [],
    "collections.UserString.isalnum": [],
    "collections.UserString.isascii": [],
    "collections.UserString.isdecimal": [],
    "collections.UserString.isdigit": [],
    "collections.UserString.isidentifier": [],
    "collections.UserString.islower": [],
    "collections.UserString.isnumeric": [],
    "collections.UserString.isprintable": [],
    "collections.UserString.isspace": [],
    "collections.UserString.istitle": [],
    "collections.UserString.isupper": [],
    "collections.UserString.join": [],
    "collections.UserString.ljust": [],
    "collections.UserString.lower": [],
    "collections.UserString.lstrip": [],
    "collections.UserString.partition": [],
    "collections.UserString.replace": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.rfind": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.rindex": [],
    "collections.UserString.rjust": [],
    "collections.UserString.rpartition": [],
    "collections.UserString.rstrip": [],
    "collections.UserString.split": [],
    "collections.UserString.rsplit": [],
    "collections.UserString.splitlines": [],
    "collections.UserString.startswith": [],
    "collections.UserString.strip": [],
    "collections.UserString.swapcase": [],
    "collections.UserString.title": [],
    "collections.UserString.translate": [],
    "collections.UserString.upper": [],
    "collections.UserString.zfill": [],
    "operator.lt": [],
    "operator.le": [],
    "operator.eq": [],
    "operator.ne": [],
    "operator.ge": [],
    "operator.gt": [],
    "operator.not_": [],
    "operator.truth": [],
    "operator.is_": [],
    "operator.is_not": [],
    "operator.abs": [
        "builtins.abs"
    ],
    "builtins.abs": [],
    "operator.add": [],
    "operator.and_": [],
    "operator.floordiv": [],
    "operator.index": [],
    "operator.inv": [],
    "operator.lshift": [],
    "operator.mod": [],
    "operator.mul": [],
    "operator.matmul": [],
    "operator.neg": [],
    "operator.or_": [],
    "operator.pos": [],
    "operator.pow": [],
    "operator.rshift": [],
    "operator.sub": [],
    "operator.truediv": [],
    "operator.xor": [],
    "operator.concat": [
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "operator.contains": [],
    "operator.countOf": [],
    "operator.delitem": [],
    "operator.getitem": [],
    "operator.indexOf": [
        "<builtin>.enumerate"
    ],
    "operator.setitem": [],
    "operator.length_hint": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "operator.attrgetter": [],
    "operator.attrgetter.__init__": [
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.TypeError"
    ],
    "operator.attrgetter.__init__.func": [
        "<builtin>.getattr",
        "<builtin>.tuple"
    ],
    "operator.attrgetter.__call__": [
        "operator.attrgetter.__init__.func"
    ],
    "operator.attrgetter.__repr__": [
        "<builtin>.map"
    ],
    "operator.attrgetter.__reduce__": [],
    "operator.itemgetter": [],
    "operator.itemgetter.__init__.func": [
        "<builtin>.tuple"
    ],
    "operator.itemgetter.__call__": [
        "operator.itemgetter.__init__.func"
    ],
    "operator.itemgetter.__repr__": [
        "<builtin>.map"
    ],
    "operator.itemgetter.__reduce__": [],
    "operator.methodcaller": [],
    "operator.methodcaller.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "operator.methodcaller.__call__": [
        "<builtin>.getattr"
    ],
    "operator.methodcaller.__repr__": [
        "<builtin>.map",
        "<builtin>.repr"
    ],
    "operator.iadd": [],
    "operator.iand": [],
    "operator.iconcat": [
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "operator.ifloordiv": [],
    "operator.ilshift": [],
    "operator.imod": [],
    "operator.imul": [],
    "operator.imatmul": [],
    "operator.ior": [],
    "operator.ipow": [],
    "operator.irshift": [],
    "operator.isub": [],
    "operator.itruediv": [],
    "operator.ixor": [],
    "<builtin>.bytearray": [],
    "_collections_abc.<lambda1>": [],
    "_collections_abc._coro": [],
    "_collections_abc._ag": [],
    "_collections_abc._check_methods": [],
    "_collections_abc.Hashable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Hashable.__hash__": [],
    "_collections_abc.Hashable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Awaitable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Awaitable.__await__": [],
    "_collections_abc.Awaitable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Coroutine": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Coroutine.send": [],
    "_collections_abc.Coroutine.throw": [],
    "_collections_abc.Coroutine.close": [
        "_collections_abc.Coroutine.throw",
        "<builtin>.RuntimeError"
    ],
    "_collections_abc.Coroutine.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.AsyncIterable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.AsyncIterable.__aiter__": [],
    "_collections_abc.AsyncIterable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.AsyncIterator": [
        "abc.abstractmethod"
    ],
    "_collections_abc.AsyncIterator.__anext__": [],
    "_collections_abc.AsyncIterator.__aiter__": [],
    "_collections_abc.AsyncIterator.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.AsyncGenerator": [
        "abc.abstractmethod"
    ],
    "_collections_abc.AsyncGenerator.__anext__": [
        "_collections_abc.AsyncGenerator.asend"
    ],
    "_collections_abc.AsyncGenerator.asend": [],
    "_collections_abc.AsyncGenerator.athrow": [],
    "_collections_abc.AsyncGenerator.aclose": [
        "_collections_abc.AsyncGenerator.athrow",
        "<builtin>.RuntimeError"
    ],
    "_collections_abc.AsyncGenerator.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Iterable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Iterable.__iter__": [],
    "_collections_abc.Iterable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Iterator": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Iterator.__next__": [],
    "_collections_abc.Iterator.__iter__": [],
    "_collections_abc.Iterator.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Reversible": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Reversible.__reversed__": [],
    "_collections_abc.Reversible.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Generator": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Generator.__next__": [
        "_collections_abc.Generator.send"
    ],
    "_collections_abc.Generator.send": [],
    "_collections_abc.Generator.throw": [],
    "_collections_abc.Generator.close": [
        "<builtin>.RuntimeError",
        "_collections_abc.Generator.throw"
    ],
    "_collections_abc.Generator.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Sized": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Sized.__len__": [],
    "_collections_abc.Sized.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Container": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Container.__contains__": [],
    "_collections_abc.Container.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Collection": [],
    "_collections_abc.Collection.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Callable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Callable.__call__": [],
    "_collections_abc.Callable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Set": [],
    "_collections_abc.Set.__le__": [
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "_collections_abc.Set.__lt__": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "_collections_abc.Set.__le__"
    ],
    "_collections_abc.Set.__gt__": [
        "<builtin>.len",
        "_collections_abc.Set.__ge__",
        "<builtin>.isinstance"
    ],
    "_collections_abc.Set.__ge__": [
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "_collections_abc.Set.__eq__": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "_collections_abc.Set.__le__"
    ],
    "_collections_abc.Set._from_iterable": [],
    "_collections_abc.Set.__and__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set.isdisjoint": [],
    "_collections_abc.Set.__or__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set.__sub__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set.__rsub__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set.__xor__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set._hash": [
        "<builtin>.len",
        "<builtin>.hash"
    ],
    "_collections_abc.MutableSet": [
        "abc.abstractmethod"
    ],
    "_collections_abc.MutableSet.add": [],
    "_collections_abc.MutableSet.discard": [],
    "_collections_abc.MutableSet.remove": [
        "_collections_abc.MutableSet.discard",
        "<builtin>.KeyError"
    ],
    "_collections_abc.MutableSet.pop": [
        "<builtin>.iter",
        "_collections_abc.MutableSet.discard",
        "<builtin>.next"
    ],
    "_collections_abc.MutableSet.clear": [
        "_collections_abc.MutableSet.pop"
    ],
    "_collections_abc.MutableSet.__ior__": [
        "_collections_abc.MutableSet.add"
    ],
    "_collections_abc.MutableSet.__iand__": [
        "_collections_abc.MutableSet.discard"
    ],
    "_collections_abc.MutableSet.__ixor__": [
        "<builtin>.isinstance",
        "_collections_abc.MutableSet.clear",
        "_collections_abc.MutableSet.add",
        "_collections_abc.MutableSet.discard",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.MutableSet.__isub__": [
        "_collections_abc.MutableSet.clear",
        "_collections_abc.MutableSet.discard"
    ],
    "_collections_abc.Mapping": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Mapping.__getitem__": [],
    "_collections_abc.Mapping.get": [],
    "_collections_abc.Mapping.__contains__": [],
    "_collections_abc.Mapping.keys": [
        "_collections_abc.MappingView.__init__"
    ],
    "_collections_abc.MappingView.__init__": [],
    "_collections_abc.Mapping.items": [
        "_collections_abc.MappingView.__init__"
    ],
    "_collections_abc.Mapping.values": [
        "_collections_abc.MappingView.__init__"
    ],
    "_collections_abc.Mapping.__eq__": [
        "<builtin>.isinstance",
        "weakref.WeakKeyDictionary.items",
        "<builtin>.dict",
        "weakref.WeakValueDictionary.items",
        "_collections_abc.Mapping.items"
    ],
    "weakref.WeakKeyDictionary.items": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakValueDictionary.items": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "_collections_abc.MappingView": [],
    "_collections_abc.MappingView.__len__": [
        "<builtin>.len"
    ],
    "_collections_abc.MappingView.__repr__": [],
    "_collections_abc.KeysView": [],
    "_collections_abc.KeysView._from_iterable": [
        "<builtin>.set"
    ],
    "_collections_abc.KeysView.__contains__": [],
    "_collections_abc.KeysView.__iter__": [],
    "_collections_abc.ItemsView": [],
    "_collections_abc.ItemsView._from_iterable": [
        "<builtin>.set"
    ],
    "_collections_abc.ItemsView.__contains__": [],
    "_collections_abc.ItemsView.__iter__": [],
    "_collections_abc.ValuesView": [],
    "_collections_abc.ValuesView.__contains__": [],
    "_collections_abc.ValuesView.__iter__": [],
    "_collections_abc.MutableMapping": [
        "<builtin>.object",
        "abc.abstractmethod"
    ],
    "_collections_abc.MutableMapping.__setitem__": [],
    "_collections_abc.MutableMapping.__delitem__": [],
    "_collections_abc.MutableMapping.pop": [],
    "_collections_abc.MutableMapping.popitem": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "weakref.WeakKeyDictionary.popitem": [],
    "weakref.WeakValueDictionary.popitem": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "_collections_abc.MutableMapping.update": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "_collections_abc.MutableMapping.setdefault": [],
    "_collections_abc.Sequence": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Sequence.__getitem__": [],
    "_collections_abc.Sequence.__iter__": [],
    "_collections_abc.Sequence.__contains__": [
        "_collections_abc.Sequence.__iter__"
    ],
    "_collections_abc.Sequence.__reversed__": [
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.reversed"
    ],
    "_collections_abc.Sequence.index": [
        "<builtin>.len",
        "<builtin>.max"
    ],
    "_collections_abc.Sequence.count": [
        "<builtin>.sum"
    ],
    "<builtin>.sum": [],
    "_collections_abc.ByteString": [],
    "_collections_abc.MutableSequence": [
        "abc.abstractmethod"
    ],
    "_collections_abc.MutableSequence.__setitem__": [],
    "_collections_abc.MutableSequence.__delitem__": [],
    "_collections_abc.MutableSequence.insert": [],
    "_collections_abc.MutableSequence.append": [
        "<builtin>.len",
        "_collections_abc.MutableSequence.insert"
    ],
    "_collections_abc.MutableSequence.clear": [
        "_collections_abc.MutableSequence.pop"
    ],
    "_collections_abc.MutableSequence.pop": [],
    "_collections_abc.MutableSequence.reverse": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "_collections_abc.MutableSequence.extend": [
        "_collections_abc.MutableSequence.append",
        "<builtin>.list"
    ],
    "_collections_abc.MutableSequence.remove": [
        "_collections_abc.Sequence.index"
    ],
    "_collections_abc.MutableSequence.__iadd__": [
        "_collections_abc.MutableSequence.extend"
    ],
    "warnings.showwarning": [
        "warnings._showwarnmsg_impl",
        "warnings.WarningMessage.__init__"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg_impl": [
        "sys.stderr.write",
        "warnings._formatwarnmsg"
    ],
    "warnings.formatwarning": [
        "warnings._formatwarnmsg_impl",
        "warnings.WarningMessage.__init__"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl",
        "warnings.formatwarning"
    ],
    "linecache.getline": [
        "<builtin>.len",
        "linecache.getlines"
    ],
    "tracemalloc.get_object_traceback": [
        "tracemalloc.Traceback.__init__",
        "_tracemalloc._get_object_traceback"
    ],
    "warnings._showwarnmsg": [
        "<builtin>.callable",
        "warnings.showwarning",
        "<builtin>.TypeError",
        "warnings._showwarnmsg_impl"
    ],
    "warnings._add_filter": [
        "_warnings.filters.append",
        "_warnings._filters_mutated",
        "_warnings.filters.insert",
        "_warnings.filters.remove"
    ],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "_warnings.filters.remove": [],
    "_warnings.filters.insert": [],
    "_warnings.filters.append": [],
    "_warnings._filters_mutated": [],
    "warnings.resetwarnings": [
        "_warnings._filters_mutated"
    ],
    "warnings._OptionError": [],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "sys.warnoptions.split": [],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<builtin>.issubclass"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "sys.__dict__.setdefault": [],
    "_warnings.warn_explicit": [],
    "_warnings._onceregistry.get": [],
    "warnings.WarningMessage": [],
    "warnings.WarningMessage.__str__": [],
    "warnings.catch_warnings": [],
    "warnings.catch_warnings.__init__": [],
    "warnings.catch_warnings.__repr__": [
        "<builtin>.type"
    ],
    "warnings.catch_warnings.__enter__": [
        "<builtin>.RuntimeError"
    ],
    "warnings.catch_warnings.__exit__": [
        "<builtin>.RuntimeError"
    ],
    "warnings._warn_unawaited_coroutine.extract": [
        "<builtin>.reversed",
        "linecache.getline"
    ],
    "traceback.format_list": [
        "traceback.StackSummary.format",
        "traceback.StackSummary.from_list"
    ],
    "warnings._filters_mutated": [],
    "linecache.clearcache": [],
    "linecache.updatecache": [
        "posixpath.join",
        "ntpath.join",
        "linecache.lazycache",
        "ntpath.isabs",
        "<builtin>.len",
        "posixpath.isabs"
    ],
    "linecache.checkcache": [
        "<builtin>.len",
        "<builtin>.list"
    ],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "tokenize.TokenInfo": [],
    "tokenize.TokenInfo.__repr__": [],
    "tokenize.TokenInfo.exact_type": [],
    "tokenize.group": [],
    "tokenize.any": [
        "tokenize.group"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize._all_string_prefixes": [
        "itertools.product",
        "itertools.permutations"
    ],
    "itertools.permutations": [],
    "itertools.product": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "tokenize.Untokenizer.__init__": [],
    "tokenize.Untokenizer.add_whitespace": [
        "<builtin>.ValueError"
    ],
    "tokenize.Untokenizer.untokenize": [
        "<builtin>.iter",
        "<builtin>.len",
        "tokenize.Untokenizer.add_whitespace",
        "tokenize.Untokenizer.compat"
    ],
    "tokenize.Untokenizer.compat": [
        "itertools.chain"
    ],
    "itertools.chain": [],
    "tokenize.untokenize": [
        "tokenize.Untokenizer.__init__",
        "tokenize.Untokenizer.untokenize"
    ],
    "tokenize._get_normal_name": [],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "<builtin>.SyntaxError"
    ],
    "<builtin>.SyntaxError": [],
    "tokenize.open": [
        "lzma.LZMAFile.seek",
        "builtins.open",
        "gzip.GzipFile.close",
        "bz2.BZ2File.seek",
        "bz2.BZ2File.close",
        "gzip.GzipFile.seek",
        "lzma.LZMAFile.close",
        "asyncio.windows_utils.PipeHandle.close",
        "tokenize.detect_encoding",
        "_io.TextIOWrapper"
    ],
    "builtins.open": [],
    "lzma.LZMAFile.seek": [
        "_compression.BaseStream._check_can_seek"
    ],
    "bz2.BZ2File.seek": [
        "_compression.BaseStream._check_can_seek"
    ],
    "gzip.GzipFile.seek": [
        "gzip.GzipFile.write",
        "_compression.BaseStream._check_not_closed",
        "<builtin>.OSError",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "_io.TextIOWrapper": [],
    "asyncio.windows_utils.PipeHandle.close": [],
    "gzip.GzipFile.close": [
        "gzip.GzipFile.write",
        "sys.path.write",
        "sys.stdin.buffer.write",
        "sys.base_prefix.write",
        "sys.stdout.buffer.write",
        "sys.executable.write",
        "gzip.write32u"
    ],
    "bz2.BZ2File.close": [
        "sys.base_prefix.close",
        "sys.executable.close",
        "sys.path.close",
        "tarfile.TarFile.close",
        "sys.path.write",
        "sys.base_prefix.write",
        "sys.executable.write"
    ],
    "lzma.LZMAFile.close": [
        "sys.base_prefix.close",
        "sys.executable.close",
        "sys.path.close",
        "tarfile.TarFile.close",
        "sys.path.write",
        "sys.base_prefix.write",
        "sys.executable.write"
    ],
    "tokenize.tokenize": [
        "itertools.repeat",
        "<builtin>.iter",
        "itertools.chain",
        "tokenize._tokenize",
        "tokenize.detect_encoding"
    ],
    "itertools.repeat": [],
    "tokenize._tokenize": [
        "tokenize._compile",
        "<builtin>.len",
        "<builtin>.IndentationError",
        "sys.stdin.readline"
    ],
    "sys.stdin.readline": [],
    "<builtin>.IndentationError": [],
    "tokenize.generate_tokens": [
        "tokenize._tokenize"
    ],
    "tokenize.main.perror": [
        "sys.stderr.write"
    ],
    "tokenize.main.error": [
        "sys.exit",
        "tokenize.main.perror"
    ],
    "token.ISTERMINAL": [],
    "token.ISNONTERMINAL": [],
    "token.ISEOF": [],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.CodecInfo.__new__": [],
    "codecs.CodecInfo.__repr__": [
        "<builtin>.id"
    ],
    "codecs.Codec": [],
    "codecs.Codec.encode": [],
    "codecs.Codec.decode": [],
    "codecs.IncrementalEncoder": [],
    "codecs.IncrementalEncoder.__init__": [],
    "codecs.IncrementalEncoder.encode": [],
    "codecs.IncrementalEncoder.reset": [],
    "codecs.IncrementalEncoder.getstate": [],
    "codecs.IncrementalEncoder.setstate": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder.__init__": [
        "codecs.IncrementalEncoder.__init__"
    ],
    "codecs.BufferedIncrementalEncoder._buffer_encode": [],
    "codecs.BufferedIncrementalEncoder.encode": [
        "codecs.BufferedIncrementalEncoder._buffer_encode"
    ],
    "codecs.BufferedIncrementalEncoder.reset": [
        "codecs.IncrementalEncoder.reset"
    ],
    "codecs.BufferedIncrementalEncoder.getstate": [],
    "codecs.BufferedIncrementalEncoder.setstate": [],
    "codecs.IncrementalDecoder": [],
    "codecs.IncrementalDecoder.__init__": [],
    "codecs.IncrementalDecoder.decode": [],
    "codecs.IncrementalDecoder.reset": [],
    "codecs.IncrementalDecoder.getstate": [],
    "codecs.IncrementalDecoder.setstate": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder.__init__": [
        "codecs.IncrementalDecoder.__init__"
    ],
    "codecs.BufferedIncrementalDecoder._buffer_decode": [],
    "codecs.BufferedIncrementalDecoder.decode": [
        "codecs.BufferedIncrementalDecoder._buffer_decode"
    ],
    "codecs.BufferedIncrementalDecoder.reset": [
        "codecs.IncrementalDecoder.reset"
    ],
    "codecs.BufferedIncrementalDecoder.getstate": [],
    "codecs.BufferedIncrementalDecoder.setstate": [],
    "codecs.StreamWriter": [],
    "codecs.StreamWriter.__init__": [],
    "codecs.StreamWriter.write": [
        "codecs.Codec.encode"
    ],
    "codecs.StreamWriter.writelines": [
        "codecs.StreamWriter.write"
    ],
    "codecs.StreamWriter.reset": [],
    "codecs.StreamWriter.seek": [
        "codecs.StreamWriter.reset"
    ],
    "codecs.StreamWriter.__getattr__": [],
    "codecs.StreamWriter.__enter__": [],
    "codecs.StreamWriter.__exit__": [],
    "codecs.StreamReader": [],
    "codecs.StreamReader.__init__": [],
    "codecs.StreamReader.decode": [],
    "codecs.StreamReader.read": [
        "<builtin>.len",
        "codecs.StreamReader.decode"
    ],
    "codecs.StreamReader.readline": [
        "<builtin>.len",
        "codecs.StreamReader.read",
        "<builtin>.isinstance"
    ],
    "codecs.StreamReader.readlines": [
        "codecs.StreamReader.read"
    ],
    "codecs.StreamReader.reset": [],
    "codecs.StreamReader.seek": [
        "codecs.StreamReader.reset"
    ],
    "codecs.StreamReader.__next__": [
        "codecs.StreamReader.readline"
    ],
    "codecs.StreamReader.__iter__": [],
    "codecs.StreamReader.__getattr__": [],
    "codecs.StreamReader.__enter__": [],
    "codecs.StreamReader.__exit__": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamReaderWriter.__init__": [],
    "codecs.StreamReaderWriter.read": [],
    "codecs.StreamReaderWriter.readline": [],
    "codecs.StreamReaderWriter.readlines": [],
    "codecs.StreamReaderWriter.__next__": [
        "<builtin>.next"
    ],
    "codecs.StreamReaderWriter.__iter__": [],
    "codecs.StreamReaderWriter.write": [],
    "codecs.StreamReaderWriter.writelines": [],
    "codecs.StreamReaderWriter.reset": [],
    "codecs.StreamReaderWriter.seek": [],
    "codecs.StreamReaderWriter.__getattr__": [],
    "codecs.StreamReaderWriter.__enter__": [],
    "codecs.StreamReaderWriter.__exit__": [],
    "codecs.StreamRecoder": [],
    "codecs.StreamRecoder.__init__": [],
    "codecs.StreamRecoder.read": [],
    "codecs.StreamRecoder.readline": [],
    "codecs.StreamRecoder.readlines": [],
    "codecs.StreamRecoder.__next__": [
        "<builtin>.next"
    ],
    "codecs.StreamRecoder.__iter__": [],
    "codecs.StreamRecoder.write": [],
    "codecs.StreamRecoder.writelines": [],
    "codecs.StreamRecoder.reset": [],
    "codecs.StreamRecoder.seek": [],
    "codecs.StreamRecoder.__getattr__": [],
    "codecs.StreamRecoder.__enter__": [],
    "codecs.StreamRecoder.__exit__": [
        "sys.stdout.close",
        "sys.stdin.close"
    ],
    "sys.stdout.close": [],
    "sys.stdin.close": [],
    "codecs.open": [
        "builtins.open",
        "codecs.StreamReaderWriter.__init__"
    ],
    "codecs.EncodedFile": [
        "codecs.StreamRecoder.__init__"
    ],
    "codecs.getencoder": [],
    "codecs.getdecoder": [],
    "codecs.getincrementalencoder": [
        "<builtin>.LookupError"
    ],
    "<builtin>.LookupError": [],
    "codecs.getincrementaldecoder": [
        "<builtin>.LookupError"
    ],
    "codecs.getreader": [],
    "codecs.getwriter": [],
    "codecs.iterencode": [
        "codecs.getincrementalencoder"
    ],
    "codecs.iterdecode": [
        "codecs.getincrementaldecoder"
    ],
    "codecs.make_identity_dict": [],
    "codecs.make_encoding_map": [],
    "encodings.CodecRegistryError": [],
    "encodings.normalize_encoding": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "encodings.search_function": [
        "encodings.normalize_encoding",
        "<builtin>.isinstance",
        "<builtin>.__import__",
        "<builtin>.callable",
        "<builtin>.len"
    ],
    "_winapi.GetACP": [],
    "encodings.mbcs.getregentry": [],
    "encodings.mbcs.decode": [],
    "encodings.mbcs.IncrementalEncoder": [],
    "encodings.mbcs.IncrementalEncoder.encode": [],
    "encodings.mbcs.IncrementalDecoder": [],
    "encodings.mbcs.StreamWriter": [],
    "encodings.mbcs.StreamReader": [],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "_io._RawIOBase.register": [],
    "_io._IOBase.register": [],
    "re.RegexFlag": [],
    "re.RegexFlag.__repr__": [
        "<builtin>.hex",
        "<builtin>.len"
    ],
    "<builtin>.hex": [],
    "re._compile": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.iter",
        "sre_compile.compile",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "sre_compile.isstring",
        "<builtin>.next",
        "<builtin>.type"
    ],
    "re.fullmatch": [
        "re._compile"
    ],
    "re.search": [
        "re._compile"
    ],
    "re.subn": [
        "re._compile"
    ],
    "re.split": [
        "re._compile"
    ],
    "re.finditer": [
        "re._compile"
    ],
    "re.purge": [],
    "re.template": [
        "re._compile"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "<builtin>.print",
        "sre_compile._code",
        "<builtin>.tuple",
        "sre_compile.dis",
        "sre_compile.isstring",
        "_sre.compile",
        "sre_parse.parse"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "re._compile_repl": [
        "sre_parse.parse_template"
    ],
    "sre_parse.parse_template": [
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.get",
        "<builtin>.isinstance",
        "<builtin>.chr",
        "sre_parse.Tokenizer.__init__",
        "<builtin>.len",
        "sre_parse.parse_template.addgroup",
        "<builtin>.IndexError",
        "sre_parse.Tokenizer.error",
        "<builtin>.int"
    ],
    "re._expand": [
        "sre_parse.parse_template",
        "sre_parse.expand_template"
    ],
    "sre_parse.expand_template": [
        "sre_constants.error.__init__"
    ],
    "re._subx": [
        "<builtin>.len",
        "re._compile_repl"
    ],
    "re._subx.filter": [
        "sre_parse.expand_template"
    ],
    "re._pickle": [],
    "copyreg.pickle": [
        "<builtin>.callable",
        "copyreg.constructor",
        "<builtin>.TypeError"
    ],
    "re.Scanner": [],
    "sre_parse.State.__init__": [],
    "sre_parse.State.opengroup": [
        "sre_constants.error.__init__"
    ],
    "sre_parse.parse": [
        "sre_parse.SubPattern.dump",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.State.__init__",
        "sre_parse.Tokenizer.seek",
        "sre_parse._parse_sub",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [],
    "sre_parse.State.closegroup": [],
    "re.Scanner.scan": [
        "<builtin>.callable"
    ],
    "sre_compile._combine_flags": [],
    "sre_compile._compile": [
        "sre_compile._optimize_charset",
        "sre_constants.error.__init__",
        "_sre.ascii_tolower",
        "sre_compile._compile",
        "_sre.unicode_tolower",
        "sre_compile._combine_flags",
        "_sre.unicode_iscased",
        "sre_compile._simple",
        "sre_compile._compile_charset",
        "_sre.ascii_iscased"
    ],
    "_sre.unicode_iscased": [],
    "_sre.ascii_iscased": [],
    "_sre.ascii_tolower": [],
    "_sre.unicode_tolower": [],
    "sre_compile._optimize_charset": [
        "_sre.ascii_tolower",
        "<builtin>.any",
        "_sre.unicode_tolower",
        "_sre.unicode_iscased",
        "sre_compile._bytes_to_codes",
        "<builtin>.range",
        "sre_compile._mk_bitmap",
        "<builtin>.map",
        "<builtin>.bytes",
        "<builtin>.len",
        "_sre.ascii_iscased",
        "<builtin>.bytearray"
    ],
    "sre_compile._compile_charset": [
        "sre_constants.error.__init__"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "sre_compile._simple": [
        "<builtin>.len",
        "sre_compile._simple"
    ],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._generate_overlap_table": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._get_literal_prefix": [
        "sre_compile._combine_flags",
        "_sre.unicode_iscased",
        "sre_compile._get_literal_prefix",
        "sre_compile._get_iscased",
        "<builtin>.len",
        "_sre.ascii_iscased"
    ],
    "sre_compile._get_charset_prefix": [
        "sre_compile._combine_flags",
        "<builtin>.any",
        "_sre.unicode_iscased",
        "<builtin>.range",
        "<builtin>.map",
        "sre_compile._get_iscased",
        "_sre.ascii_iscased"
    ],
    "sre_compile._compile_info": [
        "sre_compile._optimize_charset",
        "sre_compile._get_charset_prefix",
        "<builtin>.min",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._get_literal_prefix",
        "sre_compile._generate_overlap_table",
        "<builtin>.len",
        "sre_compile._compile_charset"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info"
    ],
    "sre_compile._hex_code": [],
    "sre_compile.dis": [
        "<builtin>.len",
        "<builtin>.set",
        "sre_compile.dis.dis_",
        "<builtin>.str"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.list",
        "sre_compile._hex_code",
        "sre_compile.dis.dis_.print_",
        "sre_compile.dis.dis_",
        "<builtin>.range",
        "<builtin>.chr",
        "<builtin>.bin",
        "<builtin>.map",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "<builtin>.bin": [],
    "_sre.compile": [],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._NamedIntConstant.__new__": [
        "<builtin>.super"
    ],
    "sre_constants._NamedIntConstant.__repr__": [],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<builtin>.enumerate"
    ],
    "sre_constants.dump": [
        "<builtin>.sorted"
    ],
    "<builtin>.ord": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [],
    "sre_parse.State.groups": [
        "<builtin>.len"
    ],
    "sre_parse.State.checkgroup": [],
    "sre_parse.State.checklookbehindgroup": [
        "sre_parse.State.checkgroup"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.print",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.str"
    ],
    "sre_parse.SubPattern.__repr__": [
        "<builtin>.repr"
    ],
    "sre_parse.SubPattern.__len__": [
        "<builtin>.len"
    ],
    "sre_parse.SubPattern.__delitem__": [],
    "sre_parse.SubPattern.__getitem__": [
        "sre_parse.SubPattern.__init__",
        "<builtin>.isinstance"
    ],
    "sre_parse.SubPattern.__setitem__": [],
    "sre_parse.SubPattern.insert": [],
    "sre_parse.Tokenizer": [],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.__next": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "<builtin>.range",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.pos": [
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse._uniq": [
        "<builtin>.list"
    ],
    "sre_parse._parse_sub": [
        "sre_parse.Tokenizer.match",
        "sre_parse.SubPattern.append",
        "sre_parse.Tokenizer.tell",
        "sre_parse._parse",
        "<builtin>.len",
        "sre_parse.SubPattern.__init__"
    ],
    "<builtin>.OverflowError": [],
    "sre_parse._parse_flags": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "sre_parse.parse_template.addgroup": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "<builtin>.IndexError": [],
    "enum._is_descriptor": [
        "<builtin>.hasattr"
    ],
    "enum._is_dunder": [
        "<builtin>.len"
    ],
    "enum._is_sunder": [
        "<builtin>.len"
    ],
    "enum._make_class_unpicklable": [],
    "enum._make_class_unpicklable._break_on_call_reduce": [
        "<builtin>.TypeError"
    ],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum._EnumDict.__init__": [
        "<builtin>.super"
    ],
    "enum._EnumDict.__setitem__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "enum._is_descriptor",
        "enum._is_dunder",
        "enum._is_sunder",
        "<builtin>.set",
        "<builtin>.setattr",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.super"
    ],
    "enum.EnumMeta": [],
    "enum.EnumMeta.__prepare__": [
        "<builtin>.getattr",
        "enum.EnumMeta._get_mixins_",
        "enum._EnumDict.__init__"
    ],
    "enum.EnumMeta._get_mixins_": [
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "enum.EnumMeta._get_mixins_._find_data_type"
    ],
    "enum.EnumMeta.__new__": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.any",
        "enum._make_class_unpicklable",
        "enum.EnumMeta._find_new_",
        "enum.EnumMeta._get_mixins_",
        "<builtin>.set",
        "<builtin>.ValueError",
        "<builtin>.setattr",
        "<builtin>.TypeError",
        "<builtin>.super",
        "<builtin>.hasattr"
    ],
    "enum.EnumMeta._find_new_": [
        "<builtin>.getattr"
    ],
    "enum.EnumMeta.__bool__": [],
    "enum.EnumMeta.__call__": [
        "enum.EnumMeta.__new__",
        "enum.EnumMeta._create_"
    ],
    "enum.EnumMeta._create_": [
        "enum._make_class_unpicklable",
        "<builtin>.isinstance",
        "enum.EnumMeta._get_mixins_",
        "<builtin>.enumerate",
        "sys._getframe"
    ],
    "enum.EnumMeta.__contains__": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "enum.EnumMeta.__delattr__": [
        "<builtin>.AttributeError",
        "<builtin>.super"
    ],
    "enum.EnumMeta.__dir__": [],
    "enum.EnumMeta.__getattr__": [
        "<builtin>.AttributeError",
        "enum._is_dunder"
    ],
    "enum.EnumMeta.__getitem__": [],
    "enum.EnumMeta.__iter__": [],
    "enum.EnumMeta.__len__": [
        "<builtin>.len"
    ],
    "enum.EnumMeta.__members__": [],
    "enum.EnumMeta.__repr__": [],
    "enum.EnumMeta.__reversed__": [
        "<builtin>.reversed"
    ],
    "enum.EnumMeta.__setattr__": [
        "<builtin>.AttributeError",
        "<builtin>.super"
    ],
    "enum.EnumMeta._convert_": [
        "<builtin>.vars"
    ],
    "enum.EnumMeta._convert_.<lambda1>": [],
    "enum.EnumMeta._convert_.<lambda2>": [],
    "enum.EnumMeta._get_mixins_._find_data_type": [
        "<builtin>.issubclass"
    ],
    "enum.Enum": [
        "types.DynamicClassAttribute"
    ],
    "enum.Enum.__new__": [
        "enum.Enum._missing_",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "enum.Enum._missing_": [
        "<builtin>.ValueError"
    ],
    "enum.Enum._generate_next_value_": [
        "<builtin>.reversed"
    ],
    "enum.Enum.__repr__": [],
    "enum.Enum.__str__": [],
    "enum.Enum.__dir__": [],
    "enum.Enum.__format__": [
        "<builtin>.str"
    ],
    "enum.Enum.__hash__": [
        "<builtin>.hash"
    ],
    "enum.Enum.__reduce_ex__": [],
    "enum.Enum.name": [],
    "enum.Enum.value": [],
    "enum.IntEnum": [],
    "enum._reduce_ex_by_name": [],
    "enum.Flag": [],
    "enum.Flag._generate_next_value_": [
        "enum._high_bit",
        "<builtin>.reversed",
        "<builtin>.TypeError"
    ],
    "enum._high_bit": [],
    "enum.Flag._missing_": [
        "enum.Flag._create_pseudo_member_"
    ],
    "enum.Flag._create_pseudo_member_": [
        "enum._decompose",
        "<builtin>.ValueError"
    ],
    "enum._decompose": [
        "<builtin>.len",
        "enum._power_of_two",
        "<builtin>.list"
    ],
    "enum.Flag.__contains__": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "enum.Flag.__repr__": [
        "enum._decompose",
        "<builtin>.str"
    ],
    "enum.Flag.__str__": [
        "enum._decompose",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "enum.Flag.__bool__": [
        "<builtin>.bool"
    ],
    "enum.Flag.__or__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__and__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__xor__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__invert__": [
        "enum._decompose"
    ],
    "enum.IntFlag": [],
    "enum.IntFlag._missing_": [
        "enum.IntFlag._create_pseudo_member_",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "enum.IntFlag._create_pseudo_member_": [
        "enum._decompose",
        "enum._high_bit",
        "<builtin>.reversed"
    ],
    "enum.IntFlag.__or__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__and__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__xor__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__invert__": [],
    "enum.unique": [
        "<builtin>.ValueError"
    ],
    "enum._power_of_two": [
        "enum._high_bit"
    ],
    "enum._decompose.<lambda1>": [],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "copyreg.pickle_complex": [],
    "copyreg._reconstructor": [],
    "copyreg._reduce_ex": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "copyreg.__newobj__": [],
    "copyreg.__newobj_ex__": [],
    "copyreg._slotnames": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "copyreg.add_extension": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "copyreg.remove_extension": [
        "<builtin>.ValueError"
    ],
    "copyreg.clear_extension_cache": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._get_exports_list": [
        "<builtin>.dir",
        "<builtin>.list"
    ],
    "<builtin>.dir": [],
    "<builtin>.ImportError": [],
    "os._add": [],
    "os.makedirs": [
        "posixpath.split",
        "ntpath.exists",
        "ntpath.split",
        "<builtin>.isinstance",
        "posixpath.isdir",
        "<builtin>.bytes",
        "ntpath.isdir",
        "posixpath.exists",
        "os.makedirs"
    ],
    "ntpath.isdir": [],
    "posixpath.isdir": [],
    "os.removedirs": [
        "posixpath.split",
        "ntpath.split"
    ],
    "os.renames": [
        "posixpath.split",
        "ntpath.exists",
        "ntpath.split",
        "os.removedirs",
        "posixpath.exists",
        "os.makedirs"
    ],
    "os.walk": [
        "posixpath.join",
        "os.walk",
        "ntpath.join",
        "os._fspath",
        "posixpath.islink",
        "ntpath.islink",
        "<builtin>.next"
    ],
    "os._fspath": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "os.fwalk": [
        "os._fwalk",
        "<builtin>.isinstance",
        "stat.S_ISDIR",
        "os._fspath",
        "<builtin>.open",
        "ntpath.samestat",
        "posixpath.samestat",
        "<builtin>.hasattr"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "posixpath.samestat": [],
    "ntpath.samestat": [],
    "os._fwalk": [
        "os._fwalk",
        "posixpath.join",
        "ntpath.join",
        "<builtin>.zip",
        "<builtin>.open",
        "ntpath.samestat",
        "posixpath.samestat"
    ],
    "os.execl": [],
    "os.execle": [],
    "os.execlp": [
        "os.execvp"
    ],
    "os.execvp": [
        "os._execvpe"
    ],
    "os.execlpe": [
        "os.execvpe"
    ],
    "os.execvpe": [
        "os._execvpe"
    ],
    "os._execvpe": [
        "os.get_exec_path",
        "posixpath.join",
        "ntpath.join",
        "<builtin>.map",
        "ntpath.dirname",
        "posixpath.dirname"
    ],
    "os._Environ": [],
    "os._Environ.__init__": [],
    "os._Environ.__getitem__": [
        "os._createenviron.decode",
        "<builtin>.KeyError",
        "os._createenviron.check_str",
        "os._check_bytes"
    ],
    "os._createenviron.check_str": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "os._check_bytes": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "os._createenviron.decode": [],
    "os._Environ.__setitem__": [
        "os.<lambda1>",
        "os._createenviron.check_str",
        "os._check_bytes"
    ],
    "os.<lambda1>": [],
    "os._Environ.__delitem__": [
        "os.<lambda2>",
        "<builtin>.KeyError",
        "os._createenviron.check_str",
        "os._check_bytes"
    ],
    "os.<lambda2>": [
        "os.<lambda1>"
    ],
    "os._Environ.__iter__": [
        "os._createenviron.decode",
        "<builtin>.list"
    ],
    "os._Environ.__len__": [
        "<builtin>.len"
    ],
    "os._Environ.__repr__": [
        "os._createenviron.decode"
    ],
    "os._Environ.copy": [
        "<builtin>.dict"
    ],
    "os._Environ.setdefault": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.check_str",
        "sys.getfilesystemencoding"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.check_str"
    ],
    "sys.getfilesystemencoding": [],
    "os._createenviron.encode": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "os.getenv": [],
    "os.getenvb": [],
    "os._fscodec": [
        "sys.getfilesystemencodeerrors",
        "sys.getfilesystemencoding"
    ],
    "sys.getfilesystemencodeerrors": [],
    "os._fscodec.fsencode": [
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "os._fscodec.fsdecode": [
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "os._spawnvef": [
        "<builtin>.isinstance",
        "os.execvp",
        "posix._exit",
        "<builtin>.OSError",
        "nt._exit",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "os.execvpe"
    ],
    "posix._exit": [],
    "nt._exit": [],
    "<builtin>.OSError": [],
    "os.spawnv": [
        "os._spawnvef"
    ],
    "os.spawnve": [
        "os._spawnvef"
    ],
    "os.spawnvp": [
        "os._spawnvef"
    ],
    "os.spawnvpe": [
        "os._spawnvef"
    ],
    "os.spawnl": [
        "os.spawnv"
    ],
    "os.spawnle": [
        "os.spawnve"
    ],
    "os.spawnlp": [
        "os.spawnvp"
    ],
    "os.spawnlpe": [
        "os.spawnvpe"
    ],
    "subprocess.Popen.__init__": [
        "io.open",
        "<builtin>.filter",
        "<builtin>.isinstance",
        "subprocess.Popen._execute_child",
        "warnings.warn",
        "<builtin>.bool",
        "msvcrt.open_osfhandle",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "subprocess.Popen._get_handles",
        "<builtin>.hasattr",
        "io.TextIOWrapper",
        "subprocess._cleanup"
    ],
    "io.TextIOWrapper": [],
    "os._wrap_close.__init__": [],
    "os._wrap_close": [],
    "os._wrap_close.close": [
        "subprocess.Popen.wait"
    ],
    "subprocess.Popen.wait": [
        "subprocess.Popen._remaining_time",
        "<builtin>.min",
        "subprocess.Popen._wait",
        "time.monotonic"
    ],
    "os._wrap_close.__enter__": [],
    "os._wrap_close.__exit__": [
        "os._wrap_close.close"
    ],
    "os._wrap_close.__getattr__": [
        "<builtin>.getattr"
    ],
    "os._wrap_close.__iter__": [
        "<builtin>.iter"
    ],
    "io.open": [],
    "os.PathLike": [
        "abc.abstractmethod"
    ],
    "os.PathLike.__fspath__": [],
    "os.PathLike.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "os._AddedDllDirectory": [],
    "os._AddedDllDirectory.__init__": [],
    "os._AddedDllDirectory.close": [
        "nt._remove_dll_directory"
    ],
    "nt._remove_dll_directory": [],
    "os._AddedDllDirectory.__enter__": [],
    "os._AddedDllDirectory.__exit__": [
        "os._AddedDllDirectory.close"
    ],
    "os._AddedDllDirectory.__repr__": [],
    "os.add_dll_directory": [
        "os._AddedDllDirectory.__init__",
        "nt._add_dll_directory"
    ],
    "nt._add_dll_directory": [],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.normcase": [],
    "sys.base_prefix.endswith": [],
    "sys.executable.endswith": [],
    "sys.path.endswith": [],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "sys.path.rfind": [],
    "sys.executable.rfind": [],
    "sys.base_prefix.rfind": [],
    "posixpath.splitext": [
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "genericpath._splitext": [
        "sys.path.rfind",
        "sys.executable.rfind",
        "sys.base_prefix.rfind",
        "<builtin>.max"
    ],
    "posixpath.splitdrive": [],
    "sys.stdin.buffer.rfind": [],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "posixpath.lexists": [],
    "posixpath.ismount": [
        "posixpath.join",
        "<builtin>.isinstance",
        "stat.S_ISLNK",
        "posixpath.realpath"
    ],
    "posixpath.realpath": [
        "posixpath.abspath",
        "posixpath._joinrealpath"
    ],
    "sys.executable.find": [],
    "sys.path.find": [],
    "sys.base_prefix.find": [],
    "pwd.getpwuid": [],
    "pwd.getpwnam": [],
    "posixpath.normpath": [
        "<builtin>.isinstance",
        "sys.base_prefix.split",
        "sys.path.startswith",
        "sys.executable.startswith",
        "sys.path.split",
        "sys.base_prefix.startswith",
        "sys.executable.split"
    ],
    "posixpath.abspath": [
        "posixpath.normpath",
        "posixpath.join",
        "posixpath.isabs",
        "<builtin>.isinstance"
    ],
    "posixpath._joinrealpath": [
        "posixpath.split",
        "<builtin>.isinstance",
        "sys.executable.partition",
        "posixpath.join",
        "posixpath._joinrealpath",
        "sys.path.partition",
        "posixpath.islink",
        "posixpath.isabs",
        "sys.base_prefix.partition"
    ],
    "sys.path.partition": [],
    "sys.base_prefix.partition": [],
    "sys.executable.partition": [],
    "genericpath.commonprefix": [
        "<builtin>.max",
        "<builtin>.isinstance",
        "<builtin>.min",
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.enumerate"
    ],
    "posixpath.commonpath": [
        "<builtin>.isinstance",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "genericpath._check_arg_types"
    ],
    "genericpath.exists": [],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "genericpath.getsize": [],
    "genericpath.getmtime": [],
    "genericpath.getatime": [],
    "genericpath.getctime": [],
    "genericpath.samestat": [],
    "genericpath.samefile": [
        "genericpath.samestat"
    ],
    "genericpath.sameopenfile": [
        "genericpath.samestat"
    ],
    "stat.S_IMODE": [],
    "stat.S_IFMT": [],
    "stat.S_ISCHR": [
        "stat.S_IFMT"
    ],
    "stat.S_ISBLK": [
        "stat.S_IFMT"
    ],
    "stat.S_ISFIFO": [
        "stat.S_IFMT"
    ],
    "stat.S_ISSOCK": [
        "stat.S_IFMT"
    ],
    "stat.S_ISDOOR": [],
    "stat.S_ISPORT": [],
    "stat.S_ISWHT": [],
    "stat.filemode": [],
    "os.path._get_sep": [
        "<builtin>.isinstance"
    ],
    "os.path.normcase": [],
    "os.path.isabs": [
        "os.path._get_sep"
    ],
    "os.path.join": [
        "<builtin>.map",
        "os.path._get_sep",
        "genericpath._check_arg_types"
    ],
    "os.path.split": [
        "<builtin>.len",
        "os.path._get_sep"
    ],
    "os.path.splitext": [
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "os.path.splitdrive": [],
    "os.path.basename": [
        "os.path._get_sep"
    ],
    "os.path.dirname": [
        "<builtin>.len",
        "os.path._get_sep"
    ],
    "os.path.islink": [
        "stat.S_ISLNK"
    ],
    "os.path.lexists": [],
    "os.path.ismount": [
        "os.path.realpath",
        "os.path.join",
        "<builtin>.isinstance",
        "stat.S_ISLNK"
    ],
    "os.path.realpath": [
        "os.path.abspath",
        "os.path._joinrealpath"
    ],
    "os.path.expanduser": [
        "<builtin>.isinstance",
        "os.path._get_sep",
        "pwd.getpwnam",
        "pwd.getpwuid",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "os.path.normpath": [
        "posixpath.split",
        "<builtin>.isinstance",
        "ntpath.split"
    ],
    "os.path.abspath": [
        "os.path.normpath",
        "os.path.join",
        "<builtin>.isinstance",
        "os.path.isabs"
    ],
    "os.path._joinrealpath": [
        "os.path._joinrealpath",
        "<builtin>.isinstance",
        "os.path.join",
        "os.path.islink",
        "os.path.split",
        "os.path.isabs"
    ],
    "os.path.relpath": [
        "os.path.abspath",
        "<builtin>.isinstance",
        "os.path.join",
        "<builtin>.ValueError",
        "genericpath._check_arg_types",
        "genericpath.commonprefix",
        "<builtin>.len"
    ],
    "os.path.commonpath": [
        "posixpath.split",
        "<builtin>.isinstance",
        "ntpath.split",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "genericpath._check_arg_types"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.normcase": [
        "sys.base_prefix.replace",
        "sys.executable.replace",
        "<builtin>.isinstance",
        "sys.path.replace"
    ],
    "sys.base_prefix.replace": [],
    "sys.executable.replace": [],
    "sys.path.replace": [],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "sys.base_prefix.replace",
        "sys.stdin.buffer.replace",
        "<builtin>.len",
        "sys.executable.replace",
        "sys.path.replace"
    ],
    "sys.stdin.buffer.replace": [],
    "ntpath.splitext": [
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "ntpath.lexists": [],
    "ntpath.ismount": [
        "ntpath._get_bothseps",
        "ntpath.splitdrive",
        "ntpath._abspath_fallback",
        "sys.executable.rstrip",
        "nt._getvolumepathname"
    ],
    "ntpath._abspath_fallback": [
        "ntpath.normpath",
        "ntpath.isabs",
        "ntpath.join",
        "<builtin>.isinstance"
    ],
    "sys.executable.rstrip": [],
    "nt._getvolumepathname": [],
    "ntpath.normpath": [
        "sys.executable.split",
        "<builtin>.len",
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "sys.path.lstrip",
        "sys.path.startswith",
        "sys.base_prefix.split",
        "sys.executable.startswith",
        "sys.path.split",
        "sys.base_prefix.startswith",
        "sys.executable.lstrip",
        "sys.base_prefix.replace",
        "sys.base_prefix.lstrip",
        "sys.executable.replace",
        "sys.path.replace"
    ],
    "sys.executable.lstrip": [],
    "sys.base_prefix.lstrip": [],
    "sys.path.lstrip": [],
    "ntpath.abspath": [
        "nt._getfullpathname",
        "ntpath.normpath",
        "ntpath._abspath_fallback"
    ],
    "nt._getfullpathname": [],
    "ntpath._readlink_deep": [
        "ntpath.normpath",
        "ntpath.join",
        "ntpath.normcase",
        "<builtin>.set",
        "ntpath.isabs",
        "ntpath.dirname",
        "ntpath.islink",
        "nt.readlink"
    ],
    "nt.readlink": [],
    "ntpath._getfinalpathname_nonstrict": [
        "ntpath.join",
        "ntpath.split",
        "ntpath._readlink_deep",
        "nt._getfinalpathname"
    ],
    "nt._getfinalpathname": [],
    "ntpath.realpath": [
        "ntpath.normpath",
        "<builtin>.isinstance",
        "sys.path.startswith",
        "nt._getfinalpathname",
        "sys.executable.startswith",
        "ntpath.join",
        "ntpath.normcase",
        "ntpath.isabs",
        "ntpath._getfinalpathname_nonstrict",
        "sys.base_prefix.startswith",
        "<builtin>.len"
    ],
    "sys.getwindowsversion": [],
    "ntpath.commonpath": [
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "genericpath._check_arg_types",
        "<builtin>.len"
    ],
    "string.capwords": [],
    "string._TemplateMetaclass": [],
    "string._TemplateMetaclass.__init__": [
        "re.compile",
        "<builtin>.super",
        "re.escape"
    ],
    "string.Template": [],
    "string.Template.__init__": [],
    "string.Template._invalid": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "string.Template.substitute": [
        "collections.ChainMap.__init__"
    ],
    "string.Template.substitute.convert": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "string.Template.safe_substitute": [
        "collections.ChainMap.__init__"
    ],
    "string.Template.safe_substitute.convert": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "string.Formatter": [],
    "string.Formatter.format": [],
    "string.Formatter.vformat": [
        "<builtin>.set",
        "string.Formatter._vformat",
        "string.Formatter.check_unused_args"
    ],
    "string.Formatter._vformat": [
        "string.Formatter.convert_field",
        "<builtin>.ValueError",
        "<builtin>.str",
        "string.Formatter.parse",
        "string.Formatter._vformat",
        "string.Formatter.format_field",
        "string.Formatter.get_field"
    ],
    "string.Formatter.check_unused_args": [],
    "string.Formatter.parse": [
        "_string.formatter_parser"
    ],
    "string.Formatter.get_field": [
        "<builtin>.getattr",
        "_string.formatter_field_name_split",
        "string.Formatter.get_value"
    ],
    "string.Formatter.convert_field": [
        "<builtin>.ascii",
        "<builtin>.repr",
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "string.Formatter.format_field": [
        "string.Formatter.format"
    ],
    "string.Formatter.get_value": [
        "<builtin>.isinstance"
    ],
    "<builtin>.ascii": [],
    "_string.formatter_parser": [],
    "_string.formatter_field_name_split": [],
    "subprocess.SubprocessError": [],
    "subprocess.CalledProcessError": [],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CalledProcessError.__str__": [],
    "subprocess.CalledProcessError.stdout": [],
    "subprocess.TimeoutExpired": [],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.TimeoutExpired.__str__": [],
    "subprocess.TimeoutExpired.stdout": [],
    "subprocess.STARTUPINFO": [],
    "subprocess.STARTUPINFO.__init__": [],
    "subprocess.STARTUPINFO.copy": [
        "<builtin>.list",
        "subprocess.STARTUPINFO.__init__"
    ],
    "subprocess.Handle": [],
    "subprocess.Handle.Close": [],
    "subprocess.Handle.Detach": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "subprocess.Handle.__repr__": [
        "<builtin>.int"
    ],
    "subprocess._cleanup": [],
    "subprocess._optim_args_from_interpreter_flags": [],
    "subprocess._args_from_interpreter_flags": [
        "subprocess._optim_args_from_interpreter_flags",
        "<builtin>.getattr"
    ],
    "subprocess.call": [
        "subprocess.Popen.__init__"
    ],
    "subprocess.check_call": [
        "subprocess.CalledProcessError.__init__",
        "subprocess.call"
    ],
    "subprocess.check_output": [
        "subprocess.run",
        "<builtin>.ValueError"
    ],
    "subprocess.run": [
        "subprocess.CompletedProcess.__init__",
        "<builtin>.ValueError",
        "subprocess.CalledProcessError.__init__",
        "subprocess.Popen.__init__"
    ],
    "subprocess.CompletedProcess": [],
    "subprocess.CompletedProcess.__init__": [],
    "subprocess.CompletedProcess.__repr__": [
        "<builtin>.type"
    ],
    "subprocess.CompletedProcess.check_returncode": [
        "subprocess.CalledProcessError.__init__"
    ],
    "subprocess.list2cmdline": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "subprocess.getstatusoutput": [
        "subprocess.check_output"
    ],
    "subprocess.getoutput": [
        "subprocess.getstatusoutput"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.tuple"
    ],
    "subprocess.Popen": [],
    "subprocess.Popen._get_handles": [
        "_winapi.CloseHandle",
        "<builtin>.isinstance",
        "_winapi.GetStdHandle",
        "_winapi.CreatePipe",
        "sys.__stdout__.fileno",
        "subprocess.Popen._get_devnull",
        "msvcrt.get_osfhandle",
        "subprocess.Popen._make_inheritable"
    ],
    "msvcrt.open_osfhandle": [],
    "subprocess.Popen._execute_child": [
        "os.get_exec_path",
        "sys.audit",
        "<builtin>.issubclass",
        "<builtin>.int",
        "subprocess.STARTUPINFO.copy",
        "<builtin>.isinstance",
        "warnings.warn",
        "ntpath.dirname",
        "<builtin>.set",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "_winapi.CreateProcess",
        "subprocess.Popen._posix_spawn",
        "_winapi.CloseHandle",
        "<builtin>.bool",
        "<builtin>.ValueError",
        "subprocess.Popen._filter_handle_list",
        "<builtin>.sorted",
        "posixpath.dirname",
        "<builtin>.getattr",
        "<builtin>.list",
        "subprocess.list2cmdline",
        "posixpath.join",
        "ntpath.join",
        "<builtin>.tuple",
        "<builtin>.map",
        "subprocess.Popen._handle_exitstatus",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.len",
        "subprocess.STARTUPINFO.__init__",
        "<builtin>.bytearray"
    ],
    "<builtin>.filter": [],
    "subprocess.Popen.universal_newlines": [
        "<builtin>.bool"
    ],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [
        "gzip.GzipFile.close",
        "subprocess.Popen.wait",
        "bz2.BZ2File.close",
        "asyncio.windows_utils.PipeHandle.close",
        "subprocess.Popen._wait",
        "lzma.LZMAFile.close"
    ],
    "subprocess.Popen._wait": [
        "_winapi.GetExitCodeProcess",
        "<builtin>.min",
        "subprocess.TimeoutExpired.__init__",
        "subprocess.Popen._remaining_time",
        "_winapi.WaitForSingleObject",
        "subprocess.Popen._handle_exitstatus",
        "subprocess.Popen._try_wait",
        "time.sleep",
        "time.monotonic",
        "<builtin>.int"
    ],
    "subprocess.Popen.__del__": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._stdin_write": [
        "gzip.GzipFile.close",
        "gzip.GzipFile.write",
        "bz2.BZ2File.write",
        "bz2.BZ2File.close",
        "asyncio.windows_utils.PipeHandle.close",
        "lzma.LZMAFile.close",
        "lzma.LZMAFile.write"
    ],
    "gzip.GzipFile.write": [
        "gzip.GzipFile.write",
        "_compression.BaseStream._check_not_closed",
        "<builtin>.isinstance",
        "<builtin>.memoryview",
        "sys.executable.write",
        "<builtin>.OSError",
        "sys.path.write",
        "sys.stdin.buffer.write",
        "<builtin>.ValueError",
        "sys.base_prefix.write",
        "sys.stdout.buffer.write",
        "<builtin>.len"
    ],
    "bz2.BZ2File.write": [
        "<builtin>.len",
        "sys.path.write",
        "sys.base_prefix.write",
        "_compression.BaseStream._check_can_write",
        "sys.executable.write"
    ],
    "lzma.LZMAFile.write": [
        "<builtin>.len",
        "sys.path.write",
        "sys.base_prefix.write",
        "_compression.BaseStream._check_can_write",
        "sys.executable.write"
    ],
    "subprocess.Popen.communicate": [
        "gzip.GzipFile.close",
        "subprocess.Popen._communicate",
        "subprocess.Popen.wait",
        "bz2.BZ2File.close",
        "<builtin>.min",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._stdin_write",
        "bz2.BZ2File.read",
        "asyncio.windows_utils.PipeHandle.close",
        "lzma.LZMAFile.read",
        "subprocess.Popen._wait",
        "<builtin>.ValueError",
        "gzip.GzipFile.read",
        "time.monotonic",
        "lzma.LZMAFile.close"
    ],
    "gzip.GzipFile.read": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.read": [
        "_compression.BaseStream._check_can_read"
    ],
    "bz2.BZ2File.read": [
        "_compression.BaseStream._check_can_read"
    ],
    "subprocess.Popen._communicate": [
        "threading.Thread.is_alive",
        "subprocess.Popen.wait",
        "subprocess.Popen._remaining_time",
        "threading.Thread.start",
        "<builtin>.RuntimeError",
        "subprocess.Popen._translate_newlines",
        "lzma.LZMAFile.close",
        "threading.Thread.join",
        "bz2.BZ2File.close",
        "subprocess.Popen._stdin_write",
        "_io._IOBase.flush",
        "selectors._PollLikeSelector.__init__",
        "<builtin>.hasattr",
        "gzip.GzipFile.close",
        "<builtin>.memoryview",
        "_io._BufferedIOBase.flush",
        "threading._DummyThread.is_alive",
        "threading._DummyThread.join",
        "asyncio.windows_utils.PipeHandle.close",
        "gzip.GzipFile.flush",
        "threading.Thread.__init__",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._check_timeout",
        "subprocess.TimeoutExpired.__init__",
        "<builtin>.len",
        "subprocess.Popen._save_input"
    ],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr",
        "contextlib._BaseExitStack.__init__"
    ],
    "contextlib._BaseExitStack.__init__": [],
    "_winapi.GetStdHandle": [],
    "_winapi.CreatePipe": [],
    "_winapi.CloseHandle": [],
    "msvcrt.get_osfhandle": [],
    "subprocess.Popen._make_inheritable": [
        "_winapi.GetCurrentProcess",
        "_winapi.DuplicateHandle"
    ],
    "_winapi.GetCurrentProcess": [],
    "_winapi.DuplicateHandle": [],
    "subprocess.Popen._filter_handle_list": [
        "<builtin>.list",
        "_winapi.GetFileType"
    ],
    "_winapi.GetFileType": [],
    "sys.audit": [],
    "_winapi.CreateProcess": [],
    "_winapi.WaitForSingleObject": [],
    "_winapi.GetExitCodeProcess": [],
    "subprocess.Popen._readerthread": [],
    "threading._DummyThread.join": [],
    "threading.Thread.join": [
        "threading.Thread._wait_for_tstate_lock",
        "<builtin>.max",
        "threading.Event.is_set",
        "threading.current_thread",
        "<builtin>.RuntimeError"
    ],
    "threading._DummyThread.is_alive": [
        "threading.Event.is_set"
    ],
    "threading.Thread.is_alive": [
        "threading.Thread._wait_for_tstate_lock",
        "threading.Event.is_set"
    ],
    "subprocess.Popen.send_signal": [
        "<builtin>.ValueError",
        "subprocess.Popen.terminate"
    ],
    "subprocess.Popen.terminate": [
        "_winapi.TerminateProcess",
        "subprocess.Popen.send_signal",
        "_winapi.GetExitCodeProcess"
    ],
    "_winapi.TerminateProcess": [],
    "sys.__stdout__.fileno": [],
    "subprocess.Popen._posix_spawn": [
        "<builtin>.getattr",
        "subprocess.Popen._close_pipe_fds"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "subprocess.Popen._try_wait": [],
    "time.sleep": [],
    "_io._IOBase.flush": [],
    "gzip.GzipFile.flush": [
        "gzip.GzipFile.write",
        "_compression.BaseStream._check_not_closed",
        "sys.stdin.buffer.flush",
        "sys.stdout.buffer.flush",
        "sys.path.write",
        "sys.stdin.buffer.write",
        "sys.path.flush",
        "sys.executable.flush",
        "sys.base_prefix.flush",
        "sys.base_prefix.write",
        "sys.stdout.buffer.write",
        "gzip.GzipFile.flush",
        "sys.executable.write"
    ],
    "_io._BufferedIOBase.flush": [],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "selectors._PollLikeSelector.__init__": [
        "<builtin>.super"
    ],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "selectors._fileobj_to_fd": [
        "<builtin>.ValueError",
        "<builtin>.int",
        "<builtin>.isinstance",
        "sys.platform.fileno"
    ],
    "sys.platform.fileno": [],
    "selectors._SelectorMapping": [],
    "selectors._SelectorMapping.__init__": [],
    "selectors._SelectorMapping.__len__": [
        "<builtin>.len"
    ],
    "selectors._SelectorMapping.__getitem__": [
        "<builtin>.KeyError",
        "selectors._BaseSelectorImpl._fileobj_lookup"
    ],
    "selectors._BaseSelectorImpl._fileobj_lookup": [
        "selectors._fileobj_to_fd"
    ],
    "selectors._SelectorMapping.__iter__": [
        "<builtin>.iter"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors.BaseSelector.register": [],
    "selectors.BaseSelector.unregister": [],
    "selectors.BaseSelector.modify": [
        "selectors.BaseSelector.register",
        "selectors.SelectSelector.unregister",
        "selectors.BaseSelector.unregister",
        "selectors.SelectSelector.register"
    ],
    "selectors.SelectSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.register": [
        "<builtin>.super"
    ],
    "selectors.BaseSelector.select": [],
    "selectors.BaseSelector.close": [],
    "selectors.BaseSelector.get_key": [
        "selectors.BaseSelector.get_map",
        "<builtin>.RuntimeError",
        "<builtin>.KeyError"
    ],
    "selectors.BaseSelector.get_map": [],
    "selectors.BaseSelector.__enter__": [],
    "selectors.BaseSelector.__exit__": [
        "selectors.BaseSelector.close"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors._BaseSelectorImpl.__init__": [
        "selectors._SelectorMapping.__init__"
    ],
    "selectors._BaseSelectorImpl.register": [
        "<builtin>.ValueError",
        "<builtin>.KeyError",
        "selectors._BaseSelectorImpl._fileobj_lookup"
    ],
    "selectors._BaseSelectorImpl.unregister": [
        "<builtin>.KeyError",
        "selectors._BaseSelectorImpl._fileobj_lookup"
    ],
    "selectors._BaseSelectorImpl.modify": [
        "selectors.SelectSelector.unregister",
        "selectors._BaseSelectorImpl.register",
        "selectors.SelectSelector.register",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "selectors._BaseSelectorImpl.unregister",
        "<builtin>.KeyError"
    ],
    "selectors._BaseSelectorImpl.close": [],
    "selectors._BaseSelectorImpl.get_map": [],
    "selectors._BaseSelectorImpl._key_from_fd": [],
    "selectors.SelectSelector": [],
    "selectors.SelectSelector._select": [],
    "selectors.SelectSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd",
        "selectors.SelectSelector._select",
        "<builtin>.set",
        "<builtin>.max"
    ],
    "selectors._PollLikeSelector": [],
    "selectors._PollLikeSelector.register": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.modify": [
        "<builtin>.super",
        "<builtin>.KeyError",
        "selectors._BaseSelectorImpl._fileobj_lookup"
    ],
    "selectors._PollLikeSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd"
    ],
    "selectors.PollSelector": [],
    "selectors.EpollSelector": [],
    "selectors.EpollSelector.fileno": [],
    "selectors.EpollSelector.select": [
        "<builtin>.len",
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.max"
    ],
    "selectors.EpollSelector.close": [
        "<builtin>.super"
    ],
    "selectors.DevpollSelector": [],
    "selectors.DevpollSelector.fileno": [],
    "selectors.DevpollSelector.close": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector": [],
    "selectors.KqueueSelector.__init__": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.fileno": [],
    "selectors.KqueueSelector.register": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.select": [
        "<builtin>.len",
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.max"
    ],
    "selectors.KqueueSelector.close": [
        "<builtin>.super"
    ],
    "signal.<lambda1>": [],
    "signal.<lambda2>": [],
    "signal.<lambda3>": [],
    "signal._int_to_enum": [],
    "signal._enum_to_int": [
        "<builtin>.int"
    ],
    "signal.signal": [
        "signal._enum_to_int",
        "_signal.signal",
        "signal._int_to_enum"
    ],
    "_signal.signal": [],
    "signal.getsignal": [
        "_signal.getsignal",
        "signal._int_to_enum"
    ],
    "_signal.getsignal": [],
    "signal.pthread_sigmask": [
        "<builtin>.set",
        "_signal.pthread_sigmask",
        "signal._int_to_enum"
    ],
    "_signal.pthread_sigmask": [],
    "signal.sigpending": [
        "_signal.sigpending",
        "signal._int_to_enum"
    ],
    "_signal.sigpending": [],
    "signal.sigwait": [
        "_signal.sigwait",
        "signal._int_to_enum"
    ],
    "_signal.sigwait": [],
    "signal.valid_signals": [
        "_signal.valid_signals",
        "signal._int_to_enum"
    ],
    "_signal.valid_signals": [],
    "threading.setprofile": [],
    "threading.settrace": [],
    "threading.RLock": [
        "threading._RLock.__init__",
        "_thread.RLock"
    ],
    "threading._RLock.__init__": [
        "_thread.allocate_lock"
    ],
    "threading._RLock": [],
    "_thread.allocate_lock": [],
    "threading._RLock.__repr__": [
        "<builtin>.hex",
        "<builtin>.id"
    ],
    "threading._RLock.acquire": [
        "_thread.get_ident"
    ],
    "_thread.get_ident": [],
    "threading._RLock.release": [
        "_thread.get_ident",
        "<builtin>.RuntimeError"
    ],
    "threading._RLock.__exit__": [
        "threading._RLock.release"
    ],
    "threading._RLock._acquire_restore": [],
    "threading._RLock._release_save": [
        "<builtin>.RuntimeError"
    ],
    "threading._RLock._is_owned": [
        "_thread.get_ident"
    ],
    "threading.Condition": [],
    "threading.Condition.__enter__": [],
    "threading.Condition.__exit__": [],
    "threading.Condition.__repr__": [
        "<builtin>.len"
    ],
    "threading.Condition._release_save": [],
    "threading.Condition._acquire_restore": [],
    "threading.Condition._is_owned": [],
    "threading.Condition.wait_for": [
        "time.monotonic",
        "threading.Condition.wait"
    ],
    "itertools.islice": [],
    "threading.Semaphore": [],
    "threading.Semaphore.__exit__": [
        "threading.Semaphore.release"
    ],
    "threading.BoundedSemaphore": [],
    "threading.BoundedSemaphore.__init__": [
        "threading.Semaphore.__init__"
    ],
    "threading.BoundedSemaphore.release": [
        "<builtin>.ValueError",
        "threading.Condition.notify"
    ],
    "threading.Event": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__",
        "_thread.allocate_lock"
    ],
    "threading.Event._reset_internal_locks": [
        "threading.Condition.__init__",
        "_thread.allocate_lock"
    ],
    "threading.Event.is_set": [],
    "threading.Event.set": [
        "threading.Condition.notify_all"
    ],
    "threading.Event.clear": [],
    "threading.Event.wait": [
        "threading.Condition.wait"
    ],
    "threading.Barrier": [],
    "threading.Barrier.__init__": [
        "threading.Condition.__init__",
        "_thread.allocate_lock"
    ],
    "threading.Barrier.wait": [
        "threading.Barrier._exit",
        "threading.Barrier._release",
        "threading.Barrier._wait",
        "threading.Barrier._enter"
    ],
    "threading.Barrier._enter": [
        "threading.Condition.wait"
    ],
    "threading.Barrier._release": [
        "threading.Barrier._break",
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._wait": [
        "threading.Barrier._break",
        "threading.Condition.wait_for"
    ],
    "threading.Barrier._exit": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._break": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._wait.<lambda1>": [],
    "threading.Barrier.reset": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier.abort": [
        "threading.Barrier._break"
    ],
    "threading.Barrier.parties": [],
    "threading.Barrier.n_waiting": [],
    "threading.Barrier.broken": [],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "threading._newname": [],
    "threading.Thread": [],
    "threading.current_thread": [
        "_thread.get_ident",
        "threading._DummyThread.__init__"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "threading.Thread._reset_internal_locks": [
        "threading.Event._reset_internal_locks",
        "threading.Thread._set_tstate_lock"
    ],
    "threading.Thread._set_tstate_lock": [
        "_thread._set_sentinel"
    ],
    "threading.Thread.__repr__": [
        "threading._DummyThread.is_alive",
        "threading.Thread.is_alive",
        "threading.Event.is_set"
    ],
    "_thread.start_new_thread": [],
    "threading.Thread.run": [
        "paramiko.server.SubsystemHandler._run",
        "socketserver.ThreadingMixIn.process_request_thread",
        "sshtunnel.SSHTunnelForwarder._serve_forever_wrapper",
        "subprocess.Popen._readerthread",
        "paramiko.agent.AgentProxyThread.run",
        "paramiko.sftp_file.SFTPFile._prefetch_thread"
    ],
    "paramiko.server.SubsystemHandler._run": [
        "paramiko.util.tb_strings",
        "paramiko.server.SubsystemHandler.finish_subsystem",
        "paramiko.server.SubsystemHandler.start_subsystem"
    ],
    "socketserver.ThreadingMixIn.process_request_thread": [],
    "paramiko.agent.AgentProxyThread.run": [
        "<builtin>.isinstance",
        "paramiko.agent.AgentProxyThread._communicate",
        "paramiko.agent.AgentRemoteProxy.get_connection",
        "paramiko.transport.Transport.connect",
        "paramiko.agent.AgentLocalProxy.get_connection",
        "<builtin>.hasattr"
    ],
    "paramiko.sftp_file.SFTPFile._prefetch_thread": [
        "paramiko.sftp_client.SFTPClient._async_request",
        "<builtin>.int"
    ],
    "threading.Thread._bootstrap": [
        "threading.Thread._bootstrap_inner"
    ],
    "threading.Thread._bootstrap_inner": [
        "_thread.get_ident",
        "threading._make_invoke_excepthook.invoke_excepthook",
        "paramiko.transport.Transport.run",
        "threading.Thread.run",
        "threading.Thread._set_native_id",
        "sys.settrace",
        "threading.Thread._set_tstate_lock",
        "threading.Timer.run",
        "sys.setprofile",
        "threading.Thread._set_ident",
        "threading.Event.set"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [
        "_thread.get_native_id"
    ],
    "_thread.get_native_id": [],
    "_thread._set_sentinel": [],
    "sys.setprofile": [],
    "paramiko.transport.Transport.run": [
        "paramiko.transport.Transport._log",
        "threading.Condition.notify",
        "paramiko.transport.Transport._send_kex_init",
        "paramiko.py3compat.b",
        "<builtin>.str",
        "<builtin>.type",
        "paramiko.transport.Transport._ensure_authed",
        "paramiko.packet.Packetizer.need_rekey",
        "paramiko.packet.Packetizer.complete_handshake",
        "<builtin>.hex",
        "paramiko.message.Message.__init__",
        "paramiko.transport.Transport._check_banner",
        "paramiko.packet.Packetizer.close",
        "<builtin>.repr",
        "paramiko.packet.Packetizer.write_all",
        "paramiko.packet.Packetizer.read_message",
        "paramiko.packet.Packetizer.start_handshake",
        "paramiko.transport.ChannelMap.values",
        "<builtin>.id",
        "paramiko.transport.Transport._send_message",
        "paramiko.transport.ChannelMap.get",
        "<builtin>.list",
        "paramiko.transport.Transport._parse_disconnect",
        "paramiko.transport.Transport._expect_packet",
        "paramiko.message.Message.add_byte",
        "paramiko.util.tb_strings",
        "<builtin>.tuple",
        "paramiko.message.Message.add_int",
        "paramiko.auth_handler.AuthHandler.abort",
        "<builtin>.len",
        "paramiko.transport.Transport._parse_debug",
        "threading.Event.set"
    ],
    "threading.Timer.run": [
        "paramiko.packet.Packetizer.read_timer",
        "threading.Event.wait",
        "threading.Event.set",
        "threading.Event.is_set"
    ],
    "threading._make_invoke_excepthook.invoke_excepthook": [
        "_thread._ExceptHookArgs",
        "sys.exc_info",
        "sys.excepthook",
        "_thread._excepthook"
    ],
    "threading.Thread._stop": [],
    "threading.Thread._delete": [
        "_thread.get_ident"
    ],
    "threading.Thread._wait_for_tstate_lock": [
        "threading.Thread._stop",
        "threading._DummyThread._stop"
    ],
    "threading._DummyThread._stop": [],
    "threading.Thread.name": [
        "<builtin>.str"
    ],
    "threading.Thread.ident": [],
    "threading.Thread.native_id": [],
    "threading.Thread.daemon": [
        "<builtin>.RuntimeError",
        "threading.Event.is_set"
    ],
    "threading.Thread.isDaemon": [],
    "threading.Thread.setDaemon": [],
    "threading.Thread.getName": [],
    "threading.Thread.setName": [],
    "threading.ExceptHookArgs": [],
    "threading.excepthook": [
        "<builtin>.print",
        "_thread.get_ident",
        "traceback.print_exception",
        "sys.stderr.flush"
    ],
    "sys.stderr.flush": [],
    "_thread._ExceptHookArgs": [],
    "_thread._excepthook": [],
    "sys.excepthook": [],
    "threading.Timer": [],
    "threading.Timer.__init__": [
        "threading.Thread.__init__",
        "threading.Event.__init__"
    ],
    "threading.Timer.cancel": [
        "threading.Event.set"
    ],
    "paramiko.packet.Packetizer.read_timer": [],
    "threading._MainThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread.__init__",
        "threading.Thread._set_native_id",
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_ident",
        "threading.Event.set"
    ],
    "threading._DummyThread": [],
    "threading._DummyThread.__init__": [
        "threading.Thread.__init__",
        "threading._newname",
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading.Event.set"
    ],
    "threading.active_count": [
        "<builtin>.len"
    ],
    "threading._enumerate": [
        "<builtin>.list"
    ],
    "threading.enumerate": [
        "<builtin>.list"
    ],
    "threading._shutdown": [
        "threading.Thread._stop",
        "threading._DummyThread._stop",
        "<builtin>.list"
    ],
    "threading.main_thread": [],
    "threading._after_fork": [
        "threading._MainThread.__init__",
        "_thread.get_ident",
        "threading._enumerate",
        "<builtin>.set",
        "<builtin>.len",
        "_thread.allocate_lock"
    ],
    "_threading_local._localimpl": [],
    "_threading_local._localimpl.__init__": [
        "<builtin>.id",
        "<builtin>.str"
    ],
    "_threading_local._localimpl.get_dict": [
        "<builtin>.id",
        "threading.current_thread"
    ],
    "_threading_local._localimpl.create_dict": [
        "<builtin>.id",
        "threading.current_thread",
        "_weakref.ref"
    ],
    "_threading_local._localimpl.create_dict.local_deleted": [],
    "_threading_local._localimpl.create_dict.thread_deleted": [],
    "contextlib.contextmanager": [
        "functools.wraps",
        "_functools.partial"
    ],
    "_threading_local._patch": [],
    "_threading_local.local": [],
    "_threading_local.local.__new__": [
        "_threading_local._localimpl.create_dict",
        "threading.RLock",
        "_threading_local._localimpl.__init__",
        "<builtin>.TypeError"
    ],
    "_threading_local.local.__getattribute__": [
        "_threading_local._patch"
    ],
    "_threading_local.local.__setattr__": [
        "<builtin>.AttributeError",
        "_threading_local._patch"
    ],
    "_threading_local.local.__delattr__": [
        "<builtin>.AttributeError",
        "_threading_local._patch"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakMethod.__new__": [
        "_weakref.ref.__new__",
        "_weakref.ref",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "weakref.WeakMethod.__new__._cb": [],
    "_weakref.ref.__new__": [],
    "weakref.WeakMethod.__call__": [
        "<builtin>.super",
        "_weakref.ref._meth_type",
        "_weakref.ref._func_ref"
    ],
    "_weakref.ref._func_ref": [],
    "_weakref.ref._meth_type": [],
    "weakref.WeakMethod.__eq__": [
        "_weakref.ref.__eq__",
        "<builtin>.isinstance"
    ],
    "_weakref.ref.__eq__": [],
    "weakref.WeakMethod.__ne__": [
        "<builtin>.isinstance",
        "_weakref.ref.__ne__"
    ],
    "_weakref.ref.__ne__": [],
    "weakref.WeakValueDictionary": [],
    "weakref.WeakValueDictionary.__init__": [
        "<builtin>.set"
    ],
    "weakref.WeakValueDictionary.__init__.remove": [
        "_weakref._remove_dead_weakref"
    ],
    "_weakref._remove_dead_weakref": [],
    "weakref.WeakValueDictionary._commit_removals": [
        "_weakref._remove_dead_weakref"
    ],
    "weakref.WeakValueDictionary.__getitem__": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.KeyError"
    ],
    "weakref.WeakValueDictionary.__delitem__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__len__": [
        "<builtin>.len",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__contains__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__repr__": [
        "<builtin>.id"
    ],
    "weakref.WeakValueDictionary.__setitem__": [
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "weakref.WeakValueDictionary.copy": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.WeakValueDictionary.__init__"
    ],
    "weakref.WeakValueDictionary.get": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.keys": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.itervaluerefs": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.values": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.pop": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.KeyError"
    ],
    "weakref.WeakValueDictionary.setdefault": [
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary.valuerefs": [
        "<builtin>.list",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.KeyedRef": [],
    "weakref.KeyedRef.__new__": [
        "_weakref.ref.__new__"
    ],
    "weakref.WeakKeyDictionary": [],
    "weakref.WeakKeyDictionary.__init__.remove": [],
    "weakref.WeakKeyDictionary._commit_removals": [],
    "weakref.WeakKeyDictionary._scrub_removals": [],
    "weakref.WeakKeyDictionary.__delitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__getitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__len__": [
        "<builtin>.len",
        "weakref.WeakKeyDictionary._scrub_removals"
    ],
    "weakref.WeakKeyDictionary.__repr__": [
        "<builtin>.id"
    ],
    "weakref.WeakKeyDictionary.__setitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.copy": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "weakref.WeakKeyDictionary.get": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__contains__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.keys": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.values": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.keyrefs": [
        "<builtin>.list"
    ],
    "weakref.WeakKeyDictionary.pop": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.setdefault": [
        "_weakref.ref"
    ],
    "weakref.finalize": [
        "weakref.finalize._Info",
        "itertools.count"
    ],
    "weakref.finalize._Info": [],
    "atexit.register": [],
    "weakref.finalize.__call__": [],
    "weakref.finalize.detach": [],
    "weakref.finalize.peek": [],
    "weakref.finalize.alive": [],
    "weakref.finalize.atexit": [
        "<builtin>.bool"
    ],
    "weakref.finalize.__repr__": [
        "<builtin>.id",
        "<builtin>.type"
    ],
    "weakref.finalize._select_for_exit": [],
    "weakref.finalize._select_for_exit.<lambda1>": [],
    "weakref.finalize._exitfunc": [
        "gc.isenabled",
        "weakref.finalize._select_for_exit",
        "gc.enable",
        "sys.exc_info",
        "sys.excepthook",
        "gc.disable"
    ],
    "gc.isenabled": [],
    "gc.disable": [],
    "gc.enable": [],
    "contextlib.AbstractContextManager": [
        "abc.abstractmethod"
    ],
    "contextlib.AbstractContextManager.__enter__": [],
    "contextlib.AbstractContextManager.__exit__": [],
    "contextlib.AbstractContextManager.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager.__aenter__": [],
    "contextlib.AbstractAsyncContextManager.__aexit__": [],
    "contextlib.AbstractAsyncContextManager.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib.ContextDecorator._recreate_cm": [],
    "contextlib.ContextDecorator.__call__": [
        "functools.wraps",
        "_functools.partial"
    ],
    "contextlib.ContextDecorator.__call__.inner": [
        "contextlib.ContextDecorator._recreate_cm",
        "contextlib._GeneratorContextManager._recreate_cm"
    ],
    "contextlib._GeneratorContextManager._recreate_cm": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManagerBase.__init__": [
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "contextlib._GeneratorContextManager": [],
    "contextlib._GeneratorContextManager.__enter__": [
        "<builtin>.next",
        "<builtin>.RuntimeError"
    ],
    "contextlib._GeneratorContextManager.__exit__": [
        "sys.exc_info",
        "<builtin>.next",
        "<builtin>.RuntimeError"
    ],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager.__aenter__": [
        "<builtin>.RuntimeError"
    ],
    "contextlib._AsyncGeneratorContextManager.__aexit__": [
        "<builtin>.isinstance",
        "<builtin>.RuntimeError"
    ],
    "contextlib.contextmanager.helper": [
        "contextlib._GeneratorContextManagerBase.__init__"
    ],
    "contextlib.asynccontextmanager": [
        "functools.wraps",
        "_functools.partial"
    ],
    "contextlib.asynccontextmanager.helper": [
        "contextlib._GeneratorContextManagerBase.__init__"
    ],
    "contextlib.closing": [],
    "contextlib.closing.__init__": [],
    "contextlib.closing.__enter__": [],
    "contextlib.closing.__exit__": [],
    "contextlib._RedirectStream": [],
    "contextlib._RedirectStream.__init__": [],
    "contextlib._RedirectStream.__enter__": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "contextlib._RedirectStream.__exit__": [
        "<builtin>.setattr"
    ],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib.suppress.__init__": [],
    "contextlib.suppress.__enter__": [],
    "contextlib.suppress.__exit__": [
        "<builtin>.issubclass"
    ],
    "contextlib._BaseExitStack": [],
    "contextlib._BaseExitStack._create_exit_wrapper": [],
    "contextlib._BaseExitStack._create_cb_wrapper": [],
    "contextlib._BaseExitStack._create_cb_wrapper._exit_wrapper": [
        "contextlib._BaseExitStack.callback"
    ],
    "contextlib._BaseExitStack.pop_all": [
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack.push": [
        "contextlib._BaseExitStack._push_cm_exit",
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack._push_exit_callback": [],
    "contextlib._BaseExitStack._push_cm_exit": [
        "contextlib._BaseExitStack._create_exit_wrapper",
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib._BaseExitStack.enter_context": [
        "contextlib._BaseExitStack._push_cm_exit",
        "<builtin>.type"
    ],
    "contextlib.ExitStack": [],
    "contextlib.ExitStack.__enter__": [],
    "contextlib.ExitStack.__exit__": [
        "sys.exc_info",
        "contextlib.ExitStack.__exit__._fix_exception_context"
    ],
    "contextlib.ExitStack.__exit__._fix_exception_context": [],
    "contextlib.ExitStack.close": [
        "contextlib.ExitStack.__exit__"
    ],
    "contextlib.AsyncExitStack": [],
    "contextlib.AsyncExitStack._create_async_exit_wrapper": [],
    "contextlib.AsyncExitStack._create_async_cb_wrapper": [],
    "contextlib.AsyncExitStack._create_async_cb_wrapper._exit_wrapper": [],
    "contextlib.AsyncExitStack.enter_async_context": [
        "contextlib.AsyncExitStack._push_async_cm_exit",
        "<builtin>.type"
    ],
    "contextlib.AsyncExitStack._push_async_cm_exit": [
        "contextlib._BaseExitStack._push_exit_callback",
        "contextlib.AsyncExitStack._create_async_exit_wrapper"
    ],
    "contextlib.AsyncExitStack.push_async_exit": [
        "contextlib._BaseExitStack._push_exit_callback",
        "contextlib.AsyncExitStack._push_async_cm_exit",
        "<builtin>.type"
    ],
    "contextlib.AsyncExitStack.aclose": [
        "contextlib.AsyncExitStack.__aexit__"
    ],
    "contextlib.AsyncExitStack.__aexit__": [
        "sys.exc_info",
        "contextlib.AsyncExitStack.__aexit__._fix_exception_context"
    ],
    "contextlib.AsyncExitStack.__aenter__": [],
    "contextlib.AsyncExitStack.__aexit__._fix_exception_context": [],
    "contextlib.nullcontext": [],
    "contextlib.nullcontext.__init__": [],
    "contextlib.nullcontext.__enter__": [],
    "contextlib.nullcontext.__exit__": [],
    "traceback.print_list": [
        "traceback.StackSummary.format",
        "<builtin>.print",
        "traceback.StackSummary.from_list"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted"
    ],
    "traceback.print_tb": [
        "traceback.print_list",
        "traceback.extract_tb"
    ],
    "traceback.extract_tb": [
        "traceback.walk_tb",
        "traceback.StackSummary.extract"
    ],
    "traceback.format_tb": [
        "traceback.extract_tb"
    ],
    "traceback.walk_tb": [],
    "traceback.StackSummary.extract": [
        "<builtin>.getattr",
        "linecache.lazycache",
        "<builtin>.set",
        "itertools.islice",
        "linecache.checkcache",
        "traceback.FrameSummary.__init__",
        "collections.deque"
    ],
    "traceback.TracebackException.__init__": [
        "<builtin>.id",
        "traceback.TracebackException._load_lines",
        "traceback.TracebackException.__init__",
        "traceback._some_str",
        "<builtin>.set",
        "traceback.StackSummary.extract",
        "<builtin>.issubclass",
        "<builtin>.str",
        "traceback.walk_tb",
        "<builtin>.type"
    ],
    "traceback.TracebackException.format": [
        "traceback.TracebackException.format",
        "traceback.TracebackException.format_exception_only"
    ],
    "traceback.format_exception": [
        "traceback.TracebackException.format",
        "<builtin>.list",
        "traceback.TracebackException.__init__",
        "<builtin>.type"
    ],
    "traceback.TracebackException.format_exception_only": [
        "traceback._format_final_exc_line",
        "<builtin>.min",
        "<builtin>.str",
        "<builtin>.issubclass",
        "<builtin>.len"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "traceback._some_str": [
        "<builtin>.str",
        "<builtin>.type"
    ],
    "traceback.print_exc": [
        "sys.exc_info",
        "traceback.print_exception"
    ],
    "traceback.format_exc": [
        "sys.exc_info",
        "traceback.format_exception"
    ],
    "traceback.print_last": [
        "traceback.print_exception",
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "traceback.print_stack": [
        "traceback.print_list",
        "sys._getframe",
        "traceback.extract_stack"
    ],
    "traceback.extract_stack": [
        "traceback.StackSummary.extract",
        "sys._getframe",
        "traceback.walk_stack"
    ],
    "traceback.format_stack": [
        "traceback.format_list",
        "sys._getframe",
        "traceback.extract_stack"
    ],
    "traceback.walk_stack": [
        "sys._getframe"
    ],
    "traceback.clear_frames": [],
    "traceback.FrameSummary": [],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "traceback.FrameSummary.__eq__": [
        "<builtin>.isinstance"
    ],
    "traceback.FrameSummary.__getitem__": [],
    "traceback.FrameSummary.__iter__": [
        "<builtin>.iter"
    ],
    "traceback.FrameSummary.__repr__": [],
    "traceback.FrameSummary.__len__": [],
    "traceback.FrameSummary.line": [
        "linecache.getline"
    ],
    "traceback.StackSummary": [],
    "collections.deque": [],
    "traceback.TracebackException": [],
    "traceback.TracebackException._load_lines": [
        "traceback.TracebackException._load_lines"
    ],
    "traceback.TracebackException.from_exception": [
        "traceback.TracebackException.__init__",
        "<builtin>.type"
    ],
    "traceback.TracebackException.__eq__": [],
    "traceback.TracebackException.__str__": [],
    "tracemalloc._format_size": [
        "<builtin>.abs"
    ],
    "<builtin>.abs": [],
    "tracemalloc.Statistic": [],
    "tracemalloc.Statistic.__init__": [],
    "tracemalloc.Statistic.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Statistic.__eq__": [],
    "tracemalloc.Statistic.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.Statistic.__repr__": [],
    "tracemalloc.Statistic._sort_key": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.StatisticDiff.__init__": [],
    "tracemalloc.StatisticDiff.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.StatisticDiff.__eq__": [],
    "tracemalloc.StatisticDiff.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.StatisticDiff.__repr__": [],
    "tracemalloc.StatisticDiff._sort_key": [
        "<builtin>.abs"
    ],
    "tracemalloc._compare_grouped_stats": [
        "tracemalloc.StatisticDiff.__init__"
    ],
    "tracemalloc.Frame": [],
    "tracemalloc.Frame.__init__": [],
    "tracemalloc.Frame.filename": [],
    "tracemalloc.Frame.lineno": [],
    "tracemalloc.Frame.__eq__": [],
    "tracemalloc.Frame.__lt__": [],
    "tracemalloc.Frame.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Frame.__str__": [],
    "tracemalloc.Frame.__repr__": [],
    "tracemalloc.Traceback": [],
    "tracemalloc.Traceback.__init__": [
        "<builtin>.reversed",
        "<builtin>.tuple"
    ],
    "tracemalloc.Traceback.__len__": [
        "<builtin>.len"
    ],
    "tracemalloc.Traceback.__getitem__": [
        "tracemalloc.Frame.__init__",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "tracemalloc.Traceback.__contains__": [],
    "tracemalloc.Traceback.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Traceback.__eq__": [],
    "tracemalloc.Traceback.__lt__": [],
    "tracemalloc.Traceback.__str__": [
        "<builtin>.str"
    ],
    "tracemalloc.Traceback.__repr__": [
        "<builtin>.tuple"
    ],
    "tracemalloc.Traceback.format": [
        "<builtin>.reversed",
        "linecache.getline"
    ],
    "_tracemalloc._get_object_traceback": [],
    "tracemalloc.Trace": [],
    "tracemalloc.Trace.__init__": [],
    "tracemalloc.Trace.domain": [],
    "tracemalloc.Trace.size": [],
    "tracemalloc.Trace.traceback": [
        "tracemalloc.Traceback.__init__"
    ],
    "tracemalloc.Trace.__eq__": [],
    "tracemalloc.Trace.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Trace.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.Trace.__repr__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc._Traces.__init__": [],
    "tracemalloc._Traces.__len__": [
        "<builtin>.len"
    ],
    "tracemalloc._Traces.__getitem__": [
        "tracemalloc.Trace.__init__",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "tracemalloc._Traces.__contains__": [],
    "tracemalloc._Traces.__eq__": [],
    "tracemalloc._Traces.__repr__": [
        "<builtin>.len"
    ],
    "tracemalloc._normalize_filename": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.BaseFilter.__init__": [],
    "tracemalloc.BaseFilter._match": [],
    "tracemalloc.Filter": [],
    "tracemalloc.Filter.__init__": [
        "tracemalloc._normalize_filename",
        "<builtin>.super"
    ],
    "tracemalloc.Filter.filename_pattern": [],
    "tracemalloc.Filter._match_frame_impl": [
        "tracemalloc._normalize_filename"
    ],
    "tracemalloc.Filter._match_frame": [
        "tracemalloc.Filter._match_frame_impl"
    ],
    "tracemalloc.Filter._match_traceback": [
        "tracemalloc.Filter._match_frame_impl",
        "tracemalloc.Filter._match_frame",
        "<builtin>.any"
    ],
    "tracemalloc.Filter._match": [
        "tracemalloc.Filter._match_traceback"
    ],
    "tracemalloc.DomainFilter": [],
    "tracemalloc.DomainFilter.__init__": [
        "<builtin>.super"
    ],
    "tracemalloc.DomainFilter.domain": [],
    "tracemalloc.DomainFilter._match": [],
    "tracemalloc.Snapshot": [],
    "tracemalloc.Snapshot.__init__": [
        "tracemalloc._Traces.__init__"
    ],
    "tracemalloc.Snapshot.dump": [
        "<builtin>.open"
    ],
    "tracemalloc.Snapshot.load": [
        "<builtin>.open"
    ],
    "tracemalloc.Snapshot._filter_trace": [
        "<builtin>.any"
    ],
    "tracemalloc.Snapshot.filter_traces": [
        "<builtin>.isinstance",
        "tracemalloc.Snapshot._filter_trace",
        "tracemalloc.Snapshot.__init__",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "tracemalloc.Snapshot._group_by": [
        "tracemalloc.Traceback.__init__",
        "tracemalloc.Statistic.__init__",
        "<builtin>.ValueError"
    ],
    "tracemalloc.Snapshot.statistics": [
        "tracemalloc.Snapshot._group_by",
        "<builtin>.list"
    ],
    "tracemalloc.Snapshot.compare_to": [
        "tracemalloc.Snapshot._group_by",
        "tracemalloc._compare_grouped_stats"
    ],
    "tracemalloc.take_snapshot": [
        "tracemalloc.Snapshot.__init__",
        "<builtin>.RuntimeError",
        "_tracemalloc._get_traces"
    ],
    "_tracemalloc._get_traces": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "pickle._Stop.__init__": [],
    "pickle._Framer": [],
    "pickle._Framer.__init__": [],
    "pickle._Framer.start_framing": [
        "io.BytesIO"
    ],
    "io.BytesIO": [],
    "pickle._Framer.end_framing": [
        "pickle._Framer.commit_frame"
    ],
    "pickle._Framer.commit_frame": [
        "<builtin>.len",
        "io.BytesIO"
    ],
    "pickle._Framer.write": [],
    "pickle._Framer.write_large_bytes": [
        "pickle._Framer.commit_frame"
    ],
    "pickle._Unframer": [],
    "pickle._Unframer.__init__": [],
    "pickle._Unframer.readinto": [
        "<builtin>.len"
    ],
    "pickle._Unframer.read": [
        "<builtin>.len"
    ],
    "pickle._Unframer.readline": [],
    "pickle._Unframer.load_frame": [
        "io.BytesIO"
    ],
    "pickle._getattribute": [
        "<builtin>.AttributeError",
        "<builtin>.getattr"
    ],
    "pickle.whichmodule": [
        "<builtin>.getattr",
        "pickle._getattribute",
        "<builtin>.list",
        "sys.modules.items"
    ],
    "sys.modules.items": [],
    "pickle.encode_long": [],
    "pickle.decode_long": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Pickler.__init__": [
        "pickle._Framer.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.int"
    ],
    "pickle._Pickler.clear_memo": [],
    "pickle._Pickler.dump": [
        "pickle._Pickler.save",
        "<builtin>.hasattr",
        "pickle._Framer.end_framing",
        "pickle._Framer.start_framing"
    ],
    "pickle._Pickler.save": [
        "<builtin>.getattr",
        "pickle._Pickler.get",
        "<builtin>.id",
        "pickle._Pickler.save_pers",
        "<builtin>.isinstance",
        "pickle._Pickler.persistent_id",
        "pickle._Pickler.save_global",
        "<builtin>.issubclass",
        "<builtin>.len",
        "pickle._Framer.commit_frame",
        "<builtin>.type",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.memoize": [
        "<builtin>.len",
        "<builtin>.id",
        "pickle._Pickler.put"
    ],
    "pickle._Pickler.put": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.get": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.persistent_id": [],
    "pickle._Pickler.save_pers": [
        "pickle._Pickler.save",
        "<builtin>.str"
    ],
    "pickle._Pickler.save_global": [
        "<builtin>.getattr",
        "pickle._Pickler.save",
        "pickle._Pickler.memoize",
        "<builtin>.bytes",
        "pickle.whichmodule",
        "<builtin>.__import__",
        "pickle._getattribute",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_reduce": [
        "<builtin>.getattr",
        "pickle._Pickler.get",
        "<builtin>.id",
        "<builtin>.isinstance",
        "pickle._Pickler.save",
        "pickle._Pickler.memoize",
        "_functools.partial",
        "<builtin>.callable",
        "pickle._Pickler._batch_setitems",
        "pickle._Pickler._batch_appends",
        "<builtin>.hasattr"
    ],
    "pickle._Pickler._batch_appends": [
        "<builtin>.list",
        "<builtin>.iter",
        "pickle._Pickler.save",
        "itertools.islice",
        "<builtin>.len"
    ],
    "pickle._Pickler._batch_setitems": [
        "<builtin>.list",
        "<builtin>.iter",
        "pickle._Pickler.save",
        "itertools.islice",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_none": [],
    "pickle._Pickler.save_bool": [],
    "pickle._Pickler.save_long": [
        "<builtin>.len",
        "pickle.encode_long",
        "<builtin>.repr"
    ],
    "pickle._Pickler.save_float": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.save_bytes": [
        "<builtin>.len",
        "pickle._Pickler.memoize",
        "<builtin>.str",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_bytearray": [
        "<builtin>.len",
        "<builtin>.bytes",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_picklebuffer": [
        "pickle._Pickler.save_bytes",
        "<builtin>.bool",
        "pickle._Pickler.save_bytearray"
    ],
    "pickle._Pickler.save_str": [
        "<builtin>.len",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_tuple": [
        "pickle._Pickler.get",
        "<builtin>.id",
        "pickle._Pickler.save",
        "pickle._Pickler.memoize",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_list": [
        "pickle._Pickler._batch_appends",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_dict": [
        "pickle._Pickler._batch_setitems",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_set": [
        "<builtin>.list",
        "<builtin>.iter",
        "pickle._Pickler.save",
        "pickle._Pickler.memoize",
        "itertools.islice",
        "<builtin>.len",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_frozenset": [
        "pickle._Pickler.get",
        "<builtin>.id",
        "<builtin>.list",
        "pickle._Pickler.save",
        "pickle._Pickler.memoize",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_type": [
        "pickle._Pickler.save_global",
        "<builtin>.type",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Unpickler": [],
    "pickle._Unpickler.__init__": [
        "<builtin>.iter"
    ],
    "pickle._Unpickler.load": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "pickle._Unframer.__init__"
    ],
    "pickle._Unpickler.pop_mark": [],
    "pickle._Unpickler.persistent_load": [],
    "pickle._Unpickler.load_proto": [
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_frame": [
        "pickle._Unframer.load_frame",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_persid": [
        "pickle._Unpickler.persistent_load"
    ],
    "pickle._Unpickler.load_binpersid": [
        "pickle._Unpickler.persistent_load"
    ],
    "pickle._Unpickler.load_none": [],
    "pickle._Unpickler.load_false": [],
    "pickle._Unpickler.load_true": [],
    "pickle._Unpickler.load_int": [
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_binint": [],
    "pickle._Unpickler.load_binint1": [],
    "pickle._Unpickler.load_binint2": [],
    "pickle._Unpickler.load_long": [
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_long1": [
        "pickle.decode_long"
    ],
    "pickle._Unpickler.load_long4": [
        "pickle.decode_long"
    ],
    "pickle._Unpickler.load_float": [
        "<builtin>.float"
    ],
    "pickle._Unpickler.load_binfloat": [],
    "pickle._Unpickler._decode_string": [],
    "pickle._Unpickler.load_string": [
        "pickle._Unpickler._decode_string",
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_binstring": [
        "pickle._Unpickler._decode_string"
    ],
    "pickle._Unpickler.load_binbytes": [],
    "pickle._Unpickler.load_unicode": [
        "<builtin>.str"
    ],
    "pickle._Unpickler.load_binunicode": [
        "<builtin>.str"
    ],
    "pickle._Unpickler.load_binunicode8": [
        "<builtin>.str"
    ],
    "pickle._Unpickler.load_binbytes8": [],
    "pickle._Unpickler.load_bytearray8": [
        "<builtin>.bytearray"
    ],
    "pickle._Unpickler.load_next_buffer": [
        "<builtin>.next"
    ],
    "pickle._Unpickler.load_readonly_buffer": [
        "<builtin>.memoryview"
    ],
    "pickle._Unpickler.load_short_binstring": [
        "pickle._Unpickler._decode_string"
    ],
    "pickle._Unpickler.load_short_binbytes": [],
    "pickle._Unpickler.load_short_binunicode": [
        "<builtin>.str"
    ],
    "pickle._Unpickler.load_tuple": [
        "pickle._Unpickler.pop_mark",
        "<builtin>.tuple"
    ],
    "pickle._Unpickler.load_empty_tuple": [],
    "pickle._Unpickler.load_tuple1": [],
    "pickle._Unpickler.load_tuple2": [],
    "pickle._Unpickler.load_tuple3": [],
    "pickle._Unpickler.load_empty_list": [],
    "pickle._Unpickler.load_empty_dictionary": [],
    "pickle._Unpickler.load_empty_set": [
        "<builtin>.set"
    ],
    "pickle._Unpickler.load_frozenset": [
        "<builtin>.frozenset",
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_list": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_dict": [
        "pickle._Unpickler.pop_mark",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "pickle._Unpickler._instantiate": [
        "<builtin>.isinstance",
        "sys.exc_info",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.hasattr"
    ],
    "pickle._Unpickler.load_inst": [
        "pickle._Unpickler.pop_mark",
        "pickle._Unpickler.find_class",
        "pickle._Unpickler._instantiate"
    ],
    "pickle._Unpickler.find_class": [
        "<builtin>.getattr",
        "sys.audit",
        "pickle._getattribute",
        "<builtin>.__import__"
    ],
    "pickle._Unpickler.load_obj": [
        "pickle._Unpickler.pop_mark",
        "pickle._Unpickler._instantiate"
    ],
    "pickle._Unpickler.load_newobj": [],
    "pickle._Unpickler.load_newobj_ex": [],
    "pickle._Unpickler.load_global": [
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.load_stack_global": [
        "pickle._Unpickler.find_class",
        "<builtin>.type"
    ],
    "pickle._Unpickler.load_ext1": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.get_extension": [
        "pickle._Unpickler.find_class",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_ext2": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_ext4": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_reduce": [],
    "pickle._Unpickler.load_pop": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_pop_mark": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_dup": [],
    "pickle._Unpickler.load_get": [
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_binget": [],
    "pickle._Unpickler.load_long_binget": [],
    "pickle._Unpickler.load_put": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_binput": [
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_long_binput": [
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_memoize": [
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_append": [],
    "pickle._Unpickler.load_appends": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_setitem": [],
    "pickle._Unpickler.load_setitems": [
        "pickle._Unpickler.pop_mark",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_additems": [
        "pickle._Unpickler.pop_mark",
        "<builtin>.isinstance"
    ],
    "pickle._Unpickler.load_build": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.setattr",
        "sys.intern",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "pickle._Unpickler.load_mark": [],
    "pickle._Unpickler.load_stop": [
        "pickle._Stop.__init__"
    ],
    "pickle._dump": [
        "pickle._Pickler.__init__",
        "pickle._Pickler.dump"
    ],
    "pickle._dumps": [
        "pickle._Pickler.__init__",
        "<builtin>.isinstance",
        "io.BytesIO",
        "pickle._Pickler.dump"
    ],
    "pickle._load": [
        "pickle._Unpickler.load",
        "pickle._Unpickler.__init__"
    ],
    "pickle._loads": [
        "<builtin>.isinstance",
        "pickle._Unpickler.__init__",
        "io.BytesIO",
        "pickle._Unpickler.load",
        "<builtin>.TypeError"
    ],
    "pprint.pprint": [
        "pprint.PrettyPrinter.__init__",
        "pprint.PrettyPrinter.pprint"
    ],
    "pprint.PrettyPrinter.__init__": [
        "<builtin>.bool",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "pprint.PrettyPrinter.pprint": [
        "sys.stdout.write",
        "pprint.PrettyPrinter._format"
    ],
    "pprint.pformat": [
        "pprint.PrettyPrinter.__init__",
        "pprint.PrettyPrinter.pformat"
    ],
    "pprint.PrettyPrinter.pformat": [
        "_io.StringIO",
        "pprint.PrettyPrinter._format"
    ],
    "pprint.pp": [
        "pprint.pprint"
    ],
    "pprint.saferepr": [
        "pprint._safe_repr"
    ],
    "pprint._safe_repr": [
        "<builtin>.getattr",
        "<builtin>.id",
        "<builtin>.repr",
        "pprint._recursion",
        "<builtin>.issubclass",
        "<builtin>.len",
        "<builtin>.sorted",
        "<builtin>.type",
        "pprint._safe_repr"
    ],
    "pprint.isreadable": [
        "pprint._safe_repr"
    ],
    "pprint.isrecursive": [
        "pprint._safe_repr"
    ],
    "pprint._safe_key": [],
    "pprint._safe_key.__init__": [],
    "pprint._safe_key.__lt__": [
        "<builtin>.id",
        "<builtin>.str",
        "<builtin>.type"
    ],
    "pprint._safe_tuple": [
        "pprint._safe_key.__init__"
    ],
    "pprint.PrettyPrinter": [],
    "pprint.PrettyPrinter._format": [
        "<builtin>.id",
        "pprint.PrettyPrinter._pprint_dict",
        "<builtin>.isinstance",
        "pprint._recursion",
        "sys.stdout.write",
        "<builtin>.len",
        "pprint.PrettyPrinter._repr",
        "<builtin>.type"
    ],
    "pprint.PrettyPrinter.isrecursive": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter.format": [
        "pprint._safe_repr"
    ],
    "pprint.PrettyPrinter.isreadable": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint._recursion": [
        "<builtin>.id",
        "<builtin>.type"
    ],
    "pprint.PrettyPrinter._repr": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter._pprint_dict": [
        "<builtin>.len",
        "<builtin>.sorted",
        "pprint.PrettyPrinter._format_dict_items"
    ],
    "pprint.PrettyPrinter._format_dict_items": [
        "<builtin>.len",
        "pprint.PrettyPrinter._repr",
        "<builtin>.enumerate",
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_ordered_dict": [
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.repr",
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_list": [
        "pprint.PrettyPrinter._format_items"
    ],
    "pprint.PrettyPrinter._format_items": [
        "<builtin>.iter",
        "pprint.PrettyPrinter._format",
        "<builtin>.len",
        "<builtin>.next",
        "pprint.PrettyPrinter._repr"
    ],
    "pprint.PrettyPrinter._pprint_tuple": [
        "<builtin>.len",
        "pprint.PrettyPrinter._format_items"
    ],
    "pprint.PrettyPrinter._pprint_set": [
        "<builtin>.len",
        "<builtin>.repr",
        "pprint.PrettyPrinter._format_items",
        "<builtin>.sorted"
    ],
    "pprint.PrettyPrinter._pprint_str": [
        "re.findall",
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.enumerate"
    ],
    "pprint.PrettyPrinter._pprint_bytes": [
        "<builtin>.len",
        "pprint._wrap_bytes_repr",
        "<builtin>.repr"
    ],
    "pprint._wrap_bytes_repr": [
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.repr"
    ],
    "pprint.PrettyPrinter._pprint_bytearray": [
        "<builtin>.bytes",
        "pprint.PrettyPrinter._pprint_bytes"
    ],
    "pprint.PrettyPrinter._pprint_mappingproxy": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_default_dict": [
        "<builtin>.len",
        "pprint.PrettyPrinter._pprint_dict",
        "<builtin>.repr",
        "pprint.PrettyPrinter._repr"
    ],
    "pprint.PrettyPrinter._pprint_counter": [
        "<builtin>.len",
        "<builtin>.repr",
        "pprint.PrettyPrinter._format_dict_items"
    ],
    "pprint.PrettyPrinter._pprint_chain_map": [
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.enumerate",
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_deque": [
        "<builtin>.len",
        "<builtin>.repr",
        "pprint.PrettyPrinter._repr",
        "pprint.PrettyPrinter._format_items"
    ],
    "pprint.PrettyPrinter._pprint_user_dict": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_user_list": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_user_string": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint._perfcheck": [
        "time.perf_counter",
        "pprint.PrettyPrinter.pformat",
        "<builtin>.print",
        "pprint.PrettyPrinter.__init__",
        "pprint._safe_repr"
    ],
    "time.perf_counter": [],
    "fnmatch.fnmatch": [
        "ntpath.normcase",
        "posixpath.normcase",
        "fnmatch.fnmatchcase"
    ],
    "fnmatch.fnmatchcase": [
        "fnmatch._compile_pattern"
    ],
    "fnmatch._compile_pattern": [
        "<builtin>.isinstance",
        "re.compile",
        "<builtin>.bytes",
        "fnmatch.translate",
        "<builtin>.str"
    ],
    "fnmatch.translate": [
        "<builtin>.len",
        "re.sub",
        "re.escape"
    ],
    "fnmatch.filter": [
        "ntpath.normcase",
        "fnmatch._compile_pattern",
        "posixpath.normcase"
    ],
    "reprlib.recursive_repr.decorating_function.wrapper": [
        "<builtin>.id",
        "_thread.get_ident"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "reprlib.Repr.repr": [
        "reprlib.Repr.repr1"
    ],
    "reprlib.Repr.repr1": [
        "<builtin>.getattr",
        "reprlib.Repr.repr_instance",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "reprlib.Repr.repr_instance": [
        "builtins.repr",
        "<builtin>.id",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "reprlib.Repr._repr_iterable": [
        "<builtin>.len",
        "itertools.islice",
        "reprlib.Repr.repr1"
    ],
    "reprlib.Repr.repr_tuple": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_list": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_array": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_set": [
        "reprlib.Repr._repr_iterable",
        "reprlib._possibly_sorted"
    ],
    "reprlib._possibly_sorted": [
        "<builtin>.list",
        "<builtin>.sorted"
    ],
    "reprlib.Repr.repr_frozenset": [
        "reprlib.Repr._repr_iterable",
        "reprlib._possibly_sorted"
    ],
    "reprlib.Repr.repr_deque": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_dict": [
        "<builtin>.len",
        "itertools.islice",
        "reprlib._possibly_sorted",
        "reprlib.Repr.repr1"
    ],
    "reprlib.Repr.repr_str": [
        "builtins.repr",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "builtins.repr": [],
    "reprlib.Repr.repr_int": [
        "builtins.repr",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "typing._type_check": [
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.type"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.compile",
        "<builtin>.isinstance",
        "<builtin>.SyntaxError",
        "<builtin>.TypeError"
    ],
    "typing._type_repr": [
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "typing._collect_type_vars": [
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "typing._subs_tvars": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "typing._subs_tvars",
        "<builtin>.enumerate",
        "typing._GenericAlias.copy_with"
    ],
    "typing._GenericAlias.copy_with": [
        "typing._GenericAlias.__init__"
    ],
    "typing._check_generic": [
        "<builtin>.len",
        "<builtin>.TypeError"
    ],
    "typing._remove_dups_flatten": [
        "<builtin>.len",
        "<builtin>.set",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "typing._tp_cache": [
        "functools.wraps",
        "functools._lru_cache_wrapper.wrapper",
        "functools.singledispatchmethod.__get__._method",
        "functools.singledispatch.wrapper",
        "_functools.partial",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "typing._tp_cache.inner": [
        "typing._VariadicGenericAlias.__getitem__",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "typing.Generic.__class_getitem__",
        "typing._GenericAlias.__getitem__",
        "typing._SpecialForm.__getitem__"
    ],
    "typing._VariadicGenericAlias.__getitem__": [
        "typing._VariadicGenericAlias.__getitem_inner__",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "typing._VariadicGenericAlias.__getitem_inner__": [
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.tuple",
        "typing._GenericAlias.copy_with",
        "<builtin>.len",
        "<builtin>.super"
    ],
    "typing._GenericAlias.__getitem__": [
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.tuple",
        "typing._subs_tvars",
        "<builtin>.TypeError",
        "typing._check_generic"
    ],
    "typing.Generic.__class_getitem__": [
        "typing._GenericAlias.__init__",
        "<builtin>.all",
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.tuple",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.len",
        "typing._check_generic"
    ],
    "typing._SpecialForm.__getitem__": [
        "typing._GenericAlias.__init__",
        "<builtin>.isinstance",
        "typing._type_check",
        "<builtin>.tuple",
        "typing._remove_dups_flatten",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "typing._eval_type": [
        "typing.ForwardRef._evaluate",
        "<builtin>.isinstance",
        "typing._eval_type",
        "<builtin>.tuple",
        "typing._GenericAlias.copy_with"
    ],
    "typing.ForwardRef._evaluate": [
        "<builtin>.eval",
        "typing._type_check"
    ],
    "typing._Final": [],
    "typing._Final.__init_subclass__": [
        "<builtin>.TypeError"
    ],
    "typing._Immutable": [],
    "typing._Immutable.__copy__": [],
    "typing._Immutable.__deepcopy__": [],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._SpecialForm.__new__": [
        "<builtin>.len",
        "<builtin>.super",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__init__": [],
    "typing._SpecialForm.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing._SpecialForm.__hash__": [
        "<builtin>.hash"
    ],
    "typing._SpecialForm.__repr__": [],
    "typing._SpecialForm.__reduce__": [],
    "typing._SpecialForm.__call__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__instancecheck__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__subclasscheck__": [
        "<builtin>.TypeError"
    ],
    "typing._GenericAlias.__init__": [
        "typing._collect_type_vars",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "typing.ForwardRef": [],
    "<builtin>.eval": [],
    "typing.ForwardRef.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing.ForwardRef.__hash__": [
        "<builtin>.hash"
    ],
    "typing.ForwardRef.__repr__": [],
    "typing.TypeVar": [],
    "typing.TypeVar.__init__": [
        "<builtin>.bool",
        "typing._type_check",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "sys._getframe",
        "<builtin>.len"
    ],
    "typing.TypeVar.__repr__": [],
    "typing.TypeVar.__reduce__": [],
    "typing._is_dunder": [],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._GenericAlias.__repr__": [
        "<builtin>.len",
        "typing._type_repr"
    ],
    "typing._GenericAlias.__eq__": [
        "<builtin>.frozenset",
        "<builtin>.isinstance"
    ],
    "typing._GenericAlias.__hash__": [
        "<builtin>.frozenset",
        "<builtin>.hash"
    ],
    "typing._GenericAlias.__call__": [
        "_collections.deque",
        "_collections.defaultdict",
        "typing._SpecialForm.__init__",
        "typing._no_init",
        "collections.ChainMap.__init__",
        "collections.Counter.__init__",
        "<builtin>.TypeError",
        "_collections.OrderedDict"
    ],
    "typing._no_init": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "_collections.defaultdict": [],
    "typing._GenericAlias.__mro_entries__": [
        "<builtin>.any",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.issubclass"
    ],
    "typing._GenericAlias.__getattr__": [
        "<builtin>.getattr",
        "<builtin>.AttributeError",
        "typing._is_dunder"
    ],
    "typing._GenericAlias.__setattr__": [
        "<builtin>.super",
        "<builtin>.setattr",
        "typing._is_dunder"
    ],
    "typing._GenericAlias.__instancecheck__": [
        "typing._GenericAlias.__subclasscheck__",
        "<builtin>.type"
    ],
    "typing._GenericAlias.__subclasscheck__": [
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.TypeError"
    ],
    "typing._GenericAlias.__reduce__": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.globals"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.Generic.__new__": [
        "<builtin>.super",
        "<builtin>.TypeError"
    ],
    "typing.Generic.__init_subclass__": [
        "typing._collect_type_vars",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.super"
    ],
    "typing._TypingEmpty": [],
    "typing._TypingEllipsis": [],
    "typing._get_protocol_attrs": [
        "<builtin>.getattr",
        "<builtin>.set",
        "<builtin>.list"
    ],
    "typing._is_callable_members_only": [
        "<builtin>.getattr",
        "typing._get_protocol_attrs",
        "<builtin>.all",
        "<builtin>.callable"
    ],
    "typing._allow_reckless_class_cheks": [
        "sys._getframe"
    ],
    "typing._ProtocolMeta": [],
    "typing._ProtocolMeta.__instancecheck__": [
        "<builtin>.getattr",
        "typing._is_callable_members_only",
        "<builtin>.all",
        "typing._get_protocol_attrs",
        "<builtin>.issubclass",
        "<builtin>.callable",
        "<builtin>.super",
        "<builtin>.hasattr"
    ],
    "typing.Protocol": [],
    "typing.Protocol.__init_subclass__": [
        "<builtin>.super",
        "<builtin>.TypeError",
        "<builtin>.any",
        "<builtin>.issubclass"
    ],
    "typing.Protocol.__init_subclass__._proto_hook": [
        "<builtin>.getattr",
        "typing._is_callable_members_only",
        "typing._allow_reckless_class_cheks",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "typing._get_protocol_attrs"
    ],
    "typing.runtime_checkable": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "typing.cast": [],
    "typing._get_defaults": [
        "<builtin>.dict",
        "<builtin>.len",
        "<builtin>.zip"
    ],
    "typing.get_origin": [
        "<builtin>.isinstance"
    ],
    "typing.get_args": [
        "typing.get_origin",
        "<builtin>.list",
        "<builtin>.isinstance"
    ],
    "typing.no_type_check": [
        "typing.no_type_check",
        "<builtin>.isinstance"
    ],
    "typing.no_type_check_decorator": [
        "functools.wraps",
        "_functools.partial"
    ],
    "typing.no_type_check_decorator.wrapped_decorator": [
        "typing.no_type_check"
    ],
    "typing._overload_dummy": [
        "<builtin>.NotImplementedError"
    ],
    "typing.overload": [],
    "typing.final": [],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsInt.__int__": [],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat.__float__": [],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex.__complex__": [],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes.__bytes__": [],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex.__index__": [],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs.__abs__": [],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound.__round__": [],
    "typing._make_nmtuple": [
        "<builtin>.dict",
        "collections.namedtuple",
        "typing._type_check",
        "sys._getframe"
    ],
    "typing.NamedTupleMeta": [],
    "typing.NamedTupleMeta.__new__": [
        "<builtin>.AttributeError",
        "<builtin>.tuple",
        "<builtin>.setattr",
        "<builtin>.TypeError",
        "<builtin>.dict",
        "<builtin>.super",
        "typing._make_nmtuple"
    ],
    "typing.NamedTuple": [],
    "typing._dict_new": [
        "<builtin>.dict"
    ],
    "typing._typeddict_new": [
        "<builtin>.dict",
        "<builtin>.TypeError",
        "sys._getframe"
    ],
    "typing._check_fails": [
        "<builtin>.TypeError"
    ],
    "typing._TypedDictMeta": [],
    "typing._TypedDictMeta.__new__": [
        "<builtin>.super",
        "<builtin>.hasattr",
        "typing._type_check"
    ],
    "typing.TypedDict": [],
    "typing.NewType": [],
    "typing.NewType.new_type": [],
    "typing.IO": [
        "abc.abstractmethod"
    ],
    "typing.IO.mode": [],
    "typing.IO.name": [],
    "typing.IO.close": [],
    "typing.IO.closed": [],
    "typing.IO.fileno": [],
    "typing.IO.flush": [],
    "typing.IO.isatty": [],
    "typing.IO.read": [],
    "typing.IO.readable": [],
    "typing.IO.readline": [],
    "typing.IO.readlines": [],
    "typing.IO.seek": [],
    "typing.IO.seekable": [],
    "typing.IO.tell": [],
    "typing.IO.truncate": [],
    "typing.IO.writable": [],
    "typing.IO.write": [],
    "typing.IO.writelines": [],
    "typing.IO.__enter__": [],
    "typing.IO.__exit__": [],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.BinaryIO.write": [],
    "typing.BinaryIO.__enter__": [],
    "typing.TextIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO.buffer": [],
    "typing.TextIO.encoding": [],
    "typing.TextIO.errors": [],
    "typing.TextIO.line_buffering": [],
    "typing.TextIO.newlines": [],
    "typing.TextIO.__enter__": [],
    "typing.io": [],
    "typing.re": [],
    "sys.platform.startswith": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "shutil._fastcopy_fcopyfile": [
        "posix._fcopyfile"
    ],
    "posix._fcopyfile": [],
    "shutil._fastcopy_sendfile": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "shutil._copyfileobj_readinto": [
        "<builtin>.memoryview",
        "<builtin>.bytearray"
    ],
    "shutil.copyfileobj": [],
    "shutil._samefile": [
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.isinstance",
        "posixpath.samefile",
        "<builtin>.hasattr",
        "ntpath.normcase",
        "ntpath.samestat",
        "posixpath.normcase",
        "posixpath.samestat",
        "ntpath.samefile"
    ],
    "ntpath.samefile": [],
    "posixpath.samefile": [],
    "shutil._stat": [
        "<builtin>.isinstance"
    ],
    "shutil._islink": [
        "ntpath.islink",
        "posixpath.islink",
        "<builtin>.isinstance"
    ],
    "shutil.copyfile": [
        "shutil.copyfileobj",
        "shutil._fastcopy_sendfile",
        "<builtin>.isinstance",
        "shutil._samefile",
        "stat.S_ISFIFO",
        "<builtin>.min",
        "shutil._stat",
        "shutil._islink",
        "<builtin>.open",
        "sys.audit",
        "shutil._copyfileobj_readinto",
        "<builtin>.enumerate",
        "shutil._fastcopy_fcopyfile"
    ],
    "shutil.copymode": [
        "shutil._stat",
        "shutil._islink",
        "sys.audit",
        "posixpath.islink",
        "stat.S_IMODE",
        "ntpath.islink",
        "<builtin>.hasattr"
    ],
    "shutil._copyxattr": [],
    "shutil.copystat": [
        "<builtin>.getattr",
        "shutil.copystat._nop",
        "<builtin>.isinstance",
        "shutil.copystat.lookup",
        "shutil._islink",
        "sys.audit",
        "shutil._copyxattr",
        "posixpath.islink",
        "stat.S_IMODE",
        "ntpath.islink",
        "<builtin>.hasattr"
    ],
    "shutil.copystat._nop": [],
    "shutil.copystat.lookup": [
        "<builtin>.getattr"
    ],
    "shutil.copy": [
        "posixpath.basename",
        "shutil.copyfile",
        "posixpath.join",
        "ntpath.join",
        "posixpath.isdir",
        "ntpath.basename",
        "ntpath.isdir",
        "shutil.copymode"
    ],
    "shutil.copy2": [
        "posixpath.basename",
        "shutil.copyfile",
        "posixpath.join",
        "ntpath.join",
        "posixpath.isdir",
        "ntpath.basename",
        "ntpath.isdir",
        "shutil.copystat"
    ],
    "shutil.ignore_patterns": [],
    "shutil.ignore_patterns._ignore_patterns": [
        "<builtin>.set"
    ],
    "shutil._copytree": [
        "ntpath.exists",
        "shutil.copytree",
        "<builtin>.getattr",
        "posixpath.join",
        "ntpath.join",
        "<builtin>.set",
        "shutil.copy2",
        "<builtin>.str",
        "posixpath.exists",
        "shutil.copystat",
        "os.makedirs"
    ],
    "shutil.copytree": [
        "shutil._copytree",
        "<builtin>.list",
        "sys.audit"
    ],
    "shutil._rmtree_isdir": [
        "stat.S_ISDIR"
    ],
    "shutil._rmtree_islink": [
        "ntpath.islink",
        "posixpath.islink",
        "stat.S_ISLNK"
    ],
    "shutil._rmtree_unsafe": [
        "shutil._rmtree_isdir",
        "<builtin>.list",
        "shutil._rmtree_unsafe",
        "<builtin>.OSError",
        "tempfile.TemporaryDirectory._rmtree.onerror",
        "sys.exc_info"
    ],
    "tempfile.TemporaryDirectory._rmtree.onerror": [
        "tempfile.TemporaryDirectory._rmtree.onerror.resetperms",
        "ntpath.dirname",
        "<builtin>.issubclass",
        "tempfile.TemporaryDirectory._rmtree",
        "posixpath.dirname"
    ],
    "shutil._rmtree_safe_fd": [
        "<builtin>.list",
        "posixpath.join",
        "shutil._rmtree_safe_fd",
        "stat.S_ISDIR",
        "ntpath.join",
        "<builtin>.OSError",
        "tempfile.TemporaryDirectory._rmtree.onerror",
        "sys.exc_info",
        "ntpath.samestat",
        "posixpath.samestat"
    ],
    "shutil.rmtree": [
        "shutil._rmtree_unsafe",
        "<builtin>.isinstance",
        "shutil._rmtree_safe_fd",
        "<builtin>.OSError",
        "tempfile.TemporaryDirectory._rmtree.onerror",
        "sys.exc_info",
        "sys.audit",
        "ntpath.samestat",
        "shutil._rmtree_islink",
        "posixpath.samestat"
    ],
    "shutil.rmtree.onerror": [],
    "shutil._basename": [
        "posixpath.basename",
        "ntpath.basename"
    ],
    "shutil.move": [
        "ntpath.exists",
        "shutil.copytree",
        "shutil._destinsrc",
        "ntpath.islink",
        "shutil._samefile",
        "posixpath.join",
        "shutil.rmtree",
        "ntpath.join",
        "posixpath.isdir",
        "sys.audit",
        "posixpath.islink",
        "shutil.copy2",
        "shutil._basename",
        "ntpath.isdir",
        "posixpath.exists"
    ],
    "shutil._destinsrc": [
        "posixpath.abspath",
        "sys.executable.startswith",
        "sys.executable.endswith",
        "ntpath.abspath"
    ],
    "shutil._get_gid": [],
    "shutil._get_uid": [
        "pwd.getpwnam"
    ],
    "shutil._make_tarball._set_uid_gid": [],
    "zipfile.ZipFile.__init__": [
        "<builtin>.getattr",
        "io.open",
        "<builtin>.isinstance",
        "zipfile._Tellable.tell",
        "zipfile._Tellable.__init__",
        "<builtin>.ValueError",
        "zipfile.ZipFile._fpclose",
        "zipfile.ZipFile._RealGetContents",
        "zipfile._check_compression",
        "threading.RLock"
    ],
    "shutil.get_archive_formats": [],
    "shutil.register_archive_format": [
        "<builtin>.callable",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "shutil.unregister_archive_format": [],
    "shutil.make_archive": [
        "posixpath.abspath",
        "sys.audit",
        "ntpath.abspath",
        "<builtin>.ValueError"
    ],
    "shutil.get_unpack_formats": [],
    "shutil._check_unpack_options": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "shutil.register_unpack_format": [
        "shutil._check_unpack_options"
    ],
    "shutil.unregister_unpack_format": [],
    "shutil._ensure_directory": [
        "posixpath.isdir",
        "ntpath.dirname",
        "ntpath.isdir",
        "os.makedirs",
        "posixpath.dirname"
    ],
    "zipfile.is_zipfile": [
        "<builtin>.open",
        "<builtin>.hasattr",
        "zipfile._check_zipfile"
    ],
    "zipfile.ZipFile.infolist": [],
    "zipfile.ZipFile.read": [
        "zipfile.ZipFile.read",
        "zipfile.ZipFile.open"
    ],
    "zipfile.ZipFile.close": [
        "zipfile.ZipFile._write_end_record",
        "<builtin>.ValueError",
        "zipfile.ZipFile._fpclose"
    ],
    "shutil._find_unpack_format": [],
    "shutil.unpack_archive": [
        "<builtin>.dict",
        "sys.audit",
        "<builtin>.ValueError",
        "shutil._find_unpack_format"
    ],
    "shutil.disk_usage": [
        "nt._getdiskusage"
    ],
    "nt._getdiskusage": [],
    "shutil.chown": [
        "shutil._get_gid",
        "<builtin>.isinstance",
        "<builtin>.LookupError",
        "shutil._get_uid",
        "sys.audit",
        "<builtin>.ValueError"
    ],
    "shutil._access_check": [
        "ntpath.exists",
        "ntpath.isdir",
        "posixpath.exists",
        "posixpath.isdir"
    ],
    "shutil.which": [
        "<builtin>.isinstance",
        "shutil._access_check",
        "<builtin>.any",
        "posixpath.join",
        "ntpath.join",
        "ntpath.normcase",
        "ntpath.dirname",
        "<builtin>.set",
        "posixpath.normcase",
        "posixpath.dirname"
    ],
    "zipfile.BadZipFile": [],
    "zipfile.LargeZipFile": [],
    "zipfile._strip_extra": [
        "<builtin>.len"
    ],
    "zipfile._check_zipfile": [
        "zipfile._EndRecData"
    ],
    "zipfile._EndRecData": [
        "zipfile._EndRecData64",
        "<builtin>.list",
        "zipfile._Tellable.tell",
        "<builtin>.max",
        "zipfile.ZipFile.read",
        "<builtin>.len"
    ],
    "zipfile._EndRecData64": [
        "<builtin>.len",
        "zipfile.ZipFile.read"
    ],
    "zipfile._Tellable.tell": [],
    "zipfile.ZipInfo": [],
    "zipfile.ZipInfo.__init__": [
        "<builtin>.chr",
        "sys.base_prefix.replace",
        "<builtin>.ValueError",
        "sys.executable.find",
        "sys.path.find",
        "sys.executable.replace",
        "sys.base_prefix.find",
        "sys.path.replace"
    ],
    "zipfile.ZipInfo.__repr__": [
        "zipfile.ZipInfo.is_dir",
        "stat.filemode"
    ],
    "zipfile.ZipInfo.is_dir": [],
    "zipfile.ZipInfo.FileHeader": [
        "<builtin>.len",
        "zipfile.ZipInfo._encodeFilenameFlags",
        "<builtin>.max"
    ],
    "zipfile.ZipInfo._encodeFilenameFlags": [
        "sys.base_prefix.encode",
        "sys.path.encode",
        "sys.executable.encode"
    ],
    "sys.base_prefix.encode": [],
    "sys.path.encode": [],
    "sys.executable.encode": [],
    "zipfile.ZipInfo._decodeExtra": [
        "<builtin>.len"
    ],
    "zipfile.ZipInfo.from_file": [
        "posixpath.normpath",
        "ntpath.normpath",
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "posixpath.splitdrive",
        "stat.S_ISDIR",
        "time.localtime",
        "zipfile.ZipInfo.__init__"
    ],
    "time.localtime": [],
    "zipfile._gen_crc": [
        "<builtin>.range"
    ],
    "zipfile._ZipDecrypter": [
        "<builtin>.map",
        "<builtin>.list",
        "<builtin>.range",
        "zipfile._ZipDecrypter.update_keys"
    ],
    "zipfile._ZipDecrypter.crc32": [],
    "zipfile._ZipDecrypter.update_keys": [
        "zipfile._ZipDecrypter.crc32"
    ],
    "zipfile._ZipDecrypter.decrypter": [
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.bytes",
        "<builtin>.bytearray"
    ],
    "zipfile.LZMACompressor": [],
    "zipfile.LZMACompressor.__init__": [],
    "zipfile.LZMACompressor._init": [
        "<builtin>.len"
    ],
    "zipfile.LZMACompressor.compress": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMACompressor.flush": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMADecompressor": [],
    "zipfile.LZMADecompressor.__init__": [],
    "zipfile.LZMADecompressor.decompress": [
        "<builtin>.len"
    ],
    "zipfile._check_compression": [
        "<builtin>.NotImplementedError",
        "<builtin>.RuntimeError"
    ],
    "zipfile._get_compressor": [
        "zipfile.LZMACompressor.__init__"
    ],
    "zipfile._get_decompressor": [
        "zipfile.LZMADecompressor.__init__",
        "zipfile._check_compression",
        "<builtin>.NotImplementedError"
    ],
    "zipfile._SharedFile": [],
    "zipfile._SharedFile.__init__": [],
    "zipfile._SharedFile.seek": [
        "zipfile.ZipFile.open.<lambda1>",
        "<builtin>.ValueError",
        "zipfile._Tellable.tell"
    ],
    "zipfile.ZipFile.open.<lambda1>": [],
    "zipfile._SharedFile.read": [
        "zipfile.ZipFile.open.<lambda1>",
        "<builtin>.ValueError",
        "zipfile.ZipFile.read",
        "zipfile._Tellable.tell"
    ],
    "zipfile._SharedFile.close": [
        "zipfile.ZipFile._fpclose"
    ],
    "zipfile.ZipFile._fpclose": [
        "zipfile.ZipFile.close",
        "zipfile._Tellable.close"
    ],
    "zipfile._Tellable": [],
    "zipfile._Tellable.__init__": [],
    "zipfile._Tellable.write": [
        "zipfile._Tellable.write",
        "zipfile.ZipFile.write"
    ],
    "zipfile.ZipFile.write": [
        "shutil.copyfileobj",
        "zipfile._Tellable.tell",
        "zipfile.ZipFile.open",
        "zipfile.ZipFile._writecheck",
        "zipfile._Tellable.write",
        "<builtin>.ValueError",
        "zipfile.ZipInfo.from_file",
        "zipfile.ZipFile.write"
    ],
    "zipfile._Tellable.flush": [
        "zipfile._Tellable.flush"
    ],
    "zipfile._Tellable.close": [
        "zipfile.ZipFile.close",
        "zipfile._Tellable.close"
    ],
    "zipfile.ZipExtFile": [],
    "zipfile.ZipExtFile.__init__": [
        "zipfile._get_decompressor",
        "<builtin>.hasattr",
        "<builtin>.RuntimeError",
        "zipfile.ZipExtFile._init_decrypter"
    ],
    "zipfile.ZipExtFile._init_decrypter": [
        "zipfile._ZipDecrypter",
        "zipfile._ZipDecrypter.decrypter",
        "zipfile._SharedFile.read"
    ],
    "zipfile.ZipExtFile.__repr__": [],
    "zipfile.ZipExtFile.readline": [
        "_io._BufferedIOBase.readline",
        "gzip.GzipFile.readline",
        "lzma.LZMAFile.readline",
        "zipfile.ZipExtFile.readline"
    ],
    "_io._BufferedIOBase.readline": [],
    "gzip.GzipFile.readline": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.readline": [
        "_compression.BaseStream._check_can_read"
    ],
    "zipfile.ZipExtFile.peek": [
        "<builtin>.len",
        "zipfile.ZipExtFile.read"
    ],
    "zipfile.ZipExtFile.read": [
        "<builtin>.len",
        "zipfile.ZipExtFile._read1"
    ],
    "zipfile.ZipExtFile.readable": [],
    "zipfile.ZipExtFile._read1": [
        "<builtin>.max",
        "zipfile.ZipExtFile._read2",
        "zipfile.ZipExtFile._update_crc",
        "<builtin>.len",
        "zipfile.LZMADecompressor.decompress"
    ],
    "zipfile.ZipExtFile._update_crc": [],
    "zipfile.ZipExtFile.read1": [
        "<builtin>.len",
        "zipfile.ZipExtFile._read1"
    ],
    "zipfile.ZipExtFile._read2": [
        "zipfile._ZipDecrypter.decrypter",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.len",
        "zipfile._SharedFile.read"
    ],
    "zipfile.ZipExtFile.close": [
        "zipfile._SharedFile.close",
        "<builtin>.super"
    ],
    "zipfile.ZipExtFile.seekable": [],
    "zipfile.ZipExtFile.seek": [
        "zipfile.ZipExtFile._init_decrypter",
        "<builtin>.min",
        "zipfile._get_decompressor",
        "zipfile._SharedFile.seek",
        "zipfile.ZipExtFile.read",
        "io.UnsupportedOperation",
        "<builtin>.ValueError",
        "<builtin>.len",
        "zipfile.ZipExtFile.tell"
    ],
    "io.UnsupportedOperation": [],
    "zipfile.ZipExtFile.tell": [
        "<builtin>.len",
        "io.UnsupportedOperation"
    ],
    "zipfile._ZipWriteFile": [],
    "zipfile._ZipWriteFile.__init__": [
        "zipfile._get_compressor"
    ],
    "zipfile._ZipWriteFile._fileobj": [],
    "zipfile._ZipWriteFile.writable": [],
    "zipfile._ZipWriteFile.write": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "zipfile.LZMACompressor.compress"
    ],
    "zipfile._ZipWriteFile.close": [
        "zipfile.ZipInfo.FileHeader",
        "sys.executable.FileHeader",
        "sys.path.FileHeader",
        "<builtin>.RuntimeError",
        "<builtin>.len",
        "<builtin>.super",
        "zipfile.LZMACompressor.flush",
        "sys.base_prefix.FileHeader"
    ],
    "sys.path.FileHeader": [],
    "sys.executable.FileHeader": [],
    "sys.base_prefix.FileHeader": [],
    "zipfile.ZipFile": [],
    "zipfile.ZipFile._RealGetContents": [
        "<builtin>.len",
        "zipfile._EndRecData",
        "zipfile.ZipInfo._decodeExtra",
        "io.BytesIO",
        "zipfile.ZipInfo.__init__",
        "zipfile.ZipFile.read",
        "<builtin>.NotImplementedError",
        "<builtin>.print"
    ],
    "zipfile.ZipFile.__enter__": [],
    "zipfile.ZipFile.__exit__": [
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile.__repr__": [],
    "zipfile.ZipFile.namelist": [],
    "zipfile.ZipFile.printdir": [
        "<builtin>.print"
    ],
    "zipfile.ZipFile.testzip": [
        "zipfile.ZipFile.open"
    ],
    "zipfile.ZipFile.open": [
        "zipfile.ZipFile.getinfo",
        "<builtin>.isinstance",
        "zipfile._SharedFile.__init__",
        "zipfile.ZipFile._open_to_write",
        "zipfile.ZipInfo.__init__",
        "zipfile.ZipExtFile.__init__",
        "zipfile._SharedFile.close",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.RuntimeError",
        "<builtin>.NotImplementedError",
        "<builtin>.len",
        "<builtin>.type",
        "zipfile._SharedFile.read"
    ],
    "zipfile.ZipFile.getinfo": [
        "<builtin>.KeyError"
    ],
    "zipfile.ZipFile.setpassword": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "zipfile.ZipFile._open_to_write": [
        "zipfile.ZipInfo.FileHeader",
        "zipfile._Tellable.tell",
        "zipfile.ZipFile._writecheck",
        "zipfile._Tellable.write",
        "sys.executable.FileHeader",
        "sys.path.FileHeader",
        "<builtin>.ValueError",
        "zipfile._ZipWriteFile.__init__",
        "<builtin>.hasattr",
        "zipfile.ZipFile.write",
        "sys.base_prefix.FileHeader"
    ],
    "zipfile.ZipFile.extract": [
        "zipfile.ZipFile._extract_member"
    ],
    "zipfile.ZipFile._extract_member": [
        "posixpath.normpath",
        "ntpath.normpath",
        "ntpath.exists",
        "ntpath.splitdrive",
        "zipfile.ZipFile._sanitize_windows_name",
        "zipfile.ZipFile.getinfo",
        "<builtin>.isinstance",
        "zipfile.ZipFile.open",
        "shutil.copyfileobj",
        "posixpath.join",
        "posixpath.splitdrive",
        "ntpath.join",
        "posixpath.isdir",
        "ntpath.dirname",
        "ntpath.isdir",
        "posixpath.exists",
        "os.makedirs",
        "posixpath.dirname"
    ],
    "zipfile.ZipFile.extractall": [
        "zipfile.CompleteDirs.namelist",
        "zipfile.ZipFile._extract_member",
        "zipfile.ZipFile.namelist"
    ],
    "zipfile.CompleteDirs.namelist": [
        "<builtin>.super",
        "<builtin>.list",
        "zipfile.CompleteDirs._implied_dirs"
    ],
    "zipfile.ZipFile._sanitize_windows_name": [
        "<builtin>.len"
    ],
    "zipfile.ZipFile.writestr": [
        "<builtin>.isinstance",
        "zipfile.ZipFile.open",
        "time.time",
        "time.localtime",
        "zipfile.ZipInfo.__init__",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "time.time": [],
    "zipfile.ZipFile.__del__": [
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile._write_end_record": [
        "<builtin>.print",
        "zipfile._strip_extra",
        "<builtin>.max",
        "zipfile._Tellable.tell",
        "<builtin>.min",
        "zipfile._Tellable.write",
        "zipfile._Tellable.flush",
        "<builtin>.len",
        "zipfile.ZipFile.write"
    ],
    "zipfile.PyZipFile": [],
    "zipfile.PyZipFile.__init__": [
        "zipfile.ZipFile.__init__"
    ],
    "zipfile.PyZipFile.writepy": [
        "posixpath.split",
        "<builtin>.print",
        "ntpath.split",
        "zipfile.PyZipFile._get_codename",
        "ntpath.splitext",
        "ntpath.isfile",
        "posixpath.join",
        "ntpath.join",
        "posixpath.isdir",
        "posixpath.isfile",
        "<builtin>.RuntimeError",
        "ntpath.isdir",
        "posixpath.splitext",
        "<builtin>.sorted",
        "zipfile.PyZipFile.writepy",
        "zipfile.ZipFile.write"
    ],
    "zipfile.PyZipFile._get_codename": [
        "posixpath.split",
        "ntpath.split",
        "ntpath.isfile",
        "zipfile.PyZipFile._get_codename._compile",
        "posixpath.isfile",
        "<builtin>.ValueError"
    ],
    "py_compile.compile": [
        "ntpath.exists",
        "ntpath.isfile",
        "posixpath.isfile",
        "<builtin>.FileExistsError",
        "py_compile._get_default_invalidation_mode",
        "sys.stderr.write",
        "ntpath.dirname",
        "posixpath.islink",
        "ntpath.islink",
        "posixpath.exists",
        "py_compile.PyCompileError.__init__",
        "os.makedirs",
        "posixpath.dirname"
    ],
    "zipfile._parents": [
        "zipfile._ancestry",
        "itertools.islice"
    ],
    "zipfile._ancestry": [
        "posixpath.split"
    ],
    "zipfile._difference": [
        "<builtin>.set",
        "itertools.filterfalse"
    ],
    "itertools.filterfalse": [],
    "zipfile.CompleteDirs": [],
    "zipfile.CompleteDirs._implied_dirs": [
        "<builtin>.map",
        "itertools.chain.from_iterable",
        "zipfile._difference"
    ],
    "zipfile.CompleteDirs._name_set": [
        "zipfile.CompleteDirs.namelist",
        "<builtin>.set"
    ],
    "zipfile.CompleteDirs.resolve_dir": [
        "zipfile.CompleteDirs._name_set"
    ],
    "zipfile.CompleteDirs.make": [
        "<builtin>.vars",
        "zipfile.ZipFile.__init__",
        "<builtin>.isinstance"
    ],
    "zipfile.FastLookup": [],
    "zipfile.FastLookup.namelist": [
        "<builtin>.super",
        "contextlib.suppress.__init__"
    ],
    "zipfile.FastLookup._name_set": [
        "<builtin>.super",
        "contextlib.suppress.__init__"
    ],
    "zipfile.Path": [],
    "zipfile.Path.__init__": [
        "zipfile.CompleteDirs.make"
    ],
    "zipfile.Path.open": [],
    "zipfile.Path.name": [
        "posixpath.basename"
    ],
    "zipfile.Path.read_text": [
        "zipfile.Path.open",
        "io.TextIOWrapper"
    ],
    "zipfile.Path.read_bytes": [
        "zipfile.Path.open"
    ],
    "zipfile.Path._is_child": [
        "posixpath.dirname"
    ],
    "zipfile.Path._next": [
        "zipfile.Path.__init__"
    ],
    "zipfile.Path.is_dir": [],
    "zipfile.Path.is_file": [
        "zipfile.Path.is_dir"
    ],
    "zipfile.Path.exists": [],
    "zipfile.Path.iterdir": [
        "<builtin>.map",
        "<builtin>.filter",
        "<builtin>.ValueError",
        "zipfile.Path.is_dir"
    ],
    "zipfile.Path.__str__": [
        "posixpath.join"
    ],
    "zipfile.Path.__repr__": [],
    "zipfile.Path.joinpath": [
        "zipfile.Path._next",
        "posixpath.join"
    ],
    "zipfile.Path.parent": [
        "zipfile.Path._next",
        "posixpath.dirname"
    ],
    "zipfile.main.addToZip": [
        "ntpath.isfile",
        "posixpath.join",
        "posixpath.isfile",
        "posixpath.isdir",
        "ntpath.join",
        "zipfile.main.addToZip",
        "ntpath.isdir",
        "<builtin>.sorted"
    ],
    "importlib.util.source_hash": [
        "_imp.source_hash"
    ],
    "_imp.source_hash": [],
    "importlib.util.resolve_name": [
        "_bootstrap._resolve_name",
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "_bootstrap._resolve_name": [],
    "importlib.util._find_spec_from_path": [
        "<builtin>.ValueError",
        "_bootstrap._find_spec"
    ],
    "_bootstrap._find_spec": [],
    "importlib.util.find_spec": [
        "importlib.util.resolve_name",
        "<builtin>.ModuleNotFoundError",
        "<builtin>.ValueError",
        "<builtin>.__import__",
        "_bootstrap._find_spec"
    ],
    "<builtin>.ModuleNotFoundError": [],
    "importlib.util._module_to_load": [
        "<builtin>.type",
        "sys.modules.get"
    ],
    "importlib.util.set_package": [
        "functools.wraps",
        "_functools.partial"
    ],
    "importlib.util.set_package.set_package_wrapper": [
        "<builtin>.getattr",
        "warnings.warn",
        "<builtin>.hasattr"
    ],
    "importlib.util.set_loader": [
        "functools.wraps",
        "_functools.partial"
    ],
    "importlib.util.set_loader.set_loader_wrapper": [
        "<builtin>.getattr",
        "warnings.warn"
    ],
    "importlib.util.module_for_loader": [
        "warnings.warn",
        "functools.wraps",
        "_functools.partial"
    ],
    "importlib.util.module_for_loader.module_for_loader_wrapper": [
        "importlib.util._module_to_load"
    ],
    "importlib.util._LazyModule": [],
    "importlib.util._LazyModule.__getattribute__": [
        "<builtin>.getattr",
        "<builtin>.id",
        "<builtin>.ValueError"
    ],
    "importlib.util._LazyModule.__delattr__": [
        "importlib.util._LazyModule.__getattribute__",
        "<builtin>.delattr"
    ],
    "importlib.util.LazyLoader": [],
    "importlib.util.LazyLoader.__check_eager_loader": [
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "importlib.util.LazyLoader.factory": [
        "importlib.util.LazyLoader.__check_eager_loader"
    ],
    "importlib.util.LazyLoader.factory.<lambda1>": [
        "importlib.util.LazyLoader.__init__"
    ],
    "importlib.util.LazyLoader.__init__": [
        "importlib.util.LazyLoader.__check_eager_loader"
    ],
    "importlib.util.LazyLoader.create_module": [],
    "importlib.util.LazyLoader.exec_module": [],
    "py_compile.PyCompileError": [],
    "py_compile.PyCompileError.__init__": [
        "traceback.format_exception_only"
    ],
    "py_compile.PyCompileError.__str__": [],
    "py_compile.PycInvalidationMode": [],
    "py_compile._get_default_invalidation_mode": [],
    "<builtin>.FileExistsError": [],
    "py_compile.main": [
        "sys.stderr.write",
        "py_compile.compile",
        "sys.stdin.readline"
    ],
    "importlib.machinery.all_suffixes": [],
    "importlib._bootstrap_external._make_relax_case": [],
    "importlib._bootstrap_external._make_relax_case._relax_case": [],
    "importlib._bootstrap_external._pack_uint32": [
        "<builtin>.int"
    ],
    "importlib._bootstrap_external._unpack_uint32": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._unpack_uint16": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._path_join": [],
    "importlib._bootstrap_external._path_split": [
        "<builtin>.len",
        "<builtin>.reversed"
    ],
    "importlib._bootstrap_external._path_stat": [],
    "importlib._bootstrap_external._path_is_mode_type": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external._path_isfile": [
        "importlib._bootstrap_external._path_is_mode_type"
    ],
    "importlib._bootstrap_external._path_isdir": [
        "importlib._bootstrap_external._path_is_mode_type"
    ],
    "importlib._bootstrap_external._path_isabs": [],
    "importlib._bootstrap_external._write_atomic": [
        "<builtin>.id"
    ],
    "importlib._bootstrap_external.cache_from_source": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.str",
        "importlib._bootstrap_external._path_isabs",
        "<builtin>.NotImplementedError"
    ],
    "importlib._bootstrap_external.source_from_cache": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join",
        "<builtin>.ValueError",
        "<builtin>.NotImplementedError",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._get_sourcefile": [
        "importlib._bootstrap_external.source_from_cache",
        "<builtin>.len",
        "importlib._bootstrap_external._path_isfile"
    ],
    "importlib._bootstrap_external._get_cached": [
        "importlib._bootstrap_external.cache_from_source",
        "<builtin>.tuple"
    ],
    "importlib._bootstrap_external._calc_mode": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external._check_name": [
        "importlib._bootstrap_external._check_name._wrap"
    ],
    "importlib._bootstrap_external._check_name._check_name_wrapper": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.ExtensionFileLoader.get_filename",
        "importlib._bootstrap_external.FileLoader.load_module",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external.FileLoader.get_resource_reader"
    ],
    "importlib._bootstrap_external.FileLoader.load_module": [
        "<builtin>.super"
    ],
    "importlib._bootstrap_external.FileLoader.get_resource_reader": [],
    "importlib._bootstrap_external.ExtensionFileLoader.get_filename": [],
    "importlib._bootstrap_external.FileLoader.get_filename": [],
    "importlib._bootstrap_external._check_name._wrap": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external._find_module_shim": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._classify_pyc": [
        "<builtin>.len",
        "<builtin>.ImportError",
        "importlib._bootstrap_external._unpack_uint32",
        "<builtin>.EOFError"
    ],
    "<builtin>.EOFError": [],
    "importlib._bootstrap_external._validate_timestamp_pyc": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external._unpack_uint32"
    ],
    "importlib._bootstrap_external._validate_hash_pyc": [
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap_external._compile_bytecode": [
        "<builtin>.ImportError",
        "<builtin>.isinstance"
    ],
    "importlib._bootstrap_external._code_to_timestamp_pyc": [
        "importlib._bootstrap_external._pack_uint32",
        "<builtin>.bytearray"
    ],
    "importlib._bootstrap_external._code_to_hash_pyc": [
        "<builtin>.len",
        "importlib._bootstrap_external._pack_uint32",
        "<builtin>.bytearray"
    ],
    "importlib._bootstrap_external.spec_from_file_location": [
        "importlib._bootstrap_external._LoaderBasics.is_package",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._get_supported_file_loaders",
        "<builtin>.tuple",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external._get_supported_file_loaders": [],
    "importlib._bootstrap_external._LoaderBasics.is_package": [
        "importlib._bootstrap_external._path_split"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder": [],
    "importlib._bootstrap_external.WindowsRegistryFinder._open_registry": [],
    "importlib._bootstrap_external.WindowsRegistryFinder._search_registry": [
        "importlib._bootstrap_external.WindowsRegistryFinder._open_registry"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder.find_spec": [
        "importlib._bootstrap_external._get_supported_file_loaders",
        "importlib._bootstrap_external.WindowsRegistryFinder._search_registry",
        "<builtin>.tuple",
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder.find_module": [
        "importlib._bootstrap_external.WindowsRegistryFinder.find_spec"
    ],
    "importlib._bootstrap_external._LoaderBasics": [],
    "importlib._bootstrap_external._LoaderBasics.create_module": [],
    "importlib._bootstrap_external._LoaderBasics.exec_module": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.SourcelessFileLoader.get_code"
    ],
    "importlib._bootstrap_external.SourcelessFileLoader.get_code": [
        "importlib._bootstrap_external._compile_bytecode",
        "<builtin>.memoryview",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external.FileLoader.get_data",
        "importlib._bootstrap_external._classify_pyc"
    ],
    "importlib._bootstrap_external._LoaderBasics.load_module": [],
    "importlib._bootstrap_external.SourceLoader": [],
    "importlib._bootstrap_external.SourceLoader.path_mtime": [],
    "importlib._bootstrap_external.SourceLoader.path_stats": [
        "importlib._bootstrap_external.SourceLoader.path_mtime"
    ],
    "importlib._bootstrap_external.SourceLoader._cache_bytecode": [
        "importlib._bootstrap_external.SourceFileLoader.set_data",
        "importlib._bootstrap_external.SourceLoader.set_data"
    ],
    "importlib._bootstrap_external.SourceFileLoader.set_data": [
        "importlib._bootstrap_external._path_isdir",
        "importlib._bootstrap_external._path_split",
        "<builtin>.reversed",
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._write_atomic"
    ],
    "importlib._bootstrap_external.SourceLoader.set_data": [],
    "importlib._bootstrap_external.SourceLoader.get_source": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.decode_source"
    ],
    "importlib._bootstrap_external.SourceLoader.source_to_code": [],
    "importlib._bootstrap_external.SourceLoader.get_code": [
        "importlib._bootstrap_external.SourceLoader._cache_bytecode",
        "importlib._bootstrap_external.SourceLoader.source_to_code",
        "importlib._bootstrap_external.SourceFileLoader.path_stats",
        "importlib._bootstrap_external._code_to_hash_pyc",
        "importlib._bootstrap_external._compile_bytecode",
        "<builtin>.memoryview",
        "importlib._bootstrap_external.SourceFileLoader._cache_bytecode",
        "importlib._bootstrap_external._classify_pyc",
        "importlib._bootstrap_external.cache_from_source",
        "importlib._bootstrap_external.SourceLoader.path_stats",
        "importlib._bootstrap_external._validate_hash_pyc",
        "<builtin>.len",
        "importlib._bootstrap_external._validate_timestamp_pyc",
        "importlib._bootstrap_external._code_to_timestamp_pyc",
        "<builtin>.int"
    ],
    "importlib._bootstrap_external.SourceFileLoader.path_stats": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external.SourceFileLoader._cache_bytecode": [
        "importlib._bootstrap_external._calc_mode",
        "importlib._bootstrap_external.SourceFileLoader.set_data"
    ],
    "importlib._bootstrap_external.FileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external.FileLoader.__init__": [],
    "importlib._bootstrap_external.FileLoader.__eq__": [],
    "importlib._bootstrap_external.FileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "importlib._bootstrap_external.FileLoader.get_data": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "importlib._bootstrap_external.FileLoader.open_resource": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join"
    ],
    "importlib._bootstrap_external.FileLoader.resource_path": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external.FileLoader.is_resource"
    ],
    "importlib._bootstrap_external.FileLoader.is_resource": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external._path_isfile"
    ],
    "importlib._bootstrap_external.FileLoader.contents": [
        "importlib._bootstrap_external._path_split",
        "<builtin>.iter"
    ],
    "importlib._bootstrap_external.SourceFileLoader": [],
    "importlib._bootstrap_external.SourcelessFileLoader": [],
    "importlib._bootstrap_external.SourcelessFileLoader.get_source": [],
    "importlib._bootstrap_external.ExtensionFileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.__init__": [],
    "importlib._bootstrap_external.ExtensionFileLoader.__eq__": [],
    "importlib._bootstrap_external.ExtensionFileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.create_module": [],
    "importlib._bootstrap_external.ExtensionFileLoader.exec_module": [],
    "importlib._bootstrap_external.ExtensionFileLoader.is_package": [
        "importlib._bootstrap_external._path_split",
        "<builtin>.any"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.get_code": [],
    "importlib._bootstrap_external.ExtensionFileLoader.get_source": [],
    "importlib._bootstrap_external._NamespacePath": [],
    "importlib._bootstrap_external._NamespacePath.__init__": [
        "importlib._bootstrap_external._NamespacePath._get_parent_path",
        "<builtin>.tuple"
    ],
    "importlib._bootstrap_external._NamespacePath._get_parent_path": [
        "<builtin>.getattr",
        "importlib._bootstrap_external._NamespacePath._find_parent_path_names"
    ],
    "importlib._bootstrap_external._NamespacePath._find_parent_path_names": [],
    "importlib._bootstrap_external._NamespacePath._recalculate": [
        "importlib._bootstrap_external._NamespacePath._get_parent_path",
        "<builtin>.tuple",
        "importlib._bootstrap_external.PathFinder._get_spec"
    ],
    "importlib._bootstrap_external.PathFinder._get_spec": [
        "<builtin>.ImportError",
        "<builtin>.isinstance",
        "importlib._bootstrap_external.PathFinder._legacy_get_spec",
        "importlib._bootstrap_external.PathFinder._path_importer_cache",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external._NamespacePath.__iter__": [
        "<builtin>.iter",
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__getitem__": [
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__setitem__": [],
    "importlib._bootstrap_external._NamespacePath.__len__": [
        "<builtin>.len",
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__repr__": [],
    "importlib._bootstrap_external._NamespacePath.__contains__": [
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.append": [],
    "importlib._bootstrap_external._NamespaceLoader": [],
    "importlib._bootstrap_external._NamespaceLoader.__init__": [
        "importlib._bootstrap_external._NamespacePath.__init__"
    ],
    "importlib._bootstrap_external._NamespaceLoader.module_repr": [],
    "importlib._bootstrap_external._NamespaceLoader.is_package": [],
    "importlib._bootstrap_external._NamespaceLoader.get_source": [],
    "importlib._bootstrap_external._NamespaceLoader.get_code": [
        "<builtin>.compile"
    ],
    "importlib._bootstrap_external._NamespaceLoader.create_module": [],
    "importlib._bootstrap_external._NamespaceLoader.exec_module": [],
    "importlib._bootstrap_external._NamespaceLoader.load_module": [],
    "importlib._bootstrap_external.PathFinder": [],
    "importlib._bootstrap_external.PathFinder.invalidate_caches": [
        "<builtin>.list",
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external.PathFinder._path_hooks": [],
    "importlib._bootstrap_external.PathFinder._path_importer_cache": [
        "importlib._bootstrap_external.PathFinder._path_hooks"
    ],
    "importlib._bootstrap_external.PathFinder._legacy_get_spec": [
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external.PathFinder.find_spec": [
        "importlib._bootstrap_external._NamespacePath.__init__",
        "importlib._bootstrap_external.PathFinder._get_spec"
    ],
    "importlib._bootstrap_external.PathFinder.find_module": [
        "importlib._bootstrap_external.PathFinder.find_spec"
    ],
    "importlib.metadata.MetadataPathFinder.find_distributions": [
        "<builtin>.map",
        "importlib.metadata.MetadataPathFinder._search_paths"
    ],
    "importlib._bootstrap_external.FileFinder": [],
    "importlib._bootstrap_external.FileFinder.__init__": [
        "<builtin>.set"
    ],
    "importlib._bootstrap_external.FileFinder.invalidate_caches": [],
    "importlib._bootstrap_external.FileFinder.find_loader": [
        "importlib._bootstrap_external.FileFinder.find_spec"
    ],
    "importlib._bootstrap_external.FileFinder.find_spec": [
        "importlib._bootstrap_external._path_isfile",
        "importlib._bootstrap_external._path_stat",
        "importlib._bootstrap_external._path_join",
        "importlib._bootstrap_external.FileFinder._get_spec",
        "importlib._bootstrap_external.FileFinder._fill_cache"
    ],
    "importlib._bootstrap_external.FileFinder._get_spec": [
        "importlib._bootstrap_external.spec_from_file_location"
    ],
    "importlib._bootstrap_external.FileFinder._fill_cache": [
        "<builtin>.set"
    ],
    "importlib._bootstrap_external.FileFinder.path_hook": [],
    "importlib._bootstrap_external.FileFinder.path_hook.path_hook_for_FileFinder": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.FileFinder.__init__",
        "importlib._bootstrap_external._path_isdir"
    ],
    "importlib._bootstrap_external.FileFinder.__repr__": [],
    "importlib._bootstrap_external._fix_up_module": [
        "importlib._bootstrap_external.spec_from_file_location",
        "importlib._bootstrap_external.FileLoader.__init__"
    ],
    "importlib._bootstrap_external._setup": [
        "<builtin>.len",
        "<builtin>.setattr",
        "<builtin>.all",
        "importlib._bootstrap_external._make_relax_case"
    ],
    "importlib._bootstrap_external._install": [
        "importlib._bootstrap_external._get_supported_file_loaders",
        "importlib._bootstrap_external._setup"
    ],
    "importlib.metadata.PackageNotFoundError": [],
    "importlib.metadata.EntryPoint": [
        "re.compile"
    ],
    "importlib.metadata.EntryPoint.load": [
        "importlib.import_module",
        "<builtin>.filter",
        "functools.reduce"
    ],
    "importlib.import_module": [
        "<builtin>.TypeError",
        "_bootstrap._gcd_import",
        "_frozen_importlib._gcd_import"
    ],
    "importlib.metadata.EntryPoint.extras": [
        "<builtin>.list",
        "re.finditer"
    ],
    "importlib.metadata.EntryPoint._from_config": [
        "configparser.RawConfigParser.items",
        "configparser.RawConfigParser.sections"
    ],
    "configparser.RawConfigParser.sections": [
        "<builtin>.list"
    ],
    "configparser.RawConfigParser.items": [
        "configparser.RawConfigParser.optionxform",
        "<builtin>.list",
        "configparser.RawConfigParser.items.<lambda1>",
        "configparser.RawConfigParser.items.<lambda2>",
        "<builtin>.super",
        "configparser.NoSectionError.__init__"
    ],
    "importlib.metadata.EntryPoint._from_text": [
        "configparser.RawConfigParser.__init__",
        "importlib.metadata.EntryPoint._from_config",
        "configparser.RawConfigParser.readfp",
        "io.StringIO",
        "configparser.RawConfigParser.read_string"
    ],
    "configparser.RawConfigParser.__init__": [
        "configparser.ConverterMapping.__init__",
        "re.escape",
        "<builtin>.tuple",
        "re.compile",
        "configparser.RawConfigParser._read_defaults",
        "configparser.SectionProxy.__init__"
    ],
    "configparser.RawConfigParser.read_string": [
        "io.StringIO",
        "configparser.RawConfigParser.read_file"
    ],
    "io.StringIO": [],
    "configparser.RawConfigParser.readfp": [
        "warnings.warn",
        "configparser.RawConfigParser.read_file"
    ],
    "importlib.metadata.EntryPoint.__iter__": [
        "<builtin>.iter"
    ],
    "importlib.metadata.EntryPoint.__reduce__": [],
    "importlib.metadata.PackagePath": [],
    "importlib.metadata.PackagePath.read_text": [
        "importlib.metadata.PackagePath.locate"
    ],
    "importlib.metadata.PackagePath.locate": [
        "importlib.metadata.Distribution.locate_file"
    ],
    "importlib.metadata.PackagePath.read_binary": [
        "importlib.metadata.PackagePath.locate"
    ],
    "importlib.metadata.Distribution.locate_file": [],
    "importlib.metadata.FileHash": [],
    "importlib.metadata.FileHash.__init__": [],
    "importlib.metadata.FileHash.__repr__": [],
    "importlib.metadata.Distribution": [
        "abc.abstractmethod"
    ],
    "importlib.metadata.Distribution.read_text": [],
    "importlib.metadata.Distribution.from_name": [
        "<builtin>.next",
        "importlib.metadata.Distribution._discover_resolvers",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.Distribution._discover_resolvers": [
        "<builtin>.getattr",
        "<builtin>.filter"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib.metadata.Distribution.discover": [
        "itertools.chain.from_iterable",
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.ValueError",
        "importlib.metadata.Distribution._discover_resolvers"
    ],
    "importlib.metadata.Distribution.at": [
        "importlib.metadata.PathDistribution.__init__"
    ],
    "importlib.metadata.PathDistribution.__init__": [],
    "importlib.metadata.Distribution.metadata": [
        "importlib.metadata.Distribution.read_text",
        "email.message_from_string"
    ],
    "importlib.metadata.Distribution.version": [],
    "importlib.metadata.Distribution.entry_points": [
        "importlib.metadata.Distribution.read_text",
        "importlib.metadata.EntryPoint._from_text"
    ],
    "importlib.metadata.Distribution.files": [
        "importlib.metadata.Distribution._read_files_distinfo",
        "importlib.metadata.Distribution._read_files_egginfo",
        "<builtin>.list",
        "itertools.starmap"
    ],
    "importlib.metadata.Distribution._read_files_distinfo": [
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution._read_files_egginfo": [
        "<builtin>.map",
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution.files.make_file": [
        "importlib.metadata.FileHash.__init__",
        "<builtin>.int"
    ],
    "importlib.metadata.Distribution.requires": [
        "<builtin>.list",
        "importlib.metadata.Distribution._read_dist_info_reqs",
        "importlib.metadata.Distribution._read_egg_info_reqs"
    ],
    "importlib.metadata.Distribution._read_dist_info_reqs": [],
    "importlib.metadata.Distribution._read_egg_info_reqs": [
        "importlib.metadata.Distribution.read_text",
        "importlib.metadata.Distribution._deps_from_requires_text"
    ],
    "importlib.metadata.Distribution._deps_from_requires_text": [
        "<builtin>.list",
        "operator.itemgetter.__init__",
        "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs",
        "importlib.metadata.Distribution._read_sections",
        "<builtin>.map",
        "itertools.groupby"
    ],
    "importlib.metadata.Distribution._read_sections": [
        "re.match",
        "<builtin>.filter",
        "<builtin>.locals"
    ],
    "itertools.groupby": [],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs": [
        "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition"
    ],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.make_condition": [],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition": [
        "<builtin>.list",
        "<builtin>.filter"
    ],
    "importlib.metadata.DistributionFinder": [
        "abc.abstractmethod",
        "importlib.metadata.DistributionFinder.Context"
    ],
    "importlib.metadata.DistributionFinder.Context": [],
    "importlib.metadata.DistributionFinder.Context.path": [
        "<builtin>.vars"
    ],
    "importlib.metadata.DistributionFinder.find_distributions": [],
    "importlib.metadata.FastPath": [],
    "importlib.metadata.FastPath.__init__": [
        "posixpath.basename",
        "ntpath.basename"
    ],
    "importlib.metadata.FastPath.joinpath": [],
    "importlib.metadata.FastPath.children": [
        "contextlib.suppress.__init__",
        "importlib.metadata.FastPath.zip_children"
    ],
    "importlib.metadata.FastPath.zip_children": [
        "posixpath.split",
        "zipfile.Path.__init__"
    ],
    "importlib.metadata.FastPath.is_egg": [],
    "importlib.metadata.FastPath.search": [
        "importlib.metadata.FastPath.joinpath",
        "importlib.metadata.FastPath.is_egg",
        "importlib.metadata.FastPath.children"
    ],
    "importlib.metadata.Prepared": [],
    "importlib.metadata.Prepared.__init__": [],
    "importlib.metadata.MetadataPathFinder": [],
    "importlib.metadata.MetadataPathFinder._search_paths": [
        "<builtin>.map",
        "itertools.chain.from_iterable",
        "importlib.metadata.Prepared.__init__"
    ],
    "importlib.metadata.PathDistribution": [],
    "importlib.metadata.PathDistribution.read_text": [
        "pathlib.PurePath.joinpath",
        "contextlib.suppress.__init__"
    ],
    "pathlib.PurePath.joinpath": [
        "pathlib.PurePath._make_child"
    ],
    "importlib.metadata.PathDistribution.locate_file": [],
    "importlib.metadata.distribution": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.distributions": [
        "importlib.metadata.Distribution.discover"
    ],
    "importlib.metadata.metadata": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.version": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.entry_points": [
        "<builtin>.tuple",
        "itertools.chain.from_iterable",
        "itertools.groupby",
        "operator.attrgetter.__init__",
        "<builtin>.sorted",
        "importlib.metadata.distributions"
    ],
    "importlib.metadata.files": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.requires": [
        "importlib.metadata.distribution"
    ],
    "_frozen_importlib._setup": [
        "sys.modules.items",
        "<builtin>.isinstance",
        "_frozen_importlib._builtin_from_name",
        "_imp.is_frozen",
        "_frozen_importlib._init_module_attrs",
        "_frozen_importlib._spec_from_module",
        "<builtin>.setattr",
        "<builtin>.type"
    ],
    "_bootstrap._setup": [],
    "_bootstrap_external._setup": [],
    "_frozen_importlib_external._setup": [
        "<builtin>.all",
        "_frozen_importlib._builtin_from_name",
        "<builtin>.setattr",
        "_frozen_importlib_external._make_relax_case",
        "<builtin>.len",
        "_bootstrap._imp.extension_suffixes",
        "_bootstrap._builtin_from_name"
    ],
    "importlib.invalidate_caches": [
        "<builtin>.hasattr"
    ],
    "importlib.find_loader": [
        "_frozen_importlib._find_spec",
        "<builtin>.ImportError",
        "warnings.warn",
        "<builtin>.ValueError",
        "_bootstrap._find_spec"
    ],
    "_frozen_importlib._find_spec": [
        "<builtin>.ImportError",
        "_frozen_importlib._find_spec_legacy"
    ],
    "_bootstrap._gcd_import": [],
    "_frozen_importlib._gcd_import": [
        "_frozen_importlib._resolve_name",
        "_frozen_importlib._sanity_check",
        "_frozen_importlib._find_and_load"
    ],
    "importlib.reload": [
        "_frozen_importlib._find_spec",
        "<builtin>.ImportError",
        "<builtin>.isinstance",
        "<builtin>.ModuleNotFoundError",
        "_bootstrap._exec",
        "_frozen_importlib._exec",
        "<builtin>.TypeError",
        "_bootstrap._find_spec",
        "sys.modules.get"
    ],
    "_frozen_importlib._exec": [
        "<builtin>.ImportError",
        "_frozen_importlib.FrozenImporter.load_module",
        "_frozen_importlib.BuiltinImporter.exec_module",
        "_frozen_importlib._init_module_attrs",
        "_frozen_importlib.FrozenImporter.exec_module",
        "_frozen_importlib._ModuleLockManager.__init__",
        "<builtin>.hasattr"
    ],
    "_bootstrap._exec": [],
    "_frozen_importlib": [
        "_frozen_importlib._DummyModuleLock",
        "_frozen_importlib._ImportLockContext",
        "<builtin>.object",
        "_frozen_importlib.BuiltinImporter",
        "_frozen_importlib.FrozenImporter",
        "_frozen_importlib._DeadlockError",
        "_frozen_importlib._ModuleLockManager",
        "_frozen_importlib._ModuleLock",
        "_frozen_importlib.ModuleSpec"
    ],
    "_frozen_importlib._wrap": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib._new_module": [
        "<builtin>.type"
    ],
    "_frozen_importlib._DeadlockError": [],
    "_frozen_importlib._ModuleLock": [],
    "_frozen_importlib._ModuleLock.__init__": [],
    "_frozen_importlib._ModuleLock.has_deadlock": [],
    "_frozen_importlib._ModuleLock.acquire": [
        "_frozen_importlib._ModuleLock.has_deadlock"
    ],
    "_frozen_importlib._ModuleLock.release": [
        "<builtin>.RuntimeError"
    ],
    "_frozen_importlib._ModuleLock.__repr__": [
        "<builtin>.id"
    ],
    "_frozen_importlib._DummyModuleLock": [],
    "_frozen_importlib._DummyModuleLock.__init__": [],
    "_frozen_importlib._DummyModuleLock.acquire": [],
    "_frozen_importlib._DummyModuleLock.release": [
        "<builtin>.RuntimeError"
    ],
    "_frozen_importlib._DummyModuleLock.__repr__": [
        "<builtin>.id"
    ],
    "_frozen_importlib._ModuleLockManager": [],
    "_frozen_importlib._ModuleLockManager.__init__": [],
    "_frozen_importlib._ModuleLockManager.__enter__": [
        "_frozen_importlib._get_module_lock",
        "_frozen_importlib._DummyModuleLock.acquire",
        "_frozen_importlib._ModuleLock.acquire"
    ],
    "_frozen_importlib._get_module_lock": [
        "_frozen_importlib._DummyModuleLock.__init__",
        "_frozen_importlib._ModuleLock.__init__"
    ],
    "_frozen_importlib._ModuleLockManager.__exit__": [
        "_frozen_importlib._ModuleLock.release",
        "_frozen_importlib._DummyModuleLock.release"
    ],
    "_frozen_importlib._get_module_lock.cb": [],
    "_frozen_importlib._lock_unlock_module": [
        "_frozen_importlib._DummyModuleLock.release",
        "_frozen_importlib._ModuleLock.release",
        "_frozen_importlib._DummyModuleLock.acquire",
        "_frozen_importlib._get_module_lock",
        "_frozen_importlib._ModuleLock.acquire"
    ],
    "_frozen_importlib._call_with_frames_removed": [
        "_frozen_importlib._gcd_import"
    ],
    "_frozen_importlib._verbose_message": [
        "<builtin>.print"
    ],
    "_frozen_importlib._requires_builtin": [
        "_frozen_importlib._wrap"
    ],
    "_frozen_importlib._requires_builtin._requires_builtin_wrapper": [
        "_frozen_importlib.BuiltinImporter.get_source",
        "<builtin>.ImportError",
        "_frozen_importlib.BuiltinImporter.is_package",
        "_frozen_importlib.BuiltinImporter.get_code"
    ],
    "_frozen_importlib.BuiltinImporter.get_source": [],
    "_frozen_importlib.BuiltinImporter.is_package": [],
    "_frozen_importlib.BuiltinImporter.get_code": [],
    "_frozen_importlib._requires_frozen": [
        "_frozen_importlib._wrap"
    ],
    "_frozen_importlib._requires_frozen._requires_frozen_wrapper": [
        "<builtin>.ImportError",
        "_frozen_importlib.FrozenImporter.get_source",
        "_frozen_importlib.FrozenImporter.is_package",
        "_frozen_importlib.FrozenImporter.get_code"
    ],
    "_frozen_importlib.FrozenImporter.get_source": [],
    "_frozen_importlib.FrozenImporter.is_package": [],
    "_frozen_importlib.FrozenImporter.get_code": [],
    "_frozen_importlib._load_module_shim": [
        "_frozen_importlib._load",
        "_frozen_importlib.spec_from_loader",
        "_frozen_importlib._exec"
    ],
    "_frozen_importlib.spec_from_loader": [
        "<builtin>.hasattr",
        "_frozen_importlib.BuiltinImporter.is_package",
        "_frozen_importlib.FrozenImporter.is_package",
        "_frozen_importlib.ModuleSpec.__init__"
    ],
    "_frozen_importlib._load": [
        "_frozen_importlib._ModuleLockManager.__init__",
        "_frozen_importlib._load_unlocked"
    ],
    "_frozen_importlib._module_repr": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "_frozen_importlib._module_repr_from_spec"
    ],
    "_frozen_importlib._module_repr_from_spec": [],
    "_frozen_importlib.ModuleSpec": [],
    "_frozen_importlib.ModuleSpec.__init__": [],
    "_frozen_importlib.ModuleSpec.__repr__": [],
    "_frozen_importlib.ModuleSpec.__eq__": [],
    "_frozen_importlib.ModuleSpec.cached": [],
    "_frozen_importlib.ModuleSpec.parent": [],
    "_frozen_importlib.ModuleSpec.has_location": [
        "<builtin>.bool"
    ],
    "_frozen_importlib._spec_from_module": [
        "<builtin>.list",
        "_frozen_importlib.ModuleSpec.__init__"
    ],
    "_frozen_importlib._init_module_attrs": [
        "<builtin>.getattr"
    ],
    "_frozen_importlib.module_from_spec": [
        "<builtin>.ImportError",
        "_frozen_importlib.FrozenImporter.create_module",
        "_frozen_importlib._init_module_attrs",
        "_frozen_importlib._new_module",
        "<builtin>.hasattr",
        "_frozen_importlib.BuiltinImporter.create_module"
    ],
    "_frozen_importlib.FrozenImporter.create_module": [],
    "_frozen_importlib.BuiltinImporter.create_module": [
        "<builtin>.ImportError",
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib.FrozenImporter.load_module": [
        "_frozen_importlib._load_module_shim"
    ],
    "_frozen_importlib.FrozenImporter.exec_module": [
        "<builtin>.exec",
        "<builtin>.ImportError",
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib.BuiltinImporter.exec_module": [
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib._load_backward_compatible": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "_frozen_importlib.FrozenImporter.load_module"
    ],
    "_frozen_importlib._load_unlocked": [
        "_frozen_importlib._verbose_message",
        "<builtin>.ImportError",
        "_frozen_importlib._load_backward_compatible",
        "_frozen_importlib.BuiltinImporter.exec_module",
        "_frozen_importlib.FrozenImporter.exec_module",
        "_frozen_importlib.module_from_spec",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib.BuiltinImporter": [
        "<builtin>.classmethod",
        "_frozen_importlib._requires_builtin"
    ],
    "_frozen_importlib.BuiltinImporter.module_repr": [],
    "_frozen_importlib.BuiltinImporter.find_spec": [
        "_frozen_importlib.spec_from_loader"
    ],
    "_frozen_importlib.BuiltinImporter.find_module": [
        "_frozen_importlib.BuiltinImporter.find_spec"
    ],
    "<builtin>.classmethod": [],
    "_frozen_importlib.FrozenImporter": [
        "_frozen_importlib._requires_frozen"
    ],
    "_frozen_importlib.FrozenImporter.module_repr": [],
    "_frozen_importlib.FrozenImporter.find_spec": [
        "_frozen_importlib.spec_from_loader"
    ],
    "_frozen_importlib.FrozenImporter.find_module": [],
    "_frozen_importlib._ImportLockContext": [],
    "_frozen_importlib._ImportLockContext.__enter__": [],
    "_frozen_importlib._ImportLockContext.__exit__": [],
    "_frozen_importlib._resolve_name": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "_frozen_importlib._find_spec_legacy": [
        "_frozen_importlib.spec_from_loader"
    ],
    "_frozen_importlib._sanity_check": [
        "<builtin>.ImportError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "_frozen_importlib._find_and_load_unlocked": [
        "_frozen_importlib._find_spec",
        "<builtin>.ModuleNotFoundError",
        "_frozen_importlib._call_with_frames_removed",
        "<builtin>.setattr",
        "_frozen_importlib._load_unlocked"
    ],
    "_frozen_importlib._find_and_load": [
        "_frozen_importlib._find_and_load_unlocked",
        "_frozen_importlib._ModuleLockManager.__init__",
        "_frozen_importlib._lock_unlock_module",
        "<builtin>.ModuleNotFoundError"
    ],
    "_frozen_importlib._handle_fromlist": [
        "<builtin>.isinstance",
        "_frozen_importlib._call_with_frames_removed",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "_frozen_importlib._handle_fromlist",
        "<builtin>.type"
    ],
    "_frozen_importlib._calc___package__": [],
    "_frozen_importlib.__import__": [
        "_frozen_importlib._gcd_import",
        "_frozen_importlib._calc___package__",
        "<builtin>.len",
        "<builtin>.hasattr",
        "_frozen_importlib._handle_fromlist"
    ],
    "_frozen_importlib._builtin_from_name": [
        "_frozen_importlib.BuiltinImporter.find_spec",
        "<builtin>.ImportError",
        "_frozen_importlib._load_unlocked"
    ],
    "_imp.is_frozen": [],
    "_frozen_importlib._install": [
        "_frozen_importlib._setup"
    ],
    "_frozen_importlib_external": [
        "_frozen_importlib_external._NamespacePath",
        "_frozen_importlib_external._LoaderBasics",
        "<builtin>.object",
        "_frozen_importlib_external.FileFinder",
        "_frozen_importlib_external.FileLoader",
        "_frozen_importlib_external.SourceLoader",
        "_frozen_importlib_external._NamespaceLoader",
        "_frozen_importlib_external.WindowsRegistryFinder",
        "_frozen_importlib_external.ExtensionFileLoader",
        "_frozen_importlib_external.SourcelessFileLoader",
        "_frozen_importlib_external.SourceFileLoader",
        "<builtin>.type",
        "_frozen_importlib_external.PathFinder"
    ],
    "_frozen_importlib_external._make_relax_case": [],
    "_frozen_importlib_external._make_relax_case._relax_case": [],
    "_frozen_importlib_external._pack_uint32": [
        "<builtin>.int"
    ],
    "_frozen_importlib_external._unpack_uint32": [
        "<builtin>.len"
    ],
    "_frozen_importlib_external._unpack_uint16": [
        "<builtin>.len"
    ],
    "_frozen_importlib_external._path_join": [],
    "_frozen_importlib_external._path_split": [
        "<builtin>.len",
        "<builtin>.reversed"
    ],
    "_frozen_importlib_external._path_stat": [],
    "_frozen_importlib_external._path_is_mode_type": [
        "_frozen_importlib_external._path_stat"
    ],
    "_frozen_importlib_external._path_isfile": [
        "_frozen_importlib_external._path_is_mode_type"
    ],
    "_frozen_importlib_external._path_isdir": [
        "_frozen_importlib_external._path_is_mode_type"
    ],
    "_frozen_importlib_external._path_isabs": [],
    "_frozen_importlib_external._write_atomic": [
        "<builtin>.id"
    ],
    "_frozen_importlib_external.cache_from_source": [
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._path_isabs",
        "_frozen_importlib_external._path_split",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.NotImplementedError"
    ],
    "_frozen_importlib_external.source_from_cache": [
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._path_split",
        "<builtin>.ValueError",
        "<builtin>.NotImplementedError",
        "<builtin>.len"
    ],
    "_frozen_importlib_external._get_sourcefile": [
        "_frozen_importlib_external.source_from_cache",
        "<builtin>.len",
        "_frozen_importlib_external._path_isfile"
    ],
    "_frozen_importlib_external._get_cached": [
        "_frozen_importlib_external.cache_from_source",
        "<builtin>.tuple"
    ],
    "_frozen_importlib_external._calc_mode": [
        "_frozen_importlib_external._path_stat"
    ],
    "_frozen_importlib_external._check_name": [
        "_frozen_importlib_external._check_name._wrap"
    ],
    "_frozen_importlib_external._check_name._check_name_wrapper": [
        "<builtin>.ImportError",
        "_frozen_importlib_external.FileLoader.load_module",
        "_frozen_importlib_external.ExtensionFileLoader.get_filename",
        "_frozen_importlib_external.FileLoader.get_filename",
        "_frozen_importlib_external.FileLoader.get_resource_reader"
    ],
    "_frozen_importlib_external.FileLoader.load_module": [
        "<builtin>.super"
    ],
    "_frozen_importlib_external.ExtensionFileLoader.get_filename": [],
    "_frozen_importlib_external.FileLoader.get_resource_reader": [],
    "_frozen_importlib_external.FileLoader.get_filename": [],
    "_frozen_importlib_external._check_name._wrap": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib_external._find_module_shim": [
        "<builtin>.len"
    ],
    "_frozen_importlib_external._classify_pyc": [
        "<builtin>.len",
        "<builtin>.ImportError",
        "<builtin>.EOFError",
        "_frozen_importlib_external._unpack_uint32"
    ],
    "_frozen_importlib_external._validate_timestamp_pyc": [
        "<builtin>.ImportError",
        "_frozen_importlib_external._unpack_uint32"
    ],
    "_frozen_importlib_external._validate_hash_pyc": [
        "<builtin>.ImportError"
    ],
    "_frozen_importlib_external._compile_bytecode": [
        "<builtin>.ImportError",
        "<builtin>.isinstance"
    ],
    "_frozen_importlib_external._code_to_timestamp_pyc": [
        "_frozen_importlib_external._pack_uint32",
        "<builtin>.bytearray"
    ],
    "_frozen_importlib_external._code_to_hash_pyc": [
        "<builtin>.len",
        "_frozen_importlib_external._pack_uint32",
        "<builtin>.bytearray"
    ],
    "_frozen_importlib_external.spec_from_file_location": [
        "_frozen_importlib_external._LoaderBasics.is_package",
        "<builtin>.tuple",
        "_frozen_importlib_external._path_split",
        "<builtin>.hasattr",
        "_frozen_importlib_external.FileLoader.get_filename",
        "_frozen_importlib_external._get_supported_file_loaders"
    ],
    "_frozen_importlib_external._get_supported_file_loaders": [],
    "_frozen_importlib_external._LoaderBasics.is_package": [
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.WindowsRegistryFinder": [],
    "_frozen_importlib_external.WindowsRegistryFinder._open_registry": [],
    "_frozen_importlib_external.WindowsRegistryFinder._search_registry": [
        "_frozen_importlib_external.WindowsRegistryFinder._open_registry"
    ],
    "_frozen_importlib_external.WindowsRegistryFinder.find_spec": [
        "_frozen_importlib_external.WindowsRegistryFinder._search_registry",
        "_frozen_importlib_external._path_stat",
        "<builtin>.tuple",
        "_frozen_importlib_external._get_supported_file_loaders"
    ],
    "_frozen_importlib_external.WindowsRegistryFinder.find_module": [
        "_frozen_importlib_external.WindowsRegistryFinder.find_spec"
    ],
    "_frozen_importlib_external._LoaderBasics": [],
    "_frozen_importlib_external._LoaderBasics.create_module": [],
    "_frozen_importlib_external._LoaderBasics.exec_module": [
        "<builtin>.ImportError",
        "_frozen_importlib_external.SourcelessFileLoader.get_code"
    ],
    "_frozen_importlib_external.SourcelessFileLoader.get_code": [
        "<builtin>.memoryview",
        "_frozen_importlib_external._classify_pyc",
        "_frozen_importlib_external.FileLoader.get_data",
        "_frozen_importlib_external.FileLoader.get_filename",
        "_frozen_importlib_external._compile_bytecode"
    ],
    "_frozen_importlib_external._LoaderBasics.load_module": [],
    "_frozen_importlib_external.SourceLoader": [],
    "_frozen_importlib_external.SourceLoader.path_mtime": [],
    "_frozen_importlib_external.SourceLoader.path_stats": [
        "_frozen_importlib_external.SourceLoader.path_mtime"
    ],
    "_frozen_importlib_external.SourceLoader._cache_bytecode": [
        "_frozen_importlib_external.SourceFileLoader.set_data",
        "_frozen_importlib_external.SourceLoader.set_data"
    ],
    "_frozen_importlib_external.SourceFileLoader.set_data": [
        "_frozen_importlib_external._path_join",
        "<builtin>.reversed",
        "_frozen_importlib_external._path_split",
        "_frozen_importlib_external._path_isdir",
        "_frozen_importlib_external._write_atomic"
    ],
    "_frozen_importlib_external.SourceLoader.set_data": [],
    "_frozen_importlib_external.SourceLoader.get_source": [
        "<builtin>.ImportError",
        "_frozen_importlib_external.decode_source"
    ],
    "_frozen_importlib_external.SourceLoader.source_to_code": [],
    "_frozen_importlib_external.SourceLoader.get_code": [
        "_frozen_importlib_external.SourceLoader._cache_bytecode",
        "_frozen_importlib_external.SourceLoader.path_stats",
        "_frozen_importlib_external.cache_from_source",
        "<builtin>.memoryview",
        "_frozen_importlib_external.SourceLoader.source_to_code",
        "_frozen_importlib_external._code_to_timestamp_pyc",
        "_frozen_importlib_external.SourceFileLoader.path_stats",
        "_frozen_importlib_external._validate_hash_pyc",
        "_frozen_importlib_external._classify_pyc",
        "_frozen_importlib_external._validate_timestamp_pyc",
        "_frozen_importlib_external.SourceFileLoader._cache_bytecode",
        "_frozen_importlib_external._code_to_hash_pyc",
        "<builtin>.len",
        "_frozen_importlib_external._compile_bytecode",
        "<builtin>.int"
    ],
    "_frozen_importlib_external.SourceFileLoader.path_stats": [
        "_frozen_importlib_external._path_stat"
    ],
    "_frozen_importlib_external.SourceFileLoader._cache_bytecode": [
        "_frozen_importlib_external.SourceFileLoader.set_data",
        "_frozen_importlib_external._calc_mode"
    ],
    "_frozen_importlib_external.FileLoader": [
        "_frozen_importlib_external._check_name"
    ],
    "_frozen_importlib_external.FileLoader.__init__": [],
    "_frozen_importlib_external.FileLoader.__eq__": [],
    "_frozen_importlib_external.FileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "_frozen_importlib_external.FileLoader.get_data": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "_frozen_importlib_external.FileLoader.open_resource": [
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.FileLoader.resource_path": [
        "_frozen_importlib_external.FileLoader.is_resource",
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.FileLoader.is_resource": [
        "_frozen_importlib_external._path_isfile",
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.FileLoader.contents": [
        "<builtin>.iter",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.SourceFileLoader": [],
    "_frozen_importlib_external.SourcelessFileLoader": [],
    "_frozen_importlib_external.SourcelessFileLoader.get_source": [],
    "_frozen_importlib_external.ExtensionFileLoader": [
        "_frozen_importlib_external._check_name"
    ],
    "_frozen_importlib_external.ExtensionFileLoader.__init__": [],
    "_frozen_importlib_external.ExtensionFileLoader.__eq__": [],
    "_frozen_importlib_external.ExtensionFileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "_frozen_importlib_external.ExtensionFileLoader.create_module": [],
    "_frozen_importlib_external.ExtensionFileLoader.exec_module": [],
    "_frozen_importlib_external.ExtensionFileLoader.is_package": [
        "<builtin>.any",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.ExtensionFileLoader.get_code": [],
    "_frozen_importlib_external.ExtensionFileLoader.get_source": [],
    "_frozen_importlib_external._NamespacePath": [],
    "_frozen_importlib_external._NamespacePath.__init__": [
        "_frozen_importlib_external._NamespacePath._get_parent_path",
        "<builtin>.tuple"
    ],
    "_frozen_importlib_external._NamespacePath._get_parent_path": [
        "<builtin>.getattr",
        "_frozen_importlib_external._NamespacePath._find_parent_path_names"
    ],
    "_frozen_importlib_external._NamespacePath._find_parent_path_names": [],
    "_frozen_importlib_external._NamespacePath._recalculate": [
        "_frozen_importlib_external.PathFinder._get_spec",
        "_frozen_importlib_external._NamespacePath._get_parent_path",
        "<builtin>.tuple"
    ],
    "_frozen_importlib_external.PathFinder._get_spec": [
        "<builtin>.ImportError",
        "<builtin>.isinstance",
        "_frozen_importlib_external.PathFinder._path_importer_cache",
        "_frozen_importlib_external.PathFinder._legacy_get_spec",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib_external._NamespacePath.__iter__": [
        "<builtin>.iter",
        "_frozen_importlib_external._NamespacePath._recalculate"
    ],
    "_frozen_importlib_external._NamespacePath.__getitem__": [
        "_frozen_importlib_external._NamespacePath._recalculate"
    ],
    "_frozen_importlib_external._NamespacePath.__setitem__": [],
    "_frozen_importlib_external._NamespacePath.__len__": [
        "<builtin>.len",
        "_frozen_importlib_external._NamespacePath._recalculate"
    ],
    "_frozen_importlib_external._NamespacePath.__repr__": [],
    "_frozen_importlib_external._NamespacePath.__contains__": [
        "_frozen_importlib_external._NamespacePath._recalculate"
    ],
    "_frozen_importlib_external._NamespacePath.append": [],
    "_frozen_importlib_external._NamespaceLoader": [],
    "_frozen_importlib_external._NamespaceLoader.__init__": [
        "_frozen_importlib_external._NamespacePath.__init__"
    ],
    "_frozen_importlib_external._NamespaceLoader.module_repr": [],
    "_frozen_importlib_external._NamespaceLoader.is_package": [],
    "_frozen_importlib_external._NamespaceLoader.get_source": [],
    "_frozen_importlib_external._NamespaceLoader.get_code": [
        "<builtin>.compile"
    ],
    "_frozen_importlib_external._NamespaceLoader.create_module": [],
    "_frozen_importlib_external._NamespaceLoader.exec_module": [],
    "_frozen_importlib_external._NamespaceLoader.load_module": [],
    "_frozen_importlib_external.PathFinder": [],
    "_frozen_importlib_external.PathFinder.invalidate_caches": [
        "<builtin>.list",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib_external.PathFinder._path_hooks": [],
    "_frozen_importlib_external.PathFinder._path_importer_cache": [
        "_frozen_importlib_external.PathFinder._path_hooks"
    ],
    "_frozen_importlib_external.PathFinder._legacy_get_spec": [
        "<builtin>.hasattr"
    ],
    "_frozen_importlib_external.PathFinder.find_spec": [
        "_frozen_importlib_external.PathFinder._get_spec",
        "_frozen_importlib_external._NamespacePath.__init__"
    ],
    "_frozen_importlib_external.PathFinder.find_module": [
        "_frozen_importlib_external.PathFinder.find_spec"
    ],
    "_frozen_importlib_external.FileFinder": [],
    "_frozen_importlib_external.FileFinder.__init__": [
        "<builtin>.set"
    ],
    "_frozen_importlib_external.FileFinder.invalidate_caches": [],
    "_frozen_importlib_external.FileFinder.find_loader": [
        "_frozen_importlib_external.FileFinder.find_spec"
    ],
    "_frozen_importlib_external.FileFinder.find_spec": [
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._path_stat",
        "_frozen_importlib_external._path_isfile",
        "_frozen_importlib_external.FileFinder._fill_cache",
        "_frozen_importlib_external.FileFinder._get_spec"
    ],
    "_frozen_importlib_external.FileFinder._get_spec": [
        "_frozen_importlib_external.spec_from_file_location"
    ],
    "_frozen_importlib_external.FileFinder._fill_cache": [
        "<builtin>.set"
    ],
    "_frozen_importlib_external.FileFinder.path_hook": [],
    "_frozen_importlib_external.FileFinder.path_hook.path_hook_for_FileFinder": [
        "_frozen_importlib_external._path_isdir",
        "<builtin>.ImportError",
        "_frozen_importlib_external.FileFinder.__init__"
    ],
    "_frozen_importlib_external.FileFinder.__repr__": [],
    "_frozen_importlib_external._fix_up_module": [
        "_frozen_importlib_external.spec_from_file_location",
        "_frozen_importlib_external.FileLoader.__init__"
    ],
    "_bootstrap._builtin_from_name": [],
    "_bootstrap._imp.extension_suffixes": [],
    "_frozen_importlib_external._install": [
        "_frozen_importlib_external._setup",
        "_frozen_importlib_external._get_supported_file_loaders"
    ],
    "csv.Dialect": [],
    "csv.Dialect.__init__": [
        "csv.Dialect._validate"
    ],
    "csv.Dialect._validate": [
        "<builtin>.str"
    ],
    "csv.excel": [],
    "csv.excel_tab": [],
    "csv.unix_dialect": [],
    "csv.DictReader": [],
    "csv.DictReader.__init__": [],
    "csv.DictReader.__iter__": [],
    "csv.DictReader.fieldnames": [
        "<builtin>.next"
    ],
    "csv.DictReader.__next__": [
        "<builtin>.dict",
        "<builtin>.next",
        "<builtin>.len",
        "<builtin>.zip"
    ],
    "csv.DictWriter": [],
    "csv.DictWriter.__init__": [
        "<builtin>.ValueError"
    ],
    "csv.DictWriter.writeheader": [
        "csv.DictWriter.writerow",
        "<builtin>.dict",
        "<builtin>.zip"
    ],
    "csv.DictWriter.writerow": [
        "csv.DictWriter._dict_to_list"
    ],
    "csv.DictWriter._dict_to_list": [
        "<builtin>.repr",
        "<builtin>.ValueError"
    ],
    "csv.DictWriter.writerows": [
        "<builtin>.map"
    ],
    "csv.Sniffer": [],
    "csv.Sniffer.__init__": [],
    "csv.Sniffer.sniff": [
        "csv.Sniffer._guess_delimiter",
        "csv.Sniffer._guess_quote_and_delimiter",
        "csv.Sniffer.sniff.dialect"
    ],
    "csv.Sniffer._guess_quote_and_delimiter": [
        "re.compile",
        "<builtin>.max",
        "re.escape"
    ],
    "csv.Sniffer._guess_delimiter": [
        "<builtin>.list",
        "<builtin>.filter",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.range",
        "<builtin>.float",
        "<builtin>.chr",
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "csv.Sniffer.sniff.dialect": [],
    "csv.Sniffer._guess_delimiter.<lambda1>": [],
    "csv.Sniffer.has_header": [
        "<builtin>.list",
        "<builtin>.range",
        "_io.StringIO",
        "<builtin>.len",
        "<builtin>.next",
        "<builtin>.type",
        "csv.Sniffer.sniff"
    ],
    "pathlib._ignore_error": [
        "<builtin>.getattr"
    ],
    "pathlib._is_wildcard_pattern": [],
    "pathlib._Flavour": [],
    "pathlib._Flavour.__init__": [],
    "pathlib._Flavour.parse_parts": [
        "pathlib._WindowsFlavour.splitroot",
        "<builtin>.reversed",
        "pathlib._PosixFlavour.splitroot",
        "sys.intern"
    ],
    "pathlib._WindowsFlavour.splitroot": [
        "pathlib._WindowsFlavour._split_extended_path",
        "<builtin>.len"
    ],
    "pathlib._PosixFlavour.splitroot": [
        "<builtin>.len"
    ],
    "pathlib._Flavour.join_parsed_parts": [
        "pathlib._WindowsFlavour.casefold",
        "pathlib._PosixFlavour.casefold"
    ],
    "pathlib._WindowsFlavour.casefold": [],
    "pathlib._PosixFlavour.casefold": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.set",
        "<builtin>.range"
    ],
    "pathlib._WindowsFlavour._split_extended_path": [],
    "pathlib._WindowsFlavour.casefold_parts": [],
    "pathlib._WindowsFlavour.compile_pattern": [
        "re.compile"
    ],
    "pathlib._WindowsFlavour.resolve": [
        "posixpath.split",
        "ntpath.split",
        "nt._getfinalpathname",
        "posixpath.join",
        "<builtin>.reversed",
        "ntpath.join",
        "pathlib._WindowsFlavour._ext_to_normal",
        "<builtin>.str"
    ],
    "pathlib._WindowsFlavour._ext_to_normal": [
        "pathlib._WindowsFlavour._split_extended_path"
    ],
    "pathlib._WindowsFlavour.is_reserved": [],
    "pathlib._WindowsFlavour.make_uri": [
        "<builtin>.len",
        "urllib.parse.quote_from_bytes"
    ],
    "urllib.parse.quote_from_bytes": [
        "<builtin>.isinstance",
        "_collections.defaultdict.__getitem__",
        "urllib.parse.Quoter.__init__",
        "<builtin>.bytes",
        "<builtin>.TypeError"
    ],
    "pathlib._WindowsFlavour.gethomedir": [
        "<builtin>.RuntimeError",
        "pathlib._Flavour.parse_parts"
    ],
    "pathlib._PosixFlavour": [],
    "pathlib._PosixFlavour.casefold_parts": [],
    "pathlib._PosixFlavour.compile_pattern": [
        "re.compile"
    ],
    "pathlib._PosixFlavour.resolve": [
        "<builtin>.str",
        "pathlib._PosixFlavour.resolve._resolve"
    ],
    "pathlib._PosixFlavour.resolve._resolve": [
        "<builtin>.RuntimeError",
        "pathlib._PosixFlavour.resolve._resolve"
    ],
    "pathlib._PosixFlavour.is_reserved": [],
    "pathlib._PosixFlavour.make_uri": [
        "urllib.parse.quote_from_bytes",
        "<builtin>.bytes"
    ],
    "pathlib._PosixFlavour.gethomedir": [
        "<builtin>.RuntimeError",
        "pwd.getpwnam",
        "pwd.getpwuid"
    ],
    "pathlib._Accessor": [],
    "pathlib._NormalAccessor": [
        "<builtin>.hasattr"
    ],
    "pathlib._NormalAccessor.lchmod": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._NormalAccessor.link_to": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._NormalAccessor.symlink": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._NormalAccessor.readlink": [],
    "pathlib._make_selector": [
        "pathlib._PreciseSelector.__init__",
        "pathlib._RecursiveWildcardSelector.__init__",
        "pathlib._is_wildcard_pattern",
        "<builtin>.ValueError",
        "pathlib._WildcardSelector.__init__"
    ],
    "pathlib._PreciseSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._WildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._RecursiveWildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._Selector": [],
    "pathlib._Selector.__init__": [
        "pathlib._make_selector"
    ],
    "pathlib._Selector.select_from": [
        "<builtin>.iter",
        "<builtin>.type"
    ],
    "pathlib._TerminatingSelector": [],
    "pathlib._TerminatingSelector._select_from": [],
    "pathlib._PreciseSelector": [],
    "pathlib._PreciseSelector._select_from": [
        "pathlib._TerminatingSelector._select_from"
    ],
    "pathlib._WildcardSelector": [],
    "pathlib._WildcardSelector._select_from": [
        "pathlib._TerminatingSelector._select_from",
        "pathlib._ignore_error",
        "<builtin>.list"
    ],
    "pathlib._RecursiveWildcardSelector": [],
    "pathlib._RecursiveWildcardSelector._iterate_directories": [
        "pathlib._ignore_error",
        "<builtin>.list",
        "pathlib._RecursiveWildcardSelector._iterate_directories"
    ],
    "pathlib._RecursiveWildcardSelector._select_from": [
        "<builtin>.set",
        "pathlib._RecursiveWildcardSelector._iterate_directories"
    ],
    "pathlib._PathParents": [],
    "pathlib._PathParents.__init__": [
        "<builtin>.type"
    ],
    "pathlib._PathParents.__len__": [
        "<builtin>.len"
    ],
    "pathlib._PathParents.__getitem__": [
        "<builtin>.len",
        "<builtin>.IndexError"
    ],
    "pathlib._PathParents.__repr__": [],
    "pathlib.PurePath": [
        "operator.attrgetter.__init__",
        "<builtin>.property"
    ],
    "pathlib.PurePath.__new__": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath._from_parts": [],
    "pathlib.PurePath.__reduce__": [
        "<builtin>.tuple"
    ],
    "pathlib.PurePath._parse_args": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.type"
    ],
    "pathlib.PurePath._from_parsed_parts": [],
    "pathlib.PurePath._format_parsed_parts": [],
    "pathlib.PurePath._init": [],
    "pathlib.PurePath._make_child": [
        "pathlib.PurePath._parse_args",
        "pathlib.PurePath._from_parsed_parts"
    ],
    "pathlib.PurePath.__str__": [
        "pathlib.PurePath._format_parsed_parts"
    ],
    "pathlib.PurePath.__fspath__": [
        "<builtin>.str"
    ],
    "pathlib.PurePath.as_posix": [
        "<builtin>.str"
    ],
    "pathlib.PurePath.__bytes__": [],
    "pathlib.PurePath.__repr__": [
        "pathlib.PurePath.as_posix"
    ],
    "pathlib.PurePath.as_uri": [
        "pathlib.PurePath.is_absolute",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.is_absolute": [
        "<builtin>.bool"
    ],
    "pathlib.PurePath._cparts": [],
    "pathlib.PurePath.__eq__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "pathlib.PurePath.__lt__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__le__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__gt__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__ge__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.anchor": [],
    "pathlib.PurePath.name": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.suffix": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.suffixes": [],
    "pathlib.PurePath.stem": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.with_name": [
        "<builtin>.len",
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.with_suffix": [
        "<builtin>.len",
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.relative_to": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.str",
        "pathlib.PurePath._format_parsed_parts",
        "pathlib.PurePath._parse_args",
        "<builtin>.len",
        "pathlib.PurePath._from_parsed_parts"
    ],
    "pathlib.PurePath.parts": [
        "<builtin>.tuple"
    ],
    "pathlib.PurePath.__truediv__": [
        "pathlib.PurePath._make_child"
    ],
    "pathlib.PurePath.__rtruediv__": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath.parent": [
        "<builtin>.len",
        "pathlib.PurePath._from_parsed_parts"
    ],
    "pathlib.PurePath.parents": [
        "pathlib._PathParents.__init__"
    ],
    "pathlib.PurePath.is_reserved": [],
    "pathlib.PurePath.match": [
        "<builtin>.len",
        "<builtin>.reversed",
        "<builtin>.ValueError",
        "<builtin>.zip"
    ],
    "pathlib.PurePosixPath": [],
    "pathlib.PureWindowsPath": [],
    "pathlib.Path": [],
    "pathlib.Path.__new__": [
        "<builtin>.NotImplementedError",
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.Path._init": [],
    "pathlib.Path._make_child_relpath": [
        "pathlib.PurePath._from_parsed_parts"
    ],
    "pathlib.Path.__enter__": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path._raise_closed": [
        "<builtin>.ValueError"
    ],
    "pathlib.Path.__exit__": [],
    "pathlib.Path._opener": [],
    "pathlib.Path._raw_open": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.cwd": [],
    "pathlib.Path.home": [],
    "pathlib.Path.samefile": [
        "posixpath.samestat",
        "ntpath.samestat",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.stat": [],
    "pathlib.Path.iterdir": [
        "pathlib.Path._raise_closed",
        "pathlib.Path._make_child_relpath"
    ],
    "pathlib.Path.glob": [
        "<builtin>.NotImplementedError",
        "pathlib._make_selector",
        "<builtin>.ValueError",
        "<builtin>.tuple"
    ],
    "pathlib.Path.rglob": [
        "<builtin>.NotImplementedError",
        "pathlib._make_selector",
        "<builtin>.tuple"
    ],
    "pathlib.Path.absolute": [
        "pathlib.PurePath._from_parts",
        "pathlib.PurePath.is_absolute",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.resolve": [
        "pathlib.PurePath._from_parts",
        "pathlib.Path.absolute",
        "pathlib.Path.stat",
        "<builtin>.str",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.owner": [
        "pwd.getpwuid",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.open": [
        "pathlib.Path._raise_closed",
        "io.open"
    ],
    "pathlib.Path.read_bytes": [
        "pathlib.Path.open"
    ],
    "pathlib.Path.read_text": [
        "pathlib.Path.open"
    ],
    "pathlib.Path.write_bytes": [
        "<builtin>.memoryview",
        "pathlib.Path.open"
    ],
    "pathlib.Path.write_text": [
        "pathlib.Path.open",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "pathlib.Path.touch": [
        "pathlib.Path._raw_open",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.mkdir": [
        "pathlib.Path.is_dir",
        "pathlib.Path._raise_closed",
        "pathlib.Path.mkdir"
    ],
    "pathlib.Path.is_dir": [
        "pathlib._ignore_error",
        "stat.S_ISDIR",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.chmod": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.lchmod": [
        "pathlib._NormalAccessor.lchmod",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.unlink": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.rmdir": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.lstat": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.link_to": [
        "pathlib._NormalAccessor.link_to",
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.rename": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.replace": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.symlink_to": [
        "pathlib.Path._raise_closed",
        "pathlib._NormalAccessor.symlink"
    ],
    "pathlib.Path.exists": [
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_file": [
        "pathlib._ignore_error",
        "stat.S_ISREG",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_mount": [
        "pathlib.Path.exists",
        "pathlib.Path.is_dir",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_symlink": [
        "pathlib._ignore_error",
        "stat.S_ISLNK",
        "pathlib.Path.lstat"
    ],
    "pathlib.Path.is_block_device": [
        "stat.S_ISBLK",
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_char_device": [
        "stat.S_ISCHR",
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_fifo": [
        "stat.S_ISFIFO",
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_socket": [
        "pathlib._ignore_error",
        "stat.S_ISSOCK",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.expanduser": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PosixPath": [],
    "pathlib.WindowsPath": [],
    "pathlib.WindowsPath.owner": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib.WindowsPath.group": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib.WindowsPath.is_mount": [
        "<builtin>.NotImplementedError"
    ],
    "urllib.parse.clear_cache": [],
    "urllib.parse._noop": [],
    "urllib.parse._encode_result": [],
    "urllib.parse._decode_args": [
        "<builtin>.tuple"
    ],
    "urllib.parse._coerce_args": [
        "urllib.parse._decode_args",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse._ResultMixinStr.encode": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._ResultMixinBytes.decode": [],
    "urllib.parse._NetlocResultMixinBase": [],
    "urllib.parse._NetlocResultMixinBase.username": [],
    "urllib.parse._NetlocResultMixinBase.password": [],
    "urllib.parse._NetlocResultMixinBase.hostname": [
        "<builtin>.isinstance"
    ],
    "urllib.parse._NetlocResultMixinBase.port": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "urllib.parse._NetlocResultMixinStr": [],
    "urllib.parse._NetlocResultMixinStr._userinfo": [],
    "urllib.parse._NetlocResultMixinStr._hostinfo": [],
    "urllib.parse._NetlocResultMixinBytes": [],
    "urllib.parse._NetlocResultMixinBytes._userinfo": [],
    "urllib.parse._NetlocResultMixinBytes._hostinfo": [],
    "urllib.parse.DefragResult": [],
    "urllib.parse.DefragResult.geturl": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.SplitResult.geturl": [
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.urlunsplit": [
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.ParseResult": [],
    "urllib.parse.ParseResult.geturl": [
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.urlunparse": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.DefragResultBytes.geturl": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse.SplitResultBytes.geturl": [
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse.ParseResultBytes.geturl": [
        "urllib.parse.urlunparse"
    ],
    "urllib.parse._fix_result_transcoding": [],
    "urllib.parse.urlparse": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlsplit",
        "urllib.parse._splitparams"
    ],
    "urllib.parse.urlsplit": [
        "urllib.parse._coerce_args",
        "<builtin>.bool",
        "urllib.parse._checknetloc",
        "urllib.parse._splitnetloc",
        "<builtin>.ValueError",
        "<builtin>.len",
        "urllib.parse.clear_cache",
        "<builtin>.type"
    ],
    "urllib.parse._splitparams": [],
    "urllib.parse._splitnetloc": [
        "<builtin>.len",
        "<builtin>.min"
    ],
    "urllib.parse.urljoin": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlparse",
        "<builtin>.filter",
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.urldefrag": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlparse",
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.unquote_to_bytes": [
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "urllib.parse.unquote": [
        "urllib.parse.unquote_to_bytes",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "urllib.parse.parse_qs": [
        "urllib.parse.parse_qsl"
    ],
    "urllib.parse.parse_qsl": [
        "urllib.parse._coerce_args",
        "<builtin>.len",
        "<builtin>.ValueError",
        "urllib.parse.unquote"
    ],
    "urllib.parse.unquote_plus": [
        "urllib.parse.unquote"
    ],
    "urllib.parse.Quoter": [],
    "urllib.parse.Quoter.__init__": [],
    "urllib.parse.Quoter.__repr__": [
        "<builtin>.dict"
    ],
    "urllib.parse.Quoter.__missing__": [
        "<builtin>.chr"
    ],
    "urllib.parse.quote": [
        "urllib.parse.quote_from_bytes",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "urllib.parse.quote_plus": [
        "<builtin>.isinstance",
        "urllib.parse.quote"
    ],
    "_collections.defaultdict.__getitem__": [],
    "urllib.parse.urlencode": [
        "<builtin>.isinstance",
        "urllib.parse.quote_plus",
        "sys.exc_info",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "urllib.parse.to_bytes": [
        "warnings.warn",
        "urllib.parse._to_bytes"
    ],
    "urllib.parse._to_bytes": [
        "<builtin>.repr",
        "<builtin>.isinstance",
        "<builtin>.UnicodeError"
    ],
    "<builtin>.UnicodeError": [],
    "urllib.parse.unwrap": [
        "<builtin>.str"
    ],
    "urllib.parse.splittype": [
        "urllib.parse._splittype",
        "warnings.warn"
    ],
    "urllib.parse._splittype": [
        "re.compile"
    ],
    "urllib.parse.splithost": [
        "warnings.warn",
        "urllib.parse._splithost"
    ],
    "urllib.parse._splithost": [
        "re.compile"
    ],
    "urllib.parse.splituser": [
        "warnings.warn",
        "urllib.parse._splituser"
    ],
    "urllib.parse._splituser": [],
    "urllib.parse.splitpasswd": [
        "warnings.warn",
        "urllib.parse._splitpasswd"
    ],
    "urllib.parse._splitpasswd": [],
    "urllib.parse.splitport": [
        "warnings.warn",
        "urllib.parse._splitport"
    ],
    "urllib.parse._splitport": [
        "re.compile"
    ],
    "urllib.parse.splitnport": [
        "warnings.warn",
        "urllib.parse._splitnport"
    ],
    "urllib.parse._splitnport": [
        "<builtin>.int"
    ],
    "urllib.parse.splitquery": [
        "warnings.warn",
        "urllib.parse._splitquery"
    ],
    "urllib.parse._splitquery": [],
    "urllib.parse.splittag": [
        "warnings.warn",
        "urllib.parse._splittag"
    ],
    "urllib.parse._splittag": [],
    "urllib.parse.splitattr": [
        "warnings.warn",
        "urllib.parse._splitattr"
    ],
    "urllib.parse._splitattr": [],
    "urllib.parse.splitvalue": [
        "warnings.warn",
        "urllib.parse._splitvalue"
    ],
    "urllib.parse._splitvalue": [],
    "configparser.Error": [],
    "configparser.Error.__init__": [],
    "configparser.Error.__repr__": [],
    "configparser.NoSectionError": [],
    "configparser.NoSectionError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.DuplicateSectionError": [],
    "configparser.DuplicateSectionError.__init__": [
        "configparser.Error.__init__",
        "<builtin>.repr"
    ],
    "configparser.DuplicateOptionError": [],
    "configparser.DuplicateOptionError.__init__": [
        "configparser.Error.__init__",
        "<builtin>.repr"
    ],
    "configparser.NoOptionError": [],
    "configparser.NoOptionError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.InterpolationError": [],
    "configparser.InterpolationError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.InterpolationMissingOptionError": [],
    "configparser.InterpolationMissingOptionError.__init__": [
        "configparser.InterpolationError.__init__"
    ],
    "configparser.InterpolationSyntaxError": [],
    "configparser.InterpolationDepthError": [],
    "configparser.InterpolationDepthError.__init__": [
        "configparser.InterpolationError.__init__"
    ],
    "configparser.ParsingError": [],
    "configparser.ParsingError.__init__": [
        "configparser.Error.__init__",
        "<builtin>.ValueError"
    ],
    "configparser.ParsingError.filename": [
        "warnings.warn"
    ],
    "configparser.ParsingError.append": [],
    "configparser.MissingSectionHeaderError": [],
    "configparser.MissingSectionHeaderError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.Interpolation": [],
    "configparser.Interpolation.before_get": [],
    "configparser.Interpolation.before_set": [],
    "configparser.Interpolation.before_read": [],
    "configparser.Interpolation.before_write": [],
    "configparser.BasicInterpolation": [
        "re.compile"
    ],
    "configparser.BasicInterpolation.before_get": [
        "configparser.BasicInterpolation._interpolate_some"
    ],
    "configparser.BasicInterpolation._interpolate_some": [
        "configparser.InterpolationDepthError.__init__",
        "configparser.InterpolationError.__init__",
        "configparser.BasicInterpolation._interpolate_some",
        "configparser.InterpolationMissingOptionError.__init__"
    ],
    "configparser.BasicInterpolation.before_set": [
        "<builtin>.ValueError"
    ],
    "configparser.ExtendedInterpolation": [
        "re.compile"
    ],
    "configparser.ExtendedInterpolation.before_get": [
        "configparser.ExtendedInterpolation._interpolate_some"
    ],
    "configparser.ExtendedInterpolation._interpolate_some": [
        "configparser.ExtendedInterpolation._interpolate_some",
        "configparser.InterpolationError.__init__",
        "<builtin>.dict",
        "configparser.InterpolationMissingOptionError.__init__",
        "<builtin>.len",
        "configparser.InterpolationDepthError.__init__"
    ],
    "configparser.ExtendedInterpolation.before_set": [
        "<builtin>.ValueError"
    ],
    "configparser.LegacyInterpolation": [
        "re.compile"
    ],
    "configparser.LegacyInterpolation.before_get": [
        "configparser.InterpolationDepthError.__init__",
        "configparser.InterpolationMissingOptionError.__init__"
    ],
    "configparser.LegacyInterpolation.before_set": [],
    "configparser.LegacyInterpolation._interpolation_replace": [],
    "configparser.RawConfigParser": [
        "re.compile"
    ],
    "configparser.ConverterMapping.__init__": [
        "<builtin>.dir",
        "<builtin>.getattr",
        "<builtin>.callable"
    ],
    "configparser.SectionProxy.__init__": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "configparser.RawConfigParser._read_defaults": [
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.defaults": [],
    "configparser.RawConfigParser.add_section": [
        "configparser.SectionProxy.__init__",
        "<builtin>.ValueError",
        "configparser.DuplicateSectionError.__init__"
    ],
    "configparser.RawConfigParser.has_section": [],
    "configparser.RawConfigParser.options": [
        "<builtin>.list",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.RawConfigParser.read": [
        "<builtin>.open",
        "<builtin>.isinstance",
        "configparser.RawConfigParser._read"
    ],
    "configparser.RawConfigParser._read": [
        "configparser.RawConfigParser.optionxform",
        "<builtin>.min",
        "configparser.RawConfigParser._handle_error",
        "configparser.DuplicateSectionError.__init__",
        "configparser.MissingSectionHeaderError.__init__",
        "configparser.DuplicateOptionError.__init__",
        "<builtin>.enumerate",
        "configparser.RawConfigParser._join_multiline_values",
        "configparser.ParsingError.__init__",
        "configparser.RawConfigParser.set",
        "configparser.SectionProxy.__init__"
    ],
    "configparser.RawConfigParser.read_file": [
        "configparser.RawConfigParser._read"
    ],
    "configparser.RawConfigParser.read_dict": [
        "configparser.RawConfigParser.optionxform",
        "configparser.DuplicateOptionError.__init__",
        "<builtin>.str",
        "configparser.RawConfigParser.add_section",
        "configparser.RawConfigParser.set"
    ],
    "configparser.RawConfigParser.set": [
        "configparser.RawConfigParser.optionxform",
        "configparser.BasicInterpolation.before_set",
        "configparser.Interpolation.before_set",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.RawConfigParser.optionxform": [],
    "configparser.RawConfigParser.get": [
        "configparser.RawConfigParser.optionxform",
        "configparser.BasicInterpolation.before_get",
        "configparser.Interpolation.before_get",
        "configparser.NoOptionError.__init__",
        "configparser.RawConfigParser._unify_values"
    ],
    "configparser.RawConfigParser._unify_values": [
        "configparser.RawConfigParser.optionxform",
        "collections.ChainMap.__init__",
        "<builtin>.str",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.RawConfigParser._get": [
        "configparser.RawConfigParser._convert_to_boolean",
        "configparser.RawConfigParser.get"
    ],
    "configparser.RawConfigParser._convert_to_boolean": [
        "<builtin>.ValueError"
    ],
    "configparser.RawConfigParser._get_conv": [
        "configparser.RawConfigParser._get"
    ],
    "configparser.RawConfigParser.getint": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.getfloat": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.getboolean": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.items.<lambda1>": [
        "configparser.BasicInterpolation.before_get",
        "configparser.Interpolation.before_get"
    ],
    "configparser.RawConfigParser.items.<lambda2>": [],
    "configparser.RawConfigParser.popitem": [
        "configparser.RawConfigParser.sections"
    ],
    "configparser.RawConfigParser.has_option": [
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.write": [
        "configparser.RawConfigParser._write_section"
    ],
    "configparser.RawConfigParser._write_section": [
        "<builtin>.str",
        "configparser.Interpolation.before_write"
    ],
    "configparser.RawConfigParser.remove_option": [
        "configparser.RawConfigParser.optionxform",
        "configparser.NoSectionError.__init__"
    ],
    "configparser.RawConfigParser.remove_section": [],
    "configparser.RawConfigParser.__getitem__": [
        "configparser.RawConfigParser.has_section",
        "<builtin>.KeyError"
    ],
    "configparser.RawConfigParser.__setitem__": [
        "configparser.RawConfigParser.read_dict"
    ],
    "configparser.RawConfigParser.__delitem__": [
        "configparser.RawConfigParser.has_section",
        "<builtin>.ValueError",
        "configparser.RawConfigParser.remove_section",
        "<builtin>.KeyError"
    ],
    "configparser.RawConfigParser.__contains__": [
        "configparser.RawConfigParser.has_section"
    ],
    "configparser.RawConfigParser.__len__": [
        "<builtin>.len"
    ],
    "configparser.RawConfigParser.__iter__": [
        "itertools.chain"
    ],
    "configparser.RawConfigParser._handle_error": [
        "configparser.ParsingError.append",
        "<builtin>.repr",
        "configparser.ParsingError.__init__"
    ],
    "configparser.RawConfigParser._join_multiline_values": [
        "itertools.chain",
        "configparser.Interpolation.before_read",
        "<builtin>.isinstance"
    ],
    "configparser.RawConfigParser._validate_value_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "configparser.RawConfigParser.converters": [],
    "configparser.ConfigParser": [],
    "configparser.ConfigParser.set": [
        "<builtin>.super",
        "configparser.RawConfigParser._validate_value_types"
    ],
    "configparser.ConfigParser.add_section": [
        "<builtin>.super",
        "configparser.RawConfigParser._validate_value_types"
    ],
    "configparser.ConfigParser._read_defaults": [
        "configparser.RawConfigParser.read_dict"
    ],
    "configparser.SafeConfigParser": [],
    "configparser.SafeConfigParser.__init__": [
        "warnings.warn",
        "<builtin>.super"
    ],
    "configparser.SectionProxy": [],
    "configparser.SectionProxy.__repr__": [],
    "configparser.SectionProxy.__getitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.get",
        "configparser.RawConfigParser.has_option"
    ],
    "configparser.SectionProxy.__setitem__": [
        "configparser.RawConfigParser.set",
        "configparser.RawConfigParser._validate_value_types"
    ],
    "configparser.SectionProxy.__delitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.has_option",
        "configparser.RawConfigParser.remove_option"
    ],
    "configparser.SectionProxy.__contains__": [
        "configparser.RawConfigParser.has_option"
    ],
    "configparser.SectionProxy.__len__": [
        "<builtin>.len",
        "configparser.SectionProxy._options"
    ],
    "configparser.SectionProxy._options": [
        "configparser.RawConfigParser.defaults",
        "configparser.RawConfigParser.options"
    ],
    "configparser.SectionProxy.__iter__": [
        "configparser.SectionProxy._options"
    ],
    "configparser.SectionProxy.parser": [],
    "configparser.SectionProxy.name": [],
    "configparser.SectionProxy.get": [],
    "configparser.ConverterMapping": [
        "re.compile"
    ],
    "configparser.ConverterMapping.__getitem__": [],
    "configparser.ConverterMapping.__setitem__": [
        "<builtin>.setattr",
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "configparser.ConverterMapping.__delitem__": [
        "itertools.chain",
        "<builtin>.delattr",
        "<builtin>.KeyError"
    ],
    "configparser.ConverterMapping.__iter__": [
        "<builtin>.iter"
    ],
    "configparser.ConverterMapping.__len__": [
        "<builtin>.len"
    ],
    "importlib.abc._register": [
        "<builtin>.getattr",
        "_bootstrap_external.FileLoader.register",
        "_bootstrap_external.SourceLoader.register"
    ],
    "_bootstrap_external.FileLoader.register": [],
    "_bootstrap_external.SourceLoader.register": [],
    "importlib.abc.Finder": [
        "abc.abstractmethod"
    ],
    "importlib.abc.Finder.find_module": [],
    "importlib.abc.MetaPathFinder": [],
    "importlib.abc.MetaPathFinder.find_module": [
        "warnings.warn",
        "<builtin>.hasattr"
    ],
    "importlib.abc.MetaPathFinder.invalidate_caches": [],
    "importlib.abc.PathEntryFinder": [],
    "importlib.abc.PathEntryFinder.find_loader": [
        "warnings.warn",
        "<builtin>.hasattr"
    ],
    "importlib.abc.PathEntryFinder.invalidate_caches": [],
    "importlib.abc.Loader": [],
    "importlib.abc.Loader.create_module": [],
    "importlib.abc.Loader.load_module": [
        "<builtin>.hasattr",
        "_bootstrap._load_module_shim"
    ],
    "_bootstrap._load_module_shim": [],
    "importlib.abc.Loader.module_repr": [],
    "importlib.abc.ResourceLoader": [
        "abc.abstractmethod"
    ],
    "importlib.abc.ResourceLoader.get_data": [],
    "importlib.abc.InspectLoader": [
        "abc.abstractmethod"
    ],
    "importlib.abc.InspectLoader.is_package": [],
    "importlib.abc.InspectLoader.get_code": [
        "importlib.abc.InspectLoader.get_source",
        "importlib.abc.InspectLoader.source_to_code"
    ],
    "importlib.abc.InspectLoader.get_source": [],
    "importlib.abc.InspectLoader.source_to_code": [
        "<builtin>.compile"
    ],
    "importlib.abc.ExecutionLoader": [
        "abc.abstractmethod"
    ],
    "importlib.abc.ExecutionLoader.get_filename": [],
    "importlib.abc.ExecutionLoader.get_code": [
        "importlib.abc.InspectLoader.get_source",
        "importlib.abc.ExecutionLoader.get_filename",
        "importlib.abc.InspectLoader.source_to_code"
    ],
    "importlib.abc.FileLoader": [],
    "importlib.abc.SourceLoader": [],
    "importlib.abc.SourceLoader.path_mtime": [
        "importlib.abc.SourceLoader.path_stats",
        "<builtin>.int"
    ],
    "importlib.abc.SourceLoader.path_stats": [
        "importlib.abc.SourceLoader.path_mtime"
    ],
    "importlib.abc.SourceLoader.set_data": [],
    "importlib.abc.ResourceReader": [
        "abc.abstractmethod"
    ],
    "importlib.abc.ResourceReader.open_resource": [],
    "importlib.abc.ResourceReader.resource_path": [],
    "importlib.abc.ResourceReader.is_resource": [],
    "importlib.abc.ResourceReader.contents": [],
    "email.parser.Parser.__init__": [],
    "email.parser.Parser.parsestr": [
        "_io.StringIO",
        "email.parser.Parser.parse"
    ],
    "email.parser.BytesParser.__init__": [
        "email.parser.Parser.__init__"
    ],
    "email.parser.BytesParser.parsebytes": [
        "email.parser.Parser.parsestr"
    ],
    "email.parser.Parser.parse": [
        "email.feedparser.FeedParser._set_headersonly",
        "email.feedparser.FeedParser.feed",
        "email.feedparser.FeedParser.__init__",
        "email.feedparser.FeedParser.close"
    ],
    "email.parser.BytesParser.parse": [
        "_io._IOBase.detach",
        "email.parser.Parser.parse",
        "_io._BufferedIOBase.detach",
        "_io.TextIOWrapper"
    ],
    "email.parser.Parser": [],
    "email.feedparser.FeedParser._set_headersonly": [],
    "email.feedparser.FeedParser.feed": [
        "email.feedparser.BufferedSubFile.push",
        "email.feedparser.FeedParser._call_parse"
    ],
    "email.feedparser.FeedParser.close": [
        "email.feedparser.BufferedSubFile.close",
        "email._policybase.Policy.handle_defect",
        "email.feedparser.FeedParser._call_parse",
        "email.errors.MessageDefect.__init__",
        "email.feedparser.FeedParser._pop_message"
    ],
    "email.parser.HeaderParser": [],
    "email.parser.HeaderParser.parse": [
        "email.parser.Parser.parse"
    ],
    "email.parser.HeaderParser.parsestr": [
        "email.parser.Parser.parsestr"
    ],
    "email.parser.BytesParser": [],
    "_io._IOBase.detach": [],
    "_io._BufferedIOBase.detach": [],
    "email.parser.BytesHeaderParser": [],
    "email.parser.BytesHeaderParser.parse": [
        "email.parser.BytesParser.parse"
    ],
    "email.parser.BytesHeaderParser.parsebytes": [
        "email.parser.BytesParser.parsebytes"
    ],
    "email.feedparser.BufferedSubFile": [],
    "email.feedparser.BufferedSubFile.__init__": [
        "_io.StringIO"
    ],
    "email.feedparser.BufferedSubFile.push_eof_matcher": [],
    "email.feedparser.BufferedSubFile.pop_eof_matcher": [],
    "email.feedparser.BufferedSubFile.close": [
        "email.feedparser.BufferedSubFile.pushlines"
    ],
    "email.feedparser.BufferedSubFile.pushlines": [],
    "email.feedparser.BufferedSubFile.readline": [
        "<builtin>.reversed"
    ],
    "email.feedparser.BufferedSubFile.unreadline": [],
    "email.feedparser.BufferedSubFile.push": [
        "email.feedparser.BufferedSubFile.pushlines"
    ],
    "email.feedparser.BufferedSubFile.__iter__": [],
    "email.feedparser.BufferedSubFile.__next__": [
        "email.feedparser.BufferedSubFile.readline"
    ],
    "email.feedparser.FeedParser": [],
    "email.feedparser.FeedParser._parsegen": [
        "email._policybase.Policy.handle_defect",
        "email.feedparser.BufferedSubFile.push_eof_matcher",
        "<builtin>.len",
        "<builtin>.isinstance",
        "re.escape",
        "email.feedparser.FeedParser._new_message",
        "email.feedparser.BufferedSubFile.pop_eof_matcher",
        "re.compile",
        "email.errors.MessageDefect.__init__",
        "email.feedparser.BufferedSubFile.__iter__",
        "<builtin>.str",
        "email.feedparser.FeedParser._parsegen",
        "email.feedparser.FeedParser._pop_message",
        "email.feedparser.BufferedSubFile.__next__",
        "email.feedparser.FeedParser._parse_headers",
        "email.feedparser.BufferedSubFile.readline",
        "email.feedparser.BufferedSubFile.unreadline"
    ],
    "email.feedparser.FeedParser._call_parse": [],
    "email.feedparser.FeedParser._pop_message": [],
    "email.errors.MessageDefect.__init__": [
        "<builtin>.super"
    ],
    "email._policybase.Policy.handle_defect": [
        "email._policybase.Policy.register_defect"
    ],
    "email.feedparser.FeedParser._new_message": [
        "email.message.Message.__init__"
    ],
    "email.feedparser.FeedParser._parse_headers": [
        "email._policybase.Policy.handle_defect",
        "email._policybase.Compat32.header_source_parse",
        "email.errors.HeaderDefect.__init__",
        "email.errors.MessageDefect.__init__",
        "<builtin>.enumerate",
        "<builtin>.len",
        "email.feedparser.BufferedSubFile.unreadline"
    ],
    "email._policybase.Compat32.header_source_parse": [],
    "email.errors.HeaderDefect.__init__": [
        "<builtin>.super"
    ],
    "email.feedparser.BytesFeedParser": [],
    "email.feedparser.BytesFeedParser.feed": [
        "<builtin>.super"
    ],
    "email.message._splitparam": [
        "<builtin>.str"
    ],
    "email.message._formatparam": [
        "<builtin>.len",
        "email.utils.quote",
        "email.utils.encode_rfc2231",
        "<builtin>.isinstance"
    ],
    "email.utils.encode_rfc2231": [],
    "email.utils.quote": [],
    "email.message._parseparam": [
        "<builtin>.len",
        "<builtin>.str"
    ],
    "email.message._unquotevalue": [
        "email.utils.unquote",
        "<builtin>.isinstance"
    ],
    "email.utils.unquote": [
        "<builtin>.len"
    ],
    "email.message.Message.__str__": [
        "email.message.Message.as_string"
    ],
    "email.generator.Generator.__init__": [],
    "email.generator.Generator.flatten": [
        "email.generator.Generator.write",
        "time.time",
        "email.generator.Generator._encode",
        "time.ctime",
        "email.message.Message.get_unixfrom",
        "email.generator.Generator._write"
    ],
    "email.message.Message.__bytes__": [
        "email.message.Message.as_bytes"
    ],
    "_io.BytesIO": [],
    "email.message.Message.is_multipart": [
        "<builtin>.isinstance"
    ],
    "email.message.Message.set_unixfrom": [],
    "email.message.Message.get_unixfrom": [],
    "email.message.Message.attach": [
        "<builtin>.TypeError"
    ],
    "email.message.Message.get_payload": [
        "email._policybase.Policy.handle_defect",
        "email.message.Message.get_param",
        "quopri.decodestring",
        "email.utils._has_surrogates",
        "<builtin>.isinstance",
        "email.message.Message.get",
        "email._encoded_words.decode_b",
        "_io.BytesIO",
        "uu.decode",
        "<builtin>.TypeError",
        "<builtin>.str",
        "email.message.Message.is_multipart",
        "<builtin>.type"
    ],
    "email.message.Message.get": [
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.utils._has_surrogates": [],
    "email.message.Message.get_param": [
        "email.message.Message._get_params_preserve",
        "email.message._unquotevalue"
    ],
    "email._encoded_words.decode_b": [
        "<builtin>.len",
        "base64.b64decode",
        "email.errors.MessageDefect.__init__"
    ],
    "uu.decode": [
        "ntpath.exists",
        "<builtin>.isinstance",
        "sys.stdin.buffer.readline",
        "<builtin>.open",
        "sys.stderr.write",
        "sys.stdout.buffer.write",
        "<builtin>.len",
        "posixpath.exists",
        "<builtin>.int"
    ],
    "email.message.Message.set_payload": [
        "email.message.Message.set_charset",
        "email.charset.Charset.__init__",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "email.charset.Charset.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "email.message.Message.set_charset": [
        "email.charset.Charset.__init__",
        "<builtin>.isinstance",
        "email.message.Message.add_header",
        "email.message.Message.set_param",
        "email.message.Message.del_param"
    ],
    "email.message.Message.del_param": [
        "email.message.Message.get_params",
        "email.message.Message.get",
        "email.message._formatparam"
    ],
    "email.message.Message.add_header": [
        "email.message._formatparam"
    ],
    "email.message.Message.set_param": [
        "email.message.Message.get_param",
        "<builtin>.isinstance",
        "email.message.Message.get",
        "email.message.Message.replace_header",
        "email.message._formatparam",
        "email.message.Message.get_params"
    ],
    "email.message.Message.get_charset": [],
    "email.message.Message.__len__": [
        "<builtin>.len"
    ],
    "email.message.Message.__getitem__": [
        "email.message.Message.get"
    ],
    "email.message.Message.__setitem__": [
        "email.policy.EmailPolicy.header_max_count",
        "email._policybase.Compat32.header_store_parse",
        "email._policybase.Policy.header_max_count",
        "<builtin>.ValueError"
    ],
    "email.policy.EmailPolicy.header_max_count": [],
    "email._policybase.Policy.header_max_count": [],
    "email._policybase.Compat32.header_store_parse": [],
    "email.message.Message.__delitem__": [],
    "email.message.Message.__contains__": [],
    "email.message.Message.__iter__": [],
    "email.message.Message.keys": [],
    "email.message.Message.values": [
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email._policybase.Compat32.header_fetch_parse": [
        "email._policybase.Compat32._sanitize_header"
    ],
    "email.message.Message.items": [
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.message.Message.set_raw": [],
    "email.message.Message.raw_items": [
        "<builtin>.iter"
    ],
    "email.message.Message.get_all": [
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.message.Message.replace_header": [
        "<builtin>.len",
        "<builtin>.range",
        "email._policybase.Compat32.header_store_parse",
        "<builtin>.zip"
    ],
    "email.message.Message.get_content_type": [
        "email.message.Message.get_default_type",
        "<builtin>.object",
        "email.message._splitparam",
        "email.message.Message.get"
    ],
    "email.message.Message.get_default_type": [],
    "email.message.Message.get_content_maintype": [
        "email.message.Message.get_content_type"
    ],
    "email.message.Message.get_content_subtype": [
        "email.message.Message.get_content_type"
    ],
    "email.message.Message.set_default_type": [],
    "email.message.Message._get_params_preserve": [
        "<builtin>.object",
        "email.message._parseparam",
        "email.message.Message.get",
        "email.utils.decode_params"
    ],
    "email.utils.decode_params": [
        "email.utils.decode_rfc2231",
        "email.utils.unquote",
        "email._parseaddr.quote",
        "<builtin>.int"
    ],
    "email.message.Message.get_params": [
        "<builtin>.object",
        "email.message.Message._get_params_preserve",
        "email.message._unquotevalue"
    ],
    "email.message.Message.set_type": [
        "email.message.Message.get_params",
        "email.message.Message.set_param"
    ],
    "email.message.Message.get_filename": [
        "<builtin>.object",
        "email.message.Message.get_param",
        "email.utils.collapse_rfc2231_value"
    ],
    "email.utils.collapse_rfc2231_value": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "email.utils.unquote",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "email.message.Message.get_boundary": [
        "<builtin>.object",
        "email.message.Message.get_param",
        "email.utils.collapse_rfc2231_value"
    ],
    "email.message.Message.set_boundary": [
        "<builtin>.object",
        "email._policybase.Compat32.header_store_parse",
        "email.message.Message._get_params_preserve"
    ],
    "email.message.Message.get_content_charset": [
        "<builtin>.object",
        "<builtin>.str",
        "<builtin>.isinstance",
        "email.message.Message.get_param"
    ],
    "email.message.Message.get_charsets": [
        "email.iterators.walk"
    ],
    "email.iterators.walk": [],
    "email.message.Message.get_content_disposition": [
        "email.message._splitparam",
        "email.message.Message.get"
    ],
    "email.message.MIMEPart": [],
    "email.message.MIMEPart.as_string": [
        "<builtin>.super"
    ],
    "email.message.MIMEPart.__str__": [
        "email._policybase._PolicyBase.clone",
        "email.message.MIMEPart.as_string"
    ],
    "email._policybase._PolicyBase.clone": [
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "email.message.MIMEPart.is_attachment": [
        "email.message.Message.get"
    ],
    "email.message.MIMEPart._find_body": [
        "email.message.MIMEPart._find_body"
    ],
    "email.message.MIMEPart.get_body": [
        "email.message.MIMEPart._find_body",
        "<builtin>.len"
    ],
    "email.message.MIMEPart.iter_attachments": [
        "email.message.Message.get_param",
        "email.message.Message.get_payload",
        "email.message.Message.get_content_type"
    ],
    "email.message.MIMEPart.iter_parts": [
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_payload"
    ],
    "email.message.MIMEPart.get_content": [],
    "email.message.MIMEPart.set_content": [],
    "email.message.MIMEPart._make_multipart": [
        "email.message.Message.get_content_subtype",
        "email.message.Message.get_content_maintype",
        "<builtin>.ValueError",
        "email.message.Message.set_param",
        "<builtin>.type"
    ],
    "email.message.MIMEPart.make_related": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart.make_alternative": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart.make_mixed": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart._add_multipart": [
        "<builtin>.getattr",
        "email.message.Message.get_content_subtype",
        "email.message.Message.get_content_maintype",
        "email.message.Message.attach",
        "<builtin>.type"
    ],
    "email.message.MIMEPart.add_related": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.add_alternative": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.add_attachment": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.clear": [],
    "email.message.MIMEPart.clear_content": [],
    "email.message.EmailMessage": [],
    "email.message.EmailMessage.set_content": [
        "<builtin>.super"
    ],
    "email._encoded_words.<lambda1>": [],
    "email._encoded_words.decode_q": [
        "_functools.partial"
    ],
    "email._encoded_words._QByteMap": [],
    "email._encoded_words._QByteMap.__missing__": [
        "<builtin>.chr"
    ],
    "email._encoded_words.encode_q": [],
    "email._encoded_words.len_q": [
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "base64.b64decode": [
        "<builtin>.len",
        "re.fullmatch",
        "base64._bytes_from_decode_data",
        "<builtin>.repr"
    ],
    "email._encoded_words.encode_b": [
        "base64.b64encode"
    ],
    "base64.b64encode": [
        "<builtin>.len",
        "<builtin>.repr"
    ],
    "email._encoded_words.len_b": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "<builtin>.divmod": [],
    "email._encoded_words.decode": [
        "email.errors.MessageDefect.__init__"
    ],
    "email._encoded_words.encode": [],
    "email.errors.MessageError": [],
    "email.errors.MessageParseError": [],
    "email.errors.HeaderParseError": [],
    "email.errors.BoundaryError": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.CharsetError": [],
    "email.errors.MessageDefect": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.NonPrintableDefect.__init__": [
        "<builtin>.super"
    ],
    "email.errors.NonPrintableDefect.__str__": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "base64._bytes_from_decode_data": [
        "<builtin>.memoryview",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "base64.standard_b64encode": [
        "base64.b64encode"
    ],
    "base64.standard_b64decode": [
        "base64.b64decode"
    ],
    "base64.urlsafe_b64encode": [
        "base64.b64encode"
    ],
    "base64.urlsafe_b64decode": [
        "base64.b64decode",
        "base64._bytes_from_decode_data"
    ],
    "base64.b32encode": [
        "<builtin>.isinstance",
        "<builtin>.memoryview",
        "<builtin>.range",
        "<builtin>.bytes",
        "<builtin>.len",
        "<builtin>.bytearray"
    ],
    "base64.b32decode": [
        "<builtin>.repr",
        "<builtin>.range",
        "<builtin>.bytes",
        "<builtin>.enumerate",
        "<builtin>.len",
        "base64._bytes_from_decode_data",
        "<builtin>.bytearray"
    ],
    "base64.b16encode": [],
    "base64.b16decode": [
        "re.search",
        "base64._bytes_from_decode_data"
    ],
    "base64._85encode": [
        "<builtin>.memoryview",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "base64.a85encode": [
        "<builtin>.max",
        "base64._85encode",
        "<builtin>.range",
        "<builtin>.bytes",
        "<builtin>.len"
    ],
    "base64.a85decode": [
        "<builtin>.len",
        "base64._bytes_from_decode_data",
        "<builtin>.ValueError"
    ],
    "base64.b85encode": [
        "<builtin>.bytes",
        "base64._85encode"
    ],
    "base64.b85decode": [
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "<builtin>.len",
        "base64._bytes_from_decode_data"
    ],
    "base64.encode": [
        "<builtin>.len",
        "sys.stdout.buffer.write",
        "sys.stdin.buffer.read"
    ],
    "sys.stdin.buffer.read": [],
    "sys.stdout.buffer.write": [],
    "base64.decode": [
        "sys.stdout.buffer.write",
        "sys.stdin.buffer.readline"
    ],
    "sys.stdin.buffer.readline": [],
    "base64._input_type_check": [
        "<builtin>.memoryview",
        "<builtin>.TypeError"
    ],
    "base64.encodebytes": [
        "<builtin>.len",
        "base64._input_type_check",
        "<builtin>.range"
    ],
    "base64.decodebytes": [
        "base64._input_type_check"
    ],
    "base64.test": [
        "<builtin>.print",
        "base64.encodebytes",
        "<builtin>.repr",
        "base64.decodebytes"
    ],
    "getopt._": [],
    "getopt.GetoptError": [],
    "getopt.GetoptError.__init__": [],
    "getopt.GetoptError.__str__": [],
    "getopt.getopt": [
        "getopt.do_longs",
        "getopt.do_shorts",
        "<builtin>.list",
        "<builtin>.type"
    ],
    "getopt.do_longs": [
        "gettext.gettext",
        "getopt.long_has_args",
        "getopt.GetoptError.__init__"
    ],
    "getopt.do_shorts": [
        "getopt.short_has_arg",
        "gettext.gettext",
        "getopt.GetoptError.__init__"
    ],
    "getopt.gnu_getopt": [
        "getopt.do_longs",
        "<builtin>.list",
        "<builtin>.isinstance",
        "getopt.do_shorts"
    ],
    "getopt.long_has_args": [
        "<builtin>.len",
        "gettext.gettext",
        "getopt.GetoptError.__init__"
    ],
    "getopt.short_has_arg": [
        "<builtin>.len",
        "<builtin>.range",
        "gettext.gettext",
        "getopt.GetoptError.__init__"
    ],
    "gettext._tokenize": [
        "re.finditer",
        "<builtin>.ValueError"
    ],
    "gettext._error": [
        "<builtin>.ValueError"
    ],
    "gettext._parse": [
        "gettext._error",
        "gettext._parse",
        "<builtin>.ValueError",
        "<builtin>.next",
        "<builtin>.int"
    ],
    "<builtin>.round": [],
    "gettext.c2py": [
        "gettext._error",
        "gettext._parse",
        "<builtin>.exec",
        "gettext._tokenize",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "gettext._expand_lang": [
        "locale.normalize",
        "<builtin>.range"
    ],
    "locale.normalize": [
        "locale._replace_encoding",
        "locale._append_modifier"
    ],
    "gettext.NullTranslations": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "gettext.NullTranslations.add_fallback": [],
    "gettext.NullTranslations.gettext": [],
    "gettext.NullTranslations.ngettext": [],
    "gettext.NullTranslations.pgettext": [],
    "gettext.NullTranslations.npgettext": [],
    "gettext.NullTranslations.info": [],
    "gettext.NullTranslations.charset": [],
    "gettext.NullTranslations.install": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "gettext.GNUTranslations": [],
    "gettext.GNUTranslations._get_versions": [],
    "gettext.GNUTranslations._parse.<lambda1>": [
        "<builtin>.int"
    ],
    "gettext.GNUTranslations.gettext": [
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.ngettext": [
        "gettext.GNUTranslations._parse.<lambda1>"
    ],
    "gettext.GNUTranslations.pgettext": [
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.npgettext": [
        "gettext.GNUTranslations._parse.<lambda1>"
    ],
    "gettext.find": [
        "gettext._expand_lang",
        "ntpath.exists",
        "posixpath.join",
        "ntpath.join",
        "posixpath.exists"
    ],
    "<builtin>.FileNotFoundError": [],
    "tarfile.TarFile.__iter__": [
        "<builtin>.len",
        "tarfile.TarFile.next"
    ],
    "gettext.install": [
        "gettext.translation",
        "gettext.NullTranslations.install"
    ],
    "gettext.textdomain": [],
    "gettext.bindtextdomain": [],
    "gettext.dgettext": [
        "gettext.NullTranslations.gettext",
        "gettext.translation"
    ],
    "gettext.dngettext": [
        "gettext.NullTranslations.ngettext",
        "gettext.translation"
    ],
    "gettext.dpgettext": [
        "gettext.translation",
        "gettext.NullTranslations.pgettext"
    ],
    "gettext.dnpgettext": [
        "gettext.translation",
        "gettext.NullTranslations.npgettext"
    ],
    "gettext.pgettext": [
        "gettext.dpgettext"
    ],
    "gettext.npgettext": [
        "gettext.dnpgettext"
    ],
    "locale._strcoll": [],
    "locale._strxfrm": [],
    "locale.localeconv": [
        "locale.localeconv"
    ],
    "locale.setlocale": [
        "locale.normalize",
        "locale.setlocale",
        "<builtin>.isinstance",
        "locale._build_localename"
    ],
    "locale._grouping_intervals": [
        "<builtin>.ValueError"
    ],
    "locale._group": [
        "locale.localeconv",
        "<builtin>.len",
        "locale._grouping_intervals"
    ],
    "locale._strip_padding": [
        "<builtin>.len"
    ],
    "locale._format": [
        "locale.localeconv",
        "locale._group",
        "locale._strip_padding"
    ],
    "locale.format_string": [
        "locale._format",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "locale.currency": [
        "locale.localeconv",
        "locale._format",
        "<builtin>.ValueError",
        "<builtin>.abs"
    ],
    "locale.str": [
        "locale._format"
    ],
    "locale.delocalize": [
        "locale.localeconv"
    ],
    "locale.atof": [
        "locale.delocalize"
    ],
    "locale.atoi": [
        "locale.delocalize",
        "<builtin>.int"
    ],
    "locale._test": [
        "locale.str",
        "locale.format_string",
        "locale.atoi",
        "locale.atof",
        "locale.setlocale",
        "<builtin>.print"
    ],
    "locale._replace_encoding": [
        "encodings.normalize_encoding",
        "encodings.aliases.aliases.get"
    ],
    "encodings.aliases.aliases.get": [],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "locale._parse_localename": [
        "locale.normalize",
        "<builtin>.ValueError",
        "<builtin>.tuple"
    ],
    "locale._build_localename": [
        "<builtin>.TypeError"
    ],
    "_locale._getdefaultlocale": [],
    "locale.getlocale": [
        "locale._parse_localename",
        "locale.setlocale",
        "<builtin>.TypeError"
    ],
    "locale.resetlocale": [
        "locale.setlocale",
        "locale.getdefaultlocale",
        "locale._build_localename"
    ],
    "locale._print_locale": [
        "locale._print_locale._init_categories",
        "locale.resetlocale",
        "locale.getdefaultlocale",
        "locale.setlocale",
        "locale.getlocale",
        "<builtin>.print"
    ],
    "locale._print_locale._init_categories": [
        "<builtin>.globals"
    ],
    "_locale.nl_langinfo": [],
    "quopri.needsquoting": [
        "<builtin>.isinstance"
    ],
    "quopri.quote": [
        "<builtin>.len",
        "<builtin>.bytes",
        "<builtin>.ord",
        "<builtin>.isinstance"
    ],
    "quopri.encode": [
        "<builtin>.len",
        "quopri.quote",
        "quopri.encode.write",
        "<builtin>.bytes",
        "sys.stdout.buffer.write",
        "sys.stdin.buffer.read",
        "quopri.needsquoting",
        "sys.stdin.buffer.readline"
    ],
    "quopri.encode.write": [
        "quopri.quote",
        "sys.stdout.buffer.write"
    ],
    "quopri.decode": [
        "quopri.ishex",
        "<builtin>.bytes",
        "sys.stdout.buffer.write",
        "sys.stdin.buffer.read",
        "<builtin>.len",
        "quopri.unhex",
        "sys.stdin.buffer.readline"
    ],
    "quopri.ishex": [
        "<builtin>.isinstance"
    ],
    "quopri.unhex": [
        "<builtin>.bytes",
        "<builtin>.ord",
        "<builtin>.repr"
    ],
    "sys.stdin.buffer.close": [],
    "email.charset.add_charset": [
        "<builtin>.ValueError"
    ],
    "email.charset.add_alias": [],
    "email.charset.add_codec": [],
    "email.charset._encode": [],
    "email.charset.Charset": [],
    "email.charset.Charset.__repr__": [],
    "email.charset.Charset.__eq__": [
        "<builtin>.str"
    ],
    "email.charset.Charset.get_body_encoding": [],
    "email.charset.Charset.get_output_charset": [],
    "email.charset.Charset.header_encode": [
        "email.charset._encode",
        "email.charset.Charset._get_encoder"
    ],
    "email.charset.Charset._get_encoder": [],
    "email.charset.Charset.header_encode_lines": [
        "<builtin>.len",
        "_functools.partial",
        "email.charset._encode",
        "email.charset.Charset._get_encoder",
        "<builtin>.next",
        "email.charset.Charset.get_output_charset"
    ],
    "email.charset.Charset.body_encode": [
        "<builtin>.isinstance"
    ],
    "email.quoprimime.header_check": [
        "<builtin>.chr"
    ],
    "email.quoprimime.body_check": [
        "<builtin>.chr"
    ],
    "email.quoprimime.header_length": [
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "email.quoprimime.body_length": [
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "email.quoprimime._max_append": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.chr"
    ],
    "email.quoprimime.unquote": [
        "<builtin>.chr",
        "<builtin>.int"
    ],
    "email.quoprimime.quote": [
        "<builtin>.ord"
    ],
    "email.quoprimime.header_encode": [],
    "email.quoprimime.body_encode": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "email.quoprimime.quote"
    ],
    "email.quoprimime.decode": [
        "<builtin>.len",
        "email.quoprimime.unquote"
    ],
    "email.quoprimime._unquote_match": [
        "email.quoprimime.unquote"
    ],
    "email.quoprimime.header_decode": [
        "re.sub"
    ],
    "email.base64mime.header_length": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "email.base64mime.header_encode": [
        "base64.b64encode",
        "<builtin>.isinstance"
    ],
    "email.base64mime.body_encode": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email.base64mime.decode": [
        "<builtin>.bytes",
        "<builtin>.isinstance"
    ],
    "email.encoders._qencode": [
        "quopri.encodestring"
    ],
    "email.encoders.encode_base64": [
        "base64.encodebytes",
        "<builtin>.str"
    ],
    "email.encoders.encode_quopri": [
        "email.encoders._qencode"
    ],
    "email.encoders.encode_7or8bit": [],
    "email.encoders.encode_noop": [],
    "email.iterators.body_line_iterator": [
        "<builtin>.isinstance",
        "_io.StringIO"
    ],
    "email.iterators.typed_subpart_iterator": [],
    "email.iterators._structure": [
        "<builtin>.print",
        "email.iterators._structure"
    ],
    "email.generator.Generator": [],
    "email.generator.Generator.write": [
        "email.generator.Generator.write"
    ],
    "email.generator.Generator._encode": [],
    "time.ctime": [],
    "email.generator.Generator._write": [
        "<builtin>.getattr",
        "email.generator.Generator.write",
        "email.generator.Generator._write_headers",
        "copy.deepcopy",
        "email.generator.Generator._dispatch",
        "email.generator.Generator._new_buffer",
        "email.message.Message.replace_header"
    ],
    "email.generator.Generator.clone": [],
    "email.generator.Generator._new_buffer": [
        "_io.StringIO"
    ],
    "email.generator.Generator._write_lines": [
        "email.generator.Generator.write"
    ],
    "email.generator.Generator._dispatch": [
        "<builtin>.getattr",
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_content_subtype",
        "email.generator.Generator._handle_text"
    ],
    "email.generator.Generator._write_headers": [
        "email.generator.Generator.write",
        "email.message.Message.raw_items"
    ],
    "email.generator.Generator._handle_text": [
        "email.message.Message.get_param",
        "email.utils._has_surrogates",
        "<builtin>.isinstance",
        "copy.deepcopy",
        "email.message.Message.get_payload",
        "<builtin>.TypeError",
        "email.message.Message.set_payload",
        "email.generator.Generator._write_lines",
        "<builtin>.type"
    ],
    "email.generator.Generator._handle_multipart": [
        "email.generator.Generator._make_boundary",
        "email.generator.Generator.write",
        "<builtin>.isinstance",
        "email.generator.Generator.clone",
        "email.generator.Generator._new_buffer",
        "email.generator.Generator._write_lines"
    ],
    "email.generator.Generator._make_boundary": [
        "email.generator.Generator._compile_re",
        "re.escape",
        "<builtin>.str"
    ],
    "email.generator.Generator._handle_multipart_signed": [
        "email.generator.Generator._handle_multipart"
    ],
    "email.generator.Generator._handle_message_delivery_status": [
        "email.generator.Generator.clone",
        "email.generator.Generator.write",
        "email.generator.Generator._new_buffer"
    ],
    "email.generator.Generator._handle_message": [
        "email.generator.Generator.write",
        "<builtin>.isinstance",
        "email.generator.Generator.clone",
        "email.generator.Generator._encode",
        "email.generator.Generator._new_buffer"
    ],
    "email.generator.Generator._compile_re": [
        "re.compile"
    ],
    "email.generator.BytesGenerator": [],
    "email.generator.BytesGenerator.write": [
        "email.generator.Generator.write"
    ],
    "email.generator.BytesGenerator._new_buffer": [
        "_io.BytesIO"
    ],
    "email.generator.BytesGenerator._encode": [],
    "email.generator.BytesGenerator._write_headers": [
        "email.generator.Generator.write",
        "email.generator.BytesGenerator.write"
    ],
    "email.generator.BytesGenerator._handle_text": [
        "<builtin>.super",
        "email.utils._has_surrogates",
        "email.generator.Generator._write_lines"
    ],
    "email.generator.BytesGenerator._compile_re": [
        "re.compile"
    ],
    "email.generator.DecodedGenerator": [],
    "email.generator.DecodedGenerator.__init__": [
        "email.generator.Generator.__init__"
    ],
    "email.generator.DecodedGenerator._dispatch": [
        "<builtin>.print"
    ],
    "random.Random": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.isinstance",
        "<builtin>.ord",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.super"
    ],
    "random.Random.__init_subclass__": [],
    "random.Random.getstate": [
        "<builtin>.super"
    ],
    "random.Random.setstate": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "<builtin>.tuple"
    ],
    "random.Random.__getstate__": [
        "random.Random.getstate"
    ],
    "random.Random.__setstate__": [
        "random.Random.setstate"
    ],
    "random.Random.__reduce__": [
        "random.Random.getstate"
    ],
    "random.Random.randrange": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.ValueError"
    ],
    "random.Random._randbelow_with_getrandbits": [],
    "random.Random.randint": [
        "random.Random.randrange"
    ],
    "random.Random._randbelow_without_getrandbits": [
        "<builtin>.ValueError",
        "_warnings.warn"
    ],
    "random.Random.choice": [
        "<builtin>.len",
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.IndexError"
    ],
    "random.Random.shuffle": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.reversed"
    ],
    "random.Random.sample": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.range",
        "<builtin>.tuple",
        "<builtin>.set",
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "random.Random.choices": [
        "<builtin>.list",
        "itertools.accumulate",
        "itertools.repeat",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "bisect.bisect_right",
        "<builtin>.len"
    ],
    "itertools.accumulate": [],
    "bisect.bisect_right": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "random.Random.uniform": [],
    "random.Random.triangular": [],
    "random.Random.normalvariate": [],
    "random.Random.lognormvariate": [
        "random.Random.normalvariate"
    ],
    "random.Random.expovariate": [],
    "random.Random.vonmisesvariate": [],
    "random.Random.gammavariate": [
        "<builtin>.ValueError"
    ],
    "random.Random.gauss": [],
    "random.Random.betavariate": [
        "random.Random.gammavariate"
    ],
    "random.Random.paretovariate": [],
    "random.Random.weibullvariate": [],
    "random.SystemRandom": [],
    "random.SystemRandom.random": [],
    "random.SystemRandom.getrandbits": [
        "<builtin>.ValueError"
    ],
    "random.SystemRandom.seed": [],
    "random.SystemRandom._notimplemented": [
        "<builtin>.NotImplementedError"
    ],
    "random._test_generator": [
        "random.Random.vonmisesvariate",
        "random.Random.gauss",
        "<builtin>.max",
        "time.perf_counter",
        "<builtin>.min",
        "<builtin>.range",
        "random.Random.gammavariate",
        "random.Random.lognormvariate",
        "random.Random.normalvariate",
        "random.Random.betavariate",
        "random.Random.triangular",
        "<builtin>.print",
        "<builtin>.round"
    ],
    "random._test": [
        "random._test_generator"
    ],
    "bisect.insort_right": [
        "bisect.bisect_right"
    ],
    "bisect.insort_left": [
        "bisect.bisect_left"
    ],
    "bisect.bisect_left": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "hashlib.__get_openssl_constructor": [
        "<builtin>.getattr",
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.__py_new": [
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.__hash_new": [
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.pbkdf2_hmac": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.memoryview",
        "<builtin>.range",
        "<builtin>.bytes",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "hashlib.__py_new",
        "<builtin>.len",
        "hashlib.__hash_new",
        "hashlib.pbkdf2_hmac.prf"
    ],
    "hashlib.pbkdf2_hmac.prf": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging._acquireLock": [],
    "logging._releaseLock": [],
    "logging.<lambda1>": [
        "sys._getframe"
    ],
    "logging.currentframe": [
        "sys.exc_info"
    ],
    "logging._checkLevel": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.TypeError"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._releaseLock",
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging._after_at_fork_child_reinit_locks": [
        "<builtin>.print",
        "logging._releaseLock",
        "_weakrefset.WeakSet.__iter__"
    ],
    "logging.LogRecord": [],
    "logging.LogRecord.__init__": [
        "posixpath.basename",
        "<builtin>.isinstance",
        "ntpath.splitext",
        "<builtin>.int",
        "time.time",
        "ntpath.basename",
        "<builtin>.hasattr",
        "threading.current_thread",
        "<builtin>.len",
        "posixpath.splitext",
        "sys.modules.get",
        "logging.getLevelName"
    ],
    "logging.LogRecord.__repr__": [],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.setLogRecordFactory": [],
    "logging.getLogRecordFactory": [],
    "logging.makeLogRecord": [
        "logging.LogRecord.__init__"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.PercentStyle.__init__": [],
    "logging.PercentStyle.usesTime": [],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.PercentStyle._format": [],
    "logging.PercentStyle.format": [
        "<builtin>.ValueError",
        "logging.PercentStyle._format"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle._format": [],
    "logging.StrFormatStyle.validate": [
        "<builtin>.set",
        "<builtin>.ValueError",
        "string.Formatter.parse"
    ],
    "logging.StringTemplateStyle": [],
    "logging.StringTemplateStyle.__init__": [
        "string.Template.__init__"
    ],
    "logging.StringTemplateStyle.usesTime": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.set",
        "<builtin>.ValueError"
    ],
    "logging.StringTemplateStyle._format": [
        "string.Template.substitute"
    ],
    "logging.Formatter": [],
    "logging.Formatter.formatTime": [
        "time.strftime",
        "time.localtime"
    ],
    "time.strftime": [],
    "logging.Formatter.formatException": [
        "io.StringIO",
        "traceback.print_exception"
    ],
    "logging.Formatter.usesTime": [],
    "logging.Formatter.formatMessage": [],
    "logging.Formatter.formatStack": [],
    "logging.Formatter.format": [
        "logging.Formatter.formatException",
        "logging.Formatter.formatStack",
        "logging.Formatter.formatTime",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatMessage"
    ],
    "logging.BufferingFormatter": [],
    "logging.BufferingFormatter.__init__": [],
    "logging.BufferingFormatter.formatHeader": [],
    "logging.BufferingFormatter.formatFooter": [],
    "logging.BufferingFormatter.format": [
        "<builtin>.len",
        "logging.BufferingFormatter.formatFooter",
        "logging.Formatter.format",
        "logging.BufferingFormatter.formatHeader"
    ],
    "logging.Filter": [],
    "logging.Filter.__init__": [
        "<builtin>.len"
    ],
    "logging.Filter.filter": [],
    "logging.Filterer": [],
    "logging.Filterer.__init__": [],
    "logging.Filterer.addFilter": [],
    "logging.Filterer.removeFilter": [],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging._removeHandlerRef": [
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "logging._addHandlerRef": [
        "weakref.ref",
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "weakref.ref": [],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.Handler.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel",
        "logging.NullHandler.createLock",
        "logging._addHandlerRef",
        "logging.Handler.createLock"
    ],
    "logging.Handler.createLock": [
        "logging._register_at_fork_reinit_lock",
        "threading.RLock"
    ],
    "logging.NullHandler.createLock": [],
    "logging.Handler.get_name": [],
    "logging.Handler.set_name": [
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "logging.Handler.acquire": [],
    "logging.Handler.release": [],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "logging.Handler.handle": [
        "logging.NullHandler.emit",
        "logging.FileHandler.emit",
        "logging.Handler.release",
        "logging.StreamHandler.emit",
        "unittest.case._CapturingHandler.emit",
        "logging.Handler.acquire",
        "logging.Handler.emit",
        "pyasn1.debug.NullHandler.emit",
        "logging.Filterer.filter"
    ],
    "logging.StreamHandler.emit": [
        "logging.Handler.format",
        "sys.stderr.write",
        "logging.Handler.handleError",
        "logging.StreamHandler.flush"
    ],
    "logging.NullHandler.emit": [],
    "unittest.case._CapturingHandler.emit": [
        "logging.Handler.format"
    ],
    "logging.FileHandler.emit": [
        "logging.StreamHandler.emit",
        "logging.FileHandler._open",
        "logging.FileHandler.emit"
    ],
    "pyasn1.debug.NullHandler.emit": [],
    "logging.Handler.flush": [],
    "logging.Handler.close": [
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "logging.Handler.handleError": [
        "traceback.print_exception",
        "sys.exc_info",
        "sys.stderr.write",
        "ntpath.dirname",
        "traceback.print_stack",
        "posixpath.dirname"
    ],
    "logging.Handler.__repr__": [
        "logging.getLevelName"
    ],
    "logging.StreamHandler": [],
    "logging.StreamHandler.flush": [
        "logging.Handler.release",
        "logging.StreamHandler.flush",
        "sys.stderr.flush",
        "logging.Handler.acquire",
        "<builtin>.hasattr"
    ],
    "logging.StreamHandler.setStream": [
        "logging.Handler.acquire",
        "logging.Handler.release",
        "logging.StreamHandler.flush"
    ],
    "logging.StreamHandler.__repr__": [
        "<builtin>.getattr",
        "<builtin>.str",
        "logging.getLevelName"
    ],
    "logging.FileHandler": [],
    "logging.FileHandler.__init__": [
        "posixpath.abspath",
        "logging.Handler.__init__",
        "ntpath.abspath",
        "logging.StreamHandler.__init__",
        "logging.FileHandler._open"
    ],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "logging.FileHandler.close": [
        "logging.Handler.release",
        "logging.Handler.close",
        "logging.StreamHandler.flush",
        "logging.FileHandler.close",
        "logging.Handler.acquire",
        "<builtin>.hasattr"
    ],
    "logging.FileHandler.__repr__": [
        "logging.getLevelName"
    ],
    "logging._StderrHandler": [],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging._StderrHandler.stream": [],
    "logging.PlaceHolder": [],
    "logging.PlaceHolder.__init__": [],
    "logging.PlaceHolder.append": [],
    "logging.setLoggerClass": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "logging.getLoggerClass": [],
    "logging.Manager": [],
    "logging.Manager.__init__": [],
    "logging.Manager.getLogger": [
        "logging.Manager._fixupParents",
        "logging._acquireLock",
        "<builtin>.isinstance",
        "logging.Manager._fixupChildren",
        "<builtin>.TypeError",
        "logging._releaseLock"
    ],
    "logging.Manager._fixupChildren": [
        "<builtin>.len"
    ],
    "logging.Manager._fixupParents": [
        "<builtin>.isinstance",
        "logging.PlaceHolder.__init__"
    ],
    "logging.Manager.setLoggerClass": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "logging.Manager.setLogRecordFactory": [],
    "logging.Manager._clear_cache": [
        "<builtin>.isinstance",
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "logging.Logger": [],
    "logging.Logger.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Logger.setLevel": [
        "logging.Manager._clear_cache",
        "logging._checkLevel"
    ],
    "logging.Logger.debug": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.isEnabledFor": [
        "logging.Logger.getEffectiveLevel",
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "logging.Logger._log": [
        "logging.Logger.handle",
        "<builtin>.isinstance",
        "sys.exc_info",
        "logging.Logger.findCaller",
        "logging.Logger.makeRecord",
        "<builtin>.type"
    ],
    "logging.Logger.info": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.warning": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.warn": [
        "warnings.warn",
        "logging.Logger.warning"
    ],
    "logging.Logger.error": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.exception": [
        "logging.Logger.error"
    ],
    "logging.Logger.critical": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.log": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "logging.Logger.findCaller": [
        "logging.<lambda1>",
        "io.StringIO",
        "ntpath.normcase",
        "posixpath.normcase",
        "traceback.print_stack",
        "<builtin>.hasattr"
    ],
    "logging.Logger.makeRecord": [
        "logging.LogRecord.__init__",
        "<builtin>.KeyError"
    ],
    "logging.Logger.handle": [
        "logging.Logger.callHandlers",
        "logging.Filterer.filter"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle",
        "sys.stderr.write",
        "logging.NullHandler.handle"
    ],
    "logging.Logger.removeHandler": [
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "logging.Logger.hasHandlers": [],
    "logging.NullHandler.handle": [],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger.getChild": [
        "logging.Manager.getLogger"
    ],
    "logging.Logger.__repr__": [
        "logging.Logger.getEffectiveLevel",
        "logging.getLevelName"
    ],
    "logging.RootLogger": [],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.RootLogger.__reduce__": [],
    "logging.LoggerAdapter": [],
    "logging.LoggerAdapter.__init__": [],
    "logging.LoggerAdapter.process": [],
    "logging.LoggerAdapter.debug": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.log": [
        "logging.LoggerAdapter.isEnabledFor",
        "logging.LoggerAdapter.process"
    ],
    "logging.LoggerAdapter.info": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.warning": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.warn": [
        "warnings.warn",
        "logging.LoggerAdapter.warning"
    ],
    "logging.LoggerAdapter.error": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.exception": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.critical": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.isEnabledFor": [],
    "logging.LoggerAdapter.setLevel": [],
    "logging.LoggerAdapter.getEffectiveLevel": [],
    "logging.LoggerAdapter.hasHandlers": [],
    "logging.LoggerAdapter._log": [],
    "logging.LoggerAdapter.manager": [],
    "logging.LoggerAdapter.name": [],
    "logging.LoggerAdapter.__repr__": [
        "logging.getLevelName"
    ],
    "logging.basicConfig": [
        "logging._acquireLock",
        "logging.StreamHandler.__init__",
        "logging.Logger.removeHandler",
        "logging.Logger.setLevel",
        "logging.Handler.close",
        "logging.Handler.setFormatter",
        "<builtin>.ValueError",
        "logging.FileHandler.close",
        "<builtin>.len",
        "logging.Logger.addHandler",
        "logging.FileHandler.__init__",
        "logging._releaseLock",
        "logging.Formatter.__init__"
    ],
    "logging.critical": [
        "<builtin>.len",
        "logging.Logger.critical",
        "logging.basicConfig"
    ],
    "logging.error": [
        "<builtin>.len",
        "logging.Logger.error",
        "logging.basicConfig"
    ],
    "logging.warning": [
        "<builtin>.len",
        "logging.Logger.warning",
        "logging.basicConfig"
    ],
    "logging.warn": [
        "warnings.warn",
        "logging.warning"
    ],
    "logging.info": [
        "<builtin>.len",
        "logging.basicConfig",
        "logging.Logger.info"
    ],
    "logging.debug": [
        "<builtin>.len",
        "logging.basicConfig",
        "logging.Logger.debug"
    ],
    "logging.log": [
        "<builtin>.len",
        "logging.basicConfig",
        "logging.Logger.log"
    ],
    "logging.disable": [
        "logging.Manager._clear_cache"
    ],
    "logging.shutdown": [
        "<builtin>.reversed"
    ],
    "logging.NullHandler": [],
    "logging._showwarning": [
        "logging.Handler.__init__",
        "logging.Logger.addHandler",
        "warnings.formatwarning",
        "logging.getLogger",
        "logging.Logger.warning"
    ],
    "email.utils._sanitize": [],
    "email.utils.formataddr": [
        "email.charset.Charset.header_encode",
        "email.charset.Charset.__init__",
        "<builtin>.isinstance"
    ],
    "email.utils.getaddresses": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email._parseaddr.AddressList.__init__": [
        "email._parseaddr.AddrlistClass.__init__",
        "email._parseaddr.AddrlistClass.getaddrlist"
    ],
    "email.utils._format_timetuple_and_zone": [],
    "email.utils.formatdate": [
        "email.utils.format_datetime",
        "time.time"
    ],
    "email.utils.format_datetime": [
        "<builtin>.ValueError",
        "email.utils._format_timetuple_and_zone"
    ],
    "email.utils.make_msgid": [
        "time.time",
        "<builtin>.int"
    ],
    "email.utils.parsedate_to_datetime": [
        "email._parseaddr._parsedate_tz"
    ],
    "email._parseaddr._parsedate_tz": [
        "<builtin>.len",
        "<builtin>.int"
    ],
    "email.utils.parseaddr": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email.utils.decode_rfc2231": [
        "<builtin>.len"
    ],
    "email._parseaddr.quote": [],
    "email.utils.localtime": [
        "time.mktime",
        "time.localtime",
        "time.gmtime"
    ],
    "time.mktime": [],
    "time.gmtime": [],
    "socket.<lambda1>": [],
    "socket.<lambda2>": [],
    "socket.<lambda3>": [],
    "socket.<lambda4>": [],
    "socket._intenum_converter": [],
    "sys.platform.lower": [],
    "socket._GiveupOnSendfile": [],
    "socket.socket": [
        "<builtin>.hasattr"
    ],
    "socket.socket.__init__": [],
    "socket.socket.__enter__": [],
    "socket.socket.__exit__": [
        "socket.socket.close"
    ],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket.__repr__": [
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "socket.socket.__getstate__": [
        "<builtin>.TypeError"
    ],
    "socket.socket.dup": [
        "socket.socket.dup"
    ],
    "socket.socket.accept": [
        "socket.socket.__init__"
    ],
    "socket.socket.makefile": [
        "io.BufferedReader",
        "io.BufferedRWPair",
        "io.BufferedWriter",
        "<builtin>.set",
        "<builtin>.ValueError",
        "socket.SocketIO.__init__",
        "io.TextIOWrapper"
    ],
    "socket.SocketIO.__init__": [
        "_io._RawIOBase.__init__",
        "<builtin>.ValueError"
    ],
    "io.BufferedRWPair": [],
    "io.BufferedReader": [],
    "io.BufferedWriter": [],
    "socket.socket._sendfile_use_sendfile": [
        "selectors.SelectSelector.__init__",
        "<builtin>.min",
        "selectors.SelectSelector.register",
        "selectors._PollLikeSelector.register",
        "socket.socket._check_sendfile_params",
        "<builtin>.ValueError",
        "selectors._PollLikeSelector.__init__",
        "<builtin>.hasattr"
    ],
    "socket.socket._check_sendfile_params": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "socket.socket._sendfile_use_send": [
        "<builtin>.memoryview",
        "<builtin>.min",
        "socket.socket._check_sendfile_params",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "socket.socket.sendfile": [
        "socket.socket._sendfile_use_send",
        "socket.socket._sendfile_use_sendfile"
    ],
    "socket.socket._decref_socketios": [
        "socket.socket.close"
    ],
    "socket.socket._real_close": [],
    "socket.socket.detach": [
        "<builtin>.super"
    ],
    "socket.socket.family": [
        "<builtin>.super",
        "socket._intenum_converter"
    ],
    "socket.socket.type": [
        "<builtin>.super",
        "socket._intenum_converter"
    ],
    "socket.socket.get_inheritable": [],
    "socket.socket.set_inheritable": [],
    "socket.fromfd": [
        "socket.socket.__init__"
    ],
    "socket.fromshare": [
        "socket.socket.__init__"
    ],
    "socket.socketpair": [
        "socket.socket.detach",
        "socket.socket.accept",
        "<builtin>.ValueError",
        "socket.socket.__init__",
        "socket.socket.close"
    ],
    "socket.SocketIO": [],
    "_io._RawIOBase.__init__": [],
    "socket.SocketIO.readinto": [
        "_io._RawIOBase._checkReadable",
        "<builtin>.OSError",
        "_io._RawIOBase._checkClosed"
    ],
    "_io._RawIOBase._checkClosed": [],
    "_io._RawIOBase._checkReadable": [],
    "socket.SocketIO.write": [
        "_io._RawIOBase._checkClosed",
        "_io._RawIOBase._checkWritable"
    ],
    "_io._RawIOBase._checkWritable": [],
    "socket.SocketIO.readable": [
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.writable": [
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.seekable": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.fileno": [
        "_io._RawIOBase._checkClosed"
    ],
    "socket.SocketIO.name": [
        "socket.SocketIO.fileno"
    ],
    "socket.SocketIO.mode": [],
    "socket.SocketIO.close": [
        "gzip.GzipFile.close",
        "_io._IOBase.close",
        "socket.socket._decref_socketios",
        "_compression.DecompressReader.close",
        "zipfile.ZipExtFile.close",
        "zipfile._ZipWriteFile.close",
        "lzma.LZMAFile.close"
    ],
    "_compression.DecompressReader.close": [
        "<builtin>.super"
    ],
    "_io._IOBase.close": [],
    "socket.getfqdn": [],
    "socket.create_connection": [
        "socket.socket.close",
        "socket.getaddrinfo",
        "socket.socket.__init__"
    ],
    "socket.getaddrinfo": [
        "socket._intenum_converter"
    ],
    "socket.has_dualstack_ipv6": [
        "<builtin>.hasattr",
        "socket.socket.__init__"
    ],
    "socket.create_server": [
        "socket.has_dualstack_ipv6",
        "<builtin>.ValueError",
        "socket.socket.__init__",
        "socket.socket.close",
        "<builtin>.hasattr"
    ],
    "datetime._cmp": [],
    "datetime._is_leap": [],
    "datetime._days_before_year": [],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "datetime._ymd2ord": [
        "datetime._days_in_month",
        "datetime._days_before_year",
        "datetime._days_before_month"
    ],
    "datetime._ord2ymd": [
        "<builtin>.divmod",
        "datetime._days_in_month",
        "datetime._is_leap"
    ],
    "datetime._build_struct_time": [
        "datetime._days_before_month",
        "time.struct_time",
        "datetime._ymd2ord"
    ],
    "time.struct_time": [],
    "datetime._format_time": [
        "<builtin>.ValueError"
    ],
    "datetime._format_offset": [
        "<builtin>.divmod"
    ],
    "datetime._wrap_strftime": [
        "<builtin>.getattr",
        "datetime.datetime.utcoffset",
        "datetime.time.tzname",
        "time.strftime",
        "datetime.datetime.tzname",
        "<builtin>.len",
        "<builtin>.divmod",
        "<builtin>.hasattr",
        "datetime.time.utcoffset"
    ],
    "datetime.datetime.utcoffset": [
        "datetime._check_utc_offset"
    ],
    "datetime.time.utcoffset": [
        "datetime._check_utc_offset"
    ],
    "datetime.datetime.tzname": [
        "datetime._check_tzname"
    ],
    "datetime.time.tzname": [
        "datetime._check_tzname"
    ],
    "datetime._parse_isoformat_date": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "datetime._parse_hh_mm_ss_ff": [
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "datetime._parse_isoformat_time": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.all",
        "datetime._parse_hh_mm_ss_ff"
    ],
    "datetime._check_tzname": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "datetime._check_utc_offset": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "datetime._check_date_fields": [
        "datetime._check_int_field",
        "datetime._days_in_month",
        "<builtin>.ValueError"
    ],
    "datetime._check_time_fields": [
        "datetime._check_int_field",
        "<builtin>.ValueError"
    ],
    "datetime._check_tzinfo_arg": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime._cmperror": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "datetime._divide_and_round": [
        "<builtin>.divmod"
    ],
    "datetime.timedelta": [],
    "datetime.timedelta.__new__": [
        "<builtin>.isinstance",
        "<builtin>.abs",
        "<builtin>.OverflowError",
        "<builtin>.divmod",
        "<builtin>.round",
        "<builtin>.int"
    ],
    "datetime.timedelta.__repr__": [],
    "datetime.timedelta.__str__": [
        "<builtin>.divmod",
        "datetime.timedelta.__str__.plural"
    ],
    "datetime.timedelta.__str__.plural": [
        "<builtin>.abs"
    ],
    "datetime.timedelta.total_seconds": [],
    "datetime.timedelta.days": [],
    "datetime.timedelta.seconds": [],
    "datetime.timedelta.microseconds": [],
    "datetime.timedelta.__add__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__sub__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__rsub__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__neg__": [],
    "datetime.timedelta.__pos__": [],
    "datetime.timedelta.__abs__": [],
    "datetime.timedelta.__mul__": [
        "datetime.timedelta._to_microseconds",
        "datetime._divide_and_round",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta._to_microseconds": [],
    "datetime.timedelta.__floordiv__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__truediv__": [
        "datetime.timedelta._to_microseconds",
        "datetime._divide_and_round",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__mod__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__divmod__": [
        "datetime.timedelta._to_microseconds",
        "<builtin>.divmod",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__eq__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta._cmp": [
        "datetime.timedelta._getstate",
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__le__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__lt__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__ge__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__gt__": [
        "datetime.timedelta._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.timedelta._getstate": [],
    "datetime.timedelta.__hash__": [
        "<builtin>.hash",
        "datetime.timedelta._getstate"
    ],
    "datetime.timedelta.__bool__": [],
    "datetime.timedelta.__reduce__": [
        "datetime.timedelta._getstate"
    ],
    "datetime.date": [],
    "datetime.date.__new__": [
        "<builtin>.isinstance",
        "<builtin>.ord",
        "datetime._check_date_fields",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "datetime.date.fromtimestamp": [
        "time.localtime"
    ],
    "datetime.date.today": [
        "datetime.date.fromtimestamp",
        "time.time",
        "datetime.datetime.fromtimestamp"
    ],
    "datetime.datetime.fromtimestamp": [
        "datetime._check_tzinfo_arg",
        "datetime.datetime._fromtimestamp"
    ],
    "datetime.date.fromordinal": [
        "datetime._ord2ymd"
    ],
    "datetime.date.fromisoformat": [
        "<builtin>.isinstance",
        "datetime._parse_isoformat_date",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "datetime.date.fromisocalendar": [
        "datetime._isoweek1monday",
        "datetime._ord2ymd",
        "datetime._is_leap",
        "<builtin>.ValueError",
        "datetime._ymd2ord"
    ],
    "datetime._isoweek1monday": [
        "datetime._ymd2ord"
    ],
    "datetime.date.__repr__": [],
    "datetime.date.ctime": [
        "datetime.date.toordinal"
    ],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime.date.strftime": [
        "datetime.datetime.timetuple",
        "datetime.date.timetuple",
        "datetime._wrap_strftime"
    ],
    "datetime.datetime.timetuple": [
        "datetime._build_struct_time",
        "datetime.datetime.dst"
    ],
    "datetime.date.timetuple": [
        "datetime._build_struct_time"
    ],
    "datetime.date.__format__": [
        "datetime.date.strftime",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "datetime.date.isoformat": [],
    "datetime.date.year": [],
    "datetime.date.month": [],
    "datetime.date.day": [],
    "datetime.date.replace": [
        "datetime.date.year",
        "<builtin>.type"
    ],
    "datetime.date.__eq__": [
        "datetime.date._cmp",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.date._cmp": [
        "datetime.date._cmp",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.datetime._cmp": [
        "<builtin>.isinstance",
        "datetime.datetime.utcoffset",
        "datetime.datetime.replace",
        "datetime.datetime._cmp",
        "<builtin>.TypeError"
    ],
    "datetime.date.__le__": [
        "datetime.date._cmp",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.date.__lt__": [
        "datetime.date._cmp",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.date.__ge__": [
        "datetime.date._cmp",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.date.__gt__": [
        "datetime.date._cmp",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.date.__hash__": [
        "<builtin>.hash",
        "datetime.date._getstate",
        "datetime.datetime._getstate"
    ],
    "datetime.date._getstate": [
        "<builtin>.divmod",
        "<builtin>.bytes"
    ],
    "datetime.datetime._getstate": [
        "<builtin>.divmod",
        "<builtin>.bytes"
    ],
    "datetime.date.__add__": [
        "datetime.date.toordinal",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.OverflowError"
    ],
    "datetime.date.__sub__": [
        "datetime.date.toordinal",
        "<builtin>.isinstance"
    ],
    "datetime.date.weekday": [
        "datetime.date.toordinal"
    ],
    "datetime.date.isoweekday": [
        "datetime.date.toordinal"
    ],
    "datetime.date.isocalendar": [
        "<builtin>.divmod",
        "datetime._isoweek1monday",
        "datetime._ymd2ord"
    ],
    "datetime.date.__setstate": [],
    "datetime.date.__reduce__": [
        "datetime.date._getstate",
        "datetime.datetime._getstate"
    ],
    "datetime.tzinfo": [],
    "datetime.tzinfo.tzname": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.utcoffset": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.dst": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.fromutc": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.tzinfo.__reduce__": [
        "<builtin>.getattr"
    ],
    "datetime.time": [],
    "datetime.time.__new__": [
        "datetime._check_tzinfo_arg",
        "<builtin>.isinstance",
        "datetime._check_time_fields",
        "<builtin>.ord",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "datetime.time.hour": [],
    "datetime.time.minute": [],
    "datetime.time.second": [],
    "datetime.time.microsecond": [],
    "datetime.time.tzinfo": [],
    "datetime.time.fold": [],
    "datetime.time.__eq__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time._cmp": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "datetime.time.utcoffset",
        "datetime.time._cmp"
    ],
    "datetime.time.__le__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__lt__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__ge__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__gt__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__hash__": [
        "datetime.time._getstate",
        "<builtin>.hash",
        "datetime.time.replace",
        "<builtin>.divmod",
        "datetime.time.utcoffset"
    ],
    "datetime.time.replace": [
        "<builtin>.type"
    ],
    "datetime.time._getstate": [
        "<builtin>.divmod",
        "<builtin>.bytes"
    ],
    "datetime.time._tzstr": [
        "datetime._format_offset",
        "datetime.time.utcoffset"
    ],
    "datetime.time.__repr__": [],
    "datetime.time.isoformat": [
        "datetime._format_time",
        "datetime.time._tzstr"
    ],
    "datetime.time.fromisoformat": [
        "datetime._parse_isoformat_time",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.time.strftime": [
        "datetime._wrap_strftime"
    ],
    "datetime.time.__format__": [
        "<builtin>.isinstance",
        "datetime.time.strftime",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "datetime.time.dst": [
        "datetime._check_utc_offset"
    ],
    "datetime.time.__setstate": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.time.__reduce_ex__": [
        "datetime.time._getstate"
    ],
    "datetime.time.__reduce__": [
        "datetime.time.__reduce_ex__"
    ],
    "datetime.datetime": [],
    "datetime.datetime.__new__": [
        "datetime._check_tzinfo_arg",
        "<builtin>.isinstance",
        "datetime._check_time_fields",
        "<builtin>.ord",
        "<builtin>.bytes",
        "datetime._check_date_fields",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "datetime.datetime.hour": [],
    "datetime.datetime.minute": [],
    "datetime.datetime.second": [],
    "datetime.datetime.microsecond": [],
    "datetime.datetime.tzinfo": [],
    "datetime.datetime.fold": [],
    "datetime.datetime._fromtimestamp": [
        "sys.platform.startswith",
        "<builtin>.round"
    ],
    "datetime.datetime.utcfromtimestamp": [
        "datetime.datetime._fromtimestamp"
    ],
    "datetime.datetime.now": [
        "time.time",
        "datetime.datetime.fromtimestamp"
    ],
    "datetime.datetime.utcnow": [
        "time.time",
        "datetime.datetime.utcfromtimestamp"
    ],
    "datetime.datetime.combine": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.fromisoformat": [
        "<builtin>.isinstance",
        "datetime._parse_isoformat_time",
        "datetime._parse_isoformat_date",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.dst": [
        "datetime._check_utc_offset"
    ],
    "datetime.datetime._mktime": [
        "datetime.datetime._mktime.local"
    ],
    "datetime.datetime._mktime.local": [
        "time.localtime"
    ],
    "datetime.datetime.timestamp": [
        "datetime.datetime._mktime"
    ],
    "datetime.datetime.utctimetuple": [
        "datetime._build_struct_time",
        "datetime.datetime.utcoffset"
    ],
    "datetime.datetime.date": [
        "datetime.datetime.date"
    ],
    "datetime.datetime.time": [
        "datetime.datetime.time"
    ],
    "datetime.datetime.timetz": [
        "datetime.datetime.time"
    ],
    "datetime.datetime.replace": [
        "<builtin>.type"
    ],
    "datetime.datetime._local_timezone": [
        "datetime.datetime._mktime",
        "time.localtime"
    ],
    "datetime.datetime.astimezone": [
        "<builtin>.isinstance",
        "datetime.datetime.replace",
        "datetime.timezone.fromutc",
        "datetime.datetime._local_timezone",
        "<builtin>.TypeError",
        "datetime.timezone.utcoffset"
    ],
    "datetime.timezone.utcoffset": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.timezone.fromutc": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.ctime": [
        "datetime.date.toordinal"
    ],
    "datetime.datetime.isoformat": [
        "datetime._format_offset",
        "datetime._format_time",
        "datetime.datetime.utcoffset"
    ],
    "datetime.datetime.__repr__": [
        "<builtin>.map"
    ],
    "datetime.datetime.__str__": [
        "datetime.datetime.isoformat"
    ],
    "datetime.datetime.__eq__": [
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__le__": [
        "datetime._cmperror",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__lt__": [
        "datetime._cmperror",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__ge__": [
        "datetime._cmperror",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__gt__": [
        "datetime._cmperror",
        "datetime.datetime._cmp",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__add__": [
        "datetime.datetime.time",
        "<builtin>.isinstance",
        "datetime.date.toordinal",
        "<builtin>.divmod",
        "<builtin>.type",
        "<builtin>.OverflowError"
    ],
    "datetime.datetime.__sub__": [
        "datetime.date.toordinal",
        "<builtin>.isinstance",
        "datetime.datetime.utcoffset",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.__hash__": [
        "datetime.datetime.utcoffset",
        "datetime.datetime.replace",
        "<builtin>.hash",
        "datetime.datetime._getstate",
        "datetime._ymd2ord"
    ],
    "datetime.datetime.__setstate": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.__reduce_ex__": [
        "datetime.datetime._getstate"
    ],
    "datetime.datetime.__reduce__": [
        "datetime.datetime.__reduce_ex__"
    ],
    "datetime.timezone": [
        "<builtin>.object"
    ],
    "datetime.timezone.__new__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "datetime.timezone._create",
        "<builtin>.TypeError"
    ],
    "datetime.timezone._create": [
        "datetime.timezone.__new__"
    ],
    "datetime.timezone.__getinitargs__": [],
    "datetime.timezone.__eq__": [
        "<builtin>.isinstance"
    ],
    "datetime.timezone.__hash__": [
        "<builtin>.hash"
    ],
    "datetime.timezone.__repr__": [],
    "datetime.timezone.__str__": [
        "datetime.timezone.tzname"
    ],
    "datetime.timezone.tzname": [
        "<builtin>.isinstance",
        "datetime.timezone._name_from_offset",
        "<builtin>.TypeError"
    ],
    "datetime.timezone._name_from_offset": [
        "<builtin>.divmod"
    ],
    "datetime.timezone.dst": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "_strptime._getlang": [
        "locale.getlocale"
    ],
    "_strptime.LocaleTime": [],
    "_strptime.LocaleTime.__init__": [
        "_strptime.LocaleTime.__calc_am_pm",
        "_strptime.LocaleTime.__calc_weekday",
        "_strptime.LocaleTime.__calc_date_time",
        "<builtin>.ValueError",
        "_strptime._getlang",
        "_strptime.LocaleTime.__calc_timezone",
        "_strptime.LocaleTime.__calc_month"
    ],
    "_strptime.LocaleTime.__calc_weekday": [
        "<builtin>.range"
    ],
    "_strptime.LocaleTime.__calc_month": [
        "<builtin>.range"
    ],
    "_strptime.LocaleTime.__calc_am_pm": [
        "time.strftime",
        "time.struct_time"
    ],
    "_strptime.LocaleTime.__calc_timezone": [
        "time.tzset",
        "<builtin>.frozenset"
    ],
    "_strptime.LocaleTime.__calc_date_time": [
        "time.strftime",
        "time.struct_time"
    ],
    "time.tzset": [],
    "_strptime.TimeRE": [],
    "_strptime.TimeRE.__init__": [
        "_strptime.TimeRE.pattern",
        "<builtin>.super",
        "_strptime.LocaleTime.__init__"
    ],
    "_strptime.TimeRE.pattern": [
        "re.compile"
    ],
    "_strptime.TimeRE.__seqToRE": [
        "<builtin>.sorted",
        "re.escape"
    ],
    "_strptime.TimeRE.compile": [
        "re.compile",
        "_strptime.TimeRE.pattern"
    ],
    "_strptime._calc_julian_from_U_or_W": [
        "datetime.date.weekday"
    ],
    "_strptime._calc_julian_from_V": [
        "datetime.date.toordinal",
        "datetime.date.isoweekday"
    ],
    "_strptime._strptime": [
        "_strptime.TimeRE.compile",
        "<builtin>.isinstance",
        "datetime.date.weekday",
        "_strptime.TimeRE.__init__",
        "datetime.date.toordinal",
        "datetime.date.fromordinal",
        "_strptime._calc_julian_from_U_or_W",
        "<builtin>.ValueError",
        "_strptime._getlang",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "_strptime._calc_julian_from_V",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.int"
    ],
    "_strptime._strptime_time": [
        "_strptime._strptime",
        "time.struct_time"
    ],
    "_strptime._strptime_datetime": [
        "_strptime._strptime"
    ],
    "calendar.IllegalMonthError": [],
    "calendar.IllegalMonthError.__init__": [],
    "calendar.IllegalMonthError.__str__": [],
    "calendar.IllegalWeekdayError": [],
    "calendar.IllegalWeekdayError.__init__": [],
    "calendar.IllegalWeekdayError.__str__": [],
    "calendar._localized_month": [
        "<builtin>.range",
        "datetime.datetime.date"
    ],
    "calendar._localized_month.<lambda1>": [],
    "calendar._localized_month.__init__": [],
    "calendar._localized_month.__getitem__": [
        "<builtin>.isinstance"
    ],
    "calendar._localized_month.__len__": [],
    "calendar._localized_day": [
        "<builtin>.range",
        "datetime.datetime.date"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_day.__getitem__": [
        "<builtin>.isinstance"
    ],
    "calendar._localized_day.__len__": [],
    "calendar.isleap": [],
    "calendar.leapdays": [],
    "calendar.weekday": [
        "datetime.datetime.date"
    ],
    "calendar.monthrange": [
        "calendar.weekday",
        "calendar.isleap",
        "calendar.IllegalMonthError.__init__"
    ],
    "calendar._monthlen": [
        "calendar.isleap"
    ],
    "calendar._prevmonth": [],
    "calendar._nextmonth": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.Calendar.__init__": [],
    "calendar.Calendar.getfirstweekday": [],
    "calendar.Calendar.setfirstweekday": [],
    "calendar.Calendar.iterweekdays": [
        "<builtin>.range"
    ],
    "calendar.Calendar.itermonthdates": [
        "datetime.datetime.date",
        "calendar.Calendar.itermonthdays3"
    ],
    "calendar.Calendar.itermonthdays3": [
        "calendar.monthrange",
        "calendar._prevmonth",
        "<builtin>.range",
        "calendar._monthlen",
        "calendar._nextmonth"
    ],
    "calendar.Calendar.itermonthdays": [
        "calendar.monthrange",
        "<builtin>.range",
        "itertools.repeat"
    ],
    "calendar.Calendar.itermonthdays2": [
        "calendar.Calendar.itermonthdays",
        "<builtin>.enumerate"
    ],
    "calendar.Calendar.itermonthdays4": [
        "<builtin>.enumerate",
        "calendar.Calendar.itermonthdays3"
    ],
    "calendar.Calendar.monthdatescalendar": [
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.range",
        "calendar.Calendar.itermonthdates"
    ],
    "calendar.Calendar.monthdays2calendar": [
        "<builtin>.len",
        "<builtin>.list",
        "calendar.Calendar.itermonthdays2",
        "<builtin>.range"
    ],
    "calendar.Calendar.monthdayscalendar": [
        "calendar.Calendar.itermonthdays",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "calendar.Calendar.yeardatescalendar": [
        "<builtin>.len",
        "<builtin>.range",
        "calendar.Calendar.monthdatescalendar"
    ],
    "calendar.Calendar.yeardays2calendar": [
        "calendar.Calendar.monthdays2calendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.Calendar.yeardayscalendar": [
        "calendar.Calendar.monthdayscalendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.TextCalendar": [],
    "calendar.TextCalendar.prweek": [
        "<builtin>.print",
        "calendar.TextCalendar.formatweek"
    ],
    "calendar.TextCalendar.formatweek": [
        "calendar.TextCalendar.formatday"
    ],
    "calendar.TextCalendar.formatday": [],
    "calendar.TextCalendar.formatweekday": [],
    "calendar.TextCalendar.formatweekheader": [
        "calendar.LocaleTextCalendar.formatweekday",
        "calendar.TextCalendar.formatweekday",
        "calendar.Calendar.iterweekdays"
    ],
    "calendar.LocaleTextCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.TextCalendar.formatmonthname": [],
    "calendar.TextCalendar.prmonth": [
        "calendar.TextCalendar.formatmonth",
        "<builtin>.print"
    ],
    "calendar.TextCalendar.formatmonth": [
        "<builtin>.max",
        "calendar.Calendar.monthdays2calendar",
        "calendar.TextCalendar.formatmonthname",
        "calendar.LocaleTextCalendar.formatmonthname",
        "calendar.TextCalendar.formatweekheader",
        "calendar.TextCalendar.formatweek"
    ],
    "calendar.LocaleTextCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.TextCalendar.formatyear": [
        "<builtin>.repr",
        "<builtin>.max",
        "<builtin>.min",
        "calendar.formatstring",
        "<builtin>.range",
        "calendar.TextCalendar.formatmonthname",
        "<builtin>.enumerate",
        "<builtin>.len",
        "calendar.LocaleTextCalendar.formatmonthname",
        "calendar.TextCalendar.formatweekheader",
        "calendar.Calendar.yeardays2calendar",
        "calendar.TextCalendar.formatweek"
    ],
    "calendar.formatstring": [],
    "calendar.TextCalendar.pryear": [
        "<builtin>.print",
        "calendar.TextCalendar.formatyear"
    ],
    "calendar.HTMLCalendar": [],
    "calendar.HTMLCalendar.formatday": [],
    "calendar.HTMLCalendar.formatweek": [
        "calendar.HTMLCalendar.formatday"
    ],
    "calendar.HTMLCalendar.formatweekday": [],
    "calendar.HTMLCalendar.formatweekheader": [
        "calendar.HTMLCalendar.formatweekday",
        "calendar.LocaleHTMLCalendar.formatweekday",
        "calendar.Calendar.iterweekdays"
    ],
    "calendar.LocaleHTMLCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.HTMLCalendar.formatmonthname": [],
    "calendar.HTMLCalendar.formatmonth": [
        "calendar.HTMLCalendar.formatmonthname",
        "calendar.HTMLCalendar.formatweek",
        "calendar.LocaleHTMLCalendar.formatmonthname",
        "calendar.Calendar.monthdays2calendar",
        "calendar.HTMLCalendar.formatweekheader"
    ],
    "calendar.LocaleHTMLCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.HTMLCalendar.formatyear": [
        "<builtin>.min",
        "calendar.HTMLCalendar.formatmonth",
        "<builtin>.range",
        "<builtin>.max"
    ],
    "calendar.HTMLCalendar.formatyearpage": [
        "calendar.HTMLCalendar.formatyear",
        "sys.getdefaultencoding"
    ],
    "sys.getdefaultencoding": [],
    "calendar.different_locale": [],
    "calendar.different_locale.__init__": [],
    "calendar.different_locale.__enter__": [
        "locale.getlocale",
        "locale.setlocale"
    ],
    "calendar.different_locale.__exit__": [
        "locale.setlocale"
    ],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleTextCalendar.__init__": [
        "calendar.Calendar.__init__",
        "locale.getdefaultlocale"
    ],
    "calendar.LocaleHTMLCalendar": [],
    "calendar.LocaleHTMLCalendar.__init__": [
        "calendar.Calendar.__init__",
        "locale.getdefaultlocale"
    ],
    "calendar.setfirstweekday": [
        "calendar.IllegalWeekdayError.__init__"
    ],
    "calendar.format": [
        "calendar.formatstring",
        "<builtin>.print"
    ],
    "calendar.timegm": [
        "datetime.datetime.date"
    ],
    "email._parseaddr.parsedate_tz": [
        "email._parseaddr._parsedate_tz",
        "<builtin>.tuple"
    ],
    "email._parseaddr.parsedate": [
        "<builtin>.isinstance",
        "email._parseaddr.parsedate_tz"
    ],
    "email._parseaddr.mktime_tz": [
        "time.mktime"
    ],
    "email._parseaddr.AddrlistClass": [],
    "email._parseaddr.AddrlistClass.__init__": [],
    "email._parseaddr.AddrlistClass.gotonext": [
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getcomment"
    ],
    "email._parseaddr.AddrlistClass.getcomment": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getaddrlist": [
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getaddress"
    ],
    "email._parseaddr.AddrlistClass.getaddress": [
        "email._parseaddr.AddrlistClass.getphraselist",
        "email._parseaddr.AddrlistClass.getaddrspec",
        "email._parseaddr.AddrlistClass.getaddress",
        "email._parseaddr.AddrlistClass.getrouteaddr",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.gotonext"
    ],
    "email._parseaddr.AddrlistClass.getphraselist": [
        "email._parseaddr.AddrlistClass.getcomment",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getatom",
        "email._parseaddr.AddrlistClass.getquote"
    ],
    "email._parseaddr.AddrlistClass.getaddrspec": [
        "email._parseaddr.quote",
        "email._parseaddr.AddrlistClass.getatom",
        "email._parseaddr.AddrlistClass.getquote",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getdomain",
        "email._parseaddr.AddrlistClass.gotonext"
    ],
    "email._parseaddr.AddrlistClass.getrouteaddr": [
        "email._parseaddr.AddrlistClass.getaddrspec",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getdomain",
        "email._parseaddr.AddrlistClass.gotonext"
    ],
    "email._parseaddr.AddrlistClass.getdomain": [
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getdomainliteral",
        "email._parseaddr.AddrlistClass.getatom",
        "email._parseaddr.AddrlistClass.getcomment"
    ],
    "email._parseaddr.AddrlistClass.getquote": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getatom": [
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getdomainliteral": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getdelimited": [
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getcomment"
    ],
    "email._parseaddr.AddressList": [],
    "email._parseaddr.AddressList.__len__": [
        "<builtin>.len"
    ],
    "email._parseaddr.AddressList.__add__": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email._parseaddr.AddressList.__iadd__": [],
    "email._parseaddr.AddressList.__sub__": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email._parseaddr.AddressList.__isub__": [],
    "email._parseaddr.AddressList.__getitem__": [],
    "email._policybase._PolicyBase": [],
    "email._policybase._PolicyBase.__init__": [
        "<builtin>.super",
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "email._policybase._PolicyBase.__repr__": [],
    "email._policybase._PolicyBase.__setattr__": [
        "<builtin>.AttributeError",
        "<builtin>.hasattr"
    ],
    "email._policybase._PolicyBase.__add__": [
        "email._policybase._PolicyBase.clone"
    ],
    "email._policybase._append_doc": [],
    "email._policybase._extend_docstrings": [
        "<builtin>.getattr",
        "email._policybase._append_doc"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase.Policy.register_defect": [],
    "email._policybase.Policy.header_source_parse": [],
    "email._policybase.Policy.header_store_parse": [],
    "email._policybase.Policy.header_fetch_parse": [],
    "email._policybase.Policy.fold": [],
    "email._policybase.Policy.fold_binary": [],
    "email._policybase.Compat32": [],
    "email._policybase.Compat32._sanitize_header": [
        "email.header.Header.__init__",
        "email.utils._has_surrogates",
        "<builtin>.isinstance"
    ],
    "email.header.Header.__init__": [
        "<builtin>.len",
        "email.header.Header.append",
        "email.charset.Charset.__init__",
        "<builtin>.isinstance"
    ],
    "email._policybase.Compat32.fold": [
        "email._policybase.Compat32._fold"
    ],
    "email._policybase.Compat32._fold": [
        "email.header.Header.__init__",
        "email.utils._has_surrogates",
        "<builtin>.isinstance",
        "email.header.Header.encode"
    ],
    "email._policybase.Compat32.fold_binary": [
        "email._policybase.Compat32._fold"
    ],
    "email.header.Header.encode": [
        "<builtin>.len",
        "email.header._ValueFormatter.__init__",
        "email.header.Header._normalize",
        "email.header._ValueFormatter._str",
        "email.header._ValueFormatter.add_transition",
        "email.header._ValueFormatter.newline",
        "email.header.Header._nonctext",
        "email.header._ValueFormatter.feed"
    ],
    "email.header.decode_header": [
        "<builtin>.isinstance",
        "<builtin>.AssertionError",
        "<builtin>.reversed",
        "<builtin>.bytes",
        "<builtin>.enumerate",
        "<builtin>.str",
        "email.charset._encode",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "email.header.make_header": [
        "email.header.Header.append",
        "email.header.Header.__init__",
        "<builtin>.isinstance",
        "email.charset.Charset.__init__"
    ],
    "email.header.Header.append": [
        "email.charset.Charset.__init__",
        "<builtin>.isinstance"
    ],
    "email.header.Header": [],
    "email.header.Header.__str__": [
        "email.header.Header._normalize",
        "email.header.Header._nonctext"
    ],
    "email.header.Header._normalize": [],
    "email.header.Header._nonctext": [],
    "email.header.Header.__eq__": [
        "<builtin>.str"
    ],
    "email.header._ValueFormatter.__init__": [
        "<builtin>.len",
        "email.header._Accumulator.__init__"
    ],
    "email.header._ValueFormatter.add_transition": [
        "email.header._Accumulator.push"
    ],
    "email.header._ValueFormatter.feed": [
        "email.header._Accumulator.push",
        "email.header._ValueFormatter._maxlengths",
        "email.header._ValueFormatter.newline",
        "email.header._ValueFormatter._ascii_split",
        "email.header._ValueFormatter._append_chunk"
    ],
    "email.header._ValueFormatter.newline": [
        "email.header._Accumulator.reset",
        "email.header._Accumulator.is_onlyws",
        "email.header._Accumulator.push",
        "email.header._Accumulator.pop",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "email.header._ValueFormatter._str": [
        "email.header._ValueFormatter.newline"
    ],
    "email.header._ValueFormatter": [],
    "email.header._Accumulator.__init__": [
        "<builtin>.super"
    ],
    "email.header._ValueFormatter.__str__": [
        "email.header._ValueFormatter._str"
    ],
    "email.header._Accumulator.pop": [
        "<builtin>.super",
        "email.header._Accumulator.part_count"
    ],
    "email.header._Accumulator.push": [],
    "email.header._Accumulator.is_onlyws": [
        "<builtin>.str"
    ],
    "email.header._Accumulator.reset": [],
    "email.header._ValueFormatter._ascii_split": [
        "email.header._ValueFormatter._append_chunk",
        "re.split",
        "<builtin>.zip"
    ],
    "email.header._ValueFormatter._maxlengths": [
        "<builtin>.len"
    ],
    "email.header._ValueFormatter._append_chunk": [
        "email.header._Accumulator.reset",
        "email.header._Accumulator.part_count",
        "email.header._Accumulator.push",
        "<builtin>.range",
        "email.header._Accumulator.pop_from",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "email.header._Accumulator.part_count": [
        "<builtin>.super"
    ],
    "email.header._Accumulator.pop_from": [],
    "email.header._Accumulator": [],
    "email.header._Accumulator.__len__": [
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "email.header._Accumulator.__str__": [],
    "uu.Error": [],
    "uu.encode": [
        "posixpath.basename",
        "<builtin>.isinstance",
        "ntpath.basename",
        "<builtin>.open",
        "sys.stdout.buffer.write",
        "sys.stdin.buffer.read",
        "<builtin>.len"
    ],
    "optparse.OptionParser.__init__": [
        "optparse.OptionParser._init_parsing_state",
        "optparse.OptionContainer.__init__",
        "optparse.OptionParser._populate_option_list",
        "optparse.IndentedHelpFormatter.__init__",
        "optparse.OptionParser.set_usage",
        "optparse.HelpFormatter.set_parser"
    ],
    "optparse.OptionContainer.add_option": [
        "<builtin>.isinstance",
        "optparse.OptionGroup.__init__",
        "optparse.OptionContainer._check_conflict",
        "<builtin>.TypeError",
        "<builtin>.len",
        "optparse.OptionParser.__init__"
    ],
    "optparse.OptionParser.parse_args": [
        "optparse.OptionParser.error",
        "optparse.OptionParser._process_args",
        "optparse.OptionParser.check_values",
        "optparse.OptionParser._get_args",
        "<builtin>.str",
        "optparse.OptionParser.get_default_values"
    ],
    "optparse.OptionParser.error": [
        "optparse.OptionParser.get_prog_name",
        "optparse.OptionParser.exit",
        "optparse.OptionParser.print_usage"
    ],
    "optparse._repr": [
        "<builtin>.id"
    ],
    "optparse.gettext": [],
    "optparse.ngettext": [],
    "optparse.OptParseError": [],
    "optparse.OptParseError.__init__": [],
    "optparse.OptParseError.__str__": [],
    "optparse.OptionError": [],
    "optparse.OptionError.__init__": [
        "<builtin>.str"
    ],
    "optparse.OptionError.__str__": [],
    "optparse.OptionConflictError": [],
    "optparse.OptionValueError": [],
    "optparse.BadOptionError": [],
    "optparse.BadOptionError.__init__": [],
    "optparse.BadOptionError.__str__": [
        "gettext.gettext"
    ],
    "optparse.AmbiguousOptionError": [],
    "optparse.AmbiguousOptionError.__init__": [
        "optparse.BadOptionError.__init__"
    ],
    "optparse.AmbiguousOptionError.__str__": [
        "gettext.gettext"
    ],
    "optparse.HelpFormatter": [],
    "optparse.HelpFormatter.__init__": [
        "<builtin>.min",
        "<builtin>.max",
        "<builtin>.int"
    ],
    "optparse.HelpFormatter.set_parser": [],
    "optparse.HelpFormatter.set_short_opt_delimiter": [
        "<builtin>.ValueError"
    ],
    "optparse.HelpFormatter.set_long_opt_delimiter": [
        "<builtin>.ValueError"
    ],
    "optparse.HelpFormatter.indent": [],
    "optparse.HelpFormatter.dedent": [],
    "optparse.HelpFormatter.format_usage": [
        "<builtin>.NotImplementedError"
    ],
    "optparse.HelpFormatter.format_heading": [
        "<builtin>.NotImplementedError"
    ],
    "optparse.HelpFormatter._format_text": [
        "<builtin>.max",
        "textwrap.fill"
    ],
    "optparse.HelpFormatter.format_description": [
        "optparse.HelpFormatter._format_text"
    ],
    "optparse.HelpFormatter.format_epilog": [
        "optparse.HelpFormatter._format_text"
    ],
    "optparse.HelpFormatter.expand_default": [
        "<builtin>.str"
    ],
    "optparse.HelpFormatter.format_option": [
        "<builtin>.len",
        "optparse.HelpFormatter.expand_default",
        "textwrap.wrap"
    ],
    "optparse.HelpFormatter.store_option_strings": [
        "<builtin>.max",
        "optparse.HelpFormatter.dedent",
        "<builtin>.min",
        "optparse.HelpFormatter.format_option_strings",
        "optparse.HelpFormatter.indent",
        "<builtin>.len"
    ],
    "optparse.HelpFormatter.format_option_strings": [],
    "optparse.IndentedHelpFormatter": [],
    "optparse.IndentedHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.IndentedHelpFormatter.format_usage": [
        "gettext.gettext"
    ],
    "optparse.IndentedHelpFormatter.format_heading": [],
    "optparse.TitledHelpFormatter": [],
    "optparse.TitledHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.TitledHelpFormatter.format_usage": [
        "optparse.TitledHelpFormatter.format_heading",
        "gettext.gettext"
    ],
    "optparse.TitledHelpFormatter.format_heading": [
        "<builtin>.len"
    ],
    "optparse._parse_num": [],
    "optparse._parse_int": [
        "optparse._parse_num"
    ],
    "optparse.check_builtin": [
        "optparse.OptParseError.__init__",
        "gettext.gettext"
    ],
    "optparse.check_choice": [
        "<builtin>.map",
        "optparse.OptParseError.__init__",
        "gettext.gettext"
    ],
    "optparse.Option": [],
    "optparse.Option.__init__": [
        "optparse.Option._set_attrs",
        "optparse.Option._check_opt_strings",
        "optparse.Option._set_opt_strings"
    ],
    "optparse.Option._check_opt_strings": [
        "<builtin>.TypeError"
    ],
    "optparse.Option._set_opt_strings": [
        "<builtin>.len",
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._set_attrs": [
        "optparse.OptionError.__init__",
        "<builtin>.setattr",
        "<builtin>.sorted"
    ],
    "optparse.Option._check_action": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_type": [
        "optparse.OptionError.__init__",
        "<builtin>.isinstance"
    ],
    "optparse.Option._check_choice": [
        "optparse.OptionError.__init__",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "optparse.Option._check_dest": [],
    "optparse.Option._check_const": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_nargs": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_callback": [
        "<builtin>.callable",
        "optparse.OptionError.__init__",
        "<builtin>.isinstance"
    ],
    "optparse.Option.__str__": [],
    "optparse.Option.takes_value": [],
    "optparse.Option.get_opt_string": [],
    "optparse.Option.check_value": [],
    "optparse.Option.convert_value": [
        "optparse.Option.check_value",
        "<builtin>.tuple"
    ],
    "optparse.Option.process": [
        "optparse.Option.convert_value",
        "optparse.Option.take_action"
    ],
    "optparse.Option.take_action": [
        "<builtin>.setattr",
        "<builtin>.ValueError"
    ],
    "optparse.Values": [],
    "optparse.Values.__init__": [
        "<builtin>.setattr"
    ],
    "optparse.Values.__str__": [
        "<builtin>.str"
    ],
    "optparse.Values.__eq__": [
        "<builtin>.isinstance"
    ],
    "optparse.Values._update_careful": [
        "<builtin>.dir",
        "<builtin>.setattr"
    ],
    "optparse.Values._update_loose": [],
    "optparse.Values._update": [
        "optparse.Values._update_loose",
        "optparse.Values._update_careful",
        "<builtin>.ValueError"
    ],
    "optparse.Values.read_module": [
        "optparse.Values._update",
        "<builtin>.vars",
        "<builtin>.__import__"
    ],
    "optparse.Values.read_file": [
        "optparse.Values._update",
        "<builtin>.open",
        "<builtin>.exec"
    ],
    "optparse.Values.ensure_value": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.hasattr"
    ],
    "optparse.OptionContainer": [],
    "optparse.OptionContainer.__init__": [
        "optparse.OptionContainer.set_description",
        "optparse.OptionContainer.set_conflict_handler",
        "optparse.OptionGroup._create_option_list"
    ],
    "optparse.OptionGroup._create_option_list": [
        "optparse.OptionContainer._share_option_mappings"
    ],
    "optparse.OptionContainer.set_conflict_handler": [
        "<builtin>.ValueError"
    ],
    "optparse.OptionContainer.set_description": [],
    "optparse.OptionContainer._create_option_mappings": [],
    "optparse.OptionContainer._share_option_mappings": [],
    "optparse.OptionContainer.get_description": [],
    "optparse.OptionContainer.destroy": [],
    "optparse.OptionContainer._check_conflict": [
        "optparse.OptionError.__init__"
    ],
    "optparse.OptionGroup.__init__": [
        "optparse.OptionContainer.__init__"
    ],
    "optparse.OptionContainer.add_options": [
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionContainer.get_option": [],
    "optparse.OptionContainer.has_option": [],
    "optparse.OptionContainer.remove_option": [
        "<builtin>.ValueError"
    ],
    "optparse.OptionContainer.format_option_help": [],
    "optparse.OptionContainer.format_description": [
        "optparse.OptionContainer.get_description"
    ],
    "optparse.OptionContainer.format_help": [
        "optparse.OptionContainer.format_option_help",
        "optparse.OptionContainer.format_description"
    ],
    "optparse.OptionGroup": [],
    "optparse.OptionGroup.set_title": [],
    "optparse.OptionGroup.destroy": [
        "optparse.OptionGroup.destroy",
        "optparse.OptionContainer.destroy"
    ],
    "optparse.OptionGroup.format_help": [
        "optparse.OptionGroup.format_help",
        "optparse.OptionContainer.format_help"
    ],
    "optparse.OptionParser": [],
    "optparse.OptionParser.set_usage": [
        "gettext.gettext"
    ],
    "optparse.OptionParser._populate_option_list": [
        "optparse.OptionContainer.add_options",
        "optparse.OptionParser._add_help_option",
        "optparse.OptionParser._add_version_option"
    ],
    "optparse.OptionParser._init_parsing_state": [],
    "optparse.OptionParser.destroy": [
        "optparse.OptionGroup.destroy",
        "optparse.OptionContainer.destroy"
    ],
    "optparse.OptionParser._create_option_list": [
        "optparse.OptionContainer._create_option_mappings"
    ],
    "optparse.OptionParser._add_help_option": [
        "optparse.OptionContainer.add_option",
        "gettext.gettext"
    ],
    "optparse.OptionParser._add_version_option": [
        "optparse.OptionContainer.add_option",
        "gettext.gettext"
    ],
    "optparse.OptionParser.enable_interspersed_args": [],
    "optparse.OptionParser.disable_interspersed_args": [],
    "optparse.OptionParser.set_process_default_values": [],
    "optparse.OptionParser.set_default": [],
    "optparse.OptionParser.set_defaults": [],
    "optparse.OptionParser._get_all_options": [],
    "optparse.OptionParser.get_default_values": [
        "optparse.OptionParser._get_all_options",
        "optparse.Values.__init__",
        "<builtin>.isinstance"
    ],
    "optparse.OptionParser.add_option_group": [
        "<builtin>.isinstance",
        "optparse.OptionGroup.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "optparse.OptionParser.get_option_group": [],
    "optparse.OptionParser._get_args": [],
    "optparse.OptionParser._process_args": [
        "<builtin>.len",
        "optparse.OptionParser._process_short_opts",
        "optparse.OptionParser._process_long_opt"
    ],
    "optparse.OptionParser.check_values": [],
    "optparse.OptionParser._process_long_opt": [
        "<builtin>.len",
        "optparse.OptionParser.error",
        "<builtin>.tuple",
        "gettext.ngettext",
        "optparse.OptionParser._match_long_opt",
        "gettext.gettext"
    ],
    "optparse.OptionParser._process_short_opts": [
        "optparse.OptionParser.error",
        "<builtin>.tuple",
        "optparse.BadOptionError.__init__",
        "gettext.ngettext",
        "<builtin>.len"
    ],
    "optparse.OptionParser._match_long_opt": [
        "optparse._match_abbrev"
    ],
    "optparse._match_abbrev": [
        "<builtin>.len",
        "optparse.AmbiguousOptionError.__init__",
        "optparse.BadOptionError.__init__"
    ],
    "optparse.OptionParser.get_prog_name": [
        "posixpath.basename",
        "ntpath.basename"
    ],
    "optparse.OptionParser.expand_prog_name": [
        "optparse.OptionParser.get_prog_name"
    ],
    "optparse.OptionParser.get_description": [
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionParser.exit": [
        "sys.exit",
        "sys.stderr.write"
    ],
    "optparse.OptionParser.print_usage": [
        "<builtin>.print",
        "optparse.OptionParser.get_usage"
    ],
    "optparse.OptionParser.get_usage": [
        "optparse.OptionParser.expand_prog_name",
        "optparse.IndentedHelpFormatter.format_usage"
    ],
    "optparse.OptionParser.get_version": [
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionParser.print_version": [
        "<builtin>.print",
        "optparse.OptionParser.get_version"
    ],
    "optparse.OptionParser.format_option_help": [
        "optparse.IndentedHelpFormatter.format_heading",
        "optparse.HelpFormatter.dedent",
        "optparse.HelpFormatter.indent",
        "optparse.OptionContainer.format_option_help",
        "optparse.HelpFormatter.store_option_strings",
        "gettext.gettext"
    ],
    "optparse.OptionParser.format_epilog": [],
    "optparse.OptionParser.format_help": [
        "optparse.OptionParser.format_epilog",
        "optparse.OptionParser.get_usage",
        "optparse.OptionParser.format_option_help",
        "optparse.OptionContainer.format_description"
    ],
    "optparse.OptionParser.print_help": [
        "optparse.OptionParser.format_help",
        "sys.stdout.write"
    ],
    "textwrap.TextWrapper": [
        "re.compile",
        "<builtin>.ord",
        "re.escape"
    ],
    "textwrap.TextWrapper.__init__": [],
    "textwrap.TextWrapper._munge_whitespace": [],
    "textwrap.TextWrapper._split": [],
    "textwrap.TextWrapper._fix_sentence_endings": [
        "<builtin>.len"
    ],
    "textwrap.TextWrapper._handle_long_word": [],
    "textwrap.TextWrapper._wrap_chunks": [
        "<builtin>.map",
        "textwrap.TextWrapper._handle_long_word",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "textwrap.TextWrapper._split_chunks": [
        "textwrap.TextWrapper._split",
        "textwrap.TextWrapper._munge_whitespace"
    ],
    "textwrap.TextWrapper.wrap": [
        "textwrap.TextWrapper._wrap_chunks",
        "textwrap.TextWrapper._split_chunks",
        "textwrap.TextWrapper._fix_sentence_endings"
    ],
    "textwrap.TextWrapper.fill": [
        "textwrap.TextWrapper.wrap"
    ],
    "textwrap.shorten": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.fill"
    ],
    "textwrap.dedent": [
        "re.sub",
        "<builtin>.enumerate",
        "<builtin>.zip"
    ],
    "textwrap.indent": [
        "textwrap.indent.prefixed_lines"
    ],
    "textwrap.indent.predicate": [],
    "textwrap.indent.prefixed_lines": [
        "textwrap.indent.predicate"
    ],
    "email.policy.EmailPolicy": [
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.headerregistry.HeaderRegistry.__init__": [],
    "email.policy.EmailPolicy.__init__": [
        "<builtin>.super",
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.policy.EmailPolicy.header_source_parse": [],
    "email.policy.EmailPolicy.header_store_parse": [
        "<builtin>.isinstance",
        "email.headerregistry.HeaderRegistry.__init__",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "email.policy.EmailPolicy.header_fetch_parse": [
        "<builtin>.hasattr",
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.policy.EmailPolicy.fold": [
        "email.policy.EmailPolicy._fold"
    ],
    "email.policy.EmailPolicy._fold": [
        "email.utils._has_surrogates",
        "<builtin>.any",
        "email.headerregistry.HeaderRegistry.__init__",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "email.policy.EmailPolicy.fold_binary": [
        "email.policy.EmailPolicy._fold"
    ],
    "email.contentmanager.ContentManager": [],
    "email.contentmanager.ContentManager.__init__": [],
    "email.contentmanager.ContentManager.add_get_handler": [],
    "email.contentmanager.ContentManager.get_content": [
        "<builtin>.KeyError"
    ],
    "email.contentmanager.ContentManager.add_set_handler": [],
    "email.contentmanager.ContentManager.set_content": [
        "email.contentmanager.ContentManager._find_set_handler",
        "<builtin>.TypeError"
    ],
    "email.contentmanager.ContentManager._find_set_handler": [
        "<builtin>.getattr",
        "<builtin>.KeyError",
        "<builtin>.type"
    ],
    "email.contentmanager.get_text_content": [],
    "email.contentmanager.get_non_text_content": [],
    "email.contentmanager.get_message_content": [],
    "email.contentmanager.get_and_fixup_unknown_message_content": [
        "<builtin>.bytes"
    ],
    "email.contentmanager._prepare_set": [
        "<builtin>.hasattr",
        "<builtin>.ValueError"
    ],
    "email.contentmanager._finalize_set": [],
    "email.contentmanager._encode_base64": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email.contentmanager._encode_text": [
        "<builtin>.max",
        "email.contentmanager._encode_text.embedded_body",
        "email.contentmanager._encode_base64",
        "email.quoprimime.body_encode",
        "<builtin>.ValueError",
        "email.contentmanager._encode_text.normal_body",
        "<builtin>.len"
    ],
    "email.contentmanager._encode_text.embedded_body": [],
    "email.contentmanager._encode_text.normal_body": [],
    "email.contentmanager.set_text_content": [
        "email.contentmanager._finalize_set",
        "email.contentmanager._prepare_set",
        "email.contentmanager._encode_text"
    ],
    "email.contentmanager.set_message_content": [
        "email.contentmanager._finalize_set",
        "email.contentmanager._prepare_set",
        "<builtin>.ValueError"
    ],
    "email.contentmanager.set_bytes_content": [
        "email.contentmanager._finalize_set",
        "email.contentmanager._encode_base64",
        "email.contentmanager._prepare_set"
    ],
    "email.headerregistry.Address": [],
    "email.headerregistry.Address.__init__": [
        "email._header_value_parser.get_addr_spec",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "email._header_value_parser.get_addr_spec": [
        "email._header_value_parser.get_domain",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_local_part",
        "email.errors.HeaderDefect.__init__"
    ],
    "email.headerregistry.Address.display_name": [],
    "email.headerregistry.Address.username": [],
    "email.headerregistry.Address.domain": [],
    "email.headerregistry.Address.addr_spec": [
        "<builtin>.len",
        "<builtin>.set",
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.quote_string": [
        "<builtin>.str"
    ],
    "email.headerregistry.Address.__repr__": [],
    "email.headerregistry.Address.__str__": [
        "<builtin>.len",
        "<builtin>.set",
        "email._header_value_parser.quote_string"
    ],
    "email.headerregistry.Address.__eq__": [
        "<builtin>.type"
    ],
    "email.headerregistry.Group": [],
    "email.headerregistry.Group.__init__": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.Group.display_name": [],
    "email.headerregistry.Group.addresses": [],
    "email.headerregistry.Group.__repr__": [],
    "email.headerregistry.Group.__str__": [
        "<builtin>.len",
        "<builtin>.set",
        "email._header_value_parser.quote_string",
        "<builtin>.str"
    ],
    "email.headerregistry.Group.__eq__": [
        "<builtin>.type"
    ],
    "email.headerregistry.BaseHeader": [],
    "email.headerregistry.BaseHeader.__new__": [
        "email.utils._has_surrogates",
        "email.utils._sanitize"
    ],
    "email.headerregistry.BaseHeader.init": [],
    "email.headerregistry.BaseHeader.name": [],
    "email.headerregistry.BaseHeader.defects": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.BaseHeader.__reduce__": [
        "<builtin>.str"
    ],
    "email.headerregistry.BaseHeader._reconstruct": [],
    "email.headerregistry.BaseHeader.fold": [
        "email._header_value_parser.TokenList.fold",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.MsgID.fold"
    ],
    "email._header_value_parser.TokenList.__init__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.TokenList.fold": [
        "email._header_value_parser._refold_parse_tree"
    ],
    "email._header_value_parser.MsgID.fold": [
        "<builtin>.str"
    ],
    "email.headerregistry._reconstruct_header": [
        "<builtin>.type"
    ],
    "email.headerregistry.UnstructuredHeader": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "email.headerregistry.UnstructuredHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.UniqueUnstructuredHeader": [],
    "email.headerregistry.DateHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.DateHeader.parse": [
        "<builtin>.isinstance",
        "email.errors.HeaderDefect.__init__",
        "email.utils.parsedate_to_datetime",
        "email.utils.format_datetime",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email.headerregistry.DateHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.DateHeader.datetime": [],
    "email.headerregistry.UniqueDateHeader": [],
    "email.headerregistry.AddressHeader": [],
    "email.headerregistry.AddressHeader.value_parser": [
        "email._header_value_parser.get_address_list"
    ],
    "email._header_value_parser.get_address_list": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_address",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_invalid_mailbox",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email.headerregistry.AddressHeader.parse": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "email.headerregistry.AddressHeader.value_parser",
        "<builtin>.str",
        "email.headerregistry.Address.__init__",
        "<builtin>.hasattr",
        "email.headerregistry.Group.__init__"
    ],
    "email.headerregistry.AddressHeader.init": [
        "<builtin>.super",
        "<builtin>.tuple"
    ],
    "email.headerregistry.AddressHeader.groups": [],
    "email.headerregistry.AddressHeader.addresses": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.UniqueAddressHeader": [],
    "email.headerregistry.SingleAddressHeader": [],
    "email.headerregistry.SingleAddressHeader.address": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "email.headerregistry.UniqueSingleAddressHeader": [],
    "email.headerregistry.MIMEVersionHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.MIMEVersionHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.MIMEVersionHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.MIMEVersionHeader.major": [],
    "email.headerregistry.MIMEVersionHeader.minor": [],
    "email.headerregistry.MIMEVersionHeader.version": [],
    "email.headerregistry.ParameterizedMIMEHeader": [],
    "email.headerregistry.ParameterizedMIMEHeader.parse": [
        "email.utils._sanitize",
        "<builtin>.str"
    ],
    "email.headerregistry.ParameterizedMIMEHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.ParameterizedMIMEHeader.params": [],
    "email.headerregistry.ContentTypeHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.ContentTypeHeader.init": [
        "<builtin>.super",
        "email.utils._sanitize"
    ],
    "email.headerregistry.ContentTypeHeader.maintype": [],
    "email.headerregistry.ContentTypeHeader.subtype": [],
    "email.headerregistry.ContentTypeHeader.content_type": [],
    "email.headerregistry.ContentDispositionHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.ContentDispositionHeader.init": [
        "<builtin>.super",
        "email.utils._sanitize"
    ],
    "email.headerregistry.ContentDispositionHeader.content_disposition": [],
    "email.headerregistry.ContentTransferEncodingHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.init": [
        "<builtin>.super",
        "email.utils._sanitize"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.cte": [],
    "email.headerregistry.MessageIDHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.MessageIDHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.HeaderRegistry": [],
    "email.headerregistry.HeaderRegistry.map_to_type": [],
    "email.headerregistry.HeaderRegistry.__getitem__": [
        "<builtin>.type"
    ],
    "email.headerregistry.HeaderRegistry.__call__": [],
    "email._header_value_parser.TokenList": [],
    "email._header_value_parser.TokenList.__str__": [
        "<builtin>.str"
    ],
    "email._header_value_parser.TokenList.__repr__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.TokenList.value": [],
    "email._header_value_parser.TokenList.all_defects": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.TokenList.startswith_fws": [],
    "email._header_value_parser.TokenList.as_ew_allowed": [
        "<builtin>.all"
    ],
    "email._header_value_parser.TokenList.comments": [],
    "email._header_value_parser._refold_parse_tree": [
        "email._header_value_parser._fold_as_ew",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.any",
        "email._header_value_parser._steal_trailing_WSP_if_exists",
        "email._header_value_parser._fold_mime_parameters",
        "<builtin>.set",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "email._header_value_parser.TokenList.pprint": [
        "<builtin>.print",
        "email._header_value_parser.TokenList.ppstr"
    ],
    "email._header_value_parser.TokenList.ppstr": [
        "email._header_value_parser.TokenList._pp"
    ],
    "email._header_value_parser.TokenList._pp": [
        "<builtin>.hasattr",
        "email._header_value_parser.TokenList._pp"
    ],
    "email._header_value_parser.WhiteSpaceTokenList": [],
    "email._header_value_parser.WhiteSpaceTokenList.value": [],
    "email._header_value_parser.WhiteSpaceTokenList.comments": [],
    "email._header_value_parser.UnstructuredTokenList": [],
    "email._header_value_parser.Phrase": [],
    "email._header_value_parser.Word": [],
    "email._header_value_parser.CFWSList": [],
    "email._header_value_parser.Atom": [],
    "email._header_value_parser.Token": [],
    "email._header_value_parser.EncodedWord": [],
    "email._header_value_parser.QuotedString": [],
    "email._header_value_parser.QuotedString.content": [],
    "email._header_value_parser.QuotedString.quoted_value": [
        "<builtin>.str"
    ],
    "email._header_value_parser.QuotedString.stripped_value": [],
    "email._header_value_parser.BareQuotedString": [],
    "email._header_value_parser.BareQuotedString.__str__": [
        "email._header_value_parser.quote_string",
        "<builtin>.str"
    ],
    "email._header_value_parser.BareQuotedString.value": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment": [],
    "email._header_value_parser.Comment.__str__": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.Comment.quote": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment.content": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment.comments": [],
    "email._header_value_parser.AddressList": [],
    "email._header_value_parser.AddressList.addresses": [],
    "email._header_value_parser.AddressList.mailboxes": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.AddressList.all_mailboxes": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.Address": [],
    "email._header_value_parser.Address.display_name": [],
    "email._header_value_parser.Address.mailboxes": [],
    "email._header_value_parser.Address.all_mailboxes": [],
    "email._header_value_parser.MailboxList": [],
    "email._header_value_parser.MailboxList.mailboxes": [],
    "email._header_value_parser.MailboxList.all_mailboxes": [],
    "email._header_value_parser.GroupList": [],
    "email._header_value_parser.GroupList.mailboxes": [],
    "email._header_value_parser.GroupList.all_mailboxes": [],
    "email._header_value_parser.Group": [],
    "email._header_value_parser.Group.mailboxes": [],
    "email._header_value_parser.Group.all_mailboxes": [],
    "email._header_value_parser.Group.display_name": [],
    "email._header_value_parser.NameAddr": [],
    "email._header_value_parser.NameAddr.display_name": [
        "<builtin>.len"
    ],
    "email._header_value_parser.NameAddr.local_part": [],
    "email._header_value_parser.NameAddr.domain": [],
    "email._header_value_parser.NameAddr.route": [],
    "email._header_value_parser.NameAddr.addr_spec": [],
    "email._header_value_parser.AngleAddr": [],
    "email._header_value_parser.AngleAddr.local_part": [],
    "email._header_value_parser.AngleAddr.domain": [],
    "email._header_value_parser.AngleAddr.route": [],
    "email._header_value_parser.AngleAddr.addr_spec": [
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.ObsRoute": [],
    "email._header_value_parser.ObsRoute.domains": [],
    "email._header_value_parser.Mailbox": [],
    "email._header_value_parser.Mailbox.display_name": [],
    "email._header_value_parser.Mailbox.local_part": [],
    "email._header_value_parser.Mailbox.domain": [],
    "email._header_value_parser.Mailbox.route": [],
    "email._header_value_parser.Mailbox.addr_spec": [],
    "email._header_value_parser.InvalidMailbox": [],
    "email._header_value_parser.InvalidMailbox.display_name": [],
    "email._header_value_parser.Domain": [],
    "email._header_value_parser.Domain.domain": [
        "<builtin>.super"
    ],
    "email._header_value_parser.DotAtom": [],
    "email._header_value_parser.DotAtomText": [],
    "email._header_value_parser.NoFoldLiteral": [],
    "email._header_value_parser.AddrSpec": [],
    "email._header_value_parser.AddrSpec.local_part": [],
    "email._header_value_parser.AddrSpec.domain": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AddrSpec.value": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AddrSpec.addr_spec": [
        "<builtin>.len",
        "<builtin>.set",
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.ObsLocalPart": [],
    "email._header_value_parser.DisplayName": [],
    "email._header_value_parser.DisplayName.display_name": [
        "<builtin>.len",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.DisplayName.value": [
        "<builtin>.len",
        "<builtin>.super",
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.LocalPart": [],
    "email._header_value_parser.LocalPart.value": [],
    "email._header_value_parser.LocalPart.local_part": [
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.isinstance"
    ],
    "email._header_value_parser.DomainLiteral": [],
    "email._header_value_parser.DomainLiteral.domain": [
        "<builtin>.super"
    ],
    "email._header_value_parser.DomainLiteral.ip": [],
    "email._header_value_parser.MIMEVersion": [],
    "email._header_value_parser.Parameter": [],
    "email._header_value_parser.Parameter.section_number": [],
    "email._header_value_parser.Parameter.param_value": [],
    "email._header_value_parser.InvalidParameter": [],
    "email._header_value_parser.Attribute": [],
    "email._header_value_parser.Attribute.stripped_value": [],
    "email._header_value_parser.Section": [],
    "email._header_value_parser.Value": [],
    "email._header_value_parser.Value.stripped_value": [],
    "email._header_value_parser.MimeParameters": [],
    "email._header_value_parser.MimeParameters.params": [
        "email.utils._has_surrogates",
        "operator.itemgetter.__init__",
        "urllib.parse.unquote_to_bytes",
        "email.errors.HeaderDefect.__init__",
        "email.errors.MessageDefect.__init__",
        "<builtin>.len",
        "<builtin>.sorted",
        "urllib.parse.unquote"
    ],
    "email._header_value_parser.MimeParameters.__str__": [
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.ParameterizedHeaderValue": [],
    "email._header_value_parser.ParameterizedHeaderValue.params": [
        "<builtin>.reversed"
    ],
    "email._header_value_parser.ContentType": [],
    "email._header_value_parser.ContentDisposition": [],
    "email._header_value_parser.ContentTransferEncoding": [],
    "email._header_value_parser.HeaderLabel": [],
    "email._header_value_parser.MsgID": [],
    "email._header_value_parser.MessageID": [],
    "email._header_value_parser.InvalidMessageID": [],
    "email._header_value_parser.Header": [],
    "email._header_value_parser.Terminal": [],
    "email._header_value_parser.Terminal.__new__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.__repr__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.pprint": [
        "<builtin>.print"
    ],
    "email._header_value_parser.Terminal.all_defects": [
        "<builtin>.list"
    ],
    "email._header_value_parser.Terminal._pp": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.pop_trailing_ws": [],
    "email._header_value_parser.Terminal.comments": [],
    "email._header_value_parser.Terminal.__getnewargs__": [
        "<builtin>.str"
    ],
    "email._header_value_parser.WhiteSpaceTerminal": [],
    "email._header_value_parser.WhiteSpaceTerminal.value": [],
    "email._header_value_parser.WhiteSpaceTerminal.startswith_fws": [],
    "email._header_value_parser.ValueTerminal": [],
    "email._header_value_parser.ValueTerminal.value": [],
    "email._header_value_parser.ValueTerminal.startswith_fws": [],
    "email._header_value_parser.EWWhiteSpaceTerminal": [],
    "email._header_value_parser.EWWhiteSpaceTerminal.value": [],
    "email._header_value_parser.EWWhiteSpaceTerminal.__str__": [],
    "email._header_value_parser._InvalidEwError": [],
    "email._header_value_parser._validate_xtext": [
        "email.errors.NonPrintableDefect.__init__",
        "email.utils._has_surrogates",
        "email.errors.MessageDefect.__init__"
    ],
    "email._header_value_parser._get_ptext_to_endchars": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email._header_value_parser.get_fws": [
        "<builtin>.len"
    ],
    "email._header_value_parser.get_encoded_word": [
        "email._header_value_parser.get_fws",
        "email._encoded_words.decode",
        "email.errors.HeaderDefect.__init__",
        "<builtin>.len",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_unstructured": [
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.get_fws",
        "email.errors.HeaderDefect.__init__",
        "<builtin>.len",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_qp_ctext": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_qcontent": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_atext": [
        "<builtin>.len",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_bare_quoted_string": [
        "email._header_value_parser.get_qcontent",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.get_fws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_comment": [
        "email._header_value_parser.get_fws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_comment",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_qp_ctext"
    ],
    "email._header_value_parser.get_cfws": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_comment",
        "email._header_value_parser.get_fws"
    ],
    "email._header_value_parser.get_quoted_string": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_bare_quoted_string"
    ],
    "email._header_value_parser.get_atom": [
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_atext"
    ],
    "email._header_value_parser.get_dot_atom_text": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_atext"
    ],
    "email._header_value_parser.get_dot_atom": [
        "email._header_value_parser.get_dot_atom_text",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws"
    ],
    "email._header_value_parser.get_word": [
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_atom"
    ],
    "email._header_value_parser.get_phrase": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_word",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.get_local_part": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_word",
        "email.errors.HeaderDefect.__init__",
        "<builtin>.str",
        "email._header_value_parser.get_obs_local_part",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_dot_atom"
    ],
    "email._header_value_parser.get_obs_local_part": [
        "email._header_value_parser.get_word",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.get_dtext": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser._check_for_early_dl_end": [
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.get_domain_literal": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser._check_for_early_dl_end",
        "email._header_value_parser.get_dtext",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_domain": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_atom",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_dot_atom",
        "email._header_value_parser.get_domain_literal"
    ],
    "email._header_value_parser.get_obs_route": [
        "email._header_value_parser.get_domain",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws"
    ],
    "email._header_value_parser.get_angle_addr": [
        "email._header_value_parser.get_addr_spec",
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_obs_route",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_display_name": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.get_name_addr": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_display_name",
        "email._header_value_parser.get_angle_addr"
    ],
    "email._header_value_parser.get_mailbox": [
        "email._header_value_parser.get_addr_spec",
        "<builtin>.isinstance",
        "<builtin>.any",
        "email._header_value_parser.get_name_addr",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_invalid_mailbox": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.get_mailbox_list": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_mailbox",
        "email._header_value_parser.get_invalid_mailbox",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_group_list": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_mailbox_list",
        "email.errors.HeaderDefect.__init__",
        "<builtin>.len",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_group": [
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_group_list",
        "email._header_value_parser.get_display_name",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_address": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_group",
        "email._header_value_parser.get_mailbox"
    ],
    "email._header_value_parser.get_no_fold_literal": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_dtext"
    ],
    "email._header_value_parser.get_msg_id": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_domain",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_no_fold_literal",
        "email._header_value_parser.get_dot_atom_text",
        "email._header_value_parser.get_obs_local_part",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.parse_message_id": [
        "email._header_value_parser.get_msg_id",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_unstructured",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.parse_mime_version": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "<builtin>.int"
    ],
    "email._header_value_parser.get_invalid_parameter": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.get_ttext": [
        "<builtin>.len",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_token": [
        "email._header_value_parser.get_ttext",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws"
    ],
    "email._header_value_parser.get_attrtext": [
        "<builtin>.len",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_attribute": [
        "email._header_value_parser.get_attrtext",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws"
    ],
    "email._header_value_parser.get_extended_attrtext": [
        "<builtin>.len",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_extended_attribute": [
        "email._header_value_parser.get_extended_attrtext",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws"
    ],
    "email._header_value_parser.get_section": [
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.int"
    ],
    "email._header_value_parser.get_value": [
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_extended_attribute"
    ],
    "email._header_value_parser.get_parameter": [
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.get_attrtext",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_value",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_qcontent",
        "email._header_value_parser.get_extended_attrtext",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_attribute",
        "email._header_value_parser.get_section"
    ],
    "email._header_value_parser.parse_mime_parameters": [
        "email._header_value_parser.get_parameter",
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_invalid_parameter",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser._find_mime_parameters": [
        "email._header_value_parser.parse_mime_parameters",
        "email._header_value_parser.get_phrase"
    ],
    "email._header_value_parser.parse_content_type_header": [
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_token",
        "email._header_value_parser.parse_mime_parameters",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser._find_mime_parameters"
    ],
    "email._header_value_parser.parse_content_disposition_header": [
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_token",
        "email._header_value_parser.parse_mime_parameters",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser._find_mime_parameters"
    ],
    "email._header_value_parser.parse_content_transfer_encoding_header": [
        "email._header_value_parser.get_token",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_phrase",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser._steal_trailing_WSP_if_exists": [],
    "email._header_value_parser._fold_mime_parameters": [
        "email.utils._has_surrogates",
        "urllib.parse.quote",
        "email._header_value_parser.quote_string",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "email._header_value_parser._fold_as_ew": [
        "email._encoded_words.encode",
        "email._header_value_parser._steal_trailing_WSP_if_exists",
        "<builtin>.str",
        "<builtin>.len",
        "email._header_value_parser.get_unstructured"
    ],
    "bz2.BZ2File": [],
    "bz2.BZ2File.__init__": [
        "builtins.open",
        "<builtin>.isinstance",
        "io.BufferedReader",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "_compression.DecompressReader.__init__",
        "threading.RLock",
        "<builtin>.hasattr"
    ],
    "_compression.DecompressReader.__init__": [],
    "sys.executable.write": [],
    "sys.base_prefix.write": [],
    "sys.path.write": [],
    "sys.base_prefix.close": [],
    "sys.executable.close": [],
    "tarfile.TarFile.close": [
        "gzip.GzipFile.close",
        "gzip.GzipFile.write",
        "bz2.BZ2File.write",
        "bz2.BZ2File.close",
        "tarfile._Stream.close",
        "tarfile._Stream.write",
        "<builtin>.divmod",
        "lzma.LZMAFile.close",
        "lzma.LZMAFile.write"
    ],
    "sys.path.close": [],
    "bz2.BZ2File.closed": [],
    "bz2.BZ2File.fileno": [
        "sys.executable.fileno",
        "sys.base_prefix.fileno",
        "_compression.BaseStream._check_not_closed",
        "sys.path.fileno"
    ],
    "_compression.BaseStream._check_not_closed": [
        "<builtin>.ValueError"
    ],
    "sys.base_prefix.fileno": [],
    "sys.executable.fileno": [],
    "sys.path.fileno": [],
    "bz2.BZ2File.seekable": [
        "bz2.BZ2File.readable"
    ],
    "bz2.BZ2File.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.peek": [
        "_compression.BaseStream._check_can_read"
    ],
    "_compression.BaseStream._check_can_read": [
        "lzma.LZMAFile.readable",
        "gzip.GzipFile.readable",
        "bz2.BZ2File.readable",
        "io.UnsupportedOperation"
    ],
    "bz2.BZ2File.read1": [
        "_compression.BaseStream._check_can_read"
    ],
    "bz2.BZ2File.readinto": [
        "_compression.BaseStream._check_can_read"
    ],
    "bz2.BZ2File.readline": [
        "_compression.BaseStream._check_can_read",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "bz2.BZ2File.readlines": [
        "_compression.BaseStream._check_can_read",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "_compression.BaseStream._check_can_write": [
        "lzma.LZMAFile.writable",
        "io.UnsupportedOperation",
        "bz2.BZ2File.writable",
        "gzip.GzipFile.writable"
    ],
    "bz2.BZ2File.writelines": [
        "bz2.BZ2File.writelines"
    ],
    "_compression.BaseStream._check_can_seek": [
        "bz2.BZ2File.readable",
        "gzip.GzipFile.readable",
        "bz2.BZ2File.seekable",
        "gzip.GzipFile.seekable",
        "io.UnsupportedOperation",
        "lzma.LZMAFile.readable",
        "lzma.LZMAFile.seekable"
    ],
    "bz2.BZ2File.tell": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.open": [
        "bz2.BZ2File.__init__",
        "<builtin>.ValueError",
        "io.TextIOWrapper"
    ],
    "bz2.compress": [],
    "bz2.decompress": [
        "<builtin>.ValueError"
    ],
    "_compression.BaseStream": [],
    "gzip.GzipFile.readable": [],
    "lzma.LZMAFile.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.writable": [],
    "gzip.GzipFile.seekable": [],
    "lzma.LZMAFile.seekable": [
        "lzma.LZMAFile.readable"
    ],
    "_compression.DecompressReader": [],
    "_compression.DecompressReader.readable": [],
    "_compression.DecompressReader.seekable": [
        "sys.path.seekable",
        "sys.base_prefix.seekable",
        "sys.executable.seekable"
    ],
    "sys.path.seekable": [],
    "sys.base_prefix.seekable": [],
    "sys.executable.seekable": [],
    "_compression.DecompressReader.readinto": [
        "<builtin>.memoryview",
        "<builtin>.len",
        "_compression.DecompressReader.read"
    ],
    "_compression.DecompressReader.read": [
        "_io._RawIOBase.readall",
        "sys.path.read",
        "<builtin>.EOFError",
        "sys.base_prefix.read",
        "<builtin>.len",
        "sys.executable.read"
    ],
    "_io._RawIOBase.readall": [],
    "sys.base_prefix.read": [],
    "sys.path.read": [],
    "sys.executable.read": [],
    "_compression.DecompressReader._rewind": [
        "sys.base_prefix.seek",
        "sys.path.seek",
        "sys.executable.seek"
    ],
    "sys.base_prefix.seek": [],
    "sys.path.seek": [],
    "sys.executable.seek": [],
    "_compression.DecompressReader.seek": [
        "<builtin>.len",
        "<builtin>.min",
        "<builtin>.ValueError",
        "_compression.DecompressReader._rewind",
        "_compression.DecompressReader.read"
    ],
    "_compression.DecompressReader.tell": [],
    "lzma.LZMAFile": [],
    "lzma.LZMAFile.__init__": [
        "builtins.open",
        "<builtin>.isinstance",
        "io.BufferedReader",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "_compression.DecompressReader.__init__",
        "<builtin>.hasattr"
    ],
    "lzma.LZMAFile.closed": [],
    "lzma.LZMAFile.fileno": [
        "sys.executable.fileno",
        "sys.base_prefix.fileno",
        "_compression.BaseStream._check_not_closed",
        "sys.path.fileno"
    ],
    "lzma.LZMAFile.peek": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.read1": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.tell": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.open": [
        "<builtin>.ValueError",
        "io.TextIOWrapper",
        "lzma.LZMAFile.__init__"
    ],
    "lzma.compress": [],
    "lzma.decompress": [],
    "tarfile.stn": [
        "<builtin>.len"
    ],
    "tarfile.nts": [],
    "tarfile.nti": [
        "<builtin>.len",
        "<builtin>.range",
        "tarfile.nts",
        "<builtin>.int"
    ],
    "tarfile.itn": [
        "<builtin>.range",
        "<builtin>.int",
        "<builtin>.bytes",
        "<builtin>.ValueError",
        "<builtin>.bytearray"
    ],
    "tarfile.calc_chksums": [
        "<builtin>.sum"
    ],
    "tarfile.copyfileobj": [
        "shutil.copyfileobj",
        "gzip.GzipFile.write",
        "bz2.BZ2File.write",
        "<builtin>.range",
        "bz2.BZ2File.read",
        "lzma.LZMAFile.read",
        "tarfile._Stream.write",
        "gzip.GzipFile.read",
        "<builtin>.len",
        "<builtin>.divmod",
        "tarfile._Stream.read",
        "lzma.LZMAFile.write"
    ],
    "tarfile._Stream.read": [
        "<builtin>.len",
        "tarfile._Stream._read"
    ],
    "tarfile._Stream.write": [
        "<builtin>.len",
        "tarfile._Stream.__write"
    ],
    "tarfile._safe_print": [
        "<builtin>.getattr",
        "<builtin>.print"
    ],
    "tarfile.TarError": [],
    "tarfile.ExtractError": [],
    "tarfile.ReadError": [],
    "tarfile.CompressionError": [],
    "tarfile.StreamError": [],
    "tarfile.HeaderError": [],
    "tarfile.EmptyHeaderError": [],
    "tarfile.TruncatedHeaderError": [],
    "tarfile.EOFHeaderError": [],
    "tarfile.InvalidHeaderError": [],
    "tarfile.SubsequentHeaderError": [],
    "tarfile._LowLevelFile": [],
    "tarfile._LowLevelFile.__init__": [
        "<builtin>.hasattr"
    ],
    "tarfile._LowLevelFile.close": [],
    "tarfile._LowLevelFile.read": [],
    "tarfile._LowLevelFile.write": [],
    "tarfile._Stream": [],
    "tarfile._StreamProxy.__init__": [
        "tarfile._LowLevelFile.read",
        "tarfile._StreamProxy.read"
    ],
    "tarfile._StreamProxy.getcomptype": [],
    "tarfile._Stream._init_read_gz": [
        "tarfile._Stream.read",
        "tarfile._Stream.__read",
        "<builtin>.ord"
    ],
    "tarfile._Stream._init_write_gz": [
        "tarfile._Stream.__write",
        "time.time",
        "<builtin>.int"
    ],
    "tarfile._StreamProxy.close": [
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.close"
    ],
    "tarfile._Stream.__del__": [
        "tarfile._Stream.close",
        "<builtin>.hasattr"
    ],
    "tarfile._Stream.close": [
        "tarfile._LowLevelFile.write",
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.close"
    ],
    "tarfile._Stream.__write": [
        "<builtin>.len",
        "tarfile._LowLevelFile.write"
    ],
    "tarfile._Stream.__read": [
        "tarfile._LowLevelFile.read",
        "<builtin>.len",
        "tarfile._StreamProxy.read"
    ],
    "tarfile._Stream.tell": [],
    "tarfile._Stream.seek": [
        "tarfile._Stream.read",
        "<builtin>.divmod",
        "<builtin>.range"
    ],
    "tarfile._Stream._read": [
        "tarfile._LowLevelFile.read",
        "<builtin>.len",
        "tarfile._Stream.__read",
        "tarfile._StreamProxy.read"
    ],
    "tarfile._StreamProxy.read": [],
    "tarfile._StreamProxy": [],
    "tarfile._FileInFile": [],
    "tarfile._FileInFile.__init__": [
        "<builtin>.getattr"
    ],
    "tarfile._FileInFile.flush": [],
    "tarfile._FileInFile.readable": [],
    "tarfile._FileInFile.writable": [],
    "tarfile._FileInFile.seekable": [],
    "tarfile._FileInFile.tell": [],
    "tarfile._FileInFile.seek": [
        "<builtin>.min",
        "<builtin>.ValueError",
        "<builtin>.max"
    ],
    "tarfile._FileInFile.read": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "tarfile._FileInFile.readinto": [
        "<builtin>.len",
        "tarfile._FileInFile.read"
    ],
    "tarfile._FileInFile.close": [],
    "tarfile.ExFileObject": [],
    "tarfile.ExFileObject.__init__": [
        "<builtin>.super",
        "tarfile._FileInFile.__init__"
    ],
    "tarfile.TarInfo": [
        "<builtin>.dict"
    ],
    "tarfile.TarInfo.__init__": [],
    "tarfile.TarInfo.path": [],
    "tarfile.TarInfo.linkpath": [],
    "tarfile.TarInfo.__repr__": [
        "<builtin>.id"
    ],
    "tarfile.TarInfo.get_info": [],
    "tarfile.TarInfo.tobuf": [
        "tarfile.TarInfo.create_gnu_header",
        "tarfile.TarInfo.get_info",
        "<builtin>.ValueError",
        "tarfile.TarInfo.create_pax_header",
        "tarfile.TarInfo.create_ustar_header"
    ],
    "tarfile.TarInfo.create_ustar_header": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "tarfile.TarInfo._create_header",
        "tarfile.TarInfo._posix_split_name"
    ],
    "tarfile.TarInfo.create_gnu_header": [
        "<builtin>.len",
        "tarfile.TarInfo._create_gnu_long_header",
        "tarfile.TarInfo._create_header"
    ],
    "tarfile.TarInfo.create_pax_header": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "tarfile.TarInfo._create_header",
        "tarfile.TarInfo._create_pax_generic_header",
        "<builtin>.len"
    ],
    "tarfile.TarInfo._posix_split_name": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "tarfile.TarInfo._create_header": [
        "<builtin>.bytes",
        "tarfile.calc_chksums",
        "tarfile.itn",
        "tarfile.stn"
    ],
    "tarfile.TarInfo._create_gnu_long_header": [
        "<builtin>.len",
        "tarfile.TarInfo._create_payload",
        "tarfile.TarInfo._create_header"
    ],
    "tarfile.TarInfo._create_pax_generic_header": [
        "tarfile.TarInfo._create_payload",
        "<builtin>.bytes",
        "<builtin>.str",
        "tarfile.TarInfo._create_header",
        "<builtin>.len"
    ],
    "tarfile.TarInfo.create_pax_global_header": [
        "tarfile.TarInfo._create_pax_generic_header"
    ],
    "tarfile.TarInfo._create_payload": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "tarfile.TarInfo.frombuf": [
        "tarfile.calc_chksums",
        "tarfile.nti",
        "<builtin>.range",
        "tarfile.nts",
        "tarfile.TarInfo.__init__",
        "<builtin>.bool",
        "<builtin>.len"
    ],
    "tarfile.TarInfo.fromtarfile": [
        "bz2.BZ2File.tell",
        "lzma.LZMAFile.tell",
        "tarfile.TarInfo.frombuf",
        "bz2.BZ2File.read",
        "lzma.LZMAFile.read",
        "gzip.GzipFile.read",
        "tarfile._Stream.read",
        "tarfile._Stream.tell"
    ],
    "tarfile.TarInfo._proc_member": [
        "tarfile.TarInfo._proc_pax",
        "tarfile.TarInfo._proc_builtin",
        "tarfile.TarInfo._proc_sparse",
        "tarfile.TarInfo._proc_gnulong"
    ],
    "tarfile.TarInfo._proc_gnulong": [
        "tarfile.nts",
        "tarfile.TarInfo._block",
        "tarfile.TarInfo.fromtarfile"
    ],
    "tarfile.TarInfo._proc_sparse": [
        "tarfile.nti",
        "<builtin>.bool",
        "<builtin>.range",
        "tarfile.TarInfo._block"
    ],
    "tarfile.TarInfo._proc_pax": [
        "tarfile.TarInfo._proc_gnusparse_10",
        "tarfile.TarInfo._proc_gnusparse_01",
        "tarfile.TarInfo._block",
        "tarfile.TarInfo.fromtarfile",
        "tarfile.TarInfo._proc_gnusparse_00",
        "re.compile",
        "re.search",
        "tarfile.TarInfo._decode_pax_field",
        "<builtin>.int"
    ],
    "tarfile.TarInfo._proc_builtin": [
        "tarfile.TarInfo._apply_pax_info",
        "tarfile.TarInfo.isreg",
        "tarfile.TarInfo._block"
    ],
    "tarfile.TarInfo.isreg": [],
    "tarfile.TarInfo._block": [
        "<builtin>.divmod"
    ],
    "tarfile.TarInfo._apply_pax_info": [
        "<builtin>.setattr",
        "<builtin>.int"
    ],
    "tarfile.TarInfo._decode_pax_field": [],
    "tarfile.TarInfo._proc_gnusparse_01": [
        "<builtin>.zip",
        "<builtin>.list",
        "<builtin>.int"
    ],
    "tarfile.TarInfo._proc_gnusparse_00": [
        "<builtin>.zip",
        "<builtin>.list",
        "re.finditer",
        "<builtin>.int"
    ],
    "tarfile.TarInfo._proc_gnusparse_10": [
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.zip",
        "<builtin>.int"
    ],
    "tarfile.TarInfo.isfile": [
        "tarfile.TarInfo.isreg"
    ],
    "tarfile.TarInfo.isdir": [],
    "tarfile.TarInfo.issym": [],
    "tarfile.TarInfo.islnk": [],
    "tarfile.TarInfo.ischr": [],
    "tarfile.TarInfo.isblk": [],
    "tarfile.TarInfo.isfifo": [],
    "tarfile.TarInfo.issparse": [],
    "tarfile.TarInfo.isdev": [],
    "tarfile.TarFile": [],
    "tarfile.TarFile.__init__": [
        "lzma.LZMAFile.seek",
        "builtins.open",
        "gzip.GzipFile.write",
        "lzma.LZMAFile.tell",
        "<builtin>.str",
        "posixpath.exists",
        "lzma.LZMAFile.close",
        "ntpath.exists",
        "<builtin>.isinstance",
        "bz2.BZ2File.seek",
        "tarfile._Stream.seek",
        "bz2.BZ2File.close",
        "<builtin>.hasattr",
        "tarfile._Stream.tell",
        "posixpath.abspath",
        "gzip.GzipFile.close",
        "tarfile.TarFile.next",
        "ntpath.abspath",
        "tarfile.TarInfo.create_pax_global_header",
        "<builtin>.ValueError",
        "lzma.LZMAFile.write",
        "bz2.BZ2File.write",
        "bz2.BZ2File.tell",
        "tarfile._Stream.close",
        "gzip.GzipFile.seek",
        "tarfile._Stream.write",
        "<builtin>.len",
        "tarfile.TarInfo.fromtarfile"
    ],
    "tarfile.TarFile.next": [
        "lzma.LZMAFile.seek",
        "tarfile.TarFile._check",
        "tarfile.TarInfo.fromtarfile",
        "bz2.BZ2File.tell",
        "bz2.BZ2File.seek",
        "tarfile._Stream.seek",
        "lzma.LZMAFile.tell",
        "gzip.GzipFile.seek",
        "bz2.BZ2File.read",
        "lzma.LZMAFile.read",
        "<builtin>.str",
        "gzip.GzipFile.read",
        "tarfile.TarFile._dbg",
        "tarfile._Stream.read",
        "tarfile._Stream.tell"
    ],
    "tarfile.TarFile.open": [
        "<builtin>.getattr",
        "gzip.GzipFile.close",
        "tarfile.TarFile.taropen",
        "tarfile.TarFile.__init__",
        "tarfile._Stream.__init__",
        "tarfile._Stream.close",
        "bz2.BZ2File.close",
        "<builtin>.ValueError",
        "<builtin>.sorted",
        "lzma.LZMAFile.close"
    ],
    "tarfile.TarFile.open.not_compressed": [],
    "tarfile.TarFile.taropen": [
        "<builtin>.ValueError",
        "tarfile.TarFile.__init__"
    ],
    "gzip.GzipFile.__init__": [
        "<builtin>.getattr",
        "builtins.open",
        "gzip._GzipReader.__init__",
        "<builtin>.isinstance",
        "io.BufferedReader",
        "gzip.GzipFile._write_gzip_header",
        "<builtin>.ValueError",
        "gzip.GzipFile._init_write"
    ],
    "tarfile.TarFile.getmember": [
        "tarfile.TarFile._getmember",
        "<builtin>.KeyError"
    ],
    "tarfile.TarFile._getmember": [
        "posixpath.normpath",
        "ntpath.normpath",
        "tarfile.TarFile.getmembers",
        "<builtin>.reversed"
    ],
    "tarfile.TarFile.getmembers": [
        "tarfile.TarFile._check",
        "tarfile.TarFile._load"
    ],
    "tarfile.TarFile._check": [
        "<builtin>.OSError"
    ],
    "tarfile.TarFile._load": [
        "tarfile.TarFile.next"
    ],
    "tarfile.TarFile.getnames": [
        "tarfile.TarFile.getmembers"
    ],
    "tarfile.TarFile.gettarinfo": [
        "tarfile.TarFile._check",
        "ntpath.splitdrive",
        "sys.path.lstrip",
        "stat.S_ISLNK",
        "stat.S_ISFIFO",
        "posixpath.splitdrive",
        "stat.S_ISDIR",
        "stat.S_ISCHR",
        "tarfile.TarInfo.__init__",
        "stat.S_ISBLK",
        "<builtin>.hasattr",
        "stat.S_ISREG",
        "pwd.getpwuid",
        "sys.executable.lstrip",
        "sys.base_prefix.replace",
        "sys.base_prefix.lstrip",
        "sys.executable.replace",
        "sys.path.replace"
    ],
    "tarfile.TarFile.list": [
        "tarfile.TarFile._check",
        "tarfile._safe_print",
        "tarfile.TarFile.__iter__",
        "time.localtime",
        "stat.filemode",
        "<builtin>.print"
    ],
    "tarfile.TarFile.add": [
        "posixpath.abspath",
        "tarfile.TarFile._check",
        "builtins.open",
        "ntpath.abspath",
        "posixpath.join",
        "tarfile.TarFile.addfile",
        "ntpath.join",
        "tarfile.TarFile.gettarinfo",
        "tarfile.TarFile.add",
        "tarfile.TarInfo.isreg",
        "tarfile.TarInfo.isdir",
        "tarfile.TarFile._dbg",
        "<builtin>.sorted"
    ],
    "tarfile.TarFile._dbg": [
        "<builtin>.print"
    ],
    "tarfile.TarFile.addfile": [
        "tarfile.TarFile._check",
        "gzip.GzipFile.write",
        "bz2.BZ2File.write",
        "tarfile.TarInfo.tobuf",
        "tarfile._Stream.write",
        "tarfile.copyfileobj",
        "<builtin>.len",
        "<builtin>.divmod",
        "lzma.LZMAFile.write"
    ],
    "tarfile.TarFile.extractall": [
        "posixpath.join",
        "tarfile.TarFile.chmod",
        "ntpath.join",
        "tarfile.TarFile.__iter__",
        "tarfile.TarFile.utime",
        "tarfile.TarFile.chown",
        "tarfile.TarFile.extract",
        "tarfile.TarFile._dbg"
    ],
    "tarfile.TarFile.extract": [
        "tarfile.TarFile._check",
        "<builtin>.isinstance",
        "posixpath.join",
        "ntpath.join",
        "tarfile.TarFile.getmember",
        "tarfile.TarFile._extract_member",
        "tarfile.TarFile._dbg"
    ],
    "tarfile.TarFile.extractall.<lambda1>": [],
    "tarfile.TarFile.chown": [
        "<builtin>.hasattr",
        "pwd.getpwnam"
    ],
    "tarfile.TarFile.utime": [
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.chmod": [],
    "tarfile.TarFile._extract_member": [
        "tarfile.TarFile.makeunknown",
        "posixpath.exists",
        "tarfile.TarFile.makedir",
        "ntpath.exists",
        "ntpath.dirname",
        "tarfile.TarFile._dbg",
        "sys.base_prefix.replace",
        "tarfile.TarFile.makelink",
        "sys.path.rstrip",
        "sys.executable.rstrip",
        "tarfile.TarFile.chown",
        "tarfile.TarFile.makefile",
        "tarfile.TarFile.makefifo",
        "sys.executable.replace",
        "sys.path.replace",
        "posixpath.dirname",
        "tarfile.TarFile.chmod",
        "tarfile.TarFile.utime",
        "sys.base_prefix.rstrip",
        "tarfile.TarFile.makedev",
        "os.makedirs"
    ],
    "tarfile.TarFile.extractfile": [
        "tarfile.TarFile._check",
        "tarfile.TarFile._find_link_target",
        "<builtin>.isinstance",
        "tarfile.TarFile.getmember",
        "tarfile.TarFile.extractfile",
        "tarfile.ExFileObject.__init__"
    ],
    "tarfile.TarFile._find_link_target": [
        "<builtin>.filter",
        "tarfile.TarFile._getmember",
        "ntpath.dirname",
        "<builtin>.KeyError",
        "posixpath.dirname"
    ],
    "sys.path.rstrip": [],
    "sys.base_prefix.rstrip": [],
    "tarfile.TarFile.makefile": [
        "lzma.LZMAFile.seek",
        "builtins.open",
        "bz2.BZ2File.seek",
        "tarfile._Stream.seek",
        "gzip.GzipFile.seek",
        "tarfile.copyfileobj"
    ],
    "tarfile.TarFile.makedir": [],
    "tarfile.TarFile.makefifo": [
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.makedev": [
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.makelink": [
        "ntpath.exists",
        "tarfile.TarFile._find_link_target",
        "posixpath.exists",
        "tarfile.TarFile._extract_member"
    ],
    "tarfile.TarFile.makeunknown": [
        "tarfile.TarFile._dbg",
        "tarfile.TarFile.makefile"
    ],
    "tarfile.TarFile.__enter__": [
        "tarfile.TarFile._check"
    ],
    "tarfile.TarFile.__exit__": [
        "gzip.GzipFile.close",
        "bz2.BZ2File.close",
        "tarfile._Stream.close",
        "tarfile.TarFile.close",
        "lzma.LZMAFile.close"
    ],
    "tarfile.is_tarfile": [
        "tarfile.TarFile.open"
    ],
    "gzip.open": [
        "<builtin>.isinstance",
        "gzip.GzipFile.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "io.TextIOWrapper"
    ],
    "gzip.write32u": [
        "gzip.GzipFile.write",
        "sys.path.write",
        "sys.stdin.buffer.write",
        "sys.base_prefix.write",
        "sys.stdout.buffer.write",
        "sys.executable.write"
    ],
    "sys.stdin.buffer.write": [],
    "gzip._PaddedFile": [],
    "gzip._PaddedFile.__init__": [
        "<builtin>.len"
    ],
    "gzip._PaddedFile.read": [],
    "gzip._PaddedFile.prepend": [
        "<builtin>.len"
    ],
    "gzip._PaddedFile.seek": [],
    "gzip._PaddedFile.seekable": [],
    "gzip.BadGzipFile": [],
    "gzip.GzipFile": [],
    "gzip._GzipReader.__init__": [
        "<builtin>.super",
        "gzip._PaddedFile.__init__"
    ],
    "gzip.GzipFile._init_write": [],
    "gzip.GzipFile._write_gzip_header": [
        "posixpath.basename",
        "gzip.GzipFile.write",
        "<builtin>.isinstance",
        "<builtin>.chr",
        "ntpath.basename",
        "sys.path.write",
        "sys.stdin.buffer.write",
        "time.time",
        "sys.base_prefix.write",
        "sys.stdout.buffer.write",
        "sys.executable.write",
        "gzip.write32u",
        "<builtin>.int"
    ],
    "gzip.GzipFile.mtime": [],
    "gzip.GzipFile.__repr__": [
        "<builtin>.hex",
        "<builtin>.id",
        "<builtin>.repr"
    ],
    "gzip.GzipFile.read1": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.peek": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.closed": [],
    "sys.path.flush": [],
    "sys.stdin.buffer.flush": [],
    "sys.stdout.buffer.flush": [],
    "sys.base_prefix.flush": [],
    "sys.executable.flush": [],
    "gzip.GzipFile.fileno": [
        "gzip.GzipFile.fileno",
        "sys.base_prefix.fileno",
        "sys.path.fileno",
        "sys.executable.fileno",
        "sys.stdout.buffer.fileno",
        "sys.stdin.buffer.fileno"
    ],
    "sys.stdout.buffer.fileno": [],
    "sys.stdin.buffer.fileno": [],
    "gzip.GzipFile.rewind": [
        "<builtin>.OSError"
    ],
    "gzip._GzipReader": [],
    "gzip._GzipReader._init_read": [],
    "gzip._GzipReader._read_exact": [
        "sys.path.read",
        "<builtin>.EOFError",
        "sys.base_prefix.read",
        "<builtin>.len",
        "sys.executable.read"
    ],
    "gzip._GzipReader._read_gzip_header": [
        "sys.base_prefix.read",
        "gzip._GzipReader._read_exact",
        "sys.path.read",
        "sys.executable.read"
    ],
    "gzip._GzipReader.read": [
        "_io._RawIOBase.readall",
        "gzip._GzipReader._init_read",
        "sys.path.read",
        "sys.executable.prepend",
        "sys.base_prefix.prepend",
        "gzip._GzipReader._read_eof",
        "sys.path.prepend",
        "<builtin>.EOFError",
        "gzip._GzipReader._read_gzip_header",
        "sys.base_prefix.read",
        "<builtin>.len",
        "gzip._GzipReader._add_read_data",
        "sys.executable.read"
    ],
    "gzip._GzipReader._read_eof": [
        "sys.path.read",
        "sys.executable.prepend",
        "<builtin>.hex",
        "sys.base_prefix.prepend",
        "sys.path.prepend",
        "gzip._GzipReader._read_exact",
        "sys.base_prefix.read",
        "sys.executable.read"
    ],
    "sys.base_prefix.prepend": [],
    "sys.path.prepend": [],
    "sys.executable.prepend": [],
    "gzip._GzipReader._add_read_data": [
        "<builtin>.len"
    ],
    "gzip._GzipReader._rewind": [
        "<builtin>.super"
    ],
    "gzip.compress": [
        "io.BytesIO",
        "gzip.GzipFile.__init__"
    ],
    "gzip.decompress": [
        "io.BytesIO",
        "gzip.GzipFile.__init__"
    ],
    "sys.stdout.buffer.close": [],
    "unittest.runner._WritelnDecorator": [],
    "unittest.runner._WritelnDecorator.__init__": [],
    "unittest.runner._WritelnDecorator.__getattr__": [
        "<builtin>.AttributeError",
        "<builtin>.getattr"
    ],
    "unittest.runner._WritelnDecorator.writeln": [],
    "unittest.runner.TextTestResult": [],
    "unittest.runner.TextTestResult.__init__": [
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.getDescription": [
        "<builtin>.str"
    ],
    "unittest.runner.TextTestResult.startTest": [
        "unittest.runner.TextTestResult.getDescription",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addSuccess": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addError": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addFailure": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addSkip": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addExpectedFailure": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addUnexpectedSuccess": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.printErrors": [
        "unittest.runner._WritelnDecorator.writeln",
        "unittest.runner.TextTestResult.printErrorList"
    ],
    "unittest.runner.TextTestResult.printErrorList": [
        "unittest.runner._WritelnDecorator.writeln",
        "unittest.runner.TextTestResult.getDescription"
    ],
    "unittest.runner.TextTestRunner": [],
    "unittest.runner.TextTestRunner._makeResult": [
        "unittest.runner.TextTestResult.__init__"
    ],
    "unittest.signals.registerResult": [],
    "unittest.result.TestResult.wasSuccessful": [
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "unittest.signals._InterruptHandler": [],
    "unittest.signals._InterruptHandler.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "unittest.signals._InterruptHandler.__init__.default_handler": [],
    "unittest.signals._InterruptHandler.__call__": [
        "weakref.WeakKeyDictionary.keys"
    ],
    "unittest.signals.removeResult": [
        "<builtin>.bool",
        "weakref.WeakKeyDictionary.pop"
    ],
    "unittest.signals.removeHandler": [
        "functools.wraps",
        "_functools.partial"
    ],
    "unittest.signals.removeHandler.inner": [
        "unittest.signals.removeHandler"
    ],
    "unittest.suite._call_if_exists": [
        "<builtin>.getattr"
    ],
    "unittest.suite._call_if_exists.<lambda1>": [],
    "unittest.suite.BaseTestSuite": [],
    "unittest.suite.BaseTestSuite.__init__": [
        "unittest.suite.BaseTestSuite.addTests"
    ],
    "unittest.suite.BaseTestSuite.addTests": [
        "unittest.suite.BaseTestSuite.addTest",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "unittest.suite.BaseTestSuite.__repr__": [
        "<builtin>.list",
        "unittest.util.strclass"
    ],
    "unittest.util.strclass": [],
    "unittest.suite.BaseTestSuite.__eq__": [
        "<builtin>.list",
        "<builtin>.isinstance"
    ],
    "unittest.suite.BaseTestSuite.__iter__": [
        "<builtin>.iter"
    ],
    "unittest.suite.BaseTestSuite.countTestCases": [
        "unittest.suite.BaseTestSuite.__iter__",
        "unittest.suite.BaseTestSuite.countTestCases"
    ],
    "unittest.suite.BaseTestSuite.addTest": [
        "<builtin>.repr",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.callable"
    ],
    "unittest.suite.BaseTestSuite.run": [
        "unittest.suite.BaseTestSuite._removeTestAtIndex",
        "<builtin>.enumerate"
    ],
    "unittest.suite.BaseTestSuite._removeTestAtIndex": [
        "<builtin>.hasattr"
    ],
    "unittest.suite.BaseTestSuite.__call__": [
        "unittest.suite.BaseTestSuite.run"
    ],
    "unittest.suite.BaseTestSuite.debug": [
        "unittest.suite.BaseTestSuite.__iter__",
        "unittest.suite.BaseTestSuite.debug"
    ],
    "unittest.suite.TestSuite": [],
    "unittest.suite.TestSuite.run": [
        "<builtin>.getattr",
        "doctest._DocTestSuite._removeTestAtIndex",
        "unittest.suite._isnotsuite",
        "unittest.suite.TestSuite._tearDownPreviousClass",
        "unittest.suite.TestSuite._handleModuleFixture",
        "<builtin>.enumerate",
        "unittest.suite.TestSuite._handleModuleTearDown",
        "unittest.suite.TestSuite._handleClassSetUp"
    ],
    "unittest.suite._isnotsuite": [
        "<builtin>.iter"
    ],
    "unittest.suite.TestSuite._tearDownPreviousClass": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.suite._call_if_exists",
        "unittest.util.strclass",
        "<builtin>.len",
        "unittest.suite.TestSuite._createClassOrModuleLevelException"
    ],
    "unittest.suite.TestSuite._handleModuleFixture": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._get_previous_module",
        "unittest.suite._call_if_exists",
        "unittest.case.doModuleCleanups",
        "unittest.suite.TestSuite._handleModuleTearDown",
        "unittest.suite.TestSuite._createClassOrModuleLevelException"
    ],
    "unittest.suite.TestSuite._handleClassSetUp": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.suite._call_if_exists",
        "unittest.util.strclass",
        "<builtin>.len",
        "unittest.suite.TestSuite._createClassOrModuleLevelException"
    ],
    "unittest.suite.TestSuite._handleModuleTearDown": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.suite.TestSuite._get_previous_module",
        "unittest.suite._call_if_exists",
        "unittest.case.doModuleCleanups",
        "unittest.suite.TestSuite._createClassOrModuleLevelException"
    ],
    "unittest.suite.TestSuite.debug": [
        "unittest.suite.TestSuite.run"
    ],
    "unittest.suite.TestSuite._createClassOrModuleLevelException": [
        "unittest.suite.TestSuite._addClassOrModuleLevelException"
    ],
    "unittest.suite.TestSuite._get_previous_module": [
        "<builtin>.getattr"
    ],
    "unittest.case.doModuleCleanups": [],
    "unittest.suite.TestSuite._addClassOrModuleLevelException": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.suite._ErrorHolder.__init__",
        "sys.exc_info",
        "<builtin>.str"
    ],
    "unittest.suite._ErrorHolder.__init__": [],
    "unittest.suite._ErrorHolder": [],
    "unittest.suite._ErrorHolder.id": [],
    "unittest.suite._ErrorHolder.shortDescription": [],
    "unittest.suite._ErrorHolder.__repr__": [],
    "unittest.suite._ErrorHolder.__str__": [
        "unittest.suite._ErrorHolder.id"
    ],
    "unittest.suite._ErrorHolder.run": [],
    "unittest.suite._ErrorHolder.__call__": [
        "unittest.suite._ErrorHolder.run"
    ],
    "unittest.suite._ErrorHolder.countTestCases": [],
    "unittest.suite._DebugResult": [],
    "unittest.async_case.IsolatedAsyncioTestCase": [],
    "unittest.async_case.IsolatedAsyncioTestCase.__init__": [
        "<builtin>.super"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.asyncSetUp": [],
    "unittest.async_case.IsolatedAsyncioTestCase.asyncTearDown": [],
    "unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callSetUp": [
        "unittest.case.TestCase.setUp",
        "unittest.async_case.IsolatedAsyncioTestCase._callAsync"
    ],
    "unittest.case.TestCase.setUp": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callAsync": [
        "inspect.isawaitable"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callTestMethod": [
        "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync": [
        "inspect.isawaitable"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callTearDown": [
        "unittest.case.TestCase.tearDown",
        "unittest.async_case.IsolatedAsyncioTestCase._callAsync"
    ],
    "unittest.case.TestCase.tearDown": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callCleanup": [
        "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"
    ],
    "inspect.isawaitable": [
        "<builtin>.bool",
        "<builtin>.isinstance"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner": [],
    "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop": [
        "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop": [],
    "unittest.async_case.IsolatedAsyncioTestCase.run": [
        "<builtin>.super",
        "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop",
        "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop"
    ],
    "asyncio.windows_events._OverlappedFuture": [],
    "asyncio.windows_events._OverlappedFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture._repr_info": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture._cancel_overlapped": [
        "futures.Future._loop.call_exception_handler"
    ],
    "futures.Future._loop.call_exception_handler": [],
    "asyncio.windows_events._OverlappedFuture.cancel": [
        "<builtin>.super",
        "asyncio.windows_events._OverlappedFuture._cancel_overlapped"
    ],
    "asyncio.windows_events._OverlappedFuture.set_exception": [
        "<builtin>.super",
        "asyncio.windows_events._OverlappedFuture._cancel_overlapped"
    ],
    "asyncio.windows_events._OverlappedFuture.set_result": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture": [],
    "asyncio.windows_events._BaseWaitHandleFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._poll": [
        "_winapi.WaitForSingleObject"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._repr_info": [
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._poll"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb": [],
    "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait": [
        "_overlapped.UnregisterWait",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb",
        "futures.Future._loop.call_exception_handler"
    ],
    "_overlapped.UnregisterWait": [],
    "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb": [
        "<builtin>.super",
        "_winapi.CloseHandle",
        "asyncio.windows_events.IocpProactor._unregister"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.cancel": [
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._WaitHandleFuture._unregister_wait": [
        "_overlapped.UnregisterWaitEx",
        "asyncio.windows_events.IocpProactor._wait_cancel",
        "futures.Future._loop.call_exception_handler"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.set_exception": [
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.set_result": [
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait"
    ],
    "asyncio.windows_events._WaitCancelFuture": [],
    "asyncio.windows_events._WaitCancelFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitCancelFuture.cancel": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.windows_events._WaitCancelFuture.set_result": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitCancelFuture.set_exception": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitHandleFuture": [],
    "asyncio.windows_events._WaitHandleFuture.__init__": [
        "<builtin>.super",
        "_overlapped.CreateEvent"
    ],
    "_overlapped.CreateEvent": [],
    "asyncio.windows_events.IocpProactor._unregister": [
        "asyncio.windows_events.IocpProactor._check_closed"
    ],
    "_overlapped.UnregisterWaitEx": [],
    "asyncio.windows_events.IocpProactor._wait_cancel": [
        "asyncio.windows_events.IocpProactor._wait_for_handle"
    ],
    "asyncio.windows_events.PipeServer": [],
    "asyncio.windows_events.PipeServer.__init__": [
        "asyncio.windows_events.PipeServer._server_pipe_handle"
    ],
    "asyncio.windows_events.PipeServer._server_pipe_handle": [
        "asyncio.windows_events.PipeServer.closed",
        "_winapi.CreateNamedPipe",
        "asyncio.windows_utils.PipeHandle.__init__",
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.windows_events.PipeServer._get_unconnected_pipe": [
        "asyncio.windows_events.PipeServer._server_pipe_handle"
    ],
    "asyncio.windows_events.PipeServer.closed": [],
    "_winapi.CreateNamedPipe": [],
    "asyncio.windows_utils.PipeHandle.__init__": [],
    "asyncio.windows_events.PipeServer.close": [
        "_weakrefset.WeakSet.clear",
        "_weakrefset.WeakSet.__iter__"
    ],
    "asyncio.windows_events._WindowsSelectorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop.__init__": [
        "asyncio.windows_events.IocpProactor.__init__",
        "<builtin>.super"
    ],
    "asyncio.windows_events.IocpProactor.__init__": [
        "_overlapped.CreateIoCompletionPort"
    ],
    "asyncio.windows_events.ProactorEventLoop.run_forever": [
        "<builtin>.super"
    ],
    "asyncio.windows_events.ProactorEventLoop.create_pipe_connection": [
        "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport": [
        "asyncio.proactor_events._ProactorReadPipeTransport.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop.start_serving_pipe": [
        "asyncio.windows_events.PipeServer.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop.start_serving_pipe.loop_accept_pipe": [
        "asyncio.windows_events.PipeServer.closed",
        "_weakrefset.WeakSet.discard",
        "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport",
        "asyncio.windows_utils.PipeHandle.close",
        "asyncio.windows_utils.PipeHandle.fileno",
        "log.logger.warning",
        "asyncio.windows_events.PipeServer._get_unconnected_pipe"
    ],
    "asyncio.windows_utils.PipeHandle.fileno": [
        "<builtin>.ValueError"
    ],
    "log.logger.warning": [],
    "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport": [
        "base_subprocess.BaseSubprocessTransport.__init__",
        "base_subprocess.BaseSubprocessTransport.close",
        "base_subprocess.BaseSubprocessTransport._wait"
    ],
    "base_subprocess.BaseSubprocessTransport.__init__": [],
    "base_subprocess.BaseSubprocessTransport.close": [],
    "base_subprocess.BaseSubprocessTransport._wait": [],
    "asyncio.windows_events.IocpProactor": [],
    "_overlapped.CreateIoCompletionPort": [],
    "asyncio.windows_events.IocpProactor._check_closed": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.windows_events.IocpProactor.__repr__": [
        "<builtin>.len"
    ],
    "asyncio.windows_events.IocpProactor.set_loop": [],
    "asyncio.windows_events.IocpProactor.select": [
        "asyncio.windows_events.IocpProactor._poll"
    ],
    "asyncio.windows_events.IocpProactor._poll": [
        "<builtin>.ValueError",
        "_winapi.CloseHandle",
        "_overlapped.GetQueuedCompletionStatus"
    ],
    "asyncio.windows_events.IocpProactor._result": [],
    "asyncio.windows_events.IocpProactor.recv": [
        "<builtin>.isinstance",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._result"
    ],
    "asyncio.windows_events.IocpProactor._register_with_iocp": [
        "_weakrefset.WeakSet.add",
        "_overlapped.CreateIoCompletionPort"
    ],
    "_overlapped.Overlapped": [],
    "asyncio.windows_events.IocpProactor.recv.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "<builtin>.ConnectionResetError": [],
    "asyncio.windows_events.IocpProactor._register": [
        "asyncio.windows_events.IocpProactor.recv.finish_recv",
        "asyncio.windows_events._OverlappedFuture.__init__",
        "asyncio.windows_events.IocpProactor.sendto.finish_send",
        "asyncio.windows_events.IocpProactor._check_closed",
        "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe",
        "asyncio.windows_events._OverlappedFuture.set_exception",
        "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile",
        "asyncio.windows_events._OverlappedFuture.set_result",
        "asyncio.windows_events.IocpProactor.recv_into.finish_recv",
        "asyncio.windows_events.IocpProactor.connect.finish_connect",
        "asyncio.windows_events.IocpProactor.accept.finish_accept",
        "asyncio.windows_events.IocpProactor.recvfrom.finish_recv",
        "asyncio.windows_events.IocpProactor.send.finish_send"
    ],
    "asyncio.windows_events.IocpProactor.recv_into": [
        "<builtin>.isinstance",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._result"
    ],
    "asyncio.windows_events.IocpProactor.recv_into.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.recvfrom": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._result"
    ],
    "asyncio.windows_events.IocpProactor.recvfrom.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.sendto": [
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.sendto.finish_send": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.send": [
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "<builtin>.isinstance",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.send.finish_send": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.accept": [
        "asyncio.windows_events.IocpProactor._get_accept_socket",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor.accept.accept_coro",
        "tasks.ensure_future",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor._get_accept_socket": [],
    "asyncio.windows_events.IocpProactor.accept.finish_accept": [],
    "asyncio.windows_events.IocpProactor.accept.accept_coro": [],
    "tasks.ensure_future": [],
    "asyncio.windows_events.IocpProactor.connect": [
        "_overlapped.BindLocal",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.WSAConnect",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "_overlapped.WSAConnect": [],
    "_overlapped.BindLocal": [],
    "asyncio.windows_events.IocpProactor.connect.finish_connect": [],
    "asyncio.windows_events.IocpProactor.sendfile": [
        "msvcrt.get_osfhandle",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.accept_pipe": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._result"
    ],
    "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe": [],
    "asyncio.windows_events.IocpProactor.connect_pipe": [
        "<builtin>.min",
        "asyncio.windows_utils.PipeHandle.__init__",
        "tasks.sleep",
        "_overlapped.ConnectPipe"
    ],
    "_overlapped.ConnectPipe": [],
    "tasks.sleep": [],
    "asyncio.windows_events.IocpProactor.wait_for_handle": [
        "asyncio.windows_events.IocpProactor._wait_for_handle"
    ],
    "asyncio.windows_events.IocpProactor._wait_for_handle": [
        "asyncio.windows_events.IocpProactor._check_closed",
        "asyncio.windows_events._WaitHandleFuture.__init__",
        "asyncio.windows_events._WaitCancelFuture.__init__",
        "_overlapped.Overlapped",
        "_overlapped.RegisterWaitWithQueue"
    ],
    "_overlapped.RegisterWaitWithQueue": [],
    "asyncio.windows_events.IocpProactor._wait_for_handle.finish_wait_for_handle": [
        "asyncio.windows_events._BaseWaitHandleFuture._poll"
    ],
    "_overlapped.GetQueuedCompletionStatus": [],
    "asyncio.windows_events.IocpProactor._stop_serving": [
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.windows_events.IocpProactor.close": [
        "asyncio.windows_events.IocpProactor._poll",
        "<builtin>.list",
        "<builtin>.isinstance",
        "_winapi.CloseHandle",
        "log.logger.debug",
        "time.monotonic"
    ],
    "log.logger.debug": [],
    "asyncio.windows_events.IocpProactor.__del__": [
        "asyncio.windows_events.IocpProactor.close"
    ],
    "asyncio.windows_events._WindowsSubprocessTransport": [],
    "asyncio.windows_events._WindowsSubprocessTransport._start": [
        "asyncio.windows_events._WindowsSubprocessTransport._loop._proactor.wait_for_handle",
        "asyncio.windows_utils.Popen.__init__",
        "<builtin>.int"
    ],
    "asyncio.windows_utils.Popen.__init__": [
        "_winapi.CloseHandle",
        "msvcrt.open_osfhandle",
        "asyncio.windows_utils.PipeHandle.__init__",
        "<builtin>.super",
        "asyncio.windows_utils.pipe"
    ],
    "asyncio.windows_events._WindowsSubprocessTransport._start.callback": [
        "base_subprocess.BaseSubprocessTransport._process_exited",
        "subprocess.Popen.poll"
    ],
    "base_subprocess.BaseSubprocessTransport._process_exited": [],
    "asyncio.windows_events._WindowsSubprocessTransport._loop._proactor.wait_for_handle": [],
    "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [],
    "asyncio.windows_events.WindowsProactorEventLoopPolicy": [],
    "asyncio.proactor_events._set_socket_extra": [
        "transports._FlowControlMixin._loop.get_debug",
        "trsock.TransportSocket",
        "log.logger.warning"
    ],
    "trsock.TransportSocket": [],
    "transports._FlowControlMixin._loop.get_debug": [],
    "asyncio.proactor_events._ProactorBasePipeTransport": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.__init__": [
        "asyncio.proactor_events._ProactorSocketTransport._set_extra",
        "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol",
        "transports._FlowControlMixin._loop.call_soon",
        "asyncio.proactor_events._ProactorBasePipeTransport._set_extra",
        "<builtin>.super",
        "asyncio.proactor_events._ProactorDatagramTransport._set_extra"
    ],
    "asyncio.proactor_events._ProactorSocketTransport._set_extra": [
        "asyncio.proactor_events._set_socket_extra"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._set_extra": [],
    "asyncio.proactor_events._ProactorDatagramTransport._set_extra": [
        "asyncio.proactor_events._set_socket_extra"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol": [],
    "transports._FlowControlMixin._loop.call_soon": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.__repr__": [
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.get_protocol": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.is_closing": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.close": [
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.__del__": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error": [
        "<builtin>.isinstance",
        "log.logger.debug",
        "transports._FlowControlMixin._loop.call_exception_handler",
        "transports._FlowControlMixin._loop.get_debug",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "transports._FlowControlMixin._loop.call_exception_handler": [],
    "asyncio.proactor_events._ProactorBasePipeTransport._force_close": [
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._call_connection_lost": [
        "<builtin>.hasattr"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size": [
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport": [],
    "asyncio.proactor_events._ProactorReadPipeTransport.__init__": [
        "<builtin>.super",
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.is_reading": [],
    "asyncio.proactor_events._ProactorReadPipeTransport.pause_reading": [
        "log.logger.debug",
        "transports._FlowControlMixin._loop.get_debug"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.resume_reading": [
        "log.logger.debug",
        "transports._FlowControlMixin._loop.get_debug",
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._eof_received": [
        "log.logger.debug",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "transports._FlowControlMixin._loop.get_debug",
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._data_received": [
        "protocols._feed_data_to_buffered_proto",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "<builtin>.isinstance",
        "asyncio.proactor_events._ProactorReadPipeTransport._eof_received"
    ],
    "protocols._feed_data_to_buffered_proto": [],
    "asyncio.proactor_events._ProactorReadPipeTransport._loop_reading": [
        "asyncio.proactor_events._ProactorReadPipeTransport._loop._proactor.recv",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "log.logger.debug",
        "asyncio.proactor_events._ProactorReadPipeTransport._data_received",
        "transports._FlowControlMixin._loop.get_debug",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._loop._proactor.recv": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.write": [
        "transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.isinstance",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing",
        "log.logger.warning",
        "<builtin>.bytes",
        "<builtin>.RuntimeError",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.bytearray"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing": [
        "transports._FlowControlMixin._maybe_resume_protocol",
        "transports._FlowControlMixin._maybe_pause_protocol",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "transports._FlowControlMixin._loop.call_soon",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop._proactor.send",
        "<builtin>.len",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "transports._FlowControlMixin._maybe_pause_protocol": [],
    "transports._FlowControlMixin._maybe_resume_protocol": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop._proactor.send": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.can_write_eof": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.write_eof": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.abort": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._make_empty_waiter": [
        "transports._FlowControlMixin._loop.create_future",
        "<builtin>.RuntimeError"
    ],
    "transports._FlowControlMixin._loop.create_future": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._reset_empty_waiter": [],
    "asyncio.proactor_events._ProactorWritePipeTransport": [],
    "asyncio.proactor_events._ProactorWritePipeTransport.__init__": [
        "<builtin>.super",
        "asyncio.proactor_events._ProactorWritePipeTransport._loop._proactor.recv"
    ],
    "asyncio.proactor_events._ProactorWritePipeTransport._loop._proactor.recv": [],
    "asyncio.proactor_events._ProactorWritePipeTransport._pipe_closed": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close",
        "<builtin>.BrokenPipeError"
    ],
    "<builtin>.BrokenPipeError": [],
    "asyncio.proactor_events._ProactorDatagramTransport": [],
    "asyncio.proactor_events._ProactorDatagramTransport.__init__": [
        "<builtin>.super",
        "transports._FlowControlMixin._loop.call_soon",
        "collections.deque"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size": [
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.abort": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.sendto": [
        "transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.isinstance",
        "log.logger.warning",
        "asyncio.proactor_events._ProactorDatagramTransport._loop_writing",
        "<builtin>.bytes",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._loop_writing": [
        "transports._FlowControlMixin._maybe_resume_protocol",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "transports._FlowControlMixin._loop.call_soon",
        "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.send",
        "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.sendto"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.send": [],
    "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.sendto": [],
    "asyncio.proactor_events._ProactorDatagramTransport._loop_reading": [
        "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.recv",
        "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.recvfrom"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.recv": [],
    "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.recvfrom": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport.can_write_eof": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport.write_eof": [],
    "asyncio.proactor_events._ProactorSocketTransport": [],
    "asyncio.proactor_events._ProactorSocketTransport.__init__": [
        "<builtin>.super",
        "base_events._set_nodelay"
    ],
    "base_events._set_nodelay": [],
    "asyncio.proactor_events._ProactorSocketTransport.can_write_eof": [],
    "asyncio.proactor_events._ProactorSocketTransport.write_eof": [],
    "asyncio.proactor_events.BaseProactorEventLoop": [],
    "asyncio.proactor_events.BaseProactorEventLoop.__init__": [
        "log.logger.debug",
        "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe",
        "threading.main_thread",
        "threading.current_thread",
        "<builtin>.super"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe": [],
    "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport": [
        "asyncio.proactor_events._ProactorSocketTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport": [
        "sslproto.SSLProtocol",
        "asyncio.proactor_events._ProactorSocketTransport.__init__"
    ],
    "sslproto.SSLProtocol": [],
    "asyncio.proactor_events.BaseProactorEventLoop._make_datagram_transport": [
        "asyncio.proactor_events._ProactorDatagramTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_read_pipe_transport": [
        "asyncio.proactor_events._ProactorReadPipeTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_write_pipe_transport": [
        "asyncio.proactor_events._ProactorWritePipeTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop.close": [
        "base_events.BaseEventLoop.is_running",
        "base_events.BaseEventLoop.is_closed",
        "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures",
        "threading.main_thread",
        "<builtin>.RuntimeError",
        "threading.current_thread",
        "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe",
        "<builtin>.super"
    ],
    "base_events.BaseEventLoop.is_running": [],
    "base_events.BaseEventLoop.is_closed": [],
    "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures": [],
    "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_recv": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_recv_into": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_sendall": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_connect": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_accept": [],
    "asyncio.proactor_events.BaseProactorEventLoop._sock_sendfile_native": [
        "<builtin>.min",
        "exceptions.SendfileNotAvailableError"
    ],
    "exceptions.SendfileNotAvailableError": [],
    "asyncio.proactor_events.BaseProactorEventLoop._sendfile_native": [
        "base_events.BaseEventLoop.sock_sendfile"
    ],
    "base_events.BaseEventLoop.sock_sendfile": [],
    "asyncio.proactor_events.BaseProactorEventLoop._loop_self_reading": [
        "base_events.BaseEventLoop.call_exception_handler"
    ],
    "base_events.BaseEventLoop.call_exception_handler": [],
    "asyncio.proactor_events.BaseProactorEventLoop._write_to_self": [
        "log.logger.debug"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._start_serving": [
        "base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._start_serving.loop": [
        "base_events.BaseEventLoop.is_closed",
        "base_events.BaseEventLoop.call_exception_handler",
        "log.logger.debug",
        "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport",
        "trsock.TransportSocket",
        "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport"
    ],
    "base_events.BaseEventLoop.call_soon": [],
    "asyncio.proactor_events.BaseProactorEventLoop._process_events": [],
    "asyncio.proactor_events.BaseProactorEventLoop._stop_serving": [],
    "asyncio.windows_utils.pipe": [
        "_winapi.CloseHandle",
        "_winapi.CreateFile",
        "_winapi.ConnectNamedPipe",
        "<builtin>.next",
        "_winapi.CreateNamedPipe",
        "tempfile.mktemp"
    ],
    "tempfile.mktemp": [
        "tempfile._get_candidate_names",
        "posixpath.join",
        "<builtin>.range",
        "ntpath.join",
        "<builtin>.FileExistsError",
        "tempfile.gettempdir",
        "tempfile._exists",
        "<builtin>.next"
    ],
    "_winapi.CreateFile": [],
    "_winapi.ConnectNamedPipe": [],
    "asyncio.windows_utils.PipeHandle": [],
    "asyncio.windows_utils.PipeHandle.__repr__": [],
    "asyncio.windows_utils.PipeHandle.handle": [],
    "asyncio.windows_utils.PipeHandle.__del__": [
        "asyncio.windows_utils.PipeHandle.close"
    ],
    "asyncio.windows_utils.PipeHandle.__enter__": [],
    "asyncio.windows_utils.PipeHandle.__exit__": [
        "asyncio.windows_utils.PipeHandle.close"
    ],
    "asyncio.windows_utils.Popen": [],
    "tempfile._exists": [],
    "tempfile._infer_return_type": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "tempfile._sanitize_params": [
        "tempfile._infer_return_type",
        "tempfile.gettempdir",
        "tempfile.gettempdirb"
    ],
    "tempfile.gettempdir": [
        "tempfile._get_default_tempdir"
    ],
    "tempfile.gettempdirb": [
        "tempfile.gettempdir"
    ],
    "tempfile._RandomNameSequence": [],
    "tempfile._RandomNameSequence.rng": [
        "<builtin>.getattr",
        "random.Random.__init__"
    ],
    "tempfile._RandomNameSequence.__iter__": [],
    "tempfile._RandomNameSequence.__next__": [
        "<builtin>.range"
    ],
    "tempfile._candidate_tempdir_list": [
        "os.getenv"
    ],
    "tempfile._get_default_tempdir": [
        "posixpath.abspath",
        "io.open",
        "ntpath.abspath",
        "tempfile._candidate_tempdir_list",
        "posixpath.join",
        "<builtin>.range",
        "ntpath.join",
        "posixpath.isdir",
        "<builtin>.FileNotFoundError",
        "ntpath.isdir",
        "<builtin>.next"
    ],
    "tempfile._get_candidate_names": [],
    "tempfile._mkstemp_inner": [
        "posixpath.abspath",
        "ntpath.abspath",
        "tempfile._get_candidate_names",
        "posixpath.join",
        "<builtin>.range",
        "ntpath.join",
        "posixpath.isdir",
        "<builtin>.FileExistsError",
        "<builtin>.map",
        "sys.audit",
        "ntpath.isdir",
        "<builtin>.next"
    ],
    "tempfile.gettempprefix": [],
    "tempfile.gettempprefixb": [
        "tempfile.gettempprefix"
    ],
    "tempfile.mkstemp": [
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner"
    ],
    "tempfile.mkdtemp": [
        "tempfile._sanitize_params",
        "tempfile._get_candidate_names",
        "posixpath.join",
        "<builtin>.range",
        "ntpath.join",
        "posixpath.isdir",
        "<builtin>.FileExistsError",
        "<builtin>.map",
        "sys.audit",
        "ntpath.isdir",
        "<builtin>.next"
    ],
    "tempfile._TemporaryFileCloser": [],
    "tempfile._TemporaryFileCloser.__init__": [],
    "tempfile._TemporaryFileCloser.close": [],
    "tempfile._TemporaryFileCloser.__del__": [
        "tempfile._TemporaryFileCloser.close"
    ],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile._TemporaryFileWrapper.__init__": [
        "tempfile._TemporaryFileCloser.__init__"
    ],
    "tempfile._TemporaryFileWrapper.__getattr__": [
        "<builtin>.getattr",
        "functools.wraps",
        "<builtin>.isinstance",
        "_functools.partial",
        "<builtin>.setattr",
        "<builtin>.hasattr"
    ],
    "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper": [
        "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper"
    ],
    "tempfile._TemporaryFileWrapper.__enter__": [],
    "tempfile._TemporaryFileWrapper.__exit__": [
        "tempfile._TemporaryFileWrapper.close"
    ],
    "tempfile._TemporaryFileWrapper.close": [
        "tempfile._TemporaryFileCloser.close"
    ],
    "tempfile._TemporaryFileWrapper.__iter__": [],
    "tempfile.NamedTemporaryFile": [
        "tempfile._sanitize_params",
        "io.open",
        "tempfile._TemporaryFileWrapper.__init__",
        "tempfile._mkstemp_inner"
    ],
    "tempfile.TemporaryFile": [
        "tempfile._sanitize_params",
        "io.open",
        "tempfile._mkstemp_inner"
    ],
    "tempfile.SpooledTemporaryFile": [],
    "tempfile.SpooledTemporaryFile.__init__": [
        "io.TextIOWrapper",
        "io.BytesIO"
    ],
    "tempfile.SpooledTemporaryFile._check": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.rollover": [
        "tempfile.NamedTemporaryFile",
        "<builtin>.hasattr"
    ],
    "tempfile.SpooledTemporaryFile.__enter__": [
        "<builtin>.ValueError"
    ],
    "tempfile.SpooledTemporaryFile.__exit__": [],
    "tempfile.SpooledTemporaryFile.__iter__": [],
    "tempfile.SpooledTemporaryFile.close": [],
    "tempfile.SpooledTemporaryFile.closed": [],
    "tempfile.SpooledTemporaryFile.encoding": [],
    "tempfile.SpooledTemporaryFile.errors": [],
    "tempfile.SpooledTemporaryFile.fileno": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.flush": [],
    "tempfile.SpooledTemporaryFile.isatty": [],
    "tempfile.SpooledTemporaryFile.mode": [],
    "tempfile.SpooledTemporaryFile.name": [],
    "tempfile.SpooledTemporaryFile.newlines": [],
    "tempfile.SpooledTemporaryFile.read": [],
    "tempfile.SpooledTemporaryFile.readline": [],
    "tempfile.SpooledTemporaryFile.readlines": [],
    "tempfile.SpooledTemporaryFile.seek": [],
    "tempfile.SpooledTemporaryFile.softspace": [],
    "tempfile.SpooledTemporaryFile.tell": [],
    "tempfile.SpooledTemporaryFile.truncate": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.write": [
        "tempfile.SpooledTemporaryFile._check"
    ],
    "tempfile.SpooledTemporaryFile.writelines": [
        "tempfile.SpooledTemporaryFile._check"
    ],
    "tempfile.TemporaryDirectory": [],
    "tempfile.TemporaryDirectory.__init__": [
        "tempfile.mkdtemp",
        "weakref.finalize.__init__"
    ],
    "tempfile.TemporaryDirectory._rmtree": [
        "shutil.rmtree"
    ],
    "tempfile.TemporaryDirectory._rmtree.onerror.resetperms": [],
    "tempfile.TemporaryDirectory._cleanup": [
        "warnings.warn",
        "tempfile.TemporaryDirectory._rmtree"
    ],
    "tempfile.TemporaryDirectory.__repr__": [],
    "tempfile.TemporaryDirectory.__enter__": [],
    "tempfile.TemporaryDirectory.__exit__": [
        "tempfile.TemporaryDirectory.cleanup"
    ],
    "tempfile.TemporaryDirectory.cleanup": [
        "weakref.finalize.detach",
        "tempfile.TemporaryDirectory._rmtree"
    ],
    "unittest.case.SkipTest": [],
    "unittest.case._ShouldStop": [],
    "unittest.case._UnexpectedSuccess": [],
    "unittest.case._Outcome": [
        "contextlib.contextmanager"
    ],
    "unittest.case._Outcome.__init__": [
        "<builtin>.hasattr"
    ],
    "unittest.case._Outcome.testPartExecutor": [
        "sys.exc_info",
        "<builtin>.str"
    ],
    "unittest.case._id": [],
    "unittest.case.addModuleCleanup": [],
    "unittest.case.skip": [
        "unittest.case.skip.decorator",
        "<builtin>.isinstance"
    ],
    "unittest.case.skip.decorator": [
        "functools.wraps",
        "<builtin>.isinstance",
        "_functools.partial"
    ],
    "unittest.case.skip.decorator.skip_wrapper": [],
    "unittest.case.skipIf": [
        "unittest.case.skip"
    ],
    "unittest.case.skipUnless": [
        "unittest.case.skip"
    ],
    "unittest.case.expectedFailure": [],
    "unittest.case._is_subtype": [
        "unittest.case._is_subtype",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.issubclass"
    ],
    "unittest.case._BaseTestCaseContext": [],
    "unittest.case._BaseTestCaseContext.__init__": [],
    "unittest.case._BaseTestCaseContext._raiseFailure": [],
    "unittest.case._AssertRaisesBaseContext": [],
    "unittest.case._AssertRaisesBaseContext.__init__": [
        "re.compile",
        "unittest.case._BaseTestCaseContext.__init__"
    ],
    "unittest.case._AssertRaisesBaseContext.handle": [
        "unittest.case._is_subtype",
        "<builtin>.iter",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.next"
    ],
    "unittest.case._AssertRaisesContext": [],
    "unittest.case._AssertRaisesContext.__enter__": [],
    "unittest.case._AssertRaisesContext.__exit__": [
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "traceback.clear_frames",
        "<builtin>.str",
        "<builtin>.issubclass"
    ],
    "unittest.case._AssertWarnsContext": [],
    "unittest.case._AssertWarnsContext.__enter__": [
        "<builtin>.getattr",
        "sys.modules.values",
        "warnings.catch_warnings.__enter__"
    ],
    "sys.modules.values": [],
    "unittest.case._AssertWarnsContext.__exit__": [
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "warnings.catch_warnings.__exit__",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "unittest.case._CapturingHandler": [],
    "unittest.case._CapturingHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "unittest.case._CapturingHandler.flush": [],
    "unittest.case._AssertLogsContext": [],
    "unittest.case._AssertLogsContext.__init__": [
        "unittest.case._BaseTestCaseContext.__init__"
    ],
    "unittest.case._AssertLogsContext.__enter__": [
        "<builtin>.isinstance",
        "logging.Logger.setLevel",
        "unittest.case._CapturingHandler.__init__",
        "logging.getLogger",
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__"
    ],
    "unittest.case._AssertLogsContext.__exit__": [
        "logging.Logger.setLevel",
        "<builtin>.len",
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "logging.getLevelName"
    ],
    "unittest.case._OrderedChainMap": [],
    "unittest.case._OrderedChainMap.__iter__": [
        "<builtin>.set"
    ],
    "unittest.case.TestCase": [
        "contextlib.contextmanager",
        "unittest.case.TestCase._deprecate"
    ],
    "unittest.case.TestCase.addTypeEqualityFunc": [],
    "unittest.case.TestCase.addClassCleanup": [],
    "unittest.case.TestCase.setUpClass": [],
    "unittest.case.TestCase.tearDownClass": [],
    "unittest.case.TestCase.countTestCases": [],
    "unittest.case.TestCase.defaultTestResult": [
        "unittest.result.TestResult.__init__"
    ],
    "unittest.result.TestResult.__init__": [],
    "unittest.case.TestCase.shortDescription": [],
    "unittest.case.TestCase.id": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase.__eq__": [
        "<builtin>.type"
    ],
    "unittest.case.TestCase.__hash__": [
        "<builtin>.hash",
        "<builtin>.type"
    ],
    "unittest.case.TestCase.__str__": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase.__repr__": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase._addSkip": [
        "<builtin>.getattr",
        "warnings.warn",
        "unittest.result.TestResult.addSuccess",
        "unittest.runner.TextTestResult.addSuccess"
    ],
    "unittest.result.TestResult.addSuccess": [],
    "unittest.case.TestCase.subTest": [
        "collections.ChainMap.__init__",
        "collections.ChainMap.new_child",
        "unittest.case._Outcome.testPartExecutor",
        "unittest.case._SubTest.__init__"
    ],
    "unittest.case._SubTest.__init__": [
        "<builtin>.super"
    ],
    "unittest.case.TestCase._feedErrorsToResult": [
        "unittest.result.TestResult.addFailure",
        "<builtin>.isinstance",
        "unittest.runner.TextTestResult.addError",
        "unittest.runner.TextTestResult.addFailure",
        "<builtin>.issubclass",
        "unittest.result.TestResult.addError",
        "unittest.result.TestResult.addSubTest"
    ],
    "unittest.result.TestResult.addSubTest": [
        "<builtin>.getattr",
        "unittest.result.TestResult.stop",
        "unittest.result.TestResult._exc_info_to_string",
        "<builtin>.issubclass"
    ],
    "unittest.result.TestResult.addFailure": [
        "unittest.result.TestResult._exc_info_to_string"
    ],
    "unittest.result.TestResult.addError": [
        "unittest.result.TestResult._exc_info_to_string"
    ],
    "unittest.case.TestCase._addExpectedFailure": [
        "unittest.runner.TextTestResult.addSuccess",
        "warnings.warn",
        "unittest.result.TestResult.addSuccess"
    ],
    "unittest.case.TestCase._addUnexpectedSuccess": [
        "warnings.warn",
        "sys.exc_info",
        "unittest.result.TestResult.addFailure",
        "unittest.runner.TextTestResult.addFailure"
    ],
    "unittest.case.TestCase._callSetUp": [
        "unittest.case.TestCase.setUp"
    ],
    "unittest.case.TestCase._callTestMethod": [],
    "unittest.case.TestCase._callTearDown": [
        "unittest.case.TestCase.tearDown"
    ],
    "unittest.case.TestCase._callCleanup": [],
    "unittest.case.TestCase.run": [
        "<builtin>.getattr",
        "unittest.case.TestCase._addUnexpectedSuccess",
        "unittest.case.TestCase._callTestMethod",
        "unittest.runner.TextTestResult.addSuccess",
        "unittest.case.TestCase.defaultTestResult",
        "unittest.case.TestCase._callSetUp",
        "unittest.case.TestCase._callTearDown",
        "unittest.case.TestCase.doCleanups",
        "unittest.result.TestResult.stopTest",
        "unittest.case.TestCase._addSkip",
        "unittest.case._Outcome.testPartExecutor",
        "unittest.case._Outcome.__init__",
        "unittest.result.TestResult.startTest",
        "unittest.runner.TextTestResult.startTest",
        "unittest.result.TestResult.addSuccess",
        "unittest.case.TestCase._addExpectedFailure",
        "unittest.case.TestCase._feedErrorsToResult"
    ],
    "unittest.result.TestResult.startTest": [
        "unittest.result.TestResult._setupStdout"
    ],
    "unittest.result.TestResult.stopTest": [
        "unittest.result.TestResult._restoreStdout"
    ],
    "unittest.case.TestCase.doCleanups": [
        "unittest.case._Outcome.__init__",
        "unittest.case.TestCase._callCleanup"
    ],
    "unittest.case.TestCase.doClassCleanups": [
        "sys.exc_info"
    ],
    "unittest.case.TestCase.__call__": [
        "unittest.case.TestCase.run"
    ],
    "unittest.case.TestCase.debug": [
        "<builtin>.getattr",
        "unittest.case.TestCase.setUp",
        "unittest.case.TestCase.tearDown"
    ],
    "unittest.case.TestCase.fail": [],
    "unittest.case.TestCase.assertFalse": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.util.safe_repr": [
        "<builtin>.len",
        "<builtin>.repr"
    ],
    "unittest.case.TestCase._formatMessage": [
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase.assertTrue": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertRaises": [
        "unittest.case._AssertRaisesBaseContext.__init__",
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertWarns": [
        "unittest.case._AssertRaisesBaseContext.__init__",
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertLogs": [
        "unittest.case._AssertLogsContext.__init__"
    ],
    "unittest.case.TestCase._getAssertEqualityFunc": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "unittest.case.TestCase._baseAssertEqual": [
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.util._common_shorten_repr": [
        "<builtin>.max",
        "<builtin>.tuple",
        "<builtin>.map",
        "unittest.util._shorten",
        "genericpath.commonprefix",
        "<builtin>.len"
    ],
    "unittest.case.TestCase.assertEqual": [
        "unittest.case.TestCase._getAssertEqualityFunc",
        "unittest.case.TestCase._baseAssertEqual"
    ],
    "unittest.case.TestCase.assertNotEqual": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertAlmostEqual": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.abs",
        "<builtin>.TypeError",
        "<builtin>.round"
    ],
    "unittest.case.TestCase.assertNotAlmostEqual": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.abs",
        "<builtin>.TypeError",
        "<builtin>.round"
    ],
    "unittest.case.TestCase.assertSequenceEqual": [
        "unittest.util.safe_repr",
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase._truncateMessage",
        "<builtin>.min",
        "difflib.ndiff",
        "<builtin>.range",
        "unittest.case.TestCase.fail",
        "<builtin>.len",
        "unittest.util._common_shorten_repr"
    ],
    "difflib.ndiff": [
        "difflib.Differ.compare",
        "difflib.Differ.__init__"
    ],
    "unittest.case.TestCase._truncateMessage": [
        "<builtin>.len"
    ],
    "unittest.case.TestCase.assertListEqual": [
        "unittest.case.TestCase.assertSequenceEqual"
    ],
    "unittest.case.TestCase.assertTupleEqual": [
        "unittest.case.TestCase.assertSequenceEqual"
    ],
    "unittest.case.TestCase.assertSetEqual": [
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage",
        "<builtin>.repr"
    ],
    "unittest.case.TestCase.assertIn": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertNotIn": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIs": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIsNot": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertDictEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase._truncateMessage",
        "difflib.ndiff",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase.assertIsInstance",
        "unittest.util._common_shorten_repr"
    ],
    "unittest.case.TestCase.assertIsInstance": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertDictContainsSubset": [
        "warnings.warn",
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertCountEqual": [
        "<builtin>.list",
        "unittest.util._count_diff_hashable",
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase._truncateMessage",
        "unittest.util._count_diff_all_purpose",
        "collections.Counter.__init__",
        "unittest.case.TestCase.fail"
    ],
    "unittest.util._count_diff_all_purpose": [
        "<builtin>.list",
        "<builtin>.object",
        "<builtin>.range",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "unittest.util._count_diff_hashable": [
        "collections.Counter.__init__"
    ],
    "unittest.case.TestCase.assertMultiLineEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase._truncateMessage",
        "difflib.ndiff",
        "unittest.case.TestCase._baseAssertEqual",
        "unittest.case.TestCase.fail",
        "<builtin>.len",
        "unittest.case.TestCase.assertIsInstance",
        "unittest.util._common_shorten_repr"
    ],
    "unittest.case.TestCase.assertLess": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertLessEqual": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertGreater": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertGreaterEqual": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIsNone": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIsNotNone": [
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertNotIsInstance": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertRaisesRegex": [
        "unittest.case._AssertRaisesBaseContext.__init__",
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertWarnsRegex": [
        "unittest.case._AssertRaisesBaseContext.__init__",
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertRegex": [
        "re.compile",
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertNotRegex": [
        "re.compile",
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase._deprecate": [],
    "unittest.case.TestCase._deprecate.deprecated_func": [
        "warnings.warn",
        "unittest.case.TestCase.__init__"
    ],
    "unittest.case.FunctionTestCase": [],
    "unittest.case.FunctionTestCase.__init__": [
        "<builtin>.super"
    ],
    "unittest.case.FunctionTestCase.setUp": [],
    "unittest.case.FunctionTestCase.tearDown": [],
    "unittest.case.FunctionTestCase.runTest": [],
    "unittest.case.FunctionTestCase.id": [],
    "unittest.case.FunctionTestCase.__eq__": [
        "<builtin>.isinstance"
    ],
    "unittest.case.FunctionTestCase.__hash__": [
        "<builtin>.hash",
        "<builtin>.type"
    ],
    "unittest.case.FunctionTestCase.__str__": [
        "unittest.util.strclass"
    ],
    "unittest.case.FunctionTestCase.__repr__": [
        "unittest.util.strclass"
    ],
    "unittest.case.FunctionTestCase.shortDescription": [],
    "unittest.case._SubTest": [],
    "unittest.case._SubTest.runTest": [
        "<builtin>.NotImplementedError"
    ],
    "unittest.case._SubTest._subDescription": [
        "weakref.WeakKeyDictionary.items",
        "weakref.WeakValueDictionary.items",
        "_collections_abc.Mapping.items"
    ],
    "unittest.case._SubTest.id": [
        "unittest.case.TestCase.id",
        "unittest.case._SubTest._subDescription",
        "doctest.DocFileCase.id"
    ],
    "unittest.case._SubTest.shortDescription": [
        "unittest.case.TestCase.shortDescription"
    ],
    "unittest.case._SubTest.__str__": [
        "unittest.case._SubTest._subDescription"
    ],
    "unittest.util._shorten": [
        "<builtin>.len"
    ],
    "unittest.util.sorted_list_difference": [],
    "unittest.util.unorderable_list_difference": [],
    "unittest.util.three_way_cmp": [],
    "difflib._calculate_ratio": [],
    "difflib.SequenceMatcher": [],
    "difflib.SequenceMatcher.__init__": [
        "difflib.SequenceMatcher.set_seqs"
    ],
    "difflib.SequenceMatcher.set_seqs": [
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.set_seq2"
    ],
    "difflib.SequenceMatcher.set_seq1": [],
    "difflib.SequenceMatcher.set_seq2": [
        "difflib.SequenceMatcher.__chain_b"
    ],
    "difflib.SequenceMatcher.__chain_b": [
        "<builtin>.len",
        "<builtin>.set",
        "difflib.IS_CHARACTER_JUNK",
        "<builtin>.enumerate"
    ],
    "difflib.IS_CHARACTER_JUNK": [],
    "difflib.SequenceMatcher.find_longest_match": [
        "<builtin>.range"
    ],
    "difflib.SequenceMatcher.get_matching_blocks": [
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.list",
        "difflib.SequenceMatcher.find_longest_match"
    ],
    "difflib.SequenceMatcher.get_opcodes": [
        "difflib.SequenceMatcher.get_matching_blocks"
    ],
    "difflib.SequenceMatcher.get_grouped_opcodes": [
        "<builtin>.min",
        "difflib.SequenceMatcher.get_opcodes",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "difflib.SequenceMatcher.ratio": [
        "difflib.SequenceMatcher.get_matching_blocks",
        "<builtin>.len",
        "<builtin>.sum",
        "difflib._calculate_ratio"
    ],
    "difflib.SequenceMatcher.quick_ratio": [
        "<builtin>.len",
        "difflib._calculate_ratio"
    ],
    "difflib.SequenceMatcher.real_quick_ratio": [
        "<builtin>.len",
        "<builtin>.min",
        "difflib._calculate_ratio"
    ],
    "difflib.get_close_matches": [
        "difflib.SequenceMatcher.ratio",
        "heapq.nlargest",
        "difflib.SequenceMatcher.quick_ratio",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.set_seq1",
        "<builtin>.ValueError",
        "difflib.SequenceMatcher.real_quick_ratio",
        "difflib.SequenceMatcher.set_seq2"
    ],
    "difflib._keep_original_ws": [
        "<builtin>.zip"
    ],
    "difflib.Differ": [],
    "difflib.Differ._fancy_replace": [
        "difflib.SequenceMatcher.get_opcodes",
        "difflib.Differ._fancy_helper",
        "difflib.SequenceMatcher.ratio",
        "difflib.Differ._qformat",
        "<builtin>.range",
        "difflib.Differ._plain_replace",
        "difflib.SequenceMatcher.quick_ratio",
        "difflib.SequenceMatcher.set_seqs",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.set_seq1",
        "<builtin>.ValueError",
        "difflib.SequenceMatcher.real_quick_ratio",
        "difflib.SequenceMatcher.set_seq2"
    ],
    "difflib.Differ._dump": [
        "<builtin>.range"
    ],
    "difflib.Differ._plain_replace": [
        "difflib.Differ._dump"
    ],
    "difflib.Differ._fancy_helper": [
        "difflib.Differ._dump",
        "difflib.Differ._fancy_replace"
    ],
    "difflib.Differ._qformat": [
        "difflib._keep_original_ws"
    ],
    "difflib.IS_LINE_JUNK": [],
    "difflib._format_range_unified": [],
    "difflib._check_types": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "difflib._format_range_context": [],
    "difflib.diff_bytes": [
        "<builtin>.map",
        "<builtin>.list",
        "difflib.diff_bytes.decode"
    ],
    "difflib.diff_bytes.decode": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "difflib._mdiff._make_line": [
        "<builtin>.reversed"
    ],
    "difflib._mdiff._make_line.record_sub_info": [],
    "difflib._mdiff._line_iterator": [
        "<builtin>.len",
        "<builtin>.next",
        "difflib._mdiff._make_line"
    ],
    "difflib._mdiff._line_pair_iterator": [
        "<builtin>.len",
        "<builtin>.next",
        "difflib._mdiff._line_iterator"
    ],
    "difflib.HtmlDiff": [],
    "difflib.HtmlDiff.__init__": [],
    "difflib.HtmlDiff.make_file": [
        "<builtin>.dict",
        "difflib.HtmlDiff.make_table"
    ],
    "difflib.HtmlDiff.make_table": [
        "difflib.HtmlDiff._make_prefix",
        "difflib.HtmlDiff._convert_flags",
        "<builtin>.range",
        "<builtin>.dict",
        "difflib._mdiff",
        "difflib.HtmlDiff._line_wrapper",
        "difflib.HtmlDiff._tab_newline_replace",
        "difflib.HtmlDiff._collect_lines",
        "<builtin>.len"
    ],
    "difflib.HtmlDiff._tab_newline_replace": [
        "difflib.HtmlDiff._tab_newline_replace.expand_tabs"
    ],
    "difflib.HtmlDiff._tab_newline_replace.expand_tabs": [],
    "difflib.HtmlDiff._split_line": [
        "<builtin>.len",
        "difflib.HtmlDiff._split_line"
    ],
    "difflib.HtmlDiff._line_wrapper": [
        "difflib.HtmlDiff._split_line"
    ],
    "difflib.HtmlDiff._collect_lines": [
        "difflib.HtmlDiff._format_line"
    ],
    "difflib.HtmlDiff._format_line": [],
    "difflib.HtmlDiff._make_prefix": [],
    "difflib.HtmlDiff._convert_flags": [
        "<builtin>.len",
        "<builtin>.max",
        "<builtin>.enumerate"
    ],
    "difflib.restore": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "inspect.isdatadescriptor": [
        "inspect.isclass",
        "inspect.isfunction",
        "<builtin>.hasattr",
        "inspect.ismethod",
        "<builtin>.type"
    ],
    "inspect.ismemberdescriptor": [
        "<builtin>.isinstance"
    ],
    "inspect.isgetsetdescriptor": [
        "<builtin>.isinstance"
    ],
    "inspect._has_code_flag": [
        "inspect.isfunction",
        "<builtin>.bool",
        "functools._unwrap_partial",
        "inspect.ismethod"
    ],
    "inspect.isgeneratorfunction": [
        "inspect._has_code_flag"
    ],
    "inspect.iscoroutinefunction": [
        "inspect._has_code_flag"
    ],
    "inspect.isasyncgenfunction": [
        "inspect._has_code_flag"
    ],
    "inspect.isasyncgen": [
        "<builtin>.isinstance"
    ],
    "inspect.isgenerator": [
        "<builtin>.isinstance"
    ],
    "inspect.iscoroutine": [
        "<builtin>.isinstance"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.isabstract": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "inspect.getmembers": [
        "<builtin>.getattr",
        "inspect.isclass",
        "<builtin>.isinstance",
        "<builtin>.dir",
        "inspect.getmro",
        "<builtin>.set"
    ],
    "inspect.getmro": [],
    "inspect.getmembers.<lambda1>": [],
    "inspect.classify_class_attrs": [
        "<builtin>.getattr",
        "inspect.isroutine",
        "<builtin>.isinstance",
        "<builtin>.Exception",
        "<builtin>.tuple",
        "<builtin>.dir",
        "inspect.getmro",
        "<builtin>.set",
        "<builtin>.type"
    ],
    "<builtin>.Exception": [],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "<builtin>.hasattr"
    ],
    "inspect._signature_from_callable.<lambda1>": [
        "<builtin>.hasattr"
    ],
    "sys.getrecursionlimit": [],
    "inspect.indentsize": [
        "<builtin>.len"
    ],
    "inspect._findclass": [
        "<builtin>.getattr",
        "inspect.isclass",
        "sys.modules.get"
    ],
    "inspect._finddoc": [
        "<builtin>.getattr",
        "inspect.isclass",
        "inspect.isbuiltin",
        "<builtin>.isinstance",
        "inspect.ismemberdescriptor",
        "inspect.isdatadescriptor",
        "inspect.isfunction",
        "inspect._findclass",
        "inspect.ismethoddescriptor",
        "inspect.ismethod"
    ],
    "inspect.getdoc": [
        "inspect.cleandoc",
        "<builtin>.isinstance",
        "inspect._finddoc"
    ],
    "inspect.cleandoc": [
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.min"
    ],
    "inspect.getmodulename": [
        "<builtin>.len",
        "posixpath.basename",
        "ntpath.basename"
    ],
    "inspect.getabsfile": [
        "posixpath.abspath",
        "ntpath.abspath",
        "ntpath.normcase",
        "inspect.getsourcefile",
        "posixpath.normcase",
        "inspect.getfile"
    ],
    "sys.modules.copy": [],
    "inspect.findsource": [
        "inspect.iscode",
        "inspect.ismodule",
        "inspect.isclass",
        "<builtin>.OSError",
        "<builtin>.range",
        "linecache.checkcache",
        "inspect.getmodule",
        "re.compile",
        "inspect.getsourcefile",
        "linecache.getlines",
        "inspect.isfunction",
        "inspect.istraceback",
        "inspect.getfile",
        "<builtin>.len",
        "inspect.isframe",
        "<builtin>.hasattr",
        "inspect.ismethod"
    ],
    "inspect.getcomments": [
        "<builtin>.len",
        "inspect.ismodule",
        "inspect.indentsize",
        "inspect.findsource"
    ],
    "inspect.EndOfBlock": [],
    "inspect.BlockFinder": [],
    "inspect.BlockFinder.__init__": [],
    "inspect.BlockFinder.tokeneater": [],
    "inspect.getblock": [
        "<builtin>.iter",
        "inspect.BlockFinder.tokeneater",
        "inspect.BlockFinder.__init__"
    ],
    "inspect.getsourcelines": [
        "inspect.ismodule",
        "inspect.unwrap",
        "inspect.getblock",
        "inspect.findsource",
        "inspect.istraceback",
        "inspect.isframe"
    ],
    "inspect.getsource": [
        "inspect.getsourcelines"
    ],
    "inspect.walktree": [
        "operator.attrgetter.__init__",
        "inspect.walktree"
    ],
    "inspect.getclasstree": [
        "inspect.walktree"
    ],
    "inspect.getargs": [
        "inspect.iscode",
        "<builtin>.list",
        "<builtin>.TypeError"
    ],
    "inspect.getargspec": [
        "warnings.warn",
        "<builtin>.ValueError",
        "inspect.getfullargspec"
    ],
    "inspect.getfullargspec": [
        "inspect._signature_from_callable",
        "<builtin>.TypeError",
        "sys.platform.append"
    ],
    "inspect._signature_from_callable": [
        "inspect.unwrap",
        "inspect._signature_get_partial",
        "<builtin>.isinstance",
        "inspect._signature_is_functionlike",
        "inspect._signature_is_builtin",
        "inspect._signature_from_builtin",
        "inspect._signature_from_function",
        "inspect._signature_get_user_defined_method",
        "inspect._signature_from_callable",
        "inspect._signature_fromstr",
        "<builtin>.tuple",
        "inspect.isfunction",
        "inspect.Signature.from_callable",
        "<builtin>.TypeError",
        "inspect._signature_bound_method",
        "<builtin>.ValueError",
        "<builtin>.callable",
        "<builtin>.type"
    ],
    "sys.platform.append": [],
    "inspect.getargvalues": [
        "inspect.getargs"
    ],
    "inspect.formatannotation": [
        "<builtin>.getattr",
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "inspect.formatannotationrelativeto": [
        "<builtin>.getattr"
    ],
    "inspect.formatannotationrelativeto._formatannotation": [
        "inspect.formatannotation"
    ],
    "inspect.formatargspec.formatargandannotation": [
        "inspect.formatannotation"
    ],
    "inspect.<lambda3>": [],
    "inspect.<lambda1>": [],
    "inspect.<lambda2>": [],
    "inspect.<lambda4>": [],
    "inspect.formatargvalues": [
        "inspect.<lambda7>",
        "inspect.<lambda6>",
        "<builtin>.range",
        "inspect.formatargvalues.convert",
        "<builtin>.len",
        "inspect.<lambda5>"
    ],
    "inspect.formatargvalues.convert": [
        "inspect.<lambda7>"
    ],
    "inspect.<lambda7>": [],
    "inspect.<lambda5>": [],
    "inspect.<lambda6>": [],
    "inspect._missing_arguments": [
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.TypeError"
    ],
    "inspect._too_many": [
        "<builtin>.len",
        "<builtin>.TypeError",
        "<builtin>.str"
    ],
    "inspect.getcallargs": [
        "inspect._too_many",
        "inspect._missing_arguments",
        "<builtin>.min",
        "<builtin>.range",
        "inspect.getfullargspec",
        "<builtin>.tuple",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.len",
        "inspect.ismethod"
    ],
    "inspect.getclosurevars": [
        "inspect.ismodule",
        "<builtin>.zip",
        "inspect.isfunction",
        "<builtin>.set",
        "<builtin>.TypeError",
        "inspect.ismethod"
    ],
    "inspect.getframeinfo": [
        "inspect.findsource",
        "<builtin>.max",
        "<builtin>.min",
        "inspect.istraceback",
        "inspect.getsourcefile",
        "<builtin>.TypeError",
        "inspect.getfile",
        "<builtin>.len",
        "inspect.isframe"
    ],
    "inspect.getlineno": [],
    "inspect.getouterframes": [
        "inspect.getframeinfo"
    ],
    "inspect.getinnerframes": [
        "inspect.getframeinfo"
    ],
    "inspect.currentframe": [
        "<builtin>.hasattr",
        "sys._getframe"
    ],
    "inspect.stack": [
        "sys._getframe",
        "inspect.getouterframes"
    ],
    "inspect.trace": [
        "inspect.getinnerframes",
        "sys.exc_info"
    ],
    "inspect._static_getmro": [],
    "inspect._check_instance": [],
    "inspect._check_class": [
        "inspect._static_getmro",
        "inspect._shadowed_dict",
        "<builtin>.type"
    ],
    "inspect._shadowed_dict": [
        "inspect._static_getmro",
        "<builtin>.type"
    ],
    "inspect._is_type": [
        "inspect._static_getmro"
    ],
    "inspect.getattr_static": [
        "inspect._shadowed_dict",
        "<builtin>.AttributeError",
        "inspect._static_getmro",
        "inspect._check_instance",
        "inspect._is_type",
        "<builtin>.type",
        "inspect._check_class"
    ],
    "inspect.getgeneratorstate": [],
    "inspect.getgeneratorlocals": [
        "<builtin>.getattr",
        "<builtin>.TypeError",
        "inspect.isgenerator"
    ],
    "inspect.getcoroutinestate": [],
    "inspect.getcoroutinelocals": [
        "<builtin>.getattr"
    ],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr",
        "<builtin>.isinstance"
    ],
    "inspect._signature_get_partial": [
        "_collections.OrderedDict.move_to_end",
        "_collections.OrderedDict.pop",
        "_collections.OrderedDict.values",
        "<builtin>.ValueError",
        "_collections.OrderedDict"
    ],
    "_collections.OrderedDict.pop": [],
    "_collections.OrderedDict.move_to_end": [],
    "_collections.OrderedDict.values": [],
    "inspect._signature_bound_method": [
        "<builtin>.ValueError",
        "<builtin>.tuple"
    ],
    "inspect._signature_is_builtin": [
        "inspect.ismethoddescriptor",
        "inspect.isbuiltin",
        "<builtin>.isinstance"
    ],
    "inspect._signature_is_functionlike": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "inspect.isclass",
        "<builtin>.isinstance"
    ],
    "inspect._signature_get_bound_param": [],
    "inspect._signature_strip_non_python_syntax": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "ast.parse": [
        "<builtin>.compile",
        "<builtin>.isinstance"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "inspect._signature_fromstr.wrap_value": [
        "<builtin>.eval",
        "<builtin>.isinstance",
        "<builtin>.RuntimeError",
        "<builtin>.type"
    ],
    "inspect._signature_fromstr.RewriteSymbolics": [],
    "inspect._signature_fromstr.RewriteSymbolics.visit_Attribute": [
        "<builtin>.RuntimeError",
        "inspect._signature_fromstr.wrap_value",
        "<builtin>.reversed",
        "<builtin>.isinstance"
    ],
    "inspect._signature_fromstr.RewriteSymbolics.visit_Name": [
        "inspect._signature_fromstr.wrap_value",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "inspect._signature_fromstr.p": [
        "ast.literal_eval",
        "inspect.Parameter.__init__",
        "inspect._signature_fromstr.parse_name"
    ],
    "ast.literal_eval": [
        "ast.literal_eval._convert",
        "ast.parse",
        "<builtin>.isinstance"
    ],
    "inspect.Parameter.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "itertools.zip_longest": [],
    "inspect.Signature.__init__": [
        "<builtin>.enumerate",
        "<builtin>.ValueError",
        "_collections.OrderedDict"
    ],
    "inspect._signature_from_builtin": [
        "<builtin>.getattr",
        "inspect._signature_is_builtin",
        "inspect._signature_fromstr",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "inspect._signature_from_function": [
        "<builtin>.getattr",
        "inspect._signature_is_functionlike",
        "inspect._signature_fromstr",
        "inspect.isfunction",
        "inspect.Signature.__init__",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.len",
        "inspect.Parameter.__init__"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._void": [],
    "inspect._empty": [],
    "inspect._ParameterKind": [],
    "inspect._ParameterKind.__str__": [],
    "inspect._ParameterKind.description": [],
    "inspect.Parameter": [],
    "inspect.Parameter.__reduce__": [
        "<builtin>.type"
    ],
    "inspect.Parameter.__setstate__": [],
    "inspect.Parameter.name": [],
    "inspect.Parameter.default": [],
    "inspect.Parameter.annotation": [],
    "inspect.Parameter.kind": [],
    "inspect.Parameter.replace": [
        "<builtin>.type"
    ],
    "inspect.Parameter.__str__": [
        "inspect.formatannotation",
        "<builtin>.repr"
    ],
    "inspect.Parameter.__repr__": [],
    "inspect.Parameter.__hash__": [
        "<builtin>.hash"
    ],
    "inspect.Parameter.__eq__": [
        "<builtin>.isinstance"
    ],
    "inspect.BoundArguments": [],
    "inspect.BoundArguments.__init__": [],
    "inspect.BoundArguments.signature": [],
    "inspect.BoundArguments.args": [
        "<builtin>.tuple"
    ],
    "inspect.BoundArguments.kwargs": [],
    "inspect.BoundArguments.apply_defaults": [
        "_collections.OrderedDict"
    ],
    "inspect.BoundArguments.__eq__": [
        "<builtin>.isinstance"
    ],
    "inspect.BoundArguments.__setstate__": [],
    "inspect.BoundArguments.__getstate__": [],
    "inspect.BoundArguments.__repr__": [
        "_collections.OrderedDict.items"
    ],
    "inspect.Signature": [],
    "inspect.Signature.from_function": [
        "warnings.warn",
        "inspect._signature_from_function"
    ],
    "inspect.Signature.from_builtin": [
        "inspect._signature_from_builtin",
        "warnings.warn"
    ],
    "inspect.Signature.parameters": [],
    "inspect.Signature.return_annotation": [],
    "inspect.Signature.replace": [
        "<builtin>.type"
    ],
    "inspect.Signature._hash_basis": [
        "<builtin>.tuple"
    ],
    "inspect.Signature.__hash__": [
        "<builtin>.frozenset",
        "<builtin>.hash",
        "inspect.Signature._hash_basis"
    ],
    "inspect.Signature.__eq__": [
        "inspect.Signature._hash_basis",
        "<builtin>.isinstance"
    ],
    "inspect.Signature._bind": [
        "<builtin>.iter",
        "<builtin>.tuple",
        "_collections.OrderedDict",
        "<builtin>.TypeError",
        "inspect.BoundArguments.__init__",
        "itertools.chain",
        "<builtin>.next"
    ],
    "inspect.Signature.bind": [],
    "inspect.Signature.bind_partial": [],
    "inspect.Signature.__reduce__": [
        "<builtin>.tuple",
        "<builtin>.type"
    ],
    "inspect.Signature.__setstate__": [],
    "inspect.Signature.__repr__": [],
    "inspect.Signature.__str__": [
        "inspect.formatannotation",
        "<builtin>.str"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.repr",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.ValueError"
    ],
    "ast.literal_eval._convert_signed_num": [
        "ast.literal_eval._convert_num",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert": [
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.zip",
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.dict",
        "ast.literal_eval._convert_num",
        "ast.literal_eval._convert_signed_num"
    ],
    "ast.dump": [
        "ast.dump._format",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "ast.dump._format": [
        "<builtin>.getattr",
        "ast.dump._format",
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "ast.copy_location": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.hasattr"
    ],
    "ast.fix_missing_locations": [
        "ast.fix_missing_locations._fix"
    ],
    "ast.fix_missing_locations._fix": [
        "ast.iter_child_nodes",
        "ast.fix_missing_locations._fix",
        "<builtin>.hasattr"
    ],
    "ast.iter_child_nodes": [
        "ast.iter_fields",
        "<builtin>.isinstance"
    ],
    "ast.increment_lineno": [
        "<builtin>.getattr",
        "ast.walk"
    ],
    "ast.iter_fields": [
        "<builtin>.getattr"
    ],
    "ast._splitlines_no_ff": [
        "<builtin>.len"
    ],
    "ast._pad_whitespace": [],
    "ast.get_source_segment": [
        "ast._pad_whitespace",
        "ast._splitlines_no_ff"
    ],
    "ast.NodeVisitor": [],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ast.NodeVisitor.generic_visit": [
        "ast.iter_fields",
        "ast.NodeVisitor.visit",
        "<builtin>.isinstance"
    ],
    "ast.NodeTransformer": [],
    "ast.NodeTransformer.generic_visit": [
        "ast.NodeVisitor.visit",
        "<builtin>.isinstance",
        "<builtin>.setattr",
        "ast.iter_fields",
        "<builtin>.delattr"
    ],
    "ast._getter": [],
    "ast._setter": [],
    "ast._ABC": [],
    "ast._ABC.__instancecheck__": [
        "<builtin>.isinstance"
    ],
    "ast._new": [],
    "ast.Num": [],
    "ast.Str": [],
    "ast.Bytes": [],
    "ast.NameConstant": [],
    "ast.Ellipsis": [],
    "ast.Ellipsis.__new__": [],
    "dis._try_compile": [
        "<builtin>.compile"
    ],
    "dis.dis": [
        "<builtin>.isinstance",
        "dis.dis",
        "dis._disassemble_bytes",
        "dis.distb",
        "dis._disassemble_recursive",
        "dis._disassemble_str",
        "<builtin>.TypeError",
        "<builtin>.sorted",
        "<builtin>.print",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "dis.distb": [
        "dis.disassemble",
        "<builtin>.RuntimeError"
    ],
    "dis._disassemble_recursive": [
        "dis._disassemble_recursive",
        "<builtin>.print",
        "dis.disassemble",
        "<builtin>.hasattr"
    ],
    "dis._disassemble_bytes": [
        "<builtin>.print",
        "<builtin>.max",
        "dis.Instruction._disassemble",
        "<builtin>.str",
        "<builtin>.len",
        "dis._get_instructions_bytes"
    ],
    "dis._disassemble_str": [
        "dis._try_compile",
        "dis._disassemble_recursive"
    ],
    "dis.disassemble": [
        "<builtin>.dict",
        "dis.findlinestarts",
        "dis._disassemble_bytes"
    ],
    "dis.pretty_flags": [
        "<builtin>.hex",
        "<builtin>.range"
    ],
    "dis._get_code_object": [
        "<builtin>.isinstance",
        "dis._try_compile",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "dis.code_info": [
        "dis._get_code_object",
        "dis._format_code_info"
    ],
    "dis._format_code_info": [
        "<builtin>.enumerate",
        "dis.pretty_flags"
    ],
    "dis.show_code": [
        "<builtin>.print",
        "dis.code_info"
    ],
    "dis.Instruction": [],
    "dis.Instruction._disassemble": [
        "<builtin>.repr"
    ],
    "dis.get_instructions": [
        "dis._get_code_object",
        "dis.findlinestarts",
        "<builtin>.dict",
        "dis._get_instructions_bytes"
    ],
    "dis.findlinestarts": [
        "<builtin>.len",
        "<builtin>.zip"
    ],
    "dis._get_instructions_bytes": [
        "dis._get_const_info",
        "<builtin>.repr",
        "<builtin>.bool",
        "dis._unpack_opargs",
        "dis._get_name_info",
        "<builtin>.enumerate",
        "dis.findlabels"
    ],
    "dis._get_const_info": [
        "<builtin>.repr"
    ],
    "dis._get_name_info": [
        "<builtin>.repr"
    ],
    "dis.findlabels": [
        "dis._unpack_opargs"
    ],
    "dis._unpack_opargs": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "dis.Bytecode": [],
    "dis.Bytecode.__init__": [
        "dis._get_code_object",
        "dis.findlinestarts",
        "<builtin>.dict"
    ],
    "dis.Bytecode.__iter__": [
        "dis._get_instructions_bytes"
    ],
    "dis.Bytecode.__repr__": [],
    "dis.Bytecode.from_traceback": [
        "dis.Bytecode.__init__"
    ],
    "dis.Bytecode.info": [
        "dis._format_code_info"
    ],
    "dis.Bytecode.dis": [
        "io.StringIO",
        "dis._disassemble_bytes"
    ],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "opcode.def_op"
    ],
    "unittest.loader._FailedTest": [],
    "unittest.loader._FailedTest.__init__": [
        "<builtin>.super"
    ],
    "unittest.loader._FailedTest.__getattr__": [
        "<builtin>.super"
    ],
    "unittest.loader._FailedTest.__getattr__.testFailure": [],
    "unittest.loader._make_failed_import_test": [
        "unittest.loader._make_failed_test",
        "<builtin>.ImportError",
        "traceback.format_exc"
    ],
    "unittest.loader._make_failed_test": [
        "unittest.loader._FailedTest.__init__",
        "unittest.suite.BaseTestSuite.__init__"
    ],
    "unittest.loader._make_failed_load_tests": [
        "unittest.loader._make_failed_test",
        "traceback.format_exc"
    ],
    "unittest.loader._make_skipped_test": [
        "unittest.case.skip.decorator.skip_wrapper",
        "unittest.case.skip",
        "unittest.suite.BaseTestSuite.__init__",
        "unittest.case.skip.decorator",
        "<builtin>.str",
        "unittest.case.skipUnless.reason",
        "unittest.case.skipIf.reason",
        "<builtin>.type"
    ],
    "unittest.case.skipIf.reason": [],
    "unittest.case.skipUnless.reason": [],
    "unittest.loader._make_skipped_test.testSkipped": [],
    "unittest.loader._jython_aware_splitext": [
        "sys.base_prefix.lower",
        "ntpath.splitext",
        "sys.path.lower",
        "sys.executable.lower",
        "posixpath.splitext"
    ],
    "unittest.loader.TestLoader": [
        "<builtin>.staticmethod"
    ],
    "unittest.loader.TestLoader.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "unittest.loader.TestLoader.loadTestsFromTestCase": [
        "unittest.loader.TestLoader.getTestCaseNames",
        "unittest.suite.BaseTestSuite.__init__",
        "<builtin>.map",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.hasattr"
    ],
    "unittest.loader.TestLoader.getTestCaseNames": [
        "<builtin>.dir",
        "<builtin>.list",
        "<builtin>.filter",
        "functools.cmp_to_key"
    ],
    "unittest.loader.TestLoader.loadTestsFromModule": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "unittest.loader._make_failed_load_tests",
        "warnings.warn",
        "unittest.suite.BaseTestSuite.__init__",
        "<builtin>.dir",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.len",
        "<builtin>.sorted",
        "unittest.loader.TestLoader.loadTestsFromTestCase"
    ],
    "unittest.loader.TestLoader.loadTestsFromName": [
        "<builtin>.getattr",
        "unittest.loader._make_failed_import_test",
        "<builtin>.isinstance",
        "unittest.loader._make_failed_test",
        "unittest.loader.TestLoader.loadTestsFromModule",
        "unittest.suite.BaseTestSuite.__init__",
        "<builtin>.__import__",
        "<builtin>.issubclass",
        "traceback.format_exc",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "unittest.loader.TestLoader.loadTestsFromTestCase"
    ],
    "unittest.loader.TestLoader.loadTestsFromNames": [
        "unittest.suite.BaseTestSuite.__init__",
        "unittest.loader.TestLoader.loadTestsFromName"
    ],
    "unittest.loader.TestLoader.getTestCaseNames.shouldIncludeMethod": [
        "<builtin>.getattr",
        "fnmatch.fnmatchcase",
        "<builtin>.any",
        "<builtin>.callable"
    ],
    "unittest.loader.TestLoader.discover": [
        "<builtin>.__import__",
        "unittest.loader.TestLoader._find_tests",
        "<builtin>.ImportError",
        "sys.path.insert",
        "posixpath.isfile",
        "ntpath.dirname",
        "<builtin>.TypeError",
        "ntpath.isdir",
        "posixpath.abspath",
        "ntpath.abspath",
        "ntpath.isfile",
        "sys.path.remove",
        "unittest.loader.TestLoader._get_directory_containing_module",
        "sys.executable.split",
        "posixpath.dirname",
        "<builtin>.list",
        "posixpath.join",
        "unittest.suite.BaseTestSuite.__init__",
        "ntpath.join",
        "posixpath.isdir"
    ],
    "unittest.loader.TestLoader._find_tests": [
        "posixpath.join",
        "ntpath.join",
        "unittest.loader.TestLoader._find_test_path",
        "<builtin>.sorted",
        "unittest.loader.TestLoader._find_tests",
        "unittest.loader.TestLoader._get_name_from_path"
    ],
    "unittest.loader.TestLoader._get_directory_containing_module": [
        "posixpath.abspath",
        "posixpath.basename",
        "ntpath.abspath",
        "ntpath.basename",
        "ntpath.dirname",
        "posixpath.dirname"
    ],
    "sys.path.remove": [],
    "unittest.loader.TestLoader._get_name_from_path": [
        "posixpath.normpath",
        "ntpath.normpath",
        "sys.path.startswith",
        "sys.executable.startswith",
        "ntpath.relpath",
        "ntpath.isabs",
        "sys.base_prefix.startswith",
        "posixpath.relpath",
        "sys.base_prefix.replace",
        "posixpath.isabs",
        "unittest.loader._jython_aware_splitext",
        "sys.executable.replace",
        "sys.path.replace"
    ],
    "unittest.loader.TestLoader._get_module_from_name": [
        "<builtin>.__import__"
    ],
    "unittest.loader.TestLoader._match_path": [
        "fnmatch.fnmatch"
    ],
    "unittest.loader.TestLoader._find_test_path": [
        "posixpath.realpath",
        "unittest.loader.TestLoader._match_path",
        "<builtin>.ImportError",
        "posixpath.isfile",
        "unittest.loader.TestLoader._get_module_from_name",
        "ntpath.dirname",
        "ntpath.isdir",
        "unittest.loader._jython_aware_splitext",
        "posixpath.abspath",
        "ntpath.abspath",
        "unittest.loader._make_failed_import_test",
        "unittest.loader.TestLoader.loadTestsFromModule",
        "ntpath.isfile",
        "ntpath.basename",
        "posixpath.dirname",
        "<builtin>.getattr",
        "unittest.loader.TestLoader._get_name_from_path",
        "posixpath.basename",
        "unittest.loader._make_skipped_test",
        "posixpath.join",
        "ntpath.join",
        "posixpath.isdir",
        "ntpath.realpath"
    ],
    "unittest.loader._makeLoader": [
        "unittest.loader.TestLoader.__init__"
    ],
    "unittest.loader.getTestCaseNames": [
        "unittest.loader._makeLoader",
        "unittest.loader.TestLoader.getTestCaseNames"
    ],
    "unittest.loader.makeSuite": [
        "unittest.loader._makeLoader",
        "unittest.loader.TestLoader.loadTestsFromTestCase"
    ],
    "unittest.loader.findTestCases": [
        "unittest.loader._makeLoader",
        "unittest.loader.TestLoader.loadTestsFromModule"
    ],
    "unittest.result.failfast": [
        "functools.wraps",
        "_functools.partial"
    ],
    "unittest.result.failfast.inner": [
        "<builtin>.getattr"
    ],
    "unittest.result.TestResult": [
        "unittest.result.TestResult.failfast"
    ],
    "unittest.result.TestResult.printErrors": [],
    "unittest.result.TestResult._setupStdout": [
        "io.StringIO"
    ],
    "unittest.result.TestResult.startTestRun": [],
    "unittest.result.TestResult._restoreStdout": [
        "sys.stderr.write",
        "sys.stdout.getvalue",
        "sys.stdout.write",
        "sys.stderr.getvalue"
    ],
    "sys.stdout.getvalue": [],
    "sys.stderr.getvalue": [],
    "unittest.result.TestResult.stopTestRun": [],
    "unittest.result.TestResult.failfast": [],
    "unittest.result.TestResult._exc_info_to_string": [
        "<builtin>.list",
        "sys.stdout.getvalue",
        "traceback.TracebackException.__init__",
        "unittest.result.TestResult._is_relevant_tb_level",
        "unittest.result.TestResult._count_relevant_tb_levels",
        "traceback.TracebackException.format",
        "sys.stderr.getvalue"
    ],
    "unittest.result.TestResult.stop": [],
    "unittest.result.TestResult.addSkip": [],
    "unittest.result.TestResult.addExpectedFailure": [
        "unittest.result.TestResult._exc_info_to_string"
    ],
    "unittest.result.TestResult.addUnexpectedSuccess": [],
    "unittest.result.TestResult._is_relevant_tb_level": [],
    "unittest.result.TestResult._count_relevant_tb_levels": [
        "unittest.result.TestResult._is_relevant_tb_level"
    ],
    "unittest.result.TestResult.__repr__": [
        "<builtin>.len",
        "unittest.util.strclass"
    ],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "__future__._Feature.getOptionalRelease": [],
    "__future__._Feature.getMandatoryRelease": [],
    "__future__._Feature.__repr__": [
        "<builtin>.repr"
    ],
    "paramiko.sftp.SFTPError": [],
    "paramiko.sftp.BaseSFTP": [],
    "paramiko.sftp.BaseSFTP.__init__": [
        "paramiko.util.get_logger"
    ],
    "paramiko.util.get_logger": [
        "logging.getLogger",
        "logging.Filterer.addFilter"
    ],
    "paramiko.sftp.BaseSFTP._send_version": [
        "paramiko.sftp.BaseSFTP._send_packet",
        "paramiko.sftp.BaseSFTP._read_packet"
    ],
    "paramiko.sftp.BaseSFTP._send_packet": [
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp.BaseSFTP._write_all",
        "paramiko.sftp.BaseSFTP._log",
        "paramiko.util.format_binary",
        "paramiko.py3compat.byte_chr",
        "<builtin>.len",
        "paramiko.common.asbytes"
    ],
    "paramiko.sftp.BaseSFTP._read_packet": [
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp.BaseSFTP._log",
        "paramiko.py3compat.byte_ord",
        "paramiko.sftp.BaseSFTP._read_all",
        "paramiko.util.format_binary",
        "<builtin>.bytes"
    ],
    "paramiko.sftp.BaseSFTP._send_server_version": [
        "paramiko.message.Message.add",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.__init__",
        "paramiko.sftp.BaseSFTP._send_packet",
        "paramiko.sftp.BaseSFTP._read_packet"
    ],
    "paramiko.message.Message.__init__": [
        "_io.BytesIO",
        "_io.StringIO"
    ],
    "paramiko.message.Message.add_int": [],
    "paramiko.message.Message.add": [
        "paramiko.message.Message._add"
    ],
    "paramiko.sftp.BaseSFTP._log": [
        "logging.Logger.log"
    ],
    "paramiko.sftp.BaseSFTP._write_all": [
        "paramiko.channel.Channel.send",
        "<builtin>.len",
        "<builtin>.EOFError"
    ],
    "paramiko.channel.Channel.send": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.channel.Channel._send",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.sftp.BaseSFTP._read_all": [
        "<builtin>.isinstance",
        "paramiko.channel.Channel.recv",
        "<builtin>.bytes",
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "paramiko.channel.Channel.recv": [
        "paramiko.message.Message.add_byte",
        "paramiko.channel.Channel._check_add_window",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "<builtin>.len",
        "paramiko.buffered_pipe.BufferedPipe.read"
    ],
    "paramiko.common.asbytes": [
        "paramiko.dsskey.DSSKey.asbytes",
        "paramiko.rsakey.RSAKey.asbytes",
        "paramiko.message.Message.asbytes",
        "paramiko.ed25519key.Ed25519Key.asbytes",
        "paramiko.py3compat.b",
        "paramiko.ecdsakey.ECDSAKey.asbytes"
    ],
    "paramiko.py3compat.byte_chr": [
        "<builtin>.isinstance"
    ],
    "paramiko.util.format_binary": [
        "<builtin>.len",
        "paramiko.util.format_binary_line"
    ],
    "paramiko.sftp_client.SFTPClient._log": [
        "<builtin>.super",
        "<builtin>.list",
        "paramiko.sftp_client.SFTPClient._log",
        "<builtin>.isinstance"
    ],
    "paramiko.py3compat.byte_ord": [
        "<builtin>.ord",
        "<builtin>.isinstance"
    ],
    "paramiko.py3compat.b": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "paramiko.ed25519key.Ed25519Key.asbytes": [
        "paramiko.ed25519key.Ed25519Key.can_sign",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.dsskey.DSSKey.asbytes": [
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.message.Message.asbytes": [],
    "paramiko.rsakey.RSAKey.asbytes": [
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.ecdsakey.ECDSAKey.asbytes": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_numbers",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.__init__",
        "paramiko.util.deflate_long",
        "<builtin>.len",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.py3compat.bytestring": [
        "<builtin>.isinstance"
    ],
    "paramiko.py3compat.byte_mask": [
        "<builtin>.isinstance",
        "<builtin>.ord",
        "<builtin>.chr"
    ],
    "paramiko.py3compat.u": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "paramiko.py3compat.b2s": [
        "<builtin>.isinstance"
    ],
    "paramiko.py3compat.is_callable": [
        "<builtin>.callable",
        "<builtin>.isinstance"
    ],
    "paramiko.py3compat.get_next": [],
    "paramiko.py3compat.next": [],
    "paramiko.py3compat.X": [],
    "paramiko.py3compat.X.__len__": [],
    "paramiko.py3compat.strftime": [
        "locale.getlocale",
        "time.strftime"
    ],
    "paramiko.py3compat.long": [],
    "paramiko.message.Message": [],
    "paramiko.message.Message.__str__": [
        "paramiko.message.Message.asbytes"
    ],
    "paramiko.message.Message.__repr__": [
        "<builtin>.repr"
    ],
    "paramiko.message.Message.rewind": [],
    "paramiko.message.Message.get_remainder": [],
    "paramiko.message.Message.get_so_far": [
        "paramiko.message.Message.rewind"
    ],
    "paramiko.message.Message.get_bytes": [
        "<builtin>.len"
    ],
    "paramiko.message.Message.get_byte": [
        "paramiko.message.Message.get_bytes"
    ],
    "paramiko.message.Message.get_boolean": [
        "paramiko.message.Message.get_bytes"
    ],
    "paramiko.message.Message.get_adaptive_int": [
        "paramiko.message.Message.get_bytes",
        "paramiko.message.Message.get_binary",
        "paramiko.util.inflate_long"
    ],
    "paramiko.message.Message.get_binary": [
        "paramiko.message.Message.get_bytes",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.util.inflate_long": [
        "<builtin>.len",
        "paramiko.py3compat.byte_ord",
        "<builtin>.range"
    ],
    "paramiko.message.Message.get_int": [
        "paramiko.message.Message.get_bytes"
    ],
    "paramiko.message.Message.get_int64": [
        "paramiko.message.Message.get_bytes"
    ],
    "paramiko.message.Message.get_mpint": [
        "paramiko.message.Message.get_binary",
        "paramiko.util.inflate_long"
    ],
    "paramiko.message.Message.get_string": [
        "paramiko.message.Message.get_bytes",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.message.Message.get_text": [
        "paramiko.message.Message.get_string",
        "paramiko.py3compat.u"
    ],
    "paramiko.message.Message.get_list": [
        "paramiko.message.Message.get_text"
    ],
    "paramiko.message.Message.add_bytes": [],
    "paramiko.message.Message.add_byte": [],
    "paramiko.message.Message.add_boolean": [],
    "paramiko.message.Message.add_adaptive_int": [
        "paramiko.message.Message.add_string",
        "paramiko.util.deflate_long"
    ],
    "paramiko.util.deflate_long": [
        "paramiko.py3compat.byte_ord",
        "<builtin>.bytes",
        "<builtin>.enumerate"
    ],
    "paramiko.message.Message.add_string": [
        "<builtin>.len",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.message.Message.add_int64": [],
    "paramiko.message.Message.add_mpint": [
        "paramiko.message.Message.add_string",
        "paramiko.util.deflate_long"
    ],
    "paramiko.message.Message.add_list": [
        "paramiko.message.Message.add_string"
    ],
    "paramiko.message.Message._add": [
        "paramiko.message.Message.add_list",
        "<builtin>.isinstance",
        "paramiko.message.Message.add_adaptive_int",
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_boolean",
        "<builtin>.type"
    ],
    "paramiko.util.format_binary_line": [
        "paramiko.py3compat.byte_ord"
    ],
    "paramiko.util.safe_string": [
        "paramiko.py3compat.byte_ord",
        "paramiko.py3compat.byte_chr",
        "paramiko.py3compat.b"
    ],
    "paramiko.util.bit_length": [
        "<builtin>.len",
        "paramiko.py3compat.byte_ord",
        "paramiko.util.deflate_long"
    ],
    "paramiko.util.tb_strings": [
        "sys.exc_info",
        "traceback.format_exception"
    ],
    "paramiko.util.generate_key_bytes": [
        "<builtin>.len",
        "<builtin>.bytes",
        "<builtin>.min",
        "paramiko.py3compat.b"
    ],
    "paramiko.hostkeys.HostKeys.__init__": [
        "paramiko.hostkeys.HostKeys.load"
    ],
    "paramiko.util.parse_ssh_config": [
        "paramiko.config.SSHConfig.__init__",
        "paramiko.config.SSHConfig.parse"
    ],
    "paramiko.config.SSHConfig.__init__": [],
    "paramiko.util.lookup_ssh_host_config": [],
    "paramiko.util.mod_inverse": [],
    "threading.local": [],
    "paramiko.util.get_thread_id": [],
    "paramiko.util.log_to_file": [
        "logging.StreamHandler.__init__",
        "logging.Logger.setLevel",
        "logging.getLogger",
        "logging.Handler.setFormatter",
        "<builtin>.open",
        "<builtin>.len",
        "logging.Logger.addHandler",
        "logging.Formatter.__init__"
    ],
    "paramiko.util.PFilter": [],
    "paramiko.util.PFilter.filter": [
        "paramiko.util.get_thread_id"
    ],
    "paramiko.util.retry_on_signal": [
        "paramiko.agent.get_agent_connection.<lambda1>",
        "paramiko.transport.Transport.__init__.<lambda1>",
        "paramiko.client.SSHClient.connect.<lambda1>"
    ],
    "paramiko.agent.get_agent_connection.<lambda1>": [],
    "paramiko.transport.Transport.__init__.<lambda1>": [],
    "paramiko.client.SSHClient.connect.<lambda1>": [],
    "paramiko.util.constant_time_bytes_eq": [
        "<builtin>.len",
        "paramiko.py3compat.byte_ord"
    ],
    "paramiko.util.ClosingContextManager": [],
    "paramiko.util.ClosingContextManager.__enter__": [],
    "paramiko.util.ClosingContextManager.__exit__": [
        "paramiko.sftp_handle.SFTPHandle.close",
        "paramiko.transport.Transport.close",
        "paramiko.sftp_client.SFTPClient.close"
    ],
    "paramiko.sftp_handle.SFTPHandle.close": [
        "<builtin>.getattr"
    ],
    "paramiko.sftp_client.SFTPClient.close": [
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.channel.Channel.close"
    ],
    "paramiko.util.clamp_value": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "paramiko.config.SSHConfig": [
        "re.compile"
    ],
    "paramiko.config.SSHConfig.from_text": [
        "paramiko.config.SSHConfig.from_file",
        "_io.StringIO"
    ],
    "paramiko.config.SSHConfig.from_file": [
        "paramiko.config.SSHConfig.__init__"
    ],
    "paramiko.config.SSHConfig.from_path": [
        "<builtin>.open",
        "paramiko.config.SSHConfig.from_file"
    ],
    "paramiko.config.SSHConfig._get_hosts": [],
    "paramiko.config.SSHConfig._get_matches": [
        "<builtin>.list",
        "<builtin>.filter",
        "<builtin>.any"
    ],
    "paramiko.config.SSHConfig._lookup": [
        "paramiko.config.SSHConfig._does_match",
        "paramiko.config.SSHConfig._expand_variables",
        "paramiko.config.SSHConfigDict.__init__",
        "paramiko.config.SSHConfig._pattern_matches"
    ],
    "paramiko.config.SSHConfig.canonicalize": [
        "paramiko.config._addressfamily_host_lookup"
    ],
    "paramiko.config.SSHConfigDict.__init__": [
        "<builtin>.super"
    ],
    "paramiko.config.SSHConfig._pattern_matches": [
        "<builtin>.hasattr"
    ],
    "paramiko.config.SSHConfig._does_match": [
        "paramiko.config.SSHConfig._tokenize",
        "paramiko.config.SSHConfig._should_fail",
        "invoke.run",
        "paramiko.config.SSHConfig._pattern_matches"
    ],
    "paramiko.config.SSHConfig._expand_variables": [
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "_functools.partial"
    ],
    "paramiko.config._addressfamily_host_lookup": [],
    "paramiko.config.SSHConfig.get_hostnames": [
        "<builtin>.set"
    ],
    "paramiko.config.SSHConfig._allowed": [
        "paramiko.config.SSHConfig._pattern_matches"
    ],
    "paramiko.config.SSHConfig._should_fail": [],
    "paramiko.config.SSHConfig._tokenize": [
        "paramiko.config.SSHConfig._allowed_tokens",
        "<builtin>.repr",
        "ntpath.expanduser",
        "posixpath.expanduser",
        "paramiko.config.LazyFqdn.__init__",
        "<builtin>.str"
    ],
    "invoke.run": [],
    "paramiko.config.SSHConfig._allowed_tokens": [],
    "paramiko.config.LazyFqdn.__init__": [],
    "paramiko.config.SSHConfig._get_matches.<lambda1>": [],
    "paramiko.config.SSHConfig._get_matches.<lambda2>": [],
    "paramiko.config.LazyFqdn": [],
    "paramiko.config.LazyFqdn.__str__": [
        "paramiko.config._addressfamily_host_lookup"
    ],
    "paramiko.config.SSHConfigDict": [],
    "paramiko.config.SSHConfigDict.as_bool": [
        "<builtin>.isinstance"
    ],
    "paramiko.config.SSHConfigDict.as_int": [
        "<builtin>.int"
    ],
    "shlex.shlex": [],
    "shlex.shlex.__init__": [
        "_collections.deque",
        "<builtin>.isinstance",
        "_io.StringIO"
    ],
    "shlex.shlex.punctuation_chars": [],
    "shlex.shlex.push_token": [
        "<builtin>.print",
        "<builtin>.repr"
    ],
    "shlex.shlex.push_source": [
        "<builtin>.print",
        "<builtin>.isinstance",
        "_io.StringIO"
    ],
    "shlex.shlex.pop_source": [
        "sys.stdin.close",
        "<builtin>.print"
    ],
    "shlex.shlex.get_token": [
        "<builtin>.repr",
        "shlex.shlex.read_token",
        "shlex.shlex.sourcehook",
        "shlex.shlex.push_source",
        "shlex.shlex.pop_source",
        "<builtin>.print",
        "shlex.shlex.get_token"
    ],
    "shlex.shlex.read_token": [
        "<builtin>.repr",
        "sys.stdin.read",
        "<builtin>.ValueError",
        "<builtin>.print",
        "sys.stdin.readline"
    ],
    "shlex.shlex.sourcehook": [
        "<builtin>.isinstance",
        "posixpath.join",
        "ntpath.join",
        "<builtin>.open",
        "ntpath.dirname",
        "ntpath.isabs",
        "posixpath.isabs",
        "posixpath.dirname"
    ],
    "sys.stdin.read": [],
    "shlex.shlex.error_leader": [],
    "shlex.shlex.__iter__": [],
    "shlex.shlex.__next__": [
        "shlex.shlex.get_token"
    ],
    "shlex.split": [
        "shlex.shlex.__init__",
        "<builtin>.list"
    ],
    "shlex.join": [
        "shlex.quote"
    ],
    "shlex.quote": [],
    "shlex._print_tokens": [
        "<builtin>.print",
        "shlex.shlex.get_token",
        "<builtin>.repr"
    ],
    "paramiko.ssh_exception.SSHException": [],
    "paramiko.ssh_exception.AuthenticationException": [],
    "paramiko.ssh_exception.PasswordRequiredException": [],
    "paramiko.ssh_exception.BadAuthenticationType": [],
    "paramiko.ssh_exception.BadAuthenticationType.__init__": [],
    "paramiko.ssh_exception.BadAuthenticationType.__str__": [],
    "paramiko.ssh_exception.PartialAuthentication": [],
    "paramiko.ssh_exception.PartialAuthentication.__init__": [],
    "paramiko.ssh_exception.PartialAuthentication.__str__": [],
    "paramiko.ssh_exception.ChannelException": [],
    "paramiko.ssh_exception.ChannelException.__init__": [],
    "paramiko.ssh_exception.ChannelException.__str__": [],
    "paramiko.ssh_exception.BadHostKeyException": [],
    "paramiko.ssh_exception.BadHostKeyException.__init__": [],
    "paramiko.ssh_exception.BadHostKeyException.__str__": [],
    "paramiko.ssh_exception.IncompatiblePeer": [],
    "paramiko.ssh_exception.ProxyCommandFailure": [],
    "paramiko.ssh_exception.ProxyCommandFailure.__init__": [],
    "paramiko.ssh_exception.ProxyCommandFailure.__str__": [],
    "paramiko.ssh_exception.NoValidConnectionsError": [],
    "paramiko.ssh_exception.NoValidConnectionsError.__init__": [
        "<builtin>.super",
        "<builtin>.sorted"
    ],
    "paramiko.ssh_exception.NoValidConnectionsError.__reduce__": [],
    "paramiko.ssh_exception.CouldNotCanonicalize": [],
    "paramiko.ssh_exception.ConfigParseError": [],
    "getpass.GetPassWarning": [],
    "getpass.unix_getpass": [
        "contextlib._BaseExitStack.__init__",
        "sys.stdin.fileno",
        "sys.stdin.flush",
        "getpass.fallback_getpass",
        "sys.stderr.write",
        "sys.stderr.flush",
        "io.FileIO",
        "getpass._raw_input",
        "<builtin>.hasattr",
        "io.TextIOWrapper",
        "sys.stdin.write"
    ],
    "io.FileIO": [],
    "sys.stdin.fileno": [],
    "getpass.fallback_getpass": [
        "warnings.warn",
        "getpass._raw_input",
        "<builtin>.print"
    ],
    "getpass._raw_input": [
        "sys.stdin.flush",
        "sys.stderr.write",
        "sys.stderr.flush",
        "<builtin>.str",
        "sys.stdin.readline",
        "sys.stdin.write"
    ],
    "sys.stdin.flush": [],
    "sys.stdin.write": [],
    "getpass.win_getpass": [
        "getpass.fallback_getpass",
        "msvcrt.getwch",
        "msvcrt.putwch"
    ],
    "msvcrt.putwch": [],
    "msvcrt.getwch": [],
    "getpass.getuser": [
        "pwd.getpwuid"
    ],
    "paramiko.hostkeys.HostKeys": [],
    "paramiko.hostkeys.HostKeys.load": [
        "paramiko.hostkeys.HostKeyEntry.from_line",
        "<builtin>.open",
        "paramiko.hostkeys.HostKeys.check",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "paramiko.hostkeys.HostKeys.add": [
        "paramiko.hostkeys.HostKeyEntry.__init__"
    ],
    "paramiko.hostkeys.HostKeyEntry.__init__": [],
    "paramiko.hostkeys.HostKeyEntry.from_line": [
        "paramiko.ecdsakey.ECDSAKey.__init__",
        "base64.decodebytes",
        "paramiko.ed25519key.Ed25519Key.__init__",
        "paramiko.util.get_logger",
        "paramiko.hostkeys.HostKeyEntry.__init__",
        "logging.Logger.info",
        "base64.decodestring",
        "paramiko.dsskey.DSSKey.__init__",
        "paramiko.rsakey.RSAKey.__init__",
        "paramiko.py3compat.b",
        "<builtin>.len",
        "paramiko.ecdsakey.ECDSAKey.supported_key_format_identifiers",
        "paramiko.hostkeys.InvalidHostKey.__init__"
    ],
    "paramiko.hostkeys.HostKeys.check": [
        "paramiko.hostkeys.HostKeys.lookup"
    ],
    "paramiko.hostkeys.HostKeys.save": [
        "<builtin>.open"
    ],
    "paramiko.hostkeys.HostKeys.lookup": [
        "paramiko.hostkeys.HostKeys.lookup.SubDict",
        "paramiko.hostkeys.HostKeys._hostname_matches",
        "paramiko.hostkeys.HostKeys.lookup.SubDict.__init__",
        "<builtin>.len"
    ],
    "paramiko.hostkeys.HostKeys.lookup.SubDict": [],
    "paramiko.hostkeys.HostKeys.lookup.SubDict.__init__": [],
    "paramiko.hostkeys.HostKeys.lookup.SubDict.__iter__": [
        "paramiko.hostkeys.HostKeys.lookup.SubDict.keys"
    ],
    "paramiko.hostkeys.HostKeys.lookup.SubDict.keys": [],
    "paramiko.hostkeys.HostKeys.lookup.SubDict.__len__": [
        "<builtin>.len",
        "paramiko.hostkeys.HostKeys.lookup.SubDict.keys"
    ],
    "paramiko.hostkeys.HostKeys.lookup.SubDict.__delitem__": [
        "<builtin>.list"
    ],
    "paramiko.hostkeys.HostKeys.lookup.SubDict.__getitem__": [
        "<builtin>.KeyError"
    ],
    "paramiko.hostkeys.HostKeys.lookup.SubDict.__setitem__": [],
    "paramiko.hostkeys.HostKeys._hostname_matches": [
        "paramiko.hostkeys.HostKeys.hash_host",
        "paramiko.util.constant_time_bytes_eq"
    ],
    "paramiko.hostkeys.HostKeys.hash_host": [
        "base64.encodebytes",
        "base64.decodebytes",
        "hmac.HMAC.digest",
        "base64.decodestring",
        "hmac.HMAC.__init__",
        "base64.encodestring",
        "paramiko.py3compat.b",
        "<builtin>.len",
        "paramiko.py3compat.u"
    ],
    "paramiko.hostkeys.HostKeys.clear": [],
    "paramiko.hostkeys.HostKeys.__iter__": [
        "paramiko.hostkeys.HostKeys.keys"
    ],
    "paramiko.hostkeys.HostKeys.keys": [],
    "paramiko.hostkeys.HostKeys.__len__": [
        "<builtin>.len",
        "paramiko.hostkeys.HostKeys.keys"
    ],
    "paramiko.hostkeys.HostKeys.__getitem__": [
        "paramiko.hostkeys.HostKeys.lookup",
        "<builtin>.KeyError"
    ],
    "paramiko.hostkeys.HostKeys.__delitem__": [
        "paramiko.hostkeys.HostKeys._hostname_matches",
        "<builtin>.enumerate",
        "<builtin>.KeyError"
    ],
    "paramiko.hostkeys.HostKeys.__setitem__": [
        "<builtin>.len",
        "paramiko.hostkeys.HostKeyEntry.__init__"
    ],
    "paramiko.hostkeys.HostKeys.values": [
        "paramiko.hostkeys.HostKeys.keys",
        "paramiko.hostkeys.HostKeys.lookup"
    ],
    "hmac.HMAC.__init__": [
        "hmac.HMAC.__init__.<lambda1>",
        "<builtin>.isinstance",
        "warnings.warn",
        "hmac.HMAC.update",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.type",
        "hmac.HMAC.__init__.<lambda2>"
    ],
    "hmac.HMAC.digest": [
        "hmac.HMAC._current"
    ],
    "paramiko.hostkeys.InvalidHostKey": [],
    "paramiko.hostkeys.InvalidHostKey.__init__": [],
    "paramiko.hostkeys.HostKeyEntry": [],
    "paramiko.rsakey.RSAKey.__init__": [
        "paramiko.rsakey.RSAKey._from_private_key",
        "paramiko.message.Message.__init__",
        "paramiko.pkey.PKey._check_type_and_load_cert",
        "paramiko.rsakey.RSAKey._from_private_key_file",
        "cryptography.hazmat.backends.default_backend",
        "paramiko.message.Message.get_mpint",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.public_key"
    ],
    "paramiko.dsskey.DSSKey.__init__": [
        "paramiko.dsskey.DSSKey._from_private_key_file",
        "paramiko.util.bit_length",
        "paramiko.dsskey.DSSKey._from_private_key",
        "paramiko.message.Message.__init__",
        "paramiko.pkey.PKey._check_type_and_load_cert",
        "paramiko.message.Message.get_mpint"
    ],
    "paramiko.ecdsakey.ECDSAKey.supported_key_format_identifiers": [
        "paramiko.ecdsakey._ECDSACurveSet.get_key_format_identifier_list"
    ],
    "paramiko.ecdsakey.ECDSAKey.__init__": [
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.from_encoded_point",
        "paramiko.message.Message.get_text",
        "paramiko.ecdsakey._ECDSACurveSet.get_key_format_identifier_list",
        "paramiko.ecdsakey._ECDSACurveSet.get_by_curve_class",
        "paramiko.ecdsakey.ECDSAKey._from_private_key",
        "paramiko.ecdsakey._ECDSACurveSet.get_by_key_format_identifier",
        "paramiko.message.Message.__init__",
        "paramiko.ecdsakey.ECDSAKey._from_private_key_file",
        "paramiko.pkey.PKey._check_type_and_load_cert",
        "paramiko.message.Message.get_binary",
        "<builtin>.len"
    ],
    "paramiko.ed25519key.Ed25519Key.__init__": [
        "paramiko.ed25519key.Ed25519Key._parse_signing_key_data",
        "<builtin>.open",
        "paramiko.message.Message.get_binary",
        "paramiko.message.Message.__init__",
        "paramiko.pkey.PKey._check_type_and_load_cert",
        "<builtin>.ValueError",
        "paramiko.pkey.PKey._read_private_key"
    ],
    "paramiko.hostkeys.HostKeyEntry.to_line": [
        "paramiko.dsskey.DSSKey.get_name",
        "paramiko.ed25519key.Ed25519Key.get_name",
        "paramiko.rsakey.RSAKey.get_name",
        "paramiko.pkey.PKey.get_base64",
        "paramiko.ecdsakey.ECDSAKey.get_name"
    ],
    "paramiko.dsskey.DSSKey.get_name": [],
    "paramiko.ecdsakey.ECDSAKey.get_name": [],
    "paramiko.ed25519key.Ed25519Key.get_name": [],
    "paramiko.rsakey.RSAKey.get_name": [],
    "paramiko.pkey.PKey.get_base64": [
        "paramiko.dsskey.DSSKey.asbytes",
        "base64.encodebytes",
        "paramiko.rsakey.RSAKey.asbytes",
        "paramiko.pkey.PKey.asbytes",
        "base64.encodestring",
        "paramiko.py3compat.u",
        "paramiko.ecdsakey.ECDSAKey.asbytes"
    ],
    "paramiko.hostkeys.HostKeyEntry.__repr__": [],
    "hmac.HMAC": [],
    "hmac.HMAC.__init__.<lambda1>": [],
    "hmac.HMAC.__init__.<lambda2>": [],
    "hmac.HMAC.update": [],
    "hmac.HMAC.name": [],
    "hmac.HMAC.copy": [],
    "hmac.HMAC._current": [],
    "hmac.HMAC.hexdigest": [
        "hmac.HMAC._current"
    ],
    "hmac.new": [
        "hmac.HMAC.__init__"
    ],
    "hmac.digest": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "hmac.digest.<lambda1>",
        "<builtin>.callable",
        "<builtin>.len",
        "hmac.digest.<lambda2>"
    ],
    "hmac.digest.<lambda1>": [],
    "hmac.digest.<lambda2>": [],
    "paramiko.ecdsakey._ECDSACurve": [],
    "paramiko.ecdsakey._ECDSACurve.__init__": [],
    "paramiko.ecdsakey._ECDSACurveSet": [],
    "paramiko.ecdsakey._ECDSACurveSet.__init__": [],
    "paramiko.ecdsakey._ECDSACurveSet.get_key_format_identifier_list": [],
    "paramiko.ecdsakey._ECDSACurveSet.get_by_curve_class": [],
    "paramiko.ecdsakey._ECDSACurveSet.get_by_key_format_identifier": [],
    "paramiko.ecdsakey._ECDSACurveSet.get_by_key_length": [],
    "paramiko.ecdsakey.ECDSAKey": [
        "paramiko.ecdsakey._ECDSACurve.__init__",
        "paramiko.ecdsakey._ECDSACurveSet.__init__"
    ],
    "paramiko.ecdsakey.ECDSAKey._from_private_key": [
        "paramiko.ecdsakey.ECDSAKey._decode_key",
        "paramiko.pkey.PKey._read_private_key"
    ],
    "paramiko.ecdsakey.ECDSAKey._from_private_key_file": [
        "paramiko.pkey.PKey._read_private_key_file",
        "paramiko.ecdsakey.ECDSAKey._decode_key"
    ],
    "paramiko.pkey.PKey._check_type_and_load_cert": [
        "paramiko.message.Message.get_text",
        "<builtin>.isinstance",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.rewind",
        "paramiko.message.Message.__init__",
        "paramiko.pkey.PKey.load_certificate"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_determine_group_get_func"
    ],
    "paramiko.ecdsakey.ECDSAKey.__str__": [
        "paramiko.ecdsakey.ECDSAKey.asbytes"
    ],
    "paramiko.ecdsakey.ECDSAKey._fields": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_numbers",
        "paramiko.ecdsakey.ECDSAKey.get_name"
    ],
    "paramiko.ecdsakey.ECDSAKey.get_bits": [],
    "paramiko.ecdsakey.ECDSAKey.can_sign": [],
    "paramiko.ecdsakey.ECDSAKey.sign_ssh_data": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.sign",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.sign",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.sign",
        "paramiko.ecdsakey.ECDSAKey._sigencode",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.sign",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDSA.__init__",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.sign",
        "paramiko.message.Message.add_string"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA.__init__": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.sign": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.dsa._dsa_sig_sign"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_sign",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.ec._ecdsa_sig_sign",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.ec._check_signature_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.sign": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "paramiko.ecdsakey.ECDSAKey._sigencode": [
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_mpint"
    ],
    "paramiko.ecdsakey.ECDSAKey.verify_ssh_sig": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.verify",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDSA.__init__",
        "paramiko.ecdsakey.ECDSAKey._sigdecode"
    ],
    "paramiko.ecdsakey.ECDSAKey._sigdecode": [
        "paramiko.message.Message.get_mpint",
        "paramiko.message.Message.__init__"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.verify": [
        "cryptography.hazmat.backends.openssl.ec._ecdsa_sig_verify",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.ec._check_signature_algorithm"
    ],
    "paramiko.ecdsakey.ECDSAKey.write_private_key_file": [
        "paramiko.pkey.PKey._write_private_key_file"
    ],
    "paramiko.pkey.PKey._write_private_key_file": [
        "os.fdopen",
        "paramiko.pkey.PKey._write_private_key"
    ],
    "paramiko.ecdsakey.ECDSAKey.write_private_key": [
        "paramiko.pkey.PKey._write_private_key"
    ],
    "paramiko.pkey.PKey._write_private_key": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.private_bytes",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.private_bytes",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.private_bytes",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.private_bytes",
        "paramiko.py3compat.b",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.private_bytes",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.private_bytes",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.private_bytes",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_bytes"
    ],
    "paramiko.ecdsakey.ECDSAKey.generate": [
        "paramiko.ecdsakey._ECDSACurveSet.get_by_key_length",
        "cryptography.hazmat.primitives.asymmetric.ec.generate_private_key",
        "paramiko.ecdsakey.ECDSAKey.__init__",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.default_backend",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve_nid"
    ],
    "paramiko.pkey.PKey._read_private_key_file": [
        "<builtin>.open",
        "paramiko.pkey.PKey._read_private_key"
    ],
    "paramiko.ecdsakey.ECDSAKey._decode_key": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.public_key",
        "cryptography.hazmat.primitives.asymmetric.ec.derive_private_key",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "paramiko.message.Message.get_binary",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.public_key",
        "<builtin>.str",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.primitives.serialization.load_der_private_key",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.public_key",
        "paramiko.message.Message.get_text",
        "paramiko.ecdsakey._ECDSACurveSet.get_by_curve_class",
        "paramiko.ecdsakey._ECDSACurveSet.get_by_key_format_identifier",
        "paramiko.message.Message.get_mpint",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.public_key",
        "paramiko.pkey.PKey._got_bad_key_format_id",
        "cryptography.hazmat.backends.default_backend"
    ],
    "paramiko.pkey.PKey._read_private_key": [
        "paramiko.pkey.PKey._read_private_key_pem",
        "<builtin>.len",
        "paramiko.pkey.PKey._read_private_key_openssh"
    ],
    "cryptography.hazmat.primitives.serialization.load_der_private_key": [],
    "paramiko.pkey.PKey._got_bad_key_format_id": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_public_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dh._dh_params_dup"
    ],
    "paramiko.pkey._unpad_openssh": [
        "<builtin>.range",
        "six.indexbytes"
    ],
    "six.indexbytes": [
        "<builtin>.ord"
    ],
    "paramiko.pkey.PKey": [
        "re.compile"
    ],
    "paramiko.pkey.PKey.__init__": [],
    "paramiko.pkey.PKey.asbytes": [
        "<builtin>.bytes"
    ],
    "paramiko.pkey.PKey.__str__": [
        "paramiko.pkey.PKey.asbytes",
        "paramiko.dsskey.DSSKey.asbytes",
        "paramiko.rsakey.RSAKey.asbytes",
        "paramiko.ecdsakey.ECDSAKey.asbytes"
    ],
    "paramiko.pkey.PKey.__cmp__": [
        "paramiko.dsskey.DSSKey.asbytes",
        "paramiko.rsakey.RSAKey.asbytes",
        "paramiko.pkey.PKey.asbytes",
        "<builtin>.hash",
        "paramiko.ecdsakey.ECDSAKey.asbytes"
    ],
    "paramiko.pkey.PKey.__eq__": [
        "<builtin>.isinstance"
    ],
    "paramiko.pkey.PKey.__hash__": [
        "<builtin>.hash"
    ],
    "paramiko.pkey.PKey._fields": [],
    "paramiko.pkey.PKey.get_name": [],
    "paramiko.pkey.PKey.get_bits": [],
    "paramiko.pkey.PKey.can_sign": [],
    "paramiko.pkey.PKey.get_fingerprint": [
        "paramiko.pkey.PKey.asbytes",
        "paramiko.dsskey.DSSKey.asbytes",
        "paramiko.rsakey.RSAKey.asbytes",
        "paramiko.ecdsakey.ECDSAKey.asbytes"
    ],
    "paramiko.pkey.PKey.sign_ssh_data": [
        "<builtin>.bytes"
    ],
    "paramiko.pkey.PKey.verify_ssh_sig": [],
    "paramiko.pkey.PKey.from_private_key_file": [
        "paramiko.pkey.PKey.__init__"
    ],
    "paramiko.pkey.PKey.from_private_key": [
        "paramiko.pkey.PKey.__init__"
    ],
    "paramiko.pkey.PKey.write_private_key_file": [
        "<builtin>.Exception"
    ],
    "paramiko.pkey.PKey.write_private_key": [
        "<builtin>.Exception"
    ],
    "paramiko.pkey.PKey._read_private_key_pem": [
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.update",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.finalize",
        "base64.decodebytes",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor",
        "base64.decodestring",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.finalize",
        "cryptography.hazmat.backends.default_backend",
        "paramiko.py3compat.b",
        "paramiko.util.generate_key_bytes",
        "<builtin>.len",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__"
    ],
    "paramiko.pkey.PKey._read_private_key_openssh": [
        "paramiko.pkey.PKey._uint32_cstruct_unpack",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.update",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.finalize",
        "base64.decodebytes",
        "paramiko.pkey._unpad_openssh",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor",
        "base64.decodestring",
        "bcrypt.kdf",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.finalize",
        "cryptography.hazmat.backends.default_backend",
        "paramiko.py3compat.b",
        "cryptography.hazmat.primitives.ciphers.modes.CTR.__init__",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update",
        "cryptography.hazmat.primitives.ciphers.modes.CBC.__init__",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES.__init__"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext.update": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update": [
        "<builtin>.len",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext._check_limit"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext.finalize": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.finalize"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.finalize": [],
    "paramiko.pkey.PKey._uint32_cstruct_unpack": [
        "<builtin>.tuple",
        "paramiko.util.inflate_long",
        "<builtin>.str"
    ],
    "bcrypt.kdf": [
        "<builtin>.isinstance",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CBC.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey._raw_private_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey._raw_private_bytes"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.private_bytes": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey._raw_private_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey._raw_private_bytes"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes"
    ],
    "paramiko.pkey.PKey.load_certificate": [
        "<builtin>.getattr",
        "paramiko.pkey.PKey.get_name",
        "<builtin>.isinstance",
        "paramiko.dsskey.DSSKey.get_name",
        "ntpath.isfile",
        "paramiko.rsakey.RSAKey.get_name",
        "posixpath.isfile",
        "<builtin>.ValueError",
        "paramiko.ecdsakey.ECDSAKey.get_name"
    ],
    "paramiko.pkey.PublicBlob": [],
    "paramiko.pkey.PublicBlob.__init__": [],
    "paramiko.pkey.PublicBlob.from_file": [
        "<builtin>.open",
        "paramiko.pkey.PublicBlob.from_string"
    ],
    "paramiko.pkey.PublicBlob.from_string": [
        "paramiko.message.Message.get_text",
        "base64.decodebytes",
        "base64.decodestring",
        "paramiko.message.Message.__init__",
        "<builtin>.ValueError",
        "paramiko.py3compat.b",
        "<builtin>.len",
        "paramiko.pkey.PublicBlob.__init__"
    ],
    "paramiko.pkey.PublicBlob.from_message": [
        "paramiko.pkey.PublicBlob.__init__"
    ],
    "paramiko.pkey.PublicBlob.__str__": [],
    "paramiko.pkey.PublicBlob.__eq__": [],
    "paramiko.pkey.PublicBlob.__ne__": [],
    "six.X": [],
    "six.X.__len__": [],
    "six._add_doc": [],
    "six._import_module": [
        "<builtin>.__import__"
    ],
    "six._LazyDescr": [],
    "six._LazyDescr.__init__": [],
    "six._LazyDescr.__get__": [
        "six.MovedAttribute._resolve",
        "<builtin>.delattr",
        "<builtin>.setattr",
        "six.MovedModule._resolve"
    ],
    "six.MovedAttribute._resolve": [
        "<builtin>.getattr",
        "six._import_module"
    ],
    "six.MovedModule._resolve": [
        "six._import_module"
    ],
    "six.MovedModule": [],
    "six.MovedModule.__init__": [
        "<builtin>.super"
    ],
    "six.MovedModule.__getattr__": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "six.MovedModule._resolve"
    ],
    "six._LazyModule": [],
    "six._LazyModule.__init__": [
        "<builtin>.super"
    ],
    "six._LazyModule.__dir__": [],
    "six.MovedAttribute": [],
    "six.MovedAttribute.__init__": [
        "<builtin>.super"
    ],
    "six._SixMetaPathImporter": [],
    "six._SixMetaPathImporter.__init__": [],
    "six._SixMetaPathImporter._add_module": [],
    "six._SixMetaPathImporter._get_module": [],
    "six._SixMetaPathImporter.find_module": [],
    "six._SixMetaPathImporter.find_spec": [
        "_bootstrap.spec_from_loader"
    ],
    "_bootstrap.spec_from_loader": [],
    "six._SixMetaPathImporter.__get_module": [
        "<builtin>.ImportError"
    ],
    "six._SixMetaPathImporter.load_module": [
        "six._SixMetaPathImporter.__get_module",
        "<builtin>.isinstance"
    ],
    "six._SixMetaPathImporter.is_package": [
        "six._SixMetaPathImporter.__get_module",
        "<builtin>.hasattr"
    ],
    "six._SixMetaPathImporter.get_code": [
        "six._SixMetaPathImporter.__get_module"
    ],
    "six._SixMetaPathImporter.create_module": [
        "six._SixMetaPathImporter.load_module"
    ],
    "six._SixMetaPathImporter.exec_module": [],
    "six._MovedItems": [],
    "six.Module_six_moves_urllib_parse": [],
    "six.Module_six_moves_urllib_error": [],
    "six.Module_six_moves_urllib_request": [],
    "six.Module_six_moves_urllib_response": [],
    "six.Module_six_moves_urllib_robotparser": [],
    "six.Module_six_moves_urllib": [
        "six._SixMetaPathImporter._get_module"
    ],
    "six.Module_six_moves_urllib.__dir__": [],
    "six.add_move": [
        "<builtin>.setattr"
    ],
    "six.remove_move": [
        "<builtin>.AttributeError",
        "<builtin>.delattr"
    ],
    "six.advance_iterator": [],
    "six.callable": [
        "<builtin>.any",
        "<builtin>.type"
    ],
    "six.get_unbound_function": [],
    "six.create_unbound_method": [],
    "six.create_bound_method": [],
    "six.Iterator": [],
    "six.Iterator.next": [
        "<builtin>.type"
    ],
    "six.iterkeys": [
        "<builtin>.iter"
    ],
    "six.itervalues": [
        "<builtin>.iter"
    ],
    "six.iteritems": [
        "<builtin>.iter"
    ],
    "six.iterlists": [
        "<builtin>.iter"
    ],
    "six.b": [],
    "six.u": [],
    "six.byte2int": [
        "<builtin>.ord"
    ],
    "six.assertCountEqual": [
        "<builtin>.getattr"
    ],
    "six.assertRaisesRegex": [
        "<builtin>.getattr"
    ],
    "six.assertRegex": [
        "<builtin>.getattr"
    ],
    "six.assertNotRegex": [
        "<builtin>.getattr"
    ],
    "six.reraise": [],
    "six.exec_": [
        "<builtin>.exec",
        "sys._getframe"
    ],
    "six.raise_from": [],
    "six.print_": [
        "<builtin>.isinstance",
        "six.print_.write",
        "<builtin>.enumerate",
        "six.print_",
        "<builtin>.TypeError"
    ],
    "six.print_.write": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "six._update_wrapper": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "six.wraps": [],
    "six.with_metaclass": [
        "six.with_metaclass.metaclass"
    ],
    "six.with_metaclass.metaclass": [],
    "six.with_metaclass.metaclass.__new__": [
        "types.resolve_bases"
    ],
    "six.with_metaclass.metaclass.__prepare__": [],
    "six.add_metaclass": [],
    "six.add_metaclass.wrapper": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "six.ensure_binary": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "six.ensure_str": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "six.ensure_text": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "six.python_2_unicode_compatible": [
        "<builtin>.ValueError"
    ],
    "six.python_2_unicode_compatible.<lambda1>": [],
    "sys.meta_path.append": [],
    "cryptography.hazmat.primitives.ciphers.modes.Mode": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.Mode.name": [],
    "cryptography.hazmat.primitives.ciphers.modes.Mode.validate_for_algorithm": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector.initialization_vector": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak.tweak": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce.nonce": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag.tag": [],
    "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_iv_length": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_nonce_length": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "cryptography.exceptions.UnsupportedAlgorithm.__init__": [
        "<builtin>.super"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_iv_and_key_length": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.primitives.ciphers.modes._check_iv_length",
        "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CBC": [],
    "cryptography.utils._check_byteslike": [
        "<builtin>.memoryview",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CBC.initialization_vector": [],
    "cryptography.hazmat.primitives.ciphers.modes.XTS": [],
    "cryptography.hazmat.primitives.ciphers.modes.XTS.__init__": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.XTS.tweak": [],
    "cryptography.hazmat.primitives.ciphers.modes.XTS.validate_for_algorithm": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ECB": [],
    "cryptography.hazmat.primitives.ciphers.modes.OFB": [],
    "cryptography.hazmat.primitives.ciphers.modes.OFB.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.OFB.initialization_vector": [],
    "cryptography.hazmat.primitives.ciphers.modes.CFB": [],
    "cryptography.hazmat.primitives.ciphers.modes.CFB.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB.initialization_vector": [],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8": [],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8.initialization_vector": [],
    "cryptography.hazmat.primitives.ciphers.modes.CTR": [],
    "cryptography.hazmat.primitives.ciphers.modes.CTR.nonce": [],
    "cryptography.hazmat.primitives.ciphers.modes.CTR.validate_for_algorithm": [
        "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length",
        "cryptography.hazmat.primitives.ciphers.modes._check_nonce_length"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM": [],
    "cryptography.hazmat.primitives.ciphers.modes.GCM.__init__": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "cryptography.utils._check_bytes"
    ],
    "cryptography.utils._check_bytes": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM.tag": [],
    "cryptography.hazmat.primitives.ciphers.modes.GCM.initialization_vector": [],
    "cryptography.hazmat.primitives.ciphers.modes.GCM.validate_for_algorithm": [
        "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.utils.CryptographyDeprecationWarning": [],
    "cryptography.utils.int_to_bytes": [],
    "cryptography.utils.InterfaceNotImplemented": [],
    "cryptography.utils.strip_annotation": [
        "inspect.Signature.__init__"
    ],
    "cryptography.utils.verify_interface": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "inspect.signature",
        "cryptography.utils.strip_annotation"
    ],
    "cryptography.utils._DeprecatedValue": [],
    "cryptography.utils._DeprecatedValue.__init__": [],
    "cryptography.utils._ModuleWithDeprecations": [],
    "cryptography.utils._ModuleWithDeprecations.__init__": [
        "<builtin>.super"
    ],
    "cryptography.utils._ModuleWithDeprecations.__getattr__": [
        "<builtin>.getattr",
        "warnings.warn",
        "<builtin>.isinstance"
    ],
    "cryptography.utils._ModuleWithDeprecations.__setattr__": [
        "<builtin>.setattr"
    ],
    "cryptography.utils._ModuleWithDeprecations.__delattr__": [
        "<builtin>.getattr",
        "warnings.warn",
        "<builtin>.delattr",
        "<builtin>.isinstance"
    ],
    "cryptography.utils._ModuleWithDeprecations.__dir__": [
        "<builtin>.dir"
    ],
    "cryptography.utils.deprecated": [
        "cryptography.utils._DeprecatedValue.__init__",
        "<builtin>.setattr",
        "cryptography.utils._ModuleWithDeprecations.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.utils.cached_property": [
        "<builtin>.object",
        "<builtin>.property"
    ],
    "cryptography.utils.cached_property.inner": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "cryptography.utils.Enum": [],
    "cryptography.utils.Enum.__repr__": [],
    "cryptography.utils.Enum.__str__": [],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm.name": [],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm.key_sizes": [],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm.key_size": [],
    "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm.block_size": [],
    "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES128": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES128.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES256": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES256.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish": [
        "<builtin>.frozenset",
        "<builtin>.range"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5": [
        "<builtin>.frozenset",
        "<builtin>.range"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size",
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20.nonce": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4.key_size": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext.update": [],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext.update_into": [],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext.finalize": [],
    "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext.authenticate_additional_data": [],
    "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext.finalize_with_tag": [],
    "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext.tag": [],
    "cryptography.hazmat.primitives.ciphers.base.Cipher": [
        "typing.overload"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_encryption_ctx": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher._wrap_ctx": [
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.__init__",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_decryption_ctx": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.__init__": [],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext.__init__": [],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext": [],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update": [
        "<builtin>.len",
        "<builtin>.bytes",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update_into",
        "<builtin>.bytearray"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext.update_into": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update_into"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update_into": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "<builtin>.min",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext._check_limit": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update_into": [
        "<builtin>.len",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext._check_limit"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.authenticate_additional_data": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext.finalize_with_tag": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext.tag": [],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext": [],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.type",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_version_text"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.openssl_version_text": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors": [
        "cryptography.hazmat.bindings.openssl.binding._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.finalize_with_tag": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.finalize"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.authenticate_additional_data": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.tag": [],
    "cryptography.hazmat.backends.openssl.backend._RC2": [],
    "cryptography.hazmat.backends.openssl.backend.Backend": [
        "contextlib.contextmanager"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.__init__": [
        "cryptography.hazmat.bindings.openssl.binding.Binding.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers",
        "warnings.warn",
        "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled",
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.__init__": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers": [
        "itertools.product",
        "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__",
        "<builtin>.type"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine": [
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_builtin_random",
        "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.__repr__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_version_text"
    ],
    "cryptography.hazmat.bindings.openssl.binding._openssl_assert": [
        "cryptography.hazmat.bindings.openssl.binding._errors_with_text",
        "cryptography.exceptions.InternalError.__init__",
        "cryptography.hazmat.bindings.openssl.binding._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled.<lambda1>": [],
    "cryptography.hazmat.backends.openssl.backend.Backend._enable_fips": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._enable_fips",
        "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding._enable_fips": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.activate_builtin_random": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.osrandom_engine_implementation": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.openssl_version_number": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_hmac_ctx": [
        "cryptography.hazmat.backends.openssl.hmac._HMACContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.__init__": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm": [],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.hash_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.signature_hash_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.hash_supported",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.scrypt_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.hmac_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.hash_supported",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_hash_ctx": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.cipher_supported": [
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.pbkdf2_hmac_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.hmac_supported"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.derive_pbkdf2_hmac": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm"
    ],
    "cryptography.hazmat.bindings.openssl.binding._consume_errors": [
        "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text": [
        "cryptography.hazmat.bindings.openssl.binding._consume_errors_with_text"
    ],
    "cryptography.hazmat.bindings.openssl.binding._consume_errors_with_text": [
        "cryptography.hazmat.bindings.openssl.binding._errors_with_text",
        "cryptography.hazmat.bindings.openssl.binding._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.int"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_rsa_private_key": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.rsa._verify_rsa_parameters",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa._verify_rsa_parameters": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_rsa_parameters_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_rsa_private_numbers": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.primitives.asymmetric.rsa._check_private_key_components"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa._check_private_key_components": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_rsa_public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.primitives.asymmetric.rsa._check_public_key_components",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa._check_public_key_components": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__",
        "<builtin>.getattr",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_from_der_traditional_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._load_key"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__": [
        "cryptography.hazmat.backends.openssl.ec._sn_to_elliptic_curve",
        "cryptography.hazmat.backends.openssl.ec._mark_asn1_named_ec_curve",
        "cryptography.hazmat.backends.openssl.ec._ec_key_curve_sn",
        "cryptography.hazmat.backends.openssl.ec._check_key_infinity"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.__init__": [],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_public_key": [
        "<builtin>.getattr",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_public_key",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.__init__",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.__init__",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.__init__",
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_public_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__": [
        "cryptography.hazmat.backends.openssl.ec._sn_to_elliptic_curve",
        "cryptography.hazmat.backends.openssl.ec._mark_asn1_named_ec_curve",
        "cryptography.hazmat.backends.openssl.ec._ec_key_curve_sn",
        "cryptography.hazmat.backends.openssl.ec._check_key_infinity"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.__init__": [
        "cryptography.hazmat.backends.openssl.dh._get_dh_num_bits"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.__init__": [],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey.__init__": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__": [],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.__init__": [],
    "cryptography.hazmat.backends.openssl.backend.Backend._oaep_hash_supported": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.rsa_padding_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.hash_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend._oaep_hash_supported",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key_and_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_parameters"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_set_values": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey",
        "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_private_numbers",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_set_values"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_private_numbers": [
        "<builtin>.pow",
        "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_parameters",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_parameters",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend._dsa_cdata_set_values",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_parameters": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dsa_parameter_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.dsa._check_dsa_parameters",
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.dsa_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.dsa_hash_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.signature_hash_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.dsa_supported"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.cmac_algorithm_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.cipher_supported",
        "cryptography.hazmat.primitives.ciphers.modes.CBC.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_cmac_ctx": [
        "cryptography.hazmat.backends.openssl.cmac._CMACContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.cmac_algorithm_supported",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._load_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._load_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_public_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error",
        "cryptography.hazmat.backends.openssl.backend.Backend._rsa_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "<builtin>.any",
        "cryptography.hazmat.bindings.openssl.binding._errors_with_text"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error",
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__": [],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_from_der_traditional_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._handle_key_loading_error",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._cert2ossl": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ossl2cert": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._csr2ossl": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ossl2csr": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._crl2ossl": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ossl2crl": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._crl_is_signature_valid": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend._crl2ossl",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._csr_is_signature_valid": [
        "cryptography.hazmat.backends.openssl.backend.Backend._csr2ossl",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._check_keys_correspond": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.bindings.openssl.binding._errors_with_text": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._elliptic_curve_to_nid"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._elliptic_curve_to_nid": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_signature_algorithm_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_supported",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_elliptic_curve_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_supported",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve_nid",
        "cryptography.hazmat.backends.openssl.backend.Backend._elliptic_curve_to_nid"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_set_public_key_affine_coordinates",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_set_public_key_affine_coordinates": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_set_public_key_affine_coordinates",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_elliptic_curve_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.derive_elliptic_curve_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_determine_group_get_func",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_determine_group_get_func": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._ec_key_new_by_curve_nid": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_exchange_algorithm_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_supported",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes": [
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes_via_bio",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._bio_func_output",
        "<builtin>.len",
        "cryptography.hazmat.primitives.serialization.ssh._serialize_ssh_private_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._private_key_bytes_via_bio": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bio_func_output",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._bio_func_output": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._serialize_ssh_private_key": [
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.update_into",
        "cryptography.hazmat.primitives.serialization.ssh._ssh_pem_encode",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update_into",
        "<builtin>.isinstance",
        "cryptography.utils._check_bytes",
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.__init__",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.encryptor",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_raw",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.render",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_sshstr",
        "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.ssh._ecdsa_key_type",
        "cryptography.hazmat.primitives.serialization.ssh._init_cipher",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_u32",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.size",
        "<builtin>.bytearray"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes": [
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.serialization.ssh.serialize_ssh_public_key",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._bio_func_output"
    ],
    "cryptography.hazmat.primitives.serialization.ssh.serialize_ssh_public_key": [
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.tobytes",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.__init__",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_sshstr",
        "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.ssh._ecdsa_key_type"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.dh_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.dh._dh_params_dup"
    ],
    "cryptography.hazmat.backends.openssl.dh._dh_params_dup": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_private_key_and_parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_parameters",
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_private_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._dh_cdata_to_evp_pkey"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_dh_parameter_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.dh_parameters_supported": [
        "cryptography.hazmat.backends.openssl.backend.Backend._int_to_bn",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.dh_x942_serialization_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_bytearray"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_bytearray": [
        "cryptography.hazmat.backends.openssl.backend.Backend._zero_data",
        "<builtin>.bytearray"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_public_bytes": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x448_load_private_bytes": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x448_generate_key": [
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x448_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.utils._check_bytes",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_load_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.__init__",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed25519_generate_key": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed448_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.utils._check_bytes",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.__init__",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed448_load_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.ed448_generate_key": [
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.derive_scrypt": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "<builtin>.MemoryError"
    ],
    "<builtin>.MemoryError": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported": [
        "cryptography.hazmat.backends.openssl.aead._aead_cipher_name"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._zero_data": [
        "<builtin>.range"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_null_terminated_buf": [
        "cryptography.hazmat.backends.openssl.backend.Backend._zero_data",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_key_and_certificates_from_pkcs12": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_pkcs12"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pkcs12": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_null_terminated_buf",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._ossl2cert",
        "<builtin>.range",
        "<builtin>.reversed",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__init__": [
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.serialize_key_and_certificates_to_pkcs12": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "cryptography.utils._check_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._zeroed_null_terminated_buf",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend._cert2ossl"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.poly1305_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_poly1305_ctx": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.__init__": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_supported": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_pem_pkcs7_certificates": [
        "cryptography.utils._check_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._load_pkcs7_certificates"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._load_pkcs7_certificates": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._ossl2cert",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.range"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_pkcs7_certificates": [
        "cryptography.utils._check_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend._load_pkcs7_certificates"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_serialize_certificates": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._cert2ossl"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.pkcs7_sign": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend._cert2ossl"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName": [],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__call__": [],
    "cryptography.hazmat.backends.openssl.backend._get_xts_cipher": [],
    "cryptography.hazmat.backends.openssl.dh._dh_cdata_to_parameters": [
        "cryptography.hazmat.backends.openssl.dh._DHParameters.__init__",
        "cryptography.hazmat.backends.openssl.dh._dh_params_dup"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters": [],
    "cryptography.hazmat.backends.openssl.dh._DHParameters.parameter_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dh_private_key"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters.parameter_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.dh._get_dh_num_bits": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey": [],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.key_size": [
        "cryptography.hazmat.backends.openssl.dh._get_dh_num_bits"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.private_numbers": [
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.exchange": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey._exchange_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey._exchange_assert": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.parameters": [
        "cryptography.hazmat.backends.openssl.dh._dh_cdata_to_parameters"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey": [],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.key_size": [],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.public_numbers": [
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.parameters": [
        "cryptography.hazmat.backends.openssl.dh._dh_cdata_to_parameters"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey.public_bytes": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.p": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.g": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers.q": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.y": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers.parameter_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.public_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers.x": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters.generate_private_key": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters.parameter_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters.parameter_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey.parameters": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey.public_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey.public_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.public_key": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.parameters": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.exchange": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.private_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.private_bytes": [],
    "cryptography.hazmat.primitives._serialization.PBES": [],
    "cryptography.hazmat.primitives._serialization.Encoding": [],
    "cryptography.hazmat.primitives._serialization.PrivateFormat": [],
    "cryptography.hazmat.primitives._serialization.PrivateFormat.encryption_builder": [
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__": [],
    "cryptography.hazmat.primitives._serialization.PublicFormat": [],
    "cryptography.hazmat.primitives._serialization.ParameterFormat": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryption": [],
    "cryptography.hazmat.primitives._serialization.BestAvailableEncryption": [],
    "cryptography.hazmat.primitives._serialization.BestAvailableEncryption.__init__": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives._serialization.NoEncryption": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.kdf_rounds": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.hmac_hash": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.key_cert_algorithm": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.__init__"
    ],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder.build": [
        "cryptography.hazmat.primitives._serialization._KeySerializationEncryption.__init__",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives._serialization._KeySerializationEncryption.__init__": [],
    "cryptography.hazmat.primitives._serialization._KeySerializationEncryption": [],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm.name": [],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm.digest_size": [],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm.block_size": [],
    "cryptography.hazmat.primitives.hashes.HashContext": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.hashes.HashContext.algorithm": [],
    "cryptography.hazmat.primitives.hashes.HashContext.update": [],
    "cryptography.hazmat.primitives.hashes.HashContext.finalize": [],
    "cryptography.hazmat.primitives.hashes.HashContext.copy": [],
    "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction": [],
    "cryptography.hazmat.primitives.hashes.Hash": [],
    "cryptography.hazmat.primitives.hashes.Hash.algorithm": [],
    "cryptography.hazmat.primitives.hashes.Hash.update": [
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.update"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.update": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.copy": [
        "cryptography.hazmat.primitives.hashes.Hash.__init__",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.copy"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.copy": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.finalize": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext.finalize"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.finalize": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext._finalize_xof",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.hashes.SHA1": [],
    "cryptography.hazmat.primitives.hashes.SHA512_224": [],
    "cryptography.hazmat.primitives.hashes.SHA512_256": [],
    "cryptography.hazmat.primitives.hashes.SHA224": [],
    "cryptography.hazmat.primitives.hashes.SHA256": [],
    "cryptography.hazmat.primitives.hashes.SHA384": [],
    "cryptography.hazmat.primitives.hashes.SHA512": [],
    "cryptography.hazmat.primitives.hashes.SHA3_224": [],
    "cryptography.hazmat.primitives.hashes.SHA3_256": [],
    "cryptography.hazmat.primitives.hashes.SHA3_384": [],
    "cryptography.hazmat.primitives.hashes.SHA3_512": [],
    "cryptography.hazmat.primitives.hashes.SHAKE128": [],
    "cryptography.hazmat.primitives.hashes.SHAKE128.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE128.digest_size": [],
    "cryptography.hazmat.primitives.hashes.SHAKE256": [],
    "cryptography.hazmat.primitives.hashes.SHAKE256.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE256.digest_size": [],
    "cryptography.hazmat.primitives.hashes.MD5": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2b": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2b.__init__": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2b.digest_size": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2s": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2s.__init__": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2s.digest_size": [],
    "cryptography.hazmat.primitives.hashes.SM3": [],
    "cryptography.exceptions._Reasons": [],
    "cryptography.exceptions.UnsupportedAlgorithm": [],
    "cryptography.exceptions.AlreadyFinalized": [],
    "cryptography.exceptions.AlreadyUpdated": [],
    "cryptography.exceptions.NotYetFinalized": [],
    "cryptography.exceptions.InvalidTag": [],
    "cryptography.exceptions.InvalidSignature": [],
    "cryptography.exceptions.InternalError": [],
    "cryptography.exceptions.InternalError.__init__": [
        "<builtin>.super"
    ],
    "cryptography.exceptions.InvalidKey": [],
    "cryptography.hazmat.bindings.openssl": [],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError": [],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.__init__": [],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError._lib_reason_match": [],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.code": [],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.lib": [],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError.reason": [],
    "cryptography.hazmat.bindings.openssl.binding.build_conditional_library": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.set",
        "<builtin>.dir"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding": [],
    "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert",
        "cryptography.hazmat.bindings.openssl.binding.build_conditional_library",
        "cryptography.hazmat.bindings.openssl.binding.Binding._register_osrandom_engine"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding._register_osrandom_engine": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version": [
        "warnings.warn"
    ],
    "cryptography.hazmat.bindings.openssl.binding._verify_package_version": [
        "<builtin>.ImportError"
    ],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ec2m": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl3_method": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_110_verification_params": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_set_cert_cb": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl_st": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_tls_st": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_scrypt": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_evp_pkey_dhx": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_mem_functions": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_x509_store_ctx_get_issuer": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ed448": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ed25519": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_poly1305": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_oneshot_evp_digest_sign_verify": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_evp_digestfinal_xof": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_evp_pkey_get_set_tls_encodedpoint": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_fips": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl_sigalgs": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_psk": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_psk_tlsv13": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_custom_ext": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_openssl_cleanup": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_tlsv13": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_tlsv13_functions": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_keylog": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_raw_key": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_engine": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_verified_chain": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_srtp": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_get_proto_version": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_providers": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_op_no_renegotiation": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_dtls_get_data_mtu": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_300_fips": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl_cookie": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_pkcs7_funcs": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_bn_flags": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_evp_pkey_dh": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_300_evp_cipher": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_unexpected_eof_while_reading": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_pkcs12_set_mac": [],
    "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl_op_ignore_unexpected_eof": [],
    "cryptography.hazmat.primitives.serialization.ssh._bcrypt_kdf": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._ecdsa_key_type": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._ssh_pem_encode": [],
    "cryptography.hazmat.primitives.serialization.ssh._check_block_size": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._check_empty": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._init_cipher": [
        "bcrypt.kdf",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._get_u32": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._get_u64": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._get_sshstr": [
        "<builtin>.len",
        "cryptography.hazmat.primitives.serialization.ssh._get_u32",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._get_mpint": [
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._to_mpint": [
        "cryptography.utils.int_to_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList": [],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.__init__": [],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.put_raw": [],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.put_u32": [],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.put_sshstr": [
        "<builtin>.len",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_u32",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.size"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.size": [
        "<builtin>.map",
        "<builtin>.sum"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.put_mpint": [
        "cryptography.hazmat.primitives.serialization.ssh._FragList.put_sshstr",
        "cryptography.hazmat.primitives.serialization.ssh._to_mpint"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.render": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList.tobytes": [
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.render",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.size",
        "<builtin>.bytearray"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.get_public": [
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.load_public": [
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.public_key",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.get_public"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.load_private": [
        "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmp1",
        "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmq1",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.private_key",
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmp1": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_dmq1": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.encode_public": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA.encode_private": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.get_public": [
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.load_public": [
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA._validate",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.public_key",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.get_public"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA._validate": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.load_private": [
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA._validate",
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.private_key",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.get_public",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__init__"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.encode_public": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA._validate"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.encode_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA.encode_public"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.get_public": [
        "<builtin>.NotImplementedError",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.load_public": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.get_public",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.from_encoded_point"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.load_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.get_public",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.asymmetric.ec.derive_private_key",
        "cryptography.hazmat.primitives.serialization.ssh._get_mpint"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.encode_public": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.encode_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.encode_public"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.get_public": [
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.load_public": [
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey.from_public_bytes",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.get_public"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.load_private": [
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.from_private_bytes",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.get_public",
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.encode_public": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.encode_private": [
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519.encode_public",
        "cryptography.hazmat.primitives.serialization.ssh._FragList.__init__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat": [
        "<builtin>.memoryview",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.ssh.load_ssh_private_key": [
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.update",
        "cryptography.hazmat.primitives.serialization.ssh._get_u32",
        "cryptography.utils._check_bytes",
        "<builtin>.memoryview",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor",
        "cryptography.hazmat.primitives.serialization.ssh._check_block_size",
        "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.primitives.serialization.ssh._init_cipher",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext.update",
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr",
        "cryptography.hazmat.primitives.serialization.ssh._check_empty"
    ],
    "cryptography.hazmat.primitives.serialization.ssh.load_ssh_public_key": [
        "cryptography.hazmat.primitives.serialization.ssh._get_u64",
        "cryptography.hazmat.primitives.serialization.ssh._get_u32",
        "<builtin>.memoryview",
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.primitives.serialization.ssh._lookup_kformat",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.primitives.serialization.ssh._get_sshstr",
        "cryptography.hazmat.primitives.serialization.ssh._check_empty"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey.public_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey.verify": [],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.public_key": [],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.private_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey.sign": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve.name": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm.algorithm": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.exchange": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.public_key": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.curve": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.sign": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.private_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.private_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.curve": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.public_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.public_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.verify": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA": [],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA.algorithm": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.encode_point": [
        "warnings.warn",
        "cryptography.utils.int_to_bytes"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.from_encoded_point": [
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__init__",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.curve": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.x": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.y": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers.__repr__": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.private_value": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.public_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDH": [],
    "cryptography.hazmat.primitives.asymmetric.ec.get_curve_for_oid": [
        "<builtin>.LookupError"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils.Prehashed": [],
    "cryptography.hazmat.primitives.asymmetric.utils.Prehashed.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils.Prehashed.digest_size": [],
    "cryptography.hazmat._oid.ExtensionOID": [],
    "cryptography.hazmat._oid.OCSPExtensionOID": [],
    "cryptography.hazmat._oid.CRLEntryExtensionOID": [],
    "cryptography.hazmat._oid.NameOID": [],
    "cryptography.hazmat._oid.SignatureAlgorithmOID": [],
    "cryptography.hazmat._oid.ExtendedKeyUsageOID": [],
    "cryptography.hazmat._oid.AuthorityInformationAccessOID": [],
    "cryptography.hazmat._oid.SubjectInformationAccessOID": [],
    "cryptography.hazmat._oid.CertificatePoliciesOID": [],
    "cryptography.hazmat._oid.AttributeOID": [],
    "bcrypt.gensalt": [
        "<builtin>.ValueError"
    ],
    "bcrypt.hashpw": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "bcrypt.checkpw": [
        "bcrypt.hashpw",
        "hmac.compare_digest",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "hmac.compare_digest": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters.generate_private_key": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters.parameter_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey.public_key": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey.parameters": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey.sign": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey.private_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey.private_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey.parameters": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey.public_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey.public_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey.verify": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.p": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.q": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.g": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__repr__": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.y": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.parameter_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__repr__": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.x": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.public_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "<builtin>.pow": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey.decrypt": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey.public_key": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey.sign": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey.private_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey.private_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey.encrypt": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey.key_size": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey.public_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey.public_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey.verify": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey.recover_data_from_signature": [],
    "cryptography.hazmat.primitives.asymmetric.rsa._modinv": [
        "<builtin>.divmod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_crt_iqmp": [
        "cryptography.hazmat.primitives.asymmetric.rsa._modinv"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.rsa_recover_prime_factors": [
        "<builtin>.divmod",
        "<builtin>.pow",
        "<builtin>.ValueError",
        "<builtin>.sorted"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.p": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.q": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.d": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.dmp1": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.dmq1": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.iqmp": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.public_numbers": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.e": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.n": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__repr__": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding": [
        "abc.abstractproperty"
    ],
    "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding.name": [],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey.public_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.public_key": [],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.private_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.exchange": [],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey.public_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.public_key": [],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.private_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.exchange": [],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey.public_bytes": [],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey.verify": [],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey.public_key": [],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey.sign": [],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey.private_bytes": [],
    "cryptography.hazmat.primitives.asymmetric": [],
    "cryptography.hazmat.backends.openssl.ec._check_signature_algorithm": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.backends.openssl.ec._ec_key_curve_sn": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ec._mark_asn1_named_ec_curve": [],
    "cryptography.hazmat.backends.openssl.ec._check_key_infinity": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ec._sn_to_elliptic_curve": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.ec._ecdsa_sig_sign": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ec._ecdsa_sig_verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey": [],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.curve": [],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.key_size": [],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.exchange": [
        "cryptography.hazmat.backends.openssl.backend.Backend.elliptic_curve_exchange_algorithm_supported",
        "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.private_numbers": [
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_numbers",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key"
    ],
    "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm": [
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.hashes.Hash.__init__",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.hashes.Hash.update",
        "<builtin>.len",
        "cryptography.hazmat.primitives.hashes.Hash.finalize"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey": [],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.curve": [],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.key_size": [],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey._encode_point": [
        "cryptography.hazmat.backends.openssl.backend.Backend._tmp_bn_ctx",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey._encode_point",
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.rsa._get_rsa_pss_salt_length": [
        "cryptography.hazmat.primitives.asymmetric.padding.calculate_max_pss_salt_length",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.calculate_max_pss_salt_length": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa": [
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend.rsa_padding_supported",
        "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa_pkey_ctx"
    ],
    "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa_pkey_ctx": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_determine_padding": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.rsa._get_rsa_pss_salt_length",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_determine_padding",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_sign": [
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors_with_text",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_verify": [
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_recover": [
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey": [],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._non_threadsafe_enable_blinding"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._non_threadsafe_enable_blinding": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.key_size": [],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.decrypt": [
        "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa",
        "<builtin>.len",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_numbers": [
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey": [],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.key_size": [],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.encrypt": [
        "cryptography.hazmat.backends.openssl.rsa._enc_dec_rsa"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.public_numbers": [
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.verify": [
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_verify"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.recover_data_from_signature": [
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_recover",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15": [],
    "cryptography.hazmat.primitives.asymmetric.padding._MaxLength": [],
    "cryptography.hazmat.primitives.asymmetric.padding._Auto": [],
    "cryptography.hazmat.primitives.asymmetric.padding._DigestLength": [],
    "cryptography.hazmat.primitives.asymmetric.padding.PSS": [],
    "cryptography.hazmat.primitives.asymmetric.padding.PSS.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP": [],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.AttributeNotFound": [],
    "cryptography.x509.base.AttributeNotFound.__init__": [
        "<builtin>.super"
    ],
    "cryptography.x509.base._reject_duplicate_extension": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base._reject_duplicate_attribute": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base._convert_to_naive_utc_time": [],
    "cryptography.x509.base.Attribute": [],
    "cryptography.x509.base.Attribute.__init__": [],
    "cryptography.x509.base.Attribute.oid": [],
    "cryptography.x509.base.Attribute.value": [],
    "cryptography.x509.base.Attribute.__repr__": [],
    "cryptography.x509.base.Attribute.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.base.Attribute.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.base.Attributes": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.base.Attributes.__init__": [
        "<builtin>.list"
    ],
    "cryptography.x509.extensions._make_sequence_methods": [],
    "cryptography.x509.base.Attributes.__repr__": [],
    "cryptography.x509.base.Attributes.get_attribute_for_oid": [
        "cryptography.x509.base.AttributeNotFound.__init__"
    ],
    "cryptography.x509.base.Version": [],
    "cryptography.x509.base.InvalidVersion": [],
    "cryptography.x509.base.InvalidVersion.__init__": [
        "<builtin>.super"
    ],
    "cryptography.x509.base.Certificate": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.x509.base.Certificate.fingerprint": [],
    "cryptography.x509.base.Certificate.serial_number": [],
    "cryptography.x509.base.Certificate.version": [],
    "cryptography.x509.base.Certificate.public_key": [],
    "cryptography.x509.base.Certificate.not_valid_before": [],
    "cryptography.x509.base.Certificate.not_valid_after": [],
    "cryptography.x509.base.Certificate.issuer": [],
    "cryptography.x509.base.Certificate.subject": [],
    "cryptography.x509.base.Certificate.signature_hash_algorithm": [],
    "cryptography.x509.base.Certificate.signature_algorithm_oid": [],
    "cryptography.x509.base.Certificate.extensions": [],
    "cryptography.x509.base.Certificate.signature": [],
    "cryptography.x509.base.Certificate.tbs_certificate_bytes": [],
    "cryptography.x509.base.Certificate.tbs_precertificate_bytes": [],
    "cryptography.x509.base.Certificate.__eq__": [],
    "cryptography.x509.base.Certificate.__hash__": [],
    "cryptography.x509.base.Certificate.public_bytes": [],
    "cryptography.x509.base.RevokedCertificate": [
        "abc.abstractproperty"
    ],
    "cryptography.x509.base.RevokedCertificate.serial_number": [],
    "cryptography.x509.base.RevokedCertificate.revocation_date": [],
    "cryptography.x509.base.RevokedCertificate.extensions": [],
    "cryptography.x509.base._RawRevokedCertificate": [],
    "cryptography.x509.base._RawRevokedCertificate.__init__": [],
    "cryptography.x509.base._RawRevokedCertificate.serial_number": [],
    "cryptography.x509.base._RawRevokedCertificate.revocation_date": [],
    "cryptography.x509.base._RawRevokedCertificate.extensions": [],
    "cryptography.x509.base.CertificateRevocationList": [
        "typing.overload",
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.x509.base.CertificateRevocationList.public_bytes": [],
    "cryptography.x509.base.CertificateRevocationList.fingerprint": [],
    "cryptography.x509.base.CertificateRevocationList.get_revoked_certificate_by_serial_number": [],
    "cryptography.x509.base.CertificateRevocationList.signature_hash_algorithm": [],
    "cryptography.x509.base.CertificateRevocationList.signature_algorithm_oid": [],
    "cryptography.x509.base.CertificateRevocationList.issuer": [],
    "cryptography.x509.base.CertificateRevocationList.next_update": [],
    "cryptography.x509.base.CertificateRevocationList.last_update": [],
    "cryptography.x509.base.CertificateRevocationList.extensions": [],
    "cryptography.x509.base.CertificateRevocationList.signature": [],
    "cryptography.x509.base.CertificateRevocationList.tbs_certlist_bytes": [],
    "cryptography.x509.base.CertificateRevocationList.__eq__": [],
    "cryptography.x509.base.CertificateRevocationList.__len__": [],
    "cryptography.x509.base.CertificateRevocationList.__getitem__": [],
    "cryptography.x509.base.CertificateRevocationList.__iter__": [],
    "cryptography.x509.base.CertificateRevocationList.is_signature_valid": [],
    "cryptography.x509.base.CertificateSigningRequest": [
        "abc.abstractmethod",
        "abc.abstractproperty"
    ],
    "cryptography.x509.base.CertificateSigningRequest.__eq__": [],
    "cryptography.x509.base.CertificateSigningRequest.__hash__": [],
    "cryptography.x509.base.CertificateSigningRequest.public_key": [],
    "cryptography.x509.base.CertificateSigningRequest.subject": [],
    "cryptography.x509.base.CertificateSigningRequest.signature_hash_algorithm": [],
    "cryptography.x509.base.CertificateSigningRequest.signature_algorithm_oid": [],
    "cryptography.x509.base.CertificateSigningRequest.extensions": [],
    "cryptography.x509.base.CertificateSigningRequest.attributes": [],
    "cryptography.x509.base.CertificateSigningRequest.public_bytes": [],
    "cryptography.x509.base.CertificateSigningRequest.signature": [],
    "cryptography.x509.base.CertificateSigningRequest.tbs_certrequest_bytes": [],
    "cryptography.x509.base.CertificateSigningRequest.is_signature_valid": [],
    "cryptography.x509.base.CertificateSigningRequest.get_attribute_for_oid": [],
    "cryptography.x509.base.load_pem_x509_certificate": [],
    "cryptography.x509.base.load_der_x509_certificate": [],
    "cryptography.x509.base.load_pem_x509_csr": [],
    "cryptography.x509.base.load_der_x509_csr": [],
    "cryptography.x509.base.load_pem_x509_crl": [],
    "cryptography.x509.base.load_der_x509_crl": [],
    "cryptography.x509.base.CertificateSigningRequestBuilder": [],
    "cryptography.x509.base.CertificateSigningRequestBuilder.__init__": [],
    "cryptography.x509.base.CertificateSigningRequestBuilder.subject_name": [
        "cryptography.x509.base.CertificateSigningRequestBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder.add_extension": [
        "<builtin>.isinstance",
        "cryptography.x509.base._reject_duplicate_extension",
        "<builtin>.TypeError",
        "cryptography.x509.extensions.Extension.__init__",
        "cryptography.x509.base.CertificateSigningRequestBuilder.__init__"
    ],
    "cryptography.x509.extensions.Extension.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder.add_attribute": [
        "cryptography.x509.base.CertificateSigningRequestBuilder.__init__",
        "cryptography.x509.base._reject_duplicate_attribute",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder.sign": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateBuilder": [],
    "cryptography.x509.base.CertificateBuilder.__init__": [],
    "cryptography.x509.base.CertificateBuilder.issuer_name": [
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateBuilder.subject_name": [
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateBuilder.public_key": [
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateBuilder.serial_number": [
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateBuilder.not_valid_before": [
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.x509.base._convert_to_naive_utc_time"
    ],
    "cryptography.x509.base.CertificateBuilder.not_valid_after": [
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.x509.base._convert_to_naive_utc_time"
    ],
    "cryptography.x509.base.CertificateBuilder.add_extension": [
        "<builtin>.isinstance",
        "cryptography.x509.base._reject_duplicate_extension",
        "cryptography.x509.base.CertificateBuilder.__init__",
        "<builtin>.TypeError",
        "cryptography.x509.extensions.Extension.__init__"
    ],
    "cryptography.x509.base.CertificateBuilder.sign": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder": [],
    "cryptography.x509.base.CertificateRevocationListBuilder.__init__": [],
    "cryptography.x509.base.CertificateRevocationListBuilder.issuer_name": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.last_update": [
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.x509.base._convert_to_naive_utc_time"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.next_update": [
        "<builtin>.isinstance",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.x509.base._convert_to_naive_utc_time"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.add_extension": [
        "<builtin>.isinstance",
        "cryptography.x509.base._reject_duplicate_extension",
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "<builtin>.TypeError",
        "cryptography.x509.extensions.Extension.__init__"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.add_revoked_certificate": [
        "cryptography.x509.base.CertificateRevocationListBuilder.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder.sign": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder": [],
    "cryptography.x509.base.RevokedCertificateBuilder.__init__": [],
    "cryptography.x509.base.RevokedCertificateBuilder.serial_number": [
        "cryptography.x509.base.RevokedCertificateBuilder.__init__",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder.revocation_date": [
        "cryptography.x509.base.RevokedCertificateBuilder.__init__",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.x509.base._convert_to_naive_utc_time"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder.add_extension": [
        "cryptography.x509.base.RevokedCertificateBuilder.__init__",
        "<builtin>.isinstance",
        "cryptography.x509.base._reject_duplicate_extension",
        "<builtin>.TypeError",
        "cryptography.x509.extensions.Extension.__init__"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder.build": [
        "cryptography.x509.extensions.Extensions.__init__",
        "<builtin>.ValueError",
        "cryptography.x509.base._RawRevokedCertificate.__init__"
    ],
    "cryptography.x509.extensions.Extensions.__init__": [
        "<builtin>.list"
    ],
    "cryptography.x509.base.random_serial_number": [],
    "cryptography.x509.extensions._key_identifier_from_public_key": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions._make_sequence_methods.len_method": [
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "cryptography.x509.extensions._make_sequence_methods.iter_method": [
        "<builtin>.getattr",
        "<builtin>.iter"
    ],
    "cryptography.x509.extensions._make_sequence_methods.getitem_method": [
        "<builtin>.getattr"
    ],
    "cryptography.x509.extensions.DuplicateExtension": [],
    "cryptography.x509.extensions.DuplicateExtension.__init__": [
        "<builtin>.super"
    ],
    "cryptography.x509.extensions.ExtensionNotFound": [],
    "cryptography.x509.extensions.ExtensionNotFound.__init__": [
        "<builtin>.super"
    ],
    "cryptography.x509.extensions.ExtensionType": [],
    "cryptography.x509.extensions.ExtensionType.public_bytes": [
        "<builtin>.NotImplementedError"
    ],
    "cryptography.x509.extensions.Extensions": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.Extensions.get_extension_for_oid": [
        "cryptography.x509.extensions.ExtensionNotFound.__init__"
    ],
    "cryptography.x509.extensions.Extensions.get_extension_for_class": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "cryptography.x509.extensions.ExtensionNotFound.__init__"
    ],
    "cryptography.x509.extensions.Extensions.__repr__": [],
    "cryptography.x509.extensions.CRLNumber": [],
    "cryptography.x509.extensions.CRLNumber.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.CRLNumber.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CRLNumber.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.CRLNumber.__repr__": [],
    "cryptography.x509.extensions.CRLNumber.crl_number": [],
    "cryptography.x509.extensions.CRLNumber.public_bytes": [],
    "cryptography.x509.extensions.AuthorityKeyIdentifier": [],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.from_issuer_public_key": [
        "cryptography.x509.extensions.AuthorityKeyIdentifier.__init__",
        "cryptography.x509.extensions._key_identifier_from_public_key"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.from_issuer_subject_key_identifier": [
        "cryptography.x509.extensions.AuthorityKeyIdentifier.__init__"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.__repr__": [],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.key_identifier": [],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.authority_cert_issuer": [],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.authority_cert_serial_number": [],
    "cryptography.x509.extensions.AuthorityKeyIdentifier.public_bytes": [],
    "cryptography.x509.extensions.SubjectKeyIdentifier": [],
    "cryptography.x509.extensions.SubjectKeyIdentifier.__init__": [],
    "cryptography.x509.extensions.SubjectKeyIdentifier.from_public_key": [
        "cryptography.x509.extensions._key_identifier_from_public_key",
        "cryptography.x509.extensions.SubjectKeyIdentifier.__init__"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier.digest": [],
    "cryptography.x509.extensions.SubjectKeyIdentifier.key_identifier": [],
    "cryptography.x509.extensions.SubjectKeyIdentifier.__repr__": [],
    "cryptography.x509.extensions.SubjectKeyIdentifier.__eq__": [
        "cryptography.hazmat.primitives.constant_time.bytes_eq",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.constant_time.bytes_eq": [
        "hmac.compare_digest",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier.public_bytes": [],
    "cryptography.x509.extensions.AuthorityInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess.__repr__": [],
    "cryptography.x509.extensions.AuthorityInformationAccess.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess.public_bytes": [],
    "cryptography.x509.extensions.SubjectInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess.__repr__": [],
    "cryptography.x509.extensions.SubjectInformationAccess.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess.public_bytes": [],
    "cryptography.x509.extensions.AccessDescription": [],
    "cryptography.x509.extensions.AccessDescription.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.AccessDescription.__repr__": [],
    "cryptography.x509.extensions.AccessDescription.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.AccessDescription.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.AccessDescription.access_method": [],
    "cryptography.x509.extensions.AccessDescription.access_location": [],
    "cryptography.x509.extensions.BasicConstraints": [],
    "cryptography.x509.extensions.BasicConstraints.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.BasicConstraints.ca": [],
    "cryptography.x509.extensions.BasicConstraints.path_length": [],
    "cryptography.x509.extensions.BasicConstraints.__repr__": [],
    "cryptography.x509.extensions.BasicConstraints.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.BasicConstraints.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.BasicConstraints.public_bytes": [],
    "cryptography.x509.extensions.DeltaCRLIndicator": [],
    "cryptography.x509.extensions.DeltaCRLIndicator.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator.crl_number": [],
    "cryptography.x509.extensions.DeltaCRLIndicator.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator.__repr__": [],
    "cryptography.x509.extensions.DeltaCRLIndicator.public_bytes": [],
    "cryptography.x509.extensions.CRLDistributionPoints": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints.__repr__": [],
    "cryptography.x509.extensions.CRLDistributionPoints.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints.public_bytes": [],
    "cryptography.x509.extensions.FreshestCRL": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.FreshestCRL.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.FreshestCRL.__repr__": [],
    "cryptography.x509.extensions.FreshestCRL.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.FreshestCRL.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.FreshestCRL.public_bytes": [],
    "cryptography.x509.extensions.DistributionPoint": [],
    "cryptography.x509.extensions.DistributionPoint.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.DistributionPoint.__repr__": [],
    "cryptography.x509.extensions.DistributionPoint.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.DistributionPoint.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.DistributionPoint.full_name": [],
    "cryptography.x509.extensions.DistributionPoint.relative_name": [],
    "cryptography.x509.extensions.DistributionPoint.reasons": [],
    "cryptography.x509.extensions.DistributionPoint.crl_issuer": [],
    "cryptography.x509.extensions.ReasonFlags": [],
    "cryptography.x509.extensions.PolicyConstraints": [],
    "cryptography.x509.extensions.PolicyConstraints.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.PolicyConstraints.__repr__": [],
    "cryptography.x509.extensions.PolicyConstraints.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.PolicyConstraints.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.PolicyConstraints.require_explicit_policy": [],
    "cryptography.x509.extensions.PolicyConstraints.inhibit_policy_mapping": [],
    "cryptography.x509.extensions.PolicyConstraints.public_bytes": [],
    "cryptography.x509.extensions.CertificatePolicies": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CertificatePolicies.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.CertificatePolicies.__repr__": [],
    "cryptography.x509.extensions.CertificatePolicies.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CertificatePolicies.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.CertificatePolicies.public_bytes": [],
    "cryptography.x509.extensions.PolicyInformation": [],
    "cryptography.x509.extensions.PolicyInformation.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.PolicyInformation.__repr__": [],
    "cryptography.x509.extensions.PolicyInformation.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.PolicyInformation.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.PolicyInformation.policy_identifier": [],
    "cryptography.x509.extensions.PolicyInformation.policy_qualifiers": [],
    "cryptography.x509.extensions.UserNotice": [],
    "cryptography.x509.extensions.UserNotice.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.UserNotice.__repr__": [],
    "cryptography.x509.extensions.UserNotice.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.UserNotice.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.UserNotice.notice_reference": [],
    "cryptography.x509.extensions.UserNotice.explicit_text": [],
    "cryptography.x509.extensions.NoticeReference": [],
    "cryptography.x509.extensions.NoticeReference.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.NoticeReference.__repr__": [],
    "cryptography.x509.extensions.NoticeReference.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.NoticeReference.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.NoticeReference.organization": [],
    "cryptography.x509.extensions.NoticeReference.notice_numbers": [],
    "cryptography.x509.extensions.ExtendedKeyUsage": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage.__repr__": [],
    "cryptography.x509.extensions.ExtendedKeyUsage.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage.public_bytes": [],
    "cryptography.x509.extensions.OCSPNoCheck": [],
    "cryptography.x509.extensions.OCSPNoCheck.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.OCSPNoCheck.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.OCSPNoCheck.__repr__": [],
    "cryptography.x509.extensions.OCSPNoCheck.public_bytes": [],
    "cryptography.x509.extensions.PrecertPoison": [],
    "cryptography.x509.extensions.PrecertPoison.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.PrecertPoison.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.PrecertPoison.__repr__": [],
    "cryptography.x509.extensions.PrecertPoison.public_bytes": [],
    "cryptography.x509.extensions.TLSFeature": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.TLSFeature.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "cryptography.x509.extensions.TLSFeature.__repr__": [],
    "cryptography.x509.extensions.TLSFeature.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.TLSFeature.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.TLSFeature.public_bytes": [],
    "cryptography.x509.extensions.TLSFeatureType": [],
    "cryptography.x509.extensions.InhibitAnyPolicy": [],
    "cryptography.x509.extensions.InhibitAnyPolicy.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.InhibitAnyPolicy.__repr__": [],
    "cryptography.x509.extensions.InhibitAnyPolicy.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.InhibitAnyPolicy.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.InhibitAnyPolicy.skip_certs": [],
    "cryptography.x509.extensions.InhibitAnyPolicy.public_bytes": [],
    "cryptography.x509.extensions.KeyUsage": [],
    "cryptography.x509.extensions.KeyUsage.__init__": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.KeyUsage.digital_signature": [],
    "cryptography.x509.extensions.KeyUsage.content_commitment": [],
    "cryptography.x509.extensions.KeyUsage.key_encipherment": [],
    "cryptography.x509.extensions.KeyUsage.data_encipherment": [],
    "cryptography.x509.extensions.KeyUsage.key_agreement": [],
    "cryptography.x509.extensions.KeyUsage.key_cert_sign": [],
    "cryptography.x509.extensions.KeyUsage.crl_sign": [],
    "cryptography.x509.extensions.KeyUsage.encipher_only": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.KeyUsage.decipher_only": [
        "<builtin>.ValueError"
    ],
    "cryptography.x509.extensions.KeyUsage.__repr__": [],
    "cryptography.x509.extensions.KeyUsage.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.KeyUsage.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.KeyUsage.public_bytes": [],
    "cryptography.x509.extensions.NameConstraints": [],
    "cryptography.x509.extensions.NameConstraints.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "cryptography.x509.extensions.NameConstraints._validate_ip_name"
    ],
    "cryptography.x509.extensions.NameConstraints._validate_ip_name": [
        "<builtin>.isinstance",
        "<builtin>.any",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.NameConstraints.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.NameConstraints.__repr__": [],
    "cryptography.x509.extensions.NameConstraints.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.NameConstraints.permitted_subtrees": [],
    "cryptography.x509.extensions.NameConstraints.excluded_subtrees": [],
    "cryptography.x509.extensions.NameConstraints.public_bytes": [],
    "cryptography.x509.extensions.Extension": [],
    "cryptography.x509.extensions.Extension.oid": [],
    "cryptography.x509.extensions.Extension.critical": [],
    "cryptography.x509.extensions.Extension.value": [],
    "cryptography.x509.extensions.Extension.__repr__": [],
    "cryptography.x509.extensions.Extension.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.Extension.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.GeneralNames": [
        "cryptography.x509.extensions._make_sequence_methods",
        "typing.overload"
    ],
    "cryptography.x509.extensions.GeneralNames.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.GeneralNames.get_values_for_type": [
        "<builtin>.list",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.GeneralNames.__repr__": [],
    "cryptography.x509.extensions.GeneralNames.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.GeneralNames.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName": [
        "cryptography.x509.extensions._make_sequence_methods",
        "typing.overload"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName.__init__": [
        "cryptography.x509.extensions.GeneralNames.__init__"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName.get_values_for_type": [
        "cryptography.x509.extensions.GeneralNames.get_values_for_type"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName.__repr__": [],
    "cryptography.x509.extensions.SubjectAlternativeName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName.public_bytes": [],
    "cryptography.x509.extensions.IssuerAlternativeName": [
        "cryptography.x509.extensions._make_sequence_methods",
        "typing.overload"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName.__init__": [
        "cryptography.x509.extensions.GeneralNames.__init__"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName.get_values_for_type": [
        "cryptography.x509.extensions.GeneralNames.get_values_for_type"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName.__repr__": [],
    "cryptography.x509.extensions.IssuerAlternativeName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName.public_bytes": [],
    "cryptography.x509.extensions.CertificateIssuer": [
        "cryptography.x509.extensions._make_sequence_methods",
        "typing.overload"
    ],
    "cryptography.x509.extensions.CertificateIssuer.__init__": [
        "cryptography.x509.extensions.GeneralNames.__init__"
    ],
    "cryptography.x509.extensions.CertificateIssuer.get_values_for_type": [
        "cryptography.x509.extensions.GeneralNames.get_values_for_type"
    ],
    "cryptography.x509.extensions.CertificateIssuer.__repr__": [],
    "cryptography.x509.extensions.CertificateIssuer.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CertificateIssuer.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.CertificateIssuer.public_bytes": [],
    "cryptography.x509.extensions.CRLReason": [],
    "cryptography.x509.extensions.CRLReason.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.CRLReason.__repr__": [],
    "cryptography.x509.extensions.CRLReason.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.CRLReason.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.CRLReason.reason": [],
    "cryptography.x509.extensions.CRLReason.public_bytes": [],
    "cryptography.x509.extensions.InvalidityDate": [],
    "cryptography.x509.extensions.InvalidityDate.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.InvalidityDate.__repr__": [],
    "cryptography.x509.extensions.InvalidityDate.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.InvalidityDate.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.InvalidityDate.invalidity_date": [],
    "cryptography.x509.extensions.InvalidityDate.public_bytes": [],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.__repr__": [
        "<builtin>.list"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps.public_bytes": [],
    "cryptography.x509.extensions.SignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.__repr__": [
        "<builtin>.list"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps.public_bytes": [],
    "cryptography.x509.extensions.OCSPNonce": [],
    "cryptography.x509.extensions.OCSPNonce.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.OCSPNonce.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.OCSPNonce.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.OCSPNonce.__repr__": [],
    "cryptography.x509.extensions.OCSPNonce.nonce": [],
    "cryptography.x509.extensions.OCSPNonce.public_bytes": [],
    "cryptography.x509.extensions.IssuingDistributionPoint": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.any",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint.__repr__": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint.full_name": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.relative_name": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.only_contains_user_certs": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.only_contains_ca_certs": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.only_some_reasons": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.indirect_crl": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.only_contains_attribute_certs": [],
    "cryptography.x509.extensions.IssuingDistributionPoint.public_bytes": [],
    "cryptography.x509.extensions.UnrecognizedExtension": [],
    "cryptography.x509.extensions.UnrecognizedExtension.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension.oid": [],
    "cryptography.x509.extensions.UnrecognizedExtension.value": [],
    "cryptography.x509.extensions.UnrecognizedExtension.__repr__": [],
    "cryptography.x509.extensions.UnrecognizedExtension.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension.public_bytes": [],
    "cryptography.x509.name._ASN1Type": [],
    "cryptography.x509.name._escape_dn_value": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name._unescape_dn_value": [],
    "cryptography.x509.name._unescape_dn_value.sub": [
        "<builtin>.len",
        "<builtin>.chr",
        "<builtin>.int"
    ],
    "cryptography.x509.name.NameAttribute": [],
    "cryptography.x509.name.NameAttribute.__init__": [
        "<builtin>.isinstance",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "cryptography.x509.name.NameAttribute.oid": [],
    "cryptography.x509.name.NameAttribute.value": [],
    "cryptography.x509.name.NameAttribute.rfc4514_attribute_name": [],
    "cryptography.x509.name.NameAttribute.rfc4514_string": [
        "cryptography.x509.name._escape_dn_value"
    ],
    "cryptography.x509.name.NameAttribute.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name.NameAttribute.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.name.NameAttribute.__repr__": [],
    "cryptography.x509.name.RelativeDistinguishedName": [],
    "cryptography.x509.name.RelativeDistinguishedName.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.frozenset",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.get_attributes_for_oid": [],
    "cryptography.x509.name.RelativeDistinguishedName.rfc4514_string": [],
    "cryptography.x509.name.RelativeDistinguishedName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__iter__": [
        "<builtin>.iter"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__len__": [
        "<builtin>.len"
    ],
    "cryptography.x509.name.RelativeDistinguishedName.__repr__": [
        "cryptography.x509.name.RelativeDistinguishedName.rfc4514_string"
    ],
    "cryptography.x509.name.Name": [
        "typing.overload"
    ],
    "cryptography.x509.name.Name.__init__": [
        "<builtin>.list",
        "<builtin>.all",
        "<builtin>.isinstance",
        "cryptography.x509.name.RelativeDistinguishedName.__init__",
        "typing.cast",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.name.Name.from_rfc4514_string": [
        "cryptography.x509.name._RFC4514NameParser.__init__",
        "cryptography.x509.name._RFC4514NameParser.parse"
    ],
    "cryptography.x509.name._RFC4514NameParser.__init__": [],
    "cryptography.x509.name._RFC4514NameParser.parse": [
        "cryptography.x509.name._RFC4514NameParser._has_data",
        "cryptography.x509.name._RFC4514NameParser._read_char",
        "cryptography.x509.name.Name.__init__",
        "<builtin>.reversed",
        "cryptography.x509.name._RFC4514NameParser._parse_rdn"
    ],
    "cryptography.x509.name.Name.rfc4514_string": [
        "<builtin>.reversed"
    ],
    "cryptography.x509.name.Name.get_attributes_for_oid": [],
    "cryptography.x509.name.Name.rdns": [],
    "cryptography.x509.name.Name.public_bytes": [],
    "cryptography.x509.name.Name.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name.Name.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.x509.name.Name.__iter__": [],
    "cryptography.x509.name.Name.__len__": [
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "cryptography.x509.name.Name.__repr__": [],
    "cryptography.x509.name._RFC4514NameParser": [
        "re.compile",
        "<builtin>.chr"
    ],
    "cryptography.x509.name._RFC4514NameParser._has_data": [
        "<builtin>.len"
    ],
    "cryptography.x509.name._RFC4514NameParser._peek": [
        "cryptography.x509.name._RFC4514NameParser._has_data"
    ],
    "cryptography.x509.name._RFC4514NameParser._read_char": [
        "cryptography.x509.name._RFC4514NameParser._peek"
    ],
    "cryptography.x509.name._RFC4514NameParser._read_re": [
        "<builtin>.len"
    ],
    "cryptography.x509.name._RFC4514NameParser._parse_rdn": [
        "cryptography.x509.name._RFC4514NameParser._peek",
        "cryptography.x509.name.RelativeDistinguishedName.__init__",
        "cryptography.x509.name._RFC4514NameParser._read_char",
        "cryptography.x509.name._RFC4514NameParser._parse_na"
    ],
    "cryptography.x509.name._RFC4514NameParser._parse_na": [
        "cryptography.x509.name._unescape_dn_value",
        "cryptography.x509.name.NameAttribute.__init__",
        "cryptography.x509.name._RFC4514NameParser._read_char",
        "cryptography.x509.name._RFC4514NameParser._read_re",
        "cryptography.x509.name._RFC4514NameParser._peek"
    ],
    "ipaddress.AddressValueError": [],
    "ipaddress.NetmaskValueError": [],
    "ipaddress.ip_address": [
        "ipaddress.IPv4Address.__init__",
        "<builtin>.ValueError",
        "ipaddress.IPv6Address.__init__"
    ],
    "ipaddress.IPv4Address.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._IPAddressBase._check_packed_address",
        "ipaddress._IPAddressBase._check_int_address"
    ],
    "ipaddress.IPv6Address.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "ipaddress._IPAddressBase._check_packed_address",
        "ipaddress._BaseV6._ip_int_from_string",
        "ipaddress._IPAddressBase._check_int_address"
    ],
    "ipaddress.ip_network": [
        "<builtin>.ValueError",
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.IPv4Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress._BaseV4._make_netmask",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress.IPv6Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.ValueError",
        "ipaddress._BaseV6._make_netmask",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress.ip_interface": [
        "ipaddress.IPv6Interface.__init__",
        "ipaddress.IPv4Interface.__init__",
        "<builtin>.ValueError"
    ],
    "ipaddress.IPv4Interface.__init__": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress.IPv4Network.__init__"
    ],
    "ipaddress.IPv6Interface.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress.IPv6Address.__init__",
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.v4_int_to_packed": [
        "<builtin>.ValueError"
    ],
    "ipaddress.v6_int_to_packed": [
        "<builtin>.ValueError"
    ],
    "ipaddress._split_optional_netmask": [
        "<builtin>.len",
        "<builtin>.str"
    ],
    "ipaddress._find_address_range": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "ipaddress._count_righthand_zero_bits": [
        "<builtin>.min"
    ],
    "ipaddress.summarize_address_range": [
        "<builtin>.isinstance",
        "<builtin>.min",
        "ipaddress._count_righthand_zero_bits",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress._collapse_addresses_internal": [
        "<builtin>.list",
        "<builtin>.sorted"
    ],
    "ipaddress.collapse_addresses": [
        "<builtin>.isinstance",
        "ipaddress.summarize_address_range",
        "ipaddress._collapse_addresses_internal",
        "ipaddress._find_address_range",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.sorted"
    ],
    "ipaddress.get_mixed_type_key": [
        "<builtin>.isinstance"
    ],
    "ipaddress._IPAddressBase": [],
    "ipaddress._IPAddressBase.exploded": [],
    "ipaddress._IPAddressBase.compressed": [
        "<builtin>.str"
    ],
    "ipaddress._IPAddressBase.reverse_pointer": [],
    "ipaddress._IPAddressBase.version": [
        "<builtin>.NotImplementedError",
        "<builtin>.type"
    ],
    "ipaddress._IPAddressBase._check_int_address": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "ipaddress._IPAddressBase._ip_int_from_prefix": [],
    "ipaddress._IPAddressBase._prefix_from_ip_int": [
        "ipaddress._count_righthand_zero_bits",
        "<builtin>.ValueError"
    ],
    "ipaddress._IPAddressBase._report_invalid_netmask": [],
    "ipaddress._IPAddressBase._prefix_from_prefix_string": [
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "<builtin>.int"
    ],
    "ipaddress._IPAddressBase._prefix_from_ip_string": [
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "ipaddress._IPAddressBase._prefix_from_ip_int"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "ipaddress._split_optional_netmask",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "ipaddress._IPAddressBase.__reduce__": [
        "<builtin>.str"
    ],
    "ipaddress._BaseAddress": [],
    "ipaddress._BaseAddress.__int__": [],
    "ipaddress._BaseAddress.__eq__": [],
    "ipaddress._BaseAddress.__lt__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "ipaddress._BaseAddress.__add__": [
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "ipaddress._BaseAddress.__sub__": [
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "ipaddress._BaseAddress.__repr__": [
        "<builtin>.str"
    ],
    "ipaddress._BaseAddress.__str__": [
        "<builtin>.str"
    ],
    "ipaddress._BaseAddress.__hash__": [
        "<builtin>.hex",
        "<builtin>.hash",
        "<builtin>.int"
    ],
    "ipaddress._BaseAddress._get_address_key": [],
    "ipaddress._BaseAddress.__reduce__": [],
    "ipaddress._BaseNetwork": [
        "functools.cached_property"
    ],
    "ipaddress._BaseNetwork.__repr__": [
        "<builtin>.str"
    ],
    "ipaddress._BaseNetwork.__str__": [],
    "ipaddress._BaseNetwork.hosts": [
        "<builtin>.range",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork._address_class": [
        "<builtin>.NotImplementedError",
        "<builtin>.type"
    ],
    "ipaddress._BaseNetwork.__iter__": [
        "<builtin>.range",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.__getitem__": [
        "<builtin>.IndexError",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.__lt__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "ipaddress._BaseNetwork.__eq__": [
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.__hash__": [
        "<builtin>.hash",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.__contains__": [
        "<builtin>.isinstance"
    ],
    "ipaddress._BaseNetwork.overlaps": [],
    "ipaddress._BaseNetwork.broadcast_address": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.hostmask": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseNetwork._address_class",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.with_prefixlen": [],
    "ipaddress._BaseNetwork.with_netmask": [],
    "ipaddress._BaseNetwork.with_hostmask": [],
    "ipaddress._BaseNetwork.num_addresses": [
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.prefixlen": [],
    "ipaddress._BaseNetwork.address_exclude": [
        "<builtin>.isinstance",
        "<builtin>.AssertionError",
        "ipaddress._BaseNetwork.subnets",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "ipaddress._BaseNetwork.subnets": [
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.compare_networks": [
        "<builtin>.TypeError"
    ],
    "ipaddress._BaseNetwork._get_networks_key": [],
    "ipaddress._BaseNetwork.supernet": [
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress._BaseNetwork.is_multicast": [],
    "ipaddress._BaseNetwork._is_subnet_of": [
        "<builtin>.TypeError"
    ],
    "ipaddress._BaseNetwork.subnet_of": [
        "ipaddress._BaseNetwork._is_subnet_of"
    ],
    "ipaddress._BaseNetwork.supernet_of": [
        "ipaddress._BaseNetwork._is_subnet_of"
    ],
    "ipaddress._BaseNetwork.is_reserved": [],
    "ipaddress._BaseNetwork.is_link_local": [],
    "ipaddress._BaseNetwork.is_private": [],
    "ipaddress._BaseNetwork.is_global": [],
    "ipaddress._BaseNetwork.is_unspecified": [],
    "ipaddress._BaseNetwork.is_loopback": [],
    "ipaddress._BaseV4": [],
    "ipaddress._BaseV4._explode_shorthand_ip_string": [
        "<builtin>.str"
    ],
    "ipaddress._BaseV4._make_netmask": [
        "ipaddress.IPv4Address.__init__",
        "<builtin>.isinstance"
    ],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._parse_octet": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress._BaseV4._string_from_ip_int": [
        "<builtin>.map"
    ],
    "ipaddress._BaseV4._reverse_pointer": [
        "<builtin>.str"
    ],
    "ipaddress._BaseV4.max_prefixlen": [],
    "ipaddress._BaseV4.version": [],
    "ipaddress.IPv4Address": [
        "functools._lru_cache_wrapper.wrapper",
        "functools.singledispatchmethod.__get__._method",
        "functools.singledispatch.wrapper",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress.IPv4Address.packed": [
        "ipaddress.v4_int_to_packed"
    ],
    "ipaddress.IPv4Address.is_reserved": [],
    "ipaddress.IPv4Address.is_private": [
        "<builtin>.any"
    ],
    "ipaddress.IPv4Address.is_global": [],
    "ipaddress.IPv4Address.is_multicast": [],
    "ipaddress.IPv4Address.is_unspecified": [],
    "ipaddress.IPv4Address.is_loopback": [],
    "ipaddress.IPv4Address.is_link_local": [],
    "ipaddress.IPv4Interface": [
        "functools.cached_property"
    ],
    "ipaddress.IPv4Interface.hostmask": [],
    "ipaddress.IPv4Interface.__str__": [
        "ipaddress._BaseV4._string_from_ip_int"
    ],
    "ipaddress.IPv4Interface.__eq__": [
        "ipaddress._BaseAddress.__eq__"
    ],
    "ipaddress.IPv4Interface.__lt__": [
        "ipaddress._BaseAddress.__lt__"
    ],
    "ipaddress.IPv4Interface.__hash__": [
        "<builtin>.int"
    ],
    "ipaddress.IPv4Interface.ip": [
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv4Interface.with_prefixlen": [
        "ipaddress._BaseV4._string_from_ip_int"
    ],
    "ipaddress.IPv4Interface.with_netmask": [
        "ipaddress._BaseV4._string_from_ip_int"
    ],
    "ipaddress.IPv4Interface.with_hostmask": [
        "ipaddress._BaseV4._string_from_ip_int"
    ],
    "ipaddress.IPv4Network": [
        "functools._lru_cache_wrapper.wrapper",
        "functools.singledispatchmethod.__get__._method",
        "functools.singledispatch.wrapper",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress.IPv4Network.is_global": [
        "ipaddress.IPv4Network.__init__"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress.IPv4Network.__init__"
    ],
    "ipaddress._BaseV6": [
        "<builtin>.frozenset"
    ],
    "ipaddress._BaseV6._make_netmask": [
        "ipaddress.IPv6Address.__init__",
        "<builtin>.isinstance"
    ],
    "ipaddress._BaseV6._ip_int_from_string": [
        "ipaddress.IPv4Address.__init__",
        "<builtin>.len",
        "<builtin>.range",
        "ipaddress._BaseV6._parse_hextet"
    ],
    "ipaddress._BaseV6._parse_hextet": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress._BaseV6._compress_hextets": [
        "<builtin>.len",
        "<builtin>.enumerate"
    ],
    "ipaddress._BaseV6._string_from_ip_int": [
        "ipaddress._BaseV6._compress_hextets",
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress._BaseV6._explode_shorthand_ip_string": [
        "ipaddress._BaseV6._ip_int_from_string",
        "<builtin>.range",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "ipaddress._BaseV6._reverse_pointer": [],
    "ipaddress._BaseV6.max_prefixlen": [],
    "ipaddress._BaseV6.version": [],
    "ipaddress.IPv6Address": [
        "functools._lru_cache_wrapper.wrapper",
        "functools.singledispatchmethod.__get__._method",
        "functools.singledispatch.wrapper",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress.IPv6Address.packed": [
        "ipaddress.v6_int_to_packed"
    ],
    "ipaddress.IPv6Address.is_multicast": [],
    "ipaddress.IPv6Address.is_reserved": [
        "<builtin>.any"
    ],
    "ipaddress.IPv6Address.is_link_local": [],
    "ipaddress.IPv6Address.is_site_local": [],
    "ipaddress.IPv6Address.is_private": [
        "<builtin>.any"
    ],
    "ipaddress.IPv6Address.is_global": [],
    "ipaddress.IPv6Address.is_unspecified": [],
    "ipaddress.IPv6Address.is_loopback": [],
    "ipaddress.IPv6Address.ipv4_mapped": [
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv6Address.teredo": [
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv6Address.sixtofour": [
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv6Interface": [
        "functools.cached_property"
    ],
    "ipaddress.IPv6Interface.hostmask": [],
    "ipaddress.IPv6Interface.__str__": [
        "ipaddress._BaseV6._string_from_ip_int"
    ],
    "ipaddress.IPv6Interface.__eq__": [
        "ipaddress._BaseAddress.__eq__"
    ],
    "ipaddress.IPv6Interface.__lt__": [
        "ipaddress._BaseAddress.__lt__"
    ],
    "ipaddress.IPv6Interface.__hash__": [
        "<builtin>.int"
    ],
    "ipaddress.IPv6Interface.ip": [
        "ipaddress.IPv6Address.__init__"
    ],
    "ipaddress.IPv6Interface.with_prefixlen": [
        "ipaddress._BaseV6._string_from_ip_int"
    ],
    "ipaddress.IPv6Interface.with_netmask": [
        "ipaddress._BaseV6._string_from_ip_int"
    ],
    "ipaddress.IPv6Interface.with_hostmask": [
        "ipaddress._BaseV6._string_from_ip_int"
    ],
    "ipaddress.IPv6Interface.is_unspecified": [],
    "ipaddress.IPv6Interface.is_loopback": [],
    "ipaddress.IPv6Network": [],
    "ipaddress.IPv6Network.hosts": [
        "<builtin>.range",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress.IPv6Network.is_site_local": [],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "cryptography.x509.certificate_transparency.LogEntryType": [],
    "cryptography.x509.certificate_transparency.Version": [],
    "cryptography.x509.certificate_transparency.SignatureAlgorithm": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp": [
        "abc.abstractproperty"
    ],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp.version": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp.log_id": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp.timestamp": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp.entry_type": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp.signature_hash_algorithm": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp.signature_algorithm": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp.signature": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp.extension_bytes": [],
    "cryptography.hazmat.bindings": [],
    "cryptography.hazmat.primitives": [],
    "cryptography.x509.general_name.UnsupportedGeneralNameType": [],
    "cryptography.x509.general_name.GeneralName": [
        "abc.abstractproperty"
    ],
    "cryptography.x509.general_name.GeneralName.value": [],
    "cryptography.x509.general_name.RFC822Name": [],
    "cryptography.x509.general_name.RFC822Name.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "email.utils.parseaddr",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.general_name.RFC822Name.value": [],
    "cryptography.x509.general_name.RFC822Name._init_without_validation": [],
    "cryptography.x509.general_name.RFC822Name.__repr__": [],
    "cryptography.x509.general_name.RFC822Name.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.RFC822Name.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.DNSName": [],
    "cryptography.x509.general_name.DNSName.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.general_name.DNSName.value": [],
    "cryptography.x509.general_name.DNSName._init_without_validation": [],
    "cryptography.x509.general_name.DNSName.__repr__": [],
    "cryptography.x509.general_name.DNSName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.DNSName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier": [],
    "cryptography.x509.general_name.UniformResourceIdentifier.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier.value": [],
    "cryptography.x509.general_name.UniformResourceIdentifier._init_without_validation": [],
    "cryptography.x509.general_name.UniformResourceIdentifier.__repr__": [],
    "cryptography.x509.general_name.UniformResourceIdentifier.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.DirectoryName": [],
    "cryptography.x509.general_name.DirectoryName.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.general_name.DirectoryName.value": [],
    "cryptography.x509.general_name.DirectoryName.__repr__": [],
    "cryptography.x509.general_name.DirectoryName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.DirectoryName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.RegisteredID": [],
    "cryptography.x509.general_name.RegisteredID.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.general_name.RegisteredID.value": [],
    "cryptography.x509.general_name.RegisteredID.__repr__": [],
    "cryptography.x509.general_name.RegisteredID.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.RegisteredID.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.IPAddress": [],
    "cryptography.x509.general_name.IPAddress.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.general_name.IPAddress.value": [],
    "cryptography.x509.general_name.IPAddress._packed": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.IPAddress.__repr__": [],
    "cryptography.x509.general_name.IPAddress.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.IPAddress.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.x509.general_name.OtherName": [],
    "cryptography.x509.general_name.OtherName.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.x509.general_name.OtherName.type_id": [],
    "cryptography.x509.general_name.OtherName.value": [],
    "cryptography.x509.general_name.OtherName.__repr__": [],
    "cryptography.x509.general_name.OtherName.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.x509.general_name.OtherName.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.backends.openssl.aead._evp_cipher": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.aead._aead_setup": [
        "cryptography.hazmat.backends.openssl.aead._evp_cipher",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.int"
    ],
    "cryptography.hazmat.backends.openssl.aead._set_length": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.aead._process_aad": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.aead._process_data": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305": [],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305.__init__": [
        "<builtin>.len",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305.generate_key": [],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305.encrypt": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.aead._encrypt",
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305._check_params",
        "<builtin>.OverflowError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305._check_params": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "cryptography.utils._check_bytes"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305._check_params",
        "cryptography.hazmat.backends.openssl.aead._decrypt"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM": [],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM.__init__": [
        "<builtin>.isinstance",
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM.generate_key": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM.encrypt": [
        "cryptography.hazmat.backends.openssl.aead._encrypt",
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM._validate_lengths",
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM._check_params",
        "<builtin>.len",
        "<builtin>.OverflowError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM._check_params": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "cryptography.utils._check_bytes"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM._validate_lengths": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM._check_params",
        "cryptography.hazmat.backends.openssl.aead._decrypt"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM": [],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM.__init__": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM.generate_key": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM.encrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM._check_params",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.aead._encrypt",
        "<builtin>.OverflowError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM._check_params": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "cryptography.utils._check_bytes"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM._check_params",
        "cryptography.hazmat.backends.openssl.aead._decrypt"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3": [],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3.__init__": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3.generate_key": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3.encrypt": [
        "<builtin>.len",
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3._check_params",
        "cryptography.hazmat.backends.openssl.aead._encrypt",
        "<builtin>.OverflowError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3._check_params": [
        "<builtin>.len",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "cryptography.utils._check_bytes"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3._check_params",
        "cryptography.hazmat.backends.openssl.aead._decrypt"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV": [],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV.__init__": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.utils._check_byteslike",
        "<builtin>.ValueError",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.aead_cipher_supported"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV.generate_key": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV.encrypt": [
        "cryptography.hazmat.backends.openssl.aead._encrypt",
        "<builtin>.any",
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV._check_params",
        "<builtin>.len",
        "<builtin>.OverflowError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV._check_params": [
        "<builtin>.isinstance",
        "<builtin>.all",
        "cryptography.utils._check_bytes",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV.decrypt": [
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV._check_params",
        "cryptography.hazmat.backends.openssl.aead._decrypt"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context": [],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.update": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.verify": [
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context.finalize",
        "cryptography.hazmat.primitives.constant_time.bytes_eq"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext": [],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.update": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.copy": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.cmac._CMACContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext.verify": [
        "cryptography.hazmat.primitives.constant_time.bytes_eq",
        "cryptography.hazmat.backends.openssl.cmac._CMACContext.finalize"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext": [],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.algorithm": [],
    "cryptography.hazmat.backends.openssl.hashes._HashContext._finalize_xof": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt": [],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt.verify": [
        "cryptography.hazmat.primitives.constant_time.bytes_eq",
        "cryptography.hazmat.primitives.kdf.scrypt.Scrypt.derive"
    ],
    "cryptography.hazmat.primitives.kdf.KeyDerivationFunction": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.kdf.KeyDerivationFunction.derive": [],
    "cryptography.hazmat.primitives.kdf.KeyDerivationFunction.verify": [],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext": [],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.algorithm": [],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.copy": [
        "cryptography.hazmat.backends.openssl.hmac._HMACContext.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.update": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.finalize": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext.verify": [
        "cryptography.hazmat.backends.openssl.hmac._HMACContext.finalize",
        "cryptography.hazmat.primitives.constant_time.bytes_eq"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey": [],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey._raw_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey.verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey": [],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey._raw_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey._raw_public_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey.verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey._raw_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey._raw_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.exchange": [
        "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey._raw_private_bytes": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._read_mem_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc"
    ],
    "cryptography.hazmat.backends.openssl.dsa._dsa_sig_sign": [
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.dsa._dsa_sig_verify": [
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters": [],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters.parameter_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters.generate_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.generate_dsa_private_key"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey": [],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.key_size": [],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.private_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.parameters": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey": [],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.key_size": [],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.public_numbers": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.parameters": [
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters.__init__"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.verify": [
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.dsa._dsa_sig_verify"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options": [],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder": [],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.__init__": [],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.set_data": [
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.__init__",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.add_signer": [
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.add_certificate": [
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder.__init__",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate": [],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.friendly_name": [],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.certificate": [],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__hash__": [
        "<builtin>.hash"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate.__repr__": [],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates": [],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.key": [],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.cert": [],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.additional_certs": [],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__eq__": [
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__hash__": [
        "<builtin>.hash",
        "<builtin>.tuple"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates.__repr__": [],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey": [],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey.public_bytes": [
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey._raw_public_bytes",
        "cryptography.hazmat.backends.openssl.backend.Backend._public_key_bytes",
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey": [],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.exchange": [
        "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey._raw_private_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "paramiko.dsskey.DSSKey": [],
    "paramiko.dsskey.DSSKey._from_private_key": [
        "paramiko.dsskey.DSSKey._decode_key",
        "paramiko.pkey.PKey._read_private_key"
    ],
    "paramiko.dsskey.DSSKey._from_private_key_file": [
        "paramiko.pkey.PKey._read_private_key_file",
        "paramiko.dsskey.DSSKey._decode_key"
    ],
    "paramiko.dsskey.DSSKey.__str__": [
        "paramiko.dsskey.DSSKey.asbytes"
    ],
    "paramiko.dsskey.DSSKey._fields": [
        "paramiko.dsskey.DSSKey.get_name"
    ],
    "paramiko.dsskey.DSSKey.get_bits": [],
    "paramiko.dsskey.DSSKey.can_sign": [],
    "paramiko.dsskey.DSSKey.sign_ssh_data": [
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.sign",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.private_key",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.backends.default_backend",
        "paramiko.util.deflate_long",
        "<builtin>.len",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.dsskey.DSSKey.verify_ssh_sig": [
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey.verify",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.public_key",
        "paramiko.util.inflate_long",
        "cryptography.hazmat.backends.default_backend",
        "<builtin>.len"
    ],
    "paramiko.dsskey.DSSKey.write_private_key_file": [
        "paramiko.pkey.PKey._write_private_key_file",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.private_key",
        "cryptography.hazmat.backends.default_backend",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__init__"
    ],
    "paramiko.dsskey.DSSKey.write_private_key": [
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.private_key",
        "cryptography.hazmat.backends.default_backend",
        "paramiko.pkey.PKey._write_private_key",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers.__init__"
    ],
    "paramiko.dsskey.DSSKey.generate": [
        "paramiko.dsskey.DSSKey.__init__",
        "cryptography.hazmat.backends.default_backend",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.private_numbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key"
    ],
    "paramiko.dsskey.DSSKey._decode_key": [
        "paramiko.pkey.PKey._uint32_cstruct_unpack",
        "<builtin>.list",
        "paramiko.util.bit_length",
        "paramiko.ber.BER.decode",
        "paramiko.pkey.PKey._got_bad_key_format_id",
        "paramiko.ber.BER.__init__",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "paramiko.ber.BER.__init__": [
        "paramiko.py3compat.b"
    ],
    "paramiko.ber.BER.decode": [
        "paramiko.ber.BER.decode_next"
    ],
    "paramiko.ber.BERException": [],
    "paramiko.ber.BER": [],
    "paramiko.ber.BER.asbytes": [],
    "paramiko.ber.BER.__str__": [
        "paramiko.ber.BER.asbytes"
    ],
    "paramiko.ber.BER.__repr__": [
        "<builtin>.repr"
    ],
    "paramiko.ber.BER.decode_next": [
        "<builtin>.len",
        "paramiko.py3compat.byte_ord",
        "paramiko.util.inflate_long",
        "paramiko.ber.BER.decode_sequence"
    ],
    "paramiko.ber.BER.decode_sequence": [
        "paramiko.ber.BER.__init__",
        "paramiko.ber.BER.decode_next"
    ],
    "paramiko.ber.BER.encode_tlv": [
        "<builtin>.len",
        "paramiko.py3compat.byte_chr",
        "paramiko.util.deflate_long"
    ],
    "paramiko.ber.BER.encode": [
        "paramiko.ber.BER.encode_sequence",
        "paramiko.ber.BER.encode_tlv",
        "<builtin>.type",
        "paramiko.util.deflate_long"
    ],
    "paramiko.ber.BER.encode_sequence": [
        "paramiko.ber.BER.__init__",
        "paramiko.ber.BER.asbytes",
        "paramiko.ber.BER.encode"
    ],
    "paramiko.ed25519key.Ed25519Key": [],
    "paramiko.ed25519key.Ed25519Key.can_sign": [],
    "paramiko.ed25519key.Ed25519Key._fields": [
        "paramiko.ed25519key.Ed25519Key.get_name",
        "paramiko.ed25519key.Ed25519Key.can_sign"
    ],
    "paramiko.ed25519key.Ed25519Key.get_bits": [],
    "paramiko.ed25519key.Ed25519Key.sign_ssh_data": [
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.ed25519key.Ed25519Key.verify_ssh_sig": [],
    "nacl": [],
    "nacl.signing.SignedMessage": [],
    "nacl.signing.SignedMessage._from_parts": [],
    "nacl.signing.SignedMessage.signature": [],
    "nacl.signing.SignedMessage.message": [],
    "nacl.signing.VerifyKey": [],
    "nacl.signing.VerifyKey.__init__": [
        "<builtin>.len",
        "builtins.TypeError.__init__",
        "<builtin>.isinstance",
        "builtins.ValueError.__init__"
    ],
    "builtins.TypeError.__init__": [],
    "builtins.ValueError.__init__": [],
    "nacl.signing.VerifyKey.__bytes__": [],
    "nacl.signing.VerifyKey.__hash__": [
        "<builtin>.hash",
        "<builtin>.bytes"
    ],
    "nacl.signing.VerifyKey.__eq__": [
        "<builtin>.bytes",
        "<builtin>.isinstance"
    ],
    "nacl.signing.VerifyKey.__ne__": [],
    "nacl.signing.VerifyKey.verify": [
        "<builtin>.len",
        "builtins.TypeError.__init__",
        "<builtin>.isinstance",
        "builtins.ValueError.__init__"
    ],
    "nacl.signing.VerifyKey.to_curve25519_public_key": [
        "nacl.public.PublicKey.__init__"
    ],
    "nacl.public.PublicKey.__init__": [
        "<builtin>.len",
        "builtins.TypeError.__init__",
        "<builtin>.isinstance",
        "builtins.ValueError.__init__"
    ],
    "nacl.signing.SigningKey": [],
    "nacl.signing.SigningKey.__init__": [
        "nacl.signing.VerifyKey.__init__",
        "builtins.ValueError.__init__",
        "<builtin>.isinstance",
        "nacl.encoding.RawEncoder.decode",
        "<builtin>.len",
        "builtins.TypeError.__init__"
    ],
    "nacl.encoding.RawEncoder.decode": [],
    "nacl.signing.SigningKey.__bytes__": [],
    "nacl.signing.SigningKey.__hash__": [
        "<builtin>.hash",
        "<builtin>.bytes"
    ],
    "nacl.signing.SigningKey.__eq__": [
        "<builtin>.bytes",
        "<builtin>.isinstance"
    ],
    "nacl.signing.SigningKey.__ne__": [],
    "nacl.signing.SigningKey.generate": [
        "nacl.utils.random",
        "nacl.signing.SigningKey.__init__"
    ],
    "nacl.utils.random": [],
    "nacl.signing.SigningKey.sign": [
        "nacl.signing.SignedMessage._from_parts"
    ],
    "nacl.signing.SigningKey.to_curve25519_private_key": [
        "nacl.public.PrivateKey.__init__"
    ],
    "nacl.public.PrivateKey.__init__": [
        "<builtin>.isinstance",
        "nacl.encoding.RawEncoder.decode",
        "nacl.public.PublicKey.__init__",
        "<builtin>.len",
        "builtins.TypeError.__init__"
    ],
    "nacl.public.PublicKey": [],
    "nacl.public.PublicKey.__bytes__": [],
    "nacl.public.PublicKey.__hash__": [
        "<builtin>.hash",
        "<builtin>.bytes"
    ],
    "nacl.public.PublicKey.__eq__": [
        "<builtin>.bytes",
        "<builtin>.isinstance"
    ],
    "nacl.public.PublicKey.__ne__": [],
    "nacl.public.PrivateKey": [],
    "nacl.public.PrivateKey.from_seed": [
        "nacl.public.PrivateKey.__init__",
        "<builtin>.len",
        "builtins.TypeError.__init__",
        "<builtin>.isinstance"
    ],
    "nacl.public.PrivateKey.__bytes__": [],
    "nacl.public.PrivateKey.__hash__": [
        "<builtin>.hash",
        "<builtin>.bytes",
        "<builtin>.type"
    ],
    "nacl.public.PrivateKey.__eq__": [
        "<builtin>.isinstance"
    ],
    "nacl.public.PrivateKey.__ne__": [],
    "nacl.public.PrivateKey.generate": [
        "nacl.public.PrivateKey.__init__",
        "nacl.utils.random"
    ],
    "nacl.public.Box": [],
    "nacl.public.Box.__init__": [
        "builtins.TypeError.__init__",
        "<builtin>.isinstance"
    ],
    "nacl.public.Box.__bytes__": [],
    "nacl.public.Box.decode": [],
    "nacl.public.Box.encrypt": [
        "<builtin>.len",
        "nacl.utils.EncryptedMessage._from_parts",
        "nacl.utils.random",
        "builtins.ValueError.__init__"
    ],
    "nacl.utils.EncryptedMessage._from_parts": [],
    "nacl.public.Box.decrypt": [
        "<builtin>.len",
        "builtins.ValueError.__init__"
    ],
    "nacl.public.Box.shared_key": [],
    "nacl.public.SealedBox": [],
    "nacl.public.SealedBox.__init__": [
        "builtins.TypeError.__init__",
        "<builtin>.isinstance"
    ],
    "nacl.public.SealedBox.__bytes__": [],
    "nacl.public.SealedBox.encrypt": [],
    "nacl.public.SealedBox.decrypt": [
        "<builtin>.TypeError"
    ],
    "nacl.encoding._Encoder": [
        "abc.abstractmethod"
    ],
    "nacl.encoding._Encoder.encode": [],
    "nacl.encoding._Encoder.decode": [],
    "nacl.encoding.RawEncoder": [],
    "nacl.encoding.RawEncoder.encode": [],
    "nacl.encoding.HexEncoder": [],
    "nacl.encoding.HexEncoder.encode": [],
    "nacl.encoding.HexEncoder.decode": [],
    "nacl.encoding.Base16Encoder": [],
    "nacl.encoding.Base16Encoder.encode": [
        "base64.b16encode"
    ],
    "nacl.encoding.Base16Encoder.decode": [
        "base64.b16decode"
    ],
    "nacl.encoding.Base32Encoder": [],
    "nacl.encoding.Base32Encoder.encode": [
        "base64.b32encode"
    ],
    "nacl.encoding.Base32Encoder.decode": [
        "base64.b32decode"
    ],
    "nacl.encoding.Base64Encoder": [],
    "nacl.encoding.Base64Encoder.encode": [
        "base64.b64encode"
    ],
    "nacl.encoding.Base64Encoder.decode": [
        "base64.b64decode"
    ],
    "nacl.encoding.URLSafeBase64Encoder": [],
    "nacl.encoding.URLSafeBase64Encoder.encode": [
        "base64.urlsafe_b64encode"
    ],
    "nacl.encoding.URLSafeBase64Encoder.decode": [
        "base64.urlsafe_b64decode"
    ],
    "nacl.encoding.Encodable": [],
    "nacl.encoding.Encodable.encode": [
        "nacl.encoding.RawEncoder.encode",
        "<builtin>.bytes"
    ],
    "nacl.bindings.sodium_core.sodium_init": [],
    "nacl.bindings.randombytes.randombytes": [],
    "nacl.bindings.randombytes.randombytes_buf_deterministic": [
        "<builtin>.len",
        "builtins.TypeError.__init__"
    ],
    "nacl.exceptions.CryptoError": [],
    "nacl.exceptions.BadSignatureError": [],
    "nacl.exceptions.RuntimeError": [],
    "nacl.exceptions.AssertionError": [],
    "nacl.exceptions.TypeError": [],
    "nacl.exceptions.ValueError": [],
    "nacl.exceptions.InvalidkeyError": [],
    "nacl.exceptions.CryptPrefixError": [],
    "nacl.exceptions.UnavailableError": [],
    "nacl.exceptions.ensure": [
        "<builtin>.repr",
        "builtins.TypeError.__init__"
    ],
    "nacl.bindings.crypto_scalarmult.crypto_scalarmult_base": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_scalarmult.crypto_scalarmult": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_scalarmult.crypto_scalarmult_ed25519_base": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_scalarmult.crypto_scalarmult_ed25519_base_noclamp": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_scalarmult.crypto_scalarmult_ed25519": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_scalarmult.crypto_scalarmult_ed25519_noclamp": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_is_valid_point": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_add": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_sub": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_scalar_invert": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_scalar_negate": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_scalar_complement": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_scalar_add": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_scalar_sub": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_scalar_mul": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_core.crypto_core_ed25519_scalar_reduce": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.sodium_core._sodium_init": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_secretbox.crypto_secretbox": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_secretbox.crypto_secretbox_open": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_generichash._checkparams": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_generichash.generichash_blake2b_salt_personal": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.bindings.crypto_generichash._checkparams",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_generichash.Blake2State": [],
    "nacl.bindings.crypto_generichash.Blake2State.__init__": [],
    "nacl.bindings.crypto_generichash.Blake2State.__reduce__": [
        "<builtin>.TypeError"
    ],
    "nacl.bindings.crypto_generichash.Blake2State.copy": [],
    "nacl.bindings.crypto_generichash.generichash_blake2b_init": [
        "<builtin>.len",
        "nacl.bindings.crypto_generichash._checkparams",
        "nacl.bindings.crypto_generichash.Blake2State.__init__",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_generichash.generichash_blake2b_update": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_generichash.generichash_blake2b_final": [
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_aead.crypto_aead_chacha20poly1305_ietf_encrypt": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_aead.crypto_aead_chacha20poly1305_ietf_decrypt": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_aead.crypto_aead_chacha20poly1305_encrypt": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_aead.crypto_aead_chacha20poly1305_decrypt": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_aead.crypto_aead_xchacha20poly1305_ietf_encrypt": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_aead.crypto_aead_xchacha20poly1305_ietf_decrypt": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_shorthash.crypto_shorthash_siphash24": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_shorthash.crypto_shorthash_siphashx24": [
        "<builtin>.len",
        "builtins.ValueError.__init__",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_keygen": [],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_state": [],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_state.__init__": [],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_init_push": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_push": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_init_pull": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_pull": [
        "<builtin>.isinstance",
        "typing.cast",
        "nacl.exceptions.ensure",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_rekey": [
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_kx.crypto_kx_keypair": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_kx.crypto_kx_seed_keypair": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_kx.crypto_kx_client_session_keys": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_kx.crypto_kx_server_session_keys": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_pwhash._check_memory_occupation": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_pwhash.nacl_bindings_pick_scrypt_params": [
        "<builtin>.range"
    ],
    "nacl.bindings.crypto_pwhash.crypto_pwhash_scryptsalsa208sha256_ll": [
        "<builtin>.len",
        "nacl.bindings.crypto_pwhash._check_memory_occupation",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_pwhash.crypto_pwhash_scryptsalsa208sha256_str": [
        "<builtin>.len",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_pwhash.crypto_pwhash_scryptsalsa208sha256_str_verify": [
        "<builtin>.len",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_pwhash._check_argon2_limits_alg": [
        "builtins.ValueError.__init__",
        "builtins.TypeError.__init__"
    ],
    "nacl.bindings.crypto_pwhash.crypto_pwhash_alg": [
        "builtins.ValueError.__init__",
        "<builtin>.isinstance",
        "nacl.bindings.crypto_pwhash._check_argon2_limits_alg",
        "nacl.exceptions.ensure",
        "<builtin>.len"
    ],
    "nacl.bindings.crypto_pwhash.crypto_pwhash_str_alg": [
        "nacl.bindings.crypto_pwhash._check_argon2_limits_alg",
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_pwhash.crypto_pwhash_str_verify": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.utils.sodium_memcmp": [
        "<builtin>.len",
        "<builtin>.max",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.utils.sodium_pad": [
        "builtins.ValueError.__init__",
        "<builtin>.isinstance",
        "<builtin>.len",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.utils.sodium_unpad": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.utils.sodium_increment": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.utils.sodium_add": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_hash.crypto_hash": [
        "<builtin>.len",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_hash.crypto_hash_sha256": [
        "<builtin>.len",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_hash.crypto_hash_sha512": [
        "<builtin>.len",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_keypair": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_seed_keypair": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_sign.crypto_sign": [
        "<builtin>.len",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_open": [
        "<builtin>.len"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519_pk_to_curve25519": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519_sk_to_curve25519": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519_sk_to_pk": [
        "<builtin>.len",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519_sk_to_seed": [
        "<builtin>.len",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519ph_state": [],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519ph_state.__init__": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519ph_update": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519ph_final_create": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519ph_final_verify": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_box.crypto_box_keypair": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_box.crypto_box_seed_keypair": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "builtins.ValueError.__init__",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_box.crypto_box": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_box.crypto_box_open": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_box.crypto_box_beforenm": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_box.crypto_box_afternm": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_box.crypto_box_open_afternm": [
        "<builtin>.len",
        "nacl.exceptions.ensure",
        "builtins.ValueError.__init__"
    ],
    "nacl.bindings.crypto_box.crypto_box_seal": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "builtins.ValueError.__init__",
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.crypto_box.crypto_box_seal_open": [
        "builtins.ValueError.__init__",
        "<builtin>.max",
        "<builtin>.isinstance",
        "nacl.exceptions.ensure",
        "<builtin>.len"
    ],
    "nacl.utils.EncryptedMessage": [],
    "nacl.utils.EncryptedMessage.nonce": [],
    "nacl.utils.EncryptedMessage.ciphertext": [],
    "nacl.utils.StringFixer": [],
    "nacl.utils.StringFixer.__str__": [
        "nacl.signing.VerifyKey.__bytes__",
        "nacl.public.PrivateKey.__bytes__",
        "nacl.signing.SigningKey.__bytes__",
        "<builtin>.str",
        "nacl.public.PublicKey.__bytes__"
    ],
    "nacl.utils.bytes_as_string": [],
    "nacl.utils.randombytes_deterministic": [],
    "paramiko.transport._join_lingering_threads": [],
    "paramiko.transport.Transport": [
        "paramiko.kex_curve25519.KexCurve25519.is_available",
        "<builtin>.object"
    ],
    "paramiko.kex_curve25519.KexCurve25519.is_available": [
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate"
    ],
    "paramiko.transport.Transport.__init__": [
        "threading.Condition.__init__",
        "paramiko.util.retry_on_signal",
        "<builtin>.isinstance",
        "threading.Thread.__init__",
        "paramiko.util.get_logger",
        "paramiko.packet.Packetizer.__init__",
        "threading.Event.__init__",
        "<builtin>.tuple",
        "paramiko.transport.ChannelMap.__init__",
        "<builtin>.str",
        "paramiko.ssh_gss.GSSAuth",
        "<builtin>.len",
        "paramiko.packet.Packetizer.set_log",
        "<builtin>.type",
        "<builtin>.int"
    ],
    "paramiko.packet.Packetizer.__init__": [
        "<builtin>.bytes",
        "threading.RLock",
        "time.time"
    ],
    "paramiko.ssh_gss.GSSAuth": [
        "paramiko.ssh_gss._SSH_GSSAPI_NEW.__init__",
        "<builtin>.ImportError",
        "paramiko.ssh_gss._SSH_SSPI.__init__",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD.__init__"
    ],
    "paramiko.transport.ChannelMap.__init__": [
        "weakref.WeakValueDictionary.__init__"
    ],
    "paramiko.packet.Packetizer.set_log": [],
    "paramiko.transport.Transport._filter_algorithm": [
        "<builtin>.getattr",
        "<builtin>.tuple"
    ],
    "paramiko.transport.Transport.preferred_ciphers": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.Transport.preferred_macs": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.Transport.preferred_keys": [
        "paramiko.transport.Transport._filter_algorithm",
        "<builtin>.tuple"
    ],
    "paramiko.transport.Transport.preferred_pubkeys": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.Transport.preferred_kex": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.Transport.preferred_compression": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.Transport.__repr__": [
        "<builtin>.hex",
        "<builtin>.len",
        "<builtin>.id",
        "paramiko.transport.Transport.is_authenticated"
    ],
    "paramiko.transport.Transport.is_authenticated": [
        "paramiko.auth_handler.AuthHandler.is_authenticated"
    ],
    "paramiko.transport.Transport.atfork": [
        "paramiko.transport.Transport.close"
    ],
    "paramiko.transport.Transport.get_security_options": [
        "paramiko.transport.SecurityOptions.__init__"
    ],
    "paramiko.transport.SecurityOptions.__init__": [],
    "paramiko.transport.Transport.set_gss_host": [],
    "paramiko.transport.Transport.start_client": [
        "paramiko.transport.Transport.get_exception",
        "threading.Event.wait",
        "time.time",
        "threading.Event.__init__",
        "threading.Event.is_set",
        "threading.Thread.start",
        "paramiko.ssh_exception.ChannelException.__init__"
    ],
    "paramiko.transport.Transport.get_exception": [],
    "paramiko.transport.Transport.start_server": [
        "paramiko.transport.Transport.get_exception",
        "threading.Event.wait",
        "threading.Event.__init__",
        "threading.Event.is_set",
        "threading.Thread.start",
        "paramiko.ssh_exception.ChannelException.__init__"
    ],
    "paramiko.transport.Transport.add_server_key": [
        "<builtin>.isinstance"
    ],
    "paramiko.transport.Transport.get_server_key": [],
    "paramiko.transport.Transport.load_server_moduli": [
        "paramiko.primes.ModulusPack.read_file",
        "paramiko.primes.ModulusPack.__init__"
    ],
    "paramiko.primes.ModulusPack.__init__": [],
    "paramiko.primes.ModulusPack.read_file": [
        "<builtin>.open",
        "paramiko.primes.ModulusPack._parse_modulus",
        "<builtin>.len"
    ],
    "paramiko.transport.ChannelMap.values": [
        "<builtin>.list",
        "weakref.WeakValueDictionary.values"
    ],
    "paramiko.transport.Transport.get_remote_server_key": [],
    "paramiko.transport.Transport.open_session": [
        "paramiko.transport.Transport.open_channel"
    ],
    "paramiko.transport.Transport.open_channel": [
        "paramiko.channel.Channel._set_window",
        "paramiko.channel.Channel._set_transport",
        "paramiko.transport.Transport._next_channel",
        "threading.Event.__init__",
        "time.time",
        "threading.Event.is_set",
        "paramiko.transport.Transport._sanitize_window_size",
        "paramiko.transport.Transport.get_exception",
        "paramiko.transport.ChannelMap.put",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.channel.Channel.__init__",
        "threading.Event.wait",
        "paramiko.transport.ChannelMap.get",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._sanitize_packet_size",
        "paramiko.ssh_exception.ChannelException.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.transport.Transport.open_x11_channel": [
        "paramiko.transport.Transport.open_channel"
    ],
    "paramiko.transport.Transport.open_forward_agent_channel": [
        "paramiko.transport.Transport.open_channel"
    ],
    "paramiko.transport.Transport.open_forwarded_tcpip_channel": [
        "paramiko.transport.Transport.open_channel"
    ],
    "paramiko.transport.Transport._sanitize_window_size": [
        "paramiko.util.clamp_value"
    ],
    "paramiko.transport.Transport._sanitize_packet_size": [
        "paramiko.util.clamp_value"
    ],
    "paramiko.transport.Transport._next_channel": [
        "paramiko.transport.ChannelMap.get"
    ],
    "paramiko.channel.Channel.__init__": [
        "threading.Condition.__init__",
        "paramiko.util.get_logger",
        "threading.Event.__init__",
        "paramiko.buffered_pipe.BufferedPipe.__init__",
        "<builtin>.str"
    ],
    "paramiko.transport.ChannelMap.put": [],
    "paramiko.channel.Channel._set_transport": [
        "paramiko.util.get_logger",
        "paramiko.transport.Transport.get_log_channel"
    ],
    "paramiko.channel.Channel._set_window": [
        "paramiko.channel.Channel._log"
    ],
    "paramiko.transport.Transport._send_user_message": [
        "paramiko.transport.Transport._send_message",
        "threading.Event.wait",
        "paramiko.transport.Transport._log",
        "time.time",
        "threading.Event.is_set"
    ],
    "paramiko.transport.ChannelMap.get": [
        "weakref.WeakValueDictionary.get"
    ],
    "paramiko.transport.Transport.request_port_forward": [
        "paramiko.transport.Transport.global_request",
        "<builtin>.int"
    ],
    "paramiko.transport.Transport.global_request": [
        "paramiko.message.Message.add_byte",
        "paramiko.transport.Transport._log",
        "threading.Event.wait",
        "threading.Event.__init__",
        "paramiko.message.Message.add",
        "threading.Event.is_set",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.transport.Transport.request_port_forward.default_handler": [
        "paramiko.transport.Transport._queue_incoming_channel"
    ],
    "paramiko.transport.Transport._queue_incoming_channel": [
        "threading.Condition.notify"
    ],
    "paramiko.transport.Transport.cancel_port_forward": [
        "paramiko.transport.Transport.global_request"
    ],
    "paramiko.transport.Transport.open_sftp_client": [
        "paramiko.sftp_client.SFTPClient.from_transport"
    ],
    "paramiko.sftp_client.SFTPClient.from_transport": [
        "paramiko.sftp_client.SFTPClient.__init__",
        "paramiko.channel.Channel.invoke_subsystem",
        "paramiko.transport.Transport.open_session"
    ],
    "paramiko.transport.Transport.send_ignore": [
        "paramiko.py3compat.byte_ord",
        "paramiko.message.Message.add_byte",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_bytes"
    ],
    "paramiko.transport.Transport.renegotiate_keys": [
        "paramiko.transport.Transport.get_exception",
        "threading.Event.wait",
        "threading.Event.__init__",
        "threading.Event.is_set",
        "paramiko.transport.Transport._send_kex_init",
        "paramiko.ssh_exception.ChannelException.__init__"
    ],
    "paramiko.transport.Transport._send_kex_init": [
        "threading.Event.clear",
        "paramiko.message.Message.add_list",
        "<builtin>.list",
        "<builtin>.filter",
        "paramiko.transport.Transport._send_message",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_int",
        "<builtin>.bytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "<builtin>.len",
        "paramiko.transport.Transport.get_security_options",
        "paramiko.message.Message.add_bytes",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.transport.Transport.set_keepalive._request": [],
    "paramiko.packet.Packetizer.set_keepalive": [
        "time.time"
    ],
    "paramiko.transport.Transport._log": [
        "logging.Logger.log",
        "<builtin>.type",
        "<builtin>.issubclass"
    ],
    "paramiko.transport.Transport.accept": [
        "<builtin>.len",
        "threading.Condition.wait"
    ],
    "paramiko.transport.Transport.auth_gssapi_with_mic": [
        "paramiko.auth_handler.AuthHandler.auth_gssapi_with_mic",
        "paramiko.auth_handler.AuthHandler.__init__",
        "threading.Event.__init__",
        "paramiko.auth_handler.AuthHandler.wait_for_response"
    ],
    "paramiko.transport.Transport.auth_gssapi_keyex": [
        "paramiko.auth_handler.AuthHandler.wait_for_response",
        "paramiko.auth_handler.AuthHandler.__init__",
        "threading.Event.__init__",
        "paramiko.auth_handler.AuthHandler.auth_gssapi_keyex"
    ],
    "paramiko.transport.Transport.auth_publickey": [
        "paramiko.auth_handler.AuthHandler.wait_for_response",
        "paramiko.auth_handler.AuthHandler.auth_publickey",
        "paramiko.auth_handler.AuthHandler.__init__",
        "threading.Event.__init__"
    ],
    "paramiko.transport.Transport.auth_password": [
        "paramiko.transport.Transport.auth_interactive",
        "paramiko.auth_handler.AuthHandler.auth_password",
        "threading.Event.__init__",
        "paramiko.auth_handler.AuthHandler.wait_for_response",
        "paramiko.auth_handler.AuthHandler.__init__"
    ],
    "paramiko.transport.Transport.set_subsystem_handler": [],
    "paramiko.auth_handler.AuthHandler.is_authenticated": [],
    "paramiko.transport.Transport.get_username": [
        "paramiko.auth_handler.AuthHandler.get_username"
    ],
    "paramiko.auth_handler.AuthHandler.get_username": [],
    "paramiko.transport.Transport.get_banner": [],
    "paramiko.transport.Transport.auth_none": [
        "paramiko.auth_handler.AuthHandler.auth_none",
        "paramiko.auth_handler.AuthHandler.wait_for_response",
        "paramiko.auth_handler.AuthHandler.__init__",
        "threading.Event.__init__"
    ],
    "paramiko.auth_handler.AuthHandler.__init__": [
        "weakref.proxy"
    ],
    "paramiko.auth_handler.AuthHandler.auth_none": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "paramiko.auth_handler.AuthHandler.wait_for_response": [
        "paramiko.auth_handler.AuthHandler.is_authenticated",
        "time.time",
        "<builtin>.issubclass"
    ],
    "paramiko.auth_handler.AuthHandler.auth_password": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "paramiko.transport.Transport.auth_password.handler": [
        "<builtin>.len"
    ],
    "paramiko.transport.Transport.auth_interactive": [
        "paramiko.auth_handler.AuthHandler.wait_for_response",
        "paramiko.auth_handler.AuthHandler.__init__",
        "threading.Event.__init__",
        "paramiko.auth_handler.AuthHandler.auth_interactive"
    ],
    "paramiko.auth_handler.AuthHandler.auth_publickey": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "paramiko.auth_handler.AuthHandler.auth_interactive": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "paramiko.transport.Transport.auth_interactive_dumb": [
        "paramiko.transport.Transport.auth_interactive"
    ],
    "paramiko.transport.Transport.auth_interactive_dumb.handler": [
        "<builtin>.print"
    ],
    "paramiko.auth_handler.AuthHandler.auth_gssapi_with_mic": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "paramiko.auth_handler.AuthHandler.auth_gssapi_keyex": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "paramiko.transport.Transport.set_log_channel": [
        "paramiko.util.get_logger",
        "paramiko.packet.Packetizer.set_log"
    ],
    "paramiko.transport.Transport.get_log_channel": [],
    "paramiko.transport.Transport.set_hexdump": [
        "paramiko.packet.Packetizer.set_hexdump"
    ],
    "paramiko.packet.Packetizer.set_hexdump": [],
    "paramiko.transport.Transport.get_hexdump": [
        "paramiko.packet.Packetizer.get_hexdump"
    ],
    "paramiko.packet.Packetizer.get_hexdump": [],
    "paramiko.transport.Transport.getpeername": [
        "<builtin>.getattr"
    ],
    "paramiko.packet.Packetizer.close": [],
    "paramiko.transport.Transport._get_modulus_pack": [],
    "paramiko.transport.Transport._unlink_channel": [
        "paramiko.transport.ChannelMap.delete"
    ],
    "paramiko.transport.ChannelMap.delete": [],
    "paramiko.transport.Transport._send_message": [
        "paramiko.packet.Packetizer.send_message"
    ],
    "paramiko.packet.Packetizer.send_message": [
        "paramiko.packet.Packetizer._trigger_rekey",
        "paramiko.packet.Packetizer._build_packet",
        "paramiko.py3compat.byte_ord",
        "paramiko.packet.Packetizer.write_all",
        "paramiko.util.format_binary",
        "<builtin>.len",
        "paramiko.packet.Packetizer._log",
        "paramiko.common.asbytes",
        "paramiko.packet.compute_hmac"
    ],
    "paramiko.transport.Transport._set_K_H": [],
    "paramiko.transport.Transport._expect_packet": [
        "<builtin>.tuple"
    ],
    "paramiko.transport.Transport._verify_key": [
        "paramiko.message.Message.__init__"
    ],
    "paramiko.transport.Transport._compute_key": [
        "<builtin>.getattr",
        "paramiko.message.Message.add_byte",
        "paramiko.transport.Transport._log",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.asbytes",
        "<builtin>.hasattr",
        "paramiko.message.Message.__init__",
        "<builtin>.setattr",
        "paramiko.py3compat.b",
        "<builtin>.len",
        "paramiko.message.Message.add_bytes"
    ],
    "paramiko.transport.Transport._get_cipher": [
        "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.encryptor",
        "cryptography.hazmat.backends.default_backend",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__"
    ],
    "paramiko.transport.Transport._set_forward_agent_handler": [],
    "paramiko.transport.Transport._set_forward_agent_handler.default_handler": [
        "paramiko.transport.Transport._queue_incoming_channel"
    ],
    "paramiko.transport.Transport._set_x11_handler": [],
    "paramiko.transport.Transport._set_x11_handler.default_handler": [
        "paramiko.transport.Transport._queue_incoming_channel"
    ],
    "paramiko.transport.Transport._ensure_authed": [
        "paramiko.transport.Transport.is_authenticated",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.packet.Packetizer.write_all": [
        "<builtin>.len",
        "<builtin>.EOFError",
        "paramiko.packet.first_arg",
        "time.time"
    ],
    "paramiko.transport.Transport._check_banner": [
        "paramiko.packet.Packetizer.readline",
        "<builtin>.range",
        "paramiko.transport.Transport._log",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "paramiko.packet.Packetizer.start_handshake": [
        "<builtin>.float",
        "threading.Timer.__init__",
        "threading.Thread.start"
    ],
    "paramiko.packet.Packetizer.need_rekey": [],
    "paramiko.packet.Packetizer.read_message": [
        "paramiko.packet.Packetizer._trigger_rekey",
        "paramiko.py3compat.byte_ord",
        "paramiko.util.constant_time_bytes_eq",
        "paramiko.util.format_binary",
        "paramiko.message.Message.__init__",
        "<builtin>.len",
        "paramiko.packet.Packetizer._log",
        "paramiko.packet.Packetizer.read_all",
        "paramiko.packet.compute_hmac"
    ],
    "paramiko.transport.Transport._parse_disconnect": [
        "paramiko.transport.Transport._log"
    ],
    "paramiko.transport.Transport._parse_debug": [
        "paramiko.util.safe_string",
        "paramiko.transport.Transport._log"
    ],
    "paramiko.packet.Packetizer.complete_handshake": [
        "threading.Timer.cancel"
    ],
    "paramiko.auth_handler.AuthHandler.abort": [],
    "paramiko.transport.Transport._log_agreement": [
        "paramiko.transport.Transport._log"
    ],
    "paramiko.transport.Transport._negotiate_keys": [
        "threading.Event.clear",
        "paramiko.transport.Transport._send_kex_init",
        "paramiko.transport.Transport._parse_kex_init"
    ],
    "paramiko.transport.Transport._parse_kex_init": [
        "<builtin>.filter",
        "<builtin>.list",
        "paramiko.transport.Transport._log",
        "paramiko.transport.Transport._log_agreement",
        "paramiko.transport.Transport.get_server_key",
        "<builtin>.len",
        "paramiko.transport.Transport._really_parse_kex_init"
    ],
    "paramiko.packet.Packetizer.readline": [
        "<builtin>.len",
        "paramiko.py3compat.u",
        "paramiko.packet.Packetizer._read_timeout"
    ],
    "paramiko.transport.Transport._really_parse_kex_init": [
        "paramiko.message.Message.get_bytes",
        "paramiko.message.Message.get_byte",
        "paramiko.message.Message.get_int",
        "paramiko.message.Message.get_boolean",
        "paramiko.message.Message.get_list"
    ],
    "paramiko.transport.Transport._get_latest_kex_init": [
        "paramiko.message.Message.__init__",
        "paramiko.transport.Transport._really_parse_kex_init"
    ],
    "paramiko.transport.Transport._activate_inbound": [
        "paramiko.transport.Transport._compute_key",
        "paramiko.packet.Packetizer.set_inbound_cipher",
        "paramiko.transport.Transport._log",
        "paramiko.transport.Transport._get_cipher",
        "paramiko.packet.Packetizer.set_inbound_compressor"
    ],
    "paramiko.packet.Packetizer.set_inbound_cipher": [],
    "paramiko.packet.Packetizer.set_inbound_compressor": [],
    "paramiko.transport.Transport._activate_outbound": [
        "paramiko.transport.Transport._send_message",
        "paramiko.packet.Packetizer.set_outbound_compressor",
        "paramiko.transport.Transport._compute_key",
        "paramiko.transport.Transport._expect_packet",
        "paramiko.message.Message.add_byte",
        "paramiko.transport.Transport._log",
        "paramiko.packet.Packetizer.need_rekey",
        "paramiko.packet.Packetizer.set_outbound_cipher",
        "paramiko.transport.Transport._get_cipher",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.__init__",
        "<builtin>.len",
        "<builtin>.sorted",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.packet.Packetizer.set_outbound_cipher": [],
    "paramiko.packet.Packetizer.set_outbound_compressor": [],
    "paramiko.transport.Transport._auth_trigger": [
        "paramiko.transport.Transport._log",
        "paramiko.packet.Packetizer.set_inbound_compressor",
        "paramiko.packet.Packetizer.set_outbound_compressor"
    ],
    "paramiko.transport.Transport._parse_ext_info": [
        "<builtin>.range",
        "paramiko.transport.Transport._log"
    ],
    "paramiko.transport.Transport._parse_newkeys": [
        "paramiko.transport.Transport._log",
        "paramiko.transport.Transport._activate_inbound",
        "paramiko.packet.Packetizer.need_rekey",
        "paramiko.auth_handler.AuthHandler.__init__",
        "threading.Event.set"
    ],
    "paramiko.transport.Transport._parse_global_request": [
        "paramiko.transport.Transport._send_message",
        "paramiko.server.ServerInterface.cancel_port_forward_request",
        "paramiko.message.Message.add_byte",
        "paramiko.transport.Transport._log",
        "paramiko.server.ServerInterface.check_global_request",
        "paramiko.message.Message.add",
        "paramiko.message.Message.__init__",
        "paramiko.server.ServerInterface.check_port_forward_request",
        "<builtin>.type"
    ],
    "paramiko.server.ServerInterface.check_port_forward_request": [],
    "paramiko.server.ServerInterface.cancel_port_forward_request": [],
    "paramiko.server.ServerInterface.check_global_request": [],
    "paramiko.transport.Transport._parse_request_success": [
        "paramiko.transport.Transport._log",
        "threading.Event.set"
    ],
    "paramiko.transport.Transport._parse_request_failure": [
        "paramiko.transport.Transport._log",
        "threading.Event.set"
    ],
    "paramiko.transport.Transport._parse_channel_open_success": [
        "paramiko.transport.Transport._log",
        "paramiko.transport.ChannelMap.get"
    ],
    "paramiko.transport.Transport._parse_channel_open_failure": [
        "paramiko.transport.Transport._log",
        "paramiko.ssh_exception.ChannelException.__init__",
        "paramiko.transport.ChannelMap.delete"
    ],
    "paramiko.transport.Transport._parse_channel_open": [
        "paramiko.transport.Transport._set_x11_handler.default_handler",
        "paramiko.channel.Channel._set_window",
        "paramiko.transport.Transport._log",
        "paramiko.channel.Channel._set_transport",
        "paramiko.transport.Transport._next_channel",
        "paramiko.transport.Transport.request_port_forward.default_handler",
        "paramiko.transport.Transport._queue_incoming_channel",
        "paramiko.transport.ChannelMap.put",
        "paramiko.message.Message.__init__",
        "paramiko.channel.Channel.__init__",
        "paramiko.server.ServerInterface.check_channel_direct_tcpip_request",
        "paramiko.message.Message.get_text",
        "paramiko.server.ServerInterface.check_channel_request",
        "paramiko.transport.Transport._send_message",
        "paramiko.transport.Transport._set_forward_agent_handler.default_handler",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.get_int",
        "paramiko.message.Message.add_int",
        "paramiko.channel.Channel._set_remote_channel",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.server.ServerInterface.check_channel_direct_tcpip_request": [],
    "paramiko.server.ServerInterface.check_channel_request": [],
    "paramiko.channel.Channel._set_remote_channel": [
        "paramiko.transport.Transport._sanitize_packet_size",
        "paramiko.channel.Channel._log"
    ],
    "paramiko.transport.Transport._get_subsystem_handler": [],
    "paramiko.transport.SecurityOptions": [],
    "paramiko.transport.SecurityOptions.__repr__": [],
    "paramiko.transport.SecurityOptions._set": [
        "<builtin>.getattr",
        "<builtin>.list",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.setattr",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "paramiko.transport.SecurityOptions.ciphers": [
        "paramiko.transport.SecurityOptions._set"
    ],
    "paramiko.transport.SecurityOptions.digests": [
        "paramiko.transport.SecurityOptions._set"
    ],
    "paramiko.transport.SecurityOptions.key_types": [
        "paramiko.transport.SecurityOptions._set"
    ],
    "paramiko.transport.SecurityOptions.kex": [
        "paramiko.transport.SecurityOptions._set"
    ],
    "paramiko.transport.SecurityOptions.compression": [
        "paramiko.transport.SecurityOptions._set"
    ],
    "paramiko.transport.ChannelMap": [],
    "paramiko.transport.ChannelMap.__len__": [
        "<builtin>.len"
    ],
    "paramiko.kex_ecdh_nist.KexNistp256": [],
    "paramiko.kex_ecdh_nist.KexNistp256.__init__": [],
    "paramiko.kex_ecdh_nist.KexNistp256.start_kex": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_bytes",
        "paramiko.kex_ecdh_nist.KexNistp256._generate_key_pair",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_ecdh_nist.KexNistp256._generate_key_pair": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key",
        "cryptography.hazmat.backends.default_backend",
        "cryptography.hazmat.primitives.asymmetric.ec.generate_private_key"
    ],
    "paramiko.kex_ecdh_nist.KexNistp256.parse_next": [
        "paramiko.kex_ecdh_nist.KexNistp256._parse_kexecdh_reply",
        "paramiko.kex_ecdh_nist.KexNistp256._parse_kexecdh_init"
    ],
    "paramiko.kex_ecdh_nist.KexNistp256._parse_kexecdh_init": [
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.from_encoded_point",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_bytes",
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.exchange",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_ecdh_nist.KexNistp256._parse_kexecdh_reply": [
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey.from_encoded_point",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey.public_bytes",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.exchange",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_ecdh_nist.KexNistp384": [],
    "paramiko.kex_ecdh_nist.KexNistp521": [],
    "cryptography.hazmat": [],
    "paramiko.primes._roll_random": [
        "<builtin>.pow",
        "paramiko.util.inflate_long",
        "paramiko.py3compat.byte_mask",
        "paramiko.util.bit_length"
    ],
    "paramiko.primes.ModulusPack": [],
    "paramiko.primes.ModulusPack._parse_modulus": [
        "paramiko.util.bit_length",
        "<builtin>.int"
    ],
    "paramiko.primes.ModulusPack.get_modulus": [
        "<builtin>.len",
        "<builtin>.sorted",
        "paramiko.primes._roll_random"
    ],
    "paramiko.kex_gex.KexGex": [],
    "paramiko.kex_gex.KexGex.__init__": [],
    "paramiko.kex_gex.KexGex.start_kex": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.kex_gex.KexGex.parse_next": [
        "paramiko.kex_gex.KexGex._parse_kexdh_gex_request",
        "paramiko.kex_gex.KexGex._parse_kexdh_gex_request_old",
        "paramiko.kex_gex.KexGex._parse_kexdh_gex_init",
        "paramiko.kex_gex.KexGex._parse_kexdh_gex_group",
        "paramiko.kex_gex.KexGex._parse_kexdh_gex_reply"
    ],
    "paramiko.kex_gex.KexGex._parse_kexdh_gex_request": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.kex_gex.KexGex._parse_kexdh_gex_group": [
        "paramiko.kex_gex.KexGex._generate_x",
        "paramiko.util.bit_length",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_mpint",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.get_mpint"
    ],
    "paramiko.kex_gex.KexGex._parse_kexdh_gex_init": [
        "paramiko.kex_gex.KexGex._generate_x",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add",
        "paramiko.message.Message.add_int",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.get_mpint",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_gex.KexGex._parse_kexdh_gex_reply": [
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add",
        "paramiko.message.Message.add_int",
        "<builtin>.pow",
        "paramiko.message.Message.__init__"
    ],
    "paramiko.kex_gex.KexGex._parse_kexdh_gex_request_old": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.kex_gex.KexGex._generate_x": [
        "paramiko.py3compat.byte_ord",
        "paramiko.py3compat.byte_mask",
        "paramiko.util.inflate_long",
        "paramiko.util.deflate_long",
        "<builtin>.len"
    ],
    "paramiko.kex_gex.KexGexSHA256": [],
    "paramiko.kex_group1.KexGroup1": [],
    "paramiko.kex_group1.KexGroup1.__init__": [],
    "paramiko.kex_group1.KexGroup1.start_kex": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_mpint",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.kex_group1.KexGroup1._generate_x"
    ],
    "paramiko.kex_group1.KexGroup1._generate_x": [
        "paramiko.py3compat.byte_mask",
        "paramiko.util.inflate_long"
    ],
    "paramiko.kex_group1.KexGroup1.parse_next": [
        "paramiko.kex_group1.KexGroup1._parse_kexdh_init",
        "paramiko.kex_group1.KexGroup1._parse_kexdh_reply"
    ],
    "paramiko.kex_group1.KexGroup1._parse_kexdh_init": [
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.get_mpint",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_group1.KexGroup1._parse_kexdh_reply": [
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.rsakey.RSAKey": [],
    "paramiko.rsakey.RSAKey._from_private_key": [
        "paramiko.rsakey.RSAKey._decode_key",
        "paramiko.pkey.PKey._read_private_key"
    ],
    "paramiko.rsakey.RSAKey._from_private_key_file": [
        "paramiko.pkey.PKey._read_private_key_file",
        "paramiko.rsakey.RSAKey._decode_key"
    ],
    "paramiko.rsakey.RSAKey.size": [],
    "paramiko.rsakey.RSAKey.public_numbers": [
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.private_numbers",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.private_numbers",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.public_numbers",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_numbers",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.private_numbers"
    ],
    "paramiko.rsakey.RSAKey.__str__": [
        "paramiko.rsakey.RSAKey.asbytes"
    ],
    "paramiko.rsakey.RSAKey._fields": [
        "paramiko.rsakey.RSAKey.get_name"
    ],
    "paramiko.rsakey.RSAKey.get_bits": [],
    "paramiko.rsakey.RSAKey.can_sign": [
        "<builtin>.isinstance"
    ],
    "paramiko.rsakey.RSAKey.sign_ssh_data": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.sign",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.sign",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.sign",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.sign",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.sign",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.rsakey.RSAKey.verify_ssh_sig": [
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey.public_key",
        "<builtin>.len",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey.verify",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey.public_key",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey.public_key"
    ],
    "paramiko.rsakey.RSAKey.write_private_key_file": [
        "paramiko.pkey.PKey._write_private_key_file"
    ],
    "paramiko.rsakey.RSAKey.write_private_key": [
        "paramiko.pkey.PKey._write_private_key"
    ],
    "paramiko.rsakey.RSAKey.generate": [
        "cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key",
        "paramiko.rsakey.RSAKey.__init__",
        "cryptography.hazmat.backends.default_backend"
    ],
    "paramiko.rsakey.RSAKey._decode_key": [
        "paramiko.pkey.PKey._uint32_cstruct_unpack",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.private_key",
        "paramiko.pkey.PKey._got_bad_key_format_id",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers.__init__",
        "cryptography.hazmat.backends.default_backend",
        "<builtin>.str",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers.__init__",
        "cryptography.hazmat.primitives.serialization.load_der_private_key"
    ],
    "paramiko.kex_curve25519.KexCurve25519": [],
    "paramiko.kex_curve25519.KexCurve25519.__init__": [],
    "paramiko.kex_curve25519.KexCurve25519._perform_exchange": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.exchange",
        "cryptography.hazmat.primitives.constant_time.bytes_eq"
    ],
    "paramiko.kex_curve25519.KexCurve25519.start_kex": [
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes",
        "paramiko.message.Message.add_byte",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_curve25519.KexCurve25519.parse_next": [
        "paramiko.kex_curve25519.KexCurve25519._parse_kexecdh_init",
        "paramiko.kex_curve25519.KexCurve25519._parse_kexecdh_reply"
    ],
    "paramiko.kex_curve25519.KexCurve25519._parse_kexecdh_init": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes",
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_mpint",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "paramiko.message.Message.add",
        "paramiko.message.Message.add_byte",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey.from_public_bytes",
        "paramiko.message.Message.__init__",
        "paramiko.kex_curve25519.KexCurve25519._perform_exchange",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_curve25519.KexCurve25519._parse_kexecdh_reply": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_mpint",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "paramiko.message.Message.add",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey.from_public_bytes",
        "paramiko.message.Message.__init__",
        "paramiko.kex_curve25519.KexCurve25519._perform_exchange",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.compress.ZlibCompressor": [],
    "paramiko.compress.ZlibCompressor.__init__": [],
    "paramiko.compress.ZlibCompressor.__call__": [],
    "paramiko.compress.ZlibDecompressor": [],
    "paramiko.compress.ZlibDecompressor.__init__": [],
    "paramiko.compress.ZlibDecompressor.__call__": [],
    "paramiko.kex_gss.KexGSSGroup1": [
        "paramiko.py3compat.byte_chr"
    ],
    "paramiko.kex_gss.KexGSSGroup1.__init__": [],
    "paramiko.kex_gss.KexGSSGroup1.start_kex": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_mpint",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.kex_gss.KexGSSGroup1._generate_x",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_gss.KexGSSGroup1._generate_x": [
        "paramiko.py3compat.byte_mask",
        "paramiko.util.inflate_long"
    ],
    "paramiko.kex_gss.KexGSSGroup1.parse_next": [
        "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_error",
        "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_init",
        "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_complete",
        "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_continue",
        "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_hostkey"
    ],
    "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_init": [
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add",
        "paramiko.kex_gss.NullHostKey.__init__",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.get_mpint",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_hostkey": [],
    "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_continue": [
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_complete": [
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add",
        "paramiko.kex_gss.NullHostKey.__init__",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "<builtin>.str",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_gss.KexGSSGroup1._parse_kexgss_error": [],
    "paramiko.kex_gss.NullHostKey.__init__": [],
    "paramiko.kex_gss.KexGSSGroup14": [],
    "paramiko.kex_gss.KexGSSGex": [],
    "paramiko.kex_gss.KexGSSGex.__init__": [],
    "paramiko.kex_gss.KexGSSGex.start_kex": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.kex_gss.KexGSSGex.parse_next": [
        "paramiko.kex_gss.KexGSSGex._parse_kexgss_hostkey",
        "paramiko.kex_gss.KexGSSGex._parse_kexgss_complete",
        "paramiko.kex_gss.KexGSSGex._parse_kexgss_group",
        "paramiko.kex_gss.KexGSSGex._parse_kexgss_gex_init",
        "paramiko.kex_gss.KexGSSGex._parse_kexgss_continue",
        "paramiko.kex_gss.KexGSSGex._parse_kexgss_error",
        "paramiko.kex_gss.KexGSSGex._parse_kexgss_groupreq"
    ],
    "paramiko.kex_gss.KexGSSGex._parse_kexgss_groupreq": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.kex_gss.KexGSSGex._parse_kexgss_group": [
        "paramiko.util.bit_length",
        "paramiko.kex_gss.KexGSSGex._generate_x",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_mpint",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.get_mpint",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_gss.KexGSSGex._parse_kexgss_gex_init": [
        "paramiko.message.Message.get_string",
        "paramiko.kex_gss.KexGSSGex._generate_x",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add",
        "paramiko.kex_gss.NullHostKey.__init__",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.add_byte",
        "<builtin>.pow",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.get_mpint",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_gss.KexGSSGex._parse_kexgss_hostkey": [],
    "paramiko.kex_gss.KexGSSGex._parse_kexgss_continue": [
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.kex_gss.KexGSSGex._parse_kexgss_complete": [
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.add",
        "paramiko.message.Message.add_int",
        "paramiko.kex_gss.NullHostKey.__init__",
        "<builtin>.pow",
        "paramiko.message.Message.__init__"
    ],
    "paramiko.kex_gss.KexGSSGex._parse_kexgss_error": [],
    "paramiko.kex_gss.KexGSSGex._generate_x": [
        "paramiko.py3compat.byte_ord",
        "paramiko.py3compat.byte_mask",
        "paramiko.util.inflate_long",
        "paramiko.util.deflate_long",
        "<builtin>.len"
    ],
    "paramiko.kex_gss.NullHostKey": [],
    "paramiko.kex_gss.NullHostKey.__str__": [],
    "paramiko.kex_gss.NullHostKey.get_name": [],
    "paramiko.kex_group14.KexGroup14": [],
    "paramiko.kex_group14.KexGroup14SHA256": [],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD.__init__": [
        "paramiko.ssh_gss._SSH_GSSAuth.__init__"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW.__init__": [
        "paramiko.ssh_gss._SSH_GSSAuth.__init__"
    ],
    "paramiko.ssh_gss._SSH_SSPI.__init__": [
        "paramiko.ssh_gss._SSH_GSSAuth.__init__"
    ],
    "paramiko.ssh_gss._SSH_GSSAuth": [],
    "paramiko.ssh_gss._SSH_GSSAuth.__init__": [],
    "paramiko.ssh_gss._SSH_GSSAuth.set_service": [],
    "paramiko.ssh_gss._SSH_GSSAuth.set_username": [],
    "paramiko.ssh_gss._SSH_GSSAuth._make_uint32": [],
    "pyasn1.type.base.SimpleAsn1Type.__init__": [
        "pyasn1.type.base.SimpleAsn1Type.prettyIn",
        "pyasn1.type.univ.ObjectIdentifier.prettyIn",
        "pyasn1.type.univ.Real.prettyIn",
        "pyasn1.type.univ.BitString.prettyIn",
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "sys.exc_info",
        "pyasn1.type.univ.Integer.prettyIn",
        "pyasn1.type.univ.Null.prettyIn",
        "pyasn1.type.base.Asn1Type.__init__",
        "pyasn1.type.univ.OctetString.prettyIn"
    ],
    "paramiko.ssh_gss._SSH_GSSAuth._ssh_build_mic": [
        "<builtin>.len",
        "paramiko.ssh_gss._SSH_GSSAuth._make_uint32"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD": [],
    "gssapi.Name": [],
    "gssapi.Context": [],
    "gssapi.OID.mech_from_string": [],
    "gssapi.InitContext": [],
    "gssapi.GSSException": [],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_get_mic": [
        "paramiko.ssh_gss._SSH_GSSAuth._ssh_build_mic"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_accept_sec_context": [
        "gssapi.AcceptContext"
    ],
    "gssapi.AcceptContext": [],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_check_mic": [
        "paramiko.ssh_gss._SSH_GSSAuth._ssh_build_mic"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD.credentials_delegated": [],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD.save_client_creds": [],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW": [],
    "gssapi.SecurityContext": [],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_get_mic": [
        "paramiko.ssh_gss._SSH_GSSAuth._ssh_build_mic"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_accept_sec_context": [
        "gssapi.SecurityContext"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_check_mic": [
        "paramiko.ssh_gss._SSH_GSSAuth._ssh_build_mic"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW.credentials_delegated": [],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW.save_client_creds": [],
    "paramiko.ssh_gss._SSH_SSPI": [],
    "sspi.ClientAuth": [],
    "paramiko.ssh_gss._SSH_SSPI.ssh_get_mic": [
        "paramiko.ssh_gss._SSH_GSSAuth._ssh_build_mic"
    ],
    "paramiko.ssh_gss._SSH_SSPI.ssh_accept_sec_context": [
        "sspi.ServerAuth"
    ],
    "sspi.ServerAuth": [],
    "paramiko.ssh_gss._SSH_SSPI.ssh_check_mic": [
        "paramiko.ssh_gss._SSH_GSSAuth._ssh_build_mic"
    ],
    "paramiko.ssh_gss._SSH_SSPI.credentials_delegated": [],
    "paramiko.ssh_gss._SSH_SSPI.save_client_creds": [],
    "pyasn1.type.univ.Integer": [
        "pyasn1.type.tag.Tag.__init__",
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.base.Asn1Item.getTypeId",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.namedval.NamedValues.__init__"
    ],
    "pyasn1.type.tag.Tag.__init__": [
        "<builtin>.hash"
    ],
    "pyasn1.type.tag.initTagSet": [
        "pyasn1.type.tag.TagSet.__init__"
    ],
    "pyasn1.type.constraint.AbstractConstraint.__init__": [
        "pyasn1.type.constraint.AbstractConstraint._setValues",
        "<builtin>.set",
        "<builtin>.hash"
    ],
    "pyasn1.type.namedval.NamedValues.__init__": [
        "<builtin>.max",
        "<builtin>.isinstance"
    ],
    "pyasn1.type.base.Asn1Item.getTypeId": [],
    "pyasn1.type.univ.Integer.__init__": [
        "pyasn1.type.base.SimpleAsn1Type.__init__"
    ],
    "pyasn1.type.univ.Integer.__and__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.base.SimpleAsn1Type.clone": [],
    "pyasn1.type.univ.Integer.__rand__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__or__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__ror__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__xor__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__rxor__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__lshift__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__rshift__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__add__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__radd__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__sub__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__rsub__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__mul__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__rmul__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__mod__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__rmod__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__pow__": [
        "<builtin>.pow",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__rpow__": [
        "<builtin>.pow",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__floordiv__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__rfloordiv__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__div__": [
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "<builtin>.isinstance",
        "pyasn1.type.base.SimpleAsn1Type.__init__"
    ],
    "pyasn1.type.univ.Integer.__rdiv__": [
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "<builtin>.isinstance",
        "pyasn1.type.base.SimpleAsn1Type.__init__"
    ],
    "pyasn1.type.univ.Integer.__truediv__": [
        "pyasn1.type.base.SimpleAsn1Type.__init__"
    ],
    "pyasn1.type.univ.Integer.__rtruediv__": [
        "pyasn1.type.base.SimpleAsn1Type.__init__"
    ],
    "pyasn1.type.univ.Integer.__divmod__": [
        "<builtin>.divmod",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__rdivmod__": [
        "<builtin>.divmod",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__int__": [
        "<builtin>.int"
    ],
    "pyasn1.type.univ.Integer.__long__": [],
    "pyasn1.type.univ.Integer.__float__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Integer.__abs__": [
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "<builtin>.abs"
    ],
    "pyasn1.type.univ.Integer.__index__": [
        "<builtin>.int"
    ],
    "pyasn1.type.univ.Integer.__pos__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__neg__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__invert__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__round__": [
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "<builtin>.round"
    ],
    "pyasn1.type.univ.Integer.__floor__": [],
    "pyasn1.type.univ.Integer.__ceil__": [],
    "pyasn1.type.univ.Integer.__trunc__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Integer.__lt__": [],
    "pyasn1.type.univ.Integer.__le__": [],
    "pyasn1.type.univ.Integer.__eq__": [],
    "pyasn1.type.univ.Integer.__ne__": [],
    "pyasn1.type.univ.Integer.__gt__": [],
    "pyasn1.type.univ.Integer.__ge__": [],
    "pyasn1.type.univ.Integer.prettyIn": [
        "sys.exc_info",
        "<builtin>.int"
    ],
    "pyasn1.type.univ.Integer.prettyOut": [
        "<builtin>.str"
    ],
    "pyasn1.type.univ.Integer.getNamedValues": [],
    "pyasn1.type.univ.Boolean": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.namedval.NamedValues.__init__",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.SizedInteger": [],
    "pyasn1.type.univ.SizedInteger.setBitLength": [
        "<builtin>.max",
        "pyasn1.compat.integer.bitLength"
    ],
    "pyasn1.compat.integer.bitLength": [
        "<builtin>.hex",
        "<builtin>.len",
        "<builtin>.abs",
        "<builtin>.int"
    ],
    "pyasn1.type.univ.SizedInteger.__len__": [
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "pyasn1.compat.integer.bitLength"
    ],
    "pyasn1.type.univ.BitString": [
        "pyasn1.type.tag.Tag.__init__",
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.base.Asn1Item.getTypeId",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.namedval.NamedValues.__init__"
    ],
    "pyasn1.type.univ.BitString.__init__": [
        "pyasn1.type.base.SimpleAsn1Type.__init__",
        "pyasn1.type.univ.BitString.fromHexString",
        "pyasn1.type.univ.BitString.fromBinaryString"
    ],
    "pyasn1.type.univ.BitString.fromBinaryString": [
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "<builtin>.len",
        "sys.exc_info",
        "pyasn1.type.univ.BitString.__init__"
    ],
    "pyasn1.type.univ.BitString.fromHexString": [
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "<builtin>.len",
        "sys.exc_info",
        "pyasn1.type.univ.BitString.__init__"
    ],
    "pyasn1.type.univ.BitString.__str__": [
        "pyasn1.type.univ.BitString.asBinary"
    ],
    "pyasn1.type.univ.BitString.asBinary": [
        "pyasn1.compat.binary.bin",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.__eq__": [
        "pyasn1.type.univ.BitString.prettyIn",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.prettyIn": [
        "<builtin>.max",
        "<builtin>.isinstance",
        "pyasn1.type.univ.BitString.fromHexString",
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "<builtin>.len",
        "pyasn1.type.univ.BitString.fromBinaryString"
    ],
    "pyasn1.type.univ.BitString.__ne__": [
        "pyasn1.type.univ.BitString.prettyIn",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.__lt__": [
        "pyasn1.type.univ.BitString.prettyIn",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.__le__": [
        "pyasn1.type.univ.BitString.prettyIn",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.__gt__": [
        "pyasn1.type.univ.BitString.prettyIn",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.__ge__": [
        "pyasn1.type.univ.BitString.prettyIn",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.__len__": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.__getitem__": [
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.IndexError",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.BitString.__iter__": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.BitString.__reversed__": [
        "<builtin>.reversed",
        "<builtin>.tuple"
    ],
    "pyasn1.type.univ.BitString.__add__": [
        "pyasn1.type.univ.BitString.prettyIn",
        "<builtin>.len",
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.BitString.__radd__": [
        "pyasn1.type.univ.BitString.prettyIn",
        "<builtin>.len",
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.BitString.__mul__": [
        "<builtin>.len",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.BitString.__rmul__": [],
    "pyasn1.type.univ.BitString.__lshift__": [
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "<builtin>.len",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.BitString.__rshift__": [
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "<builtin>.len",
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "<builtin>.max"
    ],
    "pyasn1.type.univ.BitString.__int__": [],
    "pyasn1.type.univ.BitString.__float__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.BitString.__long__": [],
    "pyasn1.type.univ.BitString.asNumbers": [
        "pyasn1.type.univ.BitString.asOctets",
        "<builtin>.tuple"
    ],
    "pyasn1.type.univ.BitString.asOctets": [
        "<builtin>.len",
        "pyasn1.compat.integer.to_bytes"
    ],
    "pyasn1.compat.integer.to_bytes": [
        "<builtin>.len",
        "<builtin>.max",
        "pyasn1.compat.integer.bitLength",
        "<builtin>.hex",
        "<builtin>.OverflowError",
        "<builtin>.int"
    ],
    "pyasn1.type.univ.BitString.asInteger": [],
    "pyasn1.compat.binary.bin": [
        "<builtin>.abs"
    ],
    "pyasn1.type.univ.BitString.fromOctetString": [
        "pyasn1.type.univ.SizedInteger.setBitLength",
        "<builtin>.len",
        "pyasn1.compat.integer.from_bytes",
        "pyasn1.type.univ.BitString.__init__"
    ],
    "pyasn1.compat.integer.from_bytes": [
        "<builtin>.len",
        "pyasn1.compat.octets.<lambda8>",
        "<builtin>.bytes"
    ],
    "pyasn1.type.univ.all": [],
    "pyasn1.type.univ.OctetString": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.base.Asn1Item.getTypeId",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.OctetString.__init__": [
        "pyasn1.type.base.SimpleAsn1Type.__init__",
        "pyasn1.type.univ.OctetString.fromHexString",
        "pyasn1.type.univ.OctetString.fromBinaryString"
    ],
    "pyasn1.type.univ.OctetString.fromBinaryString": [
        "<builtin>.int"
    ],
    "pyasn1.type.univ.OctetString.fromHexString": [
        "<builtin>.int"
    ],
    "pyasn1.type.univ.OctetString.prettyIn": [
        "<builtin>.isinstance",
        "pyasn1.type.univ.OctetString.asOctets",
        "<builtin>.chr",
        "sys.exc_info",
        "<builtin>.bytes",
        "pyasn1.type.univ.BitString.asOctets",
        "<builtin>.str",
        "pyasn1.type.univ.Null.prettyIn",
        "pyasn1.error.PyAsn1UnicodeError.__init__",
        "pyasn1.type.univ.OctetString.prettyIn"
    ],
    "pyasn1.error.PyAsn1UnicodeError.__init__": [
        "<builtin>.isinstance"
    ],
    "pyasn1.type.univ.OctetString.__str__": [
        "pyasn1.error.PyAsn1UnicodeError.__init__",
        "sys.exc_info",
        "<builtin>.str"
    ],
    "pyasn1.type.univ.OctetString.__unicode__": [
        "pyasn1.error.PyAsn1UnicodeError.__init__",
        "sys.exc_info"
    ],
    "pyasn1.type.univ.OctetString.asOctets": [
        "<builtin>.bytes",
        "<builtin>.str"
    ],
    "pyasn1.type.univ.OctetString.asNumbers": [
        "<builtin>.ord",
        "<builtin>.tuple"
    ],
    "pyasn1.type.univ.Null.prettyIn": [],
    "pyasn1.type.univ.OctetString.__bytes__": [
        "<builtin>.bytes"
    ],
    "pyasn1.type.univ.OctetString.prettyOut": [],
    "pyasn1.type.univ.OctetString.prettyPrint": [
        "pyasn1.type.univ.OctetString.prettyOut",
        "pyasn1.type.univ.OctetString.asNumbers"
    ],
    "pyasn1.type.univ.OctetString.__len__": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.OctetString.__getitem__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.OctetString.__iter__": [
        "<builtin>.iter"
    ],
    "pyasn1.type.univ.OctetString.__contains__": [],
    "pyasn1.type.univ.OctetString.__add__": [
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "pyasn1.type.univ.OctetString.prettyIn",
        "pyasn1.type.univ.Null.prettyIn"
    ],
    "pyasn1.type.univ.OctetString.__radd__": [
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "pyasn1.type.univ.OctetString.prettyIn",
        "pyasn1.type.univ.Null.prettyIn"
    ],
    "pyasn1.type.univ.OctetString.__mul__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.OctetString.__rmul__": [],
    "pyasn1.type.univ.OctetString.__int__": [
        "<builtin>.int"
    ],
    "pyasn1.type.univ.OctetString.__float__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.OctetString.__reversed__": [
        "<builtin>.reversed"
    ],
    "pyasn1.type.univ.Null": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.ObjectIdentifier": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.base.Asn1Item.getTypeId",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.ObjectIdentifier.__add__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.ObjectIdentifier.__radd__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.ObjectIdentifier.asTuple": [],
    "pyasn1.type.univ.ObjectIdentifier.__len__": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.ObjectIdentifier.__getitem__": [
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.ObjectIdentifier.__iter__": [
        "<builtin>.iter"
    ],
    "pyasn1.type.univ.ObjectIdentifier.__contains__": [],
    "pyasn1.type.univ.ObjectIdentifier.index": [
        "pyasn1.type.univ.ObjectIdentifier.index"
    ],
    "pyasn1.type.univ.ObjectIdentifier.isPrefixOf": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.ObjectIdentifier.prettyIn": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "sys.exc_info",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "pyasn1.type.univ.ObjectIdentifier.prettyOut": [
        "<builtin>.str"
    ],
    "pyasn1.type.univ.Real": [
        "pyasn1.type.tag.Tag.__init__",
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.base.Asn1Item.getTypeId",
        "pyasn1.type.tag.initTagSet",
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Real.__normalizeBase10": [],
    "pyasn1.type.univ.Real.prettyIn": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "pyasn1.type.univ.Real.__normalizeBase10",
        "<builtin>.len",
        "<builtin>.float",
        "<builtin>.int"
    ],
    "pyasn1.type.univ.Real.prettyPrint": [
        "pyasn1.type.univ.OctetString.prettyOut",
        "pyasn1.type.univ.Integer.prettyOut",
        "pyasn1.type.univ.ObjectIdentifier.prettyOut",
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.prettyOut"
    ],
    "pyasn1.type.base.SimpleAsn1Type.prettyOut": [
        "<builtin>.str"
    ],
    "pyasn1.type.univ.Real.isPlusInf": [],
    "pyasn1.type.univ.Real.isMinusInf": [],
    "pyasn1.type.univ.Real.isInf": [],
    "pyasn1.type.univ.Real.__add__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__radd__": [],
    "pyasn1.type.univ.Real.__mul__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__rmul__": [],
    "pyasn1.type.univ.Real.__sub__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__rsub__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__mod__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__rmod__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__pow__": [
        "<builtin>.float",
        "<builtin>.pow",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__rpow__": [
        "<builtin>.float",
        "<builtin>.pow",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__div__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__rdiv__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__truediv__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__rtruediv__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__divmod__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__rdivmod__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__int__": [
        "<builtin>.float",
        "<builtin>.int"
    ],
    "pyasn1.type.univ.Real.__long__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Real.__float__": [
        "<builtin>.float",
        "<builtin>.pow"
    ],
    "pyasn1.type.univ.Real.__abs__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "<builtin>.abs"
    ],
    "pyasn1.type.univ.Real.__pos__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__neg__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__round__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone",
        "<builtin>.round"
    ],
    "pyasn1.type.univ.Real.__floor__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__ceil__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__trunc__": [
        "<builtin>.float",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.type.univ.Real.__lt__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Real.__le__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Real.__eq__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Real.__ne__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Real.__gt__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Real.__ge__": [
        "<builtin>.float"
    ],
    "pyasn1.type.univ.Real.__nonzero__": [
        "<builtin>.float",
        "<builtin>.bool"
    ],
    "pyasn1.type.univ.Real.__bool__": [
        "<builtin>.float",
        "<builtin>.bool"
    ],
    "pyasn1.type.univ.Real.__getitem__": [],
    "pyasn1.type.univ.Real.isPlusInfinity": [],
    "pyasn1.type.univ.Real.isMinusInfinity": [],
    "pyasn1.type.univ.Real.isInfinity": [],
    "pyasn1.type.univ.Enumerated": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.namedval.NamedValues.__init__",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase": [],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.__init__": [
        "pyasn1.type.base.ConstructedAsn1Type.__init__",
        "<builtin>.zip"
    ],
    "pyasn1.type.base.ConstructedAsn1Type.__init__": [
        "pyasn1.type.base.Asn1Type.__init__",
        "pyasn1.type.base.ConstructedAsn1Type._moveSizeSpec"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.__getitem__": [
        "sys.exc_info",
        "pyasn1.type.univ.SequenceOfAndSetOfBase.getComponentByPosition",
        "<builtin>.IndexError"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.getComponentByPosition": [
        "<builtin>.isinstance",
        "pyasn1.type.univ.SequenceOfAndSetOfBase.setComponentByPosition",
        "<builtin>.range",
        "<builtin>.tuple",
        "<builtin>.len",
        "pyasn1.type.univ.SequenceOfAndSetOfBase.getComponentByPosition"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.__setitem__": [
        "<builtin>.IndexError",
        "sys.exc_info",
        "pyasn1.type.univ.SequenceOfAndSetOfBase.setComponentByPosition"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.setComponentByPosition": [
        "<builtin>.isinstance",
        "pyasn1.type.univ.SequenceOfAndSetOfBase.setComponentByPosition",
        "<builtin>.range",
        "<builtin>.tuple",
        "<builtin>.enumerate",
        "pyasn1.type.namedtype.NamedTypes.clone",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.append": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.count": [
        "<builtin>.list"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.extend": [
        "pyasn1.type.univ.SequenceOfAndSetOfBase.append"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.index": [
        "<builtin>.list",
        "<builtin>.zip",
        "sys.exc_info",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.reverse": [],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.sort": [
        "<builtin>.dict",
        "<builtin>.sorted",
        "<builtin>.enumerate"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.__len__": [
        "<builtin>.max"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.__iter__": [
        "<builtin>.len",
        "pyasn1.type.univ.SequenceOfAndSetOfBase.getComponentByPosition",
        "<builtin>.range"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase._cloneComponentValues": [
        "<builtin>.isinstance"
    ],
    "pyasn1.type.namedtype.NamedTypes.clone": [],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.componentTagMap": [],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.components": [
        "<builtin>.sorted"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.clear": [],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.reset": [],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.prettyPrint": [
        "<builtin>.enumerate"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.prettyPrintType": [],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.isValue": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.SequenceOfAndSetOfBase.isInconsistent": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "sys.exc_info"
    ],
    "pyasn1.type.univ.SequenceOf": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.SetOf": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.SequenceAndSetBase": [
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames",
        "pyasn1.type.namedtype.NamedTypes.__init__"
    ],
    "pyasn1.type.namedtype.NamedTypes.__init__": [
        "pyasn1.type.namedtype.NamedTypes.__computeTagMaps",
        "pyasn1.type.namedtype.NamedTypes.__computeNameToPosMap",
        "<builtin>.frozenset",
        "pyasn1.type.namedtype.NamedTypes.__computeMinTagSet",
        "<builtin>.tuple",
        "pyasn1.type.namedtype.<lambda1>",
        "<builtin>.enumerate",
        "<builtin>.len",
        "pyasn1.type.namedtype.NamedTypes.__computeAmbiguousTypes",
        "pyasn1.type.namedtype.NamedTypes.__computeTagToPosMap"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames": [],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.__init__": [],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.__len__": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.__contains__": [],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.__iter__": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.__getitem__": [],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.getNameByPosition": [],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.getPositionByName": [],
    "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.addField": [],
    "pyasn1.type.univ.SequenceAndSetBase.__init__": [
        "<builtin>.len",
        "pyasn1.type.base.ConstructedAsn1Type.__init__",
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.__init__"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.__getitem__": [
        "pyasn1.type.univ.SequenceAndSetBase.getComponentByPosition",
        "pyasn1.type.univ.SequenceAndSetBase.getComponentByName",
        "sys.exc_info",
        "pyasn1.type.univ.Choice.getComponentByPosition",
        "<builtin>.IndexError",
        "<builtin>.KeyError"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.getComponentByName": [
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.getPositionByName",
        "pyasn1.type.univ.Choice.getComponentByPosition",
        "pyasn1.type.namedtype.NamedTypes.getPositionByName",
        "pyasn1.type.univ.SequenceAndSetBase.getComponentByPosition"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.getComponentByPosition": [
        "pyasn1.type.univ.SequenceAndSetBase.setComponentByPosition",
        "pyasn1.type.univ.Choice.setComponentByPosition"
    ],
    "pyasn1.type.univ.Choice.getComponentByPosition": [
        "pyasn1.type.univ.Choice.getComponentByPosition",
        "pyasn1.type.univ.SequenceAndSetBase.getComponentByPosition"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.__setitem__": [
        "pyasn1.type.univ.SequenceAndSetBase.setComponentByPosition",
        "pyasn1.type.univ.SequenceAndSetBase.setComponentByName",
        "pyasn1.type.univ.Choice.setComponentByPosition",
        "sys.exc_info",
        "<builtin>.IndexError",
        "<builtin>.KeyError"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.setComponentByName": [
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.getPositionByName",
        "pyasn1.type.namedtype.NamedTypes.getPositionByName",
        "pyasn1.type.univ.SequenceAndSetBase.setComponentByPosition",
        "pyasn1.type.univ.Choice.setComponentByPosition"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.setComponentByPosition": [
        "pyasn1.type.base.ConstructedAsn1Type.clone",
        "<builtin>.isinstance",
        "pyasn1.type.namedtype.NamedTypes.getTypeByPosition",
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.addField",
        "<builtin>.len"
    ],
    "pyasn1.type.univ.Choice.setComponentByPosition": [
        "pyasn1.type.univ.SequenceAndSetBase.setComponentByPosition",
        "pyasn1.type.univ.Choice.setComponentByPosition"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.__contains__": [],
    "pyasn1.type.univ.SequenceAndSetBase.__len__": [
        "<builtin>.len"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.__iter__": [
        "<builtin>.iter"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.values": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.keys": [
        "<builtin>.iter"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.items": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.update": [],
    "pyasn1.type.univ.SequenceAndSetBase.clear": [
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.__init__"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.reset": [
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.__init__"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.components": [],
    "pyasn1.type.univ.SequenceAndSetBase._cloneComponentValues": [
        "<builtin>.isinstance",
        "<builtin>.enumerate"
    ],
    "pyasn1.type.namedtype.NamedTypes.getPositionByName": [],
    "pyasn1.type.namedtype.NamedTypes.getTypeByPosition": [],
    "pyasn1.type.base.ConstructedAsn1Type.clone": [
        "pyasn1.type.base.ConstructedAsn1Type._cloneComponentValues",
        "pyasn1.type.univ.Choice._cloneComponentValues"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.isValue": [
        "<builtin>.enumerate"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.isInconsistent": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.namedtype.NamedTypes.getNameByPosition",
        "sys.exc_info",
        "<builtin>.enumerate"
    ],
    "pyasn1.type.namedtype.NamedTypes.getNameByPosition": [],
    "pyasn1.type.univ.SequenceAndSetBase.prettyPrint": [
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.getNameByPosition",
        "pyasn1.type.namedtype.NamedTypes.getNameByPosition",
        "<builtin>.enumerate"
    ],
    "pyasn1.type.univ.SequenceAndSetBase.prettyPrintType": [
        "pyasn1.type.namedtype.NamedTypes.values",
        "pyasn1.type.univ.SequenceAndSetBase.DynamicNames.getNameByPosition",
        "pyasn1.type.namedtype.NamedTypes.getNameByPosition",
        "<builtin>.enumerate"
    ],
    "pyasn1.type.namedtype.NamedTypes.values": [],
    "pyasn1.type.univ.SequenceAndSetBase.setDefaultComponents": [],
    "pyasn1.type.univ.SequenceAndSetBase.getComponentType": [],
    "pyasn1.type.univ.SequenceAndSetBase.getNameByPosition": [],
    "pyasn1.type.univ.Sequence": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.namedtype.NamedTypes.__init__",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.Sequence.getComponentTagMapNearPosition": [
        "pyasn1.type.namedtype.NamedTypes.getTagMapNearPosition"
    ],
    "pyasn1.type.namedtype.NamedTypes.getTagMapNearPosition": [],
    "pyasn1.type.univ.Sequence.getComponentPositionNearType": [
        "pyasn1.type.namedtype.NamedTypes.getPositionNearType"
    ],
    "pyasn1.type.namedtype.NamedTypes.getPositionNearType": [],
    "pyasn1.type.univ.Set": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.namedtype.NamedTypes.__init__",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.univ.Set.getComponent": [],
    "pyasn1.type.univ.Set.getComponentByType": [
        "<builtin>.isinstance",
        "pyasn1.type.univ.SequenceAndSetBase.getComponentByPosition",
        "pyasn1.type.namedtype.NamedTypes.getPositionByType",
        "pyasn1.type.univ.Choice.getComponent",
        "pyasn1.type.univ.Choice.getComponentByPosition"
    ],
    "pyasn1.type.namedtype.NamedTypes.getPositionByType": [],
    "pyasn1.type.univ.Choice.getComponent": [
        "<builtin>.isinstance"
    ],
    "pyasn1.type.univ.Set.setComponentByType": [
        "pyasn1.type.univ.SequenceAndSetBase.setComponentByPosition",
        "pyasn1.type.univ.SequenceAndSetBase.getComponentByPosition",
        "pyasn1.type.namedtype.NamedTypes.getPositionByType",
        "pyasn1.type.namedtype.NamedTypes.getTypeByPosition",
        "pyasn1.type.univ.Choice.setComponentByPosition",
        "pyasn1.type.univ.Set.setComponentByType",
        "pyasn1.type.univ.Choice.getComponentByPosition"
    ],
    "pyasn1.type.univ.Set.componentTagMap": [],
    "pyasn1.type.univ.Choice": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.namedtype.NamedTypes.__init__",
        "pyasn1.type.tag.TagSet.__init__"
    ],
    "pyasn1.type.tag.TagSet.__init__": [
        "<builtin>.len",
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "pyasn1.type.univ.Choice.__eq__": [],
    "pyasn1.type.univ.Choice.__ne__": [],
    "pyasn1.type.univ.Choice.__lt__": [],
    "pyasn1.type.univ.Choice.__le__": [],
    "pyasn1.type.univ.Choice.__gt__": [],
    "pyasn1.type.univ.Choice.__ge__": [],
    "pyasn1.type.univ.Choice.__nonzero__": [],
    "pyasn1.type.univ.Choice.__bool__": [],
    "pyasn1.type.univ.Choice.__len__": [],
    "pyasn1.type.univ.Choice.__contains__": [],
    "pyasn1.type.univ.Choice.__iter__": [],
    "pyasn1.type.univ.Choice.values": [],
    "pyasn1.type.univ.Choice.keys": [],
    "pyasn1.type.univ.Choice.items": [],
    "pyasn1.type.univ.Choice.checkConsistency": [],
    "pyasn1.type.univ.Choice._cloneComponentValues": [
        "<builtin>.isinstance",
        "pyasn1.type.univ.Choice.getComponent"
    ],
    "pyasn1.type.univ.Choice.effectiveTagSet": [
        "pyasn1.type.univ.Choice.getComponent"
    ],
    "pyasn1.type.univ.Choice.tagMap": [],
    "pyasn1.type.univ.Choice.getName": [
        "pyasn1.type.namedtype.NamedTypes.getNameByPosition",
        "<builtin>.isinstance"
    ],
    "pyasn1.type.univ.Choice.isValue": [],
    "pyasn1.type.univ.Choice.clear": [
        "pyasn1.type.univ.Choice.clear",
        "pyasn1.type.univ.SequenceAndSetBase.clear"
    ],
    "pyasn1.type.univ.Choice.getMinTagSet": [],
    "pyasn1.type.univ.Any": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.tag.TagSet.__init__"
    ],
    "pyasn1.type.univ.Any.tagMap": [
        "pyasn1.type.tagmap.TagMap.__init__"
    ],
    "pyasn1.type.tagmap.TagMap.__init__": [],
    "pyasn1.codec": [],
    "pyasn1.codec.ber.eoo.EndOfOctets": [
        "pyasn1.type.tag.initTagSet",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.codec.ber.eoo.EndOfOctets.__new__": [],
    "pyasn1.type.tag.Tag": [],
    "pyasn1.type.tag.Tag.__repr__": [],
    "pyasn1.type.tag.Tag.__eq__": [],
    "pyasn1.type.tag.Tag.__ne__": [],
    "pyasn1.type.tag.Tag.__lt__": [],
    "pyasn1.type.tag.Tag.__le__": [],
    "pyasn1.type.tag.Tag.__gt__": [],
    "pyasn1.type.tag.Tag.__ge__": [],
    "pyasn1.type.tag.Tag.__hash__": [],
    "pyasn1.type.tag.Tag.__getitem__": [
        "<builtin>.IndexError"
    ],
    "pyasn1.type.tag.Tag.__iter__": [],
    "pyasn1.type.tag.Tag.__and__": [],
    "pyasn1.type.tag.Tag.__or__": [],
    "pyasn1.type.tag.Tag.tagClass": [],
    "pyasn1.type.tag.Tag.tagFormat": [],
    "pyasn1.type.tag.Tag.tagId": [],
    "pyasn1.type.tag.TagSet": [],
    "pyasn1.type.tag.TagSet.__repr__": [],
    "pyasn1.type.tag.TagSet.__add__": [],
    "pyasn1.type.tag.TagSet.__radd__": [],
    "pyasn1.type.tag.TagSet.__getitem__": [],
    "pyasn1.type.tag.TagSet.__eq__": [],
    "pyasn1.type.tag.TagSet.__ne__": [],
    "pyasn1.type.tag.TagSet.__lt__": [],
    "pyasn1.type.tag.TagSet.__le__": [],
    "pyasn1.type.tag.TagSet.__gt__": [],
    "pyasn1.type.tag.TagSet.__ge__": [],
    "pyasn1.type.tag.TagSet.__hash__": [],
    "pyasn1.type.tag.TagSet.__len__": [],
    "pyasn1.type.tag.TagSet.baseTag": [],
    "pyasn1.type.tag.TagSet.superTags": [],
    "pyasn1.type.tag.TagSet.tagExplicitly": [
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.tag.TagSet.tagImplicitly": [
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.tag.TagSet.isSuperTagSetOf": [
        "<builtin>.len"
    ],
    "pyasn1.type.tag.TagSet.getBaseTag": [],
    "pyasn1.error.PyAsn1Error": [],
    "pyasn1.error.ValueConstraintError": [],
    "pyasn1.error.SubstrateUnderrunError": [],
    "pyasn1.error.PyAsn1UnicodeError": [],
    "pyasn1.error.PyAsn1UnicodeDecodeError": [],
    "pyasn1.error.PyAsn1UnicodeEncodeError": [],
    "pyasn1.type.base.Asn1Item": [],
    "pyasn1.type.base.Asn1Type": [
        "pyasn1.type.constraint.AbstractConstraint.__init__",
        "pyasn1.type.tag.TagSet.__init__"
    ],
    "pyasn1.type.base.Asn1Type.__init__": [],
    "pyasn1.type.base.Asn1Type.__setattr__": [],
    "pyasn1.type.base.Asn1Type.__str__": [
        "pyasn1.type.base.Asn1Type.prettyPrint"
    ],
    "pyasn1.type.base.Asn1Type.prettyPrint": [
        "<builtin>.NotImplementedError"
    ],
    "pyasn1.type.base.Asn1Type.readOnly": [],
    "pyasn1.type.base.Asn1Type.effectiveTagSet": [],
    "pyasn1.type.base.Asn1Type.tagMap": [
        "pyasn1.type.tagmap.TagMap.__init__"
    ],
    "pyasn1.type.base.Asn1Type.isSameTypeWith": [],
    "pyasn1.type.base.Asn1Type.isSuperTypeOf": [
        "pyasn1.type.tag.TagSet.isSuperTagSetOf",
        "pyasn1.type.constraint.AbstractConstraint.isSuperTypeOf"
    ],
    "pyasn1.type.constraint.AbstractConstraint.isSuperTypeOf": [],
    "pyasn1.type.base.Asn1Type.isNoValue": [],
    "pyasn1.type.base.Asn1Type.getTagSet": [],
    "pyasn1.type.base.Asn1Type.getEffectiveTagSet": [],
    "pyasn1.type.base.Asn1Type.getTagMap": [],
    "pyasn1.type.base.Asn1Type.getSubtypeSpec": [],
    "pyasn1.type.base.Asn1Type.hasValue": [],
    "pyasn1.type.base.NoValue": [
        "<builtin>.set"
    ],
    "pyasn1.type.base.NoValue.__new__": [
        "<builtin>.getattr",
        "pyasn1.type.base.NoValue.__new__.getPlug",
        "pyasn1.compat.calling.callable",
        "<builtin>.dir",
        "<builtin>.set",
        "<builtin>.setattr"
    ],
    "pyasn1.type.base.NoValue.__new__.getPlug": [],
    "pyasn1.type.base.NoValue.__new__.getPlug.plug": [],
    "pyasn1.compat.calling.callable": [
        "<builtin>.isinstance"
    ],
    "pyasn1.type.base.NoValue.__getattr__": [
        "<builtin>.AttributeError"
    ],
    "pyasn1.type.base.NoValue.__repr__": [],
    "pyasn1.type.base.SimpleAsn1Type": [],
    "pyasn1.type.base.SimpleAsn1Type.prettyIn": [],
    "pyasn1.type.base.SimpleAsn1Type.__repr__": [
        "pyasn1.type.univ.OctetString.prettyPrint",
        "pyasn1.type.base.SimpleAsn1Type.prettyPrint",
        "pyasn1.type.univ.Real.prettyPrint",
        "<builtin>.len"
    ],
    "pyasn1.type.base.SimpleAsn1Type.prettyPrint": [
        "pyasn1.type.univ.ObjectIdentifier.prettyOut",
        "pyasn1.type.univ.OctetString.prettyOut",
        "pyasn1.type.base.SimpleAsn1Type.prettyOut",
        "pyasn1.type.univ.Integer.prettyOut"
    ],
    "pyasn1.type.base.SimpleAsn1Type.__eq__": [],
    "pyasn1.type.base.SimpleAsn1Type.__ne__": [],
    "pyasn1.type.base.SimpleAsn1Type.__lt__": [],
    "pyasn1.type.base.SimpleAsn1Type.__le__": [],
    "pyasn1.type.base.SimpleAsn1Type.__gt__": [],
    "pyasn1.type.base.SimpleAsn1Type.__ge__": [],
    "pyasn1.type.base.SimpleAsn1Type.__nonzero__": [],
    "pyasn1.type.base.SimpleAsn1Type.__bool__": [],
    "pyasn1.type.base.SimpleAsn1Type.__hash__": [
        "<builtin>.hash"
    ],
    "pyasn1.type.base.SimpleAsn1Type.isValue": [],
    "pyasn1.type.base.SimpleAsn1Type.subtype": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.TagSet.tagExplicitly"
    ],
    "pyasn1.type.base.SimpleAsn1Type.prettyPrintType": [],
    "pyasn1.type.base.ConstructedAsn1Type": [
        "pyasn1.type.constraint.AbstractConstraint.__init__"
    ],
    "pyasn1.type.base.ConstructedAsn1Type._moveSizeSpec": [],
    "pyasn1.type.base.ConstructedAsn1Type.__repr__": [
        "<builtin>.repr"
    ],
    "pyasn1.type.base.ConstructedAsn1Type.__eq__": [],
    "pyasn1.type.base.ConstructedAsn1Type.__ne__": [],
    "pyasn1.type.base.ConstructedAsn1Type.__lt__": [],
    "pyasn1.type.base.ConstructedAsn1Type.__le__": [],
    "pyasn1.type.base.ConstructedAsn1Type.__gt__": [],
    "pyasn1.type.base.ConstructedAsn1Type.__ge__": [],
    "pyasn1.type.base.ConstructedAsn1Type.__nonzero__": [
        "<builtin>.bool"
    ],
    "pyasn1.type.base.ConstructedAsn1Type.__bool__": [
        "<builtin>.bool"
    ],
    "pyasn1.type.base.ConstructedAsn1Type.components": [],
    "pyasn1.type.base.ConstructedAsn1Type._cloneComponentValues": [],
    "pyasn1.type.base.ConstructedAsn1Type.subtype": [
        "pyasn1.type.base.ConstructedAsn1Type._cloneComponentValues",
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.TagSet.tagExplicitly",
        "pyasn1.type.univ.Choice._cloneComponentValues"
    ],
    "pyasn1.type.base.ConstructedAsn1Type.getComponentByPosition": [],
    "pyasn1.type.base.ConstructedAsn1Type.setComponentByPosition": [],
    "pyasn1.type.base.ConstructedAsn1Type.setComponents": [
        "<builtin>.enumerate"
    ],
    "pyasn1.type.base.ConstructedAsn1Type.setDefaultComponents": [],
    "pyasn1.type.base.ConstructedAsn1Type.getComponentType": [],
    "pyasn1.type.base.ConstructedAsn1Type.verifySizeSpec": [
        "pyasn1.type.constraint.AbstractConstraint.__init__"
    ],
    "pyasn1.type.tagmap.TagMap": [],
    "pyasn1.type.tagmap.TagMap.__contains__": [],
    "pyasn1.type.tagmap.TagMap.__getitem__": [
        "<builtin>.KeyError"
    ],
    "pyasn1.type.tagmap.TagMap.__iter__": [
        "<builtin>.iter"
    ],
    "pyasn1.type.tagmap.TagMap.__repr__": [
        "<builtin>.repr"
    ],
    "pyasn1.type.tagmap.TagMap.presentTypes": [],
    "pyasn1.type.tagmap.TagMap.skipTypes": [],
    "pyasn1.type.tagmap.TagMap.defaultType": [],
    "pyasn1.type.tagmap.TagMap.getPosMap": [],
    "pyasn1.type.tagmap.TagMap.getNegMap": [],
    "pyasn1.type.tagmap.TagMap.getDef": [],
    "pyasn1.compat": [],
    "pyasn1.type.constraint.AbstractConstraint": [],
    "pyasn1.type.constraint.AbstractConstraint._setValues": [],
    "pyasn1.type.constraint.AbstractConstraint.__call__": [
        "sys.exc_info",
        "pyasn1.type.constraint.AbstractConstraint._testValue"
    ],
    "pyasn1.type.constraint.AbstractConstraint._testValue": [],
    "pyasn1.type.constraint.AbstractConstraint.__repr__": [
        "<builtin>.repr"
    ],
    "pyasn1.type.constraint.AbstractConstraint.__eq__": [],
    "pyasn1.type.constraint.AbstractConstraint.__ne__": [],
    "pyasn1.type.constraint.AbstractConstraint.__lt__": [],
    "pyasn1.type.constraint.AbstractConstraint.__le__": [],
    "pyasn1.type.constraint.AbstractConstraint.__gt__": [],
    "pyasn1.type.constraint.AbstractConstraint.__ge__": [],
    "pyasn1.type.constraint.AbstractConstraint.__nonzero__": [],
    "pyasn1.type.constraint.AbstractConstraint.__bool__": [],
    "pyasn1.type.constraint.AbstractConstraint.__hash__": [],
    "pyasn1.type.constraint.AbstractConstraint.getValueMap": [],
    "pyasn1.type.constraint.AbstractConstraint.isSubTypeOf": [],
    "pyasn1.type.constraint.SingleValueConstraint": [],
    "pyasn1.type.constraint.SingleValueConstraint._setValues": [
        "<builtin>.set"
    ],
    "pyasn1.type.constraint.SingleValueConstraint._testValue": [],
    "pyasn1.type.constraint.SingleValueConstraint.__contains__": [],
    "pyasn1.type.constraint.SingleValueConstraint.__iter__": [
        "<builtin>.iter"
    ],
    "pyasn1.type.constraint.SingleValueConstraint.__sub__": [],
    "pyasn1.type.constraint.SingleValueConstraint.__add__": [],
    "pyasn1.type.constraint.ContainedSubtypeConstraint": [],
    "pyasn1.type.constraint.ContainedSubtypeConstraint._testValue": [
        "<builtin>.isinstance"
    ],
    "pyasn1.type.constraint.ValueRangeConstraint": [],
    "pyasn1.type.constraint.ValueRangeConstraint._testValue": [],
    "pyasn1.type.constraint.ValueRangeConstraint._setValues": [
        "<builtin>.len",
        "pyasn1.type.constraint.AbstractConstraint._setValues"
    ],
    "pyasn1.type.constraint.ValueSizeConstraint": [],
    "pyasn1.type.constraint.ValueSizeConstraint._testValue": [
        "<builtin>.len"
    ],
    "pyasn1.type.constraint.PermittedAlphabetConstraint": [],
    "pyasn1.type.constraint.PermittedAlphabetConstraint._setValues": [
        "<builtin>.set"
    ],
    "pyasn1.type.constraint.PermittedAlphabetConstraint._testValue": [],
    "pyasn1.type.constraint.ComponentPresentConstraint": [],
    "pyasn1.type.constraint.ComponentPresentConstraint._setValues": [],
    "pyasn1.type.constraint.ComponentPresentConstraint._testValue": [],
    "pyasn1.type.constraint.ComponentAbsentConstraint": [],
    "pyasn1.type.constraint.ComponentAbsentConstraint._setValues": [],
    "pyasn1.type.constraint.ComponentAbsentConstraint._testValue": [],
    "pyasn1.type.constraint.WithComponentsConstraint": [],
    "pyasn1.type.constraint.WithComponentsConstraint._testValue": [],
    "pyasn1.type.constraint.WithComponentsConstraint._setValues": [
        "pyasn1.type.constraint.AbstractConstraint._setValues"
    ],
    "pyasn1.type.constraint.InnerTypeConstraint": [],
    "pyasn1.type.constraint.InnerTypeConstraint._testValue": [],
    "pyasn1.type.constraint.InnerTypeConstraint._setValues": [
        "pyasn1.type.constraint.AbstractConstraint._setValues",
        "<builtin>.isinstance"
    ],
    "pyasn1.type.constraint.ConstraintsExclusion": [],
    "pyasn1.type.constraint.ConstraintsExclusion._testValue": [],
    "pyasn1.type.constraint.ConstraintsExclusion._setValues": [
        "pyasn1.type.constraint.AbstractConstraint._setValues"
    ],
    "pyasn1.type.constraint.AbstractConstraintSet": [],
    "pyasn1.type.constraint.AbstractConstraintSet.__getitem__": [],
    "pyasn1.type.constraint.AbstractConstraintSet.__iter__": [
        "<builtin>.iter"
    ],
    "pyasn1.type.constraint.AbstractConstraintSet.__add__": [],
    "pyasn1.type.constraint.AbstractConstraintSet.__radd__": [],
    "pyasn1.type.constraint.AbstractConstraintSet.__len__": [
        "<builtin>.len"
    ],
    "pyasn1.type.constraint.AbstractConstraintSet._setValues": [],
    "pyasn1.type.constraint.ConstraintsIntersection": [],
    "pyasn1.type.constraint.ConstraintsIntersection._testValue": [],
    "pyasn1.type.constraint.ConstraintsUnion": [],
    "pyasn1.type.constraint.ConstraintsUnion._testValue": [],
    "pyasn1.type.error.ValueConstraintError": [],
    "pyasn1.codec.ber": [],
    "pyasn1.type.namedtype.<lambda1>": [
        "<builtin>.bool",
        "<builtin>.filter"
    ],
    "pyasn1.type.namedtype.NamedType": [],
    "pyasn1.type.namedtype.NamedType.__init__": [],
    "pyasn1.type.namedtype.NamedType.__repr__": [],
    "pyasn1.type.namedtype.NamedType.__eq__": [],
    "pyasn1.type.namedtype.NamedType.__ne__": [],
    "pyasn1.type.namedtype.NamedType.__lt__": [],
    "pyasn1.type.namedtype.NamedType.__le__": [],
    "pyasn1.type.namedtype.NamedType.__gt__": [],
    "pyasn1.type.namedtype.NamedType.__ge__": [],
    "pyasn1.type.namedtype.NamedType.__hash__": [
        "<builtin>.hash"
    ],
    "pyasn1.type.namedtype.NamedType.__getitem__": [],
    "pyasn1.type.namedtype.NamedType.__iter__": [
        "<builtin>.iter"
    ],
    "pyasn1.type.namedtype.NamedType.name": [],
    "pyasn1.type.namedtype.NamedType.asn1Object": [],
    "pyasn1.type.namedtype.NamedType.openType": [],
    "pyasn1.type.namedtype.NamedType.getName": [],
    "pyasn1.type.namedtype.NamedType.getType": [],
    "pyasn1.type.namedtype.OptionalNamedType": [],
    "pyasn1.type.namedtype.DefaultedNamedType": [],
    "pyasn1.type.namedtype.NamedTypes": [
        "pyasn1.type.namedtype.NamedTypes.PostponedError"
    ],
    "pyasn1.type.namedtype.NamedTypes.__computeMinTagSet": [
        "pyasn1.type.tag.TagSet.__init__"
    ],
    "pyasn1.type.namedtype.NamedTypes.__computeNameToPosMap": [
        "pyasn1.type.namedtype.NamedTypes.PostponedError.__init__",
        "<builtin>.enumerate"
    ],
    "pyasn1.type.namedtype.NamedTypes.__computeTagToPosMap": [
        "pyasn1.type.namedtype.NamedTypes.PostponedError.__init__",
        "<builtin>.isinstance",
        "<builtin>.enumerate"
    ],
    "pyasn1.type.namedtype.NamedTypes.__computeAmbiguousTypes": [
        "<builtin>.len",
        "<builtin>.reversed",
        "<builtin>.tuple",
        "pyasn1.type.namedtype.NamedTypes.__init__",
        "<builtin>.enumerate",
        "<builtin>.dict"
    ],
    "pyasn1.type.namedtype.NamedTypes.__computeTagMaps": [
        "pyasn1.type.namedtype.NamedTypes.PostponedError.__init__",
        "<builtin>.isinstance",
        "pyasn1.type.tagmap.TagMap.__init__"
    ],
    "pyasn1.type.namedtype.NamedTypes.__repr__": [],
    "pyasn1.type.namedtype.NamedTypes.__eq__": [],
    "pyasn1.type.namedtype.NamedTypes.__ne__": [],
    "pyasn1.type.namedtype.NamedTypes.__lt__": [],
    "pyasn1.type.namedtype.NamedTypes.__le__": [],
    "pyasn1.type.namedtype.NamedTypes.__gt__": [],
    "pyasn1.type.namedtype.NamedTypes.__ge__": [],
    "pyasn1.type.namedtype.NamedTypes.__hash__": [
        "<builtin>.hash"
    ],
    "pyasn1.type.namedtype.NamedTypes.__getitem__": [],
    "pyasn1.type.namedtype.NamedTypes.__contains__": [],
    "pyasn1.type.namedtype.NamedTypes.__iter__": [],
    "pyasn1.type.namedtype.NamedTypes.__nonzero__": [],
    "pyasn1.type.namedtype.NamedTypes.__bool__": [],
    "pyasn1.type.namedtype.NamedTypes.__len__": [],
    "pyasn1.type.namedtype.NamedTypes.keys": [],
    "pyasn1.type.namedtype.NamedTypes.items": [],
    "pyasn1.type.namedtype.NamedTypes.PostponedError": [],
    "pyasn1.type.namedtype.NamedTypes.PostponedError.__init__": [],
    "pyasn1.type.namedtype.NamedTypes.PostponedError.__getitem__": [],
    "pyasn1.type.namedtype.NamedTypes.minTagSet": [],
    "pyasn1.type.namedtype.NamedTypes.tagMap": [],
    "pyasn1.type.namedtype.NamedTypes.tagMapUnique": [],
    "pyasn1.type.namedtype.NamedTypes.hasOptionalOrDefault": [],
    "pyasn1.type.namedtype.NamedTypes.hasOpenTypes": [],
    "pyasn1.type.namedtype.NamedTypes.namedTypes": [
        "<builtin>.tuple"
    ],
    "pyasn1.type.namedtype.NamedTypes.requiredComponents": [],
    "pyasn1.compat.octets.<lambda1>": [
        "pyasn1.compat.octets.<lambda7>"
    ],
    "pyasn1.compat.octets.<lambda7>": [
        "pyasn1.compat.octets.<lambda1>"
    ],
    "pyasn1.compat.octets.<lambda2>": [
        "pyasn1.compat.octets.<lambda8>"
    ],
    "pyasn1.compat.octets.<lambda8>": [],
    "pyasn1.compat.octets.<lambda3>": [],
    "pyasn1.compat.octets.<lambda4>": [],
    "pyasn1.compat.octets.<lambda5>": [
        "<builtin>.isinstance"
    ],
    "pyasn1.compat.octets.<lambda6>": [
        "<builtin>.isinstance"
    ],
    "pyasn1.compat.octets.<lambda9>": [],
    "pyasn1.compat.octets.<lambda10>": [],
    "pyasn1.compat.octets.<lambda11>": [],
    "pyasn1.compat.octets.<lambda12>": [
        "<builtin>.isinstance"
    ],
    "pyasn1.compat.octets.<lambda13>": [
        "<builtin>.isinstance"
    ],
    "platform._comparable_version": [
        "<builtin>.int"
    ],
    "platform.libc_ver": [
        "<builtin>.max",
        "<builtin>.tuple",
        "<builtin>.open",
        "platform._comparable_version",
        "posixpath.realpath",
        "<builtin>.len",
        "ntpath.realpath",
        "<builtin>.hasattr"
    ],
    "platform._norm_version": [
        "<builtin>.map",
        "<builtin>.list"
    ],
    "platform.win32_is_iot": [
        "platform.win32_edition"
    ],
    "platform.win32_edition": [
        "winreg.OpenKeyEx",
        "winreg.QueryValueEx",
        "_winreg.OpenKeyEx",
        "_winreg.QueryValueEx"
    ],
    "_winreg.OpenKeyEx": [],
    "winreg.OpenKeyEx": [],
    "winreg.QueryValueEx": [],
    "_winreg.QueryValueEx": [],
    "platform.win32_ver": [
        "<builtin>.getattr",
        "sys.getwindowsversion",
        "winreg.OpenKeyEx",
        "_winreg.OpenKeyEx"
    ],
    "plistlib.load": [],
    "platform.mac_ver": [
        "platform._mac_ver_xml"
    ],
    "platform._java_getprop": [
        "java.lang.System.getProperty"
    ],
    "java.lang.System.getProperty": [],
    "platform.java_ver": [
        "platform._java_getprop"
    ],
    "platform.system_alias": [
        "<builtin>.str",
        "<builtin>.int"
    ],
    "platform._platform": [
        "<builtin>.filter"
    ],
    "platform._follow_symlinks": [
        "posixpath.abspath",
        "posixpath.normpath",
        "ntpath.normpath",
        "ntpath.abspath",
        "posixpath.join",
        "ntpath.join",
        "ntpath.dirname",
        "posixpath.islink",
        "ntpath.islink",
        "posixpath.dirname"
    ],
    "platform.uname": [
        "<builtin>.list",
        "<builtin>.filter",
        "platform._syscmd_ver",
        "platform._node",
        "vms_lib.getsyi",
        "platform._syscmd_uname",
        "platform.win32_ver",
        "platform.java_ver"
    ],
    "vms_lib.getsyi": [],
    "platform.system": [
        "platform.uname"
    ],
    "platform.node": [
        "platform.uname"
    ],
    "platform.release": [
        "platform.uname"
    ],
    "platform.version": [
        "platform.uname"
    ],
    "platform.machine": [
        "platform.uname"
    ],
    "platform.processor": [
        "platform.uname"
    ],
    "platform._sys_version": [
        "<builtin>.repr",
        "sys.platform.startswith",
        "sys.version.startswith",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "sys.version.startswith": [],
    "platform.python_implementation": [
        "platform._sys_version"
    ],
    "platform.python_version": [
        "platform._sys_version"
    ],
    "platform.python_version_tuple": [
        "platform._sys_version",
        "<builtin>.tuple"
    ],
    "platform.python_branch": [
        "platform._sys_version"
    ],
    "platform.python_revision": [
        "platform._sys_version"
    ],
    "platform.python_build": [
        "platform._sys_version"
    ],
    "platform.python_compiler": [
        "platform._sys_version"
    ],
    "platform.platform": [
        "platform.libc_ver",
        "platform.architecture",
        "platform.uname",
        "platform._platform",
        "platform.mac_ver",
        "platform.system_alias",
        "platform.win32_ver",
        "platform.java_ver"
    ],
    "plistlib._maybe_open": [
        "<builtin>.open",
        "<builtin>.isinstance"
    ],
    "plistlib.readPlist": [
        "plistlib._maybe_open",
        "plistlib.load",
        "_warnings.warn"
    ],
    "plistlib.writePlist": [
        "plistlib._maybe_open",
        "plistlib.dump",
        "_warnings.warn"
    ],
    "plistlib.dump": [
        "<builtin>.ValueError"
    ],
    "plistlib.readPlistFromBytes": [
        "_io.BytesIO",
        "plistlib.load",
        "_warnings.warn"
    ],
    "plistlib.writePlistToBytes": [
        "_io.BytesIO",
        "plistlib.dump",
        "_warnings.warn"
    ],
    "plistlib.Data": [],
    "plistlib.Data.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "plistlib.Data.fromBase64": [
        "plistlib.Data.__init__",
        "plistlib._decode_base64"
    ],
    "plistlib._decode_base64": [
        "<builtin>.isinstance"
    ],
    "plistlib.Data.asBase64": [
        "plistlib._encode_base64"
    ],
    "plistlib._encode_base64": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "plistlib.Data.__eq__": [
        "<builtin>.isinstance"
    ],
    "plistlib.Data.__repr__": [
        "<builtin>.repr"
    ],
    "plistlib.UID": [],
    "plistlib.UID.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "plistlib.UID.__index__": [],
    "plistlib.UID.__repr__": [
        "<builtin>.repr"
    ],
    "plistlib.UID.__reduce__": [],
    "plistlib.UID.__eq__": [
        "<builtin>.isinstance"
    ],
    "plistlib.UID.__hash__": [
        "<builtin>.hash"
    ],
    "plistlib._date_from_string": [
        "<builtin>.int"
    ],
    "plistlib._date_to_string": [],
    "plistlib._escape": [
        "<builtin>.ValueError"
    ],
    "plistlib._PlistParser": [],
    "plistlib._PlistParser.__init__": [],
    "plistlib._PlistParser.parse": [],
    "plistlib._PlistParser.handle_begin_element": [
        "<builtin>.getattr"
    ],
    "plistlib._PlistParser.handle_end_element": [
        "<builtin>.getattr"
    ],
    "plistlib._PlistParser.handle_data": [],
    "plistlib._PlistParser.add_object": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "plistlib._PlistParser.get_data": [],
    "plistlib._PlistParser.begin_dict": [
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_dict": [
        "<builtin>.ValueError"
    ],
    "plistlib._PlistParser.end_key": [
        "plistlib._PlistParser.get_data",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "plistlib._PlistParser.begin_array": [
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_array": [],
    "plistlib._PlistParser.end_true": [
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_false": [
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_integer": [
        "plistlib._PlistParser.get_data",
        "plistlib._PlistParser.add_object",
        "<builtin>.int"
    ],
    "plistlib._PlistParser.end_real": [
        "plistlib._PlistParser.get_data",
        "<builtin>.float",
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_string": [
        "plistlib._PlistParser.get_data",
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._PlistParser.end_data": [
        "plistlib._PlistParser.get_data",
        "plistlib.Data.fromBase64",
        "plistlib._PlistParser.add_object",
        "plistlib._decode_base64"
    ],
    "plistlib._PlistParser.end_date": [
        "plistlib._date_from_string",
        "plistlib._PlistParser.get_data",
        "plistlib._PlistParser.add_object"
    ],
    "plistlib._DumbXMLWriter": [],
    "plistlib._DumbXMLWriter.__init__": [],
    "plistlib._DumbXMLWriter.begin_element": [
        "plistlib._DumbXMLWriter.writeln"
    ],
    "plistlib._DumbXMLWriter.writeln": [
        "<builtin>.isinstance",
        "plistlib._PlistWriter.write"
    ],
    "plistlib._DumbXMLWriter.end_element": [
        "plistlib._DumbXMLWriter.writeln"
    ],
    "plistlib._DumbXMLWriter.simple_element": [
        "plistlib._DumbXMLWriter.writeln",
        "plistlib._escape"
    ],
    "plistlib._PlistWriter.write": [
        "plistlib._DumbXMLWriter.writeln",
        "plistlib._PlistWriter.write_value"
    ],
    "plistlib._PlistWriter": [],
    "plistlib._PlistWriter.__init__": [
        "plistlib._DumbXMLWriter.__init__"
    ],
    "plistlib._PlistWriter.write_value": [
        "<builtin>.repr",
        "<builtin>.isinstance",
        "plistlib._PlistWriter.write_dict",
        "plistlib._PlistWriter.write_data",
        "plistlib._PlistWriter.write_array",
        "plistlib._DumbXMLWriter.simple_element",
        "<builtin>.TypeError",
        "<builtin>.OverflowError",
        "<builtin>.type",
        "plistlib._PlistWriter.write_bytes",
        "plistlib._date_to_string"
    ],
    "plistlib._PlistWriter.write_dict": [
        "plistlib._PlistWriter.write_value",
        "<builtin>.isinstance",
        "plistlib._DumbXMLWriter.end_element",
        "plistlib._DumbXMLWriter.simple_element",
        "plistlib._DumbXMLWriter.begin_element",
        "<builtin>.TypeError",
        "<builtin>.sorted"
    ],
    "plistlib._PlistWriter.write_data": [
        "plistlib._PlistWriter.write_bytes"
    ],
    "plistlib._PlistWriter.write_bytes": [
        "<builtin>.max",
        "plistlib._DumbXMLWriter.end_element",
        "plistlib._DumbXMLWriter.writeln",
        "plistlib._DumbXMLWriter.begin_element",
        "plistlib._encode_base64",
        "<builtin>.len"
    ],
    "plistlib._PlistWriter.write_array": [
        "plistlib._DumbXMLWriter.simple_element",
        "plistlib._PlistWriter.write_value",
        "plistlib._DumbXMLWriter.begin_element",
        "plistlib._DumbXMLWriter.end_element"
    ],
    "plistlib._is_fmt_xml": [
        "<builtin>.len"
    ],
    "plistlib.InvalidFileException": [],
    "plistlib.InvalidFileException.__init__": [],
    "plistlib._BinaryPlistParser": [],
    "plistlib._BinaryPlistParser.__init__": [],
    "plistlib._BinaryPlistParser.parse": [
        "plistlib._BinaryPlistParser._read_ints",
        "<builtin>.len",
        "plistlib._BinaryPlistParser._read_object",
        "plistlib.InvalidFileException.__init__"
    ],
    "plistlib._BinaryPlistParser._read_ints": [
        "<builtin>.len",
        "<builtin>.range",
        "plistlib.InvalidFileException.__init__",
        "<builtin>.tuple"
    ],
    "plistlib._BinaryPlistParser._read_object": [
        "plistlib.Data.__init__",
        "plistlib._BinaryPlistParser._read_refs",
        "plistlib.InvalidFileException.__init__",
        "plistlib._BinaryPlistParser._get_size",
        "<builtin>.zip",
        "plistlib._BinaryPlistParser._read_object",
        "plistlib.UID.__init__"
    ],
    "plistlib._BinaryPlistParser._get_size": [],
    "plistlib._BinaryPlistParser._read_refs": [
        "plistlib._BinaryPlistParser._read_ints"
    ],
    "plistlib._count_to_size": [],
    "plistlib._BinaryPlistWriter": [],
    "plistlib._BinaryPlistWriter.__init__": [],
    "plistlib._BinaryPlistWriter.write": [
        "plistlib._BinaryPlistWriter._flatten",
        "plistlib._BinaryPlistWriter._write_object",
        "plistlib._count_to_size",
        "<builtin>.len",
        "plistlib._BinaryPlistWriter._getrefnum"
    ],
    "plistlib._BinaryPlistWriter._flatten": [
        "plistlib._BinaryPlistWriter._flatten",
        "<builtin>.id",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "itertools.chain",
        "<builtin>.len",
        "<builtin>.sorted",
        "<builtin>.type"
    ],
    "plistlib._BinaryPlistWriter._write_object": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.OverflowError",
        "plistlib._BinaryPlistWriter._getrefnum",
        "<builtin>.sorted",
        "plistlib._BinaryPlistWriter._write_size"
    ],
    "plistlib._BinaryPlistWriter._getrefnum": [
        "<builtin>.id",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "plistlib._BinaryPlistWriter._write_size": [],
    "plistlib._is_fmt_binary": [],
    "plistlib.loads": [
        "_io.BytesIO",
        "plistlib.load"
    ],
    "plistlib.dumps": [
        "_io.BytesIO",
        "plistlib.dump"
    ],
    "pyasn1.type.namedval.NamedValues": [],
    "pyasn1.type.namedval.NamedValues.__repr__": [
        "<builtin>.len",
        "pyasn1.type.namedval.NamedValues.items"
    ],
    "pyasn1.type.namedval.NamedValues.items": [],
    "pyasn1.type.namedval.NamedValues.__eq__": [
        "<builtin>.dict"
    ],
    "pyasn1.type.namedval.NamedValues.__ne__": [
        "<builtin>.dict"
    ],
    "pyasn1.type.namedval.NamedValues.__lt__": [
        "<builtin>.dict"
    ],
    "pyasn1.type.namedval.NamedValues.__le__": [
        "<builtin>.dict"
    ],
    "pyasn1.type.namedval.NamedValues.__gt__": [
        "<builtin>.dict"
    ],
    "pyasn1.type.namedval.NamedValues.__ge__": [
        "<builtin>.dict"
    ],
    "pyasn1.type.namedval.NamedValues.__hash__": [
        "<builtin>.hash",
        "pyasn1.type.namedval.NamedValues.items"
    ],
    "pyasn1.type.namedval.NamedValues.__getitem__": [],
    "pyasn1.type.namedval.NamedValues.__len__": [
        "<builtin>.len"
    ],
    "pyasn1.type.namedval.NamedValues.__contains__": [],
    "pyasn1.type.namedval.NamedValues.__iter__": [
        "<builtin>.iter"
    ],
    "pyasn1.type.namedval.NamedValues.values": [
        "<builtin>.iter"
    ],
    "pyasn1.type.namedval.NamedValues.keys": [
        "<builtin>.iter"
    ],
    "pyasn1.type.namedval.NamedValues.__add__": [
        "pyasn1.type.namedval.NamedValues.items",
        "<builtin>.tuple"
    ],
    "pyasn1.type.namedval.NamedValues.clone": [],
    "pyasn1.type.namedval.NamedValues.getName": [],
    "pyasn1.type.namedval.NamedValues.getValue": [],
    "pyasn1.type.namedval.NamedValues.getValues": [
        "<builtin>.set"
    ],
    "pyasn1.codec.der": [],
    "pyasn1.codec.der.encoder.SetEncoder": [],
    "pyasn1.codec.der.encoder.SetEncoder._componentSortKey": [
        "<builtin>.len"
    ],
    "pyasn1.codec.der.encoder.Encoder": [],
    "pyasn1.codec.ber.encoder.Encoder.__init__": [],
    "pyasn1.codec.cer.encoder.BooleanEncoder": [],
    "pyasn1.codec.cer.encoder.BooleanEncoder.encodeValue": [],
    "pyasn1.codec.cer.encoder.RealEncoder": [],
    "pyasn1.codec.cer.encoder.RealEncoder._chooseEncBase": [
        "pyasn1.codec.ber.encoder.RealEncoder._dropFloatingPoint"
    ],
    "pyasn1.codec.ber.encoder.RealEncoder._dropFloatingPoint": [
        "<builtin>.abs",
        "<builtin>.int"
    ],
    "pyasn1.codec.cer.encoder.TimeEncoderMixIn": [
        "<builtin>.ord"
    ],
    "pyasn1.codec.cer.encoder.TimeEncoderMixIn.encodeValue": [
        "<builtin>.list",
        "<builtin>.min",
        "pyasn1.codec.ber.encoder.OctetStringEncoder.encodeValue",
        "<builtin>.len",
        "pyasn1.codec.ber.encoder.AnyEncoder.encodeValue"
    ],
    "pyasn1.codec.ber.encoder.AnyEncoder.encodeValue": [
        "pyasn1.compat.octets.<lambda12>",
        "pyasn1.compat.octets.<lambda5>"
    ],
    "pyasn1.codec.ber.encoder.OctetStringEncoder.encodeValue": [
        "<builtin>.len",
        "pyasn1.compat.octets.<lambda12>",
        "pyasn1.type.tag.TagSet.__init__",
        "pyasn1.compat.octets.<lambda5>"
    ],
    "pyasn1.codec.cer.encoder.GeneralizedTimeEncoder": [],
    "pyasn1.codec.cer.encoder.UTCTimeEncoder": [],
    "pyasn1.codec.cer.encoder.SetOfEncoder": [],
    "pyasn1.codec.cer.encoder.SetOfEncoder.encodeValue": [
        "<builtin>.max",
        "<builtin>.map",
        "pyasn1.codec.ber.encoder.SequenceOfEncoder._encodeComponents",
        "pyasn1.compat.octets.<lambda3>",
        "<builtin>.len",
        "pyasn1.compat.octets.<lambda10>"
    ],
    "pyasn1.codec.ber.encoder.SequenceOfEncoder._encodeComponents": [
        "<builtin>.enumerate"
    ],
    "pyasn1.codec.cer.encoder.SetOfEncoder.encodeValue.<lambda1>": [],
    "pyasn1.codec.cer.encoder.SequenceOfEncoder": [],
    "pyasn1.codec.cer.encoder.SequenceOfEncoder.encodeValue": [
        "<builtin>.len",
        "pyasn1.codec.ber.encoder.SequenceOfEncoder._encodeComponents"
    ],
    "pyasn1.codec.cer.encoder.SetEncoder": [],
    "pyasn1.codec.cer.encoder.SetEncoder._componentSortKey": [],
    "pyasn1.codec.cer.encoder.SetEncoder.encodeValue": [
        "<builtin>.id",
        "<builtin>.sorted",
        "<builtin>.enumerate"
    ],
    "pyasn1.codec.cer.encoder.SequenceEncoder": [],
    "pyasn1.codec.cer.encoder.Encoder": [],
    "pyasn1.type.useful.ObjectDescriptor": [
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.useful.TimeMixIn": [
        "pyasn1.type.useful.TimeMixIn.FixedOffset",
        "pyasn1.type.useful.TimeMixIn.FixedOffset.__init__"
    ],
    "pyasn1.type.useful.TimeMixIn.FixedOffset": [],
    "pyasn1.type.useful.TimeMixIn.FixedOffset.__init__": [],
    "pyasn1.type.useful.TimeMixIn.FixedOffset.utcoffset": [],
    "pyasn1.type.useful.TimeMixIn.FixedOffset.tzname": [],
    "pyasn1.type.useful.TimeMixIn.FixedOffset.dst": [],
    "pyasn1.type.useful.TimeMixIn.asDateTime": [
        "datetime.datetime.replace",
        "pyasn1.type.useful.TimeMixIn.FixedOffset.__init__",
        "pyasn1.compat.string.partition",
        "pyasn1.compat.dateandtime.strptime",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "pyasn1.compat.string.partition": [],
    "pyasn1.compat.dateandtime.strptime": [
        "time.strptime",
        "datetime.datetime.strptime"
    ],
    "pyasn1.type.useful.TimeMixIn.fromDateTime": [],
    "pyasn1.type.useful.GeneralizedTime": [
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.useful.UTCTime": [
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.AbstractCharacterString": [],
    "pyasn1.type.char.AbstractCharacterString.__str__": [
        "pyasn1.error.PyAsn1UnicodeError.__init__",
        "sys.exc_info",
        "<builtin>.str"
    ],
    "pyasn1.type.char.AbstractCharacterString.__unicode__": [],
    "pyasn1.type.char.AbstractCharacterString.prettyIn": [
        "<builtin>.isinstance",
        "<builtin>.chr",
        "sys.exc_info",
        "<builtin>.bytes",
        "pyasn1.type.char.AbstractCharacterString.prettyIn",
        "<builtin>.str",
        "pyasn1.error.PyAsn1UnicodeError.__init__"
    ],
    "pyasn1.type.char.AbstractCharacterString.asOctets": [
        "<builtin>.bytes",
        "<builtin>.str"
    ],
    "pyasn1.type.char.AbstractCharacterString.asNumbers": [
        "<builtin>.bytes",
        "<builtin>.tuple",
        "<builtin>.ord",
        "<builtin>.str"
    ],
    "pyasn1.type.char.AbstractCharacterString.__bytes__": [
        "pyasn1.error.PyAsn1UnicodeError.__init__",
        "sys.exc_info"
    ],
    "pyasn1.type.char.AbstractCharacterString.prettyOut": [],
    "pyasn1.type.char.AbstractCharacterString.prettyPrint": [
        "pyasn1.type.char.AbstractCharacterString.prettyOut",
        "pyasn1.type.char.AbstractCharacterString.__str__"
    ],
    "pyasn1.type.char.AbstractCharacterString.__reversed__": [
        "<builtin>.reversed"
    ],
    "pyasn1.type.char.NumericString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.PrintableString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.TeletexString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.T61String": [],
    "pyasn1.type.char.VideotexString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.IA5String": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.GraphicString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.VisibleString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.ISO646String": [],
    "pyasn1.type.char.GeneralString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.UniversalString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.BMPString": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "pyasn1.type.char.UTF8String": [
        "pyasn1.type.tag.TagSet.tagImplicitly",
        "pyasn1.type.tag.Tag.__init__"
    ],
    "time.strptime": [],
    "pyasn1.debug.registerLoggee": [
        "pyasn1.debug.setLogger"
    ],
    "pyasn1.codec.ber.encoder.AbstractItemEncoder": [
        "pyasn1.compat.octets.<lambda1>"
    ],
    "pyasn1.codec.ber.encoder.AbstractItemEncoder.encodeTag": [],
    "pyasn1.codec.ber.encoder.AbstractItemEncoder.encodeLength": [
        "<builtin>.len"
    ],
    "pyasn1.codec.ber.encoder.AbstractItemEncoder.encodeValue": [],
    "pyasn1.codec.ber.encoder.AbstractItemEncoder.encode": [
        "pyasn1.codec.ber.encoder.BitStringEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.IntegerEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.SequenceEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.AbstractItemEncoder.encodeTag",
        "pyasn1.codec.ber.encoder.EndOfOctetsEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.BooleanEncoder.encodeValue",
        "pyasn1.debug.hexdump",
        "pyasn1.codec.ber.encoder.OctetStringEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.RealEncoder.encodeValue",
        "sys.exc_info",
        "pyasn1.codec.ber.encoder.NullEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.SequenceOfEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.AnyEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.AbstractItemEncoder.encodeValue",
        "pyasn1.compat.octets.<lambda1>",
        "pyasn1.codec.ber.encoder.ChoiceEncoder.encodeValue",
        "pyasn1.codec.ber.encoder.AbstractItemEncoder.encodeLength",
        "pyasn1.codec.ber.encoder.ObjectIdentifierEncoder.encodeValue",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "pyasn1.codec.ber.encoder.ChoiceEncoder.encodeValue": [
        "<builtin>.len"
    ],
    "pyasn1.codec.ber.encoder.IntegerEncoder.encodeValue": [
        "pyasn1.compat.integer.to_bytes",
        "<builtin>.int"
    ],
    "pyasn1.codec.ber.encoder.EndOfOctetsEncoder.encodeValue": [],
    "pyasn1.codec.ber.encoder.RealEncoder.encodeValue": [
        "pyasn1.codec.ber.encoder.RealEncoder._chooseEncBase",
        "pyasn1.compat.octets.<lambda3>",
        "pyasn1.compat.octets.<lambda10>",
        "<builtin>.len",
        "pyasn1.compat.octets.<lambda8>",
        "pyasn1.compat.octets.<lambda7>"
    ],
    "pyasn1.codec.ber.encoder.BooleanEncoder.encodeValue": [],
    "pyasn1.codec.ber.encoder.ObjectIdentifierEncoder.encodeValue": [],
    "pyasn1.codec.ber.encoder.BitStringEncoder.encodeValue": [
        "<builtin>.len",
        "pyasn1.compat.octets.<lambda7>",
        "<builtin>.min",
        "pyasn1.type.tag.TagSet.__init__"
    ],
    "pyasn1.codec.ber.encoder.NullEncoder.encodeValue": [],
    "pyasn1.codec.ber.encoder.SequenceOfEncoder.encodeValue": [
        "pyasn1.codec.ber.encoder.SequenceOfEncoder._encodeComponents"
    ],
    "pyasn1.codec.ber.encoder.SequenceEncoder.encodeValue": [
        "<builtin>.dict",
        "<builtin>.enumerate"
    ],
    "pyasn1.debug.hexdump": [
        "pyasn1.compat.octets.<lambda2>",
        "<builtin>.range",
        "<builtin>.zip",
        "pyasn1.compat.octets.<lambda9>",
        "<builtin>.len"
    ],
    "pyasn1.codec.ber.encoder.EndOfOctetsEncoder": [],
    "pyasn1.codec.ber.encoder.BooleanEncoder": [],
    "pyasn1.codec.ber.encoder.IntegerEncoder": [],
    "pyasn1.codec.ber.encoder.BitStringEncoder": [],
    "pyasn1.codec.ber.encoder.OctetStringEncoder": [],
    "pyasn1.codec.ber.encoder.NullEncoder": [],
    "pyasn1.codec.ber.encoder.ObjectIdentifierEncoder": [],
    "pyasn1.codec.ber.encoder.RealEncoder": [],
    "pyasn1.codec.ber.encoder.RealEncoder._chooseEncBase": [
        "<builtin>.float",
        "<builtin>.range",
        "<builtin>.abs",
        "pyasn1.codec.ber.encoder.RealEncoder._dropFloatingPoint",
        "<builtin>.int"
    ],
    "pyasn1.codec.ber.encoder.SequenceEncoder": [],
    "pyasn1.codec.ber.encoder.SequenceOfEncoder": [],
    "pyasn1.codec.ber.encoder.ChoiceEncoder": [],
    "pyasn1.codec.ber.encoder.AnyEncoder": [],
    "pyasn1.codec.ber.encoder.Encoder": [],
    "pyasn1.codec.ber.encoder.Encoder.__call__": [
        "<builtin>.len",
        "pyasn1.debug.hexdump",
        "pyasn1.type.tag.TagSet.__init__"
    ],
    "pyasn1.debug.Printer": [],
    "pyasn1.debug.Printer.__init__": [
        "logging.StreamHandler.__init__",
        "logging.Logger.setLevel",
        "logging.getLogger",
        "logging.Handler.setFormatter",
        "logging.Handler.setLevel",
        "logging.Logger.addHandler",
        "logging.Formatter.__init__"
    ],
    "pyasn1.debug.Printer.__call__": [
        "logging.Logger.debug"
    ],
    "pyasn1.debug.Printer.__str__": [],
    "pyasn1.debug.NullHandler": [],
    "pyasn1.debug.Debug": [
        "pyasn1.debug.Printer.__init__"
    ],
    "pyasn1.debug.Debug.__init__": [
        "logging.Handler.__init__",
        "logging.getLogger",
        "pyasn1.debug.Printer.__init__"
    ],
    "pyasn1.debug.Debug.__str__": [],
    "pyasn1.debug.Debug.__call__": [
        "pyasn1.debug.Printer.__init__"
    ],
    "pyasn1.debug.Debug.__and__": [],
    "pyasn1.debug.Debug.__rand__": [],
    "pyasn1.debug.setLogger": [
        "<builtin>.setattr"
    ],
    "pyasn1.debug.Scope": [],
    "pyasn1.debug.Scope.__init__": [],
    "pyasn1.debug.Scope.__str__": [],
    "pyasn1.debug.Scope.push": [],
    "pyasn1.debug.Scope.pop": [],
    "pyasn1.codec.cer": [],
    "pyasn1.type": [],
    "pyasn1.codec.der.decoder.BitStringDecoder": [],
    "pyasn1.codec.der.decoder.OctetStringDecoder": [],
    "pyasn1.codec.der.decoder.Decoder": [],
    "pyasn1.codec.ber.decoder.Decoder.__init__": [
        "pyasn1.compat.octets.<lambda1>"
    ],
    "pyasn1.codec.cer.decoder.BooleanDecoder": [
        "pyasn1.type.univ.Integer.__init__"
    ],
    "pyasn1.codec.cer.decoder.BooleanDecoder.valueDecoder": [
        "pyasn1.compat.octets.<lambda8>",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent"
    ],
    "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent": [
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent"
    ],
    "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent": [
        "pyasn1.type.base.ConstructedAsn1Type.clone",
        "pyasn1.type.base.SimpleAsn1Type.clone"
    ],
    "pyasn1.codec.cer.decoder.Decoder": [],
    "pyasn1.codec.ber.decoder.AbstractDecoder": [],
    "pyasn1.codec.ber.decoder.AbstractDecoder.valueDecoder": [],
    "pyasn1.codec.ber.decoder.AbstractDecoder.indefLenValueDecoder": [],
    "pyasn1.codec.ber.decoder.AbstractSimpleDecoder": [],
    "pyasn1.codec.ber.decoder.AbstractSimpleDecoder.substrateCollector": [],
    "pyasn1.codec.ber.decoder.ExplicitTagDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.ExplicitTagDecoder.valueDecoder": [
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.codec.ber.decoder.Decoder.__call__.<lambda1>",
        "<builtin>.len",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.codec.ber.decoder.Decoder.__init__",
        "pyasn1.debug.hexdump"
    ],
    "pyasn1.codec.ber.decoder.Decoder.__call__.<lambda1>": [],
    "pyasn1.codec.ber.decoder.ExplicitTagDecoder.indefLenValueDecoder": [
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.codec.ber.decoder.Decoder.__call__.<lambda1>",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.codec.ber.decoder.Decoder.__init__"
    ],
    "pyasn1.codec.ber.decoder.IntegerDecoder": [
        "pyasn1.type.univ.Integer.__init__"
    ],
    "pyasn1.codec.ber.decoder.IntegerDecoder.valueDecoder": [
        "pyasn1.compat.integer.from_bytes",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent"
    ],
    "pyasn1.codec.ber.decoder.BooleanDecoder": [
        "pyasn1.type.univ.Integer.__init__"
    ],
    "pyasn1.codec.ber.decoder.BitStringDecoder": [
        "pyasn1.type.univ.BitString.__init__"
    ],
    "pyasn1.codec.ber.decoder.BitStringDecoder.valueDecoder": [
        "pyasn1.compat.octets.<lambda8>",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.type.univ.BitString.fromOctetString",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder.substrateCollector",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent"
    ],
    "pyasn1.codec.ber.decoder.BitStringDecoder.indefLenValueDecoder": [
        "pyasn1.compat.octets.<lambda8>",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.type.univ.BitString.fromOctetString",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder.substrateCollector",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent"
    ],
    "pyasn1.codec.ber.decoder.OctetStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.OctetStringDecoder.valueDecoder": [
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder.substrateCollector"
    ],
    "pyasn1.codec.ber.decoder.OctetStringDecoder.indefLenValueDecoder": [
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder.substrateCollector"
    ],
    "pyasn1.codec.ber.decoder.NullDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.NullDecoder.valueDecoder": [
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent"
    ],
    "pyasn1.codec.ber.decoder.ObjectIdentifierDecoder": [
        "pyasn1.type.base.SimpleAsn1Type.__init__"
    ],
    "pyasn1.codec.ber.decoder.ObjectIdentifierDecoder.valueDecoder": [
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.compat.octets.<lambda2>",
        "pyasn1.compat.octets.<lambda9>",
        "<builtin>.len",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent"
    ],
    "pyasn1.codec.ber.decoder.RealDecoder": [
        "pyasn1.type.base.SimpleAsn1Type.__init__"
    ],
    "pyasn1.codec.ber.decoder.RealDecoder.valueDecoder": [
        "pyasn1.compat.octets.<lambda8>",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "<builtin>.float",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "<builtin>.int"
    ],
    "pyasn1.codec.ber.decoder.AbstractConstructedDecoder": [],
    "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder": [],
    "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder._getComponentTagMap": [
        "<builtin>.NotImplementedError"
    ],
    "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder._getComponentPositionByType": [
        "<builtin>.NotImplementedError"
    ],
    "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder._decodeComponents": [
        "pyasn1.type.base.ConstructedAsn1Type.clone",
        "pyasn1.type.tag.TagSet.__init__",
        "<builtin>.set",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder.valueDecoder": [
        "pyasn1.type.base.ConstructedAsn1Type.clone",
        "<builtin>.set",
        "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder._decodeComponents",
        "<builtin>.enumerate",
        "<builtin>.len",
        "pyasn1.debug.hexdump"
    ],
    "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder.indefLenValueDecoder": [
        "pyasn1.type.base.ConstructedAsn1Type.clone",
        "<builtin>.len",
        "<builtin>.set",
        "pyasn1.codec.ber.decoder.UniversalConstructedTypeDecoder._decodeComponents",
        "<builtin>.enumerate",
        "<builtin>.dict"
    ],
    "pyasn1.codec.ber.decoder.SequenceOrSequenceOfDecoder": [
        "pyasn1.type.univ.SequenceOfAndSetOfBase.__init__",
        "pyasn1.type.univ.SequenceAndSetBase.__init__"
    ],
    "pyasn1.codec.ber.decoder.SequenceDecoder": [
        "pyasn1.type.univ.SequenceAndSetBase.__init__"
    ],
    "pyasn1.codec.ber.decoder.SequenceOfDecoder": [
        "pyasn1.type.univ.SequenceOfAndSetOfBase.__init__"
    ],
    "pyasn1.codec.ber.decoder.SetOrSetOfDecoder": [
        "pyasn1.type.univ.SequenceOfAndSetOfBase.__init__",
        "pyasn1.type.univ.SequenceAndSetBase.__init__"
    ],
    "pyasn1.codec.ber.decoder.SetDecoder": [
        "pyasn1.type.univ.SequenceAndSetBase.__init__"
    ],
    "pyasn1.codec.ber.decoder.SetOfDecoder": [
        "pyasn1.type.univ.SequenceOfAndSetOfBase.__init__"
    ],
    "pyasn1.codec.ber.decoder.ChoiceDecoder": [
        "pyasn1.type.univ.SequenceAndSetBase.__init__"
    ],
    "pyasn1.codec.ber.decoder.ChoiceDecoder.valueDecoder": [
        "pyasn1.type.base.ConstructedAsn1Type.clone"
    ],
    "pyasn1.codec.ber.decoder.ChoiceDecoder.indefLenValueDecoder": [
        "pyasn1.type.base.ConstructedAsn1Type.clone"
    ],
    "pyasn1.codec.ber.decoder.AnyDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.AnyDecoder.valueDecoder": [
        "<builtin>.len",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.debug.hexdump"
    ],
    "pyasn1.codec.ber.decoder.AnyDecoder.indefLenValueDecoder": [
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder._createComponent",
        "pyasn1.codec.ber.decoder.AbstractSimpleDecoder.substrateCollector",
        "<builtin>.len",
        "pyasn1.codec.ber.decoder.BooleanDecoder._createComponent",
        "pyasn1.debug.hexdump"
    ],
    "pyasn1.codec.ber.decoder.UTF8StringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.NumericStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.PrintableStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.TeletexStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.VideotexStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.IA5StringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.GraphicStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.VisibleStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.GeneralStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.UniversalStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.BMPStringDecoder": [
        "pyasn1.type.univ.OctetString.__init__"
    ],
    "pyasn1.codec.ber.decoder.ObjectDescriptorDecoder": [],
    "pyasn1.codec.ber.decoder.GeneralizedTimeDecoder": [],
    "pyasn1.codec.ber.decoder.UTCTimeDecoder": [],
    "pyasn1.codec.ber.decoder.Decoder": [],
    "pyasn1.codec.ber.decoder.Decoder.__call__": [
        "pyasn1.codec.ber.decoder.ExplicitTagDecoder.valueDecoder",
        "pyasn1.codec.ber.decoder.AnyDecoder.valueDecoder",
        "pyasn1.debug.Scope.push",
        "<builtin>.isinstance",
        "pyasn1.type.tag.TagSet.__init__",
        "pyasn1.type.tag.Tag.__init__",
        "pyasn1.compat.octets.<lambda2>",
        "pyasn1.debug.Scope.pop",
        "pyasn1.compat.octets.<lambda9>",
        "pyasn1.codec.ber.decoder.AnyDecoder.indefLenValueDecoder",
        "<builtin>.len",
        "pyasn1.compat.octets.<lambda8>",
        "pyasn1.debug.hexdump",
        "pyasn1.codec.ber.decoder.ExplicitTagDecoder.indefLenValueDecoder"
    ],
    "paramiko.channel.open_only": [
        "functools.wraps",
        "_functools.partial"
    ],
    "paramiko.channel.open_only._check": [
        "paramiko.channel.Channel.request_x11",
        "paramiko.channel.Channel.get_pty",
        "paramiko.channel.Channel.resize_pty",
        "paramiko.channel.Channel.request_forward_agent",
        "paramiko.channel.Channel.set_environment_variable",
        "paramiko.channel.Channel.invoke_shell",
        "paramiko.channel.Channel.invoke_subsystem",
        "paramiko.channel.Channel.exec_command",
        "paramiko.channel.Channel.update_environment"
    ],
    "paramiko.channel.Channel.request_x11": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.transport.Transport._set_x11_handler",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.channel.Channel._wait_for_event",
        "paramiko.message.Message.add_string",
        "paramiko.channel.Channel._event_pending"
    ],
    "paramiko.channel.Channel.get_pty": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "<builtin>.bytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.channel.Channel._wait_for_event",
        "paramiko.message.Message.add_string",
        "paramiko.channel.Channel._event_pending"
    ],
    "paramiko.channel.Channel.request_forward_agent": [
        "paramiko.transport.Transport._set_forward_agent_handler",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.channel.Channel.exec_command": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.channel.Channel._wait_for_event",
        "paramiko.message.Message.add_string",
        "paramiko.channel.Channel._event_pending"
    ],
    "paramiko.channel.Channel.set_environment_variable": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.channel.Channel.invoke_shell": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.channel.Channel._wait_for_event",
        "paramiko.message.Message.add_string",
        "paramiko.channel.Channel._event_pending"
    ],
    "paramiko.channel.Channel.invoke_subsystem": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.channel.Channel._wait_for_event",
        "paramiko.message.Message.add_string",
        "paramiko.channel.Channel._event_pending"
    ],
    "paramiko.channel.Channel.resize_pty": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.channel.Channel.update_environment": [
        "paramiko.channel.Channel.set_environment_variable"
    ],
    "paramiko.channel.Channel": [
        "paramiko.channel.open_only"
    ],
    "paramiko.buffered_pipe.BufferedPipe.__init__": [
        "threading.Condition.__init__"
    ],
    "paramiko.channel.Channel.__del__": [
        "paramiko.channel.Channel.close"
    ],
    "paramiko.channel.Channel.close": [
        "paramiko.pipe.PosixPipe.close",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.channel.Channel._close_internal",
        "paramiko.pipe.WindowsPipe.close"
    ],
    "paramiko.channel.Channel.__repr__": [
        "<builtin>.len",
        "<builtin>.repr"
    ],
    "paramiko.channel.Channel._event_pending": [
        "threading.Event.clear"
    ],
    "paramiko.channel.Channel._wait_for_event": [
        "paramiko.transport.Transport.get_exception",
        "threading.Event.wait",
        "threading.Event.is_set"
    ],
    "paramiko.channel.Channel.exit_status_ready": [
        "threading.Event.is_set"
    ],
    "paramiko.channel.Channel.recv_exit_status": [
        "threading.Event.wait",
        "threading.Event.is_set"
    ],
    "paramiko.channel.Channel.send_exit_status": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.channel.Channel.get_transport": [],
    "paramiko.channel.Channel.set_name": [],
    "paramiko.channel.Channel.get_name": [],
    "paramiko.channel.Channel.get_id": [],
    "paramiko.channel.Channel.set_combine_stderr": [
        "<builtin>.len",
        "<builtin>.bytes",
        "paramiko.buffered_pipe.BufferedPipe.empty",
        "paramiko.channel.Channel._feed"
    ],
    "paramiko.buffered_pipe.BufferedPipe.empty": [
        "paramiko.buffered_pipe.BufferedPipe._buffer_tobytes"
    ],
    "paramiko.channel.Channel._feed": [
        "<builtin>.isinstance",
        "paramiko.buffered_pipe.BufferedPipe.feed"
    ],
    "paramiko.channel.Channel.settimeout": [],
    "paramiko.channel.Channel.gettimeout": [],
    "paramiko.channel.Channel.setblocking": [
        "paramiko.channel.Channel.settimeout"
    ],
    "paramiko.channel.Channel.getpeername": [
        "paramiko.transport.Transport.getpeername"
    ],
    "paramiko.pipe.PosixPipe.close": [],
    "paramiko.pipe.WindowsPipe.close": [],
    "paramiko.channel.Channel._close_internal": [
        "paramiko.channel.Channel._set_closed",
        "paramiko.channel.Channel._send_eof",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.__init__"
    ],
    "paramiko.channel.Channel.recv_ready": [
        "paramiko.buffered_pipe.BufferedPipe.read_ready"
    ],
    "paramiko.buffered_pipe.BufferedPipe.read_ready": [
        "<builtin>.len"
    ],
    "paramiko.buffered_pipe.BufferedPipe.read": [
        "time.time",
        "threading.Condition.wait",
        "<builtin>.bytes",
        "paramiko.buffered_pipe.BufferedPipe._buffer_tobytes",
        "<builtin>.len"
    ],
    "paramiko.channel.Channel._check_add_window": [
        "paramiko.channel.Channel._log"
    ],
    "paramiko.channel.Channel.recv_stderr_ready": [
        "paramiko.buffered_pipe.BufferedPipe.read_ready"
    ],
    "paramiko.channel.Channel.recv_stderr": [
        "paramiko.message.Message.add_byte",
        "paramiko.channel.Channel._check_add_window",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.__init__",
        "<builtin>.len",
        "paramiko.buffered_pipe.BufferedPipe.read"
    ],
    "paramiko.channel.Channel.send_ready": [],
    "paramiko.channel.Channel._send": [
        "paramiko.channel.Channel._wait_for_send_window",
        "<builtin>.len",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.channel.Channel.send_stderr": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.channel.Channel._send",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.channel.Channel.sendall": [
        "paramiko.channel.Channel.send"
    ],
    "paramiko.channel.Channel.sendall_stderr": [
        "paramiko.channel.Channel.send_stderr"
    ],
    "paramiko.channel.Channel.makefile": [
        "paramiko.channel.ChannelFile.__init__",
        "<builtin>.list"
    ],
    "paramiko.channel.ChannelFile.__init__": [
        "paramiko.file.BufferedFile._set_mode",
        "paramiko.file.BufferedFile.__init__"
    ],
    "paramiko.channel.Channel.makefile_stderr": [
        "paramiko.channel.ChannelFile.__init__",
        "<builtin>.list"
    ],
    "paramiko.channel.Channel.makefile_stdin": [
        "paramiko.channel.ChannelFile.__init__",
        "<builtin>.list"
    ],
    "paramiko.channel.Channel.fileno": [
        "paramiko.buffered_pipe.BufferedPipe.set_event",
        "paramiko.pipe.WindowsPipe.fileno",
        "paramiko.pipe.make_or_pipe",
        "paramiko.pipe.PosixPipe.fileno",
        "paramiko.pipe.make_pipe"
    ],
    "paramiko.pipe.PosixPipe.fileno": [],
    "paramiko.pipe.WindowsPipe.fileno": [],
    "paramiko.pipe.make_pipe": [
        "paramiko.pipe.WindowsPipe.__init__",
        "paramiko.pipe.PosixPipe.__init__"
    ],
    "paramiko.pipe.make_or_pipe": [
        "paramiko.pipe.OrPipe.__init__"
    ],
    "paramiko.buffered_pipe.BufferedPipe.set_event": [
        "<builtin>.len"
    ],
    "paramiko.channel.Channel.shutdown": [
        "paramiko.channel.Channel._send_eof",
        "paramiko.transport.Transport._send_user_message"
    ],
    "paramiko.channel.Channel._send_eof": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.channel.Channel._log",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.channel.Channel.shutdown_read": [
        "paramiko.channel.Channel.shutdown"
    ],
    "paramiko.channel.Channel.shutdown_write": [
        "paramiko.channel.Channel.shutdown"
    ],
    "paramiko.channel.Channel._closed": [],
    "paramiko.channel.Channel._log": [
        "logging.Logger.log"
    ],
    "paramiko.channel.Channel._request_success": [
        "threading.Event.set",
        "paramiko.channel.Channel._log"
    ],
    "paramiko.channel.Channel._request_failed": [
        "paramiko.transport.Transport._send_user_message",
        "paramiko.channel.Channel._close_internal"
    ],
    "paramiko.buffered_pipe.BufferedPipe.feed": [
        "paramiko.buffered_pipe.BufferedPipe._buffer_frombytes",
        "threading.Condition.notify_all",
        "paramiko.py3compat.b"
    ],
    "paramiko.channel.Channel._feed_extended": [
        "paramiko.buffered_pipe.BufferedPipe.feed",
        "paramiko.channel.Channel._feed",
        "paramiko.channel.Channel._log"
    ],
    "paramiko.channel.Channel._window_adjust": [
        "threading.Condition.notify_all",
        "paramiko.channel.Channel._log"
    ],
    "paramiko.channel.Channel._handle_request": [
        "paramiko.message.Message.get_text",
        "paramiko.channel.Channel._log",
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.get_int",
        "paramiko.message.Message.get_boolean",
        "paramiko.message.Message.add_int",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.get_binary",
        "paramiko.message.Message.__init__",
        "threading.Event.set"
    ],
    "paramiko.channel.Channel._handle_eof": [
        "paramiko.buffered_pipe.BufferedPipe.close",
        "paramiko.pipe.PosixPipe.set_forever",
        "paramiko.pipe.WindowsPipe.set_forever",
        "paramiko.channel.Channel._log"
    ],
    "paramiko.buffered_pipe.BufferedPipe.close": [
        "threading.Condition.notify_all"
    ],
    "paramiko.pipe.PosixPipe.set_forever": [
        "paramiko.pipe.PosixPipe.set"
    ],
    "paramiko.pipe.WindowsPipe.set_forever": [
        "paramiko.pipe.WindowsPipe.set"
    ],
    "paramiko.channel.Channel._handle_close": [
        "paramiko.transport.Transport._unlink_channel",
        "paramiko.channel.Channel._close_internal",
        "paramiko.transport.Transport._send_user_message"
    ],
    "paramiko.channel.Channel._wait_for_send_window": [
        "time.time",
        "paramiko.channel.Channel._log",
        "threading.Condition.wait"
    ],
    "paramiko.channel.Channel._set_closed": [
        "paramiko.pipe.PosixPipe.set_forever",
        "paramiko.buffered_pipe.BufferedPipe.close",
        "paramiko.pipe.WindowsPipe.set_forever",
        "threading.Condition.notify_all",
        "threading.Event.set"
    ],
    "paramiko.channel.Channel._unlink": [
        "paramiko.channel.Channel._set_closed",
        "paramiko.transport.Transport._unlink_channel"
    ],
    "paramiko.channel.ChannelFile": [],
    "paramiko.file.BufferedFile.__init__": [
        "_io.BytesIO",
        "<builtin>.bytes",
        "_io.StringIO"
    ],
    "paramiko.file.BufferedFile._set_mode": [
        "paramiko.file.BufferedFile._get_size"
    ],
    "paramiko.channel.ChannelFile.__repr__": [
        "<builtin>.repr"
    ],
    "paramiko.channel.ChannelFile._read": [],
    "paramiko.channel.ChannelFile._write": [
        "<builtin>.len"
    ],
    "paramiko.channel.ChannelStderrFile": [],
    "paramiko.channel.ChannelStderrFile._read": [],
    "paramiko.channel.ChannelStderrFile._write": [
        "<builtin>.len"
    ],
    "paramiko.channel.ChannelStdinFile": [],
    "paramiko.channel.ChannelStdinFile.close": [
        "<builtin>.super"
    ],
    "paramiko.pipe.PosixPipe.__init__": [],
    "paramiko.pipe.WindowsPipe.__init__": [],
    "paramiko.pipe.PosixPipe": [],
    "paramiko.pipe.PosixPipe.clear": [],
    "paramiko.pipe.PosixPipe.set": [],
    "paramiko.pipe.WindowsPipe": [],
    "paramiko.pipe.WindowsPipe.clear": [],
    "paramiko.pipe.WindowsPipe.set": [],
    "paramiko.pipe.OrPipe": [],
    "paramiko.pipe.OrPipe.__init__": [],
    "paramiko.pipe.OrPipe.set": [
        "paramiko.pipe.PosixPipe.set",
        "paramiko.pipe.WindowsPipe.set"
    ],
    "paramiko.pipe.OrPipe.clear": [
        "paramiko.pipe.WindowsPipe.clear",
        "paramiko.pipe.PosixPipe.clear"
    ],
    "paramiko.file.BufferedFile": [],
    "paramiko.file.BufferedFile.__del__": [
        "paramiko.file.BufferedFile.close"
    ],
    "paramiko.file.BufferedFile.close": [
        "paramiko.file.BufferedFile.flush"
    ],
    "paramiko.file.BufferedFile.__iter__": [
        "<builtin>.ValueError"
    ],
    "paramiko.file.BufferedFile.flush": [
        "paramiko.file.BufferedFile._write_all",
        "_io.BytesIO",
        "_io.StringIO"
    ],
    "paramiko.file.BufferedFile._write_all": [
        "<builtin>.memoryview",
        "<builtin>.len",
        "paramiko.file.BufferedFile._write"
    ],
    "paramiko.file.BufferedFile.next": [
        "paramiko.file.BufferedFile.readline"
    ],
    "paramiko.file.BufferedFile.readline": [
        "<builtin>.IOError",
        "paramiko.file.BufferedFile._read",
        "paramiko.file.BufferedFile._record_newline",
        "<builtin>.bytes",
        "<builtin>.len",
        "paramiko.py3compat.u"
    ],
    "paramiko.file.BufferedFile.__next__": [
        "paramiko.file.BufferedFile.readline"
    ],
    "paramiko.file.BufferedFile.readable": [],
    "paramiko.file.BufferedFile.writable": [],
    "paramiko.file.BufferedFile.seekable": [],
    "paramiko.file.BufferedFile.readinto": [
        "<builtin>.len",
        "paramiko.file.BufferedFile.read"
    ],
    "paramiko.file.BufferedFile.read": [
        "<builtin>.IOError",
        "<builtin>.max",
        "paramiko.file.BufferedFile._read",
        "<builtin>.bytes",
        "<builtin>.len",
        "<builtin>.bytearray"
    ],
    "<builtin>.IOError": [],
    "paramiko.file.BufferedFile._read": [
        "<builtin>.EOFError"
    ],
    "paramiko.file.BufferedFile._record_newline": [
        "<builtin>.isinstance"
    ],
    "paramiko.file.BufferedFile.readlines": [
        "paramiko.file.BufferedFile.readline",
        "<builtin>.len"
    ],
    "paramiko.file.BufferedFile.seek": [
        "<builtin>.IOError"
    ],
    "paramiko.file.BufferedFile.tell": [],
    "paramiko.file.BufferedFile.write": [
        "<builtin>.isinstance",
        "<builtin>.IOError",
        "paramiko.file.BufferedFile._write_all",
        "paramiko.file.BufferedFile.flush",
        "_io.BytesIO",
        "_io.StringIO",
        "<builtin>.len"
    ],
    "paramiko.file.BufferedFile.writelines": [
        "paramiko.file.BufferedFile.write"
    ],
    "paramiko.file.BufferedFile.xreadlines": [],
    "paramiko.file.BufferedFile.closed": [],
    "paramiko.file.BufferedFile._write": [
        "<builtin>.IOError"
    ],
    "paramiko.file.BufferedFile._get_size": [],
    "paramiko.buffered_pipe.PipeTimeout": [],
    "paramiko.buffered_pipe.BufferedPipe": [],
    "paramiko.buffered_pipe.BufferedPipe._buffer_frombytes": [],
    "paramiko.buffered_pipe.BufferedPipe._buffer_tobytes": [],
    "paramiko.buffered_pipe.BufferedPipe.__len__": [
        "<builtin>.len"
    ],
    "paramiko.server.ServerInterface": [],
    "paramiko.server.ServerInterface.get_allowed_auths": [],
    "paramiko.server.ServerInterface.check_auth_none": [],
    "paramiko.server.ServerInterface.check_auth_password": [],
    "paramiko.server.ServerInterface.check_auth_publickey": [],
    "paramiko.server.ServerInterface.check_auth_interactive": [],
    "paramiko.server.ServerInterface.check_auth_interactive_response": [],
    "paramiko.server.ServerInterface.check_auth_gssapi_with_mic": [],
    "paramiko.server.ServerInterface.check_auth_gssapi_keyex": [],
    "paramiko.server.ServerInterface.enable_auth_gssapi": [],
    "paramiko.server.ServerInterface.check_channel_pty_request": [],
    "paramiko.server.ServerInterface.check_channel_shell_request": [],
    "paramiko.server.ServerInterface.check_channel_exec_request": [],
    "paramiko.server.ServerInterface.check_channel_subsystem_request": [],
    "paramiko.server.ServerInterface.check_channel_window_change_request": [],
    "paramiko.server.ServerInterface.check_channel_x11_request": [],
    "paramiko.server.ServerInterface.check_channel_forward_agent_request": [],
    "paramiko.server.ServerInterface.check_channel_env_request": [],
    "paramiko.server.ServerInterface.get_banner": [],
    "paramiko.server.InteractiveQuery": [],
    "paramiko.server.InteractiveQuery.__init__": [
        "<builtin>.isinstance",
        "paramiko.server.InteractiveQuery.add_prompt"
    ],
    "paramiko.server.InteractiveQuery.add_prompt": [],
    "paramiko.server.SubsystemHandler": [],
    "paramiko.server.SubsystemHandler.__init__": [
        "threading.Thread.__init__"
    ],
    "paramiko.server.SubsystemHandler.get_server": [],
    "paramiko.server.SubsystemHandler.start_subsystem": [],
    "paramiko.server.SubsystemHandler.finish_subsystem": [
        "paramiko.sftp_client.SFTPClient.close"
    ],
    "paramiko.kex_group16.KexGroup16SHA512": [],
    "paramiko.auth_handler.AuthHandler": [],
    "weakref.proxy": [],
    "paramiko.auth_handler.AuthHandler._log": [],
    "paramiko.auth_handler.AuthHandler._request_auth": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.auth_handler.AuthHandler._disconnect_service_not_available": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.auth_handler.AuthHandler._disconnect_no_more_auth": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.auth_handler.AuthHandler._get_key_type_and_bits": [],
    "paramiko.auth_handler.AuthHandler._get_session_blob": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.auth_handler.AuthHandler._get_key_type_and_bits",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.auth_handler.AuthHandler._parse_service_request": [
        "paramiko.message.Message.get_text",
        "paramiko.message.Message.add_byte",
        "paramiko.auth_handler.AuthHandler._disconnect_service_not_available",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.auth_handler.AuthHandler._generate_key_from_request": [
        "paramiko.message.Message.__init__",
        "paramiko.auth_handler.AuthHandler._log"
    ],
    "paramiko.auth_handler.AuthHandler._finalize_pubkey_algorithm": [
        "<builtin>.filter",
        "paramiko.auth_handler.AuthHandler._log",
        "<builtin>.list",
        "re.search",
        "paramiko.py3compat.b",
        "paramiko.py3compat.u"
    ],
    "paramiko.auth_handler.AuthHandler._parse_service_accept": [
        "paramiko.py3compat.b",
        "paramiko.auth_handler.AuthHandler._get_key_type_and_bits",
        "paramiko.message.Message.add_bytes",
        "paramiko.auth_handler.AuthHandler._parse_userauth_failure",
        "paramiko.ssh_gss._SSH_SSPI.ssh_init_sec_context",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_init_sec_context",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_init_sec_context",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.get_text",
        "paramiko.auth_handler.AuthHandler._log",
        "paramiko.ssh_gss._SSH_GSSAuth.ssh_gss_oids",
        "paramiko.message.Message.get_string",
        "paramiko.auth_handler.AuthHandler._get_session_blob",
        "paramiko.message.Message.add_boolean",
        "paramiko.ssh_gss.GSSAuth",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_get_mic",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_get_mic",
        "paramiko.ssh_gss._SSH_SSPI.ssh_get_mic",
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.get_int",
        "paramiko.auth_handler.AuthHandler._finalize_pubkey_algorithm",
        "paramiko.auth_handler.AuthHandler._parse_userauth_banner",
        "paramiko.message.Message.add_string",
        "paramiko.auth_handler.AuthHandler._handle_local_gss_failure"
    ],
    "paramiko.auth_handler.AuthHandler._parse_userauth_banner": [
        "paramiko.message.Message.get_string",
        "paramiko.auth_handler.AuthHandler._log"
    ],
    "paramiko.auth_handler.AuthHandler._handle_local_gss_failure": [
        "paramiko.auth_handler.AuthHandler._log"
    ],
    "paramiko.auth_handler.AuthHandler._parse_userauth_failure": [
        "paramiko.auth_handler.AuthHandler._log",
        "paramiko.message.Message.get_boolean",
        "<builtin>.str",
        "paramiko.message.Message.get_list",
        "paramiko.ssh_exception.PartialAuthentication.__init__",
        "paramiko.ssh_exception.BadAuthenticationType.__init__"
    ],
    "paramiko.auth_handler.AuthHandler._send_auth_result": [
        "paramiko.auth_handler.AuthHandler._log",
        "paramiko.message.Message.add_byte",
        "paramiko.auth_handler.AuthHandler._disconnect_no_more_auth",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.auth_handler.AuthHandler._interactive_query": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.add_int",
        "<builtin>.bytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_boolean",
        "<builtin>.len",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.auth_handler.AuthHandler._parse_userauth_request": [
        "paramiko.auth_handler.GssapiWithMicAuthHandler.__init__",
        "paramiko.auth_handler.AuthHandler._disconnect_service_not_available",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_check_mic",
        "paramiko.message.Message.get_boolean",
        "paramiko.auth_handler.AuthHandler._generate_key_from_request",
        "paramiko.auth_handler.AuthHandler._send_auth_result",
        "paramiko.message.Message.get_binary",
        "<builtin>.str",
        "paramiko.message.Message.add_bytes",
        "<builtin>.isinstance",
        "paramiko.message.Message.__init__",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_check_mic",
        "paramiko.message.Message.get_text",
        "paramiko.auth_handler.AuthHandler._log",
        "paramiko.ssh_gss._SSH_GSSAuth.ssh_gss_oids",
        "paramiko.message.Message.get_string",
        "paramiko.auth_handler.AuthHandler._get_session_blob",
        "paramiko.message.Message.add_boolean",
        "paramiko.ssh_gss.GSSAuth",
        "paramiko.message.Message.add_byte",
        "paramiko.auth_handler.AuthHandler._disconnect_no_more_auth",
        "paramiko.message.Message.get_int",
        "paramiko.ssh_gss._SSH_GSSAuth.ssh_check_mech",
        "paramiko.auth_handler.AuthHandler._interactive_query",
        "paramiko.ssh_gss._SSH_SSPI.ssh_check_mic",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.auth_handler.GssapiWithMicAuthHandler.__init__": [],
    "paramiko.auth_handler.AuthHandler._parse_userauth_success": [
        "paramiko.auth_handler.AuthHandler._log"
    ],
    "paramiko.auth_handler.AuthHandler._parse_userauth_info_request": [
        "paramiko.message.Message.get_text",
        "paramiko.message.Message.add_byte",
        "<builtin>.range",
        "paramiko.message.Message.get_int",
        "paramiko.message.Message.get_boolean",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.get_binary",
        "paramiko.message.Message.__init__",
        "<builtin>.len",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.auth_handler.AuthHandler._parse_userauth_info_response": [
        "paramiko.auth_handler.AuthHandler._interactive_query",
        "paramiko.auth_handler.AuthHandler._send_auth_result",
        "<builtin>.range",
        "<builtin>.isinstance"
    ],
    "paramiko.auth_handler.AuthHandler._handler_table": [],
    "paramiko.auth_handler.GssapiWithMicAuthHandler": [],
    "paramiko.auth_handler.GssapiWithMicAuthHandler.abort": [
        "paramiko.auth_handler.GssapiWithMicAuthHandler._restore_delegate_auth_handler",
        "paramiko.auth_handler.AuthHandler.abort"
    ],
    "paramiko.auth_handler.GssapiWithMicAuthHandler._restore_delegate_auth_handler": [],
    "paramiko.auth_handler.GssapiWithMicAuthHandler.transport": [],
    "paramiko.auth_handler.GssapiWithMicAuthHandler._send_auth_result": [],
    "paramiko.auth_handler.GssapiWithMicAuthHandler.auth_username": [],
    "paramiko.auth_handler.GssapiWithMicAuthHandler.gss_host": [],
    "paramiko.auth_handler.GssapiWithMicAuthHandler._parse_userauth_gssapi_token": [
        "paramiko.auth_handler.GssapiWithMicAuthHandler._restore_delegate_auth_handler",
        "paramiko.auth_handler.GssapiWithMicAuthHandler._send_auth_result",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_accept_sec_context",
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.add_byte",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_accept_sec_context",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string",
        "paramiko.ssh_gss._SSH_SSPI.ssh_accept_sec_context"
    ],
    "paramiko.auth_handler.GssapiWithMicAuthHandler._parse_userauth_gssapi_mic": [
        "paramiko.auth_handler.GssapiWithMicAuthHandler._restore_delegate_auth_handler",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW.ssh_check_mic",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD.ssh_check_mic",
        "paramiko.ssh_gss._SSH_SSPI.ssh_check_mic",
        "paramiko.auth_handler.GssapiWithMicAuthHandler._send_auth_result"
    ],
    "paramiko.auth_handler.GssapiWithMicAuthHandler._parse_service_request": [
        "paramiko.auth_handler.GssapiWithMicAuthHandler._restore_delegate_auth_handler",
        "paramiko.auth_handler.AuthHandler._parse_service_request"
    ],
    "paramiko.auth_handler.GssapiWithMicAuthHandler._parse_userauth_request": [
        "paramiko.auth_handler.GssapiWithMicAuthHandler._restore_delegate_auth_handler",
        "paramiko.auth_handler.AuthHandler._parse_userauth_request"
    ],
    "paramiko.auth_handler.GssapiWithMicAuthHandler._handler_table": [],
    "paramiko.packet.compute_hmac": [
        "hmac.HMAC.digest",
        "hmac.HMAC.__init__"
    ],
    "paramiko.packet.NeedRekeyException": [],
    "paramiko.packet.first_arg": [
        "<builtin>.len",
        "<builtin>.type"
    ],
    "paramiko.packet.Packetizer": [
        "<builtin>.pow"
    ],
    "paramiko.packet.Packetizer.closed": [],
    "paramiko.packet.Packetizer.get_mac_size_in": [],
    "paramiko.packet.Packetizer.get_mac_size_out": [],
    "paramiko.packet.Packetizer.handshake_timed_out": [],
    "paramiko.packet.Packetizer.read_all": [
        "<builtin>.bytes",
        "<builtin>.EOFError",
        "paramiko.packet.Packetizer._check_keepalive",
        "<builtin>.len",
        "paramiko.packet.Packetizer.handshake_timed_out",
        "paramiko.packet.first_arg"
    ],
    "paramiko.packet.Packetizer._check_keepalive": [
        "time.time"
    ],
    "paramiko.packet.Packetizer._read_timeout": [
        "<builtin>.len",
        "<builtin>.EOFError",
        "paramiko.packet.first_arg",
        "time.time"
    ],
    "paramiko.packet.Packetizer._build_packet": [
        "<builtin>.len"
    ],
    "paramiko.packet.Packetizer._log": [
        "<builtin>.type",
        "<builtin>.issubclass"
    ],
    "paramiko.packet.Packetizer._trigger_rekey": [],
    "paramiko.sftp_client._to_unicode": [],
    "paramiko.sftp_client.SFTPClient": [],
    "paramiko.sftp_client.SFTPClient.__init__": [
        "paramiko.sftp_client.SFTPClient._log",
        "weakref.WeakValueDictionary.__init__",
        "paramiko.util.get_logger",
        "paramiko.sftp.BaseSFTP.__init__",
        "paramiko.sftp.BaseSFTP._send_version",
        "paramiko.channel.Channel.get_transport",
        "<builtin>.type"
    ],
    "paramiko.sftp_client.SFTPClient.get_channel": [],
    "paramiko.sftp_client.SFTPClient.listdir": [
        "paramiko.sftp_client.SFTPClient.listdir_attr"
    ],
    "paramiko.sftp_client.SFTPClient.listdir_attr": [
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp_attr.SFTPAttributes._from_msg",
        "<builtin>.range",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._adjust_cwd"
    ],
    "paramiko.sftp_client.SFTPClient._adjust_cwd": [
        "<builtin>.len",
        "paramiko.py3compat.b"
    ],
    "paramiko.sftp_client.SFTPClient._request": [
        "paramiko.sftp_client.SFTPClient._read_response",
        "<builtin>.type",
        "paramiko.sftp_client.SFTPClient._async_request"
    ],
    "paramiko.sftp_attr.SFTPAttributes._from_msg": [
        "paramiko.sftp_attr.SFTPAttributes.__init__"
    ],
    "paramiko.sftp_client.SFTPClient.listdir_iter": [
        "<builtin>.list",
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp.BaseSFTP._read_packet",
        "paramiko.message.Message.get_text",
        "paramiko.sftp_attr.SFTPAttributes._from_msg",
        "paramiko.message.Message.get_string",
        "<builtin>.range",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._async_request",
        "paramiko.message.Message.get_int",
        "paramiko.sftp_client.SFTPClient._convert_status",
        "paramiko.message.Message.__init__",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "<builtin>.type"
    ],
    "paramiko.sftp_client.SFTPClient._async_request": [
        "<builtin>.isinstance",
        "paramiko.message.Message.add_int64",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.__init__",
        "paramiko.sftp.BaseSFTP._send_packet",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.sftp_client.SFTPClient._convert_status": [
        "<builtin>.EOFError",
        "paramiko.message.Message.get_text",
        "<builtin>.IOError",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.sftp_client.SFTPClient.open": [
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_file.SFTPFile.__init__",
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.py3compat.u"
    ],
    "paramiko.sftp_attr.SFTPAttributes.__init__": [],
    "paramiko.sftp_file.SFTPFile.__init__": [
        "_collections.deque",
        "paramiko.file.BufferedFile._set_mode",
        "paramiko.file.BufferedFile.__init__"
    ],
    "paramiko.sftp_client.SFTPClient.remove": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.rename": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.posix_rename": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.mkdir": [
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.rmdir": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.stat": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_attr.SFTPAttributes._from_msg",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.lstat": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_attr.SFTPAttributes._from_msg",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.symlink": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.py3compat.b"
    ],
    "paramiko.sftp_client.SFTPClient.chmod": [
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.chown": [
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.utime": [
        "paramiko.sftp_client.SFTPClient._log",
        "time.time",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._adjust_cwd"
    ],
    "paramiko.sftp_client.SFTPClient.truncate": [
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.readlink": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp_client._to_unicode"
    ],
    "paramiko.sftp_client.SFTPClient.normalize": [
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._adjust_cwd",
        "paramiko.sftp_client.SFTPClient._log"
    ],
    "paramiko.sftp_client.SFTPClient.chdir": [
        "paramiko.sftp_client.SFTPClient.stat",
        "paramiko.py3compat.b",
        "paramiko.sftp_client.SFTPClient.normalize"
    ],
    "paramiko.sftp_client.SFTPClient.getcwd": [
        "paramiko.py3compat.u"
    ],
    "paramiko.sftp_client.SFTPClient._transfer_with_callback": [
        "<builtin>.len"
    ],
    "paramiko.sftp_client.SFTPClient.putfo": [
        "paramiko.sftp_client.SFTPClient._transfer_with_callback",
        "<builtin>.IOError",
        "paramiko.sftp_client.SFTPClient.stat",
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient.open"
    ],
    "paramiko.sftp_client.SFTPClient.put": [
        "paramiko.sftp_client.SFTPClient.putfo",
        "paramiko.sftp_client.SFTPClient.open"
    ],
    "paramiko.sftp_client.SFTPClient.getfo": [
        "paramiko.sftp_client.SFTPClient._transfer_with_callback",
        "paramiko.sftp_client.SFTPClient.stat",
        "paramiko.sftp_client.SFTPClient.open"
    ],
    "paramiko.sftp_client.SFTPClient.get": [
        "paramiko.sftp_client.SFTPClient.open",
        "<builtin>.IOError",
        "paramiko.sftp_client.SFTPClient.getfo"
    ],
    "paramiko.sftp_client.SFTPClient._read_response": [
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.message.Message.get_int",
        "paramiko.sftp_client.SFTPClient._convert_status",
        "paramiko.message.Message.__init__",
        "paramiko.sftp.BaseSFTP._read_packet",
        "<builtin>.type"
    ],
    "paramiko.sftp_client.SFTPClient._finish_responses": [
        "paramiko.sftp_client.SFTPClient._read_response",
        "weakref.WeakValueDictionary.values"
    ],
    "paramiko.sftp_client.SFTP": [],
    "paramiko.sftp_attr.SFTPAttributes": [],
    "paramiko.sftp_attr.SFTPAttributes.from_stat": [
        "paramiko.sftp_attr.SFTPAttributes.__init__"
    ],
    "paramiko.sftp_attr.SFTPAttributes.__repr__": [
        "paramiko.sftp_attr.SFTPAttributes._debug_str"
    ],
    "paramiko.sftp_attr.SFTPAttributes._debug_str": [
        "<builtin>.oct",
        "<builtin>.str"
    ],
    "paramiko.sftp_attr.SFTPAttributes._unpack": [
        "<builtin>.range"
    ],
    "paramiko.sftp_attr.SFTPAttributes._pack": [
        "<builtin>.len"
    ],
    "<builtin>.oct": [],
    "paramiko.sftp_attr.SFTPAttributes._rwx": [],
    "paramiko.sftp_attr.SFTPAttributes._as_text": [
        "<builtin>.getattr",
        "stat.S_IFMT",
        "time.time",
        "time.localtime",
        "paramiko.sftp_attr.SFTPAttributes._rwx",
        "<builtin>.abs",
        "time.strftime"
    ],
    "paramiko.sftp_attr.SFTPAttributes.asbytes": [
        "paramiko.sftp_attr.SFTPAttributes._as_text"
    ],
    "paramiko.sftp_file.SFTPFile": [],
    "paramiko.sftp_file.SFTPFile.__del__": [
        "paramiko.sftp_file.SFTPFile._close"
    ],
    "paramiko.sftp_file.SFTPFile._close": [
        "paramiko.py3compat.u",
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.file.BufferedFile.close",
        "paramiko.sftp_client.SFTPClient._async_request",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_client.SFTPClient._finish_responses",
        "<builtin>.type"
    ],
    "paramiko.sftp_file.SFTPFile.close": [
        "paramiko.sftp_file.SFTPFile._close"
    ],
    "paramiko.sftp_file.SFTPFile._data_in_prefetch_requests": [
        "paramiko.sftp_file.SFTPFile._data_in_prefetch_requests",
        "<builtin>.len",
        "<builtin>.list"
    ],
    "paramiko.sftp_file.SFTPFile._data_in_prefetch_requests.<lambda1>": [],
    "paramiko.sftp_file.SFTPFile._data_in_prefetch_buffers": [
        "<builtin>.len",
        "<builtin>.max"
    ],
    "paramiko.sftp_file.SFTPFile._read_prefetch": [
        "paramiko.sftp_client.SFTPClient._read_response",
        "<builtin>.len",
        "paramiko.sftp_file.SFTPFile._check_exception",
        "paramiko.sftp_file.SFTPFile._data_in_prefetch_buffers"
    ],
    "paramiko.sftp_file.SFTPFile._check_exception": [],
    "paramiko.sftp_file.SFTPFile._read": [
        "<builtin>.min",
        "<builtin>.int",
        "paramiko.sftp_client.SFTPClient._request",
        "paramiko.sftp_file.SFTPFile._read_prefetch"
    ],
    "paramiko.sftp_file.SFTPFile._write": [
        "paramiko.sftp_client.SFTPClient._read_response",
        "<builtin>.min",
        "paramiko.sftp_client.SFTPClient._async_request",
        "paramiko.channel.Channel.recv_ready",
        "<builtin>.len",
        "<builtin>.type"
    ],
    "paramiko.sftp_file.SFTPFile.settimeout": [
        "paramiko.channel.Channel.settimeout"
    ],
    "paramiko.sftp_file.SFTPFile.gettimeout": [
        "paramiko.channel.Channel.gettimeout"
    ],
    "paramiko.sftp_file.SFTPFile.setblocking": [
        "paramiko.channel.Channel.setblocking"
    ],
    "paramiko.sftp_file.SFTPFile.seekable": [],
    "paramiko.sftp_file.SFTPFile.seek": [
        "paramiko.file.BufferedFile.flush",
        "<builtin>.bytes",
        "paramiko.sftp_file.SFTPFile._get_size"
    ],
    "paramiko.sftp_file.SFTPFile._get_size": [
        "paramiko.sftp_file.SFTPFile.stat"
    ],
    "paramiko.sftp_file.SFTPFile.stat": [
        "paramiko.sftp_attr.SFTPAttributes._from_msg",
        "paramiko.sftp_client.SFTPClient._request"
    ],
    "paramiko.sftp_file.SFTPFile.chmod": [
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp_client.SFTPClient._request"
    ],
    "paramiko.sftp_file.SFTPFile.chown": [
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp_client.SFTPClient._request"
    ],
    "paramiko.sftp_file.SFTPFile.utime": [
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._log",
        "time.time",
        "paramiko.sftp_client.SFTPClient._request"
    ],
    "paramiko.sftp_file.SFTPFile.truncate": [
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp_client.SFTPClient._request"
    ],
    "paramiko.sftp_file.SFTPFile.check": [
        "paramiko.sftp_client.SFTPClient._request"
    ],
    "paramiko.sftp_file.SFTPFile.set_pipelined": [],
    "paramiko.sftp_file.SFTPFile.prefetch": [
        "paramiko.sftp_file.SFTPFile.stat",
        "paramiko.sftp_file.SFTPFile._start_prefetch",
        "<builtin>.min",
        "<builtin>.len"
    ],
    "paramiko.sftp_file.SFTPFile._start_prefetch": [
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "paramiko.sftp_file.SFTPFile.readv": [
        "paramiko.sftp_file.SFTPFile._data_in_prefetch_requests",
        "paramiko.sftp_client.SFTPClient._log",
        "paramiko.sftp_file.SFTPFile._start_prefetch",
        "<builtin>.min",
        "paramiko.sftp_file.SFTPFile._data_in_prefetch_buffers",
        "paramiko.sftp_file.SFTPFile.seek",
        "paramiko.file.BufferedFile.read"
    ],
    "paramiko.sftp_file.SFTPFile._async_response": [
        "paramiko.sftp_client.SFTPClient._convert_status",
        "<builtin>.len"
    ],
    "paramiko.sftp_handle.SFTPHandle": [],
    "paramiko.sftp_handle.SFTPHandle.__init__": [],
    "paramiko.sftp_handle.SFTPHandle.read": [
        "<builtin>.getattr",
        "<builtin>.len",
        "paramiko.sftp_server.SFTPServer.convert_errno"
    ],
    "paramiko.sftp_server.SFTPServer.convert_errno": [],
    "paramiko.sftp_handle.SFTPHandle.write": [
        "<builtin>.getattr",
        "<builtin>.len",
        "paramiko.sftp_server.SFTPServer.convert_errno"
    ],
    "paramiko.sftp_handle.SFTPHandle.stat": [],
    "paramiko.sftp_handle.SFTPHandle.chattr": [],
    "paramiko.sftp_handle.SFTPHandle._set_files": [],
    "paramiko.sftp_handle.SFTPHandle._get_next_files": [],
    "paramiko.sftp_handle.SFTPHandle._get_name": [],
    "paramiko.sftp_handle.SFTPHandle._set_name": [],
    "paramiko.sftp_server.SFTPServer": [],
    "paramiko.sftp_server.SFTPServer.__init__": [
        "paramiko.util.get_logger",
        "paramiko.sftp.BaseSFTP.__init__",
        "paramiko.sftp_si.SFTPServerInterface.__init__",
        "paramiko.server.SubsystemHandler.__init__"
    ],
    "paramiko.sftp_si.SFTPServerInterface.__init__": [
        "<builtin>.super"
    ],
    "paramiko.sftp_server.SFTPServer._log": [
        "<builtin>.super",
        "<builtin>.type",
        "<builtin>.issubclass"
    ],
    "paramiko.sftp_server.SFTPServer.start_subsystem": [
        "paramiko.sftp_server.SFTPServer._send_status",
        "paramiko.sftp.BaseSFTP._send_server_version",
        "paramiko.sftp_server.SFTPServer._log",
        "paramiko.util.tb_strings",
        "paramiko.message.Message.get_int",
        "paramiko.sftp_server.SFTPServer._process",
        "paramiko.message.Message.__init__",
        "<builtin>.str",
        "paramiko.sftp.BaseSFTP._read_packet"
    ],
    "paramiko.sftp_server.SFTPServer._process": [
        "paramiko.message.Message.get_text",
        "paramiko.sftp_server.SFTPServer._send_status",
        "<builtin>.isinstance",
        "paramiko.sftp_server.SFTPServer._log",
        "paramiko.sftp_attr.SFTPAttributes._from_msg",
        "paramiko.sftp_server.SFTPServer._open_folder",
        "paramiko.sftp_server.SFTPServer._convert_pflags",
        "paramiko.message.Message.get_int",
        "paramiko.sftp_attr.SFTPAttributes.__init__",
        "paramiko.message.Message.get_binary",
        "paramiko.sftp_server.SFTPServer._read_folder",
        "paramiko.sftp_server.SFTPServer._send_handle_response",
        "<builtin>.issubclass",
        "<builtin>.len",
        "paramiko.sftp_server.SFTPServer._check_file",
        "paramiko.message.Message.get_int64",
        "paramiko.sftp_server.SFTPServer._response",
        "<builtin>.type"
    ],
    "paramiko.sftp_server.SFTPServer._send_status": [
        "paramiko.sftp_server.SFTPServer._response"
    ],
    "paramiko.sftp_server.SFTPServer.finish_subsystem": [
        "<builtin>.super"
    ],
    "paramiko.sftp_server.SFTPServer.set_file_attr": [
        "<builtin>.open"
    ],
    "paramiko.sftp_server.SFTPServer._response": [
        "<builtin>.isinstance",
        "<builtin>.Exception",
        "paramiko.message.Message.add_int64",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.__init__",
        "paramiko.sftp.BaseSFTP._send_packet",
        "paramiko.message.Message.add_string",
        "<builtin>.type"
    ],
    "paramiko.sftp_server.SFTPServer._send_handle_response": [
        "paramiko.sftp_handle.SFTPHandle._set_name",
        "paramiko.sftp_server.SFTPServer._response",
        "paramiko.sftp_server.SFTPServer._send_status",
        "paramiko.sftp_handle.SFTPHandle._get_name",
        "paramiko.py3compat.b",
        "<builtin>.issubclass",
        "<builtin>.type"
    ],
    "paramiko.sftp_server.SFTPServer._open_folder": [
        "paramiko.sftp_handle.SFTPHandle._set_files",
        "paramiko.sftp_server.SFTPServer._send_status",
        "paramiko.sftp_handle.SFTPHandle.__init__",
        "<builtin>.issubclass",
        "paramiko.sftp_server.SFTPServer._send_handle_response",
        "<builtin>.type"
    ],
    "paramiko.sftp_server.SFTPServer._read_folder": [
        "paramiko.sftp_server.SFTPServer._send_status",
        "paramiko.message.Message.add_int",
        "paramiko.message.Message.__init__",
        "<builtin>.len",
        "paramiko.sftp.BaseSFTP._send_packet",
        "paramiko.message.Message.add_string"
    ],
    "paramiko.sftp_server.SFTPServer._check_file": [
        "paramiko.sftp.BaseSFTP._send_packet",
        "paramiko.sftp_server.SFTPServer._send_status",
        "<builtin>.isinstance",
        "<builtin>.min",
        "paramiko.message.Message.get_int",
        "paramiko.message.Message.add_int",
        "<builtin>.bytes",
        "paramiko.message.Message.get_binary",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string",
        "<builtin>.issubclass",
        "paramiko.message.Message.get_list",
        "<builtin>.len",
        "paramiko.message.Message.add_bytes",
        "paramiko.message.Message.get_int64",
        "<builtin>.type"
    ],
    "paramiko.sftp_server.SFTPServer._convert_pflags": [],
    "paramiko.sftp_si.SFTPServerInterface": [],
    "paramiko.sftp_si.SFTPServerInterface.session_started": [],
    "paramiko.sftp_si.SFTPServerInterface.session_ended": [],
    "paramiko.sftp_si.SFTPServerInterface.open": [],
    "paramiko.sftp_si.SFTPServerInterface.list_folder": [],
    "paramiko.sftp_si.SFTPServerInterface.stat": [],
    "paramiko.sftp_si.SFTPServerInterface.lstat": [],
    "paramiko.sftp_si.SFTPServerInterface.remove": [],
    "paramiko.sftp_si.SFTPServerInterface.rename": [],
    "paramiko.sftp_si.SFTPServerInterface.posix_rename": [],
    "paramiko.sftp_si.SFTPServerInterface.mkdir": [],
    "paramiko.sftp_si.SFTPServerInterface.rmdir": [],
    "paramiko.sftp_si.SFTPServerInterface.chattr": [],
    "paramiko.sftp_si.SFTPServerInterface.canonicalize": [
        "posixpath.normpath",
        "ntpath.normpath",
        "ntpath.isabs",
        "sys.base_prefix.replace",
        "posixpath.isabs",
        "sys.executable.replace",
        "sys.path.replace"
    ],
    "paramiko.sftp_si.SFTPServerInterface.readlink": [],
    "paramiko.sftp_si.SFTPServerInterface.symlink": [],
    "paramiko.proxy.ProxyCommand": [],
    "paramiko.proxy.ProxyCommand.__init__": [
        "subprocess.Popen.__init__"
    ],
    "paramiko.proxy.ProxyCommand.send": [
        "gzip.GzipFile.write",
        "bz2.BZ2File.write",
        "paramiko.ssh_exception.ProxyCommandFailure.__init__",
        "<builtin>.len",
        "lzma.LZMAFile.write"
    ],
    "paramiko.proxy.ProxyCommand.recv": [
        "gzip.GzipFile.fileno",
        "lzma.LZMAFile.fileno",
        "bz2.BZ2File.fileno",
        "time.time",
        "asyncio.windows_utils.PipeHandle.fileno",
        "paramiko.ssh_exception.ProxyCommandFailure.__init__",
        "<builtin>.len"
    ],
    "paramiko.proxy.ProxyCommand.close": [],
    "paramiko.proxy.ProxyCommand.closed": [],
    "paramiko.proxy.ProxyCommand._closed": [],
    "paramiko.proxy.ProxyCommand.settimeout": [],
    "paramiko.agent.AgentSSH": [],
    "paramiko.agent.AgentSSH.__init__": [],
    "paramiko.agent.AgentSSH._connect": [
        "paramiko.agent.AgentKey.__init__",
        "paramiko.agent.AgentSSH._send_message",
        "<builtin>.range",
        "<builtin>.tuple"
    ],
    "paramiko.agent.AgentSSH._send_message": [
        "paramiko.win_openssh.OpenSSHAgentConnection.send",
        "paramiko.message.Message.get_byte",
        "<builtin>.ord",
        "paramiko.win_pageant.PageantConnection.send",
        "paramiko.agent.AgentSSH._read_all",
        "paramiko.message.Message.__init__",
        "<builtin>.len",
        "paramiko.common.asbytes"
    ],
    "paramiko.agent.AgentKey.__init__": [
        "paramiko.message.Message.get_text",
        "paramiko.message.Message.__init__"
    ],
    "paramiko.agent.AgentSSH._close": [
        "paramiko.win_pageant.PageantConnection.close",
        "paramiko.win_openssh.OpenSSHAgentConnection.close"
    ],
    "paramiko.win_pageant.PageantConnection.close": [],
    "paramiko.win_openssh.OpenSSHAgentConnection.close": [],
    "paramiko.win_pageant.PageantConnection.send": [
        "paramiko.win_pageant._query_pageant"
    ],
    "paramiko.win_openssh.OpenSSHAgentConnection.send": [],
    "paramiko.agent.AgentSSH._read_all": [
        "<builtin>.len",
        "paramiko.win_pageant.PageantConnection.recv",
        "paramiko.win_openssh.OpenSSHAgentConnection.recv"
    ],
    "paramiko.win_pageant.PageantConnection.recv": [],
    "paramiko.win_openssh.OpenSSHAgentConnection.recv": [],
    "paramiko.agent.AgentProxyThread": [],
    "paramiko.agent.AgentProxyThread.__init__": [
        "threading.Thread.__init__"
    ],
    "paramiko.agent.AgentRemoteProxy.get_connection": [],
    "paramiko.agent.AgentLocalProxy.get_connection": [],
    "paramiko.agent.AgentProxyThread._close": [],
    "paramiko.agent.AgentLocalProxy": [],
    "paramiko.agent.AgentLocalProxy.__init__": [
        "paramiko.agent.AgentProxyThread.__init__"
    ],
    "paramiko.agent.AgentRemoteProxy": [],
    "paramiko.agent.AgentRemoteProxy.__init__": [
        "paramiko.agent.AgentProxyThread.__init__"
    ],
    "paramiko.win_pageant.can_talk_to_agent": [
        "paramiko.win_pageant._get_pageant_window_object",
        "<builtin>.bool"
    ],
    "paramiko.win_pageant.PageantConnection.__init__": [],
    "paramiko.win_openssh.can_talk_to_agent": [
        "<builtin>.any"
    ],
    "paramiko.win_openssh.OpenSSHAgentConnection.__init__": [
        "time.sleep"
    ],
    "paramiko.agent.AgentClientProxy": [],
    "paramiko.agent.AgentClientProxy.__init__": [
        "paramiko.agent.AgentRemoteProxy.__init__",
        "threading.Thread.start"
    ],
    "paramiko.agent.AgentClientProxy.__del__": [
        "paramiko.agent.AgentClientProxy.close"
    ],
    "paramiko.agent.AgentClientProxy.close": [
        "paramiko.win_pageant.PageantConnection.close",
        "paramiko.win_openssh.OpenSSHAgentConnection.close",
        "threading._DummyThread.join",
        "<builtin>.hasattr",
        "threading.Thread.join"
    ],
    "paramiko.agent.AgentClientProxy.connect": [
        "paramiko.agent.get_agent_connection"
    ],
    "paramiko.agent.AgentServerProxy": [],
    "paramiko.agent.AgentServerProxy.__init__": [
        "paramiko.agent.AgentSSH.__init__",
        "tempfile.mkdtemp",
        "paramiko.agent.AgentLocalProxy.__init__",
        "threading.Thread.start"
    ],
    "paramiko.agent.AgentServerProxy.__del__": [
        "paramiko.agent.AgentServerProxy.close"
    ],
    "paramiko.agent.AgentServerProxy.close": [
        "threading._DummyThread.join",
        "paramiko.agent.AgentSSH._close",
        "threading.Thread.join"
    ],
    "paramiko.agent.AgentServerProxy.connect": [
        "paramiko.agent.AgentSSH._connect"
    ],
    "paramiko.agent.AgentServerProxy.get_env": [
        "paramiko.agent.AgentServerProxy._get_filename"
    ],
    "paramiko.agent.AgentServerProxy._get_filename": [],
    "paramiko.agent.AgentRequestHandler": [],
    "paramiko.agent.AgentRequestHandler.__init__": [],
    "paramiko.agent.AgentRequestHandler._forward_agent_handler": [
        "paramiko.agent.AgentClientProxy.__init__"
    ],
    "paramiko.agent.AgentRequestHandler.__del__": [
        "paramiko.agent.AgentRequestHandler.close"
    ],
    "paramiko.agent.AgentRequestHandler.close": [],
    "paramiko.agent.Agent": [],
    "paramiko.agent.Agent.__init__": [
        "paramiko.agent.AgentSSH.__init__",
        "paramiko.agent.get_agent_connection",
        "paramiko.agent.AgentSSH._connect"
    ],
    "paramiko.agent.Agent.close": [
        "paramiko.agent.AgentSSH._close"
    ],
    "paramiko.agent.AgentKey": [],
    "paramiko.agent.AgentKey.asbytes": [],
    "paramiko.agent.AgentKey.__str__": [
        "paramiko.agent.AgentKey.asbytes"
    ],
    "paramiko.agent.AgentKey.get_name": [],
    "paramiko.agent.AgentKey._fields": [],
    "paramiko.agent.AgentKey.sign_ssh_data": [
        "paramiko.message.Message.add_byte",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.win_openssh.OpenSSHAgentConnection": [],
    "paramiko.win_pageant._get_pageant_window_object": [],
    "paramiko.win_pageant.COPYDATASTRUCT": [],
    "paramiko.win_pageant._query_pageant": [
        "_thread.get_ident",
        "paramiko._winapi.MemoryMap.seek",
        "paramiko._winapi.MemoryMap.read",
        "paramiko._winapi.get_security_attributes_for_user",
        "paramiko._winapi.MemoryMap.__init__",
        "paramiko.win_pageant._get_pageant_window_object",
        "paramiko._winapi.MemoryMap.write",
        "thread.get_ident",
        "paramiko.py3compat.b"
    ],
    "thread.get_ident": [],
    "paramiko._winapi.get_security_attributes_for_user": [
        "paramiko._winapi.get_current_user",
        "<builtin>.isinstance",
        "paramiko._winapi.SECURITY_ATTRIBUTES.__init__"
    ],
    "paramiko._winapi.MemoryMap.__init__": [],
    "paramiko._winapi.MemoryMap.write": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "paramiko._winapi.MemoryMap.seek": [],
    "paramiko._winapi.MemoryMap.read": [],
    "paramiko.win_pageant.PageantConnection": [],
    "paramiko._winapi.format_system_message": [
        "paramiko._winapi.handle_nonzero_success"
    ],
    "paramiko._winapi.handle_nonzero_success": [
        "paramiko._winapi.WindowsError.__init__"
    ],
    "paramiko._winapi.WindowsError": [],
    "paramiko._winapi.WindowsError.__init__": [
        "<builtin>.super",
        "paramiko._winapi.format_system_message"
    ],
    "paramiko._winapi.WindowsError.message": [],
    "paramiko._winapi.WindowsError.code": [],
    "paramiko._winapi.WindowsError.__str__": [],
    "paramiko._winapi.WindowsError.__repr__": [
        "<builtin>.vars"
    ],
    "paramiko._winapi.MemoryMap": [],
    "paramiko._winapi.MemoryMap.__enter__": [
        "paramiko._winapi.handle_nonzero_success",
        "<builtin>.Exception",
        "paramiko.py3compat.u"
    ],
    "paramiko._winapi.MemoryMap.__exit__": [],
    "paramiko._winapi.TokenAccess": [],
    "paramiko._winapi.TokenInformationClass": [],
    "paramiko._winapi.TOKEN_USER": [],
    "paramiko._winapi.SECURITY_DESCRIPTOR": [],
    "paramiko._winapi.SECURITY_ATTRIBUTES": [],
    "paramiko._winapi.SECURITY_ATTRIBUTES.__init__": [
        "<builtin>.super"
    ],
    "paramiko._winapi.SECURITY_ATTRIBUTES.descriptor": [],
    "paramiko._winapi.GetTokenInformation": [
        "paramiko._winapi.handle_nonzero_success"
    ],
    "paramiko._winapi.OpenProcessToken": [
        "paramiko._winapi.handle_nonzero_success"
    ],
    "paramiko._winapi.get_current_user": [
        "paramiko._winapi.GetTokenInformation",
        "paramiko._winapi.OpenProcessToken"
    ],
    "ctypes.wintypes.VARIANT_BOOL": [],
    "ctypes.wintypes.VARIANT_BOOL.__repr__": [],
    "ctypes.wintypes.RECT": [],
    "ctypes.wintypes._SMALL_RECT": [],
    "ctypes.wintypes._COORD": [],
    "ctypes.wintypes.POINT": [],
    "ctypes.wintypes.SIZE": [],
    "ctypes.wintypes.RGB": [],
    "ctypes.wintypes.FILETIME": [],
    "ctypes.wintypes.MSG": [],
    "ctypes.wintypes.WIN32_FIND_DATAA": [],
    "ctypes.wintypes.WIN32_FIND_DATAW": [],
    "ctypes.create_string_buffer": [
        "<builtin>.len",
        "sys.audit",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "ctypes.c_buffer": [
        "ctypes.create_string_buffer"
    ],
    "ctypes.CFUNCTYPE": [
        "ctypes.CFUNCTYPE.CFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.CFUNCTYPE.CFunctionType": [],
    "ctypes.WINFUNCTYPE": [
        "ctypes.WINFUNCTYPE.WinFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.WINFUNCTYPE.WinFunctionType": [],
    "ctypes.py_object": [],
    "ctypes.py_object.__repr__": [
        "<builtin>.super",
        "<builtin>.type"
    ],
    "ctypes.c_short": [],
    "ctypes.c_ushort": [],
    "ctypes.c_long": [],
    "ctypes.c_ulong": [],
    "ctypes.c_int": [],
    "ctypes.c_uint": [],
    "ctypes.c_float": [],
    "ctypes.c_double": [],
    "ctypes.c_longdouble": [],
    "ctypes.c_longlong": [],
    "ctypes.c_ulonglong": [],
    "ctypes.c_ubyte": [],
    "ctypes.c_byte": [],
    "ctypes.c_char": [],
    "ctypes.c_char_p": [],
    "ctypes.c_char_p.__repr__": [],
    "ctypes.c_void_p": [],
    "ctypes.c_bool": [],
    "ctypes.c_wchar_p": [],
    "ctypes.c_wchar_p.__repr__": [],
    "ctypes.c_wchar": [],
    "ctypes._reset_cache": [],
    "ctypes.create_unicode_buffer": [
        "<builtin>.isinstance",
        "<builtin>.ord",
        "sys.audit",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.sum"
    ],
    "ctypes.SetPointerType": [
        "<builtin>.id",
        "<builtin>.RuntimeError"
    ],
    "ctypes.ARRAY": [],
    "ctypes.CDLL": [],
    "ctypes.CDLL.__init__": [
        "nt._getfullpathname",
        "ctypes.CDLL.__init__._FuncPtr",
        "sys.platform.startswith"
    ],
    "ctypes.CDLL.__init__._FuncPtr": [],
    "ctypes.CDLL.__repr__": [
        "<builtin>.id"
    ],
    "ctypes.CDLL.__getattr__": [
        "<builtin>.AttributeError",
        "ctypes.CDLL.__getitem__",
        "<builtin>.setattr"
    ],
    "ctypes.CDLL.__getitem__": [
        "<builtin>.isinstance"
    ],
    "ctypes.PyDLL": [],
    "ctypes.WinDLL": [],
    "ctypes.HRESULT": [],
    "ctypes.OleDLL": [],
    "ctypes.LibraryLoader": [],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.LibraryLoader.__getattr__": [
        "<builtin>.AttributeError",
        "<builtin>.setattr",
        "ctypes.CDLL.__init__"
    ],
    "ctypes.LibraryLoader.__getitem__": [
        "<builtin>.getattr"
    ],
    "ctypes.LibraryLoader.LoadLibrary": [
        "ctypes.CDLL.__init__"
    ],
    "ctypes.WinError": [
        "<builtin>.OSError"
    ],
    "ctypes.PYFUNCTYPE": [
        "ctypes.PYFUNCTYPE.CFunctionType"
    ],
    "ctypes.PYFUNCTYPE.CFunctionType": [],
    "ctypes.cast": [],
    "ctypes.string_at": [],
    "ctypes.wstring_at": [],
    "ctypes.DllGetClassObject": [
        "<builtin>.globals",
        "<builtin>.__import__",
        "<builtin>.locals"
    ],
    "ctypes.DllCanUnloadNow": [
        "<builtin>.globals",
        "<builtin>.__import__",
        "<builtin>.locals"
    ],
    "ctypes._endian._other_endian": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "ctypes._endian._other_endian",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.hasattr"
    ],
    "ctypes._endian._swapped_meta": [],
    "ctypes._endian._swapped_meta.__setattr__": [
        "<builtin>.super",
        "ctypes._endian._other_endian"
    ],
    "ctypes._endian.BigEndianStructure": [],
    "ctypes._endian.LittleEndianStructure": [],
    "paramiko.client.SSHClient": [],
    "paramiko.client.SSHClient.__init__": [
        "paramiko.hostkeys.HostKeys.__init__"
    ],
    "paramiko.client.SSHClient.load_system_host_keys": [
        "posixpath.expanduser",
        "paramiko.hostkeys.HostKeys.load",
        "ntpath.expanduser"
    ],
    "paramiko.client.SSHClient.load_host_keys": [
        "paramiko.hostkeys.HostKeys.load"
    ],
    "paramiko.client.SSHClient.save_host_keys": [
        "<builtin>.open",
        "paramiko.client.SSHClient.load_host_keys"
    ],
    "paramiko.client.SSHClient.get_host_keys": [],
    "paramiko.client.SSHClient.set_log_channel": [],
    "paramiko.client.SSHClient.set_missing_host_key_policy": [
        "inspect.isclass"
    ],
    "paramiko.client.SSHClient._families_and_addresses": [],
    "paramiko.client.SSHClient.connect": [
        "paramiko.transport.Transport.__init__",
        "<builtin>.list",
        "paramiko.util.retry_on_signal",
        "paramiko.ssh_exception.NoValidConnectionsError.__init__",
        "paramiko.client.RejectPolicy.missing_host_key",
        "<builtin>.isinstance",
        "paramiko.client.SSHClient._families_and_addresses",
        "paramiko.ssh_exception.BadHostKeyException.__init__",
        "paramiko.client.SSHClient._auth",
        "<builtin>.len"
    ],
    "paramiko.client.RejectPolicy.missing_host_key": [],
    "paramiko.client.SSHClient._auth": [
        "ntpath.isfile",
        "paramiko.agent.AgentSSH.get_keys",
        "ntpath.expanduser",
        "posixpath.isfile",
        "posixpath.expanduser",
        "<builtin>.set",
        "paramiko.client.SSHClient._key_from_filepath",
        "paramiko.client.SSHClient._log",
        "paramiko.agent.Agent.__init__"
    ],
    "paramiko.client.SSHClient.close": [
        "paramiko.agent.Agent.close"
    ],
    "paramiko.client.SSHClient.exec_command": [],
    "paramiko.client.SSHClient.invoke_shell": [],
    "paramiko.client.SSHClient.open_sftp": [],
    "paramiko.client.SSHClient.get_transport": [],
    "paramiko.client.SSHClient._key_from_filepath": [
        "ntpath.isfile",
        "<builtin>.len",
        "posixpath.isfile",
        "paramiko.client.SSHClient._log"
    ],
    "paramiko.client.SSHClient._log": [],
    "paramiko.client.MissingHostKeyPolicy": [],
    "paramiko.client.MissingHostKeyPolicy.missing_host_key": [],
    "paramiko.client.AutoAddPolicy": [],
    "paramiko.client.AutoAddPolicy.missing_host_key": [],
    "paramiko.client.RejectPolicy": [],
    "paramiko.client.WarningPolicy": [],
    "paramiko.client.WarningPolicy.missing_host_key": [
        "warnings.warn"
    ],
    "socketserver.BaseServer": [],
    "socketserver.BaseServer.__init__": [
        "threading.Event.__init__"
    ],
    "socketserver.BaseServer.server_activate": [],
    "socketserver.BaseServer.serve_forever": [
        "threading.Event.clear",
        "selectors.SelectSelector.__init__",
        "socketserver.BaseServer.service_actions",
        "selectors._PollLikeSelector.__init__",
        "threading.Event.set",
        "socketserver.BaseServer._handle_request_noblock"
    ],
    "socketserver.BaseServer._handle_request_noblock": [
        "socketserver.BaseServer.shutdown_request",
        "socketserver.BaseServer.handle_error",
        "socketserver.BaseServer.verify_request",
        "socketserver.BaseServer.process_request"
    ],
    "socketserver.BaseServer.service_actions": [],
    "socketserver.BaseServer.shutdown": [
        "threading.Event.wait"
    ],
    "socketserver.BaseServer.handle_request": [
        "socketserver.BaseServer.handle_timeout",
        "selectors.SelectSelector.__init__",
        "<builtin>.min",
        "selectors._PollLikeSelector.__init__",
        "time.monotonic",
        "socketserver.BaseServer._handle_request_noblock"
    ],
    "socketserver.BaseServer.handle_timeout": [],
    "socketserver.BaseServer.verify_request": [],
    "socketserver.BaseServer.process_request": [
        "socketserver.BaseServer.finish_request",
        "socketserver.BaseServer.shutdown_request"
    ],
    "socketserver.BaseServer.shutdown_request": [
        "socketserver.BaseServer.close_request"
    ],
    "socketserver.BaseServer.finish_request": [
        "sshtunnel._ForwardServer.__init__"
    ],
    "socketserver.BaseServer.server_close": [],
    "socketserver.BaseServer.close_request": [],
    "socketserver.BaseServer.__enter__": [],
    "socketserver.BaseServer.__exit__": [
        "socketserver.BaseServer.server_close"
    ],
    "socketserver.TCPServer": [],
    "socketserver.TCPServer.server_bind": [],
    "socketserver.TCPServer.server_activate": [],
    "socketserver.TCPServer.server_close": [],
    "socketserver.TCPServer.fileno": [],
    "socketserver.TCPServer.get_request": [],
    "socketserver.TCPServer.shutdown_request": [
        "socketserver.TCPServer.close_request"
    ],
    "socketserver.TCPServer.close_request": [],
    "socketserver.UDPServer": [],
    "socketserver.UDPServer.get_request": [],
    "socketserver.UDPServer.server_activate": [],
    "socketserver.UDPServer.shutdown_request": [
        "socketserver.UDPServer.close_request"
    ],
    "socketserver.UDPServer.close_request": [],
    "socketserver.ForkingMixIn": [],
    "socketserver.ForkingMixIn.collect_children": [
        "<builtin>.len"
    ],
    "socketserver.ForkingMixIn.handle_timeout": [
        "socketserver.ForkingMixIn.collect_children"
    ],
    "socketserver.ForkingMixIn.service_actions": [
        "socketserver.ForkingMixIn.collect_children"
    ],
    "socketserver.ForkingMixIn.process_request": [
        "<builtin>.set",
        "os._exit"
    ],
    "os._exit": [],
    "socketserver.ForkingMixIn.server_close": [
        "socketserver.ForkingMixIn.collect_children",
        "<builtin>.super"
    ],
    "socketserver.ThreadingMixIn": [],
    "socketserver.ThreadingMixIn.process_request": [
        "threading.Thread.start",
        "threading.Thread.__init__"
    ],
    "socketserver.ThreadingMixIn.server_close": [
        "<builtin>.super"
    ],
    "socketserver.ForkingUDPServer": [],
    "socketserver.ForkingTCPServer": [],
    "socketserver.ThreadingUDPServer": [],
    "socketserver.ThreadingTCPServer": [],
    "socketserver.UnixStreamServer": [],
    "socketserver.UnixDatagramServer": [],
    "socketserver.ThreadingUnixStreamServer": [],
    "socketserver.ThreadingUnixDatagramServer": [],
    "socketserver.BaseRequestHandler": [],
    "socketserver.BaseRequestHandler.__init__": [
        "socketserver.BaseRequestHandler.finish",
        "socketserver.BaseRequestHandler.handle",
        "socketserver.BaseRequestHandler.setup"
    ],
    "socketserver.BaseRequestHandler.setup": [],
    "socketserver.BaseRequestHandler.handle": [],
    "socketserver.BaseRequestHandler.finish": [],
    "socketserver.StreamRequestHandler": [],
    "socketserver.StreamRequestHandler.setup": [
        "socketserver._SocketWriter.__init__"
    ],
    "socketserver._SocketWriter.__init__": [],
    "socketserver.StreamRequestHandler.finish": [
        "gzip.GzipFile.close",
        "_io._IOBase.close",
        "_io._BufferedIOBase.flush",
        "zipfile.ZipExtFile.close",
        "gzip.GzipFile.flush",
        "_io._BufferedIOBase.close",
        "zipfile._ZipWriteFile.close",
        "lzma.LZMAFile.close"
    ],
    "_io._BufferedIOBase.close": [],
    "socketserver._SocketWriter": [],
    "socketserver._SocketWriter.writable": [],
    "socketserver._SocketWriter.write": [
        "<builtin>.memoryview"
    ],
    "socketserver._SocketWriter.fileno": [],
    "socketserver.DatagramRequestHandler": [],
    "socketserver.DatagramRequestHandler.finish": []
}