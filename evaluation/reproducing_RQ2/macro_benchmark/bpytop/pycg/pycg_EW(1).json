{
    "_py_abc": [
        "_py_abc.ABCMeta",
        "_weakrefset"
    ],
    "_weakrefset": [
        "_weakrefset._IterationGuard",
        "_weakrefset.WeakSet"
    ],
    "abc": [
        "abc.abstractproperty",
        "abc.ABC",
        "abc.abstractclassmethod",
        "_py_abc",
        "abc.ABCMeta",
        "abc.abstractstaticmethod"
    ],
    "os": [
        "collections.abc",
        "os._get_exports_list",
        "<builtin>.ImportError",
        "os._Environ.__init__",
        "posixpath",
        "os._exists",
        "os._add",
        "os.PathLike",
        "ntpath",
        "<builtin>.globals",
        "os._wrap_close",
        "<builtin>.set",
        "os._Environ",
        "stat",
        "os._fscodec",
        "os._createenviron",
        "os._AddedDllDirectory",
        "abc"
    ],
    "stat": [],
    "_collections_abc": [
        "_collections_abc.Awaitable",
        "_collections_abc.Hashable",
        "<builtin>.iter",
        "_collections_abc.Generator",
        "_collections_abc.AsyncGenerator",
        "_collections_abc.MutableSet",
        "_collections_abc.Set",
        "_collections_abc.Reversible",
        "_collections_abc.Collection",
        "_collections_abc.Coroutine",
        "_collections_abc.ValuesView",
        "_collections_abc.Sized",
        "_collections_abc.Container",
        "<builtin>.type",
        "_collections_abc.MutableMapping",
        "_collections_abc.AsyncIterable",
        "abc",
        "_collections_abc.KeysView",
        "_collections_abc.Iterable",
        "<builtin>.zip",
        "_collections_abc.ItemsView",
        "<builtin>.bytearray",
        "_collections_abc.MappingView",
        "<builtin>.set",
        "<builtin>.range",
        "_collections_abc.Iterator",
        "_collections_abc.Sequence",
        "_collections_abc.AsyncIterator",
        "_collections_abc.Mapping",
        "<builtin>.reversed",
        "_collections_abc.ByteString",
        "_collections_abc.MutableSequence",
        "_collections_abc.Callable"
    ],
    "posixpath": [
        "stat",
        "os",
        "genericpath"
    ],
    "genericpath": [
        "stat",
        "os"
    ],
    "functools": [
        "functools.singledispatchmethod",
        "functools._HashedSeq",
        "functools.partial",
        "functools.partialmethod",
        "collections",
        "functools.cached_property",
        "collections.namedtuple",
        "reprlib",
        "<builtin>.object",
        "abc"
    ],
    "operator.methodcaller.__reduce__": [
        "functools",
        "_functools.partial"
    ],
    "collections": [
        "operator",
        "collections.OrderedDict",
        "collections.UserString",
        "collections._Link",
        "collections._OrderedDictValuesView",
        "collections._OrderedDictItemsView",
        "collections.Counter",
        "heapq",
        "collections.UserDict",
        "reprlib",
        "collections.UserList",
        "collections.ChainMap",
        "collections._OrderedDictKeysView",
        "keyword"
    ],
    "operator": [
        "operator.attrgetter",
        "operator.methodcaller",
        "operator.itemgetter"
    ],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "heapq": [
        "<builtin>.print",
        "doctest.testmod",
        "doctest",
        "_heapq"
    ],
    "_heapq": [],
    "doctest": [
        "difflib",
        "doctest.DocTestParser",
        "inspect",
        "doctest._SpoofOut",
        "io",
        "doctest._TestClass",
        "os",
        "unittest",
        "doctest.OutputChecker",
        "doctest.DocTestFinder",
        "doctest._test",
        "collections.namedtuple",
        "doctest._OutputRedirectingPdb",
        "linecache",
        "doctest.DocFileCase",
        "sys.exit",
        "re",
        "doctest.DocTestCase",
        "doctest.UnexpectedException",
        "doctest.DocTestRunner",
        "doctest.SkipDocTestCase",
        "doctest._DocTestSuite",
        "doctest.DocTest",
        "doctest.register_optionflag",
        "doctest.DocTestFailure",
        "__future__",
        "collections",
        "doctest.Example",
        "traceback",
        "doctest.DebugRunner"
    ],
    "__future__": [
        "__future__._Feature",
        "__future__._Feature.__init__"
    ],
    "difflib": [
        "collections",
        "difflib._test",
        "collections.namedtuple",
        "difflib.SequenceMatcher",
        "heapq",
        "difflib.Differ",
        "re",
        "difflib.HtmlDiff"
    ],
    "re": [
        "<builtin>.chr",
        "sre_compile",
        "re.Scanner",
        "functools.lru_cache",
        "enum",
        "copyreg.pickle",
        "sre_parse",
        "re.RegexFlag",
        "functools",
        "functools.singledispatch.wrapper",
        "functools.lru_cache.decorating_function",
        "<builtin>.globals",
        "functools.singledispatchmethod.__get__._method",
        "<builtin>.type",
        "sre_compile.compile",
        "functools._lru_cache_wrapper.wrapper",
        "copyreg"
    ],
    "difflib._mdiff": [
        "<builtin>.next",
        "difflib._mdiff._line_pair_iterator",
        "difflib.ndiff",
        "re.compile",
        "re"
    ],
    "difflib._test": [
        "doctest.testmod",
        "doctest",
        "difflib"
    ],
    "inspect": [
        "inspect.Parameter",
        "functools",
        "inspect._void",
        "warnings",
        "token",
        "<builtin>.hasattr",
        "<builtin>.object",
        "tokenize",
        "os",
        "types",
        "inspect._main",
        "collections.namedtuple",
        "<builtin>.globals",
        "inspect.BoundArguments",
        "linecache",
        "<builtin>.type",
        "inspect._ParameterKind",
        "importlib.machinery",
        "inspect.BlockFinder",
        "re",
        "abc",
        "collections.abc",
        "operator",
        "dis",
        "enum",
        "inspect._empty",
        "inspect.Signature",
        "inspect.EndOfBlock",
        "collections"
    ],
    "dis": [
        "opcode",
        "types",
        "collections",
        "collections.namedtuple",
        "io",
        "dis._test",
        "dis.Instruction",
        "dis.Bytecode"
    ],
    "types": [
        "types._g",
        "types._GeneratorWrapper",
        "types._cell_factory",
        "sys.exc_info",
        "<builtin>.globals",
        "<builtin>.type",
        "<builtin>.object",
        "types.DynamicClassAttribute",
        "types._C"
    ],
    "io": [
        "io.RawIOBase",
        "_io._IOBase.register",
        "io.BufferedIOBase",
        "io.TextIOBase",
        "io.IOBase",
        "_io._RawIOBase.register",
        "abc"
    ],
    "opcode": [
        "opcode.name_op",
        "opcode.jabs_op",
        "opcode.jrel_op",
        "<builtin>.range",
        "_opcode",
        "opcode.def_op"
    ],
    "_opcode": [],
    "argparse": [
        "argparse._StoreTrueAction",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse.Action",
        "argparse.MetavarTypeHelpFormatter",
        "argparse.ArgumentError",
        "argparse._VersionAction",
        "argparse._ArgumentGroup",
        "argparse.RawTextHelpFormatter",
        "os",
        "argparse.ArgumentParser",
        "argparse.ArgumentTypeError",
        "gettext",
        "argparse._AppendAction",
        "argparse._MutuallyExclusiveGroup",
        "re",
        "argparse.FileType",
        "argparse.Namespace",
        "argparse._StoreFalseAction",
        "argparse._AppendConstAction",
        "shutil",
        "argparse._ExtendAction",
        "argparse._ActionsContainer",
        "argparse._CountAction",
        "argparse._AttributeHolder",
        "argparse._StoreConstAction",
        "argparse._HelpAction",
        "argparse.HelpFormatter",
        "argparse._SubParsersAction",
        "argparse.RawDescriptionHelpFormatter",
        "argparse._StoreAction"
    ],
    "shutil": [
        "shutil.ExecError",
        "os",
        "sys.platform.startswith",
        "collections",
        "fnmatch",
        "bz2",
        "zlib",
        "lzma",
        "shutil.SameFileError",
        "shutil.Error",
        "shutil.RegistryError",
        "shutil._GiveupOnFastCopy",
        "collections.namedtuple",
        "grp",
        "<builtin>.hasattr",
        "shutil.ReadError",
        "shutil.SpecialFileError",
        "stat"
    ],
    "fnmatch": [
        "os",
        "functools.lru_cache",
        "functools._lru_cache_wrapper.wrapper",
        "posixpath",
        "functools",
        "functools.lru_cache.decorating_function",
        "functools.singledispatchmethod.__get__._method",
        "re",
        "functools.singledispatch.wrapper"
    ],
    "zlib": [],
    "bz2": [
        "_bz2",
        "os",
        "_compression",
        "threading",
        "bz2.BZ2File",
        "io",
        "warnings",
        "<builtin>.object"
    ],
    "linecache": [
        "functools",
        "os",
        "tokenize"
    ],
    "encodings": [
        "encodings.CodecRegistryError",
        "codecs"
    ],
    "codecs": [
        "codecs.BufferedIncrementalDecoder",
        "codecs.StreamRecoder",
        "codecs.StreamWriter",
        "codecs.EncodedFile",
        "codecs.BufferedIncrementalEncoder",
        "codecs.StreamReader",
        "codecs.StreamReaderWriter",
        "<builtin>.SystemError",
        "codecs.IncrementalEncoder",
        "encodings",
        "codecs.IncrementalDecoder",
        "codecs.CodecInfo",
        "codecs.Codec"
    ],
    "encodings.mbcs": [
        "encodings.mbcs.StreamWriter",
        "encodings.mbcs.IncrementalEncoder",
        "codecs",
        "encodings.mbcs.IncrementalDecoder",
        "encodings.mbcs.StreamReader"
    ],
    "encodings._alias_mbcs": [
        "_winapi.GetACP",
        "encodings.mbcs.getregentry",
        "encodings.mbcs"
    ],
    "tokenize": [
        "tokenize.any",
        "tokenize.Untokenizer",
        "tokenize.main",
        "codecs",
        "<builtin>.sorted",
        "collections",
        "tokenize._all_string_prefixes",
        "io",
        "tokenize.maybe",
        "tokenize.group",
        "<builtin>.map",
        "<builtin>.set",
        "token",
        "re.compile",
        "tokenize.TokenError",
        "tokenize.StopTokenizing",
        "re",
        "tokenize.TokenInfo"
    ],
    "token": [
        "<builtin>.isinstance",
        "<builtin>.globals"
    ],
    "tokenize.main": [
        "tokenize.tokenize",
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "tokenize.main.error",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.print",
        "<builtin>.list",
        "builtins.open",
        "argparse",
        "tokenize.main.perror",
        "tokenize._tokenize"
    ],
    "warnings._formatwarnmsg_impl": [
        "tracemalloc.get_object_traceback",
        "tracemalloc",
        "linecache",
        "linecache.getline"
    ],
    "collections.abc": [
        "collections.abc"
    ],
    "tracemalloc": [
        "collections.abc",
        "tracemalloc.Traceback",
        "tracemalloc.StatisticDiff",
        "tracemalloc.Frame",
        "tracemalloc.DomainFilter",
        "posixpath",
        "functools",
        "fnmatch",
        "tracemalloc.Filter",
        "tracemalloc.Snapshot",
        "pickle",
        "tracemalloc.Statistic",
        "linecache",
        "tracemalloc._Traces",
        "tracemalloc.BaseFilter",
        "tracemalloc.Trace"
    ],
    "os.path": [
        "stat",
        "os",
        "genericpath"
    ],
    "os.path.expandvars": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "re.compile",
        "<builtin>.getattr",
        "re"
    ],
    "pickle": [
        "argparse.ArgumentParser.__init__",
        "functools",
        "argparse._ActionsContainer.add_argument",
        "pickle._Unframer",
        "io",
        "argparse",
        "pickle._load",
        "argparse.ArgumentParser.print_help",
        "pickle._Framer",
        "re.match",
        "argparse.ArgumentParser.parse_args",
        "types",
        "_pickle",
        "re",
        "struct",
        "codecs",
        "<builtin>.dir",
        "pickle.UnpicklingError",
        "pickle.PickleError",
        "pickle._test",
        "pprint",
        "pickle.PicklingError",
        "pickle._Stop",
        "argparse.FileType.__init__",
        "pickle._Pickler",
        "_compat_pickle",
        "copyreg",
        "pickle._Unpickler"
    ],
    "copyreg": [
        "copyreg.pickle"
    ],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "_compat_pickle": [
        "<builtin>.dict",
        "<builtin>.len"
    ],
    "_pickle": [],
    "pickle._test": [
        "doctest.testmod",
        "doctest"
    ],
    "pprint": [
        "types",
        "collections",
        "pprint._safe_key",
        "pprint.PrettyPrinter",
        "io",
        "pprint._perfcheck",
        "<builtin>.frozenset",
        "<builtin>.type",
        "re"
    ],
    "warnings.filterwarnings": [
        "<builtin>.issubclass",
        "re.compile",
        "<builtin>.isinstance",
        "re",
        "warnings._add_filter"
    ],
    "warnings._setoption": [
        "warnings._getcategory",
        "warnings._getaction",
        "<builtin>.len",
        "warnings.filterwarnings",
        "re.escape",
        "<builtin>.int",
        "re",
        "sys.warnoptions.split"
    ],
    "warnings.warn_explicit": [
        "linecache.getlines",
        "<builtin>.RuntimeError",
        "warnings._showwarnmsg",
        "linecache",
        "<builtin>.str",
        "_warnings._onceregistry.get",
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.issubclass",
        "warnings.WarningMessage.__init__"
    ],
    "warnings._warn_unawaited_coroutine": [
        "<builtin>.list",
        "traceback",
        "linecache",
        "warnings._warn_unawaited_coroutine.extract",
        "_warnings.warn",
        "traceback.format_list"
    ],
    "traceback": [
        "collections",
        "traceback.FrameSummary",
        "linecache",
        "traceback.StackSummary",
        "traceback.TracebackException"
    ],
    "warnings": [
        "warnings.simplefilter",
        "warnings._OptionError",
        "warnings.WarningMessage",
        "warnings._processoptions",
        "<builtin>.hasattr",
        "warnings.filterwarnings",
        "warnings.catch_warnings"
    ],
    "_compression": [
        "io",
        "_compression.DecompressReader",
        "_compression.BaseStream"
    ],
    "threading": [
        "threading.Barrier",
        "_thread.allocate_lock",
        "threading.BrokenBarrierError",
        "<builtin>.hasattr",
        "threading._DummyThread",
        "threading.Condition",
        "threading.Timer",
        "os",
        "threading.Thread",
        "_weakrefset.WeakSet.__init__",
        "collections.namedtuple",
        "_weakrefset",
        "threading.Event",
        "itertools.count",
        "threading._RLock",
        "threading._MainThread",
        "<builtin>.set",
        "threading.BoundedSemaphore",
        "threading._MainThread.__init__",
        "_threading_local",
        "collections",
        "traceback",
        "threading.Semaphore"
    ],
    "_bz2": [],
    "lzma": [
        "os",
        "_compression",
        "_lzma",
        "io",
        "lzma.LZMAFile"
    ],
    "_lzma": [],
    "grp": [],
    "tarfile": [
        "tarfile.HeaderError",
        "tarfile.InvalidHeaderError",
        "tarfile.EOFHeaderError",
        "io",
        "tarfile.ReadError",
        "tarfile.TarFile",
        "tarfile.TruncatedHeaderError",
        "sys.getfilesystemencoding",
        "os",
        "tarfile.ExFileObject",
        "tarfile.EmptyHeaderError",
        "stat",
        "re",
        "tarfile.CompressionError",
        "struct",
        "tarfile.TarError",
        "tarfile.SubsequentHeaderError",
        "tarfile.ExtractError",
        "tarfile._LowLevelFile",
        "shutil",
        "grp",
        "tarfile.TarInfo",
        "tarfile._FileInFile",
        "tarfile._Stream",
        "tarfile.main",
        "copy",
        "tarfile._StreamProxy",
        "tarfile.StreamError"
    ],
    "copy": [
        "types",
        "weakref",
        "copy.Error",
        "<builtin>.type",
        "<builtin>.getattr",
        "copyreg"
    ],
    "weakref": [
        "collections.abc",
        "weakref.WeakValueDictionary",
        "weakref.WeakKeyDictionary",
        "weakref.WeakMethod",
        "weakref.KeyedRef",
        "weakref.finalize",
        "_weakrefset"
    ],
    "weakref.WeakValueDictionary.__deepcopy__": [
        "copy",
        "_weakrefset._IterationGuard.__init__",
        "copy.deepcopy",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakKeyDictionary.__deepcopy__": [
        "copy",
        "copy.deepcopy",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.finalize.__init__": [
        "<builtin>.tuple",
        "<builtin>.next",
        "atexit.register",
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "_weakref.ref",
        "<builtin>.len"
    ],
    "tarfile._Stream.__init__": [
        "tarfile._Stream._init_read_gz",
        "tarfile._StreamProxy.close",
        "bz2",
        "tarfile._StreamProxy.getcomptype",
        "zlib",
        "lzma",
        "tarfile._StreamProxy.__init__",
        "tarfile._LowLevelFile.__init__",
        "tarfile._LowLevelFile.close",
        "tarfile._Stream._init_write_gz"
    ],
    "gzip": [
        "gzip.main",
        "struct",
        "os",
        "_compression",
        "gzip._PaddedFile",
        "gzip._GzipReader",
        "zlib",
        "io",
        "gzip.BadGzipFile",
        "gzip.GzipFile"
    ],
    "gzip.GzipFile.filename": [
        "warnings.warn",
        "warnings"
    ],
    "gzip.main": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "argparse.ArgumentParser.__init__",
        "xml.etree.ElementTree._ListDataStream.write",
        "argparse._ActionsContainer.add_argument",
        "sys.stdout.read",
        "lzma.LZMAFile.read",
        "_io._IOBase.write",
        "sys.stdin.buffer.close",
        "http.client.HTTPResponse.close",
        "bz2.BZ2File.close",
        "argparse",
        "bz2.BZ2File.read",
        "gzip.GzipFile.write",
        "http.client.HTTPResponse.read",
        "bz2.BZ2File.write",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.print",
        "_io._BufferedIOBase.write",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "sys.stdout.write",
        "zipfile._ZipWriteFile.write",
        "zipfile.ZipExtFile.read",
        "lzma.LZMAFile.write",
        "asyncio.windows_utils.PipeHandle.close",
        "<builtin>.repr",
        "sys.stdout.buffer.write",
        "gzip.open",
        "gzip.GzipFile.__init__",
        "sys.stdin.buffer.read",
        "gzip.GzipFile.read",
        "gzip.GzipFile.close",
        "builtins.open",
        "sys.stdout.close",
        "sys.stdout.buffer.close",
        "zipfile._ZipWriteFile.close"
    ],
    "tarfile.TarFile.gzopen": [
        "<builtin>.ValueError",
        "gzip.GzipFile.close",
        "tarfile.TarFile.taropen",
        "gzip",
        "gzip.GzipFile.__init__"
    ],
    "tarfile.TarFile.bz2open": [
        "<builtin>.ValueError",
        "bz2.BZ2File.__init__",
        "bz2",
        "bz2.BZ2File.close",
        "tarfile.TarFile.taropen"
    ],
    "tarfile.TarFile.xzopen": [
        "lzma.LZMAFile.close",
        "<builtin>.ValueError",
        "lzma",
        "lzma.LZMAFile.__init__",
        "tarfile.TarFile.taropen"
    ],
    "tarfile.main": [
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "ntpath.splitext",
        "argparse.ArgumentParser.format_help",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.print",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "tarfile.TarFile.open",
        "argparse.ArgumentParser.exit",
        "argparse",
        "<builtin>.len",
        "tarfile.is_tarfile",
        "posixpath.splitext"
    ],
    "shutil._make_tarball": [
        "os.makedirs",
        "shutil._get_uid",
        "<builtin>.ValueError",
        "tarfile",
        "ntpath.exists",
        "posixpath.exists",
        "posixpath.dirname",
        "ntpath.dirname",
        "shutil._get_gid"
    ],
    "zipfile": [
        "zipfile.main",
        "functools",
        "zipfile.LargeZipFile",
        "io",
        "zipfile._ZipWriteFile",
        "importlib.util",
        "zipfile.ZipInfo",
        "os",
        "contextlib",
        "posixpath",
        "zlib",
        "zipfile.FastLookup",
        "zipfile.Path",
        "binascii",
        "stat",
        "zipfile.ZipFile",
        "struct",
        "threading",
        "bz2",
        "zipfile.LZMACompressor",
        "lzma",
        "shutil",
        "zipfile.PyZipFile",
        "zipfile.CompleteDirs",
        "zipfile.ZipExtFile",
        "zipfile.LZMADecompressor",
        "zipfile._SharedFile",
        "zipfile._Tellable",
        "zipfile.BadZipFile"
    ],
    "binascii": [],
    "contextlib": [
        "contextlib.AbstractContextManager",
        "contextlib.AsyncExitStack",
        "functools",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib.suppress",
        "types",
        "contextlib.closing",
        "contextlib.ExitStack",
        "contextlib.redirect_stdout",
        "abc",
        "collections.abc",
        "contextlib.redirect_stderr",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.ContextDecorator",
        "contextlib._RedirectStream",
        "collections",
        "contextlib.nullcontext",
        "contextlib._GeneratorContextManager",
        "contextlib._GeneratorContextManagerBase",
        "contextlib._BaseExitStack"
    ],
    "contextlib._BaseExitStack.callback": [
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "contextlib.AsyncExitStack.push_async_callback": [
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "importlib.util": [
        "contextlib",
        "contextlib.contextmanager",
        "importlib.util._LazyModule",
        "importlib.util.LazyLoader",
        "types",
        "functools",
        "warnings"
    ],
    "zipfile.ZipFile.comment": [
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "zipfile.ZipFile._writecheck": [
        "<builtin>.ValueError",
        "zipfile._check_compression",
        "warnings.warn",
        "warnings",
        "<builtin>.len"
    ],
    "py_compile": [
        "os",
        "py_compile.main",
        "enum",
        "py_compile.PycInvalidationMode",
        "posixpath",
        "importlib._bootstrap_external",
        "traceback",
        "py_compile.PyCompileError",
        "sys.exit",
        "importlib.machinery",
        "importlib.util"
    ],
    "enum": [
        "enum.IntFlag",
        "types",
        "enum.EnumMeta",
        "enum.auto",
        "enum.Enum",
        "enum.Flag",
        "enum.IntEnum",
        "<builtin>.object",
        "enum._EnumDict"
    ],
    "importlib._bootstrap_external.decode_source": [
        "tokenize"
    ],
    "importlib.metadata": [
        "pathlib",
        "functools",
        "importlib.abc",
        "io",
        "os",
        "contextlib",
        "importlib",
        "zipfile",
        "posixpath",
        "importlib.metadata.Prepared",
        "email",
        "re",
        "abc",
        "importlib.metadata.MetadataPathFinder",
        "operator",
        "importlib.metadata.PackagePath",
        "importlib.metadata.EntryPoint",
        "importlib.metadata.FileHash",
        "importlib.metadata.FastPath",
        "importlib.metadata.PackageNotFoundError",
        "importlib.metadata.Distribution",
        "importlib.metadata.DistributionFinder",
        "importlib.metadata.PathDistribution",
        "configparser",
        "collections",
        "csv"
    ],
    "csv": [
        "_csv",
        "csv.excel",
        "csv.unix_dialect",
        "csv.DictWriter",
        "csv.Dialect",
        "io",
        "csv.excel_tab",
        "csv.DictReader",
        "csv.Sniffer",
        "re"
    ],
    "_csv": [],
    "email.parser": [
        "email.parser.HeaderParser",
        "email.parser.Parser",
        "email.feedparser",
        "email.parser.BytesParser",
        "io",
        "email.parser.BytesHeaderParser",
        "email._policybase"
    ],
    "email.feedparser": [
        "email.errors",
        "email.feedparser.BytesFeedParser",
        "<builtin>.object",
        "collections",
        "email.feedparser.FeedParser",
        "email.feedparser.BufferedSubFile",
        "io",
        "re.compile",
        "re",
        "email._policybase"
    ],
    "email.errors": [
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.HeaderDefect",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.MultipartConversionError",
        "email.errors.InvalidHeaderDefect",
        "email.errors.BoundaryError",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.HeaderParseError",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.MessageError",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.UndecodableBytesDefect",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.MessageDefect",
        "email.errors.CharsetError",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.MessageParseError"
    ],
    "email._policybase": [
        "email.charset",
        "email.header",
        "email._policybase._PolicyBase.__init__",
        "email.utils",
        "email._policybase._PolicyBase",
        "email._policybase.Compat32",
        "email._policybase.Policy",
        "abc"
    ],
    "email.header": [
        "email.charset",
        "email.errors",
        "email.header._Accumulator",
        "email.quoprimime",
        "email.header.Header",
        "email.header._ValueFormatter",
        "email.base64mime",
        "email.charset.Charset.__init__",
        "re.compile",
        "binascii",
        "re"
    ],
    "email.quoprimime": [
        "<builtin>.chr",
        "string",
        "<builtin>.ord",
        "<builtin>.range",
        "re"
    ],
    "string": [
        "string.Formatter",
        "collections",
        "string.Template",
        "string._TemplateMetaclass",
        "re"
    ],
    "base64": [
        "binascii",
        "struct",
        "re",
        "base64.main"
    ],
    "base64.encodestring": [
        "warnings.warn",
        "warnings",
        "base64.encodebytes"
    ],
    "base64.decodestring": [
        "warnings.warn",
        "warnings",
        "base64.decodebytes"
    ],
    "getopt": [
        "getopt.GetoptError",
        "os",
        "<builtin>.print",
        "gettext",
        "getopt.getopt"
    ],
    "locale": [
        "collections.abc",
        "locale._test",
        "sys.platform.startswith",
        "functools",
        "functools.wraps",
        "<builtin>.sorted",
        "<builtin>.print",
        "<builtin>.globals",
        "locale._print_locale",
        "encodings",
        "re.compile",
        "<builtin>.hasattr",
        "_functools.partial",
        "re",
        "encodings.aliases"
    ],
    "encodings.aliases": [],
    "locale.format": [
        "<builtin>.ValueError",
        "<builtin>.repr",
        "warnings.warn",
        "warnings",
        "locale._format",
        "<builtin>.len"
    ],
    "locale.getdefaultlocale": [
        "locale._parse_localename",
        "_locale._getdefaultlocale",
        "os",
        "<builtin>.int"
    ],
    "_bootlocale.getpreferredencoding": [
        "_locale._getdefaultlocale",
        "locale",
        "locale.getpreferredencoding",
        "_locale.nl_langinfo"
    ],
    "locale.getpreferredencoding": [
        "locale.setlocale",
        "locale.getdefaultlocale",
        "_bootlocale",
        "_bootlocale.getpreferredencoding"
    ],
    "_bootlocale": [
        "sys.platform.startswith",
        "<builtin>.hasattr"
    ],
    "gettext": [
        "os",
        "locale",
        "gettext.NullTranslations",
        "posixpath.join",
        "gettext.GNUTranslations",
        "<builtin>.enumerate",
        "re.compile",
        "ntpath.join",
        "re"
    ],
    "gettext._as_int": [
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.round"
    ],
    "gettext.NullTranslations.lgettext": [
        "warnings.warn",
        "warnings",
        "warnings.filterwarnings",
        "warnings.catch_warnings.__init__",
        "locale.getpreferredencoding"
    ],
    "gettext.NullTranslations.lngettext": [
        "warnings.warn",
        "warnings",
        "warnings.filterwarnings",
        "warnings.catch_warnings.__init__",
        "locale.getpreferredencoding"
    ],
    "gettext.NullTranslations.output_charset": [
        "warnings.warn",
        "warnings"
    ],
    "gettext.NullTranslations.set_output_charset": [
        "warnings.warn",
        "warnings"
    ],
    "gettext.GNUTranslations._parse": [
        "gettext.c2py",
        "struct",
        "gettext.GNUTranslations._get_versions",
        "<builtin>.OSError",
        "<builtin>.str",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.getattr"
    ],
    "gettext.GNUTranslations.lgettext": [
        "warnings.warn",
        "warnings",
        "locale.getpreferredencoding",
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.lngettext": [
        "gettext.GNUTranslations._parse.<lambda1>",
        "warnings.warn",
        "warnings",
        "locale.getpreferredencoding"
    ],
    "gettext.translation": [
        "posixpath.abspath",
        "warnings.catch_warnings.__init__",
        "copy",
        "warnings",
        "<builtin>.FileNotFoundError",
        "gettext.NullTranslations.__init__",
        "warnings.warn",
        "warnings.filterwarnings",
        "tarfile.TarFile.__iter__",
        "gettext.find",
        "<builtin>.open",
        "ntpath.abspath"
    ],
    "gettext.bind_textdomain_codeset": [
        "warnings.warn",
        "warnings"
    ],
    "gettext.ldgettext": [
        "gettext.translation",
        "gettext.NullTranslations.lgettext",
        "warnings.warn",
        "warnings",
        "warnings.filterwarnings",
        "warnings.catch_warnings.__init__",
        "locale.getpreferredencoding"
    ],
    "gettext.ldngettext": [
        "gettext.translation",
        "gettext.NullTranslations.lngettext",
        "warnings.warn",
        "warnings",
        "warnings.filterwarnings",
        "warnings.catch_warnings.__init__",
        "locale.getpreferredencoding"
    ],
    "gettext.lgettext": [
        "gettext.ldgettext",
        "warnings.warn",
        "warnings",
        "warnings.filterwarnings",
        "warnings.catch_warnings.__init__"
    ],
    "gettext.lngettext": [
        "warnings.warn",
        "warnings",
        "warnings.filterwarnings",
        "warnings.catch_warnings.__init__",
        "gettext.ldngettext"
    ],
    "base64.main": [
        "base64.encode",
        "base64.test",
        "<builtin>.print",
        "getopt",
        "base64.decode",
        "sys.exit",
        "<builtin>.open"
    ],
    "email.base64mime": [
        "binascii",
        "base64"
    ],
    "email.charset": [
        "email.encoders",
        "email.errors",
        "email.charset.Charset",
        "functools",
        "email.quoprimime",
        "email.base64mime"
    ],
    "email.encoders": [
        "base64",
        "quopri"
    ],
    "quopri": [
        "binascii",
        "quopri.main"
    ],
    "quopri.encodestring": [
        "io",
        "_io.BytesIO",
        "quopri.encode"
    ],
    "quopri.decodestring": [
        "io",
        "_io.BytesIO",
        "quopri.decode"
    ],
    "quopri.main": [
        "quopri.decode",
        "<builtin>.print",
        "getopt",
        "quopri.encode",
        "sys.stdin.buffer.close",
        "sys.exit",
        "<builtin>.open",
        "sys.stderr.write"
    ],
    "email.utils": [
        "email.charset",
        "os",
        "re.compile",
        "random",
        "email._parseaddr",
        "socket",
        "urllib.parse",
        "datetime",
        "re"
    ],
    "random": [
        "bisect",
        "collections.abc",
        "os",
        "random._test",
        "random.SystemRandom",
        "hashlib",
        "_random",
        "random.Random.__init__",
        "math",
        "_sha512",
        "warnings",
        "<builtin>.hasattr",
        "random.Random"
    ],
    "math": [],
    "bisect": [
        "_bisect"
    ],
    "_bisect": [],
    "_sha512": [],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "_blake2",
        "_sha3",
        "_sha1",
        "_sha512",
        "_md5",
        "_sha256"
    ],
    "_sha1": [],
    "_md5": [],
    "_sha256": [],
    "_blake2": [],
    "_sha3": [],
    "hashlib": [
        "logging.exception",
        "logging",
        "<builtin>.bytes",
        "<builtin>.globals",
        "<builtin>.set",
        "hashlib.__get_builtin_constructor",
        "<builtin>.range",
        "_hashlib",
        "hashlib.__get_openssl_constructor"
    ],
    "_hashlib": [],
    "logging": [
        "threading.RLock",
        "logging.FileHandler",
        "logging.PercentStyle",
        "logging.Formatter.__init__",
        "time.time",
        "logging.RootLogger",
        "io",
        "warnings",
        "logging.Formatter",
        "weakref.WeakValueDictionary.__init__",
        "logging.NullHandler",
        "<builtin>.hasattr",
        "logging.BufferingFormatter",
        "os",
        "logging.Manager.__init__",
        "atexit.register",
        "logging.Filterer",
        "logging.Manager",
        "logging.RootLogger.__init__",
        "logging._StderrHandler.__init__",
        "re",
        "logging.Logger",
        "collections.abc",
        "string",
        "logging.Filter",
        "threading",
        "ntpath.normcase",
        "logging.Handler",
        "logging.StreamHandler",
        "logging.StrFormatStyle",
        "weakref",
        "logging.StringTemplateStyle",
        "logging.PlaceHolder",
        "traceback",
        "logging.LogRecord",
        "logging._StderrHandler",
        "logging.LoggerAdapter",
        "posixpath.normcase"
    ],
    "logging.Logger.__reduce__": [
        "logging.getLogger",
        "pickle"
    ],
    "_random": [],
    "socket": [
        "os._get_exports_list",
        "os",
        "enum",
        "selectors",
        "socket.socket",
        "_socket",
        "socket.SocketIO",
        "io",
        "<builtin>.hasattr",
        "<builtin>.object",
        "<builtin>.getattr",
        "sys.platform.lower",
        "socket._GiveupOnSendfile"
    ],
    "_socket": [],
    "selectors": [
        "collections.abc",
        "selectors._SelectorMapping",
        "selectors.BaseSelector",
        "selectors._BaseSelectorImpl",
        "selectors.PollSelector",
        "selectors.SelectSelector",
        "collections",
        "selectors._PollLikeSelector",
        "math",
        "collections.namedtuple",
        "<builtin>.globals",
        "selectors.EpollSelector",
        "selectors.KqueueSelector",
        "<builtin>.hasattr",
        "abc",
        "selectors.DevpollSelector",
        "select"
    ],
    "select": [],
    "datetime": [
        "datetime.datetime",
        "datetime._days_before_year",
        "_datetime",
        "datetime.time",
        "datetime.timedelta",
        "datetime.timezone._create",
        "math",
        "datetime.timezone",
        "datetime.tzinfo",
        "datetime.date"
    ],
    "datetime._check_int_field": [
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "_strptime": [
        "locale",
        "_thread.allocate_lock",
        "calendar",
        "_strptime.TimeRE.__init__",
        "_strptime.LocaleTime",
        "datetime",
        "_strptime.TimeRE",
        "re"
    ],
    "calendar": [
        "calendar._localized_month",
        "locale",
        "calendar.Calendar",
        "calendar.Calendar.__init__",
        "calendar.LocaleTextCalendar",
        "calendar.LocaleHTMLCalendar",
        "calendar._localized_day.__init__",
        "<builtin>.range",
        "calendar.TextCalendar",
        "calendar.HTMLCalendar",
        "calendar.different_locale",
        "datetime.datetime.date",
        "datetime",
        "calendar.main",
        "calendar._localized_day",
        "calendar.IllegalWeekdayError",
        "calendar.IllegalMonthError",
        "calendar._localized_month.__init__"
    ],
    "calendar.main": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument",
        "calendar.HTMLCalendar.formatyearpage",
        "sys.getdefaultencoding",
        "argparse",
        "calendar.Calendar.__init__",
        "calendar.TextCalendar.formatmonth",
        "argparse.ArgumentParser.parse_args",
        "sys.stdout.write",
        "sys.exit",
        "calendar.TextCalendar.formatyear",
        "calendar.HTMLCalendar.formatyear",
        "sys.stdout.buffer.write",
        "argparse.ArgumentParser.error",
        "argparse._ActionsContainer.add_argument_group",
        "calendar.LocaleTextCalendar.__init__",
        "<builtin>.dict",
        "calendar.HTMLCalendar.formatmonth",
        "calendar.LocaleHTMLCalendar.__init__"
    ],
    "datetime.datetime.strptime": [
        "_strptime"
    ],
    "_datetime": [],
    "urllib.parse": [
        "warnings",
        "urllib.parse._NetlocResultMixinBytes",
        "urllib.parse._ResultMixinStr",
        "urllib.parse.ParseResultBytes",
        "<builtin>.bytes",
        "urllib.parse.DefragResult",
        "collections.namedtuple",
        "re.compile",
        "urllib.parse.Quoter",
        "re",
        "urllib.parse._NetlocResultMixinStr",
        "<builtin>.frozenset",
        "urllib.parse.SplitResult",
        "urllib.parse.SplitResultBytes",
        "urllib.parse._NetlocResultMixinBase",
        "urllib.parse.DefragResultBytes",
        "collections",
        "urllib.parse.ParseResult",
        "urllib.parse._ResultMixinBytes",
        "urllib.parse._fix_result_transcoding"
    ],
    "urllib.parse._checknetloc": [
        "<builtin>.ValueError",
        "unicodedata"
    ],
    "unicodedata": [],
    "email._parseaddr": [
        "email._parseaddr.AddrlistClass",
        "calendar",
        "email._parseaddr.AddressList"
    ],
    "email.message": [
        "email.charset",
        "email.message.MIMEPart",
        "email.errors",
        "email.message.EmailMessage",
        "email.utils",
        "io",
        "email.message.Message",
        "email._encoded_words",
        "re.compile",
        "uu",
        "re",
        "quopri",
        "email._policybase"
    ],
    "uu": [
        "binascii",
        "os",
        "uu.test",
        "uu.Error"
    ],
    "optparse": [
        "os",
        "gettext.gettext",
        "optparse.OptionGroup",
        "optparse.OptionError",
        "optparse.HelpFormatter",
        "optparse.TitledHelpFormatter",
        "optparse.Values",
        "optparse.AmbiguousOptionError",
        "optparse.OptionContainer",
        "gettext",
        "optparse.IndentedHelpFormatter",
        "optparse.OptionValueError",
        "optparse.OptParseError",
        "optparse.BadOptionError",
        "textwrap",
        "optparse.Option",
        "optparse.OptionParser",
        "optparse.OptionConflictError"
    ],
    "textwrap": [
        "textwrap.TextWrapper",
        "<builtin>.print",
        "re.compile",
        "re",
        "textwrap.dedent"
    ],
    "uu.test": [
        "uu.encode",
        "optparse.OptionParser.parse_args",
        "<builtin>.print",
        "optparse.OptionContainer.add_option",
        "optparse",
        "optparse.OptionParser.__init__",
        "optparse.OptionParser.error",
        "<builtin>.len",
        "sys.exit",
        "uu.decode",
        "<builtin>.isinstance",
        "<builtin>.open"
    ],
    "email._encoded_words": [
        "string",
        "base64",
        "email.errors",
        "functools",
        "email._encoded_words._QByteMap",
        "<builtin>.ord",
        "re.compile",
        "binascii",
        "re"
    ],
    "email.generator": [
        "random",
        "email.generator.DecodedGenerator",
        "<builtin>.repr",
        "email.utils",
        "copy",
        "io",
        "<builtin>.len",
        "re.compile",
        "re",
        "email.generator.Generator",
        "email.generator.BytesGenerator"
    ],
    "email.message.Message.as_string": [
        "email.generator.Generator.flatten",
        "_io.StringIO",
        "email.generator",
        "email.generator.Generator.__init__"
    ],
    "email.message.Message.as_bytes": [
        "_io.BytesIO",
        "email.generator.Generator.flatten",
        "email.generator",
        "email.generator.Generator.__init__"
    ],
    "email.iterators": [
        "io"
    ],
    "email.message.Message": [
        "email.iterators"
    ],
    "email.policy": [
        "email._policybase._PolicyBase.clone",
        "email.policy.EmailPolicy",
        "re.compile",
        "email.contentmanager",
        "email.utils",
        "email.policy.EmailPolicy.__init__",
        "email.headerregistry",
        "email.message",
        "re",
        "email._policybase"
    ],
    "email.headerregistry": [
        "email.headerregistry.MessageIDHeader",
        "email.headerregistry.ParameterizedMIMEHeader",
        "email.headerregistry.Address",
        "email.headerregistry.ContentTypeHeader",
        "email.headerregistry.ContentTransferEncodingHeader",
        "types",
        "email.headerregistry.Group",
        "email.headerregistry.MIMEVersionHeader",
        "email.headerregistry.SingleAddressHeader",
        "email.headerregistry.UniqueDateHeader",
        "email.headerregistry.UniqueUnstructuredHeader",
        "email.errors",
        "email.headerregistry.UniqueAddressHeader",
        "email.headerregistry.HeaderRegistry",
        "email.headerregistry.AddressHeader",
        "email.utils",
        "email.headerregistry.BaseHeader",
        "email._header_value_parser",
        "email.headerregistry.UniqueSingleAddressHeader",
        "email.headerregistry.UnstructuredHeader",
        "email.headerregistry.DateHeader",
        "email.headerregistry.ContentDispositionHeader"
    ],
    "email._header_value_parser": [
        "email._header_value_parser.Token",
        "email._header_value_parser.NameAddr",
        "email._header_value_parser.AngleAddr",
        "email._header_value_parser.MsgID",
        "email._header_value_parser.Domain",
        "urllib",
        "email._header_value_parser.QuotedString",
        "email._header_value_parser.InvalidMailbox",
        "email._header_value_parser.Attribute",
        "email._header_value_parser.Value",
        "email._header_value_parser.Word",
        "email._header_value_parser.TokenList",
        "email._header_value_parser.WhiteSpaceTokenList",
        "email._header_value_parser._InvalidEwError",
        "email._header_value_parser.Group",
        "email._header_value_parser.LocalPart",
        "email._header_value_parser.MailboxList",
        "email._header_value_parser.ObsRoute",
        "email._header_value_parser.DotAtomText",
        "email._header_value_parser.Mailbox",
        "email._header_value_parser.HeaderLabel",
        "email._header_value_parser.CFWSList",
        "email._header_value_parser.AddressList",
        "email._header_value_parser.EncodedWord",
        "email._header_value_parser.ParameterizedHeaderValue",
        "re.compile",
        "email._header_value_parser.Terminal",
        "re.escape",
        "re",
        "email._header_value_parser.ValueTerminal",
        "email._header_value_parser.ContentType",
        "email._header_value_parser.Section",
        "operator",
        "string",
        "email._header_value_parser.NoFoldLiteral",
        "email.errors",
        "email._header_value_parser.BareQuotedString",
        "email._header_value_parser.MIMEVersion",
        "email._header_value_parser.Comment",
        "email._header_value_parser.ObsLocalPart",
        "email._header_value_parser.DomainLiteral",
        "email._header_value_parser.InvalidMessageID",
        "email.utils",
        "email._header_value_parser.AddrSpec",
        "email._header_value_parser.WhiteSpaceTerminal",
        "<builtin>.set",
        "email._header_value_parser.Atom",
        "email._header_value_parser.DotAtom",
        "email._header_value_parser.ContentTransferEncoding",
        "email._header_value_parser.Phrase",
        "email._header_value_parser.InvalidParameter",
        "email._header_value_parser.Parameter",
        "email._header_value_parser.MessageID",
        "email._header_value_parser.EWWhiteSpaceTerminal",
        "email._header_value_parser.UnstructuredTokenList",
        "email._header_value_parser.MimeParameters",
        "email._header_value_parser.GroupList",
        "email._header_value_parser.Address",
        "email._encoded_words",
        "email._header_value_parser.ContentDisposition",
        "email._header_value_parser.DisplayName",
        "email._header_value_parser.Header"
    ],
    "urllib": [],
    "email.contentmanager": [
        "email.charset",
        "email.errors",
        "email.quoprimime",
        "email.contentmanager.ContentManager.add_get_handler",
        "email.contentmanager.ContentManager.__init__",
        "email.message",
        "binascii",
        "email.contentmanager.ContentManager.add_set_handler",
        "email.contentmanager.ContentManager"
    ],
    "email.message.MIMEPart.__init__": [
        "email.policy",
        "email.message.Message.__init__"
    ],
    "email.feedparser.FeedParser.__init__": [
        "email.feedparser.FeedParser._parsegen",
        "email.feedparser.BufferedSubFile.__init__",
        "email.message"
    ],
    "email.message_from_string": [
        "email.parser.Parser.__init__",
        "email.parser.Parser.parsestr",
        "email.parser"
    ],
    "email.message_from_bytes": [
        "email.parser.BytesParser.__init__",
        "email.parser.BytesParser.parsebytes",
        "email.parser"
    ],
    "email.message_from_file": [
        "email.parser.Parser.__init__",
        "email.parser.Parser.parse",
        "email.parser"
    ],
    "email.message_from_binary_file": [
        "email.parser.BytesParser.__init__",
        "email.parser.BytesParser.parse",
        "email.parser"
    ],
    "email": [],
    "pathlib": [
        "functools",
        "pathlib._Selector",
        "pathlib._RecursiveWildcardSelector",
        "io",
        "functools.singledispatchmethod.__get__._method",
        "pathlib.PurePath",
        "urllib.parse",
        "pathlib._NormalAccessor",
        "<builtin>.hasattr",
        "pathlib._PreciseSelector",
        "pathlib.PureWindowsPath",
        "pathlib.Path",
        "os",
        "functools.lru_cache",
        "pathlib._PathParents",
        "posixpath",
        "pathlib._Accessor",
        "pathlib._Flavour.__init__",
        "pathlib._PosixFlavour",
        "stat",
        "re",
        "pathlib.PurePosixPath",
        "collections.abc",
        "operator",
        "functools.lru_cache.decorating_function",
        "pathlib._TerminatingSelector",
        "functools._lru_cache_wrapper.wrapper",
        "functools.singledispatch.wrapper",
        "pathlib._WildcardSelector",
        "sys.getwindowsversion",
        "pathlib._WindowsFlavour",
        "pathlib._Flavour",
        "fnmatch",
        "ntpath",
        "pathlib.WindowsPath",
        "pathlib.PosixPath"
    ],
    "ntpath": [
        "sys.getwindowsversion",
        "os",
        "genericpath",
        "<builtin>.hasattr",
        "stat"
    ],
    "ntpath.expandvars": [
        "string",
        "<builtin>.getattr",
        "<builtin>.bytes",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "pathlib.Path.group": [
        "grp",
        "pathlib.Path.stat"
    ],
    "configparser": [
        "configparser.InterpolationError",
        "configparser.InterpolationSyntaxError",
        "functools",
        "io",
        "warnings",
        "configparser.SafeConfigParser",
        "<builtin>.object",
        "os",
        "configparser.NoSectionError",
        "configparser.Error",
        "configparser.ExtendedInterpolation",
        "re",
        "collections.abc",
        "configparser.NoOptionError",
        "configparser.ConfigParser",
        "configparser.SectionProxy",
        "configparser.RawConfigParser",
        "configparser.Interpolation",
        "configparser.ParsingError",
        "configparser.ConverterMapping",
        "configparser.InterpolationMissingOptionError",
        "configparser.MissingSectionHeaderError",
        "configparser.LegacyInterpolation",
        "collections",
        "configparser.DuplicateOptionError",
        "configparser.DuplicateSectionError",
        "configparser.BasicInterpolation",
        "configparser.InterpolationDepthError"
    ],
    "_frozen_importlib._install_external_importers": [
        "importlib._bootstrap_external"
    ],
    "importlib._bootstrap_external": [
        "importlib._bootstrap_external._NamespacePath",
        "importlib._bootstrap_external._LoaderBasics",
        "importlib._bootstrap_external.SourcelessFileLoader",
        "importlib._bootstrap_external.PathFinder",
        "importlib._bootstrap_external.SourceLoader",
        "importlib._bootstrap_external.FileFinder",
        "importlib._bootstrap_external.SourceFileLoader",
        "<builtin>.type",
        "importlib._bootstrap_external.FileLoader",
        "<builtin>.object",
        "importlib._bootstrap_external.ExtensionFileLoader",
        "importlib._bootstrap_external._NamespaceLoader",
        "importlib._bootstrap_external.WindowsRegistryFinder"
    ],
    "_frozen_importlib_external.decode_source": [
        "tokenize"
    ],
    "_frozen_importlib_external.PathFinder.find_distributions": [
        "importlib.metadata",
        "importlib.metadata.MetadataPathFinder.find_distributions"
    ],
    "importlib": [
        "types",
        "importlib._bootstrap_external",
        "_frozen_importlib._setup",
        "_bootstrap_external._setup",
        "_frozen_importlib_external._setup",
        "warnings",
        "_bootstrap._setup"
    ],
    "importlib.abc": [
        "importlib.abc._register",
        "importlib.abc.FileLoader",
        "importlib.abc.MetaPathFinder",
        "importlib.abc.InspectLoader",
        "importlib._bootstrap_external",
        "importlib.abc.Finder",
        "importlib.abc.Loader",
        "importlib.abc.ExecutionLoader",
        "importlib.abc.ResourceReader",
        "warnings",
        "importlib.abc.SourceLoader",
        "importlib.abc.ResourceLoader",
        "importlib.abc.PathEntryFinder",
        "abc"
    ],
    "importlib._bootstrap_external.PathFinder.find_distributions": [
        "importlib.metadata",
        "importlib.metadata.MetadataPathFinder.find_distributions"
    ],
    "importlib.machinery": [],
    "zipfile.PyZipFile._get_codename._compile": [
        "<builtin>.print",
        "py_compile.compile",
        "py_compile"
    ],
    "zipfile.main": [
        "zipfile.ZipFile.__init__",
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "zipfile.main.addToZip",
        "<builtin>.print",
        "ntpath.basename",
        "posixpath.basename",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "posixpath.dirname",
        "ntpath.dirname",
        "argparse"
    ],
    "shutil._make_zipfile": [
        "os.makedirs",
        "zipfile.ZipFile.__init__",
        "zipfile",
        "posixpath.join",
        "ntpath.exists",
        "<builtin>.sorted",
        "posixpath.isfile",
        "posixpath.exists",
        "posixpath.dirname",
        "ntpath.dirname",
        "os.walk",
        "posixpath.normpath",
        "ntpath.isfile",
        "ntpath.join",
        "ntpath.normpath"
    ],
    "shutil._unpack_zipfile": [
        "zipfile.ZipFile.__init__",
        "zipfile",
        "posixpath.join",
        "zipfile.ZipFile.close",
        "zipfile.is_zipfile",
        "<builtin>.open",
        "shutil._ensure_directory",
        "zipfile.ZipFile.infolist",
        "ntpath.join",
        "zipfile.ZipFile.read"
    ],
    "shutil._unpack_tarfile": [
        "tarfile"
    ],
    "argparse._copy_items": [
        "copy",
        "<builtin>.type"
    ],
    "argparse.HelpFormatter._split_lines": [
        "textwrap",
        "textwrap.wrap"
    ],
    "argparse.HelpFormatter._fill_text": [
        "textwrap",
        "textwrap.fill"
    ],
    "argparse.ArgumentParser.parse_known_intermixed_args": [
        "argparse.ArgumentParser.parse_known_args",
        "argparse.ArgumentParser._get_positional_actions",
        "argparse.ArgumentParser.format_usage",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.delattr",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "_warnings.warn",
        "argparse.ArgumentParser._get_optional_actions"
    ],
    "dis._test": [
        "argparse.FileType.__init__",
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_argument",
        "dis.dis",
        "<builtin>.compile",
        "argparse"
    ],
    "inspect.formatargspec": [
        "inspect.formatannotation",
        "warnings",
        "<builtin>.enumerate",
        "<builtin>.len",
        "inspect.formatargspec.formatargandannotation",
        "inspect.<lambda1>",
        "_warnings.warn",
        "inspect.<lambda4>",
        "inspect.<lambda3>",
        "inspect.<lambda2>"
    ],
    "ast.get_docstring": [
        "inspect.cleandoc",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "inspect"
    ],
    "ast.walk": [
        "collections",
        "ast.iter_child_nodes"
    ],
    "ast.NodeVisitor.visit_Constant": [
        "ast.NodeVisitor.generic_visit",
        "<builtin>.getattr",
        "warnings.warn",
        "warnings",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "inspect._signature_fromstr": [
        "<builtin>.ValueError",
        "inspect._signature_fromstr.p",
        "<builtin>.zip",
        "<builtin>.getattr",
        "inspect.ismodule",
        "itertools.zip_longest",
        "inspect.Signature.__init__",
        "sys.modules.copy",
        "inspect._signature_fromstr.RewriteSymbolics",
        "inspect._signature_strip_non_python_syntax",
        "sys.modules.get",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.enumerate",
        "<builtin>.object",
        "ast.parse",
        "<builtin>.isinstance",
        "ast"
    ],
    "ast": [
        "ast.Bytes",
        "ast._ABC",
        "ast.Ellipsis",
        "ast.Num",
        "ast.Str",
        "<builtin>.type",
        "ast.NodeVisitor",
        "ast.NodeTransformer",
        "ast.NameConstant",
        "<builtin>.property"
    ],
    "inspect._main": [
        "argparse.ArgumentParser.__init__",
        "importlib",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.print",
        "<builtin>.repr",
        "inspect.getsource",
        "importlib.import_module",
        "<builtin>.type",
        "inspect.findsource",
        "argparse",
        "sys.exit",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "inspect.getsourcefile"
    ],
    "unittest.result": [
        "functools",
        "traceback",
        "io",
        "unittest.util",
        "unittest.result.TestResult"
    ],
    "unittest.util": [
        "posixpath",
        "collections",
        "collections.namedtuple"
    ],
    "unittest": [
        "unittest.case",
        "unittest.signals",
        "unittest.runner",
        "unittest.suite",
        "unittest.async_case",
        "unittest.main",
        "unittest.result",
        "unittest.loader"
    ],
    "asyncio.windows_events": [
        "struct",
        "asyncio.windows_events._WindowsSelectorEventLoop",
        "socket",
        "weakref",
        "asyncio.windows_events.ProactorEventLoop",
        "asyncio.windows_events.WindowsSelectorEventLoopPolicy",
        "math",
        "asyncio.windows_events._OverlappedFuture",
        "asyncio.proactor_events",
        "asyncio.windows_utils",
        "asyncio.windows_events._WaitHandleFuture",
        "asyncio.windows_events.WindowsProactorEventLoopPolicy",
        "asyncio.windows_events._WindowsSubprocessTransport",
        "asyncio.windows_events._BaseWaitHandleFuture",
        "asyncio.windows_events.PipeServer",
        "asyncio.windows_events.IocpProactor",
        "asyncio.windows_events._WaitCancelFuture"
    ],
    "asyncio.proactor_events": [
        "os",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport",
        "asyncio.proactor_events.BaseProactorEventLoop",
        "threading",
        "socket",
        "asyncio.proactor_events._ProactorWritePipeTransport",
        "collections",
        "asyncio.proactor_events._ProactorReadPipeTransport",
        "asyncio.proactor_events._ProactorDuplexPipeTransport",
        "io",
        "warnings",
        "asyncio.proactor_events._ProactorSocketTransport",
        "asyncio.proactor_events._ProactorDatagramTransport",
        "asyncio.proactor_events._ProactorBasePipeTransport",
        "signal"
    ],
    "signal": [
        "enum",
        "functools",
        "functools.wraps",
        "<builtin>.globals",
        "_functools.partial"
    ],
    "asyncio.windows_utils": [
        "<builtin>.ImportError",
        "asyncio.windows_utils.Popen",
        "os",
        "itertools.count",
        "subprocess",
        "warnings",
        "tempfile",
        "asyncio.windows_utils.PipeHandle"
    ],
    "subprocess": [
        "selectors",
        "io",
        "warnings",
        "<builtin>.hasattr",
        "select",
        "os",
        "contextlib",
        "subprocess.CalledProcessError",
        "subprocess.Popen",
        "<builtin>.getattr",
        "subprocess.STARTUPINFO",
        "signal",
        "subprocess.SubprocessError",
        "threading",
        "_posixsubprocess",
        "subprocess.Handle",
        "subprocess._use_posix_spawn",
        "subprocess.TimeoutExpired",
        "subprocess.CompletedProcess"
    ],
    "_posixsubprocess": [],
    "tempfile": [
        "os",
        "random",
        "tempfile.SpooledTemporaryFile",
        "functools",
        "weakref",
        "_thread.allocate_lock",
        "io",
        "warnings",
        "shutil",
        "tempfile._TemporaryFileWrapper",
        "tempfile._RandomNameSequence",
        "<builtin>.hasattr",
        "tempfile.TemporaryDirectory",
        "tempfile._TemporaryFileCloser"
    ],
    "asyncio": [
        "asyncio.windows_events"
    ],
    "unittest.async_case": [
        "asyncio",
        "unittest.case",
        "unittest.async_case.IsolatedAsyncioTestCase",
        "inspect"
    ],
    "unittest.case": [
        "unittest.case._SubTest",
        "difflib",
        "functools",
        "warnings",
        "unittest.case._ShouldStop",
        "<builtin>.object",
        "unittest.result",
        "contextlib",
        "unittest.case._OrderedChainMap",
        "logging",
        "types",
        "unittest.case._Outcome",
        "unittest.case._BaseTestCaseContext",
        "collections.namedtuple",
        "unittest.case._UnexpectedSuccess",
        "re",
        "pprint",
        "unittest.case.TestCase",
        "unittest.case._AssertRaisesContext",
        "unittest.case._AssertRaisesBaseContext",
        "unittest.case._AssertWarnsContext",
        "unittest.case._CapturingHandler",
        "unittest.case._AssertLogsContext",
        "collections",
        "traceback",
        "unittest.case.FunctionTestCase",
        "unittest.util",
        "unittest.case.SkipTest"
    ],
    "unittest.case.TestCase.addCleanup": [
        "<builtin>.tuple",
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "unittest.suite": [
        "unittest.suite.BaseTestSuite",
        "unittest.suite._DebugResult",
        "unittest.case",
        "unittest.util",
        "unittest.suite._ErrorHolder",
        "unittest.suite.TestSuite"
    ],
    "unittest.loader": [
        "os",
        "unittest.loader.TestLoader",
        "unittest.loader._FailedTest",
        "unittest.loader.TestLoader.__init__",
        "types",
        "unittest.case",
        "functools",
        "fnmatch",
        "traceback",
        "warnings",
        "unittest.util",
        "re.compile",
        "re",
        "unittest.suite"
    ],
    "unittest.main": [
        "os",
        "unittest.main.TestProgram",
        "unittest.signals",
        "unittest.runner",
        "argparse",
        "unittest.loader"
    ],
    "unittest.runner": [
        "unittest.runner._WritelnDecorator",
        "unittest.runner.TextTestRunner",
        "unittest.signals",
        "unittest.runner.TextTestResult",
        "warnings",
        "unittest.result"
    ],
    "unittest.signals": [
        "weakref",
        "functools",
        "unittest.signals._InterruptHandler",
        "weakref.WeakKeyDictionary.__init__",
        "signal"
    ],
    "unittest.load_tests": [
        "posixpath"
    ],
    "doctest._test": [
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "doctest.testmod",
        "sys.path.insert",
        "argparse._ActionsContainer.add_argument",
        "doctest.testfile",
        "ntpath.split",
        "argparse",
        "posixpath.split",
        "<builtin>.__import__"
    ],
    "reprlib": [
        "reprlib.Repr.__init__",
        "reprlib.Repr"
    ],
    "collections.__getattr__": [
        "<builtin>.AttributeError",
        "warnings.warn",
        "warnings",
        "<builtin>.globals",
        "<builtin>.getattr"
    ],
    "collections.UserDict.__init__": [
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "collections.UserDict.copy": [
        "copy",
        "collections.UserDict.__init__"
    ],
    "functools.partialmethod.__init__": [
        "<builtin>.tuple",
        "<builtin>.callable",
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "functools.singledispatch": [
        "<builtin>.getattr",
        "weakref",
        "weakref.WeakKeyDictionary.__init__",
        "types"
    ],
    "typing": [
        "typing.TypedDict",
        "typing._GenericAlias.__init__",
        "functools",
        "typing._SpecialForm",
        "typing.SupportsFloat",
        "typing.SupportsIndex",
        "typing._GenericAlias",
        "typing.SupportsBytes",
        "typing.NamedTupleMeta",
        "contextlib",
        "typing._alias",
        "typing._TypedDictMeta",
        "types",
        "typing._Immutable",
        "typing.Generic",
        "typing.SupportsRound",
        "typing._Final",
        "typing.TextIO",
        "re",
        "typing.ForwardRef",
        "abc",
        "collections.abc",
        "operator",
        "typing.TypeVar",
        "typing.IO",
        "typing._TypingEllipsis",
        "typing.NamedTuple",
        "typing.Protocol",
        "typing._VariadicGenericAlias",
        "typing.SupportsAbs",
        "typing.SupportsComplex",
        "typing.BinaryIO",
        "typing._TypingEmpty",
        "collections",
        "typing.re",
        "typing.io",
        "typing._SpecialForm.__init__",
        "typing.SupportsInt",
        "typing.TypeVar.__init__",
        "typing._ProtocolMeta"
    ],
    "typing.NamedTuple.__new__": [
        "typing._make_nmtuple",
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "functools.singledispatch.register": [
        "<builtin>.next",
        "_abc.get_cache_token",
        "<builtin>.getattr",
        "typing",
        "<builtin>.iter",
        "_py_abc.get_cache_token",
        "collections.ChainMap.clear",
        "<builtin>.TypeError",
        "_collections_abc.MutableMapping.clear",
        "typing.get_type_hints",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "types.coroutine": [
        "collections.abc",
        "<builtin>.callable",
        "functools",
        "functools.wraps",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "_functools.partial"
    ],
    "enum.EnumMeta._convert": [
        "warnings.warn",
        "warnings",
        "enum.EnumMeta._convert_"
    ],
    "sre_parse": [
        "sre_parse.Tokenizer",
        "sre_parse.Verbose",
        "sre_constants",
        "<builtin>.ord",
        "<builtin>.frozenset",
        "sre_parse.State",
        "sre_parse.SubPattern"
    ],
    "sre_constants": [
        "<builtin>.print",
        "sre_constants.dump",
        "sre_constants._NamedIntConstant",
        "<builtin>.open",
        "sre_constants._makecodes",
        "sre_constants.error"
    ],
    "sre_parse._class_escape": [
        "<builtin>.chr",
        "sre_parse.Tokenizer.error",
        "<builtin>.ord",
        "sre_parse.Tokenizer.match",
        "<builtin>.len",
        "sre_parse.Tokenizer.getuntil",
        "<builtin>.int",
        "unicodedata",
        "sre_parse.Tokenizer.getwhile"
    ],
    "sre_parse._escape": [
        "<builtin>.chr",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.get",
        "<builtin>.ord",
        "sre_parse.State.checkgroup",
        "sre_parse.Tokenizer.match",
        "<builtin>.len",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.State.checklookbehindgroup",
        "<builtin>.int",
        "unicodedata",
        "sre_parse.Tokenizer.getwhile"
    ],
    "sre_parse._parse": [
        "sre_parse.Tokenizer.error",
        "sre_parse._class_escape",
        "sre_parse.Tokenizer.seek",
        "sre_parse.Tokenizer.match",
        "warnings",
        "<builtin>.OverflowError",
        "<builtin>.len",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse._parse_sub",
        "sre_parse.SubPattern.__init__",
        "sre_parse._escape",
        "sre_parse.Tokenizer.tell",
        "sre_parse.SubPattern.append",
        "sre_parse._uniq",
        "sre_parse.State.opengroup",
        "<builtin>.AssertionError",
        "sre_parse.State.closegroup",
        "<builtin>.range",
        "<builtin>.int",
        "sre_parse._parse_flags",
        "sre_parse.State.checkgroup",
        "sre_parse._parse",
        "warnings.warn",
        "sre_parse.State.checklookbehindgroup"
    ],
    "sre_compile": [
        "<builtin>.tuple",
        "sre_constants",
        "sre_parse"
    ],
    "re.Scanner.__init__": [
        "sre_constants",
        "sre_parse.parse",
        "sre_compile.compile",
        "sre_parse.State.closegroup",
        "sre_parse.SubPattern.append",
        "<builtin>.isinstance",
        "sre_parse.State.__init__",
        "sre_parse.State.opengroup",
        "sre_parse.SubPattern.__init__"
    ],
    "posixpath.expandvars": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "re.compile",
        "<builtin>.getattr",
        "re"
    ],
    "os.get_exec_path": [
        "warnings.simplefilter",
        "<builtin>.ValueError",
        "warnings",
        "<builtin>.isinstance",
        "warnings.catch_warnings.__init__"
    ],
    "os.popen": [
        "os._wrap_close.__init__",
        "io.TextIOWrapper",
        "<builtin>.ValueError",
        "subprocess.Popen.__init__",
        "subprocess",
        "io",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "os.fdopen": [
        "io.open",
        "io",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "threading.Thread.isAlive": [
        "threading._DummyThread.is_alive",
        "warnings.warn",
        "warnings",
        "threading.Thread.is_alive"
    ],
    "_threading_local": [
        "contextlib",
        "contextlib.contextmanager",
        "threading",
        "weakref",
        "_threading_local._localimpl",
        "_threading_local.local"
    ],
    "bpytop": [
        "bpytop.CpuBox",
        "bpytop.Menu",
        "subprocess",
        "datetime",
        "bpytop.Term",
        "logging.Logger.warning",
        "psutil",
        "random",
        "bpytop.MemBox",
        "logging.handlers.RotatingFileHandler.__init__",
        "logging.Logger.addHandler",
        "threading",
        "typing",
        "ntpath.isdir",
        "<builtin>.str",
        "bpytop.Colors",
        "bpytop.Banner",
        "logging.handlers",
        "time.time",
        "bpytop.Color",
        "argparse",
        "bpytop.NetCollector",
        "select",
        "os",
        "logging",
        "bpytop.Meters",
        "urllib.request",
        "bpytop.Symbol",
        "re",
        "ntpath.expanduser",
        "os.makedirs",
        "posixpath.isdir",
        "<builtin>.SystemExit",
        "logging.Logger.setLevel",
        "argparse.ArgumentParser.__init__",
        "logging.Formatter.__init__",
        "bpytop.TimeIt",
        "bpytop.CpuCollector",
        "fcntl",
        "bpytop.Draw",
        "bpytop.ProcBox",
        "bpytop.ProcCollector",
        "bpytop.Fx",
        "termios",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.print",
        "bpytop.main",
        "math",
        "logging.getLogger",
        "<builtin>.getattr",
        "bpytop.Graph",
        "bpytop.Key",
        "bpytop.MemCollector",
        "shutil",
        "bpytop.Raw",
        "bpytop.Collector",
        "bpytop.Config",
        "bpytop.get_cpu_name",
        "collections",
        "posixpath.dirname",
        "bpytop.Timer",
        "bpytop.Mv",
        "logging.Logger.debug",
        "bpytop.Theme",
        "bpytop.Nonblocking",
        "argparse._ActionsContainer.add_argument",
        "io",
        "ntpath.dirname",
        "bpytop.Init",
        "bpytop.UpdateChecker",
        "bpytop.Meter",
        "psutil.cpu_count",
        "bpytop.Box",
        "string.Template.__init__",
        "posixpath.expanduser",
        "bpytop.Graphs",
        "signal",
        "bpytop.get_cpu_core_mapping",
        "string",
        "tty",
        "bpytop.SubBox",
        "bpytop.Config.__init__",
        "bpytop.NetBox",
        "logging.Logger.info",
        "logging.Logger.exception"
    ],
    "logging.handlers": [
        "logging.handlers.MemoryHandler",
        "logging.handlers.WatchedFileHandler",
        "logging.handlers.QueueHandler",
        "logging.handlers.TimedRotatingFileHandler",
        "logging.handlers.BaseRotatingHandler",
        "logging.handlers.RotatingFileHandler",
        "queue",
        "os",
        "logging.handlers.SocketHandler",
        "logging",
        "logging.handlers.SMTPHandler",
        "logging.handlers.HTTPHandler",
        "pickle",
        "stat",
        "re",
        "logging.handlers.DatagramHandler",
        "logging.handlers.NTEventLogHandler",
        "struct",
        "logging.handlers.QueueListener",
        "logging.handlers.BufferingHandler",
        "threading",
        "socket",
        "logging.handlers.SysLogHandler",
        "copy"
    ],
    "queue": [
        "queue.PriorityQueue",
        "queue._PySimpleQueue",
        "threading",
        "queue.LifoQueue",
        "collections",
        "queue.Queue",
        "heapq",
        "_queue",
        "queue.Full",
        "queue.Empty"
    ],
    "_queue": [],
    "smtplib": [
        "smtplib.prompt",
        "smtplib.LMTP",
        "io",
        "smtplib.SMTPRecipientsRefused",
        "<builtin>.len",
        "datetime",
        "smtplib.SMTP.__init__",
        "hmac",
        "<builtin>.print",
        "smtplib.SMTPConnectError",
        "re.compile",
        "smtplib.SMTP.sendmail",
        "re",
        "email.generator",
        "smtplib.SMTPSenderRefused",
        "smtplib.SMTP_SSL",
        "base64",
        "smtplib.SMTP.quit",
        "socket",
        "email.utils",
        "email.message",
        "smtplib.SMTPServerDisconnected",
        "email.base64mime",
        "smtplib.SMTPNotSupportedError",
        "smtplib.SMTPDataError",
        "sys.stdin.readline",
        "smtplib.SMTP.set_debuglevel",
        "smtplib.SMTPHeloError",
        "smtplib.SMTPException",
        "smtplib.SMTPAuthenticationError",
        "smtplib.SMTPResponseException",
        "smtplib.SMTP",
        "copy",
        "ssl"
    ],
    "hmac": [
        "<builtin>.bytes",
        "hashlib",
        "warnings",
        "<builtin>.frozenset",
        "<builtin>.range",
        "_hashlib",
        "hmac.HMAC"
    ],
    "ssl": [
        "ssl._TLSContentType",
        "ssl.SSLSocket",
        "warnings",
        "<builtin>.hasattr",
        "os",
        "ssl.SSLObject",
        "ssl._TLSMessageType",
        "collections.namedtuple",
        "ssl.Purpose",
        "<builtin>.getattr",
        "base64",
        "enum",
        "socket",
        "ssl.SSLContext",
        "ssl.TLSVersion",
        "collections",
        "ssl._ASN1Object",
        "_ssl",
        "ssl._TLSAlertType"
    ],
    "_ssl": [],
    "ssl.cert_time_to_seconds": [
        "time.strptime",
        "calendar",
        "<builtin>.ValueError",
        "calendar.timegm"
    ],
    "smtplib.SMTP.starttls": [
        "<builtin>.ValueError",
        "smtplib.SMTPResponseException.__init__",
        "<builtin>.RuntimeError",
        "warnings.warn",
        "warnings",
        "smtplib.SMTP.docmd",
        "smtplib.SMTP.ehlo_or_helo_if_needed",
        "smtplib.SMTP.has_extn"
    ],
    "smtplib.SMTP_SSL.__init__": [
        "smtplib.SMTP.__init__",
        "warnings.warn",
        "warnings",
        "<builtin>.ValueError"
    ],
    "logging.handlers.SMTPHandler.emit": [
        "smtplib.SMTP.__init__",
        "smtplib.SMTP.quit",
        "logging.Handler.handleError",
        "smtplib",
        "smtplib.SMTP.login",
        "smtplib.SMTP.ehlo",
        "email.message.EmailMessage.set_content",
        "email.utils",
        "smtplib.SMTP.starttls",
        "logging.handlers.SMTPHandler.getSubject",
        "email.message.MIMEPart.__init__",
        "smtplib.SMTP.send_message",
        "email.message",
        "logging.Handler.format"
    ],
    "http.client": [
        "http.client.ImproperConnectionState",
        "http.client.HTTPSConnection",
        "http.client.InvalidURL",
        "io",
        "http.client.IncompleteRead",
        "http.client.CannotSendRequest",
        "urllib.parse",
        "http.client.UnimplementedFileMode",
        "http.client.RemoteDisconnected",
        "<builtin>.globals",
        "re.compile",
        "re",
        "http.client.HTTPMessage",
        "collections.abc",
        "http.client.UnknownProtocol",
        "http",
        "http.client.LineTooLong",
        "http.client.ResponseNotReady",
        "socket",
        "http.client.UnknownTransferEncoding",
        "http.client.HTTPResponse",
        "http.client.HTTPException",
        "email.message",
        "email.parser",
        "http.client.BadStatusLine",
        "http.client.CannotSendHeader",
        "ssl",
        "http.client.NotConnected",
        "http.client.HTTPConnection"
    ],
    "http": [
        "http.HTTPStatus",
        "enum"
    ],
    "http.client.HTTPSConnection.__init__": [
        "warnings.warn",
        "warnings",
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "logging.handlers.HTTPHandler.emit": [
        "http.client",
        "base64",
        "base64.b64encode",
        "logging.handlers.HTTPHandler.mapLogRecord",
        "<builtin>.str",
        "urllib.parse",
        "<builtin>.len",
        "logging.Handler.handleError"
    ],
    "urllib.request": [
        "urllib.error",
        "urllib.request.DataHandler",
        "urllib.request.AbstractHTTPHandler",
        "io",
        "warnings",
        "urllib.parse",
        "urllib.request.HTTPRedirectHandler",
        "urllib.request.HTTPHandler",
        "urllib.request.Request",
        "<builtin>.hasattr",
        "urllib.request.URLopener",
        "urllib.request.HTTPDefaultErrorHandler",
        "urllib.request.HTTPSHandler",
        "bisect",
        "http.client",
        "os",
        "contextlib",
        "urllib.request.ftpwrapper",
        "urllib.request.AbstractDigestAuthHandler",
        "posixpath",
        "hashlib",
        "urllib.request.ProxyHandler",
        "re.compile",
        "email",
        "re",
        "urllib.request.OpenerDirector",
        "urllib.request.ProxyBasicAuthHandler",
        "string",
        "base64",
        "urllib.request.HTTPCookieProcessor",
        "socket",
        "urllib.request.FTPHandler",
        "nturl2path",
        "tempfile",
        "urllib.response",
        "_scproxy",
        "urllib.request.HTTPBasicAuthHandler",
        "urllib.request.HTTPPasswordMgrWithDefaultRealm",
        "urllib.request.ProxyDigestAuthHandler",
        "urllib.request.HTTPPasswordMgrWithPriorAuth",
        "urllib.request.HTTPDigestAuthHandler",
        "ssl",
        "urllib.request.AbstractBasicAuthHandler",
        "urllib.request.CacheFTPHandler",
        "urllib.request.HTTPErrorProcessor",
        "urllib.request.FileHandler",
        "urllib.request.FancyURLopener",
        "urllib.request.HTTPPasswordMgr",
        "urllib.request.BaseHandler",
        "urllib.request.UnknownHandler"
    ],
    "urllib.response": [
        "urllib.response.addinfo",
        "urllib.response.addinfourl",
        "urllib.response.addclosehook",
        "urllib.response.addbase",
        "tempfile"
    ],
    "urllib.error": [
        "urllib.error.ContentTooShortError",
        "urllib.error.URLError",
        "urllib.response",
        "urllib.error.HTTPError"
    ],
    "urllib.request.urlopen": [
        "<builtin>.ValueError",
        "ssl.create_default_context",
        "warnings.warn",
        "warnings",
        "urllib.request.OpenerDirector.open",
        "urllib.request.HTTPSHandler.__init__",
        "urllib.request.build_opener"
    ],
    "http.cookiejar": [
        "urllib.parse",
        "http.cookiejar.Cookie",
        "datetime",
        "http.cookiejar.Absent",
        "http.client",
        "os",
        "http.cookiejar.DefaultCookiePolicy",
        "http.cookiejar.MozillaCookieJar",
        "urllib.request",
        "http.cookiejar.FileCookieJar",
        "re.compile",
        "http.cookiejar.CookieJar",
        "re",
        "http.cookiejar.LoadError",
        "threading",
        "http.cookiejar.LWPCookieJar",
        "http.cookiejar.CookiePolicy",
        "<builtin>.str",
        "calendar",
        "copy"
    ],
    "http.cookiejar._debug": [
        "logging.getLogger",
        "logging.Logger.debug",
        "logging"
    ],
    "http.cookiejar._warn_unhandled_exception": [
        "traceback",
        "io",
        "warnings",
        "traceback.print_exc",
        "warnings.warn",
        "io.StringIO"
    ],
    "urllib.request.HTTPCookieProcessor.__init__": [
        "http.cookiejar"
    ],
    "urllib.request.FileHandler.open_local_file": [
        "mimetypes",
        "mimetypes.guess_type",
        "urllib.request.FileHandler.get_names",
        "<builtin>.open",
        "email.utils",
        "urllib.response.addinfourl.__init__",
        "email.utils.formatdate",
        "email.message_from_string",
        "urllib.error.URLError.__init__",
        "urllib.parse._splitport",
        "urllib.request._safe_gethostbyname",
        "nturl2path.url2pathname"
    ],
    "mimetypes": [
        "mimetypes.MimeTypes",
        "os",
        "mimetypes._main",
        "posixpath",
        "urllib.parse",
        "mimetypes._default_mime_types"
    ],
    "mimetypes._main": [
        "mimetypes.guess_extension",
        "mimetypes.guess_type",
        "<builtin>.print",
        "getopt",
        "mimetypes._main.usage"
    ],
    "ftplib": [
        "ftplib.error_perm",
        "ftplib.FTP_TLS",
        "socket",
        "ftplib.error_proto",
        "ftplib.Error",
        "ssl",
        "ftplib.test",
        "ftplib.error_reply",
        "ftplib.error_temp",
        "ftplib.FTP"
    ],
    "ftplib.FTP_TLS.__init__": [
        "ftplib.FTP.__init__",
        "warnings.warn",
        "warnings",
        "<builtin>.ValueError"
    ],
    "ftplib.parse150": [
        "<builtin>.int",
        "re",
        "re.compile"
    ],
    "ftplib.parse227": [
        "<builtin>.int",
        "re",
        "re.compile"
    ],
    "netrc": [
        "os",
        "netrc.netrc.__init__",
        "<builtin>.print",
        "netrc.netrc",
        "netrc.NetrcParseError",
        "shlex",
        "stat"
    ],
    "shlex": [
        "os",
        "collections",
        "shlex.shlex",
        "shlex._print_tokens",
        "io",
        "<builtin>.len",
        "re.compile",
        "<builtin>.open",
        "re",
        "shlex.shlex.__init__"
    ],
    "ftplib.test": [
        "ftplib.FTP.login",
        "ftplib.FTP.sendcmd",
        "ftplib.FTP.__init__",
        "<builtin>.print",
        "netrc",
        "ftplib.FTP.retrbinary",
        "ftplib.FTP.dir",
        "<builtin>.len",
        "sys.exit",
        "ftplib.FTP.set_pasv",
        "ftplib.FTP.quit",
        "ftplib.FTP.set_debuglevel",
        "sys.stderr.write"
    ],
    "urllib.request.FTPHandler.ftp_open": [
        "mimetypes",
        "urllib.parse.unquote",
        "urllib.parse._splitpasswd",
        "mimetypes.guess_type",
        "ftplib",
        "urllib.parse._splitvalue",
        "sys.exc_info",
        "<builtin>.list",
        "urllib.request.FTPHandler.connect_ftp",
        "urllib.response.addinfourl.__init__",
        "urllib.error.URLError.__init__",
        "urllib.parse._splituser",
        "<builtin>.map",
        "urllib.parse._splitattr",
        "urllib.request.ftpwrapper.retrfile",
        "urllib.parse._splitport",
        "email.message_from_string",
        "<builtin>.int"
    ],
    "nturl2path.url2pathname": [
        "string",
        "<builtin>.OSError",
        "urllib.parse",
        "<builtin>.len"
    ],
    "nturl2path.pathname2url": [
        "<builtin>.OSError",
        "urllib.parse",
        "<builtin>.len"
    ],
    "nturl2path": [],
    "urllib.request.URLopener.open_local_file": [
        "<builtin>.ValueError",
        "mimetypes",
        "urllib.request.localhost",
        "mimetypes.guess_type",
        "urllib.request.thishost",
        "email.utils",
        "urllib.response.addinfourl.__init__",
        "email.utils.formatdate",
        "urllib.error.URLError.__init__",
        "email.message_from_string",
        "urllib.request.URLopener.open",
        "urllib.parse._splitport",
        "urllib.parse._splithost",
        "nturl2path.url2pathname"
    ],
    "urllib.request.URLopener.open_ftp": [
        "urllib.request.ftpwrapper.__init__",
        "urllib.error.URLError.__init__",
        "email.message_from_string",
        "urllib.parse._splitattr",
        "<builtin>.len",
        "<builtin>.isinstance",
        "urllib.parse._splithost",
        "urllib.parse.unquote",
        "urllib.parse._splitpasswd",
        "ftplib",
        "sys.exc_info",
        "mimetypes",
        "urllib.request.ftperrors",
        "urllib.parse._splitport",
        "<builtin>.int",
        "mimetypes.guess_type",
        "urllib.parse._splitvalue",
        "<builtin>.list",
        "urllib.response.addinfourl.__init__",
        "urllib.parse._splituser"
    ],
    "getpass": [
        "os",
        "contextlib",
        "termios",
        "io",
        "warnings",
        "getpass.GetPassWarning"
    ],
    "termios": [],
    "urllib.request.FancyURLopener.prompt_user_passwd": [
        "<builtin>.print",
        "getpass",
        "<builtin>.input"
    ],
    "urllib.request.ftperrors": [
        "ftplib"
    ],
    "urllib.request.ftpwrapper.init": [
        "ftplib.FTP.login",
        "ftplib.FTP.__init__",
        "ftplib",
        "ftplib.FTP.cwd",
        "ftplib.FTP.connect"
    ],
    "urllib.request.ftpwrapper.retrfile": [
        "urllib.response.addclosehook.__init__",
        "urllib.request.ftpwrapper.endtransfer",
        "ftplib",
        "sys.exc_info",
        "ftplib.FTP.voidcmd",
        "ftplib.FTP.pwd",
        "ftplib.FTP.ntransfercmd",
        "urllib.error.URLError.__init__",
        "<builtin>.str",
        "ftplib.FTP.cwd",
        "urllib.request.ftpwrapper.init"
    ],
    "urllib.request._proxy_bypass_macosx_sysconf": [
        "re.match",
        "fnmatch",
        "fnmatch.fnmatch",
        "urllib.request._proxy_bypass_macosx_sysconf.ip2num",
        "urllib.parse._splitport",
        "<builtin>.int"
    ],
    "_scproxy": [],
    "fcntl": [],
    "tty": [
        "termios"
    ],
    "psutil": [
        "functools",
        "subprocess",
        "psutil._pssunos",
        "<builtin>.hasattr",
        "datetime",
        "<builtin>.object",
        "<builtin>.tuple",
        "<builtin>.ImportError",
        "contextlib",
        "os",
        "psutil._pswindows",
        "psutil.Popen",
        "psutil.cpu_times",
        "<builtin>.globals",
        "<builtin>.getattr",
        "psutil._psbsd",
        "signal",
        "psutil.test",
        "psutil.Process",
        "threading",
        "<builtin>.dir",
        "<builtin>.str",
        "<builtin>.set",
        "psutil._pslinux",
        "<builtin>.int",
        "__future__",
        "collections",
        "<builtin>.NotImplementedError",
        "psutil._psaix"
    ],
    "psutil._pslinux": [
        "ctypes",
        "psutil._pslinux.Process",
        "functools",
        "posixpath.exists",
        "ctypes.CDLL.__init__",
        "traceback.print_exc",
        "warnings",
        "psutil._pslinux.Connections",
        "<builtin>.hasattr",
        "os",
        "glob",
        "collections.namedtuple",
        "<builtin>.globals",
        "_psutil_posix.getpagesize",
        "psutil._pslinux.Connections.__init__",
        "re",
        "psutil._pslinux._Ipv6UnsupportedError",
        "struct",
        "psutil._pslinux.RootFsDeviceFinder",
        "base64",
        "enum",
        "psutil._pslinux.IOPriority",
        "socket",
        "ntpath.exists",
        "<builtin>.dir",
        "_common.memoize",
        "<builtin>.int",
        "psutil._pslinux.set_scputimes_ntuple",
        "__future__",
        "collections",
        "resource",
        "traceback"
    ],
    "glob": [
        "os",
        "re",
        "fnmatch",
        "re.compile"
    ],
    "resource": [],
    "ctypes": [
        "ctypes.c_wchar_p",
        "ctypes.c_ubyte",
        "ctypes.c_longlong",
        "ctypes.c_uint",
        "ctypes.HRESULT",
        "ctypes.LibraryLoader.__init__",
        "ctypes.CDLL.__init__",
        "ctypes.c_bool",
        "ctypes._endian",
        "ctypes.LibraryLoader",
        "ctypes._check_size",
        "ctypes.CFUNCTYPE",
        "os",
        "ctypes.PyDLL",
        "ctypes.c_wchar",
        "ctypes.c_ushort",
        "ctypes.CDLL",
        "ctypes.c_double",
        "ctypes.c_char_p",
        "ctypes.c_int",
        "ctypes.c_char",
        "ctypes.OleDLL",
        "ctypes.WinDLL",
        "struct",
        "ctypes.c_float",
        "_ctypes",
        "ctypes.py_object",
        "ctypes._reset_cache",
        "ctypes.c_long",
        "ctypes.c_byte",
        "ctypes.c_longdouble",
        "<builtin>.Exception",
        "<builtin>.int",
        "ctypes.c_short",
        "ctypes.c_void_p",
        "ctypes.PYFUNCTYPE",
        "ctypes.c_ulonglong",
        "ctypes.c_ulong"
    ],
    "_ctypes": [],
    "ctypes._check_size": [
        "struct",
        "<builtin>.SystemError"
    ],
    "ctypes._endian": [
        "ctypes",
        "ctypes._endian._swapped_meta",
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "ctypes._endian.BigEndianStructure",
        "ctypes._endian.LittleEndianStructure"
    ],
    "psutil._pswindows": [
        "sys.getwindowsversion",
        "os",
        "contextlib",
        "psutil._pswindows.Priority",
        "enum",
        "psutil._pswindows.IOPriority",
        "functools",
        "collections",
        "_common.memoize",
        "<builtin>.RuntimeError",
        "<builtin>.dict",
        "<builtin>.globals",
        "collections.namedtuple",
        "<builtin>.str",
        "_compat.lru_cache",
        "psutil._pswindows.Process",
        "signal",
        "psutil._pswindows.WindowsService"
    ],
    "psutil._psbsd": [
        "os",
        "contextlib",
        "contextlib.contextmanager",
        "functools",
        "collections",
        "_common.memoize",
        "<builtin>.dict",
        "collections.namedtuple",
        "psutil._psbsd.Process",
        "_psutil_posix.getpagesize",
        "<builtin>.hasattr",
        "xml.etree.ElementTree"
    ],
    "xml.etree.ElementTree": [
        "contextlib.contextmanager",
        "_elementtree",
        "xml.etree.ElementTree.XMLParser",
        "xml.etree.ElementTree.QName",
        "io",
        "warnings",
        "xml.etree.ElementTree.ElementTree",
        "xml.etree.ElementTree._ListDataStream",
        "contextlib",
        "re.compile",
        "xml.etree.ElementTree.C14NWriterTarget",
        "re",
        "collections.abc",
        "xml.etree.ElementTree.Element",
        "xml.etree.ElementPath",
        "xml.etree.ElementTree.XMLPullParser",
        "<builtin>.set",
        "xml.etree.ElementTree.TreeBuilder",
        "collections",
        "xml.etree.ElementTree.ParseError"
    ],
    "xml.etree.ElementPath": [
        "xml.etree.ElementPath._SelectorContext",
        "re",
        "re.compile"
    ],
    "xml.etree.ElementTree.ElementTree.write": [
        "xml.etree.ElementTree._get_writer",
        "<builtin>.ValueError",
        "locale",
        "xml.etree.ElementTree.ElementTree.write",
        "xml.etree.ElementTree._serialize_text",
        "xml.etree.ElementTree._namespaces",
        "locale.getpreferredencoding"
    ],
    "xml.parsers.expat": [
        "pyexpat"
    ],
    "pyexpat": [],
    "xml.etree.ElementTree.XMLParser.__init__": [
        "<builtin>.ImportError",
        "xml.parsers.expat",
        "pyexpat",
        "xml.etree.ElementTree.TreeBuilder.__init__",
        "<builtin>.hasattr"
    ],
    "xml.etree.ElementTree.XMLParser._default": [
        "warnings.warn",
        "<builtin>.hasattr",
        "xml.parsers.expat",
        "<builtin>.len"
    ],
    "_elementtree": [],
    "psutil._pssunos": [
        "os",
        "socket",
        "functools",
        "collections",
        "subprocess",
        "<builtin>.dict",
        "collections.namedtuple",
        "psutil._pssunos.Process",
        "_psutil_posix.getpagesize"
    ],
    "psutil._psaix": [
        "os",
        "psutil._psaix.Process",
        "functools",
        "collections",
        "subprocess",
        "glob",
        "<builtin>.dict",
        "collections.namedtuple",
        "<builtin>.hasattr",
        "_psutil_posix.getpagesize",
        "re"
    ],
    "psutil.net_if_addrs": [
        "_psosx.net_if_addrs",
        "collections.defaultdict",
        "socket",
        "<builtin>.dict",
        "_common.snicaddr",
        "<builtin>.hasattr",
        "psutil._pswindows.net_if_addrs"
    ],
    "psutil._common": [
        "psutil._common.NoSuchProcess",
        "functools",
        "warnings",
        "psutil._common.memoize",
        "<builtin>.object",
        "sys.getfilesystemencodeerrors",
        "sys.getfilesystemencoding",
        "os",
        "contextlib",
        "sys.platform.startswith",
        "psutil._common.AccessDenied",
        "psutil._common.NicDuplex",
        "collections.namedtuple",
        "<builtin>.globals",
        "stat",
        "psutil._common.Error",
        "enum",
        "psutil._common.BatteryTime",
        "threading",
        "socket",
        "psutil._common._WrapNumbers.__init__",
        "os.getenv",
        "psutil._common._WrapNumbers",
        "__future__",
        "psutil._common.ZombieProcess",
        "collections",
        "<builtin>.bool",
        "psutil._common.TimeoutExpired"
    ],
    "curses": [
        "os",
        "_curses",
        "curses.has_key"
    ],
    "_curses": [],
    "curses.initscr": [
        "sys.__stdout__.fileno",
        "curses",
        "_curses",
        "<builtin>.setattr"
    ],
    "curses.start_color": [
        "curses",
        "_curses",
        "<builtin>.hasattr"
    ],
    "curses.has_key": [
        "curses.has_key.has_key",
        "<builtin>.print",
        "_curses"
    ],
    "curses.wrapper": [
        "<builtin>.locals",
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError",
        "<builtin>.len",
        "curses.start_color",
        "curses.initscr"
    ],
    "psutil._common.term_supports_colors": [
        "curses"
    ],
    "psutil._common.print_color": [
        "ctypes",
        "<builtin>.ValueError",
        "psutil._common.hilite",
        "<builtin>.print",
        "<builtin>.list",
        "<builtin>.dict",
        "psutil._common.term_supports_colors"
    ],
    "psutil._common.debug": [
        "<builtin>.print",
        "inspect.getframeinfo",
        "inspect",
        "inspect.currentframe",
        "<builtin>.isinstance"
    ],
    "psutil._set_debug": [
        "_psutil_windows.set_debug",
        "_psutil_bsd.set_debug",
        "_psutil_linux.set_debug",
        "_psutil_aix.set_debug",
        "_psosx.cext.set_debug",
        "<builtin>.bool",
        "_psutil_sunos.set_debug",
        "psutil._common"
    ],
    "psutil.test": [
        "time.localtime",
        "<builtin>.print",
        "time.strftime",
        "<builtin>.sum",
        "psutil._common.bytes2human",
        "psutil.process_iter",
        "_compat.get_terminal_size",
        "<builtin>.int",
        "psutil.Process.uids",
        "<builtin>.round",
        "psutil._common"
    ],
    "time.time": [],
    "<builtin>.print": [],
    "<builtin>.SystemExit": [],
    "argparse.ArgumentParser.__init__": [
        "gettext.gettext",
        "argparse._ActionsContainer.add_argument",
        "ntpath.basename",
        "<builtin>.super",
        "posixpath.basename",
        "argparse._ActionsContainer._add_container_actions",
        "argparse._ActionsContainer.register",
        "argparse._ActionsContainer.add_argument_group"
    ],
    "argparse._ActionsContainer.add_argument": [
        "argparse.ArgumentParser._add_action",
        "<builtin>.ValueError",
        "argparse.ArgumentParser._get_formatter",
        "<builtin>.callable",
        "argparse._ActionsContainer._get_optional_kwargs",
        "argparse._ActionsContainer._get_positional_kwargs",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.len",
        "<builtin>.hasattr",
        "argparse._ActionsContainer._add_action",
        "argparse._ActionsContainer._pop_action_class"
    ],
    "argparse.ArgumentParser.parse_args": [
        "argparse.ArgumentParser.parse_known_args",
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "<builtin>.str": [],
    "string.Template.__init__": [],
    "ntpath.expanduser": [
        "ntpath._get_bothseps",
        "ntpath.dirname",
        "<builtin>.len",
        "ntpath.join",
        "<builtin>.isinstance"
    ],
    "posixpath.expanduser": [
        "pwd.getpwnam",
        "pwd.getpwuid",
        "<builtin>.str",
        "<builtin>.len",
        "posixpath._get_sep",
        "<builtin>.isinstance"
    ],
    "posixpath.isdir": [],
    "ntpath.isdir": [],
    "os.makedirs": [
        "os.makedirs",
        "ntpath.exists",
        "<builtin>.bytes",
        "posixpath.exists",
        "ntpath.isdir",
        "ntpath.split",
        "posixpath.isdir",
        "<builtin>.isinstance",
        "posixpath.split"
    ],
    "posixpath.dirname": [
        "<builtin>.len",
        "sys.base_prefix.rfind",
        "sys.path.rfind",
        "posixpath._get_sep"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "psutil.cpu_count": [
        "psutil._pswindows.cpu_count_logical",
        "psutil._pslinux.cpu_count_cores",
        "_psosx.cpu_count_cores",
        "psutil._pslinux.cpu_count_logical",
        "psutil._psaix.cpu_count_cores",
        "psutil._pssunos.cpu_count_cores",
        "_psosx.cpu_count_logical",
        "psutil._psbsd.cpu_count_cores",
        "psutil._pswindows.cpu_count_cores",
        "psutil._pssunos.cpu_count_logical",
        "psutil._psbsd.cpu_count_logical",
        "psutil._psaix.cpu_count_logical"
    ],
    "logging.getLogger": [
        "logging.Manager.getLogger"
    ],
    "logging.Logger.setLevel": [
        "logging.Manager._clear_cache",
        "logging._checkLevel"
    ],
    "logging.handlers.RotatingFileHandler.__init__": [
        "logging.handlers.BaseRotatingHandler.__init__"
    ],
    "logging.Formatter.__init__": [
        "<builtin>.ValueError"
    ],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "bpytop.TimeIt": [],
    "bpytop.TimeIt.start": [
        "time.time"
    ],
    "bpytop.TimeIt.pause": [
        "time.time"
    ],
    "bpytop.TimeIt.stop": [
        "logging.Logger.debug",
        "time.time"
    ],
    "logging.Logger.debug": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "bpytop.timeit_decorator": [],
    "bpytop.timeit_decorator.timed": [
        "logging.Logger.debug",
        "time.time"
    ],
    "bpytop.strtobool": [
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "<builtin>.type": [],
    "<builtin>.ValueError": [],
    "bpytop.Config": [
        "psutil.cpu_times_percent",
        "<builtin>.enumerate",
        "psutil.sensors_temperatures",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "psutil.cpu_times_percent": [
        "<builtin>.ValueError",
        "<builtin>.zip",
        "time.sleep",
        "psutil.cpu_times_percent.calculate",
        "psutil.cpu_times"
    ],
    "<builtin>.getattr": [],
    "<builtin>.hasattr": [],
    "psutil.sensors_temperatures": [
        "collections.defaultdict",
        "_common.shwtemp",
        "<builtin>.dict",
        "psutil._pslinux.sensors_temperatures",
        "psutil._psbsd.sensors_temperatures",
        "psutil.sensors_temperatures.convert",
        "_psosx.sensors_temperatures"
    ],
    "<builtin>.enumerate": [],
    "bpytop.Config.__init__": [
        "<builtin>.getattr",
        "bpytop.Config.load_config",
        "<builtin>.setattr"
    ],
    "bpytop.Config.load_config": [
        "logging.Logger.exception",
        "posixpath.isfile",
        "<builtin>.int",
        "<builtin>.type",
        "<builtin>.str",
        "ntpath.isfile",
        "bpytop.strtobool",
        "<builtin>.getattr",
        "<builtin>.open",
        "<builtin>.bool"
    ],
    "<builtin>.setattr": [],
    "bpytop.Config.__setattr__": [],
    "posixpath.isfile": [],
    "ntpath.isfile": [],
    "<builtin>.open": [],
    "<builtin>.int": [],
    "<builtin>.bool": [],
    "logging.Logger.exception": [
        "logging.Logger.error"
    ],
    "bpytop.Config.save_config": [
        "posixpath.isfile",
        "<builtin>.open",
        "<builtin>.str",
        "ntpath.isfile",
        "logging.Logger.exception"
    ],
    "logging.Logger.info": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.warning": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "bpytop.Term": [
        "threading.Event.__init__"
    ],
    "threading.Event.__init__": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "bpytop.Term.refresh": [
        "bpytop.Key.has_key",
        "bpytop.Draw.now",
        "bpytop.Mv.down",
        "bpytop.Key.last",
        "bpytop.Mv.right",
        "threading.Event.wait",
        "threading.Event.set",
        "bpytop.Box.draw_bg",
        "<builtin>.min",
        "bpytop.Timer.finish",
        "<builtin>.str",
        "bpytop.create_box",
        "bpytop.clean_quit",
        "bpytop.Mv.left",
        "<builtin>.getattr",
        "threading.Event.clear",
        "bpytop.Box.calc_sizes"
    ],
    "threading.Event.set": [
        "threading.Condition.notify_all"
    ],
    "bpytop.Draw.now": [
        "<builtin>.print",
        "threading.Event.clear",
        "threading.Event.wait",
        "threading.Event.set"
    ],
    "<builtin>.min": [],
    "bpytop.create_box": [
        "bpytop.Mv.to",
        "bpytop.Mv.right",
        "<builtin>.range"
    ],
    "bpytop.Mv.right": [],
    "bpytop.Mv.down": [],
    "bpytop.Mv.left": [],
    "threading.Event.wait": [
        "threading.Condition.wait"
    ],
    "bpytop.Key.has_key": [
        "<builtin>.bool"
    ],
    "bpytop.Key.last": [],
    "bpytop.clean_quit": [
        "logging.Logger.warning",
        "bpytop.Draw.now",
        "bpytop.Term.title",
        "<builtin>.print",
        "bpytop.Term.echo",
        "time.time",
        "<builtin>.SystemExit",
        "logging.Logger.info",
        "_thread.interrupt_main",
        "bpytop.Key.stop",
        "bpytop.Collector.stop",
        "<builtin>.round"
    ],
    "threading.Event.clear": [],
    "bpytop.Box.calc_sizes": [],
    "bpytop.Box.draw_bg": [
        "bpytop.Box.empty_bg",
        "bpytop.Draw.buffer",
        "bpytop.Box.draw_clock",
        "bpytop.Box.draw_update_ms"
    ],
    "bpytop.Timer.finish": [
        "bpytop.Key.break_wait",
        "time.time"
    ],
    "bpytop.Term.echo": [
        "sys.stdin.fileno"
    ],
    "sys.stdin.fileno": [],
    "bpytop.Term.title": [],
    "bpytop.Fx": [
        "re.compile"
    ],
    "re.compile": [
        "re._compile"
    ],
    "bpytop.Fx.trans": [],
    "bpytop.Fx.uncolor": [],
    "bpytop.Raw": [],
    "bpytop.Raw.__init__": [
        "sys.stdin.fileno"
    ],
    "bpytop.Raw.__enter__": [
        "tty.setcbreak"
    ],
    "tty.setcbreak": [],
    "bpytop.Raw.__exit__": [],
    "bpytop.Nonblocking": [],
    "bpytop.Nonblocking.__init__": [
        "sys.stdin.fileno"
    ],
    "bpytop.Nonblocking.__enter__": [],
    "bpytop.Nonblocking.__exit__": [],
    "bpytop.Mv": [],
    "bpytop.Mv.to": [],
    "bpytop.Mv.up": [],
    "bpytop.Key": [
        "threading.Event.__init__",
        "threading.Event.set"
    ],
    "bpytop.Key.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "threading.Thread.__init__": [
        "_weakrefset.WeakSet.add",
        "threading.current_thread",
        "threading._make_invoke_excepthook",
        "<builtin>.str",
        "threading.Event.__init__",
        "threading._newname"
    ],
    "threading.Thread.start": [
        "<builtin>.RuntimeError",
        "threading.Event.is_set",
        "_thread.start_new_thread",
        "threading.Event.wait"
    ],
    "bpytop.Key.stop": [
        "threading.Thread.is_alive",
        "threading._DummyThread.is_alive",
        "threading.Thread.join",
        "threading._DummyThread.join"
    ],
    "threading.Thread.is_alive": [
        "threading.Event.is_set",
        "threading.Thread._wait_for_tstate_lock"
    ],
    "threading._DummyThread.is_alive": [
        "threading.Event.is_set"
    ],
    "threading.Thread.join": [
        "threading.current_thread",
        "<builtin>.max",
        "<builtin>.RuntimeError",
        "threading.Event.is_set",
        "threading.Thread._wait_for_tstate_lock"
    ],
    "threading._DummyThread.join": [],
    "bpytop.Key.get": [],
    "bpytop.Key.get_mouse": [
        "threading.Event.is_set",
        "threading.Event.clear"
    ],
    "threading.Event.is_set": [],
    "bpytop.Key.mouse_moved": [
        "threading.Event.is_set",
        "threading.Event.clear"
    ],
    "bpytop.Key.clear": [],
    "bpytop.Key.input_wait": [
        "threading.Event.is_set",
        "bpytop.Draw.now",
        "threading.Event.clear",
        "threading.Event.wait"
    ],
    "bpytop.Key.break_wait": [
        "time.sleep",
        "threading.Event.clear",
        "threading.Event.set"
    ],
    "time.sleep": [],
    "bpytop.Key._get_key": [
        "logging.Logger.exception",
        "sys.stdin.read",
        "bpytop.Nonblocking.__init__",
        "threading.Event.wait",
        "threading.Event.set",
        "bpytop.Raw.__init__",
        "bpytop.clean_quit",
        "<builtin>.len",
        "<builtin>.int",
        "threading.Event.clear"
    ],
    "sys.stdin.read": [],
    "<builtin>.len": [],
    "bpytop.Draw": [
        "threading.Event.__init__",
        "threading.Event.set"
    ],
    "bpytop.Draw.buffer": [
        "bpytop.Draw.out"
    ],
    "bpytop.Draw.out": [
        "bpytop.Draw.clear",
        "<builtin>.sorted",
        "bpytop.Draw.now"
    ],
    "<builtin>.sorted": [],
    "bpytop.Draw.clear": [],
    "bpytop.Draw.saved_buffer": [
        "<builtin>.sorted"
    ],
    "bpytop.Color": [],
    "bpytop.Color.__init__": [
        "<builtin>.tuple",
        "logging.Logger.exception",
        "<builtin>.ValueError",
        "bpytop.Color.truecolor_to_256",
        "<builtin>.all",
        "<builtin>.map",
        "<builtin>.str",
        "<builtin>.hex",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "<builtin>.map": [],
    "<builtin>.tuple": [],
    "<builtin>.all": [],
    "<builtin>.hex": [],
    "bpytop.Color.truecolor_to_256": [
        "<builtin>.round"
    ],
    "bpytop.Color.__str__": [],
    "bpytop.Color.__repr__": [
        "<builtin>.repr"
    ],
    "<builtin>.repr": [],
    "bpytop.Color.__iter__": [],
    "bpytop.Color.__call__": [
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "<builtin>.round": [],
    "bpytop.Color.escape_color": [
        "logging.Logger.exception",
        "<builtin>.int",
        "<builtin>.len",
        "bpytop.Color.truecolor_to_256"
    ],
    "bpytop.Color.fg": [
        "bpytop.Color.escape_color",
        "<builtin>.len"
    ],
    "bpytop.Color.bg": [
        "bpytop.Color.escape_color",
        "<builtin>.len"
    ],
    "bpytop.Colors": [
        "bpytop.Color.__init__"
    ],
    "bpytop.Theme": [],
    "bpytop.Theme.__init__": [
        "bpytop.Theme._load_theme",
        "bpytop.Theme.refresh"
    ],
    "bpytop.Theme.refresh": [
        "logging.Logger.exception",
        "<builtin>.str"
    ],
    "bpytop.Theme._load_theme": [
        "logging.Logger.warning",
        "bpytop.Draw.now",
        "bpytop.Color.fg",
        "bpytop.Theme._load_file",
        "bpytop.Color.__init__",
        "<builtin>.list",
        "<builtin>.setattr",
        "<builtin>.range",
        "<builtin>.getattr"
    ],
    "bpytop.Theme.__call__": [
        "bpytop.Theme._load_theme"
    ],
    "bpytop.Theme._load_file": [
        "logging.Logger.exception",
        "<builtin>.open",
        "<builtin>.str"
    ],
    "<builtin>.list": [],
    "<builtin>.range": [],
    "bpytop.Banner": [
        "bpytop.Mv.right",
        "<builtin>.enumerate",
        "bpytop.Color.fg",
        "<builtin>.len"
    ],
    "bpytop.Banner.draw": [
        "bpytop.Mv.to",
        "<builtin>.enumerate",
        "bpytop.Draw.out"
    ],
    "bpytop.Symbol": [
        "bpytop.Color.fg"
    ],
    "bpytop.Graph": [],
    "bpytop.Graph.__init__": [
        "bpytop.min_max",
        "bpytop.Graph._create",
        "<builtin>.min",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "bpytop.min_max": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "<builtin>.isinstance": [],
    "bpytop.Graph._create": [
        "bpytop.Mv.down",
        "<builtin>.float",
        "<builtin>.range",
        "<builtin>.len",
        "<builtin>.bool",
        "bpytop.Mv.left",
        "<builtin>.round"
    ],
    "<builtin>.float": [],
    "bpytop.Graph.__call__": [
        "bpytop.Graph._create",
        "<builtin>.isinstance",
        "bpytop.min_max",
        "<builtin>.range"
    ],
    "bpytop.Graph.add": [
        "bpytop.Graph.__call__"
    ],
    "bpytop.Graph.__str__": [],
    "bpytop.Graph.__repr__": [
        "<builtin>.repr"
    ],
    "bpytop.Graphs": [],
    "bpytop.Meter": [],
    "bpytop.Meter.__init__": [
        "bpytop.Meter._create"
    ],
    "bpytop.Meter._create": [
        "<builtin>.round",
        "<builtin>.range"
    ],
    "bpytop.Meter.__call__": [
        "<builtin>.isinstance",
        "bpytop.Meter._create"
    ],
    "bpytop.Meter.__str__": [],
    "bpytop.Meter.__repr__": [
        "<builtin>.repr"
    ],
    "bpytop.Meters": [],
    "bpytop.Box": [
        "pwd.getpwuid",
        "<builtin>.sorted"
    ],
    "pwd.getpwuid": [],
    "bpytop.Box.draw_update_ms": [
        "bpytop.Draw.clear",
        "bpytop.Mv.to",
        "bpytop.Draw.out",
        "psutil.sensors_battery",
        "<builtin>.len",
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "<builtin>.hasattr"
    ],
    "psutil.sensors_battery": [
        "psutil._pswindows.sensors_battery",
        "psutil._psbsd.sensors_battery",
        "_psosx.sensors_battery",
        "psutil._pslinux.sensors_battery"
    ],
    "bpytop.Box.draw_clock": [
        "time.tzset",
        "bpytop.Mv.to",
        "time.strftime",
        "bpytop.Draw.out",
        "psutil.sensors_battery",
        "<builtin>.len",
        "<builtin>.hasattr",
        "bpytop.Draw.buffer"
    ],
    "time.tzset": [],
    "time.strftime": [],
    "bpytop.Box.empty_bg": [
        "bpytop.Mv.left",
        "bpytop.Banner.draw",
        "bpytop.Mv.down",
        "bpytop.Mv.right"
    ],
    "bpytop.SubBox": [],
    "bpytop.CpuBox": [],
    "bpytop.CpuBox._calc_size": [
        "<builtin>.round"
    ],
    "bpytop.CpuBox._draw_bg": [
        "bpytop.Mv.to",
        "bpytop.create_box",
        "<builtin>.range"
    ],
    "bpytop.CpuBox.battery_activity": [
        "<builtin>.sorted",
        "ntpath.isdir",
        "posixpath.isdir",
        "psutil.sensors_battery",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "bpytop.readfile"
    ],
    "bpytop.readfile": [
        "posixpath.isfile",
        "<builtin>.open",
        "ntpath.isfile"
    ],
    "bpytop.CpuBox._draw_fg": [
        "bpytop.temperature",
        "bpytop.Draw.clear",
        "<builtin>.float",
        "bpytop.min_max",
        "<builtin>.max",
        "bpytop.Mv.to",
        "bpytop.Mv.right",
        "bpytop.Fx.trans",
        "bpytop.Mv.left",
        "bpytop.Meter.__init__",
        "bpytop.Graph.__init__",
        "bpytop.CpuBox.battery_activity",
        "<builtin>.str",
        "<builtin>.hasattr",
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "<builtin>.len",
        "<builtin>.round"
    ],
    "<builtin>.max": [],
    "bpytop.temperature": [
        "<builtin>.round"
    ],
    "bpytop.MemBox": [],
    "bpytop.MemBox._calc_size": [
        "<builtin>.round"
    ],
    "bpytop.MemBox._draw_bg": [
        "bpytop.Mv.to",
        "bpytop.create_box",
        "<builtin>.range"
    ],
    "bpytop.MemBox._draw_fg": [
        "logging.Logger.error",
        "bpytop.Fx.trans",
        "<builtin>.max",
        "bpytop.Mv.to",
        "<builtin>.range",
        "bpytop.Mv.left",
        "<builtin>.list",
        "bpytop.Meter.__init__",
        "bpytop.Graph.__init__",
        "<builtin>.enumerate",
        "bpytop.Mv.up",
        "<builtin>.len",
        "bpytop.MemBox._calc_size",
        "bpytop.Draw.buffer",
        "bpytop.MemBox._draw_bg",
        "<builtin>.int",
        "<builtin>.str"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "bpytop.NetBox": [],
    "bpytop.NetBox._calc_size": [
        "<builtin>.round"
    ],
    "bpytop.NetBox._draw_bg": [
        "bpytop.create_box"
    ],
    "bpytop.NetBox._draw_fg": [
        "bpytop.NetBox._draw_bg",
        "bpytop.Mv.to",
        "bpytop.Graph.__init__",
        "<builtin>.len",
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "<builtin>.bool"
    ],
    "bpytop.ProcBox": [],
    "bpytop.ProcBox._calc_size": [
        "<builtin>.round"
    ],
    "bpytop.ProcBox._draw_bg": [
        "bpytop.create_box"
    ],
    "bpytop.ProcBox.selector": [
        "<builtin>.round",
        "bpytop.Collector.collect"
    ],
    "bpytop.Collector.collect": [
        "threading.Event.set",
        "threading.Event.wait",
        "<builtin>.list"
    ],
    "bpytop.ProcBox._draw_fg": [
        "bpytop.Mv.to",
        "bpytop.Mv.right",
        "psutil.pid_exists",
        "bpytop.Mv.left",
        "<builtin>.list",
        "bpytop.Graph.__init__",
        "<builtin>.str",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "bpytop.floating_humanizer",
        "<builtin>.int",
        "<builtin>.round"
    ],
    "bpytop.floating_humanizer": [
        "<builtin>.float",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.round"
    ],
    "psutil.pid_exists": [
        "psutil._psaix.pid_exists",
        "psutil.pids",
        "_psosx.pid_exists",
        "psutil._pslinux.pid_exists",
        "psutil._pssunos.pid_exists",
        "psutil._psbsd.pid_exists"
    ],
    "bpytop.Collector": [
        "threading.Event.__init__",
        "threading.Event.set"
    ],
    "bpytop.Collector.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.Collector.stop": [
        "threading.Thread.is_alive",
        "threading._DummyThread.join",
        "threading.Event.set",
        "threading._DummyThread.is_alive",
        "threading.Thread.join"
    ],
    "bpytop.Collector._runner": [
        "bpytop.TimeIt.stop",
        "bpytop.Box.draw_clock",
        "threading.Event.wait",
        "threading.Event.set",
        "threading.Event.is_set",
        "bpytop.TimeIt.start",
        "bpytop.Draw.out",
        "bpytop.clean_quit",
        "logging.Logger.exception",
        "threading.Event.clear"
    ],
    "bpytop.CpuCollector": [
        "<builtin>.range"
    ],
    "bpytop.CpuCollector.get_sensors": [
        "psutil.sensors_temperatures",
        "<builtin>.hasattr",
        "<builtin>.bool",
        "shutil.which",
        "subprocess.check_output"
    ],
    "shutil.which": [
        "<builtin>.any",
        "posixpath.join",
        "posixpath.dirname",
        "ntpath.dirname",
        "<builtin>.set",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.normcase",
        "shutil._access_check",
        "posixpath.normcase"
    ],
    "subprocess.check_output": [
        "<builtin>.ValueError",
        "subprocess.run"
    ],
    "bpytop.CpuCollector._collect": [
        "logging.Logger.error",
        "psutil.boot_time",
        "psutil.cpu_times_percent",
        "bpytop.CpuCollector._collect_temps",
        "<builtin>.setattr",
        "<builtin>.round",
        "time.time",
        "<builtin>.enumerate",
        "psutil.cpu_percent",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "logging.Logger.exception",
        "psutil.cpu_freq"
    ],
    "psutil.cpu_percent": [
        "<builtin>.ValueError",
        "<builtin>.zip",
        "time.sleep",
        "psutil.cpu_times",
        "psutil.cpu_percent.calculate"
    ],
    "psutil.cpu_freq": [
        "psutil._psbsd.cpu_freq",
        "<builtin>.float",
        "psutil._pslinux.cpu_freq",
        "_common.scpufreq",
        "<builtin>.len",
        "_psosx.cpu_freq",
        "psutil._pswindows.cpu_freq"
    ],
    "psutil.boot_time": [
        "psutil._psaix.boot_time",
        "psutil._pssunos.boot_time",
        "psutil._psbsd.boot_time",
        "_psosx.boot_time",
        "psutil._pslinux.boot_time",
        "psutil._pswindows.boot_time"
    ],
    "bpytop.CpuCollector._collect_temps": [
        "logging.Logger.exception",
        "bpytop.CpuBox._calc_size",
        "<builtin>.float",
        "<builtin>.max",
        "<builtin>.range",
        "<builtin>.sum",
        "<builtin>.enumerate",
        "<builtin>.str",
        "psutil.sensors_temperatures",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.getattr",
        "<builtin>.int",
        "<builtin>.round",
        "subprocess.check_output"
    ],
    "<builtin>.sum": [],
    "bpytop.CpuCollector._draw": [
        "bpytop.CpuBox._draw_fg"
    ],
    "bpytop.MemCollector": [
        "time.time"
    ],
    "bpytop.MemCollector._collect": [
        "psutil.swap_memory",
        "time.time",
        "<builtin>.len",
        "<builtin>.hasattr",
        "psutil.disk_usage",
        "ntpath.realpath",
        "psutil.virtual_memory",
        "<builtin>.round",
        "subprocess.check_output",
        "<builtin>.tuple",
        "logging.Logger.warning",
        "logging.Logger.exception",
        "logging.Logger.error",
        "sys.base_prefix.rsplit",
        "<builtin>.getattr",
        "<builtin>.open",
        "psutil.disk_partitions",
        "bpytop.floating_humanizer",
        "psutil.disk_io_counters",
        "posixpath.realpath",
        "sys.path.rsplit",
        "<builtin>.list",
        "logging.Logger.debug"
    ],
    "psutil.virtual_memory": [
        "_psosx.virtual_memory",
        "psutil._psaix.virtual_memory",
        "psutil._pswindows.virtual_memory",
        "psutil._pslinux.virtual_memory",
        "psutil._psbsd.virtual_memory",
        "psutil._pssunos.virtual_memory"
    ],
    "psutil.swap_memory": [
        "psutil._psaix.swap_memory",
        "psutil._pssunos.swap_memory",
        "psutil._pswindows.swap_memory",
        "psutil._pslinux.swap_memory",
        "_psosx.swap_memory",
        "psutil._psbsd.swap_memory"
    ],
    "psutil.disk_io_counters": [
        "<builtin>.zip",
        "_common.wrap_numbers",
        "psutil._pslinux.disk_io_counters",
        "<builtin>.dict",
        "<builtin>.sum",
        "_psosx.disk_io_counters",
        "<builtin>.getattr"
    ],
    "psutil.disk_partitions": [
        "psutil._pssunos.disk_partitions",
        "_psosx.disk_partitions",
        "psutil.disk_partitions.pathconf",
        "psutil._psbsd.disk_partitions",
        "psutil._pswindows.disk_partitions",
        "psutil._pslinux.disk_partitions",
        "psutil._psaix.disk_partitions"
    ],
    "psutil.disk_usage": [
        "psutil._pswindows.disk_usage",
        "_psosx.disk_usage"
    ],
    "posixpath.realpath": [
        "posixpath.abspath",
        "posixpath._joinrealpath"
    ],
    "ntpath.realpath": [
        "ntpath.isabs",
        "nt._getfinalpathname",
        "ntpath.normpath",
        "ntpath._getfinalpathname_nonstrict",
        "sys.path.startswith",
        "<builtin>.len",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.normcase",
        "sys.base_prefix.startswith"
    ],
    "sys.path.rsplit": [],
    "sys.base_prefix.rsplit": [],
    "bpytop.MemCollector._draw": [
        "bpytop.MemBox._draw_fg"
    ],
    "bpytop.NetCollector": [
        "time.time"
    ],
    "bpytop.NetCollector._get_nics": [
        "<builtin>.sorted",
        "logging.Logger.exception",
        "psutil.net_if_stats",
        "psutil.net_io_counters"
    ],
    "psutil.net_io_counters": [
        "psutil._pslinux.net_io_counters",
        "<builtin>.zip",
        "_common.wrap_numbers",
        "psutil._pswindows.net_io_counters",
        "_psosx.net_io_counters",
        "<builtin>.sum",
        "_common.snetio"
    ],
    "psutil.net_if_stats": [
        "psutil._psbsd.net_if_stats",
        "psutil._pssunos.net_if_stats",
        "psutil._pslinux.net_if_stats",
        "psutil._psaix.net_if_stats",
        "_psosx.net_if_stats",
        "psutil._pswindows.net_if_stats"
    ],
    "bpytop.NetCollector._get_nics.<lambda1>": [
        "<builtin>.getattr"
    ],
    "bpytop.NetCollector.switch": [
        "<builtin>.len",
        "bpytop.Collector.collect"
    ],
    "bpytop.NetCollector._collect": [
        "bpytop.units_to_bytes",
        "bpytop.NetCollector._get_nics",
        "psutil.net_if_addrs",
        "<builtin>.sorted",
        "<builtin>.max",
        "time.time",
        "bpytop.floating_humanizer",
        "<builtin>.len",
        "<builtin>.getattr",
        "psutil.net_if_stats",
        "psutil.net_io_counters",
        "<builtin>.round"
    ],
    "bpytop.units_to_bytes": [
        "<builtin>.int",
        "<builtin>.float",
        "<builtin>.round"
    ],
    "bpytop.NetCollector._draw": [
        "bpytop.NetBox._draw_fg"
    ],
    "bpytop.ProcCollector": [
        "<builtin>.compile"
    ],
    "<builtin>.compile": [],
    "bpytop.ProcCollector._collect": [
        "psutil.Process.name",
        "<builtin>.sorted",
        "psutil.Process.as_dict",
        "time.time",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.hasattr",
        "psutil.process_iter",
        "psutil.Process.__init__",
        "bpytop.floating_humanizer",
        "bpytop.ProcCollector._tree",
        "<builtin>.len",
        "<builtin>.round",
        "psutil.Process.parent"
    ],
    "bpytop.ProcCollector._tree": [
        "psutil.pid_exists",
        "<builtin>.sorted",
        "_collections.defaultdict",
        "<builtin>.list",
        "bpytop.ProcCollector._tree.create_tree",
        "<builtin>.min",
        "psutil.process_iter",
        "<builtin>.len"
    ],
    "psutil.process_iter": [
        "psutil.process_iter.remove",
        "psutil.pids",
        "<builtin>.sorted",
        "<builtin>.list",
        "psutil.process_iter.add",
        "<builtin>.set"
    ],
    "bpytop.ProcCollector._collect.<lambda1>": [
        "<builtin>.eval"
    ],
    "<builtin>.eval": [],
    "psutil.Process.__init__": [
        "psutil.Process._init"
    ],
    "psutil.Process.as_dict": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "psutil.Process.oneshot",
        "<builtin>.dict",
        "<builtin>.map",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "psutil.Process.parent": [
        "psutil.pids",
        "psutil.Process.create_time",
        "psutil.Process.__init__",
        "psutil.Process.ppid"
    ],
    "psutil.Process.name": [
        "psutil._pslinux.Process.name",
        "psutil._psbsd.Process.name",
        "ntpath.basename",
        "posixpath.basename",
        "psutil.Process.cmdline",
        "psutil._psaix.Process.name",
        "psutil._pswindows.Process.name",
        "<builtin>.len",
        "psutil._pssunos.Process.name"
    ],
    "_collections.defaultdict": [],
    "bpytop.ProcCollector._tree.<lambda1>": [
        "<builtin>.eval"
    ],
    "bpytop.ProcCollector._tree.create_tree": [
        "psutil.Process.name",
        "bpytop.ProcCollector._tree.create_tree",
        "<builtin>.hasattr",
        "psutil.Process.__init__",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.round"
    ],
    "bpytop.ProcCollector.sorting": [
        "<builtin>.len",
        "bpytop.Collector.collect"
    ],
    "bpytop.ProcCollector._draw": [
        "bpytop.ProcBox._draw_fg"
    ],
    "bpytop.Menu": [
        "bpytop.Mv.down",
        "bpytop.Color.fg",
        "<builtin>.len",
        "<builtin>.range",
        "bpytop.Mv.left",
        "bpytop.Fx.trans"
    ],
    "bpytop.Menu.main": [
        "bpytop.Mv.down",
        "bpytop.Draw.now",
        "bpytop.Timer.left",
        "bpytop.Collector.collect",
        "bpytop.Mv.right",
        "bpytop.Key.input_wait",
        "<builtin>.len",
        "bpytop.Menu.options",
        "bpytop.Menu.help",
        "logging.Logger.warning",
        "bpytop.Mv.to",
        "bpytop.Key.mouse_moved",
        "bpytop.Key.get",
        "bpytop.Key.get_mouse",
        "bpytop.Banner.draw",
        "bpytop.Fx.uncolor",
        "threading.Event.wait",
        "<builtin>.list",
        "bpytop.Draw.saved_buffer",
        "bpytop.clean_quit",
        "bpytop.Mv.left",
        "bpytop.Timer.not_zero",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Timer.left": [
        "bpytop.Timer.stamp",
        "time.time"
    ],
    "bpytop.Menu.options": [
        "bpytop.Mv.down",
        "bpytop.Draw.now",
        "bpytop.Timer.left",
        "bpytop.Collector.collect",
        "bpytop.Mv.right",
        "bpytop.Key.input_wait",
        "bpytop.Theme.refresh",
        "<builtin>.setattr",
        "bpytop.CpuCollector.get_sensors",
        "<builtin>.min",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.round",
        "logging.Logger.warning",
        "bpytop.Draw.clear",
        "bpytop.Mv.to",
        "<builtin>.enumerate",
        "bpytop.create_box",
        "<builtin>.type",
        "<builtin>.getattr",
        "<builtin>.max",
        "bpytop.Key.get",
        "bpytop.Timer.finish",
        "<builtin>.str",
        "bpytop.Box.draw_update_ms",
        "bpytop.Key.get_mouse",
        "<builtin>.range",
        "bpytop.ProcCollector.sorting",
        "<builtin>.int",
        "bpytop.Term.refresh",
        "bpytop.Fx.uncolor",
        "bpytop.Banner.draw",
        "threading.Event.wait",
        "<builtin>.list",
        "bpytop.Draw.saved_buffer",
        "bpytop.clean_quit",
        "logging.Logger.info",
        "bpytop.Mv.left",
        "bpytop.Timer.not_zero",
        "logging.Logger.setLevel",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Menu.help": [
        "bpytop.Mv.down",
        "bpytop.Draw.now",
        "bpytop.Timer.left",
        "bpytop.Collector.collect",
        "bpytop.Mv.right",
        "bpytop.Key.input_wait",
        "<builtin>.len",
        "logging.Logger.warning",
        "bpytop.Mv.to",
        "<builtin>.enumerate",
        "bpytop.create_box",
        "bpytop.Key.get",
        "bpytop.Key.get_mouse",
        "<builtin>.range",
        "bpytop.Banner.draw",
        "bpytop.Fx.uncolor",
        "threading.Event.wait",
        "bpytop.Draw.saved_buffer",
        "bpytop.clean_quit",
        "bpytop.Mv.left",
        "bpytop.Timer.not_zero",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Timer.not_zero": [
        "time.time"
    ],
    "bpytop.Timer.stamp": [
        "time.time"
    ],
    "bpytop.Timer": [],
    "bpytop.UpdateChecker": [],
    "bpytop.UpdateChecker.run": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.UpdateChecker._checker": [
        "logging.Logger.exception",
        "subprocess.run",
        "shutil.which"
    ],
    "subprocess.run": [
        "subprocess.Popen.__init__",
        "<builtin>.ValueError",
        "subprocess.CalledProcessError.__init__",
        "subprocess.CompletedProcess.__init__"
    ],
    "bpytop.Init": [],
    "bpytop.Init.start": [
        "bpytop.Mv.down",
        "random.Random.randint",
        "bpytop.Color.fg",
        "bpytop.Banner.draw",
        "bpytop.Mv.to",
        "bpytop.Mv.left",
        "bpytop.Draw.out",
        "<builtin>.str",
        "bpytop.Graph.__init__",
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "bpytop.Fx.trans",
        "<builtin>.round"
    ],
    "random.Random.randint": [
        "random.Random.randrange"
    ],
    "bpytop.Init.success": [
        "bpytop.Draw.buffer",
        "bpytop.Mv.right",
        "bpytop.Init.draw_bg"
    ],
    "bpytop.Init.draw_bg": [
        "random.Random.randint",
        "time.sleep",
        "bpytop.Mv.to",
        "bpytop.Graph.__init__",
        "bpytop.Draw.out",
        "<builtin>.range",
        "bpytop.Draw.buffer"
    ],
    "bpytop.Init.fail": [
        "bpytop.Draw.buffer",
        "logging.Logger.exception",
        "bpytop.clean_quit",
        "time.sleep"
    ],
    "bpytop.Init.done": [
        "bpytop.Draw.clear",
        "bpytop.Draw.now",
        "bpytop.Init.draw_bg"
    ],
    "bpytop.get_cpu_name": [
        "re.sub",
        "subprocess.check_output"
    ],
    "re.sub": [
        "re._compile"
    ],
    "bpytop.get_cpu_core_mapping": [
        "posixpath.isfile",
        "<builtin>.open",
        "ntpath.isfile",
        "<builtin>.range",
        "<builtin>.int"
    ],
    "bpytop.now_sleeping": [
        "bpytop.Draw.now",
        "bpytop.Term.title",
        "bpytop.Term.echo",
        "bpytop.Key.stop",
        "bpytop.Collector.stop"
    ],
    "bpytop.now_awake": [
        "bpytop.Draw.now",
        "bpytop.Term.title",
        "bpytop.Collector.start",
        "bpytop.Term.echo",
        "bpytop.Box.draw_bg",
        "bpytop.Key.start",
        "bpytop.Box.calc_sizes",
        "bpytop.Term.refresh"
    ],
    "bpytop.quit_sigint": [
        "bpytop.clean_quit"
    ],
    "_thread.interrupt_main": [],
    "bpytop.process_keys": [
        "bpytop.Collector.collect",
        "<builtin>.len",
        "bpytop.Menu.options",
        "bpytop.Menu.help",
        "bpytop.Draw.clear",
        "logging.Logger.error",
        "bpytop.ProcBox.selector",
        "psutil.pid_exists",
        "bpytop.Key.get",
        "bpytop.Menu.main",
        "bpytop.Box.draw_update_ms",
        "bpytop.Key.get_mouse",
        "bpytop.ProcCollector.sorting",
        "bpytop.Term.refresh",
        "threading.Event.wait",
        "<builtin>.list",
        "bpytop.clean_quit",
        "bpytop.Key.has_key",
        "logging.Logger.exception",
        "bpytop.NetCollector.switch"
    ],
    "bpytop.main": [
        "bpytop.Draw.now",
        "bpytop.Init.fail",
        "bpytop.Collector.collect",
        "bpytop.CpuCollector.get_sensors",
        "<builtin>.isinstance",
        "bpytop.Fx.trans",
        "bpytop.TimeIt.stop",
        "bpytop.Init.done",
        "bpytop.TimeIt.start",
        "bpytop.Draw.out",
        "bpytop.Init.success",
        "sys.stdin.reconfigure",
        "bpytop.Box.calc_sizes",
        "bpytop.Key.start",
        "bpytop.main.run",
        "bpytop.Term.echo",
        "bpytop.UpdateChecker.run",
        "bpytop.Init.start",
        "bpytop.Term.refresh",
        "bpytop.Term.title",
        "bpytop.Collector.start",
        "bpytop.Box.draw_bg",
        "threading.Event.wait",
        "bpytop.Theme.__init__",
        "bpytop.clean_quit",
        "bpytop.Draw.buffer",
        "logging.Logger.exception"
    ],
    "sys.stdin.reconfigure": [],
    "bpytop.main.run": [
        "bpytop.process_keys",
        "bpytop.Timer.left",
        "bpytop.Collector.collect",
        "bpytop.Key.input_wait",
        "bpytop.Timer.not_zero",
        "bpytop.Timer.stamp",
        "bpytop.Term.refresh"
    ],
    "logging.handlers.BaseRotatingHandler": [],
    "logging.handlers.BaseRotatingHandler.__init__": [
        "logging.FileHandler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "posixpath.abspath",
        "logging.Handler.__init__",
        "logging.StreamHandler.__init__",
        "logging.FileHandler._open",
        "ntpath.abspath"
    ],
    "logging.handlers.BaseRotatingHandler.emit": [
        "logging.FileHandler.emit"
    ],
    "logging.FileHandler.emit": [
        "logging.StreamHandler.emit",
        "logging.FileHandler._open",
        "logging.FileHandler.emit"
    ],
    "logging.handlers.BaseRotatingHandler.rotation_filename": [
        "<builtin>.callable"
    ],
    "<builtin>.callable": [],
    "logging.handlers.BaseRotatingHandler.rotate": [
        "<builtin>.callable",
        "ntpath.exists",
        "posixpath.exists"
    ],
    "ntpath.exists": [],
    "posixpath.exists": [],
    "logging.handlers.RotatingFileHandler": [],
    "logging.handlers.RotatingFileHandler.doRollover": [
        "logging.handlers.BaseRotatingHandler.rotation_filename",
        "ntpath.exists",
        "posixpath.exists",
        "<builtin>.range",
        "logging.FileHandler._open",
        "logging.handlers.BaseRotatingHandler.rotate"
    ],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "logging.handlers.RotatingFileHandler.shouldRollover": [
        "logging.FileHandler._open",
        "<builtin>.len"
    ],
    "logging.handlers.TimedRotatingFileHandler": [],
    "logging.handlers.TimedRotatingFileHandler.__init__": [
        "<builtin>.ValueError",
        "logging.handlers.TimedRotatingFileHandler.computeRollover",
        "logging.handlers.BaseRotatingHandler.__init__",
        "ntpath.exists",
        "posixpath.exists",
        "time.time",
        "<builtin>.len",
        "re.compile",
        "<builtin>.int"
    ],
    "logging.handlers.TimedRotatingFileHandler.computeRollover": [
        "time.localtime",
        "time.gmtime"
    ],
    "time.gmtime": [],
    "time.localtime": [],
    "logging.handlers.TimedRotatingFileHandler.shouldRollover": [
        "<builtin>.int",
        "time.time"
    ],
    "logging.handlers.TimedRotatingFileHandler.getFilesToDelete": [
        "posixpath.join",
        "ntpath.split",
        "<builtin>.len",
        "ntpath.join",
        "posixpath.split"
    ],
    "posixpath.split": [
        "<builtin>.len",
        "sys.base_prefix.rfind",
        "sys.path.rfind",
        "posixpath._get_sep"
    ],
    "ntpath.split": [
        "ntpath._get_bothseps",
        "<builtin>.len",
        "ntpath.splitdrive"
    ],
    "posixpath.join": [
        "sys.path.endswith",
        "sys.base_prefix.endswith",
        "<builtin>.map",
        "posixpath._get_sep",
        "genericpath._check_arg_types"
    ],
    "ntpath.join": [
        "genericpath._check_arg_types",
        "<builtin>.isinstance",
        "<builtin>.map",
        "ntpath.splitdrive"
    ],
    "logging.handlers.TimedRotatingFileHandler.doRollover": [
        "time.localtime",
        "logging.handlers.BaseRotatingHandler.rotation_filename",
        "logging.handlers.TimedRotatingFileHandler.computeRollover",
        "ntpath.exists",
        "posixpath.exists",
        "time.time",
        "time.strftime",
        "logging.handlers.TimedRotatingFileHandler.getFilesToDelete",
        "time.gmtime",
        "logging.FileHandler._open",
        "<builtin>.int",
        "logging.handlers.BaseRotatingHandler.rotate"
    ],
    "logging.handlers.WatchedFileHandler": [],
    "logging.handlers.WatchedFileHandler.__init__": [
        "logging.FileHandler.__init__",
        "logging.handlers.WatchedFileHandler._statstream"
    ],
    "logging.handlers.WatchedFileHandler._statstream": [],
    "logging.handlers.WatchedFileHandler.reopenIfNeeded": [
        "logging.FileHandler._open",
        "logging.handlers.WatchedFileHandler._statstream"
    ],
    "logging.handlers.WatchedFileHandler.emit": [
        "logging.handlers.WatchedFileHandler.reopenIfNeeded",
        "logging.FileHandler.emit"
    ],
    "logging.handlers.SocketHandler": [],
    "logging.handlers.SocketHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.NullHandler.createLock",
        "logging._checkLevel",
        "logging.Handler.createLock",
        "logging._addHandlerRef",
        "logging.Filterer.__init__"
    ],
    "logging.handlers.SocketHandler.makeSocket": [],
    "logging.handlers.SocketHandler.createSocket": [
        "logging.handlers.SocketHandler.makeSocket",
        "time.time"
    ],
    "logging.handlers.SocketHandler.send": [
        "logging.handlers.SocketHandler.createSocket"
    ],
    "logging.handlers.SocketHandler.makePickle": [
        "<builtin>.dict",
        "logging.Handler.format",
        "<builtin>.len"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "<builtin>.dict": [],
    "logging.handlers.SocketHandler.handleError": [
        "logging.Handler.handleError"
    ],
    "logging.Handler.handleError": [
        "sys.exc_info",
        "traceback.print_exception",
        "posixpath.dirname",
        "ntpath.dirname",
        "traceback.print_stack",
        "sys.stderr.write"
    ],
    "logging.handlers.SocketHandler.emit": [
        "logging.handlers.SocketHandler.handleError",
        "logging.handlers.SocketHandler.makePickle",
        "logging.handlers.SocketHandler.send"
    ],
    "logging.handlers.SocketHandler.close": [
        "logging.Handler.release",
        "logging.FileHandler.close",
        "logging.Handler.acquire",
        "logging.Handler.close"
    ],
    "logging.Handler.acquire": [],
    "logging.FileHandler.close": [
        "logging.Handler.release",
        "logging.Handler.acquire",
        "logging.Handler.close",
        "<builtin>.hasattr",
        "logging.FileHandler.close",
        "logging.StreamHandler.flush"
    ],
    "logging.Handler.close": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging.Handler.release": [],
    "logging.handlers.DatagramHandler": [],
    "logging.handlers.DatagramHandler.__init__": [
        "logging.handlers.SocketHandler.__init__"
    ],
    "logging.handlers.DatagramHandler.makeSocket": [],
    "logging.handlers.DatagramHandler.send": [
        "logging.handlers.SocketHandler.createSocket"
    ],
    "logging.handlers.SysLogHandler": [],
    "logging.handlers.SysLogHandler.__init__": [
        "<builtin>.isinstance",
        "<builtin>.OSError",
        "logging.Handler.__init__",
        "logging.handlers.SysLogHandler._connect_unixsocket"
    ],
    "logging.handlers.SysLogHandler._connect_unixsocket": [],
    "<builtin>.OSError": [],
    "logging.handlers.SysLogHandler.encodePriority": [
        "<builtin>.isinstance"
    ],
    "logging.handlers.SysLogHandler.close": [
        "logging.Handler.release",
        "logging.FileHandler.close",
        "logging.Handler.acquire",
        "logging.Handler.close"
    ],
    "logging.handlers.SysLogHandler.mapPriority": [],
    "logging.handlers.SysLogHandler.emit": [
        "logging.handlers.SysLogHandler.encodePriority",
        "logging.handlers.SysLogHandler._connect_unixsocket",
        "logging.handlers.SysLogHandler.mapPriority",
        "logging.Handler.handleError",
        "logging.Handler.format"
    ],
    "logging.handlers.SMTPHandler": [],
    "logging.handlers.SMTPHandler.__init__": [
        "<builtin>.isinstance",
        "logging.Handler.__init__"
    ],
    "logging.handlers.SMTPHandler.getSubject": [],
    "smtplib.SMTP.__init__": [
        "smtplib.SMTP.close",
        "smtplib.SMTPResponseException.__init__",
        "smtplib.SMTP.connect"
    ],
    "email.message.EmailMessage.set_content": [
        "<builtin>.super"
    ],
    "smtplib.SMTP.ehlo": [
        "smtplib.SMTP.putcmd",
        "re.match",
        "<builtin>.repr",
        "<builtin>.len",
        "<builtin>.isinstance",
        "smtplib.SMTP.close",
        "smtplib.SMTP.getreply"
    ],
    "smtplib.SMTP.login": [
        "<builtin>.getattr",
        "smtplib.SMTP.has_extn",
        "smtplib.SMTP.auth",
        "smtplib.SMTP.ehlo_or_helo_if_needed"
    ],
    "smtplib.SMTP.send_message": [
        "<builtin>.ValueError",
        "io.BytesIO",
        "<builtin>.len",
        "smtplib.SMTP.ehlo_or_helo_if_needed",
        "smtplib.SMTP.sendmail",
        "smtplib.SMTP.has_extn"
    ],
    "smtplib.SMTP.quit": [
        "smtplib.SMTP.close",
        "smtplib.SMTP.docmd"
    ],
    "logging.handlers.NTEventLogHandler": [],
    "logging.handlers.NTEventLogHandler.__init__": [
        "logging.Handler.__init__",
        "posixpath.join",
        "<builtin>.print",
        "ntpath.split",
        "win32evtlogutil.AddSourceToRegistry",
        "ntpath.join",
        "posixpath.split"
    ],
    "win32evtlogutil.AddSourceToRegistry": [],
    "logging.handlers.NTEventLogHandler.getMessageID": [],
    "logging.handlers.NTEventLogHandler.getEventCategory": [],
    "logging.handlers.NTEventLogHandler.getEventType": [],
    "logging.handlers.NTEventLogHandler.emit": [
        "logging.handlers.NTEventLogHandler.getEventCategory",
        "win32evtlogutil.ReportEvent",
        "logging.handlers.NTEventLogHandler.getEventType",
        "logging.Handler.handleError",
        "logging.Handler.format",
        "logging.handlers.NTEventLogHandler.getMessageID"
    ],
    "win32evtlogutil.ReportEvent": [],
    "logging.handlers.NTEventLogHandler.close": [
        "logging.FileHandler.close",
        "logging.Handler.close"
    ],
    "logging.handlers.HTTPHandler": [],
    "logging.handlers.HTTPHandler.__init__": [
        "<builtin>.ValueError",
        "logging.Handler.__init__"
    ],
    "logging.handlers.HTTPHandler.mapLogRecord": [],
    "base64.b64encode": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "logging.handlers.BufferingHandler": [],
    "logging.handlers.BufferingHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.handlers.BufferingHandler.shouldFlush": [
        "<builtin>.len"
    ],
    "logging.handlers.BufferingHandler.emit": [
        "logging.handlers.BufferingHandler.flush",
        "logging.handlers.BufferingHandler.shouldFlush"
    ],
    "logging.handlers.BufferingHandler.flush": [
        "logging.Handler.release",
        "logging.Handler.acquire"
    ],
    "logging.handlers.BufferingHandler.close": [
        "logging.handlers.BufferingHandler.flush",
        "logging.FileHandler.close",
        "logging.Handler.close"
    ],
    "logging.handlers.MemoryHandler": [],
    "logging.handlers.MemoryHandler.__init__": [
        "logging.handlers.BufferingHandler.__init__"
    ],
    "logging.handlers.MemoryHandler.shouldFlush": [
        "<builtin>.len"
    ],
    "logging.handlers.MemoryHandler.setTarget": [],
    "logging.handlers.MemoryHandler.flush": [
        "logging.Handler.release",
        "logging.Handler.acquire"
    ],
    "logging.handlers.MemoryHandler.close": [
        "logging.handlers.MemoryHandler.flush",
        "logging.Handler.release",
        "logging.Handler.acquire",
        "logging.handlers.BufferingHandler.close"
    ],
    "logging.handlers.QueueHandler": [],
    "logging.handlers.QueueHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.handlers.QueueHandler.enqueue": [],
    "logging.handlers.QueueHandler.prepare": [
        "logging.Handler.format"
    ],
    "logging.handlers.QueueHandler.emit": [
        "logging.handlers.QueueHandler.enqueue",
        "logging.handlers.QueueHandler.prepare",
        "logging.Handler.handleError"
    ],
    "logging.handlers.QueueListener": [],
    "logging.handlers.QueueListener.__init__": [],
    "logging.handlers.QueueListener.dequeue": [],
    "logging.handlers.QueueListener.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "logging.handlers.QueueListener.prepare": [],
    "logging.handlers.QueueListener.handle": [
        "logging.handlers.QueueListener.prepare"
    ],
    "logging.handlers.QueueListener._monitor": [
        "logging.handlers.QueueListener.dequeue",
        "logging.handlers.QueueListener.handle",
        "<builtin>.hasattr"
    ],
    "logging.handlers.QueueListener.enqueue_sentinel": [],
    "logging.handlers.QueueListener.stop": [
        "threading.Thread.join",
        "logging.handlers.QueueListener.enqueue_sentinel",
        "threading._DummyThread.join"
    ],
    "<builtin>.globals": [],
    "http.client._encode": [
        "<builtin>.UnicodeEncodeError"
    ],
    "<builtin>.UnicodeEncodeError": [],
    "http.client.HTTPMessage": [],
    "http.client.HTTPMessage.getallmatchingheaders": [
        "<builtin>.len"
    ],
    "http.client.parse_headers": [
        "http.client.LineTooLong.__init__",
        "<builtin>.len"
    ],
    "http.client.LineTooLong.__init__": [],
    "http.client.HTTPResponse": [],
    "http.client.HTTPResponse.__init__": [],
    "http.client.HTTPResponse._read_status": [
        "http.client.BadStatusLine.__init__",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.print",
        "http.client.LineTooLong.__init__",
        "<builtin>.repr",
        "<builtin>.str",
        "http.client.RemoteDisconnected.__init__",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "http.client.RemoteDisconnected.__init__": [
        "http.client.BadStatusLine.__init__"
    ],
    "http.client.HTTPResponse._close_conn": [],
    "http.client.BadStatusLine.__init__": [
        "<builtin>.repr"
    ],
    "http.client.HTTPResponse.begin": [
        "<builtin>.print",
        "http.client.LineTooLong.__init__",
        "http.client.parse_headers",
        "http.client.HTTPResponse._read_status",
        "<builtin>.len",
        "http.client.HTTPResponse._check_close",
        "<builtin>.int",
        "http.client.UnknownProtocol.__init__"
    ],
    "http.client.UnknownProtocol.__init__": [],
    "http.client.HTTPResponse._check_close": [],
    "http.client.HTTPResponse.close": [
        "<builtin>.super",
        "http.client.HTTPResponse._close_conn"
    ],
    "<builtin>.super": [],
    "http.client.HTTPResponse.flush": [
        "<builtin>.super"
    ],
    "http.client.HTTPResponse.readable": [],
    "http.client.HTTPResponse.isclosed": [],
    "http.client.HTTPResponse.read": [
        "http.client.HTTPResponse._close_conn",
        "<builtin>.memoryview",
        "http.client.HTTPResponse._readall_chunked",
        "<builtin>.bytearray",
        "http.client.HTTPResponse._safe_read",
        "http.client.HTTPResponse.readinto"
    ],
    "<builtin>.bytearray": [],
    "http.client.HTTPResponse.readinto": [
        "http.client.HTTPResponse._readinto_chunked",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "<builtin>.memoryview": [],
    "http.client.HTTPResponse._readall_chunked": [
        "http.client.IncompleteRead.__init__",
        "http.client.HTTPResponse._get_chunk_left",
        "http.client.HTTPResponse._safe_read"
    ],
    "http.client.HTTPResponse._safe_read": [
        "http.client.IncompleteRead.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._readinto_chunked": [
        "<builtin>.memoryview",
        "http.client.HTTPResponse._safe_readinto",
        "<builtin>.bytes",
        "http.client.HTTPResponse._get_chunk_left",
        "http.client.IncompleteRead.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._read_next_chunk_size": [
        "<builtin>.int",
        "http.client.LineTooLong.__init__",
        "<builtin>.len",
        "http.client.HTTPResponse._close_conn"
    ],
    "http.client.HTTPResponse._read_and_discard_trailer": [
        "http.client.LineTooLong.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._get_chunk_left": [
        "http.client.HTTPResponse._close_conn",
        "http.client.IncompleteRead.__init__",
        "http.client.HTTPResponse._read_next_chunk_size",
        "http.client.HTTPResponse._read_and_discard_trailer",
        "http.client.HTTPResponse._safe_read"
    ],
    "http.client.IncompleteRead.__init__": [],
    "http.client.HTTPResponse._safe_readinto": [
        "http.client.IncompleteRead.__init__",
        "<builtin>.bytes",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "http.client.HTTPResponse.read1": [
        "http.client.HTTPResponse._read1_chunked",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._read1_chunked": [
        "http.client.IncompleteRead.__init__",
        "http.client.HTTPResponse._get_chunk_left",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.peek": [
        "http.client.HTTPResponse._peek_chunked"
    ],
    "http.client.HTTPResponse._peek_chunked": [
        "http.client.HTTPResponse._get_chunk_left"
    ],
    "http.client.HTTPResponse.readline": [
        "<builtin>.super",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.fileno": [],
    "http.client.HTTPResponse.getheader": [
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "http.client.HTTPResponse.getheaders": [
        "<builtin>.list"
    ],
    "http.client.HTTPResponse.__iter__": [],
    "http.client.HTTPResponse.info": [],
    "http.client.HTTPResponse.geturl": [],
    "http.client.HTTPResponse.getcode": [],
    "http.client.HTTPConnection": [],
    "http.client.HTTPConnection._is_textIO": [
        "<builtin>.isinstance"
    ],
    "http.client.HTTPConnection._get_content_length": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.memoryview",
        "<builtin>.hasattr"
    ],
    "http.client.HTTPConnection.__init__": [
        "http.client.HTTPConnection._validate_host",
        "http.client.HTTPConnection._get_hostport"
    ],
    "http.client.HTTPConnection._get_hostport": [
        "<builtin>.int"
    ],
    "http.client.HTTPConnection._validate_host": [],
    "http.client.HTTPConnection.set_tunnel": [
        "<builtin>.RuntimeError",
        "http.client.HTTPConnection._get_hostport"
    ],
    "<builtin>.RuntimeError": [],
    "http.client.HTTPConnection.set_debuglevel": [],
    "http.client.HTTPConnection._tunnel": [
        "http.client.HTTPResponse.__init__",
        "http.client.LineTooLong.__init__",
        "<builtin>.print",
        "http.client.HTTPResponse._read_status",
        "<builtin>.OSError",
        "<builtin>.len",
        "http.client.HTTPConnection.close",
        "http.client.HTTPConnection.send"
    ],
    "http.client.HTTPConnection.send": [
        "<builtin>.print",
        "<builtin>.repr",
        "http.client.HTTPConnection.connect",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "http.client.HTTPConnection._is_textIO",
        "<builtin>.isinstance"
    ],
    "http.client.HTTPConnection.close": [
        "http.client.HTTPResponse.close"
    ],
    "http.client.HTTPConnection.connect": [
        "http.client.HTTPConnection._tunnel"
    ],
    "<builtin>.TypeError": [],
    "http.client.HTTPConnection._output": [],
    "http.client.HTTPConnection._read_readable": [
        "<builtin>.print",
        "http.client.HTTPConnection._is_textIO"
    ],
    "http.client.HTTPConnection._send_output": [
        "<builtin>.memoryview",
        "<builtin>.iter",
        "<builtin>.print",
        "<builtin>.type",
        "http.client.HTTPConnection._read_readable",
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<builtin>.len",
        "http.client.HTTPConnection.send"
    ],
    "<builtin>.iter": [],
    "http.client.HTTPConnection.putrequest": [
        "http.client.HTTPConnection._encode_request",
        "urllib.parse.urlsplit",
        "http.client.HTTPResponse.isclosed",
        "http.client.HTTPConnection._validate_path",
        "http.client.HTTPConnection._output",
        "http.client.HTTPConnection.putheader"
    ],
    "http.client.HTTPConnection._validate_path": [],
    "http.client.HTTPConnection._encode_request": [],
    "urllib.parse.urlsplit": [
        "urllib.parse.clear_cache",
        "<builtin>.ValueError",
        "urllib.parse._coerce_args",
        "urllib.parse._checknetloc",
        "urllib.parse._splitnetloc",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.bool"
    ],
    "http.client.HTTPConnection.putheader": [
        "<builtin>.ValueError",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.str",
        "<builtin>.hasattr",
        "http.client.HTTPConnection._output",
        "<builtin>.isinstance"
    ],
    "http.client.HTTPConnection.endheaders": [
        "http.client.HTTPConnection._send_output"
    ],
    "http.client.HTTPConnection.request": [
        "http.client.HTTPConnection._send_request"
    ],
    "http.client.HTTPConnection._send_request": [
        "<builtin>.print",
        "http.client._encode",
        "http.client.HTTPConnection.endheaders",
        "http.client.HTTPConnection._get_content_length",
        "<builtin>.frozenset",
        "<builtin>.str",
        "http.client.HTTPConnection.putheader",
        "http.client.HTTPConnection.putrequest",
        "<builtin>.isinstance"
    ],
    "<builtin>.frozenset": [],
    "http.client.HTTPConnection.getresponse": [
        "http.client.HTTPResponse.begin",
        "http.client.HTTPResponse.isclosed",
        "http.client.HTTPResponse.__init__",
        "http.client.HTTPResponse.close",
        "http.client.HTTPConnection.close"
    ],
    "http.client.HTTPSConnection": [],
    "warnings.warn": [
        "sys.__dict__.setdefault",
        "<builtin>.TypeError",
        "<builtin>.type",
        "_warnings.warn_explicit",
        "<builtin>.range",
        "<builtin>.isinstance",
        "warnings._is_internal_frame",
        "warnings._next_external_frame",
        "<builtin>.issubclass",
        "sys._getframe"
    ],
    "http.client.HTTPSConnection.connect": [
        "<builtin>.super"
    ],
    "http.client.HTTPException": [],
    "http.client.NotConnected": [],
    "http.client.InvalidURL": [],
    "http.client.UnknownProtocol": [],
    "http.client.UnknownTransferEncoding": [],
    "http.client.UnimplementedFileMode": [],
    "http.client.IncompleteRead": [],
    "http.client.IncompleteRead.__repr__": [
        "<builtin>.len"
    ],
    "http.client.ImproperConnectionState": [],
    "http.client.CannotSendRequest": [],
    "http.client.CannotSendHeader": [],
    "http.client.ResponseNotReady": [],
    "http.client.BadStatusLine": [],
    "http.client.LineTooLong": [],
    "http.client.RemoteDisconnected": [],
    "<builtin>.reversed": [],
    "<builtin>.set": [],
    "<builtin>.zip": [],
    "_collections_abc.<lambda1>": [],
    "_collections_abc._coro": [],
    "_collections_abc._ag": [],
    "_collections_abc._check_methods": [],
    "_collections_abc.Hashable": [
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "_collections_abc.Hashable.__hash__": [],
    "_collections_abc.Hashable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Awaitable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Awaitable.__await__": [],
    "_collections_abc.Awaitable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Coroutine": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Coroutine.send": [],
    "_collections_abc.Coroutine.throw": [],
    "_collections_abc.Coroutine.close": [
        "<builtin>.RuntimeError",
        "_collections_abc.Coroutine.throw"
    ],
    "_collections_abc.Coroutine.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.AsyncIterable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.AsyncIterable.__aiter__": [],
    "_collections_abc.AsyncIterable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.AsyncIterator": [
        "abc.abstractmethod"
    ],
    "_collections_abc.AsyncIterator.__anext__": [],
    "_collections_abc.AsyncIterator.__aiter__": [],
    "_collections_abc.AsyncIterator.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.AsyncGenerator": [
        "abc.abstractmethod"
    ],
    "_collections_abc.AsyncGenerator.__anext__": [
        "_collections_abc.AsyncGenerator.asend"
    ],
    "_collections_abc.AsyncGenerator.asend": [],
    "_collections_abc.AsyncGenerator.athrow": [],
    "_collections_abc.AsyncGenerator.aclose": [
        "<builtin>.RuntimeError",
        "_collections_abc.AsyncGenerator.athrow"
    ],
    "_collections_abc.AsyncGenerator.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Iterable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Iterable.__iter__": [],
    "_collections_abc.Iterable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Iterator": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Iterator.__next__": [],
    "_collections_abc.Iterator.__iter__": [],
    "_collections_abc.Iterator.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Reversible": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Reversible.__reversed__": [],
    "_collections_abc.Reversible.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Generator": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Generator.__next__": [
        "_collections_abc.Generator.send"
    ],
    "_collections_abc.Generator.send": [],
    "_collections_abc.Generator.throw": [],
    "_collections_abc.Generator.close": [
        "<builtin>.RuntimeError",
        "_collections_abc.Generator.throw"
    ],
    "_collections_abc.Generator.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Sized": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Sized.__len__": [],
    "_collections_abc.Sized.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Container": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Container.__contains__": [],
    "_collections_abc.Container.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Collection": [],
    "_collections_abc.Collection.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Callable": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Callable.__call__": [],
    "_collections_abc.Callable.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_collections_abc.Set": [],
    "_collections_abc.Set.__le__": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "_collections_abc.Set.__lt__": [
        "<builtin>.isinstance",
        "_collections_abc.Set.__le__",
        "<builtin>.len"
    ],
    "_collections_abc.Set.__gt__": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "_collections_abc.Set.__ge__"
    ],
    "_collections_abc.Set.__ge__": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "_collections_abc.Set.__eq__": [
        "<builtin>.isinstance",
        "_collections_abc.Set.__le__",
        "<builtin>.len"
    ],
    "_collections_abc.Set._from_iterable": [],
    "_collections_abc.Set.__and__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set.isdisjoint": [],
    "_collections_abc.Set.__or__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set.__sub__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set.__rsub__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set.__xor__": [
        "<builtin>.isinstance",
        "_collections_abc.Set._from_iterable"
    ],
    "_collections_abc.Set._hash": [
        "<builtin>.hash",
        "<builtin>.len"
    ],
    "<builtin>.hash": [],
    "_collections_abc.MutableSet": [
        "abc.abstractmethod"
    ],
    "_collections_abc.MutableSet.add": [],
    "_collections_abc.MutableSet.discard": [],
    "_collections_abc.MutableSet.remove": [
        "_collections_abc.MutableSet.discard",
        "<builtin>.KeyError"
    ],
    "<builtin>.KeyError": [],
    "_collections_abc.MutableSet.pop": [
        "_collections_abc.MutableSet.discard",
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "<builtin>.next": [],
    "_collections_abc.MutableSet.clear": [
        "_collections_abc.MutableSet.pop"
    ],
    "_collections_abc.MutableSet.__ior__": [
        "_collections_abc.MutableSet.add"
    ],
    "_collections_abc.MutableSet.__iand__": [
        "_collections_abc.MutableSet.discard"
    ],
    "_collections_abc.MutableSet.__ixor__": [
        "_collections_abc.MutableSet.add",
        "_collections_abc.MutableSet.discard",
        "_collections_abc.MutableSet.clear",
        "_collections_abc.Set._from_iterable",
        "<builtin>.isinstance"
    ],
    "_collections_abc.MutableSet.__isub__": [
        "_collections_abc.MutableSet.discard",
        "_collections_abc.MutableSet.clear"
    ],
    "_collections_abc.Mapping": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Mapping.__getitem__": [],
    "_collections_abc.Mapping.get": [],
    "_collections_abc.Mapping.__contains__": [],
    "_collections_abc.Mapping.keys": [
        "_collections_abc.MappingView.__init__"
    ],
    "_collections_abc.MappingView.__init__": [],
    "_collections_abc.Mapping.items": [
        "_collections_abc.MappingView.__init__"
    ],
    "_collections_abc.Mapping.values": [
        "_collections_abc.MappingView.__init__"
    ],
    "_collections_abc.Mapping.__eq__": [
        "weakref.WeakKeyDictionary.items",
        "<builtin>.dict",
        "<builtin>.isinstance",
        "weakref.WeakValueDictionary.items",
        "_collections_abc.Mapping.items"
    ],
    "weakref.WeakValueDictionary.items": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakKeyDictionary.items": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "_collections_abc.MappingView": [],
    "_collections_abc.MappingView.__len__": [
        "<builtin>.len"
    ],
    "_collections_abc.MappingView.__repr__": [],
    "_collections_abc.KeysView": [],
    "_collections_abc.KeysView._from_iterable": [
        "<builtin>.set"
    ],
    "_collections_abc.KeysView.__contains__": [],
    "_collections_abc.KeysView.__iter__": [],
    "_collections_abc.ItemsView": [],
    "_collections_abc.ItemsView._from_iterable": [
        "<builtin>.set"
    ],
    "_collections_abc.ItemsView.__contains__": [],
    "_collections_abc.ItemsView.__iter__": [],
    "_collections_abc.ValuesView": [],
    "_collections_abc.ValuesView.__contains__": [],
    "_collections_abc.ValuesView.__iter__": [],
    "_collections_abc.MutableMapping": [
        "<builtin>.object",
        "abc.abstractmethod"
    ],
    "_collections_abc.MutableMapping.__setitem__": [],
    "_collections_abc.MutableMapping.__delitem__": [],
    "<builtin>.object": [],
    "_collections_abc.MutableMapping.pop": [],
    "_collections_abc.MutableMapping.popitem": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "_collections_abc.MutableMapping.clear": [
        "_collections_abc.MutableMapping.popitem",
        "weakref.WeakValueDictionary.popitem",
        "weakref.WeakKeyDictionary.popitem",
        "collections.ChainMap.popitem"
    ],
    "collections.ChainMap.popitem": [
        "<builtin>.KeyError"
    ],
    "weakref.WeakValueDictionary.popitem": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakKeyDictionary.popitem": [],
    "_collections_abc.MutableMapping.update": [
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "_collections_abc.MutableMapping.setdefault": [],
    "_collections_abc.Sequence": [
        "abc.abstractmethod"
    ],
    "_collections_abc.Sequence.__getitem__": [],
    "_collections_abc.Sequence.__iter__": [],
    "_collections_abc.Sequence.__contains__": [
        "_collections_abc.Sequence.__iter__"
    ],
    "_collections_abc.Sequence.__reversed__": [
        "<builtin>.reversed",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "_collections_abc.Sequence.index": [
        "<builtin>.max",
        "<builtin>.len"
    ],
    "_collections_abc.Sequence.count": [
        "<builtin>.sum"
    ],
    "_collections_abc.ByteString": [],
    "_collections_abc.MutableSequence": [
        "abc.abstractmethod"
    ],
    "_collections_abc.MutableSequence.__setitem__": [],
    "_collections_abc.MutableSequence.__delitem__": [],
    "_collections_abc.MutableSequence.insert": [],
    "_collections_abc.MutableSequence.append": [
        "<builtin>.len",
        "_collections_abc.MutableSequence.insert"
    ],
    "_collections_abc.MutableSequence.clear": [
        "_collections_abc.MutableSequence.pop"
    ],
    "_collections_abc.MutableSequence.pop": [],
    "_collections_abc.MutableSequence.reverse": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "_collections_abc.MutableSequence.extend": [
        "<builtin>.list",
        "_collections_abc.MutableSequence.append"
    ],
    "_collections_abc.MutableSequence.remove": [
        "_collections_abc.Sequence.index"
    ],
    "_collections_abc.MutableSequence.__iadd__": [
        "_collections_abc.MutableSequence.extend"
    ],
    "abc.abstractclassmethod": [],
    "abc.abstractclassmethod.__init__": [
        "<builtin>.super"
    ],
    "abc.abstractstaticmethod": [],
    "abc.abstractstaticmethod.__init__": [
        "<builtin>.super"
    ],
    "abc.abstractproperty": [],
    "abc.ABCMeta": [],
    "abc.ABCMeta.__new__": [
        "_abc._abc_init",
        "<builtin>.super"
    ],
    "_abc._abc_init": [],
    "abc.ABCMeta.register": [
        "_abc._abc_register"
    ],
    "_abc._abc_register": [],
    "abc.ABCMeta.__instancecheck__": [
        "_abc._abc_instancecheck"
    ],
    "_abc._abc_instancecheck": [],
    "abc.ABCMeta.__subclasscheck__": [
        "_abc._abc_subclasscheck"
    ],
    "_abc._abc_subclasscheck": [],
    "abc.ABCMeta._dump_registry": [
        "_py_abc.get_cache_token",
        "<builtin>.print",
        "_abc._get_dump",
        "_abc.get_cache_token"
    ],
    "_py_abc.get_cache_token": [],
    "_abc.get_cache_token": [],
    "_abc._get_dump": [],
    "abc.ABCMeta._abc_registry_clear": [
        "_abc._reset_registry"
    ],
    "_abc._reset_registry": [],
    "abc.ABCMeta._abc_caches_clear": [
        "_abc._reset_caches"
    ],
    "_abc._reset_caches": [],
    "abc.ABC": [],
    "_py_abc.ABCMeta": [],
    "_py_abc.ABCMeta.__new__": [
        "<builtin>.super",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.frozenset",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "_weakrefset.WeakSet.__init__": [
        "weakref.WeakKeyDictionary.update",
        "weakref.WeakValueDictionary.update",
        "<builtin>.set",
        "_weakrefset.WeakSet.update"
    ],
    "_py_abc.ABCMeta.register": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "<builtin>.issubclass": [],
    "_py_abc.ABCMeta._dump_registry": [
        "<builtin>.getattr",
        "<builtin>.print",
        "_py_abc.get_cache_token",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "_py_abc.ABCMeta._abc_registry_clear": [],
    "_py_abc.ABCMeta._abc_caches_clear": [
        "_weakrefset.WeakSet.clear"
    ],
    "_weakrefset.WeakSet.clear": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_py_abc.ABCMeta.__instancecheck__": [
        "_py_abc.ABCMeta.__subclasscheck__",
        "<builtin>.type",
        "<builtin>.any"
    ],
    "_py_abc.ABCMeta.__subclasscheck__": [
        "_weakrefset.WeakSet.add",
        "<builtin>.getattr",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.issubclass"
    ],
    "<builtin>.any": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset._IterationGuard.__init__": [
        "_weakref.ref"
    ],
    "_weakref.ref": [],
    "_weakrefset._IterationGuard.__enter__": [],
    "_weakrefset._IterationGuard.__exit__": [],
    "_weakrefset.WeakSet": [],
    "_weakrefset.WeakSet.__init__._remove": [],
    "weakref.WeakKeyDictionary.update": [
        "_weakref.ref",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.dict",
        "weakref.KeyedRef.__init__",
        "<builtin>.hasattr"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.__iter__": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "_weakrefset.WeakSet.__len__": [
        "<builtin>.len"
    ],
    "_weakrefset.WeakSet.__contains__": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__reduce__": [
        "<builtin>.getattr",
        "<builtin>.list"
    ],
    "_weakrefset.WeakSet.copy": [],
    "_weakrefset.WeakSet.pop": [
        "_weakrefset.WeakSet._commit_removals",
        "<builtin>.KeyError"
    ],
    "_weakrefset.WeakSet.remove": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.discard": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__ior__": [
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.difference": [
        "_weakrefset.WeakSet.copy"
    ],
    "_weakrefset.WeakSet.difference_update": [
        "_weakrefset.WeakSet.__isub__"
    ],
    "_weakrefset.WeakSet.__isub__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.intersection": [],
    "_weakrefset.WeakSet.intersection_update": [
        "_weakrefset.WeakSet.__iand__"
    ],
    "_weakrefset.WeakSet.__iand__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.issubset": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__lt__": [
        "<builtin>.map",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.issuperset": [
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.__gt__": [
        "<builtin>.map",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.__eq__": [
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.symmetric_difference": [
        "_weakrefset.WeakSet.copy"
    ],
    "_weakrefset.WeakSet.symmetric_difference_update": [
        "_weakrefset.WeakSet.__ixor__"
    ],
    "_weakrefset.WeakSet.__ixor__": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet.union": [],
    "_weakrefset.WeakSet.isdisjoint": [
        "_weakrefset.WeakSet.intersection",
        "<builtin>.len"
    ],
    "_weakrefset.WeakSet.__repr__": [
        "<builtin>.repr"
    ],
    "http.HTTPStatus": [],
    "http.HTTPStatus.__new__": [],
    "enum._is_descriptor": [
        "<builtin>.hasattr"
    ],
    "enum._is_dunder": [
        "<builtin>.len"
    ],
    "enum._is_sunder": [
        "<builtin>.len"
    ],
    "enum._make_class_unpicklable": [],
    "enum._make_class_unpicklable._break_on_call_reduce": [
        "<builtin>.TypeError"
    ],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum._EnumDict.__init__": [
        "<builtin>.super"
    ],
    "enum._EnumDict.__setitem__": [
        "<builtin>.ValueError",
        "enum._is_dunder",
        "enum._is_descriptor",
        "<builtin>.super",
        "<builtin>.list",
        "<builtin>.setattr",
        "<builtin>.TypeError",
        "<builtin>.set",
        "enum._is_sunder",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "enum.EnumMeta": [],
    "enum.EnumMeta.__prepare__": [
        "<builtin>.getattr",
        "enum.EnumMeta._get_mixins_",
        "enum._EnumDict.__init__"
    ],
    "enum.EnumMeta._get_mixins_": [
        "enum.EnumMeta._get_mixins_._find_data_type",
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "enum.EnumMeta.__new__": [
        "<builtin>.ValueError",
        "enum._make_class_unpicklable",
        "<builtin>.any",
        "<builtin>.getattr",
        "<builtin>.super",
        "<builtin>.setattr",
        "<builtin>.TypeError",
        "<builtin>.set",
        "<builtin>.hasattr",
        "enum.EnumMeta._find_new_",
        "<builtin>.isinstance",
        "enum.EnumMeta._get_mixins_"
    ],
    "enum.EnumMeta._find_new_": [
        "<builtin>.getattr"
    ],
    "enum.EnumMeta.__bool__": [],
    "enum.EnumMeta.__call__": [
        "enum.EnumMeta.__new__",
        "enum.EnumMeta._create_"
    ],
    "enum.EnumMeta._create_": [
        "enum._make_class_unpicklable",
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "enum.EnumMeta._get_mixins_",
        "sys._getframe"
    ],
    "enum.EnumMeta.__contains__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "enum.EnumMeta.__delattr__": [
        "<builtin>.AttributeError",
        "<builtin>.super"
    ],
    "<builtin>.AttributeError": [],
    "enum.EnumMeta.__dir__": [],
    "enum.EnumMeta.__getattr__": [
        "<builtin>.AttributeError",
        "enum._is_dunder"
    ],
    "enum.EnumMeta.__getitem__": [],
    "enum.EnumMeta.__iter__": [],
    "enum.EnumMeta.__len__": [
        "<builtin>.len"
    ],
    "enum.EnumMeta.__members__": [],
    "enum.EnumMeta.__repr__": [],
    "enum.EnumMeta.__reversed__": [
        "<builtin>.reversed"
    ],
    "enum.EnumMeta.__setattr__": [
        "<builtin>.AttributeError",
        "<builtin>.super"
    ],
    "sys._getframe": [],
    "enum.EnumMeta._convert_": [
        "<builtin>.vars"
    ],
    "<builtin>.vars": [],
    "enum.EnumMeta._convert_.<lambda1>": [],
    "enum.EnumMeta._convert_.<lambda2>": [],
    "enum.EnumMeta._get_mixins_._find_data_type": [
        "<builtin>.issubclass"
    ],
    "enum.Enum": [
        "types.DynamicClassAttribute"
    ],
    "enum.Enum.__new__": [
        "<builtin>.ValueError",
        "enum.Enum._missing_",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "enum.Enum._missing_": [
        "<builtin>.ValueError"
    ],
    "enum.Enum._generate_next_value_": [
        "<builtin>.reversed"
    ],
    "enum.Enum.__repr__": [],
    "enum.Enum.__str__": [],
    "enum.Enum.__dir__": [],
    "enum.Enum.__format__": [
        "<builtin>.str"
    ],
    "enum.Enum.__hash__": [
        "<builtin>.hash"
    ],
    "enum.Enum.__reduce_ex__": [],
    "types.DynamicClassAttribute": [],
    "enum.Enum.name": [],
    "enum.Enum.value": [],
    "enum.IntEnum": [],
    "enum._reduce_ex_by_name": [],
    "enum.Flag": [],
    "enum.Flag._generate_next_value_": [
        "<builtin>.reversed",
        "<builtin>.TypeError",
        "enum._high_bit"
    ],
    "enum._high_bit": [],
    "enum.Flag._missing_": [
        "enum.Flag._create_pseudo_member_"
    ],
    "enum.Flag._create_pseudo_member_": [
        "<builtin>.ValueError",
        "enum._decompose"
    ],
    "enum._decompose": [
        "<builtin>.len",
        "enum._power_of_two",
        "<builtin>.list"
    ],
    "enum.Flag.__contains__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "enum.Flag.__repr__": [
        "enum._decompose",
        "<builtin>.str"
    ],
    "enum.Flag.__str__": [
        "enum._decompose",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "enum.Flag.__bool__": [
        "<builtin>.bool"
    ],
    "enum.Flag.__or__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__and__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__xor__": [
        "<builtin>.isinstance"
    ],
    "enum.Flag.__invert__": [
        "enum._decompose"
    ],
    "enum.IntFlag": [],
    "enum.IntFlag._missing_": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "enum.IntFlag._create_pseudo_member_"
    ],
    "enum.IntFlag._create_pseudo_member_": [
        "enum._high_bit",
        "enum._decompose",
        "<builtin>.reversed"
    ],
    "enum.IntFlag.__or__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__and__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__xor__": [
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__invert__": [],
    "enum.unique": [
        "<builtin>.ValueError"
    ],
    "enum._power_of_two": [
        "enum._high_bit"
    ],
    "enum._decompose.<lambda1>": [],
    "warnings.showwarning": [
        "warnings._showwarnmsg_impl",
        "warnings.WarningMessage.__init__"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg",
        "sys.stderr.write"
    ],
    "warnings.formatwarning": [
        "warnings.WarningMessage.__init__",
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl",
        "warnings.formatwarning"
    ],
    "sys.stderr.write": [],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc.get_object_traceback": [
        "_tracemalloc._get_object_traceback",
        "tracemalloc.Traceback.__init__"
    ],
    "warnings._showwarnmsg": [
        "<builtin>.callable",
        "warnings._showwarnmsg_impl",
        "warnings.showwarning",
        "<builtin>.TypeError"
    ],
    "warnings._add_filter": [
        "_warnings.filters.remove",
        "_warnings.filters.append",
        "_warnings.filters.insert",
        "_warnings._filters_mutated"
    ],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "_warnings.filters.remove": [],
    "_warnings.filters.insert": [],
    "_warnings.filters.append": [],
    "_warnings._filters_mutated": [],
    "warnings.resetwarnings": [
        "_warnings._filters_mutated"
    ],
    "warnings._OptionError": [],
    "warnings._processoptions": [
        "warnings._setoption",
        "<builtin>.print"
    ],
    "sys.warnoptions.split": [],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<builtin>.issubclass"
    ],
    "re.escape": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<builtin>.__import__": [],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "sys.__dict__.setdefault": [],
    "_warnings.warn_explicit": [],
    "linecache.getlines": [
        "linecache.clearcache",
        "linecache.updatecache",
        "<builtin>.len"
    ],
    "_warnings._onceregistry.get": [],
    "warnings.WarningMessage": [],
    "warnings.WarningMessage.__str__": [],
    "warnings.catch_warnings": [],
    "warnings.catch_warnings.__init__": [],
    "warnings.catch_warnings.__repr__": [
        "<builtin>.type"
    ],
    "warnings.catch_warnings.__enter__": [
        "<builtin>.RuntimeError"
    ],
    "warnings.catch_warnings.__exit__": [
        "<builtin>.RuntimeError"
    ],
    "warnings._warn_unawaited_coroutine.extract": [
        "<builtin>.reversed",
        "linecache.getline"
    ],
    "traceback.format_list": [
        "traceback.StackSummary.from_list",
        "traceback.StackSummary.format"
    ],
    "_warnings.warn": [],
    "warnings._filters_mutated": [],
    "tracemalloc._format_size": [
        "<builtin>.abs"
    ],
    "<builtin>.abs": [],
    "tracemalloc.Statistic": [],
    "tracemalloc.Statistic.__init__": [],
    "tracemalloc.Statistic.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Statistic.__eq__": [],
    "tracemalloc.Statistic.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.Statistic.__repr__": [],
    "tracemalloc.Statistic._sort_key": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.StatisticDiff.__init__": [],
    "tracemalloc.StatisticDiff.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.StatisticDiff.__eq__": [],
    "tracemalloc.StatisticDiff.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.StatisticDiff.__repr__": [],
    "tracemalloc.StatisticDiff._sort_key": [
        "<builtin>.abs"
    ],
    "tracemalloc._compare_grouped_stats": [
        "tracemalloc.StatisticDiff.__init__"
    ],
    "tracemalloc.Frame": [],
    "tracemalloc.Frame.__init__": [],
    "tracemalloc.Frame.filename": [],
    "tracemalloc.Frame.lineno": [],
    "tracemalloc.Frame.__eq__": [],
    "tracemalloc.Frame.__lt__": [],
    "tracemalloc.Frame.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Frame.__str__": [],
    "tracemalloc.Frame.__repr__": [],
    "tracemalloc.Traceback": [],
    "tracemalloc.Traceback.__init__": [
        "<builtin>.reversed",
        "<builtin>.tuple"
    ],
    "tracemalloc.Traceback.__len__": [
        "<builtin>.len"
    ],
    "tracemalloc.Traceback.__getitem__": [
        "tracemalloc.Frame.__init__",
        "<builtin>.isinstance",
        "<builtin>.tuple"
    ],
    "tracemalloc.Traceback.__contains__": [],
    "tracemalloc.Traceback.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Traceback.__eq__": [],
    "tracemalloc.Traceback.__lt__": [],
    "tracemalloc.Traceback.__str__": [
        "<builtin>.str"
    ],
    "tracemalloc.Traceback.__repr__": [
        "<builtin>.tuple"
    ],
    "tracemalloc.Traceback.format": [
        "<builtin>.reversed",
        "linecache.getline"
    ],
    "_tracemalloc._get_object_traceback": [],
    "tracemalloc.Trace": [],
    "tracemalloc.Trace.__init__": [],
    "tracemalloc.Trace.domain": [],
    "tracemalloc.Trace.size": [],
    "tracemalloc.Trace.traceback": [
        "tracemalloc.Traceback.__init__"
    ],
    "tracemalloc.Trace.__eq__": [],
    "tracemalloc.Trace.__hash__": [
        "<builtin>.hash"
    ],
    "tracemalloc.Trace.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.Trace.__repr__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc._Traces.__init__": [],
    "tracemalloc._Traces.__len__": [
        "<builtin>.len"
    ],
    "tracemalloc._Traces.__getitem__": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "tracemalloc.Trace.__init__"
    ],
    "tracemalloc._Traces.__contains__": [],
    "tracemalloc._Traces.__eq__": [],
    "tracemalloc._Traces.__repr__": [
        "<builtin>.len"
    ],
    "tracemalloc._normalize_filename": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.BaseFilter.__init__": [],
    "tracemalloc.BaseFilter._match": [],
    "tracemalloc.Filter": [],
    "tracemalloc.Filter.__init__": [
        "tracemalloc._normalize_filename",
        "<builtin>.super"
    ],
    "tracemalloc.Filter.filename_pattern": [],
    "tracemalloc.Filter._match_frame_impl": [
        "tracemalloc._normalize_filename"
    ],
    "tracemalloc.Filter._match_frame": [
        "tracemalloc.Filter._match_frame_impl"
    ],
    "tracemalloc.Filter._match_traceback": [
        "tracemalloc.Filter._match_frame_impl",
        "tracemalloc.Filter._match_frame",
        "<builtin>.any"
    ],
    "tracemalloc.Filter._match": [
        "tracemalloc.Filter._match_traceback"
    ],
    "tracemalloc.DomainFilter": [],
    "tracemalloc.DomainFilter.__init__": [
        "<builtin>.super"
    ],
    "tracemalloc.DomainFilter.domain": [],
    "tracemalloc.DomainFilter._match": [],
    "tracemalloc.Snapshot": [],
    "tracemalloc.Snapshot.__init__": [
        "tracemalloc._Traces.__init__"
    ],
    "tracemalloc.Snapshot.dump": [
        "<builtin>.open"
    ],
    "tracemalloc.Snapshot.load": [
        "<builtin>.open"
    ],
    "tracemalloc.Snapshot._filter_trace": [
        "<builtin>.any"
    ],
    "tracemalloc.Snapshot.filter_traces": [
        "tracemalloc.Snapshot.__init__",
        "<builtin>.TypeError",
        "<builtin>.type",
        "tracemalloc.Snapshot._filter_trace",
        "<builtin>.isinstance"
    ],
    "tracemalloc.Snapshot._group_by": [
        "tracemalloc.Statistic.__init__",
        "<builtin>.ValueError",
        "tracemalloc.Traceback.__init__"
    ],
    "tracemalloc.Snapshot.statistics": [
        "tracemalloc.Snapshot._group_by",
        "<builtin>.list"
    ],
    "tracemalloc.Snapshot.compare_to": [
        "tracemalloc._compare_grouped_stats",
        "tracemalloc.Snapshot._group_by"
    ],
    "tracemalloc.take_snapshot": [
        "<builtin>.RuntimeError",
        "_tracemalloc._get_traces",
        "tracemalloc.Snapshot.__init__"
    ],
    "_tracemalloc._get_traces": [],
    "functools.update_wrapper": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "functools.wraps": [
        "_functools.partial"
    ],
    "_functools.partial": [],
    "functools._gt_from_lt": [],
    "functools._le_from_lt": [],
    "functools._ge_from_lt": [],
    "functools._ge_from_le": [],
    "functools._lt_from_le": [],
    "functools._gt_from_le": [],
    "functools._lt_from_gt": [],
    "functools._ge_from_gt": [],
    "functools._le_from_gt": [],
    "functools._le_from_ge": [],
    "functools._gt_from_ge": [],
    "functools._lt_from_ge": [],
    "functools.total_ordering": [
        "<builtin>.max",
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "<builtin>.setattr"
    ],
    "functools.cmp_to_key": [
        "functools.cmp_to_key.K"
    ],
    "functools.cmp_to_key.K": [],
    "functools.cmp_to_key.K.__init__": [],
    "functools.cmp_to_key.K.__lt__": [],
    "functools.cmp_to_key.K.__gt__": [],
    "functools.cmp_to_key.K.__eq__": [],
    "functools.cmp_to_key.K.__le__": [],
    "functools.cmp_to_key.K.__ge__": [],
    "functools.reduce": [
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.TypeError"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partial.__new__": [
        "<builtin>.callable",
        "<builtin>.super",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "functools.partial.__call__": [],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "functools.partial.__repr__": [
        "<builtin>.repr",
        "<builtin>.type",
        "_functools.partial.keywords.items"
    ],
    "_functools.partial.keywords.items": [],
    "functools.partial.__reduce__": [
        "<builtin>.type"
    ],
    "functools.partial.__setstate__": [
        "<builtin>.tuple",
        "<builtin>.callable",
        "<builtin>.dict",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "functools.partialmethod": [],
    "functools.partialmethod.__repr__": [
        "<builtin>.map"
    ],
    "functools.partialmethod._make_unbound_method": [],
    "functools.partialmethod._make_unbound_method._method": [],
    "functools.partialmethod.__get__": [
        "functools.partialmethod._make_unbound_method",
        "<builtin>.getattr",
        "_functools.partial"
    ],
    "functools.partialmethod.__isabstractmethod__": [
        "<builtin>.getattr"
    ],
    "functools._unwrap_partial": [
        "<builtin>.isinstance"
    ],
    "collections.namedtuple": [
        "collections.<lambda1>",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "sys.intern",
        "_collections._tuplegetter",
        "<builtin>.enumerate",
        "<builtin>.type",
        "sys._getframe",
        "<builtin>.ValueError",
        "<builtin>.zip",
        "<builtin>.exec",
        "<builtin>.repr",
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.dict"
    ],
    "functools._HashedSeq": [],
    "functools._HashedSeq.__init__": [],
    "functools._HashedSeq.__hash__": [],
    "functools._make_key": [
        "functools._HashedSeq.__init__"
    ],
    "functools.lru_cache": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "_functools._lru_cache_wrapper"
    ],
    "_functools._lru_cache_wrapper": [],
    "functools.lru_cache.decorating_function": [
        "_functools._lru_cache_wrapper"
    ],
    "functools._lru_cache_wrapper": [
        "_thread.RLock",
        "<builtin>.object"
    ],
    "_thread.RLock": [],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key"
    ],
    "functools._lru_cache_wrapper.cache_info": [],
    "functools._lru_cache_wrapper.cache_clear": [],
    "functools._c3_merge": [
        "<builtin>.RuntimeError"
    ],
    "functools._c3_mro": [
        "<builtin>.any",
        "functools._c3_mro",
        "<builtin>.list",
        "functools._c3_merge",
        "<builtin>.reversed",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.issubclass"
    ],
    "functools._compose_mro": [
        "functools._compose_mro.is_strict_base",
        "functools._c3_mro",
        "<builtin>.set",
        "<builtin>.issubclass",
        "functools._compose_mro.is_related"
    ],
    "functools._compose_mro.is_related": [
        "<builtin>.issubclass",
        "<builtin>.hasattr"
    ],
    "functools._compose_mro.is_strict_base": [],
    "functools._find_impl": [
        "functools._compose_mro",
        "<builtin>.issubclass",
        "<builtin>.RuntimeError"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.set"
    ],
    "functools.singledispatch.dispatch": [
        "_py_abc.get_cache_token",
        "collections.ChainMap.clear",
        "_collections_abc.MutableMapping.clear",
        "_abc.get_cache_token",
        "functools._find_impl"
    ],
    "collections.ChainMap.clear": [],
    "functools.singledispatch.register.<lambda1>": [
        "functools.singledispatch.register"
    ],
    "typing.get_type_hints": [
        "typing._eval_type",
        "typing.ForwardRef.__init__",
        "<builtin>.reversed",
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "typing._get_defaults",
        "<builtin>.getattr"
    ],
    "functools.singledispatch.wrapper": [
        "functools.singledispatch.dispatch",
        "<builtin>.TypeError"
    ],
    "functools.singledispatchmethod": [],
    "functools.singledispatchmethod.__init__": [
        "<builtin>.callable",
        "functools.singledispatch",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "functools.singledispatchmethod.register": [],
    "functools.singledispatchmethod.__get__": [],
    "functools.singledispatchmethod.__get__._method": [],
    "functools.singledispatchmethod.__isabstractmethod__": [
        "<builtin>.getattr"
    ],
    "functools.cached_property": [],
    "functools.cached_property.__init__": [
        "_thread.RLock"
    ],
    "functools.cached_property.__set_name__": [
        "<builtin>.TypeError"
    ],
    "functools.cached_property.__get__": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "types._f": [],
    "types.<lambda1>": [],
    "types._cell_factory": [],
    "types._cell_factory.f": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "types._C._m": [],
    "sys.exc_info": [],
    "types.new_class": [
        "types.resolve_bases",
        "types.prepare_class"
    ],
    "types.resolve_bases": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "types.prepare_class": [
        "types._calculate_meta",
        "<builtin>.dict",
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "types._calculate_meta": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.issubclass"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "types.DynamicClassAttribute.__get__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.__set__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.__delete__": [
        "<builtin>.AttributeError"
    ],
    "types.DynamicClassAttribute.getter": [
        "<builtin>.type"
    ],
    "types.DynamicClassAttribute.setter": [
        "<builtin>.type"
    ],
    "types.DynamicClassAttribute.deleter": [
        "<builtin>.type"
    ],
    "types._GeneratorWrapper": [],
    "types._GeneratorWrapper.__init__": [
        "<builtin>.getattr"
    ],
    "types._GeneratorWrapper.send": [],
    "types._GeneratorWrapper.throw": [],
    "types._GeneratorWrapper.close": [],
    "types._GeneratorWrapper.gi_code": [],
    "types._GeneratorWrapper.gi_frame": [],
    "types._GeneratorWrapper.gi_running": [],
    "types._GeneratorWrapper.gi_yieldfrom": [],
    "types._GeneratorWrapper.__next__": [
        "<builtin>.next"
    ],
    "types._GeneratorWrapper.__iter__": [],
    "types.coroutine.wrapped": [
        "<builtin>.isinstance",
        "types._GeneratorWrapper.__init__"
    ],
    "typing._type_check": [
        "typing.ForwardRef.__init__",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.SyntaxError",
        "<builtin>.isinstance",
        "<builtin>.compile",
        "<builtin>.TypeError"
    ],
    "typing._type_repr": [
        "<builtin>.isinstance",
        "<builtin>.repr"
    ],
    "typing._collect_type_vars": [
        "<builtin>.tuple",
        "<builtin>.isinstance"
    ],
    "typing._subs_tvars": [
        "<builtin>.tuple",
        "typing._subs_tvars",
        "<builtin>.list",
        "<builtin>.enumerate",
        "typing._GenericAlias.copy_with",
        "<builtin>.isinstance"
    ],
    "typing._GenericAlias.copy_with": [
        "typing._GenericAlias.__init__"
    ],
    "typing._check_generic": [
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "typing._remove_dups_flatten": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "typing._tp_cache": [
        "functools.lru_cache",
        "functools.wraps",
        "functools.lru_cache.decorating_function",
        "functools.singledispatchmethod.__get__._method",
        "_functools.partial",
        "functools._lru_cache_wrapper.wrapper",
        "functools.singledispatch.wrapper"
    ],
    "typing._tp_cache.inner": [
        "typing._GenericAlias.__getitem__",
        "typing._VariadicGenericAlias.__getitem__",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "typing.Generic.__class_getitem__",
        "typing._SpecialForm.__getitem__"
    ],
    "typing.Generic.__class_getitem__": [
        "<builtin>.tuple",
        "typing._GenericAlias.__init__",
        "<builtin>.all",
        "typing._check_generic",
        "<builtin>.TypeError",
        "<builtin>.set",
        "typing._type_check",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "typing._VariadicGenericAlias.__getitem__": [
        "<builtin>.tuple",
        "typing._VariadicGenericAlias.__getitem_inner__",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "typing._GenericAlias.__getitem__": [
        "<builtin>.tuple",
        "typing._subs_tvars",
        "<builtin>.TypeError",
        "typing._type_check",
        "typing._check_generic",
        "<builtin>.isinstance"
    ],
    "typing._SpecialForm.__getitem__": [
        "<builtin>.tuple",
        "typing._GenericAlias.__init__",
        "typing._remove_dups_flatten",
        "<builtin>.TypeError",
        "<builtin>.type",
        "typing._type_check",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "typing._VariadicGenericAlias.__getitem_inner__": [
        "<builtin>.tuple",
        "typing._GenericAlias.copy_with",
        "<builtin>.super",
        "typing._type_check",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "typing._eval_type": [
        "<builtin>.tuple",
        "typing._eval_type",
        "typing.ForwardRef._evaluate",
        "typing._GenericAlias.copy_with",
        "<builtin>.isinstance"
    ],
    "typing.ForwardRef._evaluate": [
        "<builtin>.eval",
        "typing._type_check"
    ],
    "typing._Final": [],
    "typing._Final.__init_subclass__": [
        "<builtin>.TypeError"
    ],
    "typing._Immutable": [],
    "typing._Immutable.__copy__": [],
    "typing._Immutable.__deepcopy__": [],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._SpecialForm.__new__": [
        "<builtin>.isinstance",
        "<builtin>.super",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "typing._SpecialForm.__init__": [],
    "typing._SpecialForm.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing._SpecialForm.__hash__": [
        "<builtin>.hash"
    ],
    "typing._SpecialForm.__repr__": [],
    "typing._SpecialForm.__reduce__": [],
    "typing._SpecialForm.__call__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__instancecheck__": [
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm.__subclasscheck__": [
        "<builtin>.TypeError"
    ],
    "typing._GenericAlias.__init__": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "typing._collect_type_vars"
    ],
    "typing.ForwardRef": [],
    "<builtin>.SyntaxError": [],
    "typing.ForwardRef.__eq__": [
        "<builtin>.isinstance"
    ],
    "typing.ForwardRef.__hash__": [
        "<builtin>.hash"
    ],
    "typing.ForwardRef.__repr__": [],
    "typing.TypeVar": [],
    "typing.TypeVar.__init__": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "typing._type_check",
        "<builtin>.len",
        "sys._getframe",
        "<builtin>.bool"
    ],
    "typing.TypeVar.__repr__": [],
    "typing.TypeVar.__reduce__": [],
    "typing._is_dunder": [],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._GenericAlias.__repr__": [
        "typing._type_repr",
        "<builtin>.len"
    ],
    "typing._GenericAlias.__eq__": [
        "<builtin>.isinstance",
        "<builtin>.frozenset"
    ],
    "typing._GenericAlias.__hash__": [
        "<builtin>.frozenset",
        "<builtin>.hash"
    ],
    "typing._GenericAlias.__call__": [
        "collections.Counter.__init__",
        "_collections.defaultdict",
        "typing._SpecialForm.__init__",
        "<builtin>.TypeError",
        "collections.ChainMap.__init__",
        "_collections.OrderedDict",
        "_collections.deque",
        "typing._no_init"
    ],
    "_collections.deque": [],
    "collections.Counter.__init__": [
        "<builtin>.super"
    ],
    "typing._no_init": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "collections.ChainMap.__init__": [
        "<builtin>.list"
    ],
    "_collections.OrderedDict": [],
    "typing._GenericAlias.__mro_entries__": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.any"
    ],
    "typing._GenericAlias.__getattr__": [
        "<builtin>.AttributeError",
        "<builtin>.getattr",
        "typing._is_dunder"
    ],
    "typing._GenericAlias.__setattr__": [
        "typing._is_dunder",
        "<builtin>.super",
        "<builtin>.setattr"
    ],
    "typing._GenericAlias.__instancecheck__": [
        "<builtin>.type",
        "typing._GenericAlias.__subclasscheck__"
    ],
    "typing._GenericAlias.__subclasscheck__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "typing._GenericAlias.__reduce__": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.globals",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.Generic.__new__": [
        "<builtin>.super",
        "<builtin>.TypeError"
    ],
    "typing.Generic.__init_subclass__": [
        "<builtin>.tuple",
        "<builtin>.super",
        "typing._collect_type_vars",
        "<builtin>.TypeError",
        "<builtin>.set",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "typing._TypingEmpty": [],
    "typing._TypingEllipsis": [],
    "typing._get_protocol_attrs": [
        "<builtin>.getattr",
        "<builtin>.set",
        "<builtin>.list"
    ],
    "typing._is_callable_members_only": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.all",
        "typing._get_protocol_attrs"
    ],
    "typing._allow_reckless_class_cheks": [
        "sys._getframe"
    ],
    "typing._ProtocolMeta": [],
    "typing._ProtocolMeta.__instancecheck__": [
        "<builtin>.all",
        "typing._is_callable_members_only",
        "<builtin>.callable",
        "<builtin>.super",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.issubclass",
        "typing._get_protocol_attrs"
    ],
    "typing.Protocol": [],
    "typing.Protocol.__init_subclass__": [
        "<builtin>.super",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "<builtin>.any"
    ],
    "typing.Protocol.__init_subclass__._proto_hook": [
        "typing._is_callable_members_only",
        "typing._allow_reckless_class_cheks",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "<builtin>.issubclass",
        "typing._get_protocol_attrs"
    ],
    "typing.runtime_checkable": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "typing.cast": [],
    "typing._get_defaults": [
        "<builtin>.dict",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "typing.get_origin": [
        "<builtin>.isinstance"
    ],
    "typing.get_args": [
        "<builtin>.isinstance",
        "typing.get_origin",
        "<builtin>.list"
    ],
    "typing.no_type_check": [
        "<builtin>.isinstance",
        "typing.no_type_check"
    ],
    "typing.no_type_check_decorator": [
        "functools.wraps",
        "_functools.partial"
    ],
    "typing.no_type_check_decorator.wrapped_decorator": [
        "typing.no_type_check"
    ],
    "typing._overload_dummy": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "typing.overload": [],
    "typing.final": [],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsInt.__int__": [],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat.__float__": [],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex.__complex__": [],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes.__bytes__": [],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex.__index__": [],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs.__abs__": [],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound.__round__": [],
    "typing._make_nmtuple": [
        "collections.namedtuple",
        "sys._getframe",
        "<builtin>.dict",
        "typing._type_check"
    ],
    "typing.NamedTupleMeta": [],
    "typing.NamedTupleMeta.__new__": [
        "<builtin>.tuple",
        "<builtin>.AttributeError",
        "typing._make_nmtuple",
        "<builtin>.super",
        "<builtin>.setattr",
        "<builtin>.dict",
        "<builtin>.TypeError"
    ],
    "typing.NamedTuple": [],
    "typing._dict_new": [
        "<builtin>.dict"
    ],
    "typing._typeddict_new": [
        "<builtin>.dict",
        "<builtin>.TypeError",
        "sys._getframe"
    ],
    "typing._check_fails": [
        "<builtin>.TypeError"
    ],
    "typing._TypedDictMeta": [],
    "typing._TypedDictMeta.__new__": [
        "<builtin>.super",
        "typing._type_check",
        "<builtin>.hasattr"
    ],
    "typing.TypedDict": [],
    "typing.NewType": [],
    "typing.NewType.new_type": [],
    "typing.IO": [
        "abc.abstractmethod"
    ],
    "typing.IO.mode": [],
    "typing.IO.name": [],
    "typing.IO.close": [],
    "typing.IO.closed": [],
    "typing.IO.fileno": [],
    "typing.IO.flush": [],
    "typing.IO.isatty": [],
    "typing.IO.read": [],
    "typing.IO.readable": [],
    "typing.IO.readline": [],
    "typing.IO.readlines": [],
    "typing.IO.seek": [],
    "typing.IO.seekable": [],
    "typing.IO.tell": [],
    "typing.IO.truncate": [],
    "typing.IO.writable": [],
    "typing.IO.write": [],
    "typing.IO.writelines": [],
    "typing.IO.__enter__": [],
    "typing.IO.__exit__": [],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.BinaryIO.write": [],
    "typing.BinaryIO.__enter__": [],
    "typing.TextIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO.buffer": [],
    "typing.TextIO.encoding": [],
    "typing.TextIO.errors": [],
    "typing.TextIO.line_buffering": [],
    "typing.TextIO.newlines": [],
    "typing.TextIO.__enter__": [],
    "typing.io": [],
    "typing.re": [],
    "operator.lt": [],
    "operator.le": [],
    "operator.eq": [],
    "operator.ne": [],
    "operator.ge": [],
    "operator.gt": [],
    "operator.not_": [],
    "operator.truth": [],
    "operator.is_": [],
    "operator.is_not": [],
    "operator.abs": [
        "builtins.abs"
    ],
    "builtins.abs": [],
    "operator.add": [],
    "operator.and_": [],
    "operator.floordiv": [],
    "operator.index": [],
    "operator.inv": [],
    "operator.lshift": [],
    "operator.mod": [],
    "operator.mul": [],
    "operator.matmul": [],
    "operator.neg": [],
    "operator.or_": [],
    "operator.pos": [],
    "operator.pow": [],
    "operator.rshift": [],
    "operator.sub": [],
    "operator.truediv": [],
    "operator.xor": [],
    "operator.concat": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "operator.contains": [],
    "operator.countOf": [],
    "operator.delitem": [],
    "operator.getitem": [],
    "operator.indexOf": [
        "<builtin>.enumerate"
    ],
    "operator.setitem": [],
    "operator.length_hint": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "operator.attrgetter": [],
    "operator.attrgetter.__init__": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.TypeError"
    ],
    "operator.attrgetter.__init__.func": [
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "operator.attrgetter.__call__": [
        "operator.attrgetter.__init__.func"
    ],
    "operator.attrgetter.__repr__": [
        "<builtin>.map"
    ],
    "operator.attrgetter.__reduce__": [],
    "operator.itemgetter": [],
    "operator.itemgetter.__init__": [],
    "operator.itemgetter.__init__.func": [
        "<builtin>.tuple"
    ],
    "operator.itemgetter.__call__": [
        "operator.itemgetter.__init__.func"
    ],
    "operator.itemgetter.__repr__": [
        "<builtin>.map"
    ],
    "operator.itemgetter.__reduce__": [],
    "operator.methodcaller": [],
    "operator.methodcaller.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "operator.methodcaller.__call__": [
        "<builtin>.getattr"
    ],
    "operator.methodcaller.__repr__": [
        "<builtin>.repr",
        "<builtin>.map"
    ],
    "operator.iadd": [],
    "operator.iand": [],
    "operator.iconcat": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "operator.ifloordiv": [],
    "operator.ilshift": [],
    "operator.imod": [],
    "operator.imul": [],
    "operator.imatmul": [],
    "operator.ior": [],
    "operator.ipow": [],
    "operator.irshift": [],
    "operator.isub": [],
    "operator.itruediv": [],
    "operator.ixor": [],
    "contextlib.AbstractContextManager": [
        "abc.abstractmethod"
    ],
    "contextlib.AbstractContextManager.__enter__": [],
    "contextlib.AbstractContextManager.__exit__": [],
    "contextlib.AbstractContextManager.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager.__aenter__": [],
    "contextlib.AbstractAsyncContextManager.__aexit__": [],
    "contextlib.AbstractAsyncContextManager.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib.ContextDecorator._recreate_cm": [],
    "contextlib.ContextDecorator.__call__": [
        "functools.wraps",
        "_functools.partial"
    ],
    "contextlib.ContextDecorator.__call__.inner": [
        "contextlib.ContextDecorator._recreate_cm",
        "contextlib._GeneratorContextManager._recreate_cm"
    ],
    "contextlib._GeneratorContextManager._recreate_cm": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManagerBase.__init__": [
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "contextlib._GeneratorContextManager": [],
    "contextlib._GeneratorContextManager.__enter__": [
        "<builtin>.RuntimeError",
        "<builtin>.next"
    ],
    "contextlib._GeneratorContextManager.__exit__": [
        "<builtin>.RuntimeError",
        "sys.exc_info",
        "<builtin>.next"
    ],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager.__aenter__": [
        "<builtin>.RuntimeError"
    ],
    "contextlib._AsyncGeneratorContextManager.__aexit__": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance"
    ],
    "contextlib.contextmanager": [
        "functools.wraps",
        "_functools.partial"
    ],
    "contextlib.contextmanager.helper": [
        "contextlib._GeneratorContextManagerBase.__init__"
    ],
    "contextlib.asynccontextmanager": [
        "functools.wraps",
        "_functools.partial"
    ],
    "contextlib.asynccontextmanager.helper": [
        "contextlib._GeneratorContextManagerBase.__init__"
    ],
    "contextlib.closing": [],
    "contextlib.closing.__init__": [],
    "contextlib.closing.__enter__": [],
    "contextlib.closing.__exit__": [],
    "contextlib._RedirectStream": [],
    "contextlib._RedirectStream.__init__": [],
    "contextlib._RedirectStream.__enter__": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "contextlib._RedirectStream.__exit__": [
        "<builtin>.setattr"
    ],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib.suppress.__init__": [],
    "contextlib.suppress.__enter__": [],
    "contextlib.suppress.__exit__": [
        "<builtin>.issubclass"
    ],
    "contextlib._BaseExitStack": [],
    "contextlib._BaseExitStack._create_exit_wrapper": [],
    "contextlib._BaseExitStack._create_cb_wrapper": [],
    "contextlib._BaseExitStack._create_cb_wrapper._exit_wrapper": [
        "contextlib._BaseExitStack.callback"
    ],
    "contextlib._BaseExitStack.__init__": [],
    "contextlib._BaseExitStack.pop_all": [
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack.push": [
        "contextlib._BaseExitStack._push_cm_exit",
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.type"
    ],
    "contextlib._BaseExitStack._push_exit_callback": [],
    "contextlib._BaseExitStack._push_cm_exit": [
        "contextlib._BaseExitStack._push_exit_callback",
        "contextlib._BaseExitStack._create_exit_wrapper"
    ],
    "contextlib._BaseExitStack.enter_context": [
        "contextlib._BaseExitStack._push_cm_exit",
        "<builtin>.type"
    ],
    "contextlib.ExitStack": [],
    "contextlib.ExitStack.__enter__": [],
    "contextlib.ExitStack.__exit__": [
        "contextlib.ExitStack.__exit__._fix_exception_context",
        "sys.exc_info"
    ],
    "contextlib.ExitStack.__exit__._fix_exception_context": [],
    "contextlib.ExitStack.close": [
        "contextlib.ExitStack.__exit__"
    ],
    "contextlib.AsyncExitStack": [],
    "contextlib.AsyncExitStack._create_async_exit_wrapper": [],
    "contextlib.AsyncExitStack._create_async_cb_wrapper": [],
    "contextlib.AsyncExitStack._create_async_cb_wrapper._exit_wrapper": [],
    "contextlib.AsyncExitStack.enter_async_context": [
        "<builtin>.type",
        "contextlib.AsyncExitStack._push_async_cm_exit"
    ],
    "contextlib.AsyncExitStack._push_async_cm_exit": [
        "contextlib.AsyncExitStack._create_async_exit_wrapper",
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib.AsyncExitStack.push_async_exit": [
        "contextlib._BaseExitStack._push_exit_callback",
        "<builtin>.type",
        "contextlib.AsyncExitStack._push_async_cm_exit"
    ],
    "contextlib.AsyncExitStack.aclose": [
        "contextlib.AsyncExitStack.__aexit__"
    ],
    "contextlib.AsyncExitStack.__aexit__": [
        "sys.exc_info",
        "contextlib.AsyncExitStack.__aexit__._fix_exception_context"
    ],
    "contextlib.AsyncExitStack.__aenter__": [],
    "contextlib.AsyncExitStack.__aexit__._fix_exception_context": [],
    "contextlib.nullcontext": [],
    "contextlib.nullcontext.__init__": [],
    "contextlib.nullcontext.__enter__": [],
    "contextlib.nullcontext.__exit__": [],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictKeysView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictItemsView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._OrderedDictValuesView": [],
    "collections._OrderedDictValuesView.__reversed__": [
        "<builtin>.reversed"
    ],
    "collections._Link": [],
    "collections.OrderedDict": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.object"
    ],
    "collections.OrderedDict.__init__": [
        "_weakref.proxy"
    ],
    "_weakref.proxy": [],
    "collections.OrderedDict.__setitem__": [
        "_weakref.proxy"
    ],
    "collections.OrderedDict.__delitem__": [
        "_collections.OrderedDict.__map.pop"
    ],
    "_collections.OrderedDict.__map.pop": [],
    "collections.OrderedDict.__iter__": [],
    "collections.OrderedDict.__reversed__": [],
    "collections.OrderedDict.clear": [
        "_collections.OrderedDict.__map.clear"
    ],
    "_collections.OrderedDict.__map.clear": [],
    "collections.OrderedDict.popitem": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.__sizeof__": [
        "sys.getsizeof",
        "<builtin>.len"
    ],
    "sys.getsizeof": [],
    "collections.OrderedDict.keys": [
        "_collections_abc.MappingView.__init__"
    ],
    "collections.OrderedDict.items": [
        "_collections_abc.MappingView.__init__"
    ],
    "collections.OrderedDict.values": [
        "_collections_abc.MappingView.__init__"
    ],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.setdefault": [],
    "collections.OrderedDict.__repr__": [
        "_collections.OrderedDict.items",
        "<builtin>.list"
    ],
    "_collections.OrderedDict.items": [],
    "collections.OrderedDict.__reduce__": [
        "<builtin>.iter",
        "_collections.OrderedDict.items",
        "<builtin>.vars",
        "_collections.OrderedDict"
    ],
    "collections.OrderedDict.copy": [
        "_collections.OrderedDict.__class__"
    ],
    "_collections.OrderedDict.__class__": [],
    "collections.OrderedDict.fromkeys": [
        "_collections.OrderedDict"
    ],
    "collections.OrderedDict.__eq__": [
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.all"
    ],
    "collections.<lambda1>": [
        "<builtin>.property",
        "operator.itemgetter.__init__"
    ],
    "<builtin>.property": [],
    "sys.intern": [],
    "<builtin>.exec": [],
    "collections.namedtuple._make": [
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "collections.namedtuple._replace": [
        "<builtin>.ValueError",
        "<builtin>.list"
    ],
    "collections.namedtuple.__repr__": [],
    "collections.namedtuple._asdict": [],
    "collections.namedtuple.__getnewargs__": [],
    "_collections._tuplegetter": [],
    "collections._count_elements": [],
    "collections.Counter": [],
    "collections.Counter.__missing__": [],
    "collections.Counter.most_common": [
        "heapq.nlargest",
        "<builtin>.sorted",
        "operator.itemgetter.__init__"
    ],
    "heapq.nlargest": [
        "<builtin>.zip",
        "<builtin>.max",
        "<builtin>.sorted",
        "<builtin>.iter",
        "<builtin>.range",
        "heapq.heapreplace",
        "operator.itemgetter.__init__",
        "<builtin>.len",
        "<builtin>.object",
        "heapq.heapify"
    ],
    "collections.Counter.elements": [
        "itertools.chain.from_iterable",
        "itertools.starmap"
    ],
    "itertools.starmap": [],
    "itertools.chain.from_iterable": [],
    "collections.Counter.fromkeys": [
        "<builtin>.NotImplementedError"
    ],
    "collections.Counter.update": [
        "<builtin>.isinstance",
        "_collections._count_elements",
        "<builtin>.super"
    ],
    "_collections._count_elements": [],
    "collections.Counter.subtract": [
        "<builtin>.isinstance"
    ],
    "collections.Counter.copy": [],
    "collections.Counter.__reduce__": [
        "<builtin>.dict"
    ],
    "collections.Counter.__delitem__": [
        "<builtin>.super"
    ],
    "collections.Counter.__repr__": [
        "<builtin>.dict",
        "<builtin>.map",
        "collections.Counter.most_common"
    ],
    "collections.Counter.__add__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__sub__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__or__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__and__": [
        "collections.Counter.__init__",
        "<builtin>.isinstance"
    ],
    "collections.Counter.__pos__": [
        "collections.Counter.__init__"
    ],
    "collections.Counter.__neg__": [
        "collections.Counter.__init__"
    ],
    "collections.Counter._keep_positive": [],
    "collections.Counter.__iadd__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__isub__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__ior__": [
        "collections.Counter._keep_positive"
    ],
    "collections.Counter.__iand__": [
        "collections.Counter._keep_positive"
    ],
    "collections.ChainMap": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "collections.ChainMap.__missing__": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.__getitem__": [
        "collections.ChainMap.__missing__"
    ],
    "collections.ChainMap.get": [],
    "collections.ChainMap.__len__": [
        "<builtin>.set",
        "<builtin>.len"
    ],
    "collections.ChainMap.__iter__": [
        "<builtin>.reversed",
        "<builtin>.iter"
    ],
    "collections.ChainMap.__contains__": [
        "<builtin>.any"
    ],
    "collections.ChainMap.__bool__": [
        "<builtin>.any"
    ],
    "collections.ChainMap.__repr__": [
        "<builtin>.map"
    ],
    "collections.ChainMap.fromkeys": [
        "collections.ChainMap.__init__"
    ],
    "collections.ChainMap.copy": [],
    "collections.ChainMap.new_child": [],
    "collections.ChainMap.parents": [],
    "collections.ChainMap.__setitem__": [],
    "collections.ChainMap.__delitem__": [
        "<builtin>.KeyError"
    ],
    "collections.ChainMap.pop": [
        "<builtin>.KeyError"
    ],
    "collections.UserDict": [],
    "collections.UserDict.__len__": [
        "<builtin>.len"
    ],
    "collections.UserDict.__getitem__": [
        "<builtin>.KeyError",
        "<builtin>.hasattr"
    ],
    "collections.UserDict.__setitem__": [],
    "collections.UserDict.__delitem__": [],
    "collections.UserDict.__iter__": [
        "<builtin>.iter"
    ],
    "collections.UserDict.__contains__": [],
    "collections.UserDict.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserDict.__copy__": [],
    "collections.UserDict.fromkeys": [
        "collections.UserDict.__init__"
    ],
    "collections.UserList": [],
    "collections.UserList.__init__": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.list"
    ],
    "collections.UserList.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserList.__lt__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__cast": [
        "<builtin>.isinstance"
    ],
    "collections.UserList.__le__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__eq__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__gt__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__ge__": [
        "collections.UserList.__cast"
    ],
    "collections.UserList.__contains__": [],
    "collections.UserList.__len__": [
        "<builtin>.len"
    ],
    "collections.UserList.__getitem__": [
        "<builtin>.isinstance"
    ],
    "collections.UserList.__setitem__": [],
    "collections.UserList.__delitem__": [],
    "collections.UserList.__add__": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.list"
    ],
    "collections.UserList.__radd__": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.list"
    ],
    "collections.UserList.__iadd__": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.list"
    ],
    "collections.UserList.__mul__": [],
    "collections.UserList.__imul__": [],
    "collections.UserList.__copy__": [],
    "collections.UserList.append": [],
    "collections.UserList.insert": [],
    "collections.UserList.pop": [],
    "collections.UserList.remove": [],
    "collections.UserList.clear": [],
    "collections.UserList.copy": [],
    "collections.UserList.count": [],
    "collections.UserList.index": [],
    "collections.UserList.reverse": [],
    "collections.UserList.sort": [],
    "collections.UserList.extend": [
        "<builtin>.isinstance"
    ],
    "collections.UserString": [],
    "collections.UserString.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__str__": [
        "<builtin>.str"
    ],
    "collections.UserString.__repr__": [
        "<builtin>.repr"
    ],
    "collections.UserString.__int__": [
        "<builtin>.int"
    ],
    "collections.UserString.__float__": [
        "<builtin>.float"
    ],
    "collections.UserString.__complex__": [
        "<builtin>.complex"
    ],
    "<builtin>.complex": [],
    "collections.UserString.__hash__": [
        "<builtin>.hash"
    ],
    "collections.UserString.__getnewargs__": [],
    "collections.UserString.__eq__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__lt__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__le__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__gt__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__ge__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__contains__": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.__len__": [
        "<builtin>.len"
    ],
    "collections.UserString.__getitem__": [],
    "collections.UserString.__add__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__radd__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "collections.UserString.__mul__": [],
    "collections.UserString.__mod__": [],
    "collections.UserString.__rmod__": [
        "<builtin>.str"
    ],
    "collections.UserString.capitalize": [],
    "collections.UserString.casefold": [],
    "collections.UserString.center": [],
    "collections.UserString.count": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.encode": [],
    "collections.UserString.endswith": [],
    "collections.UserString.expandtabs": [],
    "collections.UserString.find": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.format": [],
    "collections.UserString.format_map": [],
    "collections.UserString.index": [],
    "collections.UserString.isalpha": [],
    "collections.UserString.isalnum": [],
    "collections.UserString.isascii": [],
    "collections.UserString.isdecimal": [],
    "collections.UserString.isdigit": [],
    "collections.UserString.isidentifier": [],
    "collections.UserString.islower": [],
    "collections.UserString.isnumeric": [],
    "collections.UserString.isprintable": [],
    "collections.UserString.isspace": [],
    "collections.UserString.istitle": [],
    "collections.UserString.isupper": [],
    "collections.UserString.join": [],
    "collections.UserString.ljust": [],
    "collections.UserString.lower": [],
    "collections.UserString.lstrip": [],
    "collections.UserString.partition": [],
    "collections.UserString.replace": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.rfind": [
        "<builtin>.isinstance"
    ],
    "collections.UserString.rindex": [],
    "collections.UserString.rjust": [],
    "collections.UserString.rpartition": [],
    "collections.UserString.rstrip": [],
    "collections.UserString.split": [],
    "collections.UserString.rsplit": [],
    "collections.UserString.splitlines": [],
    "collections.UserString.startswith": [],
    "collections.UserString.strip": [],
    "collections.UserString.swapcase": [],
    "collections.UserString.title": [],
    "collections.UserString.translate": [],
    "collections.UserString.upper": [],
    "collections.UserString.zfill": [],
    "heapq.heappush": [
        "heapq._siftdown",
        "<builtin>.len"
    ],
    "heapq._siftdown": [],
    "heapq.heappop": [
        "heapq._siftup"
    ],
    "heapq._siftup": [
        "heapq._siftdown",
        "<builtin>.len"
    ],
    "heapq.heapreplace": [
        "heapq._siftup"
    ],
    "heapq.heappushpop": [
        "heapq._siftup"
    ],
    "heapq.heapify": [
        "<builtin>.reversed",
        "heapq._siftup",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "heapq._heappop_max": [
        "heapq._siftup_max"
    ],
    "heapq._siftup_max": [
        "heapq._siftdown_max",
        "<builtin>.len"
    ],
    "heapq._heapreplace_max": [
        "heapq._siftup_max"
    ],
    "heapq._heapify_max": [
        "<builtin>.reversed",
        "heapq._siftup_max",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "heapq._siftdown_max": [],
    "heapq.merge": [
        "heapq._heapreplace_max",
        "heapq.heappop",
        "heapq.heapreplace",
        "heapq._heapify_max",
        "<builtin>.enumerate",
        "<builtin>.map",
        "<builtin>.len",
        "heapq.heapify",
        "heapq._heappop_max"
    ],
    "heapq.nsmallest": [
        "<builtin>.zip",
        "heapq._heapreplace_max",
        "<builtin>.sorted",
        "<builtin>.iter",
        "<builtin>.range",
        "heapq._heapify_max",
        "<builtin>.min",
        "<builtin>.len",
        "<builtin>.object"
    ],
    "doctest.testmod": [
        "doctest.DebugRunner.run",
        "sys.modules.get",
        "doctest.DocTestRunner.run",
        "doctest.DocTestRunner.summarize",
        "doctest.DocTestFinder.find",
        "<builtin>.TypeError",
        "doctest.DocTestFinder.__init__",
        "doctest.DocTestRunner.merge",
        "inspect.ismodule",
        "doctest.DocTestRunner.__init__"
    ],
    "doctest.register_optionflag": [
        "<builtin>.len"
    ],
    "doctest._extract_future_flags": [
        "<builtin>.getattr"
    ],
    "doctest._normalize_module": [
        "<builtin>.locals",
        "<builtin>.globals",
        "<builtin>.TypeError",
        "inspect.ismodule",
        "<builtin>.isinstance",
        "<builtin>.__import__",
        "sys._getframe"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "<builtin>.locals": [],
    "doctest._newline_convert": [],
    "doctest._load_testfile": [
        "doctest._normalize_module",
        "doctest._module_relative_path",
        "doctest._newline_convert",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.open"
    ],
    "doctest._module_relative_path": [
        "<builtin>.ValueError",
        "sys.base_prefix.split",
        "posixpath.join",
        "ntpath.exists",
        "posixpath.exists",
        "ntpath.join",
        "sys.path.startswith",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "ntpath.split",
        "inspect.ismodule",
        "sys.path.split",
        "posixpath.split",
        "<builtin>.len",
        "sys.base_prefix.startswith"
    ],
    "doctest._indent": [
        "re.sub"
    ],
    "doctest._exception_traceback": [
        "_io.StringIO",
        "traceback.print_exception"
    ],
    "_io.StringIO": [],
    "traceback.print_exception": [
        "<builtin>.print",
        "traceback.TracebackException.format",
        "<builtin>.type",
        "traceback.TracebackException.__init__"
    ],
    "doctest._SpoofOut": [],
    "doctest._SpoofOut.getvalue": [
        "_io.StringIO.getvalue"
    ],
    "_io.StringIO.getvalue": [],
    "doctest._SpoofOut.truncate": [
        "_io.StringIO.truncate",
        "_io.StringIO.seek"
    ],
    "_io.StringIO.seek": [],
    "_io.StringIO.truncate": [],
    "doctest._ellipsis_match": [
        "<builtin>.len"
    ],
    "doctest._comment_line": [],
    "doctest._strip_exception_details": [
        "<builtin>.len"
    ],
    "doctest._OutputRedirectingPdb": [],
    "doctest._OutputRedirectingPdb.__init__": [
        "pdb.Pdb.__init__"
    ],
    "pdb.Pdb.__init__": [],
    "doctest._OutputRedirectingPdb.set_trace": [
        "pdb.Pdb.set_trace",
        "sys._getframe"
    ],
    "pdb.Pdb.set_trace": [],
    "doctest._OutputRedirectingPdb.set_continue": [
        "pdb.Pdb.set_continue"
    ],
    "pdb.Pdb.set_continue": [],
    "doctest._OutputRedirectingPdb.trace_dispatch": [
        "pdb.Pdb.trace_dispatch"
    ],
    "pdb.Pdb.trace_dispatch": [],
    "sys.path.startswith": [],
    "sys.base_prefix.startswith": [],
    "sys.path.split": [],
    "sys.base_prefix.split": [],
    "doctest.Example": [],
    "doctest.Example.__init__": [],
    "doctest.Example.__eq__": [
        "<builtin>.type"
    ],
    "doctest.Example.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTest": [],
    "doctest.DocTest.__init__": [
        "<builtin>.isinstance"
    ],
    "doctest.DocTest.__repr__": [
        "<builtin>.len"
    ],
    "doctest.DocTest.__eq__": [
        "<builtin>.type"
    ],
    "doctest.DocTest.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTest.__lt__": [
        "<builtin>.isinstance",
        "<builtin>.id"
    ],
    "<builtin>.id": [],
    "doctest.DocTestParser": [
        "re.compile"
    ],
    "doctest.DocTestParser.parse": [
        "doctest.DocTestParser._parse_example",
        "doctest.Example.__init__",
        "doctest.DocTestParser._min_indent",
        "<builtin>.len"
    ],
    "doctest.DocTestParser._min_indent": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "doctest.DocTestParser._parse_example": [
        "re.match",
        "doctest.DocTestParser._find_options",
        "doctest.DocTestParser._check_prompt_blank",
        "doctest.DocTestParser._check_prefix",
        "<builtin>.len"
    ],
    "doctest.DocTestParser.get_doctest": [
        "doctest.DocTestParser.get_examples",
        "doctest.DocTest.__init__"
    ],
    "doctest.DocTestParser.get_examples": [
        "<builtin>.isinstance",
        "doctest.DocTestParser.parse"
    ],
    "doctest.DocTestParser._check_prompt_blank": [
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "doctest.DocTestParser._check_prefix": [
        "<builtin>.ValueError",
        "<builtin>.enumerate"
    ],
    "re.match": [
        "re._compile"
    ],
    "doctest.DocTestParser._find_options": [
        "<builtin>.ValueError"
    ],
    "doctest.DocTestFinder": [],
    "doctest.DocTestFinder.__init__": [],
    "doctest.DocTestFinder.find": [
        "inspect.getfile",
        "linecache.getlines",
        "<builtin>.ValueError",
        "doctest.DocTestFinder._find",
        "inspect.getmodule",
        "<builtin>.type",
        "<builtin>.getattr",
        "inspect.getsourcefile"
    ],
    "inspect.getmodule": [
        "<builtin>.getattr",
        "sys.modules.copy",
        "sys.modules.get",
        "inspect.getabsfile",
        "<builtin>.hasattr",
        "ntpath.realpath",
        "inspect.ismodule",
        "posixpath.realpath"
    ],
    "inspect.getsourcefile": [
        "<builtin>.any",
        "ntpath.exists",
        "posixpath.exists",
        "inspect.getmodule",
        "<builtin>.getattr",
        "ntpath.splitext",
        "posixpath.splitext",
        "inspect.getfile"
    ],
    "inspect.getfile": [
        "inspect.isframe",
        "sys.modules.get",
        "inspect.istraceback",
        "<builtin>.TypeError",
        "inspect.isfunction",
        "<builtin>.hasattr",
        "<builtin>.type",
        "inspect.ismodule",
        "<builtin>.getattr",
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.iscode"
    ],
    "doctest.DocTestFinder._find": [
        "<builtin>.ValueError",
        "doctest.DocTestFinder._find",
        "doctest.DocTestFinder._get_test",
        "<builtin>.print",
        "inspect.unwrap",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.id",
        "inspect.ismodule",
        "<builtin>.getattr",
        "inspect.isclass",
        "doctest.DocTestFinder._from_module",
        "inspect.isroutine"
    ],
    "doctest.DocTestFinder._from_module": [
        "<builtin>.ValueError",
        "inspect.getmodule",
        "inspect.ismethoddescriptor",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.isclass"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "<builtin>.type",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.isclass",
        "inspect.ismethod"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "doctest.DocTestFinder._get_test": [
        "<builtin>.getattr",
        "doctest.DocTestFinder._find_lineno",
        "<builtin>.str",
        "doctest.DocTestParser.get_doctest",
        "<builtin>.isinstance"
    ],
    "inspect.unwrap": [
        "sys.getrecursionlimit",
        "<builtin>.ValueError",
        "inspect.unwrap._is_wrapper",
        "<builtin>.len",
        "<builtin>.id"
    ],
    "inspect.isroutine": [
        "inspect.ismethoddescriptor",
        "inspect.isfunction",
        "inspect.ismethod",
        "inspect.isbuiltin"
    ],
    "doctest.DocTestFinder._find_lineno": [
        "inspect.isframe",
        "<builtin>.range",
        "inspect.istraceback",
        "<builtin>.enumerate",
        "inspect.isfunction",
        "<builtin>.len",
        "re.compile",
        "inspect.ismodule",
        "<builtin>.getattr",
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.iscode"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "doctest.DocTestRunner": [
        "re.compile"
    ],
    "doctest.DocTestRunner.__init__": [
        "_io.StringIO.__init__",
        "io.StringIO.__init__"
    ],
    "_io.StringIO.__init__": [],
    "io.StringIO.__init__": [],
    "doctest.DocTestRunner.report_start": [
        "doctest._indent",
        "doctest.DocTestRunner.__init__",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTest.__init__"
    ],
    "doctest.SkipDocTestCase.__init__": [
        "doctest.DocTestCase.__init__"
    ],
    "doctest.DocTestRunner.report_success": [
        "doctest.DocTestRunner.__init__",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTest.__init__"
    ],
    "doctest.DocTestRunner.report_failure": [
        "doctest.DocTestRunner._failure_header",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTestRunner.__init__",
        "doctest.DocTest.__init__"
    ],
    "doctest.DocTestRunner._failure_header": [
        "doctest._indent"
    ],
    "doctest.DocTestRunner.report_unexpected_exception": [
        "doctest.DocTestRunner.__init__",
        "doctest.DocTest.__init__",
        "doctest._indent",
        "doctest._exception_traceback",
        "doctest.DocTestRunner._failure_header",
        "doctest.SkipDocTestCase.__init__"
    ],
    "doctest.DocTestRunner.__run": [
        "doctest._strip_exception_details",
        "doctest._SpoofOut.truncate",
        "doctest.DocTestRunner.report_success",
        "<builtin>.exec",
        "doctest._OutputRedirectingPdb.set_continue",
        "sys.exc_info",
        "traceback.format_exception_only",
        "doctest.DocTestRunner.report_failure",
        "doctest.DocTestRunner.__record_outcome",
        "<builtin>.compile",
        "<builtin>.enumerate",
        "doctest._exception_traceback",
        "doctest.DebugRunner.report_failure",
        "<builtin>.range",
        "doctest.DocTestRunner.report_start",
        "doctest.DebugRunner.report_unexpected_exception",
        "doctest._SpoofOut.getvalue",
        "doctest.DocTestRunner.report_unexpected_exception"
    ],
    "traceback.format_exception_only": [
        "traceback.TracebackException.format_exception_only",
        "<builtin>.list",
        "traceback.TracebackException.__init__"
    ],
    "doctest.DebugRunner.report_failure": [
        "doctest.DocTestFailure.__init__"
    ],
    "doctest.DebugRunner.report_unexpected_exception": [
        "doctest.UnexpectedException.__init__"
    ],
    "doctest.DocTestRunner.__record_outcome": [],
    "doctest.DocTestRunner.__patched_linecache_getlines": [
        "<builtin>.int",
        "linecache.getlines"
    ],
    "doctest.DocTestRunner.run": [
        "sys.settrace",
        "doctest._OutputRedirectingPdb.__init__",
        "sys.gettrace",
        "doctest._extract_future_flags",
        "doctest.DocTestRunner.__run",
        "pdb.Pdb.reset"
    ],
    "doctest.DocTestRunner.run.out": [
        "<builtin>.str",
        "sys.stdout.write"
    ],
    "sys.stdout.write": [],
    "sys.gettrace": [],
    "pdb.Pdb.reset": [],
    "sys.settrace": [],
    "doctest.DocTestRunner.summarize": [
        "<builtin>.print",
        "<builtin>.len"
    ],
    "doctest.DocTestRunner.merge": [],
    "doctest.OutputChecker": [],
    "doctest.OutputChecker._toAscii": [
        "<builtin>.str"
    ],
    "doctest.OutputChecker.check_output": [
        "re.escape",
        "doctest.OutputChecker._toAscii",
        "doctest._ellipsis_match",
        "re.sub"
    ],
    "doctest.OutputChecker._do_a_fancy_diff": [],
    "doctest.OutputChecker.output_difference": [
        "doctest.OutputChecker._do_a_fancy_diff",
        "<builtin>.list",
        "difflib.Differ.__init__",
        "re.sub",
        "difflib.unified_diff",
        "doctest._indent",
        "difflib.context_diff",
        "difflib.Differ.compare"
    ],
    "difflib.unified_diff": [
        "difflib._format_range_unified",
        "difflib._check_types",
        "difflib.SequenceMatcher.__init__",
        "difflib.SequenceMatcher.get_grouped_opcodes"
    ],
    "difflib.context_diff": [
        "difflib.SequenceMatcher.get_grouped_opcodes",
        "<builtin>.any",
        "<builtin>.dict",
        "difflib._format_range_context",
        "difflib._check_types",
        "difflib.SequenceMatcher.__init__"
    ],
    "difflib.Differ.__init__": [],
    "difflib.Differ.compare": [
        "difflib.Differ._fancy_replace",
        "<builtin>.ValueError",
        "difflib.SequenceMatcher.get_opcodes",
        "difflib.Differ._dump",
        "difflib.SequenceMatcher.__init__"
    ],
    "doctest.DocTestFailure": [],
    "doctest.DocTestFailure.__init__": [],
    "doctest.DocTestFailure.__str__": [
        "<builtin>.str"
    ],
    "doctest.UnexpectedException": [],
    "doctest.UnexpectedException.__init__": [],
    "doctest.UnexpectedException.__str__": [
        "<builtin>.str"
    ],
    "doctest.DebugRunner": [],
    "doctest.DebugRunner.run": [
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.run"
    ],
    "sys.modules.get": [],
    "doctest.testfile": [
        "<builtin>.ValueError",
        "doctest.DebugRunner.run",
        "ntpath.basename",
        "posixpath.basename",
        "doctest.DocTestRunner.run",
        "doctest.DocTestRunner.summarize",
        "doctest.DocTestRunner.merge",
        "doctest.DocTestParser.get_doctest",
        "doctest.DocTestRunner.__init__",
        "doctest._load_testfile"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "posixpath.basename": [
        "sys.stdin.buffer.rfind",
        "sys.base_prefix.rfind",
        "sys.path.rfind",
        "posixpath._get_sep"
    ],
    "doctest.run_docstring_examples": [
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.run",
        "doctest.DocTestFinder.find",
        "doctest.DocTestFinder.__init__",
        "doctest.DocTestRunner.__init__"
    ],
    "doctest.set_unittest_reportflags": [
        "<builtin>.ValueError"
    ],
    "doctest.DocTestCase": [],
    "doctest.DocTestCase.__init__": [
        "unittest.case.TestCase.__init__"
    ],
    "unittest.case.TestCase.__init__": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "unittest.case.TestCase.addTypeEqualityFunc"
    ],
    "doctest.DocTestCase.setUp": [],
    "doctest.DocTestCase.tearDown": [],
    "doctest.DocTestCase.runTest": [
        "doctest.DocTestCase.format_failure",
        "doctest.DebugRunner.run",
        "doctest.DocFileCase.format_failure",
        "doctest.DocTestRunner.run",
        "doctest.DocTestRunner.__init__",
        "_io.StringIO"
    ],
    "doctest.DocTestCase.format_failure": [],
    "doctest.DocFileCase.format_failure": [],
    "doctest.DocTestCase.debug": [
        "doctest.DocTestCase.tearDown",
        "doctest.DocTestRunner.__init__",
        "doctest.DocTestCase.setUp",
        "doctest.DebugRunner.run"
    ],
    "doctest.DocTestCase.id": [],
    "doctest.DocTestCase.__eq__": [
        "<builtin>.type"
    ],
    "doctest.DocTestCase.__hash__": [
        "<builtin>.hash"
    ],
    "doctest.DocTestCase.__repr__": [],
    "doctest.DocTestCase.shortDescription": [],
    "doctest.SkipDocTestCase": [],
    "doctest.SkipDocTestCase.setUp": [
        "unittest.case.TestCase.skipTest"
    ],
    "unittest.case.TestCase.skipTest": [],
    "doctest.SkipDocTestCase.test_skip": [],
    "doctest.SkipDocTestCase.shortDescription": [],
    "doctest._DocTestSuite": [],
    "doctest._DocTestSuite._removeTestAtIndex": [],
    "doctest.DocTestSuite": [
        "doctest._normalize_module",
        "doctest.DocTestCase.__init__",
        "doctest.DocTestFinder.find",
        "doctest.DocTestFinder.__init__",
        "<builtin>.len",
        "doctest.SkipDocTestCase.__init__"
    ],
    "doctest.DocFileCase": [],
    "doctest.DocFileCase.id": [],
    "doctest.DocFileCase.__repr__": [],
    "doctest.DocFileTest": [
        "<builtin>.ValueError",
        "doctest.DocTestCase.__init__",
        "ntpath.basename",
        "posixpath.basename",
        "doctest.DocTestParser.get_doctest",
        "doctest._load_testfile"
    ],
    "doctest.DocFileSuite": [
        "doctest._normalize_module",
        "doctest.DocFileTest"
    ],
    "doctest.script_from_examples": [
        "doctest._comment_line",
        "<builtin>.isinstance",
        "doctest.DocTestParser.parse"
    ],
    "doctest.testsource": [
        "doctest._normalize_module",
        "<builtin>.ValueError",
        "doctest.DocTestFinder.find",
        "doctest.script_from_examples",
        "doctest.DocTestFinder.__init__"
    ],
    "doctest.debug_src": [
        "doctest.script_from_examples",
        "doctest.debug_script"
    ],
    "doctest.debug_script": [
        "<builtin>.exec",
        "sys.exc_info",
        "<builtin>.print",
        "pdb.Pdb"
    ],
    "pdb.Pdb": [],
    "doctest.debug": [
        "doctest._normalize_module",
        "doctest.testsource",
        "doctest.debug_script"
    ],
    "doctest._TestClass": [],
    "doctest._TestClass.__init__": [],
    "doctest._TestClass.square": [],
    "doctest._TestClass.get": [],
    "sys.path.insert": [],
    "sys.exit": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._get_exports_list": [
        "<builtin>.dir",
        "<builtin>.list"
    ],
    "<builtin>.dir": [],
    "<builtin>.ImportError": [],
    "os._add": [],
    "os.removedirs": [
        "posixpath.split",
        "ntpath.split"
    ],
    "os.renames": [
        "os.makedirs",
        "os.removedirs",
        "ntpath.exists",
        "posixpath.exists",
        "ntpath.split",
        "posixpath.split"
    ],
    "os.walk": [
        "<builtin>.next",
        "posixpath.join",
        "ntpath.islink",
        "posixpath.islink",
        "os._fspath",
        "os.walk",
        "ntpath.join"
    ],
    "os._fspath": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "os.fwalk": [
        "stat.S_ISDIR",
        "posixpath.samestat",
        "os._fwalk",
        "os._fspath",
        "<builtin>.hasattr",
        "ntpath.samestat",
        "<builtin>.isinstance",
        "<builtin>.open"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "ntpath.samestat": [],
    "posixpath.samestat": [],
    "os._fwalk": [
        "<builtin>.zip",
        "posixpath.join",
        "posixpath.samestat",
        "os._fwalk",
        "ntpath.join",
        "ntpath.samestat",
        "<builtin>.open"
    ],
    "os.execl": [],
    "os.execle": [],
    "os.execlp": [
        "os.execvp"
    ],
    "os.execvp": [
        "os._execvpe"
    ],
    "os.execlpe": [
        "os.execvpe"
    ],
    "os.execvpe": [
        "os._execvpe"
    ],
    "os._execvpe": [
        "posixpath.join",
        "os.get_exec_path",
        "posixpath.dirname",
        "<builtin>.map",
        "ntpath.dirname",
        "ntpath.join"
    ],
    "os._Environ": [],
    "os._Environ.__init__": [],
    "os._Environ.__getitem__": [
        "os._createenviron.check_str",
        "os._check_bytes",
        "os._createenviron.decode",
        "<builtin>.KeyError"
    ],
    "os._createenviron.check_str": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "os._check_bytes": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "os._createenviron.decode": [],
    "os._Environ.__setitem__": [
        "os._createenviron.check_str",
        "os._check_bytes",
        "os.<lambda1>"
    ],
    "os.<lambda1>": [],
    "os._Environ.__delitem__": [
        "os.<lambda2>",
        "os._createenviron.check_str",
        "os._check_bytes",
        "<builtin>.KeyError"
    ],
    "os.<lambda2>": [
        "os.<lambda1>"
    ],
    "os._Environ.__iter__": [
        "os._createenviron.decode",
        "<builtin>.list"
    ],
    "os._Environ.__len__": [
        "<builtin>.len"
    ],
    "os._Environ.__repr__": [
        "os._createenviron.decode"
    ],
    "os._Environ.copy": [
        "<builtin>.dict"
    ],
    "os._Environ.setdefault": [],
    "os._createenviron": [
        "os._createenviron.check_str",
        "os._Environ.__init__",
        "sys.getfilesystemencoding"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.check_str"
    ],
    "sys.getfilesystemencoding": [],
    "os._createenviron.encode": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "os.getenv": [],
    "os.getenvb": [],
    "os._fscodec": [
        "sys.getfilesystemencodeerrors",
        "sys.getfilesystemencoding"
    ],
    "sys.getfilesystemencodeerrors": [],
    "os._fscodec.fsencode": [
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "os._fscodec.fsdecode": [
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "os._spawnvef": [
        "os.execvp",
        "<builtin>.ValueError",
        "nt._exit",
        "<builtin>.OSError",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "posix._exit",
        "os.execvpe"
    ],
    "nt._exit": [],
    "posix._exit": [],
    "os.spawnv": [
        "os._spawnvef"
    ],
    "os.spawnve": [
        "os._spawnvef"
    ],
    "os.spawnvp": [
        "os._spawnvef"
    ],
    "os.spawnvpe": [
        "os._spawnvef"
    ],
    "os.spawnl": [
        "os.spawnv"
    ],
    "os.spawnle": [
        "os.spawnve"
    ],
    "os.spawnlp": [
        "os.spawnvp"
    ],
    "os.spawnlpe": [
        "os.spawnvpe"
    ],
    "subprocess.Popen.__init__": [
        "io.TextIOWrapper",
        "<builtin>.ValueError",
        "subprocess.Popen._execute_child",
        "<builtin>.filter",
        "io.open",
        "warnings.warn",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.bool",
        "<builtin>.isinstance",
        "subprocess._cleanup",
        "subprocess.Popen._get_handles",
        "msvcrt.open_osfhandle"
    ],
    "io.TextIOWrapper": [],
    "os._wrap_close.__init__": [],
    "os._wrap_close": [],
    "os._wrap_close.close": [
        "subprocess.Popen.wait"
    ],
    "subprocess.Popen.wait": [
        "time.monotonic",
        "<builtin>.min",
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time"
    ],
    "os._wrap_close.__enter__": [],
    "os._wrap_close.__exit__": [
        "os._wrap_close.close"
    ],
    "os._wrap_close.__getattr__": [
        "<builtin>.getattr"
    ],
    "os._wrap_close.__iter__": [
        "<builtin>.iter"
    ],
    "io.open": [],
    "os.PathLike": [
        "abc.abstractmethod"
    ],
    "os.PathLike.__fspath__": [],
    "os.PathLike.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "os._AddedDllDirectory": [],
    "os._AddedDllDirectory.__init__": [],
    "os._AddedDllDirectory.close": [
        "nt._remove_dll_directory"
    ],
    "nt._remove_dll_directory": [],
    "os._AddedDllDirectory.__enter__": [],
    "os._AddedDllDirectory.__exit__": [
        "os._AddedDllDirectory.close"
    ],
    "os._AddedDllDirectory.__repr__": [],
    "os.add_dll_directory": [
        "nt._add_dll_directory",
        "os._AddedDllDirectory.__init__"
    ],
    "nt._add_dll_directory": [],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.normcase": [],
    "posixpath.isabs": [
        "sys.path.startswith",
        "posixpath._get_sep",
        "sys.base_prefix.startswith"
    ],
    "sys.path.endswith": [],
    "sys.base_prefix.endswith": [],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "sys.base_prefix.rfind": [],
    "sys.path.rfind": [],
    "posixpath.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "genericpath._splitext": [
        "<builtin>.max",
        "sys.base_prefix.rfind",
        "sys.path.rfind"
    ],
    "posixpath.splitdrive": [],
    "sys.stdin.buffer.rfind": [],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "posixpath.lexists": [],
    "posixpath.ismount": [
        "posixpath.join",
        "<builtin>.isinstance",
        "posixpath.realpath",
        "stat.S_ISLNK"
    ],
    "pwd.getpwnam": [],
    "posixpath.normpath": [
        "sys.base_prefix.split",
        "sys.path.startswith",
        "sys.path.split",
        "<builtin>.isinstance",
        "sys.base_prefix.startswith"
    ],
    "posixpath.abspath": [
        "posixpath.join",
        "posixpath.isabs",
        "<builtin>.isinstance",
        "posixpath.normpath"
    ],
    "posixpath._joinrealpath": [
        "posixpath._joinrealpath",
        "posixpath.isabs",
        "posixpath.join",
        "posixpath.islink",
        "<builtin>.isinstance",
        "posixpath.split",
        "sys.path.partition",
        "sys.base_prefix.partition"
    ],
    "sys.path.partition": [],
    "sys.base_prefix.partition": [],
    "posixpath.relpath": [
        "posixpath.abspath",
        "<builtin>.ValueError",
        "posixpath.join",
        "<builtin>.len",
        "genericpath.commonprefix",
        "genericpath._check_arg_types",
        "<builtin>.isinstance"
    ],
    "genericpath.commonprefix": [
        "<builtin>.tuple",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.map",
        "<builtin>.enumerate",
        "<builtin>.isinstance"
    ],
    "posixpath.commonpath": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.map",
        "<builtin>.enumerate",
        "<builtin>.set",
        "genericpath._check_arg_types",
        "<builtin>.isinstance"
    ],
    "genericpath.exists": [],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "genericpath.getsize": [],
    "genericpath.getmtime": [],
    "genericpath.getatime": [],
    "genericpath.getctime": [],
    "genericpath.samestat": [],
    "genericpath.samefile": [
        "genericpath.samestat"
    ],
    "genericpath.sameopenfile": [
        "genericpath.samestat"
    ],
    "stat.S_IMODE": [],
    "stat.S_IFMT": [],
    "stat.S_ISCHR": [
        "stat.S_IFMT"
    ],
    "stat.S_ISBLK": [
        "stat.S_IFMT"
    ],
    "stat.S_ISFIFO": [
        "stat.S_IFMT"
    ],
    "stat.S_ISSOCK": [
        "stat.S_IFMT"
    ],
    "stat.S_ISDOOR": [],
    "stat.S_ISPORT": [],
    "stat.S_ISWHT": [],
    "stat.filemode": [],
    "re.RegexFlag": [],
    "re.RegexFlag.__repr__": [
        "<builtin>.hex",
        "<builtin>.len"
    ],
    "re._compile": [
        "<builtin>.ValueError",
        "<builtin>.next",
        "<builtin>.iter",
        "sre_compile.isstring",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.len",
        "sre_compile.compile",
        "<builtin>.isinstance"
    ],
    "re.fullmatch": [
        "re._compile"
    ],
    "re.search": [
        "re._compile"
    ],
    "re.subn": [
        "re._compile"
    ],
    "re.split": [
        "re._compile"
    ],
    "re.findall": [
        "re._compile"
    ],
    "re.finditer": [
        "re._compile"
    ],
    "re.purge": [],
    "re.template": [
        "re._compile"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "<builtin>.tuple",
        "_sre.compile",
        "<builtin>.print",
        "sre_parse.parse",
        "sre_compile.isstring",
        "sre_compile._code",
        "sre_compile.dis"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "re._compile_repl": [
        "sre_parse.parse_template"
    ],
    "sre_parse.parse_template": [
        "<builtin>.chr",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.get",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.__init__",
        "<builtin>.isinstance",
        "<builtin>.len",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.parse_template.addgroup",
        "<builtin>.int",
        "<builtin>.IndexError"
    ],
    "re._expand": [
        "sre_parse.parse_template",
        "sre_parse.expand_template"
    ],
    "sre_parse.expand_template": [
        "sre_constants.error.__init__"
    ],
    "re._subx": [
        "re._compile_repl",
        "<builtin>.len"
    ],
    "re._subx.filter": [
        "sre_parse.expand_template"
    ],
    "re._pickle": [],
    "copyreg.pickle": [
        "<builtin>.callable",
        "copyreg.constructor",
        "<builtin>.TypeError"
    ],
    "re.Scanner": [],
    "sre_parse.State.__init__": [],
    "sre_parse.State.opengroup": [
        "sre_constants.error.__init__"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.seek",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.__init__",
        "sre_parse._parse_sub",
        "sre_parse.State.__init__",
        "sre_parse.SubPattern.dump"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [],
    "sre_parse.State.closegroup": [],
    "re.Scanner.scan": [
        "<builtin>.callable"
    ],
    "sre_compile._combine_flags": [],
    "sre_compile._compile": [
        "_sre.ascii_iscased",
        "_sre.ascii_tolower",
        "_sre.unicode_iscased",
        "sre_compile._optimize_charset",
        "sre_constants.error.__init__",
        "sre_compile._compile",
        "sre_compile._simple",
        "sre_compile._combine_flags",
        "sre_compile._compile_charset",
        "_sre.unicode_tolower"
    ],
    "_sre.ascii_iscased": [],
    "_sre.unicode_iscased": [],
    "_sre.ascii_tolower": [],
    "_sre.unicode_tolower": [],
    "sre_compile._optimize_charset": [
        "_sre.ascii_tolower",
        "_sre.ascii_iscased",
        "_sre.unicode_iscased",
        "<builtin>.any",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "_sre.unicode_tolower",
        "<builtin>.map",
        "sre_compile._bytes_to_codes",
        "<builtin>.len",
        "<builtin>.range",
        "sre_compile._mk_bitmap"
    ],
    "sre_compile._compile_charset": [
        "sre_constants.error.__init__"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "sre_compile._generate_overlap_table": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._get_literal_prefix": [
        "_sre.ascii_iscased",
        "sre_compile._get_literal_prefix",
        "sre_compile._get_iscased",
        "_sre.unicode_iscased",
        "sre_compile._combine_flags",
        "<builtin>.len"
    ],
    "sre_compile._get_charset_prefix": [
        "_sre.ascii_iscased",
        "sre_compile._get_iscased",
        "_sre.unicode_iscased",
        "<builtin>.any",
        "sre_compile._combine_flags",
        "<builtin>.map",
        "<builtin>.range"
    ],
    "sre_compile._compile_info": [
        "sre_parse.SubPattern.getwidth",
        "sre_compile._get_literal_prefix",
        "sre_compile._generate_overlap_table",
        "sre_compile._optimize_charset",
        "<builtin>.min",
        "sre_compile._compile_charset",
        "<builtin>.len",
        "sre_compile._get_charset_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info"
    ],
    "sre_compile._hex_code": [],
    "sre_compile.dis": [
        "sre_compile.dis.dis_",
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.chr",
        "<builtin>.ValueError",
        "<builtin>.bin",
        "<builtin>.list",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.str",
        "<builtin>.map",
        "<builtin>.range",
        "sre_compile.dis.dis_",
        "sre_compile.dis.dis_.print_",
        "sre_compile._hex_code"
    ],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "<builtin>.bin": [],
    "_sre.compile": [],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._NamedIntConstant.__new__": [
        "<builtin>.super"
    ],
    "sre_constants._NamedIntConstant.__repr__": [],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<builtin>.enumerate"
    ],
    "sre_constants.dump": [
        "<builtin>.sorted"
    ],
    "<builtin>.ord": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [],
    "sre_parse.State.groups": [
        "<builtin>.len"
    ],
    "sre_parse.State.checkgroup": [],
    "sre_parse.State.checklookbehindgroup": [
        "sre_parse.State.checkgroup"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "<builtin>.print",
        "<builtin>.str"
    ],
    "sre_parse.SubPattern.__repr__": [
        "<builtin>.repr"
    ],
    "sre_parse.SubPattern.__len__": [
        "<builtin>.len"
    ],
    "sre_parse.SubPattern.__delitem__": [],
    "sre_parse.SubPattern.__getitem__": [
        "<builtin>.isinstance",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.SubPattern.__setitem__": [],
    "sre_parse.SubPattern.insert": [],
    "sre_parse.Tokenizer": [],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "sre_parse.Tokenizer.__next",
        "<builtin>.str"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.range"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "sre_parse.Tokenizer.__next",
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.pos": [
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse._uniq": [
        "<builtin>.list"
    ],
    "sre_parse._parse_sub": [
        "sre_parse._parse",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.tell",
        "<builtin>.len",
        "sre_parse.SubPattern.append",
        "sre_parse.SubPattern.__init__"
    ],
    "<builtin>.OverflowError": [],
    "<builtin>.AssertionError": [],
    "sre_parse._parse_flags": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_parse.parse_template.addgroup": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "<builtin>.IndexError": [],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "copyreg.pickle_complex": [],
    "copyreg._reconstructor": [],
    "copyreg._reduce_ex": [
        "<builtin>.getattr",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "copyreg.__newobj__": [],
    "copyreg.__newobj_ex__": [],
    "copyreg._slotnames": [
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "copyreg.add_extension": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "copyreg.remove_extension": [
        "<builtin>.ValueError"
    ],
    "copyreg.clear_extension_cache": [],
    "subprocess.SubprocessError": [],
    "subprocess.CalledProcessError": [],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CalledProcessError.__str__": [],
    "subprocess.CalledProcessError.stdout": [],
    "subprocess.TimeoutExpired": [],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.TimeoutExpired.__str__": [],
    "subprocess.TimeoutExpired.stdout": [],
    "subprocess.STARTUPINFO": [],
    "subprocess.STARTUPINFO.__init__": [],
    "subprocess.STARTUPINFO.copy": [
        "subprocess.STARTUPINFO.__init__",
        "<builtin>.list"
    ],
    "subprocess.Handle": [],
    "subprocess.Handle.Close": [],
    "subprocess.Handle.Detach": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "subprocess.Handle.__repr__": [
        "<builtin>.int"
    ],
    "subprocess._cleanup": [],
    "subprocess._optim_args_from_interpreter_flags": [],
    "subprocess._args_from_interpreter_flags": [
        "<builtin>.getattr",
        "subprocess._optim_args_from_interpreter_flags"
    ],
    "subprocess.call": [
        "subprocess.Popen.__init__"
    ],
    "subprocess.check_call": [
        "subprocess.CalledProcessError.__init__",
        "subprocess.call"
    ],
    "subprocess.CompletedProcess": [],
    "subprocess.CompletedProcess.__init__": [],
    "subprocess.CompletedProcess.__repr__": [
        "<builtin>.type"
    ],
    "subprocess.CompletedProcess.check_returncode": [
        "subprocess.CalledProcessError.__init__"
    ],
    "subprocess.list2cmdline": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "subprocess.getstatusoutput": [
        "subprocess.check_output"
    ],
    "subprocess.getoutput": [
        "subprocess.getstatusoutput"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.hasattr"
    ],
    "subprocess.Popen": [],
    "subprocess.Popen._get_handles": [
        "_winapi.CreatePipe",
        "sys.__stdout__.fileno",
        "_winapi.CloseHandle",
        "msvcrt.get_osfhandle",
        "_winapi.GetStdHandle",
        "subprocess.Popen._get_devnull",
        "subprocess.Popen._make_inheritable",
        "<builtin>.isinstance"
    ],
    "msvcrt.open_osfhandle": [],
    "subprocess.Popen._execute_child": [
        "subprocess.Popen._posix_spawn",
        "_winapi.CreateProcess",
        "subprocess.Popen._close_pipe_fds",
        "os.get_exec_path",
        "<builtin>.map",
        "ntpath.dirname",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.isinstance",
        "subprocess.STARTUPINFO.copy",
        "<builtin>.tuple",
        "<builtin>.bytes",
        "sys.audit",
        "subprocess.list2cmdline",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.getattr",
        "subprocess.STARTUPINFO.__init__",
        "<builtin>.ValueError",
        "_winapi.CloseHandle",
        "posixpath.join",
        "<builtin>.sorted",
        "<builtin>.bytearray",
        "<builtin>.TypeError",
        "subprocess.Popen._filter_handle_list",
        "<builtin>.set",
        "ntpath.join",
        "<builtin>.int",
        "<builtin>.list",
        "warnings.warn",
        "posixpath.dirname",
        "<builtin>.bool",
        "<builtin>.issubclass"
    ],
    "<builtin>.filter": [],
    "subprocess.Popen.universal_newlines": [
        "<builtin>.bool"
    ],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "subprocess.Popen.wait",
        "asyncio.windows_utils.PipeHandle.close",
        "gzip.GzipFile.close",
        "http.client.HTTPResponse.close",
        "sys.stdout.close",
        "bz2.BZ2File.close",
        "subprocess.Popen._wait",
        "zipfile._ZipWriteFile.close"
    ],
    "zipfile.ZipExtFile.close": [
        "zipfile._SharedFile.close",
        "<builtin>.super"
    ],
    "lzma.LZMAFile.close": [],
    "gzip.GzipFile.close": [
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "sys.path.write",
        "gzip.write32u",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "sys.stdout.close": [],
    "bz2.BZ2File.close": [
        "sys.base_prefix.close",
        "tarfile.TarFile.close",
        "sys.path.close",
        "sys.path.write",
        "logging.FileHandler.close",
        "sys.base_prefix.write"
    ],
    "zipfile._ZipWriteFile.close": [
        "<builtin>.super",
        "<builtin>.RuntimeError",
        "sys.base_prefix.FileHeader",
        "<builtin>.len",
        "sys.path.FileHeader",
        "zipfile.LZMACompressor.flush",
        "zipfile.ZipInfo.FileHeader"
    ],
    "asyncio.windows_utils.PipeHandle.close": [],
    "subprocess.Popen._wait": [
        "_winapi.WaitForSingleObject",
        "subprocess.Popen._remaining_time",
        "time.sleep",
        "subprocess.TimeoutExpired.__init__",
        "<builtin>.min",
        "subprocess.Popen._handle_exitstatus",
        "_winapi.GetExitCodeProcess",
        "time.monotonic",
        "<builtin>.int",
        "subprocess.Popen._try_wait"
    ],
    "subprocess.Popen.__del__": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._stdin_write": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "bz2.BZ2File.write",
        "xml.etree.ElementTree._ListDataStream.write",
        "_io._IOBase.write",
        "_io._BufferedIOBase.write",
        "gzip.GzipFile.close",
        "sys.stdout.write",
        "asyncio.windows_utils.PipeHandle.close",
        "http.client.HTTPResponse.close",
        "zipfile._ZipWriteFile.write",
        "sys.stdout.close",
        "bz2.BZ2File.close",
        "gzip.GzipFile.write",
        "lzma.LZMAFile.write",
        "zipfile._ZipWriteFile.close"
    ],
    "bz2.BZ2File.write": [
        "sys.path.write",
        "<builtin>.len",
        "sys.base_prefix.write",
        "_compression.BaseStream._check_can_write"
    ],
    "xml.etree.ElementTree._ListDataStream.write": [],
    "_io._IOBase.write": [],
    "_io._BufferedIOBase.write": [],
    "zipfile._ZipWriteFile.write": [
        "<builtin>.ValueError",
        "zipfile.LZMACompressor.compress",
        "<builtin>.len"
    ],
    "gzip.GzipFile.write": [
        "<builtin>.ValueError",
        "_compression.BaseStream._check_not_closed",
        "<builtin>.memoryview",
        "<builtin>.OSError",
        "<builtin>.len",
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "<builtin>.isinstance",
        "sys.path.write",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "lzma.LZMAFile.write": [
        "<builtin>.len",
        "_compression.BaseStream._check_can_write"
    ],
    "subprocess.Popen.communicate": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "sys.stdout.read",
        "lzma.LZMAFile.read",
        "http.client.HTTPResponse.close",
        "bz2.BZ2File.close",
        "<builtin>.min",
        "bz2.BZ2File.read",
        "subprocess.Popen._wait",
        "http.client.HTTPResponse.read",
        "subprocess.Popen._communicate",
        "zipfile.ZipExtFile.read",
        "asyncio.windows_utils.PipeHandle.close",
        "<builtin>.ValueError",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen._remaining_time",
        "gzip.GzipFile.read",
        "subprocess.Popen.wait",
        "gzip.GzipFile.close",
        "sys.stdout.close",
        "time.monotonic",
        "zipfile._ZipWriteFile.close"
    ],
    "gzip.GzipFile.read": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "sys.stdout.read": [],
    "zipfile.ZipExtFile.read": [
        "zipfile.ZipExtFile._read1",
        "<builtin>.len"
    ],
    "bz2.BZ2File.read": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.read": [
        "_compression.BaseStream._check_can_read"
    ],
    "time.monotonic": [],
    "subprocess.Popen._communicate": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "<builtin>.memoryview",
        "subprocess.Popen._translate_newlines",
        "gzip.GzipFile.flush",
        "http.client.HTTPResponse.close",
        "bz2.BZ2File.close",
        "<builtin>.hasattr",
        "<builtin>.len",
        "subprocess.Popen._save_input",
        "threading.Thread.start",
        "subprocess.Popen._check_timeout",
        "threading.Thread.join",
        "selectors._PollLikeSelector.__init__",
        "asyncio.windows_utils.PipeHandle.close",
        "threading.Thread.__init__",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._stdin_write",
        "<builtin>.RuntimeError",
        "sys.stdout.flush",
        "subprocess.Popen._remaining_time",
        "threading.Thread.is_alive",
        "subprocess.TimeoutExpired.__init__",
        "subprocess.Popen.wait",
        "threading._DummyThread.join",
        "gzip.GzipFile.close",
        "threading._DummyThread.is_alive",
        "sys.stdout.close",
        "http.client.HTTPResponse.flush",
        "zipfile._ZipWriteFile.close"
    ],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._check_timeout": [
        "time.monotonic",
        "subprocess.TimeoutExpired.__init__"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr",
        "contextlib._BaseExitStack.__init__"
    ],
    "_winapi.GetStdHandle": [],
    "_winapi.CreatePipe": [],
    "_winapi.CloseHandle": [],
    "msvcrt.get_osfhandle": [],
    "subprocess.Popen._make_inheritable": [
        "_winapi.DuplicateHandle",
        "_winapi.GetCurrentProcess"
    ],
    "_winapi.GetCurrentProcess": [],
    "_winapi.DuplicateHandle": [],
    "subprocess.Popen._filter_handle_list": [
        "_winapi.GetFileType",
        "<builtin>.list"
    ],
    "_winapi.GetFileType": [],
    "sys.audit": [],
    "_winapi.CreateProcess": [],
    "_winapi.WaitForSingleObject": [],
    "_winapi.GetExitCodeProcess": [],
    "subprocess.Popen._readerthread": [],
    "subprocess.Popen.send_signal": [
        "subprocess.Popen.terminate",
        "<builtin>.ValueError"
    ],
    "subprocess.Popen.terminate": [
        "_winapi.TerminateProcess",
        "subprocess.Popen.send_signal",
        "_winapi.GetExitCodeProcess"
    ],
    "_winapi.TerminateProcess": [],
    "sys.__stdout__.fileno": [],
    "subprocess.Popen._posix_spawn": [
        "<builtin>.getattr",
        "subprocess.Popen._close_pipe_fds"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "subprocess.Popen._try_wait": [],
    "sys.stdout.flush": [],
    "gzip.GzipFile.flush": [
        "_compression.BaseStream._check_not_closed",
        "sys.path.flush",
        "sys.stdin.buffer.flush",
        "gzip.GzipFile.flush",
        "sys.base_prefix.flush",
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "sys.path.write",
        "sys.stdout.buffer.flush",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "selectors._PollLikeSelector.__init__": [
        "<builtin>.super"
    ],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "threading.setprofile": [],
    "threading.settrace": [],
    "threading.RLock": [
        "_thread.RLock",
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [
        "_thread.allocate_lock"
    ],
    "threading._RLock": [],
    "_thread.allocate_lock": [],
    "threading._RLock.__repr__": [
        "<builtin>.hex",
        "<builtin>.id"
    ],
    "threading._RLock.acquire": [
        "_thread.get_ident"
    ],
    "_thread.get_ident": [],
    "threading._RLock.release": [
        "<builtin>.RuntimeError",
        "_thread.get_ident"
    ],
    "threading._RLock.__exit__": [
        "threading._RLock.release"
    ],
    "threading._RLock._acquire_restore": [],
    "threading._RLock._release_save": [
        "<builtin>.RuntimeError"
    ],
    "threading._RLock._is_owned": [
        "_thread.get_ident"
    ],
    "threading.Condition": [],
    "threading.Condition.__init__": [
        "threading.RLock",
        "_collections.deque"
    ],
    "threading.Condition.__enter__": [],
    "threading.Condition.__exit__": [],
    "threading.Condition.__repr__": [
        "<builtin>.len"
    ],
    "threading.Condition._release_save": [],
    "threading.Condition._acquire_restore": [],
    "threading.Condition._is_owned": [],
    "threading.Condition.wait": [
        "_thread.allocate_lock",
        "threading.Condition._is_owned",
        "threading.Condition._acquire_restore",
        "<builtin>.RuntimeError",
        "threading.Condition._release_save"
    ],
    "threading.Condition.wait_for": [
        "time.monotonic",
        "threading.Condition.wait"
    ],
    "threading.Condition.notify": [
        "<builtin>.RuntimeError",
        "threading.Condition._is_owned",
        "_collections.deque",
        "itertools.islice"
    ],
    "itertools.islice": [],
    "threading.Condition.notify_all": [
        "threading.Condition.notify",
        "<builtin>.len"
    ],
    "threading.Semaphore": [],
    "threading.Semaphore.__init__": [
        "_thread.allocate_lock",
        "<builtin>.ValueError",
        "threading.Condition.__init__"
    ],
    "threading.Semaphore.acquire": [
        "time.monotonic",
        "<builtin>.ValueError",
        "threading.Condition.wait"
    ],
    "threading.Semaphore.release": [
        "threading.Condition.notify"
    ],
    "threading.Semaphore.__exit__": [
        "threading.Semaphore.release"
    ],
    "threading.BoundedSemaphore": [],
    "threading.BoundedSemaphore.__init__": [
        "threading.Semaphore.__init__"
    ],
    "threading.BoundedSemaphore.release": [
        "threading.Condition.notify",
        "<builtin>.ValueError"
    ],
    "threading.Event": [],
    "threading.Event._reset_internal_locks": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "threading.Barrier": [],
    "threading.Barrier.__init__": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "threading.Barrier.wait": [
        "threading.Barrier._wait",
        "threading.Barrier._exit",
        "threading.Barrier._release",
        "threading.Barrier._enter"
    ],
    "threading.Barrier._enter": [
        "threading.Condition.wait"
    ],
    "threading.Barrier._release": [
        "threading.Barrier._break",
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._wait": [
        "threading.Condition.wait_for",
        "threading.Barrier._break"
    ],
    "threading.Barrier._exit": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._break": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._wait.<lambda1>": [],
    "threading.Barrier.reset": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier.abort": [
        "threading.Barrier._break"
    ],
    "threading.Barrier.parties": [],
    "threading.Barrier.n_waiting": [],
    "threading.Barrier.broken": [],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "threading._newname": [],
    "threading.Thread": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "threading.Thread._reset_internal_locks": [
        "threading.Event._reset_internal_locks",
        "threading.Thread._set_tstate_lock"
    ],
    "threading.Thread._set_tstate_lock": [
        "_thread._set_sentinel"
    ],
    "threading.Thread.__repr__": [
        "threading._DummyThread.is_alive",
        "threading.Thread.is_alive",
        "threading.Event.is_set"
    ],
    "_thread.start_new_thread": [],
    "threading.Thread.run": [
        "bpytop.UpdateChecker._checker",
        "bpytop.Collector._runner",
        "logging.handlers.QueueListener._monitor",
        "subprocess.Popen._readerthread",
        "bpytop.Key._get_key"
    ],
    "threading.Thread._bootstrap": [
        "threading.Thread._bootstrap_inner"
    ],
    "threading.Thread._bootstrap_inner": [
        "sys.settrace",
        "threading.Thread._set_tstate_lock",
        "_thread.get_ident",
        "threading.Event.set",
        "threading.Thread.run",
        "threading.Thread._set_ident",
        "sys.setprofile",
        "threading.Thread._set_native_id",
        "threading._make_invoke_excepthook.invoke_excepthook"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [
        "_thread.get_native_id"
    ],
    "_thread.get_native_id": [],
    "_thread._set_sentinel": [],
    "sys.setprofile": [],
    "threading._make_invoke_excepthook.invoke_excepthook": [
        "_thread._excepthook",
        "sys.exc_info",
        "_thread._ExceptHookArgs",
        "sys.excepthook"
    ],
    "threading.Thread._stop": [],
    "threading.Thread._delete": [
        "_thread.get_ident"
    ],
    "threading.Thread._wait_for_tstate_lock": [
        "threading._DummyThread._stop",
        "threading.Thread._stop"
    ],
    "threading._DummyThread._stop": [],
    "threading.Thread.name": [
        "<builtin>.str"
    ],
    "threading.Thread.ident": [],
    "threading.Thread.native_id": [],
    "threading.Thread.daemon": [
        "<builtin>.RuntimeError",
        "threading.Event.is_set"
    ],
    "threading.Thread.isDaemon": [],
    "threading.Thread.setDaemon": [],
    "threading.Thread.getName": [],
    "threading.Thread.setName": [],
    "threading.ExceptHookArgs": [],
    "threading.excepthook": [
        "<builtin>.print",
        "_thread.get_ident",
        "sys.stderr.flush",
        "traceback.print_exception"
    ],
    "sys.stderr.flush": [],
    "_thread._ExceptHookArgs": [],
    "_thread._excepthook": [],
    "sys.excepthook": [],
    "threading.Timer": [],
    "threading.Timer.__init__": [
        "threading.Event.__init__",
        "threading.Thread.__init__"
    ],
    "threading.Timer.cancel": [
        "threading.Event.set"
    ],
    "threading.Timer.run": [
        "threading.Event.is_set",
        "threading.Event.wait",
        "threading.Event.set"
    ],
    "threading._MainThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread.__init__",
        "threading.Thread._set_tstate_lock",
        "threading.Event.set",
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id"
    ],
    "threading._DummyThread": [],
    "threading._DummyThread.__init__": [
        "threading.Thread.__init__",
        "threading.Event.set",
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id",
        "threading._newname"
    ],
    "threading.active_count": [
        "<builtin>.len"
    ],
    "threading._enumerate": [
        "<builtin>.list"
    ],
    "threading.enumerate": [
        "<builtin>.list"
    ],
    "threading._shutdown": [
        "threading._DummyThread._stop",
        "threading.Thread._stop",
        "<builtin>.list"
    ],
    "threading.main_thread": [],
    "threading._after_fork": [
        "threading._enumerate",
        "_thread.get_ident",
        "threading._MainThread.__init__",
        "_thread.allocate_lock",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "_threading_local._localimpl": [],
    "_threading_local._localimpl.__init__": [
        "<builtin>.str",
        "<builtin>.id"
    ],
    "_threading_local._localimpl.get_dict": [
        "threading.current_thread",
        "<builtin>.id"
    ],
    "_threading_local._localimpl.create_dict": [
        "threading.current_thread",
        "_weakref.ref",
        "<builtin>.id"
    ],
    "_threading_local._localimpl.create_dict.local_deleted": [],
    "_threading_local._localimpl.create_dict.thread_deleted": [],
    "_threading_local._patch": [],
    "_threading_local.local": [],
    "_threading_local.local.__new__": [
        "_threading_local._localimpl.__init__",
        "threading.RLock",
        "<builtin>.TypeError",
        "_threading_local._localimpl.create_dict"
    ],
    "_threading_local.local.__getattribute__": [
        "_threading_local._patch"
    ],
    "_threading_local.local.__setattr__": [
        "<builtin>.AttributeError",
        "_threading_local._patch"
    ],
    "_threading_local.local.__delattr__": [
        "<builtin>.AttributeError",
        "_threading_local._patch"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakMethod.__new__": [
        "_weakref.ref",
        "_weakref.ref.__new__",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "weakref.WeakMethod.__new__._cb": [],
    "_weakref.ref.__new__": [],
    "weakref.WeakMethod.__call__": [
        "<builtin>.super",
        "_weakref.ref._func_ref",
        "_weakref.ref._meth_type"
    ],
    "_weakref.ref._func_ref": [],
    "_weakref.ref._meth_type": [],
    "weakref.WeakMethod.__eq__": [
        "<builtin>.isinstance",
        "_weakref.ref.__eq__"
    ],
    "_weakref.ref.__eq__": [],
    "weakref.WeakMethod.__ne__": [
        "<builtin>.isinstance",
        "_weakref.ref.__ne__"
    ],
    "_weakref.ref.__ne__": [],
    "weakref.WeakValueDictionary": [],
    "weakref.WeakValueDictionary.__init__": [
        "<builtin>.set"
    ],
    "weakref.WeakValueDictionary.__init__.remove": [
        "_weakref._remove_dead_weakref"
    ],
    "_weakref._remove_dead_weakref": [],
    "weakref.WeakValueDictionary._commit_removals": [
        "_weakref._remove_dead_weakref"
    ],
    "weakref.WeakValueDictionary.__getitem__": [
        "<builtin>.KeyError",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__delitem__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__len__": [
        "<builtin>.len",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__contains__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__repr__": [
        "<builtin>.id"
    ],
    "weakref.WeakValueDictionary.__setitem__": [
        "weakref.KeyedRef.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "weakref.WeakValueDictionary.copy": [
        "weakref.WeakValueDictionary.__init__",
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "copy.deepcopy": [
        "<builtin>.id",
        "<builtin>.isinstance",
        "copy._keep_alive",
        "<builtin>.type",
        "copy._deepcopy_atomic",
        "<builtin>.getattr",
        "copy._reconstruct",
        "<builtin>.issubclass"
    ],
    "weakref.WeakValueDictionary.get": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.keys": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.itervaluerefs": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.values": [
        "_weakrefset._IterationGuard.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.pop": [
        "<builtin>.KeyError",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.setdefault": [
        "weakref.KeyedRef.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.valuerefs": [
        "<builtin>.list",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.KeyedRef": [],
    "weakref.KeyedRef.__new__": [
        "_weakref.ref.__new__"
    ],
    "weakref.WeakKeyDictionary": [],
    "weakref.WeakKeyDictionary.__init__.remove": [],
    "weakref.WeakKeyDictionary._commit_removals": [],
    "weakref.WeakKeyDictionary._scrub_removals": [],
    "weakref.WeakKeyDictionary.__delitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__getitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__len__": [
        "<builtin>.len",
        "weakref.WeakKeyDictionary._scrub_removals"
    ],
    "weakref.WeakKeyDictionary.__repr__": [
        "<builtin>.id"
    ],
    "weakref.WeakKeyDictionary.__setitem__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.copy": [
        "weakref.WeakKeyDictionary.__init__",
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.get": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.__contains__": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.keys": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.values": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.keyrefs": [
        "<builtin>.list"
    ],
    "weakref.WeakKeyDictionary.pop": [
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.setdefault": [
        "_weakref.ref"
    ],
    "weakref.finalize": [
        "weakref.finalize._Info",
        "itertools.count"
    ],
    "weakref.finalize._Info": [],
    "atexit.register": [],
    "weakref.finalize.__call__": [],
    "weakref.finalize.detach": [],
    "weakref.finalize.peek": [],
    "weakref.finalize.alive": [],
    "weakref.finalize.atexit": [
        "<builtin>.bool"
    ],
    "weakref.finalize.__repr__": [
        "<builtin>.type",
        "<builtin>.id"
    ],
    "weakref.finalize._select_for_exit": [],
    "weakref.finalize._select_for_exit.<lambda1>": [],
    "weakref.finalize._exitfunc": [
        "gc.enable",
        "gc.disable",
        "gc.isenabled",
        "sys.exc_info",
        "sys.excepthook",
        "weakref.finalize._select_for_exit"
    ],
    "gc.isenabled": [],
    "gc.disable": [],
    "gc.enable": [],
    "copy.Error": [],
    "copy.copy": [
        "copy._copy_immutable",
        "<builtin>.getattr",
        "<builtin>.type",
        "<builtin>.isinstance",
        "copy._reconstruct",
        "<builtin>.issubclass"
    ],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.id",
        "<builtin>.setattr",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "copy.deepcopy"
    ],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "copy._deepcopy_list": [
        "copy.deepcopy",
        "<builtin>.id"
    ],
    "copy._deepcopy_tuple": [
        "<builtin>.tuple",
        "copy.deepcopy",
        "<builtin>.zip",
        "<builtin>.id"
    ],
    "copy._deepcopy_dict": [
        "copy.deepcopy",
        "<builtin>.id"
    ],
    "copy._deepcopy_method": [
        "copy.deepcopy",
        "<builtin>.type",
        "email.message.Message.__init__"
    ],
    "email.message.Message.__init__": [],
    "traceback.print_list": [
        "traceback.StackSummary.from_list",
        "<builtin>.print",
        "traceback.StackSummary.format"
    ],
    "traceback.StackSummary.from_list": [
        "<builtin>.isinstance",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted"
    ],
    "traceback.print_tb": [
        "traceback.print_list",
        "traceback.extract_tb"
    ],
    "traceback.extract_tb": [
        "traceback.StackSummary.extract",
        "traceback.walk_tb"
    ],
    "traceback.format_tb": [
        "traceback.extract_tb"
    ],
    "traceback.walk_tb": [],
    "traceback.StackSummary.extract": [
        "linecache.checkcache",
        "linecache.lazycache",
        "itertools.islice",
        "<builtin>.set",
        "<builtin>.getattr",
        "collections.deque",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.TracebackException.__init__": [
        "traceback.StackSummary.extract",
        "traceback.walk_tb",
        "traceback.TracebackException.__init__",
        "traceback._some_str",
        "<builtin>.type",
        "<builtin>.set",
        "<builtin>.str",
        "<builtin>.id",
        "traceback.TracebackException._load_lines",
        "<builtin>.issubclass"
    ],
    "traceback.TracebackException.format": [
        "traceback.TracebackException.format_exception_only",
        "traceback.TracebackException.format"
    ],
    "traceback.format_exception": [
        "<builtin>.list",
        "traceback.TracebackException.format",
        "<builtin>.type",
        "traceback.TracebackException.__init__"
    ],
    "traceback.TracebackException.format_exception_only": [
        "traceback._format_final_exc_line",
        "<builtin>.min",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.issubclass"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "traceback._some_str": [
        "<builtin>.str",
        "<builtin>.type"
    ],
    "traceback.print_exc": [
        "sys.exc_info",
        "traceback.print_exception"
    ],
    "traceback.format_exc": [
        "traceback.format_exception",
        "sys.exc_info"
    ],
    "traceback.print_last": [
        "<builtin>.ValueError",
        "<builtin>.hasattr",
        "traceback.print_exception"
    ],
    "traceback.print_stack": [
        "traceback.extract_stack",
        "traceback.print_list",
        "sys._getframe"
    ],
    "traceback.extract_stack": [
        "traceback.StackSummary.extract",
        "traceback.walk_stack",
        "sys._getframe"
    ],
    "traceback.format_stack": [
        "traceback.extract_stack",
        "sys._getframe",
        "traceback.format_list"
    ],
    "traceback.walk_stack": [
        "sys._getframe"
    ],
    "traceback.clear_frames": [],
    "traceback.FrameSummary": [],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "traceback.FrameSummary.__eq__": [
        "<builtin>.isinstance"
    ],
    "traceback.FrameSummary.__getitem__": [],
    "traceback.FrameSummary.__iter__": [
        "<builtin>.iter"
    ],
    "traceback.FrameSummary.__repr__": [],
    "traceback.FrameSummary.__len__": [],
    "traceback.FrameSummary.line": [
        "linecache.getline"
    ],
    "traceback.StackSummary": [],
    "collections.deque": [],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "linecache.checkcache": [
        "<builtin>.len",
        "<builtin>.list"
    ],
    "traceback.TracebackException": [],
    "traceback.TracebackException._load_lines": [
        "traceback.TracebackException._load_lines"
    ],
    "traceback.TracebackException.from_exception": [
        "<builtin>.type",
        "traceback.TracebackException.__init__"
    ],
    "traceback.TracebackException.__eq__": [],
    "traceback.TracebackException.__str__": [],
    "linecache.clearcache": [],
    "linecache.updatecache": [
        "linecache.lazycache",
        "posixpath.join",
        "<builtin>.len",
        "ntpath.join",
        "posixpath.isabs",
        "ntpath.isabs"
    ],
    "ntpath.isabs": [
        "ntpath.splitdrive",
        "ntpath._get_bothseps",
        "sys.base_prefix.replace",
        "<builtin>.len",
        "<builtin>.isinstance",
        "sys.path.replace"
    ],
    "tokenize.TokenInfo": [],
    "tokenize.TokenInfo.__repr__": [],
    "tokenize.TokenInfo.exact_type": [],
    "tokenize.group": [],
    "tokenize.any": [
        "tokenize.group"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize._all_string_prefixes": [
        "itertools.product",
        "itertools.permutations"
    ],
    "itertools.permutations": [],
    "itertools.product": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "tokenize.Untokenizer.__init__": [],
    "tokenize.Untokenizer.add_whitespace": [
        "<builtin>.ValueError"
    ],
    "tokenize.Untokenizer.untokenize": [
        "tokenize.Untokenizer.add_whitespace",
        "<builtin>.iter",
        "<builtin>.len",
        "tokenize.Untokenizer.compat"
    ],
    "tokenize.Untokenizer.compat": [
        "itertools.chain"
    ],
    "itertools.chain": [],
    "tokenize.untokenize": [
        "tokenize.Untokenizer.untokenize",
        "tokenize.Untokenizer.__init__"
    ],
    "tokenize._get_normal_name": [],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.read_or_stop",
        "tokenize.detect_encoding.find_cookie"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "<builtin>.SyntaxError",
        "tokenize._get_normal_name"
    ],
    "tokenize.open": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "tokenize.detect_encoding",
        "gzip.GzipFile.seek",
        "_io._BufferedIOBase.seek",
        "_io.TextIOWrapper",
        "asyncio.windows_utils.PipeHandle.close",
        "sys.stdout.seek",
        "gzip.GzipFile.close",
        "builtins.open",
        "http.client.HTTPResponse.close",
        "sys.stdout.close",
        "_io._IOBase.seek",
        "lzma.LZMAFile.seek",
        "bz2.BZ2File.close",
        "zipfile.ZipExtFile.seek",
        "bz2.BZ2File.seek",
        "zipfile._ZipWriteFile.close"
    ],
    "builtins.open": [],
    "_io._IOBase.seek": [],
    "lzma.LZMAFile.seek": [
        "_compression.BaseStream._check_can_seek"
    ],
    "bz2.BZ2File.seek": [
        "_compression.BaseStream._check_can_seek"
    ],
    "gzip.GzipFile.seek": [
        "<builtin>.ValueError",
        "_compression.BaseStream._check_not_closed",
        "<builtin>.OSError",
        "<builtin>.range",
        "gzip.GzipFile.write"
    ],
    "_io._BufferedIOBase.seek": [],
    "zipfile.ZipExtFile.seek": [
        "<builtin>.ValueError",
        "zipfile.ZipExtFile.tell",
        "zipfile.ZipExtFile._init_decrypter",
        "io.UnsupportedOperation",
        "<builtin>.min",
        "<builtin>.len",
        "zipfile._SharedFile.seek",
        "zipfile.ZipExtFile.read",
        "zipfile._get_decompressor"
    ],
    "sys.stdout.seek": [],
    "_io.TextIOWrapper": [],
    "tokenize.tokenize": [
        "itertools.chain",
        "tokenize.detect_encoding",
        "<builtin>.iter",
        "itertools.repeat",
        "tokenize._tokenize"
    ],
    "itertools.repeat": [],
    "tokenize._tokenize": [
        "<builtin>.IndentationError",
        "tokenize._compile",
        "sys.stdin.readline",
        "<builtin>.len"
    ],
    "sys.stdin.readline": [],
    "<builtin>.IndentationError": [],
    "tokenize.generate_tokens": [
        "tokenize._tokenize"
    ],
    "tokenize.main.perror": [
        "sys.stderr.write"
    ],
    "tokenize.main.error": [
        "tokenize.main.perror",
        "sys.exit"
    ],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.CodecInfo.__new__": [],
    "codecs.CodecInfo.__repr__": [
        "<builtin>.id"
    ],
    "codecs.Codec": [],
    "codecs.Codec.encode": [],
    "codecs.Codec.decode": [],
    "codecs.IncrementalEncoder": [],
    "codecs.IncrementalEncoder.__init__": [],
    "codecs.IncrementalEncoder.encode": [],
    "codecs.IncrementalEncoder.reset": [],
    "codecs.IncrementalEncoder.getstate": [],
    "codecs.IncrementalEncoder.setstate": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder.__init__": [
        "codecs.IncrementalEncoder.__init__"
    ],
    "codecs.BufferedIncrementalEncoder._buffer_encode": [],
    "codecs.BufferedIncrementalEncoder.encode": [
        "codecs.BufferedIncrementalEncoder._buffer_encode"
    ],
    "codecs.BufferedIncrementalEncoder.reset": [
        "codecs.IncrementalEncoder.reset"
    ],
    "codecs.BufferedIncrementalEncoder.getstate": [],
    "codecs.BufferedIncrementalEncoder.setstate": [],
    "codecs.IncrementalDecoder": [],
    "codecs.IncrementalDecoder.__init__": [],
    "codecs.IncrementalDecoder.decode": [],
    "codecs.IncrementalDecoder.reset": [],
    "codecs.IncrementalDecoder.getstate": [],
    "codecs.IncrementalDecoder.setstate": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder.__init__": [
        "codecs.IncrementalDecoder.__init__"
    ],
    "codecs.BufferedIncrementalDecoder._buffer_decode": [],
    "codecs.BufferedIncrementalDecoder.decode": [
        "codecs.BufferedIncrementalDecoder._buffer_decode"
    ],
    "codecs.BufferedIncrementalDecoder.reset": [
        "codecs.IncrementalDecoder.reset"
    ],
    "codecs.BufferedIncrementalDecoder.getstate": [],
    "codecs.BufferedIncrementalDecoder.setstate": [],
    "codecs.StreamWriter": [],
    "codecs.StreamWriter.__init__": [],
    "codecs.StreamWriter.write": [
        "codecs.Codec.encode"
    ],
    "codecs.StreamWriter.writelines": [
        "codecs.StreamWriter.write"
    ],
    "codecs.StreamWriter.reset": [],
    "codecs.StreamWriter.seek": [
        "codecs.StreamWriter.reset"
    ],
    "codecs.StreamWriter.__getattr__": [],
    "codecs.StreamWriter.__enter__": [],
    "codecs.StreamWriter.__exit__": [],
    "codecs.StreamReader": [],
    "codecs.StreamReader.__init__": [],
    "codecs.StreamReader.decode": [],
    "codecs.StreamReader.read": [
        "codecs.StreamReader.decode",
        "<builtin>.len"
    ],
    "codecs.StreamReader.readline": [
        "<builtin>.isinstance",
        "codecs.StreamReader.read",
        "<builtin>.len"
    ],
    "codecs.StreamReader.readlines": [
        "codecs.StreamReader.read"
    ],
    "codecs.StreamReader.reset": [],
    "codecs.StreamReader.seek": [
        "codecs.StreamReader.reset"
    ],
    "codecs.StreamReader.__next__": [
        "codecs.StreamReader.readline"
    ],
    "codecs.StreamReader.__iter__": [],
    "codecs.StreamReader.__getattr__": [],
    "codecs.StreamReader.__enter__": [],
    "codecs.StreamReader.__exit__": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamReaderWriter.__init__": [],
    "codecs.StreamReaderWriter.read": [],
    "codecs.StreamReaderWriter.readline": [],
    "codecs.StreamReaderWriter.readlines": [],
    "codecs.StreamReaderWriter.__next__": [
        "<builtin>.next"
    ],
    "codecs.StreamReaderWriter.__iter__": [],
    "codecs.StreamReaderWriter.write": [],
    "codecs.StreamReaderWriter.writelines": [],
    "codecs.StreamReaderWriter.reset": [],
    "codecs.StreamReaderWriter.seek": [],
    "codecs.StreamReaderWriter.__getattr__": [],
    "codecs.StreamReaderWriter.__enter__": [],
    "codecs.StreamReaderWriter.__exit__": [],
    "codecs.StreamRecoder": [],
    "codecs.StreamRecoder.__init__": [],
    "codecs.StreamRecoder.read": [],
    "codecs.StreamRecoder.readline": [],
    "codecs.StreamRecoder.readlines": [],
    "codecs.StreamRecoder.__next__": [
        "<builtin>.next"
    ],
    "codecs.StreamRecoder.__iter__": [],
    "codecs.StreamRecoder.write": [],
    "codecs.StreamRecoder.writelines": [],
    "codecs.StreamRecoder.reset": [],
    "codecs.StreamRecoder.seek": [],
    "codecs.StreamRecoder.__getattr__": [],
    "codecs.StreamRecoder.__enter__": [],
    "codecs.StreamRecoder.__exit__": [
        "sys.stdin.close",
        "sys.stdout.close"
    ],
    "sys.stdin.close": [],
    "codecs.open": [
        "builtins.open",
        "codecs.StreamReaderWriter.__init__"
    ],
    "codecs.EncodedFile": [
        "codecs.StreamRecoder.__init__"
    ],
    "codecs.getencoder": [],
    "codecs.getdecoder": [],
    "codecs.getincrementalencoder": [
        "<builtin>.LookupError"
    ],
    "<builtin>.LookupError": [],
    "codecs.getincrementaldecoder": [
        "<builtin>.LookupError"
    ],
    "codecs.getreader": [],
    "codecs.getwriter": [],
    "codecs.iterencode": [
        "codecs.getincrementalencoder"
    ],
    "codecs.iterdecode": [
        "codecs.getincrementaldecoder"
    ],
    "codecs.make_identity_dict": [],
    "codecs.make_encoding_map": [],
    "encodings.CodecRegistryError": [],
    "encodings.normalize_encoding": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "encodings.search_function": [
        "<builtin>.callable",
        "encodings.normalize_encoding",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.__import__"
    ],
    "_winapi.GetACP": [],
    "encodings.mbcs.getregentry": [],
    "encodings.mbcs.decode": [],
    "encodings.mbcs.IncrementalEncoder": [],
    "encodings.mbcs.IncrementalEncoder.encode": [],
    "encodings.mbcs.IncrementalDecoder": [],
    "encodings.mbcs.StreamWriter": [],
    "encodings.mbcs.StreamReader": [],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "_io._RawIOBase.register": [],
    "_io._IOBase.register": [],
    "token.ISTERMINAL": [],
    "token.ISNONTERMINAL": [],
    "token.ISEOF": [],
    "argparse._AttributeHolder": [],
    "argparse._AttributeHolder.__repr__": [
        "argparse._AttributeHolder._get_args",
        "<builtin>.repr",
        "argparse._AttributeHolder._get_kwargs",
        "argparse.ArgumentParser._get_kwargs"
    ],
    "argparse._AttributeHolder._get_args": [],
    "argparse._AttributeHolder._get_kwargs": [
        "<builtin>.sorted"
    ],
    "argparse.ArgumentParser._get_kwargs": [
        "<builtin>.getattr"
    ],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter.__init__": [
        "shutil.get_terminal_size",
        "<builtin>.max",
        "<builtin>.min",
        "re.compile",
        "argparse.HelpFormatter._Section.__init__"
    ],
    "shutil.get_terminal_size": [
        "sys.__stdout__.fileno",
        "<builtin>.int"
    ],
    "argparse.HelpFormatter._Section.__init__": [],
    "argparse.HelpFormatter._indent": [],
    "argparse.HelpFormatter._dedent": [],
    "argparse.HelpFormatter._Section": [],
    "argparse.HelpFormatter._Section.format_help": [
        "argparse.HelpFormatter._dedent",
        "argparse.HelpFormatter._indent"
    ],
    "argparse.HelpFormatter._add_item": [],
    "argparse.HelpFormatter.start_section": [
        "argparse.HelpFormatter._add_item",
        "argparse.HelpFormatter._indent",
        "argparse.HelpFormatter._Section.__init__"
    ],
    "argparse.HelpFormatter.end_section": [
        "argparse.HelpFormatter._dedent"
    ],
    "argparse.HelpFormatter.add_text": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.add_usage": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.add_argument": [
        "<builtin>.max",
        "argparse.HelpFormatter._add_item",
        "argparse.HelpFormatter._iter_indented_subactions",
        "<builtin>.len",
        "argparse.HelpFormatter._format_action_invocation"
    ],
    "argparse.HelpFormatter._format_action_invocation": [
        "argparse.HelpFormatter._get_default_metavar_for_positional",
        "argparse.HelpFormatter._metavar_formatter.format",
        "argparse.HelpFormatter._metavar_formatter",
        "argparse.HelpFormatter._format_args",
        "argparse.HelpFormatter._get_default_metavar_for_optional"
    ],
    "argparse.HelpFormatter._iter_indented_subactions": [
        "argparse.HelpFormatter._dedent",
        "argparse.HelpFormatter._indent"
    ],
    "argparse.HelpFormatter.add_arguments": [
        "argparse.HelpFormatter.add_argument"
    ],
    "argparse.HelpFormatter.format_help": [
        "argparse.HelpFormatter._Section.format_help"
    ],
    "argparse.HelpFormatter._join_parts": [],
    "argparse.HelpFormatter._format_usage": [
        "gettext.gettext",
        "re.findall",
        "argparse.HelpFormatter._format_actions_usage",
        "<builtin>.dict",
        "<builtin>.len",
        "argparse.HelpFormatter._format_usage.get_lines"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "argparse.HelpFormatter._format_actions_usage": [
        "<builtin>.sorted",
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "re.sub",
        "<builtin>.enumerate",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.range",
        "argparse.HelpFormatter._format_args",
        "argparse.HelpFormatter._get_default_metavar_for_positional"
    ],
    "argparse.HelpFormatter._format_usage.get_lines": [
        "<builtin>.len"
    ],
    "argparse.HelpFormatter._get_default_metavar_for_positional": [],
    "argparse.HelpFormatter._format_args": [
        "argparse.HelpFormatter._metavar_formatter.format",
        "<builtin>.range",
        "<builtin>.ValueError",
        "argparse.HelpFormatter._metavar_formatter"
    ],
    "argparse.HelpFormatter._get_default_metavar_for_optional": [],
    "argparse.HelpFormatter._format_text": [
        "<builtin>.dict",
        "argparse.HelpFormatter._fill_text",
        "<builtin>.max"
    ],
    "argparse.HelpFormatter._format_action": [
        "<builtin>.max",
        "argparse.HelpFormatter._split_lines",
        "argparse.HelpFormatter._join_parts",
        "argparse.HelpFormatter._expand_help",
        "<builtin>.min",
        "argparse.HelpFormatter._iter_indented_subactions",
        "<builtin>.len",
        "argparse.HelpFormatter._format_action",
        "argparse.HelpFormatter._format_action_invocation"
    ],
    "argparse.HelpFormatter._expand_help": [
        "argparse.HelpFormatter._get_help_string",
        "<builtin>.list",
        "<builtin>.dict",
        "<builtin>.vars",
        "<builtin>.str",
        "<builtin>.hasattr"
    ],
    "argparse.HelpFormatter._metavar_formatter": [
        "<builtin>.str"
    ],
    "argparse.HelpFormatter._metavar_formatter.format": [
        "<builtin>.isinstance"
    ],
    "argparse.HelpFormatter._get_help_string": [],
    "textwrap.wrap": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.wrap"
    ],
    "textwrap.fill": [
        "textwrap.TextWrapper.fill",
        "textwrap.TextWrapper.__init__"
    ],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawDescriptionHelpFormatter._fill_text": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.RawTextHelpFormatter._split_lines": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter._get_help_string": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter._get_default_metavar_for_optional": [],
    "argparse.MetavarTypeHelpFormatter._get_default_metavar_for_positional": [],
    "argparse._get_action_name": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse.ArgumentError.__str__": [
        "<builtin>.dict"
    ],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse.Action.__init__": [],
    "argparse.Action._get_kwargs": [
        "<builtin>.getattr"
    ],
    "argparse.Action.__call__": [
        "<builtin>.NotImplementedError",
        "gettext.gettext"
    ],
    "argparse._StoreAction": [],
    "argparse._StoreAction.__init__": [
        "<builtin>.ValueError",
        "<builtin>.super"
    ],
    "argparse._StoreAction.__call__": [
        "<builtin>.setattr"
    ],
    "argparse._StoreConstAction": [],
    "argparse._StoreConstAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._StoreConstAction.__call__": [
        "<builtin>.setattr"
    ],
    "argparse._StoreTrueAction": [],
    "argparse._StoreTrueAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._StoreFalseAction": [],
    "argparse._StoreFalseAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._AppendAction": [],
    "argparse._AppendAction.__init__": [
        "<builtin>.ValueError",
        "<builtin>.super"
    ],
    "argparse._AppendAction.__call__": [
        "<builtin>.getattr",
        "argparse._copy_items",
        "<builtin>.setattr"
    ],
    "argparse._AppendConstAction": [],
    "argparse._AppendConstAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._AppendConstAction.__call__": [
        "<builtin>.getattr",
        "argparse._copy_items",
        "<builtin>.setattr"
    ],
    "argparse._CountAction": [],
    "argparse._CountAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._CountAction.__call__": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "argparse._HelpAction": [],
    "argparse._HelpAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._HelpAction.__call__": [],
    "argparse._VersionAction": [],
    "argparse._VersionAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._VersionAction.__call__": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._SubParsersAction._ChoicesPseudoAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction.__init__": [
        "<builtin>.super"
    ],
    "argparse._SubParsersAction.add_parser": [
        "argparse._SubParsersAction._ChoicesPseudoAction.__init__"
    ],
    "argparse._SubParsersAction._get_subactions": [],
    "argparse._SubParsersAction.__call__": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "<builtin>.setattr",
        "<builtin>.vars",
        "<builtin>.getattr"
    ],
    "argparse._ExtendAction": [],
    "argparse._ExtendAction.__call__": [
        "<builtin>.getattr",
        "argparse._copy_items",
        "<builtin>.setattr"
    ],
    "argparse.FileType": [],
    "argparse.FileType.__init__": [],
    "argparse.FileType.__call__": [
        "<builtin>.ValueError",
        "gettext.gettext",
        "<builtin>.open"
    ],
    "argparse.FileType.__repr__": [
        "<builtin>.repr",
        "<builtin>.type"
    ],
    "argparse.Namespace": [],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse.Namespace.__eq__": [
        "<builtin>.isinstance",
        "<builtin>.vars"
    ],
    "argparse.Namespace.__contains__": [],
    "argparse._ActionsContainer": [],
    "argparse._ActionsContainer.__init__": [
        "argparse._ActionsContainer.register",
        "argparse._ActionsContainer._get_handler",
        "<builtin>.super",
        "re.compile"
    ],
    "argparse._ActionsContainer.register": [],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "argparse._ActionsContainer.set_defaults": [],
    "argparse._ActionsContainer.get_default": [],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "gettext.gettext",
        "<builtin>.TypeError"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.dict",
        "<builtin>.ValueError",
        "gettext.gettext",
        "<builtin>.len"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse.ArgumentParser._get_formatter": [
        "argparse.HelpFormatter.__init__"
    ],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse.ArgumentParser._add_action": [],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer._remove_action": [],
    "argparse._ActionsContainer._add_container_actions": [
        "<builtin>.ValueError",
        "gettext.gettext",
        "argparse._ActionsContainer.add_argument_group",
        "argparse._ActionsContainer.add_mutually_exclusive_group"
    ],
    "argparse._ActionsContainer._handle_conflict_error": [
        "argparse.ArgumentError.__init__",
        "gettext.ngettext",
        "<builtin>.len"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "argparse._ActionsContainer._handle_conflict_resolve": [],
    "argparse._ArgumentGroup": [],
    "argparse._ArgumentGroup._add_action": [
        "<builtin>.super"
    ],
    "argparse._ArgumentGroup._remove_action": [
        "<builtin>.super"
    ],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse._MutuallyExclusiveGroup._add_action": [
        "argparse._ActionsContainer._add_action",
        "<builtin>.ValueError",
        "gettext.gettext",
        "argparse.ArgumentParser._add_action"
    ],
    "argparse._MutuallyExclusiveGroup._remove_action": [
        "argparse._ActionsContainer._remove_action"
    ],
    "argparse.ArgumentParser": [],
    "argparse.ArgumentParser.__init__.identity": [],
    "argparse.ArgumentParser.add_subparsers": [
        "argparse._ActionsContainer._pop_action_class",
        "argparse.ArgumentParser._get_positional_actions",
        "gettext.gettext",
        "argparse.ArgumentParser._get_formatter",
        "argparse._ArgumentGroup._add_action",
        "<builtin>.type",
        "argparse.ArgumentParser.error",
        "argparse._ActionsContainer.add_argument_group"
    ],
    "argparse.ArgumentParser.error": [
        "gettext.gettext",
        "argparse.ArgumentParser.exit",
        "argparse.ArgumentParser.print_usage"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._get_optional_actions": [],
    "argparse.ArgumentParser.parse_known_args": [
        "argparse.ArgumentParser.error",
        "sys.exc_info",
        "<builtin>.list",
        "<builtin>.setattr",
        "argparse.Namespace.__init__",
        "<builtin>.str",
        "<builtin>.delattr",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "argparse.ArgumentParser._parse_known_args"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_positional_actions",
        "gettext.gettext",
        "<builtin>.getattr",
        "<builtin>.max",
        "<builtin>.iter",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "argparse.ArgumentParser._get_value",
        "<builtin>.setattr",
        "<builtin>.min",
        "<builtin>.enumerate",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.set",
        "argparse.ArgumentParser._parse_optional",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "argparse._get_action_name"
    ],
    "<builtin>.delattr": [],
    "argparse.ArgumentParser._read_args_from_files": [
        "argparse.ArgumentParser.error",
        "sys.exc_info",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.str",
        "argparse.ArgumentParser.convert_arg_line_to_args",
        "<builtin>.open"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "argparse.ArgumentParser.error",
        "gettext.gettext",
        "argparse.ArgumentParser._get_option_tuples",
        "<builtin>.len"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "argparse.ArgumentParser._get_values",
        "argparse._get_action_name"
    ],
    "argparse.ArgumentParser._get_values": [
        "<builtin>.isinstance",
        "argparse.ArgumentParser._get_value",
        "<builtin>.len",
        "argparse.ArgumentParser._check_value"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "gettext.gettext",
        "argparse.ArgumentParser._match_argument"
    ],
    "argparse.ArgumentParser._match_argument": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<builtin>.len",
        "gettext.ngettext"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "argparse.ArgumentParser._match_arguments_partial",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "<builtin>.len",
        "<builtin>.zip"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "argparse.ArgumentParser._get_nargs_pattern",
        "re.match",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "argparse.ArgumentParser._get_value": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "<builtin>.callable",
        "sys.exc_info",
        "<builtin>.repr",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.str",
        "<builtin>.getattr"
    ],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "argparse.ArgumentParser._get_nargs_pattern": [],
    "argparse.ArgumentParser._get_option_tuples": [
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_intermixed_args": [
        "argparse.ArgumentParser.error",
        "gettext.gettext",
        "argparse.ArgumentParser.parse_known_intermixed_args"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "argparse.ArgumentParser._check_value": [
        "gettext.gettext",
        "<builtin>.map",
        "argparse.ArgumentError.__init__"
    ],
    "argparse.ArgumentParser.format_help": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser.format_usage",
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser._print_message": [
        "sys.stderr.write",
        "sys.stdout.write"
    ],
    "argparse.ArgumentParser.print_help": [
        "argparse.ArgumentParser._print_message",
        "argparse.ArgumentParser.format_help"
    ],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message",
        "sys.exit"
    ],
    "gettext._tokenize": [
        "<builtin>.ValueError",
        "re.finditer"
    ],
    "gettext._error": [
        "<builtin>.ValueError"
    ],
    "gettext._parse": [
        "<builtin>.ValueError",
        "<builtin>.next",
        "gettext._parse",
        "<builtin>.int",
        "gettext._error"
    ],
    "gettext.c2py": [
        "<builtin>.ValueError",
        "gettext._parse",
        "<builtin>.exec",
        "gettext._tokenize",
        "<builtin>.len",
        "gettext._error"
    ],
    "gettext._expand_lang": [
        "<builtin>.range",
        "locale.normalize"
    ],
    "locale.normalize": [
        "locale._replace_encoding",
        "locale._append_modifier"
    ],
    "gettext.NullTranslations": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "gettext.NullTranslations.add_fallback": [],
    "gettext.NullTranslations.gettext": [],
    "gettext.NullTranslations.ngettext": [],
    "gettext.NullTranslations.pgettext": [],
    "gettext.NullTranslations.npgettext": [],
    "gettext.NullTranslations.info": [],
    "gettext.NullTranslations.charset": [],
    "gettext.NullTranslations.install": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "gettext.GNUTranslations": [],
    "gettext.GNUTranslations._get_versions": [],
    "gettext.GNUTranslations._parse.<lambda1>": [
        "<builtin>.int"
    ],
    "gettext.GNUTranslations.gettext": [
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.ngettext": [
        "gettext.GNUTranslations._parse.<lambda1>"
    ],
    "gettext.GNUTranslations.pgettext": [
        "<builtin>.object"
    ],
    "gettext.GNUTranslations.npgettext": [
        "gettext.GNUTranslations._parse.<lambda1>"
    ],
    "gettext.find": [
        "posixpath.join",
        "ntpath.exists",
        "posixpath.exists",
        "ntpath.join",
        "gettext._expand_lang"
    ],
    "<builtin>.FileNotFoundError": [],
    "tarfile.TarFile.__iter__": [
        "tarfile.TarFile.next",
        "<builtin>.len"
    ],
    "ntpath.abspath": [
        "ntpath._abspath_fallback",
        "nt._getfullpathname",
        "ntpath.normpath"
    ],
    "gettext.install": [
        "gettext.translation",
        "gettext.NullTranslations.install"
    ],
    "gettext.textdomain": [],
    "gettext.bindtextdomain": [],
    "gettext.dgettext": [
        "gettext.translation",
        "gettext.NullTranslations.gettext"
    ],
    "gettext.dngettext": [
        "gettext.translation",
        "gettext.NullTranslations.ngettext"
    ],
    "gettext.dpgettext": [
        "gettext.translation",
        "gettext.NullTranslations.pgettext"
    ],
    "gettext.dnpgettext": [
        "gettext.translation",
        "gettext.NullTranslations.npgettext"
    ],
    "gettext.pgettext": [
        "gettext.dpgettext"
    ],
    "gettext.npgettext": [
        "gettext.dnpgettext"
    ],
    "locale._strcoll": [],
    "locale._strxfrm": [],
    "locale.localeconv": [
        "locale.localeconv"
    ],
    "locale.setlocale": [
        "<builtin>.isinstance",
        "locale._build_localename",
        "locale.setlocale",
        "locale.normalize"
    ],
    "locale._grouping_intervals": [
        "<builtin>.ValueError"
    ],
    "locale._group": [
        "locale._grouping_intervals",
        "<builtin>.len",
        "locale.localeconv"
    ],
    "locale._strip_padding": [
        "<builtin>.len"
    ],
    "locale._format": [
        "locale._strip_padding",
        "locale._group",
        "locale.localeconv"
    ],
    "locale.format_string": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "locale._format",
        "<builtin>.list"
    ],
    "locale.currency": [
        "<builtin>.abs",
        "<builtin>.ValueError",
        "locale._format",
        "locale.localeconv"
    ],
    "locale.str": [
        "locale._format"
    ],
    "locale.delocalize": [
        "locale.localeconv"
    ],
    "locale.atof": [
        "locale.delocalize"
    ],
    "locale.atoi": [
        "<builtin>.int",
        "locale.delocalize"
    ],
    "locale._test": [
        "locale.str",
        "locale.atof",
        "<builtin>.print",
        "locale.atoi",
        "locale.format_string",
        "locale.setlocale"
    ],
    "locale._replace_encoding": [
        "encodings.normalize_encoding",
        "encodings.aliases.aliases.get"
    ],
    "encodings.aliases.aliases.get": [],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "locale._parse_localename": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "locale.normalize"
    ],
    "locale._build_localename": [
        "<builtin>.TypeError"
    ],
    "_locale._getdefaultlocale": [],
    "locale.getlocale": [
        "locale._parse_localename",
        "<builtin>.TypeError",
        "locale.setlocale"
    ],
    "locale.resetlocale": [
        "locale.getdefaultlocale",
        "locale.setlocale",
        "locale._build_localename"
    ],
    "sys.platform.startswith": [],
    "locale._print_locale": [
        "locale.getlocale",
        "<builtin>.print",
        "locale._print_locale._init_categories",
        "locale.getdefaultlocale",
        "locale.resetlocale",
        "locale.setlocale"
    ],
    "locale._print_locale._init_categories": [
        "<builtin>.globals"
    ],
    "_locale.nl_langinfo": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "shutil._fastcopy_fcopyfile": [
        "posix._fcopyfile"
    ],
    "posix._fcopyfile": [],
    "shutil._fastcopy_sendfile": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "shutil._copyfileobj_readinto": [
        "<builtin>.bytearray",
        "<builtin>.memoryview"
    ],
    "shutil.copyfileobj": [],
    "shutil._samefile": [
        "posixpath.abspath",
        "posixpath.samefile",
        "posixpath.samestat",
        "ntpath.samefile",
        "<builtin>.hasattr",
        "ntpath.samestat",
        "<builtin>.isinstance",
        "ntpath.normcase",
        "posixpath.normcase",
        "ntpath.abspath"
    ],
    "posixpath.samefile": [],
    "ntpath.samefile": [],
    "ntpath.normcase": [
        "<builtin>.isinstance",
        "sys.base_prefix.replace",
        "sys.path.replace"
    ],
    "shutil._stat": [
        "<builtin>.isinstance"
    ],
    "shutil._islink": [
        "posixpath.islink",
        "<builtin>.isinstance",
        "ntpath.islink"
    ],
    "shutil.copyfile": [
        "shutil.copyfileobj",
        "shutil._stat",
        "stat.S_ISFIFO",
        "sys.audit",
        "<builtin>.min",
        "<builtin>.enumerate",
        "shutil._fastcopy_fcopyfile",
        "shutil._islink",
        "shutil._samefile",
        "shutil._fastcopy_sendfile",
        "<builtin>.isinstance",
        "<builtin>.open",
        "shutil._copyfileobj_readinto"
    ],
    "shutil.copymode": [
        "shutil._stat",
        "ntpath.islink",
        "sys.audit",
        "posixpath.islink",
        "stat.S_IMODE",
        "shutil._islink",
        "<builtin>.hasattr"
    ],
    "shutil._copyxattr": [],
    "shutil.copystat": [
        "<builtin>.getattr",
        "ntpath.islink",
        "sys.audit",
        "shutil.copystat.lookup",
        "posixpath.islink",
        "shutil.copystat._nop",
        "stat.S_IMODE",
        "shutil._islink",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "shutil._copyxattr"
    ],
    "shutil.copystat._nop": [],
    "shutil.copystat.lookup": [
        "<builtin>.getattr"
    ],
    "shutil.copy": [
        "posixpath.join",
        "posixpath.basename",
        "ntpath.basename",
        "ntpath.isdir",
        "shutil.copyfile",
        "posixpath.isdir",
        "shutil.copymode",
        "ntpath.join"
    ],
    "shutil.copy2": [
        "posixpath.join",
        "posixpath.basename",
        "ntpath.basename",
        "ntpath.isdir",
        "shutil.copyfile",
        "posixpath.isdir",
        "ntpath.join",
        "shutil.copystat"
    ],
    "shutil.ignore_patterns": [],
    "shutil.ignore_patterns._ignore_patterns": [
        "<builtin>.set"
    ],
    "shutil._copytree": [
        "os.makedirs",
        "shutil.copy2",
        "<builtin>.getattr",
        "posixpath.join",
        "ntpath.exists",
        "posixpath.exists",
        "<builtin>.str",
        "<builtin>.set",
        "ntpath.join",
        "shutil.copystat",
        "shutil.copytree"
    ],
    "shutil.copytree": [
        "shutil._copytree",
        "<builtin>.list",
        "sys.audit"
    ],
    "shutil._rmtree_isdir": [
        "stat.S_ISDIR"
    ],
    "shutil._rmtree_islink": [
        "posixpath.islink",
        "ntpath.islink",
        "stat.S_ISLNK"
    ],
    "shutil._rmtree_unsafe": [
        "sys.exc_info",
        "<builtin>.list",
        "shutil._rmtree_isdir",
        "<builtin>.OSError",
        "shutil._rmtree_unsafe",
        "tempfile.TemporaryDirectory._rmtree.onerror"
    ],
    "tempfile.TemporaryDirectory._rmtree.onerror": [
        "posixpath.dirname",
        "ntpath.dirname",
        "tempfile.TemporaryDirectory._rmtree.onerror.resetperms",
        "tempfile.TemporaryDirectory._rmtree",
        "<builtin>.issubclass"
    ],
    "shutil._rmtree_safe_fd": [
        "stat.S_ISDIR",
        "posixpath.join",
        "sys.exc_info",
        "ntpath.samestat",
        "posixpath.samestat",
        "<builtin>.list",
        "<builtin>.OSError",
        "shutil._rmtree_safe_fd",
        "ntpath.join",
        "tempfile.TemporaryDirectory._rmtree.onerror"
    ],
    "shutil.rmtree": [
        "shutil._rmtree_islink",
        "sys.exc_info",
        "posixpath.samestat",
        "sys.audit",
        "shutil._rmtree_unsafe",
        "<builtin>.OSError",
        "shutil._rmtree_safe_fd",
        "ntpath.samestat",
        "<builtin>.isinstance",
        "tempfile.TemporaryDirectory._rmtree.onerror"
    ],
    "shutil.rmtree.onerror": [],
    "shutil._basename": [
        "ntpath.basename",
        "posixpath.basename"
    ],
    "shutil.move": [
        "shutil.copy2",
        "shutil.rmtree",
        "posixpath.join",
        "ntpath.exists",
        "posixpath.exists",
        "ntpath.isdir",
        "sys.audit",
        "ntpath.islink",
        "posixpath.islink",
        "shutil._basename",
        "shutil._destinsrc",
        "posixpath.isdir",
        "shutil._samefile",
        "ntpath.join",
        "shutil.copytree"
    ],
    "shutil._destinsrc": [
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "shutil._get_gid": [],
    "shutil._get_uid": [
        "pwd.getpwnam"
    ],
    "shutil._make_tarball._set_uid_gid": [],
    "zipfile.ZipFile.__init__": [
        "zipfile.ZipFile._fpclose",
        "<builtin>.ValueError",
        "threading.RLock",
        "zipfile._Tellable.__init__",
        "zipfile._check_compression",
        "zipfile._Tellable.tell",
        "io.open",
        "zipfile.ZipFile._RealGetContents",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "ntpath.normpath": [
        "sys.base_prefix.split",
        "sys.path.lstrip",
        "ntpath.splitdrive",
        "sys.base_prefix.lstrip",
        "sys.base_prefix.replace",
        "sys.path.startswith",
        "sys.path.split",
        "<builtin>.len",
        "<builtin>.isinstance",
        "sys.path.replace",
        "sys.base_prefix.startswith"
    ],
    "shutil.get_archive_formats": [],
    "shutil.register_archive_format": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "shutil.unregister_archive_format": [],
    "shutil.make_archive": [
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.ValueError",
        "sys.audit"
    ],
    "shutil.get_unpack_formats": [],
    "shutil._check_unpack_options": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "shutil.register_unpack_format": [
        "shutil._check_unpack_options"
    ],
    "shutil.unregister_unpack_format": [],
    "shutil._ensure_directory": [
        "os.makedirs",
        "ntpath.isdir",
        "posixpath.dirname",
        "ntpath.dirname",
        "posixpath.isdir"
    ],
    "zipfile.is_zipfile": [
        "<builtin>.open",
        "zipfile._check_zipfile",
        "<builtin>.hasattr"
    ],
    "zipfile.ZipFile.infolist": [],
    "zipfile.ZipFile.read": [
        "zipfile.ZipFile.open",
        "zipfile.ZipFile.read"
    ],
    "zipfile.ZipFile.close": [
        "zipfile.ZipFile._fpclose",
        "zipfile.ZipFile._write_end_record",
        "<builtin>.ValueError"
    ],
    "shutil._find_unpack_format": [],
    "shutil.unpack_archive": [
        "<builtin>.dict",
        "<builtin>.ValueError",
        "shutil._find_unpack_format",
        "sys.audit"
    ],
    "shutil.disk_usage": [
        "nt._getdiskusage"
    ],
    "nt._getdiskusage": [],
    "shutil.chown": [
        "shutil._get_uid",
        "<builtin>.ValueError",
        "sys.audit",
        "<builtin>.isinstance",
        "shutil._get_gid",
        "<builtin>.LookupError"
    ],
    "shutil._access_check": [
        "posixpath.isdir",
        "ntpath.exists",
        "posixpath.exists",
        "ntpath.isdir"
    ],
    "zipfile.BadZipFile": [],
    "zipfile.LargeZipFile": [],
    "zipfile._strip_extra": [
        "<builtin>.len"
    ],
    "zipfile._check_zipfile": [
        "zipfile._EndRecData"
    ],
    "zipfile._EndRecData": [
        "<builtin>.max",
        "zipfile._Tellable.tell",
        "zipfile._EndRecData64",
        "<builtin>.list",
        "<builtin>.len",
        "zipfile.ZipFile.read"
    ],
    "zipfile._EndRecData64": [
        "zipfile.ZipFile.read",
        "<builtin>.len"
    ],
    "zipfile._Tellable.tell": [],
    "zipfile.ZipInfo": [],
    "zipfile.ZipInfo.__init__": [
        "<builtin>.chr",
        "<builtin>.ValueError",
        "sys.path.replace",
        "sys.base_prefix.find",
        "sys.base_prefix.replace",
        "sys.path.find"
    ],
    "sys.path.find": [],
    "sys.base_prefix.find": [],
    "sys.base_prefix.replace": [],
    "sys.path.replace": [],
    "zipfile.ZipInfo.__repr__": [
        "zipfile.ZipInfo.is_dir",
        "stat.filemode"
    ],
    "zipfile.ZipInfo.is_dir": [],
    "zipfile.ZipInfo.FileHeader": [
        "<builtin>.max",
        "zipfile.ZipInfo._encodeFilenameFlags",
        "<builtin>.len"
    ],
    "zipfile.ZipInfo._encodeFilenameFlags": [
        "sys.path.encode",
        "sys.base_prefix.encode"
    ],
    "sys.path.encode": [],
    "sys.base_prefix.encode": [],
    "zipfile.ZipInfo._decodeExtra": [
        "<builtin>.len"
    ],
    "zipfile.ZipInfo.from_file": [
        "stat.S_ISDIR",
        "time.localtime",
        "ntpath.splitdrive",
        "posixpath.splitdrive",
        "zipfile.ZipInfo.__init__",
        "posixpath.normpath",
        "<builtin>.isinstance",
        "ntpath.normpath"
    ],
    "ntpath.splitdrive": [
        "sys.base_prefix.replace",
        "<builtin>.len",
        "<builtin>.isinstance",
        "sys.stdin.buffer.replace",
        "sys.path.replace"
    ],
    "zipfile._gen_crc": [
        "<builtin>.range"
    ],
    "zipfile._ZipDecrypter": [
        "<builtin>.map",
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.list",
        "<builtin>.range"
    ],
    "zipfile._ZipDecrypter.crc32": [],
    "zipfile._ZipDecrypter.update_keys": [
        "zipfile._ZipDecrypter.crc32"
    ],
    "zipfile._ZipDecrypter.decrypter": [
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "zipfile._ZipDecrypter.update_keys"
    ],
    "zipfile.LZMACompressor": [],
    "zipfile.LZMACompressor.__init__": [],
    "zipfile.LZMACompressor._init": [
        "<builtin>.len"
    ],
    "zipfile.LZMACompressor.compress": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMACompressor.flush": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMADecompressor": [],
    "zipfile.LZMADecompressor.__init__": [],
    "zipfile.LZMADecompressor.decompress": [
        "<builtin>.len"
    ],
    "zipfile._check_compression": [
        "<builtin>.RuntimeError",
        "<builtin>.NotImplementedError"
    ],
    "zipfile._get_compressor": [
        "zipfile.LZMACompressor.__init__"
    ],
    "zipfile._get_decompressor": [
        "<builtin>.NotImplementedError",
        "zipfile._check_compression",
        "zipfile.LZMADecompressor.__init__"
    ],
    "zipfile._SharedFile": [],
    "zipfile._SharedFile.__init__": [],
    "zipfile._SharedFile.seek": [
        "zipfile.ZipFile.open.<lambda1>",
        "<builtin>.ValueError",
        "zipfile._Tellable.tell"
    ],
    "zipfile.ZipFile.open.<lambda1>": [],
    "zipfile._SharedFile.read": [
        "zipfile.ZipFile.open.<lambda1>",
        "zipfile.ZipFile.read",
        "<builtin>.ValueError",
        "zipfile._Tellable.tell"
    ],
    "zipfile._SharedFile.close": [
        "zipfile.ZipFile._fpclose"
    ],
    "zipfile.ZipFile._fpclose": [
        "zipfile._Tellable.close",
        "zipfile.ZipFile.close"
    ],
    "zipfile._Tellable": [],
    "zipfile._Tellable.__init__": [],
    "zipfile._Tellable.write": [
        "zipfile.ZipFile.write",
        "zipfile._Tellable.write"
    ],
    "zipfile.ZipFile.write": [
        "shutil.copyfileobj",
        "<builtin>.ValueError",
        "zipfile.ZipFile.write",
        "zipfile.ZipFile.open",
        "zipfile._Tellable.tell",
        "zipfile.ZipFile._writecheck",
        "zipfile._Tellable.write",
        "zipfile.ZipInfo.from_file"
    ],
    "zipfile._Tellable.flush": [
        "zipfile._Tellable.flush"
    ],
    "zipfile._Tellable.close": [
        "zipfile._Tellable.close",
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipExtFile": [],
    "zipfile.ZipExtFile.__init__": [
        "<builtin>.RuntimeError",
        "<builtin>.hasattr",
        "zipfile.ZipExtFile._init_decrypter",
        "zipfile._get_decompressor"
    ],
    "zipfile.ZipExtFile._init_decrypter": [
        "zipfile._SharedFile.read",
        "zipfile._ZipDecrypter.decrypter",
        "zipfile._ZipDecrypter"
    ],
    "zipfile.ZipExtFile.__repr__": [],
    "zipfile.ZipExtFile.readline": [
        "zipfile.ZipExtFile.readline",
        "http.client.HTTPResponse.readline",
        "lzma.LZMAFile.readline",
        "gzip.GzipFile.readline"
    ],
    "gzip.GzipFile.readline": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.readline": [
        "_compression.BaseStream._check_can_read"
    ],
    "zipfile.ZipExtFile.peek": [
        "zipfile.ZipExtFile.read",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile.readable": [],
    "zipfile.ZipExtFile._read1": [
        "<builtin>.max",
        "zipfile.LZMADecompressor.decompress",
        "zipfile.ZipExtFile._read2",
        "<builtin>.len",
        "zipfile.ZipExtFile._update_crc"
    ],
    "zipfile.ZipExtFile._update_crc": [],
    "zipfile.ZipExtFile.read1": [
        "zipfile.ZipExtFile._read1",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile._read2": [
        "zipfile._SharedFile.read",
        "zipfile._ZipDecrypter.decrypter",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile.seekable": [],
    "io.UnsupportedOperation": [],
    "zipfile.ZipExtFile.tell": [
        "io.UnsupportedOperation",
        "<builtin>.len"
    ],
    "zipfile._ZipWriteFile": [],
    "zipfile._ZipWriteFile.__init__": [
        "zipfile._get_compressor"
    ],
    "zipfile._ZipWriteFile._fileobj": [],
    "zipfile._ZipWriteFile.writable": [],
    "sys.base_prefix.FileHeader": [],
    "sys.path.FileHeader": [],
    "zipfile.ZipFile": [],
    "zipfile.ZipFile._RealGetContents": [
        "zipfile._EndRecData",
        "io.BytesIO",
        "<builtin>.print",
        "zipfile.ZipInfo._decodeExtra",
        "zipfile.ZipInfo.__init__",
        "<builtin>.NotImplementedError",
        "<builtin>.len",
        "zipfile.ZipFile.read"
    ],
    "zipfile.ZipFile.__enter__": [],
    "zipfile.ZipFile.__exit__": [
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile.__repr__": [],
    "io.BytesIO": [],
    "zipfile.ZipFile.namelist": [],
    "zipfile.ZipFile.printdir": [
        "<builtin>.print"
    ],
    "zipfile.ZipFile.testzip": [
        "zipfile.ZipFile.open"
    ],
    "zipfile.ZipFile.open": [
        "zipfile._SharedFile.read",
        "<builtin>.ValueError",
        "zipfile.ZipFile.getinfo",
        "zipfile._SharedFile.__init__",
        "zipfile.ZipInfo.__init__",
        "<builtin>.NotImplementedError",
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.len",
        "zipfile._SharedFile.close",
        "<builtin>.isinstance",
        "zipfile.ZipFile._open_to_write",
        "zipfile.ZipExtFile.__init__"
    ],
    "zipfile.ZipFile.getinfo": [
        "<builtin>.KeyError"
    ],
    "zipfile.ZipFile.setpassword": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "zipfile.ZipFile._open_to_write": [
        "<builtin>.ValueError",
        "zipfile.ZipFile.write",
        "zipfile._Tellable.tell",
        "sys.base_prefix.FileHeader",
        "<builtin>.hasattr",
        "sys.path.FileHeader",
        "zipfile._ZipWriteFile.__init__",
        "zipfile.ZipFile._writecheck",
        "zipfile._Tellable.write",
        "zipfile.ZipInfo.FileHeader"
    ],
    "zipfile.ZipFile.extract": [
        "zipfile.ZipFile._extract_member"
    ],
    "zipfile.ZipFile._extract_member": [
        "os.makedirs",
        "shutil.copyfileobj",
        "zipfile.ZipFile.getinfo",
        "ntpath.splitdrive",
        "posixpath.join",
        "ntpath.exists",
        "zipfile.ZipFile.open",
        "posixpath.exists",
        "posixpath.splitdrive",
        "ntpath.isdir",
        "ntpath.normpath",
        "posixpath.dirname",
        "ntpath.dirname",
        "posixpath.isdir",
        "posixpath.normpath",
        "ntpath.join",
        "<builtin>.isinstance",
        "zipfile.ZipFile._sanitize_windows_name"
    ],
    "zipfile.ZipFile.extractall": [
        "zipfile.ZipFile.namelist",
        "zipfile.CompleteDirs.namelist",
        "zipfile.ZipFile._extract_member"
    ],
    "zipfile.CompleteDirs.namelist": [
        "<builtin>.super",
        "zipfile.CompleteDirs._implied_dirs",
        "<builtin>.list"
    ],
    "zipfile.ZipFile._sanitize_windows_name": [
        "<builtin>.len"
    ],
    "zipfile.ZipFile.writestr": [
        "<builtin>.ValueError",
        "time.localtime",
        "zipfile.ZipFile.open",
        "zipfile.ZipInfo.__init__",
        "time.time",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "zipfile.ZipFile.__del__": [
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile._write_end_record": [
        "zipfile.ZipFile.write",
        "zipfile._strip_extra",
        "<builtin>.max",
        "<builtin>.print",
        "zipfile._Tellable.tell",
        "<builtin>.min",
        "<builtin>.len",
        "zipfile._Tellable.flush",
        "zipfile._Tellable.write"
    ],
    "zipfile.PyZipFile": [],
    "zipfile.PyZipFile.__init__": [
        "zipfile.ZipFile.__init__"
    ],
    "zipfile.PyZipFile.writepy": [
        "zipfile.ZipFile.write",
        "posixpath.join",
        "posixpath.isfile",
        "<builtin>.print",
        "<builtin>.sorted",
        "ntpath.isdir",
        "zipfile.PyZipFile.writepy",
        "<builtin>.RuntimeError",
        "ntpath.split",
        "posixpath.isdir",
        "ntpath.isfile",
        "ntpath.join",
        "posixpath.split",
        "ntpath.splitext",
        "posixpath.splitext",
        "zipfile.PyZipFile._get_codename"
    ],
    "zipfile.PyZipFile._get_codename": [
        "<builtin>.ValueError",
        "posixpath.isfile",
        "ntpath.split",
        "ntpath.isfile",
        "posixpath.split",
        "zipfile.PyZipFile._get_codename._compile"
    ],
    "ntpath.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "py_compile.compile": [
        "os.makedirs",
        "py_compile.PyCompileError.__init__",
        "ntpath.exists",
        "<builtin>.FileExistsError",
        "posixpath.isfile",
        "ntpath.islink",
        "posixpath.exists",
        "posixpath.islink",
        "posixpath.dirname",
        "py_compile._get_default_invalidation_mode",
        "ntpath.dirname",
        "ntpath.isfile",
        "sys.stderr.write"
    ],
    "zipfile._parents": [
        "zipfile._ancestry",
        "itertools.islice"
    ],
    "zipfile._ancestry": [
        "posixpath.split"
    ],
    "zipfile._difference": [
        "itertools.filterfalse",
        "<builtin>.set"
    ],
    "itertools.filterfalse": [],
    "zipfile.CompleteDirs": [],
    "zipfile.CompleteDirs._implied_dirs": [
        "zipfile._difference",
        "itertools.chain.from_iterable",
        "<builtin>.map"
    ],
    "zipfile.CompleteDirs._name_set": [
        "<builtin>.set",
        "zipfile.CompleteDirs.namelist"
    ],
    "zipfile.CompleteDirs.resolve_dir": [
        "zipfile.CompleteDirs._name_set"
    ],
    "zipfile.CompleteDirs.make": [
        "<builtin>.isinstance",
        "<builtin>.vars",
        "zipfile.ZipFile.__init__"
    ],
    "zipfile.FastLookup": [],
    "zipfile.FastLookup.namelist": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "zipfile.FastLookup._name_set": [
        "contextlib.suppress.__init__",
        "<builtin>.super"
    ],
    "zipfile.Path": [],
    "zipfile.Path.__init__": [
        "zipfile.CompleteDirs.make"
    ],
    "zipfile.Path.open": [],
    "zipfile.Path.name": [
        "posixpath.basename"
    ],
    "zipfile.Path.read_text": [
        "io.TextIOWrapper",
        "zipfile.Path.open"
    ],
    "zipfile.Path.read_bytes": [
        "zipfile.Path.open"
    ],
    "zipfile.Path._is_child": [
        "posixpath.dirname"
    ],
    "zipfile.Path._next": [
        "zipfile.Path.__init__"
    ],
    "zipfile.Path.is_dir": [],
    "zipfile.Path.is_file": [
        "zipfile.Path.is_dir"
    ],
    "zipfile.Path.exists": [],
    "zipfile.Path.iterdir": [
        "<builtin>.filter",
        "<builtin>.ValueError",
        "<builtin>.map",
        "zipfile.Path.is_dir"
    ],
    "zipfile.Path.__str__": [
        "posixpath.join"
    ],
    "zipfile.Path.__repr__": [],
    "zipfile.Path.joinpath": [
        "posixpath.join",
        "zipfile.Path._next"
    ],
    "zipfile.Path.parent": [
        "posixpath.dirname",
        "zipfile.Path._next"
    ],
    "zipfile.main.addToZip": [
        "zipfile.main.addToZip",
        "posixpath.join",
        "posixpath.isfile",
        "<builtin>.sorted",
        "ntpath.isdir",
        "posixpath.isdir",
        "ntpath.isfile",
        "ntpath.join"
    ],
    "importlib.util.source_hash": [
        "_imp.source_hash"
    ],
    "_imp.source_hash": [],
    "importlib.util.resolve_name": [
        "_bootstrap._resolve_name",
        "<builtin>.ValueError",
        "<builtin>.repr"
    ],
    "_bootstrap._resolve_name": [],
    "importlib.util._find_spec_from_path": [
        "_bootstrap._find_spec",
        "<builtin>.ValueError"
    ],
    "_bootstrap._find_spec": [],
    "importlib.util.find_spec": [
        "_bootstrap._find_spec",
        "<builtin>.ValueError",
        "<builtin>.ModuleNotFoundError",
        "<builtin>.__import__",
        "importlib.util.resolve_name"
    ],
    "<builtin>.ModuleNotFoundError": [],
    "importlib.util._module_to_load": [
        "<builtin>.type",
        "sys.modules.get"
    ],
    "importlib.util.set_package": [
        "functools.wraps",
        "_functools.partial"
    ],
    "importlib.util.set_package.set_package_wrapper": [
        "warnings.warn",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "importlib.util.set_loader": [
        "functools.wraps",
        "_functools.partial"
    ],
    "importlib.util.set_loader.set_loader_wrapper": [
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "importlib.util.module_for_loader": [
        "warnings.warn",
        "functools.wraps",
        "_functools.partial"
    ],
    "importlib.util.module_for_loader.module_for_loader_wrapper": [
        "importlib.util._module_to_load"
    ],
    "importlib.util._LazyModule": [],
    "importlib.util._LazyModule.__getattribute__": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "<builtin>.id"
    ],
    "importlib.util._LazyModule.__delattr__": [
        "importlib.util._LazyModule.__getattribute__",
        "<builtin>.delattr"
    ],
    "importlib.util.LazyLoader": [],
    "importlib.util.LazyLoader.__check_eager_loader": [
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "importlib.util.LazyLoader.factory": [
        "importlib.util.LazyLoader.__check_eager_loader"
    ],
    "importlib.util.LazyLoader.factory.<lambda1>": [
        "importlib.util.LazyLoader.__init__"
    ],
    "importlib.util.LazyLoader.__init__": [
        "importlib.util.LazyLoader.__check_eager_loader"
    ],
    "importlib.util.LazyLoader.create_module": [],
    "importlib.util.LazyLoader.exec_module": [],
    "py_compile.PyCompileError": [],
    "py_compile.PyCompileError.__init__": [
        "traceback.format_exception_only"
    ],
    "py_compile.PyCompileError.__str__": [],
    "py_compile.PycInvalidationMode": [],
    "py_compile._get_default_invalidation_mode": [],
    "<builtin>.FileExistsError": [],
    "py_compile.main": [
        "sys.stdin.readline",
        "sys.stderr.write",
        "py_compile.compile"
    ],
    "importlib._bootstrap_external._make_relax_case": [],
    "importlib._bootstrap_external._make_relax_case._relax_case": [],
    "importlib._bootstrap_external._pack_uint32": [
        "<builtin>.int"
    ],
    "importlib._bootstrap_external._unpack_uint32": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._unpack_uint16": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._path_join": [],
    "importlib._bootstrap_external._path_split": [
        "<builtin>.reversed",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._path_stat": [],
    "importlib._bootstrap_external._path_is_mode_type": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external._path_isfile": [
        "importlib._bootstrap_external._path_is_mode_type"
    ],
    "importlib._bootstrap_external._path_isdir": [
        "importlib._bootstrap_external._path_is_mode_type"
    ],
    "importlib._bootstrap_external._path_isabs": [],
    "importlib._bootstrap_external._write_atomic": [
        "<builtin>.id"
    ],
    "importlib._bootstrap_external.cache_from_source": [
        "<builtin>.ValueError",
        "<builtin>.NotImplementedError",
        "importlib._bootstrap_external._path_isabs",
        "<builtin>.TypeError",
        "<builtin>.str",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join"
    ],
    "importlib._bootstrap_external.source_from_cache": [
        "<builtin>.ValueError",
        "<builtin>.NotImplementedError",
        "<builtin>.len",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join"
    ],
    "importlib._bootstrap_external._get_sourcefile": [
        "importlib._bootstrap_external._path_isfile",
        "<builtin>.len",
        "importlib._bootstrap_external.source_from_cache"
    ],
    "importlib._bootstrap_external._get_cached": [
        "<builtin>.tuple",
        "importlib._bootstrap_external.cache_from_source"
    ],
    "importlib._bootstrap_external._calc_mode": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external._check_name": [
        "importlib._bootstrap_external._check_name._wrap"
    ],
    "importlib._bootstrap_external._check_name._check_name_wrapper": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.FileLoader.get_resource_reader",
        "importlib._bootstrap_external.ExtensionFileLoader.get_filename",
        "importlib._bootstrap_external.FileLoader.load_module",
        "importlib._bootstrap_external.FileLoader.get_filename"
    ],
    "importlib._bootstrap_external.FileLoader.get_filename": [],
    "importlib._bootstrap_external.FileLoader.get_resource_reader": [],
    "importlib._bootstrap_external.ExtensionFileLoader.get_filename": [],
    "importlib._bootstrap_external.FileLoader.load_module": [
        "<builtin>.super"
    ],
    "importlib._bootstrap_external._check_name._wrap": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.setattr"
    ],
    "importlib._bootstrap_external._find_module_shim": [
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._classify_pyc": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external._unpack_uint32",
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "<builtin>.EOFError": [],
    "importlib._bootstrap_external._validate_timestamp_pyc": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external._unpack_uint32"
    ],
    "importlib._bootstrap_external._validate_hash_pyc": [
        "<builtin>.ImportError"
    ],
    "importlib._bootstrap_external._compile_bytecode": [
        "<builtin>.ImportError",
        "<builtin>.isinstance"
    ],
    "importlib._bootstrap_external._code_to_timestamp_pyc": [
        "importlib._bootstrap_external._pack_uint32",
        "<builtin>.bytearray"
    ],
    "importlib._bootstrap_external._code_to_hash_pyc": [
        "importlib._bootstrap_external._pack_uint32",
        "<builtin>.bytearray",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external.spec_from_file_location": [
        "<builtin>.tuple",
        "importlib._bootstrap_external._LoaderBasics.is_package",
        "importlib._bootstrap_external._get_supported_file_loaders",
        "<builtin>.hasattr",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external.FileLoader.get_filename"
    ],
    "importlib._bootstrap_external._get_supported_file_loaders": [],
    "importlib._bootstrap_external._LoaderBasics.is_package": [
        "importlib._bootstrap_external._path_split"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder": [],
    "importlib._bootstrap_external.WindowsRegistryFinder._open_registry": [],
    "importlib._bootstrap_external.WindowsRegistryFinder._search_registry": [
        "importlib._bootstrap_external.WindowsRegistryFinder._open_registry"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder.find_spec": [
        "<builtin>.tuple",
        "importlib._bootstrap_external._path_stat",
        "importlib._bootstrap_external.WindowsRegistryFinder._search_registry",
        "importlib._bootstrap_external._get_supported_file_loaders"
    ],
    "importlib._bootstrap_external.WindowsRegistryFinder.find_module": [
        "importlib._bootstrap_external.WindowsRegistryFinder.find_spec"
    ],
    "importlib._bootstrap_external._LoaderBasics": [],
    "importlib._bootstrap_external._LoaderBasics.create_module": [],
    "importlib._bootstrap_external._LoaderBasics.exec_module": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.SourcelessFileLoader.get_code"
    ],
    "importlib._bootstrap_external.SourcelessFileLoader.get_code": [
        "<builtin>.memoryview",
        "importlib._bootstrap_external.FileLoader.get_data",
        "importlib._bootstrap_external._classify_pyc",
        "importlib._bootstrap_external.FileLoader.get_filename",
        "importlib._bootstrap_external._compile_bytecode"
    ],
    "importlib._bootstrap_external._LoaderBasics.load_module": [],
    "importlib._bootstrap_external.SourceLoader": [],
    "importlib._bootstrap_external.SourceLoader.path_mtime": [],
    "importlib._bootstrap_external.SourceLoader.path_stats": [
        "importlib._bootstrap_external.SourceLoader.path_mtime"
    ],
    "importlib._bootstrap_external.SourceLoader._cache_bytecode": [
        "importlib._bootstrap_external.SourceFileLoader.set_data",
        "importlib._bootstrap_external.SourceLoader.set_data"
    ],
    "importlib._bootstrap_external.SourceFileLoader.set_data": [
        "importlib._bootstrap_external._write_atomic",
        "<builtin>.reversed",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_isdir",
        "importlib._bootstrap_external._path_join"
    ],
    "importlib._bootstrap_external.SourceLoader.set_data": [],
    "importlib._bootstrap_external.SourceLoader.get_source": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.decode_source"
    ],
    "importlib._bootstrap_external.SourceLoader.source_to_code": [],
    "importlib._bootstrap_external.SourceLoader.get_code": [
        "importlib._bootstrap_external.SourceLoader._cache_bytecode",
        "<builtin>.memoryview",
        "importlib._bootstrap_external.SourceFileLoader._cache_bytecode",
        "importlib._bootstrap_external.cache_from_source",
        "importlib._bootstrap_external._code_to_timestamp_pyc",
        "importlib._bootstrap_external._code_to_hash_pyc",
        "importlib._bootstrap_external._compile_bytecode",
        "importlib._bootstrap_external._classify_pyc",
        "importlib._bootstrap_external.SourceLoader.source_to_code",
        "importlib._bootstrap_external.SourceFileLoader.path_stats",
        "<builtin>.len",
        "<builtin>.int",
        "importlib._bootstrap_external.SourceLoader.path_stats",
        "importlib._bootstrap_external._validate_timestamp_pyc",
        "importlib._bootstrap_external._validate_hash_pyc"
    ],
    "importlib._bootstrap_external.SourceFileLoader.path_stats": [
        "importlib._bootstrap_external._path_stat"
    ],
    "importlib._bootstrap_external.SourceFileLoader._cache_bytecode": [
        "importlib._bootstrap_external._calc_mode",
        "importlib._bootstrap_external.SourceFileLoader.set_data"
    ],
    "importlib._bootstrap_external.FileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external.FileLoader.__init__": [],
    "importlib._bootstrap_external.FileLoader.__eq__": [],
    "importlib._bootstrap_external.FileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "importlib._bootstrap_external.FileLoader.get_data": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "importlib._bootstrap_external.FileLoader.open_resource": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join"
    ],
    "importlib._bootstrap_external.FileLoader.resource_path": [
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external.FileLoader.is_resource",
        "importlib._bootstrap_external._path_join"
    ],
    "importlib._bootstrap_external.FileLoader.is_resource": [
        "importlib._bootstrap_external._path_isfile",
        "importlib._bootstrap_external._path_split",
        "importlib._bootstrap_external._path_join"
    ],
    "importlib._bootstrap_external.FileLoader.contents": [
        "<builtin>.iter",
        "importlib._bootstrap_external._path_split"
    ],
    "importlib._bootstrap_external.SourceFileLoader": [],
    "importlib._bootstrap_external.SourcelessFileLoader": [],
    "importlib._bootstrap_external.SourcelessFileLoader.get_source": [],
    "importlib._bootstrap_external.ExtensionFileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.__init__": [],
    "importlib._bootstrap_external.ExtensionFileLoader.__eq__": [],
    "importlib._bootstrap_external.ExtensionFileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.create_module": [],
    "importlib._bootstrap_external.ExtensionFileLoader.exec_module": [],
    "importlib._bootstrap_external.ExtensionFileLoader.is_package": [
        "importlib._bootstrap_external._path_split",
        "<builtin>.any"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader.get_code": [],
    "importlib._bootstrap_external.ExtensionFileLoader.get_source": [],
    "importlib._bootstrap_external._NamespacePath": [],
    "importlib._bootstrap_external._NamespacePath.__init__": [
        "<builtin>.tuple",
        "importlib._bootstrap_external._NamespacePath._get_parent_path"
    ],
    "importlib._bootstrap_external._NamespacePath._get_parent_path": [
        "<builtin>.getattr",
        "importlib._bootstrap_external._NamespacePath._find_parent_path_names"
    ],
    "importlib._bootstrap_external._NamespacePath._find_parent_path_names": [],
    "importlib._bootstrap_external._NamespacePath._recalculate": [
        "<builtin>.tuple",
        "importlib._bootstrap_external.PathFinder._get_spec",
        "importlib._bootstrap_external._NamespacePath._get_parent_path"
    ],
    "importlib._bootstrap_external.PathFinder._get_spec": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external.PathFinder._path_importer_cache",
        "importlib._bootstrap_external.PathFinder._legacy_get_spec",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "importlib._bootstrap_external._NamespacePath.__iter__": [
        "<builtin>.iter",
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__getitem__": [
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.__setitem__": [],
    "importlib._bootstrap_external._NamespacePath.__len__": [
        "importlib._bootstrap_external._NamespacePath._recalculate",
        "<builtin>.len"
    ],
    "importlib._bootstrap_external._NamespacePath.__repr__": [],
    "importlib._bootstrap_external._NamespacePath.__contains__": [
        "importlib._bootstrap_external._NamespacePath._recalculate"
    ],
    "importlib._bootstrap_external._NamespacePath.append": [],
    "importlib._bootstrap_external._NamespaceLoader": [],
    "importlib._bootstrap_external._NamespaceLoader.__init__": [
        "importlib._bootstrap_external._NamespacePath.__init__"
    ],
    "importlib._bootstrap_external._NamespaceLoader.module_repr": [],
    "importlib._bootstrap_external._NamespaceLoader.is_package": [],
    "importlib._bootstrap_external._NamespaceLoader.get_source": [],
    "importlib._bootstrap_external._NamespaceLoader.get_code": [
        "<builtin>.compile"
    ],
    "importlib._bootstrap_external._NamespaceLoader.create_module": [],
    "importlib._bootstrap_external._NamespaceLoader.exec_module": [],
    "importlib._bootstrap_external._NamespaceLoader.load_module": [],
    "importlib._bootstrap_external.PathFinder": [],
    "importlib._bootstrap_external.PathFinder.invalidate_caches": [
        "<builtin>.hasattr",
        "<builtin>.list"
    ],
    "importlib._bootstrap_external.PathFinder._path_hooks": [],
    "importlib._bootstrap_external.PathFinder._path_importer_cache": [
        "importlib._bootstrap_external.PathFinder._path_hooks"
    ],
    "importlib._bootstrap_external.PathFinder._legacy_get_spec": [
        "<builtin>.hasattr"
    ],
    "importlib._bootstrap_external.PathFinder.find_spec": [
        "importlib._bootstrap_external._NamespacePath.__init__",
        "importlib._bootstrap_external.PathFinder._get_spec"
    ],
    "importlib._bootstrap_external.PathFinder.find_module": [
        "importlib._bootstrap_external.PathFinder.find_spec"
    ],
    "importlib.metadata.MetadataPathFinder.find_distributions": [
        "<builtin>.map",
        "importlib.metadata.MetadataPathFinder._search_paths"
    ],
    "importlib._bootstrap_external.FileFinder": [],
    "importlib._bootstrap_external.FileFinder.__init__": [
        "<builtin>.set"
    ],
    "importlib._bootstrap_external.FileFinder.invalidate_caches": [],
    "importlib._bootstrap_external.FileFinder.find_loader": [
        "importlib._bootstrap_external.FileFinder.find_spec"
    ],
    "importlib._bootstrap_external.FileFinder.find_spec": [
        "importlib._bootstrap_external._path_isfile",
        "importlib._bootstrap_external.FileFinder._fill_cache",
        "importlib._bootstrap_external._path_stat",
        "importlib._bootstrap_external.FileFinder._get_spec",
        "importlib._bootstrap_external._path_join"
    ],
    "importlib._bootstrap_external.FileFinder._get_spec": [
        "importlib._bootstrap_external.spec_from_file_location"
    ],
    "importlib._bootstrap_external.FileFinder._fill_cache": [
        "<builtin>.set"
    ],
    "importlib._bootstrap_external.FileFinder.path_hook": [],
    "importlib._bootstrap_external.FileFinder.path_hook.path_hook_for_FileFinder": [
        "<builtin>.ImportError",
        "importlib._bootstrap_external._path_isdir",
        "importlib._bootstrap_external.FileFinder.__init__"
    ],
    "importlib._bootstrap_external.FileFinder.__repr__": [],
    "importlib._bootstrap_external._fix_up_module": [
        "importlib._bootstrap_external.FileLoader.__init__",
        "importlib._bootstrap_external.spec_from_file_location"
    ],
    "importlib._bootstrap_external._setup": [
        "importlib._bootstrap_external._make_relax_case",
        "<builtin>.all",
        "<builtin>.len",
        "<builtin>.setattr"
    ],
    "importlib._bootstrap_external._install": [
        "importlib._bootstrap_external._setup",
        "importlib._bootstrap_external._get_supported_file_loaders"
    ],
    "importlib.metadata.PackageNotFoundError": [],
    "importlib.metadata.EntryPoint": [
        "re.compile"
    ],
    "importlib.metadata.EntryPoint.load": [
        "<builtin>.filter",
        "functools.reduce",
        "importlib.import_module"
    ],
    "importlib.import_module": [
        "_bootstrap._gcd_import",
        "_frozen_importlib._gcd_import",
        "<builtin>.TypeError"
    ],
    "importlib.metadata.EntryPoint.extras": [
        "re.finditer",
        "<builtin>.list"
    ],
    "importlib.metadata.EntryPoint._from_config": [
        "configparser.RawConfigParser.sections",
        "configparser.RawConfigParser.items"
    ],
    "configparser.RawConfigParser.sections": [
        "<builtin>.list"
    ],
    "configparser.RawConfigParser.items": [
        "configparser.RawConfigParser.optionxform",
        "configparser.RawConfigParser.items.<lambda2>",
        "<builtin>.super",
        "<builtin>.list",
        "configparser.NoSectionError.__init__",
        "configparser.RawConfigParser.items.<lambda1>"
    ],
    "importlib.metadata.EntryPoint._from_text": [
        "configparser.RawConfigParser.readfp",
        "io.StringIO",
        "importlib.metadata.EntryPoint._from_config",
        "configparser.RawConfigParser.__init__",
        "configparser.RawConfigParser.read_string"
    ],
    "configparser.RawConfigParser.__init__": [
        "<builtin>.tuple",
        "configparser.ConverterMapping.__init__",
        "configparser.SectionProxy.__init__",
        "configparser.RawConfigParser._read_defaults",
        "re.compile",
        "re.escape"
    ],
    "configparser.RawConfigParser.read_string": [
        "configparser.RawConfigParser.read_file",
        "io.StringIO"
    ],
    "io.StringIO": [],
    "configparser.RawConfigParser.readfp": [
        "configparser.RawConfigParser.read_file",
        "warnings.warn"
    ],
    "importlib.metadata.EntryPoint.__iter__": [
        "<builtin>.iter"
    ],
    "importlib.metadata.EntryPoint.__reduce__": [],
    "importlib.metadata.PackagePath": [],
    "importlib.metadata.PackagePath.read_text": [
        "importlib.metadata.PackagePath.locate"
    ],
    "importlib.metadata.PackagePath.locate": [
        "importlib.metadata.Distribution.locate_file"
    ],
    "importlib.metadata.PackagePath.read_binary": [
        "importlib.metadata.PackagePath.locate"
    ],
    "importlib.metadata.Distribution.locate_file": [],
    "importlib.metadata.FileHash": [],
    "importlib.metadata.FileHash.__init__": [],
    "importlib.metadata.FileHash.__repr__": [],
    "importlib.metadata.Distribution": [
        "abc.abstractmethod"
    ],
    "importlib.metadata.Distribution.read_text": [],
    "importlib.metadata.Distribution.from_name": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.next",
        "importlib.metadata.Distribution._discover_resolvers"
    ],
    "importlib.metadata.Distribution._discover_resolvers": [
        "<builtin>.getattr",
        "<builtin>.filter"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib.metadata.Distribution.discover": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "itertools.chain.from_iterable",
        "<builtin>.ValueError",
        "importlib.metadata.Distribution._discover_resolvers"
    ],
    "importlib.metadata.Distribution.at": [
        "importlib.metadata.PathDistribution.__init__"
    ],
    "importlib.metadata.PathDistribution.__init__": [],
    "importlib.metadata.Distribution.metadata": [
        "email.message_from_string",
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution.version": [],
    "importlib.metadata.Distribution.entry_points": [
        "importlib.metadata.Distribution.read_text",
        "importlib.metadata.EntryPoint._from_text"
    ],
    "importlib.metadata.Distribution.files": [
        "importlib.metadata.Distribution._read_files_egginfo",
        "importlib.metadata.Distribution._read_files_distinfo",
        "itertools.starmap",
        "<builtin>.list"
    ],
    "importlib.metadata.Distribution._read_files_distinfo": [
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution._read_files_egginfo": [
        "<builtin>.map",
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution.files.make_file": [
        "<builtin>.int",
        "importlib.metadata.FileHash.__init__"
    ],
    "importlib.metadata.Distribution.requires": [
        "importlib.metadata.Distribution._read_dist_info_reqs",
        "importlib.metadata.Distribution._read_egg_info_reqs",
        "<builtin>.list"
    ],
    "importlib.metadata.Distribution._read_dist_info_reqs": [],
    "importlib.metadata.Distribution._read_egg_info_reqs": [
        "importlib.metadata.Distribution._deps_from_requires_text",
        "importlib.metadata.Distribution.read_text"
    ],
    "importlib.metadata.Distribution._deps_from_requires_text": [
        "operator.itemgetter.__init__",
        "<builtin>.list",
        "importlib.metadata.Distribution._read_sections",
        "itertools.groupby",
        "<builtin>.map",
        "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs"
    ],
    "importlib.metadata.Distribution._read_sections": [
        "<builtin>.filter",
        "re.match",
        "<builtin>.locals"
    ],
    "itertools.groupby": [],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs": [
        "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition"
    ],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.make_condition": [],
    "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition": [
        "<builtin>.filter",
        "<builtin>.list"
    ],
    "importlib.metadata.DistributionFinder": [
        "importlib.metadata.DistributionFinder.Context",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder.Context": [],
    "importlib.metadata.DistributionFinder.Context.path": [
        "<builtin>.vars"
    ],
    "importlib.metadata.DistributionFinder.find_distributions": [],
    "importlib.metadata.FastPath": [],
    "importlib.metadata.FastPath.__init__": [
        "ntpath.basename",
        "posixpath.basename"
    ],
    "importlib.metadata.FastPath.joinpath": [],
    "importlib.metadata.FastPath.children": [
        "contextlib.suppress.__init__",
        "importlib.metadata.FastPath.zip_children"
    ],
    "importlib.metadata.FastPath.zip_children": [
        "zipfile.Path.__init__",
        "posixpath.split"
    ],
    "importlib.metadata.FastPath.is_egg": [],
    "importlib.metadata.FastPath.search": [
        "importlib.metadata.FastPath.children",
        "importlib.metadata.FastPath.joinpath",
        "importlib.metadata.FastPath.is_egg"
    ],
    "importlib.metadata.Prepared": [],
    "importlib.metadata.Prepared.__init__": [],
    "importlib.metadata.MetadataPathFinder": [],
    "importlib.metadata.MetadataPathFinder._search_paths": [
        "itertools.chain.from_iterable",
        "<builtin>.map",
        "importlib.metadata.Prepared.__init__"
    ],
    "importlib.metadata.PathDistribution": [],
    "importlib.metadata.PathDistribution.read_text": [
        "contextlib.suppress.__init__",
        "pathlib.PurePath.joinpath"
    ],
    "pathlib.PurePath.joinpath": [
        "pathlib.PurePath._make_child"
    ],
    "importlib.metadata.PathDistribution.locate_file": [],
    "importlib.metadata.distribution": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.distributions": [
        "importlib.metadata.Distribution.discover"
    ],
    "importlib.metadata.metadata": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.version": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.entry_points": [
        "<builtin>.tuple",
        "itertools.chain.from_iterable",
        "operator.attrgetter.__init__",
        "<builtin>.sorted",
        "itertools.groupby",
        "importlib.metadata.distributions"
    ],
    "importlib.metadata.files": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.requires": [
        "importlib.metadata.distribution"
    ],
    "sys.getwindowsversion": [],
    "pathlib._ignore_error": [
        "<builtin>.getattr"
    ],
    "pathlib._is_wildcard_pattern": [],
    "pathlib._Flavour": [],
    "pathlib._Flavour.__init__": [],
    "pathlib._Flavour.parse_parts": [
        "<builtin>.reversed",
        "sys.intern",
        "pathlib._PosixFlavour.splitroot",
        "pathlib._WindowsFlavour.splitroot"
    ],
    "pathlib._WindowsFlavour.splitroot": [
        "<builtin>.len",
        "pathlib._WindowsFlavour._split_extended_path"
    ],
    "pathlib._PosixFlavour.splitroot": [
        "<builtin>.len"
    ],
    "pathlib._Flavour.join_parsed_parts": [
        "pathlib._PosixFlavour.casefold",
        "pathlib._WindowsFlavour.casefold"
    ],
    "pathlib._PosixFlavour.casefold": [],
    "pathlib._WindowsFlavour.casefold": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.set",
        "<builtin>.range"
    ],
    "pathlib._WindowsFlavour._split_extended_path": [],
    "pathlib._WindowsFlavour.casefold_parts": [],
    "pathlib._WindowsFlavour.compile_pattern": [
        "re.compile"
    ],
    "pathlib._WindowsFlavour.resolve": [
        "pathlib._WindowsFlavour._ext_to_normal",
        "nt._getfinalpathname",
        "posixpath.join",
        "<builtin>.reversed",
        "ntpath.split",
        "<builtin>.str",
        "ntpath.join",
        "posixpath.split"
    ],
    "nt._getfinalpathname": [],
    "pathlib._WindowsFlavour._ext_to_normal": [
        "pathlib._WindowsFlavour._split_extended_path"
    ],
    "pathlib._WindowsFlavour.is_reserved": [],
    "pathlib._WindowsFlavour.make_uri": [
        "<builtin>.len",
        "urllib.parse.quote_from_bytes"
    ],
    "urllib.parse.quote_from_bytes": [
        "urllib.parse.Quoter.__init__",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "_collections.defaultdict.__getitem__"
    ],
    "pathlib._WindowsFlavour.gethomedir": [
        "<builtin>.RuntimeError",
        "pathlib._Flavour.parse_parts"
    ],
    "pathlib._PosixFlavour": [],
    "pathlib._PosixFlavour.casefold_parts": [],
    "pathlib._PosixFlavour.compile_pattern": [
        "re.compile"
    ],
    "pathlib._PosixFlavour.resolve": [
        "pathlib._PosixFlavour.resolve._resolve",
        "<builtin>.str"
    ],
    "pathlib._PosixFlavour.resolve._resolve": [
        "<builtin>.RuntimeError",
        "pathlib._PosixFlavour.resolve._resolve"
    ],
    "pathlib._PosixFlavour.is_reserved": [],
    "pathlib._PosixFlavour.make_uri": [
        "<builtin>.bytes",
        "urllib.parse.quote_from_bytes"
    ],
    "pathlib._PosixFlavour.gethomedir": [
        "pwd.getpwuid",
        "pwd.getpwnam",
        "<builtin>.RuntimeError"
    ],
    "pathlib._Accessor": [],
    "pathlib._NormalAccessor": [
        "<builtin>.hasattr"
    ],
    "pathlib._NormalAccessor.lchmod": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._NormalAccessor.link_to": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._NormalAccessor.symlink": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib._NormalAccessor.readlink": [],
    "pathlib._make_selector": [
        "<builtin>.ValueError",
        "pathlib._WildcardSelector.__init__",
        "pathlib._PreciseSelector.__init__",
        "pathlib._RecursiveWildcardSelector.__init__",
        "pathlib._is_wildcard_pattern"
    ],
    "pathlib._PreciseSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._RecursiveWildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._WildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._Selector": [],
    "pathlib._Selector.__init__": [
        "pathlib._make_selector"
    ],
    "pathlib._Selector.select_from": [
        "<builtin>.iter",
        "<builtin>.type"
    ],
    "pathlib._TerminatingSelector": [],
    "pathlib._TerminatingSelector._select_from": [],
    "pathlib._PreciseSelector": [],
    "pathlib._PreciseSelector._select_from": [
        "pathlib._TerminatingSelector._select_from"
    ],
    "pathlib._WildcardSelector": [],
    "pathlib._WildcardSelector._select_from": [
        "pathlib._ignore_error",
        "pathlib._TerminatingSelector._select_from",
        "<builtin>.list"
    ],
    "pathlib._RecursiveWildcardSelector": [],
    "pathlib._RecursiveWildcardSelector._iterate_directories": [
        "pathlib._ignore_error",
        "<builtin>.list",
        "pathlib._RecursiveWildcardSelector._iterate_directories"
    ],
    "pathlib._RecursiveWildcardSelector._select_from": [
        "<builtin>.set",
        "pathlib._RecursiveWildcardSelector._iterate_directories"
    ],
    "pathlib._PathParents": [],
    "pathlib._PathParents.__init__": [
        "<builtin>.type"
    ],
    "pathlib._PathParents.__len__": [
        "<builtin>.len"
    ],
    "pathlib._PathParents.__getitem__": [
        "<builtin>.IndexError",
        "<builtin>.len"
    ],
    "pathlib._PathParents.__repr__": [],
    "pathlib.PurePath": [
        "operator.attrgetter.__init__",
        "<builtin>.property"
    ],
    "pathlib.PurePath.__new__": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath._from_parts": [],
    "pathlib.PurePath.__reduce__": [
        "<builtin>.tuple"
    ],
    "pathlib.PurePath._parse_args": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.type"
    ],
    "pathlib.PurePath._from_parsed_parts": [],
    "pathlib.PurePath._format_parsed_parts": [],
    "pathlib.PurePath._init": [],
    "pathlib.PurePath._make_child": [
        "pathlib.PurePath._from_parsed_parts",
        "pathlib.PurePath._parse_args"
    ],
    "pathlib.PurePath.__str__": [
        "pathlib.PurePath._format_parsed_parts"
    ],
    "pathlib.PurePath.__fspath__": [
        "<builtin>.str"
    ],
    "pathlib.PurePath.as_posix": [
        "<builtin>.str"
    ],
    "pathlib.PurePath.__bytes__": [],
    "pathlib.PurePath.__repr__": [
        "pathlib.PurePath.as_posix"
    ],
    "pathlib.PurePath.as_uri": [
        "<builtin>.ValueError",
        "pathlib.PurePath.is_absolute"
    ],
    "pathlib.PurePath.is_absolute": [
        "<builtin>.bool"
    ],
    "pathlib.PurePath._cparts": [],
    "pathlib.PurePath.__eq__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__hash__": [
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "pathlib.PurePath.__lt__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__le__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__gt__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.__ge__": [
        "<builtin>.isinstance"
    ],
    "pathlib.PurePath.anchor": [],
    "pathlib.PurePath.name": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.suffix": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.suffixes": [],
    "pathlib.PurePath.stem": [
        "<builtin>.len"
    ],
    "pathlib.PurePath.with_name": [
        "<builtin>.ValueError",
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.len"
    ],
    "pathlib.PurePath.with_suffix": [
        "<builtin>.ValueError",
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.len"
    ],
    "pathlib.PurePath.relative_to": [
        "<builtin>.ValueError",
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.str",
        "<builtin>.TypeError",
        "<builtin>.len",
        "pathlib.PurePath._format_parsed_parts",
        "pathlib.PurePath._parse_args"
    ],
    "pathlib.PurePath.parts": [
        "<builtin>.tuple"
    ],
    "pathlib.PurePath.__truediv__": [
        "pathlib.PurePath._make_child"
    ],
    "pathlib.PurePath.__rtruediv__": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath.parent": [
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.len"
    ],
    "pathlib.PurePath.parents": [
        "pathlib._PathParents.__init__"
    ],
    "pathlib.PurePath.is_reserved": [],
    "pathlib.PurePath.match": [
        "<builtin>.reversed",
        "<builtin>.ValueError",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "pathlib.PurePosixPath": [],
    "pathlib.PureWindowsPath": [],
    "pathlib.Path": [],
    "pathlib.Path.__new__": [
        "<builtin>.NotImplementedError",
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.Path._init": [],
    "pathlib.Path._make_child_relpath": [
        "pathlib.PurePath._from_parsed_parts"
    ],
    "pathlib.Path.__enter__": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path._raise_closed": [
        "<builtin>.ValueError"
    ],
    "pathlib.Path.__exit__": [],
    "pathlib.Path._opener": [],
    "pathlib.Path._raw_open": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.cwd": [],
    "pathlib.Path.home": [],
    "pathlib.Path.samefile": [
        "ntpath.samestat",
        "posixpath.samestat",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.stat": [],
    "pathlib.Path.iterdir": [
        "pathlib.Path._raise_closed",
        "pathlib.Path._make_child_relpath"
    ],
    "pathlib.Path.glob": [
        "<builtin>.NotImplementedError",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "pathlib._make_selector"
    ],
    "pathlib.Path.rglob": [
        "<builtin>.NotImplementedError",
        "<builtin>.tuple",
        "pathlib._make_selector"
    ],
    "pathlib.Path.absolute": [
        "pathlib.PurePath._from_parts",
        "pathlib.Path._raise_closed",
        "pathlib.PurePath.is_absolute"
    ],
    "pathlib.Path.resolve": [
        "pathlib.PurePath._from_parts",
        "pathlib.Path._raise_closed",
        "pathlib.Path.absolute",
        "<builtin>.str",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.owner": [
        "pwd.getpwuid",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.open": [
        "pathlib.Path._raise_closed",
        "io.open"
    ],
    "pathlib.Path.read_bytes": [
        "pathlib.Path.open"
    ],
    "pathlib.Path.read_text": [
        "pathlib.Path.open"
    ],
    "pathlib.Path.write_bytes": [
        "pathlib.Path.open",
        "<builtin>.memoryview"
    ],
    "pathlib.Path.write_text": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "pathlib.Path.open"
    ],
    "pathlib.Path.touch": [
        "pathlib.Path._raise_closed",
        "pathlib.Path._raw_open"
    ],
    "pathlib.Path.mkdir": [
        "pathlib.Path._raise_closed",
        "pathlib.Path.mkdir",
        "pathlib.Path.is_dir"
    ],
    "pathlib.Path.is_dir": [
        "stat.S_ISDIR",
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.chmod": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.lchmod": [
        "pathlib.Path._raise_closed",
        "pathlib._NormalAccessor.lchmod"
    ],
    "pathlib.Path.unlink": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.rmdir": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.lstat": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.link_to": [
        "pathlib.Path._raise_closed",
        "pathlib._NormalAccessor.link_to"
    ],
    "pathlib.Path.rename": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.replace": [
        "pathlib.Path._raise_closed"
    ],
    "pathlib.Path.symlink_to": [
        "pathlib.Path._raise_closed",
        "pathlib._NormalAccessor.symlink"
    ],
    "pathlib.Path.exists": [
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_file": [
        "stat.S_ISREG",
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_mount": [
        "pathlib.Path.exists",
        "pathlib.Path.is_dir",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_symlink": [
        "pathlib._ignore_error",
        "stat.S_ISLNK",
        "pathlib.Path.lstat"
    ],
    "pathlib.Path.is_block_device": [
        "stat.S_ISBLK",
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_char_device": [
        "pathlib._ignore_error",
        "stat.S_ISCHR",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_fifo": [
        "stat.S_ISFIFO",
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.is_socket": [
        "stat.S_ISSOCK",
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.expanduser": [
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PosixPath": [],
    "pathlib.WindowsPath": [],
    "pathlib.WindowsPath.owner": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib.WindowsPath.group": [
        "<builtin>.NotImplementedError"
    ],
    "pathlib.WindowsPath.is_mount": [
        "<builtin>.NotImplementedError"
    ],
    "fnmatch.fnmatch": [
        "ntpath.normcase",
        "posixpath.normcase",
        "fnmatch.fnmatchcase"
    ],
    "fnmatch.fnmatchcase": [
        "fnmatch._compile_pattern"
    ],
    "fnmatch._compile_pattern": [
        "fnmatch.translate",
        "<builtin>.bytes",
        "<builtin>.str",
        "re.compile",
        "<builtin>.isinstance"
    ],
    "fnmatch.translate": [
        "re.sub",
        "<builtin>.len",
        "re.escape"
    ],
    "fnmatch.filter": [
        "ntpath.normcase",
        "posixpath.normcase",
        "fnmatch._compile_pattern"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "sys.stdin.buffer.replace": [],
    "ntpath.lexists": [],
    "ntpath.ismount": [
        "nt._getvolumepathname",
        "ntpath._get_bothseps",
        "ntpath._abspath_fallback",
        "ntpath.splitdrive"
    ],
    "ntpath._abspath_fallback": [
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.isabs",
        "ntpath.normpath"
    ],
    "nt._getvolumepathname": [],
    "sys.base_prefix.lstrip": [],
    "sys.path.lstrip": [],
    "nt._getfullpathname": [],
    "ntpath._readlink_deep": [
        "ntpath.normcase",
        "ntpath.islink",
        "ntpath.dirname",
        "<builtin>.set",
        "ntpath.join",
        "ntpath.isabs",
        "nt.readlink",
        "ntpath.normpath"
    ],
    "nt.readlink": [],
    "ntpath._getfinalpathname_nonstrict": [
        "ntpath.join",
        "ntpath._readlink_deep",
        "ntpath.split",
        "nt._getfinalpathname"
    ],
    "ntpath.relpath": [
        "<builtin>.ValueError",
        "<builtin>.zip",
        "ntpath.splitdrive",
        "ntpath._abspath_fallback",
        "<builtin>.len",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.normcase",
        "genericpath._check_arg_types",
        "ntpath.normpath"
    ],
    "ntpath.commonpath": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "ntpath.splitdrive",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.map",
        "<builtin>.enumerate",
        "<builtin>.set",
        "<builtin>.len",
        "genericpath._check_arg_types",
        "<builtin>.isinstance"
    ],
    "string.capwords": [],
    "string._TemplateMetaclass": [],
    "string._TemplateMetaclass.__init__": [
        "re.escape",
        "<builtin>.super",
        "re.compile"
    ],
    "string.Template": [],
    "string.Template._invalid": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "string.Template.substitute": [
        "collections.ChainMap.__init__"
    ],
    "string.Template.substitute.convert": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "string.Template.safe_substitute": [
        "collections.ChainMap.__init__"
    ],
    "string.Template.safe_substitute.convert": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "string.Formatter": [],
    "string.Formatter.format": [],
    "string.Formatter.vformat": [
        "string.Formatter._vformat",
        "string.Formatter.check_unused_args",
        "<builtin>.set"
    ],
    "string.Formatter._vformat": [
        "<builtin>.ValueError",
        "string.Formatter.convert_field",
        "string.Formatter._vformat",
        "string.Formatter.parse",
        "<builtin>.str",
        "string.Formatter.get_field",
        "string.Formatter.format_field"
    ],
    "string.Formatter.check_unused_args": [],
    "string.Formatter.parse": [
        "_string.formatter_parser"
    ],
    "string.Formatter.get_field": [
        "<builtin>.getattr",
        "string.Formatter.get_value",
        "_string.formatter_field_name_split"
    ],
    "string.Formatter.convert_field": [
        "<builtin>.ascii",
        "<builtin>.ValueError",
        "<builtin>.repr",
        "<builtin>.str"
    ],
    "string.Formatter.format_field": [
        "string.Formatter.format"
    ],
    "string.Formatter.get_value": [
        "<builtin>.isinstance"
    ],
    "<builtin>.ascii": [],
    "_string.formatter_parser": [],
    "_string.formatter_field_name_split": [],
    "urllib.parse.clear_cache": [],
    "urllib.parse._noop": [],
    "urllib.parse._encode_result": [],
    "urllib.parse._decode_args": [
        "<builtin>.tuple"
    ],
    "urllib.parse._coerce_args": [
        "urllib.parse._decode_args",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse._ResultMixinStr.encode": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._ResultMixinBytes.decode": [],
    "urllib.parse._NetlocResultMixinBase": [],
    "urllib.parse._NetlocResultMixinBase.username": [],
    "urllib.parse._NetlocResultMixinBase.password": [],
    "urllib.parse._NetlocResultMixinBase.hostname": [
        "<builtin>.isinstance"
    ],
    "urllib.parse._NetlocResultMixinBase.port": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "urllib.parse._NetlocResultMixinStr": [],
    "urllib.parse._NetlocResultMixinStr._userinfo": [],
    "urllib.parse._NetlocResultMixinStr._hostinfo": [],
    "urllib.parse._NetlocResultMixinBytes": [],
    "urllib.parse._NetlocResultMixinBytes._userinfo": [],
    "urllib.parse._NetlocResultMixinBytes._hostinfo": [],
    "urllib.parse.DefragResult": [],
    "urllib.parse.DefragResult.geturl": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.SplitResult.geturl": [
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.urlunsplit": [
        "urllib.parse._coerce_args"
    ],
    "urllib.parse.ParseResult": [],
    "urllib.parse.ParseResult.geturl": [
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.urlunparse": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.DefragResultBytes.geturl": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse.SplitResultBytes.geturl": [
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse.ParseResultBytes.geturl": [
        "urllib.parse.urlunparse"
    ],
    "urllib.parse._fix_result_transcoding": [],
    "urllib.parse.urlparse": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlsplit",
        "urllib.parse._splitparams"
    ],
    "urllib.parse._splitparams": [],
    "urllib.parse._splitnetloc": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "urllib.parse.urljoin": [
        "urllib.parse._coerce_args",
        "<builtin>.filter",
        "urllib.parse.urlparse",
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.urldefrag": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlparse",
        "urllib.parse.urlunparse"
    ],
    "urllib.parse.unquote_to_bytes": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "urllib.parse.unquote": [
        "urllib.parse.unquote_to_bytes",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "urllib.parse.parse_qs": [
        "urllib.parse.parse_qsl"
    ],
    "urllib.parse.parse_qsl": [
        "urllib.parse._coerce_args",
        "<builtin>.ValueError",
        "urllib.parse.unquote",
        "<builtin>.len"
    ],
    "urllib.parse.unquote_plus": [
        "urllib.parse.unquote"
    ],
    "urllib.parse.Quoter": [],
    "urllib.parse.Quoter.__init__": [],
    "urllib.parse.Quoter.__repr__": [
        "<builtin>.dict"
    ],
    "urllib.parse.Quoter.__missing__": [
        "<builtin>.chr"
    ],
    "urllib.parse.quote": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "urllib.parse.quote_from_bytes"
    ],
    "urllib.parse.quote_plus": [
        "<builtin>.isinstance",
        "urllib.parse.quote"
    ],
    "_collections.defaultdict.__getitem__": [],
    "urllib.parse.urlencode": [
        "urllib.parse.quote_plus",
        "sys.exc_info",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "urllib.parse.to_bytes": [
        "warnings.warn",
        "urllib.parse._to_bytes"
    ],
    "urllib.parse._to_bytes": [
        "<builtin>.isinstance",
        "<builtin>.repr",
        "<builtin>.UnicodeError"
    ],
    "<builtin>.UnicodeError": [],
    "urllib.parse.unwrap": [
        "<builtin>.str"
    ],
    "urllib.parse.splittype": [
        "warnings.warn",
        "urllib.parse._splittype"
    ],
    "urllib.parse._splittype": [
        "re.compile"
    ],
    "urllib.parse.splithost": [
        "warnings.warn",
        "urllib.parse._splithost"
    ],
    "urllib.parse._splithost": [
        "re.compile"
    ],
    "urllib.parse.splituser": [
        "warnings.warn",
        "urllib.parse._splituser"
    ],
    "urllib.parse._splituser": [],
    "urllib.parse.splitpasswd": [
        "warnings.warn",
        "urllib.parse._splitpasswd"
    ],
    "urllib.parse._splitpasswd": [],
    "urllib.parse.splitport": [
        "urllib.parse._splitport",
        "warnings.warn"
    ],
    "urllib.parse._splitport": [
        "re.compile"
    ],
    "urllib.parse.splitnport": [
        "warnings.warn",
        "urllib.parse._splitnport"
    ],
    "urllib.parse._splitnport": [
        "<builtin>.int"
    ],
    "urllib.parse.splitquery": [
        "warnings.warn",
        "urllib.parse._splitquery"
    ],
    "urllib.parse._splitquery": [],
    "urllib.parse.splittag": [
        "warnings.warn",
        "urllib.parse._splittag"
    ],
    "urllib.parse._splittag": [],
    "urllib.parse.splitattr": [
        "warnings.warn",
        "urllib.parse._splitattr"
    ],
    "urllib.parse._splitattr": [],
    "urllib.parse.splitvalue": [
        "warnings.warn",
        "urllib.parse._splitvalue"
    ],
    "urllib.parse._splitvalue": [],
    "email.parser.Parser.__init__": [],
    "email.parser.Parser.parsestr": [
        "_io.StringIO",
        "email.parser.Parser.parse"
    ],
    "email.parser.BytesParser.__init__": [
        "email.parser.Parser.__init__"
    ],
    "email.parser.BytesParser.parsebytes": [
        "email.parser.Parser.parsestr"
    ],
    "email.parser.Parser.parse": [
        "email.feedparser.FeedParser.__init__",
        "email.feedparser.FeedParser._set_headersonly",
        "email.feedparser.FeedParser.close",
        "email.feedparser.FeedParser.feed"
    ],
    "email.parser.BytesParser.parse": [
        "sys.stdout.detach",
        "_io.TextIOWrapper",
        "email.parser.Parser.parse",
        "_io._IOBase.detach",
        "_io._BufferedIOBase.detach"
    ],
    "email.parser.Parser": [],
    "email.feedparser.FeedParser._set_headersonly": [],
    "email.feedparser.FeedParser.feed": [
        "email.feedparser.BufferedSubFile.push",
        "email.feedparser.FeedParser._call_parse"
    ],
    "email.feedparser.FeedParser.close": [
        "email.feedparser.BufferedSubFile.close",
        "email.feedparser.FeedParser._pop_message",
        "email._policybase.Policy.handle_defect",
        "email.errors.MessageDefect.__init__",
        "email.feedparser.FeedParser._call_parse"
    ],
    "email.parser.HeaderParser": [],
    "email.parser.HeaderParser.parse": [
        "email.parser.Parser.parse"
    ],
    "email.parser.HeaderParser.parsestr": [
        "email.parser.Parser.parsestr"
    ],
    "email.parser.BytesParser": [],
    "_io._IOBase.detach": [],
    "sys.stdout.detach": [],
    "_io._BufferedIOBase.detach": [],
    "email.parser.BytesHeaderParser": [],
    "email.parser.BytesHeaderParser.parse": [
        "email.parser.BytesParser.parse"
    ],
    "email.parser.BytesHeaderParser.parsebytes": [
        "email.parser.BytesParser.parsebytes"
    ],
    "email._policybase._PolicyBase": [],
    "email._policybase._PolicyBase.__init__": [
        "<builtin>.super",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "email._policybase._PolicyBase.__repr__": [],
    "email._policybase._PolicyBase.clone": [
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "email._policybase._PolicyBase.__setattr__": [
        "<builtin>.AttributeError",
        "<builtin>.hasattr"
    ],
    "email._policybase._PolicyBase.__add__": [
        "email._policybase._PolicyBase.clone"
    ],
    "email._policybase._append_doc": [],
    "email._policybase._extend_docstrings": [
        "email._policybase._append_doc",
        "<builtin>.getattr"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase.Policy.handle_defect": [
        "email._policybase.Policy.register_defect"
    ],
    "email._policybase.Policy.register_defect": [],
    "email._policybase.Policy.header_max_count": [],
    "email._policybase.Policy.header_source_parse": [],
    "email._policybase.Policy.header_store_parse": [],
    "email._policybase.Policy.header_fetch_parse": [],
    "email._policybase.Policy.fold": [],
    "email._policybase.Policy.fold_binary": [],
    "email._policybase.Compat32": [],
    "email._policybase.Compat32._sanitize_header": [
        "<builtin>.isinstance",
        "email.utils._has_surrogates",
        "email.header.Header.__init__"
    ],
    "email.utils._has_surrogates": [],
    "email.header.Header.__init__": [
        "<builtin>.isinstance",
        "email.header.Header.append",
        "email.charset.Charset.__init__",
        "<builtin>.len"
    ],
    "email._policybase.Compat32.header_source_parse": [],
    "email._policybase.Compat32.header_store_parse": [],
    "email._policybase.Compat32.header_fetch_parse": [
        "email._policybase.Compat32._sanitize_header"
    ],
    "email._policybase.Compat32.fold": [
        "email._policybase.Compat32._fold"
    ],
    "email._policybase.Compat32._fold": [
        "email.header.Header.encode",
        "<builtin>.isinstance",
        "email.utils._has_surrogates",
        "email.header.Header.__init__"
    ],
    "email._policybase.Compat32.fold_binary": [
        "email._policybase.Compat32._fold"
    ],
    "email.header.Header.encode": [
        "email.header._ValueFormatter.__init__",
        "email.header._ValueFormatter._str",
        "email.header._ValueFormatter.newline",
        "email.header.Header._nonctext",
        "email.header.Header._normalize",
        "email.header._ValueFormatter.feed",
        "<builtin>.len",
        "email.header._ValueFormatter.add_transition"
    ],
    "email.charset.add_charset": [
        "<builtin>.ValueError"
    ],
    "email.charset.add_alias": [],
    "email.charset.add_codec": [],
    "email.charset._encode": [],
    "email.charset.Charset": [],
    "email.charset.Charset.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "email.charset.Charset.__repr__": [],
    "email.charset.Charset.__eq__": [
        "<builtin>.str"
    ],
    "email.charset.Charset.get_body_encoding": [],
    "email.charset.Charset.get_output_charset": [],
    "email.charset.Charset.header_encode": [
        "email.charset.Charset._get_encoder",
        "email.charset._encode"
    ],
    "email.charset.Charset._get_encoder": [],
    "email.charset.Charset.header_encode_lines": [
        "<builtin>.next",
        "email.charset.Charset.get_output_charset",
        "email.charset.Charset._get_encoder",
        "email.charset._encode",
        "<builtin>.len",
        "_functools.partial"
    ],
    "email.charset.Charset.body_encode": [
        "<builtin>.isinstance"
    ],
    "email.encoders._qencode": [
        "quopri.encodestring"
    ],
    "email.encoders.encode_base64": [
        "base64.encodebytes",
        "<builtin>.str"
    ],
    "base64.encodebytes": [
        "base64._input_type_check",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email.encoders.encode_quopri": [
        "email.encoders._qencode"
    ],
    "email.encoders.encode_7or8bit": [],
    "email.encoders.encode_noop": [],
    "base64._bytes_from_decode_data": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.memoryview"
    ],
    "base64.b64decode": [
        "re.fullmatch",
        "<builtin>.repr",
        "<builtin>.len",
        "base64._bytes_from_decode_data"
    ],
    "base64.standard_b64encode": [
        "base64.b64encode"
    ],
    "base64.standard_b64decode": [
        "base64.b64decode"
    ],
    "base64.urlsafe_b64encode": [
        "base64.b64encode"
    ],
    "base64.urlsafe_b64decode": [
        "base64.b64decode",
        "base64._bytes_from_decode_data"
    ],
    "base64.b32encode": [
        "<builtin>.memoryview",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.isinstance"
    ],
    "base64.b32decode": [
        "<builtin>.bytes",
        "<builtin>.repr",
        "<builtin>.bytearray",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range",
        "base64._bytes_from_decode_data"
    ],
    "base64.b16encode": [],
    "base64.b16decode": [
        "re.search",
        "base64._bytes_from_decode_data"
    ],
    "base64._85encode": [
        "<builtin>.isinstance",
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "base64.a85encode": [
        "<builtin>.max",
        "<builtin>.bytes",
        "<builtin>.len",
        "<builtin>.range",
        "base64._85encode"
    ],
    "base64.a85decode": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "base64._bytes_from_decode_data"
    ],
    "base64.b85encode": [
        "<builtin>.bytes",
        "base64._85encode"
    ],
    "base64.b85decode": [
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range",
        "base64._bytes_from_decode_data"
    ],
    "base64.encode": [
        "sys.stdout.buffer.write",
        "sys.stdin.buffer.read",
        "<builtin>.len"
    ],
    "sys.stdin.buffer.read": [],
    "sys.stdout.buffer.write": [],
    "base64.decode": [
        "sys.stdin.buffer.readline",
        "sys.stdout.buffer.write"
    ],
    "sys.stdin.buffer.readline": [],
    "base64._input_type_check": [
        "<builtin>.TypeError",
        "<builtin>.memoryview"
    ],
    "base64.decodebytes": [
        "base64._input_type_check"
    ],
    "base64.test": [
        "<builtin>.print",
        "base64.encodebytes",
        "<builtin>.repr",
        "base64.decodebytes"
    ],
    "getopt._": [],
    "getopt.GetoptError": [],
    "getopt.GetoptError.__init__": [],
    "getopt.GetoptError.__str__": [],
    "getopt.getopt": [
        "getopt.do_shorts",
        "<builtin>.type",
        "getopt.do_longs",
        "<builtin>.list"
    ],
    "getopt.do_longs": [
        "gettext.gettext",
        "getopt.GetoptError.__init__",
        "getopt.long_has_args"
    ],
    "getopt.do_shorts": [
        "gettext.gettext",
        "getopt.short_has_arg",
        "getopt.GetoptError.__init__"
    ],
    "getopt.gnu_getopt": [
        "<builtin>.isinstance",
        "getopt.do_shorts",
        "getopt.do_longs",
        "<builtin>.list"
    ],
    "getopt.long_has_args": [
        "gettext.gettext",
        "<builtin>.len",
        "getopt.GetoptError.__init__"
    ],
    "getopt.short_has_arg": [
        "getopt.GetoptError.__init__",
        "gettext.gettext",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "quopri.needsquoting": [
        "<builtin>.isinstance"
    ],
    "quopri.quote": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.ord",
        "<builtin>.len"
    ],
    "quopri.encode": [
        "<builtin>.bytes",
        "quopri.quote",
        "sys.stdin.buffer.readline",
        "sys.stdout.buffer.write",
        "<builtin>.len",
        "sys.stdin.buffer.read",
        "quopri.needsquoting",
        "quopri.encode.write"
    ],
    "quopri.encode.write": [
        "sys.stdout.buffer.write",
        "quopri.quote"
    ],
    "_io.BytesIO": [],
    "quopri.decode": [
        "<builtin>.bytes",
        "quopri.unhex",
        "sys.stdin.buffer.readline",
        "<builtin>.len",
        "sys.stdout.buffer.write",
        "quopri.ishex",
        "sys.stdin.buffer.read"
    ],
    "quopri.ishex": [
        "<builtin>.isinstance"
    ],
    "quopri.unhex": [
        "<builtin>.bytes",
        "<builtin>.repr",
        "<builtin>.ord"
    ],
    "sys.stdin.buffer.close": [],
    "email.errors.MessageError": [],
    "email.errors.MessageParseError": [],
    "email.errors.HeaderParseError": [],
    "email.errors.BoundaryError": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.CharsetError": [],
    "email.errors.MessageDefect": [],
    "email.errors.MessageDefect.__init__": [
        "<builtin>.super"
    ],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.HeaderDefect.__init__": [
        "<builtin>.super"
    ],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.NonPrintableDefect.__init__": [
        "<builtin>.super"
    ],
    "email.errors.NonPrintableDefect.__str__": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "email.quoprimime.header_check": [
        "<builtin>.chr"
    ],
    "email.quoprimime.body_check": [
        "<builtin>.chr"
    ],
    "email.quoprimime.header_length": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email.quoprimime.body_length": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email.quoprimime._max_append": [
        "<builtin>.chr",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "email.quoprimime.unquote": [
        "<builtin>.chr",
        "<builtin>.int"
    ],
    "email.quoprimime.quote": [
        "<builtin>.ord"
    ],
    "email.quoprimime.header_encode": [],
    "email.quoprimime.body_encode": [
        "email.quoprimime.quote",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "email.quoprimime.decode": [
        "email.quoprimime.unquote",
        "<builtin>.len"
    ],
    "email.quoprimime._unquote_match": [
        "email.quoprimime.unquote"
    ],
    "email.quoprimime.header_decode": [
        "re.sub"
    ],
    "email.base64mime.header_length": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "<builtin>.divmod": [],
    "email.base64mime.header_encode": [
        "<builtin>.isinstance",
        "base64.b64encode"
    ],
    "email.base64mime.body_encode": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email.base64mime.decode": [
        "<builtin>.bytes",
        "<builtin>.isinstance"
    ],
    "email.header.decode_header": [
        "<builtin>.AssertionError",
        "<builtin>.bytes",
        "<builtin>.reversed",
        "<builtin>.enumerate",
        "<builtin>.str",
        "email.charset._encode",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "email.header.make_header": [
        "<builtin>.isinstance",
        "email.header.Header.append",
        "email.charset.Charset.__init__",
        "email.header.Header.__init__"
    ],
    "email.header.Header.append": [
        "<builtin>.isinstance",
        "email.charset.Charset.__init__"
    ],
    "email.header.Header": [],
    "email.header.Header.__str__": [
        "email.header.Header._nonctext",
        "email.header.Header._normalize"
    ],
    "email.header.Header._normalize": [],
    "email.header.Header._nonctext": [],
    "email.header.Header.__eq__": [
        "<builtin>.str"
    ],
    "email.header._ValueFormatter.__init__": [
        "email.header._Accumulator.__init__",
        "<builtin>.len"
    ],
    "email.header._ValueFormatter.add_transition": [
        "email.header._Accumulator.push"
    ],
    "email.header._ValueFormatter.feed": [
        "email.header._ValueFormatter.newline",
        "email.header._ValueFormatter._ascii_split",
        "email.header._ValueFormatter._maxlengths",
        "email.header._Accumulator.push",
        "email.header._ValueFormatter._append_chunk"
    ],
    "email.header._ValueFormatter.newline": [
        "email.header._Accumulator.pop",
        "email.header._Accumulator.reset",
        "email.header._Accumulator.is_onlyws",
        "<builtin>.str",
        "<builtin>.len",
        "email.header._Accumulator.push"
    ],
    "email.header._ValueFormatter._str": [
        "email.header._ValueFormatter.newline"
    ],
    "email.header._ValueFormatter": [],
    "email.header._Accumulator.__init__": [
        "<builtin>.super"
    ],
    "email.header._ValueFormatter.__str__": [
        "email.header._ValueFormatter._str"
    ],
    "email.header._Accumulator.pop": [
        "<builtin>.super",
        "email.header._Accumulator.part_count"
    ],
    "email.header._Accumulator.push": [],
    "email.header._Accumulator.is_onlyws": [
        "<builtin>.str"
    ],
    "email.header._Accumulator.reset": [],
    "email.header._ValueFormatter._ascii_split": [
        "re.split",
        "email.header._ValueFormatter._append_chunk",
        "<builtin>.zip"
    ],
    "email.header._ValueFormatter._maxlengths": [
        "<builtin>.len"
    ],
    "email.header._ValueFormatter._append_chunk": [
        "<builtin>.range",
        "email.header._Accumulator.reset",
        "<builtin>.str",
        "email.header._Accumulator.pop_from",
        "<builtin>.len",
        "email.header._Accumulator.push",
        "email.header._Accumulator.part_count"
    ],
    "email.header._Accumulator.part_count": [
        "<builtin>.super"
    ],
    "email.header._Accumulator.pop_from": [],
    "email.header._Accumulator": [],
    "email.header._Accumulator.__len__": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email.header._Accumulator.__str__": [],
    "email.utils._sanitize": [],
    "email.utils.formataddr": [
        "<builtin>.isinstance",
        "email.charset.Charset.__init__",
        "email.charset.Charset.header_encode"
    ],
    "email.utils.getaddresses": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email._parseaddr.AddressList.__init__": [
        "email._parseaddr.AddrlistClass.__init__",
        "email._parseaddr.AddrlistClass.getaddrlist"
    ],
    "email.utils._format_timetuple_and_zone": [],
    "email.utils.formatdate": [
        "email.utils.format_datetime",
        "time.time"
    ],
    "email.utils.format_datetime": [
        "email.utils._format_timetuple_and_zone",
        "<builtin>.ValueError"
    ],
    "email.utils.make_msgid": [
        "<builtin>.int",
        "time.time"
    ],
    "email.utils.parsedate_to_datetime": [
        "email._parseaddr._parsedate_tz"
    ],
    "email._parseaddr._parsedate_tz": [
        "<builtin>.int",
        "<builtin>.len"
    ],
    "email.utils.parseaddr": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email.utils.unquote": [
        "<builtin>.len"
    ],
    "email.utils.decode_rfc2231": [
        "<builtin>.len"
    ],
    "email.utils.encode_rfc2231": [],
    "email.utils.decode_params": [
        "<builtin>.int",
        "email._parseaddr.quote",
        "email.utils.decode_rfc2231",
        "email.utils.unquote"
    ],
    "email._parseaddr.quote": [],
    "email.utils.collapse_rfc2231_value": [
        "<builtin>.bytes",
        "<builtin>.str",
        "email.utils.unquote",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "email.utils.localtime": [
        "time.localtime",
        "time.mktime",
        "time.gmtime"
    ],
    "time.mktime": [],
    "random.Random": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.super",
        "<builtin>.ord",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "random.Random.__init_subclass__": [],
    "random.Random.getstate": [
        "<builtin>.super"
    ],
    "random.Random.setstate": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.super"
    ],
    "random.Random.__getstate__": [
        "random.Random.getstate"
    ],
    "random.Random.__setstate__": [
        "random.Random.setstate"
    ],
    "random.Random.__reduce__": [
        "random.Random.getstate"
    ],
    "random.Random.randrange": [
        "<builtin>.ValueError",
        "random.Random._randbelow_with_getrandbits"
    ],
    "random.Random._randbelow_with_getrandbits": [],
    "random.Random._randbelow_without_getrandbits": [
        "<builtin>.ValueError",
        "_warnings.warn"
    ],
    "random.Random.choice": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.IndexError",
        "<builtin>.len"
    ],
    "random.Random.shuffle": [
        "<builtin>.reversed",
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "random.Random.sample": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.list",
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.TypeError",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.isinstance"
    ],
    "random.Random.choices": [
        "<builtin>.ValueError",
        "itertools.repeat",
        "<builtin>.list",
        "<builtin>.TypeError",
        "<builtin>.len",
        "itertools.accumulate",
        "bisect.bisect_right"
    ],
    "itertools.accumulate": [],
    "bisect.bisect_right": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "random.Random.uniform": [],
    "random.Random.triangular": [],
    "random.Random.normalvariate": [],
    "random.Random.lognormvariate": [
        "random.Random.normalvariate"
    ],
    "random.Random.expovariate": [],
    "random.Random.vonmisesvariate": [],
    "random.Random.gammavariate": [
        "<builtin>.ValueError"
    ],
    "random.Random.gauss": [],
    "random.Random.betavariate": [
        "random.Random.gammavariate"
    ],
    "random.Random.paretovariate": [],
    "random.Random.weibullvariate": [],
    "random.SystemRandom": [],
    "random.SystemRandom.random": [],
    "random.SystemRandom.getrandbits": [
        "<builtin>.ValueError"
    ],
    "random.SystemRandom.seed": [],
    "random.SystemRandom._notimplemented": [
        "<builtin>.NotImplementedError"
    ],
    "random._test_generator": [
        "random.Random.vonmisesvariate",
        "random.Random.normalvariate",
        "random.Random.triangular",
        "time.perf_counter",
        "<builtin>.max",
        "<builtin>.print",
        "random.Random.betavariate",
        "random.Random.gammavariate",
        "<builtin>.min",
        "random.Random.lognormvariate",
        "<builtin>.range",
        "<builtin>.round",
        "random.Random.gauss"
    ],
    "time.perf_counter": [],
    "random._test": [
        "random._test_generator"
    ],
    "bisect.insort_right": [
        "bisect.bisect_right"
    ],
    "bisect.insort_left": [
        "bisect.bisect_left"
    ],
    "bisect.bisect_left": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "hashlib.__get_openssl_constructor": [
        "<builtin>.getattr",
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.__py_new": [
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.__hash_new": [
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.pbkdf2_hmac": [
        "<builtin>.ValueError",
        "<builtin>.memoryview",
        "<builtin>.getattr",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.range",
        "hashlib.__py_new",
        "<builtin>.isinstance",
        "hashlib.__hash_new",
        "hashlib.pbkdf2_hmac.prf"
    ],
    "hashlib.pbkdf2_hmac.prf": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.getLevelName": [],
    "logging.addLevelName": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging._acquireLock": [],
    "logging._releaseLock": [],
    "logging.<lambda1>": [
        "sys._getframe"
    ],
    "logging.currentframe": [
        "sys.exc_info"
    ],
    "logging._checkLevel": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.str",
        "<builtin>.TypeError"
    ],
    "logging._register_at_fork_reinit_lock": [
        "_weakrefset.WeakSet.add",
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging._after_at_fork_child_reinit_locks": [
        "_weakrefset.WeakSet.__iter__",
        "logging._releaseLock",
        "<builtin>.print"
    ],
    "logging.LogRecord": [],
    "logging.LogRecord.__init__": [
        "threading.current_thread",
        "ntpath.basename",
        "posixpath.basename",
        "sys.modules.get",
        "time.time",
        "logging.getLevelName",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.int",
        "ntpath.splitext",
        "posixpath.splitext"
    ],
    "logging.LogRecord.__repr__": [],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.setLogRecordFactory": [],
    "logging.getLogRecordFactory": [],
    "logging.makeLogRecord": [
        "logging.LogRecord.__init__"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.PercentStyle.__init__": [],
    "logging.PercentStyle.usesTime": [],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.PercentStyle._format": [],
    "logging.PercentStyle.format": [
        "<builtin>.ValueError",
        "logging.PercentStyle._format"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle._format": [],
    "logging.StrFormatStyle.validate": [
        "<builtin>.ValueError",
        "string.Formatter.parse",
        "<builtin>.set"
    ],
    "logging.StringTemplateStyle": [],
    "logging.StringTemplateStyle.__init__": [
        "string.Template.__init__"
    ],
    "logging.StringTemplateStyle.usesTime": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "logging.StringTemplateStyle._format": [
        "string.Template.substitute"
    ],
    "logging.Formatter": [],
    "logging.Formatter.formatTime": [
        "time.strftime",
        "time.localtime"
    ],
    "logging.Formatter.formatException": [
        "io.StringIO",
        "traceback.print_exception"
    ],
    "logging.Formatter.usesTime": [],
    "logging.Formatter.formatMessage": [],
    "logging.Formatter.formatStack": [],
    "logging.Formatter.format": [
        "logging.Formatter.formatMessage",
        "logging.Formatter.formatTime",
        "logging.Formatter.formatStack",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatException"
    ],
    "logging.BufferingFormatter": [],
    "logging.BufferingFormatter.__init__": [],
    "logging.BufferingFormatter.formatHeader": [],
    "logging.BufferingFormatter.formatFooter": [],
    "logging.BufferingFormatter.format": [
        "logging.Formatter.format",
        "logging.BufferingFormatter.formatHeader",
        "logging.BufferingFormatter.formatFooter",
        "<builtin>.len"
    ],
    "logging.Filter": [],
    "logging.Filter.__init__": [
        "<builtin>.len"
    ],
    "logging.Filter.filter": [],
    "logging.Filterer": [],
    "logging.Filterer.__init__": [],
    "logging.Filterer.addFilter": [],
    "logging.Filterer.removeFilter": [],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging._removeHandlerRef": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "weakref.ref",
        "logging._releaseLock"
    ],
    "weakref.ref": [],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.NullHandler.createLock": [],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging.Handler.get_name": [],
    "logging.Handler.set_name": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging.Handler.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "logging.Handler.handle": [
        "logging.StreamHandler.emit",
        "logging.Handler.release",
        "logging.Handler.acquire",
        "unittest.case._CapturingHandler.emit",
        "logging.FileHandler.emit",
        "logging.Handler.emit",
        "logging.Filterer.filter",
        "logging.NullHandler.emit"
    ],
    "logging.StreamHandler.emit": [
        "logging.Handler.format",
        "logging.StreamHandler.flush",
        "sys.stderr.write",
        "logging.Handler.handleError"
    ],
    "unittest.case._CapturingHandler.emit": [
        "logging.Handler.format"
    ],
    "logging.NullHandler.emit": [],
    "logging.Handler.setFormatter": [],
    "logging.Handler.flush": [],
    "logging.Handler.__repr__": [
        "logging.getLevelName"
    ],
    "logging.StreamHandler": [],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.StreamHandler.flush": [
        "logging.Handler.release",
        "logging.Handler.acquire",
        "sys.stderr.flush",
        "<builtin>.hasattr",
        "logging.StreamHandler.flush"
    ],
    "logging.StreamHandler.setStream": [
        "logging.Handler.release",
        "logging.Handler.acquire",
        "logging.StreamHandler.flush"
    ],
    "logging.StreamHandler.__repr__": [
        "<builtin>.getattr",
        "<builtin>.str",
        "logging.getLevelName"
    ],
    "logging.FileHandler": [],
    "logging.FileHandler.__repr__": [
        "logging.getLevelName"
    ],
    "logging._StderrHandler": [],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging._StderrHandler.stream": [],
    "logging.PlaceHolder": [],
    "logging.PlaceHolder.__init__": [],
    "logging.PlaceHolder.append": [],
    "logging.setLoggerClass": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "logging.getLoggerClass": [],
    "logging.Manager": [],
    "logging.Manager.__init__": [],
    "logging.Manager.getLogger": [
        "logging._acquireLock",
        "<builtin>.TypeError",
        "logging.Manager._fixupParents",
        "<builtin>.isinstance",
        "logging._releaseLock",
        "logging.Manager._fixupChildren"
    ],
    "logging.Manager._fixupChildren": [
        "<builtin>.len"
    ],
    "logging.Manager._fixupParents": [
        "<builtin>.isinstance",
        "logging.PlaceHolder.__init__"
    ],
    "logging.Manager.setLoggerClass": [
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "logging.Manager.setLogRecordFactory": [],
    "logging.Manager._clear_cache": [
        "<builtin>.isinstance",
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging.Logger": [],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel",
        "logging._releaseLock"
    ],
    "logging.Logger._log": [
        "logging.Logger.findCaller",
        "logging.Logger.handle",
        "sys.exc_info",
        "logging.Logger.makeRecord",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "logging.Logger.warn": [
        "warnings.warn",
        "logging.Logger.warning"
    ],
    "logging.Logger.critical": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.log": [
        "logging.Logger._log",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.findCaller": [
        "io.StringIO",
        "logging.<lambda1>",
        "traceback.print_stack",
        "<builtin>.hasattr",
        "ntpath.normcase",
        "posixpath.normcase"
    ],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Logger.callHandlers": [
        "logging.NullHandler.handle",
        "logging.Handler.handle",
        "sys.stderr.write"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging.Logger.hasHandlers": [],
    "logging.NullHandler.handle": [],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger.getChild": [
        "logging.Manager.getLogger"
    ],
    "logging.Logger.__repr__": [
        "logging.Logger.getEffectiveLevel",
        "logging.getLevelName"
    ],
    "logging.RootLogger": [],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.RootLogger.__reduce__": [],
    "logging.LoggerAdapter": [],
    "logging.LoggerAdapter.__init__": [],
    "logging.LoggerAdapter.process": [],
    "logging.LoggerAdapter.debug": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.log": [
        "logging.LoggerAdapter.isEnabledFor",
        "logging.LoggerAdapter.process"
    ],
    "logging.LoggerAdapter.info": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.warning": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.warn": [
        "warnings.warn",
        "logging.LoggerAdapter.warning"
    ],
    "logging.LoggerAdapter.error": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.exception": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.critical": [
        "logging.LoggerAdapter.log"
    ],
    "logging.LoggerAdapter.isEnabledFor": [],
    "logging.LoggerAdapter.setLevel": [],
    "logging.LoggerAdapter.getEffectiveLevel": [],
    "logging.LoggerAdapter.hasHandlers": [],
    "logging.LoggerAdapter._log": [],
    "logging.LoggerAdapter.manager": [],
    "logging.LoggerAdapter.name": [],
    "logging.LoggerAdapter.__repr__": [
        "logging.getLevelName"
    ],
    "logging.basicConfig": [
        "logging.Logger.removeHandler",
        "logging.FileHandler.__init__",
        "<builtin>.ValueError",
        "logging.Formatter.__init__",
        "logging.Handler.setFormatter",
        "logging.StreamHandler.__init__",
        "logging._releaseLock",
        "logging.Handler.close",
        "logging._acquireLock",
        "<builtin>.len",
        "logging.Logger.addHandler",
        "logging.Logger.setLevel",
        "logging.FileHandler.close"
    ],
    "logging.critical": [
        "logging.basicConfig",
        "logging.Logger.critical",
        "<builtin>.len"
    ],
    "logging.error": [
        "logging.basicConfig",
        "logging.Logger.error",
        "<builtin>.len"
    ],
    "logging.warning": [
        "logging.Logger.warning",
        "logging.basicConfig",
        "<builtin>.len"
    ],
    "logging.warn": [
        "warnings.warn",
        "logging.warning"
    ],
    "logging.info": [
        "logging.basicConfig",
        "logging.Logger.info",
        "<builtin>.len"
    ],
    "logging.debug": [
        "logging.basicConfig",
        "logging.Logger.debug",
        "<builtin>.len"
    ],
    "logging.log": [
        "logging.basicConfig",
        "logging.Logger.log",
        "<builtin>.len"
    ],
    "logging.disable": [
        "logging.Manager._clear_cache"
    ],
    "logging.shutdown": [
        "<builtin>.reversed"
    ],
    "logging.NullHandler": [],
    "logging._showwarning": [
        "logging.Logger.warning",
        "logging.Handler.__init__",
        "logging.getLogger",
        "warnings.formatwarning",
        "logging.Logger.addHandler"
    ],
    "logging.captureWarnings": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "pickle._Stop.__init__": [],
    "pickle._Framer": [],
    "pickle._Framer.__init__": [],
    "pickle._Framer.start_framing": [
        "io.BytesIO"
    ],
    "pickle._Framer.end_framing": [
        "pickle._Framer.commit_frame"
    ],
    "pickle._Framer.commit_frame": [
        "io.BytesIO",
        "<builtin>.len"
    ],
    "pickle._Framer.write": [],
    "pickle._Framer.write_large_bytes": [
        "pickle._Framer.commit_frame"
    ],
    "pickle._Unframer": [],
    "pickle._Unframer.__init__": [],
    "pickle._Unframer.readinto": [
        "<builtin>.len"
    ],
    "pickle._Unframer.read": [
        "<builtin>.len"
    ],
    "pickle._Unframer.readline": [],
    "pickle._Unframer.load_frame": [
        "io.BytesIO"
    ],
    "pickle._getattribute": [
        "<builtin>.AttributeError",
        "<builtin>.getattr"
    ],
    "pickle.whichmodule": [
        "<builtin>.getattr",
        "<builtin>.list",
        "sys.modules.items",
        "pickle._getattribute"
    ],
    "sys.modules.items": [],
    "pickle.encode_long": [],
    "pickle.decode_long": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Pickler.__init__": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "pickle._Framer.__init__"
    ],
    "pickle._Pickler.clear_memo": [],
    "pickle._Pickler.dump": [
        "pickle._Framer.end_framing",
        "pickle._Framer.start_framing",
        "pickle._Pickler.save",
        "<builtin>.hasattr"
    ],
    "pickle._Pickler.save": [
        "pickle._Pickler.save_global",
        "pickle._Pickler.get",
        "<builtin>.issubclass",
        "<builtin>.isinstance",
        "<builtin>.type",
        "pickle._Pickler.save_pers",
        "pickle._Pickler.persistent_id",
        "<builtin>.id",
        "<builtin>.len",
        "<builtin>.getattr",
        "pickle._Pickler.save_reduce",
        "pickle._Framer.commit_frame"
    ],
    "pickle._Pickler.memoize": [
        "pickle._Pickler.put",
        "<builtin>.len",
        "<builtin>.id"
    ],
    "pickle._Pickler.put": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.get": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.persistent_id": [],
    "pickle._Pickler.save_pers": [
        "<builtin>.str",
        "pickle._Pickler.save"
    ],
    "pickle._Pickler.save_global": [
        "pickle._Pickler.memoize",
        "pickle.whichmodule",
        "<builtin>.bytes",
        "pickle._Pickler.save",
        "pickle._Pickler.save_reduce",
        "pickle._getattribute",
        "<builtin>.getattr",
        "<builtin>.__import__"
    ],
    "pickle._Pickler.save_reduce": [
        "pickle._Pickler.memoize",
        "<builtin>.getattr",
        "<builtin>.callable",
        "pickle._Pickler.get",
        "pickle._Pickler._batch_appends",
        "pickle._Pickler.save",
        "pickle._Pickler._batch_setitems",
        "<builtin>.hasattr",
        "<builtin>.id",
        "<builtin>.isinstance",
        "_functools.partial"
    ],
    "pickle._Pickler._batch_appends": [
        "itertools.islice",
        "<builtin>.iter",
        "pickle._Pickler.save",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "pickle._Pickler._batch_setitems": [
        "itertools.islice",
        "<builtin>.iter",
        "pickle._Pickler.save",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_none": [],
    "pickle._Pickler.save_bool": [],
    "pickle._Pickler.save_long": [
        "pickle.encode_long",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_float": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.save_bytes": [
        "pickle._Pickler.save_reduce",
        "<builtin>.str",
        "pickle._Pickler.memoize",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_bytearray": [
        "<builtin>.bytes",
        "pickle._Pickler.save_reduce",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_picklebuffer": [
        "pickle._Pickler.save_bytes",
        "pickle._Pickler.save_bytearray",
        "<builtin>.bool"
    ],
    "pickle._Pickler.save_str": [
        "pickle._Pickler.memoize",
        "<builtin>.len"
    ],
    "pickle._Pickler.save_tuple": [
        "pickle._Pickler.memoize",
        "pickle._Pickler.get",
        "pickle._Pickler.save",
        "<builtin>.len",
        "<builtin>.id"
    ],
    "pickle._Pickler.save_list": [
        "pickle._Pickler._batch_appends",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_dict": [
        "pickle._Pickler._batch_setitems",
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_set": [
        "pickle._Pickler.memoize",
        "itertools.islice",
        "<builtin>.iter",
        "pickle._Pickler.save",
        "<builtin>.list",
        "<builtin>.len",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_frozenset": [
        "pickle._Pickler.memoize",
        "pickle._Pickler.get",
        "pickle._Pickler.save",
        "<builtin>.list",
        "<builtin>.id",
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_type": [
        "pickle._Pickler.save_global",
        "pickle._Pickler.save_reduce",
        "<builtin>.type"
    ],
    "pickle._Unpickler": [],
    "pickle._Unpickler.__init__": [
        "<builtin>.iter"
    ],
    "pickle._Unpickler.load": [
        "pickle._Unframer.__init__",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "pickle._Unpickler.pop_mark": [],
    "pickle._Unpickler.persistent_load": [],
    "pickle._Unpickler.load_proto": [
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_frame": [
        "<builtin>.ValueError",
        "pickle._Unframer.load_frame"
    ],
    "pickle._Unpickler.load_persid": [
        "pickle._Unpickler.persistent_load"
    ],
    "pickle._Unpickler.load_binpersid": [
        "pickle._Unpickler.persistent_load"
    ],
    "pickle._Unpickler.load_none": [],
    "pickle._Unpickler.load_false": [],
    "pickle._Unpickler.load_true": [],
    "pickle._Unpickler.load_int": [
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_binint": [],
    "pickle._Unpickler.load_binint1": [],
    "pickle._Unpickler.load_binint2": [],
    "pickle._Unpickler.load_long": [
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_long1": [
        "pickle.decode_long"
    ],
    "pickle._Unpickler.load_long4": [
        "pickle.decode_long"
    ],
    "pickle._Unpickler.load_float": [
        "<builtin>.float"
    ],
    "pickle._Unpickler.load_binfloat": [],
    "pickle._Unpickler._decode_string": [],
    "pickle._Unpickler.load_string": [
        "pickle._Unpickler._decode_string",
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_binstring": [
        "pickle._Unpickler._decode_string"
    ],
    "pickle._Unpickler.load_binbytes": [],
    "pickle._Unpickler.load_unicode": [
        "<builtin>.str"
    ],
    "pickle._Unpickler.load_binunicode": [
        "<builtin>.str"
    ],
    "pickle._Unpickler.load_binunicode8": [
        "<builtin>.str"
    ],
    "pickle._Unpickler.load_binbytes8": [],
    "pickle._Unpickler.load_bytearray8": [
        "<builtin>.bytearray"
    ],
    "pickle._Unpickler.load_next_buffer": [
        "<builtin>.next"
    ],
    "pickle._Unpickler.load_readonly_buffer": [
        "<builtin>.memoryview"
    ],
    "pickle._Unpickler.load_short_binstring": [
        "pickle._Unpickler._decode_string"
    ],
    "pickle._Unpickler.load_short_binbytes": [],
    "pickle._Unpickler.load_short_binunicode": [
        "<builtin>.str"
    ],
    "pickle._Unpickler.load_tuple": [
        "<builtin>.tuple",
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_empty_tuple": [],
    "pickle._Unpickler.load_tuple1": [],
    "pickle._Unpickler.load_tuple2": [],
    "pickle._Unpickler.load_tuple3": [],
    "pickle._Unpickler.load_empty_list": [],
    "pickle._Unpickler.load_empty_dictionary": [],
    "pickle._Unpickler.load_empty_set": [
        "<builtin>.set"
    ],
    "pickle._Unpickler.load_frozenset": [
        "<builtin>.frozenset",
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_list": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_dict": [
        "pickle._Unpickler.pop_mark",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pickle._Unpickler._instantiate": [
        "sys.exc_info",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "pickle._Unpickler.load_inst": [
        "pickle._Unpickler._instantiate",
        "pickle._Unpickler.pop_mark",
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.find_class": [
        "<builtin>.getattr",
        "<builtin>.__import__",
        "sys.audit",
        "pickle._getattribute"
    ],
    "pickle._Unpickler.load_obj": [
        "pickle._Unpickler._instantiate",
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_newobj": [],
    "pickle._Unpickler.load_newobj_ex": [],
    "pickle._Unpickler.load_global": [
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.load_stack_global": [
        "<builtin>.type",
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.load_ext1": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.get_extension": [
        "<builtin>.ValueError",
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.load_ext2": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_ext4": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_reduce": [],
    "pickle._Unpickler.load_pop": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_pop_mark": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_dup": [],
    "pickle._Unpickler.load_get": [
        "<builtin>.int"
    ],
    "pickle._Unpickler.load_binget": [],
    "pickle._Unpickler.load_long_binget": [],
    "pickle._Unpickler.load_put": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_binput": [
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_long_binput": [
        "<builtin>.ValueError"
    ],
    "pickle._Unpickler.load_memoize": [
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_append": [],
    "pickle._Unpickler.load_appends": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_setitem": [],
    "pickle._Unpickler.load_setitems": [
        "pickle._Unpickler.pop_mark",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pickle._Unpickler.load_additems": [
        "<builtin>.isinstance",
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_build": [
        "sys.intern",
        "<builtin>.setattr",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.getattr"
    ],
    "pickle._Unpickler.load_mark": [],
    "pickle._Unpickler.load_stop": [
        "pickle._Stop.__init__"
    ],
    "pickle._dump": [
        "pickle._Pickler.__init__",
        "pickle._Pickler.dump"
    ],
    "pickle._dumps": [
        "io.BytesIO",
        "pickle._Pickler.__init__",
        "<builtin>.isinstance",
        "pickle._Pickler.dump"
    ],
    "pickle._load": [
        "pickle._Unpickler.load",
        "pickle._Unpickler.__init__"
    ],
    "pickle._loads": [
        "io.BytesIO",
        "pickle._Unpickler.load",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "pickle._Unpickler.__init__"
    ],
    "pprint.pprint": [
        "pprint.PrettyPrinter.__init__",
        "pprint.PrettyPrinter.pprint"
    ],
    "pprint.PrettyPrinter.__init__": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.bool"
    ],
    "pprint.PrettyPrinter.pprint": [
        "pprint.PrettyPrinter._format",
        "sys.stdout.write"
    ],
    "pprint.pformat": [
        "pprint.PrettyPrinter.pformat",
        "pprint.PrettyPrinter.__init__"
    ],
    "pprint.PrettyPrinter.pformat": [
        "pprint.PrettyPrinter._format",
        "_io.StringIO"
    ],
    "pprint.pp": [
        "pprint.pprint"
    ],
    "pprint.saferepr": [
        "pprint._safe_repr"
    ],
    "pprint._safe_repr": [
        "pprint._recursion",
        "<builtin>.sorted",
        "<builtin>.repr",
        "pprint._safe_repr",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.id",
        "<builtin>.getattr",
        "<builtin>.issubclass"
    ],
    "pprint.isreadable": [
        "pprint._safe_repr"
    ],
    "pprint.isrecursive": [
        "pprint._safe_repr"
    ],
    "pprint._safe_key": [],
    "pprint._safe_key.__init__": [],
    "pprint._safe_key.__lt__": [
        "<builtin>.type",
        "<builtin>.id",
        "<builtin>.str"
    ],
    "pprint._safe_tuple": [
        "pprint._safe_key.__init__"
    ],
    "pprint.PrettyPrinter": [],
    "pprint.PrettyPrinter._format": [
        "pprint.PrettyPrinter._repr",
        "pprint._recursion",
        "pprint.PrettyPrinter._pprint_dict",
        "sys.stdout.write",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.id",
        "<builtin>.isinstance"
    ],
    "pprint.PrettyPrinter.isrecursive": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter.format": [
        "pprint._safe_repr"
    ],
    "pprint.PrettyPrinter.isreadable": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint._recursion": [
        "<builtin>.type",
        "<builtin>.id"
    ],
    "pprint.PrettyPrinter._repr": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter._pprint_dict": [
        "pprint.PrettyPrinter._format_dict_items",
        "<builtin>.sorted",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._format_dict_items": [
        "pprint.PrettyPrinter._format",
        "<builtin>.enumerate",
        "pprint.PrettyPrinter._repr",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_ordered_dict": [
        "pprint.PrettyPrinter._format",
        "<builtin>.list",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_list": [
        "pprint.PrettyPrinter._format_items"
    ],
    "pprint.PrettyPrinter._format_items": [
        "pprint.PrettyPrinter._format",
        "<builtin>.next",
        "pprint.PrettyPrinter._repr",
        "<builtin>.iter",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_tuple": [
        "pprint.PrettyPrinter._format_items",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_set": [
        "<builtin>.sorted",
        "<builtin>.repr",
        "pprint.PrettyPrinter._format_items",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_str": [
        "re.findall",
        "<builtin>.enumerate",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_bytes": [
        "<builtin>.repr",
        "pprint._wrap_bytes_repr",
        "<builtin>.len"
    ],
    "pprint._wrap_bytes_repr": [
        "<builtin>.repr",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "pprint.PrettyPrinter._pprint_bytearray": [
        "<builtin>.bytes",
        "pprint.PrettyPrinter._pprint_bytes"
    ],
    "pprint.PrettyPrinter._pprint_mappingproxy": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_default_dict": [
        "<builtin>.repr",
        "pprint.PrettyPrinter._pprint_dict",
        "pprint.PrettyPrinter._repr",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_counter": [
        "pprint.PrettyPrinter._format_dict_items",
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_chain_map": [
        "<builtin>.enumerate",
        "<builtin>.repr",
        "pprint.PrettyPrinter._format",
        "<builtin>.len"
    ],
    "pprint.PrettyPrinter._pprint_deque": [
        "<builtin>.repr",
        "pprint.PrettyPrinter._format_items",
        "<builtin>.len",
        "pprint.PrettyPrinter._repr"
    ],
    "pprint.PrettyPrinter._pprint_user_dict": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_user_list": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint.PrettyPrinter._pprint_user_string": [
        "pprint.PrettyPrinter._format"
    ],
    "pprint._perfcheck": [
        "time.perf_counter",
        "<builtin>.print",
        "pprint._safe_repr",
        "pprint.PrettyPrinter.pformat",
        "pprint.PrettyPrinter.__init__"
    ],
    "email._parseaddr.parsedate_tz": [
        "<builtin>.tuple",
        "email._parseaddr._parsedate_tz"
    ],
    "email._parseaddr.parsedate": [
        "<builtin>.isinstance",
        "email._parseaddr.parsedate_tz"
    ],
    "email._parseaddr.mktime_tz": [
        "time.mktime"
    ],
    "email._parseaddr.AddrlistClass": [],
    "email._parseaddr.AddrlistClass.__init__": [],
    "email._parseaddr.AddrlistClass.gotonext": [
        "email._parseaddr.AddrlistClass.getcomment",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getcomment": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getaddrlist": [
        "email._parseaddr.AddrlistClass.getaddress",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getaddress": [
        "email._parseaddr.AddrlistClass.getphraselist",
        "email._parseaddr.AddrlistClass.getaddrspec",
        "email._parseaddr.AddrlistClass.getrouteaddr",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.gotonext",
        "email._parseaddr.AddrlistClass.getaddress"
    ],
    "email._parseaddr.AddrlistClass.getphraselist": [
        "email._parseaddr.AddrlistClass.getcomment",
        "email._parseaddr.AddrlistClass.getatom",
        "email._parseaddr.AddrlistClass.getquote",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getaddrspec": [
        "email._parseaddr.AddrlistClass.getdomain",
        "email._parseaddr.AddrlistClass.getquote",
        "email._parseaddr.AddrlistClass.getatom",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.gotonext",
        "email._parseaddr.quote"
    ],
    "email._parseaddr.AddrlistClass.getrouteaddr": [
        "email._parseaddr.AddrlistClass.gotonext",
        "email._parseaddr.AddrlistClass.getdomain",
        "email._parseaddr.AddrlistClass.getaddrspec",
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getdomain": [
        "email._parseaddr.AddrlistClass.getcomment",
        "email._parseaddr.AddrlistClass.getatom",
        "<builtin>.len",
        "email._parseaddr.AddrlistClass.getdomainliteral"
    ],
    "email._parseaddr.AddrlistClass.getquote": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getatom": [
        "<builtin>.len"
    ],
    "email._parseaddr.AddrlistClass.getdomainliteral": [
        "email._parseaddr.AddrlistClass.getdelimited"
    ],
    "email._parseaddr.AddrlistClass.getdelimited": [
        "email._parseaddr.AddrlistClass.getcomment",
        "<builtin>.len"
    ],
    "email._parseaddr.AddressList": [],
    "email._parseaddr.AddressList.__len__": [
        "<builtin>.len"
    ],
    "email._parseaddr.AddressList.__add__": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email._parseaddr.AddressList.__iadd__": [],
    "email._parseaddr.AddressList.__sub__": [
        "email._parseaddr.AddressList.__init__"
    ],
    "email._parseaddr.AddressList.__isub__": [],
    "email._parseaddr.AddressList.__getitem__": [],
    "calendar.IllegalMonthError": [],
    "calendar.IllegalMonthError.__init__": [],
    "calendar.IllegalMonthError.__str__": [],
    "calendar.IllegalWeekdayError": [],
    "calendar.IllegalWeekdayError.__init__": [],
    "calendar.IllegalWeekdayError.__str__": [],
    "calendar._localized_month": [
        "datetime.datetime.date",
        "<builtin>.range"
    ],
    "datetime.datetime.date": [
        "datetime.datetime.date"
    ],
    "calendar._localized_month.<lambda1>": [],
    "calendar._localized_month.__init__": [],
    "calendar._localized_month.__getitem__": [
        "<builtin>.isinstance"
    ],
    "calendar._localized_month.__len__": [],
    "calendar._localized_day": [
        "datetime.datetime.date",
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_day.__getitem__": [
        "<builtin>.isinstance"
    ],
    "calendar._localized_day.__len__": [],
    "calendar.isleap": [],
    "calendar.leapdays": [],
    "calendar.weekday": [
        "datetime.datetime.date"
    ],
    "calendar.monthrange": [
        "calendar.weekday",
        "calendar.IllegalMonthError.__init__",
        "calendar.isleap"
    ],
    "calendar._monthlen": [
        "calendar.isleap"
    ],
    "calendar._prevmonth": [],
    "calendar._nextmonth": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.Calendar.__init__": [],
    "calendar.Calendar.getfirstweekday": [],
    "calendar.Calendar.setfirstweekday": [],
    "calendar.Calendar.iterweekdays": [
        "<builtin>.range"
    ],
    "calendar.Calendar.itermonthdates": [
        "calendar.Calendar.itermonthdays3",
        "datetime.datetime.date"
    ],
    "calendar.Calendar.itermonthdays3": [
        "calendar._prevmonth",
        "calendar.monthrange",
        "calendar._nextmonth",
        "calendar._monthlen",
        "<builtin>.range"
    ],
    "calendar.Calendar.itermonthdays": [
        "calendar.monthrange",
        "itertools.repeat",
        "<builtin>.range"
    ],
    "calendar.Calendar.itermonthdays2": [
        "<builtin>.enumerate",
        "calendar.Calendar.itermonthdays"
    ],
    "calendar.Calendar.itermonthdays4": [
        "<builtin>.enumerate",
        "calendar.Calendar.itermonthdays3"
    ],
    "calendar.Calendar.monthdatescalendar": [
        "calendar.Calendar.itermonthdates",
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.range"
    ],
    "calendar.Calendar.monthdays2calendar": [
        "calendar.Calendar.itermonthdays2",
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.range"
    ],
    "calendar.Calendar.monthdayscalendar": [
        "<builtin>.list",
        "<builtin>.len",
        "calendar.Calendar.itermonthdays",
        "<builtin>.range"
    ],
    "calendar.Calendar.yeardatescalendar": [
        "calendar.Calendar.monthdatescalendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.Calendar.yeardays2calendar": [
        "calendar.Calendar.monthdays2calendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.Calendar.yeardayscalendar": [
        "calendar.Calendar.monthdayscalendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.TextCalendar": [],
    "calendar.TextCalendar.prweek": [
        "calendar.TextCalendar.formatweek",
        "<builtin>.print"
    ],
    "calendar.TextCalendar.formatweek": [
        "calendar.TextCalendar.formatday"
    ],
    "calendar.TextCalendar.formatday": [],
    "calendar.TextCalendar.formatweekday": [],
    "calendar.TextCalendar.formatweekheader": [
        "calendar.LocaleTextCalendar.formatweekday",
        "calendar.Calendar.iterweekdays",
        "calendar.TextCalendar.formatweekday"
    ],
    "calendar.LocaleTextCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.TextCalendar.formatmonthname": [],
    "calendar.TextCalendar.prmonth": [
        "calendar.TextCalendar.formatmonth",
        "<builtin>.print"
    ],
    "calendar.TextCalendar.formatmonth": [
        "calendar.Calendar.monthdays2calendar",
        "<builtin>.max",
        "calendar.TextCalendar.formatweek",
        "calendar.TextCalendar.formatmonthname",
        "calendar.LocaleTextCalendar.formatmonthname",
        "calendar.TextCalendar.formatweekheader"
    ],
    "calendar.LocaleTextCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.TextCalendar.formatyear": [
        "calendar.formatstring",
        "<builtin>.max",
        "calendar.TextCalendar.formatweek",
        "<builtin>.repr",
        "calendar.TextCalendar.formatmonthname",
        "calendar.LocaleTextCalendar.formatmonthname",
        "<builtin>.min",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range",
        "calendar.Calendar.yeardays2calendar",
        "calendar.TextCalendar.formatweekheader"
    ],
    "calendar.formatstring": [],
    "calendar.TextCalendar.pryear": [
        "<builtin>.print",
        "calendar.TextCalendar.formatyear"
    ],
    "calendar.HTMLCalendar": [],
    "calendar.HTMLCalendar.formatday": [],
    "calendar.HTMLCalendar.formatweek": [
        "calendar.HTMLCalendar.formatday"
    ],
    "calendar.HTMLCalendar.formatweekday": [],
    "calendar.HTMLCalendar.formatweekheader": [
        "calendar.HTMLCalendar.formatweekday",
        "calendar.LocaleHTMLCalendar.formatweekday",
        "calendar.Calendar.iterweekdays"
    ],
    "calendar.LocaleHTMLCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.HTMLCalendar.formatmonthname": [],
    "calendar.HTMLCalendar.formatmonth": [
        "calendar.Calendar.monthdays2calendar",
        "calendar.LocaleHTMLCalendar.formatmonthname",
        "calendar.HTMLCalendar.formatweek",
        "calendar.HTMLCalendar.formatmonthname",
        "calendar.HTMLCalendar.formatweekheader"
    ],
    "calendar.LocaleHTMLCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.HTMLCalendar.formatyear": [
        "<builtin>.max",
        "calendar.HTMLCalendar.formatmonth",
        "<builtin>.min",
        "<builtin>.range"
    ],
    "calendar.HTMLCalendar.formatyearpage": [
        "calendar.HTMLCalendar.formatyear",
        "sys.getdefaultencoding"
    ],
    "sys.getdefaultencoding": [],
    "calendar.different_locale": [],
    "calendar.different_locale.__init__": [],
    "calendar.different_locale.__enter__": [
        "locale.getlocale",
        "locale.setlocale"
    ],
    "calendar.different_locale.__exit__": [
        "locale.setlocale"
    ],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleTextCalendar.__init__": [
        "locale.getdefaultlocale",
        "calendar.Calendar.__init__"
    ],
    "calendar.LocaleHTMLCalendar": [],
    "calendar.LocaleHTMLCalendar.__init__": [
        "locale.getdefaultlocale",
        "calendar.Calendar.__init__"
    ],
    "calendar.setfirstweekday": [
        "calendar.IllegalWeekdayError.__init__"
    ],
    "calendar.format": [
        "<builtin>.print",
        "calendar.formatstring"
    ],
    "calendar.timegm": [
        "datetime.datetime.date"
    ],
    "datetime._cmp": [],
    "datetime._is_leap": [],
    "datetime._days_before_year": [],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "datetime._ymd2ord": [
        "datetime._days_before_month",
        "datetime._days_in_month",
        "datetime._days_before_year"
    ],
    "datetime._ord2ymd": [
        "datetime._days_in_month",
        "datetime._is_leap",
        "<builtin>.divmod"
    ],
    "datetime._build_struct_time": [
        "time.struct_time",
        "datetime._days_before_month",
        "datetime._ymd2ord"
    ],
    "time.struct_time": [],
    "datetime._format_time": [
        "<builtin>.ValueError"
    ],
    "datetime._format_offset": [
        "<builtin>.divmod"
    ],
    "datetime._wrap_strftime": [
        "datetime.datetime.utcoffset",
        "datetime.datetime.tzname",
        "datetime.time.tzname",
        "time.strftime",
        "<builtin>.divmod",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.getattr",
        "datetime.time.utcoffset"
    ],
    "datetime.datetime.utcoffset": [
        "datetime._check_utc_offset"
    ],
    "datetime.time.utcoffset": [
        "datetime._check_utc_offset"
    ],
    "datetime.datetime.tzname": [
        "datetime._check_tzname"
    ],
    "datetime.time.tzname": [
        "datetime._check_tzname"
    ],
    "datetime._parse_isoformat_date": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "datetime._parse_hh_mm_ss_ff": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "datetime._parse_isoformat_time": [
        "datetime._parse_hh_mm_ss_ff",
        "<builtin>.ValueError",
        "<builtin>.all",
        "<builtin>.len"
    ],
    "datetime._check_tzname": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "datetime._check_utc_offset": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "datetime._check_date_fields": [
        "<builtin>.ValueError",
        "datetime._days_in_month",
        "datetime._check_int_field"
    ],
    "datetime._check_time_fields": [
        "<builtin>.ValueError",
        "datetime._check_int_field"
    ],
    "datetime._check_tzinfo_arg": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime._cmperror": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "datetime._divide_and_round": [
        "<builtin>.divmod"
    ],
    "datetime.timedelta": [],
    "datetime.timedelta.__new__": [
        "<builtin>.OverflowError",
        "<builtin>.divmod",
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.abs",
        "<builtin>.round"
    ],
    "datetime.timedelta.__repr__": [],
    "datetime.timedelta.__str__": [
        "datetime.timedelta.__str__.plural",
        "<builtin>.divmod"
    ],
    "datetime.timedelta.__str__.plural": [
        "<builtin>.abs"
    ],
    "datetime.timedelta.total_seconds": [],
    "datetime.timedelta.days": [],
    "datetime.timedelta.seconds": [],
    "datetime.timedelta.microseconds": [],
    "datetime.timedelta.__add__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__sub__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__rsub__": [
        "<builtin>.isinstance"
    ],
    "datetime.timedelta.__neg__": [],
    "datetime.timedelta.__pos__": [],
    "datetime.timedelta.__abs__": [],
    "datetime.timedelta.__mul__": [
        "datetime._divide_and_round",
        "<builtin>.isinstance",
        "datetime.timedelta._to_microseconds"
    ],
    "datetime.timedelta._to_microseconds": [],
    "datetime.timedelta.__floordiv__": [
        "<builtin>.isinstance",
        "datetime.timedelta._to_microseconds"
    ],
    "datetime.timedelta.__truediv__": [
        "datetime._divide_and_round",
        "<builtin>.isinstance",
        "datetime.timedelta._to_microseconds"
    ],
    "datetime.timedelta.__mod__": [
        "<builtin>.isinstance",
        "datetime.timedelta._to_microseconds"
    ],
    "datetime.timedelta.__divmod__": [
        "<builtin>.isinstance",
        "datetime.timedelta._to_microseconds",
        "<builtin>.divmod"
    ],
    "datetime.timedelta.__eq__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta._cmp": [
        "datetime.timedelta._getstate",
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta.__le__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta.__lt__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta.__ge__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta.__gt__": [
        "<builtin>.isinstance",
        "datetime.timedelta._cmp"
    ],
    "datetime.timedelta._getstate": [],
    "datetime.timedelta.__hash__": [
        "datetime.timedelta._getstate",
        "<builtin>.hash"
    ],
    "datetime.timedelta.__bool__": [],
    "datetime.timedelta.__reduce__": [
        "datetime.timedelta._getstate"
    ],
    "datetime.date": [],
    "datetime.date.__new__": [
        "datetime._check_date_fields",
        "<builtin>.ValueError",
        "<builtin>.ord",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "datetime.date.fromtimestamp": [
        "time.localtime"
    ],
    "datetime.date.today": [
        "datetime.date.fromtimestamp",
        "datetime.datetime.fromtimestamp",
        "time.time"
    ],
    "datetime.datetime.fromtimestamp": [
        "datetime.datetime._fromtimestamp",
        "datetime._check_tzinfo_arg"
    ],
    "datetime.date.fromordinal": [
        "datetime._ord2ymd"
    ],
    "datetime.date.fromisoformat": [
        "<builtin>.ValueError",
        "datetime._parse_isoformat_date",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "datetime.date.fromisocalendar": [
        "datetime._isoweek1monday",
        "<builtin>.ValueError",
        "datetime._is_leap",
        "datetime._ymd2ord",
        "datetime._ord2ymd"
    ],
    "datetime._isoweek1monday": [
        "datetime._ymd2ord"
    ],
    "datetime.date.__repr__": [],
    "datetime.date.ctime": [
        "datetime.date.toordinal"
    ],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime.date.strftime": [
        "datetime.datetime.timetuple",
        "datetime.date.timetuple",
        "datetime._wrap_strftime"
    ],
    "datetime.datetime.timetuple": [
        "datetime._build_struct_time",
        "datetime.datetime.dst"
    ],
    "datetime.date.timetuple": [
        "datetime._build_struct_time"
    ],
    "datetime.date.__format__": [
        "datetime.date.strftime",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "datetime.date.isoformat": [],
    "datetime.date.year": [],
    "datetime.date.month": [],
    "datetime.date.day": [],
    "datetime.date.replace": [
        "datetime.date.year",
        "<builtin>.type"
    ],
    "datetime.date.__eq__": [
        "<builtin>.isinstance",
        "datetime.date._cmp",
        "datetime.datetime._cmp"
    ],
    "datetime.date._cmp": [
        "<builtin>.isinstance",
        "datetime.date._cmp",
        "datetime.datetime._cmp"
    ],
    "datetime.datetime._cmp": [
        "datetime.datetime.utcoffset",
        "datetime.datetime._cmp",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "datetime.datetime.replace"
    ],
    "datetime.date.__le__": [
        "<builtin>.isinstance",
        "datetime.date._cmp",
        "datetime.datetime._cmp"
    ],
    "datetime.date.__lt__": [
        "<builtin>.isinstance",
        "datetime.date._cmp",
        "datetime.datetime._cmp"
    ],
    "datetime.date.__ge__": [
        "<builtin>.isinstance",
        "datetime.date._cmp",
        "datetime.datetime._cmp"
    ],
    "datetime.date.__gt__": [
        "<builtin>.isinstance",
        "datetime.date._cmp",
        "datetime.datetime._cmp"
    ],
    "datetime.date.__hash__": [
        "<builtin>.hash",
        "datetime.datetime._getstate",
        "datetime.date._getstate"
    ],
    "datetime.datetime._getstate": [
        "<builtin>.bytes",
        "<builtin>.divmod"
    ],
    "datetime.date._getstate": [
        "<builtin>.bytes",
        "<builtin>.divmod"
    ],
    "datetime.date.__add__": [
        "<builtin>.isinstance",
        "datetime.date.toordinal",
        "<builtin>.OverflowError",
        "<builtin>.type"
    ],
    "datetime.date.__sub__": [
        "<builtin>.isinstance",
        "datetime.date.toordinal"
    ],
    "datetime.date.weekday": [
        "datetime.date.toordinal"
    ],
    "datetime.date.isoweekday": [
        "datetime.date.toordinal"
    ],
    "datetime.date.isocalendar": [
        "datetime._isoweek1monday",
        "datetime._ymd2ord",
        "<builtin>.divmod"
    ],
    "datetime.date.__setstate": [],
    "datetime.date.__reduce__": [
        "datetime.datetime._getstate",
        "datetime.date._getstate"
    ],
    "datetime.tzinfo": [],
    "datetime.tzinfo.tzname": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.utcoffset": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.dst": [
        "<builtin>.NotImplementedError"
    ],
    "datetime.tzinfo.fromutc": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "datetime.tzinfo.__reduce__": [
        "<builtin>.getattr"
    ],
    "datetime.time": [],
    "datetime.time.__new__": [
        "<builtin>.ValueError",
        "<builtin>.ord",
        "<builtin>.len",
        "<builtin>.isinstance",
        "datetime._check_time_fields",
        "datetime._check_tzinfo_arg"
    ],
    "datetime.time.hour": [],
    "datetime.time.minute": [],
    "datetime.time.second": [],
    "datetime.time.microsecond": [],
    "datetime.time.tzinfo": [],
    "datetime.time.fold": [],
    "datetime.time.__eq__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time._cmp": [
        "<builtin>.isinstance",
        "datetime.time.utcoffset",
        "datetime.time._cmp",
        "<builtin>.TypeError"
    ],
    "datetime.time.__le__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__lt__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__ge__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__gt__": [
        "<builtin>.isinstance",
        "datetime.time._cmp"
    ],
    "datetime.time.__hash__": [
        "<builtin>.hash",
        "datetime.time.replace",
        "datetime.time._getstate",
        "<builtin>.divmod",
        "datetime.time.utcoffset"
    ],
    "datetime.time.replace": [
        "<builtin>.type"
    ],
    "datetime.time._getstate": [
        "<builtin>.bytes",
        "<builtin>.divmod"
    ],
    "datetime.time._tzstr": [
        "datetime._format_offset",
        "datetime.time.utcoffset"
    ],
    "datetime.time.__repr__": [],
    "datetime.time.isoformat": [
        "datetime.time._tzstr",
        "datetime._format_time"
    ],
    "datetime.time.fromisoformat": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "datetime._parse_isoformat_time"
    ],
    "datetime.time.strftime": [
        "datetime._wrap_strftime"
    ],
    "datetime.time.__format__": [
        "datetime.time.strftime",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "datetime.time.dst": [
        "datetime._check_utc_offset"
    ],
    "datetime.time.__setstate": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.time.__reduce_ex__": [
        "datetime.time._getstate"
    ],
    "datetime.time.__reduce__": [
        "datetime.time.__reduce_ex__"
    ],
    "datetime.datetime": [],
    "datetime.datetime.__new__": [
        "datetime._check_date_fields",
        "<builtin>.ValueError",
        "<builtin>.bytes",
        "<builtin>.ord",
        "<builtin>.len",
        "<builtin>.isinstance",
        "datetime._check_time_fields",
        "datetime._check_tzinfo_arg"
    ],
    "datetime.datetime.hour": [],
    "datetime.datetime.minute": [],
    "datetime.datetime.second": [],
    "datetime.datetime.microsecond": [],
    "datetime.datetime.tzinfo": [],
    "datetime.datetime.fold": [],
    "datetime.datetime._fromtimestamp": [
        "sys.platform.startswith",
        "<builtin>.round"
    ],
    "datetime.datetime.utcfromtimestamp": [
        "datetime.datetime._fromtimestamp"
    ],
    "datetime.datetime.now": [
        "datetime.datetime.fromtimestamp",
        "time.time"
    ],
    "datetime.datetime.utcnow": [
        "datetime.datetime.utcfromtimestamp",
        "time.time"
    ],
    "datetime.datetime.combine": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.fromisoformat": [
        "<builtin>.ValueError",
        "datetime._parse_isoformat_time",
        "datetime._parse_isoformat_date",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.dst": [
        "datetime._check_utc_offset"
    ],
    "datetime.datetime._mktime": [
        "datetime.datetime._mktime.local"
    ],
    "datetime.datetime._mktime.local": [
        "time.localtime"
    ],
    "datetime.datetime.timestamp": [
        "datetime.datetime._mktime"
    ],
    "datetime.datetime.utctimetuple": [
        "datetime.datetime.utcoffset",
        "datetime._build_struct_time"
    ],
    "datetime.datetime.time": [
        "datetime.datetime.time"
    ],
    "datetime.datetime.timetz": [
        "datetime.datetime.time"
    ],
    "datetime.datetime.replace": [
        "<builtin>.type"
    ],
    "datetime.datetime._local_timezone": [
        "datetime.datetime._mktime",
        "time.localtime"
    ],
    "datetime.datetime.astimezone": [
        "<builtin>.TypeError",
        "datetime.timezone.fromutc",
        "datetime.timezone.utcoffset",
        "<builtin>.isinstance",
        "datetime.datetime._local_timezone",
        "datetime.datetime.replace"
    ],
    "datetime.timezone.utcoffset": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.timezone.fromutc": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.ctime": [
        "datetime.date.toordinal"
    ],
    "datetime.datetime.isoformat": [
        "datetime.datetime.utcoffset",
        "datetime._format_time",
        "datetime._format_offset"
    ],
    "datetime.datetime.__repr__": [
        "<builtin>.map"
    ],
    "datetime.datetime.__str__": [
        "datetime.datetime.isoformat"
    ],
    "datetime.datetime.__eq__": [
        "<builtin>.isinstance",
        "datetime.datetime._cmp"
    ],
    "datetime.datetime.__le__": [
        "datetime._cmperror",
        "<builtin>.isinstance",
        "datetime.datetime._cmp"
    ],
    "datetime.datetime.__lt__": [
        "datetime._cmperror",
        "<builtin>.isinstance",
        "datetime.datetime._cmp"
    ],
    "datetime.datetime.__ge__": [
        "datetime._cmperror",
        "<builtin>.isinstance",
        "datetime.datetime._cmp"
    ],
    "datetime.datetime.__gt__": [
        "datetime._cmperror",
        "<builtin>.isinstance",
        "datetime.datetime._cmp"
    ],
    "datetime.datetime.__add__": [
        "datetime.date.toordinal",
        "datetime.datetime.time",
        "<builtin>.type",
        "<builtin>.divmod",
        "<builtin>.OverflowError",
        "<builtin>.isinstance"
    ],
    "datetime.datetime.__sub__": [
        "datetime.datetime.utcoffset",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "datetime.date.toordinal"
    ],
    "datetime.datetime.__hash__": [
        "datetime.datetime.utcoffset",
        "<builtin>.hash",
        "datetime._ymd2ord",
        "datetime.datetime._getstate",
        "datetime.datetime.replace"
    ],
    "datetime.datetime.__setstate": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "datetime.datetime.__reduce_ex__": [
        "datetime.datetime._getstate"
    ],
    "datetime.datetime.__reduce__": [
        "datetime.datetime.__reduce_ex__"
    ],
    "datetime.timezone": [
        "<builtin>.object"
    ],
    "datetime.timezone.__new__": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "datetime.timezone._create"
    ],
    "datetime.timezone._create": [
        "datetime.timezone.__new__"
    ],
    "datetime.timezone.__getinitargs__": [],
    "datetime.timezone.__eq__": [
        "<builtin>.isinstance"
    ],
    "datetime.timezone.__hash__": [
        "<builtin>.hash"
    ],
    "datetime.timezone.__repr__": [],
    "datetime.timezone.__str__": [
        "datetime.timezone.tzname"
    ],
    "datetime.timezone.tzname": [
        "<builtin>.isinstance",
        "datetime.timezone._name_from_offset",
        "<builtin>.TypeError"
    ],
    "datetime.timezone._name_from_offset": [
        "<builtin>.divmod"
    ],
    "datetime.timezone.dst": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "_strptime._getlang": [
        "locale.getlocale"
    ],
    "_strptime.LocaleTime": [],
    "_strptime.LocaleTime.__init__": [
        "<builtin>.ValueError",
        "_strptime.LocaleTime.__calc_weekday",
        "_strptime._getlang",
        "_strptime.LocaleTime.__calc_timezone",
        "_strptime.LocaleTime.__calc_date_time",
        "_strptime.LocaleTime.__calc_month",
        "_strptime.LocaleTime.__calc_am_pm"
    ],
    "_strptime.LocaleTime.__calc_weekday": [
        "<builtin>.range"
    ],
    "_strptime.LocaleTime.__calc_month": [
        "<builtin>.range"
    ],
    "_strptime.LocaleTime.__calc_am_pm": [
        "time.struct_time",
        "time.strftime"
    ],
    "_strptime.LocaleTime.__calc_timezone": [
        "<builtin>.frozenset",
        "time.tzset"
    ],
    "_strptime.LocaleTime.__calc_date_time": [
        "time.struct_time",
        "time.strftime"
    ],
    "_strptime.TimeRE": [],
    "_strptime.TimeRE.__init__": [
        "_strptime.TimeRE.pattern",
        "_strptime.LocaleTime.__init__",
        "<builtin>.super"
    ],
    "_strptime.TimeRE.pattern": [
        "re.compile"
    ],
    "_strptime.TimeRE.__seqToRE": [
        "re.escape",
        "<builtin>.sorted"
    ],
    "_strptime.TimeRE.compile": [
        "_strptime.TimeRE.pattern",
        "re.compile"
    ],
    "_strptime._calc_julian_from_U_or_W": [
        "datetime.date.weekday"
    ],
    "_strptime._calc_julian_from_V": [
        "datetime.date.isoweekday",
        "datetime.date.toordinal"
    ],
    "_strptime._strptime": [
        "<builtin>.ValueError",
        "datetime.date.fromordinal",
        "_strptime.TimeRE.__init__",
        "_strptime._getlang",
        "_strptime._calc_julian_from_V",
        "<builtin>.enumerate",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.len",
        "_strptime.TimeRE.compile",
        "datetime.date.toordinal",
        "<builtin>.isinstance",
        "<builtin>.int",
        "datetime.date.weekday",
        "_strptime._calc_julian_from_U_or_W"
    ],
    "_strptime._strptime_time": [
        "time.struct_time",
        "_strptime._strptime"
    ],
    "_strptime._strptime_datetime": [
        "_strptime._strptime"
    ],
    "socket.<lambda1>": [],
    "socket.<lambda2>": [],
    "socket.<lambda3>": [],
    "socket.<lambda4>": [],
    "socket._intenum_converter": [],
    "sys.platform.lower": [],
    "socket._GiveupOnSendfile": [],
    "socket.socket": [
        "<builtin>.hasattr"
    ],
    "socket.socket.__init__": [],
    "socket.socket.__enter__": [],
    "socket.socket.__exit__": [
        "socket.socket.close"
    ],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket.__repr__": [
        "<builtin>.getattr",
        "<builtin>.str"
    ],
    "socket.socket.__getstate__": [
        "<builtin>.TypeError"
    ],
    "socket.socket.dup": [
        "socket.socket.dup"
    ],
    "socket.socket.accept": [
        "socket.socket.__init__"
    ],
    "socket.socket.makefile": [
        "io.TextIOWrapper",
        "<builtin>.ValueError",
        "io.BufferedReader",
        "io.BufferedWriter",
        "socket.SocketIO.__init__",
        "io.BufferedRWPair",
        "<builtin>.set"
    ],
    "socket.SocketIO.__init__": [
        "<builtin>.ValueError",
        "_io._RawIOBase.__init__"
    ],
    "io.BufferedRWPair": [],
    "io.BufferedReader": [],
    "io.BufferedWriter": [],
    "socket.socket._sendfile_use_sendfile": [
        "<builtin>.ValueError",
        "selectors.SelectSelector.register",
        "socket.socket._check_sendfile_params",
        "selectors.SelectSelector.__init__",
        "selectors._PollLikeSelector.register",
        "<builtin>.min",
        "<builtin>.hasattr",
        "selectors._PollLikeSelector.__init__"
    ],
    "socket.socket._check_sendfile_params": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "selectors._PollLikeSelector.register": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.register": [
        "<builtin>.super"
    ],
    "socket.socket._sendfile_use_send": [
        "<builtin>.ValueError",
        "<builtin>.memoryview",
        "socket.socket._check_sendfile_params",
        "<builtin>.min",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "socket.socket.sendfile": [
        "socket.socket._sendfile_use_sendfile",
        "socket.socket._sendfile_use_send"
    ],
    "socket.socket._decref_socketios": [
        "socket.socket.close"
    ],
    "socket.socket._real_close": [],
    "socket.socket.detach": [
        "<builtin>.super"
    ],
    "socket.socket.family": [
        "socket._intenum_converter",
        "<builtin>.super"
    ],
    "socket.socket.type": [
        "socket._intenum_converter",
        "<builtin>.super"
    ],
    "socket.socket.get_inheritable": [],
    "socket.socket.set_inheritable": [],
    "socket.fromfd": [
        "socket.socket.__init__"
    ],
    "socket.fromshare": [
        "socket.socket.__init__"
    ],
    "socket.socketpair": [
        "socket.socket.__init__",
        "<builtin>.ValueError",
        "socket.socket.detach",
        "socket.socket.accept",
        "socket.socket.close"
    ],
    "socket.SocketIO": [],
    "_io._RawIOBase.__init__": [],
    "socket.SocketIO.readinto": [
        "<builtin>.OSError",
        "_io._RawIOBase._checkReadable",
        "_io._RawIOBase._checkClosed"
    ],
    "_io._RawIOBase._checkClosed": [],
    "_io._RawIOBase._checkReadable": [],
    "socket.SocketIO.write": [
        "_io._RawIOBase._checkClosed",
        "_io._RawIOBase._checkWritable"
    ],
    "_io._RawIOBase._checkWritable": [],
    "socket.SocketIO.readable": [
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.writable": [
        "<builtin>.ValueError"
    ],
    "socket.SocketIO.seekable": [
        "<builtin>.ValueError",
        "<builtin>.super"
    ],
    "socket.SocketIO.fileno": [
        "_io._RawIOBase._checkClosed"
    ],
    "socket.SocketIO.name": [
        "socket.SocketIO.fileno"
    ],
    "socket.SocketIO.mode": [],
    "socket.SocketIO.close": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "gzip.GzipFile.close",
        "_io._IOBase.close",
        "socket.socket._decref_socketios",
        "_compression.DecompressReader.close",
        "zipfile._ZipWriteFile.close"
    ],
    "_io._IOBase.close": [],
    "_compression.DecompressReader.close": [
        "<builtin>.super"
    ],
    "socket.getfqdn": [],
    "socket.create_connection": [
        "socket.socket.close",
        "socket.socket.__init__",
        "socket.getaddrinfo"
    ],
    "socket.getaddrinfo": [
        "socket._intenum_converter"
    ],
    "socket.has_dualstack_ipv6": [
        "socket.socket.__init__",
        "<builtin>.hasattr"
    ],
    "socket.create_server": [
        "socket.socket.__init__",
        "<builtin>.ValueError",
        "socket.has_dualstack_ipv6",
        "socket.socket.close",
        "<builtin>.hasattr"
    ],
    "selectors._fileobj_to_fd": [
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "selectors._SelectorMapping": [],
    "selectors._SelectorMapping.__init__": [],
    "selectors._SelectorMapping.__len__": [
        "<builtin>.len"
    ],
    "selectors._SelectorMapping.__getitem__": [
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.KeyError"
    ],
    "selectors._BaseSelectorImpl._fileobj_lookup": [
        "selectors._fileobj_to_fd"
    ],
    "selectors._SelectorMapping.__iter__": [
        "<builtin>.iter"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors.BaseSelector.register": [],
    "selectors.BaseSelector.unregister": [],
    "selectors.BaseSelector.modify": [
        "selectors.BaseSelector.register",
        "selectors.BaseSelector.unregister"
    ],
    "selectors.BaseSelector.select": [],
    "selectors.BaseSelector.close": [],
    "selectors.BaseSelector.get_key": [
        "<builtin>.RuntimeError",
        "selectors.BaseSelector.get_map",
        "<builtin>.KeyError"
    ],
    "selectors.BaseSelector.get_map": [],
    "selectors.BaseSelector.__enter__": [],
    "selectors.BaseSelector.__exit__": [
        "selectors.BaseSelector.close"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors._BaseSelectorImpl.__init__": [
        "selectors._SelectorMapping.__init__"
    ],
    "selectors._BaseSelectorImpl.register": [
        "<builtin>.ValueError",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.KeyError"
    ],
    "selectors._BaseSelectorImpl.unregister": [
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.KeyError"
    ],
    "selectors._BaseSelectorImpl.modify": [
        "selectors._BaseSelectorImpl.register",
        "selectors._BaseSelectorImpl.unregister",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.KeyError"
    ],
    "selectors._BaseSelectorImpl.close": [],
    "selectors._BaseSelectorImpl.get_map": [],
    "selectors._BaseSelectorImpl._key_from_fd": [],
    "selectors.SelectSelector": [],
    "selectors.SelectSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector._select": [],
    "selectors.SelectSelector.select": [
        "<builtin>.max",
        "selectors.SelectSelector._select",
        "<builtin>.set",
        "selectors._BaseSelectorImpl._key_from_fd"
    ],
    "selectors._PollLikeSelector": [],
    "selectors._PollLikeSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.modify": [
        "<builtin>.super",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.KeyError"
    ],
    "selectors._PollLikeSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd"
    ],
    "selectors.PollSelector": [],
    "selectors.EpollSelector": [],
    "selectors.EpollSelector.fileno": [],
    "selectors.EpollSelector.select": [
        "<builtin>.max",
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.len"
    ],
    "selectors.EpollSelector.close": [
        "<builtin>.super"
    ],
    "selectors.DevpollSelector": [],
    "selectors.DevpollSelector.fileno": [],
    "selectors.DevpollSelector.close": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector": [],
    "selectors.KqueueSelector.__init__": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.fileno": [],
    "selectors.KqueueSelector.register": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.KqueueSelector.select": [
        "<builtin>.max",
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.len"
    ],
    "selectors.KqueueSelector.close": [
        "<builtin>.super"
    ],
    "email.feedparser.BufferedSubFile": [],
    "email.feedparser.BufferedSubFile.__init__": [
        "_io.StringIO"
    ],
    "email.feedparser.BufferedSubFile.push_eof_matcher": [],
    "email.feedparser.BufferedSubFile.pop_eof_matcher": [],
    "email.feedparser.BufferedSubFile.close": [
        "email.feedparser.BufferedSubFile.pushlines"
    ],
    "email.feedparser.BufferedSubFile.pushlines": [],
    "email.feedparser.BufferedSubFile.readline": [
        "<builtin>.reversed"
    ],
    "email.feedparser.BufferedSubFile.unreadline": [],
    "email.feedparser.BufferedSubFile.push": [
        "email.feedparser.BufferedSubFile.pushlines"
    ],
    "email.feedparser.BufferedSubFile.__iter__": [],
    "email.feedparser.BufferedSubFile.__next__": [
        "email.feedparser.BufferedSubFile.readline"
    ],
    "email.feedparser.FeedParser": [],
    "email.feedparser.FeedParser._parsegen": [
        "email.feedparser.BufferedSubFile.readline",
        "re.compile",
        "email.feedparser.BufferedSubFile.__next__",
        "email.feedparser.BufferedSubFile.__iter__",
        "email.feedparser.FeedParser._parsegen",
        "email.feedparser.FeedParser._parse_headers",
        "email.feedparser.BufferedSubFile.push_eof_matcher",
        "email.feedparser.FeedParser._pop_message",
        "<builtin>.isinstance",
        "<builtin>.str",
        "email._policybase.Policy.handle_defect",
        "email.feedparser.FeedParser._new_message",
        "email.feedparser.BufferedSubFile.unreadline",
        "email.errors.MessageDefect.__init__",
        "re.escape",
        "<builtin>.len",
        "email.feedparser.BufferedSubFile.pop_eof_matcher"
    ],
    "email.feedparser.FeedParser._call_parse": [],
    "email.feedparser.FeedParser._pop_message": [],
    "email.feedparser.FeedParser._new_message": [
        "email.message.MIMEPart.__init__",
        "email.message.Message.__init__"
    ],
    "email.feedparser.FeedParser._parse_headers": [
        "email.errors.HeaderDefect.__init__",
        "<builtin>.enumerate",
        "email._policybase.Compat32.header_source_parse",
        "email._policybase.Policy.handle_defect",
        "<builtin>.len",
        "email.feedparser.BufferedSubFile.unreadline",
        "email.errors.MessageDefect.__init__"
    ],
    "email.feedparser.BytesFeedParser": [],
    "email.feedparser.BytesFeedParser.feed": [
        "<builtin>.super"
    ],
    "email.message._splitparam": [
        "<builtin>.str"
    ],
    "email.message._formatparam": [
        "<builtin>.isinstance",
        "email.utils.encode_rfc2231",
        "email.utils.quote",
        "<builtin>.len"
    ],
    "email.utils.quote": [],
    "email.message._parseparam": [
        "<builtin>.str",
        "<builtin>.len"
    ],
    "email.message._unquotevalue": [
        "<builtin>.isinstance",
        "email.utils.unquote"
    ],
    "email.message.Message.__str__": [
        "email.message.Message.as_string"
    ],
    "email.generator.Generator.__init__": [],
    "email.generator.Generator.flatten": [
        "email.generator.Generator.write",
        "email.message.Message.get_unixfrom",
        "time.time",
        "time.ctime",
        "email.generator.Generator._encode",
        "email.generator.Generator._write"
    ],
    "email.message.Message.__bytes__": [
        "email.message.Message.as_bytes"
    ],
    "email.message.Message.is_multipart": [
        "<builtin>.isinstance"
    ],
    "email.message.Message.set_unixfrom": [],
    "email.message.Message.get_unixfrom": [],
    "email.message.Message.attach": [
        "<builtin>.TypeError"
    ],
    "email.message.Message.get_payload": [
        "email.utils._has_surrogates",
        "email.message.Message.get_param",
        "email._encoded_words.decode_b",
        "_io.BytesIO",
        "email.message.Message.get",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.str",
        "email._policybase.Policy.handle_defect",
        "uu.decode",
        "<builtin>.isinstance",
        "email.message.Message.is_multipart",
        "quopri.decodestring"
    ],
    "email.message.Message.get": [
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.message.Message.get_param": [
        "email.message._unquotevalue",
        "email.message.Message._get_params_preserve"
    ],
    "email._encoded_words.decode_b": [
        "email.errors.MessageDefect.__init__",
        "base64.b64decode",
        "<builtin>.len"
    ],
    "uu.decode": [
        "ntpath.exists",
        "posixpath.exists",
        "<builtin>.int",
        "sys.stdin.buffer.readline",
        "<builtin>.len",
        "sys.stdout.buffer.write",
        "<builtin>.isinstance",
        "<builtin>.open",
        "sys.stderr.write"
    ],
    "email.message.Message.set_payload": [
        "<builtin>.isinstance",
        "email.charset.Charset.__init__",
        "email.message.Message.set_charset",
        "<builtin>.hasattr"
    ],
    "email.message.Message.set_charset": [
        "email.message.Message.set_param",
        "email.message.Message.add_header",
        "email.message.Message.del_param",
        "<builtin>.isinstance",
        "email.charset.Charset.__init__"
    ],
    "email.message.Message.del_param": [
        "email.message.Message.get",
        "email.message._formatparam",
        "email.message.Message.get_params"
    ],
    "email.message.Message.add_header": [
        "email.message._formatparam"
    ],
    "email.message.Message.set_param": [
        "email.message.Message.replace_header",
        "email.message.Message.get_param",
        "email.message.Message.get_params",
        "email.message.Message.get",
        "<builtin>.isinstance",
        "email.message._formatparam"
    ],
    "email.message.Message.get_charset": [],
    "email.message.Message.__len__": [
        "<builtin>.len"
    ],
    "email.message.Message.__getitem__": [
        "email.message.Message.get"
    ],
    "email.message.Message.__setitem__": [
        "email._policybase.Compat32.header_store_parse",
        "email.policy.EmailPolicy.header_max_count",
        "<builtin>.ValueError",
        "email._policybase.Policy.header_max_count"
    ],
    "email.policy.EmailPolicy.header_max_count": [],
    "email.message.Message.__delitem__": [],
    "email.message.Message.__contains__": [],
    "email.message.Message.__iter__": [],
    "email.message.Message.keys": [],
    "email.message.Message.values": [
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.message.Message.items": [
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.message.Message.set_raw": [],
    "email.message.Message.raw_items": [
        "<builtin>.iter"
    ],
    "email.message.Message.get_all": [
        "email._policybase.Compat32.header_fetch_parse"
    ],
    "email.message.Message.replace_header": [
        "email._policybase.Compat32.header_store_parse",
        "<builtin>.zip",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email.message.Message.get_content_type": [
        "email.message.Message.get",
        "email.message._splitparam",
        "email.message.Message.get_default_type",
        "<builtin>.object"
    ],
    "email.message.Message.get_default_type": [],
    "email.message.Message.get_content_maintype": [
        "email.message.Message.get_content_type"
    ],
    "email.message.Message.get_content_subtype": [
        "email.message.Message.get_content_type"
    ],
    "email.message.Message.set_default_type": [],
    "email.message.Message._get_params_preserve": [
        "email.message.Message.get",
        "email.message._parseparam",
        "email.utils.decode_params",
        "<builtin>.object"
    ],
    "email.message.Message.get_params": [
        "email.message._unquotevalue",
        "email.message.Message._get_params_preserve",
        "<builtin>.object"
    ],
    "email.message.Message.set_type": [
        "email.message.Message.get_params",
        "email.message.Message.set_param"
    ],
    "email.message.Message.get_filename": [
        "email.utils.collapse_rfc2231_value",
        "email.message.Message.get_param",
        "<builtin>.object"
    ],
    "email.message.Message.get_boundary": [
        "email.utils.collapse_rfc2231_value",
        "email.message.Message.get_param",
        "<builtin>.object"
    ],
    "email.message.Message.set_boundary": [
        "email._policybase.Compat32.header_store_parse",
        "email.message.Message._get_params_preserve",
        "<builtin>.object"
    ],
    "email.message.Message.get_content_charset": [
        "<builtin>.isinstance",
        "email.message.Message.get_param",
        "<builtin>.str",
        "<builtin>.object"
    ],
    "email.message.Message.get_charsets": [
        "email.iterators.walk"
    ],
    "email.iterators.walk": [],
    "email.message.Message.get_content_disposition": [
        "email.message.Message.get",
        "email.message._splitparam"
    ],
    "email.message.MIMEPart": [],
    "email.message.MIMEPart.as_string": [
        "<builtin>.super"
    ],
    "email.message.MIMEPart.__str__": [
        "email._policybase._PolicyBase.clone",
        "email.message.MIMEPart.as_string"
    ],
    "email.message.MIMEPart.is_attachment": [
        "email.message.Message.get"
    ],
    "email.message.MIMEPart._find_body": [
        "email.message.MIMEPart._find_body"
    ],
    "email.message.MIMEPart.get_body": [
        "email.message.MIMEPart._find_body",
        "<builtin>.len"
    ],
    "email.message.MIMEPart.iter_attachments": [
        "email.message.Message.get_param",
        "email.message.Message.get_content_type",
        "email.message.Message.get_payload"
    ],
    "email.message.MIMEPart.iter_parts": [
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_payload"
    ],
    "email.message.MIMEPart.get_content": [],
    "email.message.MIMEPart.set_content": [],
    "email.message.MIMEPart._make_multipart": [
        "<builtin>.ValueError",
        "email.message.Message.set_param",
        "<builtin>.type",
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_content_subtype"
    ],
    "email.message.MIMEPart.make_related": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart.make_alternative": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart.make_mixed": [
        "email.message.MIMEPart._make_multipart"
    ],
    "email.message.MIMEPart._add_multipart": [
        "email.message.Message.attach",
        "<builtin>.type",
        "<builtin>.getattr",
        "email.message.Message.get_content_maintype",
        "email.message.Message.get_content_subtype"
    ],
    "email.message.MIMEPart.add_related": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.add_alternative": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.add_attachment": [
        "email.message.MIMEPart._add_multipart"
    ],
    "email.message.MIMEPart.clear": [],
    "email.message.MIMEPart.clear_content": [],
    "email.message.EmailMessage": [],
    "email.iterators.body_line_iterator": [
        "<builtin>.isinstance",
        "_io.StringIO"
    ],
    "email.iterators.typed_subpart_iterator": [],
    "email.iterators._structure": [
        "email.iterators._structure",
        "<builtin>.print"
    ],
    "email._encoded_words.<lambda1>": [],
    "email._encoded_words.decode_q": [
        "_functools.partial"
    ],
    "email._encoded_words._QByteMap": [],
    "email._encoded_words._QByteMap.__missing__": [
        "<builtin>.chr"
    ],
    "email._encoded_words.encode_q": [],
    "email._encoded_words.len_q": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "email._encoded_words.encode_b": [
        "base64.b64encode"
    ],
    "email._encoded_words.len_b": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "email._encoded_words.decode": [
        "email.errors.MessageDefect.__init__"
    ],
    "email._encoded_words.encode": [],
    "email.policy.EmailPolicy": [
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.headerregistry.HeaderRegistry.__init__": [],
    "email.policy.EmailPolicy.__init__": [
        "<builtin>.super",
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.policy.EmailPolicy.header_source_parse": [],
    "email.policy.EmailPolicy.header_store_parse": [
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.policy.EmailPolicy.header_fetch_parse": [
        "email.headerregistry.HeaderRegistry.__init__",
        "<builtin>.hasattr"
    ],
    "email.policy.EmailPolicy.fold": [
        "email.policy.EmailPolicy._fold"
    ],
    "email.policy.EmailPolicy._fold": [
        "email.utils._has_surrogates",
        "<builtin>.any",
        "<builtin>.len",
        "<builtin>.hasattr",
        "email.headerregistry.HeaderRegistry.__init__"
    ],
    "email.policy.EmailPolicy.fold_binary": [
        "email.policy.EmailPolicy._fold"
    ],
    "email.contentmanager.ContentManager": [],
    "email.contentmanager.ContentManager.__init__": [],
    "email.contentmanager.ContentManager.add_get_handler": [],
    "email.contentmanager.ContentManager.get_content": [
        "<builtin>.KeyError"
    ],
    "email.contentmanager.ContentManager.add_set_handler": [],
    "email.contentmanager.ContentManager.set_content": [
        "email.contentmanager.ContentManager._find_set_handler",
        "<builtin>.TypeError"
    ],
    "email.contentmanager.ContentManager._find_set_handler": [
        "<builtin>.getattr",
        "<builtin>.type",
        "<builtin>.KeyError"
    ],
    "email.contentmanager.get_text_content": [],
    "email.contentmanager.get_non_text_content": [],
    "email.contentmanager.get_message_content": [],
    "email.contentmanager.get_and_fixup_unknown_message_content": [
        "<builtin>.bytes"
    ],
    "email.contentmanager._prepare_set": [
        "<builtin>.ValueError",
        "<builtin>.hasattr"
    ],
    "email.contentmanager._finalize_set": [],
    "email.contentmanager._encode_base64": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email.contentmanager._encode_text": [
        "email.quoprimime.body_encode",
        "<builtin>.ValueError",
        "<builtin>.max",
        "email.contentmanager._encode_text.embedded_body",
        "<builtin>.len",
        "email.contentmanager._encode_base64",
        "email.contentmanager._encode_text.normal_body"
    ],
    "email.contentmanager._encode_text.embedded_body": [],
    "email.contentmanager._encode_text.normal_body": [],
    "email.contentmanager.set_text_content": [
        "email.contentmanager._finalize_set",
        "email.contentmanager._encode_text",
        "email.contentmanager._prepare_set"
    ],
    "email.contentmanager.set_message_content": [
        "email.contentmanager._finalize_set",
        "<builtin>.ValueError",
        "email.contentmanager._prepare_set"
    ],
    "email.contentmanager.set_bytes_content": [
        "email.contentmanager._finalize_set",
        "email.contentmanager._encode_base64",
        "email.contentmanager._prepare_set"
    ],
    "email.headerregistry.Address": [],
    "email.headerregistry.Address.__init__": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "email._header_value_parser.get_addr_spec"
    ],
    "email._header_value_parser.get_addr_spec": [
        "email._header_value_parser.get_domain",
        "email._header_value_parser.get_local_part",
        "email._header_value_parser.TokenList.__init__",
        "email.errors.HeaderDefect.__init__"
    ],
    "email.headerregistry.Address.display_name": [],
    "email.headerregistry.Address.username": [],
    "email.headerregistry.Address.domain": [],
    "email.headerregistry.Address.addr_spec": [
        "<builtin>.set",
        "<builtin>.len",
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.quote_string": [
        "<builtin>.str"
    ],
    "email.headerregistry.Address.__repr__": [],
    "email.headerregistry.Address.__str__": [
        "<builtin>.set",
        "<builtin>.len",
        "email._header_value_parser.quote_string"
    ],
    "email.headerregistry.Address.__eq__": [
        "<builtin>.type"
    ],
    "email.headerregistry.Group": [],
    "email.headerregistry.Group.__init__": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.Group.display_name": [],
    "email.headerregistry.Group.addresses": [],
    "email.headerregistry.Group.__repr__": [],
    "email.headerregistry.Group.__str__": [
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.len",
        "email._header_value_parser.quote_string"
    ],
    "email.headerregistry.Group.__eq__": [
        "<builtin>.type"
    ],
    "email.headerregistry.BaseHeader": [],
    "email.headerregistry.BaseHeader.__new__": [
        "email.utils._has_surrogates",
        "email.utils._sanitize"
    ],
    "email.headerregistry.BaseHeader.init": [],
    "email.headerregistry.BaseHeader.name": [],
    "email.headerregistry.BaseHeader.defects": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.BaseHeader.__reduce__": [
        "<builtin>.str"
    ],
    "email.headerregistry.BaseHeader._reconstruct": [],
    "email.headerregistry.BaseHeader.fold": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.TokenList.fold",
        "email._header_value_parser.MsgID.fold"
    ],
    "email._header_value_parser.TokenList.__init__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.TokenList.fold": [
        "email._header_value_parser._refold_parse_tree"
    ],
    "email._header_value_parser.MsgID.fold": [
        "<builtin>.str"
    ],
    "email.headerregistry._reconstruct_header": [
        "<builtin>.type"
    ],
    "email.headerregistry.UnstructuredHeader": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "email.headerregistry.UnstructuredHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.UniqueUnstructuredHeader": [],
    "email.headerregistry.DateHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.DateHeader.parse": [
        "email.utils.format_datetime",
        "email.utils.parsedate_to_datetime",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.isinstance"
    ],
    "email.headerregistry.DateHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.DateHeader.datetime": [],
    "email.headerregistry.UniqueDateHeader": [],
    "email.headerregistry.AddressHeader": [],
    "email.headerregistry.AddressHeader.value_parser": [
        "email._header_value_parser.get_address_list"
    ],
    "email._header_value_parser.get_address_list": [
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_address",
        "email._header_value_parser.get_invalid_mailbox"
    ],
    "email.headerregistry.AddressHeader.parse": [
        "email.headerregistry.Address.__init__",
        "email.headerregistry.AddressHeader.value_parser",
        "email.headerregistry.Group.__init__",
        "<builtin>.list",
        "<builtin>.str",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "email.headerregistry.AddressHeader.init": [
        "<builtin>.tuple",
        "<builtin>.super"
    ],
    "email.headerregistry.AddressHeader.groups": [],
    "email.headerregistry.AddressHeader.addresses": [
        "<builtin>.tuple"
    ],
    "email.headerregistry.UniqueAddressHeader": [],
    "email.headerregistry.SingleAddressHeader": [],
    "email.headerregistry.SingleAddressHeader.address": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "email.headerregistry.UniqueSingleAddressHeader": [],
    "email.headerregistry.MIMEVersionHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.MIMEVersionHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.MIMEVersionHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.MIMEVersionHeader.major": [],
    "email.headerregistry.MIMEVersionHeader.minor": [],
    "email.headerregistry.MIMEVersionHeader.version": [],
    "email.headerregistry.ParameterizedMIMEHeader": [],
    "email.headerregistry.ParameterizedMIMEHeader.parse": [
        "email.utils._sanitize",
        "<builtin>.str"
    ],
    "email.headerregistry.ParameterizedMIMEHeader.init": [
        "<builtin>.super"
    ],
    "email.headerregistry.ParameterizedMIMEHeader.params": [],
    "email.headerregistry.ContentTypeHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.ContentTypeHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.ContentTypeHeader.maintype": [],
    "email.headerregistry.ContentTypeHeader.subtype": [],
    "email.headerregistry.ContentTypeHeader.content_type": [],
    "email.headerregistry.ContentDispositionHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.ContentDispositionHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.ContentDispositionHeader.content_disposition": [],
    "email.headerregistry.ContentTransferEncodingHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.init": [
        "email.utils._sanitize",
        "<builtin>.super"
    ],
    "email.headerregistry.ContentTransferEncodingHeader.cte": [],
    "email.headerregistry.MessageIDHeader": [
        "<builtin>.staticmethod"
    ],
    "email.headerregistry.MessageIDHeader.parse": [
        "<builtin>.str"
    ],
    "email.headerregistry.HeaderRegistry": [],
    "email.headerregistry.HeaderRegistry.map_to_type": [],
    "email.headerregistry.HeaderRegistry.__getitem__": [
        "<builtin>.type"
    ],
    "email.headerregistry.HeaderRegistry.__call__": [],
    "email._header_value_parser.TokenList": [],
    "email._header_value_parser.TokenList.__str__": [
        "<builtin>.str"
    ],
    "email._header_value_parser.TokenList.__repr__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.TokenList.value": [],
    "email._header_value_parser.TokenList.all_defects": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.TokenList.startswith_fws": [],
    "email._header_value_parser.TokenList.as_ew_allowed": [
        "<builtin>.all"
    ],
    "email._header_value_parser.TokenList.comments": [],
    "email._header_value_parser._refold_parse_tree": [
        "<builtin>.any",
        "email._header_value_parser._fold_as_ew",
        "<builtin>.list",
        "email._header_value_parser._steal_trailing_WSP_if_exists",
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "email._header_value_parser._fold_mime_parameters"
    ],
    "email._header_value_parser.TokenList.pprint": [
        "<builtin>.print",
        "email._header_value_parser.TokenList.ppstr"
    ],
    "email._header_value_parser.TokenList.ppstr": [
        "email._header_value_parser.TokenList._pp"
    ],
    "email._header_value_parser.TokenList._pp": [
        "email._header_value_parser.TokenList._pp",
        "<builtin>.hasattr"
    ],
    "email._header_value_parser.WhiteSpaceTokenList": [],
    "email._header_value_parser.WhiteSpaceTokenList.value": [],
    "email._header_value_parser.WhiteSpaceTokenList.comments": [],
    "email._header_value_parser.UnstructuredTokenList": [],
    "email._header_value_parser.Phrase": [],
    "email._header_value_parser.Word": [],
    "email._header_value_parser.CFWSList": [],
    "email._header_value_parser.Atom": [],
    "email._header_value_parser.Token": [],
    "email._header_value_parser.EncodedWord": [],
    "email._header_value_parser.QuotedString": [],
    "email._header_value_parser.QuotedString.content": [],
    "email._header_value_parser.QuotedString.quoted_value": [
        "<builtin>.str"
    ],
    "email._header_value_parser.QuotedString.stripped_value": [],
    "email._header_value_parser.BareQuotedString": [],
    "email._header_value_parser.BareQuotedString.__str__": [
        "<builtin>.str",
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.BareQuotedString.value": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment": [],
    "email._header_value_parser.Comment.__str__": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.Comment.quote": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment.content": [
        "<builtin>.str"
    ],
    "email._header_value_parser.Comment.comments": [],
    "email._header_value_parser.AddressList": [],
    "email._header_value_parser.AddressList.addresses": [],
    "email._header_value_parser.AddressList.mailboxes": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.AddressList.all_mailboxes": [
        "<builtin>.sum"
    ],
    "email._header_value_parser.Address": [],
    "email._header_value_parser.Address.display_name": [],
    "email._header_value_parser.Address.mailboxes": [],
    "email._header_value_parser.Address.all_mailboxes": [],
    "email._header_value_parser.MailboxList": [],
    "email._header_value_parser.MailboxList.mailboxes": [],
    "email._header_value_parser.MailboxList.all_mailboxes": [],
    "email._header_value_parser.GroupList": [],
    "email._header_value_parser.GroupList.mailboxes": [],
    "email._header_value_parser.GroupList.all_mailboxes": [],
    "email._header_value_parser.Group": [],
    "email._header_value_parser.Group.mailboxes": [],
    "email._header_value_parser.Group.all_mailboxes": [],
    "email._header_value_parser.Group.display_name": [],
    "email._header_value_parser.NameAddr": [],
    "email._header_value_parser.NameAddr.display_name": [
        "<builtin>.len"
    ],
    "email._header_value_parser.NameAddr.local_part": [],
    "email._header_value_parser.NameAddr.domain": [],
    "email._header_value_parser.NameAddr.route": [],
    "email._header_value_parser.NameAddr.addr_spec": [],
    "email._header_value_parser.AngleAddr": [],
    "email._header_value_parser.AngleAddr.local_part": [],
    "email._header_value_parser.AngleAddr.domain": [],
    "email._header_value_parser.AngleAddr.route": [],
    "email._header_value_parser.AngleAddr.addr_spec": [
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.ObsRoute": [],
    "email._header_value_parser.ObsRoute.domains": [],
    "email._header_value_parser.Mailbox": [],
    "email._header_value_parser.Mailbox.display_name": [],
    "email._header_value_parser.Mailbox.local_part": [],
    "email._header_value_parser.Mailbox.domain": [],
    "email._header_value_parser.Mailbox.route": [],
    "email._header_value_parser.Mailbox.addr_spec": [],
    "email._header_value_parser.InvalidMailbox": [],
    "email._header_value_parser.InvalidMailbox.display_name": [],
    "email._header_value_parser.Domain": [],
    "email._header_value_parser.Domain.domain": [
        "<builtin>.super"
    ],
    "email._header_value_parser.DotAtom": [],
    "email._header_value_parser.DotAtomText": [],
    "email._header_value_parser.NoFoldLiteral": [],
    "email._header_value_parser.AddrSpec": [],
    "email._header_value_parser.AddrSpec.local_part": [],
    "email._header_value_parser.AddrSpec.domain": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AddrSpec.value": [
        "<builtin>.len"
    ],
    "email._header_value_parser.AddrSpec.addr_spec": [
        "<builtin>.set",
        "<builtin>.len",
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.ObsLocalPart": [],
    "email._header_value_parser.DisplayName": [],
    "email._header_value_parser.DisplayName.display_name": [
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.len"
    ],
    "email._header_value_parser.DisplayName.value": [
        "<builtin>.super",
        "<builtin>.len",
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.LocalPart": [],
    "email._header_value_parser.LocalPart.value": [],
    "email._header_value_parser.LocalPart.local_part": [
        "<builtin>.isinstance",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.DomainLiteral": [],
    "email._header_value_parser.DomainLiteral.domain": [
        "<builtin>.super"
    ],
    "email._header_value_parser.DomainLiteral.ip": [],
    "email._header_value_parser.MIMEVersion": [],
    "email._header_value_parser.Parameter": [],
    "email._header_value_parser.Parameter.section_number": [],
    "email._header_value_parser.Parameter.param_value": [],
    "email._header_value_parser.InvalidParameter": [],
    "email._header_value_parser.Attribute": [],
    "email._header_value_parser.Attribute.stripped_value": [],
    "email._header_value_parser.Section": [],
    "email._header_value_parser.Value": [],
    "email._header_value_parser.Value.stripped_value": [],
    "email._header_value_parser.MimeParameters": [],
    "email._header_value_parser.MimeParameters.params": [
        "email.utils._has_surrogates",
        "urllib.parse.unquote",
        "email.errors.HeaderDefect.__init__",
        "<builtin>.sorted",
        "operator.itemgetter.__init__",
        "<builtin>.len",
        "email.errors.MessageDefect.__init__",
        "urllib.parse.unquote_to_bytes"
    ],
    "email._header_value_parser.MimeParameters.__str__": [
        "email._header_value_parser.quote_string"
    ],
    "email._header_value_parser.ParameterizedHeaderValue": [],
    "email._header_value_parser.ParameterizedHeaderValue.params": [
        "<builtin>.reversed"
    ],
    "email._header_value_parser.ContentType": [],
    "email._header_value_parser.ContentDisposition": [],
    "email._header_value_parser.ContentTransferEncoding": [],
    "email._header_value_parser.HeaderLabel": [],
    "email._header_value_parser.MsgID": [],
    "email._header_value_parser.MessageID": [],
    "email._header_value_parser.InvalidMessageID": [],
    "email._header_value_parser.Header": [],
    "email._header_value_parser.Terminal": [],
    "email._header_value_parser.Terminal.__new__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.__repr__": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.pprint": [
        "<builtin>.print"
    ],
    "email._header_value_parser.Terminal.all_defects": [
        "<builtin>.list"
    ],
    "email._header_value_parser.Terminal._pp": [
        "<builtin>.super"
    ],
    "email._header_value_parser.Terminal.pop_trailing_ws": [],
    "email._header_value_parser.Terminal.comments": [],
    "email._header_value_parser.Terminal.__getnewargs__": [
        "<builtin>.str"
    ],
    "email._header_value_parser.WhiteSpaceTerminal": [],
    "email._header_value_parser.WhiteSpaceTerminal.value": [],
    "email._header_value_parser.WhiteSpaceTerminal.startswith_fws": [],
    "email._header_value_parser.ValueTerminal": [],
    "email._header_value_parser.ValueTerminal.value": [],
    "email._header_value_parser.ValueTerminal.startswith_fws": [],
    "email._header_value_parser.EWWhiteSpaceTerminal": [],
    "email._header_value_parser.EWWhiteSpaceTerminal.value": [],
    "email._header_value_parser.EWWhiteSpaceTerminal.__str__": [],
    "email._header_value_parser._InvalidEwError": [],
    "email._header_value_parser._validate_xtext": [
        "email.errors.MessageDefect.__init__",
        "email.utils._has_surrogates",
        "email.errors.NonPrintableDefect.__init__"
    ],
    "email._header_value_parser._get_ptext_to_endchars": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "email._header_value_parser.get_fws": [
        "<builtin>.len"
    ],
    "email._header_value_parser.get_encoded_word": [
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._encoded_words.decode",
        "email._header_value_parser.get_fws",
        "<builtin>.len",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_unstructured": [
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_fws",
        "<builtin>.len",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_qp_ctext": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_qcontent": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext"
    ],
    "email._header_value_parser.get_atext": [
        "email._header_value_parser._validate_xtext",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_bare_quoted_string": [
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_qcontent"
    ],
    "email._header_value_parser.get_comment": [
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_qp_ctext",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_comment",
        "email._header_value_parser.get_fws"
    ],
    "email._header_value_parser.get_cfws": [
        "email._header_value_parser.get_fws",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_comment"
    ],
    "email._header_value_parser.get_quoted_string": [
        "email._header_value_parser.get_bare_quoted_string",
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_atom": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_atext"
    ],
    "email._header_value_parser.get_dot_atom_text": [
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_atext"
    ],
    "email._header_value_parser.get_dot_atom": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_encoded_word",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_dot_atom_text"
    ],
    "email._header_value_parser.get_word": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_atom",
        "email._header_value_parser.get_quoted_string"
    ],
    "email._header_value_parser.get_phrase": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_word",
        "email._header_value_parser.TokenList.__init__",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.get_local_part": [
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.str",
        "email._header_value_parser.get_obs_local_part",
        "email._header_value_parser.get_dot_atom",
        "email._header_value_parser.get_word"
    ],
    "email._header_value_parser.get_obs_local_part": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_word",
        "email._header_value_parser.TokenList.__init__",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.get_dtext": [
        "email._header_value_parser._get_ptext_to_endchars",
        "email._header_value_parser._validate_xtext",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser._check_for_early_dl_end": [
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.get_domain_literal": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser._check_for_early_dl_end",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_dtext"
    ],
    "email._header_value_parser.get_domain": [
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_atom",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_domain_literal",
        "email._header_value_parser.get_dot_atom"
    ],
    "email._header_value_parser.get_obs_route": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_domain",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_angle_addr": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_obs_route",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_addr_spec"
    ],
    "email._header_value_parser.get_display_name": [
        "email._header_value_parser.get_phrase",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_name_addr": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_display_name",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_angle_addr"
    ],
    "email._header_value_parser.get_mailbox": [
        "<builtin>.any",
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.isinstance",
        "email._header_value_parser.get_name_addr",
        "email._header_value_parser.get_addr_spec"
    ],
    "email._header_value_parser.get_invalid_mailbox": [
        "email._header_value_parser.get_phrase",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_mailbox_list": [
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_mailbox",
        "email._header_value_parser.get_invalid_mailbox"
    ],
    "email._header_value_parser.get_group_list": [
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "<builtin>.len",
        "email._header_value_parser.get_mailbox_list"
    ],
    "email._header_value_parser.get_group": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_group_list",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_display_name",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_address": [
        "email._header_value_parser.get_group",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_mailbox"
    ],
    "email._header_value_parser.get_no_fold_literal": [
        "email._header_value_parser.get_dtext",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_msg_id": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_dot_atom_text",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_obs_local_part",
        "email._header_value_parser.get_no_fold_literal",
        "email._header_value_parser.get_domain"
    ],
    "email._header_value_parser.parse_message_id": [
        "email._header_value_parser.get_msg_id",
        "email._header_value_parser.get_unstructured",
        "email._header_value_parser.TokenList.__init__",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.parse_mime_version": [
        "email._header_value_parser.get_cfws",
        "<builtin>.int",
        "email._header_value_parser.TokenList.__init__",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser.get_invalid_parameter": [
        "email._header_value_parser.get_phrase",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_ttext": [
        "email._header_value_parser._validate_xtext",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_token": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_ttext"
    ],
    "email._header_value_parser.get_attrtext": [
        "email._header_value_parser._validate_xtext",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_attribute": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_attrtext"
    ],
    "email._header_value_parser.get_extended_attrtext": [
        "email._header_value_parser._validate_xtext",
        "<builtin>.len"
    ],
    "email._header_value_parser.get_extended_attribute": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_extended_attrtext",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_section": [
        "<builtin>.int",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_value": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_extended_attribute",
        "email._header_value_parser.get_quoted_string",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser.get_parameter": [
        "email._header_value_parser.get_cfws",
        "email._header_value_parser.get_section",
        "email._header_value_parser.get_attrtext",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_attribute",
        "email._header_value_parser.get_value",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser.get_extended_attrtext",
        "email._header_value_parser.get_fws",
        "email._header_value_parser.get_qcontent",
        "email._header_value_parser.get_quoted_string"
    ],
    "email._header_value_parser.parse_mime_parameters": [
        "email._header_value_parser.get_invalid_parameter",
        "email._header_value_parser.get_cfws",
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.get_parameter",
        "email._header_value_parser.TokenList.__init__"
    ],
    "email._header_value_parser._find_mime_parameters": [
        "email._header_value_parser.get_phrase",
        "email._header_value_parser.parse_mime_parameters"
    ],
    "email._header_value_parser.parse_content_type_header": [
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser._find_mime_parameters",
        "email._header_value_parser.get_token",
        "email._header_value_parser.parse_mime_parameters"
    ],
    "email._header_value_parser.parse_content_disposition_header": [
        "email.errors.HeaderDefect.__init__",
        "email._header_value_parser.TokenList.__init__",
        "email._header_value_parser._find_mime_parameters",
        "email._header_value_parser.get_token",
        "email._header_value_parser.parse_mime_parameters"
    ],
    "email._header_value_parser.parse_content_transfer_encoding_header": [
        "email._header_value_parser.get_phrase",
        "email._header_value_parser.get_token",
        "email._header_value_parser.TokenList.__init__",
        "email.errors.HeaderDefect.__init__"
    ],
    "email._header_value_parser._steal_trailing_WSP_if_exists": [],
    "email._header_value_parser._fold_mime_parameters": [
        "email.utils._has_surrogates",
        "email._header_value_parser.quote_string",
        "<builtin>.str",
        "<builtin>.len",
        "urllib.parse.quote"
    ],
    "email._header_value_parser._fold_as_ew": [
        "email._header_value_parser._steal_trailing_WSP_if_exists",
        "email._encoded_words.encode",
        "email._header_value_parser.get_unstructured",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "uu.Error": [],
    "uu.encode": [
        "ntpath.basename",
        "posixpath.basename",
        "sys.stdout.buffer.write",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.open",
        "sys.stdin.buffer.read"
    ],
    "optparse.OptionParser.__init__": [
        "optparse.IndentedHelpFormatter.__init__",
        "optparse.HelpFormatter.set_parser",
        "optparse.OptionParser._populate_option_list",
        "optparse.OptionParser._init_parsing_state",
        "optparse.OptionContainer.__init__",
        "optparse.OptionParser.set_usage"
    ],
    "optparse.OptionContainer.add_option": [
        "optparse.OptionParser.__init__",
        "<builtin>.TypeError",
        "optparse.OptionGroup.__init__",
        "<builtin>.len",
        "optparse.OptionContainer._check_conflict",
        "<builtin>.isinstance"
    ],
    "optparse.OptionParser.parse_args": [
        "optparse.OptionParser._get_args",
        "optparse.OptionParser._process_args",
        "optparse.OptionParser.check_values",
        "optparse.OptionParser.error",
        "<builtin>.str",
        "optparse.OptionParser.get_default_values"
    ],
    "optparse.OptionParser.error": [
        "optparse.OptionParser.print_usage",
        "optparse.OptionParser.get_prog_name",
        "optparse.OptionParser.exit"
    ],
    "optparse._repr": [
        "<builtin>.id"
    ],
    "optparse.gettext": [],
    "optparse.ngettext": [],
    "optparse.OptParseError": [],
    "optparse.OptParseError.__init__": [],
    "optparse.OptParseError.__str__": [],
    "optparse.OptionError": [],
    "optparse.OptionError.__init__": [
        "<builtin>.str"
    ],
    "optparse.OptionError.__str__": [],
    "optparse.OptionConflictError": [],
    "optparse.OptionValueError": [],
    "optparse.BadOptionError": [],
    "optparse.BadOptionError.__init__": [],
    "optparse.BadOptionError.__str__": [
        "gettext.gettext"
    ],
    "optparse.AmbiguousOptionError": [],
    "optparse.AmbiguousOptionError.__init__": [
        "optparse.BadOptionError.__init__"
    ],
    "optparse.AmbiguousOptionError.__str__": [
        "gettext.gettext"
    ],
    "optparse.HelpFormatter": [],
    "optparse.HelpFormatter.__init__": [
        "<builtin>.max",
        "<builtin>.int",
        "<builtin>.min"
    ],
    "optparse.HelpFormatter.set_parser": [],
    "optparse.HelpFormatter.set_short_opt_delimiter": [
        "<builtin>.ValueError"
    ],
    "optparse.HelpFormatter.set_long_opt_delimiter": [
        "<builtin>.ValueError"
    ],
    "optparse.HelpFormatter.indent": [],
    "optparse.HelpFormatter.dedent": [],
    "optparse.HelpFormatter.format_usage": [
        "<builtin>.NotImplementedError"
    ],
    "optparse.HelpFormatter.format_heading": [
        "<builtin>.NotImplementedError"
    ],
    "optparse.HelpFormatter._format_text": [
        "<builtin>.max",
        "textwrap.fill"
    ],
    "optparse.HelpFormatter.format_description": [
        "optparse.HelpFormatter._format_text"
    ],
    "optparse.HelpFormatter.format_epilog": [
        "optparse.HelpFormatter._format_text"
    ],
    "optparse.HelpFormatter.expand_default": [
        "<builtin>.str"
    ],
    "optparse.HelpFormatter.format_option": [
        "textwrap.wrap",
        "optparse.HelpFormatter.expand_default",
        "<builtin>.len"
    ],
    "optparse.HelpFormatter.store_option_strings": [
        "<builtin>.max",
        "optparse.HelpFormatter.dedent",
        "<builtin>.min",
        "optparse.HelpFormatter.format_option_strings",
        "<builtin>.len",
        "optparse.HelpFormatter.indent"
    ],
    "optparse.HelpFormatter.format_option_strings": [],
    "optparse.IndentedHelpFormatter": [],
    "optparse.IndentedHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.IndentedHelpFormatter.format_usage": [
        "gettext.gettext"
    ],
    "optparse.IndentedHelpFormatter.format_heading": [],
    "optparse.TitledHelpFormatter": [],
    "optparse.TitledHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.TitledHelpFormatter.format_usage": [
        "optparse.TitledHelpFormatter.format_heading",
        "gettext.gettext"
    ],
    "optparse.TitledHelpFormatter.format_heading": [
        "<builtin>.len"
    ],
    "optparse._parse_num": [],
    "optparse._parse_int": [
        "optparse._parse_num"
    ],
    "optparse.check_builtin": [
        "optparse.OptParseError.__init__",
        "gettext.gettext"
    ],
    "optparse.check_choice": [
        "optparse.OptParseError.__init__",
        "gettext.gettext",
        "<builtin>.map"
    ],
    "optparse.Option": [],
    "optparse.Option.__init__": [
        "optparse.Option._set_attrs",
        "optparse.Option._set_opt_strings",
        "optparse.Option._check_opt_strings"
    ],
    "optparse.Option._check_opt_strings": [
        "<builtin>.TypeError"
    ],
    "optparse.Option._set_opt_strings": [
        "optparse.OptionError.__init__",
        "<builtin>.len"
    ],
    "optparse.Option._set_attrs": [
        "<builtin>.sorted",
        "optparse.OptionError.__init__",
        "<builtin>.setattr"
    ],
    "optparse.Option._check_action": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_type": [
        "<builtin>.isinstance",
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_choice": [
        "<builtin>.isinstance",
        "optparse.OptionError.__init__",
        "<builtin>.str"
    ],
    "optparse.Option._check_dest": [],
    "optparse.Option._check_const": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_nargs": [
        "optparse.OptionError.__init__"
    ],
    "optparse.Option._check_callback": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "optparse.OptionError.__init__"
    ],
    "optparse.Option.__str__": [],
    "optparse.Option.takes_value": [],
    "optparse.Option.get_opt_string": [],
    "optparse.Option.check_value": [],
    "optparse.Option.convert_value": [
        "<builtin>.tuple",
        "optparse.Option.check_value"
    ],
    "optparse.Option.process": [
        "optparse.Option.convert_value",
        "optparse.Option.take_action"
    ],
    "optparse.Option.take_action": [
        "<builtin>.ValueError",
        "<builtin>.setattr"
    ],
    "optparse.Values": [],
    "optparse.Values.__init__": [
        "<builtin>.setattr"
    ],
    "optparse.Values.__str__": [
        "<builtin>.str"
    ],
    "optparse.Values.__eq__": [
        "<builtin>.isinstance"
    ],
    "optparse.Values._update_careful": [
        "<builtin>.dir",
        "<builtin>.setattr"
    ],
    "optparse.Values._update_loose": [],
    "optparse.Values._update": [
        "<builtin>.ValueError",
        "optparse.Values._update_loose",
        "optparse.Values._update_careful"
    ],
    "optparse.Values.read_module": [
        "<builtin>.__import__",
        "<builtin>.vars",
        "optparse.Values._update"
    ],
    "optparse.Values.read_file": [
        "<builtin>.exec",
        "<builtin>.open",
        "optparse.Values._update"
    ],
    "optparse.Values.ensure_value": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.setattr"
    ],
    "optparse.OptionContainer": [],
    "optparse.OptionContainer.__init__": [
        "optparse.OptionContainer.set_conflict_handler",
        "optparse.OptionContainer.set_description",
        "optparse.OptionGroup._create_option_list"
    ],
    "optparse.OptionGroup._create_option_list": [
        "optparse.OptionContainer._share_option_mappings"
    ],
    "optparse.OptionContainer.set_conflict_handler": [
        "<builtin>.ValueError"
    ],
    "optparse.OptionContainer.set_description": [],
    "optparse.OptionContainer._create_option_mappings": [],
    "optparse.OptionContainer._share_option_mappings": [],
    "optparse.OptionContainer.get_description": [],
    "optparse.OptionContainer.destroy": [],
    "optparse.OptionContainer._check_conflict": [
        "optparse.OptionError.__init__"
    ],
    "optparse.OptionGroup.__init__": [
        "optparse.OptionContainer.__init__"
    ],
    "optparse.OptionContainer.add_options": [
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionContainer.get_option": [],
    "optparse.OptionContainer.has_option": [],
    "optparse.OptionContainer.remove_option": [
        "<builtin>.ValueError"
    ],
    "optparse.OptionContainer.format_option_help": [],
    "optparse.OptionContainer.format_description": [
        "optparse.OptionContainer.get_description"
    ],
    "optparse.OptionContainer.format_help": [
        "optparse.OptionContainer.format_description",
        "optparse.OptionContainer.format_option_help"
    ],
    "optparse.OptionGroup": [],
    "optparse.OptionGroup.set_title": [],
    "optparse.OptionGroup.destroy": [
        "optparse.OptionContainer.destroy",
        "optparse.OptionGroup.destroy"
    ],
    "optparse.OptionGroup.format_help": [
        "optparse.OptionContainer.format_help",
        "optparse.OptionGroup.format_help"
    ],
    "optparse.OptionParser": [],
    "optparse.OptionParser.set_usage": [
        "gettext.gettext"
    ],
    "optparse.OptionParser._populate_option_list": [
        "optparse.OptionContainer.add_options",
        "optparse.OptionParser._add_version_option",
        "optparse.OptionParser._add_help_option"
    ],
    "optparse.OptionParser._init_parsing_state": [],
    "optparse.OptionParser.destroy": [
        "optparse.OptionContainer.destroy",
        "optparse.OptionGroup.destroy"
    ],
    "optparse.OptionParser._create_option_list": [
        "optparse.OptionContainer._create_option_mappings"
    ],
    "optparse.OptionParser._add_help_option": [
        "gettext.gettext",
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionParser._add_version_option": [
        "gettext.gettext",
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionParser.enable_interspersed_args": [],
    "optparse.OptionParser.disable_interspersed_args": [],
    "optparse.OptionParser.set_process_default_values": [],
    "optparse.OptionParser.set_default": [],
    "optparse.OptionParser.set_defaults": [],
    "optparse.OptionParser._get_all_options": [],
    "optparse.OptionParser.get_default_values": [
        "optparse.OptionParser._get_all_options",
        "optparse.Values.__init__",
        "<builtin>.isinstance"
    ],
    "optparse.OptionParser.add_option_group": [
        "<builtin>.ValueError",
        "optparse.OptionGroup.__init__",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "optparse.OptionParser.get_option_group": [],
    "optparse.OptionParser._get_args": [],
    "optparse.OptionParser._process_args": [
        "optparse.OptionParser._process_long_opt",
        "optparse.OptionParser._process_short_opts",
        "<builtin>.len"
    ],
    "optparse.OptionParser.check_values": [],
    "optparse.OptionParser._process_long_opt": [
        "<builtin>.tuple",
        "gettext.gettext",
        "optparse.OptionParser._match_long_opt",
        "optparse.OptionParser.error",
        "<builtin>.len",
        "gettext.ngettext"
    ],
    "optparse.OptionParser._process_short_opts": [
        "<builtin>.tuple",
        "optparse.OptionParser.error",
        "gettext.ngettext",
        "<builtin>.len",
        "optparse.BadOptionError.__init__"
    ],
    "optparse.OptionParser._match_long_opt": [
        "optparse._match_abbrev"
    ],
    "optparse._match_abbrev": [
        "optparse.AmbiguousOptionError.__init__",
        "optparse.BadOptionError.__init__",
        "<builtin>.len"
    ],
    "optparse.OptionParser.get_prog_name": [
        "ntpath.basename",
        "posixpath.basename"
    ],
    "optparse.OptionParser.expand_prog_name": [
        "optparse.OptionParser.get_prog_name"
    ],
    "optparse.OptionParser.get_description": [
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionParser.exit": [
        "sys.stderr.write",
        "sys.exit"
    ],
    "optparse.OptionParser.print_usage": [
        "optparse.OptionParser.get_usage",
        "<builtin>.print"
    ],
    "optparse.OptionParser.get_usage": [
        "optparse.IndentedHelpFormatter.format_usage",
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionParser.get_version": [
        "optparse.OptionParser.expand_prog_name"
    ],
    "optparse.OptionParser.print_version": [
        "<builtin>.print",
        "optparse.OptionParser.get_version"
    ],
    "optparse.OptionParser.format_option_help": [
        "optparse.HelpFormatter.indent",
        "gettext.gettext",
        "optparse.HelpFormatter.store_option_strings",
        "optparse.HelpFormatter.dedent",
        "optparse.OptionContainer.format_option_help",
        "optparse.IndentedHelpFormatter.format_heading"
    ],
    "optparse.OptionParser.format_epilog": [],
    "optparse.OptionParser.format_help": [
        "optparse.OptionParser.get_usage",
        "optparse.OptionContainer.format_description",
        "optparse.OptionParser.format_option_help",
        "optparse.OptionParser.format_epilog"
    ],
    "optparse.OptionParser.print_help": [
        "optparse.OptionParser.format_help",
        "sys.stdout.write"
    ],
    "textwrap.TextWrapper": [
        "re.escape",
        "<builtin>.ord",
        "re.compile"
    ],
    "textwrap.TextWrapper.__init__": [],
    "textwrap.TextWrapper._munge_whitespace": [],
    "textwrap.TextWrapper._split": [],
    "textwrap.TextWrapper._fix_sentence_endings": [
        "<builtin>.len"
    ],
    "textwrap.TextWrapper._handle_long_word": [],
    "textwrap.TextWrapper._wrap_chunks": [
        "<builtin>.ValueError",
        "textwrap.TextWrapper._handle_long_word",
        "<builtin>.sum",
        "<builtin>.map",
        "<builtin>.len"
    ],
    "textwrap.TextWrapper._split_chunks": [
        "textwrap.TextWrapper._munge_whitespace",
        "textwrap.TextWrapper._split"
    ],
    "textwrap.TextWrapper.wrap": [
        "textwrap.TextWrapper._wrap_chunks",
        "textwrap.TextWrapper._split_chunks",
        "textwrap.TextWrapper._fix_sentence_endings"
    ],
    "textwrap.TextWrapper.fill": [
        "textwrap.TextWrapper.wrap"
    ],
    "textwrap.shorten": [
        "textwrap.TextWrapper.fill",
        "textwrap.TextWrapper.__init__"
    ],
    "textwrap.dedent": [
        "re.sub",
        "<builtin>.enumerate",
        "<builtin>.zip"
    ],
    "textwrap.indent": [
        "textwrap.indent.prefixed_lines"
    ],
    "textwrap.indent.predicate": [],
    "textwrap.indent.prefixed_lines": [
        "textwrap.indent.predicate"
    ],
    "email.generator.Generator": [],
    "email.generator.Generator.write": [
        "email.generator.Generator.write"
    ],
    "email.generator.Generator._encode": [],
    "time.ctime": [],
    "email.generator.Generator._write": [
        "email.message.Message.replace_header",
        "email.generator.Generator._new_buffer",
        "email.generator.Generator._dispatch",
        "email.generator.Generator.write",
        "<builtin>.getattr",
        "copy.deepcopy",
        "email.generator.Generator._write_headers"
    ],
    "email.generator.Generator.clone": [],
    "email.generator.Generator._new_buffer": [
        "_io.StringIO"
    ],
    "email.generator.Generator._write_lines": [
        "email.generator.Generator.write"
    ],
    "email.generator.Generator._dispatch": [
        "<builtin>.getattr",
        "email.message.Message.get_content_maintype",
        "email.generator.Generator._handle_text",
        "email.message.Message.get_content_subtype"
    ],
    "email.generator.Generator._write_headers": [
        "email.message.Message.raw_items",
        "email.generator.Generator.write"
    ],
    "email.generator.Generator._handle_text": [
        "email.utils._has_surrogates",
        "email.message.Message.get_param",
        "email.message.Message.set_payload",
        "<builtin>.TypeError",
        "email.message.Message.get_payload",
        "<builtin>.type",
        "<builtin>.isinstance",
        "copy.deepcopy",
        "email.generator.Generator._write_lines"
    ],
    "email.generator.Generator._handle_multipart": [
        "email.generator.Generator.write",
        "email.generator.Generator._new_buffer",
        "email.generator.Generator._make_boundary",
        "email.generator.Generator.clone",
        "<builtin>.isinstance",
        "email.generator.Generator._write_lines"
    ],
    "email.generator.Generator._make_boundary": [
        "re.escape",
        "email.generator.Generator._compile_re",
        "<builtin>.str"
    ],
    "email.generator.Generator._handle_multipart_signed": [
        "email.generator.Generator._handle_multipart"
    ],
    "email.generator.Generator._handle_message_delivery_status": [
        "email.generator.Generator.clone",
        "email.generator.Generator._new_buffer",
        "email.generator.Generator.write"
    ],
    "email.generator.Generator._handle_message": [
        "email.generator.Generator._encode",
        "email.generator.Generator._new_buffer",
        "email.generator.Generator.write",
        "email.generator.Generator.clone",
        "<builtin>.isinstance"
    ],
    "email.generator.Generator._compile_re": [
        "re.compile"
    ],
    "email.generator.BytesGenerator": [],
    "email.generator.BytesGenerator.write": [
        "email.generator.Generator.write"
    ],
    "email.generator.BytesGenerator._new_buffer": [
        "_io.BytesIO"
    ],
    "email.generator.BytesGenerator._encode": [],
    "email.generator.BytesGenerator._write_headers": [
        "email.generator.Generator.write",
        "email.generator.BytesGenerator.write"
    ],
    "email.generator.BytesGenerator._handle_text": [
        "email.utils._has_surrogates",
        "<builtin>.super",
        "email.generator.Generator._write_lines"
    ],
    "email.generator.BytesGenerator._compile_re": [
        "re.compile"
    ],
    "email.generator.DecodedGenerator": [],
    "email.generator.DecodedGenerator.__init__": [
        "email.generator.Generator.__init__"
    ],
    "email.generator.DecodedGenerator._dispatch": [
        "<builtin>.print"
    ],
    "configparser.Error": [],
    "configparser.Error.__init__": [],
    "configparser.Error.__repr__": [],
    "configparser.NoSectionError": [],
    "configparser.NoSectionError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.DuplicateSectionError": [],
    "configparser.DuplicateSectionError.__init__": [
        "<builtin>.repr",
        "configparser.Error.__init__"
    ],
    "configparser.DuplicateOptionError": [],
    "configparser.DuplicateOptionError.__init__": [
        "<builtin>.repr",
        "configparser.Error.__init__"
    ],
    "configparser.NoOptionError": [],
    "configparser.NoOptionError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.InterpolationError": [],
    "configparser.InterpolationError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.InterpolationMissingOptionError": [],
    "configparser.InterpolationMissingOptionError.__init__": [
        "configparser.InterpolationError.__init__"
    ],
    "configparser.InterpolationSyntaxError": [],
    "configparser.InterpolationDepthError": [],
    "configparser.InterpolationDepthError.__init__": [
        "configparser.InterpolationError.__init__"
    ],
    "configparser.ParsingError": [],
    "configparser.ParsingError.__init__": [
        "<builtin>.ValueError",
        "configparser.Error.__init__"
    ],
    "configparser.ParsingError.filename": [
        "warnings.warn"
    ],
    "configparser.ParsingError.append": [],
    "configparser.MissingSectionHeaderError": [],
    "configparser.MissingSectionHeaderError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.Interpolation": [],
    "configparser.Interpolation.before_get": [],
    "configparser.Interpolation.before_set": [],
    "configparser.Interpolation.before_read": [],
    "configparser.Interpolation.before_write": [],
    "configparser.BasicInterpolation": [
        "re.compile"
    ],
    "configparser.BasicInterpolation.before_get": [
        "configparser.BasicInterpolation._interpolate_some"
    ],
    "configparser.BasicInterpolation._interpolate_some": [
        "configparser.BasicInterpolation._interpolate_some",
        "configparser.InterpolationError.__init__",
        "configparser.InterpolationMissingOptionError.__init__",
        "configparser.InterpolationDepthError.__init__"
    ],
    "configparser.BasicInterpolation.before_set": [
        "<builtin>.ValueError"
    ],
    "configparser.ExtendedInterpolation": [
        "re.compile"
    ],
    "configparser.ExtendedInterpolation.before_get": [
        "configparser.ExtendedInterpolation._interpolate_some"
    ],
    "configparser.ExtendedInterpolation._interpolate_some": [
        "configparser.ExtendedInterpolation._interpolate_some",
        "configparser.InterpolationError.__init__",
        "configparser.InterpolationMissingOptionError.__init__",
        "<builtin>.dict",
        "<builtin>.len",
        "configparser.InterpolationDepthError.__init__"
    ],
    "configparser.ExtendedInterpolation.before_set": [
        "<builtin>.ValueError"
    ],
    "configparser.LegacyInterpolation": [
        "re.compile"
    ],
    "configparser.LegacyInterpolation.before_get": [
        "configparser.InterpolationDepthError.__init__",
        "configparser.InterpolationMissingOptionError.__init__"
    ],
    "configparser.LegacyInterpolation.before_set": [],
    "configparser.LegacyInterpolation._interpolation_replace": [],
    "configparser.RawConfigParser": [
        "re.compile"
    ],
    "configparser.ConverterMapping.__init__": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.dir"
    ],
    "configparser.SectionProxy.__init__": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "configparser.RawConfigParser._read_defaults": [
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.defaults": [],
    "configparser.RawConfigParser.add_section": [
        "configparser.SectionProxy.__init__",
        "<builtin>.ValueError",
        "configparser.DuplicateSectionError.__init__"
    ],
    "configparser.RawConfigParser.has_section": [],
    "configparser.RawConfigParser.options": [
        "configparser.NoSectionError.__init__",
        "<builtin>.list"
    ],
    "configparser.RawConfigParser.read": [
        "<builtin>.isinstance",
        "<builtin>.open",
        "configparser.RawConfigParser._read"
    ],
    "configparser.RawConfigParser._read": [
        "configparser.RawConfigParser.optionxform",
        "configparser.MissingSectionHeaderError.__init__",
        "configparser.SectionProxy.__init__",
        "configparser.ParsingError.__init__",
        "configparser.RawConfigParser.set",
        "configparser.RawConfigParser._handle_error",
        "<builtin>.min",
        "<builtin>.enumerate",
        "configparser.DuplicateOptionError.__init__",
        "configparser.DuplicateSectionError.__init__",
        "configparser.RawConfigParser._join_multiline_values"
    ],
    "configparser.RawConfigParser.read_file": [
        "configparser.RawConfigParser._read"
    ],
    "configparser.RawConfigParser.read_dict": [
        "configparser.RawConfigParser.optionxform",
        "configparser.RawConfigParser.add_section",
        "configparser.RawConfigParser.set",
        "<builtin>.str",
        "configparser.DuplicateOptionError.__init__"
    ],
    "configparser.RawConfigParser.set": [
        "configparser.BasicInterpolation.before_set",
        "configparser.NoSectionError.__init__",
        "configparser.Interpolation.before_set",
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.optionxform": [],
    "configparser.RawConfigParser.get": [
        "configparser.NoOptionError.__init__",
        "configparser.RawConfigParser.optionxform",
        "configparser.Interpolation.before_get",
        "configparser.BasicInterpolation.before_get",
        "configparser.RawConfigParser._unify_values"
    ],
    "configparser.RawConfigParser._unify_values": [
        "configparser.NoSectionError.__init__",
        "collections.ChainMap.__init__",
        "<builtin>.str",
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.RawConfigParser._get": [
        "configparser.RawConfigParser.get",
        "configparser.RawConfigParser._convert_to_boolean"
    ],
    "configparser.RawConfigParser._convert_to_boolean": [
        "<builtin>.ValueError"
    ],
    "configparser.RawConfigParser._get_conv": [
        "configparser.RawConfigParser._get"
    ],
    "configparser.RawConfigParser.getint": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.getfloat": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.getboolean": [
        "configparser.RawConfigParser._get_conv"
    ],
    "configparser.RawConfigParser.items.<lambda1>": [
        "configparser.Interpolation.before_get",
        "configparser.BasicInterpolation.before_get"
    ],
    "configparser.RawConfigParser.items.<lambda2>": [],
    "configparser.RawConfigParser.popitem": [
        "configparser.RawConfigParser.sections"
    ],
    "configparser.RawConfigParser.has_option": [
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.write": [
        "configparser.RawConfigParser._write_section"
    ],
    "configparser.RawConfigParser._write_section": [
        "<builtin>.str",
        "configparser.Interpolation.before_write"
    ],
    "configparser.RawConfigParser.remove_option": [
        "configparser.NoSectionError.__init__",
        "configparser.RawConfigParser.optionxform"
    ],
    "configparser.RawConfigParser.remove_section": [],
    "configparser.RawConfigParser.__getitem__": [
        "<builtin>.KeyError",
        "configparser.RawConfigParser.has_section"
    ],
    "configparser.RawConfigParser.__setitem__": [
        "configparser.RawConfigParser.read_dict"
    ],
    "configparser.RawConfigParser.__delitem__": [
        "<builtin>.ValueError",
        "configparser.RawConfigParser.remove_section",
        "<builtin>.KeyError",
        "configparser.RawConfigParser.has_section"
    ],
    "configparser.RawConfigParser.__contains__": [
        "configparser.RawConfigParser.has_section"
    ],
    "configparser.RawConfigParser.__len__": [
        "<builtin>.len"
    ],
    "configparser.RawConfigParser.__iter__": [
        "itertools.chain"
    ],
    "configparser.RawConfigParser._handle_error": [
        "configparser.ParsingError.append",
        "<builtin>.repr",
        "configparser.ParsingError.__init__"
    ],
    "configparser.RawConfigParser._join_multiline_values": [
        "itertools.chain",
        "<builtin>.isinstance",
        "configparser.Interpolation.before_read"
    ],
    "configparser.RawConfigParser._validate_value_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "configparser.RawConfigParser.converters": [],
    "configparser.ConfigParser": [],
    "configparser.ConfigParser.set": [
        "configparser.RawConfigParser._validate_value_types",
        "<builtin>.super"
    ],
    "configparser.ConfigParser.add_section": [
        "configparser.RawConfigParser._validate_value_types",
        "<builtin>.super"
    ],
    "configparser.ConfigParser._read_defaults": [
        "configparser.RawConfigParser.read_dict"
    ],
    "configparser.SafeConfigParser": [],
    "configparser.SafeConfigParser.__init__": [
        "warnings.warn",
        "<builtin>.super"
    ],
    "configparser.SectionProxy": [],
    "configparser.SectionProxy.__repr__": [],
    "configparser.SectionProxy.__getitem__": [
        "configparser.RawConfigParser.get",
        "configparser.RawConfigParser.has_option",
        "<builtin>.KeyError"
    ],
    "configparser.SectionProxy.__setitem__": [
        "configparser.RawConfigParser.set",
        "configparser.RawConfigParser._validate_value_types"
    ],
    "configparser.SectionProxy.__delitem__": [
        "configparser.RawConfigParser.remove_option",
        "configparser.RawConfigParser.has_option",
        "<builtin>.KeyError"
    ],
    "configparser.SectionProxy.__contains__": [
        "configparser.RawConfigParser.has_option"
    ],
    "configparser.SectionProxy.__len__": [
        "configparser.SectionProxy._options",
        "<builtin>.len"
    ],
    "configparser.SectionProxy._options": [
        "configparser.RawConfigParser.options",
        "configparser.RawConfigParser.defaults"
    ],
    "configparser.SectionProxy.__iter__": [
        "configparser.SectionProxy._options"
    ],
    "configparser.SectionProxy.parser": [],
    "configparser.SectionProxy.name": [],
    "configparser.SectionProxy.get": [],
    "configparser.ConverterMapping": [
        "re.compile"
    ],
    "configparser.ConverterMapping.__getitem__": [],
    "configparser.ConverterMapping.__setitem__": [
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.setattr"
    ],
    "configparser.ConverterMapping.__delitem__": [
        "itertools.chain",
        "<builtin>.delattr",
        "<builtin>.KeyError"
    ],
    "configparser.ConverterMapping.__iter__": [
        "<builtin>.iter"
    ],
    "configparser.ConverterMapping.__len__": [
        "<builtin>.len"
    ],
    "_bootstrap._setup": [],
    "_frozen_importlib._setup": [
        "_frozen_importlib._spec_from_module",
        "_frozen_importlib._builtin_from_name",
        "sys.modules.items",
        "_frozen_importlib._init_module_attrs",
        "<builtin>.setattr",
        "<builtin>.type",
        "<builtin>.isinstance",
        "_imp.is_frozen"
    ],
    "_bootstrap_external._setup": [],
    "_frozen_importlib_external._setup": [
        "_frozen_importlib._builtin_from_name",
        "<builtin>.all",
        "<builtin>.setattr",
        "<builtin>.len",
        "_bootstrap._imp.extension_suffixes",
        "_bootstrap._builtin_from_name",
        "_frozen_importlib_external._make_relax_case"
    ],
    "importlib.invalidate_caches": [
        "<builtin>.hasattr"
    ],
    "importlib.find_loader": [
        "_bootstrap._find_spec",
        "<builtin>.ImportError",
        "<builtin>.ValueError",
        "warnings.warn",
        "_frozen_importlib._find_spec"
    ],
    "_frozen_importlib._find_spec": [
        "<builtin>.ImportError",
        "_frozen_importlib._find_spec_legacy"
    ],
    "_bootstrap._gcd_import": [],
    "_frozen_importlib._gcd_import": [
        "_frozen_importlib._sanity_check",
        "_frozen_importlib._resolve_name",
        "_frozen_importlib._find_and_load"
    ],
    "importlib.reload": [
        "<builtin>.ImportError",
        "_bootstrap._find_spec",
        "<builtin>.ModuleNotFoundError",
        "_bootstrap._exec",
        "_frozen_importlib._exec",
        "sys.modules.get",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "_frozen_importlib._find_spec"
    ],
    "_bootstrap._exec": [],
    "_frozen_importlib._exec": [
        "<builtin>.ImportError",
        "_frozen_importlib.FrozenImporter.load_module",
        "_frozen_importlib._ModuleLockManager.__init__",
        "_frozen_importlib._init_module_attrs",
        "<builtin>.hasattr",
        "_frozen_importlib.BuiltinImporter.exec_module",
        "_frozen_importlib.FrozenImporter.exec_module"
    ],
    "_frozen_importlib_external": [
        "_frozen_importlib_external.WindowsRegistryFinder",
        "_frozen_importlib_external._NamespacePath",
        "_frozen_importlib_external.PathFinder",
        "_frozen_importlib_external._NamespaceLoader",
        "_frozen_importlib_external.SourcelessFileLoader",
        "_frozen_importlib_external.FileFinder",
        "_frozen_importlib_external.FileLoader",
        "<builtin>.type",
        "_frozen_importlib_external.SourceLoader",
        "<builtin>.object",
        "_frozen_importlib_external.ExtensionFileLoader",
        "_frozen_importlib_external._LoaderBasics",
        "_frozen_importlib_external.SourceFileLoader"
    ],
    "_frozen_importlib_external._make_relax_case": [],
    "_frozen_importlib_external._make_relax_case._relax_case": [],
    "_frozen_importlib_external._pack_uint32": [
        "<builtin>.int"
    ],
    "_frozen_importlib_external._unpack_uint32": [
        "<builtin>.len"
    ],
    "_frozen_importlib_external._unpack_uint16": [
        "<builtin>.len"
    ],
    "_frozen_importlib_external._path_join": [],
    "_frozen_importlib_external._path_split": [
        "<builtin>.reversed",
        "<builtin>.len"
    ],
    "_frozen_importlib_external._path_stat": [],
    "_frozen_importlib_external._path_is_mode_type": [
        "_frozen_importlib_external._path_stat"
    ],
    "_frozen_importlib_external._path_isfile": [
        "_frozen_importlib_external._path_is_mode_type"
    ],
    "_frozen_importlib_external._path_isdir": [
        "_frozen_importlib_external._path_is_mode_type"
    ],
    "_frozen_importlib_external._path_isabs": [],
    "_frozen_importlib_external._write_atomic": [
        "<builtin>.id"
    ],
    "_frozen_importlib_external.cache_from_source": [
        "<builtin>.ValueError",
        "_frozen_importlib_external._path_split",
        "_frozen_importlib_external._path_isabs",
        "<builtin>.NotImplementedError",
        "_frozen_importlib_external._path_join",
        "<builtin>.TypeError",
        "<builtin>.str"
    ],
    "_frozen_importlib_external.source_from_cache": [
        "<builtin>.ValueError",
        "_frozen_importlib_external._path_split",
        "<builtin>.NotImplementedError",
        "_frozen_importlib_external._path_join",
        "<builtin>.len"
    ],
    "_frozen_importlib_external._get_sourcefile": [
        "_frozen_importlib_external.source_from_cache",
        "_frozen_importlib_external._path_isfile",
        "<builtin>.len"
    ],
    "_frozen_importlib_external._get_cached": [
        "<builtin>.tuple",
        "_frozen_importlib_external.cache_from_source"
    ],
    "_frozen_importlib_external._calc_mode": [
        "_frozen_importlib_external._path_stat"
    ],
    "_frozen_importlib_external._check_name": [
        "_frozen_importlib_external._check_name._wrap"
    ],
    "_frozen_importlib_external._check_name._check_name_wrapper": [
        "<builtin>.ImportError",
        "_frozen_importlib_external.FileLoader.get_resource_reader",
        "_frozen_importlib_external.FileLoader.get_filename",
        "_frozen_importlib_external.ExtensionFileLoader.get_filename",
        "_frozen_importlib_external.FileLoader.load_module"
    ],
    "_frozen_importlib_external.FileLoader.get_filename": [],
    "_frozen_importlib_external.FileLoader.get_resource_reader": [],
    "_frozen_importlib_external.ExtensionFileLoader.get_filename": [],
    "_frozen_importlib_external.FileLoader.load_module": [
        "<builtin>.super"
    ],
    "_frozen_importlib_external._check_name._wrap": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.setattr"
    ],
    "_frozen_importlib_external._find_module_shim": [
        "<builtin>.len"
    ],
    "_frozen_importlib_external._classify_pyc": [
        "<builtin>.ImportError",
        "_frozen_importlib_external._unpack_uint32",
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "_frozen_importlib_external._validate_timestamp_pyc": [
        "<builtin>.ImportError",
        "_frozen_importlib_external._unpack_uint32"
    ],
    "_frozen_importlib_external._validate_hash_pyc": [
        "<builtin>.ImportError"
    ],
    "_frozen_importlib_external._compile_bytecode": [
        "<builtin>.ImportError",
        "<builtin>.isinstance"
    ],
    "_frozen_importlib_external._code_to_timestamp_pyc": [
        "<builtin>.bytearray",
        "_frozen_importlib_external._pack_uint32"
    ],
    "_frozen_importlib_external._code_to_hash_pyc": [
        "<builtin>.bytearray",
        "<builtin>.len",
        "_frozen_importlib_external._pack_uint32"
    ],
    "_frozen_importlib_external.spec_from_file_location": [
        "<builtin>.tuple",
        "_frozen_importlib_external._path_split",
        "_frozen_importlib_external.FileLoader.get_filename",
        "_frozen_importlib_external._get_supported_file_loaders",
        "_frozen_importlib_external._LoaderBasics.is_package",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib_external._get_supported_file_loaders": [],
    "_frozen_importlib_external._LoaderBasics.is_package": [
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.WindowsRegistryFinder": [],
    "_frozen_importlib_external.WindowsRegistryFinder._open_registry": [],
    "_frozen_importlib_external.WindowsRegistryFinder._search_registry": [
        "_frozen_importlib_external.WindowsRegistryFinder._open_registry"
    ],
    "_frozen_importlib_external.WindowsRegistryFinder.find_spec": [
        "<builtin>.tuple",
        "_frozen_importlib_external.WindowsRegistryFinder._search_registry",
        "_frozen_importlib_external._get_supported_file_loaders",
        "_frozen_importlib_external._path_stat"
    ],
    "_frozen_importlib_external.WindowsRegistryFinder.find_module": [
        "_frozen_importlib_external.WindowsRegistryFinder.find_spec"
    ],
    "_frozen_importlib_external._LoaderBasics": [],
    "_frozen_importlib_external._LoaderBasics.create_module": [],
    "_frozen_importlib_external._LoaderBasics.exec_module": [
        "<builtin>.ImportError",
        "_frozen_importlib_external.SourcelessFileLoader.get_code"
    ],
    "_frozen_importlib_external.SourcelessFileLoader.get_code": [
        "_frozen_importlib_external._classify_pyc",
        "_frozen_importlib_external.FileLoader.get_data",
        "<builtin>.memoryview",
        "_frozen_importlib_external.FileLoader.get_filename",
        "_frozen_importlib_external._compile_bytecode"
    ],
    "_frozen_importlib_external._LoaderBasics.load_module": [],
    "_frozen_importlib_external.SourceLoader": [],
    "_frozen_importlib_external.SourceLoader.path_mtime": [],
    "_frozen_importlib_external.SourceLoader.path_stats": [
        "_frozen_importlib_external.SourceLoader.path_mtime"
    ],
    "_frozen_importlib_external.SourceLoader._cache_bytecode": [
        "_frozen_importlib_external.SourceFileLoader.set_data",
        "_frozen_importlib_external.SourceLoader.set_data"
    ],
    "_frozen_importlib_external.SourceFileLoader.set_data": [
        "_frozen_importlib_external._path_split",
        "_frozen_importlib_external._path_isdir",
        "<builtin>.reversed",
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._write_atomic"
    ],
    "_frozen_importlib_external.SourceLoader.set_data": [],
    "_frozen_importlib_external.SourceLoader.get_source": [
        "<builtin>.ImportError",
        "_frozen_importlib_external.decode_source"
    ],
    "_frozen_importlib_external.SourceLoader.source_to_code": [],
    "_frozen_importlib_external.SourceLoader.get_code": [
        "_frozen_importlib_external._classify_pyc",
        "<builtin>.memoryview",
        "_frozen_importlib_external.SourceLoader.source_to_code",
        "_frozen_importlib_external.SourceLoader._cache_bytecode",
        "_frozen_importlib_external.SourceFileLoader._cache_bytecode",
        "_frozen_importlib_external.cache_from_source",
        "_frozen_importlib_external.SourceFileLoader.path_stats",
        "_frozen_importlib_external._code_to_hash_pyc",
        "_frozen_importlib_external._validate_hash_pyc",
        "_frozen_importlib_external._validate_timestamp_pyc",
        "_frozen_importlib_external._compile_bytecode",
        "<builtin>.len",
        "<builtin>.int",
        "_frozen_importlib_external._code_to_timestamp_pyc",
        "_frozen_importlib_external.SourceLoader.path_stats"
    ],
    "_frozen_importlib_external.SourceFileLoader.path_stats": [
        "_frozen_importlib_external._path_stat"
    ],
    "_frozen_importlib_external.SourceFileLoader._cache_bytecode": [
        "_frozen_importlib_external.SourceFileLoader.set_data",
        "_frozen_importlib_external._calc_mode"
    ],
    "_frozen_importlib_external.FileLoader": [
        "_frozen_importlib_external._check_name"
    ],
    "_frozen_importlib_external.FileLoader.__init__": [],
    "_frozen_importlib_external.FileLoader.__eq__": [],
    "_frozen_importlib_external.FileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "_frozen_importlib_external.FileLoader.get_data": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "_frozen_importlib_external.FileLoader.open_resource": [
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.FileLoader.resource_path": [
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external.FileLoader.is_resource",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.FileLoader.is_resource": [
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external._path_isfile",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.FileLoader.contents": [
        "<builtin>.iter",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.SourceFileLoader": [],
    "_frozen_importlib_external.SourcelessFileLoader": [],
    "_frozen_importlib_external.SourcelessFileLoader.get_source": [],
    "_frozen_importlib_external.ExtensionFileLoader": [
        "_frozen_importlib_external._check_name"
    ],
    "_frozen_importlib_external.ExtensionFileLoader.__init__": [],
    "_frozen_importlib_external.ExtensionFileLoader.__eq__": [],
    "_frozen_importlib_external.ExtensionFileLoader.__hash__": [
        "<builtin>.hash"
    ],
    "_frozen_importlib_external.ExtensionFileLoader.create_module": [],
    "_frozen_importlib_external.ExtensionFileLoader.exec_module": [],
    "_frozen_importlib_external.ExtensionFileLoader.is_package": [
        "<builtin>.any",
        "_frozen_importlib_external._path_split"
    ],
    "_frozen_importlib_external.ExtensionFileLoader.get_code": [],
    "_frozen_importlib_external.ExtensionFileLoader.get_source": [],
    "_frozen_importlib_external._NamespacePath": [],
    "_frozen_importlib_external._NamespacePath.__init__": [
        "<builtin>.tuple",
        "_frozen_importlib_external._NamespacePath._get_parent_path"
    ],
    "_frozen_importlib_external._NamespacePath._get_parent_path": [
        "<builtin>.getattr",
        "_frozen_importlib_external._NamespacePath._find_parent_path_names"
    ],
    "_frozen_importlib_external._NamespacePath._find_parent_path_names": [],
    "_frozen_importlib_external._NamespacePath._recalculate": [
        "<builtin>.tuple",
        "_frozen_importlib_external.PathFinder._get_spec",
        "_frozen_importlib_external._NamespacePath._get_parent_path"
    ],
    "_frozen_importlib_external.PathFinder._get_spec": [
        "<builtin>.ImportError",
        "_frozen_importlib_external.PathFinder._path_importer_cache",
        "<builtin>.hasattr",
        "_frozen_importlib_external.PathFinder._legacy_get_spec",
        "<builtin>.isinstance"
    ],
    "_frozen_importlib_external._NamespacePath.__iter__": [
        "_frozen_importlib_external._NamespacePath._recalculate",
        "<builtin>.iter"
    ],
    "_frozen_importlib_external._NamespacePath.__getitem__": [
        "_frozen_importlib_external._NamespacePath._recalculate"
    ],
    "_frozen_importlib_external._NamespacePath.__setitem__": [],
    "_frozen_importlib_external._NamespacePath.__len__": [
        "_frozen_importlib_external._NamespacePath._recalculate",
        "<builtin>.len"
    ],
    "_frozen_importlib_external._NamespacePath.__repr__": [],
    "_frozen_importlib_external._NamespacePath.__contains__": [
        "_frozen_importlib_external._NamespacePath._recalculate"
    ],
    "_frozen_importlib_external._NamespacePath.append": [],
    "_frozen_importlib_external._NamespaceLoader": [],
    "_frozen_importlib_external._NamespaceLoader.__init__": [
        "_frozen_importlib_external._NamespacePath.__init__"
    ],
    "_frozen_importlib_external._NamespaceLoader.module_repr": [],
    "_frozen_importlib_external._NamespaceLoader.is_package": [],
    "_frozen_importlib_external._NamespaceLoader.get_source": [],
    "_frozen_importlib_external._NamespaceLoader.get_code": [
        "<builtin>.compile"
    ],
    "_frozen_importlib_external._NamespaceLoader.create_module": [],
    "_frozen_importlib_external._NamespaceLoader.exec_module": [],
    "_frozen_importlib_external._NamespaceLoader.load_module": [],
    "_frozen_importlib_external.PathFinder": [],
    "_frozen_importlib_external.PathFinder.invalidate_caches": [
        "<builtin>.hasattr",
        "<builtin>.list"
    ],
    "_frozen_importlib_external.PathFinder._path_hooks": [],
    "_frozen_importlib_external.PathFinder._path_importer_cache": [
        "_frozen_importlib_external.PathFinder._path_hooks"
    ],
    "_frozen_importlib_external.PathFinder._legacy_get_spec": [
        "<builtin>.hasattr"
    ],
    "_frozen_importlib_external.PathFinder.find_spec": [
        "_frozen_importlib_external.PathFinder._get_spec",
        "_frozen_importlib_external._NamespacePath.__init__"
    ],
    "_frozen_importlib_external.PathFinder.find_module": [
        "_frozen_importlib_external.PathFinder.find_spec"
    ],
    "_frozen_importlib_external.FileFinder": [],
    "_frozen_importlib_external.FileFinder.__init__": [
        "<builtin>.set"
    ],
    "_frozen_importlib_external.FileFinder.invalidate_caches": [],
    "_frozen_importlib_external.FileFinder.find_loader": [
        "_frozen_importlib_external.FileFinder.find_spec"
    ],
    "_frozen_importlib_external.FileFinder.find_spec": [
        "_frozen_importlib_external._path_stat",
        "_frozen_importlib_external.FileFinder._get_spec",
        "_frozen_importlib_external._path_isfile",
        "_frozen_importlib_external._path_join",
        "_frozen_importlib_external.FileFinder._fill_cache"
    ],
    "_frozen_importlib_external.FileFinder._get_spec": [
        "_frozen_importlib_external.spec_from_file_location"
    ],
    "_frozen_importlib_external.FileFinder._fill_cache": [
        "<builtin>.set"
    ],
    "_frozen_importlib_external.FileFinder.path_hook": [],
    "_frozen_importlib_external.FileFinder.path_hook.path_hook_for_FileFinder": [
        "<builtin>.ImportError",
        "_frozen_importlib_external._path_isdir",
        "_frozen_importlib_external.FileFinder.__init__"
    ],
    "_frozen_importlib_external.FileFinder.__repr__": [],
    "_frozen_importlib_external._fix_up_module": [
        "_frozen_importlib_external.FileLoader.__init__",
        "_frozen_importlib_external.spec_from_file_location"
    ],
    "_frozen_importlib._builtin_from_name": [
        "<builtin>.ImportError",
        "_frozen_importlib.BuiltinImporter.find_spec",
        "_frozen_importlib._load_unlocked"
    ],
    "_bootstrap._builtin_from_name": [],
    "_bootstrap._imp.extension_suffixes": [],
    "_frozen_importlib_external._install": [
        "_frozen_importlib_external._get_supported_file_loaders",
        "_frozen_importlib_external._setup"
    ],
    "_frozen_importlib": [
        "_frozen_importlib.ModuleSpec",
        "_frozen_importlib.FrozenImporter",
        "<builtin>.object",
        "_frozen_importlib._ModuleLockManager",
        "_frozen_importlib._ImportLockContext",
        "_frozen_importlib._DeadlockError",
        "_frozen_importlib._DummyModuleLock",
        "_frozen_importlib._ModuleLock",
        "_frozen_importlib.BuiltinImporter"
    ],
    "_frozen_importlib._wrap": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.setattr"
    ],
    "_frozen_importlib._new_module": [
        "<builtin>.type"
    ],
    "_frozen_importlib._DeadlockError": [],
    "_frozen_importlib._ModuleLock": [],
    "_frozen_importlib._ModuleLock.__init__": [],
    "_frozen_importlib._ModuleLock.has_deadlock": [],
    "_frozen_importlib._ModuleLock.acquire": [
        "_frozen_importlib._ModuleLock.has_deadlock"
    ],
    "_frozen_importlib._ModuleLock.release": [
        "<builtin>.RuntimeError"
    ],
    "_frozen_importlib._ModuleLock.__repr__": [
        "<builtin>.id"
    ],
    "_frozen_importlib._DummyModuleLock": [],
    "_frozen_importlib._DummyModuleLock.__init__": [],
    "_frozen_importlib._DummyModuleLock.acquire": [],
    "_frozen_importlib._DummyModuleLock.release": [
        "<builtin>.RuntimeError"
    ],
    "_frozen_importlib._DummyModuleLock.__repr__": [
        "<builtin>.id"
    ],
    "_frozen_importlib._ModuleLockManager": [],
    "_frozen_importlib._ModuleLockManager.__init__": [],
    "_frozen_importlib._ModuleLockManager.__enter__": [
        "_frozen_importlib._ModuleLock.acquire",
        "_frozen_importlib._get_module_lock",
        "_frozen_importlib._DummyModuleLock.acquire"
    ],
    "_frozen_importlib._get_module_lock": [
        "_frozen_importlib._ModuleLock.__init__",
        "_frozen_importlib._DummyModuleLock.__init__"
    ],
    "_frozen_importlib._ModuleLockManager.__exit__": [
        "_frozen_importlib._DummyModuleLock.release",
        "_frozen_importlib._ModuleLock.release"
    ],
    "_frozen_importlib._get_module_lock.cb": [],
    "_frozen_importlib._lock_unlock_module": [
        "_frozen_importlib._ModuleLock.release",
        "_frozen_importlib._ModuleLock.acquire",
        "_frozen_importlib._DummyModuleLock.release",
        "_frozen_importlib._get_module_lock",
        "_frozen_importlib._DummyModuleLock.acquire"
    ],
    "_frozen_importlib._call_with_frames_removed": [
        "_frozen_importlib._gcd_import"
    ],
    "_frozen_importlib._verbose_message": [
        "<builtin>.print"
    ],
    "_frozen_importlib._requires_builtin": [
        "_frozen_importlib._wrap"
    ],
    "_frozen_importlib._requires_builtin._requires_builtin_wrapper": [
        "<builtin>.ImportError",
        "_frozen_importlib.BuiltinImporter.is_package",
        "_frozen_importlib.BuiltinImporter.get_source",
        "_frozen_importlib.BuiltinImporter.get_code"
    ],
    "_frozen_importlib.BuiltinImporter.is_package": [],
    "_frozen_importlib.BuiltinImporter.get_source": [],
    "_frozen_importlib.BuiltinImporter.get_code": [],
    "_frozen_importlib._requires_frozen": [
        "_frozen_importlib._wrap"
    ],
    "_frozen_importlib._requires_frozen._requires_frozen_wrapper": [
        "<builtin>.ImportError",
        "_frozen_importlib.FrozenImporter.get_code",
        "_frozen_importlib.FrozenImporter.is_package",
        "_frozen_importlib.FrozenImporter.get_source"
    ],
    "_frozen_importlib.FrozenImporter.get_code": [],
    "_frozen_importlib.FrozenImporter.is_package": [],
    "_frozen_importlib.FrozenImporter.get_source": [],
    "_frozen_importlib._load_module_shim": [
        "_frozen_importlib.spec_from_loader",
        "_frozen_importlib._load",
        "_frozen_importlib._exec"
    ],
    "_frozen_importlib.spec_from_loader": [
        "_frozen_importlib.FrozenImporter.is_package",
        "_frozen_importlib.ModuleSpec.__init__",
        "_frozen_importlib.BuiltinImporter.is_package",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib._load": [
        "_frozen_importlib._ModuleLockManager.__init__",
        "_frozen_importlib._load_unlocked"
    ],
    "_frozen_importlib._module_repr": [
        "<builtin>.getattr",
        "_frozen_importlib._module_repr_from_spec",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib._module_repr_from_spec": [],
    "_frozen_importlib.ModuleSpec": [],
    "_frozen_importlib.ModuleSpec.__init__": [],
    "_frozen_importlib.ModuleSpec.__repr__": [],
    "_frozen_importlib.ModuleSpec.__eq__": [],
    "_frozen_importlib.ModuleSpec.cached": [],
    "_frozen_importlib.ModuleSpec.parent": [],
    "_frozen_importlib.ModuleSpec.has_location": [
        "<builtin>.bool"
    ],
    "_frozen_importlib._spec_from_module": [
        "_frozen_importlib.ModuleSpec.__init__",
        "<builtin>.list"
    ],
    "_frozen_importlib._init_module_attrs": [
        "<builtin>.getattr"
    ],
    "_frozen_importlib.module_from_spec": [
        "<builtin>.ImportError",
        "_frozen_importlib._init_module_attrs",
        "_frozen_importlib.BuiltinImporter.create_module",
        "_frozen_importlib._new_module",
        "<builtin>.hasattr",
        "_frozen_importlib.FrozenImporter.create_module"
    ],
    "_frozen_importlib.FrozenImporter.create_module": [],
    "_frozen_importlib.BuiltinImporter.create_module": [
        "<builtin>.ImportError",
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib.FrozenImporter.load_module": [
        "_frozen_importlib._load_module_shim"
    ],
    "_frozen_importlib.BuiltinImporter.exec_module": [
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib.FrozenImporter.exec_module": [
        "<builtin>.ImportError",
        "<builtin>.exec",
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib._load_backward_compatible": [
        "_frozen_importlib.FrozenImporter.load_module",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib._load_unlocked": [
        "<builtin>.ImportError",
        "_frozen_importlib.module_from_spec",
        "_frozen_importlib._load_backward_compatible",
        "_frozen_importlib._verbose_message",
        "<builtin>.hasattr",
        "_frozen_importlib.BuiltinImporter.exec_module",
        "_frozen_importlib.FrozenImporter.exec_module"
    ],
    "_frozen_importlib.BuiltinImporter": [
        "_frozen_importlib._requires_builtin",
        "<builtin>.classmethod"
    ],
    "_frozen_importlib.BuiltinImporter.module_repr": [],
    "_frozen_importlib.BuiltinImporter.find_spec": [
        "_frozen_importlib.spec_from_loader"
    ],
    "_frozen_importlib.BuiltinImporter.find_module": [
        "_frozen_importlib.BuiltinImporter.find_spec"
    ],
    "<builtin>.classmethod": [],
    "_frozen_importlib.FrozenImporter": [
        "_frozen_importlib._requires_frozen"
    ],
    "_frozen_importlib.FrozenImporter.module_repr": [],
    "_frozen_importlib.FrozenImporter.find_spec": [
        "_frozen_importlib.spec_from_loader"
    ],
    "_frozen_importlib.FrozenImporter.find_module": [],
    "_frozen_importlib._ImportLockContext": [],
    "_frozen_importlib._ImportLockContext.__enter__": [],
    "_frozen_importlib._ImportLockContext.__exit__": [],
    "_frozen_importlib._resolve_name": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "_frozen_importlib._find_spec_legacy": [
        "_frozen_importlib.spec_from_loader"
    ],
    "_frozen_importlib._sanity_check": [
        "<builtin>.ImportError",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "_frozen_importlib._find_and_load_unlocked": [
        "<builtin>.ModuleNotFoundError",
        "_frozen_importlib._load_unlocked",
        "<builtin>.setattr",
        "_frozen_importlib._call_with_frames_removed",
        "_frozen_importlib._find_spec"
    ],
    "_frozen_importlib._find_and_load": [
        "_frozen_importlib._ModuleLockManager.__init__",
        "_frozen_importlib._find_and_load_unlocked",
        "<builtin>.ModuleNotFoundError",
        "_frozen_importlib._lock_unlock_module"
    ],
    "_frozen_importlib._handle_fromlist": [
        "_frozen_importlib._handle_fromlist",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.hasattr",
        "_frozen_importlib._call_with_frames_removed",
        "<builtin>.isinstance"
    ],
    "_frozen_importlib._calc___package__": [],
    "_frozen_importlib.__import__": [
        "_frozen_importlib._handle_fromlist",
        "_frozen_importlib._calc___package__",
        "_frozen_importlib._gcd_import",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "_imp.is_frozen": [],
    "_frozen_importlib._install": [
        "_frozen_importlib._setup"
    ],
    "csv.Dialect": [],
    "csv.Dialect.__init__": [
        "csv.Dialect._validate"
    ],
    "csv.Dialect._validate": [
        "<builtin>.str"
    ],
    "csv.excel": [],
    "csv.excel_tab": [],
    "csv.unix_dialect": [],
    "csv.DictReader": [],
    "csv.DictReader.__init__": [],
    "csv.DictReader.__iter__": [],
    "csv.DictReader.fieldnames": [
        "<builtin>.next"
    ],
    "csv.DictReader.__next__": [
        "<builtin>.dict",
        "<builtin>.len",
        "<builtin>.next",
        "<builtin>.zip"
    ],
    "csv.DictWriter": [],
    "csv.DictWriter.__init__": [
        "<builtin>.ValueError"
    ],
    "csv.DictWriter.writeheader": [
        "<builtin>.dict",
        "csv.DictWriter.writerow",
        "<builtin>.zip"
    ],
    "csv.DictWriter.writerow": [
        "csv.DictWriter._dict_to_list"
    ],
    "csv.DictWriter._dict_to_list": [
        "<builtin>.ValueError",
        "<builtin>.repr"
    ],
    "csv.DictWriter.writerows": [
        "<builtin>.map"
    ],
    "csv.Sniffer": [],
    "csv.Sniffer.__init__": [],
    "csv.Sniffer.sniff": [
        "csv.Sniffer._guess_quote_and_delimiter",
        "csv.Sniffer.sniff.dialect",
        "csv.Sniffer._guess_delimiter"
    ],
    "csv.Sniffer._guess_quote_and_delimiter": [
        "<builtin>.max",
        "re.escape",
        "re.compile"
    ],
    "csv.Sniffer._guess_delimiter": [
        "<builtin>.chr",
        "<builtin>.float",
        "<builtin>.max",
        "<builtin>.list",
        "<builtin>.min",
        "<builtin>.sum",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.filter"
    ],
    "csv.Sniffer.sniff.dialect": [],
    "csv.Sniffer._guess_delimiter.<lambda1>": [],
    "csv.Sniffer.has_header": [
        "<builtin>.next",
        "csv.Sniffer.sniff",
        "<builtin>.list",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.range",
        "_io.StringIO"
    ],
    "importlib.abc._register": [
        "_bootstrap_external.FileLoader.register",
        "_bootstrap_external.SourceLoader.register",
        "<builtin>.getattr"
    ],
    "_bootstrap_external.FileLoader.register": [],
    "_bootstrap_external.SourceLoader.register": [],
    "importlib.abc.Finder": [
        "abc.abstractmethod"
    ],
    "importlib.abc.Finder.find_module": [],
    "importlib.abc.MetaPathFinder": [],
    "importlib.abc.MetaPathFinder.find_module": [
        "warnings.warn",
        "<builtin>.hasattr"
    ],
    "importlib.abc.MetaPathFinder.invalidate_caches": [],
    "importlib.abc.PathEntryFinder": [],
    "importlib.abc.PathEntryFinder.find_loader": [
        "warnings.warn",
        "<builtin>.hasattr"
    ],
    "importlib.abc.PathEntryFinder.invalidate_caches": [],
    "importlib.abc.Loader": [],
    "importlib.abc.Loader.create_module": [],
    "importlib.abc.Loader.load_module": [
        "<builtin>.hasattr",
        "_bootstrap._load_module_shim"
    ],
    "_bootstrap._load_module_shim": [],
    "importlib.abc.Loader.module_repr": [],
    "importlib.abc.ResourceLoader": [
        "abc.abstractmethod"
    ],
    "importlib.abc.ResourceLoader.get_data": [],
    "importlib.abc.InspectLoader": [
        "abc.abstractmethod"
    ],
    "importlib.abc.InspectLoader.is_package": [],
    "importlib.abc.InspectLoader.get_code": [
        "importlib.abc.InspectLoader.source_to_code",
        "importlib.abc.InspectLoader.get_source"
    ],
    "importlib.abc.InspectLoader.get_source": [],
    "importlib.abc.InspectLoader.source_to_code": [
        "<builtin>.compile"
    ],
    "importlib.abc.ExecutionLoader": [
        "abc.abstractmethod"
    ],
    "importlib.abc.ExecutionLoader.get_filename": [],
    "importlib.abc.ExecutionLoader.get_code": [
        "importlib.abc.InspectLoader.source_to_code",
        "importlib.abc.ExecutionLoader.get_filename",
        "importlib.abc.InspectLoader.get_source"
    ],
    "importlib.abc.FileLoader": [],
    "importlib.abc.SourceLoader": [],
    "importlib.abc.SourceLoader.path_mtime": [
        "importlib.abc.SourceLoader.path_stats",
        "<builtin>.int"
    ],
    "importlib.abc.SourceLoader.path_stats": [
        "importlib.abc.SourceLoader.path_mtime"
    ],
    "importlib.abc.SourceLoader.set_data": [],
    "importlib.abc.ResourceReader": [
        "abc.abstractmethod"
    ],
    "importlib.abc.ResourceReader.open_resource": [],
    "importlib.abc.ResourceReader.resource_path": [],
    "importlib.abc.ResourceReader.is_resource": [],
    "importlib.abc.ResourceReader.contents": [],
    "os.path._get_sep": [
        "<builtin>.isinstance"
    ],
    "os.path.normcase": [],
    "os.path.isabs": [
        "os.path._get_sep"
    ],
    "os.path.join": [
        "genericpath._check_arg_types",
        "<builtin>.map",
        "os.path._get_sep"
    ],
    "os.path.split": [
        "<builtin>.len",
        "os.path._get_sep"
    ],
    "os.path.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "os.path.splitdrive": [],
    "os.path.basename": [
        "os.path._get_sep"
    ],
    "os.path.dirname": [
        "<builtin>.len",
        "os.path._get_sep"
    ],
    "os.path.islink": [
        "stat.S_ISLNK"
    ],
    "os.path.lexists": [],
    "os.path.ismount": [
        "<builtin>.isinstance",
        "os.path.join",
        "stat.S_ISLNK",
        "os.path.realpath"
    ],
    "os.path.realpath": [
        "os.path._joinrealpath",
        "os.path.abspath"
    ],
    "os.path.expanduser": [
        "pwd.getpwnam",
        "os.path._get_sep",
        "pwd.getpwuid",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "os.path.normpath": [
        "<builtin>.isinstance",
        "posixpath.split",
        "ntpath.split"
    ],
    "os.path.abspath": [
        "<builtin>.isinstance",
        "os.path.join",
        "os.path.isabs",
        "os.path.normpath"
    ],
    "os.path._joinrealpath": [
        "os.path._joinrealpath",
        "os.path.join",
        "os.path.split",
        "<builtin>.isinstance",
        "os.path.islink",
        "os.path.isabs"
    ],
    "os.path.relpath": [
        "<builtin>.ValueError",
        "os.path.join",
        "<builtin>.len",
        "os.path.abspath",
        "genericpath.commonprefix",
        "<builtin>.isinstance",
        "genericpath._check_arg_types"
    ],
    "os.path.commonpath": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.map",
        "ntpath.split",
        "<builtin>.set",
        "<builtin>.enumerate",
        "genericpath._check_arg_types",
        "<builtin>.isinstance",
        "posixpath.split"
    ],
    "importlib.machinery.all_suffixes": [],
    "bz2.BZ2File": [],
    "bz2.BZ2File.__init__": [
        "<builtin>.ValueError",
        "threading.RLock",
        "io.BufferedReader",
        "warnings.warn",
        "builtins.open",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "_compression.DecompressReader.__init__"
    ],
    "_compression.DecompressReader.__init__": [],
    "sys.path.write": [],
    "sys.base_prefix.write": [],
    "sys.base_prefix.close": [],
    "tarfile.TarFile.close": [
        "lzma.LZMAFile.close",
        "bz2.BZ2File.write",
        "tarfile._Stream.write",
        "tarfile._Stream.close",
        "gzip.GzipFile.close",
        "bz2.BZ2File.close",
        "<builtin>.divmod",
        "gzip.GzipFile.write",
        "lzma.LZMAFile.write"
    ],
    "sys.path.close": [],
    "bz2.BZ2File.closed": [],
    "bz2.BZ2File.fileno": [
        "sys.path.fileno",
        "sys.base_prefix.fileno",
        "_compression.BaseStream._check_not_closed"
    ],
    "_compression.BaseStream._check_not_closed": [
        "<builtin>.ValueError"
    ],
    "sys.path.fileno": [],
    "sys.base_prefix.fileno": [],
    "bz2.BZ2File.seekable": [
        "bz2.BZ2File.readable"
    ],
    "bz2.BZ2File.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.peek": [
        "_compression.BaseStream._check_can_read"
    ],
    "_compression.BaseStream._check_can_read": [
        "bz2.BZ2File.readable",
        "io.UnsupportedOperation",
        "lzma.LZMAFile.readable",
        "gzip.GzipFile.readable"
    ],
    "bz2.BZ2File.read1": [
        "_compression.BaseStream._check_can_read"
    ],
    "bz2.BZ2File.readinto": [
        "_compression.BaseStream._check_can_read"
    ],
    "bz2.BZ2File.readline": [
        "_compression.BaseStream._check_can_read",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "bz2.BZ2File.readlines": [
        "_compression.BaseStream._check_can_read",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "_compression.BaseStream._check_can_write": [
        "io.UnsupportedOperation",
        "gzip.GzipFile.writable",
        "bz2.BZ2File.writable",
        "lzma.LZMAFile.writable"
    ],
    "bz2.BZ2File.writelines": [
        "bz2.BZ2File.writelines"
    ],
    "_compression.BaseStream._check_can_seek": [
        "bz2.BZ2File.readable",
        "bz2.BZ2File.seekable",
        "lzma.LZMAFile.readable",
        "gzip.GzipFile.seekable",
        "gzip.GzipFile.readable",
        "io.UnsupportedOperation",
        "lzma.LZMAFile.seekable"
    ],
    "bz2.BZ2File.tell": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.open": [
        "bz2.BZ2File.__init__",
        "<builtin>.ValueError",
        "io.TextIOWrapper"
    ],
    "bz2.compress": [],
    "bz2.decompress": [
        "<builtin>.ValueError"
    ],
    "_compression.BaseStream": [],
    "lzma.LZMAFile.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.readable": [],
    "gzip.GzipFile.writable": [],
    "lzma.LZMAFile.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.seekable": [
        "lzma.LZMAFile.readable"
    ],
    "gzip.GzipFile.seekable": [],
    "_compression.DecompressReader": [],
    "_compression.DecompressReader.readable": [],
    "_compression.DecompressReader.seekable": [
        "sys.base_prefix.seekable",
        "sys.path.seekable"
    ],
    "sys.base_prefix.seekable": [],
    "sys.path.seekable": [],
    "_compression.DecompressReader.readinto": [
        "_compression.DecompressReader.read",
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "_compression.DecompressReader.read": [
        "sys.base_prefix.read",
        "sys.path.read",
        "<builtin>.EOFError",
        "<builtin>.len",
        "_io._RawIOBase.readall"
    ],
    "_io._RawIOBase.readall": [],
    "sys.path.read": [],
    "sys.base_prefix.read": [],
    "_compression.DecompressReader._rewind": [
        "sys.path.seek",
        "sys.base_prefix.seek"
    ],
    "sys.path.seek": [],
    "sys.base_prefix.seek": [],
    "_compression.DecompressReader.seek": [
        "_compression.DecompressReader._rewind",
        "<builtin>.ValueError",
        "_compression.DecompressReader.read",
        "<builtin>.min",
        "<builtin>.len"
    ],
    "_compression.DecompressReader.tell": [],
    "lzma.LZMAFile": [],
    "lzma.LZMAFile.__init__": [
        "<builtin>.ValueError",
        "io.BufferedReader",
        "builtins.open",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "_compression.DecompressReader.__init__"
    ],
    "lzma.LZMAFile.closed": [],
    "lzma.LZMAFile.fileno": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.peek": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.read1": [
        "_compression.BaseStream._check_can_read"
    ],
    "lzma.LZMAFile.tell": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.open": [
        "io.TextIOWrapper",
        "lzma.LZMAFile.__init__",
        "<builtin>.ValueError"
    ],
    "lzma.compress": [],
    "lzma.decompress": [],
    "tarfile.stn": [
        "<builtin>.len"
    ],
    "tarfile.nts": [],
    "tarfile.nti": [
        "tarfile.nts",
        "<builtin>.int",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "tarfile.itn": [
        "<builtin>.ValueError",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.range",
        "<builtin>.int"
    ],
    "tarfile.calc_chksums": [
        "<builtin>.sum"
    ],
    "tarfile.copyfileobj": [
        "shutil.copyfileobj",
        "gzip.GzipFile.read",
        "bz2.BZ2File.write",
        "tarfile._Stream.write",
        "gzip.GzipFile.write",
        "lzma.LZMAFile.read",
        "tarfile._Stream.read",
        "<builtin>.divmod",
        "<builtin>.range",
        "bz2.BZ2File.read",
        "<builtin>.len",
        "lzma.LZMAFile.write"
    ],
    "tarfile._Stream.read": [
        "<builtin>.len",
        "tarfile._Stream._read"
    ],
    "tarfile._Stream.write": [
        "tarfile._Stream.__write",
        "<builtin>.len"
    ],
    "tarfile._safe_print": [
        "<builtin>.getattr",
        "<builtin>.print"
    ],
    "tarfile.TarError": [],
    "tarfile.ExtractError": [],
    "tarfile.ReadError": [],
    "tarfile.CompressionError": [],
    "tarfile.StreamError": [],
    "tarfile.HeaderError": [],
    "tarfile.EmptyHeaderError": [],
    "tarfile.TruncatedHeaderError": [],
    "tarfile.EOFHeaderError": [],
    "tarfile.InvalidHeaderError": [],
    "tarfile.SubsequentHeaderError": [],
    "tarfile._LowLevelFile": [],
    "tarfile._LowLevelFile.__init__": [
        "<builtin>.hasattr"
    ],
    "tarfile._LowLevelFile.close": [],
    "tarfile._LowLevelFile.read": [],
    "tarfile._LowLevelFile.write": [],
    "tarfile._Stream": [],
    "tarfile._StreamProxy.__init__": [
        "tarfile._StreamProxy.read",
        "tarfile._LowLevelFile.read"
    ],
    "tarfile._StreamProxy.getcomptype": [],
    "tarfile._Stream._init_read_gz": [
        "<builtin>.ord",
        "tarfile._Stream.read",
        "tarfile._Stream.__read"
    ],
    "tarfile._Stream._init_write_gz": [
        "tarfile._Stream.__write",
        "<builtin>.int",
        "time.time"
    ],
    "tarfile._StreamProxy.close": [
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.close"
    ],
    "tarfile._Stream.__del__": [
        "tarfile._Stream.close",
        "<builtin>.hasattr"
    ],
    "tarfile._Stream.close": [
        "tarfile._LowLevelFile.write",
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.close"
    ],
    "tarfile._Stream.__write": [
        "tarfile._LowLevelFile.write",
        "<builtin>.len"
    ],
    "tarfile._Stream.__read": [
        "tarfile._StreamProxy.read",
        "tarfile._LowLevelFile.read",
        "<builtin>.len"
    ],
    "tarfile._Stream.tell": [],
    "tarfile._Stream.seek": [
        "<builtin>.range",
        "tarfile._Stream.read",
        "<builtin>.divmod"
    ],
    "tarfile._Stream._read": [
        "tarfile._StreamProxy.read",
        "<builtin>.len",
        "tarfile._LowLevelFile.read",
        "tarfile._Stream.__read"
    ],
    "tarfile._StreamProxy.read": [],
    "tarfile._StreamProxy": [],
    "tarfile._FileInFile": [],
    "tarfile._FileInFile.__init__": [
        "<builtin>.getattr"
    ],
    "tarfile._FileInFile.flush": [],
    "tarfile._FileInFile.readable": [],
    "tarfile._FileInFile.writable": [],
    "tarfile._FileInFile.seekable": [],
    "tarfile._FileInFile.tell": [],
    "tarfile._FileInFile.seek": [
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.ValueError"
    ],
    "tarfile._FileInFile.read": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "tarfile._FileInFile.readinto": [
        "tarfile._FileInFile.read",
        "<builtin>.len"
    ],
    "tarfile._FileInFile.close": [],
    "tarfile.ExFileObject": [],
    "tarfile.ExFileObject.__init__": [
        "tarfile._FileInFile.__init__",
        "<builtin>.super"
    ],
    "tarfile.TarInfo": [
        "<builtin>.dict"
    ],
    "tarfile.TarInfo.__init__": [],
    "tarfile.TarInfo.path": [],
    "tarfile.TarInfo.linkpath": [],
    "tarfile.TarInfo.__repr__": [
        "<builtin>.id"
    ],
    "tarfile.TarInfo.get_info": [],
    "tarfile.TarInfo.tobuf": [
        "tarfile.TarInfo.create_ustar_header",
        "<builtin>.ValueError",
        "tarfile.TarInfo.create_gnu_header",
        "tarfile.TarInfo.create_pax_header",
        "tarfile.TarInfo.get_info"
    ],
    "tarfile.TarInfo.create_ustar_header": [
        "<builtin>.ValueError",
        "tarfile.TarInfo._create_header",
        "tarfile.TarInfo._posix_split_name",
        "<builtin>.len"
    ],
    "tarfile.TarInfo.create_gnu_header": [
        "tarfile.TarInfo._create_gnu_long_header",
        "tarfile.TarInfo._create_header",
        "<builtin>.len"
    ],
    "tarfile.TarInfo.create_pax_header": [
        "tarfile.TarInfo._create_header",
        "tarfile.TarInfo._create_pax_generic_header",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "tarfile.TarInfo._posix_split_name": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "tarfile.TarInfo._create_header": [
        "tarfile.calc_chksums",
        "<builtin>.bytes",
        "tarfile.itn",
        "tarfile.stn"
    ],
    "tarfile.TarInfo._create_gnu_long_header": [
        "tarfile.TarInfo._create_header",
        "tarfile.TarInfo._create_payload",
        "<builtin>.len"
    ],
    "tarfile.TarInfo._create_pax_generic_header": [
        "tarfile.TarInfo._create_header",
        "<builtin>.bytes",
        "tarfile.TarInfo._create_payload",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "tarfile.TarInfo.create_pax_global_header": [
        "tarfile.TarInfo._create_pax_generic_header"
    ],
    "tarfile.TarInfo._create_payload": [
        "<builtin>.len",
        "<builtin>.divmod"
    ],
    "tarfile.TarInfo.frombuf": [
        "tarfile.nts",
        "tarfile.nti",
        "tarfile.calc_chksums",
        "<builtin>.len",
        "<builtin>.range",
        "tarfile.TarInfo.__init__",
        "<builtin>.bool"
    ],
    "tarfile.TarInfo.fromtarfile": [
        "gzip.GzipFile.read",
        "tarfile.TarInfo.frombuf",
        "lzma.LZMAFile.read",
        "tarfile._Stream.tell",
        "tarfile._Stream.read",
        "bz2.BZ2File.read",
        "bz2.BZ2File.tell",
        "lzma.LZMAFile.tell"
    ],
    "tarfile.TarInfo._proc_member": [
        "tarfile.TarInfo._proc_pax",
        "tarfile.TarInfo._proc_sparse",
        "tarfile.TarInfo._proc_builtin",
        "tarfile.TarInfo._proc_gnulong"
    ],
    "tarfile.TarInfo._proc_gnulong": [
        "tarfile.nts",
        "tarfile.TarInfo._block",
        "tarfile.TarInfo.fromtarfile"
    ],
    "tarfile.TarInfo._proc_sparse": [
        "tarfile.nti",
        "tarfile.TarInfo._block",
        "<builtin>.bool",
        "<builtin>.range"
    ],
    "tarfile.TarInfo._proc_pax": [
        "tarfile.TarInfo._decode_pax_field",
        "re.search",
        "tarfile.TarInfo._block",
        "tarfile.TarInfo._proc_gnusparse_00",
        "tarfile.TarInfo._proc_gnusparse_10",
        "tarfile.TarInfo._proc_gnusparse_01",
        "re.compile",
        "<builtin>.int",
        "tarfile.TarInfo.fromtarfile"
    ],
    "tarfile.TarInfo._proc_builtin": [
        "tarfile.TarInfo._apply_pax_info",
        "tarfile.TarInfo._block",
        "tarfile.TarInfo.isreg"
    ],
    "tarfile.TarInfo.isreg": [],
    "tarfile.TarInfo._block": [
        "<builtin>.divmod"
    ],
    "tarfile.TarInfo._apply_pax_info": [
        "<builtin>.int",
        "<builtin>.setattr"
    ],
    "tarfile.TarInfo._decode_pax_field": [],
    "tarfile.TarInfo._proc_gnusparse_01": [
        "<builtin>.int",
        "<builtin>.list",
        "<builtin>.zip"
    ],
    "tarfile.TarInfo._proc_gnusparse_00": [
        "<builtin>.int",
        "re.finditer",
        "<builtin>.list",
        "<builtin>.zip"
    ],
    "tarfile.TarInfo._proc_gnusparse_10": [
        "<builtin>.list",
        "<builtin>.int",
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "tarfile.TarInfo.isfile": [
        "tarfile.TarInfo.isreg"
    ],
    "tarfile.TarInfo.isdir": [],
    "tarfile.TarInfo.issym": [],
    "tarfile.TarInfo.islnk": [],
    "tarfile.TarInfo.ischr": [],
    "tarfile.TarInfo.isblk": [],
    "tarfile.TarInfo.isfifo": [],
    "tarfile.TarInfo.issparse": [],
    "tarfile.TarInfo.isdev": [],
    "tarfile.TarFile": [],
    "tarfile.TarFile.__init__": [
        "posixpath.abspath",
        "lzma.LZMAFile.close",
        "gzip.GzipFile.seek",
        "tarfile.TarInfo.create_pax_global_header",
        "tarfile._Stream.close",
        "posixpath.exists",
        "bz2.BZ2File.close",
        "<builtin>.hasattr",
        "<builtin>.len",
        "gzip.GzipFile.write",
        "<builtin>.isinstance",
        "bz2.BZ2File.tell",
        "bz2.BZ2File.write",
        "tarfile._Stream.write",
        "lzma.LZMAFile.tell",
        "tarfile.TarInfo.fromtarfile",
        "lzma.LZMAFile.write",
        "<builtin>.ValueError",
        "ntpath.exists",
        "<builtin>.str",
        "tarfile._Stream.tell",
        "ntpath.abspath",
        "tarfile._Stream.seek",
        "tarfile.TarFile.next",
        "gzip.GzipFile.close",
        "builtins.open",
        "lzma.LZMAFile.seek",
        "bz2.BZ2File.seek"
    ],
    "tarfile.TarFile.next": [
        "bz2.BZ2File.tell",
        "tarfile._Stream.seek",
        "gzip.GzipFile.read",
        "bz2.BZ2File.seek",
        "gzip.GzipFile.seek",
        "lzma.LZMAFile.read",
        "tarfile.TarFile._check",
        "<builtin>.str",
        "lzma.LZMAFile.seek",
        "tarfile._Stream.read",
        "bz2.BZ2File.read",
        "tarfile.TarFile._dbg",
        "tarfile._Stream.tell",
        "tarfile.TarInfo.fromtarfile",
        "lzma.LZMAFile.tell"
    ],
    "tarfile.TarFile.open": [
        "lzma.LZMAFile.close",
        "tarfile.TarFile.__init__",
        "<builtin>.ValueError",
        "tarfile._Stream.close",
        "<builtin>.sorted",
        "tarfile._Stream.__init__",
        "gzip.GzipFile.close",
        "bz2.BZ2File.close",
        "tarfile.TarFile.taropen",
        "<builtin>.getattr"
    ],
    "tarfile.TarFile.open.not_compressed": [],
    "tarfile.TarFile.taropen": [
        "tarfile.TarFile.__init__",
        "<builtin>.ValueError"
    ],
    "gzip.GzipFile.__init__": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "io.BufferedReader",
        "gzip.GzipFile._write_gzip_header",
        "builtins.open",
        "gzip._GzipReader.__init__",
        "<builtin>.isinstance",
        "gzip.GzipFile._init_write"
    ],
    "tarfile.TarFile.getmember": [
        "<builtin>.KeyError",
        "tarfile.TarFile._getmember"
    ],
    "tarfile.TarFile._getmember": [
        "<builtin>.reversed",
        "posixpath.normpath",
        "tarfile.TarFile.getmembers",
        "ntpath.normpath"
    ],
    "tarfile.TarFile.getmembers": [
        "tarfile.TarFile._load",
        "tarfile.TarFile._check"
    ],
    "tarfile.TarFile._check": [
        "<builtin>.OSError"
    ],
    "tarfile.TarFile._load": [
        "tarfile.TarFile.next"
    ],
    "tarfile.TarFile.getnames": [
        "tarfile.TarFile.getmembers"
    ],
    "tarfile.TarFile.gettarinfo": [
        "stat.S_ISDIR",
        "sys.path.lstrip",
        "ntpath.splitdrive",
        "stat.S_ISCHR",
        "stat.S_ISFIFO",
        "tarfile.TarFile._check",
        "posixpath.splitdrive",
        "sys.base_prefix.lstrip",
        "stat.S_ISREG",
        "stat.S_ISBLK",
        "pwd.getpwuid",
        "sys.base_prefix.replace",
        "stat.S_ISLNK",
        "<builtin>.hasattr",
        "tarfile.TarInfo.__init__",
        "sys.path.replace"
    ],
    "tarfile.TarFile.list": [
        "time.localtime",
        "tarfile._safe_print",
        "<builtin>.print",
        "tarfile.TarFile._check",
        "stat.filemode",
        "tarfile.TarFile.__iter__"
    ],
    "tarfile.TarFile.add": [
        "posixpath.abspath",
        "tarfile.TarInfo.isreg",
        "posixpath.join",
        "<builtin>.sorted",
        "tarfile.TarInfo.isdir",
        "tarfile.TarFile._check",
        "tarfile.TarFile.addfile",
        "tarfile.TarFile.gettarinfo",
        "builtins.open",
        "ntpath.join",
        "tarfile.TarFile._dbg",
        "tarfile.TarFile.add",
        "ntpath.abspath"
    ],
    "tarfile.TarFile._dbg": [
        "<builtin>.print"
    ],
    "tarfile.TarFile.addfile": [
        "tarfile.TarInfo.tobuf",
        "bz2.BZ2File.write",
        "tarfile._Stream.write",
        "tarfile.TarFile._check",
        "tarfile.copyfileobj",
        "<builtin>.len",
        "<builtin>.divmod",
        "gzip.GzipFile.write",
        "lzma.LZMAFile.write"
    ],
    "tarfile.TarFile.extractall": [
        "tarfile.TarFile.chmod",
        "tarfile.TarFile._dbg",
        "posixpath.join",
        "tarfile.TarFile.utime",
        "tarfile.TarFile.chown",
        "tarfile.TarFile.extract",
        "ntpath.join",
        "tarfile.TarFile.__iter__"
    ],
    "tarfile.TarFile.extract": [
        "tarfile.TarFile.getmember",
        "tarfile.TarFile._dbg",
        "posixpath.join",
        "tarfile.TarFile._check",
        "tarfile.TarFile._extract_member",
        "ntpath.join",
        "<builtin>.isinstance"
    ],
    "tarfile.TarFile.extractall.<lambda1>": [],
    "tarfile.TarFile.chown": [
        "pwd.getpwnam",
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.utime": [
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.chmod": [],
    "tarfile.TarFile._extract_member": [
        "tarfile.TarFile.makelink",
        "posixpath.exists",
        "ntpath.dirname",
        "sys.path.replace",
        "tarfile.TarFile.chmod",
        "tarfile.TarFile.makefifo",
        "tarfile.TarFile.makefile",
        "sys.base_prefix.rstrip",
        "tarfile.TarFile.makedir",
        "os.makedirs",
        "ntpath.exists",
        "sys.base_prefix.replace",
        "tarfile.TarFile._dbg",
        "tarfile.TarFile.utime",
        "posixpath.dirname",
        "tarfile.TarFile.makeunknown",
        "tarfile.TarFile.makedev",
        "tarfile.TarFile.chown",
        "sys.path.rstrip"
    ],
    "tarfile.TarFile.extractfile": [
        "tarfile.TarFile.getmember",
        "tarfile.TarFile._find_link_target",
        "tarfile.TarFile._check",
        "tarfile.ExFileObject.__init__",
        "tarfile.TarFile.extractfile",
        "<builtin>.isinstance"
    ],
    "tarfile.TarFile._find_link_target": [
        "posixpath.dirname",
        "ntpath.dirname",
        "<builtin>.KeyError",
        "<builtin>.filter",
        "tarfile.TarFile._getmember"
    ],
    "sys.path.rstrip": [],
    "sys.base_prefix.rstrip": [],
    "tarfile.TarFile.makefile": [
        "tarfile._Stream.seek",
        "gzip.GzipFile.seek",
        "tarfile.copyfileobj",
        "builtins.open",
        "lzma.LZMAFile.seek",
        "bz2.BZ2File.seek"
    ],
    "tarfile.TarFile.makedir": [],
    "tarfile.TarFile.makefifo": [
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.makedev": [
        "<builtin>.hasattr"
    ],
    "tarfile.TarFile.makelink": [
        "ntpath.exists",
        "tarfile.TarFile._extract_member",
        "posixpath.exists",
        "tarfile.TarFile._find_link_target"
    ],
    "tarfile.TarFile.makeunknown": [
        "tarfile.TarFile._dbg",
        "tarfile.TarFile.makefile"
    ],
    "tarfile.TarFile.__enter__": [
        "tarfile.TarFile._check"
    ],
    "tarfile.TarFile.__exit__": [
        "lzma.LZMAFile.close",
        "tarfile._Stream.close",
        "tarfile.TarFile.close",
        "gzip.GzipFile.close",
        "bz2.BZ2File.close"
    ],
    "tarfile.is_tarfile": [
        "tarfile.TarFile.open"
    ],
    "gzip.open": [
        "io.TextIOWrapper",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "gzip.GzipFile.__init__"
    ],
    "gzip.write32u": [
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "sys.path.write",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "sys.stdin.buffer.write": [],
    "gzip._PaddedFile": [],
    "gzip._PaddedFile.__init__": [
        "<builtin>.len"
    ],
    "gzip._PaddedFile.read": [],
    "gzip._PaddedFile.prepend": [
        "<builtin>.len"
    ],
    "gzip._PaddedFile.seek": [],
    "gzip._PaddedFile.seekable": [],
    "gzip.BadGzipFile": [],
    "gzip.GzipFile": [],
    "gzip._GzipReader.__init__": [
        "gzip._PaddedFile.__init__",
        "<builtin>.super"
    ],
    "gzip.GzipFile._init_write": [],
    "gzip.GzipFile._write_gzip_header": [
        "<builtin>.chr",
        "ntpath.basename",
        "posixpath.basename",
        "time.time",
        "<builtin>.int",
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "<builtin>.isinstance",
        "sys.path.write",
        "gzip.write32u",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "gzip.GzipFile.mtime": [],
    "gzip.GzipFile.__repr__": [
        "<builtin>.repr",
        "<builtin>.hex",
        "<builtin>.id"
    ],
    "gzip.GzipFile.read1": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.peek": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.closed": [],
    "sys.base_prefix.flush": [],
    "sys.stdout.buffer.flush": [],
    "sys.path.flush": [],
    "sys.stdin.buffer.flush": [],
    "gzip.GzipFile.fileno": [
        "sys.base_prefix.fileno",
        "sys.path.fileno",
        "gzip.GzipFile.fileno",
        "sys.stdout.buffer.fileno",
        "sys.stdin.buffer.fileno"
    ],
    "sys.stdin.buffer.fileno": [],
    "sys.stdout.buffer.fileno": [],
    "gzip.GzipFile.rewind": [
        "<builtin>.OSError"
    ],
    "gzip._GzipReader": [],
    "gzip._GzipReader._init_read": [],
    "gzip._GzipReader._read_exact": [
        "sys.path.read",
        "<builtin>.EOFError",
        "<builtin>.len",
        "sys.base_prefix.read"
    ],
    "gzip._GzipReader._read_gzip_header": [
        "sys.path.read",
        "gzip._GzipReader._read_exact",
        "sys.base_prefix.read"
    ],
    "gzip._GzipReader.read": [
        "sys.base_prefix.read",
        "gzip._GzipReader._add_read_data",
        "sys.path.read",
        "<builtin>.EOFError",
        "gzip._GzipReader._read_eof",
        "<builtin>.len",
        "gzip._GzipReader._init_read",
        "_io._RawIOBase.readall",
        "sys.path.prepend",
        "sys.base_prefix.prepend",
        "gzip._GzipReader._read_gzip_header"
    ],
    "gzip._GzipReader._read_eof": [
        "sys.base_prefix.read",
        "sys.path.read",
        "gzip._GzipReader._read_exact",
        "<builtin>.hex",
        "sys.path.prepend",
        "sys.base_prefix.prepend"
    ],
    "sys.path.prepend": [],
    "sys.base_prefix.prepend": [],
    "gzip._GzipReader._add_read_data": [
        "<builtin>.len"
    ],
    "gzip._GzipReader._rewind": [
        "<builtin>.super"
    ],
    "gzip.compress": [
        "io.BytesIO",
        "gzip.GzipFile.__init__"
    ],
    "gzip.decompress": [
        "io.BytesIO",
        "gzip.GzipFile.__init__"
    ],
    "sys.stdout.buffer.close": [],
    "signal.<lambda1>": [],
    "signal.<lambda2>": [],
    "signal.<lambda3>": [],
    "signal._int_to_enum": [],
    "signal._enum_to_int": [
        "<builtin>.int"
    ],
    "signal.signal": [
        "_signal.signal",
        "signal._enum_to_int",
        "signal._int_to_enum"
    ],
    "_signal.signal": [],
    "signal.getsignal": [
        "signal._int_to_enum",
        "_signal.getsignal"
    ],
    "_signal.getsignal": [],
    "signal.pthread_sigmask": [
        "_signal.pthread_sigmask",
        "signal._int_to_enum",
        "<builtin>.set"
    ],
    "_signal.pthread_sigmask": [],
    "signal.sigpending": [
        "signal._int_to_enum",
        "_signal.sigpending"
    ],
    "_signal.sigpending": [],
    "signal.sigwait": [
        "_signal.sigwait",
        "signal._int_to_enum"
    ],
    "_signal.sigwait": [],
    "signal.valid_signals": [
        "_signal.valid_signals",
        "signal._int_to_enum"
    ],
    "_signal.valid_signals": [],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "__future__._Feature.getOptionalRelease": [],
    "__future__._Feature.getMandatoryRelease": [],
    "__future__._Feature.__repr__": [
        "<builtin>.repr"
    ],
    "difflib._calculate_ratio": [],
    "difflib.SequenceMatcher": [],
    "difflib.SequenceMatcher.__init__": [
        "difflib.SequenceMatcher.set_seqs"
    ],
    "difflib.SequenceMatcher.set_seqs": [
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.set_seq2"
    ],
    "difflib.SequenceMatcher.set_seq1": [],
    "difflib.SequenceMatcher.set_seq2": [
        "difflib.SequenceMatcher.__chain_b"
    ],
    "difflib.SequenceMatcher.__chain_b": [
        "<builtin>.enumerate",
        "difflib.IS_CHARACTER_JUNK",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "difflib.IS_CHARACTER_JUNK": [],
    "difflib.SequenceMatcher.find_longest_match": [
        "<builtin>.range"
    ],
    "difflib.SequenceMatcher.get_matching_blocks": [
        "<builtin>.list",
        "<builtin>.map",
        "<builtin>.len",
        "difflib.SequenceMatcher.find_longest_match"
    ],
    "difflib.SequenceMatcher.get_opcodes": [
        "difflib.SequenceMatcher.get_matching_blocks"
    ],
    "difflib.SequenceMatcher.get_grouped_opcodes": [
        "<builtin>.max",
        "<builtin>.min",
        "difflib.SequenceMatcher.get_opcodes",
        "<builtin>.len"
    ],
    "difflib.SequenceMatcher.ratio": [
        "<builtin>.sum",
        "difflib._calculate_ratio",
        "<builtin>.len",
        "difflib.SequenceMatcher.get_matching_blocks"
    ],
    "difflib.SequenceMatcher.quick_ratio": [
        "difflib._calculate_ratio",
        "<builtin>.len"
    ],
    "difflib.SequenceMatcher.real_quick_ratio": [
        "<builtin>.min",
        "<builtin>.len",
        "difflib._calculate_ratio"
    ],
    "difflib.get_close_matches": [
        "difflib.SequenceMatcher.set_seq2",
        "<builtin>.ValueError",
        "difflib.SequenceMatcher.ratio",
        "heapq.nlargest",
        "difflib.SequenceMatcher.real_quick_ratio",
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.quick_ratio",
        "difflib.SequenceMatcher.__init__"
    ],
    "difflib._keep_original_ws": [
        "<builtin>.zip"
    ],
    "difflib.Differ": [],
    "difflib.Differ._fancy_replace": [
        "difflib.SequenceMatcher.set_seq2",
        "<builtin>.ValueError",
        "difflib.SequenceMatcher.ratio",
        "difflib.SequenceMatcher.real_quick_ratio",
        "difflib.Differ._qformat",
        "difflib.SequenceMatcher.get_opcodes",
        "difflib.Differ._fancy_helper",
        "difflib.SequenceMatcher.set_seq1",
        "difflib.SequenceMatcher.quick_ratio",
        "difflib.SequenceMatcher.set_seqs",
        "difflib.Differ._plain_replace",
        "<builtin>.range",
        "difflib.SequenceMatcher.__init__"
    ],
    "difflib.Differ._dump": [
        "<builtin>.range"
    ],
    "difflib.Differ._plain_replace": [
        "difflib.Differ._dump"
    ],
    "difflib.Differ._fancy_helper": [
        "difflib.Differ._dump",
        "difflib.Differ._fancy_replace"
    ],
    "difflib.Differ._qformat": [
        "difflib._keep_original_ws"
    ],
    "difflib.IS_LINE_JUNK": [],
    "difflib._format_range_unified": [],
    "difflib._check_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "difflib._format_range_context": [],
    "difflib.diff_bytes": [
        "<builtin>.map",
        "difflib.diff_bytes.decode",
        "<builtin>.list"
    ],
    "difflib.diff_bytes.decode": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "difflib.ndiff": [
        "difflib.Differ.__init__",
        "difflib.Differ.compare"
    ],
    "difflib._mdiff._make_line": [
        "<builtin>.reversed"
    ],
    "difflib._mdiff._make_line.record_sub_info": [],
    "difflib._mdiff._line_iterator": [
        "<builtin>.next",
        "difflib._mdiff._make_line",
        "<builtin>.len"
    ],
    "difflib._mdiff._line_pair_iterator": [
        "difflib._mdiff._line_iterator",
        "<builtin>.next",
        "<builtin>.len"
    ],
    "difflib.HtmlDiff": [],
    "difflib.HtmlDiff.__init__": [],
    "difflib.HtmlDiff.make_file": [
        "difflib.HtmlDiff.make_table",
        "<builtin>.dict"
    ],
    "difflib.HtmlDiff.make_table": [
        "difflib._mdiff",
        "difflib.HtmlDiff._line_wrapper",
        "<builtin>.range",
        "difflib.HtmlDiff._collect_lines",
        "difflib.HtmlDiff._convert_flags",
        "<builtin>.dict",
        "<builtin>.len",
        "difflib.HtmlDiff._tab_newline_replace",
        "difflib.HtmlDiff._make_prefix"
    ],
    "difflib.HtmlDiff._tab_newline_replace": [
        "difflib.HtmlDiff._tab_newline_replace.expand_tabs"
    ],
    "difflib.HtmlDiff._tab_newline_replace.expand_tabs": [],
    "difflib.HtmlDiff._split_line": [
        "<builtin>.len",
        "difflib.HtmlDiff._split_line"
    ],
    "difflib.HtmlDiff._line_wrapper": [
        "difflib.HtmlDiff._split_line"
    ],
    "difflib.HtmlDiff._collect_lines": [
        "difflib.HtmlDiff._format_line"
    ],
    "difflib.HtmlDiff._format_line": [],
    "difflib.HtmlDiff._make_prefix": [],
    "difflib.HtmlDiff._convert_flags": [
        "<builtin>.max",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "difflib.restore": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "unittest.runner._WritelnDecorator": [],
    "unittest.runner._WritelnDecorator.__init__": [],
    "unittest.runner._WritelnDecorator.__getattr__": [
        "<builtin>.AttributeError",
        "<builtin>.getattr"
    ],
    "unittest.runner._WritelnDecorator.writeln": [],
    "unittest.runner.TextTestResult": [],
    "unittest.runner.TextTestResult.__init__": [
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.getDescription": [
        "<builtin>.str"
    ],
    "unittest.runner.TextTestResult.startTest": [
        "unittest.runner.TextTestResult.getDescription",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addSuccess": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addError": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addFailure": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addSkip": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addExpectedFailure": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.addUnexpectedSuccess": [
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.super"
    ],
    "unittest.runner.TextTestResult.printErrors": [
        "unittest.runner._WritelnDecorator.writeln",
        "unittest.runner.TextTestResult.printErrorList"
    ],
    "unittest.runner.TextTestResult.printErrorList": [
        "unittest.runner._WritelnDecorator.writeln",
        "unittest.runner.TextTestResult.getDescription"
    ],
    "unittest.runner.TextTestRunner": [],
    "unittest.runner.TextTestRunner.__init__": [
        "unittest.runner._WritelnDecorator.__init__"
    ],
    "unittest.runner.TextTestRunner._makeResult": [
        "unittest.runner.TextTestResult.__init__"
    ],
    "unittest.runner.TextTestRunner.run": [
        "time.perf_counter",
        "unittest.runner.TextTestResult.printErrors",
        "unittest.signals.registerResult",
        "unittest.result.TestResult.wasSuccessful",
        "<builtin>.map",
        "<builtin>.hasattr",
        "<builtin>.len",
        "unittest.runner._WritelnDecorator.writeln",
        "<builtin>.getattr",
        "unittest.runner.TextTestRunner._makeResult"
    ],
    "unittest.signals.registerResult": [],
    "unittest.result.TestResult.wasSuccessful": [
        "<builtin>.hasattr",
        "<builtin>.len"
    ],
    "unittest.signals._InterruptHandler": [],
    "unittest.signals._InterruptHandler.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "unittest.signals._InterruptHandler.__init__.default_handler": [],
    "unittest.signals._InterruptHandler.__call__": [
        "weakref.WeakKeyDictionary.keys"
    ],
    "unittest.signals.removeResult": [
        "weakref.WeakKeyDictionary.pop",
        "<builtin>.bool"
    ],
    "unittest.signals.installHandler": [
        "unittest.signals._InterruptHandler.__init__"
    ],
    "unittest.signals.removeHandler": [
        "functools.wraps",
        "_functools.partial"
    ],
    "unittest.signals.removeHandler.inner": [
        "unittest.signals.removeHandler"
    ],
    "unittest.suite._call_if_exists": [
        "<builtin>.getattr"
    ],
    "unittest.suite._call_if_exists.<lambda1>": [],
    "unittest.suite.BaseTestSuite": [],
    "unittest.suite.BaseTestSuite.__init__": [
        "unittest.suite.BaseTestSuite.addTests"
    ],
    "unittest.suite.BaseTestSuite.addTests": [
        "<builtin>.isinstance",
        "unittest.suite.BaseTestSuite.addTest",
        "<builtin>.TypeError"
    ],
    "unittest.suite.BaseTestSuite.__repr__": [
        "unittest.util.strclass",
        "<builtin>.list"
    ],
    "unittest.util.strclass": [],
    "unittest.suite.BaseTestSuite.__eq__": [
        "<builtin>.isinstance",
        "<builtin>.list"
    ],
    "unittest.suite.BaseTestSuite.__iter__": [
        "<builtin>.iter"
    ],
    "unittest.suite.BaseTestSuite.countTestCases": [
        "unittest.suite.BaseTestSuite.countTestCases",
        "unittest.suite.BaseTestSuite.__iter__"
    ],
    "unittest.suite.BaseTestSuite.addTest": [
        "<builtin>.callable",
        "<builtin>.repr",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.issubclass"
    ],
    "unittest.suite.BaseTestSuite.run": [
        "<builtin>.enumerate",
        "unittest.suite.BaseTestSuite._removeTestAtIndex"
    ],
    "unittest.suite.BaseTestSuite._removeTestAtIndex": [
        "<builtin>.hasattr"
    ],
    "unittest.suite.BaseTestSuite.__call__": [
        "unittest.suite.BaseTestSuite.run"
    ],
    "unittest.suite.BaseTestSuite.debug": [
        "unittest.suite.BaseTestSuite.__iter__",
        "unittest.suite.BaseTestSuite.debug"
    ],
    "unittest.suite.TestSuite": [],
    "unittest.suite.TestSuite.run": [
        "unittest.suite.TestSuite._tearDownPreviousClass",
        "<builtin>.getattr",
        "unittest.suite.TestSuite._handleModuleTearDown",
        "<builtin>.enumerate",
        "unittest.suite.TestSuite._handleModuleFixture",
        "doctest._DocTestSuite._removeTestAtIndex",
        "unittest.suite._isnotsuite",
        "unittest.suite.TestSuite._handleClassSetUp"
    ],
    "unittest.suite._isnotsuite": [
        "<builtin>.iter"
    ],
    "unittest.suite.TestSuite._tearDownPreviousClass": [
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite._call_if_exists",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.getattr",
        "unittest.util.strclass"
    ],
    "unittest.suite.TestSuite._handleModuleFixture": [
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite._call_if_exists",
        "unittest.case.doModuleCleanups",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "unittest.suite.TestSuite._handleModuleTearDown",
        "unittest.suite.TestSuite._get_previous_module"
    ],
    "unittest.suite.TestSuite._handleClassSetUp": [
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite._call_if_exists",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.getattr",
        "unittest.util.strclass"
    ],
    "unittest.suite.TestSuite._handleModuleTearDown": [
        "unittest.suite.TestSuite._createClassOrModuleLevelException",
        "unittest.suite._call_if_exists",
        "unittest.case.doModuleCleanups",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "unittest.suite.TestSuite._get_previous_module"
    ],
    "unittest.suite.TestSuite.debug": [
        "unittest.suite.TestSuite.run"
    ],
    "unittest.suite.TestSuite._createClassOrModuleLevelException": [
        "unittest.suite.TestSuite._addClassOrModuleLevelException"
    ],
    "unittest.suite.TestSuite._get_previous_module": [
        "<builtin>.getattr"
    ],
    "unittest.case.doModuleCleanups": [],
    "unittest.suite.TestSuite._addClassOrModuleLevelException": [
        "<builtin>.getattr",
        "sys.exc_info",
        "unittest.suite._ErrorHolder.__init__",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "unittest.suite._ErrorHolder.__init__": [],
    "unittest.suite._ErrorHolder": [],
    "unittest.suite._ErrorHolder.id": [],
    "unittest.suite._ErrorHolder.shortDescription": [],
    "unittest.suite._ErrorHolder.__repr__": [],
    "unittest.suite._ErrorHolder.__str__": [
        "unittest.suite._ErrorHolder.id"
    ],
    "unittest.suite._ErrorHolder.run": [],
    "unittest.suite._ErrorHolder.__call__": [
        "unittest.suite._ErrorHolder.run"
    ],
    "unittest.suite._ErrorHolder.countTestCases": [],
    "unittest.suite._DebugResult": [],
    "unittest.async_case.IsolatedAsyncioTestCase": [],
    "unittest.async_case.IsolatedAsyncioTestCase.__init__": [
        "<builtin>.super"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase.asyncSetUp": [],
    "unittest.async_case.IsolatedAsyncioTestCase.asyncTearDown": [],
    "unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callSetUp": [
        "unittest.case.TestCase.setUp",
        "unittest.async_case.IsolatedAsyncioTestCase._callAsync"
    ],
    "unittest.case.TestCase.setUp": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callAsync": [
        "inspect.isawaitable"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callTestMethod": [
        "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync": [
        "inspect.isawaitable"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._callTearDown": [
        "unittest.case.TestCase.tearDown",
        "unittest.async_case.IsolatedAsyncioTestCase._callAsync"
    ],
    "unittest.case.TestCase.tearDown": [],
    "unittest.async_case.IsolatedAsyncioTestCase._callCleanup": [
        "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"
    ],
    "inspect.isawaitable": [
        "<builtin>.isinstance",
        "<builtin>.bool"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner": [],
    "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop": [
        "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop": [],
    "unittest.async_case.IsolatedAsyncioTestCase.run": [
        "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop",
        "<builtin>.super",
        "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop"
    ],
    "asyncio.windows_events._OverlappedFuture": [],
    "asyncio.windows_events._OverlappedFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture._repr_info": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture._cancel_overlapped": [
        "futures.Future._loop.call_exception_handler"
    ],
    "futures.Future._loop.call_exception_handler": [],
    "asyncio.windows_events._OverlappedFuture.cancel": [
        "asyncio.windows_events._OverlappedFuture._cancel_overlapped",
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture.set_exception": [
        "asyncio.windows_events._OverlappedFuture._cancel_overlapped",
        "<builtin>.super"
    ],
    "asyncio.windows_events._OverlappedFuture.set_result": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture": [],
    "asyncio.windows_events._BaseWaitHandleFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._poll": [
        "_winapi.WaitForSingleObject"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._repr_info": [
        "<builtin>.super",
        "asyncio.windows_events._BaseWaitHandleFuture._poll"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb": [],
    "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait": [
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb",
        "futures.Future._loop.call_exception_handler",
        "_overlapped.UnregisterWait",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb"
    ],
    "_overlapped.UnregisterWait": [],
    "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb": [
        "asyncio.windows_events.IocpProactor._unregister",
        "<builtin>.super",
        "_winapi.CloseHandle"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.cancel": [
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait",
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitHandleFuture._unregister_wait": [
        "asyncio.windows_events.IocpProactor._wait_cancel",
        "_overlapped.UnregisterWaitEx",
        "futures.Future._loop.call_exception_handler"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.set_exception": [
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait",
        "<builtin>.super"
    ],
    "asyncio.windows_events._BaseWaitHandleFuture.set_result": [
        "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait",
        "asyncio.windows_events._WaitHandleFuture._unregister_wait",
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitCancelFuture": [],
    "asyncio.windows_events._WaitCancelFuture.__init__": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitCancelFuture.cancel": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.windows_events._WaitCancelFuture.set_result": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitCancelFuture.set_exception": [
        "<builtin>.super"
    ],
    "asyncio.windows_events._WaitHandleFuture": [],
    "asyncio.windows_events._WaitHandleFuture.__init__": [
        "<builtin>.super",
        "_overlapped.CreateEvent"
    ],
    "_overlapped.CreateEvent": [],
    "asyncio.windows_events.IocpProactor._unregister": [
        "asyncio.windows_events.IocpProactor._check_closed"
    ],
    "_overlapped.UnregisterWaitEx": [],
    "asyncio.windows_events.IocpProactor._wait_cancel": [
        "asyncio.windows_events.IocpProactor._wait_for_handle"
    ],
    "asyncio.windows_events.PipeServer": [],
    "asyncio.windows_events.PipeServer.__init__": [
        "asyncio.windows_events.PipeServer._server_pipe_handle"
    ],
    "asyncio.windows_events.PipeServer._server_pipe_handle": [
        "_weakrefset.WeakSet.add",
        "asyncio.windows_utils.PipeHandle.__init__",
        "_winapi.CreateNamedPipe",
        "asyncio.windows_events.PipeServer.closed"
    ],
    "asyncio.windows_events.PipeServer._get_unconnected_pipe": [
        "asyncio.windows_events.PipeServer._server_pipe_handle"
    ],
    "asyncio.windows_events.PipeServer.closed": [],
    "_winapi.CreateNamedPipe": [],
    "asyncio.windows_utils.PipeHandle.__init__": [],
    "asyncio.windows_events.PipeServer.close": [
        "_weakrefset.WeakSet.__iter__",
        "_weakrefset.WeakSet.clear"
    ],
    "asyncio.windows_events._WindowsSelectorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop.__init__": [
        "asyncio.windows_events.IocpProactor.__init__",
        "<builtin>.super"
    ],
    "asyncio.windows_events.IocpProactor.__init__": [
        "_overlapped.CreateIoCompletionPort"
    ],
    "asyncio.windows_events.ProactorEventLoop.run_forever": [
        "<builtin>.super"
    ],
    "asyncio.windows_events.ProactorEventLoop.create_pipe_connection": [
        "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport": [
        "asyncio.proactor_events._ProactorReadPipeTransport.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop.start_serving_pipe": [
        "asyncio.windows_events.PipeServer.__init__"
    ],
    "asyncio.windows_events.ProactorEventLoop.start_serving_pipe.loop_accept_pipe": [
        "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport",
        "asyncio.windows_events.PipeServer._get_unconnected_pipe",
        "asyncio.windows_events.PipeServer.closed",
        "log.logger.warning",
        "asyncio.windows_utils.PipeHandle.fileno",
        "_weakrefset.WeakSet.discard",
        "asyncio.windows_utils.PipeHandle.close"
    ],
    "asyncio.windows_utils.PipeHandle.fileno": [
        "<builtin>.ValueError"
    ],
    "log.logger.warning": [],
    "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport": [
        "base_subprocess.BaseSubprocessTransport.close",
        "base_subprocess.BaseSubprocessTransport._wait",
        "base_subprocess.BaseSubprocessTransport.__init__"
    ],
    "base_subprocess.BaseSubprocessTransport.__init__": [],
    "base_subprocess.BaseSubprocessTransport.close": [],
    "base_subprocess.BaseSubprocessTransport._wait": [],
    "asyncio.windows_events.IocpProactor": [],
    "_overlapped.CreateIoCompletionPort": [],
    "asyncio.windows_events.IocpProactor._check_closed": [
        "<builtin>.RuntimeError"
    ],
    "asyncio.windows_events.IocpProactor.__repr__": [
        "<builtin>.len"
    ],
    "asyncio.windows_events.IocpProactor.set_loop": [],
    "asyncio.windows_events.IocpProactor.select": [
        "asyncio.windows_events.IocpProactor._poll"
    ],
    "asyncio.windows_events.IocpProactor._poll": [
        "_overlapped.GetQueuedCompletionStatus",
        "<builtin>.ValueError",
        "_winapi.CloseHandle"
    ],
    "asyncio.windows_events.IocpProactor._result": [],
    "asyncio.windows_events.IocpProactor.recv": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._result",
        "_overlapped.Overlapped",
        "<builtin>.isinstance"
    ],
    "asyncio.windows_events.IocpProactor._register_with_iocp": [
        "_weakrefset.WeakSet.add",
        "_overlapped.CreateIoCompletionPort"
    ],
    "_overlapped.Overlapped": [],
    "asyncio.windows_events.IocpProactor.recv.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "<builtin>.ConnectionResetError": [],
    "asyncio.windows_events.IocpProactor._register": [
        "asyncio.windows_events._OverlappedFuture.set_result",
        "asyncio.windows_events.IocpProactor.recv_into.finish_recv",
        "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe",
        "asyncio.windows_events.IocpProactor.accept.finish_accept",
        "asyncio.windows_events.IocpProactor._check_closed",
        "asyncio.windows_events._OverlappedFuture.__init__",
        "asyncio.windows_events.IocpProactor.send.finish_send",
        "asyncio.windows_events.IocpProactor.sendto.finish_send",
        "asyncio.windows_events.IocpProactor.recv.finish_recv",
        "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile",
        "asyncio.windows_events._OverlappedFuture.set_exception",
        "asyncio.windows_events.IocpProactor.recvfrom.finish_recv",
        "asyncio.windows_events.IocpProactor.connect.finish_connect"
    ],
    "asyncio.windows_events.IocpProactor.recv_into": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._result",
        "_overlapped.Overlapped",
        "<builtin>.isinstance"
    ],
    "asyncio.windows_events.IocpProactor.recv_into.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.recvfrom": [
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._result",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.recvfrom.finish_recv": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.sendto": [
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.sendto.finish_send": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.send": [
        "_overlapped.Overlapped",
        "<builtin>.isinstance",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.send.finish_send": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.accept": [
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._get_accept_socket",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "tasks.ensure_future",
        "asyncio.windows_events.IocpProactor.accept.accept_coro",
        "_overlapped.Overlapped"
    ],
    "asyncio.windows_events.IocpProactor._get_accept_socket": [],
    "asyncio.windows_events.IocpProactor.accept.finish_accept": [],
    "asyncio.windows_events.IocpProactor.accept.accept_coro": [],
    "tasks.ensure_future": [],
    "asyncio.windows_events.IocpProactor.connect": [
        "_overlapped.BindLocal",
        "asyncio.windows_events.IocpProactor._register",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "_overlapped.Overlapped",
        "_overlapped.WSAConnect"
    ],
    "_overlapped.WSAConnect": [],
    "_overlapped.BindLocal": [],
    "asyncio.windows_events.IocpProactor.connect.finish_connect": [],
    "asyncio.windows_events.IocpProactor.sendfile": [
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "msvcrt.get_osfhandle",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile": [
        "<builtin>.ConnectionResetError"
    ],
    "asyncio.windows_events.IocpProactor.accept_pipe": [
        "_overlapped.Overlapped",
        "asyncio.windows_events.IocpProactor._register_with_iocp",
        "asyncio.windows_events.IocpProactor._result",
        "asyncio.windows_events.IocpProactor._register"
    ],
    "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe": [],
    "asyncio.windows_events.IocpProactor.connect_pipe": [
        "tasks.sleep",
        "<builtin>.min",
        "_overlapped.ConnectPipe",
        "asyncio.windows_utils.PipeHandle.__init__"
    ],
    "_overlapped.ConnectPipe": [],
    "tasks.sleep": [],
    "asyncio.windows_events.IocpProactor.wait_for_handle": [
        "asyncio.windows_events.IocpProactor._wait_for_handle"
    ],
    "asyncio.windows_events.IocpProactor._wait_for_handle": [
        "asyncio.windows_events._WaitCancelFuture.__init__",
        "asyncio.windows_events.IocpProactor._check_closed",
        "_overlapped.RegisterWaitWithQueue",
        "_overlapped.Overlapped",
        "asyncio.windows_events._WaitHandleFuture.__init__"
    ],
    "_overlapped.RegisterWaitWithQueue": [],
    "asyncio.windows_events.IocpProactor._wait_for_handle.finish_wait_for_handle": [
        "asyncio.windows_events._BaseWaitHandleFuture._poll"
    ],
    "_overlapped.GetQueuedCompletionStatus": [],
    "asyncio.windows_events.IocpProactor._stop_serving": [
        "_weakrefset.WeakSet.add"
    ],
    "asyncio.windows_events.IocpProactor.close": [
        "_winapi.CloseHandle",
        "<builtin>.list",
        "asyncio.windows_events.IocpProactor._poll",
        "log.logger.debug",
        "time.monotonic",
        "<builtin>.isinstance"
    ],
    "log.logger.debug": [],
    "asyncio.windows_events.IocpProactor.__del__": [
        "asyncio.windows_events.IocpProactor.close"
    ],
    "asyncio.windows_events._WindowsSubprocessTransport": [],
    "asyncio.windows_events._WindowsSubprocessTransport._start": [
        "asyncio.windows_events._WindowsSubprocessTransport._loop._proactor.wait_for_handle",
        "<builtin>.int",
        "asyncio.windows_utils.Popen.__init__"
    ],
    "asyncio.windows_utils.Popen.__init__": [
        "_winapi.CloseHandle",
        "asyncio.windows_utils.PipeHandle.__init__",
        "<builtin>.super",
        "asyncio.windows_utils.pipe",
        "msvcrt.open_osfhandle"
    ],
    "asyncio.windows_events._WindowsSubprocessTransport._start.callback": [
        "subprocess.Popen.poll",
        "base_subprocess.BaseSubprocessTransport._process_exited"
    ],
    "base_subprocess.BaseSubprocessTransport._process_exited": [],
    "asyncio.windows_events._WindowsSubprocessTransport._loop._proactor.wait_for_handle": [],
    "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [],
    "asyncio.windows_events.WindowsProactorEventLoopPolicy": [],
    "asyncio.proactor_events._set_socket_extra": [
        "transports._FlowControlMixin._loop.get_debug",
        "trsock.TransportSocket",
        "log.logger.warning"
    ],
    "trsock.TransportSocket": [],
    "transports._FlowControlMixin._loop.get_debug": [],
    "asyncio.proactor_events._ProactorBasePipeTransport": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.__init__": [
        "transports._FlowControlMixin._loop.call_soon",
        "<builtin>.super",
        "asyncio.proactor_events._ProactorSocketTransport._set_extra",
        "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol",
        "asyncio.proactor_events._ProactorBasePipeTransport._set_extra",
        "asyncio.proactor_events._ProactorDatagramTransport._set_extra"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._set_extra": [],
    "asyncio.proactor_events._ProactorDatagramTransport._set_extra": [
        "asyncio.proactor_events._set_socket_extra"
    ],
    "asyncio.proactor_events._ProactorSocketTransport._set_extra": [
        "asyncio.proactor_events._set_socket_extra"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol": [],
    "transports._FlowControlMixin._loop.call_soon": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.__repr__": [
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.get_protocol": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.is_closing": [],
    "asyncio.proactor_events._ProactorBasePipeTransport.close": [
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.__del__": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error": [
        "log.logger.debug",
        "transports._FlowControlMixin._loop.call_exception_handler",
        "transports._FlowControlMixin._loop.get_debug",
        "<builtin>.isinstance",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "transports._FlowControlMixin._loop.call_exception_handler": [],
    "asyncio.proactor_events._ProactorBasePipeTransport._force_close": [
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport._call_connection_lost": [
        "<builtin>.hasattr"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size": [
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport": [],
    "asyncio.proactor_events._ProactorReadPipeTransport.__init__": [
        "<builtin>.super",
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.is_reading": [],
    "asyncio.proactor_events._ProactorReadPipeTransport.pause_reading": [
        "log.logger.debug",
        "transports._FlowControlMixin._loop.get_debug"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport.resume_reading": [
        "log.logger.debug",
        "transports._FlowControlMixin._loop.get_debug",
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._eof_received": [
        "log.logger.debug",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "transports._FlowControlMixin._loop.get_debug"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._data_received": [
        "asyncio.proactor_events._ProactorReadPipeTransport._eof_received",
        "<builtin>.isinstance",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "protocols._feed_data_to_buffered_proto"
    ],
    "protocols._feed_data_to_buffered_proto": [],
    "asyncio.proactor_events._ProactorReadPipeTransport._loop_reading": [
        "asyncio.proactor_events._ProactorReadPipeTransport._data_received",
        "asyncio.proactor_events._ProactorReadPipeTransport._loop._proactor.recv",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "log.logger.debug",
        "transports._FlowControlMixin._loop.get_debug",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorReadPipeTransport._loop._proactor.recv": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.__init__": [
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.write": [
        "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing",
        "log.logger.warning",
        "<builtin>.bytes",
        "transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.RuntimeError",
        "<builtin>.bytearray",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing": [
        "transports._FlowControlMixin._maybe_resume_protocol",
        "transports._FlowControlMixin._loop.call_soon",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.len",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop._proactor.send",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "transports._FlowControlMixin._maybe_pause_protocol": [],
    "transports._FlowControlMixin._maybe_resume_protocol": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop._proactor.send": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.can_write_eof": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.write_eof": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport.abort": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._make_empty_waiter": [
        "<builtin>.RuntimeError",
        "transports._FlowControlMixin._loop.create_future"
    ],
    "transports._FlowControlMixin._loop.create_future": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport._reset_empty_waiter": [],
    "asyncio.proactor_events._ProactorWritePipeTransport": [],
    "asyncio.proactor_events._ProactorWritePipeTransport.__init__": [
        "asyncio.proactor_events._ProactorWritePipeTransport._loop._proactor.recv",
        "<builtin>.super"
    ],
    "asyncio.proactor_events._ProactorWritePipeTransport._loop._proactor.recv": [],
    "asyncio.proactor_events._ProactorWritePipeTransport._pipe_closed": [
        "asyncio.proactor_events._ProactorBasePipeTransport.close",
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close",
        "<builtin>.BrokenPipeError"
    ],
    "<builtin>.BrokenPipeError": [],
    "asyncio.proactor_events._ProactorDatagramTransport": [],
    "asyncio.proactor_events._ProactorDatagramTransport.__init__": [
        "collections.deque",
        "<builtin>.super",
        "transports._FlowControlMixin._loop.call_soon"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size": [
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.abort": [
        "asyncio.proactor_events._ProactorBasePipeTransport._force_close"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport.sendto": [
        "<builtin>.ValueError",
        "log.logger.warning",
        "<builtin>.bytes",
        "transports._FlowControlMixin._maybe_pause_protocol",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance",
        "asyncio.proactor_events._ProactorDatagramTransport._loop_writing"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._loop_writing": [
        "transports._FlowControlMixin._maybe_resume_protocol",
        "transports._FlowControlMixin._loop.call_soon",
        "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error",
        "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.sendto",
        "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.send"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.send": [],
    "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.sendto": [],
    "asyncio.proactor_events._ProactorDatagramTransport._loop_reading": [
        "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.recv",
        "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.recvfrom"
    ],
    "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.recv": [],
    "asyncio.proactor_events._ProactorDatagramTransport._loop._proactor.recvfrom": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport.can_write_eof": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport.write_eof": [],
    "asyncio.proactor_events._ProactorSocketTransport": [],
    "asyncio.proactor_events._ProactorSocketTransport.__init__": [
        "<builtin>.super",
        "base_events._set_nodelay"
    ],
    "base_events._set_nodelay": [],
    "asyncio.proactor_events._ProactorSocketTransport.can_write_eof": [],
    "asyncio.proactor_events._ProactorSocketTransport.write_eof": [],
    "asyncio.proactor_events.BaseProactorEventLoop": [],
    "asyncio.proactor_events.BaseProactorEventLoop.__init__": [
        "threading.current_thread",
        "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe",
        "<builtin>.super",
        "threading.main_thread",
        "log.logger.debug"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe": [],
    "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport": [
        "asyncio.proactor_events._ProactorSocketTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport": [
        "asyncio.proactor_events._ProactorSocketTransport.__init__",
        "sslproto.SSLProtocol"
    ],
    "sslproto.SSLProtocol": [],
    "asyncio.proactor_events.BaseProactorEventLoop._make_datagram_transport": [
        "asyncio.proactor_events._ProactorDatagramTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_read_pipe_transport": [
        "asyncio.proactor_events._ProactorReadPipeTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._make_write_pipe_transport": [
        "asyncio.proactor_events._ProactorWritePipeTransport.__init__"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop.close": [
        "threading.current_thread",
        "threading.main_thread",
        "<builtin>.super",
        "<builtin>.RuntimeError",
        "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures",
        "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe",
        "base_events.BaseEventLoop.is_closed",
        "base_events.BaseEventLoop.is_running"
    ],
    "base_events.BaseEventLoop.is_running": [],
    "base_events.BaseEventLoop.is_closed": [],
    "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures": [],
    "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_recv": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_recv_into": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_sendall": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_connect": [],
    "asyncio.proactor_events.BaseProactorEventLoop.sock_accept": [],
    "asyncio.proactor_events.BaseProactorEventLoop._sock_sendfile_native": [
        "<builtin>.min",
        "exceptions.SendfileNotAvailableError"
    ],
    "exceptions.SendfileNotAvailableError": [],
    "asyncio.proactor_events.BaseProactorEventLoop._sendfile_native": [
        "base_events.BaseEventLoop.sock_sendfile"
    ],
    "base_events.BaseEventLoop.sock_sendfile": [],
    "asyncio.proactor_events.BaseProactorEventLoop._loop_self_reading": [
        "base_events.BaseEventLoop.call_exception_handler"
    ],
    "base_events.BaseEventLoop.call_exception_handler": [],
    "asyncio.proactor_events.BaseProactorEventLoop._write_to_self": [
        "log.logger.debug"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._start_serving": [
        "base_events.BaseEventLoop.call_soon"
    ],
    "asyncio.proactor_events.BaseProactorEventLoop._start_serving.loop": [
        "base_events.BaseEventLoop.call_exception_handler",
        "log.logger.debug",
        "trsock.TransportSocket",
        "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport",
        "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport",
        "base_events.BaseEventLoop.is_closed"
    ],
    "base_events.BaseEventLoop.call_soon": [],
    "asyncio.proactor_events.BaseProactorEventLoop._process_events": [],
    "asyncio.proactor_events.BaseProactorEventLoop._stop_serving": [],
    "asyncio.windows_utils.pipe": [
        "_winapi.ConnectNamedPipe",
        "<builtin>.next",
        "_winapi.CloseHandle",
        "_winapi.CreateFile",
        "_winapi.CreateNamedPipe",
        "tempfile.mktemp"
    ],
    "tempfile.mktemp": [
        "tempfile.gettempdir",
        "<builtin>.next",
        "posixpath.join",
        "tempfile._get_candidate_names",
        "tempfile._exists",
        "<builtin>.FileExistsError",
        "<builtin>.range",
        "ntpath.join"
    ],
    "_winapi.CreateFile": [],
    "_winapi.ConnectNamedPipe": [],
    "asyncio.windows_utils.PipeHandle": [],
    "asyncio.windows_utils.PipeHandle.__repr__": [],
    "asyncio.windows_utils.PipeHandle.handle": [],
    "asyncio.windows_utils.PipeHandle.__del__": [
        "asyncio.windows_utils.PipeHandle.close"
    ],
    "asyncio.windows_utils.PipeHandle.__enter__": [],
    "asyncio.windows_utils.PipeHandle.__exit__": [
        "asyncio.windows_utils.PipeHandle.close"
    ],
    "asyncio.windows_utils.Popen": [],
    "tempfile._exists": [],
    "tempfile._infer_return_type": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "tempfile._sanitize_params": [
        "tempfile._infer_return_type",
        "tempfile.gettempdir",
        "tempfile.gettempdirb"
    ],
    "tempfile.gettempdir": [
        "tempfile._get_default_tempdir"
    ],
    "tempfile.gettempdirb": [
        "tempfile.gettempdir"
    ],
    "tempfile._RandomNameSequence": [],
    "tempfile._RandomNameSequence.rng": [
        "<builtin>.getattr",
        "random.Random.__init__"
    ],
    "tempfile._RandomNameSequence.__iter__": [],
    "tempfile._RandomNameSequence.__next__": [
        "<builtin>.range"
    ],
    "tempfile._candidate_tempdir_list": [
        "os.getenv"
    ],
    "tempfile._get_default_tempdir": [
        "posixpath.abspath",
        "<builtin>.next",
        "posixpath.join",
        "ntpath.isdir",
        "tempfile._candidate_tempdir_list",
        "io.open",
        "<builtin>.FileNotFoundError",
        "posixpath.isdir",
        "<builtin>.range",
        "ntpath.join",
        "ntpath.abspath"
    ],
    "tempfile._get_candidate_names": [],
    "tempfile._mkstemp_inner": [
        "posixpath.abspath",
        "<builtin>.next",
        "posixpath.join",
        "tempfile._get_candidate_names",
        "<builtin>.FileExistsError",
        "sys.audit",
        "ntpath.isdir",
        "<builtin>.map",
        "posixpath.isdir",
        "<builtin>.range",
        "ntpath.join",
        "ntpath.abspath"
    ],
    "tempfile.gettempprefix": [],
    "tempfile.gettempprefixb": [
        "tempfile.gettempprefix"
    ],
    "tempfile.mkstemp": [
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner"
    ],
    "tempfile.mkdtemp": [
        "tempfile._sanitize_params",
        "<builtin>.next",
        "posixpath.join",
        "tempfile._get_candidate_names",
        "<builtin>.FileExistsError",
        "sys.audit",
        "ntpath.isdir",
        "<builtin>.map",
        "posixpath.isdir",
        "<builtin>.range",
        "ntpath.join"
    ],
    "tempfile._TemporaryFileCloser": [],
    "tempfile._TemporaryFileCloser.__init__": [],
    "tempfile._TemporaryFileCloser.close": [],
    "tempfile._TemporaryFileCloser.__del__": [
        "tempfile._TemporaryFileCloser.close"
    ],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile._TemporaryFileWrapper.__init__": [
        "tempfile._TemporaryFileCloser.__init__"
    ],
    "tempfile._TemporaryFileWrapper.__getattr__": [
        "functools.wraps",
        "<builtin>.setattr",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "_functools.partial"
    ],
    "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper": [
        "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper"
    ],
    "tempfile._TemporaryFileWrapper.__enter__": [],
    "tempfile._TemporaryFileWrapper.__exit__": [
        "tempfile._TemporaryFileWrapper.close"
    ],
    "tempfile._TemporaryFileWrapper.close": [
        "tempfile._TemporaryFileCloser.close"
    ],
    "tempfile._TemporaryFileWrapper.__iter__": [],
    "tempfile.NamedTemporaryFile": [
        "tempfile._sanitize_params",
        "tempfile._TemporaryFileWrapper.__init__",
        "tempfile._mkstemp_inner",
        "io.open"
    ],
    "tempfile.TemporaryFile": [
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner",
        "io.open"
    ],
    "tempfile.SpooledTemporaryFile": [],
    "tempfile.SpooledTemporaryFile.__init__": [
        "io.BytesIO",
        "io.TextIOWrapper"
    ],
    "tempfile.SpooledTemporaryFile._check": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.rollover": [
        "tempfile.NamedTemporaryFile",
        "<builtin>.hasattr"
    ],
    "tempfile.SpooledTemporaryFile.__enter__": [
        "<builtin>.ValueError"
    ],
    "tempfile.SpooledTemporaryFile.__exit__": [],
    "tempfile.SpooledTemporaryFile.__iter__": [],
    "tempfile.SpooledTemporaryFile.close": [],
    "tempfile.SpooledTemporaryFile.closed": [],
    "tempfile.SpooledTemporaryFile.encoding": [],
    "tempfile.SpooledTemporaryFile.errors": [],
    "tempfile.SpooledTemporaryFile.fileno": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.flush": [],
    "tempfile.SpooledTemporaryFile.isatty": [],
    "tempfile.SpooledTemporaryFile.mode": [],
    "tempfile.SpooledTemporaryFile.name": [],
    "tempfile.SpooledTemporaryFile.newlines": [],
    "tempfile.SpooledTemporaryFile.read": [],
    "tempfile.SpooledTemporaryFile.readline": [],
    "tempfile.SpooledTemporaryFile.readlines": [],
    "tempfile.SpooledTemporaryFile.seek": [],
    "tempfile.SpooledTemporaryFile.softspace": [],
    "tempfile.SpooledTemporaryFile.tell": [],
    "tempfile.SpooledTemporaryFile.truncate": [
        "tempfile.SpooledTemporaryFile.rollover"
    ],
    "tempfile.SpooledTemporaryFile.write": [
        "tempfile.SpooledTemporaryFile._check"
    ],
    "tempfile.SpooledTemporaryFile.writelines": [
        "tempfile.SpooledTemporaryFile._check"
    ],
    "tempfile.TemporaryDirectory": [],
    "tempfile.TemporaryDirectory.__init__": [
        "tempfile.mkdtemp",
        "weakref.finalize.__init__"
    ],
    "tempfile.TemporaryDirectory._rmtree": [
        "shutil.rmtree"
    ],
    "tempfile.TemporaryDirectory._rmtree.onerror.resetperms": [],
    "tempfile.TemporaryDirectory._cleanup": [
        "warnings.warn",
        "tempfile.TemporaryDirectory._rmtree"
    ],
    "tempfile.TemporaryDirectory.__repr__": [],
    "tempfile.TemporaryDirectory.__enter__": [],
    "tempfile.TemporaryDirectory.__exit__": [
        "tempfile.TemporaryDirectory.cleanup"
    ],
    "tempfile.TemporaryDirectory.cleanup": [
        "weakref.finalize.detach",
        "tempfile.TemporaryDirectory._rmtree"
    ],
    "unittest.case.SkipTest": [],
    "unittest.case._ShouldStop": [],
    "unittest.case._UnexpectedSuccess": [],
    "unittest.case._Outcome": [
        "contextlib.contextmanager"
    ],
    "unittest.case._Outcome.__init__": [
        "<builtin>.hasattr"
    ],
    "unittest.case._Outcome.testPartExecutor": [
        "sys.exc_info",
        "<builtin>.str"
    ],
    "unittest.case._id": [],
    "unittest.case.addModuleCleanup": [],
    "unittest.case.skip": [
        "<builtin>.isinstance",
        "unittest.case.skip.decorator"
    ],
    "unittest.case.skip.decorator": [
        "<builtin>.isinstance",
        "functools.wraps",
        "_functools.partial"
    ],
    "unittest.case.skip.decorator.skip_wrapper": [],
    "unittest.case.skipIf": [
        "unittest.case.skip"
    ],
    "unittest.case.skipUnless": [
        "unittest.case.skip"
    ],
    "unittest.case.expectedFailure": [],
    "unittest.case._is_subtype": [
        "<builtin>.isinstance",
        "<builtin>.all",
        "<builtin>.issubclass",
        "unittest.case._is_subtype"
    ],
    "unittest.case._BaseTestCaseContext": [],
    "unittest.case._BaseTestCaseContext.__init__": [],
    "unittest.case._BaseTestCaseContext._raiseFailure": [],
    "unittest.case._AssertRaisesBaseContext": [],
    "unittest.case._AssertRaisesBaseContext.__init__": [
        "unittest.case._BaseTestCaseContext.__init__",
        "re.compile"
    ],
    "unittest.case._AssertRaisesBaseContext.handle": [
        "<builtin>.next",
        "<builtin>.iter",
        "unittest.case._is_subtype",
        "<builtin>.TypeError",
        "<builtin>.str"
    ],
    "unittest.case._AssertRaisesContext": [],
    "unittest.case._AssertRaisesContext.__enter__": [],
    "unittest.case._AssertRaisesContext.__exit__": [
        "<builtin>.issubclass",
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "<builtin>.str",
        "traceback.clear_frames"
    ],
    "unittest.case._AssertWarnsContext": [],
    "unittest.case._AssertWarnsContext.__enter__": [
        "<builtin>.getattr",
        "sys.modules.values",
        "warnings.catch_warnings.__enter__"
    ],
    "sys.modules.values": [],
    "unittest.case._AssertWarnsContext.__exit__": [
        "<builtin>.isinstance",
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "warnings.catch_warnings.__exit__",
        "<builtin>.str"
    ],
    "unittest.case._CapturingHandler": [],
    "unittest.case._CapturingHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "unittest.case._CapturingHandler.flush": [],
    "unittest.case._AssertLogsContext": [],
    "unittest.case._AssertLogsContext.__init__": [
        "unittest.case._BaseTestCaseContext.__init__"
    ],
    "unittest.case._AssertLogsContext.__enter__": [
        "logging.Formatter.__init__",
        "logging.Handler.setFormatter",
        "logging.getLogger",
        "<builtin>.isinstance",
        "logging.Logger.setLevel",
        "unittest.case._CapturingHandler.__init__"
    ],
    "unittest.case._AssertLogsContext.__exit__": [
        "logging.Logger.setLevel",
        "unittest.case._BaseTestCaseContext._raiseFailure",
        "logging.getLevelName",
        "<builtin>.len"
    ],
    "unittest.case._OrderedChainMap": [],
    "unittest.case._OrderedChainMap.__iter__": [
        "<builtin>.set"
    ],
    "unittest.case.TestCase": [
        "contextlib.contextmanager",
        "unittest.case.TestCase._deprecate"
    ],
    "unittest.case.TestCase.addTypeEqualityFunc": [],
    "unittest.case.TestCase.addClassCleanup": [],
    "unittest.case.TestCase.setUpClass": [],
    "unittest.case.TestCase.tearDownClass": [],
    "unittest.case.TestCase.countTestCases": [],
    "unittest.case.TestCase.defaultTestResult": [
        "unittest.result.TestResult.__init__"
    ],
    "unittest.result.TestResult.__init__": [],
    "unittest.case.TestCase.shortDescription": [],
    "unittest.case.TestCase.id": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase.__eq__": [
        "<builtin>.type"
    ],
    "unittest.case.TestCase.__hash__": [
        "<builtin>.type",
        "<builtin>.hash"
    ],
    "unittest.case.TestCase.__str__": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase.__repr__": [
        "unittest.util.strclass"
    ],
    "unittest.case.TestCase._addSkip": [
        "unittest.runner.TextTestResult.addSuccess",
        "<builtin>.getattr",
        "unittest.result.TestResult.addSuccess",
        "warnings.warn"
    ],
    "unittest.result.TestResult.addSuccess": [],
    "unittest.case.TestCase.subTest": [
        "unittest.case._Outcome.testPartExecutor",
        "unittest.case._SubTest.__init__",
        "collections.ChainMap.new_child",
        "collections.ChainMap.__init__"
    ],
    "unittest.case._SubTest.__init__": [
        "<builtin>.super"
    ],
    "unittest.case.TestCase._feedErrorsToResult": [
        "unittest.runner.TextTestResult.addFailure",
        "unittest.result.TestResult.addFailure",
        "unittest.result.TestResult.addError",
        "unittest.runner.TextTestResult.addError",
        "<builtin>.isinstance",
        "unittest.result.TestResult.addSubTest",
        "<builtin>.issubclass"
    ],
    "unittest.result.TestResult.addSubTest": [
        "unittest.result.TestResult._exc_info_to_string",
        "<builtin>.getattr",
        "unittest.result.TestResult.stop",
        "<builtin>.issubclass"
    ],
    "unittest.result.TestResult.addFailure": [
        "unittest.result.TestResult._exc_info_to_string"
    ],
    "unittest.result.TestResult.addError": [
        "unittest.result.TestResult._exc_info_to_string"
    ],
    "unittest.case.TestCase._addExpectedFailure": [
        "warnings.warn",
        "unittest.result.TestResult.addSuccess",
        "unittest.runner.TextTestResult.addSuccess"
    ],
    "unittest.case.TestCase._addUnexpectedSuccess": [
        "warnings.warn",
        "sys.exc_info",
        "unittest.runner.TextTestResult.addFailure",
        "unittest.result.TestResult.addFailure"
    ],
    "unittest.case.TestCase._callSetUp": [
        "unittest.case.TestCase.setUp"
    ],
    "unittest.case.TestCase._callTestMethod": [],
    "unittest.case.TestCase._callTearDown": [
        "unittest.case.TestCase.tearDown"
    ],
    "unittest.case.TestCase._callCleanup": [],
    "unittest.case.TestCase.run": [
        "unittest.case._Outcome.__init__",
        "unittest.result.TestResult.addSuccess",
        "unittest.case._Outcome.testPartExecutor",
        "unittest.case.TestCase.doCleanups",
        "unittest.case.TestCase.defaultTestResult",
        "unittest.case.TestCase._addSkip",
        "unittest.result.TestResult.stopTest",
        "unittest.case.TestCase._callTestMethod",
        "unittest.case.TestCase._feedErrorsToResult",
        "unittest.result.TestResult.startTest",
        "unittest.runner.TextTestResult.startTest",
        "unittest.runner.TextTestResult.addSuccess",
        "unittest.case.TestCase._callSetUp",
        "unittest.case.TestCase._addExpectedFailure",
        "unittest.case.TestCase._callTearDown",
        "unittest.case.TestCase._addUnexpectedSuccess",
        "<builtin>.getattr"
    ],
    "unittest.result.TestResult.startTest": [
        "unittest.result.TestResult._setupStdout"
    ],
    "unittest.result.TestResult.stopTest": [
        "unittest.result.TestResult._restoreStdout"
    ],
    "unittest.case.TestCase.doCleanups": [
        "unittest.case.TestCase._callCleanup",
        "unittest.case._Outcome.__init__"
    ],
    "unittest.case.TestCase.doClassCleanups": [
        "sys.exc_info"
    ],
    "unittest.case.TestCase.__call__": [
        "unittest.case.TestCase.run"
    ],
    "unittest.case.TestCase.debug": [
        "unittest.case.TestCase.setUp",
        "<builtin>.getattr",
        "unittest.case.TestCase.tearDown"
    ],
    "unittest.case.TestCase.fail": [],
    "unittest.case.TestCase.assertFalse": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.util.safe_repr": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "unittest.case.TestCase._formatMessage": [
        "unittest.util.safe_repr"
    ],
    "unittest.case.TestCase.assertTrue": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertRaises": [
        "unittest.case._AssertRaisesBaseContext.__init__",
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertWarns": [
        "unittest.case._AssertRaisesBaseContext.__init__",
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertLogs": [
        "unittest.case._AssertLogsContext.__init__"
    ],
    "unittest.case.TestCase._getAssertEqualityFunc": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "unittest.case.TestCase._baseAssertEqual": [
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.util._common_shorten_repr": [
        "<builtin>.tuple",
        "<builtin>.max",
        "unittest.util._shorten",
        "<builtin>.map",
        "<builtin>.len",
        "genericpath.commonprefix"
    ],
    "unittest.case.TestCase.assertEqual": [
        "unittest.case.TestCase._getAssertEqualityFunc",
        "unittest.case.TestCase._baseAssertEqual"
    ],
    "unittest.case.TestCase.assertNotEqual": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertAlmostEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "<builtin>.TypeError",
        "<builtin>.abs",
        "<builtin>.round"
    ],
    "unittest.case.TestCase.assertNotAlmostEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.util.safe_repr",
        "<builtin>.TypeError",
        "<builtin>.abs",
        "<builtin>.round"
    ],
    "unittest.case.TestCase.assertSequenceEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail",
        "unittest.util.safe_repr",
        "difflib.ndiff",
        "unittest.util._common_shorten_repr",
        "<builtin>.min",
        "unittest.case.TestCase._truncateMessage",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.isinstance"
    ],
    "unittest.case.TestCase._truncateMessage": [
        "<builtin>.len"
    ],
    "unittest.case.TestCase.assertListEqual": [
        "unittest.case.TestCase.assertSequenceEqual"
    ],
    "unittest.case.TestCase.assertTupleEqual": [
        "unittest.case.TestCase.assertSequenceEqual"
    ],
    "unittest.case.TestCase.assertSetEqual": [
        "unittest.case.TestCase._formatMessage",
        "<builtin>.repr",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertIn": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertNotIn": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIs": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIsNot": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertDictEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail",
        "difflib.ndiff",
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._truncateMessage",
        "unittest.case.TestCase.assertIsInstance"
    ],
    "unittest.case.TestCase.assertIsInstance": [
        "unittest.util.safe_repr",
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertDictContainsSubset": [
        "unittest.util.safe_repr",
        "warnings.warn",
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertCountEqual": [
        "unittest.util._count_diff_hashable",
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail",
        "collections.Counter.__init__",
        "unittest.util._count_diff_all_purpose",
        "<builtin>.list",
        "unittest.case.TestCase._truncateMessage"
    ],
    "unittest.util._count_diff_all_purpose": [
        "<builtin>.object",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "unittest.util._count_diff_hashable": [
        "collections.Counter.__init__"
    ],
    "unittest.case.TestCase.assertMultiLineEqual": [
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._baseAssertEqual",
        "difflib.ndiff",
        "unittest.util._common_shorten_repr",
        "unittest.case.TestCase._truncateMessage",
        "<builtin>.len",
        "unittest.case.TestCase.assertIsInstance"
    ],
    "unittest.case.TestCase.assertLess": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertLessEqual": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertGreater": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertGreaterEqual": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIsNone": [
        "unittest.util.safe_repr",
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertIsNotNone": [
        "unittest.case.TestCase.fail",
        "unittest.case.TestCase._formatMessage"
    ],
    "unittest.case.TestCase.assertNotIsInstance": [
        "unittest.util.safe_repr",
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage",
        "unittest.case.TestCase.fail"
    ],
    "unittest.case.TestCase.assertRaisesRegex": [
        "unittest.case._AssertRaisesBaseContext.__init__",
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertWarnsRegex": [
        "unittest.case._AssertRaisesBaseContext.__init__",
        "unittest.case._AssertRaisesBaseContext.handle"
    ],
    "unittest.case.TestCase.assertRegex": [
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage",
        "re.compile"
    ],
    "unittest.case.TestCase.assertNotRegex": [
        "<builtin>.isinstance",
        "unittest.case.TestCase._formatMessage",
        "re.compile"
    ],
    "unittest.case.TestCase._deprecate": [],
    "unittest.case.TestCase._deprecate.deprecated_func": [
        "warnings.warn",
        "unittest.case.TestCase.__init__"
    ],
    "unittest.case.FunctionTestCase": [],
    "unittest.case.FunctionTestCase.__init__": [
        "<builtin>.super"
    ],
    "unittest.case.FunctionTestCase.setUp": [],
    "unittest.case.FunctionTestCase.tearDown": [],
    "unittest.case.FunctionTestCase.runTest": [],
    "unittest.case.FunctionTestCase.id": [],
    "unittest.case.FunctionTestCase.__eq__": [
        "<builtin>.isinstance"
    ],
    "unittest.case.FunctionTestCase.__hash__": [
        "<builtin>.type",
        "<builtin>.hash"
    ],
    "unittest.case.FunctionTestCase.__str__": [
        "unittest.util.strclass"
    ],
    "unittest.case.FunctionTestCase.__repr__": [
        "unittest.util.strclass"
    ],
    "unittest.case.FunctionTestCase.shortDescription": [],
    "unittest.case._SubTest": [],
    "unittest.case._SubTest.runTest": [
        "<builtin>.NotImplementedError"
    ],
    "unittest.case._SubTest._subDescription": [
        "weakref.WeakValueDictionary.items",
        "_collections_abc.Mapping.items",
        "weakref.WeakKeyDictionary.items"
    ],
    "unittest.case._SubTest.id": [
        "doctest.DocFileCase.id",
        "unittest.case._SubTest._subDescription",
        "unittest.case.TestCase.id"
    ],
    "unittest.case._SubTest.shortDescription": [
        "unittest.case.TestCase.shortDescription"
    ],
    "unittest.case._SubTest.__str__": [
        "unittest.case._SubTest._subDescription"
    ],
    "unittest.util._shorten": [
        "<builtin>.len"
    ],
    "unittest.util.sorted_list_difference": [],
    "unittest.util.unorderable_list_difference": [],
    "unittest.util.three_way_cmp": [],
    "inspect.isdatadescriptor": [
        "<builtin>.type",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.isclass",
        "inspect.ismethod"
    ],
    "inspect.ismemberdescriptor": [
        "<builtin>.isinstance"
    ],
    "inspect.isgetsetdescriptor": [
        "<builtin>.isinstance"
    ],
    "inspect._has_code_flag": [
        "inspect.isfunction",
        "inspect.ismethod",
        "<builtin>.bool",
        "functools._unwrap_partial"
    ],
    "inspect.isgeneratorfunction": [
        "inspect._has_code_flag"
    ],
    "inspect.iscoroutinefunction": [
        "inspect._has_code_flag"
    ],
    "inspect.isasyncgenfunction": [
        "inspect._has_code_flag"
    ],
    "inspect.isasyncgen": [
        "<builtin>.isinstance"
    ],
    "inspect.isgenerator": [
        "<builtin>.isinstance"
    ],
    "inspect.iscoroutine": [
        "<builtin>.isinstance"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.isabstract": [
        "<builtin>.getattr",
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.issubclass"
    ],
    "inspect.getmembers": [
        "<builtin>.getattr",
        "<builtin>.dir",
        "<builtin>.set",
        "inspect.getmro",
        "<builtin>.isinstance",
        "inspect.isclass"
    ],
    "inspect.getmro": [],
    "inspect.getmembers.<lambda1>": [],
    "inspect.classify_class_attrs": [
        "<builtin>.tuple",
        "<builtin>.getattr",
        "<builtin>.dir",
        "<builtin>.type",
        "<builtin>.set",
        "inspect.getmro",
        "<builtin>.Exception",
        "<builtin>.isinstance",
        "inspect.isroutine"
    ],
    "<builtin>.Exception": [],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "<builtin>.hasattr"
    ],
    "inspect._signature_from_callable.<lambda1>": [
        "<builtin>.hasattr"
    ],
    "sys.getrecursionlimit": [],
    "inspect.indentsize": [
        "<builtin>.len"
    ],
    "inspect._findclass": [
        "<builtin>.getattr",
        "inspect.isclass",
        "sys.modules.get"
    ],
    "inspect._finddoc": [
        "inspect.ismemberdescriptor",
        "inspect.ismethoddescriptor",
        "<builtin>.isinstance",
        "inspect.isfunction",
        "inspect._findclass",
        "inspect.isbuiltin",
        "inspect.isdatadescriptor",
        "<builtin>.getattr",
        "inspect.isclass",
        "inspect.ismethod"
    ],
    "inspect.getdoc": [
        "inspect.cleandoc",
        "inspect._finddoc",
        "<builtin>.isinstance"
    ],
    "inspect.cleandoc": [
        "<builtin>.min",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "inspect.getmodulename": [
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.len"
    ],
    "inspect.getabsfile": [
        "posixpath.abspath",
        "inspect.getsourcefile",
        "ntpath.normcase",
        "posixpath.normcase",
        "ntpath.abspath",
        "inspect.getfile"
    ],
    "sys.modules.copy": [],
    "inspect.findsource": [
        "linecache.checkcache",
        "linecache.getlines",
        "<builtin>.range",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.getmodule",
        "<builtin>.OSError",
        "inspect.getsourcefile",
        "<builtin>.len",
        "re.compile",
        "inspect.ismodule",
        "inspect.isfunction",
        "inspect.isclass",
        "inspect.ismethod",
        "<builtin>.hasattr",
        "inspect.iscode",
        "inspect.getfile"
    ],
    "inspect.getcomments": [
        "inspect.ismodule",
        "inspect.indentsize",
        "inspect.findsource",
        "<builtin>.len"
    ],
    "inspect.EndOfBlock": [],
    "inspect.BlockFinder": [],
    "inspect.BlockFinder.__init__": [],
    "inspect.BlockFinder.tokeneater": [],
    "inspect.getblock": [
        "inspect.BlockFinder.tokeneater",
        "<builtin>.iter",
        "inspect.BlockFinder.__init__"
    ],
    "inspect.getsourcelines": [
        "inspect.getblock",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.unwrap",
        "inspect.findsource",
        "inspect.ismodule"
    ],
    "inspect.getsource": [
        "inspect.getsourcelines"
    ],
    "inspect.walktree": [
        "inspect.walktree",
        "operator.attrgetter.__init__"
    ],
    "inspect.getclasstree": [
        "inspect.walktree"
    ],
    "inspect.getargs": [
        "<builtin>.TypeError",
        "inspect.iscode",
        "<builtin>.list"
    ],
    "inspect.getargspec": [
        "warnings.warn",
        "inspect.getfullargspec",
        "<builtin>.ValueError"
    ],
    "inspect.getfullargspec": [
        "<builtin>.TypeError",
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "<builtin>.tuple",
        "inspect._signature_from_builtin",
        "inspect._signature_bound_method",
        "<builtin>.ValueError",
        "<builtin>.callable",
        "inspect._signature_is_builtin",
        "inspect._signature_from_callable",
        "inspect.unwrap",
        "inspect._signature_get_partial",
        "inspect._signature_get_user_defined_method",
        "<builtin>.TypeError",
        "inspect.isfunction",
        "<builtin>.type",
        "inspect.Signature.from_callable",
        "<builtin>.isinstance",
        "inspect._signature_is_functionlike",
        "inspect._signature_fromstr",
        "inspect._signature_from_function"
    ],
    "inspect.getargvalues": [
        "inspect.getargs"
    ],
    "inspect.formatannotation": [
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.repr"
    ],
    "inspect.formatannotationrelativeto": [
        "<builtin>.getattr"
    ],
    "inspect.formatannotationrelativeto._formatannotation": [
        "inspect.formatannotation"
    ],
    "inspect.formatargspec.formatargandannotation": [
        "inspect.formatannotation"
    ],
    "inspect.<lambda3>": [],
    "inspect.<lambda1>": [],
    "inspect.<lambda2>": [],
    "inspect.<lambda4>": [],
    "inspect.formatargvalues": [
        "inspect.<lambda5>",
        "inspect.<lambda6>",
        "inspect.<lambda7>",
        "<builtin>.len",
        "<builtin>.range",
        "inspect.formatargvalues.convert"
    ],
    "inspect.formatargvalues.convert": [
        "inspect.<lambda7>"
    ],
    "inspect.<lambda7>": [],
    "inspect.<lambda5>": [],
    "inspect.<lambda6>": [],
    "inspect._missing_arguments": [
        "<builtin>.repr",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "inspect._too_many": [
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "inspect.getcallargs": [
        "<builtin>.tuple",
        "inspect._missing_arguments",
        "<builtin>.min",
        "inspect._too_many",
        "<builtin>.TypeError",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.enumerate",
        "inspect.getfullargspec",
        "inspect.ismethod"
    ],
    "inspect.getclosurevars": [
        "<builtin>.zip",
        "sys.base_prefix.add",
        "<builtin>.TypeError",
        "<builtin>.set",
        "sys.path.add",
        "inspect.ismodule",
        "inspect.isfunction",
        "inspect.ismethod",
        "tarfile.TarFile.add"
    ],
    "sys.path.add": [],
    "sys.base_prefix.add": [],
    "inspect.getframeinfo": [
        "<builtin>.max",
        "inspect.isframe",
        "inspect.istraceback",
        "<builtin>.min",
        "<builtin>.TypeError",
        "inspect.getsourcefile",
        "inspect.findsource",
        "<builtin>.len",
        "inspect.getfile"
    ],
    "inspect.getlineno": [],
    "inspect.getouterframes": [
        "inspect.getframeinfo"
    ],
    "inspect.getinnerframes": [
        "inspect.getframeinfo"
    ],
    "inspect.currentframe": [
        "sys._getframe",
        "<builtin>.hasattr"
    ],
    "inspect.stack": [
        "inspect.getouterframes",
        "sys._getframe"
    ],
    "inspect.trace": [
        "sys.exc_info",
        "inspect.getinnerframes"
    ],
    "inspect._static_getmro": [],
    "inspect._check_instance": [],
    "inspect._check_class": [
        "inspect._static_getmro",
        "inspect._shadowed_dict",
        "<builtin>.type"
    ],
    "inspect._shadowed_dict": [
        "inspect._static_getmro",
        "<builtin>.type"
    ],
    "inspect._is_type": [
        "inspect._static_getmro"
    ],
    "inspect.getattr_static": [
        "<builtin>.AttributeError",
        "inspect._is_type",
        "inspect._static_getmro",
        "inspect._shadowed_dict",
        "inspect._check_instance",
        "<builtin>.type",
        "inspect._check_class"
    ],
    "inspect.getgeneratorstate": [],
    "inspect.getgeneratorlocals": [
        "<builtin>.getattr",
        "inspect.isgenerator",
        "<builtin>.TypeError"
    ],
    "inspect.getcoroutinestate": [],
    "inspect.getcoroutinelocals": [
        "<builtin>.getattr"
    ],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr",
        "<builtin>.isinstance"
    ],
    "inspect._signature_get_partial": [
        "<builtin>.ValueError",
        "_collections.OrderedDict.values",
        "_collections.OrderedDict.pop",
        "_collections.OrderedDict.move_to_end",
        "_collections.OrderedDict"
    ],
    "_collections.OrderedDict.pop": [],
    "_collections.OrderedDict.move_to_end": [],
    "_collections.OrderedDict.values": [],
    "inspect._signature_bound_method": [
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "inspect._signature_is_builtin": [
        "inspect.ismethoddescriptor",
        "<builtin>.isinstance",
        "inspect.isbuiltin"
    ],
    "inspect._signature_is_functionlike": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "inspect.isclass",
        "<builtin>.isinstance"
    ],
    "inspect._signature_get_bound_param": [],
    "inspect._signature_strip_non_python_syntax": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "ast.parse": [
        "<builtin>.isinstance",
        "<builtin>.compile"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "inspect._signature_fromstr.wrap_value": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance",
        "<builtin>.eval",
        "<builtin>.type"
    ],
    "inspect._signature_fromstr.RewriteSymbolics": [],
    "inspect._signature_fromstr.RewriteSymbolics.visit_Attribute": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance",
        "inspect._signature_fromstr.wrap_value",
        "<builtin>.reversed"
    ],
    "inspect._signature_fromstr.RewriteSymbolics.visit_Name": [
        "<builtin>.isinstance",
        "inspect._signature_fromstr.wrap_value",
        "<builtin>.ValueError"
    ],
    "inspect._signature_fromstr.p": [
        "inspect._signature_fromstr.parse_name",
        "inspect.Parameter.__init__",
        "ast.literal_eval"
    ],
    "ast.literal_eval": [
        "ast.parse",
        "<builtin>.isinstance",
        "ast.literal_eval._convert"
    ],
    "inspect.Parameter.__init__": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "itertools.zip_longest": [],
    "inspect.Signature.__init__": [
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "_collections.OrderedDict"
    ],
    "inspect._signature_from_builtin": [
        "<builtin>.ValueError",
        "inspect._signature_is_builtin",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "inspect._signature_fromstr"
    ],
    "inspect._signature_from_function": [
        "inspect.Signature.__init__",
        "<builtin>.getattr",
        "inspect.Parameter.__init__",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "<builtin>.len",
        "inspect.isfunction",
        "inspect._signature_is_functionlike",
        "inspect._signature_fromstr"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._void": [],
    "inspect._empty": [],
    "inspect._ParameterKind": [],
    "inspect._ParameterKind.__str__": [],
    "inspect._ParameterKind.description": [],
    "inspect.Parameter": [],
    "inspect.Parameter.__reduce__": [
        "<builtin>.type"
    ],
    "inspect.Parameter.__setstate__": [],
    "inspect.Parameter.name": [],
    "inspect.Parameter.default": [],
    "inspect.Parameter.annotation": [],
    "inspect.Parameter.kind": [],
    "inspect.Parameter.replace": [
        "<builtin>.type"
    ],
    "inspect.Parameter.__str__": [
        "<builtin>.repr",
        "inspect.formatannotation"
    ],
    "inspect.Parameter.__repr__": [],
    "inspect.Parameter.__hash__": [
        "<builtin>.hash"
    ],
    "inspect.Parameter.__eq__": [
        "<builtin>.isinstance"
    ],
    "inspect.BoundArguments": [],
    "inspect.BoundArguments.__init__": [],
    "inspect.BoundArguments.signature": [],
    "inspect.BoundArguments.args": [
        "<builtin>.tuple"
    ],
    "inspect.BoundArguments.kwargs": [],
    "inspect.BoundArguments.apply_defaults": [
        "_collections.OrderedDict"
    ],
    "inspect.BoundArguments.__eq__": [
        "<builtin>.isinstance"
    ],
    "inspect.BoundArguments.__setstate__": [],
    "inspect.BoundArguments.__getstate__": [],
    "inspect.BoundArguments.__repr__": [
        "_collections.OrderedDict.items"
    ],
    "inspect.Signature": [],
    "inspect.Signature.from_function": [
        "warnings.warn",
        "inspect._signature_from_function"
    ],
    "inspect.Signature.from_builtin": [
        "inspect._signature_from_builtin",
        "warnings.warn"
    ],
    "inspect.Signature.parameters": [],
    "inspect.Signature.return_annotation": [],
    "inspect.Signature.replace": [
        "<builtin>.type"
    ],
    "inspect.Signature._hash_basis": [
        "<builtin>.tuple"
    ],
    "inspect.Signature.__hash__": [
        "<builtin>.frozenset",
        "<builtin>.hash",
        "inspect.Signature._hash_basis"
    ],
    "inspect.Signature.__eq__": [
        "<builtin>.isinstance",
        "inspect.Signature._hash_basis"
    ],
    "inspect.Signature._bind": [
        "<builtin>.tuple",
        "itertools.chain",
        "<builtin>.next",
        "inspect.BoundArguments.__init__",
        "<builtin>.iter",
        "<builtin>.TypeError",
        "_collections.OrderedDict"
    ],
    "inspect.Signature.bind": [],
    "inspect.Signature.bind_partial": [],
    "inspect.Signature.__reduce__": [
        "<builtin>.tuple",
        "<builtin>.type"
    ],
    "inspect.Signature.__setstate__": [],
    "inspect.Signature.__repr__": [],
    "inspect.Signature.__str__": [
        "<builtin>.str",
        "inspect.formatannotation"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "dis._try_compile": [
        "<builtin>.compile"
    ],
    "dis.dis": [
        "dis._disassemble_str",
        "<builtin>.sorted",
        "<builtin>.print",
        "dis.dis",
        "dis.distb",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "dis._disassemble_bytes",
        "dis._disassemble_recursive"
    ],
    "dis.distb": [
        "<builtin>.RuntimeError",
        "dis.disassemble"
    ],
    "dis._disassemble_recursive": [
        "<builtin>.print",
        "dis.disassemble",
        "<builtin>.hasattr",
        "dis._disassemble_recursive"
    ],
    "dis._disassemble_bytes": [
        "dis.Instruction._disassemble",
        "<builtin>.max",
        "<builtin>.print",
        "<builtin>.str",
        "<builtin>.len",
        "dis._get_instructions_bytes"
    ],
    "dis._disassemble_str": [
        "dis._try_compile",
        "dis._disassemble_recursive"
    ],
    "dis.disassemble": [
        "<builtin>.dict",
        "dis._disassemble_bytes",
        "dis.findlinestarts"
    ],
    "dis.pretty_flags": [
        "<builtin>.hex",
        "<builtin>.range"
    ],
    "dis._get_code_object": [
        "dis._try_compile",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "dis.code_info": [
        "dis._format_code_info",
        "dis._get_code_object"
    ],
    "dis._format_code_info": [
        "<builtin>.enumerate",
        "dis.pretty_flags"
    ],
    "dis.show_code": [
        "<builtin>.print",
        "dis.code_info"
    ],
    "dis.Instruction": [],
    "dis.Instruction._disassemble": [
        "<builtin>.repr"
    ],
    "dis.get_instructions": [
        "<builtin>.dict",
        "dis._get_instructions_bytes",
        "dis._get_code_object",
        "dis.findlinestarts"
    ],
    "dis.findlinestarts": [
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "dis._get_instructions_bytes": [
        "<builtin>.repr",
        "dis._get_name_info",
        "dis._unpack_opargs",
        "dis.findlabels",
        "<builtin>.enumerate",
        "<builtin>.bool",
        "dis._get_const_info"
    ],
    "dis._get_const_info": [
        "<builtin>.repr"
    ],
    "dis._get_name_info": [
        "<builtin>.repr"
    ],
    "dis.findlabels": [
        "dis._unpack_opargs"
    ],
    "dis._unpack_opargs": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "dis.Bytecode": [],
    "dis.Bytecode.__init__": [
        "<builtin>.dict",
        "dis._get_code_object",
        "dis.findlinestarts"
    ],
    "dis.Bytecode.__iter__": [
        "dis._get_instructions_bytes"
    ],
    "dis.Bytecode.__repr__": [],
    "dis.Bytecode.from_traceback": [
        "dis.Bytecode.__init__"
    ],
    "dis.Bytecode.info": [
        "dis._format_code_info"
    ],
    "dis.Bytecode.dis": [
        "dis._disassemble_bytes",
        "io.StringIO"
    ],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "opcode.def_op"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.repr",
        "<builtin>.type"
    ],
    "ast.literal_eval._convert_signed_num": [
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num"
    ],
    "ast.literal_eval._convert": [
        "<builtin>.tuple",
        "<builtin>.zip",
        "<builtin>.list",
        "<builtin>.dict",
        "ast.literal_eval._convert_signed_num",
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num"
    ],
    "ast.dump": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "ast.dump._format"
    ],
    "ast.dump._format": [
        "<builtin>.isinstance",
        "<builtin>.repr",
        "ast.dump._format",
        "<builtin>.getattr"
    ],
    "ast.copy_location": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.setattr"
    ],
    "ast.fix_missing_locations": [
        "ast.fix_missing_locations._fix"
    ],
    "ast.fix_missing_locations._fix": [
        "ast.fix_missing_locations._fix",
        "ast.iter_child_nodes",
        "<builtin>.hasattr"
    ],
    "ast.iter_child_nodes": [
        "ast.iter_fields",
        "<builtin>.isinstance"
    ],
    "ast.increment_lineno": [
        "<builtin>.getattr",
        "ast.walk"
    ],
    "ast.iter_fields": [
        "<builtin>.getattr"
    ],
    "ast._splitlines_no_ff": [
        "<builtin>.len"
    ],
    "ast._pad_whitespace": [],
    "ast.get_source_segment": [
        "ast._splitlines_no_ff",
        "ast._pad_whitespace"
    ],
    "ast.NodeVisitor": [],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ast.NodeVisitor.generic_visit": [
        "ast.iter_fields",
        "<builtin>.isinstance",
        "ast.NodeVisitor.visit"
    ],
    "ast.NodeTransformer": [],
    "ast.NodeTransformer.generic_visit": [
        "<builtin>.setattr",
        "ast.NodeVisitor.visit",
        "<builtin>.delattr",
        "ast.iter_fields",
        "<builtin>.isinstance"
    ],
    "ast._getter": [],
    "ast._setter": [],
    "ast._ABC": [],
    "ast._ABC.__instancecheck__": [
        "<builtin>.isinstance"
    ],
    "ast._new": [],
    "ast.Num": [],
    "ast.Str": [],
    "ast.Bytes": [],
    "ast.NameConstant": [],
    "ast.Ellipsis": [],
    "ast.Ellipsis.__new__": [],
    "unittest.main._convert_name": [
        "ntpath.relpath",
        "posixpath.isfile",
        "sys.path.lower",
        "posixpath.relpath",
        "sys.base_prefix.lower",
        "sys.path.startswith",
        "ntpath.isfile",
        "posixpath.isabs",
        "ntpath.isabs",
        "sys.base_prefix.startswith"
    ],
    "sys.base_prefix.lower": [],
    "sys.path.lower": [],
    "unittest.main._convert_names": [
        "unittest.main._convert_name"
    ],
    "unittest.main._convert_select_pattern": [],
    "unittest.main.TestProgram": [],
    "unittest.main.TestProgram.__init__": [
        "<builtin>.getattr",
        "unittest.main.TestProgram.parseArgs",
        "ntpath.basename",
        "posixpath.basename",
        "unittest.main.TestProgram.runTests",
        "<builtin>.isinstance",
        "<builtin>.__import__"
    ],
    "unittest.main.TestProgram.parseArgs": [
        "argparse.ArgumentParser.parse_args",
        "unittest.main.TestProgram._do_discovery",
        "<builtin>.list",
        "unittest.main._convert_names",
        "unittest.main.TestProgram._initArgParsers",
        "<builtin>.len",
        "<builtin>.isinstance",
        "unittest.main.TestProgram.createTests"
    ],
    "unittest.main.TestProgram.runTests": [
        "unittest.runner.TextTestRunner.__init__",
        "unittest.signals.installHandler",
        "unittest.runner.TextTestRunner.run",
        "sys.exit",
        "<builtin>.isinstance"
    ],
    "unittest.main.TestProgram.usageExit": [
        "unittest.main.TestProgram._initArgParsers",
        "<builtin>.print",
        "sys.exit",
        "unittest.main.TestProgram._print_help"
    ],
    "unittest.main.TestProgram._initArgParsers": [
        "unittest.main.TestProgram._getMainArgParser",
        "unittest.main.TestProgram._getDiscoveryArgParser",
        "unittest.main.TestProgram._getParentArgParser"
    ],
    "unittest.main.TestProgram._print_help": [
        "argparse.ArgumentParser.print_help",
        "<builtin>.print",
        "argparse.ArgumentParser.format_help"
    ],
    "unittest.main.TestProgram._do_discovery": [
        "unittest.main.TestProgram._initArgParsers",
        "argparse.ArgumentParser.parse_args",
        "unittest.main.TestProgram.createTests"
    ],
    "unittest.main.TestProgram.createTests": [],
    "unittest.main.TestProgram._getParentArgParser": [
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__"
    ],
    "unittest.main.TestProgram._getMainArgParser": [
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__"
    ],
    "unittest.main.TestProgram._getDiscoveryArgParser": [
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__"
    ],
    "unittest.result.failfast": [
        "functools.wraps",
        "_functools.partial"
    ],
    "unittest.result.failfast.inner": [
        "<builtin>.getattr"
    ],
    "unittest.result.TestResult": [
        "unittest.result.TestResult.failfast"
    ],
    "unittest.result.TestResult.printErrors": [],
    "unittest.result.TestResult._setupStdout": [
        "io.StringIO"
    ],
    "unittest.result.TestResult.startTestRun": [],
    "unittest.result.TestResult._restoreStdout": [
        "sys.stderr.getvalue",
        "sys.stdout.getvalue",
        "sys.stderr.write",
        "sys.stdout.write"
    ],
    "sys.stdout.getvalue": [],
    "sys.stderr.getvalue": [],
    "unittest.result.TestResult.stopTestRun": [],
    "unittest.result.TestResult.failfast": [],
    "unittest.result.TestResult._exc_info_to_string": [
        "unittest.result.TestResult._is_relevant_tb_level",
        "traceback.TracebackException.__init__",
        "sys.stderr.getvalue",
        "traceback.TracebackException.format",
        "<builtin>.list",
        "unittest.result.TestResult._count_relevant_tb_levels",
        "sys.stdout.getvalue"
    ],
    "unittest.result.TestResult.stop": [],
    "unittest.result.TestResult.addSkip": [],
    "unittest.result.TestResult.addExpectedFailure": [
        "unittest.result.TestResult._exc_info_to_string"
    ],
    "unittest.result.TestResult.addUnexpectedSuccess": [],
    "unittest.result.TestResult._is_relevant_tb_level": [],
    "unittest.result.TestResult._count_relevant_tb_levels": [
        "unittest.result.TestResult._is_relevant_tb_level"
    ],
    "unittest.result.TestResult.__repr__": [
        "unittest.util.strclass",
        "<builtin>.len"
    ],
    "unittest.loader._FailedTest": [],
    "unittest.loader._FailedTest.__init__": [
        "<builtin>.super"
    ],
    "unittest.loader._FailedTest.__getattr__": [
        "<builtin>.super"
    ],
    "unittest.loader._FailedTest.__getattr__.testFailure": [],
    "unittest.loader._make_failed_import_test": [
        "<builtin>.ImportError",
        "traceback.format_exc",
        "unittest.loader._make_failed_test"
    ],
    "unittest.loader._make_failed_test": [
        "unittest.loader._FailedTest.__init__",
        "unittest.suite.BaseTestSuite.__init__"
    ],
    "unittest.loader._make_failed_load_tests": [
        "traceback.format_exc",
        "unittest.loader._make_failed_test"
    ],
    "unittest.loader._make_skipped_test": [
        "unittest.case.skipUnless.reason",
        "unittest.case.skip.decorator",
        "unittest.suite.BaseTestSuite.__init__",
        "unittest.case.skipIf.reason",
        "unittest.case.skip",
        "<builtin>.str",
        "unittest.case.skip.decorator.skip_wrapper",
        "<builtin>.type"
    ],
    "unittest.case.skipUnless.reason": [],
    "unittest.case.skipIf.reason": [],
    "unittest.loader._make_skipped_test.testSkipped": [],
    "unittest.loader._jython_aware_splitext": [
        "sys.base_prefix.lower",
        "ntpath.splitext",
        "sys.path.lower",
        "posixpath.splitext"
    ],
    "unittest.loader.TestLoader": [
        "<builtin>.staticmethod"
    ],
    "unittest.loader.TestLoader.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "unittest.loader.TestLoader.loadTestsFromTestCase": [
        "unittest.suite.BaseTestSuite.__init__",
        "unittest.loader.TestLoader.getTestCaseNames",
        "<builtin>.map",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.issubclass"
    ],
    "unittest.loader.TestLoader.getTestCaseNames": [
        "<builtin>.filter",
        "<builtin>.dir",
        "functools.cmp_to_key",
        "<builtin>.list"
    ],
    "unittest.loader.TestLoader.loadTestsFromModule": [
        "unittest.loader.TestLoader.loadTestsFromTestCase",
        "<builtin>.sorted",
        "<builtin>.dir",
        "unittest.suite.BaseTestSuite.__init__",
        "unittest.loader._make_failed_load_tests",
        "warnings.warn",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.getattr",
        "<builtin>.issubclass"
    ],
    "unittest.loader.TestLoader.loadTestsFromName": [
        "traceback.format_exc",
        "unittest.loader.TestLoader.loadTestsFromTestCase",
        "unittest.loader.TestLoader.loadTestsFromModule",
        "<builtin>.callable",
        "unittest.suite.BaseTestSuite.__init__",
        "unittest.loader._make_failed_test",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<builtin>.issubclass",
        "unittest.loader._make_failed_import_test"
    ],
    "unittest.loader.TestLoader.loadTestsFromNames": [
        "unittest.loader.TestLoader.loadTestsFromName",
        "unittest.suite.BaseTestSuite.__init__"
    ],
    "unittest.loader.TestLoader.getTestCaseNames.shouldIncludeMethod": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.any",
        "fnmatch.fnmatchcase"
    ],
    "unittest.loader.TestLoader.discover": [
        "posixpath.abspath",
        "ntpath.dirname",
        "unittest.loader.TestLoader._find_tests",
        "<builtin>.ImportError",
        "posixpath.isfile",
        "ntpath.isfile",
        "unittest.loader.TestLoader._get_directory_containing_module",
        "posixpath.join",
        "sys.path.remove",
        "ntpath.isdir",
        "<builtin>.TypeError",
        "posixpath.isdir",
        "ntpath.join",
        "<builtin>.__import__",
        "ntpath.abspath",
        "sys.path.insert",
        "unittest.suite.BaseTestSuite.__init__",
        "<builtin>.list",
        "posixpath.dirname"
    ],
    "unittest.loader.TestLoader._find_tests": [
        "unittest.loader.TestLoader._get_name_from_path",
        "posixpath.join",
        "<builtin>.sorted",
        "unittest.loader.TestLoader._find_test_path",
        "unittest.loader.TestLoader._find_tests",
        "ntpath.join"
    ],
    "unittest.loader.TestLoader._get_directory_containing_module": [
        "posixpath.abspath",
        "ntpath.basename",
        "posixpath.basename",
        "posixpath.dirname",
        "ntpath.dirname",
        "ntpath.abspath"
    ],
    "sys.path.remove": [],
    "unittest.loader.TestLoader._get_name_from_path": [
        "unittest.loader._jython_aware_splitext",
        "ntpath.relpath",
        "sys.base_prefix.startswith",
        "posixpath.relpath",
        "sys.path.startswith",
        "sys.base_prefix.replace",
        "posixpath.normpath",
        "posixpath.isabs",
        "ntpath.isabs",
        "sys.path.replace",
        "ntpath.normpath"
    ],
    "unittest.loader.TestLoader._get_module_from_name": [
        "<builtin>.__import__"
    ],
    "unittest.loader.TestLoader._match_path": [
        "fnmatch.fnmatch"
    ],
    "unittest.loader.TestLoader._find_test_path": [
        "posixpath.abspath",
        "ntpath.basename",
        "ntpath.dirname",
        "ntpath.realpath",
        "<builtin>.ImportError",
        "unittest.loader.TestLoader.loadTestsFromModule",
        "posixpath.isfile",
        "posixpath.basename",
        "unittest.loader.TestLoader._get_module_from_name",
        "ntpath.isfile",
        "<builtin>.getattr",
        "unittest.loader.TestLoader._get_name_from_path",
        "posixpath.join",
        "ntpath.isdir",
        "posixpath.isdir",
        "ntpath.join",
        "posixpath.realpath",
        "ntpath.abspath",
        "unittest.loader._make_failed_import_test",
        "unittest.loader._jython_aware_splitext",
        "unittest.loader.TestLoader._match_path",
        "unittest.loader._make_skipped_test",
        "posixpath.dirname"
    ],
    "unittest.loader._makeLoader": [
        "unittest.loader.TestLoader.__init__"
    ],
    "unittest.loader.getTestCaseNames": [
        "unittest.loader._makeLoader",
        "unittest.loader.TestLoader.getTestCaseNames"
    ],
    "unittest.loader.makeSuite": [
        "unittest.loader._makeLoader",
        "unittest.loader.TestLoader.loadTestsFromTestCase"
    ],
    "unittest.loader.findTestCases": [
        "unittest.loader.TestLoader.loadTestsFromModule",
        "unittest.loader._makeLoader"
    ],
    "reprlib.recursive_repr.decorating_function.wrapper": [
        "_thread.get_ident",
        "<builtin>.id"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "reprlib.Repr.repr": [
        "reprlib.Repr.repr1"
    ],
    "reprlib.Repr.repr1": [
        "<builtin>.getattr",
        "reprlib.Repr.repr_instance",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "reprlib.Repr.repr_instance": [
        "builtins.repr",
        "<builtin>.max",
        "<builtin>.len",
        "<builtin>.id"
    ],
    "reprlib.Repr._repr_iterable": [
        "itertools.islice",
        "reprlib.Repr.repr1",
        "<builtin>.len"
    ],
    "reprlib.Repr.repr_tuple": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_list": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_array": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_set": [
        "reprlib._possibly_sorted",
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib._possibly_sorted": [
        "<builtin>.sorted",
        "<builtin>.list"
    ],
    "reprlib.Repr.repr_frozenset": [
        "reprlib._possibly_sorted",
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_deque": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_dict": [
        "itertools.islice",
        "reprlib._possibly_sorted",
        "reprlib.Repr.repr1",
        "<builtin>.len"
    ],
    "reprlib.Repr.repr_str": [
        "builtins.repr",
        "<builtin>.len",
        "<builtin>.max"
    ],
    "builtins.repr": [],
    "reprlib.Repr.repr_int": [
        "builtins.repr",
        "<builtin>.len",
        "<builtin>.max"
    ],
    "ssl.<lambda1>": [],
    "ssl.<lambda2>": [],
    "ssl.<lambda3>": [],
    "ssl.<lambda4>": [],
    "ssl.<lambda5>": [],
    "ssl.<lambda6>": [],
    "ssl.TLSVersion": [],
    "ssl._TLSContentType": [],
    "ssl._TLSAlertType": [],
    "ssl._TLSMessageType": [],
    "ssl._dnsname_match": [],
    "ssl._inet_paton": [
        "<builtin>.ValueError"
    ],
    "ssl._ipaddress_match": [
        "ssl._inet_paton"
    ],
    "ssl.match_hostname": [
        "<builtin>.ValueError",
        "ssl._ipaddress_match",
        "<builtin>.map",
        "<builtin>.len",
        "ssl._dnsname_match",
        "ssl._inet_paton"
    ],
    "ssl.get_default_verify_paths": [
        "ntpath.isdir",
        "posixpath.isfile",
        "posixpath.isdir",
        "ntpath.isfile"
    ],
    "ssl._ASN1Object": [],
    "ssl._ASN1Object.__new__": [
        "<builtin>.super"
    ],
    "ssl._ASN1Object.fromnid": [
        "<builtin>.super"
    ],
    "ssl._ASN1Object.fromname": [
        "<builtin>.super"
    ],
    "ssl.Purpose": [],
    "ssl.SSLContext": [
        "<builtin>.hasattr"
    ],
    "ssl.SSLContext.__new__": [],
    "ssl.SSLContext._encode_hostname": [
        "<builtin>.isinstance"
    ],
    "ssl.SSLContext.wrap_socket": [
        "ssl.SSLSocket._create"
    ],
    "ssl.SSLSocket._create": [
        "<builtin>.NotImplementedError",
        "<builtin>.ValueError",
        "<builtin>.dict",
        "<builtin>.super"
    ],
    "ssl.SSLContext.wrap_bio": [
        "ssl.SSLContext._encode_hostname",
        "ssl.SSLObject._create"
    ],
    "ssl.SSLObject._create": [],
    "ssl.SSLContext.set_npn_protocols": [
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.len"
    ],
    "ssl.SSLContext.set_servername_callback": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "ssl.SSLContext.set_servername_callback.shim_cb": [
        "ssl.SSLContext._encode_hostname"
    ],
    "ssl.SSLContext.set_alpn_protocols": [
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.len"
    ],
    "ssl.SSLContext._load_windows_store_certs": [
        "warnings.warn",
        "<builtin>.bytearray"
    ],
    "ssl.SSLContext.load_default_certs": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "ssl.SSLContext._load_windows_store_certs"
    ],
    "ssl.SSLContext.minimum_version": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.maximum_version": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.options": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.hostname_checks_common_name": [],
    "ssl.SSLContext._msg_callback": [
        "<builtin>.super",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "ssl.SSLContext._msg_callback.inner": [],
    "ssl.SSLContext.protocol": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.verify_flags": [
        "<builtin>.super"
    ],
    "ssl.SSLContext.verify_mode": [
        "<builtin>.super"
    ],
    "ssl.create_default_context": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "ssl.SSLContext.load_default_certs",
        "<builtin>.hasattr"
    ],
    "ssl._create_unverified_context": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "ssl.SSLContext.load_default_certs"
    ],
    "ssl.SSLObject": [],
    "ssl.SSLObject.__init__": [
        "<builtin>.TypeError"
    ],
    "ssl.SSLObject.context": [],
    "ssl.SSLObject.session": [],
    "ssl.SSLObject.session_reused": [],
    "ssl.SSLObject.server_side": [],
    "ssl.SSLObject.server_hostname": [],
    "ssl.SSLObject.read": [],
    "ssl.SSLObject.write": [],
    "ssl.SSLObject.getpeercert": [],
    "ssl.SSLObject.selected_npn_protocol": [],
    "ssl.SSLObject.selected_alpn_protocol": [],
    "ssl.SSLObject.cipher": [],
    "ssl.SSLObject.shared_ciphers": [],
    "ssl.SSLObject.compression": [],
    "ssl.SSLObject.pending": [],
    "ssl.SSLObject.do_handshake": [],
    "ssl.SSLObject.unwrap": [],
    "ssl.SSLObject.get_channel_binding": [],
    "ssl.SSLObject.version": [],
    "ssl.SSLObject.verify_client_post_handshake": [],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "ssl.SSLSocket": [
        "ssl._sslcopydoc"
    ],
    "ssl.SSLSocket.__init__": [
        "<builtin>.TypeError"
    ],
    "ssl.SSLSocket.context": [],
    "ssl.SSLSocket.session": [],
    "ssl.SSLSocket.session_reused": [],
    "ssl.SSLSocket.dup": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket._checkClosed": [],
    "ssl.SSLSocket._check_connected": [],
    "ssl.SSLSocket.read": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.write": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.getpeercert": [
        "ssl.SSLSocket._checkClosed",
        "ssl.SSLSocket._check_connected"
    ],
    "ssl.SSLSocket.selected_npn_protocol": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.selected_alpn_protocol": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.cipher": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.shared_ciphers": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.compression": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.send": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super"
    ],
    "ssl.SSLSocket.sendto": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super"
    ],
    "ssl.SSLSocket.sendmsg": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.sendall": [
        "<builtin>.ValueError",
        "<builtin>.memoryview",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super",
        "<builtin>.len",
        "ssl.SSLSocket.send"
    ],
    "ssl.SSLSocket.sendfile": [
        "<builtin>.super",
        "socket.socket._sendfile_use_send"
    ],
    "ssl.SSLSocket.recv": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super",
        "ssl.SSLSocket.read"
    ],
    "ssl.SSLSocket.recv_into": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super",
        "<builtin>.len",
        "ssl.SSLSocket.read"
    ],
    "ssl.SSLSocket.recvfrom": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super"
    ],
    "ssl.SSLSocket.recvfrom_into": [
        "<builtin>.ValueError",
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super"
    ],
    "ssl.SSLSocket.recvmsg": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.recvmsg_into": [
        "<builtin>.NotImplementedError"
    ],
    "ssl.SSLSocket.pending": [
        "ssl.SSLSocket._checkClosed"
    ],
    "ssl.SSLSocket.shutdown": [
        "ssl.SSLSocket._checkClosed",
        "<builtin>.super"
    ],
    "ssl.SSLSocket.unwrap": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "ssl.SSLSocket.verify_client_post_handshake": [
        "<builtin>.ValueError",
        "<builtin>.str"
    ],
    "ssl.SSLSocket._real_close": [
        "<builtin>.super"
    ],
    "ssl.SSLSocket.do_handshake": [
        "ssl.SSLSocket._check_connected"
    ],
    "ssl.SSLSocket._real_connect": [
        "ssl.SSLSocket.do_handshake",
        "<builtin>.ValueError",
        "<builtin>.super"
    ],
    "ssl.SSLSocket.connect": [
        "ssl.SSLSocket._real_connect"
    ],
    "ssl.SSLSocket.connect_ex": [
        "ssl.SSLSocket._real_connect"
    ],
    "ssl.SSLSocket.accept": [
        "<builtin>.super"
    ],
    "ssl.SSLSocket.get_channel_binding": [
        "<builtin>.ValueError"
    ],
    "ssl.SSLSocket.version": [],
    "ssl.wrap_socket": [
        "<builtin>.ValueError",
        "ssl.SSLContext.wrap_socket"
    ],
    "time.strptime": [],
    "ssl.DER_cert_to_PEM_cert": [
        "base64.standard_b64encode",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "ssl.PEM_cert_to_DER_cert": [
        "base64.decodebytes",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "ssl.get_server_certificate": [
        "ssl._create_unverified_context",
        "ssl.DER_cert_to_PEM_cert",
        "socket.create_connection"
    ],
    "ssl.get_protocol_name": [],
    "smtplib.SMTPException": [],
    "smtplib.SMTPNotSupportedError": [],
    "smtplib.SMTPServerDisconnected": [],
    "smtplib.SMTPResponseException": [],
    "smtplib.SMTPResponseException.__init__": [],
    "smtplib.SMTPSenderRefused": [],
    "smtplib.SMTPSenderRefused.__init__": [],
    "smtplib.SMTPRecipientsRefused": [],
    "smtplib.SMTPRecipientsRefused.__init__": [],
    "smtplib.SMTPDataError": [],
    "smtplib.SMTPConnectError": [],
    "smtplib.SMTPHeloError": [],
    "smtplib.SMTPAuthenticationError": [],
    "smtplib.quoteaddr": [],
    "smtplib._addr_only": [],
    "smtplib.quotedata": [
        "re.sub"
    ],
    "smtplib._quote_periods": [
        "re.sub"
    ],
    "smtplib._fix_eols": [
        "re.sub"
    ],
    "smtplib.SMTP": [],
    "smtplib.SMTP.connect": [
        "smtplib.SMTP._get_socket",
        "<builtin>.repr",
        "sys.audit",
        "smtplib.SMTP._print_debug",
        "<builtin>.OSError",
        "<builtin>.int",
        "smtplib.SMTP.getreply"
    ],
    "smtplib.SMTP.close": [],
    "smtplib.SMTP.__enter__": [],
    "smtplib.SMTP.__exit__": [
        "smtplib.SMTP.close",
        "smtplib.SMTPResponseException.__init__",
        "smtplib.SMTP.docmd"
    ],
    "smtplib.SMTP.docmd": [
        "smtplib.SMTP.putcmd",
        "smtplib.SMTP.getreply"
    ],
    "smtplib.SMTP.set_debuglevel": [],
    "smtplib.SMTP._print_debug": [
        "<builtin>.print"
    ],
    "smtplib.SMTP._get_socket": [
        "smtplib.SMTP._print_debug"
    ],
    "smtplib.SMTP.getreply": [
        "smtplib.SMTPResponseException.__init__",
        "<builtin>.repr",
        "smtplib.SMTP._print_debug",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.int",
        "smtplib.SMTP.close"
    ],
    "smtplib.SMTP.send": [
        "<builtin>.repr",
        "sys.audit",
        "smtplib.SMTP._print_debug",
        "<builtin>.isinstance",
        "smtplib.SMTP.close"
    ],
    "smtplib.SMTP.putcmd": [
        "smtplib.SMTP.send"
    ],
    "smtplib.SMTP.helo": [
        "smtplib.SMTP.putcmd",
        "smtplib.SMTP.getreply"
    ],
    "smtplib.SMTP.has_extn": [],
    "smtplib.SMTP.help": [
        "smtplib.SMTP.putcmd",
        "smtplib.SMTP.getreply"
    ],
    "smtplib.SMTP.rset": [
        "smtplib.SMTP.docmd"
    ],
    "smtplib.SMTP._rset": [
        "smtplib.SMTP.rset"
    ],
    "smtplib.SMTP.noop": [
        "smtplib.SMTP.docmd"
    ],
    "smtplib.SMTP.mail": [
        "smtplib.SMTP.putcmd",
        "<builtin>.any",
        "smtplib.quoteaddr",
        "smtplib.SMTP.getreply",
        "smtplib.SMTP.has_extn"
    ],
    "smtplib.SMTP.rcpt": [
        "smtplib.SMTP.putcmd",
        "smtplib.SMTP.getreply",
        "smtplib.quoteaddr"
    ],
    "smtplib.SMTP.data": [
        "smtplib.SMTP.putcmd",
        "smtplib.SMTP.send",
        "smtplib.SMTPResponseException.__init__",
        "smtplib.SMTP._print_debug",
        "smtplib._quote_periods",
        "<builtin>.isinstance",
        "smtplib._fix_eols",
        "smtplib.SMTP.getreply"
    ],
    "smtplib.SMTP.verify": [
        "smtplib.SMTP.putcmd",
        "smtplib.SMTP.getreply",
        "smtplib._addr_only"
    ],
    "smtplib.SMTP.expn": [
        "smtplib.SMTP.putcmd",
        "smtplib.SMTP.getreply",
        "smtplib._addr_only"
    ],
    "smtplib.SMTP.ehlo_or_helo_if_needed": [
        "smtplib.SMTP.ehlo",
        "smtplib.SMTPResponseException.__init__",
        "smtplib.SMTP.helo"
    ],
    "smtplib.SMTP.auth": [
        "base64.decodebytes",
        "smtplib.SMTPResponseException.__init__",
        "email.base64mime.body_encode",
        "smtplib.SMTP.docmd"
    ],
    "smtplib.SMTP.auth_cram_md5": [
        "hmac.HMAC.hexdigest",
        "hmac.HMAC.__init__"
    ],
    "hmac.HMAC.__init__": [
        "hmac.HMAC.__init__.<lambda2>",
        "hmac.HMAC.update",
        "<builtin>.callable",
        "warnings.warn",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.isinstance",
        "hmac.HMAC.__init__.<lambda1>"
    ],
    "hmac.HMAC.hexdigest": [
        "hmac.HMAC._current"
    ],
    "smtplib.SMTP.auth_plain": [],
    "smtplib.SMTP.auth_login": [],
    "smtplib.SMTP.sendmail": [
        "smtplib.SMTPResponseException.__init__",
        "smtplib.SMTP.data",
        "smtplib.SMTP.rcpt",
        "smtplib.SMTPSenderRefused.__init__",
        "smtplib.SMTP.mail",
        "smtplib.SMTPRecipientsRefused.__init__",
        "<builtin>.len",
        "smtplib.SMTP.ehlo_or_helo_if_needed",
        "<builtin>.isinstance",
        "smtplib.SMTP.close",
        "smtplib._fix_eols",
        "smtplib.SMTP._rset",
        "smtplib.SMTP.has_extn"
    ],
    "smtplib.SMTP_SSL": [],
    "smtplib.SMTP_SSL._get_socket": [
        "smtplib.SMTP._print_debug"
    ],
    "smtplib.LMTP": [],
    "smtplib.LMTP.__init__": [
        "smtplib.SMTP.__init__"
    ],
    "smtplib.LMTP.connect": [
        "smtplib.SMTP._print_debug",
        "smtplib.SMTP.connect",
        "smtplib.SMTP.getreply"
    ],
    "smtplib.prompt": [
        "sys.stdin.readline",
        "sys.stdout.flush",
        "sys.stdout.write"
    ],
    "hmac.HMAC": [],
    "hmac.HMAC.__init__.<lambda1>": [],
    "hmac.HMAC.__init__.<lambda2>": [],
    "hmac.HMAC.update": [],
    "hmac.HMAC.name": [],
    "hmac.HMAC.copy": [],
    "hmac.HMAC._current": [],
    "hmac.HMAC.digest": [
        "hmac.HMAC._current"
    ],
    "hmac.new": [
        "hmac.HMAC.__init__"
    ],
    "hmac.digest": [
        "<builtin>.getattr",
        "<builtin>.callable",
        "hmac.digest.<lambda2>",
        "hmac.digest.<lambda1>",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "hmac.digest.<lambda1>": [],
    "hmac.digest.<lambda2>": [],
    "queue.Empty": [],
    "queue.Full": [],
    "queue.Queue": [],
    "queue.Queue.__init__": [
        "threading.Condition.__init__",
        "queue.Queue._init"
    ],
    "queue.Queue._init": [
        "_collections.deque"
    ],
    "queue.Queue.task_done": [
        "<builtin>.ValueError",
        "threading.Condition.notify_all"
    ],
    "queue.Queue.join": [
        "threading.Condition.wait"
    ],
    "queue.Queue.qsize": [
        "queue.Queue._qsize"
    ],
    "queue.Queue._qsize": [
        "<builtin>.len"
    ],
    "queue.Queue.empty": [
        "queue.Queue._qsize"
    ],
    "queue.Queue.full": [
        "queue.Queue._qsize"
    ],
    "queue.Queue.put": [
        "<builtin>.ValueError",
        "queue.Queue._qsize",
        "threading.Condition.wait",
        "queue.Queue._put",
        "threading.Condition.notify",
        "time.monotonic"
    ],
    "queue.Queue._put": [],
    "queue.Queue.get": [
        "<builtin>.ValueError",
        "queue.Queue._qsize",
        "threading.Condition.wait",
        "queue.Queue._get",
        "threading.Condition.notify",
        "time.monotonic"
    ],
    "queue.Queue._get": [],
    "queue.Queue.put_nowait": [
        "queue.Queue.put"
    ],
    "queue.Queue.get_nowait": [
        "queue.Queue.get"
    ],
    "queue.PriorityQueue": [],
    "queue.PriorityQueue._init": [],
    "queue.PriorityQueue._qsize": [
        "<builtin>.len"
    ],
    "queue.PriorityQueue._put": [
        "heapq.heappush"
    ],
    "queue.PriorityQueue._get": [
        "heapq.heappop"
    ],
    "queue.LifoQueue": [],
    "queue.LifoQueue._init": [],
    "queue.LifoQueue._qsize": [
        "<builtin>.len"
    ],
    "queue.LifoQueue._put": [],
    "queue.LifoQueue._get": [],
    "queue._PySimpleQueue": [],
    "queue._PySimpleQueue.__init__": [
        "_collections.deque",
        "threading.Semaphore.__init__"
    ],
    "queue._PySimpleQueue.put": [
        "threading.Semaphore.release"
    ],
    "queue._PySimpleQueue.get": [
        "<builtin>.ValueError",
        "threading.Semaphore.acquire"
    ],
    "queue._PySimpleQueue.put_nowait": [
        "queue._PySimpleQueue.put"
    ],
    "queue._PySimpleQueue.get_nowait": [
        "queue._PySimpleQueue.get"
    ],
    "queue._PySimpleQueue.empty": [
        "<builtin>.len"
    ],
    "queue._PySimpleQueue.qsize": [
        "<builtin>.len"
    ],
    "psutil._ppid_map": [
        "psutil._pswindows.Process.ppid",
        "psutil._pslinux.Process.__init__",
        "psutil._psbsd.Process.ppid",
        "psutil._pswindows.Process.__init__",
        "psutil.pids",
        "psutil._pssunos.Process.__init__",
        "psutil._pssunos.Process.ppid",
        "psutil._psbsd.Process.__init__",
        "psutil._pslinux.Process.ppid",
        "_psosx.Process",
        "psutil._psaix.Process.__init__",
        "psutil._psaix.Process.ppid"
    ],
    "psutil.pids": [
        "psutil._pssunos.pids",
        "psutil._psbsd.pids",
        "psutil._psaix.pids",
        "<builtin>.sorted",
        "_psosx.pids",
        "psutil._pslinux.pids"
    ],
    "psutil._pslinux.Process.__init__": [
        "_common.get_procfs_path"
    ],
    "psutil._psaix.Process.__init__": [
        "_common.get_procfs_path"
    ],
    "_psosx.Process": [],
    "psutil._pssunos.Process.__init__": [
        "_common.get_procfs_path"
    ],
    "psutil._psbsd.Process.__init__": [],
    "psutil._pswindows.Process.__init__": [],
    "psutil._pslinux.Process.ppid": [
        "<builtin>.int",
        "psutil._pslinux.Process._parse_stat_file"
    ],
    "psutil._pswindows.Process.ppid": [
        "_psutil_windows.ppid_map",
        "_common.NoSuchProcess"
    ],
    "psutil._psbsd.Process.ppid": [
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._psaix.Process.ppid": [
        "psutil._psaix.Process._proc_basic_info"
    ],
    "psutil._pssunos.Process.ppid": [
        "psutil._pssunos.Process._proc_basic_info"
    ],
    "psutil._assert_pid_not_reused": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._assert_pid_not_reused.wrapper": [
        "psutil.Process.send_signal",
        "psutil.Process.kill",
        "psutil.Process.resume",
        "psutil.Process.terminate",
        "_common.NoSuchProcess",
        "psutil.Process.children",
        "psutil.Process.suspend"
    ],
    "_common.NoSuchProcess": [],
    "psutil.Process.send_signal": [
        "psutil._pswindows.Process.send_signal",
        "psutil.Process._send_signal"
    ],
    "psutil.Process.terminate": [
        "psutil._pswindows.Process.kill",
        "psutil.Process._send_signal"
    ],
    "psutil.Process.children": [
        "psutil.Process.create_time",
        "_psutil_windows.ppid_map",
        "collections.defaultdict",
        "_psosx.ppid_map",
        "psutil._pslinux.ppid_map",
        "<builtin>.set",
        "psutil.Process.__init__"
    ],
    "psutil.Process.suspend": [
        "psutil._pswindows.Process.suspend",
        "psutil.Process._send_signal"
    ],
    "psutil.Process.kill": [
        "psutil._pswindows.Process.kill",
        "psutil.Process._send_signal"
    ],
    "psutil.Process.resume": [
        "psutil._pswindows.Process.resume",
        "psutil.Process._send_signal"
    ],
    "psutil._pprint_secs": [
        "<builtin>.int",
        "time.time"
    ],
    "psutil.Process": [
        "contextlib.contextmanager",
        "_common.deprecated_method",
        "_common.memoize_when_activated",
        "psutil._assert_pid_not_reused",
        "<builtin>.hasattr"
    ],
    "psutil.Process._init": [
        "<builtin>.ValueError",
        "threading.RLock",
        "psutil._pslinux.Process.__init__",
        "psutil.Process.create_time",
        "psutil._pswindows.Process.__init__",
        "psutil._pssunos.Process.__init__",
        "psutil._psbsd.Process.__init__",
        "_psosx.Process",
        "<builtin>.TypeError",
        "_common.NoSuchProcess",
        "<builtin>.isinstance",
        "psutil._psaix.Process.__init__"
    ],
    "psutil.Process.create_time": [
        "psutil._psaix.Process.create_time",
        "psutil._pssunos.Process.create_time",
        "psutil._pswindows.Process.create_time",
        "psutil._psbsd.Process.create_time",
        "psutil._pslinux.Process.create_time"
    ],
    "psutil.Process.__str__": [
        "psutil.Process.status",
        "psutil.Process.name",
        "collections.OrderedDict.__init__",
        "psutil._pprint_secs",
        "psutil.Process.oneshot",
        "_collections.OrderedDict.items"
    ],
    "psutil.Process.oneshot": [
        "psutil._pslinux.Process.oneshot_enter",
        "psutil._pssunos.Process.oneshot_exit",
        "psutil._pslinux.Process.oneshot_exit",
        "psutil._psbsd.Process.oneshot_enter",
        "psutil._pssunos.Process.oneshot_enter",
        "psutil._psbsd.Process.oneshot_exit",
        "psutil._pswindows.Process.oneshot_enter",
        "<builtin>.hasattr",
        "psutil._pswindows.Process.oneshot_exit",
        "psutil._psaix.Process.oneshot_exit",
        "psutil._psaix.Process.oneshot_enter"
    ],
    "psutil.Process.status": [
        "psutil._pswindows.Process.status",
        "psutil._psbsd.Process.status",
        "psutil._psaix.Process.status",
        "psutil._pslinux.Process.status",
        "psutil._pssunos.Process.status"
    ],
    "psutil.Process.__eq__": [
        "<builtin>.isinstance"
    ],
    "psutil.Process.__ne__": [],
    "psutil.Process.__hash__": [
        "<builtin>.hash"
    ],
    "psutil.Process.pid": [],
    "psutil._pslinux.Process.oneshot_enter": [],
    "psutil._pswindows.Process.oneshot_enter": [],
    "psutil._psbsd.Process.oneshot_enter": [],
    "psutil._pssunos.Process.oneshot_enter": [],
    "psutil._psaix.Process.oneshot_enter": [],
    "psutil._pssunos.Process.oneshot_exit": [],
    "psutil._psaix.Process.oneshot_exit": [],
    "psutil._pslinux.Process.oneshot_exit": [],
    "psutil._pswindows.Process.oneshot_exit": [],
    "psutil._psbsd.Process.oneshot_exit": [],
    "psutil.Process.ppid": [
        "psutil._pswindows.Process.ppid",
        "psutil._psbsd.Process.ppid",
        "psutil._pssunos.Process.ppid",
        "psutil._pslinux.Process.ppid",
        "psutil._psaix.Process.ppid"
    ],
    "psutil.Process.parents": [
        "psutil.Process.parent"
    ],
    "psutil.Process.is_running": [
        "psutil.Process.__init__"
    ],
    "_common.memoize_when_activated": [],
    "psutil._pslinux.Process.name": [
        "psutil._pslinux.Process._parse_stat_file",
        "_common.decode"
    ],
    "psutil._psaix.Process.name": [
        "_psutil_aix.proc_name"
    ],
    "psutil._pswindows.Process.name": [
        "psutil._pswindows.Process.exe",
        "ntpath.basename",
        "posixpath.basename"
    ],
    "psutil._psbsd.Process.name": [
        "_psutil_bsd.proc_name",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pssunos.Process.name": [
        "psutil._pssunos.Process._proc_name_and_args"
    ],
    "psutil.Process.cmdline": [
        "psutil._psbsd.Process.cmdline",
        "psutil._psaix.Process.cmdline",
        "psutil._pswindows.Process.cmdline",
        "psutil._pslinux.Process.cmdline",
        "psutil._pssunos.Process.cmdline"
    ],
    "psutil.Process.exe": [
        "psutil._psbsd.Process.exe",
        "psutil._pssunos.Process.exe",
        "psutil._pswindows.Process.exe",
        "psutil.Process.exe.guess_it",
        "psutil._psaix.Process.exe",
        "psutil._pslinux.Process.exe"
    ],
    "psutil.Process.exe.guess_it": [
        "posixpath.isfile",
        "psutil.Process.cmdline",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "ntpath.isfile",
        "posixpath.isabs",
        "ntpath.isabs"
    ],
    "psutil._pssunos.Process.exe": [
        "psutil._pssunos.Process.cmdline"
    ],
    "psutil._pswindows.Process.exe": [
        "psutil._pswindows.convert_dos_path",
        "_common.debug",
        "_common.AccessDenied",
        "psutil._pswindows.py2_strencode",
        "sys.path.startswith",
        "_psutil_windows.proc_exe",
        "sys.base_prefix.startswith"
    ],
    "psutil._psaix.Process.exe": [
        "posixpath.abspath",
        "psutil._psaix.Process.cmdline",
        "posixpath.join",
        "posixpath.isfile",
        "ntpath.basename",
        "posixpath.basename",
        "ntpath.isfile",
        "ntpath.join",
        "posixpath.isabs",
        "ntpath.isabs",
        "ntpath.abspath",
        "psutil._psaix.Process.cwd"
    ],
    "psutil._pslinux.Process.exe": [
        "posixpath.lexists",
        "psutil._pslinux.pid_exists",
        "_common.ZombieProcess",
        "_common.AccessDenied",
        "_common.NoSuchProcess",
        "psutil._pslinux.readlink",
        "ntpath.lexists"
    ],
    "psutil._psbsd.Process.exe": [
        "_psutil_bsd.proc_exe",
        "_compat.which",
        "psutil._psbsd.wrap_exceptions_procfs",
        "psutil._psbsd.Process.cmdline"
    ],
    "psutil._psbsd.Process.cmdline": [
        "_psposix.pid_exists",
        "_psutil_bsd.proc_cmdline",
        "psutil._psbsd.is_zombie",
        "_common.ZombieProcess",
        "_common.NoSuchProcess"
    ],
    "psutil._pslinux.Process.cmdline": [
        "_common.open_text",
        "<builtin>.len"
    ],
    "psutil._psaix.Process.cmdline": [
        "_psutil_aix.proc_args"
    ],
    "psutil._pswindows.Process.cmdline": [
        "psutil._pswindows.py2_strencode",
        "_psutil_windows.proc_cmdline",
        "psutil._pswindows.is_permission_err"
    ],
    "psutil._pssunos.Process.cmdline": [
        "psutil._pssunos.Process._proc_name_and_args"
    ],
    "psutil._pslinux.Process.status": [
        "psutil._pslinux.Process._parse_stat_file"
    ],
    "psutil._pssunos.Process.status": [
        "psutil._pssunos.Process._proc_basic_info"
    ],
    "psutil._pswindows.Process.status": [
        "_psutil_windows.proc_is_suspended"
    ],
    "psutil._psbsd.Process.status": [
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._psaix.Process.status": [
        "psutil._psaix.Process._proc_basic_info"
    ],
    "psutil.Process.username": [
        "<builtin>.ImportError",
        "pwd.getpwuid",
        "psutil._pswindows.Process.username",
        "<builtin>.str",
        "psutil.Process.uids"
    ],
    "psutil.Process.uids": [
        "psutil._pslinux.Process.uids",
        "psutil._psbsd.Process.uids",
        "psutil._pssunos.Process.uids",
        "psutil._psaix.Process.uids"
    ],
    "psutil._pswindows.Process.username": [
        "psutil._pswindows.py2_strencode",
        "_psutil_windows.proc_username"
    ],
    "psutil._pswindows.Process.create_time": [
        "_psutil_windows.proc_times",
        "psutil._pswindows.Process._proc_info",
        "psutil._pswindows.is_permission_err"
    ],
    "psutil._psaix.Process.create_time": [
        "psutil._psaix.Process._proc_basic_info"
    ],
    "psutil._psbsd.Process.create_time": [
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pslinux.Process.create_time": [
        "psutil._pslinux.boot_time",
        "psutil._pslinux.Process._parse_stat_file",
        "<builtin>.float"
    ],
    "psutil._pssunos.Process.create_time": [
        "psutil._pssunos.Process._proc_basic_info"
    ],
    "psutil.Process.cwd": [
        "psutil._psbsd.Process.cwd",
        "psutil._pssunos.Process.cwd",
        "psutil._pswindows.Process.cwd",
        "psutil._pslinux.Process.cwd",
        "psutil._psaix.Process.cwd"
    ],
    "psutil._psbsd.Process.cwd": [
        "<builtin>.NotImplementedError",
        "_psutil_bsd.proc_cwd"
    ],
    "psutil._pswindows.Process.cwd": [
        "_psutil_windows.proc_cwd",
        "_common.AccessDenied",
        "psutil._pswindows.py2_strencode",
        "posixpath.normpath",
        "ntpath.normpath"
    ],
    "psutil._pssunos.Process.cwd": [],
    "psutil._pslinux.Process.cwd": [
        "psutil._pslinux.readlink",
        "psutil._pslinux.pid_exists",
        "_common.ZombieProcess",
        "_common.NoSuchProcess"
    ],
    "psutil._psaix.Process.cwd": [],
    "psutil.Process.nice": [
        "psutil._psaix.Process.nice_set",
        "psutil._pswindows.Process.nice_get",
        "psutil._pssunos.Process.nice_get",
        "psutil._pslinux.Process.nice_set",
        "psutil._psaix.Process.nice_get",
        "psutil._psbsd.Process.nice_get",
        "psutil._pslinux.Process.nice_get",
        "psutil._pssunos.Process.nice_set",
        "_common.NoSuchProcess",
        "psutil.Process.is_running",
        "psutil._pswindows.Process.nice_set",
        "psutil._psbsd.Process.nice_set"
    ],
    "psutil._psaix.Process.nice_get": [
        "_psutil_posix.getpriority"
    ],
    "psutil._psbsd.Process.nice_get": [
        "_psutil_posix.getpriority"
    ],
    "psutil._pslinux.Process.nice_get": [
        "_psutil_posix.getpriority"
    ],
    "psutil._pswindows.Process.nice_get": [
        "_psutil_windows.proc_priority_get"
    ],
    "psutil._pssunos.Process.nice_get": [
        "psutil._pssunos.Process._proc_basic_info"
    ],
    "psutil._pslinux.Process.nice_set": [
        "_psutil_posix.setpriority"
    ],
    "psutil._pssunos.Process.nice_set": [
        "_common.AccessDenied",
        "_psutil_posix.setpriority"
    ],
    "psutil._pswindows.Process.nice_set": [
        "_psutil_windows.proc_priority_set"
    ],
    "psutil._psaix.Process.nice_set": [
        "_psutil_posix.setpriority"
    ],
    "psutil._psbsd.Process.nice_set": [
        "_psutil_posix.setpriority"
    ],
    "psutil._pslinux.Process.uids": [
        "_common.puids",
        "<builtin>.int",
        "psutil._pslinux.Process._read_status_file"
    ],
    "psutil._psaix.Process.uids": [
        "_common.puids",
        "psutil._psaix.Process._proc_cred"
    ],
    "psutil._psbsd.Process.uids": [
        "_common.puids",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pssunos.Process.uids": [
        "_common.puids",
        "psutil._pssunos.Process._proc_basic_info",
        "psutil._pssunos.Process._proc_cred"
    ],
    "psutil.Process.gids": [
        "psutil._psaix.Process.gids",
        "psutil._pslinux.Process.gids",
        "psutil._pssunos.Process.gids",
        "psutil._psbsd.Process.gids"
    ],
    "psutil._psbsd.Process.gids": [
        "_common.pgids",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pslinux.Process.gids": [
        "<builtin>.int",
        "psutil._pslinux.Process._read_status_file",
        "_common.pgids"
    ],
    "psutil._psaix.Process.gids": [
        "_common.puids",
        "psutil._psaix.Process._proc_cred"
    ],
    "psutil._pssunos.Process.gids": [
        "_common.puids",
        "psutil._pssunos.Process._proc_basic_info",
        "psutil._pssunos.Process._proc_cred"
    ],
    "psutil.Process.terminal": [
        "psutil._pssunos.Process.terminal",
        "psutil._pslinux.Process.terminal",
        "psutil._psbsd.Process.terminal",
        "psutil._psaix.Process.terminal"
    ],
    "psutil._psaix.Process.terminal": [
        "psutil._psaix.Process._proc_basic_info"
    ],
    "psutil._psbsd.Process.terminal": [
        "_psposix.get_terminal_map",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pssunos.Process.terminal": [
        "psutil._pssunos.Process._assert_alive",
        "psutil._pssunos.wrap_exceptions",
        "psutil._pssunos.Process._proc_basic_info"
    ],
    "psutil._pslinux.Process.terminal": [
        "_psposix.get_terminal_map",
        "<builtin>.int",
        "psutil._pslinux.Process._parse_stat_file"
    ],
    "psutil.Process.num_fds": [
        "psutil._psaix.Process.num_fds",
        "psutil._pssunos.Process.num_fds",
        "psutil._psbsd.Process.num_fds",
        "psutil._psbsd.Process._not_implemented",
        "psutil._pslinux.Process.num_fds"
    ],
    "psutil._psaix.Process.num_fds": [
        "<builtin>.len"
    ],
    "psutil._pslinux.Process.num_fds": [
        "<builtin>.len"
    ],
    "psutil._pssunos.Process.num_fds": [
        "<builtin>.len"
    ],
    "psutil._psbsd.Process.num_fds": [
        "psutil._psbsd.Process._assert_alive",
        "_psutil_bsd.proc_num_fds"
    ],
    "psutil._psbsd.Process._not_implemented": [],
    "psutil.Process.io_counters": [
        "psutil._psbsd.Process.io_counters",
        "psutil._pslinux.Process.io_counters",
        "psutil._psaix.Process.io_counters",
        "psutil._pswindows.Process.io_counters"
    ],
    "psutil._pslinux.Process.io_counters": [
        "<builtin>.RuntimeError",
        "<builtin>.int",
        "_common.open_binary",
        "<builtin>.ValueError"
    ],
    "psutil._pswindows.Process.io_counters": [
        "psutil._pswindows.Process._proc_info",
        "_psutil_windows.proc_io_counters",
        "psutil._pswindows.is_permission_err"
    ],
    "psutil._psaix.Process.io_counters": [
        "_common.pio",
        "psutil._psaix.pid_exists",
        "_psutil_aix.proc_io_counters",
        "_common.NoSuchProcess"
    ],
    "psutil._psbsd.Process.io_counters": [
        "_common.pio",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil.Process.ionice": [
        "psutil._pswindows.Process.ionice_get",
        "psutil._pslinux.Process.ionice_set",
        "<builtin>.ValueError",
        "psutil._pslinux.Process.ionice_get",
        "psutil._pswindows.Process.ionice_set"
    ],
    "psutil._pswindows.Process.ionice_get": [
        "_psutil_windows.proc_io_priority_get"
    ],
    "psutil._pslinux.Process.ionice_get": [
        "_common.pionice",
        "_psutil_linux.proc_ioprio_get"
    ],
    "psutil._pslinux.Process.ionice_set": [
        "<builtin>.ValueError",
        "_psutil_linux.proc_ioprio_set"
    ],
    "psutil._pswindows.Process.ionice_set": [
        "_psutil_windows.proc_io_priority_set",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "psutil.Process.rlimit": [
        "psutil._pslinux.Process.rlimit",
        "psutil._psbsd.Process.rlimit"
    ],
    "psutil._pslinux.Process.rlimit": [
        "<builtin>.ValueError",
        "psutil._pslinux.pid_exists",
        "<builtin>.repr",
        "psutil._pslinux.prlimit",
        "_common.ZombieProcess",
        "<builtin>.len"
    ],
    "psutil._psbsd.Process.rlimit": [
        "<builtin>.ValueError",
        "_psutil_bsd.proc_getrlimit",
        "<builtin>.repr",
        "<builtin>.len",
        "_psutil_bsd.proc_setrlimit"
    ],
    "psutil.Process.cpu_affinity": [
        "<builtin>.tuple",
        "psutil._pslinux.Process._get_eligible_cpus",
        "psutil.Process.cpu_times",
        "psutil._psbsd.Process.cpu_affinity_set",
        "psutil._pslinux.Process.cpu_affinity_set",
        "<builtin>.sorted",
        "<builtin>.range",
        "psutil._pswindows.Process.cpu_affinity_get",
        "<builtin>.list",
        "psutil._pswindows.Process.cpu_affinity_set",
        "<builtin>.set",
        "<builtin>.hasattr",
        "psutil._pslinux.Process.cpu_affinity_get",
        "<builtin>.len",
        "psutil._psbsd.Process.cpu_affinity_get"
    ],
    "psutil._psbsd.Process.cpu_affinity_get": [
        "_psutil_bsd.proc_cpu_affinity_get"
    ],
    "psutil._pswindows.Process.cpu_affinity_get": [
        "psutil._pswindows.Process.cpu_affinity_get.from_bitmask",
        "_psutil_windows.proc_cpu_affinity_get"
    ],
    "psutil._pslinux.Process.cpu_affinity_get": [
        "_psutil_linux.proc_cpu_affinity_get"
    ],
    "psutil._pslinux.Process._get_eligible_cpus": [
        "<builtin>.list",
        "psutil._pslinux.Process._read_status_file",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.int",
        "psutil._pslinux.per_cpu_times"
    ],
    "psutil.Process.cpu_times": [
        "psutil._pssunos.Process.cpu_times",
        "psutil._pswindows.Process.cpu_times",
        "psutil._pslinux.Process.cpu_times",
        "psutil._psbsd.Process.cpu_times",
        "psutil._psaix.Process.cpu_times"
    ],
    "psutil._psbsd.Process.cpu_affinity_set": [
        "psutil._psbsd.per_cpu_times",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "_psutil_bsd.proc_cpu_affinity_set",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "psutil._pswindows.Process.cpu_affinity_set": [
        "psutil._pswindows.per_cpu_times",
        "<builtin>.ValueError",
        "_compat.range",
        "<builtin>.list",
        "_psutil_windows.proc_cpu_affinity_set",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.isinstance",
        "psutil._pswindows.Process.cpu_affinity_set.to_bitmask"
    ],
    "psutil._pslinux.Process.cpu_affinity_set": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "psutil._pslinux.Process._get_eligible_cpus",
        "_psutil_linux.proc_cpu_affinity_set",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.isinstance",
        "psutil._pslinux.per_cpu_times"
    ],
    "psutil.Process.cpu_num": [
        "psutil._psbsd.Process.cpu_num",
        "psutil._pssunos.Process.cpu_num",
        "psutil._pslinux.Process.cpu_num"
    ],
    "psutil._psbsd.Process.cpu_num": [
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pssunos.Process.cpu_num": [
        "_psutil_sunos.proc_cpu_num"
    ],
    "psutil._pslinux.Process.cpu_num": [
        "<builtin>.int",
        "psutil._pslinux.Process._parse_stat_file"
    ],
    "psutil.Process.environ": [
        "psutil._pslinux.Process.environ",
        "psutil._psbsd.Process.environ",
        "psutil._psaix.Process.environ",
        "psutil._pswindows.Process.environ",
        "psutil._pssunos.Process.environ"
    ],
    "psutil._psbsd.Process.environ": [
        "_psutil_bsd.proc_environ"
    ],
    "psutil._pslinux.Process.environ": [
        "_common.parse_environ_block",
        "_common.open_text"
    ],
    "psutil._psaix.Process.environ": [
        "_psutil_aix.proc_environ"
    ],
    "psutil._pswindows.Process.environ": [
        "_psutil_windows.proc_environ",
        "psutil._pswindows.py2_strencode",
        "<builtin>.type",
        "_common.parse_environ_block",
        "<builtin>.isinstance"
    ],
    "psutil._pssunos.Process.environ": [
        "_psutil_sunos.proc_environ"
    ],
    "psutil.Process.num_handles": [
        "psutil._pswindows.Process.num_handles"
    ],
    "psutil._pswindows.Process.num_handles": [
        "psutil._pswindows.Process._proc_info",
        "psutil._pswindows.is_permission_err",
        "_psutil_windows.proc_num_handles"
    ],
    "psutil.Process.num_ctx_switches": [
        "psutil._psaix.Process.num_ctx_switches",
        "psutil._pssunos.Process.num_ctx_switches",
        "psutil._pswindows.Process.num_ctx_switches",
        "psutil._pslinux.Process.num_ctx_switches",
        "psutil._psbsd.Process.num_ctx_switches"
    ],
    "psutil._psaix.Process.num_ctx_switches": [
        "_psutil_aix.proc_num_ctx_switches",
        "_common.pctxsw"
    ],
    "psutil._pssunos.Process.num_ctx_switches": [
        "_psutil_sunos.proc_num_ctx_switches",
        "_common.pctxsw"
    ],
    "psutil._pslinux.Process.num_ctx_switches": [
        "<builtin>.NotImplementedError",
        "<builtin>.int",
        "psutil._pslinux.Process._read_status_file",
        "_common.pctxsw"
    ],
    "psutil._psbsd.Process.num_ctx_switches": [
        "_common.pctxsw",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pswindows.Process.num_ctx_switches": [
        "psutil._pswindows.Process._proc_info",
        "_common.pctxsw"
    ],
    "psutil.Process.num_threads": [
        "psutil._pswindows.Process.num_threads",
        "psutil._psaix.Process.num_threads",
        "psutil._pslinux.Process.num_threads",
        "psutil._psbsd.Process.num_threads",
        "psutil._pssunos.Process.num_threads"
    ],
    "psutil._pslinux.Process.num_threads": [
        "<builtin>.int",
        "psutil._pslinux.Process._read_status_file"
    ],
    "psutil._psaix.Process.num_threads": [
        "psutil._psaix.Process._proc_basic_info"
    ],
    "psutil._pssunos.Process.num_threads": [
        "psutil._pssunos.Process._proc_basic_info"
    ],
    "psutil._pswindows.Process.num_threads": [
        "psutil._pswindows.Process._proc_info"
    ],
    "psutil._psbsd.Process.num_threads": [
        "_psutil_bsd.proc_num_threads",
        "psutil._psbsd.Process.threads",
        "<builtin>.len"
    ],
    "psutil.Process.threads": [
        "psutil._psaix.Process.threads",
        "psutil._psbsd.Process.threads",
        "psutil._pswindows.Process.threads",
        "psutil._pslinux.Process.threads",
        "psutil._pssunos.Process.threads"
    ],
    "psutil._psaix.Process.threads": [
        "_psutil_aix.proc_threads",
        "_common.pthread"
    ],
    "psutil._psbsd.Process.threads": [
        "_psutil_bsd.proc_threads",
        "_common.pthread",
        "psutil._psbsd.Process._assert_alive"
    ],
    "psutil._pswindows.Process.threads": [
        "_common.pthread",
        "_psutil_windows.proc_threads"
    ],
    "psutil._pslinux.Process.threads": [
        "_common.open_binary",
        "<builtin>.float",
        "psutil._pslinux.Process._assert_alive",
        "_common.pthread",
        "<builtin>.int"
    ],
    "psutil._pssunos.Process.threads": [
        "_common.pthread",
        "<builtin>.int",
        "psutil._pssunos.Process._assert_alive",
        "_psutil_sunos.query_process_thread"
    ],
    "psutil._pslinux.ppid_map": [
        "<builtin>.int",
        "_common.open_binary",
        "psutil._pslinux.pids",
        "_common.get_procfs_path"
    ],
    "_psutil_windows.ppid_map": [],
    "_psosx.ppid_map": [],
    "collections.defaultdict": [],
    "psutil.Process.cpu_percent": [
        "<builtin>.ValueError",
        "psutil._pssunos.Process.cpu_times",
        "psutil.Process.cpu_percent.timer",
        "psutil._pswindows.Process.cpu_times",
        "time.sleep",
        "psutil.cpu_count",
        "psutil._pslinux.Process.cpu_times",
        "psutil._psbsd.Process.cpu_times",
        "psutil._psaix.Process.cpu_times",
        "<builtin>.round"
    ],
    "psutil.Process.cpu_percent.timer": [],
    "psutil._pssunos.Process.cpu_times": [
        "_psutil_sunos.proc_cpu_times",
        "_common.pcputimes"
    ],
    "psutil._pslinux.Process.cpu_times": [
        "psutil._pslinux.Process._parse_stat_file",
        "<builtin>.float"
    ],
    "psutil._pswindows.Process.cpu_times": [
        "_psutil_windows.proc_times",
        "psutil._pswindows.Process._proc_info",
        "_common.pcputimes",
        "psutil._pswindows.is_permission_err"
    ],
    "psutil._psbsd.Process.cpu_times": [
        "_common.pcputimes",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._psaix.Process.cpu_times": [
        "_common.pcputimes",
        "_psutil_aix.proc_cpu_times"
    ],
    "psutil.Process.memory_info": [
        "psutil._psaix.Process.memory_info",
        "psutil._pslinux.Process.memory_info",
        "psutil._pswindows.Process.memory_info",
        "psutil._psbsd.Process.memory_info",
        "psutil._pssunos.Process.memory_info"
    ],
    "psutil._pswindows.Process.memory_info": [
        "psutil._pswindows.Process._get_raw_meminfo"
    ],
    "psutil._psaix.Process.memory_info": [
        "psutil._psaix.Process._proc_basic_info"
    ],
    "psutil._psbsd.Process.memory_info": [
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pslinux.Process.memory_info": [
        "<builtin>.int",
        "_common.open_binary"
    ],
    "psutil._pssunos.Process.memory_info": [
        "psutil._pssunos.Process._proc_basic_info"
    ],
    "_common.deprecated_method": [],
    "psutil.Process.memory_info_ex": [
        "psutil.Process.memory_info"
    ],
    "psutil.Process.memory_full_info": [
        "psutil._psaix.Process.memory_info",
        "psutil._pswindows.Process.memory_full_info",
        "psutil._pslinux.Process.memory_info",
        "psutil._psbsd.Process.memory_info",
        "psutil._pslinux.Process.memory_full_info",
        "psutil._pssunos.Process.memory_info"
    ],
    "psutil._pswindows.Process.memory_full_info": [
        "psutil._pswindows.getpagesize",
        "psutil._pswindows.Process.memory_info",
        "_psutil_windows.proc_memory_uss"
    ],
    "psutil._pslinux.Process.memory_full_info": [
        "psutil._pslinux.Process._parse_smaps_rollup",
        "psutil._pslinux.Process.memory_info",
        "psutil._pslinux.Process._parse_smaps"
    ],
    "psutil.Process.memory_percent": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.float",
        "<builtin>.list",
        "<builtin>.getattr",
        "psutil.virtual_memory"
    ],
    "psutil.Process.memory_maps": [
        "psutil._pswindows.Process.memory_maps",
        "_psosx.pmmap_ext",
        "psutil._pslinux.Process.memory_maps",
        "_psosx.pmmap_grouped",
        "<builtin>.map",
        "psutil._pssunos.Process.memory_maps",
        "psutil._psbsd.Process.memory_maps"
    ],
    "psutil._pswindows.Process.memory_maps": [
        "psutil._pswindows.convert_dos_path",
        "psutil._pswindows.py2_strencode",
        "<builtin>.hex",
        "psutil._pswindows.convert_oserror",
        "_psutil_windows.proc_memory_maps"
    ],
    "psutil._pssunos.Process.memory_maps": [
        "psutil._pssunos.Process.memory_maps.toaddr",
        "psutil._pssunos.Process._assert_alive",
        "_psutil_sunos.proc_memory_maps"
    ],
    "psutil._pslinux.Process.memory_maps": [
        "_common.decode",
        "psutil._pslinux.Process.memory_maps.get_blocks",
        "psutil._pslinux.Process._read_smaps_file",
        "_common.path_exists_strict"
    ],
    "psutil._psbsd.Process.memory_maps": [
        "_psutil_bsd.proc_memory_maps"
    ],
    "psutil.Process.memory_maps.<lambda1>": [],
    "_psosx.pmmap_grouped": [],
    "_psosx.pmmap_ext": [],
    "psutil.Process.open_files": [
        "psutil._pslinux.Process.open_files",
        "psutil._psbsd.Process._not_implemented",
        "psutil._pswindows.Process.open_files",
        "psutil._psaix.Process.open_files",
        "psutil._psbsd.Process.open_files",
        "psutil._pssunos.Process.open_files"
    ],
    "psutil._psbsd.Process.open_files": [
        "_common.popenfile",
        "_psutil_bsd.proc_open_files"
    ],
    "psutil._pslinux.Process.open_files": [
        "_common.open_binary",
        "_common.isfile_strict",
        "_common.debug",
        "psutil._pslinux.Process._assert_alive",
        "sys.path.startswith",
        "psutil._pslinux.file_flags_to_mode",
        "psutil._pslinux.readlink",
        "<builtin>.int",
        "sys.base_prefix.startswith"
    ],
    "psutil._pssunos.Process.open_files": [
        "_common.isfile_strict",
        "posixpath.join",
        "ntpath.islink",
        "posixpath.islink",
        "_common.popenfile",
        "psutil._pssunos.Process._assert_alive",
        "ntpath.join",
        "<builtin>.int"
    ],
    "psutil._pswindows.Process.open_files": [
        "_common.isfile_strict",
        "psutil._pswindows.convert_dos_path",
        "<builtin>.list",
        "_psutil_windows.proc_open_files",
        "psutil._pswindows.py2_strencode",
        "_common.popenfile",
        "<builtin>.set"
    ],
    "psutil._psaix.Process.open_files": [
        "re.findall",
        "subprocess.Popen.__init__",
        "_common.popenfile",
        "<builtin>.str",
        "_common.NoSuchProcess",
        "<builtin>.int",
        "subprocess.Popen.communicate"
    ],
    "psutil.Process.connections": [
        "psutil._pswindows.Process.connections",
        "psutil._pssunos.Process.connections",
        "psutil._psaix.Process.connections",
        "psutil._psbsd.Process.connections",
        "psutil._pslinux.Process.connections"
    ],
    "psutil._psbsd.Process.connections": [
        "<builtin>.ValueError",
        "<builtin>.repr",
        "<builtin>.list",
        "psutil._psbsd.Process._assert_alive",
        "_psutil_bsd.proc_connections",
        "_psutil_bsd.net_connections",
        "_common.conn_to_ntuple"
    ],
    "psutil._pswindows.Process.connections": [
        "psutil._pswindows.net_connections"
    ],
    "psutil._psaix.Process.connections": [
        "psutil._psaix.net_connections"
    ],
    "psutil._pssunos.Process.connections": [
        "psutil._pssunos.net_connections",
        "psutil._pssunos.Process._get_unix_sockets",
        "_common.pconn"
    ],
    "psutil._pslinux.Process.connections": [
        "psutil._pslinux.Process._assert_alive",
        "psutil._pslinux.Connections.retrieve"
    ],
    "psutil.Process._send_signal": [
        "<builtin>.ValueError",
        "psutil.pid_exists",
        "_common.ZombieProcess",
        "_common.AccessDenied",
        "_common.NoSuchProcess"
    ],
    "_common.ZombieProcess": [],
    "_common.AccessDenied": [],
    "psutil._pswindows.Process.send_signal": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "_psutil_windows.proc_kill",
        "<builtin>.object"
    ],
    "psutil._pswindows.Process.suspend": [
        "_psutil_windows.proc_suspend_or_resume"
    ],
    "psutil._pswindows.Process.resume": [
        "_psutil_windows.proc_suspend_or_resume"
    ],
    "psutil._pswindows.Process.kill": [
        "_psutil_windows.proc_kill"
    ],
    "psutil.Process.wait": [
        "psutil._pslinux.Process.wait",
        "<builtin>.ValueError",
        "psutil._psaix.Process.wait",
        "psutil._pswindows.Process.wait",
        "psutil._psbsd.Process.wait",
        "psutil._pssunos.Process.wait"
    ],
    "psutil._pslinux.Process.wait": [
        "_psposix.wait_pid"
    ],
    "psutil._psaix.Process.wait": [
        "_psposix.wait_pid"
    ],
    "psutil._pssunos.Process.wait": [
        "_psposix.wait_pid"
    ],
    "psutil._pswindows.Process.wait": [
        "_common.TimeoutExpired",
        "_psutil_windows.proc_wait",
        "time.sleep",
        "<builtin>.min",
        "_psutil_windows.pid_exists",
        "<builtin>.getattr",
        "<builtin>.int"
    ],
    "psutil._psbsd.Process.wait": [
        "_psposix.wait_pid"
    ],
    "psutil.Popen": [],
    "psutil.Popen.__init__": [
        "subprocess.Popen.__init__",
        "psutil.Process._init"
    ],
    "psutil.Popen.__dir__": [
        "<builtin>.sorted",
        "<builtin>.dir",
        "<builtin>.set"
    ],
    "psutil.Popen.__enter__": [
        "subprocess.Popen.__enter__",
        "<builtin>.hasattr"
    ],
    "psutil.Popen.__exit__": [
        "psutil.Popen.wait",
        "subprocess.Popen.__exit__",
        "<builtin>.hasattr"
    ],
    "psutil.Popen.wait": [
        "<builtin>.super"
    ],
    "psutil.Popen.__getattribute__": [
        "<builtin>.AttributeError"
    ],
    "psutil._pssunos.pids": [
        "_compat.b",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "psutil._psbsd.pids": [
        "_psutil_bsd.pids",
        "psutil._psbsd._pid_0_exists"
    ],
    "psutil._psaix.pids": [
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "_psosx.pids": [],
    "psutil._pslinux.pids": [
        "_compat.b",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "psutil._psaix.pid_exists": [
        "posixpath.join",
        "ntpath.exists",
        "posixpath.exists",
        "<builtin>.str",
        "ntpath.join",
        "_common.get_procfs_path"
    ],
    "psutil._psbsd.pid_exists": [
        "_psposix.pid_exists",
        "psutil._psbsd.pids"
    ],
    "_psosx.pid_exists": [],
    "psutil._pslinux.pid_exists": [
        "_psposix.pid_exists",
        "_common.open_binary",
        "<builtin>.ValueError",
        "psutil._pslinux.pids",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "psutil._pssunos.pid_exists": [
        "_psposix.pid_exists"
    ],
    "psutil.process_iter.add": [
        "psutil.Process.as_dict",
        "psutil.Process.__init__"
    ],
    "psutil.process_iter.remove": [],
    "psutil.wait_procs": [
        "<builtin>.ValueError",
        "<builtin>.callable",
        "<builtin>.list",
        "psutil.wait_procs.check_gone",
        "<builtin>.min",
        "<builtin>.TypeError",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "psutil.wait_procs.check_gone": [],
    "psutil._pswindows.cpu_count_logical": [
        "_psutil_windows.cpu_count_logical"
    ],
    "psutil._pslinux.cpu_count_logical": [
        "_common.open_binary",
        "_common.open_text",
        "_common.get_procfs_path",
        "re.compile"
    ],
    "_psosx.cpu_count_logical": [],
    "psutil._pssunos.cpu_count_logical": [],
    "psutil._psbsd.cpu_count_logical": [
        "_psutil_bsd.cpu_count_logical"
    ],
    "psutil._psaix.cpu_count_logical": [],
    "psutil._pslinux.cpu_count_cores": [
        "_common.open_binary",
        "<builtin>.sum",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "_psosx.cpu_count_cores": [],
    "psutil._psaix.cpu_count_cores": [
        "<builtin>.RuntimeError",
        "subprocess.Popen.__init__",
        "<builtin>.len",
        "subprocess.Popen.communicate"
    ],
    "psutil._pssunos.cpu_count_cores": [
        "_psutil_sunos.cpu_count_cores"
    ],
    "psutil._psbsd.cpu_count_cores": [
        "_psutil_bsd.cpu_topology",
        "psutil._psbsd.cpu_count_logical",
        "<builtin>.len"
    ],
    "psutil._pswindows.cpu_count_cores": [
        "_psutil_windows.cpu_count_cores"
    ],
    "psutil.cpu_times": [
        "psutil._psbsd.per_cpu_times",
        "psutil._pssunos.per_cpu_times",
        "psutil._pswindows.per_cpu_times",
        "_psosx.cpu_times",
        "psutil._psbsd.cpu_times",
        "psutil._psaix.per_cpu_times",
        "psutil._pssunos.cpu_times",
        "psutil._psaix.cpu_times",
        "_psosx.per_cpu_times",
        "psutil._pswindows.cpu_times",
        "psutil._pslinux.per_cpu_times",
        "psutil._pslinux.cpu_times"
    ],
    "_psosx.cpu_times": [],
    "psutil._psbsd.cpu_times": [
        "_psutil_bsd.cpu_times"
    ],
    "psutil._pssunos.cpu_times": [
        "<builtin>.sum",
        "<builtin>.zip",
        "_psutil_sunos.per_cpu_times"
    ],
    "psutil._psaix.cpu_times": [
        "<builtin>.sum",
        "_psutil_aix.per_cpu_times",
        "<builtin>.zip"
    ],
    "psutil._pswindows.cpu_times": [
        "<builtin>.sum",
        "_psutil_windows.cpu_times",
        "_psutil_windows.per_cpu_times",
        "<builtin>.zip"
    ],
    "psutil._pslinux.cpu_times": [
        "_common.open_binary",
        "<builtin>.float",
        "<builtin>.len",
        "_common.get_procfs_path",
        "psutil._pslinux.set_scputimes_ntuple"
    ],
    "psutil._psbsd.per_cpu_times": [
        "<builtin>.NotImplementedError",
        "_psutil_bsd.per_cpu_times",
        "psutil._psbsd.cpu_times",
        "psutil._psbsd.cpu_count_logical"
    ],
    "psutil._pssunos.per_cpu_times": [
        "_psutil_sunos.per_cpu_times"
    ],
    "psutil._pswindows.per_cpu_times": [
        "_psutil_windows.per_cpu_times"
    ],
    "psutil._psaix.per_cpu_times": [
        "_psutil_aix.per_cpu_times"
    ],
    "_psosx.per_cpu_times": [],
    "psutil._pslinux.per_cpu_times": [
        "_common.open_binary",
        "<builtin>.float",
        "<builtin>.len",
        "_common.get_procfs_path",
        "psutil._pslinux.set_scputimes_ntuple"
    ],
    "psutil._cpu_tot_time": [
        "<builtin>.getattr",
        "<builtin>.sum"
    ],
    "psutil._cpu_busy_time": [
        "<builtin>.getattr",
        "psutil._cpu_tot_time"
    ],
    "psutil._cpu_times_deltas": [
        "<builtin>.max",
        "<builtin>.getattr",
        "_psosx.scputimes"
    ],
    "_psosx.scputimes": [],
    "psutil.cpu_percent.calculate": [
        "psutil._cpu_busy_time",
        "psutil._cpu_times_deltas",
        "psutil._cpu_tot_time",
        "<builtin>.round"
    ],
    "psutil.cpu_times_percent.calculate": [
        "psutil._cpu_tot_time",
        "_psosx.scputimes",
        "<builtin>.max",
        "<builtin>.min",
        "psutil._cpu_times_deltas",
        "<builtin>.round"
    ],
    "psutil.cpu_stats": [
        "psutil._pslinux.cpu_stats",
        "psutil._psaix.cpu_stats",
        "psutil._psbsd.cpu_stats",
        "_psosx.cpu_stats",
        "psutil._pswindows.cpu_stats",
        "psutil._pssunos.cpu_stats"
    ],
    "psutil._pslinux.cpu_stats": [
        "<builtin>.int",
        "_common.open_binary",
        "_common.get_procfs_path",
        "_common.scpustats"
    ],
    "psutil._psaix.cpu_stats": [
        "_psutil_aix.cpu_stats",
        "_common.scpustats"
    ],
    "psutil._psbsd.cpu_stats": [
        "<builtin>.int",
        "<builtin>.open",
        "_psutil_bsd.cpu_stats",
        "_common.scpustats"
    ],
    "_psosx.cpu_stats": [],
    "psutil._pswindows.cpu_stats": [
        "_psutil_windows.cpu_stats",
        "_common.scpustats"
    ],
    "psutil._pssunos.cpu_stats": [
        "_psutil_sunos.cpu_stats",
        "_common.scpustats"
    ],
    "psutil._psbsd.cpu_freq": [
        "<builtin>.float",
        "_psutil_bsd.cpu_freq",
        "_common.scpufreq",
        "<builtin>.range",
        "<builtin>.int",
        "psutil._psbsd.cpu_count_logical"
    ],
    "psutil._pslinux.cpu_freq": [
        "psutil._pslinux._cpu_get_cpuinfo_freq",
        "posixpath.join",
        "_common.bcat",
        "<builtin>.NotImplementedError",
        "<builtin>.enumerate",
        "_common.scpufreq",
        "<builtin>.len",
        "ntpath.join",
        "<builtin>.int"
    ],
    "_psosx.cpu_freq": [],
    "psutil._pswindows.cpu_freq": [
        "_common.scpufreq",
        "<builtin>.float",
        "_psutil_windows.cpu_freq"
    ],
    "_common.scpufreq": [],
    "_psosx.virtual_memory": [],
    "psutil._psaix.virtual_memory": [
        "_common.usage_percent",
        "_psutil_aix.virtual_mem"
    ],
    "psutil._pswindows.virtual_memory": [
        "_common.usage_percent",
        "_psutil_windows.virtual_mem"
    ],
    "psutil._pslinux.virtual_memory": [
        "_common.open_binary",
        "psutil._pslinux.calculate_avail_vmem",
        "_common.usage_percent",
        "warnings.warn",
        "<builtin>.len",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "psutil._psbsd.virtual_memory": [
        "_common.usage_percent",
        "_psutil_bsd.virtual_mem",
        "<builtin>.open",
        "<builtin>.int"
    ],
    "psutil._pssunos.virtual_memory": [
        "_common.usage_percent"
    ],
    "psutil._psaix.swap_memory": [
        "_common.usage_percent",
        "_psutil_aix.swap_mem",
        "_common.sswap"
    ],
    "psutil._pssunos.swap_memory": [
        "_psutil_sunos.swap_mem",
        "subprocess.Popen.__init__",
        "<builtin>.RuntimeError",
        "_common.usage_percent",
        "_common.sswap",
        "<builtin>.int",
        "subprocess.Popen.communicate"
    ],
    "psutil._pslinux.swap_memory": [
        "_common.open_binary",
        "_common.usage_percent",
        "warnings.warn",
        "_psutil_linux.linux_sysinfo",
        "<builtin>.str",
        "_common.sswap",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "psutil._pswindows.swap_memory": [
        "_common.usage_percent",
        "_psutil_windows.virtual_mem",
        "<builtin>.min",
        "_common.sswap"
    ],
    "_psosx.swap_memory": [],
    "psutil._psbsd.swap_memory": [
        "_common.usage_percent",
        "_psutil_bsd.swap_mem",
        "_common.sswap"
    ],
    "psutil._pswindows.disk_usage": [
        "_common.usage_percent",
        "<builtin>.isinstance",
        "_common.sdiskusage",
        "_psutil_windows.disk_usage"
    ],
    "_psosx.disk_usage": [],
    "psutil.disk_partitions.pathconf": [],
    "psutil._pssunos.disk_partitions": [
        "_psposix.disk_usage",
        "_common.debug",
        "_common.sdiskpart",
        "_psutil_sunos.disk_partitions"
    ],
    "_psosx.disk_partitions": [],
    "psutil._psbsd.disk_partitions": [
        "_common.sdiskpart",
        "_psutil_bsd.disk_partitions"
    ],
    "psutil._pswindows.disk_partitions": [
        "_common.sdiskpart",
        "_psutil_windows.disk_partitions"
    ],
    "psutil._pslinux.disk_partitions": [
        "psutil._pslinux.RootFsDeviceFinder.__init__",
        "psutil._pslinux.RootFsDeviceFinder.find",
        "posixpath.isfile",
        "_psutil_linux.disk_partitions",
        "_common.sdiskpart",
        "<builtin>.set",
        "ntpath.isfile",
        "ntpath.realpath",
        "posixpath.realpath",
        "_common.open_text",
        "_common.get_procfs_path"
    ],
    "psutil._psaix.disk_partitions": [
        "_psposix.disk_usage",
        "_common.sdiskpart",
        "_psutil_aix.disk_partitions"
    ],
    "psutil._pslinux.disk_io_counters": [
        "ntpath.exists",
        "posixpath.exists",
        "<builtin>.NotImplementedError",
        "psutil._pslinux.is_storage_device",
        "psutil._pslinux.disk_io_counters.read_sysfs",
        "psutil._pslinux.disk_io_counters.read_procfs",
        "_common.get_procfs_path"
    ],
    "_psosx.disk_io_counters": [],
    "_common.wrap_numbers": [],
    "psutil._pslinux.net_io_counters": [
        "<builtin>.repr",
        "_common.open_text",
        "<builtin>.map",
        "_common.get_procfs_path"
    ],
    "psutil._pswindows.net_io_counters": [
        "<builtin>.dict",
        "psutil._pswindows.py2_strencode",
        "_psutil_windows.net_io_counters"
    ],
    "_psosx.net_io_counters": [],
    "_common.snetio": [],
    "psutil.net_connections": [
        "psutil._psbsd.net_connections",
        "_psosx.net_connections",
        "psutil._pslinux.net_connections",
        "psutil._pswindows.net_connections",
        "psutil._pssunos.net_connections",
        "psutil._psaix.net_connections"
    ],
    "psutil._psbsd.net_connections": [
        "<builtin>.ValueError",
        "psutil._psbsd.pids",
        "_common.sconn",
        "<builtin>.repr",
        "<builtin>.list",
        "psutil._psbsd.Process.__init__",
        "psutil._psbsd.Process.connections",
        "<builtin>.set",
        "_psutil_bsd.net_connections",
        "_common.conn_to_ntuple"
    ],
    "_psosx.net_connections": [],
    "psutil._pslinux.net_connections": [
        "psutil._pslinux.Connections.retrieve"
    ],
    "psutil._pswindows.net_connections": [
        "<builtin>.ValueError",
        "<builtin>.repr",
        "_psutil_windows.net_connections",
        "<builtin>.list",
        "<builtin>.set",
        "_common.conn_to_ntuple"
    ],
    "psutil._pssunos.net_connections": [
        "_common.socktype_to_enum",
        "<builtin>.ValueError",
        "_common.sconn",
        "_psutil_sunos.net_connections",
        "<builtin>.repr",
        "<builtin>.list",
        "_common.sockfam_to_enum",
        "<builtin>.set",
        "_common.addr",
        "_common.pconn",
        "_common.conn_tmap.copy"
    ],
    "psutil._psaix.net_connections": [
        "_psutil_aix.net_connections",
        "<builtin>.ValueError",
        "<builtin>.repr",
        "_common.conn_to_ntuple"
    ],
    "_psosx.net_if_addrs": [],
    "psutil._pswindows.net_if_addrs": [
        "psutil._pswindows.py2_strencode",
        "_psutil_windows.net_if_addrs",
        "<builtin>.list"
    ],
    "psutil.net_if_addrs.<lambda1>": [],
    "_common.snicaddr": [],
    "psutil._psbsd.net_if_stats": [
        "_common.snicstats",
        "_psutil_posix.net_if_mtu",
        "_psutil_posix.net_if_is_running",
        "_common.NicDuplex",
        "_psutil_bsd.net_io_counters",
        "<builtin>.hasattr",
        "_psutil_posix.net_if_duplex_speed"
    ],
    "psutil._pssunos.net_if_stats": [
        "_common.snicstats",
        "_common.NicDuplex",
        "<builtin>.hasattr",
        "_psutil_sunos.net_if_stats"
    ],
    "psutil._pslinux.net_if_stats": [
        "_common.snicstats",
        "psutil._pslinux.net_io_counters",
        "_psutil_posix.net_if_mtu",
        "_psutil_posix.net_if_is_running",
        "_psutil_linux.net_if_duplex_speed",
        "_common.debug"
    ],
    "psutil._psaix.net_if_stats": [
        "_psutil_aix.net_if_stats",
        "_common.snicstats",
        "_psutil_posix.net_if_addrs",
        "subprocess.Popen.__init__",
        "re.search",
        "<builtin>.set",
        "<builtin>.int",
        "subprocess.Popen.communicate"
    ],
    "_psosx.net_if_stats": [],
    "psutil._pswindows.net_if_stats": [
        "_common.snicstats",
        "_psutil_windows.net_if_stats",
        "_common.NicDuplex",
        "psutil._pswindows.py2_strencode",
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "psutil.sensors_temperatures.convert": [
        "<builtin>.float"
    ],
    "psutil._pslinux.sensors_temperatures": [
        "collections.defaultdict",
        "<builtin>.float",
        "posixpath.join",
        "_common.debug",
        "<builtin>.sorted",
        "ntpath.basename",
        "posixpath.basename",
        "_common.cat",
        "_common.bcat",
        "<builtin>.dict",
        "posixpath.dirname",
        "ntpath.dirname",
        "<builtin>.set",
        "re.compile",
        "ntpath.join"
    ],
    "psutil._psbsd.sensors_temperatures": [
        "_common.shwtemp",
        "_collections.defaultdict",
        "_psutil_bsd.sensors_cpu_temperature",
        "<builtin>.range",
        "psutil._psbsd.cpu_count_logical"
    ],
    "_psosx.sensors_temperatures": [],
    "_common.shwtemp": [],
    "psutil.sensors_fans": [
        "_psosx.sensors_fans",
        "psutil._pslinux.sensors_fans"
    ],
    "_psosx.sensors_fans": [],
    "psutil._pslinux.sensors_fans": [
        "collections.defaultdict",
        "_common.debug",
        "posixpath.join",
        "<builtin>.sorted",
        "_common.cat",
        "_common.bcat",
        "<builtin>.dict",
        "posixpath.dirname",
        "ntpath.dirname",
        "<builtin>.set",
        "_common.sfan",
        "ntpath.join",
        "<builtin>.int"
    ],
    "psutil._pslinux.sensors_battery": [
        "posixpath.join",
        "<builtin>.sorted",
        "psutil._pslinux.sensors_battery.multi_bcat",
        "_common.sbattery",
        "_common.cat",
        "<builtin>.object",
        "ntpath.join",
        "<builtin>.int"
    ],
    "_psosx.sensors_battery": [],
    "psutil._psbsd.sensors_battery": [
        "_common.sbattery",
        "_psutil_bsd.sensors_battery"
    ],
    "psutil._pswindows.sensors_battery": [
        "_psutil_windows.sensors_battery",
        "_common.sbattery",
        "<builtin>.bool"
    ],
    "psutil._psaix.boot_time": [
        "_psutil_aix.boot_time"
    ],
    "psutil._pssunos.boot_time": [
        "_psutil_sunos.boot_time"
    ],
    "_psosx.boot_time": [],
    "psutil._psbsd.boot_time": [
        "_psutil_bsd.boot_time"
    ],
    "psutil._pslinux.boot_time": [
        "<builtin>.RuntimeError",
        "_common.open_binary",
        "<builtin>.float",
        "_common.get_procfs_path"
    ],
    "psutil._pswindows.boot_time": [
        "<builtin>.abs",
        "_psutil_windows.boot_time",
        "<builtin>.float"
    ],
    "psutil.users": [
        "psutil._pssunos.users",
        "_psosx.users",
        "psutil._psbsd.users",
        "psutil._psaix.users",
        "psutil._pslinux.users",
        "psutil._pswindows.users"
    ],
    "psutil._pssunos.users": [
        "_common.suser",
        "_psutil_sunos.users"
    ],
    "_psosx.users": [],
    "psutil._psbsd.users": [
        "_common.suser",
        "_psutil_bsd.users"
    ],
    "psutil._psaix.users": [
        "_common.suser",
        "_psutil_aix.users"
    ],
    "psutil._pslinux.users": [
        "_common.suser",
        "_psutil_linux.users"
    ],
    "psutil._pswindows.users": [
        "_psutil_windows.users",
        "psutil._pswindows.py2_strencode",
        "_common.suser"
    ],
    "psutil.win_service_iter": [
        "_psosx.win_service_iter",
        "psutil._pswindows.win_service_iter"
    ],
    "_psosx.win_service_iter": [],
    "psutil._pswindows.win_service_iter": [
        "psutil._pswindows.WindowsService.__init__",
        "psutil._pswindows.py2_strencode",
        "_psutil_windows.winservice_enumerate"
    ],
    "psutil.win_service_get": [
        "_psosx.win_service_get",
        "psutil._pswindows.win_service_get"
    ],
    "psutil._pswindows.win_service_get": [
        "psutil._pswindows.WindowsService._query_config",
        "psutil._pswindows.WindowsService.__init__"
    ],
    "_psosx.win_service_get": [],
    "_psutil_bsd.set_debug": [],
    "_psutil_linux.set_debug": [],
    "_psutil_aix.set_debug": [],
    "_psosx.cext.set_debug": [],
    "_psutil_windows.set_debug": [],
    "_psutil_sunos.set_debug": [],
    "psutil._common.bytes2human": [
        "<builtin>.float",
        "<builtin>.locals",
        "<builtin>.reversed",
        "<builtin>.dict",
        "<builtin>.enumerate"
    ],
    "_compat.get_terminal_size": [],
    "_psutil_posix.getpagesize": [],
    "_common.usage_percent": [],
    "_psutil_sunos.swap_mem": [],
    "_common.sswap": [],
    "_psutil_sunos.per_cpu_times": [],
    "_psutil_sunos.cpu_count_cores": [],
    "_psutil_sunos.cpu_stats": [],
    "_common.scpustats": [],
    "_psutil_sunos.disk_partitions": [],
    "_psposix.disk_usage": [],
    "_common.debug": [],
    "_common.sdiskpart": [],
    "_common.conn_tmap.copy": [],
    "_psutil_sunos.net_connections": [],
    "_common.addr": [],
    "_common.sockfam_to_enum": [],
    "_common.socktype_to_enum": [],
    "_common.sconn": [],
    "_common.pconn": [],
    "_psutil_sunos.net_if_stats": [],
    "_common.NicDuplex": [],
    "_common.snicstats": [],
    "_psutil_sunos.boot_time": [],
    "_psutil_sunos.users": [],
    "_common.suser": [],
    "_common.get_procfs_path": [],
    "_compat.b": [],
    "_psposix.pid_exists": [],
    "psutil._pssunos.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._pssunos.wrap_exceptions.wrapper": [
        "psutil._pssunos.Process.num_ctx_switches",
        "psutil._pssunos.Process.num_fds",
        "psutil._pssunos.Process.gids",
        "psutil._pssunos.Process.threads",
        "psutil._pssunos.Process.cpu_num",
        "_common.AccessDenied",
        "_common.NoSuchProcess",
        "psutil._pssunos.Process.num_threads",
        "psutil._pssunos.Process.name",
        "psutil._pssunos.Process.cmdline",
        "psutil._pssunos.Process.create_time",
        "psutil._pssunos.Process.terminal",
        "psutil._pssunos.Process.ppid",
        "psutil._pssunos.Process.status",
        "psutil._pssunos.Process.environ",
        "psutil._pssunos.pid_exists",
        "psutil._pssunos.Process.memory_info",
        "psutil._pssunos.Process.memory_maps",
        "psutil._pssunos.Process.cpu_times",
        "psutil._pssunos.Process.connections",
        "psutil._pssunos.Process.cwd",
        "_common.ZombieProcess",
        "psutil._pssunos.Process.exe",
        "psutil._pssunos.Process.uids",
        "psutil._pssunos.Process.wait",
        "psutil._pssunos.pids",
        "psutil._pssunos.Process.nice_get",
        "psutil._pssunos.Process.nice_set",
        "psutil._pssunos.Process.open_files"
    ],
    "psutil._pssunos.Process": [
        "collections.namedtuple",
        "psutil._pssunos.wrap_exceptions",
        "_common.memoize_when_activated"
    ],
    "psutil._pssunos.Process._assert_alive": [],
    "psutil._pssunos.Process._proc_name_and_args": [
        "_psutil_sunos.proc_name_and_args"
    ],
    "_psutil_sunos.proc_name_and_args": [],
    "psutil._pssunos.Process._proc_basic_info": [
        "ntpath.exists",
        "posixpath.exists",
        "_common.AccessDenied",
        "<builtin>.len",
        "_psutil_sunos.proc_basic_info"
    ],
    "_psutil_sunos.proc_basic_info": [],
    "psutil._pssunos.Process._proc_cred": [
        "_psutil_sunos.proc_cred"
    ],
    "_psutil_sunos.proc_cred": [],
    "_psutil_sunos.proc_environ": [],
    "_psutil_posix.setpriority": [],
    "_common.puids": [],
    "_psutil_sunos.proc_cpu_times": [],
    "_common.pcputimes": [],
    "_psutil_sunos.proc_cpu_num": [],
    "_psutil_sunos.query_process_thread": [],
    "_common.pthread": [],
    "_common.isfile_strict": [],
    "_common.popenfile": [],
    "psutil._pssunos.Process._get_unix_sockets": [
        "subprocess.Popen.__init__",
        "<builtin>.RuntimeError",
        "_common.AccessDenied",
        "<builtin>.enumerate",
        "_common.NoSuchProcess",
        "subprocess.Popen.communicate"
    ],
    "psutil._pssunos.Process.memory_maps.toaddr": [
        "<builtin>.hex"
    ],
    "_psutil_sunos.proc_memory_maps": [],
    "_psutil_sunos.proc_num_ctx_switches": [],
    "_common.pctxsw": [],
    "_psposix.wait_pid": [],
    "psutil._pswindows.Priority": [],
    "psutil._pswindows.IOPriority": [],
    "_compat.lru_cache": [],
    "psutil._pswindows.convert_dos_path": [
        "sys.base_prefix.split",
        "posixpath.join",
        "<builtin>.len",
        "ntpath.join",
        "sys.path.split",
        "_psutil_windows.QueryDosDevice"
    ],
    "_psutil_windows.QueryDosDevice": [],
    "psutil._pswindows.py2_strencode": [
        "<builtin>.isinstance",
        "sys.path.encode",
        "sys.base_prefix.encode"
    ],
    "_common.memoize": [],
    "psutil._pswindows.getpagesize": [
        "_psutil_windows.getpagesize"
    ],
    "_psutil_windows.getpagesize": [],
    "_psutil_windows.virtual_mem": [],
    "_psutil_windows.disk_usage": [],
    "_common.sdiskusage": [],
    "_psutil_windows.disk_partitions": [],
    "_psutil_windows.cpu_times": [],
    "_psutil_windows.per_cpu_times": [],
    "_psutil_windows.cpu_count_logical": [],
    "_psutil_windows.cpu_count_cores": [],
    "_psutil_windows.cpu_stats": [],
    "_psutil_windows.cpu_freq": [],
    "psutil._pswindows.getloadavg": [
        "<builtin>.tuple",
        "_psutil_windows.init_loadavg_counter",
        "<builtin>.round",
        "_psutil_windows.getloadavg"
    ],
    "_psutil_windows.init_loadavg_counter": [],
    "_psutil_windows.getloadavg": [],
    "_psutil_windows.net_connections": [],
    "_common.conn_to_ntuple": [],
    "_psutil_windows.net_if_stats": [],
    "_psutil_windows.net_io_counters": [],
    "_psutil_windows.net_if_addrs": [],
    "_psutil_windows.sensors_battery": [],
    "_common.sbattery": [],
    "_psutil_windows.boot_time": [],
    "_psutil_windows.users": [],
    "_psutil_windows.winservice_enumerate": [],
    "psutil._pswindows.WindowsService.__init__": [],
    "psutil._pswindows.WindowsService._query_config": [
        "<builtin>.dict",
        "psutil._pswindows.py2_strencode",
        "_psutil_windows.winservice_query_config",
        "psutil._pswindows.WindowsService._wrap_exceptions"
    ],
    "psutil._pswindows.WindowsService": [
        "contextlib.contextmanager"
    ],
    "psutil._pswindows.WindowsService.__str__": [],
    "psutil._pswindows.WindowsService.__repr__": [
        "psutil._pswindows.WindowsService.__str__",
        "<builtin>.id"
    ],
    "psutil._pswindows.WindowsService.__eq__": [
        "<builtin>.isinstance"
    ],
    "psutil._pswindows.WindowsService.__ne__": [],
    "psutil._pswindows.WindowsService._wrap_exceptions": [
        "_common.AccessDenied",
        "psutil._pswindows.is_permission_err",
        "_common.NoSuchProcess"
    ],
    "_psutil_windows.winservice_query_config": [],
    "psutil._pswindows.WindowsService._query_status": [
        "<builtin>.dict",
        "_psutil_windows.winservice_query_status",
        "psutil._pswindows.WindowsService._wrap_exceptions"
    ],
    "_psutil_windows.winservice_query_status": [],
    "psutil._pswindows.is_permission_err": [
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "psutil._pswindows.WindowsService.name": [],
    "psutil._pswindows.WindowsService.display_name": [],
    "psutil._pswindows.WindowsService.binpath": [
        "psutil._pswindows.WindowsService._query_config"
    ],
    "psutil._pswindows.WindowsService.username": [
        "psutil._pswindows.WindowsService._query_config"
    ],
    "psutil._pswindows.WindowsService.start_type": [
        "psutil._pswindows.WindowsService._query_config"
    ],
    "psutil._pswindows.WindowsService.pid": [
        "psutil._pswindows.WindowsService._query_status"
    ],
    "psutil._pswindows.WindowsService.status": [
        "psutil._pswindows.WindowsService._query_status"
    ],
    "psutil._pswindows.WindowsService.description": [
        "_psutil_windows.winservice_query_descr",
        "psutil._pswindows.py2_strencode",
        "psutil._pswindows.WindowsService.name"
    ],
    "_psutil_windows.winservice_query_descr": [],
    "psutil._pswindows.WindowsService.as_dict": [
        "psutil._pswindows.WindowsService.name",
        "psutil._pswindows.WindowsService.description",
        "psutil._pswindows.WindowsService._query_status",
        "psutil._pswindows.WindowsService._query_config",
        "psutil._pswindows.WindowsService.display_name"
    ],
    "psutil._pswindows.convert_oserror": [
        "<builtin>.isinstance",
        "_common.AccessDenied",
        "psutil._pswindows.is_permission_err",
        "_common.NoSuchProcess"
    ],
    "psutil._pswindows.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._pswindows.wrap_exceptions.wrapper": [
        "psutil._pswindows.Process.cpu_times",
        "psutil._pswindows.Process.num_threads",
        "psutil._pswindows.Process.resume",
        "psutil._pswindows.Process.cpu_affinity_get",
        "psutil._pswindows.Process.wait",
        "psutil._pswindows.Process.ionice_set",
        "psutil._pswindows.Process.cpu_affinity_set",
        "psutil._pswindows.Process.status",
        "psutil._pswindows.retry_error_partial_copy.wrapper",
        "psutil._pswindows.Process.open_files",
        "psutil._pswindows.Process.create_time",
        "psutil._pswindows.Process.memory_info",
        "psutil._pswindows.Process.username",
        "psutil._pswindows.convert_oserror",
        "psutil._pswindows.Process.ionice_get",
        "psutil._pswindows.Process.connections",
        "psutil._pswindows.Process.num_handles",
        "psutil._pswindows.Process.threads",
        "psutil._pswindows.Process.send_signal",
        "psutil._pswindows.Process.suspend",
        "psutil._pswindows.Process.io_counters",
        "psutil._pswindows.Process.num_ctx_switches",
        "psutil._pswindows.Process.nice_get",
        "psutil._pswindows.Process.memory_full_info",
        "psutil._pswindows.Process.nice_set",
        "psutil._pswindows.Process.kill"
    ],
    "psutil._pswindows.retry_error_partial_copy.wrapper": [
        "psutil._pswindows.Process.cmdline",
        "time.sleep",
        "_compat.range",
        "<builtin>.min",
        "psutil._pswindows.Process.cwd",
        "psutil._pswindows.Process.environ"
    ],
    "psutil._pswindows.retry_error_partial_copy": [
        "functools.wraps",
        "_functools.partial"
    ],
    "_compat.range": [],
    "psutil._pswindows.Process": [
        "psutil._pswindows.wrap_exceptions",
        "psutil._pswindows.retry_error_partial_copy",
        "_common.memoize_when_activated"
    ],
    "psutil._pswindows.Process._proc_info": [
        "_psutil_windows.proc_info",
        "<builtin>.len"
    ],
    "_psutil_windows.proc_info": [],
    "_psutil_windows.proc_exe": [],
    "_psutil_windows.proc_cmdline": [],
    "_psutil_windows.proc_environ": [],
    "_common.parse_environ_block": [],
    "psutil._pswindows.Process._get_raw_meminfo": [
        "psutil._pswindows.Process._proc_info",
        "psutil._pswindows.is_permission_err",
        "_psutil_windows.proc_memory_info"
    ],
    "_psutil_windows.proc_memory_info": [],
    "_psutil_windows.proc_memory_uss": [],
    "_psutil_windows.proc_memory_maps": [],
    "_psutil_windows.proc_kill": [],
    "_psutil_windows.proc_wait": [],
    "_common.TimeoutExpired": [],
    "_psutil_windows.pid_exists": [],
    "_psutil_windows.proc_username": [],
    "_psutil_windows.proc_times": [],
    "_psutil_windows.proc_threads": [],
    "_psutil_windows.proc_suspend_or_resume": [],
    "_psutil_windows.proc_cwd": [],
    "_psutil_windows.proc_open_files": [],
    "_psutil_windows.proc_priority_get": [],
    "_psutil_windows.proc_priority_set": [],
    "_psutil_windows.proc_io_priority_get": [],
    "_psutil_windows.proc_io_priority_set": [],
    "_psutil_windows.proc_io_counters": [],
    "_psutil_windows.proc_is_suspended": [],
    "psutil._pswindows.Process.cpu_affinity_get.from_bitmask": [
        "_compat.range"
    ],
    "_psutil_windows.proc_cpu_affinity_get": [],
    "psutil._pswindows.Process.cpu_affinity_set.to_bitmask": [
        "<builtin>.ValueError"
    ],
    "_psutil_windows.proc_cpu_affinity_set": [],
    "_psutil_windows.proc_num_handles": [],
    "_psutil_bsd.virtual_mem": [],
    "_psutil_bsd.swap_mem": [],
    "_psutil_bsd.cpu_times": [],
    "_psutil_bsd.per_cpu_times": [],
    "_psutil_bsd.cpu_count_logical": [],
    "_psutil_bsd.cpu_topology": [],
    "_psutil_bsd.cpu_stats": [],
    "_psutil_bsd.cpu_freq": [],
    "_psutil_bsd.disk_partitions": [],
    "_psutil_bsd.net_io_counters": [],
    "_psutil_posix.net_if_mtu": [],
    "_psutil_posix.net_if_is_running": [],
    "_psutil_posix.net_if_duplex_speed": [],
    "_psutil_bsd.net_connections": [],
    "_psutil_bsd.sensors_battery": [],
    "_psutil_bsd.sensors_cpu_temperature": [],
    "_psutil_bsd.boot_time": [],
    "_psutil_bsd.users": [],
    "psutil._psbsd._pid_0_exists": [
        "psutil._psbsd.Process.name",
        "psutil._psbsd.Process.__init__"
    ],
    "_psutil_bsd.pids": [],
    "psutil._psbsd.is_zombie": [
        "_psutil_bsd.proc_oneshot_info"
    ],
    "_psutil_bsd.proc_oneshot_info": [],
    "psutil._psbsd.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._psbsd.wrap_exceptions.wrapper": [
        "psutil._psbsd.Process.cwd",
        "psutil._psbsd.pids",
        "psutil._psbsd.is_zombie",
        "psutil._psbsd.Process._not_implemented",
        "psutil._psbsd.Process.wait",
        "_common.AccessDenied",
        "psutil._psbsd.Process.connections",
        "_common.NoSuchProcess",
        "psutil._psbsd.Process.num_ctx_switches",
        "psutil._psbsd.Process.uids",
        "psutil._psbsd.Process.memory_info",
        "psutil._psbsd.Process.threads",
        "psutil._psbsd.Process.num_threads",
        "psutil._psbsd.Process.rlimit",
        "psutil._psbsd.Process.status",
        "psutil._psbsd.Process.exe",
        "psutil._psbsd.Process.cpu_num",
        "psutil._psbsd.Process.nice_get",
        "psutil._psbsd.Process.nice_set",
        "psutil._psbsd.Process.ppid",
        "psutil._psbsd.Process.cpu_affinity_set",
        "psutil._psbsd.Process.num_fds",
        "_common.ZombieProcess",
        "psutil._psbsd.Process.environ",
        "psutil._psbsd.Process.open_files",
        "psutil._psbsd.Process.gids",
        "psutil._psbsd.Process.cpu_times",
        "psutil._psbsd.Process.terminal",
        "psutil._psbsd.Process.memory_maps",
        "psutil._psbsd.Process.cmdline",
        "psutil._psbsd.Process.name",
        "psutil._psbsd.Process.io_counters",
        "psutil._psbsd.Process.create_time",
        "psutil._psbsd.Process.cpu_affinity_get"
    ],
    "psutil._psbsd.wrap_exceptions_procfs": [
        "psutil._psbsd.is_zombie",
        "_common.AccessDenied",
        "_common.ZombieProcess",
        "_common.NoSuchProcess"
    ],
    "psutil._psbsd.Process": [
        "psutil._psbsd.wrap_exceptions",
        "collections.namedtuple",
        "_common.memoize_when_activated"
    ],
    "psutil._psbsd.Process._assert_alive": [
        "_psutil_bsd.proc_name"
    ],
    "_psutil_bsd.proc_name": [],
    "psutil._psbsd.Process.oneshot": [
        "_psutil_bsd.proc_oneshot_info",
        "<builtin>.len"
    ],
    "_psutil_bsd.proc_exe": [],
    "_compat.which": [],
    "_psutil_bsd.proc_cmdline": [],
    "_psutil_bsd.proc_environ": [],
    "_psposix.get_terminal_map": [],
    "_common.pgids": [],
    "_psutil_bsd.proc_num_threads": [],
    "_psutil_bsd.proc_threads": [],
    "_psutil_bsd.proc_connections": [],
    "_psutil_posix.getpriority": [],
    "_common.pio": [],
    "_psutil_bsd.proc_cwd": [],
    "_psutil_bsd.proc_open_files": [],
    "_psutil_bsd.proc_num_fds": [],
    "_psutil_bsd.proc_cpu_affinity_get": [],
    "_psutil_bsd.proc_cpu_affinity_set": [],
    "_psutil_bsd.proc_memory_maps": [],
    "_psutil_bsd.proc_getrlimit": [],
    "_psutil_bsd.proc_setrlimit": [],
    "xml.etree": [],
    "xml.etree.ElementTree.ParseError": [],
    "xml.etree.ElementTree.iselement": [
        "<builtin>.hasattr"
    ],
    "xml.etree.ElementTree.Element": [],
    "xml.etree.ElementTree.Element.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "xml.etree.ElementTree.Element.__repr__": [
        "<builtin>.id"
    ],
    "xml.etree.ElementTree.Element.makeelement": [],
    "xml.etree.ElementTree.Element.copy": [
        "xml.etree.ElementTree.Element.makeelement"
    ],
    "xml.etree.ElementTree.Element.__len__": [
        "<builtin>.len"
    ],
    "xml.etree.ElementTree.Element.__bool__": [
        "warnings.warn",
        "<builtin>.len"
    ],
    "xml.etree.ElementTree.Element.__getitem__": [],
    "xml.etree.ElementTree.Element.__setitem__": [
        "<builtin>.isinstance",
        "xml.etree.ElementTree.Element._assert_is_element"
    ],
    "xml.etree.ElementTree.Element._assert_is_element": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "xml.etree.ElementTree.Element.__delitem__": [],
    "xml.etree.ElementTree.Element.append": [
        "xml.etree.ElementTree.Element._assert_is_element"
    ],
    "xml.etree.ElementTree.Element.extend": [
        "xml.etree.ElementTree.Element._assert_is_element"
    ],
    "xml.etree.ElementTree.Element.insert": [
        "xml.etree.ElementTree.Element._assert_is_element"
    ],
    "xml.etree.ElementTree.Element.remove": [],
    "xml.etree.ElementTree.Element.getchildren": [
        "warnings.warn"
    ],
    "xml.etree.ElementTree.Element.find": [
        "xml.etree.ElementPath.find"
    ],
    "xml.etree.ElementPath.find": [
        "<builtin>.next",
        "xml.etree.ElementPath.iterfind"
    ],
    "xml.etree.ElementTree.Element.findtext": [
        "xml.etree.ElementPath.findtext"
    ],
    "xml.etree.ElementPath.findtext": [
        "<builtin>.next",
        "xml.etree.ElementPath.iterfind"
    ],
    "xml.etree.ElementTree.Element.findall": [
        "xml.etree.ElementPath.findall"
    ],
    "xml.etree.ElementPath.findall": [
        "xml.etree.ElementPath.iterfind",
        "<builtin>.list"
    ],
    "xml.etree.ElementTree.Element.iterfind": [
        "xml.etree.ElementPath.iterfind"
    ],
    "xml.etree.ElementPath.iterfind": [
        "<builtin>.tuple",
        "<builtin>.SyntaxError",
        "<builtin>.sorted",
        "<builtin>.iter",
        "xml.etree.ElementPath._SelectorContext.__init__",
        "<builtin>.len",
        "xml.etree.ElementPath.xpath_tokenizer"
    ],
    "xml.etree.ElementTree.Element.clear": [],
    "xml.etree.ElementTree.Element.get": [],
    "xml.etree.ElementTree.Element.set": [],
    "xml.etree.ElementTree.Element.keys": [],
    "xml.etree.ElementTree.Element.items": [],
    "xml.etree.ElementTree.Element.iter": [],
    "xml.etree.ElementTree.Element.getiterator": [
        "warnings.warn",
        "<builtin>.list",
        "xml.etree.ElementTree.Element.iter"
    ],
    "xml.etree.ElementTree.Element.itertext": [
        "<builtin>.isinstance",
        "xml.etree.ElementTree.Element.itertext"
    ],
    "xml.etree.ElementTree.SubElement": [],
    "xml.etree.ElementTree.Comment": [
        "xml.etree.ElementTree.Element.__init__"
    ],
    "xml.etree.ElementTree.ProcessingInstruction": [
        "xml.etree.ElementTree.Element.__init__"
    ],
    "xml.etree.ElementTree.QName": [],
    "xml.etree.ElementTree.QName.__init__": [],
    "xml.etree.ElementTree.QName.__str__": [],
    "xml.etree.ElementTree.QName.__repr__": [],
    "xml.etree.ElementTree.QName.__hash__": [
        "<builtin>.hash"
    ],
    "xml.etree.ElementTree.QName.__le__": [
        "<builtin>.isinstance"
    ],
    "xml.etree.ElementTree.QName.__lt__": [
        "<builtin>.isinstance"
    ],
    "xml.etree.ElementTree.QName.__ge__": [
        "<builtin>.isinstance"
    ],
    "xml.etree.ElementTree.QName.__gt__": [
        "<builtin>.isinstance"
    ],
    "xml.etree.ElementTree.QName.__eq__": [
        "<builtin>.isinstance"
    ],
    "xml.etree.ElementTree.ElementTree": [],
    "xml.etree.ElementTree.ElementTree.__init__": [
        "xml.etree.ElementTree.ElementTree.parse"
    ],
    "xml.etree.ElementTree.ElementTree.parse": [
        "xml.etree.ElementTree.XMLParser.close",
        "xml.etree.ElementTree.XMLParser.__init__",
        "<builtin>.open",
        "<builtin>.hasattr",
        "xml.etree.ElementTree.XMLParser.feed"
    ],
    "xml.etree.ElementTree.ElementTree.getroot": [],
    "xml.etree.ElementTree.ElementTree._setroot": [],
    "xml.etree.ElementTree.XMLParser.feed": [
        "xml.etree.ElementTree.XMLParser._raiseerror"
    ],
    "xml.etree.ElementTree.XMLParser.close": [
        "xml.etree.ElementTree.XMLParser._raiseerror"
    ],
    "xml.etree.ElementTree.ElementTree.iter": [
        "xml.etree.ElementTree.ElementTree.iter"
    ],
    "xml.etree.ElementTree.ElementTree.getiterator": [
        "xml.etree.ElementTree.ElementTree.iter",
        "warnings.warn",
        "<builtin>.list"
    ],
    "xml.etree.ElementTree.ElementTree.find": [
        "warnings.warn",
        "xml.etree.ElementTree.ElementTree.find"
    ],
    "xml.etree.ElementTree.ElementTree.findtext": [
        "warnings.warn",
        "xml.etree.ElementTree.ElementTree.findtext"
    ],
    "xml.etree.ElementTree.ElementTree.findall": [
        "warnings.warn",
        "xml.etree.ElementTree.ElementTree.findall"
    ],
    "xml.etree.ElementTree.ElementTree.iterfind": [
        "warnings.warn",
        "xml.etree.ElementTree.ElementTree.iterfind"
    ],
    "xml.etree.ElementTree._get_writer": [
        "io.TextIOWrapper",
        "io.BufferedWriter",
        "contextlib._BaseExitStack.__init__",
        "<builtin>.isinstance",
        "<builtin>.open",
        "_io._IOBase.__init__"
    ],
    "xml.etree.ElementTree._serialize_text": [
        "xml.etree.ElementTree.ElementTree.write"
    ],
    "xml.etree.ElementTree._namespaces": [
        "xml.etree.ElementTree.ElementTree.iter",
        "<builtin>.isinstance",
        "xml.etree.ElementTree._raise_serialization_error",
        "xml.etree.ElementTree._namespaces.add_qname"
    ],
    "xml.etree.ElementTree.ElementTree.write_c14n": [
        "xml.etree.ElementTree.ElementTree.write"
    ],
    "_io._IOBase.__init__": [],
    "xml.etree.ElementTree._get_writer.<lambda1>": [],
    "xml.etree.ElementTree._namespaces.add_qname": [
        "<builtin>.ValueError",
        "xml.etree.ElementTree._raise_serialization_error",
        "<builtin>.len"
    ],
    "xml.etree.ElementTree._raise_serialization_error": [
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "xml.etree.ElementTree._serialize_xml": [
        "xml.etree.ElementTree._escape_attrib",
        "xml.etree.ElementTree._escape_cdata",
        "<builtin>.sorted",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.isinstance",
        "xml.etree.ElementTree._serialize_xml"
    ],
    "xml.etree.ElementTree._escape_cdata": [
        "xml.etree.ElementTree._raise_serialization_error"
    ],
    "xml.etree.ElementTree._serialize_xml.<lambda1>": [],
    "xml.etree.ElementTree._escape_attrib": [
        "xml.etree.ElementTree._raise_serialization_error"
    ],
    "xml.etree.ElementTree._serialize_html": [
        "xml.etree.ElementTree._escape_attrib",
        "xml.etree.ElementTree._serialize_html",
        "xml.etree.ElementTree._escape_cdata",
        "<builtin>.sorted",
        "<builtin>.list",
        "xml.etree.ElementTree._escape_attrib_html",
        "<builtin>.isinstance"
    ],
    "xml.etree.ElementTree._serialize_html.<lambda1>": [],
    "xml.etree.ElementTree._escape_attrib_html": [
        "xml.etree.ElementTree._raise_serialization_error"
    ],
    "xml.etree.ElementTree.register_namespace": [
        "<builtin>.ValueError",
        "re.match",
        "<builtin>.list"
    ],
    "xml.etree.ElementTree.tostring": [
        "io.BytesIO",
        "xml.etree.ElementTree.ElementTree.write",
        "io.StringIO",
        "xml.etree.ElementTree.ElementTree.__init__"
    ],
    "xml.etree.ElementTree._ListDataStream": [],
    "xml.etree.ElementTree._ListDataStream.__init__": [],
    "xml.etree.ElementTree._ListDataStream.writable": [],
    "xml.etree.ElementTree._ListDataStream.seekable": [],
    "xml.etree.ElementTree._ListDataStream.tell": [
        "<builtin>.len"
    ],
    "xml.etree.ElementTree.tostringlist": [
        "xml.etree.ElementTree.ElementTree.write",
        "xml.etree.ElementTree.ElementTree.__init__",
        "xml.etree.ElementTree._ListDataStream.__init__"
    ],
    "xml.etree.ElementTree.dump": [
        "xml.etree.ElementTree.ElementTree.write",
        "xml.etree.ElementTree.ElementTree.__init__",
        "sys.stdout.write",
        "<builtin>.isinstance",
        "xml.etree.ElementTree.ElementTree.getroot"
    ],
    "xml.etree.ElementTree.parse": [
        "xml.etree.ElementTree.ElementTree.parse",
        "xml.etree.ElementTree.ElementTree.__init__"
    ],
    "xml.etree.ElementTree.iterparse": [
        "<builtin>.open",
        "<builtin>.hasattr",
        "xml.etree.ElementTree.XMLPullParser.__init__",
        "xml.etree.ElementTree.iterparse.IterParseIterator"
    ],
    "xml.etree.ElementTree.XMLPullParser.__init__": [
        "xml.etree.ElementTree.XMLParser.__init__",
        "collections.deque",
        "xml.etree.ElementTree.TreeBuilder.__init__"
    ],
    "xml.etree.ElementTree.iterparse.iterator": [
        "xml.etree.ElementTree.XMLPullParser.feed",
        "xml.etree.ElementTree.XMLPullParser.read_events",
        "xml.etree.ElementTree.XMLPullParser._close_and_return_root"
    ],
    "xml.etree.ElementTree.XMLPullParser.read_events": [
        "<builtin>.isinstance"
    ],
    "xml.etree.ElementTree.XMLPullParser.feed": [
        "<builtin>.ValueError"
    ],
    "xml.etree.ElementTree.XMLPullParser._close_and_return_root": [],
    "xml.etree.ElementTree.iterparse.IterParseIterator": [
        "xml.etree.ElementTree.iterparse.iterator"
    ],
    "xml.etree.ElementTree.XMLPullParser": [],
    "xml.etree.ElementTree.TreeBuilder.__init__": [],
    "xml.etree.ElementTree.XMLPullParser.close": [
        "xml.etree.ElementTree.XMLPullParser._close_and_return_root"
    ],
    "xml.etree.ElementTree.XML": [
        "xml.etree.ElementTree.XMLParser.close",
        "xml.etree.ElementTree.XMLParser.__init__",
        "xml.etree.ElementTree.XMLParser.feed",
        "xml.etree.ElementTree.TreeBuilder.__init__"
    ],
    "xml.etree.ElementTree.XMLID": [
        "xml.etree.ElementTree.XMLParser.close",
        "xml.etree.ElementTree.XMLParser.__init__",
        "xml.etree.ElementTree.XMLParser.feed",
        "xml.etree.ElementTree.TreeBuilder.__init__"
    ],
    "xml.etree.ElementTree.fromstringlist": [
        "xml.etree.ElementTree.XMLParser.close",
        "xml.etree.ElementTree.XMLParser.__init__",
        "xml.etree.ElementTree.XMLParser.feed",
        "xml.etree.ElementTree.TreeBuilder.__init__"
    ],
    "xml.etree.ElementTree.TreeBuilder": [],
    "xml.etree.ElementTree.TreeBuilder.close": [
        "<builtin>.len"
    ],
    "xml.etree.ElementTree.TreeBuilder._flush": [],
    "xml.etree.ElementTree.TreeBuilder.data": [],
    "xml.etree.ElementTree.TreeBuilder.start": [
        "xml.etree.ElementTree.Element.__init__",
        "xml.etree.ElementTree.TreeBuilder._flush"
    ],
    "xml.etree.ElementTree.TreeBuilder.end": [
        "xml.etree.ElementTree.TreeBuilder._flush"
    ],
    "xml.etree.ElementTree.TreeBuilder.comment": [
        "xml.etree.ElementTree.TreeBuilder._handle_single"
    ],
    "xml.etree.ElementTree.TreeBuilder._handle_single": [
        "xml.etree.ElementTree.TreeBuilder._flush",
        "xml.etree.ElementTree.ProcessingInstruction",
        "xml.etree.ElementTree.Comment"
    ],
    "xml.etree.ElementTree.TreeBuilder.pi": [
        "xml.etree.ElementTree.TreeBuilder._handle_single"
    ],
    "xml.etree.ElementTree.XMLParser": [],
    "xml.etree.ElementTree.XMLParser._setevents": [
        "<builtin>.ValueError",
        "<builtin>.hasattr"
    ],
    "xml.etree.ElementTree.XMLParser._setevents.handler": [
        "xml.etree.ElementTree.TreeBuilder.comment",
        "xml.etree.ElementTree.C14NWriterTarget.pi",
        "xml.etree.ElementTree.C14NWriterTarget.comment",
        "xml.etree.ElementTree.TreeBuilder.pi"
    ],
    "xml.etree.ElementTree.C14NWriterTarget.comment": [
        "xml.etree.ElementTree.C14NWriterTarget._flush",
        "xml.etree.ElementTree._escape_cdata_c14n"
    ],
    "xml.etree.ElementTree.C14NWriterTarget.pi": [
        "xml.etree.ElementTree.C14NWriterTarget._flush",
        "xml.etree.ElementTree._escape_cdata_c14n"
    ],
    "xml.etree.ElementTree.XMLParser._raiseerror": [],
    "xml.etree.ElementTree.XMLParser._fixname": [],
    "xml.etree.ElementTree.XMLParser._start_ns": [
        "xml.etree.ElementTree.C14NWriterTarget.start_ns"
    ],
    "xml.etree.ElementTree.C14NWriterTarget.start_ns": [
        "xml.etree.ElementTree.C14NWriterTarget._flush"
    ],
    "xml.etree.ElementTree.XMLParser._end_ns": [],
    "xml.etree.ElementTree.XMLParser._start": [
        "xml.etree.ElementTree.XMLParser._fixname",
        "xml.etree.ElementTree.TreeBuilder.start",
        "<builtin>.len",
        "<builtin>.range",
        "xml.etree.ElementTree.C14NWriterTarget.start"
    ],
    "xml.etree.ElementTree.C14NWriterTarget.start": [
        "xml.etree.ElementTree.C14NWriterTarget._flush",
        "xml.etree.ElementTree.C14NWriterTarget._start"
    ],
    "xml.etree.ElementTree.XMLParser._end": [
        "xml.etree.ElementTree.TreeBuilder.end",
        "xml.etree.ElementTree.C14NWriterTarget.end",
        "xml.etree.ElementTree.XMLParser._fixname"
    ],
    "xml.etree.ElementTree.C14NWriterTarget.end": [
        "xml.etree.ElementTree.C14NWriterTarget._qname",
        "xml.etree.ElementTree.C14NWriterTarget._flush",
        "<builtin>.len"
    ],
    "xml.etree.ElementTree.canonicalize": [
        "xml.etree.ElementTree.XMLParser.close",
        "<builtin>.ValueError",
        "xml.etree.ElementTree.parse",
        "xml.etree.ElementTree.C14NWriterTarget.__init__",
        "xml.etree.ElementTree.XMLParser.__init__",
        "xml.etree.ElementTree.XMLParser.feed",
        "io.StringIO"
    ],
    "xml.etree.ElementTree.C14NWriterTarget.__init__": [
        "<builtin>.set",
        "<builtin>.list"
    ],
    "xml.etree.ElementTree.C14NWriterTarget": [],
    "xml.etree.ElementTree.C14NWriterTarget._iter_namespaces": [],
    "xml.etree.ElementTree.C14NWriterTarget._resolve_prefix_name": [
        "<builtin>.ValueError",
        "xml.etree.ElementTree.C14NWriterTarget._iter_namespaces"
    ],
    "xml.etree.ElementTree.C14NWriterTarget._qname": [
        "<builtin>.ValueError",
        "xml.etree.ElementTree.C14NWriterTarget._iter_namespaces",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "xml.etree.ElementTree.C14NWriterTarget.data": [],
    "xml.etree.ElementTree.C14NWriterTarget._flush": [
        "xml.etree.ElementTree._escape_cdata_c14n",
        "xml.etree.ElementTree.C14NWriterTarget._start"
    ],
    "xml.etree.ElementTree.C14NWriterTarget._start": [
        "xml.etree.ElementTree._escape_attrib_c14n",
        "<builtin>.sorted",
        "xml.etree.ElementTree.C14NWriterTarget._resolve_prefix_name",
        "xml.etree.ElementTree.C14NWriterTarget._qname",
        "xml.etree.ElementTree._escape_cdata_c14n"
    ],
    "xml.etree.ElementTree._escape_cdata_c14n": [
        "xml.etree.ElementTree._raise_serialization_error"
    ],
    "xml.etree.ElementTree.C14NWriterTarget._start.<lambda1>": [],
    "xml.etree.ElementTree._escape_attrib_c14n": [
        "xml.etree.ElementTree._raise_serialization_error"
    ],
    "xml.etree.ElementPath.xpath_tokenizer": [
        "<builtin>.SyntaxError"
    ],
    "xml.etree.ElementPath.get_parent_map": [],
    "xml.etree.ElementPath._is_wildcard_tag": [],
    "xml.etree.ElementPath._prepare_tag": [
        "<builtin>.RuntimeError",
        "<builtin>.len",
        "<builtin>.slice"
    ],
    "xml.etree.ElementPath._prepare_tag.select": [],
    "<builtin>.slice": [],
    "xml.etree.ElementPath.prepare_child": [
        "xml.etree.ElementPath._is_wildcard_tag",
        "xml.etree.ElementPath._prepare_tag"
    ],
    "xml.etree.ElementPath.prepare_child.select": [
        "xml.etree.ElementPath._prepare_tag.select",
        "xml.etree.ElementPath.prepare_child.select.select_child"
    ],
    "xml.etree.ElementPath.prepare_child.select.select_child": [],
    "xml.etree.ElementPath.prepare_star": [],
    "xml.etree.ElementPath.prepare_star.select": [],
    "xml.etree.ElementPath.prepare_self": [],
    "xml.etree.ElementPath.prepare_self.select": [],
    "xml.etree.ElementPath.prepare_descendant": [
        "xml.etree.ElementPath._is_wildcard_tag",
        "<builtin>.SyntaxError",
        "xml.etree.ElementPath._prepare_tag"
    ],
    "xml.etree.ElementPath.prepare_descendant.select": [
        "xml.etree.ElementPath._prepare_tag.select",
        "xml.etree.ElementPath.prepare_descendant.select.select_child"
    ],
    "xml.etree.ElementPath.prepare_descendant.select.select_child": [],
    "xml.etree.ElementPath.prepare_parent": [],
    "xml.etree.ElementPath.prepare_parent.select": [
        "xml.etree.ElementPath.get_parent_map"
    ],
    "xml.etree.ElementPath.prepare_predicate": [
        "<builtin>.int",
        "re.match",
        "<builtin>.SyntaxError"
    ],
    "xml.etree.ElementPath.prepare_predicate.select": [
        "xml.etree.ElementPath.get_parent_map",
        "<builtin>.list"
    ],
    "xml.etree.ElementPath._SelectorContext": [],
    "xml.etree.ElementPath._SelectorContext.__init__": [],
    "psutil._common.NicDuplex": [],
    "psutil._common.BatteryTime": [],
    "psutil._common.Error": [],
    "psutil._common.Error._infodict": [
        "collections.OrderedDict.__init__",
        "<builtin>.getattr"
    ],
    "psutil._common.Error.__str__": [
        "<builtin>.getattr",
        "_collections.OrderedDict.items",
        "psutil._common.Error._infodict"
    ],
    "psutil._common.Error.__repr__": [
        "_collections.OrderedDict.items",
        "psutil._common.Error._infodict"
    ],
    "psutil._common.NoSuchProcess": [],
    "psutil._common.NoSuchProcess.__init__": [],
    "psutil._common.ZombieProcess": [],
    "psutil._common.ZombieProcess.__init__": [
        "psutil._common.NoSuchProcess.__init__"
    ],
    "psutil._common.AccessDenied": [],
    "psutil._common.AccessDenied.__init__": [],
    "psutil._common.TimeoutExpired": [],
    "psutil._common.TimeoutExpired.__init__": [],
    "psutil._common.usage_percent": [
        "<builtin>.float",
        "<builtin>.round"
    ],
    "psutil._common.memoize": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._common.memoize.wrapper": [
        "psutil._common.supports_ipv6",
        "<builtin>.sorted",
        "<builtin>.frozenset",
        "psutil._common.term_supports_colors"
    ],
    "psutil._common.supports_ipv6": [
        "contextlib.closing.__init__"
    ],
    "psutil._common.memoize.cache_clear": [],
    "psutil._common.memoize_when_activated": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._common.memoize_when_activated.wrapper": [],
    "psutil._common.memoize_when_activated.cache_activate": [],
    "psutil._common.memoize_when_activated.cache_deactivate": [],
    "psutil._common.isfile_strict": [
        "stat.S_ISREG"
    ],
    "psutil._common.path_exists_strict": [],
    "psutil._common.parse_environ_block": [],
    "psutil._common.sockfam_to_enum": [],
    "psutil._common.socktype_to_enum": [],
    "psutil._common.conn_to_ntuple": [
        "psutil._common.socktype_to_enum",
        "psutil._common.sockfam_to_enum"
    ],
    "psutil._common.deprecated_method": [],
    "psutil._common.deprecated_method.outer": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._common.deprecated_method.outer.inner": [
        "warnings.warn",
        "<builtin>.getattr"
    ],
    "psutil._common._WrapNumbers": [],
    "psutil._common._WrapNumbers.__init__": [],
    "psutil._common._WrapNumbers._add_dict": [
        "collections.defaultdict"
    ],
    "psutil._common._WrapNumbers._remove_dead_reminders": [
        "<builtin>.set"
    ],
    "psutil._common._WrapNumbers.run": [
        "<builtin>.tuple",
        "psutil._common._WrapNumbers._remove_dead_reminders",
        "<builtin>.len",
        "<builtin>.range",
        "psutil._common._WrapNumbers._add_dict"
    ],
    "psutil._common._WrapNumbers.cache_clear": [],
    "psutil._common._WrapNumbers.cache_info": [],
    "psutil._common.wrap_numbers": [
        "psutil._common._WrapNumbers.run"
    ],
    "psutil._common.open_binary": [
        "<builtin>.open"
    ],
    "psutil._common.open_text": [
        "<builtin>.open"
    ],
    "psutil._common.cat": [
        "psutil._common.open_binary",
        "psutil._common.open_text"
    ],
    "psutil._common.bcat": [
        "psutil._common.cat"
    ],
    "psutil._common.get_procfs_path": [],
    "psutil._common.decode": [],
    "psutil._common.hilite": [
        "<builtin>.dict",
        "<builtin>.ValueError",
        "psutil._common.term_supports_colors",
        "<builtin>.list"
    ],
    "ctypes.create_string_buffer": [
        "sys.audit",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "ctypes.c_buffer": [
        "ctypes.create_string_buffer"
    ],
    "ctypes.CFUNCTYPE": [
        "ctypes.CFUNCTYPE.CFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.CFUNCTYPE.CFunctionType": [],
    "ctypes.WINFUNCTYPE": [
        "<builtin>.ValueError",
        "ctypes.WINFUNCTYPE.WinFunctionType"
    ],
    "ctypes.WINFUNCTYPE.WinFunctionType": [],
    "ctypes.py_object": [],
    "ctypes.py_object.__repr__": [
        "<builtin>.super",
        "<builtin>.type"
    ],
    "ctypes.c_short": [],
    "ctypes.c_ushort": [],
    "ctypes.c_long": [],
    "ctypes.c_ulong": [],
    "ctypes.c_int": [],
    "ctypes.c_uint": [],
    "ctypes.c_float": [],
    "ctypes.c_double": [],
    "ctypes.c_longdouble": [],
    "ctypes.c_longlong": [],
    "ctypes.c_ulonglong": [],
    "ctypes.c_ubyte": [],
    "ctypes.c_byte": [],
    "ctypes.c_char": [],
    "ctypes.c_char_p": [],
    "ctypes.c_char_p.__repr__": [],
    "ctypes.c_void_p": [],
    "ctypes.c_bool": [],
    "ctypes.c_wchar_p": [],
    "ctypes.c_wchar_p.__repr__": [],
    "ctypes.c_wchar": [],
    "ctypes._reset_cache": [],
    "ctypes.create_unicode_buffer": [
        "<builtin>.ord",
        "sys.audit",
        "<builtin>.sum",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "ctypes.SetPointerType": [
        "<builtin>.RuntimeError",
        "<builtin>.id"
    ],
    "ctypes.ARRAY": [],
    "ctypes.CDLL": [],
    "ctypes.CDLL.__init__": [
        "sys.platform.startswith",
        "nt._getfullpathname",
        "ctypes.CDLL.__init__._FuncPtr"
    ],
    "ctypes.CDLL.__init__._FuncPtr": [],
    "ctypes.CDLL.__repr__": [
        "<builtin>.id"
    ],
    "ctypes.CDLL.__getattr__": [
        "<builtin>.AttributeError",
        "ctypes.CDLL.__getitem__",
        "<builtin>.setattr"
    ],
    "ctypes.CDLL.__getitem__": [
        "<builtin>.isinstance"
    ],
    "ctypes.PyDLL": [],
    "ctypes.WinDLL": [],
    "ctypes.HRESULT": [],
    "ctypes.OleDLL": [],
    "ctypes.LibraryLoader": [],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.LibraryLoader.__getattr__": [
        "<builtin>.AttributeError",
        "ctypes.CDLL.__init__",
        "<builtin>.setattr"
    ],
    "ctypes.LibraryLoader.__getitem__": [
        "<builtin>.getattr"
    ],
    "ctypes.LibraryLoader.LoadLibrary": [
        "ctypes.CDLL.__init__"
    ],
    "ctypes.WinError": [
        "<builtin>.OSError"
    ],
    "ctypes.PYFUNCTYPE": [
        "ctypes.PYFUNCTYPE.CFunctionType"
    ],
    "ctypes.PYFUNCTYPE.CFunctionType": [],
    "ctypes.cast": [],
    "ctypes.string_at": [],
    "ctypes.wstring_at": [],
    "ctypes.DllGetClassObject": [
        "<builtin>.globals",
        "<builtin>.__import__",
        "<builtin>.locals"
    ],
    "ctypes.DllCanUnloadNow": [
        "<builtin>.globals",
        "<builtin>.__import__",
        "<builtin>.locals"
    ],
    "ctypes._endian._other_endian": [
        "ctypes._endian._other_endian",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.issubclass"
    ],
    "ctypes._endian._swapped_meta": [],
    "ctypes._endian._swapped_meta.__setattr__": [
        "<builtin>.super",
        "ctypes._endian._other_endian"
    ],
    "ctypes._endian.BigEndianStructure": [],
    "ctypes._endian.LittleEndianStructure": [],
    "curses.has_key.has_key": [
        "<builtin>.isinstance",
        "<builtin>.ord"
    ],
    "psutil._pslinux.IOPriority": [],
    "psutil._pslinux.readlink": [
        "<builtin>.isinstance",
        "_common.path_exists_strict"
    ],
    "_common.path_exists_strict": [],
    "psutil._pslinux.file_flags_to_mode": [],
    "psutil._pslinux.is_storage_device": [],
    "psutil._pslinux.set_scputimes_ntuple": [
        "collections.namedtuple",
        "_common.open_binary",
        "<builtin>.len"
    ],
    "_common.open_binary": [],
    "psutil._pslinux.prlimit": [
        "<builtin>.OSError",
        "psutil._pslinux.prlimit.StructRlimit"
    ],
    "psutil._pslinux.prlimit.StructRlimit": [],
    "psutil._pslinux.calculate_avail_vmem": [
        "<builtin>.int",
        "_common.open_binary",
        "_common.get_procfs_path",
        "<builtin>.min"
    ],
    "_psutil_linux.linux_sysinfo": [],
    "_common.open_text": [],
    "psutil._pslinux._cpu_get_cpuinfo_freq": [
        "_common.open_binary",
        "<builtin>.float",
        "_common.get_procfs_path"
    ],
    "psutil._pslinux.cpu_freq.<lambda1>": [
        "<builtin>.int",
        "re.search"
    ],
    "_common.bcat": [],
    "psutil._pslinux._Ipv6UnsupportedError": [],
    "psutil._pslinux.Connections": [],
    "psutil._pslinux.Connections.__init__": [],
    "psutil._pslinux.Connections.get_proc_inodes": [
        "psutil._pslinux.readlink",
        "_common.debug",
        "<builtin>.int",
        "_collections.defaultdict"
    ],
    "psutil._pslinux.Connections.get_all_inodes": [
        "psutil._pslinux.Connections.get_proc_inodes",
        "psutil._pslinux.pids"
    ],
    "psutil._pslinux.Connections.decode_address": [
        "base64.b16decode",
        "<builtin>.int",
        "_common.addr",
        "_common.supports_ipv6"
    ],
    "_common.supports_ipv6": [],
    "psutil._pslinux.Connections.process_inet": [
        "ntpath.exists",
        "posixpath.exists",
        "psutil._pslinux.Connections.decode_address",
        "<builtin>.RuntimeError",
        "<builtin>.enumerate",
        "_common.open_text"
    ],
    "psutil._pslinux.Connections.process_unix": [
        "_common.socktype_to_enum",
        "<builtin>.RuntimeError",
        "<builtin>.len",
        "<builtin>.int",
        "_common.open_text"
    ],
    "psutil._pslinux.Connections.retrieve": [
        "<builtin>.ValueError",
        "psutil._pslinux.Connections.get_all_inodes",
        "psutil._pslinux.Connections.get_proc_inodes",
        "_common.sconn",
        "<builtin>.repr",
        "psutil._pslinux.Connections.process_inet",
        "psutil._pslinux.Connections.process_unix",
        "<builtin>.list",
        "<builtin>.set",
        "_common.pconn",
        "_common.get_procfs_path"
    ],
    "_psutil_linux.net_if_duplex_speed": [],
    "psutil._pslinux.disk_io_counters.read_procfs": [
        "<builtin>.ValueError",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.int",
        "_common.open_text",
        "_common.get_procfs_path"
    ],
    "psutil._pslinux.disk_io_counters.read_sysfs": [
        "posixpath.join",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.map",
        "os.walk",
        "ntpath.join",
        "_common.open_text"
    ],
    "psutil._pslinux.RootFsDeviceFinder": [],
    "psutil._pslinux.RootFsDeviceFinder.__init__": [],
    "psutil._pslinux.RootFsDeviceFinder.ask_proc_partitions": [
        "<builtin>.int",
        "<builtin>.len",
        "_common.open_text",
        "_common.get_procfs_path"
    ],
    "psutil._pslinux.RootFsDeviceFinder.ask_sys_dev_block": [
        "_common.open_text"
    ],
    "psutil._pslinux.RootFsDeviceFinder.ask_sys_class_block": [
        "ntpath.basename",
        "posixpath.basename",
        "posixpath.dirname",
        "ntpath.dirname",
        "_common.open_text"
    ],
    "psutil._pslinux.RootFsDeviceFinder.find": [
        "_common.debug",
        "ntpath.exists",
        "posixpath.exists",
        "psutil._pslinux.RootFsDeviceFinder.ask_sys_class_block",
        "psutil._pslinux.RootFsDeviceFinder.ask_proc_partitions",
        "psutil._pslinux.RootFsDeviceFinder.ask_sys_dev_block"
    ],
    "_psutil_linux.disk_partitions": [],
    "_common.cat": [],
    "_common.sfan": [],
    "psutil._pslinux.sensors_battery.multi_bcat": [
        "_common.bcat",
        "<builtin>.int"
    ],
    "_psutil_linux.users": [],
    "psutil._pslinux.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._pslinux.wrap_exceptions.wrapper": [
        "psutil._pslinux.Process.io_counters",
        "psutil._pslinux.Process.num_threads",
        "psutil._pslinux.Process.gids",
        "posixpath.exists",
        "psutil._pslinux.Process.cmdline",
        "psutil._pslinux.Process.nice_get",
        "psutil._pslinux.Process.status",
        "psutil._pslinux.Process.cpu_times",
        "_common.AccessDenied",
        "_common.NoSuchProcess",
        "psutil._pslinux.Process.cpu_affinity_set",
        "psutil._pslinux.Process.wait",
        "psutil._pslinux.Process.environ",
        "psutil._pslinux.Process.ionice_get",
        "psutil._pslinux.Process.threads",
        "psutil._pslinux.Process._parse_smaps",
        "psutil._pslinux.Process.nice_set",
        "psutil._pslinux.Process.cpu_affinity_get",
        "psutil._pslinux.Process.terminal",
        "psutil._pslinux.Process.rlimit",
        "psutil._pslinux.Process.open_files",
        "psutil._pslinux.Process.name",
        "ntpath.exists",
        "psutil._pslinux.Process.uids",
        "psutil._pslinux.Process.num_ctx_switches",
        "psutil._pslinux.Process._parse_smaps_rollup",
        "psutil._pslinux.Process.cwd",
        "psutil._pslinux.Process.cpu_num",
        "psutil._pslinux.Process.ionice_set",
        "psutil._pslinux.Process.memory_maps",
        "psutil._pslinux.Process.memory_info",
        "psutil._pslinux.Process.ppid",
        "psutil._pslinux.Process.num_fds",
        "psutil._pslinux.Process.create_time",
        "psutil._pslinux.Process.connections"
    ],
    "psutil._pslinux.Process._parse_smaps_rollup": [
        "_common.open_binary",
        "psutil._pslinux.pid_exists",
        "_common.ZombieProcess",
        "_common.NoSuchProcess",
        "<builtin>.int"
    ],
    "psutil._pslinux.Process._parse_smaps": [
        "<builtin>.sum",
        "<builtin>.map",
        "psutil._pslinux.Process._read_smaps_file"
    ],
    "psutil._pslinux.Process": [
        "psutil._pslinux.wrap_exceptions",
        "ntpath.exists",
        "posixpath.exists",
        "_common.memoize_when_activated"
    ],
    "psutil._pslinux.Process._assert_alive": [],
    "psutil._pslinux.Process._parse_stat_file": [
        "_common.bcat"
    ],
    "psutil._pslinux.Process._read_status_file": [
        "_common.open_binary"
    ],
    "psutil._pslinux.Process._read_smaps_file": [
        "_common.open_binary"
    ],
    "_common.decode": [],
    "psutil._pslinux.Process.memory_maps.get_blocks": [
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "_psutil_linux.proc_cpu_affinity_get": [],
    "_psutil_linux.proc_cpu_affinity_set": [],
    "_psutil_linux.proc_ioprio_get": [],
    "_common.pionice": [],
    "_psutil_linux.proc_ioprio_set": [],
    "glob.glob": [
        "glob.iglob",
        "<builtin>.list"
    ],
    "glob.iglob": [
        "glob._isrecursive",
        "glob._iglob",
        "<builtin>.next",
        "sys.audit"
    ],
    "glob._iglob": [
        "glob._glob0",
        "posixpath.lexists",
        "glob._glob2",
        "posixpath.join",
        "glob.has_magic",
        "ntpath.isdir",
        "glob._glob1",
        "glob._isrecursive",
        "ntpath.lexists",
        "ntpath.split",
        "posixpath.isdir",
        "ntpath.join",
        "tarfile.TarFile.__iter__",
        "posixpath.split",
        "glob._iglob"
    ],
    "glob._isrecursive": [
        "<builtin>.isinstance"
    ],
    "glob.has_magic": [
        "<builtin>.isinstance"
    ],
    "glob._glob2": [
        "glob._isrecursive",
        "glob._rlistdir"
    ],
    "glob._glob1": [
        "glob._ishidden",
        "glob._iterdir",
        "<builtin>.list"
    ],
    "glob._glob0": [
        "posixpath.lexists",
        "posixpath.join",
        "ntpath.isdir",
        "posixpath.isdir",
        "ntpath.join",
        "ntpath.lexists"
    ],
    "glob._iterdir": [
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "glob._ishidden": [],
    "glob.glob0": [
        "glob._glob0"
    ],
    "glob.glob1": [
        "glob._glob1"
    ],
    "glob._rlistdir": [
        "glob._iterdir",
        "posixpath.join",
        "glob._ishidden",
        "<builtin>.list",
        "glob._rlistdir",
        "ntpath.join",
        "tarfile.TarFile.__iter__"
    ],
    "glob.escape": [
        "<builtin>.isinstance",
        "posixpath.splitdrive",
        "ntpath.splitdrive"
    ],
    "_psutil_aix.virtual_mem": [],
    "_psutil_aix.swap_mem": [],
    "_psutil_aix.per_cpu_times": [],
    "_psutil_aix.cpu_stats": [],
    "_psutil_aix.disk_partitions": [],
    "_psutil_aix.net_connections": [],
    "_psutil_posix.net_if_addrs": [],
    "_psutil_aix.net_if_stats": [],
    "_psutil_aix.boot_time": [],
    "_psutil_aix.users": [],
    "psutil._psaix.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._psaix.wrap_exceptions.wrapper": [
        "psutil._psaix.Process.wait",
        "psutil._psaix.Process.nice_set",
        "_common.AccessDenied",
        "_common.NoSuchProcess",
        "psutil._psaix.Process.cwd",
        "psutil._psaix.Process.num_ctx_switches",
        "psutil._psaix.Process.num_fds",
        "psutil._psaix.Process.num_threads",
        "psutil._psaix.Process.gids",
        "psutil._psaix.Process.environ",
        "psutil._psaix.Process.terminal",
        "psutil._psaix.Process.name",
        "psutil._psaix.Process.io_counters",
        "psutil._psaix.Process.cpu_times",
        "psutil._psaix.Process.cmdline",
        "psutil._psaix.Process.memory_info",
        "psutil._psaix.Process.connections",
        "psutil._psaix.Process.uids",
        "psutil._psaix.pid_exists",
        "_common.ZombieProcess",
        "psutil._psaix.Process.exe",
        "psutil._psaix.Process.ppid",
        "psutil._psaix.Process.threads",
        "psutil._psaix.Process.create_time",
        "psutil._psaix.Process.status",
        "psutil._psaix.Process.nice_get"
    ],
    "psutil._psaix.Process": [
        "psutil._psaix.wrap_exceptions",
        "_common.memoize_when_activated"
    ],
    "psutil._psaix.Process._proc_basic_info": [
        "_psutil_aix.proc_basic_info"
    ],
    "_psutil_aix.proc_basic_info": [],
    "psutil._psaix.Process._proc_cred": [
        "_psutil_aix.proc_cred"
    ],
    "_psutil_aix.proc_cred": [],
    "_psutil_aix.proc_name": [],
    "_psutil_aix.proc_args": [],
    "_psutil_aix.proc_environ": [],
    "_psutil_aix.proc_threads": [],
    "_psutil_aix.proc_cpu_times": [],
    "_psutil_aix.proc_num_ctx_switches": [],
    "_psutil_aix.proc_io_counters": [],
    "urllib.request.HTTPSHandler.__init__": [
        "urllib.request.AbstractHTTPHandler.__init__"
    ],
    "urllib.request.build_opener": [
        "urllib.request.OpenerDirector.__init__",
        "<builtin>.set",
        "<builtin>.hasattr",
        "urllib.request.OpenerDirector.add_handler",
        "<builtin>.isinstance",
        "<builtin>.issubclass"
    ],
    "urllib.request.OpenerDirector.open": [
        "sys.audit",
        "urllib.request.Request.__init__",
        "<builtin>.isinstance",
        "urllib.request.Request.get_method",
        "<builtin>.getattr",
        "urllib.request.OpenerDirector._open"
    ],
    "urllib.request.install_opener": [],
    "urllib.request.urlretrieve": [
        "tempfile.NamedTemporaryFile",
        "contextlib.closing.__init__",
        "urllib.parse._splittype",
        "urllib.error.ContentTooShortError.__init__",
        "posixpath.normpath",
        "<builtin>.len",
        "<builtin>.int",
        "<builtin>.open",
        "urllib.request.urlopen",
        "ntpath.normpath"
    ],
    "urllib.error.ContentTooShortError.__init__": [
        "urllib.error.URLError.__init__"
    ],
    "urllib.request.urlcleanup": [],
    "urllib.request.request_host": [
        "urllib.request.Request.get_header",
        "urllib.parse.urlparse"
    ],
    "urllib.request.Request.get_header": [],
    "urllib.request.Request": [],
    "urllib.request.Request.__init__": [
        "urllib.request.Request.add_header",
        "urllib.request.request_host"
    ],
    "urllib.request.Request.add_header": [],
    "urllib.request.Request.full_url": [
        "urllib.parse.unwrap",
        "urllib.parse._splittag",
        "urllib.request.Request._parse"
    ],
    "urllib.request.Request._parse": [
        "<builtin>.ValueError",
        "urllib.parse._splithost",
        "urllib.parse._splittype",
        "urllib.parse.unquote"
    ],
    "urllib.request.Request.data": [
        "urllib.request.Request.has_header",
        "urllib.request.Request.remove_header"
    ],
    "urllib.request.Request.has_header": [],
    "urllib.request.Request.remove_header": [],
    "urllib.request.Request.get_method": [
        "<builtin>.getattr"
    ],
    "urllib.request.Request.get_full_url": [],
    "urllib.request.Request.set_proxy": [],
    "urllib.request.Request.has_proxy": [],
    "urllib.request.Request.add_unredirected_header": [],
    "urllib.request.Request.header_items": [
        "<builtin>.list"
    ],
    "urllib.request.OpenerDirector": [],
    "urllib.request.OpenerDirector.__init__": [],
    "urllib.request.OpenerDirector.add_handler": [
        "<builtin>.dir",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.int"
    ],
    "urllib.request.OpenerDirector.close": [],
    "urllib.request.OpenerDirector._call_chain": [
        "<builtin>.getattr"
    ],
    "urllib.request.OpenerDirector._open": [
        "urllib.request.OpenerDirector._call_chain"
    ],
    "urllib.request.OpenerDirector.error": [
        "urllib.request.OpenerDirector._call_chain"
    ],
    "urllib.request.BaseHandler": [],
    "urllib.request.BaseHandler.add_parent": [],
    "urllib.request.BaseHandler.close": [],
    "urllib.request.BaseHandler.__lt__": [
        "<builtin>.hasattr"
    ],
    "urllib.request.HTTPErrorProcessor": [],
    "urllib.request.HTTPErrorProcessor.http_response": [],
    "urllib.request.HTTPDefaultErrorHandler": [],
    "urllib.request.HTTPDefaultErrorHandler.http_error_default": [
        "urllib.error.HTTPError.__init__"
    ],
    "urllib.error.HTTPError.__init__": [],
    "urllib.request.HTTPRedirectHandler": [],
    "urllib.request.HTTPRedirectHandler.redirect_request": [
        "urllib.error.HTTPError.__init__",
        "urllib.request.Request.__init__"
    ],
    "urllib.request.HTTPRedirectHandler.http_error_302": [
        "urllib.parse.urljoin",
        "urllib.parse.urlparse",
        "<builtin>.list",
        "urllib.request.HTTPRedirectHandler.redirect_request",
        "<builtin>.hasattr",
        "<builtin>.len",
        "urllib.error.HTTPError.__init__",
        "urllib.parse.quote",
        "urllib.parse.urlunparse"
    ],
    "urllib.request._parse_proxy": [
        "<builtin>.ValueError",
        "urllib.parse._splituser",
        "urllib.parse._splittype",
        "urllib.parse._splitpasswd"
    ],
    "urllib.request.ProxyHandler": [],
    "urllib.request.ProxyHandler.__init__": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "urllib.request.getproxies_environment"
    ],
    "urllib.request.getproxies_environment": [],
    "urllib.request.ProxyHandler.__init__.<lambda1>": [],
    "urllib.request.ProxyHandler.proxy_open": [
        "urllib.request._parse_proxy",
        "base64.b64encode",
        "urllib.parse.unquote",
        "urllib.request.proxy_bypass_environment"
    ],
    "urllib.request.proxy_bypass_environment": [
        "urllib.parse._splitport",
        "urllib.request.getproxies_environment"
    ],
    "urllib.request.HTTPPasswordMgr": [],
    "urllib.request.HTTPPasswordMgr.__init__": [],
    "urllib.request.HTTPPasswordMgr.add_password": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "urllib.request.HTTPPasswordMgr.reduce_uri"
    ],
    "urllib.request.HTTPPasswordMgr.reduce_uri": [
        "urllib.parse._splitport",
        "urllib.parse.urlsplit"
    ],
    "urllib.request.HTTPPasswordMgr.find_user_password": [
        "urllib.request.HTTPPasswordMgr.reduce_uri",
        "urllib.request.HTTPPasswordMgr.is_suburi"
    ],
    "urllib.request.HTTPPasswordMgr.is_suburi": [
        "posixpath.commonprefix",
        "<builtin>.len"
    ],
    "posixpath.commonprefix": [],
    "urllib.request.HTTPPasswordMgrWithDefaultRealm": [],
    "urllib.request.HTTPPasswordMgrWithDefaultRealm.find_user_password": [
        "urllib.request.HTTPPasswordMgr.find_user_password"
    ],
    "urllib.request.HTTPPasswordMgrWithPriorAuth": [],
    "urllib.request.HTTPPasswordMgrWithPriorAuth.__init__": [
        "<builtin>.super"
    ],
    "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password": [
        "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated",
        "<builtin>.super"
    ],
    "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated": [
        "<builtin>.isinstance",
        "urllib.request.HTTPPasswordMgr.reduce_uri"
    ],
    "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated": [
        "urllib.request.HTTPPasswordMgr.reduce_uri",
        "urllib.request.HTTPPasswordMgr.is_suburi"
    ],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "urllib.request.AbstractBasicAuthHandler.__init__": [
        "urllib.request.HTTPPasswordMgr.__init__"
    ],
    "urllib.request.AbstractBasicAuthHandler._parse_realm": [
        "warnings.warn"
    ],
    "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed": [
        "urllib.request.AbstractBasicAuthHandler._parse_realm",
        "<builtin>.ValueError",
        "urllib.request.AbstractBasicAuthHandler.retry_http_basic_auth"
    ],
    "urllib.request.AbstractBasicAuthHandler.retry_http_basic_auth": [
        "base64.b64encode",
        "urllib.request.HTTPPasswordMgr.find_user_password"
    ],
    "urllib.request.AbstractBasicAuthHandler.http_request": [
        "base64.standard_b64encode",
        "<builtin>.hasattr",
        "urllib.request.HTTPPasswordMgr.find_user_password"
    ],
    "urllib.request.AbstractBasicAuthHandler.http_response": [
        "<builtin>.hasattr"
    ],
    "urllib.request.HTTPBasicAuthHandler": [],
    "urllib.request.HTTPBasicAuthHandler.http_error_401": [
        "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"
    ],
    "urllib.request.ProxyBasicAuthHandler": [],
    "urllib.request.ProxyBasicAuthHandler.http_error_407": [
        "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"
    ],
    "urllib.request.AbstractDigestAuthHandler": [],
    "urllib.request.AbstractDigestAuthHandler.__init__": [
        "urllib.request.HTTPPasswordMgr.__init__"
    ],
    "urllib.request.AbstractDigestAuthHandler.reset_retry_count": [],
    "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed": [
        "urllib.error.HTTPError.__init__",
        "<builtin>.ValueError",
        "urllib.request.AbstractDigestAuthHandler.retry_http_digest_auth"
    ],
    "urllib.request.AbstractDigestAuthHandler.retry_http_digest_auth": [
        "<builtin>.filter",
        "urllib.request.AbstractDigestAuthHandler.get_authorization",
        "urllib.request.parse_http_list",
        "urllib.request.parse_keqv_list"
    ],
    "urllib.request.parse_http_list": [],
    "urllib.request.parse_keqv_list": [],
    "urllib.request.AbstractDigestAuthHandler.get_authorization": [
        "urllib.request.AbstractDigestAuthHandler.get_cnonce",
        "urllib.error.URLError.__init__",
        "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls",
        "urllib.request.AbstractDigestAuthHandler.get_entity_digest",
        "urllib.request.HTTPPasswordMgr.find_user_password"
    ],
    "urllib.request.AbstractDigestAuthHandler.get_cnonce": [
        "time.ctime"
    ],
    "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls": [
        "<builtin>.ValueError"
    ],
    "urllib.request.AbstractDigestAuthHandler.get_entity_digest": [],
    "urllib.error.URLError.__init__": [],
    "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda1>": [],
    "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda2>": [],
    "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda3>": [
        "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda2>",
        "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda1>"
    ],
    "urllib.request.HTTPDigestAuthHandler": [],
    "urllib.request.HTTPDigestAuthHandler.http_error_401": [
        "urllib.parse.urlparse",
        "urllib.request.AbstractDigestAuthHandler.reset_retry_count",
        "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"
    ],
    "urllib.request.ProxyDigestAuthHandler": [],
    "urllib.request.ProxyDigestAuthHandler.http_error_407": [
        "urllib.request.AbstractDigestAuthHandler.reset_retry_count",
        "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"
    ],
    "urllib.request.AbstractHTTPHandler": [],
    "urllib.request.AbstractHTTPHandler.__init__": [],
    "urllib.request.AbstractHTTPHandler.set_http_debuglevel": [],
    "urllib.request.AbstractHTTPHandler._get_content_length": [],
    "urllib.request.AbstractHTTPHandler.do_request_": [
        "urllib.request.AbstractHTTPHandler._get_content_length",
        "urllib.parse._splittype",
        "urllib.error.URLError.__init__",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<builtin>.isinstance",
        "urllib.parse._splithost"
    ],
    "urllib.request.AbstractHTTPHandler.do_open": [
        "<builtin>.dict",
        "urllib.error.URLError.__init__"
    ],
    "urllib.request.HTTPHandler": [],
    "urllib.request.HTTPHandler.http_open": [
        "urllib.request.AbstractHTTPHandler.do_open"
    ],
    "urllib.request.HTTPSHandler": [],
    "urllib.request.HTTPSHandler.https_open": [
        "urllib.request.AbstractHTTPHandler.do_open"
    ],
    "urllib.request.HTTPCookieProcessor": [],
    "urllib.request.HTTPCookieProcessor.http_request": [],
    "urllib.request.HTTPCookieProcessor.http_response": [],
    "urllib.request.UnknownHandler": [],
    "urllib.request.UnknownHandler.unknown_open": [
        "urllib.error.URLError.__init__"
    ],
    "urllib.request.FileHandler": [],
    "urllib.request.FileHandler.file_open": [
        "urllib.request.FileHandler.open_local_file",
        "urllib.request.FileHandler.get_names",
        "urllib.error.URLError.__init__"
    ],
    "urllib.request.FileHandler.get_names": [
        "<builtin>.tuple"
    ],
    "mimetypes.guess_type": [
        "mimetypes.init"
    ],
    "urllib.request._safe_gethostbyname": [],
    "urllib.response.addinfourl.__init__": [
        "<builtin>.super"
    ],
    "urllib.request.FTPHandler": [],
    "urllib.request.FTPHandler.connect_ftp": [
        "urllib.request.ftpwrapper.__init__"
    ],
    "urllib.request.ftpwrapper.__init__": [
        "urllib.request.ftpwrapper.close",
        "urllib.request.ftpwrapper.init"
    ],
    "urllib.request.CacheFTPHandler": [],
    "urllib.request.CacheFTPHandler.__init__": [],
    "urllib.request.CacheFTPHandler.setTimeout": [],
    "urllib.request.CacheFTPHandler.setMaxConns": [],
    "urllib.request.CacheFTPHandler.connect_ftp": [
        "urllib.request.CacheFTPHandler.check_cache",
        "urllib.request.ftpwrapper.__init__",
        "time.time"
    ],
    "urllib.request.CacheFTPHandler.check_cache": [
        "<builtin>.min",
        "<builtin>.len",
        "<builtin>.list",
        "time.time"
    ],
    "urllib.request.CacheFTPHandler.clear_cache": [],
    "urllib.request.DataHandler": [],
    "urllib.request.DataHandler.data_open": [
        "io.BytesIO",
        "urllib.response.addinfourl.__init__",
        "base64.decodebytes",
        "email.message_from_string",
        "<builtin>.len",
        "urllib.parse.unquote_to_bytes"
    ],
    "urllib.request.url2pathname": [
        "urllib.parse.unquote"
    ],
    "urllib.request.pathname2url": [
        "urllib.parse.quote"
    ],
    "urllib.request.URLopener": [],
    "urllib.request.URLopener.__init__": [
        "warnings.warn",
        "<builtin>.hasattr",
        "urllib.request.getproxies_environment"
    ],
    "urllib.request.URLopener.__del__": [
        "urllib.request.URLopener.close"
    ],
    "urllib.request.URLopener.close": [
        "urllib.request.URLopener.cleanup"
    ],
    "urllib.request.URLopener.cleanup": [],
    "urllib.request.URLopener.addheader": [],
    "urllib.request.URLopener.open": [
        "urllib.parse.unwrap",
        "urllib.parse._to_bytes",
        "sys.exc_info",
        "urllib.request.URLopener.open_unknown_proxy",
        "urllib.parse._splittype",
        "urllib.response.addinfourl.__init__",
        "<builtin>.OSError",
        "urllib.request.URLopener.open",
        "<builtin>.hasattr",
        "urllib.request.URLopener.open_unknown",
        "<builtin>.getattr",
        "urllib.parse.quote",
        "urllib.parse._splithost"
    ],
    "urllib.request.URLopener.open_unknown_proxy": [
        "<builtin>.OSError",
        "urllib.parse._splittype"
    ],
    "urllib.request.URLopener.open_unknown": [
        "<builtin>.OSError",
        "urllib.parse._splittype"
    ],
    "urllib.request.URLopener.retrieve": [
        "urllib.parse.unwrap",
        "ntpath.splitext",
        "urllib.response.addinfo.info",
        "urllib.parse._to_bytes",
        "urllib.request.URLopener.open_local_file",
        "os.fdopen",
        "urllib.parse._splittype",
        "urllib.error.ContentTooShortError.__init__",
        "tempfile.mkstemp",
        "urllib.parse._splitquery",
        "urllib.request.URLopener.open",
        "urllib.parse._splitattr",
        "<builtin>.len",
        "<builtin>.int",
        "tempfile._TemporaryFileWrapper.close",
        "posixpath.splitext",
        "urllib.parse._splithost",
        "nturl2path.url2pathname"
    ],
    "urllib.response.addinfo.info": [],
    "urllib.request.URLopener._open_generic_http": [
        "urllib.request.proxy_bypass_environment",
        "urllib.parse.unquote",
        "base64.b64encode",
        "urllib.parse._splittype",
        "urllib.response.addinfourl.__init__",
        "<builtin>.OSError",
        "urllib.parse._splituser",
        "urllib.error.URLError.__init__",
        "urllib.request.URLopener._https_connection",
        "<builtin>.isinstance",
        "urllib.request.URLopener.http_error",
        "urllib.parse._splithost"
    ],
    "urllib.request.URLopener._https_connection": [],
    "urllib.request.URLopener.http_error": [
        "<builtin>.getattr",
        "urllib.request.URLopener.http_error_default",
        "<builtin>.hasattr"
    ],
    "urllib.request.URLopener.open_http": [
        "urllib.request.URLopener._open_generic_http"
    ],
    "urllib.request.URLopener.http_error_default": [
        "urllib.error.HTTPError.__init__"
    ],
    "urllib.request.URLopener.open_https": [
        "urllib.request.URLopener._open_generic_http"
    ],
    "urllib.request.URLopener.open_file": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "urllib.error.URLError.__init__",
        "urllib.request.URLopener.open_local_file"
    ],
    "urllib.request.localhost": [],
    "urllib.request.thishost": [
        "<builtin>.tuple"
    ],
    "urllib.request.URLopener.open_data": [
        "urllib.parse.unquote",
        "time.time",
        "urllib.response.addinfourl.__init__",
        "time.strftime",
        "base64.decodebytes",
        "urllib.error.URLError.__init__",
        "<builtin>.OSError",
        "email.message_from_string",
        "<builtin>.len",
        "time.gmtime",
        "<builtin>.isinstance",
        "io.StringIO"
    ],
    "urllib.request.FancyURLopener": [],
    "urllib.request.FancyURLopener.__init__": [
        "urllib.request.URLopener.__init__"
    ],
    "urllib.request.FancyURLopener.http_error_default": [
        "urllib.response.addinfourl.__init__"
    ],
    "urllib.request.FancyURLopener.http_error_302": [
        "urllib.request.FancyURLopener.redirect_internal",
        "urllib.request.FancyURLopener.http_error_default",
        "<builtin>.hasattr"
    ],
    "urllib.request.FancyURLopener.redirect_internal": [
        "urllib.error.HTTPError.__init__",
        "urllib.request.URLopener.open",
        "urllib.parse.urlparse",
        "urllib.parse.urljoin"
    ],
    "urllib.request.FancyURLopener.http_error_301": [
        "urllib.request.FancyURLopener.http_error_302"
    ],
    "urllib.request.FancyURLopener.http_error_303": [
        "urllib.request.FancyURLopener.http_error_302"
    ],
    "urllib.request.FancyURLopener.http_error_307": [
        "urllib.request.FancyURLopener.http_error_302",
        "urllib.request.FancyURLopener.http_error_default"
    ],
    "urllib.request.FancyURLopener.http_error_401": [
        "urllib.request.URLopener.http_error_default",
        "re.match",
        "<builtin>.getattr"
    ],
    "urllib.request.FancyURLopener.http_error_407": [
        "urllib.request.URLopener.http_error_default",
        "re.match",
        "<builtin>.getattr"
    ],
    "urllib.request.FancyURLopener.retry_proxy_http_basic_auth": [
        "urllib.request.FancyURLopener.get_user_passwd",
        "urllib.parse._splittype",
        "urllib.request.URLopener.open",
        "urllib.parse.quote",
        "urllib.parse._splithost"
    ],
    "urllib.request.FancyURLopener.get_user_passwd": [
        "urllib.request.FancyURLopener.prompt_user_passwd"
    ],
    "urllib.request.FancyURLopener.retry_proxy_https_basic_auth": [
        "urllib.request.FancyURLopener.get_user_passwd",
        "urllib.parse._splittype",
        "urllib.request.URLopener.open",
        "urllib.parse.quote",
        "urllib.parse._splithost"
    ],
    "urllib.request.FancyURLopener.retry_http_basic_auth": [
        "urllib.request.FancyURLopener.get_user_passwd",
        "urllib.parse.quote",
        "urllib.parse._splithost",
        "urllib.request.URLopener.open"
    ],
    "urllib.request.FancyURLopener.retry_https_basic_auth": [
        "urllib.request.FancyURLopener.get_user_passwd",
        "urllib.parse.quote",
        "urllib.parse._splithost",
        "urllib.request.URLopener.open"
    ],
    "<builtin>.input": [],
    "urllib.request.noheaders": [
        "email.message_from_string"
    ],
    "urllib.request.ftpwrapper": [],
    "urllib.request.ftpwrapper.close": [
        "urllib.request.ftpwrapper.real_close"
    ],
    "ftplib.FTP.__init__": [
        "ftplib.FTP.connect",
        "ftplib.FTP.login"
    ],
    "ftplib.FTP.connect": [
        "ftplib.FTP.getresp",
        "sys.audit"
    ],
    "ftplib.FTP.login": [
        "ftplib.FTP.sendcmd"
    ],
    "ftplib.FTP.cwd": [
        "ftplib.FTP.voidcmd"
    ],
    "urllib.request.ftpwrapper.endtransfer": [],
    "ftplib.FTP.voidcmd": [
        "ftplib.FTP.putcmd",
        "ftplib.FTP.voidresp"
    ],
    "ftplib.FTP.ntransfercmd": [
        "ftplib.FTP.makepasv",
        "ftplib.FTP.sendcmd",
        "ftplib.FTP.makeport",
        "ftplib.FTP.getresp",
        "ftplib.parse150"
    ],
    "ftplib.FTP.pwd": [
        "ftplib.FTP.voidcmd",
        "ftplib.parse257"
    ],
    "urllib.response.addclosehook.__init__": [
        "<builtin>.super"
    ],
    "urllib.request.ftpwrapper.real_close": [
        "ftplib.FTP.close",
        "urllib.request.ftpwrapper.endtransfer",
        "urllib.request.ftperrors"
    ],
    "urllib.request.ftpwrapper.file_close": [
        "urllib.request.ftpwrapper.real_close",
        "urllib.request.ftpwrapper.endtransfer"
    ],
    "ftplib.FTP.close": [],
    "urllib.request._proxy_bypass_macosx_sysconf.ip2num": [
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.list"
    ],
    "urllib.request.proxy_bypass_macosx_sysconf": [
        "urllib.request._proxy_bypass_macosx_sysconf"
    ],
    "urllib.request.getproxies_macosx_sysconf": [],
    "urllib.request.proxy_bypass": [
        "urllib.request.proxy_bypass_environment",
        "urllib.request.proxy_bypass_registry",
        "urllib.request.proxy_bypass_macosx_sysconf",
        "urllib.request.getproxies_environment"
    ],
    "urllib.request.getproxies": [
        "urllib.request.getproxies_macosx_sysconf",
        "urllib.request.getproxies_registry",
        "urllib.request.getproxies_environment"
    ],
    "urllib.request.getproxies_registry": [
        "winreg.QueryValueEx",
        "<builtin>.str",
        "re.match",
        "winreg.OpenKey"
    ],
    "winreg.OpenKey": [],
    "winreg.QueryValueEx": [],
    "urllib.request.proxy_bypass_registry": [
        "re.match",
        "winreg.OpenKey",
        "winreg.QueryValueEx",
        "<builtin>.str",
        "urllib.parse._splitport"
    ],
    "urllib.error.URLError": [],
    "urllib.error.URLError.__str__": [],
    "urllib.error.HTTPError": [],
    "urllib.error.HTTPError.__str__": [],
    "urllib.error.HTTPError.__repr__": [],
    "urllib.error.HTTPError.reason": [],
    "urllib.error.HTTPError.headers": [],
    "urllib.error.ContentTooShortError": [],
    "urllib.response.addbase": [],
    "urllib.response.addbase.__init__": [
        "<builtin>.super"
    ],
    "urllib.response.addbase.__repr__": [
        "<builtin>.id"
    ],
    "urllib.response.addbase.__enter__": [
        "<builtin>.ValueError"
    ],
    "urllib.response.addbase.__exit__": [
        "tempfile._TemporaryFileWrapper.close"
    ],
    "urllib.response.addclosehook": [],
    "urllib.response.addclosehook.close": [
        "urllib.request.ftpwrapper.file_close",
        "<builtin>.super"
    ],
    "urllib.response.addinfo": [],
    "urllib.response.addinfo.__init__": [
        "<builtin>.super"
    ],
    "urllib.response.addinfourl": [],
    "urllib.response.addinfourl.getcode": [],
    "urllib.response.addinfourl.geturl": [],
    "http.cookiejar._timegm": [
        "calendar.timegm"
    ],
    "http.cookiejar.time2isoz": [],
    "http.cookiejar.time2netscape": [],
    "http.cookiejar.offset_from_tz_string": [
        "<builtin>.int"
    ],
    "http.cookiejar._str2time": [
        "time.localtime",
        "time.time",
        "<builtin>.int",
        "http.cookiejar._timegm",
        "<builtin>.abs",
        "http.cookiejar.offset_from_tz_string"
    ],
    "http.cookiejar.http2time": [
        "http.cookiejar._timegm",
        "<builtin>.int",
        "<builtin>.float",
        "http.cookiejar._str2time"
    ],
    "http.cookiejar.iso2time": [
        "http.cookiejar._str2time"
    ],
    "http.cookiejar.unmatched": [],
    "http.cookiejar.split_header_words": [
        "<builtin>.isinstance",
        "re.subn",
        "http.cookiejar.unmatched"
    ],
    "http.cookiejar.join_header_words": [
        "re.search"
    ],
    "http.cookiejar.strip_quotes": [],
    "http.cookiejar.parse_ns_headers": [
        "http.cookiejar.strip_quotes",
        "<builtin>.enumerate",
        "http.cookiejar.http2time"
    ],
    "http.cookiejar.is_HDN": [],
    "http.cookiejar.domain_match": [
        "http.cookiejar.is_HDN"
    ],
    "http.cookiejar.liberal_is_HDN": [],
    "http.cookiejar.user_domain_match": [
        "http.cookiejar.liberal_is_HDN"
    ],
    "http.cookiejar.request_host": [],
    "http.cookiejar.eff_request_host": [
        "http.cookiejar.request_host"
    ],
    "http.cookiejar.request_path": [
        "http.cookiejar.escape_path"
    ],
    "http.cookiejar.escape_path": [],
    "http.cookiejar.request_port": [
        "<builtin>.int",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.uppercase_escaped_char": [],
    "http.cookiejar.reach": [
        "http.cookiejar.is_HDN"
    ],
    "http.cookiejar.is_third_party": [
        "http.cookiejar.reach",
        "http.cookiejar.request_host",
        "http.cookiejar.domain_match"
    ],
    "http.cookiejar.Cookie": [],
    "http.cookiejar.Cookie.__init__": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.float"
    ],
    "http.cookiejar.Cookie.has_nonstandard_attr": [],
    "http.cookiejar.Cookie.get_nonstandard_attr": [],
    "http.cookiejar.Cookie.set_nonstandard_attr": [],
    "http.cookiejar.Cookie.is_expired": [
        "time.time"
    ],
    "http.cookiejar.Cookie.__str__": [],
    "http.cookiejar.Cookie.__repr__": [
        "<builtin>.getattr",
        "<builtin>.repr"
    ],
    "http.cookiejar.CookiePolicy": [],
    "http.cookiejar.CookiePolicy.set_ok": [
        "<builtin>.NotImplementedError"
    ],
    "http.cookiejar.CookiePolicy.return_ok": [
        "<builtin>.NotImplementedError"
    ],
    "http.cookiejar.CookiePolicy.domain_return_ok": [],
    "http.cookiejar.CookiePolicy.path_return_ok": [],
    "http.cookiejar.DefaultCookiePolicy": [],
    "http.cookiejar.DefaultCookiePolicy.__init__": [
        "<builtin>.tuple"
    ],
    "http.cookiejar.DefaultCookiePolicy.blocked_domains": [],
    "http.cookiejar.DefaultCookiePolicy.set_blocked_domains": [
        "<builtin>.tuple"
    ],
    "http.cookiejar.DefaultCookiePolicy.is_blocked": [
        "http.cookiejar.user_domain_match"
    ],
    "http.cookiejar.DefaultCookiePolicy.allowed_domains": [],
    "http.cookiejar.DefaultCookiePolicy.set_allowed_domains": [
        "<builtin>.tuple"
    ],
    "http.cookiejar.DefaultCookiePolicy.is_not_allowed": [
        "http.cookiejar.user_domain_match"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok": [
        "<builtin>.getattr",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_version": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_verifiability": [
        "http.cookiejar._debug",
        "http.cookiejar.is_third_party"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_name": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_path": [
        "http.cookiejar.DefaultCookiePolicy.path_return_ok",
        "http.cookiejar.request_path",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.path_return_ok": [
        "<builtin>.len",
        "http.cookiejar.request_path",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_domain": [
        "http.cookiejar.DefaultCookiePolicy.is_not_allowed",
        "http.cookiejar.eff_request_host",
        "http.cookiejar._debug",
        "<builtin>.len",
        "http.cookiejar.domain_match",
        "http.cookiejar.DefaultCookiePolicy.is_blocked"
    ],
    "http.cookiejar.DefaultCookiePolicy.set_ok_port": [
        "<builtin>.int",
        "http.cookiejar.request_port",
        "http.cookiejar._debug",
        "<builtin>.str"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok": [
        "<builtin>.getattr",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_version": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_verifiability": [
        "http.cookiejar._debug",
        "http.cookiejar.is_third_party"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_secure": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_expires": [
        "http.cookiejar._debug"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_port": [
        "http.cookiejar.request_port"
    ],
    "http.cookiejar.DefaultCookiePolicy.return_ok_domain": [
        "http.cookiejar.eff_request_host",
        "http.cookiejar._debug",
        "http.cookiejar.domain_match"
    ],
    "http.cookiejar.DefaultCookiePolicy.domain_return_ok": [
        "http.cookiejar._debug",
        "http.cookiejar.eff_request_host",
        "http.cookiejar.DefaultCookiePolicy.is_blocked",
        "http.cookiejar.DefaultCookiePolicy.is_not_allowed"
    ],
    "http.cookiejar.vals_sorted_by_key": [
        "<builtin>.sorted",
        "<builtin>.map"
    ],
    "http.cookiejar.deepvalues": [
        "http.cookiejar.deepvalues",
        "http.cookiejar.vals_sorted_by_key"
    ],
    "http.cookiejar.Absent": [],
    "http.cookiejar.CookieJar": [
        "re.compile"
    ],
    "http.cookiejar.CookieJar.__init__": [
        "http.cookiejar.DefaultCookiePolicy.__init__",
        "threading.RLock"
    ],
    "http.cookiejar.CookieJar.set_policy": [],
    "http.cookiejar.CookieJar._cookies_for_domain": [
        "http.cookiejar.DefaultCookiePolicy.path_return_ok",
        "http.cookiejar.DefaultCookiePolicy.return_ok",
        "http.cookiejar.DefaultCookiePolicy.domain_return_ok",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.CookieJar._cookies_for_request": [
        "http.cookiejar.CookieJar._cookies_for_domain"
    ],
    "http.cookiejar.CookieJar._cookie_attrs": [],
    "http.cookiejar.CookieJar._cookie_attrs.<lambda1>": [
        "<builtin>.len"
    ],
    "http.cookiejar.CookieJar.add_cookie_header": [
        "http.cookiejar.CookieJar._cookies_for_request",
        "http.cookiejar.CookieJar.clear_expired_cookies",
        "http.cookiejar._debug",
        "time.time",
        "http.cookiejar.CookieJar._cookie_attrs",
        "<builtin>.int"
    ],
    "http.cookiejar.CookieJar.clear_expired_cookies": [
        "http.cookiejar.CookieJar.clear",
        "http.cookiejar.CookieJar.__iter__",
        "time.time"
    ],
    "http.cookiejar.CookieJar._normalized_cookie_tuples": [
        "<builtin>.int",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.CookieJar._cookie_from_cookie_tuple": [
        "http.cookiejar.escape_path",
        "http.cookiejar.request_port",
        "http.cookiejar.eff_request_host",
        "http.cookiejar._debug",
        "http.cookiejar.CookieJar.clear",
        "http.cookiejar.Cookie.__init__",
        "re.sub",
        "http.cookiejar.request_path",
        "<builtin>.len",
        "<builtin>.bool",
        "<builtin>.int"
    ],
    "http.cookiejar.CookieJar.clear": [
        "<builtin>.ValueError"
    ],
    "http.cookiejar.CookieJar._cookies_from_attrs_set": [
        "http.cookiejar.CookieJar._cookie_from_cookie_tuple",
        "http.cookiejar.CookieJar._normalized_cookie_tuples"
    ],
    "http.cookiejar.CookieJar._process_rfc2109_cookies": [
        "<builtin>.getattr"
    ],
    "http.cookiejar.CookieJar.make_cookies": [
        "http.cookiejar.CookieJar._process_rfc2109_cookies",
        "time.time",
        "http.cookiejar.split_header_words",
        "http.cookiejar.CookieJar._cookies_from_attrs_set",
        "http.cookiejar._warn_unhandled_exception",
        "<builtin>.filter",
        "<builtin>.int",
        "http.cookiejar.parse_ns_headers"
    ],
    "http.cookiejar.CookieJar.make_cookies.no_matching_rfc2965": [],
    "http.cookiejar.CookieJar.set_cookie_if_ok": [
        "http.cookiejar.DefaultCookiePolicy.set_ok",
        "<builtin>.int",
        "http.cookiejar.CookieJar.set_cookie",
        "time.time"
    ],
    "http.cookiejar.CookieJar.set_cookie": [],
    "http.cookiejar.CookieJar.extract_cookies": [
        "http.cookiejar.CookieJar.make_cookies",
        "http.cookiejar.DefaultCookiePolicy.set_ok",
        "http.cookiejar.CookieJar.set_cookie",
        "http.cookiejar._debug"
    ],
    "http.cookiejar.CookieJar.clear_session_cookies": [
        "http.cookiejar.CookieJar.__iter__",
        "http.cookiejar.CookieJar.clear"
    ],
    "http.cookiejar.CookieJar.__iter__": [
        "http.cookiejar.deepvalues"
    ],
    "http.cookiejar.CookieJar.__len__": [
        "http.cookiejar.CookieJar.__iter__"
    ],
    "http.cookiejar.CookieJar.__repr__": [
        "<builtin>.repr",
        "http.cookiejar.CookieJar.__iter__"
    ],
    "http.cookiejar.CookieJar.__str__": [
        "<builtin>.str",
        "http.cookiejar.CookieJar.__iter__"
    ],
    "http.cookiejar.LoadError": [],
    "http.cookiejar.FileCookieJar": [],
    "http.cookiejar.FileCookieJar.__init__": [
        "http.cookiejar.CookieJar.__init__",
        "<builtin>.bool"
    ],
    "http.cookiejar.FileCookieJar.save": [
        "<builtin>.NotImplementedError"
    ],
    "http.cookiejar.FileCookieJar.load": [
        "<builtin>.open",
        "<builtin>.ValueError"
    ],
    "http.cookiejar.FileCookieJar.revert": [
        "http.cookiejar.FileCookieJar.load",
        "<builtin>.ValueError"
    ],
    "http.cookiejar.lwp_cookie_str": [
        "http.cookiejar.join_header_words",
        "<builtin>.float",
        "<builtin>.sorted",
        "http.cookiejar.time2isoz",
        "<builtin>.str"
    ],
    "http.cookiejar.LWPCookieJar": [],
    "http.cookiejar.LWPCookieJar.as_lwp_str": [
        "http.cookiejar.lwp_cookie_str",
        "time.time"
    ],
    "http.cookiejar.LWPCookieJar.save": [
        "<builtin>.open",
        "<builtin>.ValueError",
        "http.cookiejar.LWPCookieJar.as_lwp_str"
    ],
    "http.cookiejar.LWPCookieJar._really_load": [
        "http.cookiejar.CookieJar.set_cookie",
        "time.time",
        "http.cookiejar.split_header_words",
        "http.cookiejar.Cookie.__init__",
        "http.cookiejar._warn_unhandled_exception",
        "<builtin>.len",
        "http.cookiejar.iso2time",
        "http.cookiejar.Cookie.is_expired"
    ],
    "http.cookiejar.MozillaCookieJar": [
        "re.compile"
    ],
    "http.cookiejar.MozillaCookieJar._really_load": [
        "http.cookiejar.CookieJar.set_cookie",
        "time.time",
        "http.cookiejar.Cookie.__init__",
        "http.cookiejar._warn_unhandled_exception",
        "http.cookiejar.Cookie.is_expired"
    ],
    "http.cookiejar.MozillaCookieJar.save": [
        "<builtin>.open",
        "<builtin>.ValueError",
        "<builtin>.str",
        "time.time"
    ],
    "ftplib.Error": [],
    "ftplib.error_reply": [],
    "ftplib.error_temp": [],
    "ftplib.error_perm": [],
    "ftplib.error_proto": [],
    "ftplib.FTP": [],
    "ftplib.FTP.__enter__": [],
    "ftplib.FTP.__exit__": [
        "ftplib.FTP.quit",
        "ftplib.FTP.close"
    ],
    "ftplib.FTP.quit": [
        "ftplib.FTP.close",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.getresp": [
        "<builtin>.print",
        "ftplib.FTP.getmultiline",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.getwelcome": [
        "<builtin>.print",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.sanitize": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "ftplib.FTP.set_debuglevel": [],
    "ftplib.FTP.set_pasv": [],
    "ftplib.FTP.putline": [
        "<builtin>.print",
        "<builtin>.ValueError",
        "sys.audit",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.putcmd": [
        "ftplib.FTP.putline",
        "<builtin>.print",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.getline": [
        "<builtin>.print",
        "ftplib.FTP.sanitize",
        "<builtin>.len"
    ],
    "ftplib.FTP.getmultiline": [
        "ftplib.FTP.getline"
    ],
    "ftplib.FTP.voidresp": [
        "ftplib.FTP.getresp"
    ],
    "ftplib.FTP.abort": [
        "<builtin>.print",
        "ftplib.FTP.getmultiline",
        "ftplib.FTP.sanitize"
    ],
    "ftplib.FTP.sendcmd": [
        "ftplib.FTP.putcmd",
        "ftplib.FTP.getresp"
    ],
    "ftplib.FTP.sendport": [
        "<builtin>.repr",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.sendeprt": [
        "<builtin>.repr",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.makeport": [
        "ftplib.FTP.sendport",
        "ftplib.FTP.sendeprt"
    ],
    "ftplib.FTP.makepasv": [
        "ftplib.parse227",
        "ftplib.parse229",
        "ftplib.FTP.sendcmd"
    ],
    "ftplib.parse229": [
        "<builtin>.int",
        "<builtin>.len"
    ],
    "ftplib.FTP.transfercmd": [
        "ftplib.FTP.ntransfercmd"
    ],
    "ftplib.FTP.retrbinary": [
        "ftplib.FTP.voidcmd",
        "sys.stdout.write",
        "ftplib.FTP.voidresp",
        "<builtin>.isinstance",
        "ftplib.FTP.transfercmd"
    ],
    "ftplib.FTP.retrlines": [
        "ftplib.FTP.sendcmd",
        "<builtin>.print",
        "<builtin>.repr",
        "<builtin>.len",
        "ftplib.FTP.voidresp",
        "ftplib.print_line",
        "<builtin>.isinstance",
        "ftplib.FTP.transfercmd"
    ],
    "ftplib.print_line": [
        "<builtin>.print"
    ],
    "ftplib.FTP.storbinary": [
        "<builtin>.isinstance",
        "ftplib.FTP.transfercmd",
        "ftplib.FTP.voidcmd",
        "ftplib.FTP.voidresp"
    ],
    "ftplib.FTP.storlines": [
        "ftplib.FTP.voidcmd",
        "<builtin>.len",
        "ftplib.FTP.voidresp",
        "<builtin>.isinstance",
        "ftplib.FTP.transfercmd"
    ],
    "ftplib.FTP.acct": [
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP.nlst": [
        "ftplib.FTP.retrlines"
    ],
    "ftplib.FTP.dir": [
        "<builtin>.type",
        "ftplib.FTP.retrlines"
    ],
    "ftplib.FTP.mlsd": [
        "ftplib.FTP.retrlines",
        "ftplib.FTP.sendcmd"
    ],
    "ftplib.FTP.rename": [
        "ftplib.FTP.voidcmd",
        "ftplib.FTP.sendcmd"
    ],
    "ftplib.FTP.delete": [
        "ftplib.FTP.sendcmd"
    ],
    "ftplib.FTP.size": [
        "<builtin>.int",
        "ftplib.FTP.sendcmd"
    ],
    "ftplib.FTP.mkd": [
        "ftplib.FTP.voidcmd",
        "ftplib.parse257"
    ],
    "ftplib.parse257": [
        "<builtin>.len"
    ],
    "ftplib.FTP.rmd": [
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP_TLS": [],
    "ftplib.FTP_TLS.login": [
        "<builtin>.isinstance",
        "ftplib.FTP_TLS.auth",
        "ftplib.FTP.login"
    ],
    "ftplib.FTP_TLS.auth": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP_TLS.ccc": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP_TLS.prot_p": [
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP_TLS.prot_c": [
        "ftplib.FTP.voidcmd"
    ],
    "ftplib.FTP_TLS.ntransfercmd": [
        "ftplib.FTP.ntransfercmd"
    ],
    "ftplib.FTP_TLS.abort": [
        "ftplib.FTP.getmultiline"
    ],
    "ftplib.ftpcp": [
        "ftplib.parse227"
    ],
    "netrc.NetrcParseError": [],
    "netrc.NetrcParseError.__init__": [],
    "netrc.NetrcParseError.__str__": [],
    "netrc.netrc": [],
    "netrc.netrc.__init__": [
        "posixpath.join",
        "netrc.netrc._parse",
        "posixpath.expanduser",
        "ntpath.join",
        "<builtin>.open",
        "ntpath.expanduser"
    ],
    "netrc.netrc._parse": [
        "pwd.getpwuid",
        "<builtin>.repr",
        "netrc.NetrcParseError.__init__",
        "<builtin>.len"
    ],
    "netrc.netrc.authenticators": [],
    "netrc.netrc.__repr__": [],
    "shlex.shlex": [],
    "shlex.shlex.__init__": [
        "<builtin>.isinstance",
        "_io.StringIO",
        "_collections.deque"
    ],
    "shlex.shlex.punctuation_chars": [],
    "shlex.shlex.push_token": [
        "<builtin>.print",
        "<builtin>.repr"
    ],
    "shlex.shlex.push_source": [
        "<builtin>.isinstance",
        "<builtin>.print",
        "_io.StringIO"
    ],
    "shlex.shlex.pop_source": [
        "sys.stdin.close",
        "<builtin>.print"
    ],
    "shlex.shlex.get_token": [
        "shlex.shlex.read_token",
        "<builtin>.print",
        "<builtin>.repr",
        "shlex.shlex.sourcehook",
        "shlex.shlex.get_token",
        "shlex.shlex.pop_source",
        "shlex.shlex.push_source"
    ],
    "shlex.shlex.read_token": [
        "<builtin>.ValueError",
        "sys.stdin.read",
        "<builtin>.repr",
        "<builtin>.print",
        "sys.stdin.readline"
    ],
    "shlex.shlex.sourcehook": [
        "posixpath.join",
        "<builtin>.open",
        "posixpath.dirname",
        "ntpath.dirname",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.isabs",
        "posixpath.isabs"
    ],
    "shlex.shlex.error_leader": [],
    "shlex.shlex.__iter__": [],
    "shlex.shlex.__next__": [
        "shlex.shlex.get_token"
    ],
    "shlex.split": [
        "<builtin>.list",
        "shlex.shlex.__init__"
    ],
    "shlex.join": [
        "shlex.quote"
    ],
    "shlex.quote": [],
    "shlex._print_tokens": [
        "shlex.shlex.get_token",
        "<builtin>.print",
        "<builtin>.repr"
    ],
    "mimetypes.MimeTypes": [],
    "mimetypes.MimeTypes.__init__": [
        "mimetypes.MimeTypes.add_type",
        "mimetypes.MimeTypes.read",
        "mimetypes.init"
    ],
    "mimetypes.init": [
        "mimetypes.MimeTypes.read",
        "posixpath.isfile",
        "<builtin>.list",
        "mimetypes.MimeTypes.__init__",
        "ntpath.isfile",
        "mimetypes.MimeTypes.read_windows_registry"
    ],
    "mimetypes.MimeTypes.add_type": [],
    "mimetypes.MimeTypes.read": [
        "<builtin>.open",
        "mimetypes.MimeTypes.readfp"
    ],
    "mimetypes.MimeTypes.guess_type": [
        "posixpath.splitext"
    ],
    "mimetypes.MimeTypes.guess_all_extensions": [],
    "mimetypes.MimeTypes.guess_extension": [
        "mimetypes.MimeTypes.guess_all_extensions"
    ],
    "mimetypes.MimeTypes.readfp": [
        "mimetypes.MimeTypes.add_type",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "mimetypes.MimeTypes.read_windows_registry": [
        "mimetypes.MimeTypes.read_windows_registry.enum_types",
        "winreg.QueryValueEx",
        "mimetypes.MimeTypes.add_type",
        "winreg.OpenKey"
    ],
    "mimetypes.MimeTypes.read_windows_registry.enum_types": [
        "winreg.EnumKey"
    ],
    "winreg.EnumKey": [],
    "mimetypes.guess_all_extensions": [
        "mimetypes.init"
    ],
    "mimetypes.guess_extension": [
        "mimetypes.init"
    ],
    "mimetypes.add_type": [
        "mimetypes.init"
    ],
    "mimetypes.read_mime_types": [
        "<builtin>.open",
        "mimetypes.MimeTypes.readfp",
        "mimetypes.MimeTypes.__init__"
    ],
    "mimetypes._default_mime_types": [],
    "mimetypes._main.usage": [
        "<builtin>.print",
        "sys.exit"
    ],
    "getpass.GetPassWarning": [],
    "getpass.unix_getpass": [
        "io.TextIOWrapper",
        "getpass._raw_input",
        "sys.stdin.write",
        "io.FileIO",
        "sys.stderr.flush",
        "sys.stdin.flush",
        "contextlib._BaseExitStack.__init__",
        "getpass.fallback_getpass",
        "<builtin>.hasattr",
        "sys.stdin.fileno",
        "sys.stderr.write"
    ],
    "io.FileIO": [],
    "getpass.fallback_getpass": [
        "warnings.warn",
        "getpass._raw_input",
        "<builtin>.print"
    ],
    "getpass._raw_input": [
        "sys.stdin.write",
        "sys.stderr.flush",
        "sys.stdin.flush",
        "<builtin>.str",
        "sys.stdin.readline",
        "sys.stderr.write"
    ],
    "sys.stdin.flush": [],
    "sys.stdin.write": [],
    "getpass.win_getpass": [
        "getpass.fallback_getpass",
        "msvcrt.putwch",
        "msvcrt.getwch"
    ],
    "msvcrt.putwch": [],
    "msvcrt.getwch": [],
    "getpass.getuser": [
        "pwd.getpwuid"
    ],
    "tty.setraw": []
}