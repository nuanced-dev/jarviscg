{
    "bpytop": [
        "bpytop.CpuBox",
        "bpytop.Menu",
        "subprocess",
        "datetime",
        "bpytop.Term",
        "logging.Logger.warning",
        "psutil",
        "random",
        "bpytop.MemBox",
        "logging.handlers.RotatingFileHandler.__init__",
        "logging.Logger.addHandler",
        "threading",
        "typing",
        "ntpath.isdir",
        "<builtin>.str",
        "bpytop.Colors",
        "bpytop.Banner",
        "logging.handlers",
        "time.time",
        "bpytop.Color",
        "argparse",
        "bpytop.NetCollector",
        "select",
        "os",
        "logging",
        "bpytop.Meters",
        "urllib.request",
        "bpytop.Symbol",
        "re",
        "ntpath.expanduser",
        "os.makedirs",
        "posixpath.isdir",
        "<builtin>.SystemExit",
        "logging.Logger.setLevel",
        "argparse.ArgumentParser.__init__",
        "logging.Formatter.__init__",
        "bpytop.TimeIt",
        "bpytop.CpuCollector",
        "fcntl",
        "bpytop.Draw",
        "bpytop.ProcBox",
        "bpytop.ProcCollector",
        "bpytop.Fx",
        "termios",
        "argparse.ArgumentParser.parse_args",
        "<builtin>.print",
        "bpytop.main",
        "math",
        "logging.getLogger",
        "<builtin>.getattr",
        "bpytop.Graph",
        "bpytop.Key",
        "bpytop.MemCollector",
        "shutil",
        "bpytop.Raw",
        "bpytop.Collector",
        "bpytop.Config",
        "bpytop.get_cpu_name",
        "collections",
        "posixpath.dirname",
        "bpytop.Timer",
        "bpytop.Mv",
        "logging.Logger.debug",
        "bpytop.Theme",
        "bpytop.Nonblocking",
        "argparse._ActionsContainer.add_argument",
        "io",
        "ntpath.dirname",
        "bpytop.Init",
        "bpytop.UpdateChecker",
        "bpytop.Meter",
        "psutil.cpu_count",
        "bpytop.Box",
        "string.Template.__init__",
        "posixpath.expanduser",
        "bpytop.Graphs",
        "signal",
        "bpytop.get_cpu_core_mapping",
        "string",
        "tty",
        "bpytop.SubBox",
        "bpytop.Config.__init__",
        "bpytop.NetBox",
        "logging.Logger.info",
        "logging.Logger.exception"
    ],
    "bpytop.CpuBox": [],
    "bpytop.Menu": [
        "bpytop.Mv.down",
        "bpytop.Color.fg",
        "<builtin>.len",
        "<builtin>.range",
        "bpytop.Mv.left",
        "bpytop.Fx.trans"
    ],
    "subprocess": [
        "selectors",
        "io",
        "warnings",
        "<builtin>.hasattr",
        "select",
        "os",
        "contextlib",
        "subprocess.CalledProcessError",
        "subprocess.Popen",
        "<builtin>.getattr",
        "subprocess.STARTUPINFO",
        "signal",
        "subprocess.SubprocessError",
        "threading",
        "_posixsubprocess",
        "subprocess.Handle",
        "subprocess._use_posix_spawn",
        "subprocess.TimeoutExpired",
        "subprocess.CompletedProcess"
    ],
    "datetime": [
        "datetime.datetime",
        "datetime._days_before_year",
        "_datetime",
        "datetime.time",
        "datetime.timedelta",
        "datetime.timezone._create",
        "math",
        "datetime.timezone",
        "datetime.tzinfo",
        "datetime.date"
    ],
    "bpytop.Term": [
        "threading.Event.__init__"
    ],
    "logging.Logger.warning": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "psutil": [
        "functools",
        "subprocess",
        "psutil._pssunos",
        "<builtin>.hasattr",
        "datetime",
        "<builtin>.object",
        "<builtin>.tuple",
        "<builtin>.ImportError",
        "contextlib",
        "os",
        "psutil._pswindows",
        "psutil.Popen",
        "psutil.cpu_times",
        "<builtin>.globals",
        "<builtin>.getattr",
        "psutil._psbsd",
        "signal",
        "psutil.test",
        "psutil.Process",
        "threading",
        "<builtin>.dir",
        "<builtin>.str",
        "<builtin>.set",
        "psutil._pslinux",
        "<builtin>.int",
        "__future__",
        "collections",
        "<builtin>.NotImplementedError",
        "psutil._psaix"
    ],
    "random": [
        "bisect",
        "collections.abc",
        "os",
        "random._test",
        "random.SystemRandom",
        "hashlib",
        "_random",
        "random.Random.__init__",
        "math",
        "_sha512",
        "warnings",
        "<builtin>.hasattr",
        "random.Random"
    ],
    "bpytop.MemBox": [],
    "logging.handlers.RotatingFileHandler.__init__": [
        "logging.handlers.BaseRotatingHandler.__init__"
    ],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "threading": [
        "threading.Barrier",
        "_thread.allocate_lock",
        "threading.BrokenBarrierError",
        "<builtin>.hasattr",
        "threading._DummyThread",
        "threading.Condition",
        "threading.Timer",
        "os",
        "threading.Thread",
        "_weakrefset.WeakSet.__init__",
        "collections.namedtuple",
        "_weakrefset",
        "threading.Event",
        "itertools.count",
        "threading._RLock",
        "threading._MainThread",
        "<builtin>.set",
        "threading.BoundedSemaphore",
        "threading._MainThread.__init__",
        "_threading_local",
        "collections",
        "traceback",
        "threading.Semaphore"
    ],
    "typing": [
        "typing.TypedDict",
        "typing._GenericAlias.__init__",
        "functools",
        "typing._SpecialForm",
        "typing.SupportsFloat",
        "typing.SupportsIndex",
        "typing._GenericAlias",
        "typing.SupportsBytes",
        "typing.NamedTupleMeta",
        "contextlib",
        "typing._alias",
        "typing._TypedDictMeta",
        "types",
        "typing._Immutable",
        "typing.Generic",
        "typing.SupportsRound",
        "typing._Final",
        "typing.TextIO",
        "re",
        "typing.ForwardRef",
        "abc",
        "collections.abc",
        "operator",
        "typing.TypeVar",
        "typing.IO",
        "typing._TypingEllipsis",
        "typing.NamedTuple",
        "typing.Protocol",
        "typing._VariadicGenericAlias",
        "typing.SupportsAbs",
        "typing.SupportsComplex",
        "typing.BinaryIO",
        "typing._TypingEmpty",
        "collections",
        "typing.re",
        "typing.io",
        "typing._SpecialForm.__init__",
        "typing.SupportsInt",
        "typing.TypeVar.__init__",
        "typing._ProtocolMeta"
    ],
    "ntpath.isdir": [],
    "<builtin>.str": [],
    "bpytop.Colors": [
        "bpytop.Color.__init__"
    ],
    "bpytop.Banner": [
        "bpytop.Mv.right",
        "<builtin>.enumerate",
        "bpytop.Color.fg",
        "<builtin>.len"
    ],
    "logging.handlers": [
        "logging.handlers.MemoryHandler",
        "logging.handlers.WatchedFileHandler",
        "logging.handlers.QueueHandler",
        "logging.handlers.TimedRotatingFileHandler",
        "logging.handlers.BaseRotatingHandler",
        "logging.handlers.RotatingFileHandler",
        "queue",
        "os",
        "logging.handlers.SocketHandler",
        "logging",
        "logging.handlers.SMTPHandler",
        "logging.handlers.HTTPHandler",
        "pickle",
        "stat",
        "re",
        "logging.handlers.DatagramHandler",
        "logging.handlers.NTEventLogHandler",
        "struct",
        "logging.handlers.QueueListener",
        "logging.handlers.BufferingHandler",
        "threading",
        "socket",
        "logging.handlers.SysLogHandler",
        "copy"
    ],
    "time.time": [],
    "bpytop.Color": [],
    "argparse": [
        "argparse._StoreTrueAction",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse.Action",
        "argparse.MetavarTypeHelpFormatter",
        "argparse.ArgumentError",
        "argparse._VersionAction",
        "argparse._ArgumentGroup",
        "argparse.RawTextHelpFormatter",
        "os",
        "argparse.ArgumentParser",
        "argparse.ArgumentTypeError",
        "gettext",
        "argparse._AppendAction",
        "argparse._MutuallyExclusiveGroup",
        "re",
        "argparse.FileType",
        "argparse.Namespace",
        "argparse._StoreFalseAction",
        "argparse._AppendConstAction",
        "shutil",
        "argparse._ExtendAction",
        "argparse._ActionsContainer",
        "argparse._CountAction",
        "argparse._AttributeHolder",
        "argparse._StoreConstAction",
        "argparse._HelpAction",
        "argparse.HelpFormatter",
        "argparse._SubParsersAction",
        "argparse.RawDescriptionHelpFormatter",
        "argparse._StoreAction"
    ],
    "bpytop.NetCollector": [
        "time.time"
    ],
    "select": [],
    "os": [
        "collections.abc",
        "os._get_exports_list",
        "<builtin>.ImportError",
        "os._Environ.__init__",
        "posixpath",
        "os._exists",
        "os._add",
        "os.PathLike",
        "ntpath",
        "<builtin>.globals",
        "os._wrap_close",
        "<builtin>.set",
        "os._Environ",
        "stat",
        "os._fscodec",
        "os._createenviron",
        "os._AddedDllDirectory",
        "abc"
    ],
    "logging": [
        "threading.RLock",
        "logging.FileHandler",
        "logging.PercentStyle",
        "logging.Formatter.__init__",
        "time.time",
        "logging.RootLogger",
        "io",
        "warnings",
        "logging.Formatter",
        "weakref.WeakValueDictionary.__init__",
        "logging.NullHandler",
        "<builtin>.hasattr",
        "logging.BufferingFormatter",
        "os",
        "logging.Manager.__init__",
        "atexit.register",
        "logging.Filterer",
        "logging.Manager",
        "logging.RootLogger.__init__",
        "logging._StderrHandler.__init__",
        "re",
        "logging.Logger",
        "collections.abc",
        "string",
        "logging.Filter",
        "threading",
        "ntpath.normcase",
        "logging.Handler",
        "logging.StreamHandler",
        "logging.StrFormatStyle",
        "weakref",
        "logging.StringTemplateStyle",
        "logging.PlaceHolder",
        "traceback",
        "logging.LogRecord",
        "logging._StderrHandler",
        "logging.LoggerAdapter",
        "posixpath.normcase"
    ],
    "bpytop.Meters": [],
    "urllib.request": [
        "urllib.error",
        "urllib.request.DataHandler",
        "urllib.request.AbstractHTTPHandler",
        "io",
        "warnings",
        "urllib.parse",
        "urllib.request.HTTPRedirectHandler",
        "urllib.request.HTTPHandler",
        "urllib.request.Request",
        "<builtin>.hasattr",
        "urllib.request.URLopener",
        "urllib.request.HTTPDefaultErrorHandler",
        "urllib.request.HTTPSHandler",
        "bisect",
        "http.client",
        "os",
        "contextlib",
        "urllib.request.ftpwrapper",
        "urllib.request.AbstractDigestAuthHandler",
        "posixpath",
        "hashlib",
        "urllib.request.ProxyHandler",
        "re.compile",
        "email",
        "re",
        "urllib.request.OpenerDirector",
        "urllib.request.ProxyBasicAuthHandler",
        "string",
        "base64",
        "urllib.request.HTTPCookieProcessor",
        "socket",
        "urllib.request.FTPHandler",
        "nturl2path",
        "tempfile",
        "urllib.response",
        "_scproxy",
        "urllib.request.HTTPBasicAuthHandler",
        "urllib.request.HTTPPasswordMgrWithDefaultRealm",
        "urllib.request.ProxyDigestAuthHandler",
        "urllib.request.HTTPPasswordMgrWithPriorAuth",
        "urllib.request.HTTPDigestAuthHandler",
        "ssl",
        "urllib.request.AbstractBasicAuthHandler",
        "urllib.request.CacheFTPHandler",
        "urllib.request.HTTPErrorProcessor",
        "urllib.request.FileHandler",
        "urllib.request.FancyURLopener",
        "urllib.request.HTTPPasswordMgr",
        "urllib.request.BaseHandler",
        "urllib.request.UnknownHandler"
    ],
    "bpytop.Symbol": [
        "bpytop.Color.fg"
    ],
    "re": [
        "<builtin>.chr",
        "sre_compile",
        "re.Scanner",
        "functools.lru_cache",
        "enum",
        "copyreg.pickle",
        "sre_parse",
        "re.RegexFlag",
        "functools",
        "functools.singledispatch.wrapper",
        "functools.lru_cache.decorating_function",
        "<builtin>.globals",
        "functools.singledispatchmethod.__get__._method",
        "<builtin>.type",
        "sre_compile.compile",
        "functools._lru_cache_wrapper.wrapper",
        "copyreg"
    ],
    "ntpath.expanduser": [
        "ntpath._get_bothseps",
        "ntpath.dirname",
        "<builtin>.len",
        "ntpath.join",
        "<builtin>.isinstance"
    ],
    "os.makedirs": [
        "os.makedirs",
        "ntpath.exists",
        "<builtin>.bytes",
        "posixpath.exists",
        "ntpath.isdir",
        "ntpath.split",
        "posixpath.isdir",
        "<builtin>.isinstance",
        "posixpath.split"
    ],
    "posixpath.isdir": [],
    "<builtin>.SystemExit": [],
    "logging.Logger.setLevel": [
        "logging.Manager._clear_cache",
        "logging._checkLevel"
    ],
    "argparse.ArgumentParser.__init__": [
        "gettext.gettext",
        "argparse._ActionsContainer.add_argument",
        "ntpath.basename",
        "<builtin>.super",
        "posixpath.basename",
        "argparse._ActionsContainer._add_container_actions",
        "argparse._ActionsContainer.register",
        "argparse._ActionsContainer.add_argument_group"
    ],
    "logging.Formatter.__init__": [
        "<builtin>.ValueError"
    ],
    "bpytop.TimeIt": [],
    "bpytop.CpuCollector": [
        "<builtin>.range"
    ],
    "fcntl": [],
    "bpytop.Draw": [
        "threading.Event.__init__",
        "threading.Event.set"
    ],
    "bpytop.ProcBox": [],
    "bpytop.ProcCollector": [
        "<builtin>.compile"
    ],
    "bpytop.Fx": [
        "re.compile"
    ],
    "termios": [],
    "argparse.ArgumentParser.parse_args": [
        "argparse.ArgumentParser.parse_known_args",
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "<builtin>.print": [],
    "bpytop.main": [
        "bpytop.Draw.now",
        "bpytop.Init.fail",
        "bpytop.Collector.collect",
        "bpytop.CpuCollector.get_sensors",
        "<builtin>.isinstance",
        "bpytop.Fx.trans",
        "bpytop.TimeIt.stop",
        "bpytop.Init.done",
        "bpytop.TimeIt.start",
        "bpytop.Draw.out",
        "bpytop.Init.success",
        "sys.stdin.reconfigure",
        "bpytop.Box.calc_sizes",
        "bpytop.Key.start",
        "bpytop.main.run",
        "bpytop.Term.echo",
        "bpytop.UpdateChecker.run",
        "bpytop.Init.start",
        "bpytop.Term.refresh",
        "bpytop.Term.title",
        "bpytop.Collector.start",
        "bpytop.Box.draw_bg",
        "threading.Event.wait",
        "bpytop.Theme.__init__",
        "bpytop.clean_quit",
        "bpytop.Draw.buffer",
        "logging.Logger.exception"
    ],
    "math": [],
    "logging.getLogger": [
        "logging.Manager.getLogger"
    ],
    "<builtin>.getattr": [],
    "bpytop.Graph": [],
    "bpytop.Key": [
        "threading.Event.__init__",
        "threading.Event.set"
    ],
    "bpytop.MemCollector": [
        "time.time"
    ],
    "shutil": [
        "shutil.ExecError",
        "os",
        "sys.platform.startswith",
        "collections",
        "fnmatch",
        "bz2",
        "zlib",
        "lzma",
        "shutil.SameFileError",
        "shutil.Error",
        "shutil.RegistryError",
        "shutil._GiveupOnFastCopy",
        "collections.namedtuple",
        "grp",
        "<builtin>.hasattr",
        "shutil.ReadError",
        "shutil.SpecialFileError",
        "stat"
    ],
    "bpytop.Raw": [],
    "bpytop.Collector": [
        "threading.Event.__init__",
        "threading.Event.set"
    ],
    "bpytop.Config": [
        "psutil.cpu_times_percent",
        "<builtin>.enumerate",
        "psutil.sensors_temperatures",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "bpytop.get_cpu_name": [
        "re.sub",
        "subprocess.check_output"
    ],
    "collections": [
        "operator",
        "collections.OrderedDict",
        "collections.UserString",
        "collections._Link",
        "collections._OrderedDictValuesView",
        "collections._OrderedDictItemsView",
        "collections.Counter",
        "heapq",
        "collections.UserDict",
        "reprlib",
        "collections.UserList",
        "collections.ChainMap",
        "collections._OrderedDictKeysView",
        "keyword"
    ],
    "posixpath.dirname": [
        "<builtin>.len",
        "sys.base_prefix.rfind",
        "sys.path.rfind",
        "posixpath._get_sep"
    ],
    "bpytop.Timer": [],
    "bpytop.Mv": [],
    "logging.Logger.debug": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "bpytop.Theme": [],
    "bpytop.Nonblocking": [],
    "argparse._ActionsContainer.add_argument": [
        "argparse.ArgumentParser._add_action",
        "<builtin>.ValueError",
        "argparse.ArgumentParser._get_formatter",
        "<builtin>.callable",
        "argparse._ActionsContainer._get_optional_kwargs",
        "argparse._ActionsContainer._get_positional_kwargs",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.len",
        "<builtin>.hasattr",
        "argparse._ActionsContainer._add_action",
        "argparse._ActionsContainer._pop_action_class"
    ],
    "io": [
        "io.RawIOBase",
        "_io._IOBase.register",
        "io.BufferedIOBase",
        "io.TextIOBase",
        "io.IOBase",
        "_io._RawIOBase.register",
        "abc"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "bpytop.Init": [],
    "bpytop.UpdateChecker": [],
    "bpytop.Meter": [],
    "psutil.cpu_count": [
        "psutil._pswindows.cpu_count_logical",
        "psutil._pslinux.cpu_count_cores",
        "_psosx.cpu_count_cores",
        "psutil._pslinux.cpu_count_logical",
        "psutil._psaix.cpu_count_cores",
        "psutil._pssunos.cpu_count_cores",
        "_psosx.cpu_count_logical",
        "psutil._psbsd.cpu_count_cores",
        "psutil._pswindows.cpu_count_cores",
        "psutil._pssunos.cpu_count_logical",
        "psutil._psbsd.cpu_count_logical",
        "psutil._psaix.cpu_count_logical"
    ],
    "bpytop.Box": [
        "pwd.getpwuid",
        "<builtin>.sorted"
    ],
    "string.Template.__init__": [],
    "posixpath.expanduser": [
        "pwd.getpwnam",
        "pwd.getpwuid",
        "<builtin>.str",
        "<builtin>.len",
        "posixpath._get_sep",
        "<builtin>.isinstance"
    ],
    "bpytop.Graphs": [],
    "signal": [
        "enum",
        "functools",
        "functools.wraps",
        "<builtin>.globals",
        "_functools.partial"
    ],
    "bpytop.get_cpu_core_mapping": [
        "posixpath.isfile",
        "<builtin>.open",
        "ntpath.isfile",
        "<builtin>.range",
        "<builtin>.int"
    ],
    "string": [
        "string.Formatter",
        "collections",
        "string.Template",
        "string._TemplateMetaclass",
        "re"
    ],
    "tty": [
        "termios"
    ],
    "bpytop.SubBox": [],
    "bpytop.Config.__init__": [
        "<builtin>.getattr",
        "bpytop.Config.load_config",
        "<builtin>.setattr"
    ],
    "bpytop.NetBox": [],
    "logging.Logger.info": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.exception": [
        "logging.Logger.error"
    ],
    "bpytop.Mv.down": [],
    "bpytop.Color.fg": [
        "bpytop.Color.escape_color",
        "<builtin>.len"
    ],
    "<builtin>.len": [],
    "<builtin>.range": [],
    "bpytop.Mv.left": [],
    "bpytop.Fx.trans": [],
    "selectors": [
        "collections.abc",
        "selectors._SelectorMapping",
        "selectors.BaseSelector",
        "selectors._BaseSelectorImpl",
        "selectors.PollSelector",
        "selectors.SelectSelector",
        "collections",
        "selectors._PollLikeSelector",
        "math",
        "collections.namedtuple",
        "<builtin>.globals",
        "selectors.EpollSelector",
        "selectors.KqueueSelector",
        "<builtin>.hasattr",
        "abc",
        "selectors.DevpollSelector",
        "select"
    ],
    "warnings": [
        "warnings.simplefilter",
        "warnings._OptionError",
        "warnings.WarningMessage",
        "warnings._processoptions",
        "<builtin>.hasattr",
        "warnings.filterwarnings",
        "warnings.catch_warnings"
    ],
    "<builtin>.hasattr": [],
    "contextlib": [
        "contextlib.AbstractContextManager",
        "contextlib.AsyncExitStack",
        "functools",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib.suppress",
        "types",
        "contextlib.closing",
        "contextlib.ExitStack",
        "contextlib.redirect_stdout",
        "abc",
        "collections.abc",
        "contextlib.redirect_stderr",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.ContextDecorator",
        "contextlib._RedirectStream",
        "collections",
        "contextlib.nullcontext",
        "contextlib._GeneratorContextManager",
        "contextlib._GeneratorContextManagerBase",
        "contextlib._BaseExitStack"
    ],
    "subprocess.CalledProcessError": [],
    "subprocess.Popen": [],
    "subprocess.STARTUPINFO": [],
    "subprocess.SubprocessError": [],
    "_posixsubprocess": [],
    "subprocess.Handle": [],
    "subprocess._use_posix_spawn": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.hasattr"
    ],
    "subprocess.TimeoutExpired": [],
    "subprocess.CompletedProcess": [],
    "datetime.datetime": [],
    "datetime._days_before_year": [],
    "_datetime": [],
    "datetime.time": [],
    "datetime.timedelta": [],
    "datetime.timezone._create": [
        "datetime.timezone.__new__"
    ],
    "datetime.timezone": [
        "<builtin>.object"
    ],
    "datetime.tzinfo": [],
    "datetime.date": [],
    "threading.Event.__init__": [
        "_thread.allocate_lock",
        "threading.Condition.__init__"
    ],
    "logging.Logger._log": [
        "logging.Logger.findCaller",
        "logging.Logger.handle",
        "sys.exc_info",
        "logging.Logger.makeRecord",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel",
        "logging._releaseLock"
    ],
    "functools": [
        "functools.singledispatchmethod",
        "functools._HashedSeq",
        "functools.partial",
        "functools.partialmethod",
        "collections",
        "functools.cached_property",
        "collections.namedtuple",
        "reprlib",
        "<builtin>.object",
        "abc"
    ],
    "psutil._pssunos": [
        "os",
        "socket",
        "functools",
        "collections",
        "subprocess",
        "<builtin>.dict",
        "collections.namedtuple",
        "psutil._pssunos.Process",
        "_psutil_posix.getpagesize"
    ],
    "<builtin>.object": [],
    "<builtin>.tuple": [],
    "<builtin>.ImportError": [],
    "psutil._pswindows": [
        "sys.getwindowsversion",
        "os",
        "contextlib",
        "psutil._pswindows.Priority",
        "enum",
        "psutil._pswindows.IOPriority",
        "functools",
        "collections",
        "_common.memoize",
        "<builtin>.RuntimeError",
        "<builtin>.dict",
        "<builtin>.globals",
        "collections.namedtuple",
        "<builtin>.str",
        "_compat.lru_cache",
        "psutil._pswindows.Process",
        "signal",
        "psutil._pswindows.WindowsService"
    ],
    "psutil.Popen": [],
    "psutil.cpu_times": [
        "psutil._psbsd.per_cpu_times",
        "psutil._pssunos.per_cpu_times",
        "psutil._pswindows.per_cpu_times",
        "_psosx.cpu_times",
        "psutil._psbsd.cpu_times",
        "psutil._psaix.per_cpu_times",
        "psutil._pssunos.cpu_times",
        "psutil._psaix.cpu_times",
        "_psosx.per_cpu_times",
        "psutil._pswindows.cpu_times",
        "psutil._pslinux.per_cpu_times",
        "psutil._pslinux.cpu_times"
    ],
    "<builtin>.globals": [],
    "psutil._psbsd": [
        "os",
        "contextlib",
        "contextlib.contextmanager",
        "functools",
        "collections",
        "_common.memoize",
        "<builtin>.dict",
        "collections.namedtuple",
        "psutil._psbsd.Process",
        "_psutil_posix.getpagesize",
        "<builtin>.hasattr",
        "xml.etree.ElementTree"
    ],
    "psutil.test": [
        "time.localtime",
        "<builtin>.print",
        "time.strftime",
        "<builtin>.sum",
        "psutil._common.bytes2human",
        "psutil.process_iter",
        "_compat.get_terminal_size",
        "<builtin>.int",
        "psutil.Process.uids",
        "<builtin>.round",
        "psutil._common"
    ],
    "psutil.Process": [
        "contextlib.contextmanager",
        "_common.deprecated_method",
        "_common.memoize_when_activated",
        "psutil._assert_pid_not_reused",
        "<builtin>.hasattr"
    ],
    "<builtin>.dir": [],
    "<builtin>.set": [],
    "psutil._pslinux": [
        "ctypes",
        "psutil._pslinux.Process",
        "functools",
        "posixpath.exists",
        "ctypes.CDLL.__init__",
        "traceback.print_exc",
        "warnings",
        "psutil._pslinux.Connections",
        "<builtin>.hasattr",
        "os",
        "glob",
        "collections.namedtuple",
        "<builtin>.globals",
        "_psutil_posix.getpagesize",
        "psutil._pslinux.Connections.__init__",
        "re",
        "psutil._pslinux._Ipv6UnsupportedError",
        "struct",
        "psutil._pslinux.RootFsDeviceFinder",
        "base64",
        "enum",
        "psutil._pslinux.IOPriority",
        "socket",
        "ntpath.exists",
        "<builtin>.dir",
        "_common.memoize",
        "<builtin>.int",
        "psutil._pslinux.set_scputimes_ntuple",
        "__future__",
        "collections",
        "resource",
        "traceback"
    ],
    "<builtin>.int": [],
    "__future__": [
        "__future__._Feature",
        "__future__._Feature.__init__"
    ],
    "<builtin>.NotImplementedError": [],
    "psutil._psaix": [
        "os",
        "psutil._psaix.Process",
        "functools",
        "collections",
        "subprocess",
        "glob",
        "<builtin>.dict",
        "collections.namedtuple",
        "<builtin>.hasattr",
        "_psutil_posix.getpagesize",
        "re"
    ],
    "bisect": [
        "_bisect"
    ],
    "collections.abc": [
        "collections.abc"
    ],
    "random._test": [
        "random._test_generator"
    ],
    "random.SystemRandom": [],
    "hashlib": [
        "logging.exception",
        "logging",
        "<builtin>.bytes",
        "<builtin>.globals",
        "<builtin>.set",
        "hashlib.__get_builtin_constructor",
        "<builtin>.range",
        "_hashlib",
        "hashlib.__get_openssl_constructor"
    ],
    "_random": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "_sha512": [],
    "random.Random": [],
    "logging.handlers.BaseRotatingHandler.__init__": [
        "logging.FileHandler.__init__"
    ],
    "logging._acquireLock": [],
    "logging._releaseLock": [],
    "threading.Barrier": [],
    "_thread.allocate_lock": [],
    "threading.BrokenBarrierError": [],
    "threading._DummyThread": [],
    "threading.Condition": [],
    "threading.Timer": [],
    "threading.Thread": [],
    "_weakrefset.WeakSet.__init__": [
        "weakref.WeakKeyDictionary.update",
        "weakref.WeakValueDictionary.update",
        "<builtin>.set",
        "_weakrefset.WeakSet.update"
    ],
    "collections.namedtuple": [
        "collections.<lambda1>",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "sys.intern",
        "_collections._tuplegetter",
        "<builtin>.enumerate",
        "<builtin>.type",
        "sys._getframe",
        "<builtin>.ValueError",
        "<builtin>.zip",
        "<builtin>.exec",
        "<builtin>.repr",
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.dict"
    ],
    "_weakrefset": [
        "_weakrefset._IterationGuard",
        "_weakrefset.WeakSet"
    ],
    "threading.Event": [],
    "itertools.count": [],
    "threading._RLock": [],
    "threading._MainThread": [],
    "threading.BoundedSemaphore": [],
    "threading._MainThread.__init__": [
        "threading.Thread.__init__",
        "threading.Thread._set_tstate_lock",
        "threading.Event.set",
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id"
    ],
    "_threading_local": [
        "contextlib",
        "contextlib.contextmanager",
        "threading",
        "weakref",
        "_threading_local._localimpl",
        "_threading_local.local"
    ],
    "traceback": [
        "collections",
        "traceback.FrameSummary",
        "linecache",
        "traceback.StackSummary",
        "traceback.TracebackException"
    ],
    "threading.Semaphore": [],
    "typing.TypedDict": [],
    "typing._GenericAlias.__init__": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "typing._collect_type_vars"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.NamedTupleMeta": [],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._TypedDictMeta": [],
    "types": [
        "types._g",
        "types._GeneratorWrapper",
        "types._cell_factory",
        "sys.exc_info",
        "<builtin>.globals",
        "<builtin>.type",
        "<builtin>.object",
        "types.DynamicClassAttribute",
        "types._C"
    ],
    "typing._Immutable": [],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing._Final": [],
    "typing.TextIO": [
        "abc.abstractmethod"
    ],
    "typing.ForwardRef": [],
    "abc": [
        "abc.abstractproperty",
        "abc.ABC",
        "abc.abstractclassmethod",
        "_py_abc",
        "abc.ABCMeta",
        "abc.abstractstaticmethod"
    ],
    "operator": [
        "operator.attrgetter",
        "operator.methodcaller",
        "operator.itemgetter"
    ],
    "typing.TypeVar": [],
    "typing.IO": [
        "abc.abstractmethod"
    ],
    "typing._TypingEllipsis": [],
    "typing.NamedTuple": [],
    "typing.Protocol": [],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing._TypingEmpty": [],
    "typing.re": [],
    "typing.io": [],
    "typing._SpecialForm.__init__": [],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "typing._type_check",
        "<builtin>.len",
        "sys._getframe",
        "<builtin>.bool"
    ],
    "typing._ProtocolMeta": [],
    "bpytop.Color.__init__": [
        "<builtin>.tuple",
        "logging.Logger.exception",
        "<builtin>.ValueError",
        "bpytop.Color.truecolor_to_256",
        "<builtin>.all",
        "<builtin>.map",
        "<builtin>.str",
        "<builtin>.hex",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "bpytop.Mv.right": [],
    "<builtin>.enumerate": [],
    "logging.handlers.MemoryHandler": [],
    "logging.handlers.WatchedFileHandler": [],
    "logging.handlers.QueueHandler": [],
    "logging.handlers.TimedRotatingFileHandler": [],
    "logging.handlers.BaseRotatingHandler": [],
    "logging.handlers.RotatingFileHandler": [],
    "queue": [
        "queue.PriorityQueue",
        "queue._PySimpleQueue",
        "threading",
        "queue.LifoQueue",
        "collections",
        "queue.Queue",
        "heapq",
        "_queue",
        "queue.Full",
        "queue.Empty"
    ],
    "logging.handlers.SocketHandler": [],
    "logging.handlers.SMTPHandler": [],
    "logging.handlers.HTTPHandler": [],
    "pickle": [
        "argparse.ArgumentParser.__init__",
        "functools",
        "argparse._ActionsContainer.add_argument",
        "pickle._Unframer",
        "io",
        "argparse",
        "pickle._load",
        "argparse.ArgumentParser.print_help",
        "pickle._Framer",
        "re.match",
        "argparse.ArgumentParser.parse_args",
        "types",
        "_pickle",
        "re",
        "struct",
        "codecs",
        "<builtin>.dir",
        "pickle.UnpicklingError",
        "pickle.PickleError",
        "pickle._test",
        "pprint",
        "pickle.PicklingError",
        "pickle._Stop",
        "argparse.FileType.__init__",
        "pickle._Pickler",
        "_compat_pickle",
        "copyreg",
        "pickle._Unpickler"
    ],
    "stat": [],
    "logging.handlers.DatagramHandler": [],
    "logging.handlers.NTEventLogHandler": [],
    "struct": [
        "_struct"
    ],
    "logging.handlers.QueueListener": [],
    "logging.handlers.BufferingHandler": [],
    "socket": [
        "os._get_exports_list",
        "os",
        "enum",
        "selectors",
        "socket.socket",
        "_socket",
        "socket.SocketIO",
        "io",
        "<builtin>.hasattr",
        "<builtin>.object",
        "<builtin>.getattr",
        "sys.platform.lower",
        "socket._GiveupOnSendfile"
    ],
    "logging.handlers.SysLogHandler": [],
    "copy": [
        "types",
        "weakref",
        "copy.Error",
        "<builtin>.type",
        "<builtin>.getattr",
        "copyreg"
    ],
    "argparse._StoreTrueAction": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.Action": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.ArgumentError": [],
    "argparse._VersionAction": [],
    "argparse._ArgumentGroup": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.ArgumentParser": [],
    "argparse.ArgumentTypeError": [],
    "gettext": [
        "os",
        "locale",
        "gettext.NullTranslations",
        "posixpath.join",
        "gettext.GNUTranslations",
        "<builtin>.enumerate",
        "re.compile",
        "ntpath.join",
        "re"
    ],
    "argparse._AppendAction": [],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse.FileType": [],
    "argparse.Namespace": [],
    "argparse._StoreFalseAction": [],
    "argparse._AppendConstAction": [],
    "argparse._ExtendAction": [],
    "argparse._ActionsContainer": [],
    "argparse._CountAction": [],
    "argparse._AttributeHolder": [],
    "argparse._StoreConstAction": [],
    "argparse._HelpAction": [],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse._StoreAction": [],
    "os._get_exports_list": [
        "<builtin>.dir",
        "<builtin>.list"
    ],
    "os._Environ.__init__": [],
    "posixpath": [
        "stat",
        "os",
        "genericpath"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os.PathLike": [
        "abc.abstractmethod"
    ],
    "ntpath": [
        "sys.getwindowsversion",
        "os",
        "genericpath",
        "<builtin>.hasattr",
        "stat"
    ],
    "os._wrap_close": [],
    "os._Environ": [],
    "os._fscodec": [
        "sys.getfilesystemencodeerrors",
        "sys.getfilesystemencoding"
    ],
    "os._createenviron": [
        "os._createenviron.check_str",
        "os._Environ.__init__",
        "sys.getfilesystemencoding"
    ],
    "os._AddedDllDirectory": [],
    "threading.RLock": [
        "_thread.RLock",
        "threading._RLock.__init__"
    ],
    "logging.FileHandler": [],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.RootLogger": [],
    "logging.Formatter": [],
    "weakref.WeakValueDictionary.__init__": [
        "<builtin>.set"
    ],
    "logging.NullHandler": [],
    "logging.BufferingFormatter": [],
    "logging.Manager.__init__": [],
    "atexit.register": [],
    "logging.Filterer": [],
    "logging.Manager": [],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Logger": [],
    "logging.Filter": [],
    "ntpath.normcase": [
        "<builtin>.isinstance",
        "sys.base_prefix.replace",
        "sys.path.replace"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.StreamHandler": [],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "weakref": [
        "collections.abc",
        "weakref.WeakValueDictionary",
        "weakref.WeakKeyDictionary",
        "weakref.WeakMethod",
        "weakref.KeyedRef",
        "weakref.finalize",
        "_weakrefset"
    ],
    "logging.StringTemplateStyle": [],
    "logging.PlaceHolder": [],
    "logging.LogRecord": [],
    "logging._StderrHandler": [],
    "logging.LoggerAdapter": [],
    "posixpath.normcase": [],
    "urllib.error": [
        "urllib.error.ContentTooShortError",
        "urllib.error.URLError",
        "urllib.response",
        "urllib.error.HTTPError"
    ],
    "urllib.request.DataHandler": [],
    "urllib.request.AbstractHTTPHandler": [],
    "urllib.parse": [
        "warnings",
        "urllib.parse._NetlocResultMixinBytes",
        "urllib.parse._ResultMixinStr",
        "urllib.parse.ParseResultBytes",
        "<builtin>.bytes",
        "urllib.parse.DefragResult",
        "collections.namedtuple",
        "re.compile",
        "urllib.parse.Quoter",
        "re",
        "urllib.parse._NetlocResultMixinStr",
        "<builtin>.frozenset",
        "urllib.parse.SplitResult",
        "urllib.parse.SplitResultBytes",
        "urllib.parse._NetlocResultMixinBase",
        "urllib.parse.DefragResultBytes",
        "collections",
        "urllib.parse.ParseResult",
        "urllib.parse._ResultMixinBytes",
        "urllib.parse._fix_result_transcoding"
    ],
    "urllib.request.HTTPRedirectHandler": [],
    "urllib.request.HTTPHandler": [],
    "urllib.request.Request": [],
    "urllib.request.URLopener": [],
    "urllib.request.HTTPDefaultErrorHandler": [],
    "urllib.request.HTTPSHandler": [],
    "http.client": [
        "http.client.ImproperConnectionState",
        "http.client.HTTPSConnection",
        "http.client.InvalidURL",
        "io",
        "http.client.IncompleteRead",
        "http.client.CannotSendRequest",
        "urllib.parse",
        "http.client.UnimplementedFileMode",
        "http.client.RemoteDisconnected",
        "<builtin>.globals",
        "re.compile",
        "re",
        "http.client.HTTPMessage",
        "collections.abc",
        "http.client.UnknownProtocol",
        "http",
        "http.client.LineTooLong",
        "http.client.ResponseNotReady",
        "socket",
        "http.client.UnknownTransferEncoding",
        "http.client.HTTPResponse",
        "http.client.HTTPException",
        "email.message",
        "email.parser",
        "http.client.BadStatusLine",
        "http.client.CannotSendHeader",
        "ssl",
        "http.client.NotConnected",
        "http.client.HTTPConnection"
    ],
    "urllib.request.ftpwrapper": [],
    "urllib.request.AbstractDigestAuthHandler": [],
    "urllib.request.ProxyHandler": [],
    "re.compile": [
        "re._compile"
    ],
    "email": [],
    "urllib.request.OpenerDirector": [],
    "urllib.request.ProxyBasicAuthHandler": [],
    "base64": [
        "binascii",
        "struct",
        "re",
        "base64.main"
    ],
    "urllib.request.HTTPCookieProcessor": [],
    "urllib.request.FTPHandler": [],
    "nturl2path": [],
    "tempfile": [
        "os",
        "random",
        "tempfile.SpooledTemporaryFile",
        "functools",
        "weakref",
        "_thread.allocate_lock",
        "io",
        "warnings",
        "shutil",
        "tempfile._TemporaryFileWrapper",
        "tempfile._RandomNameSequence",
        "<builtin>.hasattr",
        "tempfile.TemporaryDirectory",
        "tempfile._TemporaryFileCloser"
    ],
    "urllib.response": [
        "urllib.response.addinfo",
        "urllib.response.addinfourl",
        "urllib.response.addclosehook",
        "urllib.response.addbase",
        "tempfile"
    ],
    "_scproxy": [],
    "urllib.request.HTTPBasicAuthHandler": [],
    "urllib.request.HTTPPasswordMgrWithDefaultRealm": [],
    "urllib.request.ProxyDigestAuthHandler": [],
    "urllib.request.HTTPPasswordMgrWithPriorAuth": [],
    "urllib.request.HTTPDigestAuthHandler": [],
    "ssl": [
        "ssl._TLSContentType",
        "ssl.SSLSocket",
        "warnings",
        "<builtin>.hasattr",
        "os",
        "ssl.SSLObject",
        "ssl._TLSMessageType",
        "collections.namedtuple",
        "ssl.Purpose",
        "<builtin>.getattr",
        "base64",
        "enum",
        "socket",
        "ssl.SSLContext",
        "ssl.TLSVersion",
        "collections",
        "ssl._ASN1Object",
        "_ssl",
        "ssl._TLSAlertType"
    ],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "urllib.request.CacheFTPHandler": [],
    "urllib.request.HTTPErrorProcessor": [],
    "urllib.request.FileHandler": [],
    "urllib.request.FancyURLopener": [],
    "urllib.request.HTTPPasswordMgr": [],
    "urllib.request.BaseHandler": [],
    "urllib.request.UnknownHandler": [],
    "<builtin>.chr": [],
    "sre_compile": [
        "<builtin>.tuple",
        "sre_constants",
        "sre_parse"
    ],
    "re.Scanner": [],
    "functools.lru_cache": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "_functools._lru_cache_wrapper"
    ],
    "enum": [
        "enum.IntFlag",
        "types",
        "enum.EnumMeta",
        "enum.auto",
        "enum.Enum",
        "enum.Flag",
        "enum.IntEnum",
        "<builtin>.object",
        "enum._EnumDict"
    ],
    "copyreg.pickle": [
        "<builtin>.callable",
        "copyreg.constructor",
        "<builtin>.TypeError"
    ],
    "sre_parse": [
        "sre_parse.Tokenizer",
        "sre_parse.Verbose",
        "sre_constants",
        "<builtin>.ord",
        "<builtin>.frozenset",
        "sre_parse.State",
        "sre_parse.SubPattern"
    ],
    "re.RegexFlag": [],
    "functools.singledispatch.wrapper": [
        "functools.singledispatch.dispatch",
        "<builtin>.TypeError"
    ],
    "functools.lru_cache.decorating_function": [
        "_functools._lru_cache_wrapper"
    ],
    "functools.singledispatchmethod.__get__._method": [],
    "<builtin>.type": [],
    "sre_compile.compile": [
        "<builtin>.tuple",
        "_sre.compile",
        "<builtin>.print",
        "sre_parse.parse",
        "sre_compile.isstring",
        "sre_compile._code",
        "sre_compile.dis"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key"
    ],
    "copyreg": [
        "copyreg.pickle"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.join": [
        "genericpath._check_arg_types",
        "<builtin>.isinstance",
        "<builtin>.map",
        "ntpath.splitdrive"
    ],
    "<builtin>.isinstance": [],
    "ntpath.exists": [],
    "<builtin>.bytes": [],
    "posixpath.exists": [],
    "ntpath.split": [
        "ntpath._get_bothseps",
        "<builtin>.len",
        "ntpath.splitdrive"
    ],
    "posixpath.split": [
        "<builtin>.len",
        "sys.base_prefix.rfind",
        "sys.path.rfind",
        "posixpath._get_sep"
    ],
    "logging.Manager._clear_cache": [
        "<builtin>.isinstance",
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging._checkLevel": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.str",
        "<builtin>.TypeError"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "<builtin>.super": [],
    "posixpath.basename": [
        "sys.stdin.buffer.rfind",
        "sys.base_prefix.rfind",
        "sys.path.rfind",
        "posixpath._get_sep"
    ],
    "argparse._ActionsContainer._add_container_actions": [
        "<builtin>.ValueError",
        "gettext.gettext",
        "argparse._ActionsContainer.add_argument_group",
        "argparse._ActionsContainer.add_mutually_exclusive_group"
    ],
    "argparse._ActionsContainer.register": [],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "<builtin>.ValueError": [],
    "threading.Event.set": [
        "threading.Condition.notify_all"
    ],
    "<builtin>.compile": [],
    "argparse.ArgumentParser.parse_known_args": [
        "argparse.ArgumentParser.error",
        "sys.exc_info",
        "<builtin>.list",
        "<builtin>.setattr",
        "argparse.Namespace.__init__",
        "<builtin>.str",
        "<builtin>.delattr",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "argparse.ArgumentParser._parse_known_args"
    ],
    "argparse.ArgumentParser.error": [
        "gettext.gettext",
        "argparse.ArgumentParser.exit",
        "argparse.ArgumentParser.print_usage"
    ],
    "bpytop.Draw.now": [
        "<builtin>.print",
        "threading.Event.clear",
        "threading.Event.wait",
        "threading.Event.set"
    ],
    "bpytop.Init.fail": [
        "bpytop.Draw.buffer",
        "logging.Logger.exception",
        "bpytop.clean_quit",
        "time.sleep"
    ],
    "bpytop.Collector.collect": [
        "threading.Event.set",
        "threading.Event.wait",
        "<builtin>.list"
    ],
    "bpytop.CpuCollector.get_sensors": [
        "psutil.sensors_temperatures",
        "<builtin>.hasattr",
        "<builtin>.bool",
        "shutil.which",
        "subprocess.check_output"
    ],
    "bpytop.TimeIt.stop": [
        "logging.Logger.debug",
        "time.time"
    ],
    "bpytop.Init.done": [
        "bpytop.Draw.clear",
        "bpytop.Draw.now",
        "bpytop.Init.draw_bg"
    ],
    "bpytop.TimeIt.start": [
        "time.time"
    ],
    "bpytop.Draw.out": [
        "bpytop.Draw.clear",
        "<builtin>.sorted",
        "bpytop.Draw.now"
    ],
    "bpytop.Init.success": [
        "bpytop.Draw.buffer",
        "bpytop.Mv.right",
        "bpytop.Init.draw_bg"
    ],
    "sys.stdin.reconfigure": [],
    "bpytop.Box.calc_sizes": [],
    "bpytop.Key.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.main.run": [
        "bpytop.process_keys",
        "bpytop.Timer.left",
        "bpytop.Collector.collect",
        "bpytop.Key.input_wait",
        "bpytop.Timer.not_zero",
        "bpytop.Timer.stamp",
        "bpytop.Term.refresh"
    ],
    "bpytop.Term.echo": [
        "sys.stdin.fileno"
    ],
    "bpytop.UpdateChecker.run": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.Init.start": [
        "bpytop.Mv.down",
        "random.Random.randint",
        "bpytop.Color.fg",
        "bpytop.Banner.draw",
        "bpytop.Mv.to",
        "bpytop.Mv.left",
        "bpytop.Draw.out",
        "<builtin>.str",
        "bpytop.Graph.__init__",
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "bpytop.Fx.trans",
        "<builtin>.round"
    ],
    "bpytop.Term.refresh": [
        "bpytop.Key.has_key",
        "bpytop.Draw.now",
        "bpytop.Mv.down",
        "bpytop.Key.last",
        "bpytop.Mv.right",
        "threading.Event.wait",
        "threading.Event.set",
        "bpytop.Box.draw_bg",
        "<builtin>.min",
        "bpytop.Timer.finish",
        "<builtin>.str",
        "bpytop.create_box",
        "bpytop.clean_quit",
        "bpytop.Mv.left",
        "<builtin>.getattr",
        "threading.Event.clear",
        "bpytop.Box.calc_sizes"
    ],
    "bpytop.Term.title": [],
    "bpytop.Collector.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.Box.draw_bg": [
        "bpytop.Box.empty_bg",
        "bpytop.Draw.buffer",
        "bpytop.Box.draw_clock",
        "bpytop.Box.draw_update_ms"
    ],
    "threading.Event.wait": [
        "threading.Condition.wait"
    ],
    "bpytop.Theme.__init__": [
        "bpytop.Theme._load_theme",
        "bpytop.Theme.refresh"
    ],
    "bpytop.clean_quit": [
        "logging.Logger.warning",
        "bpytop.Draw.now",
        "bpytop.Term.title",
        "<builtin>.print",
        "bpytop.Term.echo",
        "time.time",
        "<builtin>.SystemExit",
        "logging.Logger.info",
        "_thread.interrupt_main",
        "bpytop.Key.stop",
        "bpytop.Collector.stop",
        "<builtin>.round"
    ],
    "bpytop.Draw.buffer": [
        "bpytop.Draw.out"
    ],
    "logging.Manager.getLogger": [
        "logging._acquireLock",
        "<builtin>.TypeError",
        "logging.Manager._fixupParents",
        "<builtin>.isinstance",
        "logging._releaseLock",
        "logging.Manager._fixupChildren"
    ],
    "shutil.ExecError": [],
    "sys.platform.startswith": [],
    "fnmatch": [
        "os",
        "functools.lru_cache",
        "functools._lru_cache_wrapper.wrapper",
        "posixpath",
        "functools",
        "functools.lru_cache.decorating_function",
        "functools.singledispatchmethod.__get__._method",
        "re",
        "functools.singledispatch.wrapper"
    ],
    "bz2": [
        "_bz2",
        "os",
        "_compression",
        "threading",
        "bz2.BZ2File",
        "io",
        "warnings",
        "<builtin>.object"
    ],
    "zlib": [],
    "lzma": [
        "os",
        "_compression",
        "_lzma",
        "io",
        "lzma.LZMAFile"
    ],
    "shutil.SameFileError": [],
    "shutil.Error": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "grp": [],
    "shutil.ReadError": [],
    "shutil.SpecialFileError": [],
    "psutil.cpu_times_percent": [
        "<builtin>.ValueError",
        "<builtin>.zip",
        "time.sleep",
        "psutil.cpu_times_percent.calculate",
        "psutil.cpu_times"
    ],
    "psutil.sensors_temperatures": [
        "collections.defaultdict",
        "_common.shwtemp",
        "<builtin>.dict",
        "psutil._pslinux.sensors_temperatures",
        "psutil._psbsd.sensors_temperatures",
        "psutil.sensors_temperatures.convert",
        "_psosx.sensors_temperatures"
    ],
    "re.sub": [
        "re._compile"
    ],
    "subprocess.check_output": [
        "<builtin>.ValueError",
        "subprocess.run"
    ],
    "collections.OrderedDict": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.object"
    ],
    "collections.UserString": [],
    "collections._Link": [],
    "collections._OrderedDictValuesView": [],
    "collections._OrderedDictItemsView": [],
    "collections.Counter": [],
    "heapq": [
        "<builtin>.print",
        "doctest.testmod",
        "doctest",
        "_heapq"
    ],
    "collections.UserDict": [],
    "reprlib": [
        "reprlib.Repr.__init__",
        "reprlib.Repr"
    ],
    "collections.UserList": [],
    "collections.ChainMap": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "collections._OrderedDictKeysView": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "sys.base_prefix.rfind": [],
    "sys.path.rfind": [],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "argparse.ArgumentParser._add_action": [],
    "argparse.ArgumentParser._get_formatter": [
        "argparse.HelpFormatter.__init__"
    ],
    "<builtin>.callable": [],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.dict",
        "<builtin>.ValueError",
        "gettext.gettext",
        "<builtin>.len"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "gettext.gettext",
        "<builtin>.TypeError"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "io.RawIOBase": [],
    "_io._IOBase.register": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "io.IOBase": [],
    "_io._RawIOBase.register": [],
    "psutil._pswindows.cpu_count_logical": [
        "_psutil_windows.cpu_count_logical"
    ],
    "psutil._pslinux.cpu_count_cores": [
        "_common.open_binary",
        "<builtin>.sum",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "_psosx.cpu_count_cores": [],
    "psutil._pslinux.cpu_count_logical": [
        "_common.open_binary",
        "_common.open_text",
        "_common.get_procfs_path",
        "re.compile"
    ],
    "psutil._psaix.cpu_count_cores": [
        "<builtin>.RuntimeError",
        "subprocess.Popen.__init__",
        "<builtin>.len",
        "subprocess.Popen.communicate"
    ],
    "psutil._pssunos.cpu_count_cores": [
        "_psutil_sunos.cpu_count_cores"
    ],
    "_psosx.cpu_count_logical": [],
    "psutil._psbsd.cpu_count_cores": [
        "_psutil_bsd.cpu_topology",
        "psutil._psbsd.cpu_count_logical",
        "<builtin>.len"
    ],
    "psutil._pswindows.cpu_count_cores": [
        "_psutil_windows.cpu_count_cores"
    ],
    "psutil._pssunos.cpu_count_logical": [],
    "psutil._psbsd.cpu_count_logical": [
        "_psutil_bsd.cpu_count_logical"
    ],
    "psutil._psaix.cpu_count_logical": [],
    "pwd.getpwuid": [],
    "<builtin>.sorted": [],
    "pwd.getpwnam": [],
    "functools.wraps": [
        "_functools.partial"
    ],
    "_functools.partial": [],
    "posixpath.isfile": [],
    "<builtin>.open": [],
    "ntpath.isfile": [],
    "string.Formatter": [],
    "string.Template": [],
    "string._TemplateMetaclass": [],
    "bpytop.Config.load_config": [
        "logging.Logger.exception",
        "posixpath.isfile",
        "<builtin>.int",
        "<builtin>.type",
        "<builtin>.str",
        "ntpath.isfile",
        "bpytop.strtobool",
        "<builtin>.getattr",
        "<builtin>.open",
        "<builtin>.bool"
    ],
    "<builtin>.setattr": [],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "bpytop.Color.escape_color": [
        "logging.Logger.exception",
        "<builtin>.int",
        "<builtin>.len",
        "bpytop.Color.truecolor_to_256"
    ],
    "selectors._SelectorMapping": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors.PollSelector": [],
    "selectors.SelectSelector": [],
    "selectors._PollLikeSelector": [],
    "selectors.EpollSelector": [],
    "selectors.KqueueSelector": [],
    "selectors.DevpollSelector": [],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "warnings._OptionError": [],
    "warnings.WarningMessage": [],
    "warnings._processoptions": [
        "warnings._setoption",
        "<builtin>.print"
    ],
    "warnings.filterwarnings": [
        "<builtin>.issubclass",
        "re.compile",
        "<builtin>.isinstance",
        "re",
        "warnings._add_filter"
    ],
    "warnings.catch_warnings": [],
    "contextlib.AbstractContextManager": [
        "abc.abstractmethod"
    ],
    "contextlib.AsyncExitStack": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib.suppress": [],
    "contextlib.closing": [],
    "contextlib.ExitStack": [],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.AbstractAsyncContextManager": [
        "abc.abstractmethod"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib._RedirectStream": [],
    "contextlib.nullcontext": [],
    "contextlib._GeneratorContextManager": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._BaseExitStack": [],
    "<builtin>.map": [],
    "datetime.timezone.__new__": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "datetime.timezone._create"
    ],
    "threading.Condition.__init__": [
        "threading.RLock",
        "_collections.deque"
    ],
    "logging.Logger.findCaller": [
        "io.StringIO",
        "logging.<lambda1>",
        "traceback.print_stack",
        "<builtin>.hasattr",
        "ntpath.normcase",
        "posixpath.normcase"
    ],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "sys.exc_info": [],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "functools.singledispatchmethod": [],
    "functools._HashedSeq": [],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [],
    "functools.cached_property": [],
    "<builtin>.dict": [],
    "psutil._pssunos.Process": [
        "collections.namedtuple",
        "psutil._pssunos.wrap_exceptions",
        "_common.memoize_when_activated"
    ],
    "_psutil_posix.getpagesize": [],
    "sys.getwindowsversion": [],
    "psutil._pswindows.Priority": [],
    "psutil._pswindows.IOPriority": [],
    "_common.memoize": [],
    "<builtin>.RuntimeError": [],
    "_compat.lru_cache": [],
    "psutil._pswindows.Process": [
        "psutil._pswindows.wrap_exceptions",
        "psutil._pswindows.retry_error_partial_copy",
        "_common.memoize_when_activated"
    ],
    "psutil._pswindows.WindowsService": [
        "contextlib.contextmanager"
    ],
    "psutil._psbsd.per_cpu_times": [
        "<builtin>.NotImplementedError",
        "_psutil_bsd.per_cpu_times",
        "psutil._psbsd.cpu_times",
        "psutil._psbsd.cpu_count_logical"
    ],
    "psutil._pssunos.per_cpu_times": [
        "_psutil_sunos.per_cpu_times"
    ],
    "psutil._pswindows.per_cpu_times": [
        "_psutil_windows.per_cpu_times"
    ],
    "_psosx.cpu_times": [],
    "psutil._psbsd.cpu_times": [
        "_psutil_bsd.cpu_times"
    ],
    "psutil._psaix.per_cpu_times": [
        "_psutil_aix.per_cpu_times"
    ],
    "psutil._pssunos.cpu_times": [
        "<builtin>.sum",
        "<builtin>.zip",
        "_psutil_sunos.per_cpu_times"
    ],
    "psutil._psaix.cpu_times": [
        "<builtin>.sum",
        "_psutil_aix.per_cpu_times",
        "<builtin>.zip"
    ],
    "_psosx.per_cpu_times": [],
    "psutil._pswindows.cpu_times": [
        "<builtin>.sum",
        "_psutil_windows.cpu_times",
        "_psutil_windows.per_cpu_times",
        "<builtin>.zip"
    ],
    "psutil._pslinux.per_cpu_times": [
        "_common.open_binary",
        "<builtin>.float",
        "<builtin>.len",
        "_common.get_procfs_path",
        "psutil._pslinux.set_scputimes_ntuple"
    ],
    "psutil._pslinux.cpu_times": [
        "_common.open_binary",
        "<builtin>.float",
        "<builtin>.len",
        "_common.get_procfs_path",
        "psutil._pslinux.set_scputimes_ntuple"
    ],
    "contextlib.contextmanager": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._psbsd.Process": [
        "psutil._psbsd.wrap_exceptions",
        "collections.namedtuple",
        "_common.memoize_when_activated"
    ],
    "xml.etree.ElementTree": [
        "contextlib.contextmanager",
        "_elementtree",
        "xml.etree.ElementTree.XMLParser",
        "xml.etree.ElementTree.QName",
        "io",
        "warnings",
        "xml.etree.ElementTree.ElementTree",
        "xml.etree.ElementTree._ListDataStream",
        "contextlib",
        "re.compile",
        "xml.etree.ElementTree.C14NWriterTarget",
        "re",
        "collections.abc",
        "xml.etree.ElementTree.Element",
        "xml.etree.ElementPath",
        "xml.etree.ElementTree.XMLPullParser",
        "<builtin>.set",
        "xml.etree.ElementTree.TreeBuilder",
        "collections",
        "xml.etree.ElementTree.ParseError"
    ],
    "time.localtime": [],
    "time.strftime": [],
    "<builtin>.sum": [],
    "psutil._common.bytes2human": [
        "<builtin>.float",
        "<builtin>.locals",
        "<builtin>.reversed",
        "<builtin>.dict",
        "<builtin>.enumerate"
    ],
    "psutil.process_iter": [
        "psutil.process_iter.remove",
        "psutil.pids",
        "<builtin>.sorted",
        "<builtin>.list",
        "psutil.process_iter.add",
        "<builtin>.set"
    ],
    "_compat.get_terminal_size": [],
    "psutil.Process.uids": [
        "psutil._pslinux.Process.uids",
        "psutil._psbsd.Process.uids",
        "psutil._pssunos.Process.uids",
        "psutil._psaix.Process.uids"
    ],
    "<builtin>.round": [],
    "psutil._common": [
        "psutil._common.NoSuchProcess",
        "functools",
        "warnings",
        "psutil._common.memoize",
        "<builtin>.object",
        "sys.getfilesystemencodeerrors",
        "sys.getfilesystemencoding",
        "os",
        "contextlib",
        "sys.platform.startswith",
        "psutil._common.AccessDenied",
        "psutil._common.NicDuplex",
        "collections.namedtuple",
        "<builtin>.globals",
        "stat",
        "psutil._common.Error",
        "enum",
        "psutil._common.BatteryTime",
        "threading",
        "socket",
        "psutil._common._WrapNumbers.__init__",
        "os.getenv",
        "psutil._common._WrapNumbers",
        "__future__",
        "psutil._common.ZombieProcess",
        "collections",
        "<builtin>.bool",
        "psutil._common.TimeoutExpired"
    ],
    "_common.deprecated_method": [],
    "_common.memoize_when_activated": [],
    "psutil._assert_pid_not_reused": [
        "functools.wraps",
        "_functools.partial"
    ],
    "ctypes": [
        "ctypes.c_wchar_p",
        "ctypes.c_ubyte",
        "ctypes.c_longlong",
        "ctypes.c_uint",
        "ctypes.HRESULT",
        "ctypes.LibraryLoader.__init__",
        "ctypes.CDLL.__init__",
        "ctypes.c_bool",
        "ctypes._endian",
        "ctypes.LibraryLoader",
        "ctypes._check_size",
        "ctypes.CFUNCTYPE",
        "os",
        "ctypes.PyDLL",
        "ctypes.c_wchar",
        "ctypes.c_ushort",
        "ctypes.CDLL",
        "ctypes.c_double",
        "ctypes.c_char_p",
        "ctypes.c_int",
        "ctypes.c_char",
        "ctypes.OleDLL",
        "ctypes.WinDLL",
        "struct",
        "ctypes.c_float",
        "_ctypes",
        "ctypes.py_object",
        "ctypes._reset_cache",
        "ctypes.c_long",
        "ctypes.c_byte",
        "ctypes.c_longdouble",
        "<builtin>.Exception",
        "<builtin>.int",
        "ctypes.c_short",
        "ctypes.c_void_p",
        "ctypes.PYFUNCTYPE",
        "ctypes.c_ulonglong",
        "ctypes.c_ulong"
    ],
    "psutil._pslinux.Process": [
        "psutil._pslinux.wrap_exceptions",
        "ntpath.exists",
        "posixpath.exists",
        "_common.memoize_when_activated"
    ],
    "ctypes.CDLL.__init__": [
        "sys.platform.startswith",
        "nt._getfullpathname",
        "ctypes.CDLL.__init__._FuncPtr"
    ],
    "traceback.print_exc": [
        "sys.exc_info",
        "traceback.print_exception"
    ],
    "psutil._pslinux.Connections": [],
    "glob": [
        "os",
        "re",
        "fnmatch",
        "re.compile"
    ],
    "psutil._pslinux.Connections.__init__": [],
    "psutil._pslinux._Ipv6UnsupportedError": [],
    "psutil._pslinux.RootFsDeviceFinder": [],
    "psutil._pslinux.IOPriority": [],
    "psutil._pslinux.set_scputimes_ntuple": [
        "collections.namedtuple",
        "_common.open_binary",
        "<builtin>.len"
    ],
    "resource": [],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "psutil._psaix.Process": [
        "psutil._psaix.wrap_exceptions",
        "_common.memoize_when_activated"
    ],
    "_bisect": [],
    "random._test_generator": [
        "random.Random.vonmisesvariate",
        "random.Random.normalvariate",
        "random.Random.triangular",
        "time.perf_counter",
        "<builtin>.max",
        "<builtin>.print",
        "random.Random.betavariate",
        "random.Random.gammavariate",
        "<builtin>.min",
        "random.Random.lognormvariate",
        "<builtin>.range",
        "<builtin>.round",
        "random.Random.gauss"
    ],
    "logging.exception": [
        "logging.error"
    ],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "_blake2",
        "_sha3",
        "_sha1",
        "_sha512",
        "_md5",
        "_sha256"
    ],
    "_hashlib": [],
    "hashlib.__get_openssl_constructor": [
        "<builtin>.getattr",
        "hashlib.__get_builtin_constructor"
    ],
    "random.Random.seed": [
        "<builtin>.super",
        "<builtin>.ord",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "logging.FileHandler.__init__": [
        "posixpath.abspath",
        "logging.Handler.__init__",
        "logging.StreamHandler.__init__",
        "logging.FileHandler._open",
        "ntpath.abspath"
    ],
    "weakref.WeakKeyDictionary.update": [
        "_weakref.ref",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.dict",
        "weakref.KeyedRef.__init__",
        "<builtin>.hasattr"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "collections.<lambda1>": [
        "<builtin>.property",
        "operator.itemgetter.__init__"
    ],
    "sys.intern": [],
    "_collections._tuplegetter": [],
    "sys._getframe": [],
    "<builtin>.zip": [],
    "<builtin>.exec": [],
    "<builtin>.repr": [],
    "<builtin>.TypeError": [],
    "<builtin>.list": [],
    "<builtin>.reversed": [],
    "_weakrefset._IterationGuard": [],
    "_weakrefset.WeakSet": [],
    "threading.Thread.__init__": [
        "_weakrefset.WeakSet.add",
        "threading.current_thread",
        "threading._make_invoke_excepthook",
        "<builtin>.str",
        "threading.Event.__init__",
        "threading._newname"
    ],
    "threading.Thread._set_tstate_lock": [
        "_thread._set_sentinel"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [
        "_thread.get_native_id"
    ],
    "_threading_local._localimpl": [],
    "_threading_local.local": [],
    "traceback.FrameSummary": [],
    "linecache": [
        "functools",
        "os",
        "tokenize"
    ],
    "traceback.StackSummary": [],
    "traceback.TracebackException": [],
    "typing._collect_type_vars": [
        "<builtin>.tuple",
        "<builtin>.isinstance"
    ],
    "typing._tp_cache": [
        "functools.lru_cache",
        "functools.wraps",
        "functools.lru_cache.decorating_function",
        "functools.singledispatchmethod.__get__._method",
        "_functools.partial",
        "functools._lru_cache_wrapper.wrapper",
        "functools.singledispatch.wrapper"
    ],
    "abc.abstractmethod": [],
    "types._g": [],
    "types._GeneratorWrapper": [],
    "types._cell_factory": [],
    "types.DynamicClassAttribute": [],
    "types._C": [],
    "abc.abstractproperty": [],
    "abc.ABC": [],
    "abc.abstractclassmethod": [],
    "_py_abc": [
        "_py_abc.ABCMeta",
        "_weakrefset"
    ],
    "abc.ABCMeta": [],
    "abc.abstractstaticmethod": [],
    "operator.attrgetter": [],
    "operator.methodcaller": [],
    "operator.itemgetter": [],
    "typing._type_check": [
        "typing.ForwardRef.__init__",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "<builtin>.bool": [],
    "bpytop.Color.truecolor_to_256": [
        "<builtin>.round"
    ],
    "<builtin>.all": [],
    "<builtin>.hex": [],
    "queue.PriorityQueue": [],
    "queue._PySimpleQueue": [],
    "queue.LifoQueue": [],
    "queue.Queue": [],
    "_queue": [],
    "queue.Full": [],
    "queue.Empty": [],
    "pickle._Unframer": [],
    "pickle._load": [
        "pickle._Unpickler.load",
        "pickle._Unpickler.__init__"
    ],
    "argparse.ArgumentParser.print_help": [
        "argparse.ArgumentParser._print_message",
        "argparse.ArgumentParser.format_help"
    ],
    "pickle._Framer": [],
    "re.match": [
        "re._compile"
    ],
    "_pickle": [],
    "codecs": [
        "codecs.BufferedIncrementalDecoder",
        "codecs.StreamRecoder",
        "codecs.StreamWriter",
        "codecs.EncodedFile",
        "codecs.BufferedIncrementalEncoder",
        "codecs.StreamReader",
        "codecs.StreamReaderWriter",
        "<builtin>.SystemError",
        "codecs.IncrementalEncoder",
        "encodings",
        "codecs.IncrementalDecoder",
        "codecs.CodecInfo",
        "codecs.Codec"
    ],
    "pickle.UnpicklingError": [],
    "pickle.PickleError": [],
    "pickle._test": [
        "doctest.testmod",
        "doctest"
    ],
    "pprint": [
        "types",
        "collections",
        "pprint._safe_key",
        "pprint.PrettyPrinter",
        "io",
        "pprint._perfcheck",
        "<builtin>.frozenset",
        "<builtin>.type",
        "re"
    ],
    "pickle.PicklingError": [],
    "pickle._Stop": [],
    "argparse.FileType.__init__": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "_compat_pickle": [
        "<builtin>.dict",
        "<builtin>.len"
    ],
    "pickle._Unpickler": [],
    "_struct": [],
    "socket.socket": [
        "<builtin>.hasattr"
    ],
    "_socket": [],
    "socket.SocketIO": [],
    "sys.platform.lower": [],
    "socket._GiveupOnSendfile": [],
    "copy.Error": [],
    "locale": [
        "collections.abc",
        "locale._test",
        "sys.platform.startswith",
        "functools",
        "functools.wraps",
        "<builtin>.sorted",
        "<builtin>.print",
        "<builtin>.globals",
        "locale._print_locale",
        "encodings",
        "re.compile",
        "<builtin>.hasattr",
        "_functools.partial",
        "re",
        "encodings.aliases"
    ],
    "gettext.NullTranslations": [],
    "posixpath.join": [
        "sys.path.endswith",
        "sys.base_prefix.endswith",
        "<builtin>.map",
        "posixpath._get_sep",
        "genericpath._check_arg_types"
    ],
    "gettext.GNUTranslations": [],
    "argparse.HelpFormatter._Section": [],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "genericpath": [
        "stat",
        "os"
    ],
    "sys.getfilesystemencodeerrors": [],
    "sys.getfilesystemencoding": [],
    "os._createenviron.check_str": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "_thread.RLock": [],
    "threading._RLock.__init__": [
        "_thread.allocate_lock"
    ],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.NullHandler.createLock",
        "logging._checkLevel",
        "logging.Handler.createLock",
        "logging._addHandlerRef",
        "logging.Filterer.__init__"
    ],
    "sys.base_prefix.replace": [],
    "sys.path.replace": [],
    "<builtin>.property": [],
    "weakref.WeakValueDictionary": [],
    "weakref.WeakKeyDictionary": [],
    "weakref.WeakMethod": [],
    "weakref.KeyedRef": [],
    "weakref.finalize": [
        "weakref.finalize._Info",
        "itertools.count"
    ],
    "urllib.error.ContentTooShortError": [],
    "urllib.error.URLError": [],
    "urllib.error.HTTPError": [],
    "urllib.parse._NetlocResultMixinBytes": [],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse.DefragResult": [],
    "urllib.parse.Quoter": [],
    "urllib.parse._NetlocResultMixinStr": [],
    "<builtin>.frozenset": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse._NetlocResultMixinBase": [],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.ParseResult": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._fix_result_transcoding": [],
    "http.client.ImproperConnectionState": [],
    "http.client.HTTPSConnection": [],
    "http.client.InvalidURL": [],
    "http.client.IncompleteRead": [],
    "http.client.CannotSendRequest": [],
    "http.client.UnimplementedFileMode": [],
    "http.client.RemoteDisconnected": [],
    "http.client.HTTPMessage": [],
    "http.client.UnknownProtocol": [],
    "http": [
        "http.HTTPStatus",
        "enum"
    ],
    "http.client.LineTooLong": [],
    "http.client.ResponseNotReady": [],
    "http.client.UnknownTransferEncoding": [],
    "http.client.HTTPResponse": [],
    "http.client.HTTPException": [],
    "email.message": [
        "email.charset",
        "email.message.MIMEPart",
        "email.errors",
        "email.message.EmailMessage",
        "email.utils",
        "io",
        "email.message.Message",
        "email._encoded_words",
        "re.compile",
        "uu",
        "re",
        "quopri",
        "email._policybase"
    ],
    "email.parser": [
        "email.parser.HeaderParser",
        "email.parser.Parser",
        "email.feedparser",
        "email.parser.BytesParser",
        "io",
        "email.parser.BytesHeaderParser",
        "email._policybase"
    ],
    "http.client.BadStatusLine": [],
    "http.client.CannotSendHeader": [],
    "http.client.NotConnected": [],
    "http.client.HTTPConnection": [],
    "re._compile": [
        "<builtin>.ValueError",
        "<builtin>.next",
        "<builtin>.iter",
        "sre_compile.isstring",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.len",
        "sre_compile.compile",
        "<builtin>.isinstance"
    ],
    "binascii": [],
    "base64.main": [
        "base64.encode",
        "base64.test",
        "<builtin>.print",
        "getopt",
        "base64.decode",
        "sys.exit",
        "<builtin>.open"
    ],
    "tempfile.SpooledTemporaryFile": [],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile._RandomNameSequence": [],
    "tempfile.TemporaryDirectory": [],
    "tempfile._TemporaryFileCloser": [],
    "urllib.response.addinfo": [],
    "urllib.response.addinfourl": [],
    "urllib.response.addclosehook": [],
    "urllib.response.addbase": [],
    "ssl._TLSContentType": [],
    "ssl.SSLSocket": [
        "ssl._sslcopydoc"
    ],
    "ssl.SSLObject": [],
    "ssl._TLSMessageType": [],
    "ssl.Purpose": [],
    "ssl.SSLContext": [
        "<builtin>.hasattr"
    ],
    "ssl.TLSVersion": [],
    "ssl._ASN1Object": [],
    "_ssl": [],
    "ssl._TLSAlertType": [],
    "sre_constants": [
        "<builtin>.print",
        "sre_constants.dump",
        "sre_constants._NamedIntConstant",
        "<builtin>.open",
        "sre_constants._makecodes",
        "sre_constants.error"
    ],
    "_functools._lru_cache_wrapper": [],
    "enum.IntFlag": [],
    "enum.EnumMeta": [],
    "enum.auto": [],
    "enum.Enum": [
        "types.DynamicClassAttribute"
    ],
    "enum.Flag": [],
    "enum.IntEnum": [],
    "enum._EnumDict": [],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "sre_parse.Tokenizer": [],
    "sre_parse.Verbose": [],
    "<builtin>.ord": [],
    "sre_parse.State": [],
    "sre_parse.SubPattern": [],
    "functools.singledispatch.dispatch": [
        "_py_abc.get_cache_token",
        "collections.ChainMap.clear",
        "_collections_abc.MutableMapping.clear",
        "_abc.get_cache_token",
        "functools._find_impl"
    ],
    "_sre.compile": [],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.seek",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.__init__",
        "sre_parse._parse_sub",
        "sre_parse.State.__init__",
        "sre_parse.SubPattern.dump"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info"
    ],
    "sre_compile.dis": [
        "sre_compile.dis.dis_",
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "functools._make_key": [
        "functools._HashedSeq.__init__"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "ntpath.splitdrive": [
        "sys.base_prefix.replace",
        "<builtin>.len",
        "<builtin>.isinstance",
        "sys.stdin.buffer.replace",
        "sys.path.replace"
    ],
    "gettext.dgettext": [
        "gettext.translation",
        "gettext.NullTranslations.gettext"
    ],
    "sys.stdin.buffer.rfind": [],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super"
    ],
    "threading.Condition.notify_all": [
        "threading.Condition.notify",
        "<builtin>.len"
    ],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "<builtin>.delattr": [],
    "argparse.ArgumentParser._parse_known_args": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_positional_actions",
        "gettext.gettext",
        "<builtin>.getattr",
        "<builtin>.max",
        "<builtin>.iter",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "argparse.ArgumentParser._get_value",
        "<builtin>.setattr",
        "<builtin>.min",
        "<builtin>.enumerate",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.set",
        "argparse.ArgumentParser._parse_optional",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "argparse._get_action_name"
    ],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message",
        "sys.exit"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser.format_usage",
        "argparse.ArgumentParser._print_message"
    ],
    "threading.Event.clear": [],
    "time.sleep": [],
    "shutil.which": [
        "<builtin>.any",
        "posixpath.join",
        "posixpath.dirname",
        "ntpath.dirname",
        "<builtin>.set",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.normcase",
        "shutil._access_check",
        "posixpath.normcase"
    ],
    "bpytop.Draw.clear": [],
    "bpytop.Init.draw_bg": [
        "random.Random.randint",
        "time.sleep",
        "bpytop.Mv.to",
        "bpytop.Graph.__init__",
        "bpytop.Draw.out",
        "<builtin>.range",
        "bpytop.Draw.buffer"
    ],
    "threading.Thread.start": [
        "<builtin>.RuntimeError",
        "threading.Event.is_set",
        "_thread.start_new_thread",
        "threading.Event.wait"
    ],
    "bpytop.process_keys": [
        "bpytop.Collector.collect",
        "<builtin>.len",
        "bpytop.Menu.options",
        "bpytop.Menu.help",
        "bpytop.Draw.clear",
        "logging.Logger.error",
        "bpytop.ProcBox.selector",
        "psutil.pid_exists",
        "bpytop.Key.get",
        "bpytop.Menu.main",
        "bpytop.Box.draw_update_ms",
        "bpytop.Key.get_mouse",
        "bpytop.ProcCollector.sorting",
        "bpytop.Term.refresh",
        "threading.Event.wait",
        "<builtin>.list",
        "bpytop.clean_quit",
        "bpytop.Key.has_key",
        "logging.Logger.exception",
        "bpytop.NetCollector.switch"
    ],
    "bpytop.Timer.left": [
        "bpytop.Timer.stamp",
        "time.time"
    ],
    "bpytop.Key.input_wait": [
        "threading.Event.is_set",
        "bpytop.Draw.now",
        "threading.Event.clear",
        "threading.Event.wait"
    ],
    "bpytop.Timer.not_zero": [
        "time.time"
    ],
    "bpytop.Timer.stamp": [
        "time.time"
    ],
    "sys.stdin.fileno": [],
    "random.Random.randint": [
        "random.Random.randrange"
    ],
    "bpytop.Banner.draw": [
        "bpytop.Mv.to",
        "<builtin>.enumerate",
        "bpytop.Draw.out"
    ],
    "bpytop.Mv.to": [],
    "bpytop.Graph.__init__": [
        "bpytop.min_max",
        "bpytop.Graph._create",
        "<builtin>.min",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "bpytop.Key.has_key": [
        "<builtin>.bool"
    ],
    "bpytop.Key.last": [],
    "<builtin>.min": [],
    "bpytop.Timer.finish": [
        "bpytop.Key.break_wait",
        "time.time"
    ],
    "bpytop.create_box": [
        "bpytop.Mv.to",
        "bpytop.Mv.right",
        "<builtin>.range"
    ],
    "bpytop.Box.empty_bg": [
        "bpytop.Mv.left",
        "bpytop.Banner.draw",
        "bpytop.Mv.down",
        "bpytop.Mv.right"
    ],
    "bpytop.Box.draw_clock": [
        "time.tzset",
        "bpytop.Mv.to",
        "time.strftime",
        "bpytop.Draw.out",
        "psutil.sensors_battery",
        "<builtin>.len",
        "<builtin>.hasattr",
        "bpytop.Draw.buffer"
    ],
    "bpytop.Box.draw_update_ms": [
        "bpytop.Draw.clear",
        "bpytop.Mv.to",
        "bpytop.Draw.out",
        "psutil.sensors_battery",
        "<builtin>.len",
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "<builtin>.hasattr"
    ],
    "threading.Condition.wait": [
        "_thread.allocate_lock",
        "threading.Condition._is_owned",
        "threading.Condition._acquire_restore",
        "<builtin>.RuntimeError",
        "threading.Condition._release_save"
    ],
    "bpytop.Theme._load_theme": [
        "logging.Logger.warning",
        "bpytop.Draw.now",
        "bpytop.Color.fg",
        "bpytop.Theme._load_file",
        "bpytop.Color.__init__",
        "<builtin>.list",
        "<builtin>.setattr",
        "<builtin>.range",
        "<builtin>.getattr"
    ],
    "bpytop.Theme.refresh": [
        "logging.Logger.exception",
        "<builtin>.str"
    ],
    "_thread.interrupt_main": [],
    "bpytop.Key.stop": [
        "threading.Thread.is_alive",
        "threading._DummyThread.is_alive",
        "threading.Thread.join",
        "threading._DummyThread.join"
    ],
    "bpytop.Collector.stop": [
        "threading.Thread.is_alive",
        "threading._DummyThread.join",
        "threading.Event.set",
        "threading._DummyThread.is_alive",
        "threading.Thread.join"
    ],
    "logging.Manager._fixupParents": [
        "<builtin>.isinstance",
        "logging.PlaceHolder.__init__"
    ],
    "logging.Manager._fixupChildren": [
        "<builtin>.len"
    ],
    "_bz2": [],
    "_compression": [
        "io",
        "_compression.DecompressReader",
        "_compression.BaseStream"
    ],
    "bz2.BZ2File": [],
    "_lzma": [],
    "lzma.LZMAFile": [],
    "psutil.cpu_times_percent.calculate": [
        "psutil._cpu_tot_time",
        "_psosx.scputimes",
        "<builtin>.max",
        "<builtin>.min",
        "psutil._cpu_times_deltas",
        "<builtin>.round"
    ],
    "collections.defaultdict": [],
    "_common.shwtemp": [],
    "psutil._pslinux.sensors_temperatures": [
        "collections.defaultdict",
        "<builtin>.float",
        "posixpath.join",
        "_common.debug",
        "<builtin>.sorted",
        "ntpath.basename",
        "posixpath.basename",
        "_common.cat",
        "_common.bcat",
        "<builtin>.dict",
        "posixpath.dirname",
        "ntpath.dirname",
        "<builtin>.set",
        "re.compile",
        "ntpath.join"
    ],
    "psutil._psbsd.sensors_temperatures": [
        "_common.shwtemp",
        "_collections.defaultdict",
        "_psutil_bsd.sensors_cpu_temperature",
        "<builtin>.range",
        "psutil._psbsd.cpu_count_logical"
    ],
    "psutil.sensors_temperatures.convert": [
        "<builtin>.float"
    ],
    "_psosx.sensors_temperatures": [],
    "subprocess.run": [
        "subprocess.Popen.__init__",
        "<builtin>.ValueError",
        "subprocess.CalledProcessError.__init__",
        "subprocess.CompletedProcess.__init__"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "doctest.testmod": [
        "doctest.DebugRunner.run",
        "sys.modules.get",
        "doctest.DocTestRunner.run",
        "doctest.DocTestRunner.summarize",
        "doctest.DocTestFinder.find",
        "<builtin>.TypeError",
        "doctest.DocTestFinder.__init__",
        "doctest.DocTestRunner.merge",
        "inspect.ismodule",
        "doctest.DocTestRunner.__init__"
    ],
    "doctest": [
        "difflib",
        "doctest.DocTestParser",
        "inspect",
        "doctest._SpoofOut",
        "io",
        "doctest._TestClass",
        "os",
        "unittest",
        "doctest.OutputChecker",
        "doctest.DocTestFinder",
        "doctest._test",
        "collections.namedtuple",
        "doctest._OutputRedirectingPdb",
        "linecache",
        "doctest.DocFileCase",
        "sys.exit",
        "re",
        "doctest.DocTestCase",
        "doctest.UnexpectedException",
        "doctest.DocTestRunner",
        "doctest.SkipDocTestCase",
        "doctest._DocTestSuite",
        "doctest.DocTest",
        "doctest.register_optionflag",
        "doctest.DocTestFailure",
        "__future__",
        "collections",
        "doctest.Example",
        "traceback",
        "doctest.DebugRunner"
    ],
    "_heapq": [],
    "reprlib.Repr.__init__": [],
    "reprlib.Repr": [],
    "argparse.HelpFormatter.__init__": [
        "shutil.get_terminal_size",
        "<builtin>.max",
        "<builtin>.min",
        "re.compile",
        "argparse.HelpFormatter._Section.__init__"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler"
    ],
    "_psutil_windows.cpu_count_logical": [],
    "_common.open_binary": [],
    "_common.get_procfs_path": [],
    "_common.open_text": [],
    "subprocess.Popen.__init__": [
        "io.TextIOWrapper",
        "<builtin>.ValueError",
        "subprocess.Popen._execute_child",
        "<builtin>.filter",
        "io.open",
        "warnings.warn",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.bool",
        "<builtin>.isinstance",
        "subprocess._cleanup",
        "subprocess.Popen._get_handles",
        "msvcrt.open_osfhandle"
    ],
    "subprocess.Popen.communicate": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "sys.stdout.read",
        "lzma.LZMAFile.read",
        "http.client.HTTPResponse.close",
        "bz2.BZ2File.close",
        "<builtin>.min",
        "bz2.BZ2File.read",
        "subprocess.Popen._wait",
        "http.client.HTTPResponse.read",
        "subprocess.Popen._communicate",
        "zipfile.ZipExtFile.read",
        "asyncio.windows_utils.PipeHandle.close",
        "<builtin>.ValueError",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen._remaining_time",
        "gzip.GzipFile.read",
        "subprocess.Popen.wait",
        "gzip.GzipFile.close",
        "sys.stdout.close",
        "time.monotonic",
        "zipfile._ZipWriteFile.close"
    ],
    "_psutil_sunos.cpu_count_cores": [],
    "_psutil_bsd.cpu_topology": [],
    "_psutil_windows.cpu_count_cores": [],
    "_psutil_bsd.cpu_count_logical": [],
    "bpytop.strtobool": [
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "warnings._add_filter": [
        "_warnings.filters.remove",
        "_warnings.filters.append",
        "_warnings.filters.insert",
        "_warnings._filters_mutated"
    ],
    "warnings._setoption": [
        "warnings._getcategory",
        "warnings._getaction",
        "<builtin>.len",
        "warnings.filterwarnings",
        "re.escape",
        "<builtin>.int",
        "re",
        "sys.warnoptions.split"
    ],
    "<builtin>.issubclass": [],
    "_collections.deque": [],
    "io.StringIO": [],
    "logging.<lambda1>": [
        "sys._getframe"
    ],
    "traceback.print_stack": [
        "traceback.extract_stack",
        "traceback.print_list",
        "sys._getframe"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.NullHandler.handle",
        "logging.Handler.handle",
        "sys.stderr.write"
    ],
    "<builtin>.KeyError": [],
    "logging.LogRecord.__init__": [
        "threading.current_thread",
        "ntpath.basename",
        "posixpath.basename",
        "sys.modules.get",
        "time.time",
        "logging.getLevelName",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.int",
        "ntpath.splitext",
        "posixpath.splitext"
    ],
    "psutil._pssunos.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._pswindows.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._pswindows.retry_error_partial_copy": [
        "functools.wraps",
        "_functools.partial"
    ],
    "_psutil_bsd.per_cpu_times": [],
    "_psutil_sunos.per_cpu_times": [],
    "_psutil_windows.per_cpu_times": [],
    "_psutil_bsd.cpu_times": [],
    "_psutil_aix.per_cpu_times": [],
    "_psutil_windows.cpu_times": [],
    "<builtin>.float": [],
    "psutil._psbsd.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "_elementtree": [],
    "xml.etree.ElementTree.XMLParser": [],
    "xml.etree.ElementTree.QName": [],
    "xml.etree.ElementTree.ElementTree": [],
    "xml.etree.ElementTree._ListDataStream": [],
    "xml.etree.ElementTree.C14NWriterTarget": [],
    "xml.etree.ElementTree.Element": [],
    "xml.etree.ElementPath": [
        "xml.etree.ElementPath._SelectorContext",
        "re",
        "re.compile"
    ],
    "xml.etree.ElementTree.XMLPullParser": [],
    "xml.etree.ElementTree.TreeBuilder": [],
    "xml.etree.ElementTree.ParseError": [],
    "<builtin>.locals": [],
    "psutil.process_iter.remove": [],
    "psutil.pids": [
        "psutil._pssunos.pids",
        "psutil._psbsd.pids",
        "psutil._psaix.pids",
        "<builtin>.sorted",
        "_psosx.pids",
        "psutil._pslinux.pids"
    ],
    "psutil.process_iter.add": [
        "psutil.Process.as_dict",
        "psutil.Process.__init__"
    ],
    "psutil._pslinux.Process.uids": [
        "_common.puids",
        "<builtin>.int",
        "psutil._pslinux.Process._read_status_file"
    ],
    "psutil._psbsd.Process.uids": [
        "_common.puids",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pssunos.Process.uids": [
        "_common.puids",
        "psutil._pssunos.Process._proc_basic_info",
        "psutil._pssunos.Process._proc_cred"
    ],
    "psutil._psaix.Process.uids": [
        "_common.puids",
        "psutil._psaix.Process._proc_cred"
    ],
    "psutil._common.NoSuchProcess": [],
    "psutil._common.memoize": [
        "functools.wraps",
        "_functools.partial"
    ],
    "psutil._common.AccessDenied": [],
    "psutil._common.NicDuplex": [],
    "psutil._common.Error": [],
    "psutil._common.BatteryTime": [],
    "psutil._common._WrapNumbers.__init__": [],
    "os.getenv": [],
    "psutil._common._WrapNumbers": [],
    "psutil._common.ZombieProcess": [],
    "psutil._common.TimeoutExpired": [],
    "ctypes.c_wchar_p": [],
    "ctypes.c_ubyte": [],
    "ctypes.c_longlong": [],
    "ctypes.c_uint": [],
    "ctypes.HRESULT": [],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.c_bool": [],
    "ctypes._endian": [
        "ctypes",
        "ctypes._endian._swapped_meta",
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "ctypes._endian.BigEndianStructure",
        "ctypes._endian.LittleEndianStructure"
    ],
    "ctypes.LibraryLoader": [],
    "ctypes._check_size": [
        "struct",
        "<builtin>.SystemError"
    ],
    "ctypes.CFUNCTYPE": [
        "ctypes.CFUNCTYPE.CFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.PyDLL": [],
    "ctypes.c_wchar": [],
    "ctypes.c_ushort": [],
    "ctypes.CDLL": [],
    "ctypes.c_double": [],
    "ctypes.c_char_p": [],
    "ctypes.c_int": [],
    "ctypes.c_char": [],
    "ctypes.OleDLL": [],
    "ctypes.WinDLL": [],
    "ctypes.c_float": [],
    "_ctypes": [],
    "ctypes.py_object": [],
    "ctypes._reset_cache": [],
    "ctypes.c_long": [],
    "ctypes.c_byte": [],
    "ctypes.c_longdouble": [],
    "<builtin>.Exception": [],
    "ctypes.c_short": [],
    "ctypes.c_void_p": [],
    "ctypes.PYFUNCTYPE": [
        "ctypes.PYFUNCTYPE.CFunctionType"
    ],
    "ctypes.c_ulonglong": [],
    "ctypes.c_ulong": [],
    "psutil._pslinux.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "nt._getfullpathname": [],
    "ctypes.CDLL.__init__._FuncPtr": [],
    "traceback.print_exception": [
        "<builtin>.print",
        "traceback.TracebackException.format",
        "<builtin>.type",
        "traceback.TracebackException.__init__"
    ],
    "psutil._psaix.wrap_exceptions": [
        "functools.wraps",
        "_functools.partial"
    ],
    "random.Random.vonmisesvariate": [],
    "random.Random.normalvariate": [],
    "random.Random.triangular": [],
    "time.perf_counter": [],
    "<builtin>.max": [],
    "random.Random.betavariate": [
        "random.Random.gammavariate"
    ],
    "random.Random.gammavariate": [
        "<builtin>.ValueError"
    ],
    "random.Random.lognormvariate": [
        "random.Random.normalvariate"
    ],
    "random.Random.gauss": [],
    "logging.error": [
        "logging.basicConfig",
        "logging.Logger.error",
        "<builtin>.len"
    ],
    "_blake2": [],
    "_sha3": [],
    "_sha1": [],
    "_md5": [],
    "_sha256": [],
    "posixpath.abspath": [
        "posixpath.join",
        "posixpath.isabs",
        "<builtin>.isinstance",
        "posixpath.normpath"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "ntpath.abspath": [
        "ntpath._abspath_fallback",
        "nt._getfullpathname",
        "ntpath.normpath"
    ],
    "_weakref.ref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "operator.itemgetter.__init__": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "threading._newname": [],
    "_thread._set_sentinel": [],
    "_thread.get_ident": [],
    "_thread.get_native_id": [],
    "tokenize": [
        "tokenize.any",
        "tokenize.Untokenizer",
        "tokenize.main",
        "codecs",
        "<builtin>.sorted",
        "collections",
        "tokenize._all_string_prefixes",
        "io",
        "tokenize.maybe",
        "tokenize.group",
        "<builtin>.map",
        "<builtin>.set",
        "token",
        "re.compile",
        "tokenize.TokenError",
        "tokenize.StopTokenizing",
        "re",
        "tokenize.TokenInfo"
    ],
    "_py_abc.ABCMeta": [],
    "typing.ForwardRef.__init__": [
        "<builtin>.SyntaxError",
        "<builtin>.isinstance",
        "<builtin>.compile",
        "<builtin>.TypeError"
    ],
    "pickle._Unpickler.load": [
        "pickle._Unframer.__init__",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "pickle._Unpickler.__init__": [
        "<builtin>.iter"
    ],
    "argparse.ArgumentParser._print_message": [
        "sys.stderr.write",
        "sys.stdout.write"
    ],
    "argparse.ArgumentParser.format_help": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.StreamRecoder": [],
    "codecs.StreamWriter": [],
    "codecs.EncodedFile": [
        "codecs.StreamRecoder.__init__"
    ],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.StreamReader": [],
    "codecs.StreamReaderWriter": [],
    "<builtin>.SystemError": [],
    "codecs.IncrementalEncoder": [],
    "encodings": [
        "encodings.CodecRegistryError",
        "codecs"
    ],
    "codecs.IncrementalDecoder": [],
    "codecs.CodecInfo": [],
    "codecs.Codec": [],
    "pprint._safe_key": [],
    "pprint.PrettyPrinter": [],
    "pprint._perfcheck": [
        "time.perf_counter",
        "<builtin>.print",
        "pprint._safe_repr",
        "pprint.PrettyPrinter.pformat",
        "pprint.PrettyPrinter.__init__"
    ],
    "locale._test": [
        "locale.str",
        "locale.atof",
        "<builtin>.print",
        "locale.atoi",
        "locale.format_string",
        "locale.setlocale"
    ],
    "locale._print_locale": [
        "locale.getlocale",
        "<builtin>.print",
        "locale._print_locale._init_categories",
        "locale.getdefaultlocale",
        "locale.resetlocale",
        "locale.setlocale"
    ],
    "encodings.aliases": [],
    "sys.path.endswith": [],
    "sys.base_prefix.endswith": [],
    "logging.Filterer.__init__": [],
    "logging.NullHandler.createLock": [],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "weakref.ref",
        "logging._releaseLock"
    ],
    "weakref.finalize._Info": [],
    "http.HTTPStatus": [],
    "email.charset": [
        "email.encoders",
        "email.errors",
        "email.charset.Charset",
        "functools",
        "email.quoprimime",
        "email.base64mime"
    ],
    "email.message.MIMEPart": [],
    "email.errors": [
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.HeaderDefect",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.MultipartConversionError",
        "email.errors.InvalidHeaderDefect",
        "email.errors.BoundaryError",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.HeaderParseError",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.MessageError",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.UndecodableBytesDefect",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.MessageDefect",
        "email.errors.CharsetError",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.MessageParseError"
    ],
    "email.message.EmailMessage": [],
    "email.utils": [
        "email.charset",
        "os",
        "re.compile",
        "random",
        "email._parseaddr",
        "socket",
        "urllib.parse",
        "datetime",
        "re"
    ],
    "email.message.Message": [
        "email.iterators"
    ],
    "email._encoded_words": [
        "string",
        "base64",
        "email.errors",
        "functools",
        "email._encoded_words._QByteMap",
        "<builtin>.ord",
        "re.compile",
        "binascii",
        "re"
    ],
    "uu": [
        "binascii",
        "os",
        "uu.test",
        "uu.Error"
    ],
    "quopri": [
        "binascii",
        "quopri.main"
    ],
    "email._policybase": [
        "email.charset",
        "email.header",
        "email._policybase._PolicyBase.__init__",
        "email.utils",
        "email._policybase._PolicyBase",
        "email._policybase.Compat32",
        "email._policybase.Policy",
        "abc"
    ],
    "email.parser.HeaderParser": [],
    "email.parser.Parser": [],
    "email.feedparser": [
        "email.errors",
        "email.feedparser.BytesFeedParser",
        "<builtin>.object",
        "collections",
        "email.feedparser.FeedParser",
        "email.feedparser.BufferedSubFile",
        "io",
        "re.compile",
        "re",
        "email._policybase"
    ],
    "email.parser.BytesParser": [],
    "email.parser.BytesHeaderParser": [],
    "<builtin>.next": [],
    "<builtin>.iter": [],
    "base64.encode": [
        "sys.stdout.buffer.write",
        "sys.stdin.buffer.read",
        "<builtin>.len"
    ],
    "base64.test": [
        "<builtin>.print",
        "base64.encodebytes",
        "<builtin>.repr",
        "base64.decodebytes"
    ],
    "getopt": [
        "getopt.GetoptError",
        "os",
        "<builtin>.print",
        "gettext",
        "getopt.getopt"
    ],
    "base64.decode": [
        "sys.stdin.buffer.readline",
        "sys.stdout.buffer.write"
    ],
    "sys.exit": [],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "sre_constants.dump": [
        "<builtin>.sorted"
    ],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<builtin>.enumerate"
    ],
    "sre_constants.error": [],
    "_py_abc.get_cache_token": [],
    "collections.ChainMap.clear": [],
    "_collections_abc.MutableMapping.clear": [
        "_collections_abc.MutableMapping.popitem",
        "weakref.WeakValueDictionary.popitem",
        "weakref.WeakKeyDictionary.popitem",
        "collections.ChainMap.popitem"
    ],
    "_abc.get_cache_token": [],
    "functools._find_impl": [
        "functools._compose_mro",
        "<builtin>.issubclass",
        "<builtin>.RuntimeError"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "sre_parse.Tokenizer.__next",
        "<builtin>.str"
    ],
    "sre_parse._parse_sub": [
        "sre_parse._parse",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.tell",
        "<builtin>.len",
        "sre_parse.SubPattern.append",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "<builtin>.print",
        "<builtin>.str"
    ],
    "sre_compile._compile": [
        "_sre.ascii_iscased",
        "_sre.ascii_tolower",
        "_sre.unicode_iscased",
        "sre_compile._optimize_charset",
        "sre_constants.error.__init__",
        "sre_compile._compile",
        "sre_compile._simple",
        "sre_compile._combine_flags",
        "sre_compile._compile_charset",
        "_sre.unicode_tolower"
    ],
    "sre_compile._compile_info": [
        "sre_parse.SubPattern.getwidth",
        "sre_compile._get_literal_prefix",
        "sre_compile._generate_overlap_table",
        "sre_compile._optimize_charset",
        "<builtin>.min",
        "sre_compile._compile_charset",
        "<builtin>.len",
        "sre_compile._get_charset_prefix"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.chr",
        "<builtin>.ValueError",
        "<builtin>.bin",
        "<builtin>.list",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.str",
        "<builtin>.map",
        "<builtin>.range",
        "sre_compile.dis.dis_",
        "sre_compile.dis.dis_.print_",
        "sre_compile._hex_code"
    ],
    "functools._HashedSeq.__init__": [],
    "sys.stdin.buffer.replace": [],
    "gettext.translation": [
        "posixpath.abspath",
        "warnings.catch_warnings.__init__",
        "copy",
        "warnings",
        "<builtin>.FileNotFoundError",
        "gettext.NullTranslations.__init__",
        "warnings.warn",
        "warnings.filterwarnings",
        "tarfile.TarFile.__iter__",
        "gettext.find",
        "<builtin>.open",
        "ntpath.abspath"
    ],
    "gettext.NullTranslations.gettext": [],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "threading.Condition.notify": [
        "<builtin>.RuntimeError",
        "threading.Condition._is_owned",
        "_collections.deque",
        "itertools.islice"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "argparse.ArgumentParser._match_arguments_partial",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "<builtin>.len",
        "<builtin>.zip"
    ],
    "argparse.ArgumentParser._get_value": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "<builtin>.callable",
        "sys.exc_info",
        "<builtin>.repr",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.str",
        "<builtin>.getattr"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "argparse.ArgumentParser.error",
        "sys.exc_info",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.str",
        "argparse.ArgumentParser.convert_arg_line_to_args",
        "<builtin>.open"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "argparse.ArgumentParser.error",
        "gettext.gettext",
        "argparse.ArgumentParser._get_option_tuples",
        "<builtin>.len"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "gettext.gettext",
        "argparse.ArgumentParser._match_argument"
    ],
    "argparse._get_action_name": [],
    "argparse.ArgumentParser.format_usage": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "<builtin>.any": [],
    "shutil._access_check": [
        "posixpath.isdir",
        "ntpath.exists",
        "posixpath.exists",
        "ntpath.isdir"
    ],
    "threading.Event.is_set": [],
    "_thread.start_new_thread": [],
    "bpytop.Menu.options": [
        "bpytop.Mv.down",
        "bpytop.Draw.now",
        "bpytop.Timer.left",
        "bpytop.Collector.collect",
        "bpytop.Mv.right",
        "bpytop.Key.input_wait",
        "bpytop.Theme.refresh",
        "<builtin>.setattr",
        "bpytop.CpuCollector.get_sensors",
        "<builtin>.min",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.round",
        "logging.Logger.warning",
        "bpytop.Draw.clear",
        "bpytop.Mv.to",
        "<builtin>.enumerate",
        "bpytop.create_box",
        "<builtin>.type",
        "<builtin>.getattr",
        "<builtin>.max",
        "bpytop.Key.get",
        "bpytop.Timer.finish",
        "<builtin>.str",
        "bpytop.Box.draw_update_ms",
        "bpytop.Key.get_mouse",
        "<builtin>.range",
        "bpytop.ProcCollector.sorting",
        "<builtin>.int",
        "bpytop.Term.refresh",
        "bpytop.Fx.uncolor",
        "bpytop.Banner.draw",
        "threading.Event.wait",
        "<builtin>.list",
        "bpytop.Draw.saved_buffer",
        "bpytop.clean_quit",
        "logging.Logger.info",
        "bpytop.Mv.left",
        "bpytop.Timer.not_zero",
        "logging.Logger.setLevel",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Menu.help": [
        "bpytop.Mv.down",
        "bpytop.Draw.now",
        "bpytop.Timer.left",
        "bpytop.Collector.collect",
        "bpytop.Mv.right",
        "bpytop.Key.input_wait",
        "<builtin>.len",
        "logging.Logger.warning",
        "bpytop.Mv.to",
        "<builtin>.enumerate",
        "bpytop.create_box",
        "bpytop.Key.get",
        "bpytop.Key.get_mouse",
        "<builtin>.range",
        "bpytop.Banner.draw",
        "bpytop.Fx.uncolor",
        "threading.Event.wait",
        "bpytop.Draw.saved_buffer",
        "bpytop.clean_quit",
        "bpytop.Mv.left",
        "bpytop.Timer.not_zero",
        "bpytop.Timer.stamp"
    ],
    "bpytop.ProcBox.selector": [
        "<builtin>.round",
        "bpytop.Collector.collect"
    ],
    "psutil.pid_exists": [
        "psutil._psaix.pid_exists",
        "psutil.pids",
        "_psosx.pid_exists",
        "psutil._pslinux.pid_exists",
        "psutil._pssunos.pid_exists",
        "psutil._psbsd.pid_exists"
    ],
    "bpytop.Key.get": [],
    "bpytop.Menu.main": [
        "bpytop.Mv.down",
        "bpytop.Draw.now",
        "bpytop.Timer.left",
        "bpytop.Collector.collect",
        "bpytop.Mv.right",
        "bpytop.Key.input_wait",
        "<builtin>.len",
        "bpytop.Menu.options",
        "bpytop.Menu.help",
        "logging.Logger.warning",
        "bpytop.Mv.to",
        "bpytop.Key.mouse_moved",
        "bpytop.Key.get",
        "bpytop.Key.get_mouse",
        "bpytop.Banner.draw",
        "bpytop.Fx.uncolor",
        "threading.Event.wait",
        "<builtin>.list",
        "bpytop.Draw.saved_buffer",
        "bpytop.clean_quit",
        "bpytop.Mv.left",
        "bpytop.Timer.not_zero",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Key.get_mouse": [
        "threading.Event.is_set",
        "threading.Event.clear"
    ],
    "bpytop.ProcCollector.sorting": [
        "<builtin>.len",
        "bpytop.Collector.collect"
    ],
    "bpytop.NetCollector.switch": [
        "<builtin>.len",
        "bpytop.Collector.collect"
    ],
    "random.Random.randrange": [
        "<builtin>.ValueError",
        "random.Random._randbelow_with_getrandbits"
    ],
    "bpytop.min_max": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "bpytop.Graph._create": [
        "bpytop.Mv.down",
        "<builtin>.float",
        "<builtin>.range",
        "<builtin>.len",
        "<builtin>.bool",
        "bpytop.Mv.left",
        "<builtin>.round"
    ],
    "bpytop.Key.break_wait": [
        "time.sleep",
        "threading.Event.clear",
        "threading.Event.set"
    ],
    "time.tzset": [],
    "psutil.sensors_battery": [
        "psutil._pswindows.sensors_battery",
        "psutil._psbsd.sensors_battery",
        "_psosx.sensors_battery",
        "psutil._pslinux.sensors_battery"
    ],
    "threading.Condition._is_owned": [],
    "threading.Condition._acquire_restore": [],
    "threading.Condition._release_save": [],
    "bpytop.Theme._load_file": [
        "logging.Logger.exception",
        "<builtin>.open",
        "<builtin>.str"
    ],
    "threading.Thread.is_alive": [
        "threading.Event.is_set",
        "threading.Thread._wait_for_tstate_lock"
    ],
    "threading._DummyThread.is_alive": [
        "threading.Event.is_set"
    ],
    "threading.Thread.join": [
        "threading.current_thread",
        "<builtin>.max",
        "<builtin>.RuntimeError",
        "threading.Event.is_set",
        "threading.Thread._wait_for_tstate_lock"
    ],
    "threading._DummyThread.join": [],
    "logging.PlaceHolder.__init__": [],
    "_compression.DecompressReader": [],
    "_compression.BaseStream": [],
    "psutil._cpu_tot_time": [
        "<builtin>.getattr",
        "<builtin>.sum"
    ],
    "_psosx.scputimes": [],
    "psutil._cpu_times_deltas": [
        "<builtin>.max",
        "<builtin>.getattr",
        "_psosx.scputimes"
    ],
    "_common.debug": [],
    "_common.cat": [],
    "_common.bcat": [],
    "_collections.defaultdict": [],
    "_psutil_bsd.sensors_cpu_temperature": [],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "doctest.DebugRunner.run": [
        "doctest.DebugRunner.run",
        "doctest.DocTestRunner.run"
    ],
    "sys.modules.get": [],
    "doctest.DocTestRunner.run": [
        "sys.settrace",
        "doctest._OutputRedirectingPdb.__init__",
        "sys.gettrace",
        "doctest._extract_future_flags",
        "doctest.DocTestRunner.__run",
        "pdb.Pdb.reset"
    ],
    "doctest.DocTestRunner.summarize": [
        "<builtin>.print",
        "<builtin>.len"
    ],
    "doctest.DocTestFinder.find": [
        "inspect.getfile",
        "linecache.getlines",
        "<builtin>.ValueError",
        "doctest.DocTestFinder._find",
        "inspect.getmodule",
        "<builtin>.type",
        "<builtin>.getattr",
        "inspect.getsourcefile"
    ],
    "doctest.DocTestFinder.__init__": [],
    "doctest.DocTestRunner.merge": [],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "doctest.DocTestRunner.__init__": [
        "_io.StringIO.__init__",
        "io.StringIO.__init__"
    ],
    "difflib": [
        "collections",
        "difflib._test",
        "collections.namedtuple",
        "difflib.SequenceMatcher",
        "heapq",
        "difflib.Differ",
        "re",
        "difflib.HtmlDiff"
    ],
    "doctest.DocTestParser": [
        "re.compile"
    ],
    "inspect": [
        "inspect.Parameter",
        "functools",
        "inspect._void",
        "warnings",
        "token",
        "<builtin>.hasattr",
        "<builtin>.object",
        "tokenize",
        "os",
        "types",
        "inspect._main",
        "collections.namedtuple",
        "<builtin>.globals",
        "inspect.BoundArguments",
        "linecache",
        "<builtin>.type",
        "inspect._ParameterKind",
        "importlib.machinery",
        "inspect.BlockFinder",
        "re",
        "abc",
        "collections.abc",
        "operator",
        "dis",
        "enum",
        "inspect._empty",
        "inspect.Signature",
        "inspect.EndOfBlock",
        "collections"
    ],
    "doctest._SpoofOut": [],
    "doctest._TestClass": [],
    "unittest": [
        "unittest.case",
        "unittest.signals",
        "unittest.runner",
        "unittest.suite",
        "unittest.async_case",
        "unittest.main",
        "unittest.result",
        "unittest.loader"
    ],
    "doctest.OutputChecker": [],
    "doctest.DocTestFinder": [],
    "doctest._test": [
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "doctest.testmod",
        "sys.path.insert",
        "argparse._ActionsContainer.add_argument",
        "doctest.testfile",
        "ntpath.split",
        "argparse",
        "posixpath.split",
        "<builtin>.__import__"
    ],
    "doctest._OutputRedirectingPdb": [],
    "doctest.DocFileCase": [],
    "doctest.DocTestCase": [],
    "doctest.UnexpectedException": [],
    "doctest.DocTestRunner": [
        "re.compile"
    ],
    "doctest.SkipDocTestCase": [],
    "doctest._DocTestSuite": [],
    "doctest.DocTest": [],
    "doctest.register_optionflag": [
        "<builtin>.len"
    ],
    "doctest.DocTestFailure": [],
    "doctest.Example": [],
    "doctest.DebugRunner": [],
    "shutil.get_terminal_size": [
        "sys.__stdout__.fileno",
        "<builtin>.int"
    ],
    "argparse.HelpFormatter._Section.__init__": [],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "io.TextIOWrapper": [],
    "subprocess.Popen._execute_child": [
        "subprocess.Popen._posix_spawn",
        "_winapi.CreateProcess",
        "subprocess.Popen._close_pipe_fds",
        "os.get_exec_path",
        "<builtin>.map",
        "ntpath.dirname",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.isinstance",
        "subprocess.STARTUPINFO.copy",
        "<builtin>.tuple",
        "<builtin>.bytes",
        "sys.audit",
        "subprocess.list2cmdline",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.getattr",
        "subprocess.STARTUPINFO.__init__",
        "<builtin>.ValueError",
        "_winapi.CloseHandle",
        "posixpath.join",
        "<builtin>.sorted",
        "<builtin>.bytearray",
        "<builtin>.TypeError",
        "subprocess.Popen._filter_handle_list",
        "<builtin>.set",
        "ntpath.join",
        "<builtin>.int",
        "<builtin>.list",
        "warnings.warn",
        "posixpath.dirname",
        "<builtin>.bool",
        "<builtin>.issubclass"
    ],
    "<builtin>.filter": [],
    "io.open": [],
    "warnings.warn": [
        "sys.__dict__.setdefault",
        "<builtin>.TypeError",
        "<builtin>.type",
        "_warnings.warn_explicit",
        "<builtin>.range",
        "<builtin>.isinstance",
        "warnings._is_internal_frame",
        "warnings._next_external_frame",
        "<builtin>.issubclass",
        "sys._getframe"
    ],
    "subprocess._cleanup": [],
    "subprocess.Popen._get_handles": [
        "_winapi.CreatePipe",
        "sys.__stdout__.fileno",
        "_winapi.CloseHandle",
        "msvcrt.get_osfhandle",
        "_winapi.GetStdHandle",
        "subprocess.Popen._get_devnull",
        "subprocess.Popen._make_inheritable",
        "<builtin>.isinstance"
    ],
    "msvcrt.open_osfhandle": [],
    "zipfile.ZipExtFile.close": [
        "zipfile._SharedFile.close",
        "<builtin>.super"
    ],
    "lzma.LZMAFile.close": [],
    "sys.stdout.read": [],
    "lzma.LZMAFile.read": [
        "_compression.BaseStream._check_can_read"
    ],
    "http.client.HTTPResponse.close": [
        "<builtin>.super",
        "http.client.HTTPResponse._close_conn"
    ],
    "bz2.BZ2File.close": [
        "sys.base_prefix.close",
        "tarfile.TarFile.close",
        "sys.path.close",
        "sys.path.write",
        "logging.FileHandler.close",
        "sys.base_prefix.write"
    ],
    "bz2.BZ2File.read": [
        "_compression.BaseStream._check_can_read"
    ],
    "subprocess.Popen._wait": [
        "_winapi.WaitForSingleObject",
        "subprocess.Popen._remaining_time",
        "time.sleep",
        "subprocess.TimeoutExpired.__init__",
        "<builtin>.min",
        "subprocess.Popen._handle_exitstatus",
        "_winapi.GetExitCodeProcess",
        "time.monotonic",
        "<builtin>.int",
        "subprocess.Popen._try_wait"
    ],
    "http.client.HTTPResponse.read": [
        "http.client.HTTPResponse._close_conn",
        "<builtin>.memoryview",
        "http.client.HTTPResponse._readall_chunked",
        "<builtin>.bytearray",
        "http.client.HTTPResponse._safe_read",
        "http.client.HTTPResponse.readinto"
    ],
    "subprocess.Popen._communicate": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "<builtin>.memoryview",
        "subprocess.Popen._translate_newlines",
        "gzip.GzipFile.flush",
        "http.client.HTTPResponse.close",
        "bz2.BZ2File.close",
        "<builtin>.hasattr",
        "<builtin>.len",
        "subprocess.Popen._save_input",
        "threading.Thread.start",
        "subprocess.Popen._check_timeout",
        "threading.Thread.join",
        "selectors._PollLikeSelector.__init__",
        "asyncio.windows_utils.PipeHandle.close",
        "threading.Thread.__init__",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._stdin_write",
        "<builtin>.RuntimeError",
        "sys.stdout.flush",
        "subprocess.Popen._remaining_time",
        "threading.Thread.is_alive",
        "subprocess.TimeoutExpired.__init__",
        "subprocess.Popen.wait",
        "threading._DummyThread.join",
        "gzip.GzipFile.close",
        "threading._DummyThread.is_alive",
        "sys.stdout.close",
        "http.client.HTTPResponse.flush",
        "zipfile._ZipWriteFile.close"
    ],
    "zipfile.ZipExtFile.read": [
        "zipfile.ZipExtFile._read1",
        "<builtin>.len"
    ],
    "asyncio.windows_utils.PipeHandle.close": [],
    "subprocess.Popen._stdin_write": [
        "zipfile.ZipExtFile.close",
        "lzma.LZMAFile.close",
        "bz2.BZ2File.write",
        "xml.etree.ElementTree._ListDataStream.write",
        "_io._IOBase.write",
        "_io._BufferedIOBase.write",
        "gzip.GzipFile.close",
        "sys.stdout.write",
        "asyncio.windows_utils.PipeHandle.close",
        "http.client.HTTPResponse.close",
        "zipfile._ZipWriteFile.write",
        "sys.stdout.close",
        "bz2.BZ2File.close",
        "gzip.GzipFile.write",
        "lzma.LZMAFile.write",
        "zipfile._ZipWriteFile.close"
    ],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "gzip.GzipFile.read": [
        "<builtin>.OSError",
        "_compression.BaseStream._check_not_closed"
    ],
    "subprocess.Popen.wait": [
        "time.monotonic",
        "<builtin>.min",
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time"
    ],
    "gzip.GzipFile.close": [
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "sys.path.write",
        "gzip.write32u",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "sys.stdout.close": [],
    "time.monotonic": [],
    "zipfile._ZipWriteFile.close": [
        "<builtin>.super",
        "<builtin>.RuntimeError",
        "sys.base_prefix.FileHeader",
        "<builtin>.len",
        "sys.path.FileHeader",
        "zipfile.LZMACompressor.flush",
        "zipfile.ZipInfo.FileHeader"
    ],
    "_warnings.filters.remove": [],
    "_warnings.filters.append": [],
    "_warnings.filters.insert": [],
    "_warnings._filters_mutated": [],
    "warnings._getcategory": [
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<builtin>.issubclass"
    ],
    "warnings._getaction": [],
    "re.escape": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "sys.warnoptions.split": [],
    "traceback.extract_stack": [
        "traceback.StackSummary.extract",
        "traceback.walk_stack",
        "sys._getframe"
    ],
    "traceback.print_list": [
        "traceback.StackSummary.from_list",
        "<builtin>.print",
        "traceback.StackSummary.format"
    ],
    "logging.NullHandler.handle": [],
    "logging.Handler.handle": [
        "logging.StreamHandler.emit",
        "logging.Handler.release",
        "logging.Handler.acquire",
        "unittest.case._CapturingHandler.emit",
        "logging.FileHandler.emit",
        "logging.Handler.emit",
        "logging.Filterer.filter",
        "logging.NullHandler.emit"
    ],
    "sys.stderr.write": [],
    "logging.getLevelName": [],
    "ntpath.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "posixpath.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "xml.etree.ElementPath._SelectorContext": [],
    "psutil._pssunos.pids": [
        "_compat.b",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "psutil._psbsd.pids": [
        "_psutil_bsd.pids",
        "psutil._psbsd._pid_0_exists"
    ],
    "psutil._psaix.pids": [
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "_psosx.pids": [],
    "psutil._pslinux.pids": [
        "_compat.b",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "psutil.Process.as_dict": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "psutil.Process.oneshot",
        "<builtin>.dict",
        "<builtin>.map",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "psutil.Process.__init__": [
        "psutil.Process._init"
    ],
    "_common.puids": [],
    "psutil._pslinux.Process._read_status_file": [
        "_common.open_binary"
    ],
    "psutil._psbsd.Process.oneshot": [
        "_psutil_bsd.proc_oneshot_info",
        "<builtin>.len"
    ],
    "psutil._pssunos.Process._proc_basic_info": [
        "ntpath.exists",
        "posixpath.exists",
        "_common.AccessDenied",
        "<builtin>.len",
        "_psutil_sunos.proc_basic_info"
    ],
    "psutil._pssunos.Process._proc_cred": [
        "_psutil_sunos.proc_cred"
    ],
    "psutil._psaix.Process._proc_cred": [
        "_psutil_aix.proc_cred"
    ],
    "ctypes._endian._swapped_meta": [],
    "ctypes._endian.BigEndianStructure": [],
    "ctypes._endian.LittleEndianStructure": [],
    "ctypes.CFUNCTYPE.CFunctionType": [],
    "ctypes.PYFUNCTYPE.CFunctionType": [],
    "traceback.TracebackException.format": [
        "traceback.TracebackException.format_exception_only",
        "traceback.TracebackException.format"
    ],
    "traceback.TracebackException.__init__": [
        "traceback.StackSummary.extract",
        "traceback.walk_tb",
        "traceback.TracebackException.__init__",
        "traceback._some_str",
        "<builtin>.type",
        "<builtin>.set",
        "<builtin>.str",
        "<builtin>.id",
        "traceback.TracebackException._load_lines",
        "<builtin>.issubclass"
    ],
    "logging.basicConfig": [
        "logging.Logger.removeHandler",
        "logging.FileHandler.__init__",
        "<builtin>.ValueError",
        "logging.Formatter.__init__",
        "logging.Handler.setFormatter",
        "logging.StreamHandler.__init__",
        "logging._releaseLock",
        "logging.Handler.close",
        "logging._acquireLock",
        "<builtin>.len",
        "logging.Logger.addHandler",
        "logging.Logger.setLevel",
        "logging.FileHandler.close"
    ],
    "posixpath.isabs": [
        "sys.path.startswith",
        "posixpath._get_sep",
        "sys.base_prefix.startswith"
    ],
    "posixpath.normpath": [
        "sys.base_prefix.split",
        "sys.path.startswith",
        "sys.path.split",
        "<builtin>.isinstance",
        "sys.base_prefix.startswith"
    ],
    "ntpath._abspath_fallback": [
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.isabs",
        "ntpath.normpath"
    ],
    "ntpath.normpath": [
        "sys.base_prefix.split",
        "sys.path.lstrip",
        "ntpath.splitdrive",
        "sys.base_prefix.lstrip",
        "sys.base_prefix.replace",
        "sys.path.startswith",
        "sys.path.split",
        "<builtin>.len",
        "<builtin>.isinstance",
        "sys.path.replace",
        "sys.base_prefix.startswith"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread.__init__",
        "threading.Event.set",
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id",
        "threading._newname"
    ],
    "tokenize.any": [
        "tokenize.group"
    ],
    "tokenize.Untokenizer": [],
    "tokenize.main": [
        "tokenize.tokenize",
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "tokenize.main.error",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.print",
        "<builtin>.list",
        "builtins.open",
        "argparse",
        "tokenize.main.perror",
        "tokenize._tokenize"
    ],
    "tokenize._all_string_prefixes": [
        "itertools.product",
        "itertools.permutations"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "token": [
        "<builtin>.isinstance",
        "<builtin>.globals"
    ],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.TokenInfo": [],
    "<builtin>.SyntaxError": [],
    "pickle._Unframer.__init__": [],
    "sys.stdout.write": [],
    "codecs.StreamRecoder.__init__": [],
    "encodings.CodecRegistryError": [],
    "pprint._safe_repr": [
        "pprint._recursion",
        "<builtin>.sorted",
        "<builtin>.repr",
        "pprint._safe_repr",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.id",
        "<builtin>.getattr",
        "<builtin>.issubclass"
    ],
    "pprint.PrettyPrinter.pformat": [
        "pprint.PrettyPrinter._format",
        "_io.StringIO"
    ],
    "pprint.PrettyPrinter.__init__": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.bool"
    ],
    "locale.str": [
        "locale._format"
    ],
    "locale.atof": [
        "locale.delocalize"
    ],
    "locale.atoi": [
        "<builtin>.int",
        "locale.delocalize"
    ],
    "locale.format_string": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "locale._format",
        "<builtin>.list"
    ],
    "locale.setlocale": [
        "<builtin>.isinstance",
        "locale._build_localename",
        "locale.setlocale",
        "locale.normalize"
    ],
    "locale.getlocale": [
        "locale._parse_localename",
        "<builtin>.TypeError",
        "locale.setlocale"
    ],
    "locale._print_locale._init_categories": [
        "<builtin>.globals"
    ],
    "locale.getdefaultlocale": [
        "locale._parse_localename",
        "_locale._getdefaultlocale",
        "os",
        "<builtin>.int"
    ],
    "locale.resetlocale": [
        "locale.getdefaultlocale",
        "locale.setlocale",
        "locale._build_localename"
    ],
    "logging._register_at_fork_reinit_lock": [
        "_weakrefset.WeakSet.add",
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "weakref.ref": [],
    "email.encoders": [
        "base64",
        "quopri"
    ],
    "email.charset.Charset": [],
    "email.quoprimime": [
        "<builtin>.chr",
        "string",
        "<builtin>.ord",
        "<builtin>.range",
        "re"
    ],
    "email.base64mime": [
        "binascii",
        "base64"
    ],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.BoundaryError": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.HeaderParseError": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MessageError": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.MessageDefect": [],
    "email.errors.CharsetError": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MessageParseError": [],
    "email._parseaddr": [
        "email._parseaddr.AddrlistClass",
        "calendar",
        "email._parseaddr.AddressList"
    ],
    "email.iterators": [
        "io"
    ],
    "email._encoded_words._QByteMap": [],
    "uu.test": [
        "uu.encode",
        "optparse.OptionParser.parse_args",
        "<builtin>.print",
        "optparse.OptionContainer.add_option",
        "optparse",
        "optparse.OptionParser.__init__",
        "optparse.OptionParser.error",
        "<builtin>.len",
        "sys.exit",
        "uu.decode",
        "<builtin>.isinstance",
        "<builtin>.open"
    ],
    "uu.Error": [],
    "quopri.main": [
        "quopri.decode",
        "<builtin>.print",
        "getopt",
        "quopri.encode",
        "sys.stdin.buffer.close",
        "sys.exit",
        "<builtin>.open",
        "sys.stderr.write"
    ],
    "email.header": [
        "email.charset",
        "email.errors",
        "email.header._Accumulator",
        "email.quoprimime",
        "email.header.Header",
        "email.header._ValueFormatter",
        "email.base64mime",
        "email.charset.Charset.__init__",
        "re.compile",
        "binascii",
        "re"
    ],
    "email._policybase._PolicyBase.__init__": [
        "<builtin>.super",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "email._policybase._PolicyBase": [],
    "email._policybase.Compat32": [],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email.feedparser.BytesFeedParser": [],
    "email.feedparser.FeedParser": [],
    "email.feedparser.BufferedSubFile": [],
    "sys.stdout.buffer.write": [],
    "sys.stdin.buffer.read": [],
    "base64.encodebytes": [
        "base64._input_type_check",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "base64.decodebytes": [
        "base64._input_type_check"
    ],
    "getopt.GetoptError": [],
    "getopt.getopt": [
        "getopt.do_shorts",
        "<builtin>.type",
        "getopt.do_longs",
        "<builtin>.list"
    ],
    "sys.stdin.buffer.readline": [],
    "_collections_abc.MutableMapping.popitem": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "weakref.WeakValueDictionary.popitem": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakKeyDictionary.popitem": [],
    "collections.ChainMap.popitem": [
        "<builtin>.KeyError"
    ],
    "functools._compose_mro": [
        "functools._compose_mro.is_strict_base",
        "functools._c3_mro",
        "<builtin>.set",
        "<builtin>.issubclass",
        "functools._compose_mro.is_related"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse._parse": [
        "sre_parse.Tokenizer.error",
        "sre_parse._class_escape",
        "sre_parse.Tokenizer.seek",
        "sre_parse.Tokenizer.match",
        "warnings",
        "<builtin>.OverflowError",
        "<builtin>.len",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse._parse_sub",
        "sre_parse.SubPattern.__init__",
        "sre_parse._escape",
        "sre_parse.Tokenizer.tell",
        "sre_parse.SubPattern.append",
        "sre_parse._uniq",
        "sre_parse.State.opengroup",
        "<builtin>.AssertionError",
        "sre_parse.State.closegroup",
        "<builtin>.range",
        "<builtin>.int",
        "sre_parse._parse_flags",
        "sre_parse.State.checkgroup",
        "sre_parse._parse",
        "warnings.warn",
        "sre_parse.State.checklookbehindgroup"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.append": [],
    "sre_parse.SubPattern.__init__": [],
    "_sre.ascii_iscased": [],
    "_sre.ascii_tolower": [],
    "_sre.unicode_iscased": [],
    "sre_compile._optimize_charset": [
        "_sre.ascii_tolower",
        "_sre.ascii_iscased",
        "_sre.unicode_iscased",
        "<builtin>.any",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "_sre.unicode_tolower",
        "<builtin>.map",
        "sre_compile._bytes_to_codes",
        "<builtin>.len",
        "<builtin>.range",
        "sre_compile._mk_bitmap"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile._combine_flags": [],
    "sre_compile._compile_charset": [
        "sre_constants.error.__init__"
    ],
    "_sre.unicode_tolower": [],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "sre_compile._get_literal_prefix": [
        "_sre.ascii_iscased",
        "sre_compile._get_literal_prefix",
        "sre_compile._get_iscased",
        "_sre.unicode_iscased",
        "sre_compile._combine_flags",
        "<builtin>.len"
    ],
    "sre_compile._generate_overlap_table": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._get_charset_prefix": [
        "_sre.ascii_iscased",
        "sre_compile._get_iscased",
        "_sre.unicode_iscased",
        "<builtin>.any",
        "sre_compile._combine_flags",
        "<builtin>.map",
        "<builtin>.range"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "warnings.catch_warnings.__init__": [],
    "<builtin>.FileNotFoundError": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "tarfile.TarFile.__iter__": [
        "tarfile.TarFile.next",
        "<builtin>.len"
    ],
    "gettext.find": [
        "posixpath.join",
        "ntpath.exists",
        "posixpath.exists",
        "ntpath.join",
        "gettext._expand_lang"
    ],
    "itertools.islice": [],
    "argparse.ArgumentParser._match_arguments_partial": [
        "argparse.ArgumentParser._get_nargs_pattern",
        "re.match",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "argparse.ArgumentParser._get_values",
        "argparse._get_action_name"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "argparse.ArgumentParser._get_option_tuples": [
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._match_argument": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<builtin>.len",
        "gettext.ngettext"
    ],
    "bpytop.Fx.uncolor": [],
    "bpytop.Draw.saved_buffer": [
        "<builtin>.sorted"
    ],
    "psutil._psaix.pid_exists": [
        "posixpath.join",
        "ntpath.exists",
        "posixpath.exists",
        "<builtin>.str",
        "ntpath.join",
        "_common.get_procfs_path"
    ],
    "_psosx.pid_exists": [],
    "psutil._pslinux.pid_exists": [
        "_psposix.pid_exists",
        "_common.open_binary",
        "<builtin>.ValueError",
        "psutil._pslinux.pids",
        "<builtin>.int",
        "_common.get_procfs_path"
    ],
    "psutil._pssunos.pid_exists": [
        "_psposix.pid_exists"
    ],
    "psutil._psbsd.pid_exists": [
        "_psposix.pid_exists",
        "psutil._psbsd.pids"
    ],
    "bpytop.Key.mouse_moved": [
        "threading.Event.is_set",
        "threading.Event.clear"
    ],
    "random.Random._randbelow_with_getrandbits": [],
    "psutil._pswindows.sensors_battery": [
        "_psutil_windows.sensors_battery",
        "_common.sbattery",
        "<builtin>.bool"
    ],
    "psutil._psbsd.sensors_battery": [
        "_common.sbattery",
        "_psutil_bsd.sensors_battery"
    ],
    "_psosx.sensors_battery": [],
    "psutil._pslinux.sensors_battery": [
        "posixpath.join",
        "<builtin>.sorted",
        "psutil._pslinux.sensors_battery.multi_bcat",
        "_common.sbattery",
        "_common.cat",
        "<builtin>.object",
        "ntpath.join",
        "<builtin>.int"
    ],
    "threading.Thread._wait_for_tstate_lock": [
        "threading._DummyThread._stop",
        "threading.Thread._stop"
    ],
    "sys.settrace": [],
    "doctest._OutputRedirectingPdb.__init__": [
        "pdb.Pdb.__init__"
    ],
    "sys.gettrace": [],
    "doctest._extract_future_flags": [
        "<builtin>.getattr"
    ],
    "doctest.DocTestRunner.__run": [
        "doctest._strip_exception_details",
        "doctest._SpoofOut.truncate",
        "doctest.DocTestRunner.report_success",
        "<builtin>.exec",
        "doctest._OutputRedirectingPdb.set_continue",
        "sys.exc_info",
        "traceback.format_exception_only",
        "doctest.DocTestRunner.report_failure",
        "doctest.DocTestRunner.__record_outcome",
        "<builtin>.compile",
        "<builtin>.enumerate",
        "doctest._exception_traceback",
        "doctest.DebugRunner.report_failure",
        "<builtin>.range",
        "doctest.DocTestRunner.report_start",
        "doctest.DebugRunner.report_unexpected_exception",
        "doctest._SpoofOut.getvalue",
        "doctest.DocTestRunner.report_unexpected_exception"
    ],
    "pdb.Pdb.reset": [],
    "inspect.getfile": [
        "inspect.isframe",
        "sys.modules.get",
        "inspect.istraceback",
        "<builtin>.TypeError",
        "inspect.isfunction",
        "<builtin>.hasattr",
        "<builtin>.type",
        "inspect.ismodule",
        "<builtin>.getattr",
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.iscode"
    ],
    "linecache.getlines": [
        "linecache.clearcache",
        "linecache.updatecache",
        "<builtin>.len"
    ],
    "doctest.DocTestFinder._find": [
        "<builtin>.ValueError",
        "doctest.DocTestFinder._find",
        "doctest.DocTestFinder._get_test",
        "<builtin>.print",
        "inspect.unwrap",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.id",
        "inspect.ismodule",
        "<builtin>.getattr",
        "inspect.isclass",
        "doctest.DocTestFinder._from_module",
        "inspect.isroutine"
    ],
    "inspect.getmodule": [
        "<builtin>.getattr",
        "sys.modules.copy",
        "sys.modules.get",
        "inspect.getabsfile",
        "<builtin>.hasattr",
        "ntpath.realpath",
        "inspect.ismodule",
        "posixpath.realpath"
    ],
    "inspect.getsourcefile": [
        "<builtin>.any",
        "ntpath.exists",
        "posixpath.exists",
        "inspect.getmodule",
        "<builtin>.getattr",
        "ntpath.splitext",
        "posixpath.splitext",
        "inspect.getfile"
    ],
    "_io.StringIO.__init__": [],
    "io.StringIO.__init__": [],
    "difflib._test": [
        "doctest.testmod",
        "doctest",
        "difflib"
    ],
    "difflib.SequenceMatcher": [],
    "difflib.Differ": [],
    "difflib.HtmlDiff": [],
    "inspect.Parameter": [],
    "inspect._void": [],
    "inspect._main": [
        "argparse.ArgumentParser.__init__",
        "importlib",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.print",
        "<builtin>.repr",
        "inspect.getsource",
        "importlib.import_module",
        "<builtin>.type",
        "inspect.findsource",
        "argparse",
        "sys.exit",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "inspect.getsourcefile"
    ],
    "inspect.BoundArguments": [],
    "inspect._ParameterKind": [],
    "importlib.machinery": [],
    "inspect.BlockFinder": [],
    "dis": [
        "opcode",
        "types",
        "collections",
        "collections.namedtuple",
        "io",
        "dis._test",
        "dis.Instruction",
        "dis.Bytecode"
    ],
    "inspect._empty": [],
    "inspect.Signature": [],
    "inspect.EndOfBlock": [],
    "unittest.case": [
        "unittest.case._SubTest",
        "difflib",
        "functools",
        "warnings",
        "unittest.case._ShouldStop",
        "<builtin>.object",
        "unittest.result",
        "contextlib",
        "unittest.case._OrderedChainMap",
        "logging",
        "types",
        "unittest.case._Outcome",
        "unittest.case._BaseTestCaseContext",
        "collections.namedtuple",
        "unittest.case._UnexpectedSuccess",
        "re",
        "pprint",
        "unittest.case.TestCase",
        "unittest.case._AssertRaisesContext",
        "unittest.case._AssertRaisesBaseContext",
        "unittest.case._AssertWarnsContext",
        "unittest.case._CapturingHandler",
        "unittest.case._AssertLogsContext",
        "collections",
        "traceback",
        "unittest.case.FunctionTestCase",
        "unittest.util",
        "unittest.case.SkipTest"
    ],
    "unittest.signals": [
        "weakref",
        "functools",
        "unittest.signals._InterruptHandler",
        "weakref.WeakKeyDictionary.__init__",
        "signal"
    ],
    "unittest.runner": [
        "unittest.runner._WritelnDecorator",
        "unittest.runner.TextTestRunner",
        "unittest.signals",
        "unittest.runner.TextTestResult",
        "warnings",
        "unittest.result"
    ],
    "unittest.suite": [
        "unittest.suite.BaseTestSuite",
        "unittest.suite._DebugResult",
        "unittest.case",
        "unittest.util",
        "unittest.suite._ErrorHolder",
        "unittest.suite.TestSuite"
    ],
    "unittest.async_case": [
        "asyncio",
        "unittest.case",
        "unittest.async_case.IsolatedAsyncioTestCase",
        "inspect"
    ],
    "unittest.main": [
        "os",
        "unittest.main.TestProgram",
        "unittest.signals",
        "unittest.runner",
        "argparse",
        "unittest.loader"
    ],
    "unittest.result": [
        "functools",
        "traceback",
        "io",
        "unittest.util",
        "unittest.result.TestResult"
    ],
    "unittest.loader": [
        "os",
        "unittest.loader.TestLoader",
        "unittest.loader._FailedTest",
        "unittest.loader.TestLoader.__init__",
        "types",
        "unittest.case",
        "functools",
        "fnmatch",
        "traceback",
        "warnings",
        "unittest.util",
        "re.compile",
        "re",
        "unittest.suite"
    ],
    "sys.path.insert": [],
    "doctest.testfile": [
        "<builtin>.ValueError",
        "doctest.DebugRunner.run",
        "ntpath.basename",
        "posixpath.basename",
        "doctest.DocTestRunner.run",
        "doctest.DocTestRunner.summarize",
        "doctest.DocTestRunner.merge",
        "doctest.DocTestParser.get_doctest",
        "doctest.DocTestRunner.__init__",
        "doctest._load_testfile"
    ],
    "<builtin>.__import__": [],
    "sys.__stdout__.fileno": [],
    "subprocess.Popen._posix_spawn": [
        "<builtin>.getattr",
        "subprocess.Popen._close_pipe_fds"
    ],
    "_winapi.CreateProcess": [],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr",
        "contextlib._BaseExitStack.__init__"
    ],
    "os.get_exec_path": [
        "warnings.simplefilter",
        "<builtin>.ValueError",
        "warnings",
        "<builtin>.isinstance",
        "warnings.catch_warnings.__init__"
    ],
    "subprocess.STARTUPINFO.copy": [
        "subprocess.STARTUPINFO.__init__",
        "<builtin>.list"
    ],
    "sys.audit": [],
    "subprocess.list2cmdline": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "subprocess.STARTUPINFO.__init__": [],
    "_winapi.CloseHandle": [],
    "<builtin>.bytearray": [],
    "subprocess.Popen._filter_handle_list": [
        "_winapi.GetFileType",
        "<builtin>.list"
    ],
    "sys.__dict__.setdefault": [],
    "_warnings.warn_explicit": [],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "_winapi.CreatePipe": [],
    "msvcrt.get_osfhandle": [],
    "_winapi.GetStdHandle": [],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._make_inheritable": [
        "_winapi.DuplicateHandle",
        "_winapi.GetCurrentProcess"
    ],
    "zipfile._SharedFile.close": [
        "zipfile.ZipFile._fpclose"
    ],
    "_compression.BaseStream._check_can_read": [
        "bz2.BZ2File.readable",
        "io.UnsupportedOperation",
        "lzma.LZMAFile.readable",
        "gzip.GzipFile.readable"
    ],
    "http.client.HTTPResponse._close_conn": [],
    "sys.base_prefix.close": [],
    "tarfile.TarFile.close": [
        "lzma.LZMAFile.close",
        "bz2.BZ2File.write",
        "tarfile._Stream.write",
        "tarfile._Stream.close",
        "gzip.GzipFile.close",
        "bz2.BZ2File.close",
        "<builtin>.divmod",
        "gzip.GzipFile.write",
        "lzma.LZMAFile.write"
    ],
    "sys.path.close": [],
    "sys.path.write": [],
    "logging.FileHandler.close": [
        "logging.Handler.release",
        "logging.Handler.acquire",
        "logging.Handler.close",
        "<builtin>.hasattr",
        "logging.FileHandler.close",
        "logging.StreamHandler.flush"
    ],
    "sys.base_prefix.write": [],
    "_winapi.WaitForSingleObject": [],
    "subprocess.TimeoutExpired.__init__": [],
    "_winapi.GetExitCodeProcess": [],
    "subprocess.Popen._try_wait": [],
    "<builtin>.memoryview": [],
    "http.client.HTTPResponse._readall_chunked": [
        "http.client.IncompleteRead.__init__",
        "http.client.HTTPResponse._get_chunk_left",
        "http.client.HTTPResponse._safe_read"
    ],
    "http.client.HTTPResponse._safe_read": [
        "http.client.IncompleteRead.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse.readinto": [
        "http.client.HTTPResponse._readinto_chunked",
        "http.client.HTTPResponse._close_conn",
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "subprocess.Popen._translate_newlines": [],
    "gzip.GzipFile.flush": [
        "_compression.BaseStream._check_not_closed",
        "sys.path.flush",
        "sys.stdin.buffer.flush",
        "gzip.GzipFile.flush",
        "sys.base_prefix.flush",
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "sys.path.write",
        "sys.stdout.buffer.flush",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "subprocess.Popen._save_input": [],
    "subprocess.Popen._check_timeout": [
        "time.monotonic",
        "subprocess.TimeoutExpired.__init__"
    ],
    "selectors._PollLikeSelector.__init__": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "sys.stdout.flush": [],
    "http.client.HTTPResponse.flush": [
        "<builtin>.super"
    ],
    "zipfile.ZipExtFile._read1": [
        "<builtin>.max",
        "zipfile.LZMADecompressor.decompress",
        "zipfile.ZipExtFile._read2",
        "<builtin>.len",
        "zipfile.ZipExtFile._update_crc"
    ],
    "bz2.BZ2File.write": [
        "sys.path.write",
        "<builtin>.len",
        "sys.base_prefix.write",
        "_compression.BaseStream._check_can_write"
    ],
    "xml.etree.ElementTree._ListDataStream.write": [],
    "_io._IOBase.write": [],
    "_io._BufferedIOBase.write": [],
    "zipfile._ZipWriteFile.write": [
        "<builtin>.ValueError",
        "zipfile.LZMACompressor.compress",
        "<builtin>.len"
    ],
    "gzip.GzipFile.write": [
        "<builtin>.ValueError",
        "_compression.BaseStream._check_not_closed",
        "<builtin>.memoryview",
        "<builtin>.OSError",
        "<builtin>.len",
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "<builtin>.isinstance",
        "sys.path.write",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "lzma.LZMAFile.write": [
        "<builtin>.len",
        "_compression.BaseStream._check_can_write"
    ],
    "<builtin>.OSError": [],
    "_compression.BaseStream._check_not_closed": [
        "<builtin>.ValueError"
    ],
    "gzip.write32u": [
        "sys.stdout.buffer.write",
        "gzip.GzipFile.write",
        "sys.path.write",
        "sys.base_prefix.write",
        "sys.stdin.buffer.write"
    ],
    "sys.stdin.buffer.write": [],
    "sys.base_prefix.FileHeader": [],
    "sys.path.FileHeader": [],
    "zipfile.LZMACompressor.flush": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.ZipInfo.FileHeader": [
        "<builtin>.max",
        "zipfile.ZipInfo._encodeFilenameFlags",
        "<builtin>.len"
    ],
    "traceback.StackSummary.extract": [
        "linecache.checkcache",
        "linecache.lazycache",
        "itertools.islice",
        "<builtin>.set",
        "<builtin>.getattr",
        "collections.deque",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.walk_stack": [
        "sys._getframe"
    ],
    "traceback.StackSummary.from_list": [
        "<builtin>.isinstance",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted"
    ],
    "logging.StreamHandler.emit": [
        "logging.Handler.format",
        "logging.StreamHandler.flush",
        "sys.stderr.write",
        "logging.Handler.handleError"
    ],
    "logging.Handler.release": [],
    "logging.Handler.acquire": [],
    "unittest.case._CapturingHandler.emit": [
        "logging.Handler.format"
    ],
    "logging.FileHandler.emit": [
        "logging.StreamHandler.emit",
        "logging.FileHandler._open",
        "logging.FileHandler.emit"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "logging.NullHandler.emit": [],
    "genericpath._splitext": [
        "<builtin>.max",
        "sys.base_prefix.rfind",
        "sys.path.rfind"
    ],
    "_compat.b": [],
    "_psutil_bsd.pids": [],
    "psutil._psbsd._pid_0_exists": [
        "psutil._psbsd.Process.name",
        "psutil._psbsd.Process.__init__"
    ],
    "psutil.Process.oneshot": [
        "psutil._pslinux.Process.oneshot_enter",
        "psutil._pssunos.Process.oneshot_exit",
        "psutil._pslinux.Process.oneshot_exit",
        "psutil._psbsd.Process.oneshot_enter",
        "psutil._pssunos.Process.oneshot_enter",
        "psutil._psbsd.Process.oneshot_exit",
        "psutil._pswindows.Process.oneshot_enter",
        "<builtin>.hasattr",
        "psutil._pswindows.Process.oneshot_exit",
        "psutil._psaix.Process.oneshot_exit",
        "psutil._psaix.Process.oneshot_enter"
    ],
    "psutil.Process._init": [
        "<builtin>.ValueError",
        "threading.RLock",
        "psutil._pslinux.Process.__init__",
        "psutil.Process.create_time",
        "psutil._pswindows.Process.__init__",
        "psutil._pssunos.Process.__init__",
        "psutil._psbsd.Process.__init__",
        "_psosx.Process",
        "<builtin>.TypeError",
        "_common.NoSuchProcess",
        "<builtin>.isinstance",
        "psutil._psaix.Process.__init__"
    ],
    "_psutil_bsd.proc_oneshot_info": [],
    "_common.AccessDenied": [],
    "_psutil_sunos.proc_basic_info": [],
    "_psutil_sunos.proc_cred": [],
    "_psutil_aix.proc_cred": [],
    "traceback.TracebackException.format_exception_only": [
        "traceback._format_final_exc_line",
        "<builtin>.min",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.issubclass"
    ],
    "traceback.walk_tb": [],
    "traceback._some_str": [
        "<builtin>.str",
        "<builtin>.type"
    ],
    "<builtin>.id": [],
    "traceback.TracebackException._load_lines": [
        "traceback.TracebackException._load_lines"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging.Handler.setFormatter": [],
    "logging.Handler.close": [
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "sys.path.startswith": [],
    "sys.base_prefix.startswith": [],
    "sys.base_prefix.split": [],
    "sys.path.split": [],
    "ntpath.isabs": [
        "ntpath.splitdrive",
        "ntpath._get_bothseps",
        "sys.base_prefix.replace",
        "<builtin>.len",
        "<builtin>.isinstance",
        "sys.path.replace"
    ],
    "sys.path.lstrip": [],
    "sys.base_prefix.lstrip": [],
    "tokenize.tokenize": [
        "itertools.chain",
        "tokenize.detect_encoding",
        "<builtin>.iter",
        "itertools.repeat",
        "tokenize._tokenize"
    ],
    "tokenize.main.error": [
        "tokenize.main.perror",
        "sys.exit"
    ],
    "builtins.open": [],
    "tokenize.main.perror": [
        "sys.stderr.write"
    ],
    "tokenize._tokenize": [
        "<builtin>.IndentationError",
        "tokenize._compile",
        "sys.stdin.readline",
        "<builtin>.len"
    ],
    "itertools.product": [],
    "itertools.permutations": [],
    "pprint._recursion": [
        "<builtin>.type",
        "<builtin>.id"
    ],
    "pprint.PrettyPrinter._format": [
        "pprint.PrettyPrinter._repr",
        "pprint._recursion",
        "pprint.PrettyPrinter._pprint_dict",
        "sys.stdout.write",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.id",
        "<builtin>.isinstance"
    ],
    "_io.StringIO": [],
    "locale._format": [
        "locale._strip_padding",
        "locale._group",
        "locale.localeconv"
    ],
    "locale.delocalize": [
        "locale.localeconv"
    ],
    "locale._build_localename": [
        "<builtin>.TypeError"
    ],
    "locale.normalize": [
        "locale._replace_encoding",
        "locale._append_modifier"
    ],
    "locale._parse_localename": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "locale.normalize"
    ],
    "_locale._getdefaultlocale": [],
    "email._parseaddr.AddrlistClass": [],
    "calendar": [
        "calendar._localized_month",
        "locale",
        "calendar.Calendar",
        "calendar.Calendar.__init__",
        "calendar.LocaleTextCalendar",
        "calendar.LocaleHTMLCalendar",
        "calendar._localized_day.__init__",
        "<builtin>.range",
        "calendar.TextCalendar",
        "calendar.HTMLCalendar",
        "calendar.different_locale",
        "datetime.datetime.date",
        "datetime",
        "calendar.main",
        "calendar._localized_day",
        "calendar.IllegalWeekdayError",
        "calendar.IllegalMonthError",
        "calendar._localized_month.__init__"
    ],
    "email._parseaddr.AddressList": [],
    "uu.encode": [
        "ntpath.basename",
        "posixpath.basename",
        "sys.stdout.buffer.write",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.open",
        "sys.stdin.buffer.read"
    ],
    "optparse.OptionParser.parse_args": [
        "optparse.OptionParser._get_args",
        "optparse.OptionParser._process_args",
        "optparse.OptionParser.check_values",
        "optparse.OptionParser.error",
        "<builtin>.str",
        "optparse.OptionParser.get_default_values"
    ],
    "optparse.OptionContainer.add_option": [
        "optparse.OptionParser.__init__",
        "<builtin>.TypeError",
        "optparse.OptionGroup.__init__",
        "<builtin>.len",
        "optparse.OptionContainer._check_conflict",
        "<builtin>.isinstance"
    ],
    "optparse": [
        "os",
        "gettext.gettext",
        "optparse.OptionGroup",
        "optparse.OptionError",
        "optparse.HelpFormatter",
        "optparse.TitledHelpFormatter",
        "optparse.Values",
        "optparse.AmbiguousOptionError",
        "optparse.OptionContainer",
        "gettext",
        "optparse.IndentedHelpFormatter",
        "optparse.OptionValueError",
        "optparse.OptParseError",
        "optparse.BadOptionError",
        "textwrap",
        "optparse.Option",
        "optparse.OptionParser",
        "optparse.OptionConflictError"
    ],
    "optparse.OptionParser.__init__": [
        "optparse.IndentedHelpFormatter.__init__",
        "optparse.HelpFormatter.set_parser",
        "optparse.OptionParser._populate_option_list",
        "optparse.OptionParser._init_parsing_state",
        "optparse.OptionContainer.__init__",
        "optparse.OptionParser.set_usage"
    ],
    "optparse.OptionParser.error": [
        "optparse.OptionParser.print_usage",
        "optparse.OptionParser.get_prog_name",
        "optparse.OptionParser.exit"
    ],
    "uu.decode": [
        "ntpath.exists",
        "posixpath.exists",
        "<builtin>.int",
        "sys.stdin.buffer.readline",
        "<builtin>.len",
        "sys.stdout.buffer.write",
        "<builtin>.isinstance",
        "<builtin>.open",
        "sys.stderr.write"
    ],
    "quopri.decode": [
        "<builtin>.bytes",
        "quopri.unhex",
        "sys.stdin.buffer.readline",
        "<builtin>.len",
        "sys.stdout.buffer.write",
        "quopri.ishex",
        "sys.stdin.buffer.read"
    ],
    "quopri.encode": [
        "<builtin>.bytes",
        "quopri.quote",
        "sys.stdin.buffer.readline",
        "sys.stdout.buffer.write",
        "<builtin>.len",
        "sys.stdin.buffer.read",
        "quopri.needsquoting",
        "quopri.encode.write"
    ],
    "sys.stdin.buffer.close": [],
    "email.header._Accumulator": [],
    "email.header.Header": [],
    "email.header._ValueFormatter": [],
    "email.charset.Charset.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "base64._input_type_check": [
        "<builtin>.TypeError",
        "<builtin>.memoryview"
    ],
    "getopt.do_shorts": [
        "gettext.gettext",
        "getopt.short_has_arg",
        "getopt.GetoptError.__init__"
    ],
    "getopt.do_longs": [
        "gettext.gettext",
        "getopt.GetoptError.__init__",
        "getopt.long_has_args"
    ],
    "weakref.WeakValueDictionary._commit_removals": [
        "_weakref._remove_dead_weakref"
    ],
    "functools._compose_mro.is_strict_base": [],
    "functools._c3_mro": [
        "<builtin>.any",
        "functools._c3_mro",
        "<builtin>.list",
        "functools._c3_merge",
        "<builtin>.reversed",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.issubclass"
    ],
    "functools._compose_mro.is_related": [
        "<builtin>.issubclass",
        "<builtin>.hasattr"
    ],
    "sre_parse._class_escape": [
        "<builtin>.chr",
        "sre_parse.Tokenizer.error",
        "<builtin>.ord",
        "sre_parse.Tokenizer.match",
        "<builtin>.len",
        "sre_parse.Tokenizer.getuntil",
        "<builtin>.int",
        "unicodedata",
        "sre_parse.Tokenizer.getwhile"
    ],
    "<builtin>.OverflowError": [],
    "sre_parse.Tokenizer.getuntil": [
        "sre_parse.Tokenizer.__next",
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse._escape": [
        "<builtin>.chr",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.get",
        "<builtin>.ord",
        "sre_parse.State.checkgroup",
        "sre_parse.Tokenizer.match",
        "<builtin>.len",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.State.checklookbehindgroup",
        "<builtin>.int",
        "unicodedata",
        "sre_parse.Tokenizer.getwhile"
    ],
    "sre_parse._uniq": [
        "<builtin>.list"
    ],
    "sre_parse.State.opengroup": [
        "sre_constants.error.__init__"
    ],
    "<builtin>.AssertionError": [],
    "sre_parse.State.closegroup": [],
    "sre_parse._parse_flags": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.State.checkgroup": [],
    "sre_parse.State.checklookbehindgroup": [
        "sre_parse.State.checkgroup"
    ],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._get_iscased": [],
    "gettext.NullTranslations._parse": [],
    "tarfile.TarFile.next": [
        "bz2.BZ2File.tell",
        "tarfile._Stream.seek",
        "gzip.GzipFile.read",
        "bz2.BZ2File.seek",
        "gzip.GzipFile.seek",
        "lzma.LZMAFile.read",
        "tarfile.TarFile._check",
        "<builtin>.str",
        "lzma.LZMAFile.seek",
        "tarfile._Stream.read",
        "bz2.BZ2File.read",
        "tarfile.TarFile._dbg",
        "tarfile._Stream.tell",
        "tarfile.TarInfo.fromtarfile",
        "lzma.LZMAFile.tell"
    ],
    "gettext._expand_lang": [
        "<builtin>.range",
        "locale.normalize"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [],
    "argparse.ArgumentParser._get_values": [
        "<builtin>.isinstance",
        "argparse.ArgumentParser._get_value",
        "<builtin>.len",
        "argparse.ArgumentParser._check_value"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "_psposix.pid_exists": [],
    "_psutil_windows.sensors_battery": [],
    "_common.sbattery": [],
    "_psutil_bsd.sensors_battery": [],
    "psutil._pslinux.sensors_battery.multi_bcat": [
        "_common.bcat",
        "<builtin>.int"
    ],
    "threading._DummyThread._stop": [],
    "threading.Thread._stop": [],
    "pdb.Pdb.__init__": [],
    "doctest._strip_exception_details": [
        "<builtin>.len"
    ],
    "doctest._SpoofOut.truncate": [
        "_io.StringIO.truncate",
        "_io.StringIO.seek"
    ],
    "doctest.DocTestRunner.report_success": [
        "doctest.DocTestRunner.__init__",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTest.__init__"
    ],
    "doctest._OutputRedirectingPdb.set_continue": [
        "pdb.Pdb.set_continue"
    ],
    "traceback.format_exception_only": [
        "traceback.TracebackException.format_exception_only",
        "<builtin>.list",
        "traceback.TracebackException.__init__"
    ],
    "doctest.DocTestRunner.report_failure": [
        "doctest.DocTestRunner._failure_header",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTestRunner.__init__",
        "doctest.DocTest.__init__"
    ],
    "doctest.DocTestRunner.__record_outcome": [],
    "doctest._exception_traceback": [
        "_io.StringIO",
        "traceback.print_exception"
    ],
    "doctest.DebugRunner.report_failure": [
        "doctest.DocTestFailure.__init__"
    ],
    "doctest.DocTestRunner.report_start": [
        "doctest._indent",
        "doctest.DocTestRunner.__init__",
        "doctest.SkipDocTestCase.__init__",
        "doctest.DocTest.__init__"
    ],
    "doctest.DebugRunner.report_unexpected_exception": [
        "doctest.UnexpectedException.__init__"
    ],
    "doctest._SpoofOut.getvalue": [
        "_io.StringIO.getvalue"
    ],
    "doctest.DocTestRunner.report_unexpected_exception": [
        "doctest.DocTestRunner.__init__",
        "doctest.DocTest.__init__",
        "doctest._indent",
        "doctest._exception_traceback",
        "doctest.DocTestRunner._failure_header",
        "doctest.SkipDocTestCase.__init__"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "linecache.clearcache": [],
    "linecache.updatecache": [
        "linecache.lazycache",
        "posixpath.join",
        "<builtin>.len",
        "ntpath.join",
        "posixpath.isabs",
        "ntpath.isabs"
    ],
    "doctest.DocTestFinder._get_test": [
        "<builtin>.getattr",
        "doctest.DocTestFinder._find_lineno",
        "<builtin>.str",
        "doctest.DocTestParser.get_doctest",
        "<builtin>.isinstance"
    ],
    "inspect.unwrap": [
        "sys.getrecursionlimit",
        "<builtin>.ValueError",
        "inspect.unwrap._is_wrapper",
        "<builtin>.len",
        "<builtin>.id"
    ],
    "doctest.DocTestFinder._from_module": [
        "<builtin>.ValueError",
        "inspect.getmodule",
        "inspect.ismethoddescriptor",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.isclass"
    ],
    "inspect.isroutine": [
        "inspect.ismethoddescriptor",
        "inspect.isfunction",
        "inspect.ismethod",
        "inspect.isbuiltin"
    ],
    "sys.modules.copy": [],
    "inspect.getabsfile": [
        "posixpath.abspath",
        "inspect.getsourcefile",
        "ntpath.normcase",
        "posixpath.normcase",
        "ntpath.abspath",
        "inspect.getfile"
    ],
    "ntpath.realpath": [
        "ntpath.isabs",
        "nt._getfinalpathname",
        "ntpath.normpath",
        "ntpath._getfinalpathname_nonstrict",
        "sys.path.startswith",
        "<builtin>.len",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.normcase",
        "sys.base_prefix.startswith"
    ],
    "posixpath.realpath": [
        "posixpath.abspath",
        "posixpath._joinrealpath"
    ],
    "importlib": [
        "types",
        "importlib._bootstrap_external",
        "_frozen_importlib._setup",
        "_bootstrap_external._setup",
        "_frozen_importlib_external._setup",
        "warnings",
        "_bootstrap._setup"
    ],
    "inspect.getsource": [
        "inspect.getsourcelines"
    ],
    "importlib.import_module": [
        "_bootstrap._gcd_import",
        "_frozen_importlib._gcd_import",
        "<builtin>.TypeError"
    ],
    "inspect.findsource": [
        "linecache.checkcache",
        "linecache.getlines",
        "<builtin>.range",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.getmodule",
        "<builtin>.OSError",
        "inspect.getsourcefile",
        "<builtin>.len",
        "re.compile",
        "inspect.ismodule",
        "inspect.isfunction",
        "inspect.isclass",
        "inspect.ismethod",
        "<builtin>.hasattr",
        "inspect.iscode",
        "inspect.getfile"
    ],
    "opcode": [
        "opcode.name_op",
        "opcode.jabs_op",
        "opcode.jrel_op",
        "<builtin>.range",
        "_opcode",
        "opcode.def_op"
    ],
    "dis._test": [
        "argparse.FileType.__init__",
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "argparse._ActionsContainer.add_argument",
        "dis.dis",
        "<builtin>.compile",
        "argparse"
    ],
    "dis.Instruction": [],
    "dis.Bytecode": [],
    "unittest.case._SubTest": [],
    "unittest.case._ShouldStop": [],
    "unittest.case._OrderedChainMap": [],
    "unittest.case._Outcome": [
        "contextlib.contextmanager"
    ],
    "unittest.case._BaseTestCaseContext": [],
    "unittest.case._UnexpectedSuccess": [],
    "unittest.case.TestCase": [
        "contextlib.contextmanager",
        "unittest.case.TestCase._deprecate"
    ],
    "unittest.case._AssertRaisesContext": [],
    "unittest.case._AssertRaisesBaseContext": [],
    "unittest.case._AssertWarnsContext": [],
    "unittest.case._CapturingHandler": [],
    "unittest.case._AssertLogsContext": [],
    "unittest.case.FunctionTestCase": [],
    "unittest.util": [
        "posixpath",
        "collections",
        "collections.namedtuple"
    ],
    "unittest.case.SkipTest": [],
    "unittest.signals._InterruptHandler": [],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.set"
    ],
    "unittest.runner._WritelnDecorator": [],
    "unittest.runner.TextTestRunner": [],
    "unittest.runner.TextTestResult": [],
    "unittest.suite.BaseTestSuite": [],
    "unittest.suite._DebugResult": [],
    "unittest.suite._ErrorHolder": [],
    "unittest.suite.TestSuite": [],
    "asyncio": [
        "asyncio.windows_events"
    ],
    "unittest.async_case.IsolatedAsyncioTestCase": [],
    "unittest.main.TestProgram": [],
    "unittest.result.TestResult": [
        "unittest.result.TestResult.failfast"
    ],
    "unittest.loader.TestLoader": [
        "<builtin>.staticmethod"
    ],
    "unittest.loader._FailedTest": [],
    "unittest.loader.TestLoader.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "doctest.DocTestParser.get_doctest": [
        "doctest.DocTestParser.get_examples",
        "doctest.DocTest.__init__"
    ],
    "doctest._load_testfile": [
        "doctest._normalize_module",
        "doctest._module_relative_path",
        "doctest._newline_convert",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.open"
    ],
    "contextlib._BaseExitStack.__init__": [],
    "_winapi.GetFileType": [],
    "_winapi.DuplicateHandle": [],
    "_winapi.GetCurrentProcess": [],
    "zipfile.ZipFile._fpclose": [
        "zipfile._Tellable.close",
        "zipfile.ZipFile.close"
    ],
    "bz2.BZ2File.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "io.UnsupportedOperation": [],
    "lzma.LZMAFile.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "gzip.GzipFile.readable": [],
    "tarfile._Stream.write": [
        "tarfile._Stream.__write",
        "<builtin>.len"
    ],
    "tarfile._Stream.close": [
        "tarfile._LowLevelFile.write",
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.close"
    ],
    "<builtin>.divmod": [],
    "logging.StreamHandler.flush": [
        "logging.Handler.release",
        "logging.Handler.acquire",
        "sys.stderr.flush",
        "<builtin>.hasattr",
        "logging.StreamHandler.flush"
    ],
    "http.client.IncompleteRead.__init__": [],
    "http.client.HTTPResponse._get_chunk_left": [
        "http.client.HTTPResponse._close_conn",
        "http.client.IncompleteRead.__init__",
        "http.client.HTTPResponse._read_next_chunk_size",
        "http.client.HTTPResponse._read_and_discard_trailer",
        "http.client.HTTPResponse._safe_read"
    ],
    "http.client.HTTPResponse._readinto_chunked": [
        "<builtin>.memoryview",
        "http.client.HTTPResponse._safe_readinto",
        "<builtin>.bytes",
        "http.client.HTTPResponse._get_chunk_left",
        "http.client.IncompleteRead.__init__",
        "<builtin>.len"
    ],
    "sys.path.flush": [],
    "sys.stdin.buffer.flush": [],
    "sys.base_prefix.flush": [],
    "sys.stdout.buffer.flush": [],
    "zipfile.LZMADecompressor.decompress": [
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile._read2": [
        "zipfile._SharedFile.read",
        "zipfile._ZipDecrypter.decrypter",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.len"
    ],
    "zipfile.ZipExtFile._update_crc": [],
    "_compression.BaseStream._check_can_write": [
        "io.UnsupportedOperation",
        "gzip.GzipFile.writable",
        "bz2.BZ2File.writable",
        "lzma.LZMAFile.writable"
    ],
    "zipfile.LZMACompressor.compress": [
        "zipfile.LZMACompressor._init"
    ],
    "zipfile.LZMACompressor._init": [
        "<builtin>.len"
    ],
    "zipfile.ZipInfo._encodeFilenameFlags": [
        "sys.path.encode",
        "sys.base_prefix.encode"
    ],
    "linecache.checkcache": [
        "<builtin>.len",
        "<builtin>.list"
    ],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "collections.deque": [],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Handler.handleError": [
        "sys.exc_info",
        "traceback.print_exception",
        "posixpath.dirname",
        "ntpath.dirname",
        "traceback.print_stack",
        "sys.stderr.write"
    ],
    "psutil._psbsd.Process.name": [
        "_psutil_bsd.proc_name",
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._psbsd.Process.__init__": [],
    "psutil._pslinux.Process.oneshot_enter": [],
    "psutil._pssunos.Process.oneshot_exit": [],
    "psutil._pslinux.Process.oneshot_exit": [],
    "psutil._psbsd.Process.oneshot_enter": [],
    "psutil._pssunos.Process.oneshot_enter": [],
    "psutil._psbsd.Process.oneshot_exit": [],
    "psutil._pswindows.Process.oneshot_enter": [],
    "psutil._pswindows.Process.oneshot_exit": [],
    "psutil._psaix.Process.oneshot_exit": [],
    "psutil._psaix.Process.oneshot_enter": [],
    "psutil._pslinux.Process.__init__": [
        "_common.get_procfs_path"
    ],
    "psutil.Process.create_time": [
        "psutil._psaix.Process.create_time",
        "psutil._pssunos.Process.create_time",
        "psutil._pswindows.Process.create_time",
        "psutil._psbsd.Process.create_time",
        "psutil._pslinux.Process.create_time"
    ],
    "psutil._pswindows.Process.__init__": [],
    "psutil._pssunos.Process.__init__": [
        "_common.get_procfs_path"
    ],
    "_psosx.Process": [],
    "_common.NoSuchProcess": [],
    "psutil._psaix.Process.__init__": [
        "_common.get_procfs_path"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "itertools.chain": [],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.read_or_stop",
        "tokenize.detect_encoding.find_cookie"
    ],
    "itertools.repeat": [],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "sys.stdin.readline": [],
    "pprint.PrettyPrinter._repr": [
        "pprint.PrettyPrinter.format"
    ],
    "pprint.PrettyPrinter._pprint_dict": [
        "pprint.PrettyPrinter._format_dict_items",
        "<builtin>.sorted",
        "<builtin>.len"
    ],
    "locale._strip_padding": [
        "<builtin>.len"
    ],
    "locale._group": [
        "locale._grouping_intervals",
        "<builtin>.len",
        "locale.localeconv"
    ],
    "locale.localeconv": [
        "locale.localeconv"
    ],
    "locale._replace_encoding": [
        "encodings.normalize_encoding",
        "encodings.aliases.aliases.get"
    ],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "calendar._localized_month": [
        "datetime.datetime.date",
        "<builtin>.range"
    ],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.Calendar.__init__": [],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleHTMLCalendar": [],
    "calendar._localized_day.__init__": [],
    "calendar.TextCalendar": [],
    "calendar.HTMLCalendar": [],
    "calendar.different_locale": [],
    "datetime.datetime.date": [
        "datetime.datetime.date"
    ],
    "calendar.main": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument",
        "calendar.HTMLCalendar.formatyearpage",
        "sys.getdefaultencoding",
        "argparse",
        "calendar.Calendar.__init__",
        "calendar.TextCalendar.formatmonth",
        "argparse.ArgumentParser.parse_args",
        "sys.stdout.write",
        "sys.exit",
        "calendar.TextCalendar.formatyear",
        "calendar.HTMLCalendar.formatyear",
        "sys.stdout.buffer.write",
        "argparse.ArgumentParser.error",
        "argparse._ActionsContainer.add_argument_group",
        "calendar.LocaleTextCalendar.__init__",
        "<builtin>.dict",
        "calendar.HTMLCalendar.formatmonth",
        "calendar.LocaleHTMLCalendar.__init__"
    ],
    "calendar._localized_day": [
        "datetime.datetime.date",
        "<builtin>.range"
    ],
    "calendar.IllegalWeekdayError": [],
    "calendar.IllegalMonthError": [],
    "calendar._localized_month.__init__": [],
    "optparse.OptionParser._get_args": [],
    "optparse.OptionParser._process_args": [
        "optparse.OptionParser._process_long_opt",
        "optparse.OptionParser._process_short_opts",
        "<builtin>.len"
    ],
    "optparse.OptionParser.check_values": [],
    "optparse.OptionParser.get_default_values": [
        "optparse.OptionParser._get_all_options",
        "optparse.Values.__init__",
        "<builtin>.isinstance"
    ],
    "optparse.OptionGroup.__init__": [
        "optparse.OptionContainer.__init__"
    ],
    "optparse.OptionContainer._check_conflict": [
        "optparse.OptionError.__init__"
    ],
    "optparse.OptionGroup": [],
    "optparse.OptionError": [],
    "optparse.HelpFormatter": [],
    "optparse.TitledHelpFormatter": [],
    "optparse.Values": [],
    "optparse.AmbiguousOptionError": [],
    "optparse.OptionContainer": [],
    "optparse.IndentedHelpFormatter": [],
    "optparse.OptionValueError": [],
    "optparse.OptParseError": [],
    "optparse.BadOptionError": [],
    "textwrap": [
        "textwrap.TextWrapper",
        "<builtin>.print",
        "re.compile",
        "re",
        "textwrap.dedent"
    ],
    "optparse.Option": [],
    "optparse.OptionParser": [],
    "optparse.OptionConflictError": [],
    "optparse.IndentedHelpFormatter.__init__": [
        "optparse.HelpFormatter.__init__"
    ],
    "optparse.HelpFormatter.set_parser": [],
    "optparse.OptionParser._populate_option_list": [
        "optparse.OptionContainer.add_options",
        "optparse.OptionParser._add_version_option",
        "optparse.OptionParser._add_help_option"
    ],
    "optparse.OptionParser._init_parsing_state": [],
    "optparse.OptionContainer.__init__": [
        "optparse.OptionContainer.set_conflict_handler",
        "optparse.OptionContainer.set_description",
        "optparse.OptionGroup._create_option_list"
    ],
    "optparse.OptionParser.set_usage": [
        "gettext.gettext"
    ],
    "optparse.OptionParser.print_usage": [
        "optparse.OptionParser.get_usage",
        "<builtin>.print"
    ],
    "optparse.OptionParser.get_prog_name": [
        "ntpath.basename",
        "posixpath.basename"
    ],
    "optparse.OptionParser.exit": [
        "sys.stderr.write",
        "sys.exit"
    ],
    "quopri.unhex": [
        "<builtin>.bytes",
        "<builtin>.repr",
        "<builtin>.ord"
    ],
    "quopri.ishex": [
        "<builtin>.isinstance"
    ],
    "quopri.quote": [
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.ord",
        "<builtin>.len"
    ],
    "quopri.needsquoting": [
        "<builtin>.isinstance"
    ],
    "quopri.encode.write": [
        "sys.stdout.buffer.write",
        "quopri.quote"
    ],
    "getopt.short_has_arg": [
        "getopt.GetoptError.__init__",
        "gettext.gettext",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "getopt.GetoptError.__init__": [],
    "getopt.long_has_args": [
        "gettext.gettext",
        "<builtin>.len",
        "getopt.GetoptError.__init__"
    ],
    "_weakref._remove_dead_weakref": [],
    "functools._c3_merge": [
        "<builtin>.RuntimeError"
    ],
    "unicodedata": [],
    "sre_parse.Tokenizer.getwhile": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.range"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "bz2.BZ2File.tell": [
        "_compression.BaseStream._check_not_closed"
    ],
    "tarfile._Stream.seek": [
        "<builtin>.range",
        "tarfile._Stream.read",
        "<builtin>.divmod"
    ],
    "bz2.BZ2File.seek": [
        "_compression.BaseStream._check_can_seek"
    ],
    "gzip.GzipFile.seek": [
        "<builtin>.ValueError",
        "_compression.BaseStream._check_not_closed",
        "<builtin>.OSError",
        "<builtin>.range",
        "gzip.GzipFile.write"
    ],
    "tarfile.TarFile._check": [
        "<builtin>.OSError"
    ],
    "lzma.LZMAFile.seek": [
        "_compression.BaseStream._check_can_seek"
    ],
    "tarfile._Stream.read": [
        "<builtin>.len",
        "tarfile._Stream._read"
    ],
    "tarfile.TarFile._dbg": [
        "<builtin>.print"
    ],
    "tarfile._Stream.tell": [],
    "tarfile.TarInfo.fromtarfile": [
        "gzip.GzipFile.read",
        "tarfile.TarInfo.frombuf",
        "lzma.LZMAFile.read",
        "tarfile._Stream.tell",
        "tarfile._Stream.read",
        "bz2.BZ2File.read",
        "bz2.BZ2File.tell",
        "lzma.LZMAFile.tell"
    ],
    "lzma.LZMAFile.tell": [
        "_compression.BaseStream._check_not_closed"
    ],
    "argparse.ArgumentParser._check_value": [
        "gettext.gettext",
        "<builtin>.map",
        "argparse.ArgumentError.__init__"
    ],
    "gettext.dngettext": [
        "gettext.translation",
        "gettext.NullTranslations.ngettext"
    ],
    "_io.StringIO.truncate": [],
    "_io.StringIO.seek": [],
    "doctest.SkipDocTestCase.__init__": [
        "doctest.DocTestCase.__init__"
    ],
    "doctest.DocTest.__init__": [
        "<builtin>.isinstance"
    ],
    "pdb.Pdb.set_continue": [],
    "doctest.DocTestRunner._failure_header": [
        "doctest._indent"
    ],
    "doctest.DocTestFailure.__init__": [],
    "doctest._indent": [
        "re.sub"
    ],
    "doctest.UnexpectedException.__init__": [],
    "_io.StringIO.getvalue": [],
    "doctest.DocTestFinder._find_lineno": [
        "inspect.isframe",
        "<builtin>.range",
        "inspect.istraceback",
        "<builtin>.enumerate",
        "inspect.isfunction",
        "<builtin>.len",
        "re.compile",
        "inspect.ismodule",
        "<builtin>.getattr",
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.iscode"
    ],
    "sys.getrecursionlimit": [],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "<builtin>.hasattr"
    ],
    "inspect.ismethoddescriptor": [
        "<builtin>.type",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.isclass",
        "inspect.ismethod"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "nt._getfinalpathname": [],
    "ntpath._getfinalpathname_nonstrict": [
        "ntpath.join",
        "ntpath._readlink_deep",
        "ntpath.split",
        "nt._getfinalpathname"
    ],
    "posixpath._joinrealpath": [
        "posixpath._joinrealpath",
        "posixpath.isabs",
        "posixpath.join",
        "posixpath.islink",
        "<builtin>.isinstance",
        "posixpath.split",
        "sys.path.partition",
        "sys.base_prefix.partition"
    ],
    "importlib._bootstrap_external": [
        "importlib._bootstrap_external._NamespacePath",
        "importlib._bootstrap_external._LoaderBasics",
        "importlib._bootstrap_external.SourcelessFileLoader",
        "importlib._bootstrap_external.PathFinder",
        "importlib._bootstrap_external.SourceLoader",
        "importlib._bootstrap_external.FileFinder",
        "importlib._bootstrap_external.SourceFileLoader",
        "<builtin>.type",
        "importlib._bootstrap_external.FileLoader",
        "<builtin>.object",
        "importlib._bootstrap_external.ExtensionFileLoader",
        "importlib._bootstrap_external._NamespaceLoader",
        "importlib._bootstrap_external.WindowsRegistryFinder"
    ],
    "_frozen_importlib._setup": [
        "_frozen_importlib._spec_from_module",
        "_frozen_importlib._builtin_from_name",
        "sys.modules.items",
        "_frozen_importlib._init_module_attrs",
        "<builtin>.setattr",
        "<builtin>.type",
        "<builtin>.isinstance",
        "_imp.is_frozen"
    ],
    "_bootstrap_external._setup": [],
    "_frozen_importlib_external._setup": [
        "_frozen_importlib._builtin_from_name",
        "<builtin>.all",
        "<builtin>.setattr",
        "<builtin>.len",
        "_bootstrap._imp.extension_suffixes",
        "_bootstrap._builtin_from_name",
        "_frozen_importlib_external._make_relax_case"
    ],
    "_bootstrap._setup": [],
    "inspect.getsourcelines": [
        "inspect.getblock",
        "inspect.isframe",
        "inspect.istraceback",
        "inspect.unwrap",
        "inspect.findsource",
        "inspect.ismodule"
    ],
    "_bootstrap._gcd_import": [],
    "_frozen_importlib._gcd_import": [
        "_frozen_importlib._sanity_check",
        "_frozen_importlib._resolve_name",
        "_frozen_importlib._find_and_load"
    ],
    "opcode.name_op": [
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "opcode.def_op"
    ],
    "_opcode": [],
    "opcode.def_op": [],
    "dis.dis": [
        "dis._disassemble_str",
        "<builtin>.sorted",
        "<builtin>.print",
        "dis.dis",
        "dis.distb",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "dis._disassemble_bytes",
        "dis._disassemble_recursive"
    ],
    "unittest.case.TestCase._deprecate": [],
    "asyncio.windows_events": [
        "struct",
        "asyncio.windows_events._WindowsSelectorEventLoop",
        "socket",
        "weakref",
        "asyncio.windows_events.ProactorEventLoop",
        "asyncio.windows_events.WindowsSelectorEventLoopPolicy",
        "math",
        "asyncio.windows_events._OverlappedFuture",
        "asyncio.proactor_events",
        "asyncio.windows_utils",
        "asyncio.windows_events._WaitHandleFuture",
        "asyncio.windows_events.WindowsProactorEventLoopPolicy",
        "asyncio.windows_events._WindowsSubprocessTransport",
        "asyncio.windows_events._BaseWaitHandleFuture",
        "asyncio.windows_events.PipeServer",
        "asyncio.windows_events.IocpProactor",
        "asyncio.windows_events._WaitCancelFuture"
    ],
    "unittest.result.TestResult.failfast": [],
    "<builtin>.staticmethod": [],
    "doctest.DocTestParser.get_examples": [
        "<builtin>.isinstance",
        "doctest.DocTestParser.parse"
    ],
    "doctest._normalize_module": [
        "<builtin>.locals",
        "<builtin>.globals",
        "<builtin>.TypeError",
        "inspect.ismodule",
        "<builtin>.isinstance",
        "<builtin>.__import__",
        "sys._getframe"
    ],
    "doctest._module_relative_path": [
        "<builtin>.ValueError",
        "sys.base_prefix.split",
        "posixpath.join",
        "ntpath.exists",
        "posixpath.exists",
        "ntpath.join",
        "sys.path.startswith",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "ntpath.split",
        "inspect.ismodule",
        "sys.path.split",
        "posixpath.split",
        "<builtin>.len",
        "sys.base_prefix.startswith"
    ],
    "doctest._newline_convert": [],
    "zipfile._Tellable.close": [
        "zipfile._Tellable.close",
        "zipfile.ZipFile.close"
    ],
    "zipfile.ZipFile.close": [
        "zipfile.ZipFile._fpclose",
        "zipfile.ZipFile._write_end_record",
        "<builtin>.ValueError"
    ],
    "tarfile._Stream.__write": [
        "tarfile._LowLevelFile.write",
        "<builtin>.len"
    ],
    "tarfile._LowLevelFile.write": [],
    "tarfile._StreamProxy.close": [
        "tarfile._StreamProxy.close",
        "tarfile._LowLevelFile.close"
    ],
    "tarfile._LowLevelFile.close": [],
    "sys.stderr.flush": [],
    "http.client.HTTPResponse._read_next_chunk_size": [
        "<builtin>.int",
        "http.client.LineTooLong.__init__",
        "<builtin>.len",
        "http.client.HTTPResponse._close_conn"
    ],
    "http.client.HTTPResponse._read_and_discard_trailer": [
        "http.client.LineTooLong.__init__",
        "<builtin>.len"
    ],
    "http.client.HTTPResponse._safe_readinto": [
        "http.client.IncompleteRead.__init__",
        "<builtin>.bytes",
        "<builtin>.len"
    ],
    "zipfile._SharedFile.read": [
        "zipfile.ZipFile.open.<lambda1>",
        "zipfile.ZipFile.read",
        "<builtin>.ValueError",
        "zipfile._Tellable.tell"
    ],
    "zipfile._ZipDecrypter.decrypter": [
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "zipfile._ZipDecrypter.update_keys"
    ],
    "gzip.GzipFile.writable": [],
    "bz2.BZ2File.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "sys.path.encode": [],
    "sys.base_prefix.encode": [],
    "logging.Formatter.format": [
        "logging.Formatter.formatMessage",
        "logging.Formatter.formatTime",
        "logging.Formatter.formatStack",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatException"
    ],
    "_psutil_bsd.proc_name": [],
    "psutil._psaix.Process.create_time": [
        "psutil._psaix.Process._proc_basic_info"
    ],
    "psutil._pssunos.Process.create_time": [
        "psutil._pssunos.Process._proc_basic_info"
    ],
    "psutil._pswindows.Process.create_time": [
        "_psutil_windows.proc_times",
        "psutil._pswindows.Process._proc_info",
        "psutil._pswindows.is_permission_err"
    ],
    "psutil._psbsd.Process.create_time": [
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._pslinux.Process.create_time": [
        "psutil._pslinux.boot_time",
        "psutil._pslinux.Process._parse_stat_file",
        "<builtin>.float"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "<builtin>.SyntaxError",
        "tokenize._get_normal_name"
    ],
    "pprint.PrettyPrinter.format": [
        "pprint._safe_repr"
    ],
    "pprint.PrettyPrinter._format_dict_items": [
        "pprint.PrettyPrinter._format",
        "<builtin>.enumerate",
        "pprint.PrettyPrinter._repr",
        "<builtin>.len"
    ],
    "locale._grouping_intervals": [
        "<builtin>.ValueError"
    ],
    "encodings.normalize_encoding": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "encodings.aliases.aliases.get": [],
    "calendar.HTMLCalendar.formatyearpage": [
        "calendar.HTMLCalendar.formatyear",
        "sys.getdefaultencoding"
    ],
    "sys.getdefaultencoding": [],
    "calendar.TextCalendar.formatmonth": [
        "calendar.Calendar.monthdays2calendar",
        "<builtin>.max",
        "calendar.TextCalendar.formatweek",
        "calendar.TextCalendar.formatmonthname",
        "calendar.LocaleTextCalendar.formatmonthname",
        "calendar.TextCalendar.formatweekheader"
    ],
    "calendar.TextCalendar.formatyear": [
        "calendar.formatstring",
        "<builtin>.max",
        "calendar.TextCalendar.formatweek",
        "<builtin>.repr",
        "calendar.TextCalendar.formatmonthname",
        "calendar.LocaleTextCalendar.formatmonthname",
        "<builtin>.min",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range",
        "calendar.Calendar.yeardays2calendar",
        "calendar.TextCalendar.formatweekheader"
    ],
    "calendar.HTMLCalendar.formatyear": [
        "<builtin>.max",
        "calendar.HTMLCalendar.formatmonth",
        "<builtin>.min",
        "<builtin>.range"
    ],
    "calendar.LocaleTextCalendar.__init__": [
        "locale.getdefaultlocale",
        "calendar.Calendar.__init__"
    ],
    "calendar.HTMLCalendar.formatmonth": [
        "calendar.Calendar.monthdays2calendar",
        "calendar.LocaleHTMLCalendar.formatmonthname",
        "calendar.HTMLCalendar.formatweek",
        "calendar.HTMLCalendar.formatmonthname",
        "calendar.HTMLCalendar.formatweekheader"
    ],
    "calendar.LocaleHTMLCalendar.__init__": [
        "locale.getdefaultlocale",
        "calendar.Calendar.__init__"
    ],
    "optparse.OptionParser._process_long_opt": [
        "<builtin>.tuple",
        "gettext.gettext",
        "optparse.OptionParser._match_long_opt",
        "optparse.OptionParser.error",
        "<builtin>.len",
        "gettext.ngettext"
    ],
    "optparse.OptionParser._process_short_opts": [
        "<builtin>.tuple",
        "optparse.OptionParser.error",
        "gettext.ngettext",
        "<builtin>.len",
        "optparse.BadOptionError.__init__"
    ],
    "optparse.OptionParser._get_all_options": [],
    "optparse.Values.__init__": [
        "<builtin>.setattr"
    ],
    "optparse.OptionError.__init__": [
        "<builtin>.str"
    ],
    "textwrap.TextWrapper": [
        "re.escape",
        "<builtin>.ord",
        "re.compile"
    ],
    "textwrap.dedent": [
        "re.sub",
        "<builtin>.enumerate",
        "<builtin>.zip"
    ],
    "optparse.HelpFormatter.__init__": [
        "<builtin>.max",
        "<builtin>.int",
        "<builtin>.min"
    ],
    "optparse.OptionContainer.add_options": [
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionParser._add_version_option": [
        "gettext.gettext",
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionParser._add_help_option": [
        "gettext.gettext",
        "optparse.OptionContainer.add_option"
    ],
    "optparse.OptionContainer.set_conflict_handler": [
        "<builtin>.ValueError"
    ],
    "optparse.OptionContainer.set_description": [],
    "optparse.OptionGroup._create_option_list": [
        "optparse.OptionContainer._share_option_mappings"
    ],
    "optparse.OptionParser.get_usage": [
        "optparse.IndentedHelpFormatter.format_usage",
        "optparse.OptionParser.expand_prog_name"
    ],
    "_compression.BaseStream._check_can_seek": [
        "bz2.BZ2File.readable",
        "bz2.BZ2File.seekable",
        "lzma.LZMAFile.readable",
        "gzip.GzipFile.seekable",
        "gzip.GzipFile.readable",
        "io.UnsupportedOperation",
        "lzma.LZMAFile.seekable"
    ],
    "tarfile._Stream._read": [
        "tarfile._StreamProxy.read",
        "<builtin>.len",
        "tarfile._LowLevelFile.read",
        "tarfile._Stream.__read"
    ],
    "tarfile.TarInfo.frombuf": [
        "tarfile.nts",
        "tarfile.nti",
        "tarfile.calc_chksums",
        "<builtin>.len",
        "<builtin>.range",
        "tarfile.TarInfo.__init__",
        "<builtin>.bool"
    ],
    "gettext.NullTranslations.ngettext": [],
    "doctest.DocTestCase.__init__": [
        "unittest.case.TestCase.__init__"
    ],
    "inspect._signature_from_callable.<lambda1>": [
        "<builtin>.hasattr"
    ],
    "ntpath._readlink_deep": [
        "ntpath.normcase",
        "ntpath.islink",
        "ntpath.dirname",
        "<builtin>.set",
        "ntpath.join",
        "ntpath.isabs",
        "nt.readlink",
        "ntpath.normpath"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "sys.path.partition": [],
    "sys.base_prefix.partition": [],
    "importlib._bootstrap_external._NamespacePath": [],
    "importlib._bootstrap_external._LoaderBasics": [],
    "importlib._bootstrap_external.SourcelessFileLoader": [],
    "importlib._bootstrap_external.PathFinder": [],
    "importlib._bootstrap_external.SourceLoader": [],
    "importlib._bootstrap_external.FileFinder": [],
    "importlib._bootstrap_external.SourceFileLoader": [],
    "importlib._bootstrap_external.FileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._NamespaceLoader": [],
    "importlib._bootstrap_external.WindowsRegistryFinder": [],
    "_frozen_importlib._spec_from_module": [
        "_frozen_importlib.ModuleSpec.__init__",
        "<builtin>.list"
    ],
    "_frozen_importlib._builtin_from_name": [
        "<builtin>.ImportError",
        "_frozen_importlib.BuiltinImporter.find_spec",
        "_frozen_importlib._load_unlocked"
    ],
    "sys.modules.items": [],
    "_frozen_importlib._init_module_attrs": [
        "<builtin>.getattr"
    ],
    "_imp.is_frozen": [],
    "_bootstrap._imp.extension_suffixes": [],
    "_bootstrap._builtin_from_name": [],
    "_frozen_importlib_external._make_relax_case": [],
    "inspect.getblock": [
        "inspect.BlockFinder.tokeneater",
        "<builtin>.iter",
        "inspect.BlockFinder.__init__"
    ],
    "_frozen_importlib._sanity_check": [
        "<builtin>.ImportError",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "_frozen_importlib._resolve_name": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "_frozen_importlib._find_and_load": [
        "_frozen_importlib._ModuleLockManager.__init__",
        "_frozen_importlib._find_and_load_unlocked",
        "<builtin>.ModuleNotFoundError",
        "_frozen_importlib._lock_unlock_module"
    ],
    "dis._disassemble_str": [
        "dis._try_compile",
        "dis._disassemble_recursive"
    ],
    "dis.distb": [
        "<builtin>.RuntimeError",
        "dis.disassemble"
    ],
    "dis._disassemble_bytes": [
        "dis.Instruction._disassemble",
        "<builtin>.max",
        "<builtin>.print",
        "<builtin>.str",
        "<builtin>.len",
        "dis._get_instructions_bytes"
    ],
    "dis._disassemble_recursive": [
        "<builtin>.print",
        "dis.disassemble",
        "<builtin>.hasattr",
        "dis._disassemble_recursive"
    ],
    "asyncio.windows_events._WindowsSelectorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop": [],
    "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [],
    "asyncio.windows_events._OverlappedFuture": [],
    "asyncio.proactor_events": [
        "os",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport",
        "asyncio.proactor_events.BaseProactorEventLoop",
        "threading",
        "socket",
        "asyncio.proactor_events._ProactorWritePipeTransport",
        "collections",
        "asyncio.proactor_events._ProactorReadPipeTransport",
        "asyncio.proactor_events._ProactorDuplexPipeTransport",
        "io",
        "warnings",
        "asyncio.proactor_events._ProactorSocketTransport",
        "asyncio.proactor_events._ProactorDatagramTransport",
        "asyncio.proactor_events._ProactorBasePipeTransport",
        "signal"
    ],
    "asyncio.windows_utils": [
        "<builtin>.ImportError",
        "asyncio.windows_utils.Popen",
        "os",
        "itertools.count",
        "subprocess",
        "warnings",
        "tempfile",
        "asyncio.windows_utils.PipeHandle"
    ],
    "asyncio.windows_events._WaitHandleFuture": [],
    "asyncio.windows_events.WindowsProactorEventLoopPolicy": [],
    "asyncio.windows_events._WindowsSubprocessTransport": [],
    "asyncio.windows_events._BaseWaitHandleFuture": [],
    "asyncio.windows_events.PipeServer": [],
    "asyncio.windows_events.IocpProactor": [],
    "asyncio.windows_events._WaitCancelFuture": [],
    "doctest.DocTestParser.parse": [
        "doctest.DocTestParser._parse_example",
        "doctest.Example.__init__",
        "doctest.DocTestParser._min_indent",
        "<builtin>.len"
    ],
    "zipfile.ZipFile._write_end_record": [
        "zipfile.ZipFile.write",
        "zipfile._strip_extra",
        "<builtin>.max",
        "<builtin>.print",
        "zipfile._Tellable.tell",
        "<builtin>.min",
        "<builtin>.len",
        "zipfile._Tellable.flush",
        "zipfile._Tellable.write"
    ],
    "http.client.LineTooLong.__init__": [],
    "zipfile.ZipFile.open.<lambda1>": [],
    "zipfile.ZipFile.read": [
        "zipfile.ZipFile.open",
        "zipfile.ZipFile.read"
    ],
    "zipfile._Tellable.tell": [],
    "zipfile._ZipDecrypter.update_keys": [
        "zipfile._ZipDecrypter.crc32"
    ],
    "logging.Formatter.formatMessage": [],
    "logging.Formatter.formatTime": [
        "time.strftime",
        "time.localtime"
    ],
    "logging.Formatter.formatStack": [],
    "logging.Formatter.usesTime": [],
    "logging.Formatter.formatException": [
        "io.StringIO",
        "traceback.print_exception"
    ],
    "psutil._psaix.Process._proc_basic_info": [
        "_psutil_aix.proc_basic_info"
    ],
    "_psutil_windows.proc_times": [],
    "psutil._pswindows.Process._proc_info": [
        "_psutil_windows.proc_info",
        "<builtin>.len"
    ],
    "psutil._pswindows.is_permission_err": [
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "psutil._pslinux.boot_time": [
        "<builtin>.RuntimeError",
        "_common.open_binary",
        "<builtin>.float",
        "_common.get_procfs_path"
    ],
    "psutil._pslinux.Process._parse_stat_file": [
        "_common.bcat"
    ],
    "tokenize._get_normal_name": [],
    "calendar.Calendar.monthdays2calendar": [
        "calendar.Calendar.itermonthdays2",
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.range"
    ],
    "calendar.TextCalendar.formatweek": [
        "calendar.TextCalendar.formatday"
    ],
    "calendar.TextCalendar.formatmonthname": [],
    "calendar.LocaleTextCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.TextCalendar.formatweekheader": [
        "calendar.LocaleTextCalendar.formatweekday",
        "calendar.Calendar.iterweekdays",
        "calendar.TextCalendar.formatweekday"
    ],
    "calendar.formatstring": [],
    "calendar.Calendar.yeardays2calendar": [
        "calendar.Calendar.monthdays2calendar",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "calendar.LocaleHTMLCalendar.formatmonthname": [
        "calendar.different_locale.__init__"
    ],
    "calendar.HTMLCalendar.formatweek": [
        "calendar.HTMLCalendar.formatday"
    ],
    "calendar.HTMLCalendar.formatmonthname": [],
    "calendar.HTMLCalendar.formatweekheader": [
        "calendar.HTMLCalendar.formatweekday",
        "calendar.LocaleHTMLCalendar.formatweekday",
        "calendar.Calendar.iterweekdays"
    ],
    "optparse.OptionParser._match_long_opt": [
        "optparse._match_abbrev"
    ],
    "optparse.BadOptionError.__init__": [],
    "optparse.OptionContainer._share_option_mappings": [],
    "optparse.IndentedHelpFormatter.format_usage": [
        "gettext.gettext"
    ],
    "optparse.OptionParser.expand_prog_name": [
        "optparse.OptionParser.get_prog_name"
    ],
    "bz2.BZ2File.seekable": [
        "bz2.BZ2File.readable"
    ],
    "gzip.GzipFile.seekable": [],
    "lzma.LZMAFile.seekable": [
        "lzma.LZMAFile.readable"
    ],
    "tarfile._StreamProxy.read": [],
    "tarfile._LowLevelFile.read": [],
    "tarfile._Stream.__read": [
        "tarfile._StreamProxy.read",
        "tarfile._LowLevelFile.read",
        "<builtin>.len"
    ],
    "tarfile.nts": [],
    "tarfile.nti": [
        "tarfile.nts",
        "<builtin>.int",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "tarfile.calc_chksums": [
        "<builtin>.sum"
    ],
    "tarfile.TarInfo.__init__": [],
    "unittest.case.TestCase.__init__": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "unittest.case.TestCase.addTypeEqualityFunc"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "nt.readlink": [],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "importlib._bootstrap_external._check_name": [
        "importlib._bootstrap_external._check_name._wrap"
    ],
    "_frozen_importlib.ModuleSpec.__init__": [],
    "_frozen_importlib.BuiltinImporter.find_spec": [
        "_frozen_importlib.spec_from_loader"
    ],
    "_frozen_importlib._load_unlocked": [
        "<builtin>.ImportError",
        "_frozen_importlib.module_from_spec",
        "_frozen_importlib._load_backward_compatible",
        "_frozen_importlib._verbose_message",
        "<builtin>.hasattr",
        "_frozen_importlib.BuiltinImporter.exec_module",
        "_frozen_importlib.FrozenImporter.exec_module"
    ],
    "inspect.BlockFinder.tokeneater": [],
    "inspect.BlockFinder.__init__": [],
    "_frozen_importlib._ModuleLockManager.__init__": [],
    "_frozen_importlib._find_and_load_unlocked": [
        "<builtin>.ModuleNotFoundError",
        "_frozen_importlib._load_unlocked",
        "<builtin>.setattr",
        "_frozen_importlib._call_with_frames_removed",
        "_frozen_importlib._find_spec"
    ],
    "<builtin>.ModuleNotFoundError": [],
    "_frozen_importlib._lock_unlock_module": [
        "_frozen_importlib._ModuleLock.release",
        "_frozen_importlib._ModuleLock.acquire",
        "_frozen_importlib._DummyModuleLock.release",
        "_frozen_importlib._get_module_lock",
        "_frozen_importlib._DummyModuleLock.acquire"
    ],
    "dis._try_compile": [
        "<builtin>.compile"
    ],
    "dis.disassemble": [
        "<builtin>.dict",
        "dis._disassemble_bytes",
        "dis.findlinestarts"
    ],
    "dis.Instruction._disassemble": [
        "<builtin>.repr"
    ],
    "dis._get_instructions_bytes": [
        "<builtin>.repr",
        "dis._get_name_info",
        "dis._unpack_opargs",
        "dis.findlabels",
        "<builtin>.enumerate",
        "<builtin>.bool",
        "dis._get_const_info"
    ],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport": [],
    "asyncio.proactor_events.BaseProactorEventLoop": [],
    "asyncio.proactor_events._ProactorWritePipeTransport": [],
    "asyncio.proactor_events._ProactorReadPipeTransport": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport": [],
    "asyncio.proactor_events._ProactorSocketTransport": [],
    "asyncio.proactor_events._ProactorDatagramTransport": [],
    "asyncio.proactor_events._ProactorBasePipeTransport": [],
    "asyncio.windows_utils.Popen": [],
    "asyncio.windows_utils.PipeHandle": [],
    "doctest.DocTestParser._parse_example": [
        "re.match",
        "doctest.DocTestParser._find_options",
        "doctest.DocTestParser._check_prompt_blank",
        "doctest.DocTestParser._check_prefix",
        "<builtin>.len"
    ],
    "doctest.Example.__init__": [],
    "doctest.DocTestParser._min_indent": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "zipfile.ZipFile.write": [
        "shutil.copyfileobj",
        "<builtin>.ValueError",
        "zipfile.ZipFile.write",
        "zipfile.ZipFile.open",
        "zipfile._Tellable.tell",
        "zipfile.ZipFile._writecheck",
        "zipfile._Tellable.write",
        "zipfile.ZipInfo.from_file"
    ],
    "zipfile._strip_extra": [
        "<builtin>.len"
    ],
    "zipfile._Tellable.flush": [
        "zipfile._Tellable.flush"
    ],
    "zipfile._Tellable.write": [
        "zipfile.ZipFile.write",
        "zipfile._Tellable.write"
    ],
    "zipfile.ZipFile.open": [
        "zipfile._SharedFile.read",
        "<builtin>.ValueError",
        "zipfile.ZipFile.getinfo",
        "zipfile._SharedFile.__init__",
        "zipfile.ZipInfo.__init__",
        "<builtin>.NotImplementedError",
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.len",
        "zipfile._SharedFile.close",
        "<builtin>.isinstance",
        "zipfile.ZipFile._open_to_write",
        "zipfile.ZipExtFile.__init__"
    ],
    "zipfile._ZipDecrypter.crc32": [],
    "_psutil_aix.proc_basic_info": [],
    "_psutil_windows.proc_info": [],
    "calendar.Calendar.itermonthdays2": [
        "<builtin>.enumerate",
        "calendar.Calendar.itermonthdays"
    ],
    "calendar.TextCalendar.formatday": [],
    "calendar.different_locale.__init__": [],
    "calendar.LocaleTextCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "calendar.Calendar.iterweekdays": [
        "<builtin>.range"
    ],
    "calendar.TextCalendar.formatweekday": [],
    "calendar.HTMLCalendar.formatday": [],
    "calendar.HTMLCalendar.formatweekday": [],
    "calendar.LocaleHTMLCalendar.formatweekday": [
        "calendar.different_locale.__init__"
    ],
    "optparse._match_abbrev": [
        "optparse.AmbiguousOptionError.__init__",
        "optparse.BadOptionError.__init__",
        "<builtin>.len"
    ],
    "unittest.case.TestCase.addTypeEqualityFunc": [],
    "stat.S_IFMT": [],
    "importlib._bootstrap_external._check_name._wrap": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.setattr"
    ],
    "_frozen_importlib.spec_from_loader": [
        "_frozen_importlib.FrozenImporter.is_package",
        "_frozen_importlib.ModuleSpec.__init__",
        "_frozen_importlib.BuiltinImporter.is_package",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib.module_from_spec": [
        "<builtin>.ImportError",
        "_frozen_importlib._init_module_attrs",
        "_frozen_importlib.BuiltinImporter.create_module",
        "_frozen_importlib._new_module",
        "<builtin>.hasattr",
        "_frozen_importlib.FrozenImporter.create_module"
    ],
    "_frozen_importlib._load_backward_compatible": [
        "_frozen_importlib.FrozenImporter.load_module",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "_frozen_importlib._verbose_message": [
        "<builtin>.print"
    ],
    "_frozen_importlib.BuiltinImporter.exec_module": [
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib.FrozenImporter.exec_module": [
        "<builtin>.ImportError",
        "<builtin>.exec",
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib._call_with_frames_removed": [
        "_frozen_importlib._gcd_import"
    ],
    "_frozen_importlib._find_spec": [
        "<builtin>.ImportError",
        "_frozen_importlib._find_spec_legacy"
    ],
    "_frozen_importlib._ModuleLock.release": [
        "<builtin>.RuntimeError"
    ],
    "_frozen_importlib._ModuleLock.acquire": [
        "_frozen_importlib._ModuleLock.has_deadlock"
    ],
    "_frozen_importlib._DummyModuleLock.release": [
        "<builtin>.RuntimeError"
    ],
    "_frozen_importlib._get_module_lock": [
        "_frozen_importlib._ModuleLock.__init__",
        "_frozen_importlib._DummyModuleLock.__init__"
    ],
    "_frozen_importlib._DummyModuleLock.acquire": [],
    "dis.findlinestarts": [
        "<builtin>.zip",
        "<builtin>.len"
    ],
    "dis._get_name_info": [
        "<builtin>.repr"
    ],
    "dis._unpack_opargs": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "dis.findlabels": [
        "dis._unpack_opargs"
    ],
    "dis._get_const_info": [
        "<builtin>.repr"
    ],
    "doctest.DocTestParser._find_options": [
        "<builtin>.ValueError"
    ],
    "doctest.DocTestParser._check_prompt_blank": [
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "doctest.DocTestParser._check_prefix": [
        "<builtin>.ValueError",
        "<builtin>.enumerate"
    ],
    "shutil.copyfileobj": [],
    "zipfile.ZipFile._writecheck": [
        "<builtin>.ValueError",
        "zipfile._check_compression",
        "warnings.warn",
        "warnings",
        "<builtin>.len"
    ],
    "zipfile.ZipInfo.from_file": [
        "stat.S_ISDIR",
        "time.localtime",
        "ntpath.splitdrive",
        "posixpath.splitdrive",
        "zipfile.ZipInfo.__init__",
        "posixpath.normpath",
        "<builtin>.isinstance",
        "ntpath.normpath"
    ],
    "zipfile.ZipFile.getinfo": [
        "<builtin>.KeyError"
    ],
    "zipfile._SharedFile.__init__": [],
    "zipfile.ZipInfo.__init__": [
        "<builtin>.chr",
        "<builtin>.ValueError",
        "sys.path.replace",
        "sys.base_prefix.find",
        "sys.base_prefix.replace",
        "sys.path.find"
    ],
    "zipfile.ZipFile._open_to_write": [
        "<builtin>.ValueError",
        "zipfile.ZipFile.write",
        "zipfile._Tellable.tell",
        "sys.base_prefix.FileHeader",
        "<builtin>.hasattr",
        "sys.path.FileHeader",
        "zipfile._ZipWriteFile.__init__",
        "zipfile.ZipFile._writecheck",
        "zipfile._Tellable.write",
        "zipfile.ZipInfo.FileHeader"
    ],
    "zipfile.ZipExtFile.__init__": [
        "<builtin>.RuntimeError",
        "<builtin>.hasattr",
        "zipfile.ZipExtFile._init_decrypter",
        "zipfile._get_decompressor"
    ],
    "calendar.Calendar.itermonthdays": [
        "calendar.monthrange",
        "itertools.repeat",
        "<builtin>.range"
    ],
    "optparse.AmbiguousOptionError.__init__": [
        "optparse.BadOptionError.__init__"
    ],
    "_frozen_importlib.FrozenImporter.is_package": [],
    "_frozen_importlib.BuiltinImporter.is_package": [],
    "_frozen_importlib.BuiltinImporter.create_module": [
        "<builtin>.ImportError",
        "_frozen_importlib._call_with_frames_removed"
    ],
    "_frozen_importlib._new_module": [
        "<builtin>.type"
    ],
    "_frozen_importlib.FrozenImporter.create_module": [],
    "_frozen_importlib.FrozenImporter.load_module": [
        "_frozen_importlib._load_module_shim"
    ],
    "_frozen_importlib._find_spec_legacy": [
        "_frozen_importlib.spec_from_loader"
    ],
    "_frozen_importlib._ModuleLock.has_deadlock": [],
    "_frozen_importlib._ModuleLock.__init__": [],
    "_frozen_importlib._DummyModuleLock.__init__": [],
    "zipfile._check_compression": [
        "<builtin>.RuntimeError",
        "<builtin>.NotImplementedError"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "posixpath.splitdrive": [],
    "sys.base_prefix.find": [],
    "sys.path.find": [],
    "zipfile._ZipWriteFile.__init__": [
        "zipfile._get_compressor"
    ],
    "zipfile.ZipExtFile._init_decrypter": [
        "zipfile._SharedFile.read",
        "zipfile._ZipDecrypter.decrypter",
        "zipfile._ZipDecrypter"
    ],
    "zipfile._get_decompressor": [
        "<builtin>.NotImplementedError",
        "zipfile._check_compression",
        "zipfile.LZMADecompressor.__init__"
    ],
    "calendar.monthrange": [
        "calendar.weekday",
        "calendar.IllegalMonthError.__init__",
        "calendar.isleap"
    ],
    "_frozen_importlib._load_module_shim": [
        "_frozen_importlib.spec_from_loader",
        "_frozen_importlib._load",
        "_frozen_importlib._exec"
    ],
    "zipfile._get_compressor": [
        "zipfile.LZMACompressor.__init__"
    ],
    "zipfile._ZipDecrypter": [
        "<builtin>.map",
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.list",
        "<builtin>.range"
    ],
    "zipfile.LZMADecompressor.__init__": [],
    "calendar.weekday": [
        "datetime.datetime.date"
    ],
    "calendar.IllegalMonthError.__init__": [],
    "calendar.isleap": [],
    "_frozen_importlib._load": [
        "_frozen_importlib._ModuleLockManager.__init__",
        "_frozen_importlib._load_unlocked"
    ],
    "_frozen_importlib._exec": [
        "<builtin>.ImportError",
        "_frozen_importlib.FrozenImporter.load_module",
        "_frozen_importlib._ModuleLockManager.__init__",
        "_frozen_importlib._init_module_attrs",
        "<builtin>.hasattr",
        "_frozen_importlib.BuiltinImporter.exec_module",
        "_frozen_importlib.FrozenImporter.exec_module"
    ],
    "zipfile.LZMACompressor.__init__": []
}