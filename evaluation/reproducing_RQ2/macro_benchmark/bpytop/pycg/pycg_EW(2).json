{"_py_abc": ["_py_abc.ABCMeta", "_weakrefset"], "_weakrefset": ["_weakrefset._IterationGuard", "_weakrefset.WeakSet"], "abc": ["abc.ABC", "abc.abstractstaticmethod", "_py_abc", "abc.abstractproperty", "abc.ABCMeta", "abc.abstractclassmethod"], "os": ["abc", "os._wrap_close", "os._add", "os._exists", "os._Environ.__init__", "os.PathLike", "collections.abc", "<builtin>.ImportError", "os._Environ", "<builtin>.set", "os._createenviron", "os._get_exports_list", "os._fscodec", "os._AddedDllDirectory", "<builtin>.globals", "posixpath", "ntpath", "stat"], "stat": [], "_collections_abc": ["_collections_abc.AsyncIterable", "_collections_abc.Hashable", "abc", "<builtin>.reversed", "_collections_abc.Generator", "<builtin>.type", "_collections_abc.Iterable", "_collections_abc.Iterator", "_collections_abc.ValuesView", "_collections_abc.AsyncGenerator", "_collections_abc.Sequence", "_collections_abc.MappingView", "<builtin>.set", "_collections_abc.MutableSet", "_collections_abc.Reversible", "_collections_abc.KeysView", "_collections_abc.ByteString", "_collections_abc.Awaitable", "<builtin>.bytearray", "_collections_abc.Coroutine", "_collections_abc.Collection", "_collections_abc.MutableMapping", "_collections_abc.ItemsView", "<builtin>.zip", "_collections_abc.Callable", "_collections_abc.Sized", "<builtin>.range", "_collections_abc.Mapping", "<builtin>.iter", "_collections_abc.MutableSequence", "_collections_abc.AsyncIterator", "_collections_abc.Container", "_collections_abc.Set"], "posixpath": ["os", "genericpath", "stat"], "genericpath": ["os", "stat"], "functools": ["collections", "abc", "functools.singledispatchmethod", "collections.namedtuple", "functools.cached_property", "reprlib", "functools.partialmethod", "<builtin>.object", "functools.partial", "functools._HashedSeq"], "operator.methodcaller.__reduce__": ["functools", "_functools.partial"], "collections": ["collections.ChainMap", "keyword", "collections._OrderedDictValuesView", "reprlib", "collections.Counter", "collections.UserDict", "heapq", "collections.UserList", "collections.UserString", "collections._OrderedDictKeysView", "collections._OrderedDictItemsView", "collections.OrderedDict", "collections._Link", "operator"], "operator": ["operator.attrgetter", "operator.itemgetter", "operator.methodcaller"], "keyword": ["<builtin>.frozenset"], "heapq": ["doctest", "<builtin>.print", "_heapq", "doctest.testmod"], "_heapq": [], "doctest": ["doctest.UnexpectedException", "doctest.DocTestParser", "__future__", "doctest.register_optionflag", "inspect", "doctest._test", "unittest", "traceback", "linecache", "doctest.DocFileCase", "collections", "difflib", "doctest.DocTestFinder", "doctest._SpoofOut", "collections.namedtuple", "doctest.DocTestCase", "doctest.Example", "sys.exit", "doctest._DocTestSuite", "doctest.DebugRunner", "doctest._TestClass", "doctest._OutputRedirectingPdb", "doctest.SkipDocTestCase", "doctest.OutputChecker", "doctest.DocTest", "re", "io", "doctest.DocTestRunner", "os", "doctest.DocTestFailure"], "__future__": ["__future__._Feature.__init__", "__future__._Feature"], "difflib": ["difflib.HtmlDiff", "collections", "difflib._test", "difflib.SequenceMatcher", "collections.namedtuple", "heapq", "difflib.Differ", "re"], "re": ["enum", "functools.lru_cache.decorating_function", "re.RegexFlag", "sre_compile.compile", "functools._lru_cache_wrapper.wrapper", "<builtin>.type", "sre_compile", "copyreg.pickle", "sre_parse", "functools.singledispatch.wrapper", "functools.update_wrapper.wrapper", "re.Scanner", "<builtin>.chr", "functools", "<builtin>.globals", "functools.lru_cache", "copyreg"], "difflib._mdiff": ["<builtin>.next", "re.compile", "re", "difflib._mdiff._line_pair_iterator", "difflib.ndiff"], "difflib._test": ["doctest", "doctest.testmod", "difflib"], "inspect": ["<builtin>.hasattr", "abc", "inspect._void", "<builtin>.type", "functools", "linecache", "inspect._ParameterKind", "inspect.BoundArguments", "types", "collections", "collections.namedtuple", "inspect._main", "dis", "inspect.EndOfBlock", "inspect._empty", "tokenize", "warnings", "importlib.machinery", "re", "<builtin>.globals", "operator", "enum", "inspect.BlockFinder", "collections.abc", "os", "inspect.Parameter", "inspect.Signature", "<builtin>.object", "token"], "dis": ["types", "io", "collections", "dis.Instruction", "dis.Bytecode", "collections.namedtuple", "dis._test", "opcode"], "types": ["types.DynamicClassAttribute", "<builtin>.type", "types._g", "types._cell_factory", "types._GeneratorWrapper", "<builtin>.object", "<builtin>.globals", "sys.exc_info", "types._C"], "io": ["_io._RawIOBase.register", "abc", "_io._IOBase.register", "io.RawIOBase", "io.IOBase", "io.BufferedIOBase", "io.TextIOBase"], "opcode": ["opcode.def_op", "_opcode", "opcode.name_op", "<builtin>.range", "opcode.jrel_op", "opcode.jabs_op"], "_opcode": [], "argparse": ["gettext", "argparse._StoreConstAction", "argparse._StoreAction", "argparse.HelpFormatter", "argparse._SubParsersAction", "argparse._StoreFalseAction", "argparse._CountAction", "argparse._ArgumentGroup", "argparse._AppendConstAction", "argparse._ExtendAction", "argparse._HelpAction", "argparse.RawDescriptionHelpFormatter", "argparse._MutuallyExclusiveGroup", "argparse.ArgumentDefaultsHelpFormatter", "argparse.FileType", "argparse._VersionAction", "argparse.ArgumentParser", "argparse.ArgumentTypeError", "argparse.RawTextHelpFormatter", "shutil", "argparse.MetavarTypeHelpFormatter", "re", "argparse.Namespace", "argparse.Action", "argparse.ArgumentError", "argparse._ActionsContainer", "os", "argparse._AttributeHolder", "argparse._AppendAction", "argparse._StoreTrueAction"], "shutil": ["<builtin>.hasattr", "shutil.SameFileError", "collections", "bz2", "shutil.ExecError", "zlib", "shutil.SpecialFileError", "collections.namedtuple", "fnmatch", "os", "lzma", "sys.platform.startswith", "shutil.ReadError", "shutil.RegistryError", "shutil.Error", "shutil._GiveupOnFastCopy", "grp", "stat"], "fnmatch": ["functools.lru_cache.decorating_function", "functools._lru_cache_wrapper.wrapper", "functools", "os", "functools.singledispatch.wrapper", "functools.update_wrapper.wrapper", "re", "posixpath", "functools.lru_cache"], "zlib": [], "bz2": ["threading", "io", "_compression", "_bz2", "os", "warnings", "bz2.BZ2File", "<builtin>.object"], "linecache": ["functools", "os", "tokenize"], "encodings": ["codecs", "encodings.CodecRegistryError"], "codecs": ["codecs.Codec", "codecs.IncrementalEncoder", "codecs.IncrementalDecoder", "codecs.EncodedFile", "codecs.BufferedIncrementalDecoder", "<builtin>.SystemError", "codecs.StreamWriter", "codecs.StreamReader", "codecs.StreamRecoder", "codecs.CodecInfo", "codecs.BufferedIncrementalEncoder", "encodings", "codecs.StreamReaderWriter"], "encodings.mbcs": ["encodings.mbcs.IncrementalDecoder", "encodings.mbcs.StreamWriter", "encodings.mbcs.StreamReader", "codecs", "encodings.mbcs.IncrementalEncoder"], "encodings._alias_mbcs": ["_winapi.GetACP", "encodings.mbcs", "encodings.mbcs.getregentry"], "tokenize": ["tokenize.main", "io", "collections", "tokenize.maybe", "tokenize._all_string_prefixes", "tokenize.TokenInfo", "token", "<builtin>.map", "tokenize.TokenError", "codecs", "re.compile", "tokenize.Untokenizer", "<builtin>.sorted", "<builtin>.set", "tokenize.group", "re", "tokenize.StopTokenizing", "tokenize.any"], "token": ["<builtin>.globals", "<builtin>.isinstance"], "tokenize.main": ["argparse", "tokenize._tokenize", "tokenize.main.perror", "tokenize.main.error", "argparse._ActionsContainer.add_argument", "<builtin>.print", "<builtin>.list", "argparse.ArgumentParser.parse_args", "tokenize.tokenize", "builtins.open", "argparse.ArgumentParser.__init__"], "warnings._formatwarnmsg_impl": ["linecache.getline", "tracemalloc", "linecache", "tracemalloc.get_object_traceback"], "collections.abc": ["collections.abc"], "tracemalloc": ["tracemalloc.Traceback", "pickle", "tracemalloc.Filter", "tracemalloc.Frame", "tracemalloc._Traces", "tracemalloc.DomainFilter", "collections.abc", "fnmatch", "tracemalloc.Snapshot", "tracemalloc.Trace", "tracemalloc.BaseFilter", "tracemalloc.StatisticDiff", "functools", "posixpath", "linecache", "tracemalloc.Statistic"], "os.path": ["os", "genericpath", "stat"], "os.path.expandvars": ["<builtin>.isinstance", "re.compile", "<builtin>.len", "<builtin>.getattr", "re"], "pickle": ["argparse", "pickle.PickleError", "_pickle", "functools", "copyreg", "types", "struct", "pprint", "pickle._Pickler", "argparse.ArgumentParser.print_help", "pickle.UnpicklingError", "pickle._Stop", "pickle._test", "pickle.PicklingError", "codecs", "re.match", "argparse.ArgumentParser.parse_args", "pickle._load", "re", "pickle._Unpickler", "unittest.main.TestProgram._print_help", "argparse.FileType.__init__", "io", "<builtin>.dir", "pickle._Unframer", "argparse._ActionsContainer.add_argument", "_compat_pickle", "pickle._Framer", "argparse.ArgumentParser.__init__"], "copyreg": ["copyreg.pickle"], "struct": ["_struct"], "_struct": [], "_compat_pickle": ["<builtin>.len", "<builtin>.dict"], "_pickle": [], "pickle._test": ["doctest", "doctest.testmod"], "pprint": ["types", "io", "collections", "pprint.PrettyPrinter", "pprint._perfcheck", "<builtin>.frozenset", "<builtin>.type", "pprint._safe_key", "re"], "warnings.filterwarnings": ["<builtin>.issubclass", "<builtin>.isinstance", "re.compile", "warnings._add_filter", "re"], "warnings._setoption": ["warnings._getcategory", "<builtin>.int", "warnings._getaction", "<builtin>.len", "warnings.filterwarnings", "re.escape", "sys.warnoptions.split", "re"], "warnings.warn_explicit": ["<builtin>.issubclass", "linecache.getlines", "warnings.WarningMessage.__init__", "<builtin>.isinstance", "<builtin>.int", "<builtin>.str", "warnings._showwarnmsg", "<builtin>.RuntimeError", "linecache", "_warnings._onceregistry.get"], "warnings._warn_unawaited_coroutine": ["traceback.format_list", "<builtin>.list", "warnings._warn_unawaited_coroutine.extract", "traceback", "linecache", "_warnings.warn"], "traceback": ["traceback.TracebackException", "collections", "traceback.StackSummary", "traceback.FrameSummary", "linecache"], "warnings": ["<builtin>.hasattr", "warnings.catch_warnings", "warnings._processoptions", "warnings.filterwarnings", "warnings.WarningMessage", "warnings.simplefilter", "warnings._OptionError"], "_compression": ["_compression.BaseStream", "_compression.DecompressReader", "io"], "threading": ["<builtin>.hasattr", "_weakrefset", "threading.BrokenBarrierError", "traceback", "_threading_local", "threading._DummyThread", "collections", "itertools.count", "threading.Thread", "collections.namedtuple", "threading.Barrier", "<builtin>.set", "_thread.allocate_lock", "threading.Condition", "threading.Timer", "threading.Semaphore", "threading.BoundedSemaphore", "_weakrefset.WeakSet.__init__", "threading._MainThread", "threading._MainThread.__init__", "threading.Event", "os", "threading._RLock"], "_bz2": [], "lzma": ["io", "lzma.LZMAFile", "_compression", "os", "_lzma"], "_lzma": [], "grp": [], "tarfile": ["tarfile._LowLevelFile", "sys.getfilesystemencoding", "tarfile.TarInfo", "tarfile.ExtractError", "tarfile.ReadError", "tarfile.HeaderError", "struct", "tarfile.StreamError", "tarfile.TarError", "tarfile.TruncatedHeaderError", "tarfile._Stream", "tarfile.main", "grp", "stat", "tarfile.CompressionError", "shutil", "re", "io", "tarfile.EmptyHeaderError", "tarfile._StreamProxy", "tarfile.SubsequentHeaderError", "tarfile.EOFHeaderError", "os", "copy", "tarfile.ExFileObject", "tarfile.TarFile", "tarfile._FileInFile", "tarfile.InvalidHeaderError"], "copy": ["types", "<builtin>.type", "copy.Error", "weakref", "<builtin>.getattr", "copyreg"], "weakref": ["_weakrefset", "weakref.WeakKeyDictionary", "weakref.WeakMethod", "weakref.WeakValueDictionary", "weakref.finalize", "collections.abc", "weakref.KeyedRef"], "weakref.WeakValueDictionary.__deepcopy__": ["weakref.WeakValueDictionary._commit_removals", "copy.deepcopy", "copy", "_weakrefset._IterationGuard.__init__"], "weakref.WeakKeyDictionary.__deepcopy__": ["copy.deepcopy", "copy", "_weakrefset._IterationGuard.__init__"], "weakref.finalize.__init__": ["<builtin>.tuple", "<builtin>.next", "warnings.warn", "atexit.register", "<builtin>.TypeError", "<builtin>.len", "warnings", "_weakref.ref"], "tarfile._Stream.__init__": ["bz2", "tarfile._StreamProxy.__init__", "zlib", "tarfile._StreamProxy.getcomptype", "tarfile._Stream._init_read_gz", "tarfile._LowLevelFile.__init__", "tarfile._Stream._init_write_gz", "lzma", "tarfile._LowLevelFile.close", "tarfile._StreamProxy.close"], "gzip": ["struct", "io", "gzip._GzipReader", "zlib", "gzip.BadGzipFile", "gzip._PaddedFile", "_compression", "os", "gzip.main", "gzip.GzipFile"], "gzip.GzipFile.filename": ["warnings", "warnings.warn"], "gzip.main": ["argparse", "asyncio.windows_utils.PipeHandle.close", "_io._IOBase.close", "<builtin>.print", "socket.SocketIO.close", "argparse._ActionsContainer.add_mutually_exclusive_group", "http.client.HTTPResponse.read", "bz2.BZ2File.read", "<builtin>.repr", "sys.stdin.buffer.read", "http.client.HTTPResponse.close", "gzip.GzipFile.close", "bz2.BZ2File.write", "lzma.LZMAFile.read", "builtins.open", "sys.stdout.buffer.write", "sys.stdout.close", "gzip.open", "sys.stdin.buffer.close", "gzip.GzipFile.write", "_compression.DecompressReader.read", "zipfile.ZipExtFile.read", "argparse.ArgumentParser.parse_args", "sys.stdout.read", "gzip._GzipReader.read", "lzma.LZMAFile.write", "gzip.GzipFile.read", "_io._IOBase.read", "_compression.DecompressReader.close", "zipfile._ZipWriteFile.write", "sys.stdout.buffer.close", "argparse._ActionsContainer.add_argument", "xml.etree.ElementTree._ListDataStream.write", "bz2.BZ2File.close", "zipfile._ZipWriteFile.close", "zipfile.ZipExtFile.close", "argparse.ArgumentParser.__init__", "gzip.GzipFile.__init__", "lzma.LZMAFile.close", "sys.stdout.write"], "tarfile.TarFile.gzopen": ["tarfile.TarFile.taropen", "<builtin>.ValueError", "gzip", "gzip.GzipFile.close", "gzip.GzipFile.__init__"], "tarfile.TarFile.bz2open": ["bz2", "bz2.BZ2File.close", "tarfile.TarFile.taropen", "<builtin>.ValueError", "bz2.BZ2File.__init__"], "tarfile.TarFile.xzopen": ["tarfile.TarFile.taropen", "lzma.LZMAFile.__init__", "<builtin>.ValueError", "lzma", "lzma.LZMAFile.close"], "tarfile.main": ["argparse", "argparse._ActionsContainer.add_argument", "<builtin>.print", "argparse.ArgumentParser.exit", "argparse._ActionsContainer.add_mutually_exclusive_group", "ntpath.splitext", "argparse.ArgumentParser.parse_args", "<builtin>.len", "posixpath.splitext", "argparse.ArgumentParser.format_help", "tarfile.TarFile.open", "argparse.ArgumentParser.__init__", "tarfile.is_tarfile"], "shutil._make_tarball": ["ntpath.dirname", "ntpath.exists", "tarfile", "<builtin>.ValueError", "posixpath.exists", "posixpath.dirname", "os.makedirs", "shutil._get_uid", "shutil._get_gid"], "zipfile": ["threading", "contextlib", "zipfile.ZipFile", "zipfile._Tellable", "zipfile.BadZipFile", "lzma", "functools", "posixpath", "binascii", "struct", "zipfile.Path", "zipfile.main", "zipfile._ZipWriteFile", "zipfile.LZMACompressor", "zipfile._SharedFile", "stat", "bz2", "zipfile.CompleteDirs", "zlib", "zipfile.ZipInfo", "zipfile.ZipExtFile", "zipfile.LZMADecompressor", "shutil", "zipfile.FastLookup", "io", "importlib.util", "zipfile.PyZipFile", "os", "zipfile.LargeZipFile"], "binascii": [], "contextlib": ["contextlib.ContextDecorator", "abc", "contextlib.AbstractAsyncContextManager", "functools", "types", "collections", "contextlib.AsyncExitStack", "contextlib._GeneratorContextManagerBase", "contextlib.closing", "contextlib._GeneratorContextManager", "contextlib._AsyncGeneratorContextManager", "contextlib.ExitStack", "contextlib._BaseExitStack", "contextlib.AbstractContextManager", "contextlib._RedirectStream", "contextlib.nullcontext", "contextlib.redirect_stderr", "contextlib.suppress", "collections.abc", "contextlib.redirect_stdout"], "contextlib._BaseExitStack.callback": ["<builtin>.TypeError", "<builtin>.len", "warnings", "warnings.warn"], "contextlib.AsyncExitStack.push_async_callback": ["<builtin>.TypeError", "<builtin>.len", "warnings", "warnings.warn"], "importlib.util": ["importlib.util._LazyModule", "types", "contextlib", "contextlib.contextmanager", "importlib.util.LazyLoader", "warnings", "functools"], "zipfile.ZipFile.comment": ["<builtin>.isinstance", "warnings.warn", "<builtin>.type", "<builtin>.TypeError", "<builtin>.len", "warnings"], "zipfile.ZipFile._writecheck": ["zipfile._check_compression", "warnings.warn", "<builtin>.ValueError", "<builtin>.len", "warnings"], "py_compile": ["enum", "importlib.util", "py_compile.PyCompileError", "sys.exit", "py_compile.PycInvalidationMode", "os", "importlib.machinery", "importlib._bootstrap_external", "traceback", "posixpath", "py_compile.main"], "enum": ["enum.IntFlag", "enum.EnumMeta", "types", "enum.IntEnum", "enum.Flag", "enum._EnumDict", "enum.Enum", "enum.auto", "<builtin>.object"], "importlib._bootstrap_external.decode_source": ["tokenize"], "importlib.metadata": ["importlib.metadata.MetadataPathFinder", "contextlib", "abc", "pathlib", "importlib.metadata.PackagePath", "functools", "importlib.metadata.PackageNotFoundError", "posixpath", "importlib.abc", "importlib.metadata.FastPath", "importlib.metadata.FileHash", "collections", "importlib.metadata.EntryPoint", "importlib.metadata.Prepared", "importlib.metadata.DistributionFinder", "email", "importlib", "csv", "re", "operator", "importlib.metadata.PathDistribution", "configparser", "io", "zipfile", "importlib.metadata.Distribution", "os"], "csv": ["io", "csv.Sniffer", "csv.DictReader", "csv.excel", "csv.Dialect", "csv.DictWriter", "_csv", "csv.excel_tab", "re", "csv.unix_dialect"], "_csv": [], "email.parser": ["email.feedparser", "email.parser.HeaderParser", "io", "email.parser.BytesHeaderParser", "email._policybase", "email.parser.BytesParser", "email.parser.Parser"], "email.feedparser": ["email.feedparser.BufferedSubFile", "io", "collections", "email.errors", "re.compile", "email._policybase", "email.feedparser.FeedParser", "<builtin>.object", "re", "email.feedparser.BytesFeedParser"], "email.errors": ["email.errors.UndecodableBytesDefect", "email.errors.ObsoleteHeaderDefect", "email.errors.CharsetError", "email.errors.NonASCIILocalPartDefect", "email.errors.MultipartInvariantViolationDefect", "email.errors.StartBoundaryNotFoundDefect", "email.errors.HeaderMissingRequiredValue", "email.errors.MessageError", "email.errors.BoundaryError", "email.errors.FirstHeaderLineIsContinuationDefect", "email.errors.NoBoundaryInMultipartDefect", "email.errors.MisplacedEnvelopeHeaderDefect", "email.errors.NonPrintableDefect", "email.errors.InvalidBase64PaddingDefect", "email.errors.InvalidBase64CharactersDefect", "email.errors.InvalidMultipartContentTransferEncodingDefect", "email.errors.InvalidBase64LengthDefect", "email.errors.MessageParseError", "email.errors.MessageDefect", "email.errors.InvalidHeaderDefect", "email.errors.CloseBoundaryNotFoundDefect", "email.errors.HeaderDefect", "email.errors.HeaderParseError", "email.errors.MissingHeaderBodySeparatorDefect", "email.errors.MultipartConversionError"], "email._policybase": ["abc", "email.utils", "email._policybase.Policy", "email.charset", "email._policybase._PolicyBase.__init__", "email._policybase._PolicyBase", "email._policybase.Compat32", "email.header"], "email.header": ["email.charset.Charset.__init__", "email.header.Header", "email.errors", "email.charset", "re.compile", "email.base64mime", "email.header._ValueFormatter", "email.quoprimime", "re", "email.header._Accumulator", "binascii"], "email.quoprimime": ["<builtin>.ord", "<builtin>.range", "string", "<builtin>.chr", "re"], "string": ["collections", "string._TemplateMetaclass", "string.Formatter", "re", "string.Template"], "base64": ["re", "struct", "base64.main", "binascii"], "base64.encodestring": ["warnings", "warnings.warn", "base64.encodebytes"], "base64.decodestring": ["base64.decodebytes", "warnings", "warnings.warn"], "getopt": ["gettext", "getopt.getopt", "<builtin>.print", "os", "getopt.GetoptError"], "locale": ["<builtin>.hasattr", "functools", "<builtin>.print", "locale._print_locale", "re.compile", "encodings.aliases", "collections.abc", "locale._test", "<builtin>.sorted", "sys.platform.startswith", "_functools.partial", "re", "<builtin>.globals", "functools.wraps", "encodings"], "encodings.aliases": [], "locale.format": ["locale._format", "warnings.warn", "<builtin>.ValueError", "<builtin>.len", "warnings", "<builtin>.repr"], "locale.getdefaultlocale": ["<builtin>.int", "os", "locale._parse_localename", "_locale._getdefaultlocale"], "_bootlocale.getpreferredencoding": ["_locale.nl_langinfo", "locale", "_locale._getdefaultlocale", "locale.getpreferredencoding"], "locale.getpreferredencoding": ["_bootlocale.getpreferredencoding", "_bootlocale", "locale.getdefaultlocale", "locale.setlocale"], "_bootlocale": ["<builtin>.hasattr", "sys.platform.startswith"], "gettext": ["posixpath.join", "ntpath.join", "locale", "re.compile", "os", "<builtin>.enumerate", "re", "gettext.GNUTranslations", "gettext.NullTranslations"], "gettext._as_int": ["<builtin>.round", "<builtin>.TypeError", "warnings", "warnings.warn"], "gettext.NullTranslations.lgettext": ["warnings.catch_warnings.__init__", "warnings.warn", "warnings", "warnings.filterwarnings", "locale.getpreferredencoding"], "gettext.NullTranslations.lngettext": ["warnings.catch_warnings.__init__", "warnings.warn", "warnings", "warnings.filterwarnings", "locale.getpreferredencoding"], "gettext.NullTranslations.output_charset": ["warnings", "warnings.warn"], "gettext.NullTranslations.set_output_charset": ["warnings", "warnings.warn"], "gettext.GNUTranslations._parse": ["struct", "<builtin>.str", "gettext.GNUTranslations._get_versions", "gettext.c2py", "<builtin>.len", "<builtin>.range", "<builtin>.getattr", "<builtin>.enumerate", "<builtin>.OSError"], "gettext.GNUTranslations.lgettext": ["<builtin>.object", "warnings", "warnings.warn", "locale.getpreferredencoding"], "gettext.GNUTranslations.lngettext": ["warnings", "warnings.warn", "locale.getpreferredencoding", "gettext.GNUTranslations._parse.<lambda1>"], "gettext.translation": ["posixpath.abspath", "gettext.find", "warnings.catch_warnings.__init__", "warnings.warn", "<builtin>.FileNotFoundError", "warnings", "ntpath.abspath", "copy", "<builtin>.open", "warnings.filterwarnings", "gettext.NullTranslations.__init__"], "gettext.bind_textdomain_codeset": ["warnings", "warnings.warn"], "gettext.ldgettext": ["warnings.catch_warnings.__init__", "gettext.translation", "warnings.warn", "warnings", "warnings.filterwarnings", "locale.getpreferredencoding", "gettext.NullTranslations.lgettext"], "gettext.ldngettext": ["warnings.catch_warnings.__init__", "gettext.translation", "warnings.warn", "gettext.NullTranslations.lngettext", "warnings", "warnings.filterwarnings", "locale.getpreferredencoding"], "gettext.lgettext": ["warnings.catch_warnings.__init__", "warnings.warn", "warnings", "warnings.filterwarnings", "gettext.ldgettext"], "gettext.lngettext": ["warnings.catch_warnings.__init__", "warnings.warn", "warnings", "warnings.filterwarnings", "gettext.ldngettext"], "base64.main": ["base64.encode", "getopt", "<builtin>.print", "sys.exit", "base64.decode", "<builtin>.open", "base64.test"], "email.base64mime": ["base64", "binascii"], "email.charset": ["email.encoders", "email.errors", "email.base64mime", "email.charset.Charset", "email.quoprimime", "functools"], "email.encoders": ["quopri", "base64"], "quopri": ["quopri.main", "binascii"], "quopri.encodestring": ["_io.BytesIO", "io", "quopri.encode"], "quopri.decodestring": ["quopri.decode", "_io.BytesIO", "io"], "quopri.main": ["quopri.decode", "getopt", "<builtin>.print", "sys.stderr.write", "<builtin>.open", "quopri.encode", "sys.exit", "sys.stdin.buffer.close"], "email.utils": ["socket", "random", "email.charset", "re.compile", "os", "urllib.parse", "email._parseaddr", "re", "datetime"], "random": ["<builtin>.hasattr", "random.SystemRandom", "collections.abc", "random.Random", "os", "warnings", "_random", "random.Random.__init__", "hashlib", "random._test", "_sha512", "math", "bisect"], "math": [], "bisect": ["_bisect"], "_bisect": [], "_sha512": [], "hashlib.__get_builtin_constructor": ["_sha1", "<builtin>.ValueError", "_blake2", "_sha256", "_sha512", "_md5", "_sha3"], "_sha1": [], "_md5": [], "_sha256": [], "_blake2": [], "_sha3": [], "hashlib": ["_hashlib", "logging", "hashlib.__get_openssl_constructor", "logging.exception", "<builtin>.range", "<builtin>.bytes", "<builtin>.set", "hashlib.__get_builtin_constructor", "<builtin>.globals"], "_hashlib": [], "logging": ["threading", "<builtin>.hasattr", "logging.LogRecord", "logging.Logger", "traceback", "logging.LoggerAdapter", "logging.PercentStyle", "logging.Manager", "logging.Handler", "threading.RLock", "atexit.register", "logging._StderrHandler.__init__", "logging.BufferingFormatter", "weakref", "logging.Formatter", "logging._StderrHandler", "weakref.WeakValueDictionary.__init__", "logging.PlaceHolder", "logging.Filter", "posixpath.normcase", "logging.NullHandler", "ntpath.normcase", "logging.RootLogger.__init__", "warnings", "logging.Filterer", "string", "re", "logging.Formatter.__init__", "time.time", "logging.StrFormatStyle", "logging.StringTemplateStyle", "io", "logging.Manager.__init__", "logging.StreamHandler", "logging.RootLogger", "collections.abc", "os", "logging.FileHandler"], "logging.Logger.__reduce__": ["pickle", "logging.getLogger"], "_random": [], "socket": ["enum", "<builtin>.hasattr", "io", "socket._GiveupOnSendfile", "socket.SocketIO", "socket.socket", "_socket", "sys.platform.lower", "os", "<builtin>.getattr", "os._get_exports_list", "<builtin>.object", "selectors"], "_socket": [], "selectors": ["<builtin>.hasattr", "selectors.SelectSelector", "collections", "abc", "selectors.PollSelector", "collections.namedtuple", "selectors.EpollSelector", "selectors.DevpollSelector", "selectors._BaseSelectorImpl", "collections.abc", "select", "selectors._SelectorMapping", "selectors._PollLikeSelector", "selectors.KqueueSelector", "math", "<builtin>.globals", "selectors.BaseSelector"], "select": [], "datetime": ["datetime.timezone", "datetime.datetime", "datetime.timedelta", "datetime.tzinfo", "datetime.date", "datetime.timezone._create", "datetime.time", "_datetime", "math", "datetime._days_before_year"], "datetime._check_int_field": ["<builtin>.isinstance", "warnings.warn", "<builtin>.type", "<builtin>.TypeError", "warnings"], "_strptime": ["_strptime.LocaleTime", "calendar", "_strptime.TimeRE.__init__", "locale", "_strptime.TimeRE", "_thread.allocate_lock", "re", "datetime"], "calendar": ["calendar.Calendar", "calendar.IllegalWeekdayError", "calendar._localized_day.__init__", "calendar.LocaleTextCalendar", "calendar.main", "calendar.TextCalendar", "datetime.datetime.date", "calendar.IllegalMonthError", "locale", "calendar.HTMLCalendar", "calendar.LocaleHTMLCalendar", "calendar.Calendar.__init__", "<builtin>.range", "calendar._localized_day", "calendar.different_locale", "calendar._localized_month.__init__", "calendar._localized_month", "datetime"], "calendar.main": ["argparse", "argparse.ArgumentParser.error", "<builtin>.dict", "calendar.Calendar.__init__", "calendar.HTMLCalendar.formatmonth", "argparse._ActionsContainer.add_argument_group", "calendar.LocaleTextCalendar.__init__", "sys.stdout.buffer.write", "calendar.TextCalendar.formatmonth", "sys.exit", "sys.getdefaultencoding", "calendar.HTMLCalendar.formatyear", "calendar.HTMLCalendar.formatyearpage", "argparse.ArgumentParser.parse_args", "calendar.LocaleHTMLCalendar.__init__", "argparse._ActionsContainer.add_argument", "calendar.TextCalendar.formatyear", "argparse.ArgumentParser.__init__", "sys.stdout.write"], "datetime.datetime.strptime": ["_strptime"], "_datetime": [], "urllib.parse": ["urllib.parse._NetlocResultMixinBase", "urllib.parse._NetlocResultMixinStr", "<builtin>.bytes", "collections", "urllib.parse.Quoter", "collections.namedtuple", "urllib.parse.SplitResultBytes", "urllib.parse.DefragResult", "urllib.parse.ParseResult", "urllib.parse.DefragResultBytes", "<builtin>.frozenset", "re.compile", "urllib.parse._ResultMixinStr", "warnings", "re", "urllib.parse.SplitResult", "urllib.parse.ParseResultBytes", "urllib.parse._fix_result_transcoding", "urllib.parse._ResultMixinBytes", "urllib.parse._NetlocResultMixinBytes"], "urllib.parse._checknetloc": ["<builtin>.ValueError", "unicodedata"], "unicodedata": [], "email._parseaddr": ["email._parseaddr.AddrlistClass", "email._parseaddr.AddressList", "calendar"], "email.message": ["io", "email.utils", "email.errors", "email.charset", "email._encoded_words", "re.compile", "email._policybase", "quopri", "email.message.Message", "email.message.EmailMessage", "re", "uu", "email.message.MIMEPart"], "uu": ["os", "uu.Error", "binascii", "uu.test"], "optparse": ["gettext", "optparse.OptionValueError", "optparse.AmbiguousOptionError", "optparse.BadOptionError", "optparse.IndentedHelpFormatter", "gettext.gettext", "optparse.OptionContainer", "optparse.OptionParser", "optparse.OptionError", "optparse.OptionConflictError", "os", "textwrap", "optparse.OptionGroup", "optparse.Option", "optparse.Values", "optparse.HelpFormatter", "optparse.OptParseError", "optparse.TitledHelpFormatter"], "textwrap": ["textwrap.TextWrapper", "<builtin>.print", "re.compile", "textwrap.dedent", "re"], "uu.test": ["<builtin>.isinstance", "uu.decode", "<builtin>.print", "uu.encode", "optparse.OptionContainer.add_option", "<builtin>.len", "optparse", "optparse.OptionParser.error", "<builtin>.open", "sys.exit", "optparse.OptionParser.parse_args", "optparse.OptionParser.__init__"], "email._encoded_words": ["functools", "email.errors", "email._encoded_words._QByteMap", "re.compile", "<builtin>.ord", "base64", "string", "re", "binascii"], "email.generator": ["io", "email.utils", "random", "email.generator.Generator", "re.compile", "<builtin>.len", "email.generator.BytesGenerator", "copy", "<builtin>.repr", "re", "email.generator.DecodedGenerator"], "email.message.Message.as_string": ["email.generator.Generator.flatten", "_io.StringIO", "email.generator", "email.generator.Generator.__init__"], "email.message.Message.as_bytes": ["email.generator.Generator.flatten", "_io.BytesIO", "email.generator", "email.generator.Generator.__init__"], "email.iterators": ["io"], "email.message.Message": ["email.iterators"], "email.policy": ["email.contentmanager", "email.utils", "email._policybase._PolicyBase.clone", "re.compile", "email._policybase", "email.policy.EmailPolicy", "email.message", "re", "email.policy.EmailPolicy.__init__", "email.headerregistry"], "email.headerregistry": ["email.headerregistry.HeaderRegistry", "email.utils", "email.headerregistry.UniqueSingleAddressHeader", "email.headerregistry.ContentTransferEncodingHeader", "types", "email.errors", "email.headerregistry.UniqueAddressHeader", "email.headerregistry.UniqueUnstructuredHeader", "email.headerregistry.ParameterizedMIMEHeader", "email.headerregistry.ContentDispositionHeader", "email.headerregistry.UniqueDateHeader", "email.headerregistry.MIMEVersionHeader", "email.headerregistry.SingleAddressHeader", "email.headerregistry.Group", "email.headerregistry.UnstructuredHeader", "email._header_value_parser", "email.headerregistry.MessageIDHeader", "email.headerregistry.Address", "email.headerregistry.DateHeader", "email.headerregistry.AddressHeader", "email.headerregistry.ContentTypeHeader", "email.headerregistry.BaseHeader"], "email._header_value_parser": ["email._header_value_parser.Attribute", "email.utils", "email._header_value_parser.GroupList", "email._header_value_parser.Group", "email._header_value_parser.InvalidParameter", "email._header_value_parser.MIMEVersion", "email._header_value_parser.CFWSList", "email._header_value_parser.DotAtomText", "email._header_value_parser.Terminal", "email._header_value_parser.ObsLocalPart", "email._header_value_parser.Comment", "email._header_value_parser.Word", "re.escape", "email._header_value_parser.BareQuotedString", "email._header_value_parser.ContentType", "urllib", "email.errors", "email._header_value_parser.Mailbox", "email._header_value_parser.Domain", "email._header_value_parser.DotAtom", "email._header_value_parser.Atom", "email._header_value_parser.Header", "email._header_value_parser.ObsRoute", "email._header_value_parser.TokenList", "email._header_value_parser.InvalidMailbox", "<builtin>.set", "email._header_value_parser.UnstructuredTokenList", "email._header_value_parser.WhiteSpaceTokenList", "email._header_value_parser.EncodedWord", "email._header_value_parser.MailboxList", "email._header_value_parser.MimeParameters", "email._header_value_parser.WhiteSpaceTerminal", "email._header_value_parser.ParameterizedHeaderValue", "email._header_value_parser.Token", "email._header_value_parser.InvalidMessageID", "email._header_value_parser.Address", "email._header_value_parser.HeaderLabel", "email._header_value_parser.Section", "email._header_value_parser.AddressList", "re.compile", "string", "email._header_value_parser.ContentDisposition", "email._header_value_parser.MsgID", "re", "email._header_value_parser.LocalPart", "email._header_value_parser.MessageID", "email._header_value_parser.AddrSpec", "operator", "email._header_value_parser.ContentTransferEncoding", "email._header_value_parser.Phrase", "email._header_value_parser.Value", "email._header_value_parser.NameAddr", "email._encoded_words", "email._header_value_parser.NoFoldLiteral", "email._header_value_parser.AngleAddr", "email._header_value_parser.Parameter", "email._header_value_parser.DisplayName", "email._header_value_parser.QuotedString", "email._header_value_parser.ValueTerminal", "email._header_value_parser._InvalidEwError", "email._header_value_parser.DomainLiteral", "email._header_value_parser.EWWhiteSpaceTerminal"], "urllib": [], "email.contentmanager": ["email.contentmanager.ContentManager.add_get_handler", "email.contentmanager.ContentManager.add_set_handler", "email.charset", "email.errors", "email.contentmanager.ContentManager.__init__", "email.message", "email.quoprimime", "email.contentmanager.ContentManager", "binascii"], "email.message.MIMEPart.__init__": ["email.message.Message.__init__", "email.policy"], "email.feedparser.FeedParser.__init__": ["email.feedparser.FeedParser._parsegen", "email.message", "email.feedparser.BufferedSubFile.__init__"], "email.message_from_string": ["email.parser", "email.parser.Parser.parsestr", "email.parser.Parser.__init__"], "email.message_from_bytes": ["email.parser", "email.parser.BytesParser.__init__", "email.parser.BytesParser.parsebytes"], "email.message_from_file": ["email.parser", "email.parser.Parser.parse", "email.parser.Parser.__init__"], "email.message_from_binary_file": ["email.parser", "email.parser.BytesParser.__init__", "email.parser.BytesParser.parse"], "email": [], "pathlib": ["<builtin>.hasattr", "pathlib._PosixFlavour", "pathlib._WindowsFlavour", "pathlib.PureWindowsPath", "pathlib._PreciseSelector", "urllib.parse", "functools", "posixpath", "ntpath", "pathlib._PathParents", "functools.lru_cache.decorating_function", "pathlib._Selector", "pathlib.Path", "pathlib.WindowsPath", "sys.getwindowsversion", "stat", "functools.singledispatch.wrapper", "re", "pathlib._Flavour.__init__", "pathlib._RecursiveWildcardSelector", "pathlib._NormalAccessor", "operator", "pathlib._TerminatingSelector", "pathlib._Flavour", "io", "functools._lru_cache_wrapper.wrapper", "pathlib._WildcardSelector", "pathlib.PurePath", "collections.abc", "fnmatch", "os", "pathlib._Accessor", "pathlib.PosixPath", "pathlib.PurePosixPath", "functools.lru_cache"], "ntpath": ["<builtin>.hasattr", "os", "genericpath", "sys.getwindowsversion", "stat"], "ntpath.expandvars": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.getattr", "<builtin>.bytes", "string"], "pathlib.Path.group": ["pathlib.Path.stat", "grp"], "configparser": ["configparser.ExtendedInterpolation", "configparser.SafeConfigParser", "configparser.ConfigParser", "configparser.LegacyInterpolation", "configparser.DuplicateSectionError", "configparser.MissingSectionHeaderError", "configparser.DuplicateOptionError", "configparser.InterpolationMissingOptionError", "functools", "configparser.ConverterMapping", "configparser.Interpolation", "collections", "configparser.InterpolationError", "configparser.Error", "configparser.NoSectionError", "configparser.InterpolationDepthError", "configparser.ParsingError", "configparser.InterpolationSyntaxError", "configparser.RawConfigParser", "configparser.NoOptionError", "warnings", "re", "configparser.BasicInterpolation", "io", "configparser.SectionProxy", "collections.abc", "os", "<builtin>.object"], "_frozen_importlib._install_external_importers": ["importlib._bootstrap_external"], "importlib._bootstrap_external": ["importlib._bootstrap_external.FileLoader", "importlib._bootstrap_external._NamespaceLoader", "importlib._bootstrap_external._LoaderBasics", "importlib._bootstrap_external._NamespacePath", "importlib._bootstrap_external.PathFinder", "importlib._bootstrap_external.SourceFileLoader", "importlib._bootstrap_external.FileFinder", "<builtin>.type", "importlib._bootstrap_external.SourceLoader", "importlib._bootstrap_external.SourcelessFileLoader", "importlib._bootstrap_external.WindowsRegistryFinder", "<builtin>.object", "importlib._bootstrap_external.ExtensionFileLoader"], "_frozen_importlib_external.decode_source": ["tokenize"], "_frozen_importlib_external.PathFinder.find_distributions": ["importlib.metadata.MetadataPathFinder.find_distributions", "importlib.metadata"], "importlib": ["types", "_bootstrap._setup", "_frozen_importlib_external._setup", "warnings", "importlib._bootstrap_external", "_frozen_importlib._setup", "_bootstrap_external._setup"], "importlib.abc": ["importlib.abc.MetaPathFinder", "importlib.abc.SourceLoader", "abc", "importlib.abc._register", "importlib.abc.PathEntryFinder", "importlib.abc.FileLoader", "importlib.abc.ResourceLoader", "warnings", "importlib.abc.InspectLoader", "importlib.abc.Loader", "importlib._bootstrap_external", "importlib.abc.ExecutionLoader", "importlib.abc.Finder", "importlib.abc.ResourceReader"], "importlib._bootstrap_external.PathFinder.find_distributions": ["importlib.metadata.MetadataPathFinder.find_distributions", "importlib.metadata"], "importlib.machinery": [], "zipfile.PyZipFile._get_codename._compile": ["<builtin>.print", "py_compile", "py_compile.compile"], "zipfile.main": ["argparse", "ntpath.dirname", "posixpath.basename", "argparse._ActionsContainer.add_argument", "<builtin>.print", "argparse._ActionsContainer.add_mutually_exclusive_group", "argparse.ArgumentParser.parse_args", "zipfile.ZipFile.__init__", "posixpath.dirname", "ntpath.basename", "argparse.ArgumentParser.__init__", "zipfile.main.addToZip"], "shutil._make_zipfile": ["ntpath.dirname", "posixpath.join", "ntpath.join", "os.walk", "ntpath.exists", "posixpath.normpath", "posixpath.isfile", "zipfile", "posixpath.exists", "posixpath.dirname", "zipfile.ZipFile.__init__", "os.makedirs", "<builtin>.sorted", "ntpath.isfile", "ntpath.normpath"], "shutil._unpack_zipfile": ["zipfile.ZipFile.read", "posixpath.join", "ntpath.join", "zipfile", "zipfile.is_zipfile", "zipfile.ZipFile.__init__", "shutil._ensure_directory", "<builtin>.open", "zipfile.ZipFile.close", "zipfile.ZipFile.infolist"], "shutil._unpack_tarfile": ["tarfile"], "argparse._copy_items": ["<builtin>.type", "copy"], "argparse.HelpFormatter._split_lines": ["textwrap", "textwrap.wrap"], "argparse.HelpFormatter._fill_text": ["textwrap", "textwrap.fill"], "argparse.ArgumentParser.parse_known_intermixed_args": ["argparse.ArgumentParser.format_usage", "<builtin>.hasattr", "<builtin>.delattr", "argparse.ArgumentParser.parse_known_args", "<builtin>.TypeError", "warnings", "<builtin>.getattr", "argparse.ArgumentParser._get_positional_actions", "argparse.ArgumentParser._get_optional_actions", "_warnings.warn"], "dis._test": ["argparse", "argparse.FileType.__init__", "<builtin>.compile", "dis.dis", "argparse._ActionsContainer.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.__init__"], "inspect.formatargspec": ["inspect.formatargspec.formatargandannotation", "inspect.<lambda2>", "<builtin>.len", "warnings", "<builtin>.enumerate", "inspect.<lambda1>", "inspect.formatannotation", "inspect.<lambda3>", "inspect.<lambda4>", "_warnings.warn"], "ast.get_docstring": ["<builtin>.TypeError", "inspect", "inspect.cleandoc", "<builtin>.isinstance"], "ast.walk": ["ast.iter_child_nodes", "collections"], "ast.NodeVisitor.visit_Constant": ["ast.NodeVisitor.generic_visit", "<builtin>.isinstance", "warnings.warn", "<builtin>.type", "warnings", "<builtin>.getattr"], "inspect._signature_fromstr": ["inspect.ismodule", "inspect._signature_fromstr.RewriteSymbolics", "sys.modules.get", "<builtin>.isinstance", "ast", "sys.modules.copy", "<builtin>.reversed", "itertools.zip_longest", "inspect._signature_fromstr.p", "<builtin>.zip", "<builtin>.ValueError", "ast.parse", "<builtin>.list", "<builtin>.getattr", "<builtin>.enumerate", "inspect._signature_strip_non_python_syntax", "<builtin>.object", "inspect.Signature.__init__"], "ast": ["ast.NodeVisitor", "ast.Bytes", "<builtin>.type", "<builtin>.property", "ast._ABC", "ast.Str", "ast.NameConstant", "ast.NodeTransformer", "ast.Ellipsis", "ast.Num"], "inspect._main": ["argparse", "<builtin>.hasattr", "inspect.getsource", "argparse._ActionsContainer.add_argument", "<builtin>.print", "sys.exit", "importlib", "<builtin>.type", "inspect.getsourcefile", "argparse.ArgumentParser.parse_args", "inspect.findsource", "<builtin>.getattr", "<builtin>.repr", "importlib.import_module", "argparse.ArgumentParser.__init__"], "unittest.result": ["io", "functools", "unittest.util", "unittest.result.TestResult", "traceback"], "unittest.util": ["posixpath", "collections", "collections.namedtuple"], "unittest": ["unittest.main", "unittest.async_case", "unittest.suite", "unittest.result", "unittest.case", "unittest.runner", "unittest.loader", "unittest.signals"], "asyncio.windows_events": ["socket", "struct", "asyncio.windows_events._BaseWaitHandleFuture", "asyncio.windows_events.IocpProactor", "asyncio.windows_events.WindowsProactorEventLoopPolicy", "asyncio.windows_events._WindowsSubprocessTransport", "asyncio.windows_events._WaitCancelFuture", "asyncio.windows_events._WindowsSelectorEventLoop", "asyncio.windows_events.WindowsSelectorEventLoopPolicy", "asyncio.windows_events.ProactorEventLoop", "weakref", "asyncio.proactor_events", "asyncio.windows_events._WaitHandleFuture", "asyncio.windows_events._OverlappedFuture", "math", "asyncio.windows_events.PipeServer", "asyncio.windows_utils"], "asyncio.proactor_events": ["threading", "asyncio.proactor_events._ProactorWritePipeTransport", "socket", "io", "collections", "asyncio.proactor_events._ProactorBasePipeTransport", "asyncio.proactor_events._ProactorDatagramTransport", "asyncio.proactor_events._ProactorReadPipeTransport", "asyncio.proactor_events._ProactorDuplexPipeTransport", "asyncio.proactor_events._ProactorSocketTransport", "asyncio.proactor_events._ProactorBaseWritePipeTransport", "os", "warnings", "asyncio.proactor_events.BaseProactorEventLoop", "signal"], "signal": ["enum", "_functools.partial", "functools", "<builtin>.globals", "functools.wraps"], "asyncio.windows_utils": ["asyncio.windows_utils.PipeHandle", "asyncio.windows_utils.Popen", "tempfile", "itertools.count", "subprocess", "os", "<builtin>.ImportError", "warnings"], "subprocess": ["threading", "<builtin>.hasattr", "contextlib", "subprocess.Handle", "subprocess.SubprocessError", "<builtin>.getattr", "_posixsubprocess", "selectors", "subprocess.CalledProcessError", "subprocess.Popen", "subprocess.TimeoutExpired", "warnings", "subprocess.STARTUPINFO", "signal", "io", "subprocess._use_posix_spawn", "subprocess.CompletedProcess", "os", "select"], "_posixsubprocess": [], "tempfile": ["shutil", "<builtin>.hasattr", "io", "tempfile._RandomNameSequence", "random", "tempfile._TemporaryFileCloser", "tempfile.TemporaryDirectory", "tempfile._TemporaryFileWrapper", "weakref", "os", "warnings", "_thread.allocate_lock", "tempfile.SpooledTemporaryFile", "functools"], "asyncio": ["asyncio.windows_events"], "unittest.async_case": ["inspect", "unittest.case", "asyncio", "unittest.async_case.IsolatedAsyncioTestCase"], "unittest.case": ["unittest.case._BaseTestCaseContext", "contextlib", "unittest.result", "unittest.case._AssertLogsContext", "unittest.case._ShouldStop", "traceback", "functools", "unittest.case.SkipTest", "pprint", "types", "collections", "difflib", "unittest.case._OrderedChainMap", "collections.namedtuple", "unittest.case._CapturingHandler", "unittest.case._Outcome", "unittest.util", "unittest.case._AssertRaisesBaseContext", "unittest.case.FunctionTestCase", "unittest.case._AssertRaisesContext", "unittest.case._SubTest", "unittest.case._AssertWarnsContext", "warnings", "re", "logging", "unittest.case._UnexpectedSuccess", "unittest.case.TestCase", "<builtin>.object"], "unittest.case.TestCase.addCleanup": ["<builtin>.tuple", "warnings.warn", "<builtin>.TypeError", "<builtin>.len", "warnings"], "unittest.suite": ["unittest.case", "unittest.util", "unittest.suite.BaseTestSuite", "unittest.suite.TestSuite", "unittest.suite._DebugResult", "unittest.suite._ErrorHolder"], "unittest.loader": ["types", "functools", "unittest.suite", "unittest.loader.TestLoader.__init__", "unittest.case", "re.compile", "fnmatch", "os", "warnings", "traceback", "unittest.util", "re", "unittest.loader._FailedTest", "unittest.loader.TestLoader"], "unittest.main": ["argparse", "unittest.runner", "unittest.main.TestProgram", "unittest.loader", "os", "unittest.signals"], "unittest.runner": ["unittest.runner._WritelnDecorator", "unittest.result", "unittest.runner.TextTestResult", "unittest.runner.TextTestRunner", "warnings", "unittest.signals"], "unittest.signals": ["weakref.WeakKeyDictionary.__init__", "functools", "unittest.signals._InterruptHandler", "weakref", "signal"], "unittest.load_tests": ["posixpath"], "doctest._test": ["argparse", "<builtin>.__import__", "ntpath.split", "argparse._ActionsContainer.add_argument", "posixpath.split", "sys.path.insert", "argparse.ArgumentParser.parse_args", "doctest.testmod", "doctest.testfile", "argparse.ArgumentParser.__init__"], "reprlib": ["reprlib.Repr.__init__", "reprlib.Repr"], "collections.__getattr__": ["warnings.warn", "<builtin>.AttributeError", "warnings", "<builtin>.getattr", "<builtin>.globals"], "collections.UserDict.__init__": ["<builtin>.TypeError", "<builtin>.len", "warnings", "warnings.warn"], "collections.UserDict.copy": ["copy", "collections.UserDict.__init__"], "functools.partialmethod.__init__": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.callable", "warnings.warn", "<builtin>.TypeError", "<builtin>.len", "warnings"], "functools.singledispatch": ["weakref", "types", "<builtin>.getattr", "weakref.WeakKeyDictionary.__init__"], "typing": ["contextlib", "abc", "typing._VariadicGenericAlias", "typing._SpecialForm", "typing._SpecialForm.__init__", "typing._TypingEmpty", "typing.IO", "typing.TextIO", "typing.SupportsComplex", "typing.TypeVar.__init__", "functools", "typing._alias", "types", "collections", "typing._Final", "typing._Immutable", "typing._ProtocolMeta", "typing._GenericAlias", "typing.TypedDict", "typing._GenericAlias.__init__", "typing.BinaryIO", "typing.Protocol", "typing.NamedTupleMeta", "typing.SupportsBytes", "typing._TypingEllipsis", "typing.SupportsInt", "typing.SupportsRound", "typing.ForwardRef", "typing._TypedDictMeta", "typing.re", "re", "typing.SupportsIndex", "operator", "typing.SupportsAbs", "typing.SupportsFloat", "typing.Generic", "collections.abc", "typing.io", "typing.NamedTuple", "typing.TypeVar"], "typing.NamedTuple.__new__": ["warnings.warn", "<builtin>.TypeError", "<builtin>.len", "warnings", "typing._make_nmtuple"], "functools.singledispatch.register": ["<builtin>.hasattr", "_collections_abc.MutableMapping.clear", "<builtin>.isinstance", "typing.get_type_hints", "<builtin>.next", "_abc.get_cache_token", "<builtin>.TypeError", "_py_abc.get_cache_token", "<builtin>.getattr", "<builtin>.iter", "collections.ChainMap.clear", "typing"], "types.coroutine": ["<builtin>.callable", "collections.abc", "<builtin>.TypeError", "<builtin>.getattr", "_functools.partial", "functools", "functools.wraps"], "enum.EnumMeta._convert": ["enum.EnumMeta._convert_", "warnings", "warnings.warn"], "sre_parse": ["<builtin>.frozenset", "<builtin>.ord", "sre_constants", "sre_parse.State", "sre_parse.SubPattern", "sre_parse.Tokenizer", "sre_parse.Verbose"], "sre_constants": ["sre_constants.error", "sre_constants.dump", "<builtin>.print", "sre_constants._makecodes", "<builtin>.open", "sre_constants._NamedIntConstant"], "sre_parse._class_escape": ["sre_parse.Tokenizer.getwhile", "sre_parse.Tokenizer.error", "<builtin>.int", "<builtin>.ord", "<builtin>.len", "sre_parse.Tokenizer.getuntil", "sre_parse.Tokenizer.match", "unicodedata", "<builtin>.chr"], "sre_parse._escape": ["sre_parse.Tokenizer.getwhile", "sre_parse.Tokenizer.error", "<builtin>.int", "<builtin>.ord", "<builtin>.len", "sre_parse.Tokenizer.getuntil", "sre_parse.Tokenizer.get", "sre_parse.Tokenizer.match", "sre_parse.State.checklookbehindgroup", "unicodedata", "<builtin>.chr", "sre_parse.State.checkgroup"], "sre_parse._parse": ["sre_parse.Tokenizer.tell", "warnings.warn", "<builtin>.AssertionError", "<builtin>.len", "sre_parse._escape", "sre_parse.State.opengroup", "sre_parse.Tokenizer.error", "sre_parse.State.closegroup", "sre_parse.Tokenizer.get", "sre_parse._parse_sub", "sre_parse.State.checklookbehindgroup", "sre_parse.State.checkgroup", "sre_parse._parse_flags", "sre_parse._uniq", "<builtin>.int", "warnings", "sre_parse.Tokenizer.match", "sre_parse._parse", "sre_parse.Tokenizer.getuntil", "<builtin>.range", "sre_parse._class_escape", "<builtin>.OverflowError", "sre_parse.SubPattern.__init__", "sre_parse.Tokenizer.seek", "sre_parse.SubPattern.append"], "sre_compile": ["<builtin>.tuple", "sre_constants", "sre_parse"], "re.Scanner.__init__": ["sre_parse.State.opengroup", "<builtin>.isinstance", "sre_parse.State.closegroup", "sre_parse.State.__init__", "sre_constants", "sre_parse.SubPattern.__init__", "sre_compile.compile", "sre_parse.parse", "sre_parse.SubPattern.append"], "posixpath.expandvars": ["<builtin>.isinstance", "re.compile", "<builtin>.len", "<builtin>.getattr", "re"], "os.get_exec_path": ["<builtin>.isinstance", "warnings.catch_warnings.__init__", "<builtin>.ValueError", "warnings", "warnings.simplefilter"], "os.popen": ["os._wrap_close.__init__", "io.TextIOWrapper", "io", "<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "<builtin>.TypeError", "subprocess", "subprocess.Popen.__init__"], "os.fdopen": ["io", "<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError", "io.open"], "threading.Thread.isAlive": ["threading.Thread.is_alive", "warnings", "warnings.warn", "threading._DummyThread.is_alive"], "_threading_local": ["threading", "contextlib", "contextlib.contextmanager", "_threading_local._localimpl", "weakref", "_threading_local.local"], "bpytop": ["threading", "argparse", "bpytop.Colors", "ntpath.isdir", "<builtin>.getattr", "bpytop.Nonblocking", "logging.Handler.setLevel", "bpytop.NetCollector", "bpytop.MemBox", "posixpath.isdir", "bpytop.get_cpu_core_mapping", "bpytop.Term", "bpytop.TimeIt", "bpytop.Symbol", "logging.Logger.exception", "bpytop.Init", "shutil", "logging.Formatter.__init__", "logging.Logger.warning", "ntpath.dirname", "logging", "argparse._ActionsContainer.add_argument", "fcntl", "posixpath.expanduser", "logging.getLogger", "bpytop.Color", "bpytop.Raw", "argparse.ArgumentParser.__init__", "math", "bpytop.get_cpu_name", "logging.handlers", "bpytop.Banner", "<builtin>.print", "bpytop.ProcBox", "logging.Logger.info", "bpytop.NetBox", "os.makedirs", "logging.Logger.setLevel", "bpytop.ProcCollector", "bpytop.SubBox", "bpytop.Fx", "urllib.request", "bpytop.Draw", "psutil", "bpytop.Config", "argparse.ArgumentParser.parse_args", "bpytop.Key", "signal", "bpytop.Box", "<builtin>.SystemExit", "bpytop.Theme", "os", "select", "logging.Logger.addHandler", "<builtin>.str", "collections", "bpytop.CpuBox", "bpytop.Timer", "bpytop.CpuCollector", "logging.handlers.RotatingFileHandler.__init__", "ntpath.expanduser", "bpytop.Meters", "datetime", "bpytop.Menu", "bpytop.Graph", "io", "bpytop.UpdateChecker", "bpytop.MemCollector", "posixpath.dirname", "tty", "random", "string.Template.__init__", "termios", "bpytop.Config.__init__", "bpytop.Meter", "bpytop.main", "logging.Logger.debug", "logging.Handler.setFormatter", "typing", "bpytop.Graphs", "bpytop.Mv", "string", "re", "time.time", "psutil.cpu_count", "subprocess", "bpytop.Collector"], "logging.handlers": ["threading", "socket", "logging.handlers.QueueHandler", "logging.handlers.TimedRotatingFileHandler", "logging.handlers.BaseRotatingHandler", "logging.handlers.DatagramHandler", "logging.handlers.RotatingFileHandler", "struct", "logging.handlers.WatchedFileHandler", "logging.handlers.BufferingHandler", "logging.handlers.MemoryHandler", "stat", "logging.handlers.SocketHandler", "logging.handlers.SMTPHandler", "logging.handlers.HTTPHandler", "logging.handlers.QueueListener", "re", "logging.handlers.NTEventLogHandler", "logging", "pickle", "os", "copy", "queue", "logging.handlers.SysLogHandler"], "queue": ["threading", "queue.Empty", "queue.PriorityQueue", "collections", "queue.LifoQueue", "_queue", "heapq", "queue.Full", "queue.Queue", "queue._PySimpleQueue"], "_queue": [], "smtplib": ["socket", "ssl", "smtplib.SMTP", "smtplib.SMTP.sendmail", "email.utils", "smtplib.SMTPResponseException", "smtplib.LMTP", "<builtin>.print", "smtplib.SMTPRecipientsRefused", "sys.stdin.readline", "<builtin>.len", "base64", "smtplib.SMTPConnectError", "smtplib.SMTP.set_debuglevel", "smtplib.SMTPNotSupportedError", "smtplib.SMTPSenderRefused", "smtplib.SMTP_SSL", "email.generator", "smtplib.SMTP.quit", "hmac", "datetime", "smtplib.SMTPAuthenticationError", "smtplib.SMTPHeloError", "smtplib.SMTPDataError", "re.compile", "email.base64mime", "email.message", "re", "smtplib.SMTP.__init__", "io", "smtplib.prompt", "copy", "smtplib.SMTPException", "smtplib.SMTPServerDisconnected"], "hmac": ["_hashlib", "<builtin>.frozenset", "warnings", "<builtin>.range", "<builtin>.bytes", "hmac.HMAC", "hashlib"], "ssl": ["<builtin>.hasattr", "socket", "ssl.Purpose", "ssl._TLSMessageType", "ssl.SSLContext", "<builtin>.getattr", "base64", "ssl._TLSAlertType", "collections", "collections.namedtuple", "ssl._ASN1Object", "ssl.TLSVersion", "ssl.SSLObject", "warnings", "_ssl", "enum", "ssl.SSLSocket", "ssl._TLSContentType", "os"], "_ssl": [], "ssl.cert_time_to_seconds": ["<builtin>.ValueError", "calendar", "time.strptime", "calendar.timegm"], "smtplib.SMTP.starttls": ["smtplib.SMTPResponseException.__init__", "warnings.warn", "<builtin>.RuntimeError", "<builtin>.ValueError", "smtplib.SMTP.ehlo_or_helo_if_needed", "warnings", "smtplib.SMTP.docmd", "smtplib.SMTP.has_extn"], "smtplib.SMTP_SSL.__init__": ["smtplib.SMTP.__init__", "warnings", "warnings.warn", "<builtin>.ValueError"], "logging.handlers.SMTPHandler.emit": ["smtplib.SMTP.send_message", "email.message.MIMEPart.__init__", "email.utils", "logging.handlers.SMTPHandler.getSubject", "smtplib", "logging.Handler.format", "logging.Handler.handleError", "smtplib.SMTP.quit", "email.message", "smtplib.SMTP.ehlo", "smtplib.SMTP.login", "smtplib.SMTP.__init__", "smtplib.SMTP.starttls", "email.message.EmailMessage.set_content"], "http.client": ["socket", "ssl", "http.client.HTTPMessage", "http.client.IncompleteRead", "http.client.ResponseNotReady", "urllib.parse", "http.client.HTTPSConnection", "http.client.HTTPConnection", "http.client.UnknownTransferEncoding", "http.client.HTTPException", "http.client.LineTooLong", "http.client.ImproperConnectionState", "http.client.UnknownProtocol", "http.client.CannotSendRequest", "http.client.HTTPResponse", "http", "http.client.RemoteDisconnected", "re.compile", "email.message", "http.client.NotConnected", "email.parser", "re", "<builtin>.globals", "io", "http.client.InvalidURL", "http.client.CannotSendHeader", "collections.abc", "http.client.UnimplementedFileMode", "http.client.BadStatusLine"], "http": ["enum", "http.HTTPStatus"], "http.client.HTTPSConnection.__init__": ["warnings", "warnings.warn", "<builtin>.ValueError", "<builtin>.super"], "logging.handlers.HTTPHandler.emit": ["logging.handlers.HTTPHandler.mapLogRecord", "<builtin>.str", "logging.Handler.handleError", "http.client", "<builtin>.len", "base64.b64encode", "base64", "urllib.parse"], "urllib.request": ["<builtin>.hasattr", "socket", "ssl", "contextlib", "urllib.request.HTTPDigestAuthHandler", "urllib.request.FancyURLopener", "http.client", "urllib.request.HTTPSHandler", "base64", "urllib.parse", "hashlib", "urllib.request.AbstractHTTPHandler", "urllib.request.HTTPDefaultErrorHandler", "posixpath", "urllib.request.HTTPRedirectHandler", "urllib.request.ProxyDigestAuthHandler", "urllib.error", "urllib.request.Request", "nturl2path", "urllib.request.HTTPHandler", "urllib.request.URLopener", "urllib.request.HTTPCookieProcessor", "urllib.request.AbstractDigestAuthHandler", "urllib.request.HTTPPasswordMgr", "urllib.request.UnknownHandler", "urllib.request.HTTPBasicAuthHandler", "urllib.request.DataHandler", "urllib.request.ftpwrapper", "urllib.request.HTTPPasswordMgrWithDefaultRealm", "email", "tempfile", "_scproxy", "urllib.request.CacheFTPHandler", "re.compile", "urllib.request.BaseHandler", "warnings", "urllib.request.FileHandler", "string", "re", "bisect", "io", "urllib.request.AbstractBasicAuthHandler", "urllib.response", "urllib.request.HTTPPasswordMgrWithPriorAuth", "os", "urllib.request.OpenerDirector", "urllib.request.ProxyHandler", "urllib.request.ProxyBasicAuthHandler", "urllib.request.FTPHandler", "urllib.request.HTTPErrorProcessor"], "urllib.response": ["urllib.response.addclosehook", "tempfile", "urllib.response.addinfourl", "urllib.response.addbase", "urllib.response.addinfo"], "urllib.error": ["urllib.error.ContentTooShortError", "urllib.response", "urllib.error.HTTPError", "urllib.error.URLError"], "urllib.request.urlopen": ["urllib.request.HTTPSHandler.__init__", "warnings.warn", "<builtin>.ValueError", "warnings", "ssl.create_default_context", "urllib.request.build_opener", "urllib.request.OpenerDirector.open"], "http.cookiejar": ["threading", "http.cookiejar.Cookie", "http.cookiejar.FileCookieJar", "http.cookiejar.CookiePolicy", "http.cookiejar.CookieJar", "calendar", "<builtin>.str", "http.client", "urllib.parse", "http.cookiejar.LoadError", "datetime", "http.cookiejar.DefaultCookiePolicy", "http.cookiejar.MozillaCookieJar", "urllib.request", "re.compile", "re", "os", "http.cookiejar.Absent", "copy", "http.cookiejar.LWPCookieJar"], "http.cookiejar._debug": ["logging.getLogger", "logging", "logging.Logger.debug"], "http.cookiejar._warn_unhandled_exception": ["io", "warnings.warn", "warnings", "traceback.print_exc", "traceback", "io.StringIO"], "urllib.request.HTTPCookieProcessor.__init__": ["http.cookiejar"], "urllib.request.FileHandler.open_local_file": ["mimetypes", "mimetypes.guess_type", "nturl2path.url2pathname", "email.utils.formatdate", "urllib.request.FileHandler.get_names", "email.utils", "urllib.response.addinfourl.__init__", "email.message_from_string", "<builtin>.open", "urllib.error.URLError.__init__", "urllib.request._safe_gethostbyname", "urllib.parse._splitport"], "mimetypes": ["mimetypes._main", "mimetypes.MimeTypes", "mimetypes._default_mime_types", "os", "urllib.parse", "posixpath"], "mimetypes._main": ["mimetypes.guess_type", "getopt", "<builtin>.print", "mimetypes._main.usage", "mimetypes.guess_extension"], "ftplib": ["socket", "ssl", "ftplib.error_perm", "ftplib.Error", "ftplib.test", "ftplib.FTP", "ftplib.error_reply", "ftplib.error_proto", "ftplib.FTP_TLS", "ftplib.error_temp"], "ftplib.FTP_TLS.__init__": ["warnings", "warnings.warn", "ftplib.FTP.__init__", "<builtin>.ValueError"], "ftplib.parse150": ["<builtin>.int", "re", "re.compile"], "ftplib.parse227": ["<builtin>.int", "re", "re.compile"], "netrc": ["netrc.netrc", "<builtin>.print", "netrc.NetrcParseError", "os", "shlex", "netrc.netrc.__init__", "stat"], "shlex": ["io", "collections", "shlex.shlex", "re.compile", "shlex._print_tokens", "<builtin>.len", "os", "shlex.shlex.__init__", "<builtin>.open", "re"], "ftplib.test": ["ftplib.FTP.sendcmd", "ftplib.FTP.retrbinary", "ftplib.FTP.__init__", "<builtin>.print", "ftplib.FTP.set_pasv", "sys.stderr.write", "ftplib.FTP.login", "ftplib.FTP.dir", "<builtin>.len", "ftplib.FTP.quit", "sys.exit", "ftplib.FTP.set_debuglevel", "netrc"], "urllib.request.FTPHandler.ftp_open": ["ftplib", "mimetypes", "urllib.request.ftpwrapper.retrfile", "mimetypes.guess_type", "urllib.parse._splitattr", "<builtin>.int", "urllib.response.addinfourl.__init__", "<builtin>.map", "email.message_from_string", "<builtin>.list", "urllib.request.FTPHandler.connect_ftp", "urllib.parse.unquote", "urllib.parse._splituser", "urllib.error.URLError.__init__", "urllib.parse._splitvalue", "urllib.parse._splitport", "sys.exc_info", "urllib.parse._splitpasswd"], "nturl2path.url2pathname": ["<builtin>.len", "<builtin>.OSError", "urllib.parse", "string"], "nturl2path.pathname2url": ["<builtin>.len", "<builtin>.OSError", "urllib.parse"], "nturl2path": [], "urllib.request.URLopener.open_local_file": ["mimetypes", "mimetypes.guess_type", "nturl2path.url2pathname", "email.utils.formatdate", "email.utils", "urllib.parse._splitport", "urllib.request.thishost", "urllib.response.addinfourl.__init__", "urllib.request.URLopener.open", "<builtin>.ValueError", "email.message_from_string", "urllib.error.URLError.__init__", "urllib.request.localhost", "urllib.parse._splithost"], "urllib.request.URLopener.open_ftp": ["<builtin>.len", "urllib.parse.unquote", "urllib.error.URLError.__init__", "urllib.parse._splitvalue", "mimetypes", "sys.exc_info", "ftplib", "mimetypes.guess_type", "<builtin>.isinstance", "<builtin>.int", "urllib.parse._splithost", "urllib.parse._splitpasswd", "urllib.parse._splitattr", "urllib.request.ftperrors", "urllib.response.addinfourl.__init__", "email.message_from_string", "<builtin>.list", "urllib.parse._splituser", "urllib.request.ftpwrapper.__init__", "urllib.parse._splitport"], "getpass": ["io", "contextlib", "os", "termios", "warnings", "getpass.GetPassWarning"], "termios": [], "urllib.request.FancyURLopener.prompt_user_passwd": ["getpass", "<builtin>.print", "<builtin>.input"], "urllib.request.ftperrors": ["ftplib"], "urllib.request.ftpwrapper.init": ["ftplib", "ftplib.FTP.__init__", "ftplib.FTP.login", "ftplib.FTP.cwd", "ftplib.FTP.connect"], "urllib.request.ftpwrapper.retrfile": ["ftplib", "ftplib.FTP.pwd", "urllib.request.ftpwrapper.endtransfer", "ftplib.FTP.ntransfercmd", "<builtin>.str", "urllib.request.ftpwrapper.init", "ftplib.FTP.voidcmd", "ftplib.FTP.cwd", "urllib.error.URLError.__init__", "urllib.response.addclosehook.__init__", "sys.exc_info"], "urllib.request._proxy_bypass_macosx_sysconf": ["<builtin>.int", "re.match", "fnmatch", "urllib.request._proxy_bypass_macosx_sysconf.ip2num", "urllib.parse._splitport", "fnmatch.fnmatch"], "_scproxy": [], "fcntl": [], "tty": ["termios"], "psutil": ["threading", "<builtin>.hasattr", "psutil.test", "contextlib", "<builtin>.tuple", "<builtin>.str", "__future__", "<builtin>.NotImplementedError", "<builtin>.getattr", "functools", "collections", "psutil.Process", "<builtin>.set", "datetime", "psutil._psbsd", "psutil._pslinux", "<builtin>.int", "psutil._pswindows", "psutil.Popen", "signal", "<builtin>.globals", "psutil._pssunos", "<builtin>.dir", "subprocess", "os", "<builtin>.ImportError", "psutil.cpu_times", "<builtin>.object", "psutil._psaix"], "psutil._pslinux": ["<builtin>.hasattr", "socket", "__future__", "posixpath.exists", "psutil._pslinux.Connections", "base64", "traceback", "functools", "resource", "struct", "collections", "ctypes.CDLL.__init__", "collections.namedtuple", "psutil._pslinux.Connections.__init__", "psutil._pslinux.set_scputimes_ntuple", "_common.memoize", "psutil._pslinux.Process", "ntpath.exists", "glob", "<builtin>.int", "_psutil_posix.getpagesize", "psutil._pslinux.IOPriority", "warnings", "traceback.print_exc", "re", "<builtin>.globals", "psutil._pslinux._Ipv6UnsupportedError", "enum", "<builtin>.dir", "ctypes", "os", "psutil._pslinux.RootFsDeviceFinder"], "glob": ["re", "os", "re.compile", "fnmatch"], "resource": [], "ctypes": ["ctypes.LibraryLoader.__init__", "ctypes.PYFUNCTYPE", "ctypes.HRESULT", "ctypes.CFUNCTYPE", "ctypes.c_byte", "ctypes.c_char_p", "ctypes.c_double", "struct", "ctypes.c_float", "ctypes.OleDLL", "ctypes._check_size", "ctypes.CDLL.__init__", "ctypes.py_object", "ctypes.c_char", "ctypes.c_short", "ctypes.c_bool", "ctypes.c_int", "ctypes.c_ushort", "ctypes.PyDLL", "<builtin>.int", "_ctypes", "ctypes.c_wchar", "ctypes.c_long", "ctypes.c_longdouble", "ctypes.LibraryLoader", "ctypes._reset_cache", "ctypes.c_void_p", "ctypes.c_ulong", "<builtin>.Exception", "ctypes.c_longlong", "ctypes.c_wchar_p", "ctypes.c_ubyte", "ctypes.c_uint", "ctypes._endian", "ctypes.c_ulonglong", "ctypes.WinDLL", "os", "ctypes.CDLL"], "_ctypes": [], "ctypes._check_size": ["<builtin>.SystemError", "struct"], "ctypes._endian": ["ctypes._endian.BigEndianStructure", "ctypes", "ctypes._endian.LittleEndianStructure", "<builtin>.type", "<builtin>.RuntimeError", "ctypes._endian._swapped_meta"], "psutil._pswindows": ["enum", "_compat.lru_cache", "contextlib", "collections", "<builtin>.dict", "psutil._pswindows.Priority", "<builtin>.str", "psutil._pswindows.IOPriority", "psutil._pswindows.Process", "<builtin>.RuntimeError", "collections.namedtuple", "os", "signal", "psutil._pswindows.WindowsService", "sys.getwindowsversion", "functools", "<builtin>.globals", "_common.memoize"], "psutil._psbsd": ["<builtin>.hasattr", "contextlib", "collections", "<builtin>.dict", "contextlib.contextmanager", "_psutil_posix.getpagesize", "collections.namedtuple", "xml.etree.ElementTree", "os", "functools", "_common.memoize", "psutil._psbsd.Process"], "xml.etree.ElementTree": ["xml.etree.ElementTree.C14NWriterTarget", "xml.etree.ElementTree.XMLPullParser", "contextlib", "_elementtree", "xml.etree.ElementTree.XMLParser", "collections", "contextlib.contextmanager", "xml.etree.ElementTree.ElementTree", "<builtin>.set", "xml.etree.ElementPath", "xml.etree.ElementTree.TreeBuilder", "xml.etree.ElementTree.Element", "re.compile", "warnings", "re", "io", "xml.etree.ElementTree._ListDataStream", "xml.etree.ElementTree.QName", "collections.abc", "xml.etree.ElementTree.ParseError"], "xml.etree.ElementPath": ["re", "xml.etree.ElementPath._SelectorContext", "re.compile"], "xml.etree.ElementTree.ElementTree.write": ["xml.etree.ElementTree._get_writer", "locale", "<builtin>.ValueError", "xml.etree.ElementTree.ElementTree.write", "xml.etree.ElementTree._serialize_text", "locale.getpreferredencoding", "xml.etree.ElementTree._namespaces"], "xml.parsers.expat": ["pyexpat"], "pyexpat": [], "xml.etree.ElementTree.XMLParser.__init__": ["xml.parsers.expat", "<builtin>.hasattr", "xml.etree.ElementTree.TreeBuilder.__init__", "<builtin>.ImportError", "pyexpat"], "xml.etree.ElementTree.XMLParser._default": ["xml.parsers.expat", "<builtin>.hasattr", "warnings.warn", "xml.etree.ElementTree.C14NWriterTarget.data", "<builtin>.len", "xml.etree.ElementTree.TreeBuilder.data"], "_elementtree": [], "psutil._pssunos": ["socket", "collections", "<builtin>.dict", "_psutil_posix.getpagesize", "collections.namedtuple", "subprocess", "os", "psutil._pssunos.Process", "functools"], "psutil._psaix": ["<builtin>.hasattr", "collections", "<builtin>.dict", "psutil._psaix.Process", "glob", "_psutil_posix.getpagesize", "collections.namedtuple", "subprocess", "os", "functools", "re"], "psutil.net_if_addrs": ["<builtin>.hasattr", "socket", "_psosx.net_if_addrs", "<builtin>.dict", "_common.snicaddr", "collections.defaultdict", "psutil._pswindows.net_if_addrs"], "psutil._common": ["threading", "socket", "contextlib", "sys.getfilesystemencoding", "psutil._common.memoize", "__future__", "functools", "psutil._common._WrapNumbers.__init__", "psutil._common._WrapNumbers", "collections", "collections.namedtuple", "psutil._common.AccessDenied", "psutil._common.NicDuplex", "stat", "sys.getfilesystemencodeerrors", "psutil._common.TimeoutExpired", "warnings", "psutil._common.ZombieProcess", "psutil._common.Error", "<builtin>.globals", "enum", "os.getenv", "psutil._common.NoSuchProcess", "psutil._common.BatteryTime", "os", "<builtin>.bool", "sys.platform.startswith", "<builtin>.object"], "curses": ["os", "_curses", "curses.has_key"], "_curses": [], "curses.initscr": ["sys.__stdout__.fileno", "_curses", "curses", "<builtin>.setattr"], "curses.start_color": ["<builtin>.hasattr", "_curses", "curses"], "curses.has_key": ["<builtin>.print", "_curses", "curses.has_key.has_key"], "curses.wrapper": ["<builtin>.locals", "curses.start_color", "warnings.warn", "<builtin>.TypeError", "<builtin>.len", "warnings", "curses.initscr"], "psutil._common.term_supports_colors": ["curses"], "psutil._common.print_color": ["psutil._common.hilite", "<builtin>.dict", "ctypes", "<builtin>.print", "<builtin>.ValueError", "<builtin>.list", "psutil._common.term_supports_colors"], "psutil._common.debug": ["<builtin>.isinstance", "<builtin>.print", "inspect.currentframe", "inspect.getframeinfo", "inspect"], "psutil._set_debug": ["_psutil_windows.set_debug", "_psutil_aix.set_debug", "<builtin>.bool", "_psutil_linux.set_debug", "_psutil_sunos.set_debug", "psutil._common", "_psosx.cext.set_debug", "_psutil_bsd.set_debug"], "psutil.test": ["psutil.Process.uids", "psutil._common.bytes2human", "psutil.process_iter", "<builtin>.print", "<builtin>.round", "time.strftime", "<builtin>.int", "_compat.get_terminal_size", "time.localtime", "psutil._common", "<builtin>.sum"], "time.time": [], "<builtin>.print": [], "<builtin>.SystemExit": [], "argparse.ArgumentParser.__init__": ["posixpath.basename", "gettext.gettext", "argparse._ActionsContainer.add_argument", "argparse._ActionsContainer._add_container_actions", "argparse._ActionsContainer.register", "ntpath.basename", "<builtin>.super", "argparse._ActionsContainer.add_argument_group"], "argparse._ActionsContainer.add_argument": ["<builtin>.hasattr", "argparse.ArgumentParser._add_action", "<builtin>.callable", "argparse._ActionsContainer._pop_action_class", "<builtin>.ValueError", "argparse._ActionsContainer._registry_get", "argparse.ArgumentParser._get_formatter", "argparse._ActionsContainer._get_positional_kwargs", "<builtin>.len", "argparse._ArgumentGroup._add_action", "argparse._ActionsContainer._add_action", "argparse.HelpFormatter._format_args", "argparse._ActionsContainer._get_optional_kwargs", "argparse._MutuallyExclusiveGroup._add_action"], "argparse.ArgumentParser.parse_args": ["argparse.ArgumentParser.parse_known_args", "argparse.ArgumentParser.error", "gettext.gettext"], "<builtin>.str": [], "string.Template.__init__": [], "posixpath.expanduser": ["<builtin>.isinstance", "<builtin>.str", "posixpath._get_sep", "<builtin>.len", "pwd.getpwuid", "pwd.getpwnam"], "ntpath.expanduser": ["ntpath.dirname", "ntpath.join", "<builtin>.isinstance", "ntpath._get_bothseps", "<builtin>.len"], "ntpath.isdir": [], "posixpath.isdir": [], "os.makedirs": ["<builtin>.isinstance", "ntpath.split", "posixpath.split", "ntpath.exists", "ntpath.isdir", "posixpath.isdir", "posixpath.exists", "<builtin>.bytes", "os.makedirs"], "posixpath.dirname": ["sys.base_prefix.rfind", "sys.path.rfind", "posixpath._get_sep", "<builtin>.len"], "ntpath.dirname": ["ntpath.split"], "psutil.cpu_count": ["psutil._pswindows.cpu_count_logical", "psutil._pswindows.cpu_count_cores", "_psosx.cpu_count_cores", "psutil._psbsd.cpu_count_cores", "psutil._psaix.cpu_count_logical", "psutil._pssunos.cpu_count_logical", "psutil._psbsd.cpu_count_logical", "psutil._pssunos.cpu_count_cores", "psutil._pslinux.cpu_count_cores", "psutil._pslinux.cpu_count_logical", "psutil._psaix.cpu_count_cores", "_psosx.cpu_count_logical"], "logging.getLogger": ["logging.Manager.getLogger"], "logging.Logger.setLevel": ["logging.Manager._clear_cache", "logging._checkLevel"], "logging.handlers.RotatingFileHandler.__init__": ["logging.handlers.BaseRotatingHandler.__init__"], "logging.Handler.setLevel": ["logging._checkLevel"], "logging.Formatter.__init__": ["<builtin>.ValueError"], "logging.Handler.setFormatter": [], "logging.Logger.addHandler": ["logging._releaseLock", "logging._acquireLock"], "bpytop.TimeIt": [], "bpytop.TimeIt.start": ["time.time"], "bpytop.TimeIt.pause": ["time.time"], "bpytop.TimeIt.stop": ["time.time", "logging.Logger.debug"], "logging.Logger.debug": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "bpytop.timeit_decorator": [], "bpytop.timeit_decorator.timed": ["time.time", "logging.Logger.debug"], "bpytop.strtobool": ["<builtin>.type", "<builtin>.ValueError"], "<builtin>.type": [], "<builtin>.ValueError": [], "bpytop.Config": ["<builtin>.hasattr", "psutil.cpu_times_percent", "<builtin>.enumerate", "<builtin>.getattr", "psutil.sensors_temperatures"], "psutil.cpu_times_percent": ["<builtin>.zip", "psutil.cpu_times_percent.calculate", "<builtin>.ValueError", "psutil.cpu_times", "time.sleep"], "<builtin>.getattr": [], "<builtin>.hasattr": [], "psutil.sensors_temperatures": ["_psosx.sensors_temperatures", "_common.shwtemp", "<builtin>.dict", "psutil.sensors_temperatures.convert", "psutil._pslinux.sensors_temperatures", "collections.defaultdict", "psutil._psbsd.sensors_temperatures"], "<builtin>.enumerate": [], "bpytop.Config.__init__": ["<builtin>.setattr", "<builtin>.getattr", "bpytop.Config.load_config"], "bpytop.Config.load_config": ["logging.Logger.exception", "<builtin>.int", "<builtin>.str", "<builtin>.type", "posixpath.isfile", "bpytop.strtobool", "<builtin>.getattr", "<builtin>.open", "ntpath.isfile", "<builtin>.bool"], "<builtin>.setattr": [], "bpytop.Config.__setattr__": [], "posixpath.isfile": [], "ntpath.isfile": [], "<builtin>.open": [], "<builtin>.int": [], "<builtin>.bool": [], "logging.Logger.exception": ["logging.Logger.error"], "bpytop.Config.save_config": ["logging.Logger.exception", "<builtin>.str", "posixpath.isfile", "<builtin>.open", "ntpath.isfile"], "logging.Logger.info": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "logging.Logger.warning": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "bpytop.Term": ["threading.Event.__init__"], "threading.Event.__init__": ["threading.Condition.__init__", "_thread.allocate_lock"], "bpytop.Term.refresh": ["bpytop.Draw.now", "bpytop.Mv.left", "bpytop.Mv.down", "<builtin>.min", "bpytop.Box.calc_sizes", "<builtin>.str", "bpytop.Mv.right", "bpytop.Key.last", "bpytop.clean_quit", "<builtin>.getattr", "bpytop.Key.has_key", "bpytop.Box.draw_bg", "threading.Event.wait", "bpytop.Timer.finish", "threading.Event.clear", "threading.Event.set", "bpytop.create_box"], "threading.Event.set": ["threading.Condition.notify_all"], "bpytop.Draw.now": ["<builtin>.print", "threading.Event.set", "threading.Event.clear", "threading.Event.wait"], "<builtin>.min": [], "bpytop.create_box": ["bpytop.Mv.to", "<builtin>.range", "bpytop.Mv.right"], "bpytop.Mv.right": [], "bpytop.Mv.down": [], "bpytop.Mv.left": [], "threading.Event.wait": ["threading.Condition.wait"], "bpytop.Key.has_key": ["<builtin>.bool"], "bpytop.Key.last": [], "bpytop.clean_quit": ["time.time", "bpytop.Draw.now", "bpytop.Term.title", "bpytop.Key.stop", "<builtin>.round", "<builtin>.print", "logging.Logger.info", "bpytop.Term.echo", "bpytop.Collector.stop", "_thread.interrupt_main", "logging.Logger.warning", "<builtin>.SystemExit"], "threading.Event.clear": [], "bpytop.Box.calc_sizes": [], "bpytop.Box.draw_bg": ["bpytop.Draw.buffer", "bpytop.Box.empty_bg", "bpytop.Box.draw_clock", "bpytop.Box.draw_update_ms"], "bpytop.Timer.finish": ["time.time", "bpytop.Key.break_wait"], "bpytop.Term.echo": ["sys.stdin.fileno"], "sys.stdin.fileno": [], "bpytop.Term.title": [], "bpytop.Fx": ["re.compile"], "re.compile": ["re._compile"], "bpytop.Fx.trans": [], "bpytop.Fx.uncolor": [], "bpytop.Raw": [], "bpytop.Raw.__init__": ["sys.stdin.fileno"], "bpytop.Raw.__enter__": ["tty.setcbreak"], "tty.setcbreak": [], "bpytop.Raw.__exit__": [], "bpytop.Nonblocking": [], "bpytop.Nonblocking.__init__": ["sys.stdin.fileno"], "bpytop.Nonblocking.__enter__": [], "bpytop.Nonblocking.__exit__": [], "bpytop.Mv": [], "bpytop.Mv.to": [], "bpytop.Mv.up": [], "bpytop.Key": ["threading.Event.__init__", "threading.Event.set"], "bpytop.Key.start": ["threading.Thread.start", "threading.Thread.__init__"], "threading.Thread.__init__": ["threading._newname", "threading._make_invoke_excepthook", "_weakrefset.WeakSet.add", "<builtin>.str", "threading.Event.__init__", "threading.current_thread"], "threading.Thread.start": ["threading.Event.is_set", "<builtin>.RuntimeError", "_thread.start_new_thread", "threading.Event.wait"], "bpytop.Key.stop": ["threading.Thread.join", "threading._DummyThread.join", "threading.Thread.is_alive", "threading._DummyThread.is_alive"], "threading.Thread.is_alive": ["threading.Event.is_set", "threading.Thread._wait_for_tstate_lock"], "threading._DummyThread.is_alive": ["threading.Event.is_set"], "threading._DummyThread.join": [], "threading.Thread.join": ["threading.Event.is_set", "<builtin>.RuntimeError", "threading.current_thread", "<builtin>.max", "threading.Thread._wait_for_tstate_lock"], "bpytop.Key.get": [], "bpytop.Key.get_mouse": ["threading.Event.is_set", "threading.Event.clear"], "threading.Event.is_set": [], "bpytop.Key.mouse_moved": ["threading.Event.is_set", "threading.Event.clear"], "bpytop.Key.clear": [], "bpytop.Key.input_wait": ["threading.Event.is_set", "bpytop.Draw.now", "threading.Event.clear", "threading.Event.wait"], "bpytop.Key.break_wait": ["time.sleep", "threading.Event.clear", "threading.Event.set"], "time.sleep": [], "bpytop.Key._get_key": ["bpytop.Raw.__init__", "logging.Logger.exception", "<builtin>.int", "bpytop.clean_quit", "<builtin>.len", "threading.Event.set", "bpytop.Nonblocking.__init__", "threading.Event.clear", "threading.Event.wait", "sys.stdin.read"], "sys.stdin.read": [], "<builtin>.len": [], "bpytop.Draw": ["threading.Event.__init__", "threading.Event.set"], "bpytop.Draw.buffer": ["bpytop.Draw.out"], "bpytop.Draw.out": ["bpytop.Draw.now", "<builtin>.sorted", "bpytop.Draw.clear"], "<builtin>.sorted": [], "bpytop.Draw.clear": [], "bpytop.Draw.saved_buffer": ["<builtin>.sorted"], "bpytop.Color": [], "bpytop.Color.__init__": ["logging.Logger.exception", "<builtin>.int", "<builtin>.tuple", "<builtin>.map", "<builtin>.str", "<builtin>.ValueError", "<builtin>.len", "<builtin>.hex", "<builtin>.all", "bpytop.Color.truecolor_to_256"], "<builtin>.map": [], "<builtin>.tuple": [], "<builtin>.all": [], "<builtin>.hex": [], "bpytop.Color.truecolor_to_256": ["<builtin>.round"], "bpytop.Color.__str__": [], "bpytop.Color.__repr__": ["<builtin>.repr"], "<builtin>.repr": [], "bpytop.Color.__iter__": [], "bpytop.Color.__call__": ["<builtin>.len", "<builtin>.getattr"], "<builtin>.round": [], "bpytop.Color.escape_color": ["<builtin>.int", "<builtin>.len", "logging.Logger.exception", "bpytop.Color.truecolor_to_256"], "bpytop.Color.fg": ["<builtin>.len", "bpytop.Color.escape_color"], "bpytop.Color.bg": ["<builtin>.len", "bpytop.Color.escape_color"], "bpytop.Colors": ["bpytop.Color.__init__"], "bpytop.Theme": [], "bpytop.Theme.__init__": ["bpytop.Theme._load_theme", "bpytop.Theme.refresh"], "bpytop.Theme.refresh": ["<builtin>.str", "logging.Logger.exception"], "bpytop.Theme._load_theme": ["bpytop.Draw.now", "bpytop.Theme._load_file", "bpytop.Color.__init__", "<builtin>.list", "<builtin>.range", "<builtin>.getattr", "bpytop.Color.fg", "logging.Logger.warning", "<builtin>.setattr"], "bpytop.Theme.__call__": ["bpytop.Theme._load_theme"], "bpytop.Theme._load_file": ["<builtin>.str", "logging.Logger.exception", "<builtin>.open"], "<builtin>.list": [], "<builtin>.range": [], "bpytop.Banner": ["<builtin>.len", "<builtin>.enumerate", "bpytop.Color.fg", "bpytop.Mv.right"], "bpytop.Banner.draw": ["bpytop.Draw.out", "bpytop.Mv.to", "<builtin>.enumerate"], "bpytop.Symbol": ["bpytop.Color.fg"], "bpytop.Graph": [], "bpytop.Graph.__init__": ["<builtin>.min", "<builtin>.isinstance", "<builtin>.int", "<builtin>.len", "<builtin>.range", "bpytop.min_max", "bpytop.Graph._create"], "bpytop.min_max": ["<builtin>.min", "<builtin>.max"], "<builtin>.isinstance": [], "bpytop.Graph._create": ["bpytop.Mv.left", "bpytop.Mv.down", "<builtin>.float", "<builtin>.round", "<builtin>.len", "<builtin>.range", "<builtin>.bool"], "<builtin>.float": [], "bpytop.Graph.__call__": ["<builtin>.range", "<builtin>.isinstance", "bpytop.Graph._create", "bpytop.min_max"], "bpytop.Graph.add": ["bpytop.Graph.__call__"], "bpytop.Graph.__str__": [], "bpytop.Graph.__repr__": ["<builtin>.repr"], "bpytop.Graphs": [], "bpytop.Meter": [], "bpytop.Meter.__init__": ["bpytop.Meter._create"], "bpytop.Meter._create": ["<builtin>.round", "<builtin>.range"], "bpytop.Meter.__call__": ["bpytop.Meter._create", "<builtin>.isinstance"], "bpytop.Meter.__str__": [], "bpytop.Meter.__repr__": ["<builtin>.repr"], "bpytop.Meters": [], "bpytop.Box": ["pwd.getpwuid", "<builtin>.sorted"], "pwd.getpwuid": [], "bpytop.Box.draw_update_ms": ["<builtin>.hasattr", "bpytop.Draw.buffer", "bpytop.Mv.to", "bpytop.Draw.clear", "psutil.sensors_battery", "<builtin>.len", "<builtin>.range", "bpytop.Draw.out"], "psutil.sensors_battery": ["psutil._pslinux.sensors_battery", "psutil._psbsd.sensors_battery", "_psosx.sensors_battery", "psutil._pswindows.sensors_battery"], "bpytop.Box.draw_clock": ["<builtin>.hasattr", "bpytop.Draw.buffer", "time.tzset", "bpytop.Mv.to", "time.strftime", "psutil.sensors_battery", "<builtin>.len", "bpytop.Draw.out"], "time.tzset": [], "time.strftime": [], "bpytop.Box.empty_bg": ["bpytop.Mv.right", "bpytop.Mv.left", "bpytop.Mv.down", "bpytop.Banner.draw"], "bpytop.SubBox": [], "bpytop.CpuBox": [], "bpytop.CpuBox._calc_size": ["<builtin>.round"], "bpytop.CpuBox._draw_bg": ["<builtin>.range", "bpytop.Mv.to", "bpytop.create_box"], "bpytop.CpuBox.battery_activity": ["<builtin>.hasattr", "ntpath.isdir", "posixpath.isdir", "psutil.sensors_battery", "<builtin>.getattr", "<builtin>.sorted", "bpytop.readfile"], "bpytop.readfile": ["posixpath.isfile", "<builtin>.open", "ntpath.isfile"], "bpytop.CpuBox._draw_fg": ["<builtin>.hasattr", "bpytop.Draw.buffer", "bpytop.temperature", "bpytop.Mv.left", "bpytop.Fx.trans", "<builtin>.float", "bpytop.min_max", "<builtin>.round", "bpytop.Graph.__init__", "bpytop.Mv.to", "<builtin>.str", "bpytop.CpuBox.battery_activity", "bpytop.Meter.__init__", "bpytop.Draw.clear", "<builtin>.len", "<builtin>.range", "<builtin>.max", "bpytop.Mv.right"], "<builtin>.max": [], "bpytop.temperature": ["<builtin>.round"], "bpytop.MemBox": [], "bpytop.MemBox._calc_size": ["<builtin>.round"], "bpytop.MemBox._draw_bg": ["bpytop.Mv.to", "<builtin>.range", "bpytop.create_box"], "bpytop.MemBox._draw_fg": ["bpytop.Draw.buffer", "bpytop.Mv.left", "bpytop.Fx.trans", "logging.Logger.error", "<builtin>.int", "bpytop.Graph.__init__", "bpytop.Mv.to", "<builtin>.str", "bpytop.Meter.__init__", "bpytop.Mv.up", "<builtin>.list", "bpytop.MemBox._calc_size", "<builtin>.len", "<builtin>.range", "bpytop.MemBox._draw_bg", "<builtin>.enumerate", "<builtin>.max"], "logging.Logger.error": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "bpytop.NetBox": [], "bpytop.NetBox._calc_size": ["<builtin>.round"], "bpytop.NetBox._draw_bg": ["bpytop.create_box"], "bpytop.NetBox._draw_fg": ["bpytop.Draw.buffer", "bpytop.Graph.__init__", "bpytop.Mv.to", "<builtin>.len", "<builtin>.range", "<builtin>.bool", "bpytop.NetBox._draw_bg"], "bpytop.ProcBox": [], "bpytop.ProcBox._calc_size": ["<builtin>.round"], "bpytop.ProcBox._draw_bg": ["bpytop.create_box"], "bpytop.ProcBox.selector": ["<builtin>.round", "bpytop.Collector.collect"], "bpytop.Collector.collect": ["threading.Event.set", "threading.Event.wait", "<builtin>.list"], "bpytop.ProcBox._draw_fg": ["bpytop.Draw.buffer", "bpytop.Mv.left", "bpytop.floating_humanizer", "<builtin>.round", "<builtin>.str", "bpytop.Mv.to", "bpytop.Graph.__init__", "<builtin>.int", "<builtin>.list", "<builtin>.len", "<builtin>.range", "<builtin>.enumerate", "psutil.pid_exists", "bpytop.Mv.right"], "bpytop.floating_humanizer": ["<builtin>.float", "<builtin>.isinstance", "<builtin>.round", "<builtin>.int", "<builtin>.len"], "psutil.pid_exists": ["_psosx.pid_exists", "psutil._psbsd.pid_exists", "psutil.pids", "psutil._pslinux.pid_exists", "psutil._psaix.pid_exists", "psutil._pssunos.pid_exists"], "bpytop.Collector": ["threading.Event.__init__", "threading.Event.set"], "bpytop.Collector.start": ["threading.Thread.start", "threading.Thread.__init__"], "bpytop.Collector.stop": ["threading.Thread.join", "threading._DummyThread.is_alive", "threading._DummyThread.join", "threading.Thread.is_alive", "threading.Event.set"], "bpytop.Collector._runner": ["threading.Event.is_set", "bpytop.TimeIt.start", "logging.Logger.exception", "bpytop.clean_quit", "bpytop.Box.draw_clock", "threading.Event.set", "bpytop.Draw.out", "bpytop.TimeIt.stop", "threading.Event.clear", "threading.Event.wait"], "bpytop.CpuCollector": ["<builtin>.range"], "bpytop.CpuCollector.get_sensors": ["<builtin>.hasattr", "shutil.which", "<builtin>.bool", "psutil.sensors_temperatures", "subprocess.check_output"], "shutil.which": ["ntpath.dirname", "posixpath.join", "<builtin>.isinstance", "ntpath.join", "posixpath.normcase", "<builtin>.any", "posixpath.dirname", "ntpath.normcase", "shutil._access_check", "<builtin>.set"], "subprocess.check_output": ["subprocess.run", "<builtin>.ValueError"], "bpytop.CpuCollector._collect": ["<builtin>.hasattr", "time.time", "psutil.cpu_freq", "logging.Logger.exception", "logging.Logger.error", "<builtin>.round", "<builtin>.str", "psutil.boot_time", "bpytop.CpuCollector._collect_temps", "psutil.cpu_times_percent", "<builtin>.len", "<builtin>.getattr", "<builtin>.enumerate", "psutil.cpu_percent", "<builtin>.setattr"], "psutil.cpu_percent": ["<builtin>.zip", "<builtin>.ValueError", "psutil.cpu_times", "time.sleep", "psutil.cpu_percent.calculate"], "psutil.cpu_freq": ["<builtin>.float", "psutil._psbsd.cpu_freq", "_psosx.cpu_freq", "_common.scpufreq", "psutil._pswindows.cpu_freq", "<builtin>.len", "psutil._pslinux.cpu_freq"], "psutil.boot_time": ["psutil._psbsd.boot_time", "psutil._pssunos.boot_time", "psutil._psaix.boot_time", "_psosx.boot_time", "psutil._pswindows.boot_time", "psutil._pslinux.boot_time"], "bpytop.CpuCollector._collect_temps": ["<builtin>.hasattr", "bpytop.CpuBox._calc_size", "logging.Logger.exception", "<builtin>.float", "<builtin>.round", "<builtin>.str", "<builtin>.int", "<builtin>.len", "<builtin>.range", "<builtin>.enumerate", "<builtin>.getattr", "<builtin>.max", "psutil.sensors_temperatures", "subprocess.check_output", "<builtin>.sum"], "<builtin>.sum": [], "bpytop.CpuCollector._draw": ["bpytop.CpuBox._draw_fg"], "bpytop.MemCollector": ["time.time"], "bpytop.MemCollector._collect": ["<builtin>.hasattr", "sys.path.rsplit", "bpytop.floating_humanizer", "<builtin>.round", "<builtin>.tuple", "psutil.disk_io_counters", "<builtin>.len", "<builtin>.getattr", "psutil.swap_memory", "psutil.disk_usage", "logging.Logger.debug", "logging.Logger.exception", "psutil.virtual_memory", "<builtin>.open", "ntpath.realpath", "sys.base_prefix.rsplit", "logging.Logger.warning", "time.time", "psutil.disk_partitions", "logging.Logger.error", "<builtin>.list", "posixpath.realpath", "subprocess.check_output"], "psutil.virtual_memory": ["_psosx.virtual_memory", "psutil._pswindows.virtual_memory", "psutil._psaix.virtual_memory", "psutil._psbsd.virtual_memory", "psutil._pslinux.virtual_memory", "psutil._pssunos.virtual_memory"], "psutil.swap_memory": ["psutil._pslinux.swap_memory", "_psosx.swap_memory", "psutil._pswindows.swap_memory", "psutil._pssunos.swap_memory", "psutil._psbsd.swap_memory", "psutil._psaix.swap_memory"], "psutil.disk_io_counters": ["_psosx.disk_io_counters", "<builtin>.dict", "<builtin>.zip", "_common.wrap_numbers", "<builtin>.getattr", "psutil._pslinux.disk_io_counters", "<builtin>.sum"], "psutil.disk_partitions": ["psutil._psaix.disk_partitions", "psutil._psbsd.disk_partitions", "psutil.disk_partitions.pathconf", "psutil._pswindows.disk_partitions", "_psosx.disk_partitions", "psutil._pslinux.disk_partitions", "psutil._pssunos.disk_partitions"], "psutil.disk_usage": ["_psosx.disk_usage", "psutil._pswindows.disk_usage"], "posixpath.realpath": ["posixpath.abspath", "posixpath._joinrealpath"], "ntpath.realpath": ["ntpath.isabs", "<builtin>.isinstance", "ntpath.join", "sys.base_prefix.startswith", "ntpath.normcase", "<builtin>.len", "nt._getfinalpathname", "ntpath._getfinalpathname_nonstrict", "sys.path.startswith", "ntpath.normpath"], "sys.base_prefix.rsplit": [], "sys.path.rsplit": [], "bpytop.MemCollector._draw": ["bpytop.MemBox._draw_fg"], "bpytop.NetCollector": ["time.time"], "bpytop.NetCollector._get_nics": ["psutil.net_if_stats", "<builtin>.sorted", "logging.Logger.exception", "psutil.net_io_counters"], "psutil.net_io_counters": ["psutil._pslinux.net_io_counters", "<builtin>.zip", "_common.snetio", "_common.wrap_numbers", "_psosx.net_io_counters", "psutil._pswindows.net_io_counters", "<builtin>.sum"], "psutil.net_if_stats": ["psutil._pslinux.net_if_stats", "psutil._psbsd.net_if_stats", "_psosx.net_if_stats", "psutil._psaix.net_if_stats", "psutil._pswindows.net_if_stats", "psutil._pssunos.net_if_stats"], "bpytop.NetCollector._get_nics.<lambda1>": ["<builtin>.getattr"], "bpytop.NetCollector.switch": ["<builtin>.len", "bpytop.Collector.collect"], "bpytop.NetCollector._collect": ["time.time", "<builtin>.max", "bpytop.NetCollector._get_nics", "bpytop.floating_humanizer", "<builtin>.round", "bpytop.units_to_bytes", "psutil.net_if_stats", "psutil.net_if_addrs", "<builtin>.len", "<builtin>.getattr", "<builtin>.sorted", "psutil.net_io_counters"], "bpytop.units_to_bytes": ["<builtin>.round", "<builtin>.int", "<builtin>.float"], "bpytop.NetCollector._draw": ["bpytop.NetBox._draw_fg"], "bpytop.ProcCollector": ["<builtin>.compile"], "<builtin>.compile": [], "bpytop.ProcCollector._collect": ["<builtin>.hasattr", "time.time", "<builtin>.isinstance", "bpytop.floating_humanizer", "psutil.process_iter", "<builtin>.round", "bpytop.ProcCollector._tree", "psutil.Process.__init__", "<builtin>.str", "psutil.Process.parent", "<builtin>.len", "<builtin>.sorted", "psutil.Process.as_dict", "psutil.Process.name"], "bpytop.ProcCollector._tree": ["<builtin>.min", "_collections.defaultdict", "bpytop.ProcCollector._tree.create_tree", "psutil.process_iter", "<builtin>.list", "<builtin>.len", "<builtin>.sorted", "psutil.pid_exists"], "psutil.process_iter": ["psutil.pids", "<builtin>.list", "psutil.process_iter.add", "<builtin>.sorted", "<builtin>.set", "psutil.process_iter.remove"], "bpytop.ProcCollector._collect.<lambda1>": ["<builtin>.eval"], "<builtin>.eval": [], "psutil.Process.__init__": ["psutil.Process._init"], "psutil.Process.as_dict": ["<builtin>.isinstance", "<builtin>.dict", "psutil.Process.oneshot", "<builtin>.map", "<builtin>.type", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.len", "<builtin>.getattr", "<builtin>.set"], "psutil.Process.parent": ["psutil.pids", "psutil.Process.__init__", "psutil.Process.ppid", "psutil.Process.create_time"], "psutil.Process.name": ["psutil._psbsd.Process.name", "psutil._pswindows.Process.name", "posixpath.basename", "psutil._psaix.Process.name", "psutil._pssunos.Process.name", "psutil.Process.cmdline", "<builtin>.len", "ntpath.basename", "psutil._pslinux.Process.name"], "_collections.defaultdict": [], "bpytop.ProcCollector._tree.<lambda1>": ["<builtin>.eval"], "bpytop.ProcCollector._tree.create_tree": ["<builtin>.hasattr", "<builtin>.isinstance", "bpytop.ProcCollector._tree.create_tree", "<builtin>.round", "psutil.Process.__init__", "<builtin>.len", "psutil.Process.name"], "bpytop.ProcCollector.sorting": ["<builtin>.len", "bpytop.Collector.collect"], "bpytop.ProcCollector._draw": ["bpytop.ProcBox._draw_fg"], "bpytop.Menu": ["bpytop.Mv.left", "bpytop.Mv.down", "bpytop.Fx.trans", "<builtin>.len", "<builtin>.range", "bpytop.Color.fg"], "bpytop.Menu.main": ["bpytop.Draw.now", "bpytop.Mv.down", "bpytop.Timer.left", "bpytop.Menu.options", "bpytop.Draw.saved_buffer", "bpytop.Banner.draw", "bpytop.Timer.not_zero", "<builtin>.len", "bpytop.Key.input_wait", "bpytop.Mv.left", "bpytop.Mv.to", "bpytop.Fx.uncolor", "bpytop.Key.mouse_moved", "bpytop.Key.get_mouse", "bpytop.Mv.right", "logging.Logger.warning", "threading.Event.wait", "bpytop.Collector.collect", "bpytop.clean_quit", "bpytop.Key.get", "bpytop.Menu.help", "<builtin>.list", "bpytop.Timer.stamp"], "bpytop.Timer.left": ["time.time", "bpytop.Timer.stamp"], "bpytop.Menu.options": ["bpytop.Draw.now", "bpytop.Mv.down", "bpytop.Timer.left", "bpytop.Draw.saved_buffer", "bpytop.Banner.draw", "<builtin>.round", "<builtin>.str", "bpytop.Timer.not_zero", "<builtin>.type", "bpytop.Draw.clear", "logging.Logger.info", "<builtin>.len", "<builtin>.getattr", "bpytop.Key.input_wait", "bpytop.Mv.left", "logging.Logger.setLevel", "bpytop.Mv.to", "bpytop.Term.refresh", "bpytop.Fx.uncolor", "<builtin>.enumerate", "<builtin>.max", "bpytop.Key.get_mouse", "bpytop.Mv.right", "<builtin>.isinstance", "<builtin>.int", "bpytop.Theme.refresh", "bpytop.ProcCollector.sorting", "bpytop.CpuCollector.get_sensors", "bpytop.Timer.finish", "logging.Logger.warning", "threading.Event.wait", "bpytop.create_box", "<builtin>.setattr", "<builtin>.min", "bpytop.Collector.collect", "bpytop.clean_quit", "bpytop.Key.get", "<builtin>.map", "bpytop.Box.draw_update_ms", "<builtin>.list", "<builtin>.range", "bpytop.Timer.stamp"], "bpytop.Menu.help": ["bpytop.Draw.now", "bpytop.Mv.down", "bpytop.Timer.left", "bpytop.Draw.saved_buffer", "bpytop.Banner.draw", "bpytop.Timer.not_zero", "<builtin>.len", "bpytop.Key.input_wait", "bpytop.Mv.left", "bpytop.Mv.to", "bpytop.Fx.uncolor", "<builtin>.enumerate", "bpytop.Key.get_mouse", "bpytop.Mv.right", "logging.Logger.warning", "threading.Event.wait", "bpytop.create_box", "bpytop.Collector.collect", "bpytop.clean_quit", "bpytop.Key.get", "<builtin>.range", "bpytop.Timer.stamp"], "bpytop.Timer.not_zero": ["time.time"], "bpytop.Timer.stamp": ["time.time"], "bpytop.Timer": [], "bpytop.UpdateChecker": [], "bpytop.UpdateChecker.run": ["threading.Thread.start", "threading.Thread.__init__"], "bpytop.UpdateChecker._checker": ["shutil.which", "subprocess.run", "logging.Logger.exception"], "subprocess.run": ["subprocess.CalledProcessError.__init__", "subprocess.CompletedProcess.__init__", "<builtin>.ValueError", "subprocess.Popen.__init__"], "bpytop.Init": [], "bpytop.Init.start": ["bpytop.Draw.buffer", "bpytop.Mv.left", "bpytop.Mv.down", "bpytop.Fx.trans", "bpytop.Banner.draw", "<builtin>.round", "<builtin>.str", "bpytop.Mv.to", "bpytop.Graph.__init__", "<builtin>.range", "random.Random.randint", "bpytop.Color.fg", "bpytop.Draw.out"], "random.Random.randint": ["random.Random.randrange"], "bpytop.Init.success": ["bpytop.Draw.buffer", "bpytop.Init.draw_bg", "bpytop.Mv.right"], "bpytop.Init.draw_bg": ["bpytop.Draw.buffer", "bpytop.Graph.__init__", "bpytop.Mv.to", "<builtin>.range", "bpytop.Draw.out", "random.Random.randint", "time.sleep"], "bpytop.Init.fail": ["bpytop.Draw.buffer", "time.sleep", "logging.Logger.exception", "bpytop.clean_quit"], "bpytop.Init.done": ["bpytop.Draw.now", "bpytop.Draw.clear", "bpytop.Init.draw_bg"], "bpytop.get_cpu_name": ["re.sub", "subprocess.check_output"], "re.sub": ["re._compile"], "bpytop.get_cpu_core_mapping": ["<builtin>.int", "posixpath.isfile", "<builtin>.range", "<builtin>.open", "ntpath.isfile"], "bpytop.now_sleeping": ["bpytop.Draw.now", "bpytop.Term.title", "bpytop.Key.stop", "bpytop.Term.echo", "bpytop.Collector.stop"], "bpytop.now_awake": ["bpytop.Draw.now", "bpytop.Term.title", "bpytop.Key.start", "bpytop.Box.calc_sizes", "bpytop.Term.refresh", "bpytop.Term.echo", "bpytop.Box.draw_bg", "bpytop.Collector.start"], "bpytop.quit_sigint": ["bpytop.clean_quit"], "_thread.interrupt_main": [], "bpytop.process_keys": ["bpytop.Menu.options", "bpytop.Draw.clear", "<builtin>.len", "bpytop.Menu.main", "bpytop.Term.refresh", "bpytop.Key.has_key", "bpytop.Key.get_mouse", "logging.Logger.exception", "bpytop.NetCollector.switch", "bpytop.ProcBox.selector", "bpytop.ProcCollector.sorting", "threading.Event.wait", "bpytop.Collector.collect", "logging.Logger.error", "bpytop.clean_quit", "bpytop.Key.get", "bpytop.Menu.help", "bpytop.Box.draw_update_ms", "<builtin>.list", "psutil.pid_exists"], "bpytop.main": ["bpytop.Draw.now", "bpytop.Term.title", "bpytop.Fx.trans", "bpytop.Key.start", "bpytop.Term.echo", "bpytop.Box.draw_bg", "bpytop.Theme.__init__", "bpytop.Term.refresh", "bpytop.Init.done", "bpytop.Init.success", "bpytop.Init.fail", "bpytop.Collector.start", "logging.Logger.exception", "<builtin>.isinstance", "bpytop.Init.start", "sys.stdin.reconfigure", "bpytop.CpuCollector.get_sensors", "bpytop.Draw.out", "threading.Event.wait", "bpytop.Draw.buffer", "bpytop.TimeIt.start", "bpytop.Box.calc_sizes", "bpytop.Collector.collect", "bpytop.clean_quit", "bpytop.main.run", "bpytop.TimeIt.stop", "bpytop.UpdateChecker.run"], "sys.stdin.reconfigure": [], "bpytop.main.run": ["bpytop.Timer.left", "bpytop.Collector.collect", "bpytop.Term.refresh", "bpytop.Timer.not_zero", "bpytop.process_keys", "bpytop.Timer.stamp", "bpytop.Key.input_wait"], "threading.setprofile": [], "threading.settrace": [], "threading.RLock": ["_thread.RLock", "threading._RLock.__init__"], "threading._RLock.__init__": ["_thread.allocate_lock"], "_thread.RLock": [], "threading._RLock": [], "_thread.allocate_lock": [], "threading._RLock.__repr__": ["<builtin>.hex", "<builtin>.id"], "<builtin>.id": [], "threading._RLock.acquire": ["_thread.get_ident"], "_thread.get_ident": [], "threading._RLock.release": ["_thread.get_ident", "<builtin>.RuntimeError"], "<builtin>.RuntimeError": [], "threading._RLock.__exit__": ["threading._RLock.release"], "threading._RLock._acquire_restore": [], "threading._RLock._release_save": ["<builtin>.RuntimeError"], "threading._RLock._is_owned": ["_thread.get_ident"], "threading.Condition": [], "threading.Condition.__init__": ["_collections.deque", "threading.RLock"], "_collections.deque": [], "threading.Condition.__enter__": [], "threading.Condition.__exit__": [], "threading.Condition.__repr__": ["<builtin>.len"], "threading.Condition._release_save": [], "threading.Condition._acquire_restore": [], "threading.Condition._is_owned": [], "threading.Condition.wait": ["threading.Condition._release_save", "threading.Condition._acquire_restore", "<builtin>.RuntimeError", "threading.Condition._is_owned", "_thread.allocate_lock"], "threading.Condition.wait_for": ["threading.Condition.wait", "time.monotonic"], "time.monotonic": [], "threading.Condition.notify": ["threading.Condition._is_owned", "<builtin>.RuntimeError", "_collections.deque", "itertools.islice"], "itertools.islice": [], "threading.Condition.notify_all": ["<builtin>.len", "threading.Condition.notify"], "threading.Semaphore": [], "threading.Semaphore.__init__": ["threading.Condition.__init__", "<builtin>.ValueError", "_thread.allocate_lock"], "threading.Semaphore.acquire": ["threading.Condition.wait", "time.monotonic", "<builtin>.ValueError"], "threading.Semaphore.release": ["threading.Condition.notify"], "threading.Semaphore.__exit__": ["threading.Semaphore.release"], "threading.BoundedSemaphore": [], "threading.BoundedSemaphore.__init__": ["threading.Semaphore.__init__"], "threading.BoundedSemaphore.release": ["<builtin>.ValueError", "threading.Condition.notify"], "threading.Event": [], "threading.Event._reset_internal_locks": ["threading.Condition.__init__", "_thread.allocate_lock"], "threading.Barrier": [], "threading.Barrier.__init__": ["threading.Condition.__init__", "_thread.allocate_lock"], "threading.Barrier.wait": ["threading.Barrier._wait", "threading.Barrier._exit", "threading.Barrier._release", "threading.Barrier._enter"], "threading.Barrier._enter": ["threading.Condition.wait"], "threading.Barrier._release": ["threading.Barrier._break", "threading.Condition.notify_all"], "threading.Barrier._wait": ["threading.Barrier._break", "threading.Condition.wait_for"], "threading.Barrier._exit": ["threading.Condition.notify_all"], "threading.Barrier._break": ["threading.Condition.notify_all"], "threading.Barrier._wait.<lambda1>": [], "threading.Barrier.reset": ["threading.Condition.notify_all"], "threading.Barrier.abort": ["threading.Barrier._break"], "threading.Barrier.parties": [], "threading.Barrier.n_waiting": [], "threading.Barrier.broken": [], "threading.BrokenBarrierError": [], "itertools.count": [], "threading._newname": [], "_weakrefset.WeakSet.__init__": ["weakref.WeakKeyDictionary.update", "_weakrefset.WeakSet.update", "<builtin>.set", "weakref.WeakValueDictionary.update"], "<builtin>.set": [], "threading.Thread": [], "threading.current_thread": ["_thread.get_ident", "threading._DummyThread.__init__"], "threading._make_invoke_excepthook": ["<builtin>.RuntimeError"], "_weakrefset.WeakSet.add": ["_weakrefset.WeakSet._commit_removals", "_weakref.ref"], "threading.Thread._reset_internal_locks": ["threading.Event._reset_internal_locks", "threading.Thread._set_tstate_lock"], "threading.Thread._set_tstate_lock": ["_thread._set_sentinel"], "threading.Thread.__repr__": ["threading.Event.is_set", "threading.Thread.is_alive", "threading._DummyThread.is_alive"], "_thread.start_new_thread": [], "threading.Thread.run": ["bpytop.Collector._runner", "bpytop.Key._get_key", "subprocess.Popen._readerthread", "bpytop.UpdateChecker._checker", "logging.handlers.QueueListener._monitor"], "logging.handlers.QueueListener._monitor": ["<builtin>.hasattr", "logging.handlers.QueueListener.handle", "logging.handlers.QueueListener.dequeue"], "subprocess.Popen._readerthread": [], "threading.Thread._bootstrap": ["threading.Thread._bootstrap_inner"], "threading.Thread._bootstrap_inner": ["threading.Thread._set_tstate_lock", "threading.Thread._set_ident", "sys.setprofile", "_thread.get_ident", "threading._make_invoke_excepthook.invoke_excepthook", "sys.settrace", "threading.Thread.run", "threading.Thread._set_native_id", "threading.Event.set"], "threading.Thread._set_ident": ["_thread.get_ident"], "threading.Thread._set_native_id": ["_thread.get_native_id"], "_thread.get_native_id": [], "_thread._set_sentinel": [], "sys.settrace": [], "sys.setprofile": [], "threading._make_invoke_excepthook.invoke_excepthook": ["_thread._excepthook", "_thread._ExceptHookArgs", "sys.excepthook", "sys.exc_info"], "threading.Thread._stop": [], "threading.Thread._delete": ["_thread.get_ident"], "threading.Thread._wait_for_tstate_lock": ["threading._DummyThread._stop", "threading.Thread._stop"], "threading._DummyThread._stop": [], "threading.Thread.name": ["<builtin>.str"], "threading.Thread.ident": [], "threading.Thread.native_id": [], "warnings.warn": ["<builtin>.issubclass", "<builtin>.isinstance", "sys._getframe", "<builtin>.type", "<builtin>.TypeError", "<builtin>.range", "sys.__dict__.setdefault", "warnings._next_external_frame", "warnings._is_internal_frame", "_warnings.warn_explicit"], "threading.Thread.daemon": ["threading.Event.is_set", "<builtin>.RuntimeError"], "threading.Thread.isDaemon": [], "threading.Thread.setDaemon": [], "threading.Thread.getName": [], "threading.Thread.setName": [], "collections.namedtuple": ["<builtin>.dict", "<builtin>.tuple", "<builtin>.str", "<builtin>.reversed", "<builtin>.type", "<builtin>.TypeError", "<builtin>.len", "<builtin>.repr", "collections.<lambda1>", "<builtin>.enumerate", "<builtin>.set", "<builtin>.isinstance", "sys._getframe", "_collections._tuplegetter", "sys.intern", "<builtin>.zip", "<builtin>.exec", "<builtin>.map", "<builtin>.ValueError", "<builtin>.list"], "threading.ExceptHookArgs": [], "threading.excepthook": ["<builtin>.print", "_thread.get_ident", "sys.stderr.flush", "traceback.print_exception"], "traceback.print_exception": ["traceback.TracebackException.__init__", "<builtin>.print", "<builtin>.type", "traceback.TracebackException.format"], "sys.stderr.flush": [], "sys.exc_info": [], "_thread._ExceptHookArgs": [], "_thread._excepthook": [], "sys.excepthook": [], "threading.Timer": [], "threading.Timer.__init__": ["threading.Event.__init__", "threading.Thread.__init__"], "threading.Timer.cancel": ["threading.Event.set"], "threading.Timer.run": ["threading.Event.is_set", "threading.Event.set", "threading.Event.wait"], "threading._MainThread": [], "threading._MainThread.__init__": ["threading.Thread._set_tstate_lock", "threading.Thread._set_ident", "threading.Thread._set_native_id", "threading.Thread.__init__", "threading.Event.set"], "threading._DummyThread": [], "threading._DummyThread.__init__": ["threading._newname", "threading.Thread._set_ident", "threading.Thread._set_native_id", "threading.Thread.__init__", "threading.Event.set"], "threading.active_count": ["<builtin>.len"], "threading._enumerate": ["<builtin>.list"], "threading.enumerate": ["<builtin>.list"], "threading._shutdown": ["<builtin>.list", "threading._DummyThread._stop", "threading.Thread._stop"], "threading.main_thread": [], "threading._after_fork": ["threading._enumerate", "_thread.get_ident", "<builtin>.len", "<builtin>.set", "_thread.allocate_lock", "threading._MainThread.__init__"], "_weakrefset._IterationGuard": [], "_weakrefset._IterationGuard.__init__": ["_weakref.ref"], "_weakref.ref": [], "_weakrefset._IterationGuard.__enter__": [], "_weakrefset._IterationGuard.__exit__": [], "_weakrefset.WeakSet": [], "_weakrefset.WeakSet.__init__._remove": [], "weakref.WeakKeyDictionary.update": ["<builtin>.hasattr", "<builtin>.len", "<builtin>.type", "_weakref.ref"], "_weakrefset.WeakSet.update": ["_weakrefset.WeakSet.add", "_weakrefset.WeakSet._commit_removals"], "weakref.WeakValueDictionary.update": ["<builtin>.hasattr", "weakref.KeyedRef.__init__", "<builtin>.dict"], "_weakrefset.WeakSet._commit_removals": [], "_weakrefset.WeakSet.__iter__": ["_weakrefset._IterationGuard.__init__"], "_weakrefset.WeakSet.__len__": ["<builtin>.len"], "_weakrefset.WeakSet.__contains__": ["_weakref.ref"], "_weakrefset.WeakSet.__reduce__": ["<builtin>.getattr", "<builtin>.list"], "_weakrefset.WeakSet.clear": ["_weakrefset.WeakSet._commit_removals"], "_weakrefset.WeakSet.copy": [], "_weakrefset.WeakSet.pop": ["_weakrefset.WeakSet._commit_removals", "<builtin>.KeyError"], "<builtin>.KeyError": [], "_weakrefset.WeakSet.remove": ["_weakrefset.WeakSet._commit_removals", "_weakref.ref"], "_weakrefset.WeakSet.discard": ["_weakrefset.WeakSet._commit_removals", "_weakref.ref"], "_weakrefset.WeakSet.__ior__": ["_weakrefset.WeakSet.update"], "_weakrefset.WeakSet.difference": ["_weakrefset.WeakSet.copy"], "_weakrefset.WeakSet.difference_update": ["_weakrefset.WeakSet.__isub__"], "_weakrefset.WeakSet.__isub__": ["_weakrefset.WeakSet._commit_removals", "_weakref.ref"], "_weakrefset.WeakSet.intersection": [], "_weakrefset.WeakSet.intersection_update": ["_weakrefset.WeakSet.__iand__"], "_weakrefset.WeakSet.__iand__": ["_weakrefset.WeakSet._commit_removals", "_weakref.ref"], "_weakrefset.WeakSet.issubset": ["_weakref.ref"], "_weakrefset.WeakSet.__lt__": ["<builtin>.map", "<builtin>.set"], "_weakrefset.WeakSet.issuperset": ["_weakref.ref"], "_weakrefset.WeakSet.__gt__": ["<builtin>.map", "<builtin>.set"], "_weakrefset.WeakSet.__eq__": ["<builtin>.map", "<builtin>.set", "<builtin>.isinstance"], "_weakrefset.WeakSet.symmetric_difference": ["_weakrefset.WeakSet.copy"], "_weakrefset.WeakSet.symmetric_difference_update": ["_weakrefset.WeakSet.__ixor__"], "_weakrefset.WeakSet.__ixor__": ["_weakrefset.WeakSet._commit_removals", "_weakref.ref"], "_weakrefset.WeakSet.union": [], "_weakrefset.WeakSet.isdisjoint": ["<builtin>.len", "_weakrefset.WeakSet.intersection"], "_weakrefset.WeakSet.__repr__": ["<builtin>.repr"], "<builtin>.globals": [], "<builtin>.AttributeError": [], "collections._OrderedDictKeysView": [], "collections._OrderedDictKeysView.__reversed__": ["<builtin>.reversed"], "<builtin>.reversed": [], "collections._OrderedDictItemsView": [], "collections._OrderedDictItemsView.__reversed__": ["<builtin>.reversed"], "collections._OrderedDictValuesView": [], "collections._OrderedDictValuesView.__reversed__": ["<builtin>.reversed"], "collections._Link": [], "collections.OrderedDict": ["<builtin>.object", "reprlib.recursive_repr", "reprlib.recursive_repr.decorating_function"], "collections.OrderedDict.__init__": ["_weakref.proxy"], "_weakref.proxy": [], "collections.OrderedDict.__setitem__": ["_weakref.proxy"], "collections.OrderedDict.__delitem__": ["_collections.OrderedDict.__map.pop"], "_collections.OrderedDict.__map.pop": [], "collections.OrderedDict.__iter__": [], "collections.OrderedDict.__reversed__": [], "collections.OrderedDict.clear": ["_collections.OrderedDict.__map.clear"], "_collections.OrderedDict.__map.clear": [], "collections.OrderedDict.popitem": ["<builtin>.KeyError"], "collections.OrderedDict.move_to_end": [], "collections.OrderedDict.__sizeof__": ["<builtin>.len", "sys.getsizeof"], "sys.getsizeof": [], "collections.OrderedDict.keys": ["_collections_abc.MappingView.__init__"], "_collections_abc.MappingView.__init__": [], "collections.OrderedDict.items": ["_collections_abc.MappingView.__init__"], "collections.OrderedDict.values": ["_collections_abc.MappingView.__init__"], "<builtin>.object": [], "collections.OrderedDict.pop": ["<builtin>.KeyError"], "collections.OrderedDict.setdefault": [], "reprlib.recursive_repr": [], "reprlib.recursive_repr.decorating_function": ["<builtin>.getattr", "<builtin>.set"], "collections.OrderedDict.__repr__": ["_collections.OrderedDict.items", "<builtin>.list"], "_collections.OrderedDict.items": [], "collections.OrderedDict.__reduce__": ["_collections.OrderedDict", "_collections.OrderedDict.items", "<builtin>.iter", "<builtin>.vars"], "<builtin>.vars": [], "_collections.OrderedDict": [], "<builtin>.iter": [], "collections.OrderedDict.copy": ["_collections.OrderedDict.__class__"], "_collections.OrderedDict.__class__": [], "collections.OrderedDict.fromkeys": ["_collections.OrderedDict"], "collections.OrderedDict.__eq__": ["<builtin>.map", "<builtin>.all", "<builtin>.isinstance"], "collections.<lambda1>": ["<builtin>.property", "operator.itemgetter.__init__"], "operator.itemgetter.__init__": [], "<builtin>.property": [], "sys.intern": [], "<builtin>.TypeError": [], "<builtin>.zip": [], "<builtin>.dict": [], "<builtin>.exec": [], "collections.namedtuple._make": ["<builtin>.TypeError", "<builtin>.len"], "collections.namedtuple._replace": ["<builtin>.ValueError", "<builtin>.list"], "collections.namedtuple.__repr__": [], "collections.namedtuple._asdict": [], "collections.namedtuple.__getnewargs__": [], "_collections._tuplegetter": [], "sys._getframe": [], "collections._count_elements": [], "collections.Counter": [], "collections.Counter.__init__": ["<builtin>.super"], "<builtin>.super": [], "collections.Counter.__missing__": [], "collections.Counter.most_common": ["heapq.nlargest", "<builtin>.sorted", "operator.itemgetter.__init__"], "heapq.nlargest": ["heapq.heapreplace", "<builtin>.zip", "heapq.heapify", "<builtin>.len", "<builtin>.range", "<builtin>.sorted", "<builtin>.iter", "<builtin>.max", "<builtin>.object", "operator.itemgetter.__init__"], "collections.Counter.elements": ["itertools.starmap", "itertools.chain.from_iterable"], "itertools.starmap": [], "itertools.chain.from_iterable": [], "collections.Counter.fromkeys": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "collections.Counter.update": ["<builtin>.isinstance", "<builtin>.super", "_collections._count_elements"], "_collections._count_elements": [], "collections.Counter.subtract": ["<builtin>.isinstance"], "collections.Counter.copy": [], "collections.Counter.__reduce__": ["<builtin>.dict"], "collections.Counter.__delitem__": ["<builtin>.super"], "collections.Counter.__repr__": ["<builtin>.map", "collections.Counter.most_common", "<builtin>.dict"], "collections.Counter.__add__": ["<builtin>.isinstance", "collections.Counter.__init__"], "collections.Counter.__sub__": ["<builtin>.isinstance", "collections.Counter.__init__"], "collections.Counter.__or__": ["<builtin>.isinstance", "collections.Counter.__init__"], "collections.Counter.__and__": ["<builtin>.isinstance", "collections.Counter.__init__"], "collections.Counter.__pos__": ["collections.Counter.__init__"], "collections.Counter.__neg__": ["collections.Counter.__init__"], "collections.Counter._keep_positive": [], "collections.Counter.__iadd__": ["collections.Counter._keep_positive"], "collections.Counter.__isub__": ["collections.Counter._keep_positive"], "collections.Counter.__ior__": ["collections.Counter._keep_positive"], "collections.Counter.__iand__": ["collections.Counter._keep_positive"], "collections.ChainMap": ["reprlib.recursive_repr.decorating_function", "reprlib.recursive_repr"], "collections.ChainMap.__init__": ["<builtin>.list"], "collections.ChainMap.__missing__": ["<builtin>.KeyError"], "collections.ChainMap.__getitem__": ["collections.ChainMap.__missing__"], "collections.ChainMap.get": [], "collections.ChainMap.__len__": ["<builtin>.len", "<builtin>.set"], "collections.ChainMap.__iter__": ["<builtin>.reversed", "<builtin>.iter"], "collections.ChainMap.__contains__": ["<builtin>.any"], "<builtin>.any": [], "collections.ChainMap.__bool__": ["<builtin>.any"], "collections.ChainMap.__repr__": ["<builtin>.map"], "collections.ChainMap.fromkeys": ["collections.ChainMap.__init__"], "collections.ChainMap.copy": [], "collections.ChainMap.new_child": [], "collections.ChainMap.parents": [], "collections.ChainMap.__setitem__": [], "collections.ChainMap.__delitem__": ["<builtin>.KeyError"], "collections.ChainMap.popitem": ["<builtin>.KeyError"], "collections.ChainMap.pop": ["<builtin>.KeyError"], "collections.ChainMap.clear": [], "collections.UserDict": [], "collections.UserDict.__len__": ["<builtin>.len"], "collections.UserDict.__getitem__": ["<builtin>.hasattr", "<builtin>.KeyError"], "collections.UserDict.__setitem__": [], "collections.UserDict.__delitem__": [], "collections.UserDict.__iter__": ["<builtin>.iter"], "collections.UserDict.__contains__": [], "collections.UserDict.__repr__": ["<builtin>.repr"], "collections.UserDict.__copy__": [], "collections.UserDict.fromkeys": ["collections.UserDict.__init__"], "collections.UserList": [], "collections.UserList.__init__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "collections.UserList.__repr__": ["<builtin>.repr"], "collections.UserList.__lt__": ["collections.UserList.__cast"], "collections.UserList.__cast": ["<builtin>.isinstance"], "collections.UserList.__le__": ["collections.UserList.__cast"], "collections.UserList.__eq__": ["collections.UserList.__cast"], "collections.UserList.__gt__": ["collections.UserList.__cast"], "collections.UserList.__ge__": ["collections.UserList.__cast"], "collections.UserList.__contains__": [], "collections.UserList.__len__": ["<builtin>.len"], "collections.UserList.__getitem__": ["<builtin>.isinstance"], "collections.UserList.__setitem__": [], "collections.UserList.__delitem__": [], "collections.UserList.__add__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "collections.UserList.__radd__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "collections.UserList.__iadd__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "collections.UserList.__mul__": [], "collections.UserList.__imul__": [], "collections.UserList.__copy__": [], "collections.UserList.append": [], "collections.UserList.insert": [], "collections.UserList.pop": [], "collections.UserList.remove": [], "collections.UserList.clear": [], "collections.UserList.copy": [], "collections.UserList.count": [], "collections.UserList.index": [], "collections.UserList.reverse": [], "collections.UserList.sort": [], "collections.UserList.extend": ["<builtin>.isinstance"], "collections.UserString": [], "collections.UserString.__init__": ["<builtin>.str", "<builtin>.isinstance"], "collections.UserString.__str__": ["<builtin>.str"], "collections.UserString.__repr__": ["<builtin>.repr"], "collections.UserString.__int__": ["<builtin>.int"], "collections.UserString.__float__": ["<builtin>.float"], "collections.UserString.__complex__": ["<builtin>.complex"], "<builtin>.complex": [], "collections.UserString.__hash__": ["<builtin>.hash"], "<builtin>.hash": [], "collections.UserString.__getnewargs__": [], "collections.UserString.__eq__": ["<builtin>.isinstance"], "collections.UserString.__lt__": ["<builtin>.isinstance"], "collections.UserString.__le__": ["<builtin>.isinstance"], "collections.UserString.__gt__": ["<builtin>.isinstance"], "collections.UserString.__ge__": ["<builtin>.isinstance"], "collections.UserString.__contains__": ["<builtin>.isinstance"], "collections.UserString.__len__": ["<builtin>.len"], "collections.UserString.__getitem__": [], "collections.UserString.__add__": ["<builtin>.str", "<builtin>.isinstance"], "collections.UserString.__radd__": ["<builtin>.str", "<builtin>.isinstance"], "collections.UserString.__mul__": [], "collections.UserString.__mod__": [], "collections.UserString.__rmod__": ["<builtin>.str"], "collections.UserString.capitalize": [], "collections.UserString.casefold": [], "collections.UserString.center": [], "collections.UserString.count": ["<builtin>.isinstance"], "collections.UserString.encode": [], "collections.UserString.endswith": [], "collections.UserString.expandtabs": [], "collections.UserString.find": ["<builtin>.isinstance"], "collections.UserString.format": [], "collections.UserString.format_map": [], "collections.UserString.index": [], "collections.UserString.isalpha": [], "collections.UserString.isalnum": [], "collections.UserString.isascii": [], "collections.UserString.isdecimal": [], "collections.UserString.isdigit": [], "collections.UserString.isidentifier": [], "collections.UserString.islower": [], "collections.UserString.isnumeric": [], "collections.UserString.isprintable": [], "collections.UserString.isspace": [], "collections.UserString.istitle": [], "collections.UserString.isupper": [], "collections.UserString.join": [], "collections.UserString.ljust": [], "collections.UserString.lower": [], "collections.UserString.lstrip": [], "collections.UserString.partition": [], "collections.UserString.replace": ["<builtin>.isinstance"], "collections.UserString.rfind": ["<builtin>.isinstance"], "collections.UserString.rindex": [], "collections.UserString.rjust": [], "collections.UserString.rpartition": [], "collections.UserString.rstrip": [], "collections.UserString.split": [], "collections.UserString.rsplit": [], "collections.UserString.splitlines": [], "collections.UserString.startswith": [], "collections.UserString.strip": [], "collections.UserString.swapcase": [], "collections.UserString.title": [], "collections.UserString.translate": [], "collections.UserString.upper": [], "collections.UserString.zfill": [], "<builtin>.frozenset": [], "reprlib.recursive_repr.decorating_function.wrapper": ["_thread.get_ident", "<builtin>.id"], "reprlib.Repr": [], "reprlib.Repr.__init__": [], "reprlib.Repr.repr": ["reprlib.Repr.repr1"], "reprlib.Repr.repr1": ["<builtin>.hasattr", "reprlib.Repr.repr_instance", "<builtin>.getattr", "<builtin>.type"], "reprlib.Repr.repr_instance": ["<builtin>.len", "builtins.repr", "<builtin>.id", "<builtin>.max"], "reprlib.Repr._repr_iterable": ["<builtin>.len", "reprlib.Repr.repr1", "itertools.islice"], "reprlib.Repr.repr_tuple": ["reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_list": ["reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_array": ["reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_set": ["reprlib._possibly_sorted", "reprlib.Repr._repr_iterable"], "reprlib._possibly_sorted": ["<builtin>.sorted", "<builtin>.list"], "reprlib.Repr.repr_frozenset": ["reprlib._possibly_sorted", "reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_deque": ["reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_dict": ["reprlib._possibly_sorted", "<builtin>.len", "reprlib.Repr.repr1", "itertools.islice"], "reprlib.Repr.repr_str": ["<builtin>.len", "builtins.repr", "<builtin>.max"], "builtins.repr": [], "reprlib.Repr.repr_int": ["<builtin>.len", "builtins.repr", "<builtin>.max"], "<builtin>.bytearray": [], "_collections_abc.<lambda1>": [], "_collections_abc._coro": [], "_collections_abc._ag": [], "_collections_abc._check_methods": [], "_collections_abc.Hashable": ["abc.abstractmethod"], "abc.abstractmethod": [], "_collections_abc.Hashable.__hash__": [], "_collections_abc.Hashable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Awaitable": ["abc.abstractmethod"], "_collections_abc.Awaitable.__await__": [], "_collections_abc.Awaitable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Coroutine": ["abc.abstractmethod"], "_collections_abc.Coroutine.send": [], "_collections_abc.Coroutine.throw": [], "_collections_abc.Coroutine.close": ["_collections_abc.Coroutine.throw", "<builtin>.RuntimeError"], "_collections_abc.Coroutine.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.AsyncIterable": ["abc.abstractmethod"], "_collections_abc.AsyncIterable.__aiter__": [], "_collections_abc.AsyncIterable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.AsyncIterator": ["abc.abstractmethod"], "_collections_abc.AsyncIterator.__anext__": [], "_collections_abc.AsyncIterator.__aiter__": [], "_collections_abc.AsyncIterator.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.AsyncGenerator": ["abc.abstractmethod"], "_collections_abc.AsyncGenerator.__anext__": ["_collections_abc.AsyncGenerator.asend"], "_collections_abc.AsyncGenerator.asend": [], "_collections_abc.AsyncGenerator.athrow": [], "_collections_abc.AsyncGenerator.aclose": ["_collections_abc.AsyncGenerator.athrow", "<builtin>.RuntimeError"], "_collections_abc.AsyncGenerator.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Iterable": ["abc.abstractmethod"], "_collections_abc.Iterable.__iter__": [], "_collections_abc.Iterable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Iterator": ["abc.abstractmethod"], "_collections_abc.Iterator.__next__": [], "_collections_abc.Iterator.__iter__": [], "_collections_abc.Iterator.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Reversible": ["abc.abstractmethod"], "_collections_abc.Reversible.__reversed__": [], "_collections_abc.Reversible.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Generator": ["abc.abstractmethod"], "_collections_abc.Generator.__next__": ["_collections_abc.Generator.send"], "_collections_abc.Generator.send": [], "_collections_abc.Generator.throw": [], "_collections_abc.Generator.close": ["<builtin>.RuntimeError", "_collections_abc.Generator.throw"], "_collections_abc.Generator.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Sized": ["abc.abstractmethod"], "_collections_abc.Sized.__len__": [], "_collections_abc.Sized.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Container": ["abc.abstractmethod"], "_collections_abc.Container.__contains__": [], "_collections_abc.Container.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Collection": [], "_collections_abc.Collection.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Callable": ["abc.abstractmethod"], "_collections_abc.Callable.__call__": [], "_collections_abc.Callable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Set": [], "_collections_abc.Set.__le__": ["<builtin>.len", "<builtin>.isinstance", "_collections_abc.Set.__iter__"], "_collections_abc.Set.__iter__": [], "_collections_abc.Set.__lt__": ["<builtin>.len", "_collections_abc.Set.__le__", "<builtin>.isinstance"], "_collections_abc.Set.__gt__": ["<builtin>.len", "<builtin>.isinstance", "_collections_abc.Set.__ge__"], "_collections_abc.Set.__ge__": ["<builtin>.len", "<builtin>.isinstance"], "_collections_abc.Set.__eq__": ["<builtin>.len", "_collections_abc.Set.__le__", "<builtin>.isinstance"], "_collections_abc.Set._from_iterable": [], "_collections_abc.Set.__and__": ["_collections_abc.KeysView._from_iterable", "_collections_abc.Set._from_iterable", "_collections_abc.ItemsView._from_iterable", "<builtin>.isinstance"], "_collections_abc.KeysView._from_iterable": ["<builtin>.set"], "_collections_abc.ItemsView._from_iterable": ["<builtin>.set"], "_collections_abc.Set.isdisjoint": [], "_collections_abc.Set.__or__": ["_collections_abc.KeysView._from_iterable", "_collections_abc.Set._from_iterable", "_collections_abc.ItemsView._from_iterable", "<builtin>.isinstance"], "_collections_abc.Set.__sub__": ["_collections_abc.KeysView._from_iterable", "_collections_abc.Set._from_iterable", "_collections_abc.ItemsView._from_iterable", "<builtin>.isinstance"], "_collections_abc.Set.__rsub__": ["_collections_abc.KeysView._from_iterable", "_collections_abc.Set._from_iterable", "_collections_abc.ItemsView._from_iterable", "<builtin>.isinstance"], "_collections_abc.Set.__xor__": ["_collections_abc.KeysView._from_iterable", "_collections_abc.Set._from_iterable", "_collections_abc.ItemsView._from_iterable", "<builtin>.isinstance"], "_collections_abc.Set._hash": ["<builtin>.len", "<builtin>.hash", "_collections_abc.Set.__iter__"], "_collections_abc.MutableSet": ["abc.abstractmethod"], "_collections_abc.MutableSet.add": [], "_collections_abc.MutableSet.discard": [], "_collections_abc.MutableSet.remove": ["_collections_abc.MutableSet.discard", "<builtin>.KeyError"], "_collections_abc.MutableSet.pop": ["<builtin>.next", "<builtin>.iter", "_collections_abc.MutableSet.discard"], "<builtin>.next": [], "_collections_abc.MutableSet.clear": ["_collections_abc.MutableSet.pop"], "_collections_abc.MutableSet.__ior__": ["_collections_abc.MutableSet.add"], "_collections_abc.MutableSet.__iand__": ["_collections_abc.MutableSet.discard"], "_collections_abc.MutableSet.__ixor__": ["_collections_abc.Set._from_iterable", "_collections_abc.MutableSet.clear", "<builtin>.isinstance", "_collections_abc.ItemsView._from_iterable", "_collections_abc.MutableSet.discard", "_collections_abc.KeysView._from_iterable", "_collections_abc.MutableSet.add"], "_collections_abc.MutableSet.__isub__": ["_collections_abc.MutableSet.clear", "_collections_abc.MutableSet.discard"], "_collections_abc.Mapping": ["abc.abstractmethod"], "_collections_abc.Mapping.__getitem__": [], "_collections_abc.Mapping.get": [], "_collections_abc.Mapping.__contains__": [], "_collections_abc.Mapping.keys": ["_collections_abc.MappingView.__init__"], "_collections_abc.Mapping.items": ["_collections_abc.MappingView.__init__"], "_collections_abc.Mapping.values": ["_collections_abc.MappingView.__init__"], "_collections_abc.Mapping.__eq__": ["<builtin>.dict", "<builtin>.isinstance", "_collections_abc.Mapping.items", "weakref.WeakKeyDictionary.items", "weakref.WeakValueDictionary.items"], "weakref.WeakKeyDictionary.items": ["_weakrefset._IterationGuard.__init__"], "weakref.WeakValueDictionary.items": ["weakref.WeakValueDictionary._commit_removals", "_weakrefset._IterationGuard.__init__"], "_collections_abc.MappingView": [], "_collections_abc.MappingView.__len__": ["<builtin>.len"], "_collections_abc.MappingView.__repr__": [], "_collections_abc.KeysView": [], "_collections_abc.KeysView.__contains__": [], "_collections_abc.KeysView.__iter__": [], "_collections_abc.ItemsView": [], "_collections_abc.ItemsView.__contains__": [], "_collections_abc.ItemsView.__iter__": [], "_collections_abc.ValuesView": [], "_collections_abc.ValuesView.__contains__": [], "_collections_abc.ValuesView.__iter__": [], "_collections_abc.MutableMapping": ["<builtin>.object", "abc.abstractmethod"], "_collections_abc.MutableMapping.__setitem__": [], "_collections_abc.MutableMapping.__delitem__": [], "_collections_abc.MutableMapping.pop": [], "_collections_abc.MutableMapping.popitem": ["<builtin>.next", "<builtin>.iter"], "_collections_abc.MutableMapping.clear": ["collections.ChainMap.popitem", "weakref.WeakValueDictionary.popitem", "weakref.WeakKeyDictionary.popitem", "_collections_abc.MutableMapping.popitem"], "weakref.WeakValueDictionary.popitem": ["weakref.WeakValueDictionary._commit_removals"], "weakref.WeakKeyDictionary.popitem": [], "_collections_abc.MutableMapping.update": ["<builtin>.hasattr", "<builtin>.isinstance"], "_collections_abc.MutableMapping.setdefault": [], "_collections_abc.Sequence": ["abc.abstractmethod"], "_collections_abc.Sequence.__getitem__": [], "_collections_abc.Sequence.__iter__": [], "_collections_abc.Sequence.__contains__": ["_collections_abc.Sequence.__iter__"], "_collections_abc.Sequence.__reversed__": ["<builtin>.reversed", "<builtin>.len", "<builtin>.range"], "_collections_abc.Sequence.index": ["<builtin>.len", "<builtin>.max"], "_collections_abc.Sequence.count": ["<builtin>.sum"], "_collections_abc.ByteString": [], "_collections_abc.MutableSequence": ["abc.abstractmethod"], "_collections_abc.MutableSequence.__setitem__": [], "_collections_abc.MutableSequence.__delitem__": [], "_collections_abc.MutableSequence.insert": [], "_collections_abc.MutableSequence.append": ["<builtin>.len", "_collections_abc.MutableSequence.insert"], "_collections_abc.MutableSequence.clear": ["_collections_abc.MutableSequence.pop"], "_collections_abc.MutableSequence.pop": [], "_collections_abc.MutableSequence.reverse": ["<builtin>.len", "<builtin>.range"], "_collections_abc.MutableSequence.extend": ["_collections_abc.MutableSequence.append", "<builtin>.list"], "_collections_abc.MutableSequence.remove": ["_collections_abc.Sequence.index"], "_collections_abc.MutableSequence.__iadd__": ["_collections_abc.MutableSequence.extend"], "abc.abstractclassmethod": [], "abc.abstractclassmethod.__init__": ["<builtin>.super"], "abc.abstractstaticmethod": [], "abc.abstractstaticmethod.__init__": ["<builtin>.super"], "abc.abstractproperty": [], "abc.ABCMeta": [], "abc.ABCMeta.__new__": ["_abc._abc_init", "<builtin>.super"], "_abc._abc_init": [], "abc.ABCMeta.register": ["_abc._abc_register"], "_abc._abc_register": [], "abc.ABCMeta.__instancecheck__": ["_abc._abc_instancecheck"], "_abc._abc_instancecheck": [], "abc.ABCMeta.__subclasscheck__": ["_abc._abc_subclasscheck"], "_abc._abc_subclasscheck": [], "abc.ABCMeta._dump_registry": ["<builtin>.print", "_abc._get_dump", "_py_abc.get_cache_token", "_abc.get_cache_token"], "_py_abc.get_cache_token": [], "_abc.get_cache_token": [], "_abc._get_dump": [], "abc.ABCMeta._abc_registry_clear": ["_abc._reset_registry"], "_abc._reset_registry": [], "abc.ABCMeta._abc_caches_clear": ["_abc._reset_caches"], "_abc._reset_caches": [], "abc.ABC": [], "_py_abc.ABCMeta": [], "_py_abc.ABCMeta.__new__": ["<builtin>.frozenset", "_weakrefset.WeakSet.__init__", "<builtin>.getattr", "<builtin>.set", "<builtin>.super"], "_py_abc.ABCMeta.register": ["<builtin>.TypeError", "<builtin>.issubclass", "<builtin>.RuntimeError", "<builtin>.isinstance"], "<builtin>.issubclass": [], "_py_abc.ABCMeta._dump_registry": ["<builtin>.isinstance", "<builtin>.print", "_py_abc.get_cache_token", "<builtin>.getattr", "<builtin>.set"], "_py_abc.ABCMeta._abc_registry_clear": [], "_py_abc.ABCMeta._abc_caches_clear": ["_weakrefset.WeakSet.clear"], "_py_abc.ABCMeta.__instancecheck__": ["<builtin>.type", "_py_abc.ABCMeta.__subclasscheck__", "<builtin>.any"], "_py_abc.ABCMeta.__subclasscheck__": ["<builtin>.issubclass", "<builtin>.isinstance", "_weakrefset.WeakSet.add", "_weakrefset.WeakSet.__init__", "<builtin>.TypeError", "<builtin>.getattr"], "warnings.showwarning": ["warnings.WarningMessage.__init__", "warnings._showwarnmsg_impl"], "warnings.WarningMessage.__init__": [], "warnings._showwarnmsg_impl": ["warnings._formatwarnmsg", "sys.stderr.write"], "warnings.formatwarning": ["warnings._formatwarnmsg_impl", "warnings.WarningMessage.__init__"], "warnings._formatwarnmsg": ["warnings.formatwarning", "warnings._formatwarnmsg_impl"], "sys.stderr.write": [], "linecache.getline": ["<builtin>.len", "linecache.getlines"], "tracemalloc.get_object_traceback": ["_tracemalloc._get_object_traceback", "tracemalloc.Traceback.__init__"], "warnings._showwarnmsg": ["<builtin>.callable", "<builtin>.TypeError", "warnings.showwarning", "warnings._showwarnmsg_impl"], "<builtin>.callable": [], "warnings._add_filter": ["_warnings.filters.insert", "_warnings._filters_mutated", "_warnings.filters.append", "_warnings.filters.remove"], "warnings.simplefilter": ["warnings._add_filter", "<builtin>.isinstance"], "_warnings.filters.remove": [], "_warnings.filters.insert": [], "_warnings.filters.append": [], "_warnings._filters_mutated": [], "warnings.resetwarnings": ["_warnings._filters_mutated"], "warnings._OptionError": [], "warnings._processoptions": ["<builtin>.print", "warnings._setoption"], "sys.warnoptions.split": [], "warnings._getaction": [], "warnings._getcategory": ["<builtin>.issubclass", "<builtin>.__import__", "<builtin>.getattr"], "re.escape": ["<builtin>.str", "<builtin>.isinstance"], "<builtin>.__import__": [], "warnings._is_internal_frame": [], "warnings._next_external_frame": ["warnings._is_internal_frame"], "sys.__dict__.setdefault": [], "_warnings.warn_explicit": [], "linecache.getlines": ["<builtin>.len", "linecache.clearcache", "linecache.updatecache"], "_warnings._onceregistry.get": [], "warnings.WarningMessage": [], "warnings.WarningMessage.__str__": [], "warnings.catch_warnings": [], "warnings.catch_warnings.__init__": [], "warnings.catch_warnings.__repr__": ["<builtin>.type"], "warnings.catch_warnings.__enter__": ["<builtin>.RuntimeError"], "warnings.catch_warnings.__exit__": ["<builtin>.RuntimeError"], "warnings._warn_unawaited_coroutine.extract": ["<builtin>.reversed", "linecache.getline"], "traceback.format_list": ["traceback.StackSummary.from_list", "traceback.StackSummary.format"], "_warnings.warn": [], "warnings._filters_mutated": [], "traceback.print_list": ["<builtin>.print", "traceback.StackSummary.from_list", "traceback.StackSummary.format"], "traceback.StackSummary.from_list": ["traceback.FrameSummary.__init__", "<builtin>.isinstance"], "traceback.StackSummary.format": ["<builtin>.sorted"], "traceback.print_tb": ["traceback.extract_tb", "traceback.print_list"], "traceback.extract_tb": ["traceback.walk_tb", "traceback.StackSummary.extract"], "traceback.format_tb": ["traceback.extract_tb"], "traceback.walk_tb": [], "traceback.StackSummary.extract": ["linecache.lazycache", "itertools.islice", "<builtin>.getattr", "traceback.FrameSummary.__init__", "<builtin>.set", "linecache.checkcache", "collections.deque"], "traceback.TracebackException.__init__": ["traceback.TracebackException.__init__", "traceback.walk_tb", "traceback._some_str", "<builtin>.issubclass", "traceback.StackSummary.extract", "<builtin>.str", "<builtin>.type", "traceback.TracebackException._load_lines", "<builtin>.set", "<builtin>.id"], "traceback.TracebackException.format": ["traceback.TracebackException.format_exception_only", "traceback.TracebackException.format"], "traceback.format_exception": ["traceback.TracebackException.__init__", "<builtin>.type", "traceback.TracebackException.format", "<builtin>.list"], "traceback.format_exception_only": ["traceback.TracebackException.__init__", "traceback.TracebackException.format_exception_only", "<builtin>.list"], "traceback.TracebackException.format_exception_only": ["<builtin>.issubclass", "<builtin>.min", "traceback._format_final_exc_line", "<builtin>.str", "<builtin>.len"], "traceback._format_final_exc_line": ["traceback._some_str"], "traceback._some_str": ["<builtin>.str", "<builtin>.type"], "traceback.print_exc": ["sys.exc_info", "traceback.print_exception"], "traceback.format_exc": ["traceback.format_exception", "sys.exc_info"], "traceback.print_last": ["<builtin>.hasattr", "<builtin>.ValueError", "traceback.print_exception"], "traceback.print_stack": ["traceback.print_list", "sys._getframe", "traceback.extract_stack"], "traceback.extract_stack": ["traceback.walk_stack", "traceback.StackSummary.extract", "sys._getframe"], "traceback.format_stack": ["traceback.format_list", "sys._getframe", "traceback.extract_stack"], "traceback.walk_stack": ["sys._getframe"], "traceback.clear_frames": [], "traceback.FrameSummary": [], "traceback.FrameSummary.__init__": ["<builtin>.repr"], "traceback.FrameSummary.__eq__": ["<builtin>.isinstance"], "traceback.FrameSummary.__getitem__": [], "traceback.FrameSummary.__iter__": ["<builtin>.iter"], "traceback.FrameSummary.__repr__": [], "traceback.FrameSummary.__len__": [], "traceback.FrameSummary.line": ["linecache.getline"], "traceback.StackSummary": [], "collections.deque": [], "linecache.lazycache": ["<builtin>.len", "<builtin>.getattr"], "linecache.checkcache": ["<builtin>.len", "<builtin>.list"], "traceback.TracebackException": [], "traceback.TracebackException._load_lines": ["traceback.TracebackException._load_lines"], "traceback.TracebackException.from_exception": ["traceback.TracebackException.__init__", "<builtin>.type"], "traceback.TracebackException.__eq__": [], "traceback.TracebackException.__str__": [], "linecache.clearcache": [], "linecache.updatecache": ["linecache.lazycache", "posixpath.join", "ntpath.isabs", "ntpath.join", "<builtin>.len", "posixpath.isabs"], "posixpath.isabs": ["sys.base_prefix.startswith", "sys.path.startswith", "posixpath._get_sep"], "ntpath.isabs": ["<builtin>.isinstance", "ntpath._get_bothseps", "sys.path.replace", "<builtin>.len", "ntpath.splitdrive", "sys.base_prefix.replace"], "posixpath.join": ["sys.path.endswith", "<builtin>.map", "posixpath._get_sep", "sys.base_prefix.endswith", "genericpath._check_arg_types"], "ntpath.join": ["genericpath._check_arg_types", "<builtin>.map", "ntpath.splitdrive", "<builtin>.isinstance"], "functools.update_wrapper": ["<builtin>.getattr", "<builtin>.setattr"], "functools.wraps": ["_functools.partial"], "_functools.partial": [], "functools._gt_from_lt": [], "functools._le_from_lt": [], "functools._ge_from_lt": [], "functools._ge_from_le": [], "functools._lt_from_le": [], "functools._gt_from_le": [], "functools._lt_from_gt": [], "functools._ge_from_gt": [], "functools._le_from_gt": [], "functools._le_from_ge": [], "functools._gt_from_ge": [], "functools._lt_from_ge": [], "functools.total_ordering": ["<builtin>.setattr", "<builtin>.getattr", "<builtin>.ValueError", "<builtin>.max"], "functools.cmp_to_key": ["functools.cmp_to_key.K"], "functools.cmp_to_key.K": [], "functools.cmp_to_key.K.__init__": [], "functools.cmp_to_key.K.__lt__": [], "functools.cmp_to_key.K.__gt__": [], "functools.cmp_to_key.K.__eq__": [], "functools.cmp_to_key.K.__le__": [], "functools.cmp_to_key.K.__ge__": [], "functools.reduce": ["<builtin>.TypeError", "<builtin>.next", "<builtin>.iter"], "functools.partial": ["reprlib.recursive_repr.decorating_function", "reprlib.recursive_repr"], "functools.partial.__new__": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.hasattr", "<builtin>.super"], "functools.partial.__call__": [], "functools.partial.__repr__": ["_functools.partial.keywords.items", "<builtin>.type", "<builtin>.repr"], "_functools.partial.keywords.items": [], "functools.partial.__reduce__": ["<builtin>.type"], "functools.partial.__setstate__": ["<builtin>.isinstance", "<builtin>.dict", "<builtin>.callable", "<builtin>.tuple", "<builtin>.type", "<builtin>.TypeError", "<builtin>.len"], "functools.partialmethod": [], "functools.partialmethod.__repr__": ["<builtin>.map"], "functools.partialmethod._make_unbound_method": [], "functools.partialmethod._make_unbound_method._method": [], "functools.partialmethod.__get__": ["functools.partialmethod._make_unbound_method", "<builtin>.getattr", "_functools.partial"], "functools.partialmethod.__isabstractmethod__": ["<builtin>.getattr"], "functools._unwrap_partial": ["<builtin>.isinstance"], "functools._HashedSeq": [], "functools._HashedSeq.__init__": [], "functools._HashedSeq.__hash__": [], "functools._make_key": ["functools._HashedSeq.__init__"], "functools.lru_cache": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.isinstance", "_functools._lru_cache_wrapper"], "_functools._lru_cache_wrapper": [], "functools.lru_cache.decorating_function": ["_functools._lru_cache_wrapper"], "functools._lru_cache_wrapper": ["<builtin>.object", "_thread.RLock"], "functools._lru_cache_wrapper.wrapper": ["functools._make_key"], "functools._lru_cache_wrapper.cache_info": [], "functools._lru_cache_wrapper.cache_clear": [], "functools._c3_merge": ["<builtin>.RuntimeError"], "functools._c3_mro": ["<builtin>.hasattr", "<builtin>.issubclass", "<builtin>.reversed", "<builtin>.any", "<builtin>.list", "<builtin>.len", "functools._c3_mro", "<builtin>.enumerate", "functools._c3_merge"], "functools._compose_mro": ["<builtin>.issubclass", "functools._c3_mro", "<builtin>.set", "functools._compose_mro.is_related", "functools._compose_mro.is_strict_base"], "functools._compose_mro.is_related": ["<builtin>.hasattr", "<builtin>.issubclass"], "functools._compose_mro.is_strict_base": [], "functools._find_impl": ["functools._compose_mro", "<builtin>.issubclass", "<builtin>.RuntimeError"], "weakref.WeakKeyDictionary.__init__": ["weakref.WeakKeyDictionary.update", "_weakrefset.WeakSet.update", "<builtin>.set"], "functools.singledispatch.dispatch": ["_collections_abc.MutableMapping.clear", "_abc.get_cache_token", "_py_abc.get_cache_token", "collections.ChainMap.clear", "functools._find_impl"], "functools.singledispatch.register.<lambda1>": ["functools.singledispatch.register"], "typing.get_type_hints": ["<builtin>.hasattr", "typing._get_defaults", "<builtin>.isinstance", "<builtin>.dict", "<builtin>.reversed", "typing.ForwardRef.__init__", "<builtin>.type", "typing._eval_type", "<builtin>.TypeError", "<builtin>.getattr"], "functools.singledispatch.wrapper": ["<builtin>.TypeError", "functools.singledispatch.dispatch"], "functools.singledispatchmethod": [], "functools.singledispatchmethod.__init__": ["<builtin>.callable", "<builtin>.TypeError", "functools.singledispatch", "<builtin>.hasattr"], "functools.singledispatchmethod.register": [], "functools.singledispatchmethod.__get__": [], "functools.singledispatchmethod.__get__._method": [], "functools.singledispatchmethod.__isabstractmethod__": ["<builtin>.getattr"], "functools.cached_property": [], "functools.cached_property.__init__": ["_thread.RLock"], "functools.cached_property.__set_name__": ["<builtin>.TypeError"], "functools.cached_property.__get__": ["<builtin>.TypeError", "<builtin>.type"], "types._f": [], "types.<lambda1>": [], "types._cell_factory": [], "types._cell_factory.f": [], "types._g": [], "types._c": [], "types._ag": [], "types._C": [], "types._C._m": [], "types.new_class": ["types.resolve_bases", "types.prepare_class"], "types.resolve_bases": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.list", "<builtin>.TypeError", "<builtin>.len", "<builtin>.enumerate"], "types.prepare_class": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.dict", "<builtin>.type", "types._calculate_meta"], "types._calculate_meta": ["<builtin>.TypeError", "<builtin>.issubclass", "<builtin>.type"], "types.DynamicClassAttribute": [], "types.DynamicClassAttribute.__init__": ["<builtin>.getattr", "<builtin>.bool"], "types.DynamicClassAttribute.__get__": ["<builtin>.AttributeError"], "types.DynamicClassAttribute.__set__": ["<builtin>.AttributeError"], "types.DynamicClassAttribute.__delete__": ["<builtin>.AttributeError"], "types.DynamicClassAttribute.getter": ["<builtin>.type"], "types.DynamicClassAttribute.setter": ["<builtin>.type"], "types.DynamicClassAttribute.deleter": ["<builtin>.type"], "types._GeneratorWrapper": [], "types._GeneratorWrapper.__init__": ["<builtin>.getattr"], "types._GeneratorWrapper.send": [], "types._GeneratorWrapper.throw": [], "types._GeneratorWrapper.close": [], "types._GeneratorWrapper.gi_code": [], "types._GeneratorWrapper.gi_frame": [], "types._GeneratorWrapper.gi_running": [], "types._GeneratorWrapper.gi_yieldfrom": [], "types._GeneratorWrapper.__next__": ["<builtin>.next"], "types._GeneratorWrapper.__iter__": [], "types.coroutine.wrapped": ["types._GeneratorWrapper.__init__", "<builtin>.isinstance"], "weakref.WeakMethod": [], "weakref.WeakMethod.__new__": ["<builtin>.TypeError", "_weakref.ref.__new__", "<builtin>.type", "_weakref.ref"], "weakref.WeakMethod.__new__._cb": [], "_weakref.ref.__new__": [], "weakref.WeakMethod.__call__": ["_weakref.ref._func_ref", "_weakref.ref._meth_type", "<builtin>.super"], "_weakref.ref._func_ref": [], "_weakref.ref._meth_type": [], "weakref.WeakMethod.__eq__": ["_weakref.ref.__eq__", "<builtin>.isinstance"], "_weakref.ref.__eq__": [], "weakref.WeakMethod.__ne__": ["_weakref.ref.__ne__", "<builtin>.isinstance"], "_weakref.ref.__ne__": [], "weakref.WeakValueDictionary": [], "weakref.WeakValueDictionary.__init__": ["<builtin>.set"], "weakref.WeakValueDictionary.__init__.remove": ["_weakref._remove_dead_weakref"], "_weakref._remove_dead_weakref": [], "weakref.WeakValueDictionary._commit_removals": ["_weakref._remove_dead_weakref"], "weakref.WeakValueDictionary.__getitem__": ["weakref.WeakValueDictionary._commit_removals", "<builtin>.KeyError"], "weakref.WeakValueDictionary.__delitem__": ["weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.__len__": ["weakref.WeakValueDictionary._commit_removals", "<builtin>.len"], "weakref.WeakValueDictionary.__contains__": ["weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.__repr__": ["<builtin>.id"], "weakref.WeakValueDictionary.__setitem__": ["weakref.WeakValueDictionary._commit_removals", "weakref.KeyedRef.__init__"], "weakref.KeyedRef.__init__": ["<builtin>.super"], "weakref.WeakValueDictionary.copy": ["weakref.WeakValueDictionary._commit_removals", "_weakrefset._IterationGuard.__init__", "weakref.WeakValueDictionary.__init__"], "copy.deepcopy": ["<builtin>.issubclass", "copy._reconstruct", "<builtin>.isinstance", "<builtin>.type", "copy._keep_alive", "<builtin>.getattr", "copy._deepcopy_atomic", "<builtin>.id"], "weakref.WeakValueDictionary.get": ["weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.keys": ["weakref.WeakValueDictionary._commit_removals", "_weakrefset._IterationGuard.__init__"], "weakref.WeakValueDictionary.itervaluerefs": ["weakref.WeakValueDictionary._commit_removals", "_weakrefset._IterationGuard.__init__"], "weakref.WeakValueDictionary.values": ["weakref.WeakValueDictionary._commit_removals", "_weakrefset._IterationGuard.__init__"], "weakref.WeakValueDictionary.pop": ["weakref.WeakValueDictionary._commit_removals", "<builtin>.KeyError"], "weakref.WeakValueDictionary.setdefault": ["weakref.WeakValueDictionary._commit_removals", "weakref.KeyedRef.__init__"], "weakref.WeakValueDictionary.valuerefs": ["weakref.WeakValueDictionary._commit_removals", "<builtin>.list"], "weakref.KeyedRef": [], "weakref.KeyedRef.__new__": ["_weakref.ref.__new__"], "weakref.WeakKeyDictionary": [], "weakref.WeakKeyDictionary.__init__.remove": [], "weakref.WeakKeyDictionary._commit_removals": [], "weakref.WeakKeyDictionary._scrub_removals": [], "weakref.WeakKeyDictionary.__delitem__": ["_weakref.ref"], "weakref.WeakKeyDictionary.__getitem__": ["_weakref.ref"], "weakref.WeakKeyDictionary.__len__": ["<builtin>.len", "weakref.WeakKeyDictionary._scrub_removals"], "weakref.WeakKeyDictionary.__repr__": ["<builtin>.id"], "weakref.WeakKeyDictionary.__setitem__": ["_weakref.ref"], "weakref.WeakKeyDictionary.copy": ["weakref.WeakKeyDictionary.__init__", "_weakrefset._IterationGuard.__init__"], "weakref.WeakKeyDictionary.get": ["_weakref.ref"], "weakref.WeakKeyDictionary.__contains__": ["_weakref.ref"], "weakref.WeakKeyDictionary.keys": ["_weakrefset._IterationGuard.__init__"], "weakref.WeakKeyDictionary.values": ["_weakrefset._IterationGuard.__init__"], "weakref.WeakKeyDictionary.keyrefs": ["<builtin>.list"], "weakref.WeakKeyDictionary.pop": ["_weakref.ref"], "weakref.WeakKeyDictionary.setdefault": ["_weakref.ref"], "weakref.finalize": ["itertools.count", "weakref.finalize._Info"], "weakref.finalize._Info": [], "atexit.register": [], "weakref.finalize.__call__": [], "weakref.finalize.detach": [], "weakref.finalize.peek": [], "weakref.finalize.alive": [], "weakref.finalize.atexit": ["<builtin>.bool"], "weakref.finalize.__repr__": ["<builtin>.type", "<builtin>.id"], "weakref.finalize._select_for_exit": [], "weakref.finalize._select_for_exit.<lambda1>": [], "weakref.finalize._exitfunc": ["sys.excepthook", "weakref.finalize._select_for_exit", "gc.isenabled", "gc.enable", "gc.disable", "sys.exc_info"], "gc.isenabled": [], "gc.disable": [], "gc.enable": [], "copy.Error": [], "copy.copy": ["<builtin>.issubclass", "copy._copy_immutable", "copy._reconstruct", "<builtin>.isinstance", "<builtin>.type", "<builtin>.getattr"], "copy._copy_immutable": [], "copy._reconstruct": ["<builtin>.hasattr", "<builtin>.isinstance", "copy.deepcopy", "<builtin>.len", "<builtin>.id", "<builtin>.setattr"], "copy._deepcopy_atomic": [], "copy._keep_alive": ["<builtin>.id"], "copy._deepcopy_list": ["copy.deepcopy", "<builtin>.id"], "copy._deepcopy_tuple": ["<builtin>.tuple", "copy.deepcopy", "<builtin>.zip", "<builtin>.id"], "copy._deepcopy_dict": ["copy.deepcopy", "<builtin>.id"], "copy._deepcopy_method": ["copy.deepcopy", "<builtin>.type", "email.message.Message.__init__"], "email.message.Message.__init__": [], "copyreg.pickle": ["<builtin>.callable", "<builtin>.TypeError", "copyreg.constructor"], "copyreg.constructor": ["<builtin>.callable", "<builtin>.TypeError"], "copyreg.pickle_complex": [], "copyreg._reconstructor": [], "copyreg._reduce_ex": ["<builtin>.hasattr", "<builtin>.TypeError", "<builtin>.getattr"], "copyreg.__newobj__": [], "copyreg.__newobj_ex__": [], "copyreg._slotnames": ["<builtin>.hasattr", "<builtin>.isinstance"], "copyreg.add_extension": ["<builtin>.int", "<builtin>.ValueError"], "copyreg.remove_extension": ["<builtin>.ValueError"], "copyreg.clear_extension_cache": [], "typing._type_check": ["<builtin>.isinstance", "<builtin>.callable", "typing.ForwardRef.__init__", "<builtin>.type", "<builtin>.TypeError"], "typing.ForwardRef.__init__": ["<builtin>.TypeError", "<builtin>.SyntaxError", "<builtin>.compile", "<builtin>.isinstance"], "typing._type_repr": ["<builtin>.isinstance", "<builtin>.repr"], "typing._collect_type_vars": ["<builtin>.tuple", "<builtin>.isinstance"], "typing._subs_tvars": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.list", "<builtin>.enumerate", "typing._subs_tvars", "typing._GenericAlias.copy_with"], "typing._GenericAlias.copy_with": ["typing._GenericAlias.__init__"], "typing._check_generic": ["<builtin>.TypeError", "<builtin>.len"], "typing._remove_dups_flatten": ["<builtin>.tuple", "<builtin>.len", "<builtin>.set", "<builtin>.isinstance"], "typing._tp_cache": ["functools.lru_cache.decorating_function", "functools._lru_cache_wrapper.wrapper", "functools.singledispatch.wrapper", "_functools.partial", "functools.wraps", "functools.lru_cache"], "typing._tp_cache.inner": ["typing._GenericAlias.__getitem__", "typing._SpecialForm.__getitem__", "typing._VariadicGenericAlias.__getitem__", "typing.Generic.__class_getitem__", "typing._VariadicGenericAlias.__getitem_inner__"], "typing.Generic.__class_getitem__": ["<builtin>.isinstance", "<builtin>.tuple", "typing._check_generic", "typing._type_check", "<builtin>.TypeError", "<builtin>.len", "<builtin>.set", "<builtin>.all", "typing._GenericAlias.__init__"], "typing._GenericAlias.__getitem__": ["<builtin>.isinstance", "<builtin>.tuple", "typing._check_generic", "typing._type_check", "<builtin>.TypeError", "typing._subs_tvars"], "typing._SpecialForm.__getitem__": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.type", "typing._type_check", "<builtin>.TypeError", "<builtin>.len", "typing._remove_dups_flatten", "typing._GenericAlias.__init__"], "typing._VariadicGenericAlias.__getitem_inner__": ["<builtin>.isinstance", "<builtin>.tuple", "typing._type_check", "<builtin>.len", "<builtin>.super", "typing._GenericAlias.copy_with"], "typing._VariadicGenericAlias.__getitem__": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.TypeError", "<builtin>.len", "typing._VariadicGenericAlias.__getitem_inner__"], "typing._eval_type": ["<builtin>.isinstance", "<builtin>.tuple", "typing.ForwardRef._evaluate", "typing._eval_type", "typing._GenericAlias.copy_with"], "typing.ForwardRef._evaluate": ["typing._type_check", "<builtin>.eval"], "typing._Final": [], "typing._Final.__init_subclass__": ["<builtin>.TypeError"], "typing._Immutable": [], "typing._Immutable.__copy__": [], "typing._Immutable.__deepcopy__": [], "typing._SpecialForm": ["typing._tp_cache"], "typing._SpecialForm.__new__": ["<builtin>.TypeError", "<builtin>.len", "<builtin>.isinstance", "<builtin>.super"], "typing._SpecialForm.__init__": [], "typing._SpecialForm.__eq__": ["<builtin>.isinstance"], "typing._SpecialForm.__hash__": ["<builtin>.hash"], "typing._SpecialForm.__repr__": [], "typing._SpecialForm.__reduce__": [], "typing._SpecialForm.__call__": ["<builtin>.TypeError"], "typing._SpecialForm.__instancecheck__": ["<builtin>.TypeError"], "typing._SpecialForm.__subclasscheck__": ["<builtin>.TypeError"], "typing._GenericAlias.__init__": ["<builtin>.tuple", "typing._collect_type_vars", "<builtin>.isinstance"], "typing.ForwardRef": [], "<builtin>.SyntaxError": [], "typing.ForwardRef.__eq__": ["<builtin>.isinstance"], "typing.ForwardRef.__hash__": ["<builtin>.hash"], "typing.ForwardRef.__repr__": [], "typing.TypeVar": [], "typing.TypeVar.__init__": ["sys._getframe", "<builtin>.tuple", "<builtin>.ValueError", "typing._type_check", "<builtin>.TypeError", "<builtin>.len", "<builtin>.bool"], "typing.TypeVar.__repr__": [], "typing.TypeVar.__reduce__": [], "typing._is_dunder": [], "typing._GenericAlias": ["typing._tp_cache"], "typing._GenericAlias.__repr__": ["<builtin>.len", "typing._type_repr"], "typing._GenericAlias.__eq__": ["<builtin>.frozenset", "<builtin>.isinstance"], "typing._GenericAlias.__hash__": ["<builtin>.frozenset", "<builtin>.hash"], "typing._GenericAlias.__call__": ["_collections.defaultdict", "typing._no_init", "typing._SpecialForm.__init__", "_collections.deque", "collections.Counter.__init__", "<builtin>.TypeError", "collections.ChainMap.__init__", "_collections.OrderedDict"], "typing._no_init": ["<builtin>.TypeError", "<builtin>.type"], "typing._GenericAlias.__mro_entries__": ["<builtin>.tuple", "<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.any"], "typing._GenericAlias.__getattr__": ["<builtin>.AttributeError", "<builtin>.getattr", "typing._is_dunder"], "typing._GenericAlias.__setattr__": ["<builtin>.setattr", "<builtin>.super", "typing._is_dunder"], "typing._GenericAlias.__instancecheck__": ["typing._GenericAlias.__subclasscheck__", "<builtin>.type"], "typing._GenericAlias.__subclasscheck__": ["<builtin>.TypeError", "<builtin>.issubclass", "<builtin>.isinstance"], "typing._GenericAlias.__reduce__": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.list", "<builtin>.len", "<builtin>.globals"], "typing._VariadicGenericAlias": ["typing._tp_cache"], "typing.Generic": ["typing._tp_cache"], "typing.Generic.__new__": ["<builtin>.TypeError", "<builtin>.super"], "typing.Generic.__init_subclass__": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.str", "<builtin>.TypeError", "typing._collect_type_vars", "<builtin>.set", "<builtin>.super"], "typing._TypingEmpty": [], "typing._TypingEllipsis": [], "typing._get_protocol_attrs": ["<builtin>.getattr", "<builtin>.set", "<builtin>.list"], "typing._is_callable_members_only": ["<builtin>.callable", "<builtin>.getattr", "<builtin>.all", "typing._get_protocol_attrs"], "typing._allow_reckless_class_cheks": ["sys._getframe"], "typing._ProtocolMeta": [], "typing._ProtocolMeta.__instancecheck__": ["<builtin>.hasattr", "<builtin>.issubclass", "<builtin>.callable", "typing._is_callable_members_only", "<builtin>.getattr", "<builtin>.super", "typing._get_protocol_attrs", "<builtin>.all"], "typing.Protocol": [], "typing.Protocol.__init_subclass__": ["<builtin>.TypeError", "<builtin>.issubclass", "<builtin>.super", "<builtin>.any"], "typing.Protocol.__init_subclass__._proto_hook": ["<builtin>.issubclass", "<builtin>.isinstance", "typing._is_callable_members_only", "typing._allow_reckless_class_cheks", "<builtin>.TypeError", "<builtin>.getattr", "typing._get_protocol_attrs"], "typing.runtime_checkable": ["<builtin>.TypeError", "<builtin>.issubclass"], "typing.cast": [], "typing._get_defaults": ["<builtin>.len", "<builtin>.zip", "<builtin>.dict"], "typing.get_origin": ["<builtin>.isinstance"], "typing.get_args": ["typing.get_origin", "<builtin>.isinstance", "<builtin>.list"], "typing.no_type_check": ["typing.no_type_check", "<builtin>.isinstance"], "typing.no_type_check_decorator": ["functools.wraps", "_functools.partial"], "typing.no_type_check_decorator.wrapped_decorator": ["typing.no_type_check"], "typing._overload_dummy": ["<builtin>.NotImplementedError"], "typing.overload": [], "typing.final": [], "typing._alias": ["typing._GenericAlias.__init__"], "typing.SupportsInt": ["abc.abstractmethod"], "typing.SupportsInt.__int__": [], "typing.SupportsFloat": ["abc.abstractmethod"], "typing.SupportsFloat.__float__": [], "typing.SupportsComplex": ["abc.abstractmethod"], "typing.SupportsComplex.__complex__": [], "typing.SupportsBytes": ["abc.abstractmethod"], "typing.SupportsBytes.__bytes__": [], "typing.SupportsIndex": ["abc.abstractmethod"], "typing.SupportsIndex.__index__": [], "typing.SupportsAbs": ["abc.abstractmethod"], "typing.SupportsAbs.__abs__": [], "typing.SupportsRound": ["abc.abstractmethod"], "typing.SupportsRound.__round__": [], "typing._make_nmtuple": ["sys._getframe", "collections.namedtuple", "<builtin>.dict", "typing._type_check"], "typing.NamedTupleMeta": [], "typing.NamedTupleMeta.__new__": ["<builtin>.dict", "<builtin>.tuple", "<builtin>.TypeError", "<builtin>.AttributeError", "<builtin>.super", "typing._make_nmtuple", "<builtin>.setattr"], "typing.NamedTuple": [], "typing._dict_new": ["<builtin>.dict"], "typing._typeddict_new": ["<builtin>.TypeError", "<builtin>.dict", "sys._getframe"], "typing._check_fails": ["<builtin>.TypeError"], "typing._TypedDictMeta": [], "typing._TypedDictMeta.__new__": ["<builtin>.hasattr", "typing._type_check", "<builtin>.super"], "typing.TypedDict": [], "typing.NewType": [], "typing.NewType.new_type": [], "typing.IO": ["abc.abstractmethod"], "typing.IO.mode": [], "typing.IO.name": [], "typing.IO.close": [], "typing.IO.closed": [], "typing.IO.fileno": [], "typing.IO.flush": [], "typing.IO.isatty": [], "typing.IO.read": [], "typing.IO.readable": [], "typing.IO.readline": [], "typing.IO.readlines": [], "typing.IO.seek": [], "typing.IO.seekable": [], "typing.IO.tell": [], "typing.IO.truncate": [], "typing.IO.writable": [], "typing.IO.write": [], "typing.IO.writelines": [], "typing.IO.__enter__": [], "typing.IO.__exit__": [], "typing.BinaryIO": ["abc.abstractmethod"], "typing.BinaryIO.write": [], "typing.BinaryIO.__enter__": [], "typing.TextIO": ["abc.abstractmethod"], "typing.TextIO.buffer": [], "typing.TextIO.encoding": [], "typing.TextIO.errors": [], "typing.TextIO.line_buffering": [], "typing.TextIO.newlines": [], "typing.TextIO.__enter__": [], "typing.io": [], "typing.re": [], "contextlib.AbstractContextManager": ["abc.abstractmethod"], "contextlib.AbstractContextManager.__enter__": [], "contextlib.AbstractContextManager.__exit__": [], "contextlib.AbstractContextManager.__subclasshook__": ["_collections_abc._check_methods"], "contextlib.AbstractAsyncContextManager": ["abc.abstractmethod"], "contextlib.AbstractAsyncContextManager.__aenter__": [], "contextlib.AbstractAsyncContextManager.__aexit__": [], "contextlib.AbstractAsyncContextManager.__subclasshook__": ["_collections_abc._check_methods"], "contextlib.ContextDecorator": [], "contextlib.ContextDecorator._recreate_cm": [], "contextlib.ContextDecorator.__call__": ["functools.wraps", "_functools.partial"], "contextlib.ContextDecorator.__call__.inner": ["contextlib._GeneratorContextManager._recreate_cm", "contextlib.ContextDecorator._recreate_cm"], "contextlib._GeneratorContextManager._recreate_cm": [], "contextlib._GeneratorContextManagerBase": [], "contextlib._GeneratorContextManagerBase.__init__": ["<builtin>.getattr", "<builtin>.type"], "contextlib._GeneratorContextManager": [], "contextlib._GeneratorContextManager.__enter__": ["<builtin>.next", "<builtin>.RuntimeError"], "contextlib._GeneratorContextManager.__exit__": ["<builtin>.next", "<builtin>.RuntimeError", "sys.exc_info"], "contextlib._AsyncGeneratorContextManager": [], "contextlib._AsyncGeneratorContextManager.__aenter__": ["<builtin>.RuntimeError"], "contextlib._AsyncGeneratorContextManager.__aexit__": ["<builtin>.RuntimeError", "<builtin>.isinstance"], "contextlib.contextmanager": ["functools.wraps", "_functools.partial"], "contextlib.contextmanager.helper": ["contextlib._GeneratorContextManagerBase.__init__"], "contextlib.asynccontextmanager": ["functools.wraps", "_functools.partial"], "contextlib.asynccontextmanager.helper": ["contextlib._GeneratorContextManagerBase.__init__"], "contextlib.closing": [], "contextlib.closing.__init__": [], "contextlib.closing.__enter__": [], "contextlib.closing.__exit__": [], "contextlib._RedirectStream": [], "contextlib._RedirectStream.__init__": [], "contextlib._RedirectStream.__enter__": ["<builtin>.getattr", "<builtin>.setattr"], "contextlib._RedirectStream.__exit__": ["<builtin>.setattr"], "contextlib.redirect_stdout": [], "contextlib.redirect_stderr": [], "contextlib.suppress": [], "contextlib.suppress.__init__": [], "contextlib.suppress.__enter__": [], "contextlib.suppress.__exit__": ["<builtin>.issubclass"], "contextlib._BaseExitStack": [], "contextlib._BaseExitStack._create_exit_wrapper": [], "contextlib._BaseExitStack._create_cb_wrapper": [], "contextlib._BaseExitStack._create_cb_wrapper._exit_wrapper": ["contextlib._BaseExitStack.callback"], "contextlib._BaseExitStack.__init__": [], "contextlib._BaseExitStack.pop_all": ["<builtin>.type"], "contextlib._BaseExitStack.push": ["contextlib._BaseExitStack._push_cm_exit", "<builtin>.type", "contextlib._BaseExitStack._push_exit_callback"], "contextlib._BaseExitStack._push_exit_callback": [], "contextlib._BaseExitStack._push_cm_exit": ["contextlib._BaseExitStack._create_exit_wrapper", "contextlib._BaseExitStack._push_exit_callback"], "contextlib._BaseExitStack.enter_context": ["contextlib._BaseExitStack._push_cm_exit", "<builtin>.type"], "contextlib.ExitStack": [], "contextlib.ExitStack.__enter__": [], "contextlib.ExitStack.__exit__": ["contextlib.ExitStack.__exit__._fix_exception_context", "sys.exc_info"], "contextlib.ExitStack.__exit__._fix_exception_context": [], "contextlib.ExitStack.close": ["contextlib.ExitStack.__exit__"], "contextlib.AsyncExitStack": [], "contextlib.AsyncExitStack._create_async_exit_wrapper": [], "contextlib.AsyncExitStack._create_async_cb_wrapper": [], "contextlib.AsyncExitStack._create_async_cb_wrapper._exit_wrapper": [], "contextlib.AsyncExitStack.enter_async_context": ["<builtin>.type", "contextlib.AsyncExitStack._push_async_cm_exit"], "contextlib.AsyncExitStack._push_async_cm_exit": ["contextlib.AsyncExitStack._create_async_exit_wrapper", "contextlib._BaseExitStack._push_exit_callback"], "contextlib.AsyncExitStack.push_async_exit": ["<builtin>.type", "contextlib.AsyncExitStack._push_async_cm_exit", "contextlib._BaseExitStack._push_exit_callback"], "contextlib.AsyncExitStack.aclose": ["contextlib.AsyncExitStack.__aexit__"], "contextlib.AsyncExitStack.__aexit__": ["contextlib.AsyncExitStack.__aexit__._fix_exception_context", "sys.exc_info"], "contextlib.AsyncExitStack.__aenter__": [], "contextlib.AsyncExitStack.__aexit__._fix_exception_context": [], "contextlib.nullcontext": [], "contextlib.nullcontext.__init__": [], "contextlib.nullcontext.__enter__": [], "contextlib.nullcontext.__exit__": [], "re.RegexFlag": [], "re.RegexFlag.__repr__": ["<builtin>.len", "<builtin>.hex"], "re.match": ["re._compile"], "re._compile": ["<builtin>.isinstance", "sre_compile.isstring", "<builtin>.next", "<builtin>.type", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.len", "<builtin>.iter", "sre_compile.compile"], "re.fullmatch": ["re._compile"], "re.search": ["re._compile"], "re.subn": ["re._compile"], "re.split": ["re._compile"], "re.findall": ["re._compile"], "re.finditer": ["re._compile"], "re.purge": [], "re.template": ["re._compile"], "<builtin>.chr": [], "sre_compile.compile": ["sre_compile.isstring", "<builtin>.tuple", "<builtin>.print", "sre_compile.dis", "_sre.compile", "sre_compile._code", "sre_parse.parse"], "sre_compile.isstring": ["<builtin>.isinstance"], "functools.update_wrapper.wrapper": [], "re._compile_repl": ["sre_parse.parse_template"], "sre_parse.parse_template": ["<builtin>.IndexError", "<builtin>.isinstance", "sre_parse.Tokenizer.error", "<builtin>.int", "sre_parse.Tokenizer.getuntil", "sre_parse.Tokenizer.get", "<builtin>.len", "sre_parse.Tokenizer.match", "sre_parse.Tokenizer.__init__", "<builtin>.chr", "sre_parse.parse_template.addgroup"], "re._expand": ["sre_parse.parse_template", "sre_parse.expand_template"], "sre_parse.expand_template": ["sre_constants.error.__init__"], "re._subx": ["re._compile_repl", "<builtin>.len"], "re._subx.filter": ["sre_parse.expand_template"], "re._pickle": [], "re.Scanner": [], "sre_parse.State.__init__": [], "sre_parse.State.opengroup": ["sre_constants.error.__init__"], "sre_parse.parse": ["sre_parse.SubPattern.dump", "sre_parse.fix_flags", "sre_parse.Tokenizer.error", "sre_parse.State.__init__", "sre_parse._parse_sub", "sre_parse.Tokenizer.__init__", "sre_parse.Tokenizer.seek"], "sre_parse.SubPattern.__init__": [], "sre_parse.SubPattern.append": [], "sre_parse.State.closegroup": ["sre_parse.SubPattern.getwidth"], "re.Scanner.scan": ["<builtin>.callable"], "enum._is_descriptor": ["<builtin>.hasattr"], "enum._is_dunder": ["<builtin>.len"], "enum._is_sunder": ["<builtin>.len"], "enum._make_class_unpicklable": [], "enum._make_class_unpicklable._break_on_call_reduce": ["<builtin>.TypeError"], "enum.auto": [], "enum._EnumDict": [], "enum._EnumDict.__init__": ["<builtin>.super"], "enum._EnumDict.__setitem__": ["<builtin>.isinstance", "enum._is_dunder", "<builtin>.ValueError", "<builtin>.list", "<builtin>.TypeError", "<builtin>.len", "enum._is_descriptor", "enum._is_sunder", "<builtin>.set", "<builtin>.super", "<builtin>.setattr"], "enum.EnumMeta": [], "enum.EnumMeta.__prepare__": ["enum.EnumMeta._get_mixins_", "<builtin>.getattr", "enum._EnumDict.__init__"], "enum.EnumMeta._get_mixins_": ["<builtin>.TypeError", "<builtin>.issubclass", "enum.EnumMeta._get_mixins_._find_data_type"], "enum.EnumMeta.__new__": ["<builtin>.hasattr", "<builtin>.isinstance", "enum.EnumMeta._find_new_", "<builtin>.ValueError", "<builtin>.any", "<builtin>.TypeError", "enum.EnumMeta._get_mixins_", "<builtin>.getattr", "<builtin>.set", "<builtin>.super", "enum._make_class_unpicklable", "<builtin>.setattr"], "enum.EnumMeta._find_new_": ["<builtin>.getattr"], "enum.EnumMeta.__bool__": [], "enum.EnumMeta.__call__": ["enum.EnumMeta.__new__", "enum.EnumMeta._create_"], "enum.EnumMeta._create_": ["<builtin>.isinstance", "sys._getframe", "enum.EnumMeta._get_mixins_", "<builtin>.enumerate", "enum._make_class_unpicklable"], "enum.EnumMeta.__contains__": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "enum.EnumMeta.__delattr__": ["<builtin>.AttributeError", "<builtin>.super"], "enum.EnumMeta.__dir__": [], "enum.EnumMeta.__getattr__": ["enum._is_dunder", "<builtin>.AttributeError"], "enum.EnumMeta.__getitem__": [], "enum.EnumMeta.__iter__": [], "enum.EnumMeta.__len__": ["<builtin>.len"], "enum.EnumMeta.__members__": [], "enum.EnumMeta.__repr__": [], "enum.EnumMeta.__reversed__": ["<builtin>.reversed"], "enum.EnumMeta.__setattr__": ["<builtin>.AttributeError", "<builtin>.super"], "enum.EnumMeta._convert_": ["<builtin>.vars"], "enum.EnumMeta._convert_.<lambda1>": [], "enum.EnumMeta._convert_.<lambda2>": [], "enum.EnumMeta._get_mixins_._find_data_type": ["<builtin>.issubclass"], "enum.Enum": ["types.DynamicClassAttribute"], "enum.Enum.__new__": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "<builtin>.TypeError", "enum.Enum._missing_"], "enum.Enum._missing_": ["<builtin>.ValueError"], "enum.Enum._generate_next_value_": ["<builtin>.reversed"], "enum.Enum.__repr__": [], "enum.Enum.__str__": [], "enum.Enum.__dir__": [], "enum.Enum.__format__": ["<builtin>.str"], "enum.Enum.__hash__": ["<builtin>.hash"], "enum.Enum.__reduce_ex__": [], "enum.Enum.name": [], "enum.Enum.value": [], "enum.IntEnum": [], "enum._reduce_ex_by_name": [], "enum.Flag": [], "enum.Flag._generate_next_value_": ["<builtin>.reversed", "<builtin>.TypeError", "enum._high_bit"], "enum._high_bit": [], "enum.Flag._missing_": ["enum.Flag._create_pseudo_member_"], "enum.Flag._create_pseudo_member_": ["enum._decompose", "<builtin>.ValueError"], "enum._decompose": ["<builtin>.len", "enum._power_of_two", "<builtin>.list"], "enum.Flag.__contains__": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "enum.Flag.__repr__": ["<builtin>.str", "enum._decompose"], "enum.Flag.__str__": ["<builtin>.len", "enum._decompose", "<builtin>.str"], "enum.Flag.__bool__": ["<builtin>.bool"], "enum.Flag.__or__": ["<builtin>.isinstance"], "enum.Flag.__and__": ["<builtin>.isinstance"], "enum.Flag.__xor__": ["<builtin>.isinstance"], "enum.Flag.__invert__": ["enum._decompose"], "enum.IntFlag": [], "enum.IntFlag._missing_": ["<builtin>.ValueError", "enum.IntFlag._create_pseudo_member_", "<builtin>.isinstance"], "enum.IntFlag._create_pseudo_member_": ["<builtin>.reversed", "enum._decompose", "enum._high_bit"], "enum.IntFlag.__or__": ["<builtin>.isinstance"], "enum.IntFlag.__and__": ["<builtin>.isinstance"], "enum.IntFlag.__xor__": ["<builtin>.isinstance"], "enum.IntFlag.__invert__": [], "enum.unique": ["<builtin>.ValueError"], "enum._power_of_two": ["enum._high_bit"], "enum._decompose.<lambda1>": [], "sre_compile._combine_flags": [], "sre_compile._compile": ["_sre.ascii_tolower", "sre_compile._optimize_charset", "_sre.unicode_tolower", "sre_compile._combine_flags", "sre_compile._compile_charset", "_sre.unicode_iscased", "sre_constants.error.__init__", "_sre.ascii_iscased", "sre_compile._compile", "sre_compile._simple"], "_sre.unicode_iscased": [], "_sre.ascii_iscased": [], "_sre.unicode_tolower": [], "_sre.ascii_tolower": [], "sre_compile._optimize_charset": ["_sre.ascii_tolower", "_sre.unicode_tolower", "<builtin>.map", "sre_compile._bytes_to_codes", "<builtin>.any", "<builtin>.bytearray", "<builtin>.range", "<builtin>.len", "_sre.unicode_iscased", "<builtin>.bytes", "_sre.ascii_iscased", "sre_compile._mk_bitmap"], "sre_compile._compile_charset": ["sre_constants.error.__init__"], "sre_constants.error.__init__": ["<builtin>.isinstance", "<builtin>.super"], "sre_compile._simple": ["<builtin>.len", "sre_compile._simple"], "sre_compile._mk_bitmap": ["<builtin>.len", "<builtin>.range"], "<builtin>.bytes": [], "sre_compile._bytes_to_codes": ["<builtin>.memoryview", "<builtin>.len"], "<builtin>.memoryview": [], "sre_compile._generate_overlap_table": ["<builtin>.len", "<builtin>.range"], "sre_compile._get_iscased": [], "sre_compile._get_literal_prefix": ["sre_compile._get_iscased", "sre_compile._combine_flags", "<builtin>.len", "sre_compile._get_literal_prefix", "_sre.unicode_iscased", "_sre.ascii_iscased"], "sre_compile._get_charset_prefix": ["sre_compile._get_iscased", "sre_compile._combine_flags", "<builtin>.map", "<builtin>.any", "<builtin>.range", "_sre.unicode_iscased", "_sre.ascii_iscased"], "sre_compile._compile_info": ["<builtin>.min", "sre_compile._get_charset_prefix", "sre_compile._generate_overlap_table", "sre_compile._optimize_charset", "<builtin>.len", "sre_compile._get_literal_prefix", "sre_compile._compile_charset", "sre_parse.SubPattern.getwidth"], "sre_parse.SubPattern.getwidth": ["<builtin>.min", "<builtin>.max"], "sre_compile._code": ["sre_compile._compile", "sre_compile._compile_info"], "sre_compile._hex_code": [], "sre_compile.dis": ["<builtin>.len", "sre_compile.dis.dis_", "<builtin>.set", "<builtin>.str"], "sre_compile.dis.dis_": ["sre_compile.dis.dis_", "sre_compile.dis.dis_.print_", "<builtin>.str", "sre_compile.dis.dis_.print_2", "<builtin>.map", "sre_compile._hex_code", "<builtin>.ValueError", "<builtin>.list", "<builtin>.range", "<builtin>.chr", "<builtin>.bin"], "sre_compile.dis.dis_.print_": ["<builtin>.print"], "sre_compile.dis.dis_.print_2": ["<builtin>.print"], "<builtin>.bin": [], "_sre.compile": [], "sre_constants.error": [], "sre_constants._NamedIntConstant": [], "sre_constants._NamedIntConstant.__new__": ["<builtin>.super"], "sre_constants._NamedIntConstant.__repr__": [], "sre_constants._makecodes": ["<builtin>.globals", "<builtin>.enumerate"], "sre_constants.dump": ["<builtin>.sorted"], "<builtin>.ord": [], "sre_parse.Verbose": [], "sre_parse.State": [], "sre_parse.State.groups": ["<builtin>.len"], "sre_parse.State.checkgroup": [], "sre_parse.State.checklookbehindgroup": ["sre_parse.State.checkgroup", "sre_parse.Tokenizer.error"], "sre_parse.Tokenizer.error": ["sre_parse.Tokenizer.tell", "sre_parse.Tokenizer.error"], "sre_parse.SubPattern": [], "sre_parse.SubPattern.dump": ["<builtin>.str", "<builtin>.print", "<builtin>.enumerate", "<builtin>.isinstance"], "sre_parse.SubPattern.__repr__": ["<builtin>.repr"], "sre_parse.SubPattern.__len__": ["<builtin>.len"], "sre_parse.SubPattern.__delitem__": [], "sre_parse.SubPattern.__getitem__": ["sre_parse.SubPattern.__init__", "<builtin>.isinstance"], "sre_parse.SubPattern.__setitem__": [], "sre_parse.SubPattern.insert": [], "sre_parse.Tokenizer": [], "sre_parse.Tokenizer.__init__": ["<builtin>.str", "sre_parse.Tokenizer.__next", "<builtin>.isinstance"], "sre_parse.Tokenizer.__next": ["<builtin>.len", "sre_parse.Tokenizer.error"], "sre_parse.Tokenizer.match": ["sre_parse.Tokenizer.__next"], "sre_parse.Tokenizer.get": ["sre_parse.Tokenizer.__next"], "sre_parse.Tokenizer.getwhile": ["sre_parse.Tokenizer.__next", "<builtin>.range"], "sre_parse.Tokenizer.getuntil": ["<builtin>.len", "sre_parse.Tokenizer.__next", "sre_parse.Tokenizer.error"], "sre_parse.Tokenizer.pos": ["<builtin>.len"], "sre_parse.Tokenizer.tell": ["<builtin>.len"], "sre_parse.Tokenizer.seek": ["sre_parse.Tokenizer.__next"], "sre_parse._uniq": ["<builtin>.list"], "sre_parse._parse_sub": ["sre_parse.Tokenizer.tell", "<builtin>.len", "sre_parse.Tokenizer.match", "sre_parse.SubPattern.__init__", "sre_parse.SubPattern.append", "sre_parse._parse"], "<builtin>.OverflowError": [], "<builtin>.AssertionError": [], "sre_parse._parse_flags": ["<builtin>.len", "sre_parse.Tokenizer.get", "sre_parse.Tokenizer.error"], "sre_parse.fix_flags": ["<builtin>.ValueError", "<builtin>.isinstance"], "sre_parse.parse_template.addgroup": ["<builtin>.len", "sre_parse.Tokenizer.error"], "<builtin>.IndexError": [], "operator.lt": [], "operator.le": [], "operator.eq": [], "operator.ne": [], "operator.ge": [], "operator.gt": [], "operator.not_": [], "operator.truth": [], "operator.is_": [], "operator.is_not": [], "operator.abs": ["builtins.abs"], "builtins.abs": [], "operator.add": [], "operator.and_": [], "operator.floordiv": [], "operator.index": [], "operator.inv": [], "operator.lshift": [], "operator.mod": [], "operator.mul": [], "operator.matmul": [], "operator.neg": [], "operator.or_": [], "operator.pos": [], "operator.pow": [], "operator.rshift": [], "operator.sub": [], "operator.truediv": [], "operator.xor": [], "operator.concat": ["<builtin>.hasattr", "<builtin>.TypeError", "<builtin>.type"], "operator.contains": [], "operator.countOf": [], "operator.delitem": [], "operator.getitem": [], "operator.indexOf": ["<builtin>.enumerate"], "operator.setitem": [], "operator.length_hint": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.len"], "operator.attrgetter": [], "operator.attrgetter.__init__": ["<builtin>.TypeError", "<builtin>.tuple", "<builtin>.map", "<builtin>.isinstance"], "operator.attrgetter.__init__.func": ["<builtin>.tuple", "<builtin>.getattr"], "operator.attrgetter.__call__": ["operator.attrgetter.__init__.func"], "operator.attrgetter.__repr__": ["<builtin>.map"], "operator.attrgetter.__reduce__": [], "operator.itemgetter": [], "operator.itemgetter.__init__.func": ["<builtin>.tuple"], "operator.itemgetter.__call__": ["operator.itemgetter.__init__.func"], "operator.itemgetter.__repr__": ["<builtin>.map"], "operator.itemgetter.__reduce__": [], "operator.methodcaller": [], "operator.methodcaller.__init__": ["<builtin>.TypeError", "<builtin>.isinstance"], "operator.methodcaller.__call__": ["<builtin>.getattr"], "operator.methodcaller.__repr__": ["<builtin>.map", "<builtin>.repr"], "operator.iadd": [], "operator.iand": [], "operator.iconcat": ["<builtin>.hasattr", "<builtin>.TypeError", "<builtin>.type"], "operator.ifloordiv": [], "operator.ilshift": [], "operator.imod": [], "operator.imul": [], "operator.imatmul": [], "operator.ior": [], "operator.ipow": [], "operator.irshift": [], "operator.isub": [], "operator.itruediv": [], "operator.ixor": [], "os._exists": ["<builtin>.globals"], "os._get_exports_list": ["<builtin>.dir", "<builtin>.list"], "<builtin>.dir": [], "<builtin>.ImportError": [], "os._add": [], "ntpath.split": ["<builtin>.len", "ntpath.splitdrive", "ntpath._get_bothseps"], "posixpath.split": ["posixpath._get_sep", "win32evtlogutil.__file__.rfind", "sys.base_prefix.rfind", "<builtin>.len", "sys.path.rfind"], "ntpath.exists": [], "posixpath.exists": [], "os.removedirs": ["ntpath.split", "posixpath.split"], "os.renames": ["ntpath.split", "posixpath.split", "ntpath.exists", "posixpath.exists", "os.makedirs", "os.removedirs"], "os.walk": ["posixpath.join", "ntpath.join", "ntpath.islink", "os.walk", "<builtin>.next", "posixpath.islink", "os._fspath"], "os._fspath": ["<builtin>.hasattr", "<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "posixpath.islink": ["stat.S_ISLNK"], "ntpath.islink": ["stat.S_ISLNK"], "os.fwalk": ["<builtin>.hasattr", "ntpath.samestat", "<builtin>.isinstance", "os._fwalk", "posixpath.samestat", "stat.S_ISDIR", "<builtin>.open", "os._fspath"], "stat.S_ISDIR": ["stat.S_IFMT"], "posixpath.samestat": [], "ntpath.samestat": [], "os._fwalk": ["posixpath.join", "ntpath.samestat", "<builtin>.zip", "ntpath.join", "os._fwalk", "posixpath.samestat", "<builtin>.open"], "os.execl": [], "os.execle": [], "os.execlp": ["os.execvp"], "os.execvp": ["os._execvpe"], "os.execlpe": ["os.execvpe"], "os.execvpe": ["os._execvpe"], "os._execvpe": ["ntpath.dirname", "posixpath.join", "ntpath.join", "<builtin>.map", "posixpath.dirname", "os.get_exec_path"], "os._Environ": [], "os._Environ.__init__": [], "os._Environ.__getitem__": ["os._createenviron.decode", "os._check_bytes", "os._createenviron.check_str", "<builtin>.KeyError"], "os._check_bytes": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "os._createenviron.check_str": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "os._createenviron.decode": [], "os._Environ.__setitem__": ["os.<lambda1>", "os._check_bytes", "os._createenviron.check_str"], "os.<lambda1>": [], "os._Environ.__delitem__": ["os.<lambda2>", "os._check_bytes", "os._createenviron.check_str", "<builtin>.KeyError"], "os.<lambda2>": ["os.<lambda1>"], "os._Environ.__iter__": ["os._createenviron.decode", "<builtin>.list"], "os._Environ.__len__": ["<builtin>.len"], "os._Environ.__repr__": ["os._createenviron.decode"], "os._Environ.copy": ["<builtin>.dict"], "os._Environ.setdefault": [], "os._createenviron": ["sys.getfilesystemencoding", "os._Environ.__init__", "os._createenviron.check_str"], "os._createenviron.encodekey": ["os._createenviron.check_str"], "sys.getfilesystemencoding": [], "os._createenviron.encode": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "os.getenv": [], "os.getenvb": [], "os._fscodec": ["sys.getfilesystemencodeerrors", "sys.getfilesystemencoding"], "sys.getfilesystemencodeerrors": [], "os._fscodec.fsencode": ["<builtin>.isinstance", "os._fspath"], "os._fscodec.fsdecode": ["<builtin>.isinstance", "os._fspath"], "os._spawnvef": ["posix._exit", "<builtin>.isinstance", "<builtin>.ValueError", "os.execvp", "<builtin>.TypeError", "os.execvpe", "nt._exit", "<builtin>.OSError"], "nt._exit": [], "posix._exit": [], "<builtin>.OSError": [], "os.spawnv": ["os._spawnvef"], "os.spawnve": ["os._spawnvef"], "os.spawnvp": ["os._spawnvef"], "os.spawnvpe": ["os._spawnvef"], "os.spawnl": ["os.spawnv"], "os.spawnle": ["os.spawnve"], "os.spawnlp": ["os.spawnvp"], "os.spawnlpe": ["os.spawnvpe"], "subprocess.Popen.__init__": ["<builtin>.hasattr", "io.TextIOWrapper", "<builtin>.isinstance", "subprocess.Popen._execute_child", "warnings.warn", "<builtin>.ValueError", "subprocess._cleanup", "subprocess.Popen._get_handles", "<builtin>.TypeError", "<builtin>.bool", "<builtin>.filter", "io.open", "msvcrt.open_osfhandle"], "io.TextIOWrapper": [], "os._wrap_close.__init__": [], "os._wrap_close": [], "os._wrap_close.close": ["subprocess.Popen.wait"], "subprocess.Popen.wait": ["subprocess.Popen._remaining_time", "<builtin>.min", "subprocess.Popen._wait", "time.monotonic"], "os._wrap_close.__enter__": [], "os._wrap_close.__exit__": ["os._wrap_close.close"], "os._wrap_close.__getattr__": ["<builtin>.getattr"], "os._wrap_close.__iter__": ["<builtin>.iter"], "io.open": [], "os.PathLike": ["abc.abstractmethod"], "os.PathLike.__fspath__": [], "os.PathLike.__subclasshook__": ["_collections_abc._check_methods"], "os._AddedDllDirectory": [], "os._AddedDllDirectory.__init__": [], "os._AddedDllDirectory.close": ["nt._remove_dll_directory"], "nt._remove_dll_directory": [], "os._AddedDllDirectory.__enter__": [], "os._AddedDllDirectory.__exit__": ["os._AddedDllDirectory.close"], "os._AddedDllDirectory.__repr__": [], "os.add_dll_directory": ["nt._add_dll_directory", "os._AddedDllDirectory.__init__"], "nt._add_dll_directory": [], "io.IOBase": [], "io.RawIOBase": [], "io.BufferedIOBase": [], "io.TextIOBase": [], "_io._RawIOBase.register": [], "_io._IOBase.register": [], "subprocess.SubprocessError": [], "subprocess.CalledProcessError": [], "subprocess.CalledProcessError.__init__": [], "subprocess.CalledProcessError.__str__": [], "subprocess.CalledProcessError.stdout": [], "subprocess.TimeoutExpired": [], "subprocess.TimeoutExpired.__init__": [], "subprocess.TimeoutExpired.__str__": [], "subprocess.TimeoutExpired.stdout": [], "subprocess.STARTUPINFO": [], "subprocess.STARTUPINFO.__init__": [], "subprocess.STARTUPINFO.copy": ["subprocess.STARTUPINFO.__init__", "<builtin>.list"], "subprocess.Handle": [], "subprocess.Handle.Close": [], "subprocess.Handle.Detach": ["<builtin>.int", "<builtin>.ValueError"], "subprocess.Handle.__repr__": ["<builtin>.int"], "subprocess._cleanup": [], "subprocess._optim_args_from_interpreter_flags": [], "subprocess._args_from_interpreter_flags": ["subprocess._optim_args_from_interpreter_flags", "<builtin>.getattr"], "subprocess.call": ["subprocess.Popen.__init__"], "subprocess.check_call": ["subprocess.CalledProcessError.__init__", "subprocess.call"], "subprocess.CompletedProcess": [], "subprocess.CompletedProcess.__init__": [], "subprocess.CompletedProcess.__repr__": ["<builtin>.type"], "subprocess.CompletedProcess.check_returncode": ["subprocess.CalledProcessError.__init__"], "subprocess.list2cmdline": ["<builtin>.len", "<builtin>.map"], "subprocess.getstatusoutput": ["subprocess.check_output"], "subprocess.getoutput": ["subprocess.getstatusoutput"], "subprocess._use_posix_spawn": ["<builtin>.hasattr", "<builtin>.len", "<builtin>.map", "<builtin>.tuple"], "subprocess.Popen": [], "subprocess.Popen._get_handles": ["_winapi.CreatePipe", "subprocess.Popen._get_devnull", "<builtin>.isinstance", "sys.__stdout__.fileno", "msvcrt.get_osfhandle", "_winapi.GetStdHandle", "_winapi.CloseHandle", "subprocess.Popen._make_inheritable"], "msvcrt.open_osfhandle": [], "subprocess.Popen._execute_child": ["<builtin>.hasattr", "_winapi.CreateProcess", "<builtin>.tuple", "warnings.warn", "<builtin>.TypeError", "<builtin>.len", "_winapi.CloseHandle", "os.get_exec_path", "<builtin>.bytes", "<builtin>.getattr", "subprocess.STARTUPINFO.copy", "posixpath.join", "subprocess.Popen._filter_handle_list", "subprocess.list2cmdline", "ntpath.join", "sys.audit", "<builtin>.set", "subprocess.Popen._handle_exitstatus", "<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.int", "subprocess.Popen._posix_spawn", "<builtin>.bytearray", "<builtin>.sorted", "subprocess.STARTUPINFO.__init__", "ntpath.dirname", "subprocess.Popen._close_pipe_fds", "<builtin>.map", "<builtin>.ValueError", "<builtin>.list", "posixpath.dirname", "<builtin>.bool"], "<builtin>.filter": [], "subprocess.Popen.universal_newlines": ["<builtin>.bool"], "subprocess.Popen._translate_newlines": [], "subprocess.Popen.__enter__": [], "subprocess.Popen.__exit__": ["_compression.DecompressReader.close", "asyncio.windows_utils.PipeHandle.close", "bz2.BZ2File.close", "zipfile._ZipWriteFile.close", "_io._IOBase.close", "socket.SocketIO.close", "subprocess.Popen.wait", "zipfile.ZipExtFile.close", "subprocess.Popen._wait", "sys.stdout.close", "http.client.HTTPResponse.close", "lzma.LZMAFile.close", "gzip.GzipFile.close"], "_compression.DecompressReader.close": ["<builtin>.super"], "asyncio.windows_utils.PipeHandle.close": [], "bz2.BZ2File.close": ["sys.base_prefix.write", "tarfile.TarFile.close", "logging.FileHandler.close", "sys.path.write", "sys.path.close", "sys.base_prefix.close"], "_io._IOBase.close": [], "zipfile._ZipWriteFile.close": ["zipfile.ZipInfo.FileHeader", "sys.path.FileHeader", "<builtin>.RuntimeError", "zipfile.LZMACompressor.flush", "<builtin>.len", "sys.base_prefix.FileHeader", "<builtin>.super"], "socket.SocketIO.close": ["_compression.DecompressReader.close", "_io._IOBase.close", "socket.SocketIO.close", "socket.socket._decref_socketios", "_io._RawIOBase.close"], "zipfile.ZipExtFile.close": ["zipfile._SharedFile.close", "<builtin>.super"], "sys.stdout.close": [], "http.client.HTTPResponse.close": ["http.client.HTTPResponse._close_conn", "<builtin>.super"], "lzma.LZMAFile.close": ["sys.base_prefix.write", "tarfile.TarFile.close", "logging.FileHandler.close", "sys.path.write", "sys.path.close", "sys.base_prefix.close"], "gzip.GzipFile.close": ["gzip.GzipFile.write", "sys.base_prefix.write", "gzip.write32u", "sys.stdout.buffer.write", "sys.stdin.buffer.write", "sys.path.write"], "subprocess.Popen._wait": ["subprocess.Popen._try_wait", "time.monotonic", "<builtin>.min", "<builtin>.int", "_winapi.GetExitCodeProcess", "subprocess.Popen._handle_exitstatus", "subprocess.Popen._remaining_time", "_winapi.WaitForSingleObject", "time.sleep", "subprocess.TimeoutExpired.__init__"], "subprocess.Popen.__del__": ["subprocess.Popen._internal_poll"], "subprocess.Popen._internal_poll": ["subprocess.Popen._handle_exitstatus"], "subprocess.Popen._get_devnull": ["<builtin>.hasattr"], "subprocess.Popen._stdin_write": ["_compression.DecompressReader.close", "gzip.GzipFile.write", "zipfile._ZipWriteFile.write", "asyncio.windows_utils.PipeHandle.close", "xml.etree.ElementTree._ListDataStream.write", "bz2.BZ2File.close", "_io._IOBase.close", "zipfile._ZipWriteFile.close", "bz2.BZ2File.write", "socket.SocketIO.close", "zipfile.ZipExtFile.close", "gzip.GzipFile.close", "sys.stdout.close", "http.client.HTTPResponse.close", "lzma.LZMAFile.write", "lzma.LZMAFile.close", "sys.stdout.write"], "gzip.GzipFile.write": ["<builtin>.memoryview", "_compression.BaseStream._check_not_closed", "gzip.GzipFile.write", "<builtin>.isinstance", "sys.base_prefix.write", "<builtin>.ValueError", "<builtin>.len", "sys.stdout.buffer.write", "sys.stdin.buffer.write", "sys.path.write", "<builtin>.OSError"], "zipfile._ZipWriteFile.write": ["<builtin>.len", "<builtin>.ValueError", "zipfile.LZMACompressor.compress"], "xml.etree.ElementTree._ListDataStream.write": [], "bz2.BZ2File.write": ["sys.base_prefix.write", "sys.path.write", "_compression.BaseStream._check_can_write", "<builtin>.len"], "lzma.LZMAFile.write": ["sys.base_prefix.write", "sys.path.write", "_compression.BaseStream._check_can_write", "<builtin>.len"], "sys.stdout.write": [], "subprocess.Popen.communicate": ["asyncio.windows_utils.PipeHandle.close", "_io._IOBase.close", "socket.SocketIO.close", "http.client.HTTPResponse.read", "bz2.BZ2File.read", "http.client.HTTPResponse.close", "gzip.GzipFile.close", "time.monotonic", "subprocess.Popen.wait", "subprocess.Popen._wait", "lzma.LZMAFile.read", "subprocess.Popen._communicate", "sys.stdout.close", "_compression.DecompressReader.read", "zipfile.ZipExtFile.read", "sys.stdout.read", "gzip._GzipReader.read", "gzip.GzipFile.read", "_io._IOBase.read", "_compression.DecompressReader.close", "<builtin>.min", "bz2.BZ2File.close", "zipfile._ZipWriteFile.close", "subprocess.Popen._stdin_write", "zipfile.ZipExtFile.close", "<builtin>.ValueError", "subprocess.Popen._remaining_time", "lzma.LZMAFile.close"], "_io._IOBase.read": [], "_compression.DecompressReader.read": ["<builtin>.len", "sys.path.read", "_io._RawIOBase.readall", "<builtin>.EOFError", "sys.base_prefix.read"], "zipfile.ZipExtFile.read": ["zipfile.ZipExtFile._read1", "<builtin>.len"], "http.client.HTTPResponse.read": ["<builtin>.memoryview", "http.client.HTTPResponse._close_conn", "<builtin>.bytearray", "http.client.HTTPResponse._readall_chunked", "http.client.HTTPResponse._safe_read", "http.client.HTTPResponse.readinto"], "lzma.LZMAFile.read": ["_compression.BaseStream._check_can_read"], "bz2.BZ2File.read": ["_compression.BaseStream._check_can_read"], "sys.stdout.read": [], "gzip._GzipReader.read": ["sys.path.prepend", "gzip._GzipReader._read_gzip_header", "sys.base_prefix.prepend", "<builtin>.len", "sys.path.read", "gzip._GzipReader._add_read_data", "gzip._GzipReader._read_eof", "gzip._GzipReader._init_read", "_io._RawIOBase.readall", "<builtin>.EOFError", "sys.base_prefix.read"], "gzip.GzipFile.read": ["_compression.BaseStream._check_not_closed", "<builtin>.OSError"], "subprocess.Popen._communicate": ["<builtin>.hasattr", "threading.Thread.join", "asyncio.windows_utils.PipeHandle.close", "_io._IOBase.close", "selectors.SelectSelector.__init__", "socket.SocketIO.close", "<builtin>.len", "selectors._PollLikeSelector.__init__", "subprocess.Popen._translate_newlines", "threading.Thread.start", "http.client.HTTPResponse.close", "gzip.GzipFile.close", "http.client.HTTPResponse.flush", "subprocess.Popen.wait", "sys.stdout.close", "<builtin>.memoryview", "<builtin>.RuntimeError", "gzip.GzipFile.flush", "sys.stdout.flush", "threading.Thread.__init__", "_compression.DecompressReader.close", "bz2.BZ2File.close", "zipfile._ZipWriteFile.close", "subprocess.Popen._save_input", "threading._DummyThread.join", "subprocess.Popen._stdin_write", "zipfile.ZipExtFile.close", "_io._BufferedIOBase.flush", "threading.Thread.is_alive", "subprocess.Popen._check_timeout", "subprocess.Popen._remaining_time", "_io._IOBase.flush", "subprocess.TimeoutExpired.__init__", "lzma.LZMAFile.close", "threading._DummyThread.is_alive"], "subprocess.Popen._remaining_time": ["time.monotonic"], "subprocess.Popen.poll": ["subprocess.Popen._internal_poll"], "subprocess.Popen._check_timeout": ["subprocess.TimeoutExpired.__init__", "time.monotonic"], "subprocess.Popen._close_pipe_fds": ["contextlib._BaseExitStack.__init__", "<builtin>.getattr"], "_winapi.GetStdHandle": [], "_winapi.CreatePipe": [], "_winapi.CloseHandle": [], "msvcrt.get_osfhandle": [], "subprocess.Popen._make_inheritable": ["_winapi.DuplicateHandle", "_winapi.GetCurrentProcess"], "_winapi.GetCurrentProcess": [], "_winapi.DuplicateHandle": [], "subprocess.Popen._filter_handle_list": ["_winapi.GetFileType", "<builtin>.list"], "_winapi.GetFileType": [], "sys.audit": [], "_winapi.CreateProcess": [], "_winapi.WaitForSingleObject": [], "_winapi.GetExitCodeProcess": [], "subprocess.Popen.send_signal": ["subprocess.Popen.terminate", "<builtin>.ValueError"], "subprocess.Popen.terminate": ["_winapi.GetExitCodeProcess", "_winapi.TerminateProcess", "subprocess.Popen.send_signal"], "_winapi.TerminateProcess": [], "sys.__stdout__.fileno": [], "subprocess.Popen._posix_spawn": ["<builtin>.getattr", "subprocess.Popen._close_pipe_fds"], "subprocess.Popen._handle_exitstatus": [], "subprocess.Popen._try_wait": [], "http.client.HTTPResponse.flush": ["<builtin>.super"], "_io._BufferedIOBase.flush": [], "gzip.GzipFile.flush": ["_compression.BaseStream._check_not_closed", "gzip.GzipFile.write", "sys.stdout.buffer.flush", "sys.path.flush", "sys.stdin.buffer.flush", "sys.base_prefix.write", "logging.StreamHandler.flush", "sys.stdout.buffer.write", "sys.stdin.buffer.write", "gzip.GzipFile.flush", "sys.path.write", "sys.base_prefix.flush"], "sys.stdout.flush": [], "_io._IOBase.flush": [], "subprocess.Popen._save_input": [], "selectors.SelectSelector.__init__": ["<builtin>.set", "<builtin>.super"], "selectors._PollLikeSelector.__init__": ["<builtin>.super"], "subprocess.Popen.kill": ["subprocess.Popen.send_signal"], "signal.<lambda1>": [], "signal.<lambda2>": [], "signal.<lambda3>": [], "signal._int_to_enum": [], "signal._enum_to_int": ["<builtin>.int"], "signal.signal": ["signal._int_to_enum", "_signal.signal", "signal._enum_to_int"], "_signal.signal": [], "signal.getsignal": ["signal._int_to_enum", "_signal.getsignal"], "_signal.getsignal": [], "signal.pthread_sigmask": ["_signal.pthread_sigmask", "signal._int_to_enum", "<builtin>.set"], "_signal.pthread_sigmask": [], "signal.sigpending": ["signal._int_to_enum", "_signal.sigpending"], "_signal.sigpending": [], "signal.sigwait": ["signal._int_to_enum", "_signal.sigwait"], "_signal.sigwait": [], "signal.valid_signals": ["signal._int_to_enum", "_signal.valid_signals"], "_signal.valid_signals": [], "selectors._fileobj_to_fd": ["<builtin>.int", "<builtin>.ValueError", "<builtin>.isinstance"], "selectors._SelectorMapping": [], "selectors._SelectorMapping.__init__": [], "selectors._SelectorMapping.__len__": ["<builtin>.len"], "selectors._SelectorMapping.__getitem__": ["selectors._BaseSelectorImpl._fileobj_lookup", "<builtin>.KeyError"], "selectors._BaseSelectorImpl._fileobj_lookup": ["selectors._fileobj_to_fd"], "selectors._SelectorMapping.__iter__": ["<builtin>.iter"], "selectors.BaseSelector": ["abc.abstractmethod"], "selectors.BaseSelector.register": [], "selectors.BaseSelector.unregister": [], "selectors.BaseSelector.modify": ["selectors.SelectSelector.unregister", "selectors.BaseSelector.register", "selectors.SelectSelector.register", "selectors.BaseSelector.unregister"], "selectors.SelectSelector.unregister": ["<builtin>.super"], "selectors.SelectSelector.register": ["<builtin>.super"], "selectors.BaseSelector.select": [], "selectors.BaseSelector.close": [], "selectors.BaseSelector.get_key": ["<builtin>.RuntimeError", "<builtin>.KeyError", "selectors.BaseSelector.get_map"], "selectors.BaseSelector.get_map": [], "selectors.BaseSelector.__enter__": [], "selectors.BaseSelector.__exit__": ["selectors.BaseSelector.close"], "selectors._BaseSelectorImpl": [], "selectors._BaseSelectorImpl.__init__": ["selectors._SelectorMapping.__init__"], "selectors._BaseSelectorImpl.register": ["selectors._BaseSelectorImpl._fileobj_lookup", "<builtin>.ValueError", "<builtin>.KeyError"], "selectors._BaseSelectorImpl.unregister": ["selectors._BaseSelectorImpl._fileobj_lookup", "<builtin>.KeyError"], "selectors._BaseSelectorImpl.modify": ["selectors._BaseSelectorImpl.unregister", "selectors.SelectSelector.register", "selectors.SelectSelector.unregister", "selectors._BaseSelectorImpl._fileobj_lookup", "<builtin>.KeyError", "selectors._BaseSelectorImpl.register"], "selectors._BaseSelectorImpl.close": [], "selectors._BaseSelectorImpl.get_map": [], "selectors._BaseSelectorImpl._key_from_fd": [], "selectors.SelectSelector": [], "selectors.SelectSelector._select": [], "selectors.SelectSelector.select": ["selectors._BaseSelectorImpl._key_from_fd", "selectors.SelectSelector._select", "<builtin>.set", "<builtin>.max"], "selectors._PollLikeSelector": [], "selectors._PollLikeSelector.register": ["<builtin>.super"], "selectors._PollLikeSelector.unregister": ["<builtin>.super"], "selectors._PollLikeSelector.modify": ["selectors._BaseSelectorImpl._fileobj_lookup", "<builtin>.super", "<builtin>.KeyError"], "selectors._PollLikeSelector.select": ["selectors._BaseSelectorImpl._key_from_fd"], "selectors.PollSelector": [], "selectors.EpollSelector": [], "selectors.EpollSelector.fileno": [], "selectors.EpollSelector.select": ["selectors._BaseSelectorImpl._key_from_fd", "<builtin>.len", "<builtin>.max"], "selectors.EpollSelector.close": ["<builtin>.super"], "selectors.DevpollSelector": [], "selectors.DevpollSelector.fileno": [], "selectors.DevpollSelector.close": ["<builtin>.super"], "selectors.KqueueSelector": [], "selectors.KqueueSelector.__init__": ["<builtin>.super"], "selectors.KqueueSelector.fileno": [], "selectors.KqueueSelector.register": ["<builtin>.super"], "selectors.KqueueSelector.unregister": ["<builtin>.super"], "selectors.KqueueSelector.select": ["selectors._BaseSelectorImpl._key_from_fd", "<builtin>.len", "<builtin>.max"], "selectors.KqueueSelector.close": ["<builtin>.super"], "os.path._get_sep": ["<builtin>.isinstance"], "os.path.normcase": [], "os.path.isabs": ["os.path._get_sep"], "os.path.join": ["<builtin>.map", "genericpath._check_arg_types", "os.path._get_sep"], "genericpath._check_arg_types": ["<builtin>.TypeError", "<builtin>.isinstance"], "os.path.split": ["<builtin>.len", "os.path._get_sep"], "os.path.splitext": ["genericpath._splitext", "<builtin>.isinstance"], "genericpath._splitext": ["sys.base_prefix.rfind", "sys.path.rfind", "<builtin>.max"], "os.path.splitdrive": [], "os.path.basename": ["os.path._get_sep"], "os.path.dirname": ["<builtin>.len", "os.path._get_sep"], "os.path.islink": ["stat.S_ISLNK"], "stat.S_ISLNK": ["stat.S_IFMT"], "os.path.lexists": [], "os.path.ismount": ["os.path.join", "stat.S_ISLNK", "<builtin>.isinstance", "os.path.realpath"], "os.path.realpath": ["os.path.abspath", "os.path._joinrealpath"], "os.path.expanduser": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.len", "os.path._get_sep", "pwd.getpwuid", "pwd.getpwnam"], "pwd.getpwnam": [], "os.path.normpath": ["<builtin>.isinstance", "ntpath.split", "posixpath.split"], "os.path.abspath": ["os.path.join", "<builtin>.isinstance", "os.path.isabs", "os.path.normpath"], "os.path._joinrealpath": ["os.path.split", "<builtin>.isinstance", "os.path._joinrealpath", "os.path.isabs", "os.path.islink", "os.path.join"], "os.path.relpath": ["os.path.abspath", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.len", "genericpath.commonprefix", "genericpath._check_arg_types", "os.path.join"], "genericpath.commonprefix": ["<builtin>.min", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.map", "<builtin>.enumerate", "<builtin>.max"], "os.path.commonpath": ["<builtin>.isinstance", "ntpath.split", "posixpath.split", "<builtin>.tuple", "<builtin>.min", "<builtin>.map", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.set", "<builtin>.max", "genericpath._check_arg_types"], "genericpath.exists": [], "genericpath.isfile": ["stat.S_ISREG"], "stat.S_ISREG": ["stat.S_IFMT"], "genericpath.isdir": ["stat.S_ISDIR"], "genericpath.getsize": [], "genericpath.getmtime": [], "genericpath.getatime": [], "genericpath.getctime": [], "genericpath.samestat": [], "genericpath.samefile": ["genericpath.samestat"], "genericpath.sameopenfile": ["genericpath.samestat"], "sys.base_prefix.rfind": [], "sys.path.rfind": [], "stat.S_IMODE": [], "stat.S_IFMT": [], "stat.S_ISCHR": ["stat.S_IFMT"], "stat.S_ISBLK": ["stat.S_IFMT"], "stat.S_ISFIFO": ["stat.S_IFMT"], "stat.S_ISSOCK": ["stat.S_IFMT"], "stat.S_ISDOOR": [], "stat.S_ISPORT": [], "stat.S_ISWHT": [], "stat.filemode": [], "posixpath._get_sep": ["<builtin>.isinstance"], "posixpath.normcase": [], "sys.base_prefix.startswith": [], "sys.path.startswith": [], "sys.path.endswith": [], "sys.base_prefix.endswith": [], "win32evtlogutil.__file__.rfind": [], "posixpath.splitext": ["genericpath._splitext", "<builtin>.isinstance"], "posixpath.splitdrive": [], "posixpath.basename": ["sys.base_prefix.rfind", "sys.path.rfind", "sys.stdin.buffer.rfind", "posixpath._get_sep"], "sys.stdin.buffer.rfind": [], "posixpath.lexists": [], "posixpath.ismount": ["stat.S_ISLNK", "posixpath.join", "<builtin>.isinstance", "posixpath.realpath"], "posixpath.normpath": ["sys.path.split", "<builtin>.isinstance", "sys.base_prefix.startswith", "sys.base_prefix.split", "sys.path.startswith"], "sys.base_prefix.split": [], "sys.path.split": [], "posixpath.abspath": ["posixpath.isabs", "posixpath.normpath", "posixpath.join", "<builtin>.isinstance"], "posixpath._joinrealpath": ["posixpath._joinrealpath", "posixpath.join", "<builtin>.isinstance", "posixpath.split", "posixpath.islink", "sys.path.partition", "sys.base_prefix.partition", "posixpath.isabs"], "sys.path.partition": [], "sys.base_prefix.partition": [], "posixpath.relpath": ["posixpath.abspath", "posixpath.join", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.len", "genericpath.commonprefix", "genericpath._check_arg_types"], "posixpath.commonpath": ["<builtin>.isinstance", "<builtin>.min", "<builtin>.tuple", "<builtin>.map", "<builtin>.ValueError", "<builtin>.enumerate", "<builtin>.set", "<builtin>.max", "genericpath._check_arg_types"], "ntpath._get_bothseps": ["<builtin>.isinstance"], "ntpath.normcase": ["sys.base_prefix.replace", "<builtin>.isinstance", "sys.path.replace"], "sys.base_prefix.replace": [], "sys.path.replace": [], "ntpath.splitdrive": ["<builtin>.isinstance", "sys.stdin.buffer.replace", "win32evtlogutil.__file__.replace", "sys.path.replace", "<builtin>.len", "sys.base_prefix.replace"], "win32evtlogutil.__file__.replace": [], "sys.stdin.buffer.replace": [], "ntpath.splitext": ["genericpath._splitext", "<builtin>.isinstance"], "ntpath.basename": ["ntpath.split"], "ntpath.lexists": [], "ntpath.ismount": ["nt._getvolumepathname", "ntpath._abspath_fallback", "ntpath.splitdrive", "ntpath._get_bothseps"], "ntpath._abspath_fallback": ["ntpath.normpath", "ntpath.isabs", "<builtin>.isinstance", "ntpath.join"], "nt._getvolumepathname": [], "ntpath.normpath": ["<builtin>.isinstance", "sys.path.split", "sys.base_prefix.startswith", "sys.path.lstrip", "sys.base_prefix.split", "sys.path.replace", "<builtin>.len", "ntpath.splitdrive", "sys.base_prefix.replace", "sys.path.startswith", "sys.base_prefix.lstrip"], "sys.path.lstrip": [], "sys.base_prefix.lstrip": [], "ntpath.abspath": ["nt._getfullpathname", "ntpath._abspath_fallback", "ntpath.normpath"], "nt._getfullpathname": [], "ntpath._readlink_deep": ["ntpath.dirname", "ntpath.isabs", "ntpath.join", "ntpath.islink", "ntpath.normcase", "nt.readlink", "<builtin>.set", "ntpath.normpath"], "nt.readlink": [], "ntpath._getfinalpathname_nonstrict": ["ntpath._readlink_deep", "ntpath.join", "nt._getfinalpathname", "ntpath.split"], "nt._getfinalpathname": [], "sys.getwindowsversion": [], "ntpath.relpath": ["ntpath.join", "<builtin>.isinstance", "<builtin>.zip", "genericpath._check_arg_types", "<builtin>.ValueError", "ntpath.normcase", "<builtin>.len", "ntpath.splitdrive", "ntpath._abspath_fallback", "ntpath.normpath"], "ntpath.commonpath": ["<builtin>.isinstance", "<builtin>.min", "<builtin>.tuple", "<builtin>.map", "<builtin>.ValueError", "<builtin>.len", "<builtin>.enumerate", "ntpath.splitdrive", "<builtin>.set", "<builtin>.max", "genericpath._check_arg_types"], "string.capwords": [], "string._TemplateMetaclass": [], "string._TemplateMetaclass.__init__": ["re.escape", "re.compile", "<builtin>.super"], "string.Template": [], "string.Template._invalid": ["<builtin>.len", "<builtin>.ValueError"], "string.Template.substitute": ["collections.ChainMap.__init__"], "string.Template.substitute.convert": ["<builtin>.str", "<builtin>.ValueError"], "string.Template.safe_substitute": ["collections.ChainMap.__init__"], "string.Template.safe_substitute.convert": ["<builtin>.str", "<builtin>.ValueError"], "string.Formatter": [], "string.Formatter.format": [], "string.Formatter.vformat": ["string.Formatter._vformat", "<builtin>.set", "string.Formatter.check_unused_args"], "string.Formatter._vformat": ["string.Formatter.convert_field", "string.Formatter.get_field", "<builtin>.str", "<builtin>.ValueError", "string.Formatter.format_field", "string.Formatter._vformat", "string.Formatter.parse"], "string.Formatter.check_unused_args": [], "string.Formatter.parse": ["_string.formatter_parser"], "string.Formatter.get_field": ["string.Formatter.get_value", "<builtin>.getattr", "_string.formatter_field_name_split"], "string.Formatter.convert_field": ["<builtin>.ascii", "<builtin>.str", "<builtin>.ValueError", "<builtin>.repr"], "string.Formatter.format_field": ["string.Formatter.format"], "string.Formatter.get_value": ["<builtin>.isinstance"], "<builtin>.ascii": [], "_string.formatter_parser": [], "_string.formatter_field_name_split": [], "tokenize.TokenInfo": [], "tokenize.TokenInfo.__repr__": [], "tokenize.TokenInfo.exact_type": [], "tokenize.group": [], "tokenize.any": ["tokenize.group"], "tokenize.maybe": ["tokenize.group"], "tokenize._all_string_prefixes": ["itertools.product", "itertools.permutations"], "itertools.permutations": [], "itertools.product": [], "tokenize._compile": ["re.compile"], "tokenize.TokenError": [], "tokenize.StopTokenizing": [], "tokenize.Untokenizer": [], "tokenize.Untokenizer.__init__": [], "tokenize.Untokenizer.add_whitespace": ["<builtin>.ValueError"], "tokenize.Untokenizer.untokenize": ["tokenize.Untokenizer.compat", "<builtin>.len", "tokenize.Untokenizer.add_whitespace", "<builtin>.iter"], "tokenize.Untokenizer.compat": ["itertools.chain"], "itertools.chain": [], "tokenize.untokenize": ["tokenize.Untokenizer.untokenize", "tokenize.Untokenizer.__init__"], "tokenize._get_normal_name": [], "tokenize.detect_encoding": ["tokenize.detect_encoding.find_cookie", "tokenize.detect_encoding.read_or_stop"], "tokenize.detect_encoding.read_or_stop": ["_io._BufferedIOBase.readline", "http.client.HTTPResponse.readline", "lzma.LZMAFile.readline", "gzip.GzipFile.readline", "zipfile.ZipExtFile.readline", "sys.stdout.readline", "_io._IOBase.readline", "bz2.BZ2File.readline"], "_io._BufferedIOBase.readline": [], "http.client.HTTPResponse.readline": ["http.client.HTTPResponse._close_conn", "<builtin>.len", "<builtin>.super"], "lzma.LZMAFile.readline": ["_compression.BaseStream._check_can_read"], "gzip.GzipFile.readline": ["_compression.BaseStream._check_not_closed"], "zipfile.ZipExtFile.readline": ["_io._BufferedIOBase.readline", "http.client.HTTPResponse.readline", "lzma.LZMAFile.readline", "gzip.GzipFile.readline", "zipfile.ZipExtFile.readline", "_io._IOBase.readline", "bz2.BZ2File.readline"], "sys.stdout.readline": [], "_io._IOBase.readline": [], "bz2.BZ2File.readline": ["<builtin>.hasattr", "_compression.BaseStream._check_can_read", "<builtin>.isinstance", "_io._BufferedIOBase.__index__", "<builtin>.TypeError", "_io._IOBase.__index__"], "tokenize.detect_encoding.find_cookie": ["<builtin>.SyntaxError", "tokenize._get_normal_name"], "tokenize.open": ["_compression.DecompressReader.seek", "asyncio.windows_utils.PipeHandle.close", "_io._IOBase.close", "socket.SocketIO.close", "tokenize.detect_encoding", "http.client.HTTPResponse.close", "gzip.GzipFile.close", "sys.stdout.seek", "builtins.open", "sys.stdout.close", "gzip.GzipFile.seek", "bz2.BZ2File.seek", "_io._IOBase.seek", "lzma.LZMAFile.seek", "_io.TextIOWrapper", "_compression.DecompressReader.close", "zipfile.ZipExtFile.seek", "bz2.BZ2File.close", "zipfile._ZipWriteFile.close", "zipfile.ZipExtFile.close", "lzma.LZMAFile.close"], "builtins.open": [], "_compression.DecompressReader.seek": ["<builtin>.min", "_compression.DecompressReader.read", "<builtin>.ValueError", "_compression.DecompressReader._rewind", "<builtin>.len", "gzip._GzipReader.read", "gzip._GzipReader._rewind"], "zipfile.ZipExtFile.seek": ["<builtin>.min", "zipfile.ZipExtFile.tell", "<builtin>.ValueError", "zipfile._get_decompressor", "zipfile._SharedFile.seek", "zipfile.ZipExtFile.read", "<builtin>.len", "zipfile.ZipExtFile._init_decrypter", "io.UnsupportedOperation"], "sys.stdout.seek": [], "_io._IOBase.seek": [], "lzma.LZMAFile.seek": ["_compression.BaseStream._check_can_seek"], "gzip.GzipFile.seek": ["gzip.GzipFile.write", "_compression.BaseStream._check_not_closed", "<builtin>.ValueError", "<builtin>.range", "<builtin>.OSError"], "bz2.BZ2File.seek": ["_compression.BaseStream._check_can_seek"], "_io.TextIOWrapper": [], "tokenize.tokenize": ["tokenize._tokenize", "itertools.repeat", "itertools.chain", "<builtin>.iter", "tokenize.detect_encoding"], "itertools.repeat": [], "tokenize._tokenize": ["<builtin>.len", "tokenize._compile", "sys.stdin.readline", "<builtin>.IndentationError"], "sys.stdin.readline": [], "<builtin>.IndentationError": [], "tokenize.generate_tokens": ["tokenize._tokenize"], "tokenize.main.perror": ["sys.stderr.write"], "tokenize.main.error": ["tokenize.main.perror", "sys.exit"], "sys.exit": [], "argparse._AttributeHolder": [], "argparse._AttributeHolder.__repr__": ["argparse._AttributeHolder._get_kwargs", "argparse.ArgumentParser._get_kwargs", "argparse._AttributeHolder._get_args", "<builtin>.repr"], "argparse._AttributeHolder._get_args": [], "argparse._AttributeHolder._get_kwargs": ["<builtin>.sorted"], "argparse.ArgumentParser._get_kwargs": ["<builtin>.getattr"], "argparse.HelpFormatter": ["argparse.HelpFormatter._Section"], "argparse.HelpFormatter.__init__": ["<builtin>.min", "re.compile", "argparse.HelpFormatter._Section.__init__", "shutil.get_terminal_size", "<builtin>.max"], "shutil.get_terminal_size": ["<builtin>.int", "sys.__stdout__.fileno"], "argparse.HelpFormatter._Section.__init__": [], "argparse.HelpFormatter._indent": [], "argparse.HelpFormatter._dedent": [], "argparse.HelpFormatter._Section": [], "argparse.HelpFormatter._Section.format_help": ["argparse.HelpFormatter._indent", "argparse.HelpFormatter._join_parts", "argparse.HelpFormatter._dedent"], "argparse.HelpFormatter._join_parts": [], "argparse.HelpFormatter._add_item": [], "argparse.HelpFormatter.start_section": ["argparse.HelpFormatter._indent", "argparse.HelpFormatter._add_item", "argparse.HelpFormatter._Section.__init__"], "argparse.HelpFormatter.end_section": ["argparse.HelpFormatter._dedent"], "argparse.HelpFormatter.add_text": ["argparse.HelpFormatter._add_item"], "argparse.HelpFormatter.add_usage": ["argparse.HelpFormatter._add_item"], "argparse.HelpFormatter.add_argument": ["argparse.HelpFormatter._format_action_invocation", "argparse.HelpFormatter._iter_indented_subactions", "<builtin>.len", "<builtin>.max", "argparse.HelpFormatter._add_item"], "argparse.HelpFormatter._format_action_invocation": ["argparse.HelpFormatter._metavar_formatter.format", "argparse.HelpFormatter._get_default_metavar_for_optional", "argparse.HelpFormatter._get_default_metavar_for_positional", "argparse.HelpFormatter._format_args", "argparse.HelpFormatter._metavar_formatter"], "argparse.HelpFormatter._iter_indented_subactions": ["argparse.HelpFormatter._indent", "argparse.HelpFormatter._dedent"], "argparse.HelpFormatter.add_arguments": ["argparse.HelpFormatter.add_argument"], "argparse.HelpFormatter.format_help": ["argparse.HelpFormatter._Section.format_help"], "argparse.HelpFormatter._format_usage": ["<builtin>.dict", "gettext.gettext", "argparse.HelpFormatter._format_usage.get_lines", "argparse.HelpFormatter._format_actions_usage", "<builtin>.len", "re.findall"], "gettext.gettext": ["gettext.dgettext"], "argparse.HelpFormatter._format_actions_usage": ["re.sub", "<builtin>.len", "<builtin>.range", "<builtin>.enumerate", "argparse.HelpFormatter._get_default_metavar_for_positional", "<builtin>.set", "argparse.HelpFormatter._format_args", "argparse.HelpFormatter._get_default_metavar_for_optional", "<builtin>.sorted"], "argparse.HelpFormatter._format_usage.get_lines": ["<builtin>.len"], "argparse.HelpFormatter._get_default_metavar_for_positional": [], "argparse.HelpFormatter._format_args": ["argparse.HelpFormatter._metavar_formatter", "<builtin>.range", "<builtin>.ValueError", "argparse.HelpFormatter._metavar_formatter.format"], "argparse.HelpFormatter._get_default_metavar_for_optional": [], "argparse.HelpFormatter._format_text": ["argparse.HelpFormatter._fill_text", "<builtin>.dict", "<builtin>.max"], "argparse.HelpFormatter._format_action": ["argparse.HelpFormatter._format_action_invocation", "argparse.HelpFormatter._expand_help", "<builtin>.min", "argparse.HelpFormatter._format_action", "argparse.HelpFormatter._iter_indented_subactions", "<builtin>.len", "argparse.HelpFormatter._join_parts", "<builtin>.max", "argparse.HelpFormatter._split_lines"], "argparse.HelpFormatter._expand_help": ["<builtin>.hasattr", "<builtin>.dict", "<builtin>.str", "<builtin>.vars", "<builtin>.list", "argparse.HelpFormatter._get_help_string"], "argparse.HelpFormatter._metavar_formatter": ["<builtin>.str"], "argparse.HelpFormatter._metavar_formatter.format": ["<builtin>.isinstance"], "argparse.HelpFormatter._get_help_string": [], "textwrap.wrap": ["textwrap.TextWrapper.__init__", "textwrap.TextWrapper.wrap"], "textwrap.fill": ["textwrap.TextWrapper.__init__", "textwrap.TextWrapper.fill"], "argparse.RawDescriptionHelpFormatter": [], "argparse.RawDescriptionHelpFormatter._fill_text": [], "argparse.RawTextHelpFormatter": [], "argparse.RawTextHelpFormatter._split_lines": [], "argparse.ArgumentDefaultsHelpFormatter": [], "argparse.ArgumentDefaultsHelpFormatter._get_help_string": [], "argparse.MetavarTypeHelpFormatter": [], "argparse.MetavarTypeHelpFormatter._get_default_metavar_for_optional": [], "argparse.MetavarTypeHelpFormatter._get_default_metavar_for_positional": [], "argparse._get_action_name": [], "argparse.ArgumentError": [], "argparse.ArgumentError.__init__": ["argparse._get_action_name"], "argparse.ArgumentError.__str__": ["<builtin>.dict"], "argparse.ArgumentTypeError": [], "argparse.Action": [], "argparse.Action.__init__": [], "argparse.Action._get_kwargs": ["<builtin>.getattr"], "argparse.Action.__call__": ["gettext.gettext", "<builtin>.NotImplementedError"], "argparse._StoreAction": [], "argparse._StoreAction.__init__": ["<builtin>.ValueError", "<builtin>.super"], "argparse._StoreAction.__call__": ["<builtin>.setattr"], "argparse._StoreConstAction": [], "argparse._StoreConstAction.__init__": ["<builtin>.super"], "argparse._StoreConstAction.__call__": ["<builtin>.setattr"], "argparse._StoreTrueAction": [], "argparse._StoreTrueAction.__init__": ["<builtin>.super"], "argparse._StoreFalseAction": [], "argparse._StoreFalseAction.__init__": ["<builtin>.super"], "argparse._AppendAction": [], "argparse._AppendAction.__init__": ["<builtin>.ValueError", "<builtin>.super"], "argparse._AppendAction.__call__": ["argparse._copy_items", "<builtin>.getattr", "<builtin>.setattr"], "argparse._AppendConstAction": [], "argparse._AppendConstAction.__init__": ["<builtin>.super"], "argparse._AppendConstAction.__call__": ["argparse._copy_items", "<builtin>.getattr", "<builtin>.setattr"], "argparse._CountAction": [], "argparse._CountAction.__init__": ["<builtin>.super"], "argparse._CountAction.__call__": ["<builtin>.getattr", "<builtin>.setattr"], "argparse._HelpAction": [], "argparse._HelpAction.__init__": ["<builtin>.super"], "argparse._HelpAction.__call__": [], "argparse._VersionAction": [], "argparse._VersionAction.__init__": ["<builtin>.super"], "argparse._VersionAction.__call__": [], "argparse._SubParsersAction": ["argparse._SubParsersAction._ChoicesPseudoAction"], "argparse._SubParsersAction._ChoicesPseudoAction": [], "argparse._SubParsersAction._ChoicesPseudoAction.__init__": ["<builtin>.super"], "argparse._SubParsersAction.__init__": ["<builtin>.super"], "argparse._SubParsersAction.add_parser": ["argparse._SubParsersAction._ChoicesPseudoAction.__init__"], "argparse._SubParsersAction._get_subactions": [], "argparse._SubParsersAction.__call__": ["gettext.gettext", "<builtin>.vars", "<builtin>.getattr", "argparse.ArgumentError.__init__", "<builtin>.setattr"], "argparse._ExtendAction": [], "argparse._ExtendAction.__call__": ["argparse._copy_items", "<builtin>.getattr", "<builtin>.setattr"], "argparse.FileType": [], "argparse.FileType.__init__": [], "argparse.FileType.__call__": ["<builtin>.open", "<builtin>.ValueError", "gettext.gettext"], "argparse.FileType.__repr__": ["<builtin>.type", "<builtin>.repr"], "argparse.Namespace": [], "argparse.Namespace.__init__": ["<builtin>.setattr"], "argparse.Namespace.__eq__": ["<builtin>.isinstance", "<builtin>.vars"], "argparse.Namespace.__contains__": [], "argparse._ActionsContainer": [], "argparse._ActionsContainer.__init__": ["argparse._ActionsContainer._get_handler", "argparse._ActionsContainer.register", "re.compile", "<builtin>.super"], "argparse._ActionsContainer.register": [], "argparse._ActionsContainer._get_handler": ["<builtin>.getattr", "<builtin>.ValueError", "gettext.gettext"], "argparse._ActionsContainer._registry_get": [], "argparse._ActionsContainer.set_defaults": [], "argparse._ActionsContainer.get_default": [], "argparse._ActionsContainer._get_positional_kwargs": ["<builtin>.TypeError", "<builtin>.dict", "gettext.gettext"], "argparse._ActionsContainer._get_optional_kwargs": ["<builtin>.dict", "<builtin>.len", "<builtin>.ValueError", "gettext.gettext"], "argparse._ActionsContainer._pop_action_class": ["argparse._ActionsContainer._registry_get"], "argparse.ArgumentParser._get_formatter": ["argparse.HelpFormatter.__init__"], "argparse._ArgumentGroup._add_action": ["<builtin>.super"], "argparse.ArgumentParser._add_action": [], "argparse._ActionsContainer._add_action": ["argparse._ActionsContainer._check_conflict"], "argparse._MutuallyExclusiveGroup._add_action": ["argparse.ArgumentParser._add_action", "gettext.gettext", "<builtin>.ValueError", "argparse._ActionsContainer._add_action", "argparse._ArgumentGroup._add_action", "argparse._MutuallyExclusiveGroup._add_action"], "argparse._ActionsContainer.add_argument_group": ["argparse._ArgumentGroup.__init__"], "argparse._ArgumentGroup.__init__": ["<builtin>.super"], "argparse._ActionsContainer.add_mutually_exclusive_group": ["argparse._MutuallyExclusiveGroup.__init__"], "argparse._MutuallyExclusiveGroup.__init__": ["<builtin>.super"], "argparse._ActionsContainer._check_conflict": ["argparse._ActionsContainer._get_handler"], "argparse._ActionsContainer._remove_action": [], "argparse._ActionsContainer._add_container_actions": ["argparse._ActionsContainer.add_mutually_exclusive_group", "argparse._ActionsContainer.add_argument_group", "<builtin>.ValueError", "gettext.gettext"], "argparse._ActionsContainer._handle_conflict_error": ["<builtin>.len", "gettext.ngettext", "argparse.ArgumentError.__init__"], "gettext.ngettext": ["gettext.dngettext"], "argparse._ActionsContainer._handle_conflict_resolve": [], "argparse._ArgumentGroup": [], "argparse._ArgumentGroup._remove_action": ["<builtin>.super"], "argparse._MutuallyExclusiveGroup": [], "argparse._MutuallyExclusiveGroup._remove_action": ["argparse._ActionsContainer._remove_action", "argparse._MutuallyExclusiveGroup._remove_action", "argparse._ArgumentGroup._remove_action"], "argparse.ArgumentParser": [], "argparse.ArgumentParser.__init__.identity": [], "argparse.ArgumentParser.add_subparsers": ["argparse.ArgumentParser.error", "gettext.gettext", "argparse.HelpFormatter.format_help", "argparse.HelpFormatter.add_usage", "<builtin>.type", "argparse._ActionsContainer._pop_action_class", "argparse.ArgumentParser._get_formatter", "argparse._ArgumentGroup._add_action", "argparse.ArgumentParser._get_positional_actions", "argparse._ActionsContainer.add_argument_group", "argparse._MutuallyExclusiveGroup._add_action"], "argparse.ArgumentParser.error": ["argparse.ArgumentParser.exit", "argparse.ArgumentParser.print_usage", "gettext.gettext"], "argparse.ArgumentParser._get_positional_actions": [], "argparse.ArgumentParser._get_optional_actions": [], "argparse.ArgumentParser.parse_known_args": ["<builtin>.hasattr", "<builtin>.delattr", "argparse.ArgumentParser.error", "<builtin>.str", "argparse.ArgumentParser._parse_known_args", "<builtin>.list", "<builtin>.getattr", "argparse.Namespace.__init__", "sys.exc_info", "<builtin>.setattr"], "argparse.ArgumentParser._parse_known_args": ["argparse.ArgumentParser._parse_known_args.consume_optional", "<builtin>.hasattr", "argparse.ArgumentParser._read_args_from_files", "argparse.ArgumentParser._parse_optional", "<builtin>.min", "argparse._get_action_name", "<builtin>.isinstance", "gettext.gettext", "argparse.ArgumentParser.error", "argparse.ArgumentParser._get_value", "<builtin>.enumerate", "<builtin>.iter", "<builtin>.set", "<builtin>.getattr", "<builtin>.max", "argparse.ArgumentParser._parse_known_args.consume_positionals", "argparse.ArgumentParser._get_positional_actions", "<builtin>.setattr"], "<builtin>.delattr": [], "argparse.ArgumentParser._read_args_from_files": ["argparse.ArgumentParser._read_args_from_files", "argparse.ArgumentParser.error", "<builtin>.str", "<builtin>.open", "argparse.ArgumentParser.convert_arg_line_to_args", "sys.exc_info"], "argparse.ArgumentParser._parse_optional": ["<builtin>.len", "argparse.ArgumentParser._get_option_tuples", "argparse.ArgumentParser.error", "gettext.gettext"], "argparse.ArgumentParser._parse_known_args.take_action": ["argparse.ArgumentParser._get_values", "argparse._get_action_name", "argparse.ArgumentError.__init__", "gettext.gettext"], "argparse.ArgumentParser._get_values": ["argparse.ArgumentParser._check_value", "<builtin>.len", "<builtin>.isinstance", "argparse.ArgumentParser._get_value"], "argparse.ArgumentParser._parse_known_args.consume_optional": ["argparse.ArgumentParser._parse_known_args.take_action", "argparse.ArgumentError.__init__", "gettext.gettext", "argparse.ArgumentParser._match_argument"], "argparse.ArgumentParser._match_argument": ["gettext.gettext", "argparse.ArgumentParser._get_nargs_pattern", "re.match", "<builtin>.len", "gettext.ngettext", "argparse.ArgumentError.__init__"], "argparse.ArgumentParser._parse_known_args.consume_positionals": ["<builtin>.len", "argparse.ArgumentParser._parse_known_args.take_action", "argparse.ArgumentParser._match_arguments_partial", "<builtin>.zip"], "argparse.ArgumentParser._match_arguments_partial": ["<builtin>.len", "<builtin>.range", "argparse.ArgumentParser._get_nargs_pattern", "re.match"], "argparse.ArgumentParser._get_value": ["gettext.gettext", "<builtin>.callable", "<builtin>.str", "argparse._ActionsContainer._registry_get", "<builtin>.getattr", "sys.exc_info", "<builtin>.repr", "argparse.ArgumentError.__init__"], "argparse.ArgumentParser.convert_arg_line_to_args": [], "argparse.ArgumentParser._get_nargs_pattern": [], "argparse.ArgumentParser._get_option_tuples": ["argparse.ArgumentParser.error", "gettext.gettext"], "argparse.ArgumentParser.parse_intermixed_args": ["argparse.ArgumentParser.parse_known_intermixed_args", "argparse.ArgumentParser.error", "gettext.gettext"], "argparse.ArgumentParser.format_usage": ["argparse.HelpFormatter.format_help", "argparse.HelpFormatter.add_usage", "argparse.ArgumentParser._get_formatter"], "argparse.ArgumentParser._check_value": ["<builtin>.map", "argparse.ArgumentError.__init__", "gettext.gettext"], "argparse.ArgumentParser.format_help": ["argparse.HelpFormatter.end_section", "argparse.HelpFormatter.format_help", "argparse.HelpFormatter.add_usage", "argparse.HelpFormatter.add_arguments", "argparse.ArgumentParser._get_formatter", "argparse.HelpFormatter.start_section", "argparse.HelpFormatter.add_text"], "argparse.ArgumentParser.print_usage": ["argparse.ArgumentParser.format_usage", "argparse.ArgumentParser._print_message"], "argparse.ArgumentParser._print_message": ["sys.stderr.write", "sys.stdout.write"], "argparse.ArgumentParser.print_help": ["argparse.ArgumentParser.format_help", "argparse.ArgumentParser._print_message"], "argparse.ArgumentParser.exit": ["argparse.ArgumentParser._print_message", "sys.exit"], "gettext._tokenize": ["re.finditer", "<builtin>.ValueError"], "gettext._error": ["<builtin>.ValueError"], "gettext._parse": ["gettext._parse", "<builtin>.next", "<builtin>.int", "gettext._error", "<builtin>.ValueError"], "gettext.c2py": ["<builtin>.exec", "gettext._parse", "gettext._error", "<builtin>.ValueError", "<builtin>.len", "gettext._tokenize"], "gettext._expand_lang": ["locale.normalize", "<builtin>.range"], "locale.normalize": ["locale._replace_encoding", "locale._append_modifier"], "gettext.NullTranslations": [], "gettext.NullTranslations.__init__": ["gettext.NullTranslations._parse"], "gettext.NullTranslations._parse": [], "gettext.NullTranslations.add_fallback": [], "gettext.NullTranslations.gettext": [], "gettext.NullTranslations.ngettext": [], "gettext.NullTranslations.pgettext": [], "gettext.NullTranslations.npgettext": [], "gettext.NullTranslations.info": [], "gettext.NullTranslations.charset": [], "gettext.NullTranslations.install": ["<builtin>.getattr", "<builtin>.set"], "gettext.GNUTranslations": [], "gettext.GNUTranslations._get_versions": [], "gettext.GNUTranslations._parse.<lambda1>": ["<builtin>.int"], "gettext.GNUTranslations.gettext": ["<builtin>.object"], "gettext.GNUTranslations.ngettext": ["gettext.GNUTranslations._parse.<lambda1>"], "gettext.GNUTranslations.pgettext": ["<builtin>.object"], "gettext.GNUTranslations.npgettext": ["gettext.GNUTranslations._parse.<lambda1>"], "gettext.find": ["posixpath.join", "ntpath.join", "ntpath.exists", "posixpath.exists", "gettext._expand_lang"], "<builtin>.FileNotFoundError": [], "gettext.install": ["gettext.translation", "gettext.NullTranslations.install"], "gettext.textdomain": [], "gettext.bindtextdomain": [], "gettext.dgettext": ["gettext.translation", "gettext.NullTranslations.gettext"], "gettext.dngettext": ["gettext.NullTranslations.ngettext", "gettext.translation"], "gettext.dpgettext": ["gettext.translation", "gettext.NullTranslations.pgettext"], "gettext.dnpgettext": ["gettext.NullTranslations.npgettext", "gettext.translation"], "gettext.pgettext": ["gettext.dpgettext"], "gettext.npgettext": ["gettext.dnpgettext"], "locale._strcoll": [], "locale._strxfrm": [], "locale.localeconv": ["locale.localeconv"], "locale.setlocale": ["locale.normalize", "locale._build_localename", "locale.setlocale", "<builtin>.isinstance"], "locale._grouping_intervals": ["<builtin>.ValueError"], "locale._group": ["<builtin>.len", "locale._grouping_intervals", "locale.localeconv"], "locale._strip_padding": ["<builtin>.len"], "locale._format": ["locale._group", "locale.localeconv", "locale._strip_padding"], "locale.format_string": ["<builtin>.tuple", "locale._format", "<builtin>.isinstance", "<builtin>.list"], "locale.currency": ["locale._format", "locale.localeconv", "<builtin>.ValueError", "<builtin>.abs"], "<builtin>.abs": [], "locale.str": ["locale._format"], "locale.delocalize": ["locale.localeconv"], "locale.atof": ["locale.delocalize"], "locale.atoi": ["<builtin>.int", "locale.delocalize"], "locale._test": ["locale.setlocale", "locale.format_string", "<builtin>.print", "locale.atof", "locale.atoi", "locale.str"], "locale._replace_encoding": ["encodings.aliases.aliases.get", "encodings.normalize_encoding"], "encodings.normalize_encoding": ["<builtin>.str", "<builtin>.isinstance"], "encodings.aliases.aliases.get": [], "locale._append_modifier": ["locale._replace_encoding"], "locale._parse_localename": ["locale.normalize", "<builtin>.tuple", "<builtin>.ValueError"], "locale._build_localename": ["<builtin>.TypeError"], "_locale._getdefaultlocale": [], "locale.getlocale": ["<builtin>.TypeError", "locale.setlocale", "locale._parse_localename"], "locale.resetlocale": ["locale.getdefaultlocale", "locale.setlocale", "locale._build_localename"], "sys.platform.startswith": [], "locale._print_locale": ["locale.setlocale", "<builtin>.print", "locale.getlocale", "locale.getdefaultlocale", "locale.resetlocale", "locale._print_locale._init_categories"], "locale._print_locale._init_categories": ["<builtin>.globals"], "_locale.nl_langinfo": [], "encodings.CodecRegistryError": [], "encodings.search_function": ["<builtin>.__import__", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.len", "encodings.normalize_encoding"], "_winapi.GetACP": [], "encodings.mbcs.getregentry": [], "encodings.mbcs.decode": [], "encodings.mbcs.IncrementalEncoder": [], "encodings.mbcs.IncrementalEncoder.encode": [], "encodings.mbcs.IncrementalDecoder": [], "encodings.mbcs.StreamWriter": [], "encodings.mbcs.StreamReader": [], "<builtin>.SystemError": [], "codecs.CodecInfo": [], "codecs.CodecInfo.__new__": [], "codecs.CodecInfo.__repr__": ["<builtin>.id"], "codecs.Codec": [], "codecs.Codec.encode": [], "codecs.Codec.decode": [], "codecs.IncrementalEncoder": [], "codecs.IncrementalEncoder.__init__": [], "codecs.IncrementalEncoder.encode": [], "codecs.IncrementalEncoder.reset": [], "codecs.IncrementalEncoder.getstate": [], "codecs.IncrementalEncoder.setstate": [], "codecs.BufferedIncrementalEncoder": [], "codecs.BufferedIncrementalEncoder.__init__": ["codecs.IncrementalEncoder.__init__"], "codecs.BufferedIncrementalEncoder._buffer_encode": [], "codecs.BufferedIncrementalEncoder.encode": ["codecs.BufferedIncrementalEncoder._buffer_encode"], "codecs.BufferedIncrementalEncoder.reset": ["codecs.IncrementalEncoder.reset"], "codecs.BufferedIncrementalEncoder.getstate": [], "codecs.BufferedIncrementalEncoder.setstate": [], "codecs.IncrementalDecoder": [], "codecs.IncrementalDecoder.__init__": [], "codecs.IncrementalDecoder.decode": [], "codecs.IncrementalDecoder.reset": [], "codecs.IncrementalDecoder.getstate": [], "codecs.IncrementalDecoder.setstate": [], "codecs.BufferedIncrementalDecoder": [], "codecs.BufferedIncrementalDecoder.__init__": ["codecs.IncrementalDecoder.__init__"], "codecs.BufferedIncrementalDecoder._buffer_decode": [], "codecs.BufferedIncrementalDecoder.decode": ["codecs.BufferedIncrementalDecoder._buffer_decode"], "codecs.BufferedIncrementalDecoder.reset": ["codecs.IncrementalDecoder.reset"], "codecs.BufferedIncrementalDecoder.getstate": [], "codecs.BufferedIncrementalDecoder.setstate": [], "codecs.StreamWriter": [], "codecs.StreamWriter.__init__": [], "codecs.StreamWriter.write": ["codecs.Codec.encode"], "codecs.StreamWriter.writelines": ["codecs.StreamWriter.write"], "codecs.StreamWriter.reset": [], "codecs.StreamWriter.seek": ["codecs.StreamWriter.reset"], "codecs.StreamWriter.__getattr__": [], "codecs.StreamWriter.__enter__": [], "codecs.StreamWriter.__exit__": [], "codecs.StreamReader": [], "codecs.StreamReader.__init__": [], "codecs.StreamReader.decode": [], "codecs.StreamReader.read": ["<builtin>.len", "codecs.StreamReader.decode"], "codecs.StreamReader.readline": ["<builtin>.len", "<builtin>.isinstance", "codecs.StreamReader.read"], "codecs.StreamReader.readlines": ["codecs.StreamReader.read"], "codecs.StreamReader.reset": [], "codecs.StreamReader.seek": ["codecs.StreamReader.reset"], "codecs.StreamReader.__next__": ["codecs.StreamReader.readline"], "codecs.StreamReader.__iter__": [], "codecs.StreamReader.__getattr__": [], "codecs.StreamReader.__enter__": [], "codecs.StreamReader.__exit__": [], "codecs.StreamReaderWriter": [], "codecs.StreamReaderWriter.__init__": [], "codecs.StreamReaderWriter.read": [], "codecs.StreamReaderWriter.readline": [], "codecs.StreamReaderWriter.readlines": [], "codecs.StreamReaderWriter.__next__": ["<builtin>.next"], "codecs.StreamReaderWriter.__iter__": [], "codecs.StreamReaderWriter.write": [], "codecs.StreamReaderWriter.writelines": [], "codecs.StreamReaderWriter.reset": [], "codecs.StreamReaderWriter.seek": [], "codecs.StreamReaderWriter.__getattr__": [], "codecs.StreamReaderWriter.__enter__": [], "codecs.StreamReaderWriter.__exit__": [], "codecs.StreamRecoder": [], "codecs.StreamRecoder.__init__": [], "codecs.StreamRecoder.read": [], "codecs.StreamRecoder.readline": [], "codecs.StreamRecoder.readlines": [], "codecs.StreamRecoder.__next__": ["<builtin>.next"], "codecs.StreamRecoder.__iter__": [], "codecs.StreamRecoder.write": [], "codecs.StreamRecoder.writelines": [], "codecs.StreamRecoder.reset": [], "codecs.StreamRecoder.seek": [], "codecs.StreamRecoder.__getattr__": [], "codecs.StreamRecoder.__enter__": [], "codecs.StreamRecoder.__exit__": ["sys.stdin.close", "sys.stdout.close"], "sys.stdin.close": [], "codecs.open": ["codecs.StreamReaderWriter.__init__", "builtins.open"], "codecs.EncodedFile": ["codecs.StreamRecoder.__init__"], "codecs.getencoder": [], "codecs.getdecoder": [], "codecs.getincrementalencoder": ["<builtin>.LookupError"], "<builtin>.LookupError": [], "codecs.getincrementaldecoder": ["<builtin>.LookupError"], "codecs.getreader": [], "codecs.getwriter": [], "codecs.iterencode": ["codecs.getincrementalencoder"], "codecs.iterdecode": ["codecs.getincrementaldecoder"], "codecs.make_identity_dict": [], "codecs.make_encoding_map": [], "textwrap.TextWrapper": ["<builtin>.ord", "re.compile", "re.escape"], "textwrap.TextWrapper.__init__": [], "textwrap.TextWrapper._munge_whitespace": [], "textwrap.TextWrapper._split": [], "textwrap.TextWrapper._fix_sentence_endings": ["<builtin>.len"], "textwrap.TextWrapper._handle_long_word": [], "textwrap.TextWrapper._wrap_chunks": ["textwrap.TextWrapper._handle_long_word", "<builtin>.map", "<builtin>.ValueError", "<builtin>.len", "<builtin>.sum"], "textwrap.TextWrapper._split_chunks": ["textwrap.TextWrapper._munge_whitespace", "textwrap.TextWrapper._split"], "textwrap.TextWrapper.wrap": ["textwrap.TextWrapper._split_chunks", "textwrap.TextWrapper._wrap_chunks", "textwrap.TextWrapper._fix_sentence_endings"], "textwrap.TextWrapper.fill": ["textwrap.TextWrapper.wrap"], "textwrap.shorten": ["textwrap.TextWrapper.__init__", "textwrap.TextWrapper.fill"], "textwrap.dedent": ["<builtin>.enumerate", "<builtin>.zip", "re.sub"], "textwrap.indent": ["textwrap.indent.prefixed_lines"], "textwrap.indent.predicate": [], "textwrap.indent.prefixed_lines": ["textwrap.indent.predicate"], "shutil.Error": [], "shutil.SameFileError": [], "shutil.SpecialFileError": [], "shutil.ExecError": [], "shutil.ReadError": [], "shutil.RegistryError": [], "shutil._GiveupOnFastCopy": [], "shutil._fastcopy_fcopyfile": ["posix._fcopyfile"], "posix._fcopyfile": [], "shutil._fastcopy_sendfile": ["<builtin>.min", "<builtin>.max"], "shutil._copyfileobj_readinto": ["<builtin>.memoryview", "<builtin>.bytearray"], "shutil.copyfileobj": ["gzip.GzipFile.write", "tarfile._Stream.write", "bz2.BZ2File.write", "tarfile._Stream.read", "lzma.LZMAFile.read", "bz2.BZ2File.read", "lzma.LZMAFile.write", "gzip.GzipFile.read"], "tarfile._Stream.read": ["tarfile._Stream._read", "<builtin>.len"], "tarfile._Stream.write": ["<builtin>.len", "tarfile._Stream.__write"], "shutil._samefile": ["<builtin>.hasattr", "posixpath.abspath", "ntpath.samestat", "<builtin>.isinstance", "posixpath.samestat", "posixpath.normcase", "ntpath.normcase", "posixpath.samefile", "ntpath.abspath", "ntpath.samefile"], "ntpath.samefile": [], "posixpath.samefile": [], "shutil._stat": ["<builtin>.isinstance"], "shutil._islink": ["posixpath.islink", "<builtin>.isinstance", "ntpath.islink"], "shutil.copyfile": ["<builtin>.isinstance", "<builtin>.min", "shutil._copyfileobj_readinto", "stat.S_ISFIFO", "shutil.copyfileobj", "shutil._fastcopy_fcopyfile", "sys.audit", "<builtin>.enumerate", "shutil._stat", "<builtin>.open", "shutil._fastcopy_sendfile", "shutil._samefile", "shutil._islink"], "shutil.copymode": ["<builtin>.hasattr", "ntpath.islink", "posixpath.islink", "sys.audit", "stat.S_IMODE", "shutil._stat", "shutil._islink"], "shutil._copyxattr": [], "shutil.copystat": ["<builtin>.hasattr", "<builtin>.isinstance", "ntpath.islink", "shutil._copyxattr", "posixpath.islink", "shutil.copystat._nop", "sys.audit", "stat.S_IMODE", "<builtin>.getattr", "shutil.copystat.lookup", "shutil._islink"], "shutil.copystat._nop": [], "shutil.copystat.lookup": ["<builtin>.getattr"], "shutil.copy": ["posixpath.join", "posixpath.basename", "ntpath.join", "shutil.copyfile", "ntpath.isdir", "posixpath.isdir", "ntpath.basename", "shutil.copymode"], "shutil.copy2": ["posixpath.join", "posixpath.basename", "ntpath.join", "shutil.copyfile", "ntpath.isdir", "posixpath.isdir", "ntpath.basename", "shutil.copystat"], "shutil.ignore_patterns": [], "shutil.ignore_patterns._ignore_patterns": ["<builtin>.set"], "shutil._copytree": ["posixpath.join", "ntpath.join", "ntpath.exists", "<builtin>.str", "shutil.copy2", "posixpath.exists", "<builtin>.getattr", "shutil.copystat", "os.makedirs", "<builtin>.set", "shutil.copytree"], "shutil.copytree": ["sys.audit", "shutil._copytree", "<builtin>.list"], "shutil._rmtree_isdir": ["stat.S_ISDIR"], "shutil._rmtree_islink": ["posixpath.islink", "stat.S_ISLNK", "ntpath.islink"], "shutil._rmtree_unsafe": ["shutil._rmtree_isdir", "<builtin>.list", "tempfile.TemporaryDirectory._rmtree.onerror", "shutil._rmtree_unsafe", "<builtin>.OSError", "sys.exc_info"], "tempfile.TemporaryDirectory._rmtree.onerror": ["<builtin>.issubclass", "ntpath.dirname", "tempfile.TemporaryDirectory._rmtree.onerror.resetperms", "posixpath.dirname", "tempfile.TemporaryDirectory._rmtree"], "shutil._rmtree_safe_fd": ["posixpath.join", "ntpath.join", "ntpath.samestat", "posixpath.samestat", "stat.S_ISDIR", "<builtin>.list", "tempfile.TemporaryDirectory._rmtree.onerror", "shutil._rmtree_safe_fd", "<builtin>.OSError", "sys.exc_info"], "shutil.rmtree": ["ntpath.samestat", "<builtin>.isinstance", "posixpath.samestat", "sys.audit", "tempfile.TemporaryDirectory._rmtree.onerror", "shutil._rmtree_islink", "shutil._rmtree_safe_fd", "shutil._rmtree_unsafe", "<builtin>.OSError", "sys.exc_info"], "shutil.rmtree.onerror": [], "shutil._basename": ["posixpath.basename", "ntpath.basename"], "shutil.move": ["posixpath.join", "ntpath.join", "ntpath.islink", "ntpath.exists", "posixpath.islink", "shutil.copy2", "ntpath.isdir", "shutil._basename", "posixpath.isdir", "posixpath.exists", "shutil._destinsrc", "sys.audit", "shutil._samefile", "shutil.rmtree", "shutil.copytree"], "shutil._destinsrc": ["posixpath.abspath", "ntpath.abspath"], "shutil._get_gid": [], "shutil._get_uid": ["pwd.getpwnam"], "shutil._make_tarball._set_uid_gid": [], "zipfile.ZipFile.__init__": ["zipfile._check_compression", "zipfile.ZipFile._RealGetContents", "<builtin>.isinstance", "threading.RLock", "<builtin>.ValueError", "<builtin>.getattr", "zipfile._Tellable.__init__", "zipfile.ZipFile._fpclose", "io.open", "zipfile._Tellable.tell"], "shutil.get_archive_formats": [], "shutil.register_archive_format": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.len"], "shutil.unregister_archive_format": [], "shutil.make_archive": ["posixpath.abspath", "sys.audit", "ntpath.abspath", "<builtin>.ValueError"], "shutil.get_unpack_formats": [], "shutil._check_unpack_options": ["<builtin>.callable", "<builtin>.TypeError"], "shutil.register_unpack_format": ["shutil._check_unpack_options"], "shutil.unregister_unpack_format": [], "shutil._ensure_directory": ["ntpath.dirname", "ntpath.isdir", "posixpath.isdir", "posixpath.dirname", "os.makedirs"], "zipfile.is_zipfile": ["<builtin>.hasattr", "zipfile._check_zipfile", "<builtin>.open"], "zipfile.ZipFile.infolist": [], "zipfile.ZipFile.read": ["zipfile.ZipFile.read", "zipfile.ZipFile.open"], "zipfile.ZipFile.close": ["zipfile.ZipFile._write_end_record", "zipfile.ZipFile._fpclose", "<builtin>.ValueError"], "shutil._find_unpack_format": [], "shutil.unpack_archive": ["sys.audit", "shutil._find_unpack_format", "<builtin>.ValueError", "<builtin>.dict"], "shutil.disk_usage": ["nt._getdiskusage"], "nt._getdiskusage": [], "shutil.chown": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.LookupError", "sys.audit", "shutil._get_uid", "shutil._get_gid"], "shutil._access_check": ["ntpath.exists", "ntpath.isdir", "posixpath.isdir", "posixpath.exists"], "bz2.BZ2File": [], "bz2.BZ2File.__init__": ["<builtin>.hasattr", "<builtin>.isinstance", "threading.RLock", "warnings.warn", "<builtin>.ValueError", "<builtin>.TypeError", "_compression.DecompressReader.__init__", "builtins.open", "io.BufferedReader"], "_compression.DecompressReader.__init__": [], "io.BufferedReader": [], "sys.base_prefix.write": [], "sys.path.write": [], "logging.FileHandler.close": ["<builtin>.hasattr", "logging.StreamHandler.flush", "logging.Handler.acquire", "logging.FileHandler.close", "logging.Handler.close", "logging.Handler.release"], "tarfile.TarFile.close": ["gzip.GzipFile.write", "tarfile._Stream.write", "bz2.BZ2File.close", "bz2.BZ2File.write", "lzma.LZMAFile.close", "tarfile._Stream.close", "lzma.LZMAFile.write", "<builtin>.divmod", "gzip.GzipFile.close"], "sys.path.close": [], "sys.base_prefix.close": [], "bz2.BZ2File.closed": [], "bz2.BZ2File.fileno": ["_compression.BaseStream._check_not_closed", "sys.base_prefix.fileno", "sys.path.fileno"], "_compression.BaseStream._check_not_closed": ["<builtin>.ValueError"], "sys.base_prefix.fileno": [], "sys.path.fileno": [], "bz2.BZ2File.seekable": ["bz2.BZ2File.readable"], "bz2.BZ2File.readable": ["_compression.BaseStream._check_not_closed"], "bz2.BZ2File.writable": ["_compression.BaseStream._check_not_closed"], "bz2.BZ2File.peek": ["_compression.BaseStream._check_can_read"], "_compression.BaseStream._check_can_read": ["io.UnsupportedOperation", "bz2.BZ2File.readable", "gzip.GzipFile.readable", "lzma.LZMAFile.readable"], "bz2.BZ2File.read1": ["_compression.BaseStream._check_can_read"], "bz2.BZ2File.readinto": ["_compression.BaseStream._check_can_read"], "_io._IOBase.__index__": [], "_io._BufferedIOBase.__index__": [], "bz2.BZ2File.readlines": ["<builtin>.hasattr", "<builtin>.TypeError", "_compression.BaseStream._check_can_read", "<builtin>.isinstance"], "_compression.BaseStream._check_can_write": ["io.UnsupportedOperation", "gzip.GzipFile.writable", "bz2.BZ2File.writable", "lzma.LZMAFile.writable"], "bz2.BZ2File.writelines": ["bz2.BZ2File.writelines"], "_compression.BaseStream._check_can_seek": ["bz2.BZ2File.seekable", "gzip.GzipFile.seekable", "bz2.BZ2File.readable", "gzip.GzipFile.readable", "lzma.LZMAFile.readable", "lzma.LZMAFile.seekable", "io.UnsupportedOperation"], "bz2.BZ2File.tell": ["_compression.BaseStream._check_not_closed"], "bz2.open": ["io.TextIOWrapper", "bz2.BZ2File.__init__", "<builtin>.ValueError"], "bz2.compress": [], "bz2.decompress": ["<builtin>.ValueError"], "_compression.BaseStream": [], "gzip.GzipFile.readable": [], "lzma.LZMAFile.readable": ["_compression.BaseStream._check_not_closed"], "io.UnsupportedOperation": [], "gzip.GzipFile.writable": [], "lzma.LZMAFile.writable": ["_compression.BaseStream._check_not_closed"], "gzip.GzipFile.seekable": [], "lzma.LZMAFile.seekable": ["lzma.LZMAFile.readable"], "_compression.DecompressReader": [], "_compression.DecompressReader.readable": [], "_compression.DecompressReader.seekable": ["sys.base_prefix.seekable", "sys.path.seekable"], "sys.base_prefix.seekable": [], "sys.path.seekable": [], "_compression.DecompressReader.readinto": ["<builtin>.memoryview", "<builtin>.len", "gzip._GzipReader.read", "_compression.DecompressReader.read"], "_io._RawIOBase.readall": [], "sys.path.read": [], "sys.base_prefix.read": [], "<builtin>.EOFError": [], "_compression.DecompressReader._rewind": ["sys.path.seek", "sys.base_prefix.seek"], "sys.path.seek": [], "sys.base_prefix.seek": [], "gzip._GzipReader._rewind": ["<builtin>.super"], "_compression.DecompressReader.tell": [], "tarfile.stn": ["<builtin>.len"], "tarfile.nts": [], "tarfile.nti": ["<builtin>.int", "<builtin>.len", "<builtin>.range", "tarfile.nts"], "tarfile.itn": ["<builtin>.int", "<builtin>.ValueError", "<builtin>.bytearray", "<builtin>.range", "<builtin>.bytes"], "tarfile.calc_chksums": ["<builtin>.sum"], "tarfile.copyfileobj": ["gzip.GzipFile.write", "tarfile._Stream.write", "gzip.GzipFile.read", "bz2.BZ2File.write", "tarfile._Stream.read", "lzma.LZMAFile.read", "<builtin>.len", "<builtin>.range", "bz2.BZ2File.read", "lzma.LZMAFile.write", "<builtin>.divmod", "shutil.copyfileobj"], "<builtin>.divmod": [], "tarfile._safe_print": ["<builtin>.print", "<builtin>.getattr"], "tarfile.TarError": [], "tarfile.ExtractError": [], "tarfile.ReadError": [], "tarfile.CompressionError": [], "tarfile.StreamError": [], "tarfile.HeaderError": [], "tarfile.EmptyHeaderError": [], "tarfile.TruncatedHeaderError": [], "tarfile.EOFHeaderError": [], "tarfile.InvalidHeaderError": [], "tarfile.SubsequentHeaderError": [], "tarfile._LowLevelFile": [], "tarfile._LowLevelFile.__init__": ["<builtin>.hasattr"], "tarfile._LowLevelFile.close": [], "tarfile._LowLevelFile.read": [], "tarfile._LowLevelFile.write": [], "tarfile._Stream": [], "tarfile._StreamProxy.__init__": ["tarfile._StreamProxy.read", "tarfile._LowLevelFile.read"], "tarfile._StreamProxy.getcomptype": [], "tarfile._Stream._init_read_gz": ["<builtin>.ord", "tarfile._Stream.__read", "tarfile._Stream.read"], "tarfile._Stream._init_write_gz": ["time.time", "tarfile._Stream.__write", "<builtin>.int"], "tarfile._StreamProxy.close": ["tarfile._LowLevelFile.close", "tarfile._StreamProxy.close"], "tarfile._Stream.__del__": ["<builtin>.hasattr", "tarfile._Stream.close"], "tarfile._Stream.close": ["tarfile._LowLevelFile.close", "tarfile._StreamProxy.close", "tarfile._LowLevelFile.write"], "tarfile._Stream.__write": ["<builtin>.len", "tarfile._LowLevelFile.write"], "tarfile._Stream.__read": ["<builtin>.len", "tarfile._StreamProxy.read", "tarfile._LowLevelFile.read"], "tarfile._Stream.tell": [], "tarfile._Stream.seek": ["<builtin>.range", "tarfile._Stream.read", "<builtin>.divmod"], "tarfile._Stream._read": ["tarfile._Stream.__read", "tarfile._StreamProxy.read", "tarfile._LowLevelFile.read", "<builtin>.len"], "tarfile._StreamProxy.read": [], "tarfile._StreamProxy": [], "tarfile._FileInFile": [], "tarfile._FileInFile.__init__": ["<builtin>.getattr"], "tarfile._FileInFile.flush": [], "tarfile._FileInFile.readable": [], "tarfile._FileInFile.writable": [], "tarfile._FileInFile.seekable": ["gzip.GzipFile.seekable", "bz2.BZ2File.seekable", "lzma.LZMAFile.seekable"], "tarfile._FileInFile.tell": [], "tarfile._FileInFile.seek": ["<builtin>.ValueError", "<builtin>.min", "<builtin>.max"], "tarfile._FileInFile.read": ["<builtin>.min", "tarfile._Stream.seek", "lzma.LZMAFile.read", "tarfile._Stream.read", "<builtin>.len", "bz2.BZ2File.read", "lzma.LZMAFile.seek", "gzip.GzipFile.seek", "bz2.BZ2File.seek", "gzip.GzipFile.read"], "tarfile._FileInFile.readinto": ["<builtin>.len", "tarfile._FileInFile.read"], "tarfile._FileInFile.close": [], "tarfile.ExFileObject": [], "tarfile.ExFileObject.__init__": ["tarfile._FileInFile.__init__", "<builtin>.super"], "tarfile.TarInfo": ["<builtin>.dict"], "tarfile.TarInfo.__init__": [], "tarfile.TarInfo.path": [], "tarfile.TarInfo.linkpath": [], "tarfile.TarInfo.__repr__": ["<builtin>.id"], "tarfile.TarInfo.get_info": [], "tarfile.TarInfo.tobuf": ["tarfile.TarInfo.create_gnu_header", "tarfile.TarInfo.create_ustar_header", "tarfile.TarInfo.create_pax_header", "tarfile.TarInfo.get_info", "<builtin>.ValueError"], "tarfile.TarInfo.create_ustar_header": ["tarfile.TarInfo._create_header", "<builtin>.len", "tarfile.TarInfo._posix_split_name", "<builtin>.ValueError"], "tarfile.TarInfo.create_gnu_header": ["tarfile.TarInfo._create_header", "<builtin>.len", "tarfile.TarInfo._create_gnu_long_header"], "tarfile.TarInfo.create_pax_header": ["tarfile.TarInfo._create_header", "<builtin>.isinstance", "<builtin>.str", "<builtin>.len", "tarfile.TarInfo._create_pax_generic_header"], "tarfile.TarInfo._posix_split_name": ["<builtin>.len", "<builtin>.range"], "tarfile.TarInfo._create_header": ["tarfile.calc_chksums", "tarfile.stn", "<builtin>.bytes", "tarfile.itn"], "tarfile.TarInfo._create_gnu_long_header": ["tarfile.TarInfo._create_header", "<builtin>.len", "tarfile.TarInfo._create_payload"], "tarfile.TarInfo._create_pax_generic_header": ["<builtin>.str", "<builtin>.len", "<builtin>.bytes", "tarfile.TarInfo._create_header", "tarfile.TarInfo._create_payload"], "tarfile.TarInfo.create_pax_global_header": ["tarfile.TarInfo._create_pax_generic_header"], "tarfile.TarInfo._create_payload": ["<builtin>.len", "<builtin>.divmod"], "tarfile.TarInfo.frombuf": ["tarfile.calc_chksums", "tarfile.nti", "<builtin>.len", "<builtin>.range", "<builtin>.bool", "tarfile.nts", "tarfile.TarInfo.__init__"], "tarfile.TarInfo.fromtarfile": ["tarfile._Stream.read", "lzma.LZMAFile.read", "lzma.LZMAFile.tell", "tarfile.TarInfo.frombuf", "bz2.BZ2File.read", "tarfile._Stream.tell", "bz2.BZ2File.tell", "gzip.GzipFile.read"], "lzma.LZMAFile.tell": ["_compression.BaseStream._check_not_closed"], "tarfile.TarInfo._proc_member": ["tarfile.TarInfo._proc_builtin", "tarfile.TarInfo._proc_gnulong", "tarfile.TarInfo._proc_pax", "tarfile.TarInfo._proc_sparse"], "tarfile.TarInfo._proc_gnulong": ["tarfile.TarInfo.fromtarfile", "tarfile.TarInfo._block", "tarfile.nts"], "tarfile.TarInfo._proc_sparse": ["<builtin>.range", "<builtin>.bool", "tarfile.TarInfo._block", "tarfile.nti"], "tarfile.TarInfo._proc_pax": ["re.search", "tarfile.TarInfo._proc_gnusparse_10", "<builtin>.int", "tarfile.TarInfo._decode_pax_field", "re.compile", "tarfile.TarInfo.fromtarfile", "tarfile.TarInfo._proc_gnusparse_01", "tarfile.TarInfo._block", "tarfile.TarInfo._proc_gnusparse_00"], "tarfile.TarInfo._proc_builtin": ["tarfile.TarInfo._apply_pax_info", "tarfile.TarInfo.isreg", "tarfile.TarInfo._block"], "tarfile.TarInfo.isreg": [], "tarfile.TarInfo._block": ["<builtin>.divmod"], "tarfile.TarInfo._apply_pax_info": ["<builtin>.int", "<builtin>.setattr"], "tarfile.TarInfo._decode_pax_field": [], "tarfile.TarInfo._proc_gnusparse_01": ["<builtin>.int", "<builtin>.zip", "<builtin>.list"], "tarfile.TarInfo._proc_gnusparse_00": ["<builtin>.int", "re.finditer", "<builtin>.zip", "<builtin>.list"], "tarfile.TarInfo._proc_gnusparse_10": ["<builtin>.int", "<builtin>.len", "<builtin>.zip", "<builtin>.list"], "tarfile.TarInfo.isfile": ["tarfile.TarInfo.isreg"], "tarfile.TarInfo.isdir": [], "tarfile.TarInfo.issym": [], "tarfile.TarInfo.islnk": [], "tarfile.TarInfo.ischr": [], "tarfile.TarInfo.isblk": [], "tarfile.TarInfo.isfifo": [], "tarfile.TarInfo.issparse": [], "tarfile.TarInfo.isdev": [], "tarfile.TarFile": [], "tarfile.TarFile.__init__": ["<builtin>.hasattr", "posixpath.abspath", "<builtin>.str", "tarfile._Stream.seek", "posixpath.exists", "<builtin>.len", "gzip.GzipFile.close", "tarfile.TarInfo.create_pax_global_header", "bz2.BZ2File.write", "builtins.open", "ntpath.abspath", "gzip.GzipFile.seek", "bz2.BZ2File.seek", "gzip.GzipFile.write", "tarfile._Stream.write", "<builtin>.isinstance", "ntpath.exists", "lzma.LZMAFile.tell", "tarfile.TarInfo.fromtarfile", "lzma.LZMAFile.seek", "tarfile._Stream.tell", "tarfile.TarFile.next", "bz2.BZ2File.tell", "lzma.LZMAFile.write", "bz2.BZ2File.close", "<builtin>.ValueError", "tarfile._Stream.close", "lzma.LZMAFile.close"], "tarfile.TarFile.next": ["gzip.GzipFile.read", "tarfile.TarFile._dbg", "<builtin>.str", "tarfile._Stream.seek", "lzma.LZMAFile.tell", "lzma.LZMAFile.read", "tarfile._Stream.read", "tarfile.TarInfo.fromtarfile", "bz2.BZ2File.read", "lzma.LZMAFile.seek", "gzip.GzipFile.seek", "tarfile._Stream.tell", "bz2.BZ2File.seek", "bz2.BZ2File.tell", "tarfile.TarFile._check"], "tarfile.TarFile.open": ["bz2.BZ2File.close", "tarfile.TarFile.taropen", "tarfile.TarFile.__init__", "<builtin>.ValueError", "tarfile._Stream.close", "<builtin>.getattr", "<builtin>.sorted", "tarfile._Stream.__init__", "lzma.LZMAFile.close", "gzip.GzipFile.close"], "tarfile.TarFile.open.not_compressed": [], "tarfile.TarFile.taropen": ["tarfile.TarFile.__init__", "<builtin>.ValueError"], "gzip.GzipFile.__init__": ["gzip._GzipReader.__init__", "gzip.GzipFile._init_write", "gzip.GzipFile._write_gzip_header", "<builtin>.isinstance", "<builtin>.ValueError", "builtins.open", "<builtin>.getattr", "io.BufferedReader"], "lzma.LZMAFile.__init__": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "_compression.DecompressReader.__init__", "builtins.open", "io.BufferedReader"], "tarfile.TarFile.getmember": ["tarfile.TarFile._getmember", "<builtin>.KeyError"], "tarfile.TarFile._getmember": ["<builtin>.reversed", "posixpath.normpath", "ntpath.normpath", "tarfile.TarFile.getmembers"], "tarfile.TarFile.getmembers": ["tarfile.TarFile._load", "tarfile.TarFile._check"], "tarfile.TarFile._check": ["<builtin>.OSError"], "tarfile.TarFile._load": ["tarfile.TarFile.next"], "tarfile.TarFile.getnames": ["tarfile.TarFile.getmembers"], "tarfile.TarFile.gettarinfo": ["stat.S_ISCHR", "<builtin>.hasattr", "stat.S_ISLNK", "stat.S_ISBLK", "posixpath.splitdrive", "stat.S_ISFIFO", "stat.S_ISDIR", "stat.S_ISREG", "sys.path.replace", "tarfile.TarInfo.__init__", "pwd.getpwuid", "ntpath.splitdrive", "sys.base_prefix.replace", "sys.path.lstrip", "sys.base_prefix.lstrip", "tarfile.TarFile._check"], "tarfile.TarFile.list": ["stat.filemode", "<builtin>.print", "time.localtime", "tarfile.TarFile.__iter__", "tarfile._safe_print", "tarfile.TarFile._check"], "tarfile.TarFile.__iter__": ["<builtin>.len", "tarfile.TarFile.next"], "time.localtime": [], "tarfile.TarFile.add": ["posixpath.abspath", "posixpath.join", "ntpath.join", "tarfile.TarFile.addfile", "tarfile.TarFile._dbg", "tarfile.TarFile.add", "tarfile.TarInfo.isreg", "builtins.open", "tarfile.TarInfo.isdir", "ntpath.abspath", "<builtin>.sorted", "tarfile.TarFile.gettarinfo", "tarfile.TarFile._check"], "tarfile.TarFile._dbg": ["<builtin>.print"], "tarfile.TarFile.addfile": ["gzip.GzipFile.write", "tarfile._Stream.write", "bz2.BZ2File.write", "tarfile.TarInfo.tobuf", "<builtin>.len", "tarfile.copyfileobj", "lzma.LZMAFile.write", "<builtin>.divmod", "tarfile.TarFile._check"], "tarfile.TarFile.extractall": ["tarfile.TarFile.extract", "posixpath.join", "ntpath.join", "tarfile.TarFile.chmod", "tarfile.TarFile.chown", "tarfile.TarFile._dbg", "tarfile.TarFile.__iter__", "tarfile.TarFile.utime"], "tarfile.TarFile.extract": ["posixpath.join", "ntpath.join", "<builtin>.isinstance", "tarfile.TarFile._extract_member", "tarfile.TarFile._dbg", "tarfile.TarFile.getmember", "tarfile.TarFile._check"], "tarfile.TarFile.extractall.<lambda1>": [], "tarfile.TarFile.chown": ["<builtin>.hasattr", "pwd.getpwnam"], "tarfile.TarFile.utime": ["<builtin>.hasattr"], "tarfile.TarFile.chmod": [], "tarfile.TarFile._extract_member": ["tarfile.TarFile.chmod", "tarfile.TarFile.makelink", "posixpath.exists", "os.makedirs", "tarfile.TarFile.makedir", "tarfile.TarFile.makedev", "sys.base_prefix.rstrip", "tarfile.TarFile.utime", "tarfile.TarFile.chown", "tarfile.TarFile._dbg", "sys.path.replace", "tarfile.TarFile.makefifo", "tarfile.TarFile.makefile", "ntpath.exists", "sys.base_prefix.replace", "tarfile.TarFile.makeunknown", "ntpath.dirname", "sys.path.rstrip", "posixpath.dirname"], "tarfile.TarFile.extractfile": ["tarfile.TarFile._find_link_target", "<builtin>.isinstance", "tarfile.TarFile.extractfile", "tarfile.TarFile.getmember", "tarfile.ExFileObject.__init__", "tarfile.TarFile._check"], "tarfile.TarFile._find_link_target": ["ntpath.dirname", "<builtin>.KeyError", "posixpath.dirname", "tarfile.TarFile._getmember", "<builtin>.filter"], "sys.path.rstrip": [], "sys.base_prefix.rstrip": [], "tarfile.TarFile.makefile": ["tarfile._Stream.seek", "builtins.open", "tarfile.copyfileobj", "lzma.LZMAFile.seek", "gzip.GzipFile.seek", "bz2.BZ2File.seek"], "tarfile.TarFile.makedir": [], "tarfile.TarFile.makefifo": ["<builtin>.hasattr"], "tarfile.TarFile.makedev": ["<builtin>.hasattr"], "tarfile.TarFile.makelink": ["ntpath.exists", "tarfile.TarFile._find_link_target", "tarfile.TarFile._extract_member", "posixpath.exists"], "tarfile.TarFile.makeunknown": ["tarfile.TarFile.makefile", "tarfile.TarFile._dbg"], "tarfile.TarFile.__enter__": ["tarfile.TarFile._check"], "tarfile.TarFile.__exit__": ["bz2.BZ2File.close", "tarfile.TarFile.close", "tarfile._Stream.close", "lzma.LZMAFile.close", "gzip.GzipFile.close"], "tarfile.is_tarfile": ["tarfile.TarFile.open"], "lzma.LZMAFile": [], "lzma.LZMAFile.closed": [], "lzma.LZMAFile.fileno": ["_compression.BaseStream._check_not_closed", "sys.base_prefix.fileno", "sys.path.fileno"], "lzma.LZMAFile.peek": ["_compression.BaseStream._check_can_read"], "lzma.LZMAFile.read1": ["_compression.BaseStream._check_can_read"], "lzma.open": ["lzma.LZMAFile.__init__", "io.TextIOWrapper", "<builtin>.ValueError"], "lzma.compress": [], "lzma.decompress": [], "gzip.open": ["<builtin>.hasattr", "io.TextIOWrapper", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "gzip.GzipFile.__init__"], "gzip.write32u": ["gzip.GzipFile.write", "sys.base_prefix.write", "sys.stdout.buffer.write", "sys.stdin.buffer.write", "sys.path.write"], "sys.stdout.buffer.write": [], "sys.stdin.buffer.write": [], "gzip._PaddedFile": [], "gzip._PaddedFile.__init__": ["<builtin>.len"], "gzip._PaddedFile.read": [], "gzip._PaddedFile.prepend": ["<builtin>.len"], "gzip._PaddedFile.seek": [], "gzip._PaddedFile.seekable": [], "gzip.BadGzipFile": [], "gzip.GzipFile": [], "gzip._GzipReader.__init__": ["<builtin>.super", "gzip._PaddedFile.__init__"], "gzip.GzipFile._init_write": [], "gzip.GzipFile._write_gzip_header": ["time.time", "gzip.GzipFile.write", "posixpath.basename", "<builtin>.isinstance", "sys.base_prefix.write", "<builtin>.int", "gzip.write32u", "sys.stdout.buffer.write", "sys.stdin.buffer.write", "ntpath.basename", "<builtin>.chr", "sys.path.write"], "gzip.GzipFile.mtime": [], "gzip.GzipFile.__repr__": ["<builtin>.hex", "<builtin>.id", "<builtin>.repr"], "gzip.GzipFile.read1": ["_compression.BaseStream._check_not_closed", "<builtin>.OSError"], "gzip.GzipFile.peek": ["_compression.BaseStream._check_not_closed", "<builtin>.OSError"], "gzip.GzipFile.closed": [], "sys.stdout.buffer.flush": [], "sys.path.flush": [], "sys.stdin.buffer.flush": [], "logging.StreamHandler.flush": ["<builtin>.hasattr", "sys.stderr.flush", "logging.StreamHandler.flush", "logging.Handler.acquire", "logging.Handler.release"], "sys.base_prefix.flush": [], "gzip.GzipFile.fileno": ["gzip.GzipFile.fileno", "sys.base_prefix.fileno", "sys.stdout.buffer.fileno", "sys.stdin.buffer.fileno", "sys.path.fileno"], "sys.stdin.buffer.fileno": [], "sys.stdout.buffer.fileno": [], "gzip.GzipFile.rewind": ["<builtin>.OSError"], "gzip._GzipReader": [], "gzip._GzipReader._init_read": [], "gzip._GzipReader._read_exact": ["sys.base_prefix.read", "<builtin>.len", "<builtin>.EOFError", "sys.path.read"], "gzip._GzipReader._read_gzip_header": ["sys.base_prefix.read", "sys.path.read", "gzip._GzipReader._read_exact"], "gzip._GzipReader._read_eof": ["sys.path.prepend", "sys.base_prefix.prepend", "sys.path.read", "<builtin>.hex", "sys.base_prefix.read", "gzip._GzipReader._read_exact"], "sys.base_prefix.prepend": [], "sys.path.prepend": [], "gzip._GzipReader._add_read_data": ["<builtin>.len"], "gzip.compress": ["io.BytesIO", "gzip.GzipFile.__init__"], "io.BytesIO": [], "gzip.decompress": ["io.BytesIO", "gzip.GzipFile.__init__"], "sys.stdin.buffer.read": [], "sys.stdout.buffer.close": [], "sys.stdin.buffer.close": [], "zipfile.BadZipFile": [], "zipfile.LargeZipFile": [], "zipfile._strip_extra": ["<builtin>.len"], "zipfile._check_zipfile": ["zipfile._EndRecData"], "zipfile._EndRecData": ["zipfile.ZipFile.read", "<builtin>.list", "<builtin>.len", "<builtin>.max", "zipfile._EndRecData64", "zipfile._Tellable.tell"], "zipfile._EndRecData64": ["<builtin>.len", "zipfile.ZipFile.read"], "zipfile._Tellable.tell": [], "zipfile.ZipInfo": [], "zipfile.ZipInfo.__init__": ["<builtin>.ValueError", "sys.path.replace", "<builtin>.chr", "sys.base_prefix.replace", "sys.base_prefix.find", "sys.path.find"], "sys.base_prefix.find": [], "sys.path.find": [], "zipfile.ZipInfo.__repr__": ["zipfile.ZipInfo.is_dir", "stat.filemode"], "zipfile.ZipInfo.is_dir": [], "zipfile.ZipInfo.FileHeader": ["<builtin>.len", "zipfile.ZipInfo._encodeFilenameFlags", "<builtin>.max"], "zipfile.ZipInfo._encodeFilenameFlags": ["sys.path.encode", "sys.base_prefix.encode"], "sys.path.encode": [], "sys.base_prefix.encode": [], "zipfile.ZipInfo._decodeExtra": ["<builtin>.len"], "zipfile.ZipInfo.from_file": ["zipfile.ZipInfo.__init__", "<builtin>.isinstance", "posixpath.splitdrive", "posixpath.normpath", "stat.S_ISDIR", "time.localtime", "ntpath.splitdrive", "ntpath.normpath"], "zipfile._gen_crc": ["<builtin>.range"], "zipfile._ZipDecrypter": ["<builtin>.range", "zipfile._ZipDecrypter.update_keys", "<builtin>.map", "<builtin>.list"], "zipfile._ZipDecrypter.crc32": [], "zipfile._ZipDecrypter.update_keys": ["zipfile._ZipDecrypter.crc32"], "zipfile._ZipDecrypter.decrypter": ["<builtin>.bytearray", "<builtin>.bytes", "zipfile._ZipDecrypter.update_keys"], "zipfile.LZMACompressor": [], "zipfile.LZMACompressor.__init__": [], "zipfile.LZMACompressor._init": ["<builtin>.len"], "zipfile.LZMACompressor.compress": ["zipfile.LZMACompressor._init"], "zipfile.LZMACompressor.flush": ["zipfile.LZMACompressor._init"], "zipfile.LZMADecompressor": [], "zipfile.LZMADecompressor.__init__": [], "zipfile.LZMADecompressor.decompress": ["<builtin>.len"], "zipfile._check_compression": ["<builtin>.RuntimeError", "<builtin>.NotImplementedError"], "zipfile._get_compressor": ["zipfile.LZMACompressor.__init__"], "zipfile._get_decompressor": ["zipfile._check_compression", "<builtin>.NotImplementedError", "zipfile.LZMADecompressor.__init__"], "zipfile._SharedFile": [], "zipfile._SharedFile.__init__": [], "zipfile._SharedFile.seek": ["zipfile.ZipFile.open.<lambda1>", "<builtin>.ValueError", "zipfile._Tellable.tell"], "zipfile.ZipFile.open.<lambda1>": [], "zipfile._SharedFile.read": ["zipfile.ZipFile.read", "zipfile.ZipFile.open.<lambda1>", "<builtin>.ValueError", "zipfile._Tellable.tell"], "zipfile._SharedFile.close": ["zipfile.ZipFile._fpclose"], "zipfile.ZipFile._fpclose": ["zipfile._Tellable.close", "zipfile.ZipFile.close"], "zipfile._Tellable": [], "zipfile._Tellable.__init__": [], "zipfile._Tellable.write": ["zipfile._Tellable.write", "zipfile.ZipFile.write"], "zipfile.ZipFile.write": ["zipfile.ZipFile.open", "zipfile._Tellable.write", "<builtin>.ValueError", "zipfile.ZipFile.write", "zipfile.ZipFile._writecheck", "zipfile.ZipInfo.from_file", "shutil.copyfileobj", "zipfile._Tellable.tell"], "zipfile._Tellable.flush": ["zipfile._Tellable.flush"], "zipfile._Tellable.close": ["zipfile._Tellable.close", "zipfile.ZipFile.close"], "zipfile.ZipExtFile": [], "zipfile.ZipExtFile.__init__": ["<builtin>.hasattr", "<builtin>.RuntimeError", "zipfile._get_decompressor", "zipfile.ZipExtFile._init_decrypter", "zipfile._Tellable.tell"], "zipfile.ZipExtFile._init_decrypter": ["zipfile._SharedFile.read", "zipfile._ZipDecrypter", "zipfile._ZipDecrypter.decrypter"], "zipfile.ZipExtFile.__repr__": [], "zipfile.ZipExtFile.peek": ["<builtin>.len", "zipfile.ZipExtFile.read"], "zipfile.ZipExtFile.readable": [], "zipfile.ZipExtFile._read1": ["zipfile.ZipExtFile._read2", "zipfile.LZMADecompressor.decompress", "<builtin>.len", "<builtin>.max", "zipfile.ZipExtFile._update_crc"], "zipfile.ZipExtFile._update_crc": [], "zipfile.ZipExtFile.read1": ["zipfile.ZipExtFile._read1", "<builtin>.len"], "zipfile.ZipExtFile._read2": ["<builtin>.min", "zipfile._ZipDecrypter.decrypter", "<builtin>.len", "<builtin>.max", "zipfile._SharedFile.read"], "zipfile.ZipExtFile.seekable": [], "zipfile.ZipExtFile.tell": ["<builtin>.len", "io.UnsupportedOperation"], "zipfile._ZipWriteFile": [], "zipfile._ZipWriteFile.__init__": ["zipfile._get_compressor"], "zipfile._ZipWriteFile._fileobj": [], "zipfile._ZipWriteFile.writable": [], "sys.base_prefix.FileHeader": [], "sys.path.FileHeader": [], "zipfile.ZipFile": [], "zipfile.ZipFile._RealGetContents": ["zipfile.ZipInfo.__init__", "zipfile.ZipFile.read", "<builtin>.print", "io.BytesIO", "<builtin>.NotImplementedError", "<builtin>.len", "zipfile._EndRecData", "zipfile.ZipInfo._decodeExtra"], "zipfile.ZipFile.__enter__": [], "zipfile.ZipFile.__exit__": ["zipfile.ZipFile.close"], "zipfile.ZipFile.__repr__": [], "zipfile.ZipFile.namelist": [], "zipfile.ZipFile.printdir": ["<builtin>.print"], "zipfile.ZipFile.testzip": ["zipfile.ZipFile.open"], "zipfile.ZipFile.open": ["zipfile.ZipInfo.__init__", "zipfile._SharedFile.close", "zipfile.ZipFile.getinfo", "<builtin>.isinstance", "zipfile.ZipExtFile.__init__", "<builtin>.type", "<builtin>.ValueError", "zipfile.ZipFile._open_to_write", "zipfile._SharedFile.__init__", "<builtin>.TypeError", "<builtin>.len", "<builtin>.NotImplementedError", "<builtin>.RuntimeError", "zipfile._SharedFile.read"], "zipfile.ZipFile.getinfo": ["<builtin>.KeyError"], "zipfile.ZipFile.setpassword": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "zipfile.ZipFile._open_to_write": ["<builtin>.hasattr", "zipfile.ZipInfo.FileHeader", "sys.path.FileHeader", "zipfile._Tellable.write", "<builtin>.ValueError", "zipfile.ZipFile.write", "zipfile.ZipFile._writecheck", "zipfile._ZipWriteFile.__init__", "sys.base_prefix.FileHeader", "zipfile._Tellable.tell"], "zipfile.ZipFile.extract": ["zipfile.ZipFile._extract_member"], "zipfile.ZipFile._extract_member": ["zipfile.ZipFile.getinfo", "posixpath.join", "<builtin>.isinstance", "ntpath.join", "posixpath.splitdrive", "zipfile.ZipFile._sanitize_windows_name", "ntpath.dirname", "posixpath.normpath", "ntpath.exists", "zipfile.ZipFile.open", "ntpath.isdir", "posixpath.isdir", "posixpath.exists", "posixpath.dirname", "ntpath.splitdrive", "os.makedirs", "ntpath.normpath", "shutil.copyfileobj"], "zipfile.ZipFile.extractall": ["zipfile.ZipFile.namelist", "zipfile.ZipFile._extract_member", "zipfile.CompleteDirs.namelist"], "zipfile.CompleteDirs.namelist": ["zipfile.CompleteDirs._implied_dirs", "<builtin>.super", "<builtin>.list"], "zipfile.ZipFile._sanitize_windows_name": ["<builtin>.len"], "zipfile.ZipFile.writestr": ["time.time", "zipfile.ZipInfo.__init__", "<builtin>.isinstance", "zipfile.ZipFile.open", "<builtin>.ValueError", "time.localtime", "<builtin>.len"], "zipfile.ZipFile.__del__": ["zipfile.ZipFile.close"], "zipfile.ZipFile._write_end_record": ["<builtin>.min", "<builtin>.print", "zipfile._Tellable.write", "zipfile._strip_extra", "zipfile.ZipFile.write", "<builtin>.len", "<builtin>.max", "zipfile._Tellable.flush", "zipfile._Tellable.tell"], "zipfile.PyZipFile": [], "zipfile.PyZipFile.__init__": ["zipfile.ZipFile.__init__"], "zipfile.PyZipFile.writepy": ["posixpath.join", "ntpath.join", "ntpath.split", "posixpath.split", "zipfile.PyZipFile._get_codename", "<builtin>.print", "posixpath.isfile", "ntpath.isdir", "posixpath.isdir", "zipfile.ZipFile.write", "ntpath.splitext", "<builtin>.RuntimeError", "posixpath.splitext", "<builtin>.sorted", "ntpath.isfile", "zipfile.PyZipFile.writepy"], "zipfile.PyZipFile._get_codename": ["ntpath.split", "posixpath.split", "posixpath.isfile", "<builtin>.ValueError", "zipfile.PyZipFile._get_codename._compile", "ntpath.isfile"], "py_compile.compile": ["ntpath.dirname", "ntpath.islink", "ntpath.exists", "posixpath.islink", "py_compile.PyCompileError.__init__", "sys.stderr.write", "posixpath.isfile", "posixpath.exists", "posixpath.dirname", "py_compile._get_default_invalidation_mode", "os.makedirs", "<builtin>.FileExistsError", "ntpath.isfile"], "zipfile._parents": ["zipfile._ancestry", "itertools.islice"], "zipfile._ancestry": ["posixpath.split"], "zipfile._difference": ["<builtin>.set", "itertools.filterfalse"], "itertools.filterfalse": [], "zipfile.CompleteDirs": [], "zipfile.CompleteDirs._implied_dirs": ["zipfile._difference", "<builtin>.map", "itertools.chain.from_iterable"], "zipfile.CompleteDirs._name_set": ["zipfile.CompleteDirs.namelist", "<builtin>.set"], "zipfile.CompleteDirs.resolve_dir": ["zipfile.CompleteDirs._name_set"], "zipfile.CompleteDirs.make": ["zipfile.ZipFile.__init__", "<builtin>.isinstance", "<builtin>.vars"], "zipfile.FastLookup": [], "zipfile.FastLookup.namelist": ["contextlib.suppress.__init__", "<builtin>.super"], "zipfile.FastLookup._name_set": ["contextlib.suppress.__init__", "<builtin>.super"], "zipfile.Path": [], "zipfile.Path.__init__": ["zipfile.CompleteDirs.make"], "zipfile.Path.open": [], "zipfile.Path.name": ["posixpath.basename"], "zipfile.Path.read_text": ["zipfile.Path.open", "io.TextIOWrapper"], "zipfile.Path.read_bytes": ["zipfile.Path.open"], "zipfile.Path._is_child": ["posixpath.dirname"], "zipfile.Path._next": ["zipfile.Path.__init__"], "zipfile.Path.is_dir": [], "zipfile.Path.is_file": ["zipfile.Path.is_dir"], "zipfile.Path.exists": [], "zipfile.Path.iterdir": ["zipfile.Path.is_dir", "<builtin>.map", "<builtin>.ValueError", "<builtin>.filter"], "zipfile.Path.__str__": ["posixpath.join"], "zipfile.Path.__repr__": [], "zipfile.Path.joinpath": ["posixpath.join", "zipfile.Path._next"], "zipfile.Path.parent": ["posixpath.dirname", "zipfile.Path._next"], "zipfile.main.addToZip": ["posixpath.join", "ntpath.join", "posixpath.isfile", "ntpath.isdir", "posixpath.isdir", "<builtin>.sorted", "ntpath.isfile", "zipfile.main.addToZip"], "py_compile.PyCompileError": [], "py_compile.PyCompileError.__init__": ["traceback.format_exception_only"], "py_compile.PyCompileError.__str__": [], "py_compile.PycInvalidationMode": [], "py_compile._get_default_invalidation_mode": [], "<builtin>.FileExistsError": [], "py_compile.main": ["sys.stderr.write", "sys.stdin.readline", "py_compile.compile"], "importlib.util.source_hash": ["_imp.source_hash"], "_imp.source_hash": [], "importlib.util.resolve_name": ["_bootstrap._resolve_name", "<builtin>.ValueError", "<builtin>.repr"], "_bootstrap._resolve_name": [], "importlib.util._find_spec_from_path": ["<builtin>.ValueError", "_bootstrap._find_spec"], "_bootstrap._find_spec": [], "importlib.util.find_spec": ["<builtin>.__import__", "<builtin>.ValueError", "importlib.util.resolve_name", "<builtin>.ModuleNotFoundError", "_bootstrap._find_spec"], "<builtin>.ModuleNotFoundError": [], "importlib.util._module_to_load": ["sys.modules.get", "<builtin>.type"], "sys.modules.get": [], "importlib.util.set_package": ["functools.wraps", "_functools.partial"], "importlib.util.set_package.set_package_wrapper": ["<builtin>.getattr", "warnings.warn", "<builtin>.hasattr"], "importlib.util.set_loader": ["functools.wraps", "_functools.partial"], "importlib.util.set_loader.set_loader_wrapper": ["<builtin>.getattr", "warnings.warn"], "importlib.util.module_for_loader": ["functools.wraps", "warnings.warn", "_functools.partial"], "importlib.util.module_for_loader.module_for_loader_wrapper": ["importlib.util._module_to_load"], "importlib.util._LazyModule": [], "importlib.util._LazyModule.__getattribute__": ["<builtin>.getattr", "<builtin>.ValueError", "<builtin>.id"], "importlib.util._LazyModule.__delattr__": ["importlib.util._LazyModule.__getattribute__", "<builtin>.delattr"], "importlib.util.LazyLoader": [], "importlib.util.LazyLoader.__check_eager_loader": ["<builtin>.hasattr", "<builtin>.TypeError"], "importlib.util.LazyLoader.factory": ["importlib.util.LazyLoader.__check_eager_loader"], "importlib.util.LazyLoader.factory.<lambda1>": ["importlib.util.LazyLoader.__init__"], "importlib.util.LazyLoader.__init__": ["importlib.util.LazyLoader.__check_eager_loader"], "importlib.util.LazyLoader.create_module": [], "importlib.util.LazyLoader.exec_module": [], "importlib.machinery.all_suffixes": [], "importlib._bootstrap_external._make_relax_case": [], "importlib._bootstrap_external._make_relax_case._relax_case": [], "importlib._bootstrap_external._pack_uint32": ["<builtin>.int"], "importlib._bootstrap_external._unpack_uint32": ["<builtin>.len"], "importlib._bootstrap_external._unpack_uint16": ["<builtin>.len"], "importlib._bootstrap_external._path_join": [], "importlib._bootstrap_external._path_split": ["<builtin>.reversed", "<builtin>.len"], "importlib._bootstrap_external._path_stat": [], "importlib._bootstrap_external._path_is_mode_type": ["importlib._bootstrap_external._path_stat"], "importlib._bootstrap_external._path_isfile": ["importlib._bootstrap_external._path_is_mode_type"], "importlib._bootstrap_external._path_isdir": ["importlib._bootstrap_external._path_is_mode_type"], "importlib._bootstrap_external._path_isabs": [], "importlib._bootstrap_external._write_atomic": ["<builtin>.id"], "importlib._bootstrap_external.cache_from_source": ["<builtin>.str", "<builtin>.ValueError", "importlib._bootstrap_external._path_join", "<builtin>.NotImplementedError", "<builtin>.TypeError", "importlib._bootstrap_external._path_isabs", "importlib._bootstrap_external._path_split"], "importlib._bootstrap_external.source_from_cache": ["importlib._bootstrap_external._path_join", "<builtin>.ValueError", "<builtin>.NotImplementedError", "<builtin>.len", "importlib._bootstrap_external._path_split"], "importlib._bootstrap_external._get_sourcefile": ["importlib._bootstrap_external._path_isfile", "<builtin>.len", "importlib._bootstrap_external.source_from_cache"], "importlib._bootstrap_external._get_cached": ["<builtin>.tuple", "importlib._bootstrap_external.cache_from_source"], "importlib._bootstrap_external._calc_mode": ["importlib._bootstrap_external._path_stat"], "importlib._bootstrap_external._check_name": ["importlib._bootstrap_external._check_name._wrap"], "importlib._bootstrap_external._check_name._check_name_wrapper": ["importlib._bootstrap_external.FileLoader.get_resource_reader", "importlib._bootstrap_external.FileLoader.get_filename", "importlib._bootstrap_external.ExtensionFileLoader.get_filename", "<builtin>.ImportError", "importlib._bootstrap_external.FileLoader.load_module"], "importlib._bootstrap_external.FileLoader.get_resource_reader": [], "importlib._bootstrap_external.FileLoader.get_filename": [], "importlib._bootstrap_external.FileLoader.load_module": ["<builtin>.super"], "importlib._bootstrap_external.ExtensionFileLoader.get_filename": [], "importlib._bootstrap_external._check_name._wrap": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.setattr"], "importlib._bootstrap_external._find_module_shim": ["<builtin>.len"], "importlib._bootstrap_external._classify_pyc": ["<builtin>.len", "<builtin>.ImportError", "<builtin>.EOFError", "importlib._bootstrap_external._unpack_uint32"], "importlib._bootstrap_external._validate_timestamp_pyc": ["importlib._bootstrap_external._unpack_uint32", "<builtin>.ImportError"], "importlib._bootstrap_external._validate_hash_pyc": ["<builtin>.ImportError"], "importlib._bootstrap_external._compile_bytecode": ["<builtin>.ImportError", "<builtin>.isinstance"], "importlib._bootstrap_external._code_to_timestamp_pyc": ["importlib._bootstrap_external._pack_uint32", "<builtin>.bytearray"], "importlib._bootstrap_external._code_to_hash_pyc": ["importlib._bootstrap_external._pack_uint32", "<builtin>.bytearray", "<builtin>.len"], "importlib._bootstrap_external.spec_from_file_location": ["<builtin>.hasattr", "importlib._bootstrap_external.FileLoader.get_filename", "<builtin>.tuple", "importlib._bootstrap_external._get_supported_file_loaders", "importlib._bootstrap_external._path_split", "importlib._bootstrap_external._LoaderBasics.is_package"], "importlib._bootstrap_external._get_supported_file_loaders": [], "importlib._bootstrap_external._LoaderBasics.is_package": ["importlib._bootstrap_external._path_split"], "importlib._bootstrap_external.WindowsRegistryFinder": [], "importlib._bootstrap_external.WindowsRegistryFinder._open_registry": [], "importlib._bootstrap_external.WindowsRegistryFinder._search_registry": ["importlib._bootstrap_external.WindowsRegistryFinder._open_registry"], "importlib._bootstrap_external.WindowsRegistryFinder.find_spec": ["importlib._bootstrap_external._path_stat", "<builtin>.tuple", "importlib._bootstrap_external._get_supported_file_loaders", "importlib._bootstrap_external.WindowsRegistryFinder._search_registry"], "importlib._bootstrap_external.WindowsRegistryFinder.find_module": ["importlib._bootstrap_external.WindowsRegistryFinder.find_spec"], "importlib._bootstrap_external._LoaderBasics": [], "importlib._bootstrap_external._LoaderBasics.create_module": [], "importlib._bootstrap_external._LoaderBasics.exec_module": ["<builtin>.ImportError", "importlib._bootstrap_external.SourcelessFileLoader.get_code"], "importlib._bootstrap_external.SourcelessFileLoader.get_code": ["<builtin>.memoryview", "importlib._bootstrap_external.FileLoader.get_filename", "importlib._bootstrap_external.FileLoader.get_data", "importlib._bootstrap_external._classify_pyc", "importlib._bootstrap_external._compile_bytecode"], "importlib._bootstrap_external._LoaderBasics.load_module": [], "importlib._bootstrap_external.SourceLoader": [], "importlib._bootstrap_external.SourceLoader.path_mtime": [], "importlib._bootstrap_external.SourceLoader.path_stats": ["importlib._bootstrap_external.SourceLoader.path_mtime"], "importlib._bootstrap_external.SourceLoader._cache_bytecode": ["importlib._bootstrap_external.SourceFileLoader.set_data", "importlib._bootstrap_external.SourceLoader.set_data"], "importlib._bootstrap_external.SourceFileLoader.set_data": ["<builtin>.reversed", "importlib._bootstrap_external._path_join", "importlib._bootstrap_external._path_isdir", "importlib._bootstrap_external._path_split", "importlib._bootstrap_external._write_atomic"], "importlib._bootstrap_external.SourceLoader.set_data": [], "importlib._bootstrap_external.SourceLoader.get_source": ["importlib._bootstrap_external.decode_source", "<builtin>.ImportError"], "importlib._bootstrap_external.SourceLoader.source_to_code": [], "importlib._bootstrap_external.SourceLoader.get_code": ["<builtin>.memoryview", "importlib._bootstrap_external.SourceFileLoader._cache_bytecode", "importlib._bootstrap_external.SourceLoader._cache_bytecode", "<builtin>.int", "importlib._bootstrap_external._code_to_hash_pyc", "importlib._bootstrap_external.cache_from_source", "importlib._bootstrap_external._code_to_timestamp_pyc", "importlib._bootstrap_external._validate_timestamp_pyc", "importlib._bootstrap_external.SourceLoader.source_to_code", "importlib._bootstrap_external._classify_pyc", "<builtin>.len", "importlib._bootstrap_external._validate_hash_pyc", "importlib._bootstrap_external.SourceFileLoader.path_stats", "importlib._bootstrap_external.SourceLoader.path_stats", "importlib._bootstrap_external._compile_bytecode"], "importlib._bootstrap_external.SourceFileLoader.path_stats": ["importlib._bootstrap_external._path_stat"], "importlib._bootstrap_external.SourceFileLoader._cache_bytecode": ["importlib._bootstrap_external.SourceFileLoader.set_data", "importlib._bootstrap_external._calc_mode"], "importlib._bootstrap_external.FileLoader": ["importlib._bootstrap_external._check_name"], "importlib._bootstrap_external.FileLoader.__init__": [], "importlib._bootstrap_external.FileLoader.__eq__": [], "importlib._bootstrap_external.FileLoader.__hash__": ["<builtin>.hash"], "importlib._bootstrap_external.FileLoader.get_data": ["<builtin>.str", "<builtin>.isinstance"], "importlib._bootstrap_external.FileLoader.open_resource": ["importlib._bootstrap_external._path_split", "importlib._bootstrap_external._path_join"], "importlib._bootstrap_external.FileLoader.resource_path": ["importlib._bootstrap_external.FileLoader.is_resource", "importlib._bootstrap_external._path_split", "importlib._bootstrap_external._path_join"], "importlib._bootstrap_external.FileLoader.is_resource": ["importlib._bootstrap_external._path_isfile", "importlib._bootstrap_external._path_split", "importlib._bootstrap_external._path_join"], "importlib._bootstrap_external.FileLoader.contents": ["importlib._bootstrap_external._path_split", "<builtin>.iter"], "importlib._bootstrap_external.SourceFileLoader": [], "importlib._bootstrap_external.SourcelessFileLoader": [], "importlib._bootstrap_external.SourcelessFileLoader.get_source": [], "importlib._bootstrap_external.ExtensionFileLoader": ["importlib._bootstrap_external._check_name"], "importlib._bootstrap_external.ExtensionFileLoader.__init__": [], "importlib._bootstrap_external.ExtensionFileLoader.__eq__": [], "importlib._bootstrap_external.ExtensionFileLoader.__hash__": ["<builtin>.hash"], "importlib._bootstrap_external.ExtensionFileLoader.create_module": [], "importlib._bootstrap_external.ExtensionFileLoader.exec_module": [], "importlib._bootstrap_external.ExtensionFileLoader.is_package": ["importlib._bootstrap_external._path_split", "<builtin>.any"], "importlib._bootstrap_external.ExtensionFileLoader.get_code": [], "importlib._bootstrap_external.ExtensionFileLoader.get_source": [], "importlib._bootstrap_external._NamespacePath": [], "importlib._bootstrap_external._NamespacePath.__init__": ["importlib._bootstrap_external._NamespacePath._get_parent_path", "<builtin>.tuple"], "importlib._bootstrap_external._NamespacePath._get_parent_path": ["<builtin>.getattr", "importlib._bootstrap_external._NamespacePath._find_parent_path_names"], "importlib._bootstrap_external._NamespacePath._find_parent_path_names": [], "importlib._bootstrap_external._NamespacePath._recalculate": ["importlib._bootstrap_external._NamespacePath._get_parent_path", "<builtin>.tuple", "importlib._bootstrap_external.PathFinder._get_spec"], "importlib._bootstrap_external.PathFinder._get_spec": ["<builtin>.hasattr", "importlib._bootstrap_external.PathFinder._legacy_get_spec", "<builtin>.isinstance", "<builtin>.ImportError", "importlib._bootstrap_external.PathFinder._path_importer_cache"], "importlib._bootstrap_external._NamespacePath.__iter__": ["importlib._bootstrap_external._NamespacePath._recalculate", "<builtin>.iter"], "importlib._bootstrap_external._NamespacePath.__getitem__": ["importlib._bootstrap_external._NamespacePath._recalculate"], "importlib._bootstrap_external._NamespacePath.__setitem__": [], "importlib._bootstrap_external._NamespacePath.__len__": ["<builtin>.len", "importlib._bootstrap_external._NamespacePath._recalculate"], "importlib._bootstrap_external._NamespacePath.__repr__": [], "importlib._bootstrap_external._NamespacePath.__contains__": ["importlib._bootstrap_external._NamespacePath._recalculate"], "importlib._bootstrap_external._NamespacePath.append": [], "importlib._bootstrap_external._NamespaceLoader": [], "importlib._bootstrap_external._NamespaceLoader.__init__": ["importlib._bootstrap_external._NamespacePath.__init__"], "importlib._bootstrap_external._NamespaceLoader.module_repr": [], "importlib._bootstrap_external._NamespaceLoader.is_package": [], "importlib._bootstrap_external._NamespaceLoader.get_source": [], "importlib._bootstrap_external._NamespaceLoader.get_code": ["<builtin>.compile"], "importlib._bootstrap_external._NamespaceLoader.create_module": [], "importlib._bootstrap_external._NamespaceLoader.exec_module": [], "importlib._bootstrap_external._NamespaceLoader.load_module": [], "importlib._bootstrap_external.PathFinder": [], "importlib._bootstrap_external.PathFinder.invalidate_caches": ["<builtin>.hasattr", "<builtin>.list"], "importlib._bootstrap_external.PathFinder._path_hooks": [], "importlib._bootstrap_external.PathFinder._path_importer_cache": ["importlib._bootstrap_external.PathFinder._path_hooks"], "importlib._bootstrap_external.PathFinder._legacy_get_spec": ["<builtin>.hasattr"], "importlib._bootstrap_external.PathFinder.find_spec": ["importlib._bootstrap_external._NamespacePath.__init__", "importlib._bootstrap_external.PathFinder._get_spec"], "importlib._bootstrap_external.PathFinder.find_module": ["importlib._bootstrap_external.PathFinder.find_spec"], "importlib.metadata.MetadataPathFinder.find_distributions": ["<builtin>.map", "importlib.metadata.MetadataPathFinder._search_paths"], "importlib._bootstrap_external.FileFinder": [], "importlib._bootstrap_external.FileFinder.__init__": ["<builtin>.set"], "importlib._bootstrap_external.FileFinder.invalidate_caches": [], "importlib._bootstrap_external.FileFinder.find_loader": ["importlib._bootstrap_external.FileFinder.find_spec"], "importlib._bootstrap_external.FileFinder.find_spec": ["importlib._bootstrap_external._path_join", "importlib._bootstrap_external.FileFinder._get_spec", "importlib._bootstrap_external.FileFinder._fill_cache", "importlib._bootstrap_external._path_stat", "importlib._bootstrap_external._path_isfile"], "importlib._bootstrap_external.FileFinder._get_spec": ["importlib._bootstrap_external.spec_from_file_location"], "importlib._bootstrap_external.FileFinder._fill_cache": ["<builtin>.set"], "importlib._bootstrap_external.FileFinder.path_hook": [], "importlib._bootstrap_external.FileFinder.path_hook.path_hook_for_FileFinder": ["importlib._bootstrap_external._path_isdir", "<builtin>.ImportError", "importlib._bootstrap_external.FileFinder.__init__"], "importlib._bootstrap_external.FileFinder.__repr__": [], "importlib._bootstrap_external._fix_up_module": ["importlib._bootstrap_external.spec_from_file_location", "importlib._bootstrap_external.FileLoader.__init__"], "importlib._bootstrap_external._setup": ["<builtin>.len", "importlib._bootstrap_external._make_relax_case", "<builtin>.all", "<builtin>.setattr"], "importlib._bootstrap_external._install": ["importlib._bootstrap_external._setup", "importlib._bootstrap_external._get_supported_file_loaders"], "importlib.metadata.PackageNotFoundError": [], "importlib.metadata.EntryPoint": ["re.compile"], "importlib.metadata.EntryPoint.load": ["<builtin>.filter", "functools.reduce", "importlib.import_module"], "importlib.import_module": ["<builtin>.TypeError", "_frozen_importlib._gcd_import", "_bootstrap._gcd_import"], "importlib.metadata.EntryPoint.extras": ["re.finditer", "<builtin>.list"], "importlib.metadata.EntryPoint._from_config": ["configparser.RawConfigParser.items", "configparser.RawConfigParser.sections"], "configparser.RawConfigParser.sections": ["<builtin>.list"], "configparser.RawConfigParser.items": ["configparser.NoSectionError.__init__", "configparser.RawConfigParser.optionxform", "<builtin>.list", "configparser.RawConfigParser.items.<lambda2>", "<builtin>.super", "configparser.RawConfigParser.items.<lambda1>"], "importlib.metadata.EntryPoint._from_text": ["configparser.RawConfigParser.read_string", "configparser.RawConfigParser.__init__", "configparser.RawConfigParser.readfp", "importlib.metadata.EntryPoint._from_config", "io.StringIO"], "configparser.RawConfigParser.__init__": ["<builtin>.tuple", "configparser.RawConfigParser._read_defaults", "re.compile", "configparser.SectionProxy.__init__", "configparser.ConfigParser._read_defaults", "re.escape", "configparser.ConverterMapping.__init__"], "configparser.RawConfigParser.read_string": ["configparser.RawConfigParser.read_file", "io.StringIO"], "io.StringIO": [], "configparser.RawConfigParser.readfp": ["configparser.RawConfigParser.read_file", "warnings.warn"], "importlib.metadata.EntryPoint.__iter__": ["<builtin>.iter"], "importlib.metadata.EntryPoint.__reduce__": [], "importlib.metadata.PackagePath": [], "importlib.metadata.PackagePath.read_text": ["importlib.metadata.PackagePath.locate"], "importlib.metadata.PackagePath.locate": ["importlib.metadata.Distribution.locate_file", "importlib.metadata.PathDistribution.locate_file"], "importlib.metadata.PackagePath.read_binary": ["importlib.metadata.PackagePath.locate"], "importlib.metadata.Distribution.locate_file": [], "importlib.metadata.PathDistribution.locate_file": [], "importlib.metadata.FileHash": [], "importlib.metadata.FileHash.__init__": [], "importlib.metadata.FileHash.__repr__": [], "importlib.metadata.Distribution": ["abc.abstractmethod"], "importlib.metadata.Distribution.read_text": [], "importlib.metadata.Distribution.from_name": ["importlib.metadata.DistributionFinder.Context.__init__", "<builtin>.next", "importlib.metadata.Distribution._discover_resolvers"], "importlib.metadata.Distribution._discover_resolvers": ["<builtin>.filter", "<builtin>.getattr"], "importlib.metadata.DistributionFinder.Context.__init__": ["<builtin>.vars"], "importlib.metadata.Distribution.discover": ["importlib.metadata.DistributionFinder.Context.__init__", "itertools.chain.from_iterable", "<builtin>.ValueError", "importlib.metadata.Distribution._discover_resolvers"], "importlib.metadata.Distribution.at": ["importlib.metadata.PathDistribution.__init__"], "importlib.metadata.PathDistribution.__init__": [], "importlib.metadata.Distribution.metadata": ["importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text", "email.message_from_string"], "importlib.metadata.PathDistribution.read_text": ["contextlib.suppress.__init__", "pathlib.PurePath.joinpath"], "importlib.metadata.Distribution.version": [], "importlib.metadata.Distribution.entry_points": ["importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text", "importlib.metadata.EntryPoint._from_text"], "importlib.metadata.Distribution.files": ["itertools.starmap", "importlib.metadata.Distribution._read_files_egginfo", "importlib.metadata.Distribution._read_files_distinfo", "<builtin>.list"], "importlib.metadata.Distribution._read_files_distinfo": ["importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text"], "importlib.metadata.Distribution._read_files_egginfo": ["importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text", "<builtin>.map"], "importlib.metadata.Distribution.files.make_file": ["<builtin>.int", "importlib.metadata.FileHash.__init__"], "importlib.metadata.Distribution.requires": ["importlib.metadata.Distribution._read_egg_info_reqs", "importlib.metadata.Distribution._read_dist_info_reqs", "<builtin>.list"], "importlib.metadata.Distribution._read_dist_info_reqs": [], "importlib.metadata.Distribution._read_egg_info_reqs": ["importlib.metadata.Distribution._deps_from_requires_text", "importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text"], "importlib.metadata.Distribution._deps_from_requires_text": ["<builtin>.map", "importlib.metadata.Distribution._read_sections", "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs", "<builtin>.list", "itertools.groupby", "operator.itemgetter.__init__"], "importlib.metadata.Distribution._read_sections": ["<builtin>.filter", "<builtin>.locals", "re.match"], "itertools.groupby": [], "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs": ["importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition"], "<builtin>.locals": [], "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.make_condition": [], "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition": ["<builtin>.filter", "<builtin>.list"], "importlib.metadata.DistributionFinder": ["importlib.metadata.DistributionFinder.Context", "abc.abstractmethod"], "importlib.metadata.DistributionFinder.Context": [], "importlib.metadata.DistributionFinder.Context.path": ["<builtin>.vars"], "importlib.metadata.DistributionFinder.find_distributions": [], "importlib.metadata.FastPath": [], "importlib.metadata.FastPath.__init__": ["posixpath.basename", "ntpath.basename"], "importlib.metadata.FastPath.joinpath": [], "importlib.metadata.FastPath.children": ["contextlib.suppress.__init__", "importlib.metadata.FastPath.zip_children"], "importlib.metadata.FastPath.zip_children": ["posixpath.split", "zipfile.Path.__init__"], "importlib.metadata.FastPath.is_egg": [], "importlib.metadata.FastPath.search": ["importlib.metadata.FastPath.is_egg", "zipfile.Path.joinpath", "importlib.metadata.FastPath.children"], "importlib.metadata.Prepared": [], "importlib.metadata.Prepared.__init__": [], "importlib.metadata.MetadataPathFinder": [], "importlib.metadata.MetadataPathFinder._search_paths": ["importlib.metadata.Prepared.__init__", "<builtin>.map", "itertools.chain.from_iterable"], "importlib.metadata.PathDistribution": [], "pathlib.PurePath.joinpath": ["pathlib.PurePath._make_child"], "importlib.metadata.distribution": ["importlib.metadata.Distribution.from_name"], "importlib.metadata.distributions": ["importlib.metadata.Distribution.discover"], "importlib.metadata.metadata": ["importlib.metadata.Distribution.from_name"], "importlib.metadata.version": ["importlib.metadata.distribution"], "importlib.metadata.entry_points": ["<builtin>.tuple", "itertools.chain.from_iterable", "operator.attrgetter.__init__", "importlib.metadata.distributions", "<builtin>.sorted", "itertools.groupby"], "importlib.metadata.files": ["importlib.metadata.distribution"], "importlib.metadata.requires": ["importlib.metadata.distribution"], "configparser.Error": [], "configparser.Error.__init__": [], "configparser.Error.__repr__": [], "configparser.NoSectionError": [], "configparser.NoSectionError.__init__": ["configparser.Error.__init__"], "configparser.DuplicateSectionError": [], "configparser.DuplicateSectionError.__init__": ["configparser.Error.__init__", "<builtin>.repr"], "configparser.DuplicateOptionError": [], "configparser.DuplicateOptionError.__init__": ["configparser.Error.__init__", "<builtin>.repr"], "configparser.NoOptionError": [], "configparser.NoOptionError.__init__": ["configparser.Error.__init__"], "configparser.InterpolationError": [], "configparser.InterpolationError.__init__": ["configparser.Error.__init__"], "configparser.InterpolationMissingOptionError": [], "configparser.InterpolationMissingOptionError.__init__": ["configparser.InterpolationError.__init__"], "configparser.InterpolationSyntaxError": [], "configparser.InterpolationDepthError": [], "configparser.InterpolationDepthError.__init__": ["configparser.InterpolationError.__init__"], "configparser.ParsingError": [], "configparser.ParsingError.__init__": ["configparser.Error.__init__", "<builtin>.ValueError"], "configparser.ParsingError.filename": ["warnings.warn"], "configparser.ParsingError.append": [], "configparser.MissingSectionHeaderError": [], "configparser.MissingSectionHeaderError.__init__": ["configparser.Error.__init__"], "configparser.Interpolation": [], "configparser.Interpolation.before_get": [], "configparser.Interpolation.before_set": [], "configparser.Interpolation.before_read": [], "configparser.Interpolation.before_write": [], "configparser.BasicInterpolation": ["re.compile"], "configparser.BasicInterpolation.before_get": ["configparser.BasicInterpolation._interpolate_some"], "configparser.BasicInterpolation._interpolate_some": ["configparser.RawConfigParser.optionxform", "configparser.RawConfigParser.get", "configparser.BasicInterpolation._interpolate_some", "configparser.InterpolationDepthError.__init__", "configparser.InterpolationMissingOptionError.__init__", "configparser.InterpolationError.__init__"], "configparser.BasicInterpolation.before_set": ["<builtin>.ValueError"], "configparser.RawConfigParser.get": ["configparser.RawConfigParser.optionxform", "configparser.NoOptionError.__init__", "configparser.BasicInterpolation.before_get", "configparser.Interpolation.before_get", "configparser.RawConfigParser._unify_values"], "configparser.RawConfigParser.optionxform": [], "configparser.ExtendedInterpolation": ["re.compile"], "configparser.ExtendedInterpolation.before_get": ["configparser.ExtendedInterpolation._interpolate_some"], "configparser.ExtendedInterpolation._interpolate_some": ["configparser.ExtendedInterpolation._interpolate_some", "<builtin>.dict", "<builtin>.len", "configparser.InterpolationDepthError.__init__", "configparser.InterpolationMissingOptionError.__init__", "configparser.InterpolationError.__init__"], "configparser.ExtendedInterpolation.before_set": ["<builtin>.ValueError"], "configparser.LegacyInterpolation": ["re.compile"], "configparser.LegacyInterpolation.before_get": ["configparser.InterpolationDepthError.__init__", "configparser.InterpolationMissingOptionError.__init__"], "configparser.LegacyInterpolation.before_set": [], "configparser.LegacyInterpolation._interpolation_replace": [], "configparser.RawConfigParser": ["re.compile"], "configparser.ConverterMapping.__init__": ["<builtin>.callable", "<builtin>.getattr", "<builtin>.dir"], "configparser.SectionProxy.__init__": ["<builtin>.getattr", "<builtin>.setattr"], "configparser.RawConfigParser._read_defaults": ["configparser.RawConfigParser.optionxform"], "configparser.ConfigParser._read_defaults": ["configparser.RawConfigParser.read_dict"], "configparser.RawConfigParser.defaults": [], "configparser.RawConfigParser.add_section": ["configparser.SectionProxy.__init__", "configparser.DuplicateSectionError.__init__", "<builtin>.ValueError"], "configparser.RawConfigParser.has_section": [], "configparser.RawConfigParser.options": ["configparser.NoSectionError.__init__", "<builtin>.list"], "configparser.RawConfigParser.read": ["configparser.RawConfigParser._read", "<builtin>.open", "<builtin>.isinstance"], "configparser.RawConfigParser._read": ["configparser.RawConfigParser.optionxform", "<builtin>.min", "configparser.RawConfigParser._handle_error", "configparser.RawConfigParser.set", "configparser.ParsingError.__init__", "configparser.DuplicateOptionError.__init__", "configparser.RawConfigParser._join_multiline_values", "configparser.SectionProxy.__init__", "configparser.DuplicateSectionError.__init__", "<builtin>.enumerate", "configparser.MissingSectionHeaderError.__init__", "configparser.ConfigParser.set"], "configparser.RawConfigParser.read_file": ["configparser.RawConfigParser._read"], "configparser.RawConfigParser.read_dict": ["configparser.RawConfigParser.add_section", "configparser.RawConfigParser.optionxform", "configparser.RawConfigParser.set", "<builtin>.str", "configparser.DuplicateOptionError.__init__", "configparser.ConfigParser.add_section", "configparser.ConfigParser.set"], "configparser.RawConfigParser.set": ["configparser.NoSectionError.__init__", "configparser.RawConfigParser.optionxform", "configparser.BasicInterpolation.before_set", "configparser.Interpolation.before_set"], "configparser.ConfigParser.set": ["configparser.RawConfigParser._validate_value_types", "<builtin>.super"], "configparser.ConfigParser.add_section": ["configparser.RawConfigParser._validate_value_types", "<builtin>.super"], "configparser.RawConfigParser._unify_values": ["<builtin>.str", "collections.ChainMap.__init__", "configparser.NoSectionError.__init__", "configparser.RawConfigParser.optionxform"], "configparser.RawConfigParser._get": ["configparser.RawConfigParser.get", "configparser.RawConfigParser._convert_to_boolean"], "configparser.RawConfigParser._convert_to_boolean": ["<builtin>.ValueError"], "configparser.RawConfigParser._get_conv": ["configparser.RawConfigParser._get"], "configparser.RawConfigParser.getint": ["configparser.RawConfigParser._get_conv"], "configparser.RawConfigParser.getfloat": ["configparser.RawConfigParser._get_conv"], "configparser.RawConfigParser.getboolean": ["configparser.RawConfigParser._get_conv"], "configparser.RawConfigParser.items.<lambda1>": ["configparser.Interpolation.before_get", "configparser.BasicInterpolation.before_get"], "configparser.RawConfigParser.items.<lambda2>": [], "configparser.RawConfigParser.popitem": ["configparser.RawConfigParser.sections"], "configparser.RawConfigParser.has_option": ["configparser.RawConfigParser.optionxform"], "configparser.RawConfigParser.write": ["configparser.RawConfigParser._write_section"], "configparser.RawConfigParser._write_section": ["configparser.Interpolation.before_write", "<builtin>.str"], "configparser.RawConfigParser.remove_option": ["configparser.NoSectionError.__init__", "configparser.RawConfigParser.optionxform"], "configparser.RawConfigParser.remove_section": [], "configparser.RawConfigParser.__getitem__": ["configparser.RawConfigParser.has_section", "<builtin>.KeyError"], "configparser.RawConfigParser.__setitem__": ["configparser.RawConfigParser.read_dict"], "configparser.RawConfigParser.__delitem__": ["configparser.RawConfigParser.has_section", "<builtin>.ValueError", "<builtin>.KeyError", "configparser.RawConfigParser.remove_section"], "configparser.RawConfigParser.__contains__": ["configparser.RawConfigParser.has_section"], "configparser.RawConfigParser.__len__": ["<builtin>.len"], "configparser.RawConfigParser.__iter__": ["itertools.chain"], "configparser.RawConfigParser._handle_error": ["configparser.ParsingError.append", "configparser.ParsingError.__init__", "<builtin>.repr"], "configparser.RawConfigParser._join_multiline_values": ["configparser.Interpolation.before_read", "itertools.chain", "<builtin>.isinstance"], "configparser.RawConfigParser._validate_value_types": ["<builtin>.TypeError", "<builtin>.isinstance"], "configparser.RawConfigParser.converters": [], "configparser.ConfigParser": [], "configparser.SafeConfigParser": [], "configparser.SafeConfigParser.__init__": ["warnings.warn", "<builtin>.super"], "configparser.SectionProxy": [], "configparser.SectionProxy.__repr__": [], "configparser.SectionProxy.__getitem__": ["configparser.RawConfigParser.has_option", "<builtin>.KeyError", "configparser.RawConfigParser.get"], "configparser.SectionProxy.__setitem__": ["configparser.RawConfigParser.set", "configparser.RawConfigParser._validate_value_types", "configparser.ConfigParser.set"], "configparser.SectionProxy.__delitem__": ["configparser.RawConfigParser.remove_option", "configparser.RawConfigParser.has_option", "<builtin>.KeyError"], "configparser.SectionProxy.__contains__": ["configparser.RawConfigParser.has_option"], "configparser.SectionProxy.__len__": ["configparser.SectionProxy._options", "<builtin>.len"], "configparser.SectionProxy._options": ["configparser.RawConfigParser.options", "configparser.RawConfigParser.defaults"], "configparser.SectionProxy.__iter__": ["configparser.SectionProxy._options"], "configparser.SectionProxy.parser": [], "configparser.SectionProxy.name": [], "configparser.SectionProxy.get": ["configparser.RawConfigParser.get"], "configparser.ConverterMapping": ["re.compile"], "configparser.ConverterMapping.__getitem__": [], "configparser.ConverterMapping.__setitem__": ["<builtin>.type", "<builtin>.ValueError", "<builtin>.setattr"], "configparser.ConverterMapping.__delitem__": ["<builtin>.delattr", "itertools.chain", "<builtin>.KeyError"], "configparser.ConverterMapping.__iter__": ["<builtin>.iter"], "configparser.ConverterMapping.__len__": ["<builtin>.len"], "email.parser.Parser.__init__": [], "email.parser.Parser.parsestr": ["_io.StringIO", "email.parser.Parser.parse"], "email.parser.BytesParser.__init__": ["email.parser.Parser.__init__"], "email.parser.BytesParser.parsebytes": ["email.parser.Parser.parsestr"], "email.parser.Parser.parse": ["email.feedparser.FeedParser.__init__", "_io._IOBase.read", "email.feedparser.FeedParser.close", "_compression.DecompressReader.read", "zipfile.ZipExtFile.read", "http.client.HTTPResponse.read", "lzma.LZMAFile.read", "email.feedparser.FeedParser._set_headersonly", "bz2.BZ2File.read", "email.feedparser.FeedParser.feed", "sys.stdout.read", "gzip._GzipReader.read", "gzip.GzipFile.read"], "email.parser.BytesParser.parse": ["sys.stdout.detach", "email.parser.Parser.parse", "_io._BufferedIOBase.detach", "_io.TextIOWrapper"], "email.parser.Parser": [], "email.feedparser.FeedParser._set_headersonly": [], "email.feedparser.FeedParser.feed": ["email.feedparser.FeedParser._call_parse", "email.feedparser.BufferedSubFile.push"], "email.feedparser.FeedParser.close": ["email.errors.MessageDefect.__init__", "email.feedparser.FeedParser._pop_message", "email.feedparser.BufferedSubFile.close", "email.feedparser.FeedParser._call_parse", "email._policybase.Policy.handle_defect"], "_io.StringIO": [], "email.parser.HeaderParser": [], "email.parser.HeaderParser.parse": ["email.parser.Parser.parse"], "email.parser.HeaderParser.parsestr": ["email.parser.Parser.parsestr"], "email.parser.BytesParser": [], "sys.stdout.detach": [], "_io._BufferedIOBase.detach": [], "email.parser.BytesHeaderParser": [], "email.parser.BytesHeaderParser.parse": ["email.parser.BytesParser.parse"], "email.parser.BytesHeaderParser.parsebytes": ["email.parser.BytesParser.parsebytes"], "email._policybase._PolicyBase": [], "email._policybase._PolicyBase.__init__": ["<builtin>.hasattr", "<builtin>.TypeError", "<builtin>.super"], "email._policybase._PolicyBase.__repr__": [], "email._policybase._PolicyBase.clone": ["<builtin>.hasattr", "<builtin>.TypeError"], "email._policybase._PolicyBase.__setattr__": ["<builtin>.hasattr", "<builtin>.AttributeError"], "email._policybase._PolicyBase.__add__": ["email._policybase._PolicyBase.clone"], "email._policybase._append_doc": [], "email._policybase._extend_docstrings": ["<builtin>.getattr", "email._policybase._append_doc"], "email._policybase.Policy": ["abc.abstractmethod"], "email._policybase.Policy.handle_defect": ["email.errors.HeaderDefect.__init__", "email.errors.MessageDefect.__init__", "email._policybase.Policy.register_defect"], "email.errors.MessageDefect.__init__": ["<builtin>.super"], "email.errors.HeaderDefect.__init__": ["<builtin>.super"], "email._policybase.Policy.register_defect": [], "email._policybase.Policy.header_max_count": [], "email._policybase.Policy.header_source_parse": [], "email._policybase.Policy.header_store_parse": [], "email._policybase.Policy.header_fetch_parse": [], "email._policybase.Policy.fold": [], "email._policybase.Policy.fold_binary": [], "email._policybase.Compat32": [], "email._policybase.Compat32._sanitize_header": ["email.utils._has_surrogates", "email.header.Header.__init__", "<builtin>.isinstance"], "email.utils._has_surrogates": [], "email.header.Header.__init__": ["email.charset.Charset.__init__", "<builtin>.len", "email.header.Header.append", "<builtin>.isinstance"], "email._policybase.Compat32.header_source_parse": [], "email._policybase.Compat32.header_store_parse": [], "email._policybase.Compat32.header_fetch_parse": ["email._policybase.Compat32._sanitize_header"], "email._policybase.Compat32.fold": ["email._policybase.Compat32._fold"], "email._policybase.Compat32._fold": ["email.utils._has_surrogates", "email.header.Header.__init__", "<builtin>.isinstance", "email.header.Header.encode"], "email._policybase.Compat32.fold_binary": ["email._policybase.Compat32._fold"], "email.header.Header.encode": ["email.header.Header._nonctext", "email.header._ValueFormatter.feed", "email.header._ValueFormatter._str", "email.header.Header._normalize", "email.header._ValueFormatter.add_transition", "<builtin>.len", "email.header._ValueFormatter.__init__", "email.header._ValueFormatter.newline"], "email.charset.add_charset": ["<builtin>.ValueError"], "email.charset.add_alias": [], "email.charset.add_codec": [], "email.charset._encode": [], "email.charset.Charset": [], "email.charset.Charset.__init__": ["<builtin>.str", "<builtin>.isinstance"], "email.charset.Charset.__repr__": [], "email.charset.Charset.__eq__": ["<builtin>.str"], "email.charset.Charset.get_body_encoding": [], "email.charset.Charset.get_output_charset": [], "email.charset.Charset.header_encode": ["email.charset.Charset._get_encoder", "email.charset._encode"], "email.charset.Charset._get_encoder": [], "email.charset.Charset.header_encode_lines": ["<builtin>.next", "email.charset._encode", "email.charset.Charset.get_output_charset", "<builtin>.len", "email.charset.Charset._get_encoder", "_functools.partial"], "email.charset.Charset.body_encode": ["<builtin>.isinstance"], "email.encoders._qencode": ["quopri.encodestring"], "email.encoders.encode_base64": ["<builtin>.str", "base64.encodebytes"], "base64.encodebytes": ["<builtin>.len", "<builtin>.range", "base64._input_type_check"], "email.encoders.encode_quopri": ["email.encoders._qencode"], "email.encoders.encode_7or8bit": [], "email.encoders.encode_noop": [], "quopri.needsquoting": ["<builtin>.isinstance"], "quopri.quote": ["<builtin>.ord", "<builtin>.len", "<builtin>.bytes", "<builtin>.isinstance"], "quopri.encode": ["sys.stdin.buffer.readline", "quopri.needsquoting", "<builtin>.len", "sys.stdout.buffer.write", "<builtin>.bytes", "quopri.quote", "sys.stdin.buffer.read", "quopri.encode.write"], "quopri.encode.write": ["sys.stdout.buffer.write", "quopri.quote"], "sys.stdin.buffer.readline": [], "_io.BytesIO": [], "quopri.decode": ["sys.stdin.buffer.readline", "quopri.ishex", "quopri.unhex", "<builtin>.len", "sys.stdout.buffer.write", "<builtin>.bytes", "sys.stdin.buffer.read"], "quopri.ishex": ["<builtin>.isinstance"], "quopri.unhex": ["<builtin>.ord", "<builtin>.bytes", "<builtin>.repr"], "getopt._": [], "getopt.GetoptError": [], "getopt.GetoptError.__init__": [], "getopt.GetoptError.__str__": [], "getopt.getopt": ["getopt.do_longs", "getopt.do_shorts", "<builtin>.type", "<builtin>.list"], "getopt.do_longs": ["getopt.long_has_args", "gettext.gettext", "getopt.GetoptError.__init__"], "getopt.do_shorts": ["getopt.short_has_arg", "gettext.gettext", "getopt.GetoptError.__init__"], "getopt.gnu_getopt": ["getopt.do_longs", "getopt.do_shorts", "<builtin>.isinstance", "<builtin>.list"], "getopt.long_has_args": ["<builtin>.len", "gettext.gettext", "getopt.GetoptError.__init__"], "getopt.short_has_arg": ["<builtin>.len", "<builtin>.range", "gettext.gettext", "getopt.GetoptError.__init__"], "base64._bytes_from_decode_data": ["<builtin>.memoryview", "<builtin>.ValueError", "<builtin>.isinstance", "<builtin>.TypeError"], "base64.b64encode": ["<builtin>.len", "<builtin>.repr"], "base64.b64decode": ["re.fullmatch", "<builtin>.len", "base64._bytes_from_decode_data", "<builtin>.repr"], "base64.standard_b64encode": ["base64.b64encode"], "base64.standard_b64decode": ["base64.b64decode"], "base64.urlsafe_b64encode": ["base64.b64encode"], "base64.urlsafe_b64decode": ["base64._bytes_from_decode_data", "base64.b64decode"], "base64.b32encode": ["<builtin>.memoryview", "<builtin>.isinstance", "<builtin>.len", "<builtin>.bytearray", "<builtin>.bytes", "<builtin>.range"], "base64.b32decode": ["base64._bytes_from_decode_data", "<builtin>.len", "<builtin>.bytearray", "<builtin>.enumerate", "<builtin>.range", "<builtin>.bytes", "<builtin>.repr"], "base64.b16encode": [], "base64.b16decode": ["re.search", "base64._bytes_from_decode_data"], "base64._85encode": ["<builtin>.memoryview", "<builtin>.len", "<builtin>.isinstance"], "base64.a85encode": ["base64._85encode", "<builtin>.len", "<builtin>.range", "<builtin>.bytes", "<builtin>.max"], "base64.a85decode": ["<builtin>.len", "<builtin>.ValueError", "base64._bytes_from_decode_data"], "base64.b85encode": ["<builtin>.bytes", "base64._85encode"], "base64.b85decode": ["base64._bytes_from_decode_data", "<builtin>.ValueError", "<builtin>.len", "<builtin>.range", "<builtin>.enumerate"], "base64.encode": ["<builtin>.len", "sys.stdout.buffer.write", "sys.stdin.buffer.read"], "base64.decode": ["sys.stdin.buffer.readline", "sys.stdout.buffer.write"], "base64._input_type_check": ["<builtin>.memoryview", "<builtin>.TypeError"], "base64.decodebytes": ["base64._input_type_check"], "base64.test": ["<builtin>.print", "base64.decodebytes", "base64.encodebytes", "<builtin>.repr"], "email.errors.MessageError": [], "email.errors.MessageParseError": [], "email.errors.HeaderParseError": [], "email.errors.BoundaryError": [], "email.errors.MultipartConversionError": [], "email.errors.CharsetError": [], "email.errors.MessageDefect": [], "email.errors.NoBoundaryInMultipartDefect": [], "email.errors.StartBoundaryNotFoundDefect": [], "email.errors.CloseBoundaryNotFoundDefect": [], "email.errors.FirstHeaderLineIsContinuationDefect": [], "email.errors.MisplacedEnvelopeHeaderDefect": [], "email.errors.MissingHeaderBodySeparatorDefect": [], "email.errors.MultipartInvariantViolationDefect": [], "email.errors.InvalidMultipartContentTransferEncodingDefect": [], "email.errors.UndecodableBytesDefect": [], "email.errors.InvalidBase64PaddingDefect": [], "email.errors.InvalidBase64CharactersDefect": [], "email.errors.InvalidBase64LengthDefect": [], "email.errors.HeaderDefect": [], "email.errors.InvalidHeaderDefect": [], "email.errors.HeaderMissingRequiredValue": [], "email.errors.NonPrintableDefect": [], "email.errors.NonPrintableDefect.__init__": ["<builtin>.super"], "email.errors.NonPrintableDefect.__str__": [], "email.errors.ObsoleteHeaderDefect": [], "email.errors.NonASCIILocalPartDefect": [], "email.base64mime.header_length": ["<builtin>.len", "<builtin>.divmod"], "email.base64mime.header_encode": ["base64.b64encode", "<builtin>.isinstance"], "email.base64mime.body_encode": ["<builtin>.len", "<builtin>.range"], "email.base64mime.decode": ["<builtin>.bytes", "<builtin>.isinstance"], "email.quoprimime.header_check": ["<builtin>.chr"], "email.quoprimime.body_check": ["<builtin>.chr"], "email.quoprimime.header_length": ["<builtin>.len", "<builtin>.sum"], "email.quoprimime.body_length": ["<builtin>.len", "<builtin>.sum"], "email.quoprimime._max_append": ["<builtin>.chr", "<builtin>.len", "<builtin>.isinstance"], "email.quoprimime.unquote": ["<builtin>.int", "<builtin>.chr"], "email.quoprimime.quote": ["<builtin>.ord"], "email.quoprimime.header_encode": [], "email.quoprimime.body_encode": ["email.quoprimime.quote", "<builtin>.len", "<builtin>.ValueError"], "email.quoprimime.decode": ["<builtin>.len", "email.quoprimime.unquote"], "email.quoprimime._unquote_match": ["email.quoprimime.unquote"], "email.quoprimime.header_decode": ["re.sub"], "email.utils._sanitize": [], "email.utils.formataddr": ["email.charset.Charset.__init__", "<builtin>.isinstance", "email.charset.Charset.header_encode"], "email.utils.getaddresses": ["email._parseaddr.AddressList.__init__"], "email._parseaddr.AddressList.__init__": ["email._parseaddr.AddrlistClass.__init__", "email._parseaddr.AddrlistClass.getaddrlist"], "email.utils._format_timetuple_and_zone": [], "email.utils.formatdate": ["time.time", "email.utils.format_datetime"], "email.utils.format_datetime": ["<builtin>.ValueError", "email.utils._format_timetuple_and_zone"], "email.utils.make_msgid": ["time.time", "<builtin>.int"], "email.utils.parsedate_to_datetime": ["email._parseaddr._parsedate_tz"], "email._parseaddr._parsedate_tz": ["<builtin>.int", "<builtin>.len"], "email.utils.parseaddr": ["email._parseaddr.AddressList.__init__"], "email.utils.unquote": ["<builtin>.len"], "email.utils.decode_rfc2231": ["<builtin>.len"], "email.utils.encode_rfc2231": [], "email.utils.decode_params": ["<builtin>.int", "email._parseaddr.quote", "email.utils.decode_rfc2231", "email.utils.unquote"], "email._parseaddr.quote": [], "email.utils.collapse_rfc2231_value": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.len", "<builtin>.bytes", "email.utils.unquote"], "email.utils.localtime": ["time.mktime", "time.localtime", "time.gmtime"], "time.mktime": [], "time.gmtime": [], "socket.<lambda1>": [], "socket.<lambda2>": [], "socket.<lambda3>": [], "socket.<lambda4>": [], "socket._intenum_converter": [], "sys.platform.lower": [], "socket._GiveupOnSendfile": [], "socket.socket": ["<builtin>.hasattr"], "socket.socket.__init__": [], "socket.socket.__enter__": [], "socket.socket.__exit__": ["socket.socket.close"], "socket.socket.close": ["socket.socket._real_close"], "socket.socket.__repr__": ["<builtin>.str", "<builtin>.getattr"], "socket.socket.__getstate__": ["<builtin>.TypeError"], "socket.socket.dup": ["socket.socket.dup"], "socket.socket.accept": ["socket.socket.__init__"], "socket.socket.makefile": ["io.TextIOWrapper", "socket.SocketIO.__init__", "io.BufferedRWPair", "<builtin>.ValueError", "<builtin>.set", "io.BufferedReader", "io.BufferedWriter"], "socket.SocketIO.__init__": ["_io._RawIOBase.__init__", "<builtin>.ValueError"], "io.BufferedRWPair": [], "io.BufferedWriter": [], "socket.socket._sendfile_use_sendfile": ["<builtin>.hasattr", "selectors._PollLikeSelector.register", "selectors.SelectSelector.register", "<builtin>.min", "selectors.SelectSelector.__init__", "selectors.SelectSelector.select", "<builtin>.ValueError", "selectors._PollLikeSelector.select", "selectors._PollLikeSelector.__init__", "socket.socket._check_sendfile_params"], "socket.socket._check_sendfile_params": ["<builtin>.TypeError", "<builtin>.getattr", "<builtin>.isinstance", "<builtin>.ValueError"], "socket.socket._sendfile_use_send": ["<builtin>.memoryview", "<builtin>.hasattr", "<builtin>.min", "<builtin>.ValueError", "<builtin>.len", "socket.socket._check_sendfile_params"], "socket.socket.sendfile": ["socket.socket._sendfile_use_sendfile", "socket.socket._sendfile_use_send"], "socket.socket._decref_socketios": ["socket.socket.close"], "socket.socket._real_close": [], "socket.socket.detach": ["<builtin>.super"], "socket.socket.family": ["<builtin>.super", "socket._intenum_converter"], "socket.socket.type": ["<builtin>.super", "socket._intenum_converter"], "socket.socket.get_inheritable": [], "socket.socket.set_inheritable": [], "socket.fromfd": ["socket.socket.__init__"], "socket.fromshare": ["socket.socket.__init__"], "socket.socketpair": ["socket.socket.detach", "socket.socket.accept", "<builtin>.ValueError", "socket.socket.__init__", "socket.socket.close"], "socket.SocketIO": [], "_io._RawIOBase.__init__": [], "socket.SocketIO.readinto": ["<builtin>.OSError", "_io._RawIOBase._checkClosed", "_io._RawIOBase._checkReadable"], "_io._RawIOBase._checkClosed": [], "_io._RawIOBase._checkReadable": [], "socket.SocketIO.write": ["_io._RawIOBase._checkWritable", "_io._RawIOBase._checkClosed"], "_io._RawIOBase._checkWritable": [], "socket.SocketIO.readable": ["<builtin>.ValueError"], "socket.SocketIO.writable": ["<builtin>.ValueError"], "socket.SocketIO.seekable": ["<builtin>.ValueError", "<builtin>.super"], "socket.SocketIO.fileno": ["_io._RawIOBase._checkClosed"], "socket.SocketIO.name": ["socket.SocketIO.fileno"], "socket.SocketIO.mode": [], "_io._RawIOBase.close": [], "socket.getfqdn": [], "socket.create_connection": ["socket.socket.__init__", "socket.socket.close", "socket.getaddrinfo"], "socket.getaddrinfo": ["socket._intenum_converter"], "socket.has_dualstack_ipv6": ["<builtin>.hasattr", "socket.socket.__init__"], "socket.create_server": ["<builtin>.hasattr", "<builtin>.ValueError", "socket.socket.__init__", "socket.has_dualstack_ipv6", "socket.socket.close"], "random.Random": [], "random.Random.__init__": ["random.Random.seed"], "random.Random.seed": ["<builtin>.isinstance", "<builtin>.map", "<builtin>.ord", "<builtin>.len", "<builtin>.super"], "random.Random.__init_subclass__": [], "random.Random.getstate": ["<builtin>.super"], "random.Random.setstate": ["<builtin>.tuple", "<builtin>.ValueError", "<builtin>.super"], "random.Random.__getstate__": ["random.Random.getstate"], "random.Random.__setstate__": ["random.Random.setstate"], "random.Random.__reduce__": ["random.Random.getstate"], "random.Random.randrange": ["<builtin>.ValueError", "random.Random._randbelow_with_getrandbits"], "random.Random._randbelow_with_getrandbits": [], "random.Random._randbelow_without_getrandbits": ["<builtin>.ValueError", "_warnings.warn"], "random.Random.choice": ["<builtin>.len", "<builtin>.IndexError", "random.Random._randbelow_with_getrandbits"], "random.Random.shuffle": ["<builtin>.reversed", "<builtin>.len", "<builtin>.range", "random.Random._randbelow_with_getrandbits"], "random.Random.sample": ["<builtin>.isinstance", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.list", "<builtin>.TypeError", "<builtin>.len", "<builtin>.range", "<builtin>.set", "random.Random._randbelow_with_getrandbits"], "random.Random.choices": ["itertools.repeat", "<builtin>.ValueError", "bisect.bisect_right", "<builtin>.list", "<builtin>.TypeError", "<builtin>.len", "itertools.accumulate"], "itertools.accumulate": [], "bisect.bisect_right": ["<builtin>.len", "<builtin>.ValueError"], "random.Random.uniform": [], "random.Random.triangular": [], "random.Random.normalvariate": [], "random.Random.lognormvariate": ["random.Random.normalvariate"], "random.Random.expovariate": [], "random.Random.vonmisesvariate": [], "random.Random.gammavariate": ["<builtin>.ValueError"], "random.Random.gauss": [], "random.Random.betavariate": ["random.Random.gammavariate"], "random.Random.paretovariate": [], "random.Random.weibullvariate": [], "random.SystemRandom": [], "random.SystemRandom.random": [], "random.SystemRandom.getrandbits": ["<builtin>.ValueError"], "random.SystemRandom.seed": [], "random.SystemRandom._notimplemented": ["<builtin>.NotImplementedError"], "random._test_generator": ["<builtin>.min", "<builtin>.round", "<builtin>.print", "random.Random.betavariate", "random.Random.triangular", "random.Random.normalvariate", "random.Random.gauss", "<builtin>.range", "<builtin>.max", "random.Random.gammavariate", "time.perf_counter", "random.Random.vonmisesvariate", "random.Random.lognormvariate"], "time.perf_counter": [], "random._test": ["random._test_generator"], "hashlib.__get_openssl_constructor": ["hashlib.__get_builtin_constructor", "<builtin>.getattr"], "hashlib.__py_new": ["hashlib.__get_builtin_constructor"], "hashlib.__hash_new": ["hashlib.__get_builtin_constructor"], "hashlib.pbkdf2_hmac": ["<builtin>.memoryview", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.len", "<builtin>.range", "<builtin>.bytes", "<builtin>.getattr", "hashlib.pbkdf2_hmac.prf", "hashlib.__py_new", "hashlib.__hash_new"], "hashlib.pbkdf2_hmac.prf": [], "logging.exception": ["logging.error"], "logging.getLevelName": [], "logging.addLevelName": ["logging._releaseLock", "logging._acquireLock"], "logging._acquireLock": [], "logging._releaseLock": [], "logging.<lambda1>": ["sys._getframe"], "logging.currentframe": ["sys.exc_info"], "logging._checkLevel": ["<builtin>.TypeError", "<builtin>.str", "<builtin>.ValueError", "<builtin>.isinstance"], "logging._register_at_fork_reinit_lock": ["_weakrefset.WeakSet.add", "logging._releaseLock", "logging._acquireLock"], "logging._after_at_fork_child_reinit_locks": ["_weakrefset.WeakSet.__iter__", "<builtin>.print", "logging._releaseLock"], "logging.LogRecord": [], "logging.LogRecord.__init__": ["time.time", "<builtin>.hasattr", "posixpath.basename", "<builtin>.isinstance", "<builtin>.int", "ntpath.splitext", "<builtin>.len", "posixpath.splitext", "logging.getLevelName", "ntpath.basename", "threading.current_thread", "sys.modules.get"], "logging.LogRecord.__repr__": [], "logging.LogRecord.getMessage": ["<builtin>.str"], "logging.setLogRecordFactory": [], "logging.getLogRecordFactory": [], "logging.makeLogRecord": ["logging.LogRecord.__init__"], "logging.PercentStyle": ["re.compile"], "logging.PercentStyle.__init__": [], "logging.PercentStyle.usesTime": [], "logging.PercentStyle.validate": ["<builtin>.ValueError"], "logging.PercentStyle._format": [], "logging.PercentStyle.format": ["<builtin>.ValueError", "logging.PercentStyle._format"], "logging.StrFormatStyle": ["re.compile"], "logging.StrFormatStyle._format": [], "logging.StrFormatStyle.validate": ["<builtin>.ValueError", "string.Formatter.parse", "<builtin>.set"], "logging.StringTemplateStyle": [], "logging.StringTemplateStyle.__init__": ["string.Template.__init__"], "logging.StringTemplateStyle.usesTime": [], "logging.StringTemplateStyle.validate": ["<builtin>.ValueError", "<builtin>.set"], "logging.StringTemplateStyle._format": ["string.Template.substitute"], "logging.Formatter": [], "logging.Formatter.formatTime": ["time.strftime", "time.localtime"], "logging.Formatter.formatException": ["traceback.print_exception", "io.StringIO"], "logging.Formatter.usesTime": [], "logging.Formatter.formatMessage": [], "logging.Formatter.formatStack": [], "logging.Formatter.format": ["logging.Formatter.usesTime", "logging.Formatter.formatTime", "logging.Formatter.formatStack", "logging.Formatter.formatException", "logging.Formatter.formatMessage"], "logging.BufferingFormatter": [], "logging.BufferingFormatter.__init__": [], "logging.BufferingFormatter.formatHeader": [], "logging.BufferingFormatter.formatFooter": [], "logging.BufferingFormatter.format": ["<builtin>.len", "logging.BufferingFormatter.formatFooter", "logging.Formatter.format", "logging.BufferingFormatter.formatHeader"], "logging.Filter": [], "logging.Filter.__init__": ["<builtin>.len"], "logging.Filter.filter": [], "logging.Filterer": [], "logging.Filterer.__init__": [], "logging.Filterer.addFilter": [], "logging.Filterer.removeFilter": [], "logging.Filterer.filter": ["<builtin>.hasattr"], "logging._removeHandlerRef": ["logging._releaseLock", "logging._acquireLock"], "logging._addHandlerRef": ["logging._releaseLock", "weakref.ref", "logging._acquireLock"], "weakref.ref": [], "logging.Handler": ["<builtin>.property"], "logging.Handler.__init__": ["logging.NullHandler.createLock", "logging.Filterer.__init__", "logging._checkLevel", "logging.Handler.createLock", "logging._addHandlerRef"], "logging.Handler.createLock": ["threading.RLock", "logging._register_at_fork_reinit_lock"], "logging.NullHandler.createLock": [], "logging.Handler.get_name": [], "logging.Handler.set_name": ["logging._releaseLock", "logging._acquireLock"], "logging.Handler.acquire": [], "logging.Handler.release": [], "logging.Handler.format": ["logging.Formatter.format"], "logging.Handler.emit": ["<builtin>.NotImplementedError"], "logging.Handler.handle": ["logging.NullHandler.emit", "logging.Handler.acquire", "unittest.case._CapturingHandler.emit", "logging.Filterer.filter", "logging.StreamHandler.emit", "logging.Handler.emit", "logging.FileHandler.emit", "logging.Handler.release"], "logging.StreamHandler.emit": ["logging.StreamHandler.flush", "logging.Handler.format", "logging.Handler.handleError", "sys.stderr.write"], "unittest.case._CapturingHandler.emit": ["logging.Handler.format"], "logging.NullHandler.emit": [], "logging.FileHandler.emit": ["logging.FileHandler._open", "logging.StreamHandler.emit", "logging.FileHandler.emit"], "logging.Handler.flush": [], "logging.Handler.close": ["logging._releaseLock", "logging._acquireLock"], "logging.Handler.handleError": ["ntpath.dirname", "traceback.print_exception", "sys.stderr.write", "posixpath.dirname", "traceback.print_stack", "sys.exc_info"], "logging.Handler.__repr__": ["logging.getLevelName"], "logging.StreamHandler": [], "logging.StreamHandler.__init__": ["logging.Handler.__init__"], "logging.StreamHandler.setStream": ["logging.StreamHandler.flush", "logging.Handler.acquire", "logging.Handler.release"], "logging.StreamHandler.__repr__": ["<builtin>.getattr", "<builtin>.str", "logging.getLevelName"], "logging.FileHandler": [], "logging.FileHandler.__init__": ["posixpath.abspath", "logging.FileHandler._open", "ntpath.abspath", "logging.StreamHandler.__init__", "logging.Handler.__init__"], "logging.FileHandler._open": ["<builtin>.open"], "logging.FileHandler.__repr__": ["logging.getLevelName"], "logging._StderrHandler": [], "logging._StderrHandler.__init__": ["logging.Handler.__init__"], "logging._StderrHandler.stream": [], "logging.PlaceHolder": [], "logging.PlaceHolder.__init__": [], "logging.PlaceHolder.append": [], "logging.setLoggerClass": ["<builtin>.TypeError", "<builtin>.issubclass"], "logging.getLoggerClass": [], "logging.Manager": [], "logging.Manager.__init__": [], "logging.Manager.getLogger": ["<builtin>.isinstance", "<builtin>.TypeError", "logging.Manager._fixupParents", "logging._releaseLock", "logging.Manager._fixupChildren", "logging._acquireLock"], "logging.Manager._fixupChildren": ["<builtin>.len"], "logging.Manager._fixupParents": ["logging.PlaceHolder.__init__", "<builtin>.isinstance"], "logging.Manager.setLoggerClass": ["<builtin>.TypeError", "<builtin>.issubclass"], "logging.Manager.setLogRecordFactory": [], "logging.Manager._clear_cache": ["logging._releaseLock", "<builtin>.isinstance", "logging._acquireLock"], "logging.Logger": [], "logging.Logger.__init__": ["logging.Filterer.__init__", "logging._checkLevel"], "logging.Logger.isEnabledFor": ["logging.Logger.getEffectiveLevel", "logging._releaseLock", "logging._acquireLock"], "logging.Logger._log": ["<builtin>.isinstance", "logging.Logger.handle", "logging.Logger.findCaller", "<builtin>.type", "logging.Logger.makeRecord", "sys.exc_info"], "logging.Logger.warn": ["warnings.warn", "logging.Logger.warning"], "logging.Logger.critical": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "logging.Logger.log": ["<builtin>.TypeError", "logging.Logger.isEnabledFor", "logging.Logger._log", "<builtin>.isinstance"], "logging.Logger.findCaller": ["<builtin>.hasattr", "posixpath.normcase", "ntpath.normcase", "traceback.print_stack", "logging.<lambda1>", "io.StringIO"], "logging.Logger.makeRecord": ["logging.LogRecord.__init__", "<builtin>.KeyError"], "logging.Logger.handle": ["logging.Filterer.filter", "logging.Logger.callHandlers"], "logging.Logger.callHandlers": ["logging.Handler.handle", "sys.stderr.write", "logging.NullHandler.handle"], "logging.Logger.removeHandler": ["logging._releaseLock", "logging._acquireLock"], "logging.Logger.hasHandlers": [], "logging.NullHandler.handle": [], "logging.Logger.getEffectiveLevel": [], "logging.Logger.getChild": ["logging.Manager.getLogger"], "logging.Logger.__repr__": ["logging.getLevelName", "logging.Logger.getEffectiveLevel"], "logging.RootLogger": [], "logging.RootLogger.__init__": ["logging.Logger.__init__"], "logging.RootLogger.__reduce__": [], "logging.LoggerAdapter": [], "logging.LoggerAdapter.__init__": [], "logging.LoggerAdapter.process": [], "logging.LoggerAdapter.debug": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.log": ["logging.LoggerAdapter.isEnabledFor", "logging.LoggerAdapter.process"], "logging.LoggerAdapter.info": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.warning": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.warn": ["warnings.warn", "logging.LoggerAdapter.warning"], "logging.LoggerAdapter.error": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.exception": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.critical": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.isEnabledFor": [], "logging.LoggerAdapter.setLevel": [], "logging.LoggerAdapter.getEffectiveLevel": [], "logging.LoggerAdapter.hasHandlers": [], "logging.LoggerAdapter._log": [], "logging.LoggerAdapter.manager": [], "logging.LoggerAdapter.name": [], "logging.LoggerAdapter.__repr__": ["logging.getLevelName"], "logging.basicConfig": ["logging.Logger.setLevel", "logging.Logger.addHandler", "logging.FileHandler.__init__", "<builtin>.ValueError", "<builtin>.len", "logging.FileHandler.close", "logging.Handler.close", "logging.Handler.setFormatter", "logging._releaseLock", "logging.Logger.removeHandler", "logging.StreamHandler.__init__", "logging.Formatter.__init__", "logging._acquireLock"], "logging.critical": ["<builtin>.len", "logging.basicConfig", "logging.Logger.critical"], "logging.error": ["<builtin>.len", "logging.basicConfig", "logging.Logger.error"], "logging.warning": ["<builtin>.len", "logging.basicConfig", "logging.Logger.warning"], "logging.warn": ["logging.warning", "warnings.warn"], "logging.info": ["logging.Logger.info", "<builtin>.len", "logging.basicConfig"], "logging.debug": ["<builtin>.len", "logging.basicConfig", "logging.Logger.debug"], "logging.log": ["<builtin>.len", "logging.basicConfig", "logging.Logger.log"], "logging.disable": ["logging.Manager._clear_cache"], "logging.shutdown": ["<builtin>.reversed"], "logging.NullHandler": [], "logging._showwarning": ["warnings.formatwarning", "logging.Handler.__init__", "logging.getLogger", "logging.Logger.addHandler", "logging.Logger.warning"], "logging.captureWarnings": [], "pickle.PickleError": [], "pickle.PicklingError": [], "pickle.UnpicklingError": [], "pickle._Stop": [], "pickle._Stop.__init__": [], "pickle._Framer": [], "pickle._Framer.__init__": [], "pickle._Framer.start_framing": ["io.BytesIO"], "pickle._Framer.end_framing": ["pickle._Framer.commit_frame"], "pickle._Framer.commit_frame": ["<builtin>.len", "io.BytesIO"], "pickle._Framer.write": [], "pickle._Framer.write_large_bytes": ["pickle._Framer.commit_frame"], "pickle._Unframer": [], "pickle._Unframer.__init__": [], "pickle._Unframer.readinto": ["<builtin>.len"], "pickle._Unframer.read": ["<builtin>.len"], "pickle._Unframer.readline": [], "pickle._Unframer.load_frame": ["io.BytesIO"], "pickle._getattribute": ["_functools.partial.__name__.split", "<builtin>.AttributeError", "<builtin>.getattr"], "_functools.partial.__name__.split": [], "pickle.whichmodule": ["<builtin>.list", "<builtin>.getattr", "pickle._getattribute", "sys.modules.items"], "sys.modules.items": [], "pickle.encode_long": [], "pickle.decode_long": [], "pickle._Pickler": ["<builtin>.type"], "pickle._Pickler.__init__": ["<builtin>.TypeError", "<builtin>.int", "pickle._Framer.__init__", "<builtin>.ValueError"], "pickle._Pickler.clear_memo": [], "pickle._Pickler.dump": ["<builtin>.hasattr", "pickle._Framer.write", "pickle._Framer.end_framing", "pickle._Pickler.save", "pickle._Framer.start_framing"], "pickle._Pickler.save": ["<builtin>.issubclass", "pickle._Pickler.save_reduce", "pickle._Pickler.save_pers", "<builtin>.isinstance", "pickle._Framer.commit_frame", "<builtin>.type", "pickle._Pickler.persistent_id", "<builtin>.len", "<builtin>.getattr", "pickle._Pickler.save_global", "pickle._Framer.write", "pickle._Pickler.get", "<builtin>.id"], "pickle._Pickler.memoize": ["pickle._Pickler.put", "<builtin>.len", "pickle._Framer.write", "<builtin>.id"], "pickle._Pickler.put": ["<builtin>.repr"], "pickle._Pickler.get": ["<builtin>.repr"], "pickle._Pickler.persistent_id": [], "pickle._Pickler.save_pers": ["<builtin>.str", "pickle._Framer.write", "pickle._Pickler.save"], "pickle._Pickler.save_global": ["pickle._getattribute", "<builtin>.__import__", "pickle._Pickler.save_reduce", "pickle._Pickler.memoize", "pickle.whichmodule", "_functools.partial.__name__.rpartition", "<builtin>.getattr", "<builtin>.bytes", "pickle._Framer.write", "pickle._Pickler.save"], "pickle._Pickler.save_reduce": ["<builtin>.hasattr", "<builtin>.isinstance", "pickle._Pickler.memoize", "pickle._Pickler._batch_setitems", "<builtin>.callable", "<builtin>.getattr", "_functools.partial", "pickle._Pickler._batch_appends", "pickle._Framer.write", "<builtin>.id", "pickle._Pickler.get", "pickle._Pickler.save"], "pickle._Pickler._batch_appends": ["itertools.islice", "<builtin>.list", "<builtin>.len", "<builtin>.iter", "pickle._Framer.write", "pickle._Pickler.save"], "pickle._Pickler._batch_setitems": ["itertools.islice", "<builtin>.list", "<builtin>.len", "<builtin>.iter", "pickle._Framer.write", "pickle._Pickler.save"], "pickle._Pickler.save_none": ["pickle._Framer.write"], "pickle._Pickler.save_bool": ["pickle._Framer.write"], "pickle._Pickler.save_long": ["<builtin>.len", "pickle._Framer.write", "<builtin>.repr", "pickle.encode_long"], "pickle._Pickler.save_float": ["pickle._Framer.write", "<builtin>.repr"], "pickle._Pickler.save_bytes": ["pickle._Pickler.save_reduce", "pickle._Pickler.memoize", "<builtin>.str", "<builtin>.len", "pickle._Framer.write", "pickle._Framer.write_large_bytes"], "pickle._Pickler.save_bytearray": ["pickle._Pickler.save_reduce", "<builtin>.len", "<builtin>.bytes", "pickle._Framer.write", "pickle._Framer.write_large_bytes"], "pickle._Pickler.save_picklebuffer": ["pickle._Pickler.save_bytes", "pickle._Framer.write", "<builtin>.bool", "pickle._Pickler.save_bytearray"], "pickle._Pickler.save_str": ["<builtin>.len", "pickle._Framer.write", "pickle._Framer.write_large_bytes", "pickle._Pickler.memoize"], "pickle._Pickler.save_tuple": ["pickle._Pickler.save", "pickle._Pickler.memoize", "<builtin>.len", "pickle._Framer.write", "pickle._Pickler.get", "<builtin>.id"], "pickle._Pickler.save_list": ["pickle._Pickler._batch_appends", "pickle._Framer.write", "pickle._Pickler.memoize"], "pickle._Pickler.save_dict": ["pickle._Framer.write", "pickle._Pickler.memoize", "pickle._Pickler._batch_setitems"], "pickle._Pickler.save_set": ["pickle._Pickler.save_reduce", "pickle._Pickler.memoize", "itertools.islice", "<builtin>.list", "<builtin>.len", "<builtin>.iter", "pickle._Framer.write", "pickle._Pickler.save"], "pickle._Pickler.save_frozenset": ["pickle._Pickler.save_reduce", "pickle._Pickler.save", "pickle._Pickler.memoize", "<builtin>.list", "pickle._Framer.write", "pickle._Pickler.get", "<builtin>.id"], "_functools.partial.__name__.rpartition": [], "pickle._Pickler.save_type": ["pickle._Pickler.save_reduce", "pickle._Pickler.save_global", "<builtin>.type"], "pickle._Unpickler": [], "pickle._Unpickler.__init__": ["<builtin>.iter"], "pickle._Unpickler.load": ["<builtin>.hasattr", "pickle._Unframer.read", "pickle._Unframer.__init__", "<builtin>.isinstance"], "pickle._Unpickler.pop_mark": [], "pickle._Unpickler.persistent_load": [], "pickle._Unpickler.load_proto": ["pickle._Unframer.read", "<builtin>.ValueError"], "pickle._Unpickler.load_frame": ["pickle._Unframer.read", "pickle._Unframer.load_frame", "<builtin>.ValueError"], "pickle._Unpickler.load_persid": ["pickle._Unframer.readline", "pickle._Unpickler.persistent_load"], "pickle._Unpickler.load_binpersid": ["pickle._Unpickler.persistent_load"], "pickle._Unpickler.load_none": [], "pickle._Unpickler.load_false": [], "pickle._Unpickler.load_true": [], "pickle._Unpickler.load_int": ["pickle._Unframer.readline", "<builtin>.int"], "pickle._Unpickler.load_binint": ["pickle._Unframer.read"], "pickle._Unpickler.load_binint1": ["pickle._Unframer.read"], "pickle._Unpickler.load_binint2": ["pickle._Unframer.read"], "pickle._Unpickler.load_long": ["pickle._Unframer.readline", "<builtin>.int"], "pickle._Unpickler.load_long1": ["pickle._Unframer.read", "pickle.decode_long"], "pickle._Unpickler.load_long4": ["pickle._Unframer.read", "pickle.decode_long"], "pickle._Unpickler.load_float": ["pickle._Unframer.readline", "<builtin>.float"], "pickle._Unpickler.load_binfloat": ["pickle._Unframer.read"], "pickle._Unpickler._decode_string": [], "pickle._Unpickler.load_string": ["pickle._Unframer.readline", "<builtin>.len", "pickle._Unpickler._decode_string"], "pickle._Unpickler.load_binstring": ["pickle._Unframer.read", "pickle._Unpickler._decode_string"], "pickle._Unpickler.load_binbytes": ["pickle._Unframer.read"], "pickle._Unpickler.load_unicode": ["pickle._Unframer.readline", "<builtin>.str"], "pickle._Unpickler.load_binunicode": ["pickle._Unframer.read", "<builtin>.str"], "pickle._Unpickler.load_binunicode8": ["pickle._Unframer.read", "<builtin>.str"], "pickle._Unpickler.load_binbytes8": ["pickle._Unframer.read"], "pickle._Unpickler.load_bytearray8": ["pickle._Unframer.read", "pickle._Unframer.readinto", "<builtin>.bytearray"], "pickle._Unpickler.load_next_buffer": ["<builtin>.next"], "pickle._Unpickler.load_readonly_buffer": ["<builtin>.memoryview"], "pickle._Unpickler.load_short_binstring": ["pickle._Unframer.read", "pickle._Unpickler._decode_string"], "pickle._Unpickler.load_short_binbytes": ["pickle._Unframer.read"], "pickle._Unpickler.load_short_binunicode": ["pickle._Unframer.read", "<builtin>.str"], "pickle._Unpickler.load_tuple": ["<builtin>.tuple", "pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_empty_tuple": [], "pickle._Unpickler.load_tuple1": [], "pickle._Unpickler.load_tuple2": [], "pickle._Unpickler.load_tuple3": [], "pickle._Unpickler.load_empty_list": [], "pickle._Unpickler.load_empty_dictionary": [], "pickle._Unpickler.load_empty_set": ["<builtin>.set"], "pickle._Unpickler.load_frozenset": ["<builtin>.frozenset", "pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_list": ["pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_dict": ["<builtin>.len", "<builtin>.range", "pickle._Unpickler.pop_mark"], "pickle._Unpickler._instantiate": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.str", "<builtin>.TypeError", "sys.exc_info"], "pickle._Unpickler.load_inst": ["pickle._Unframer.readline", "pickle._Unpickler.find_class", "pickle._Unpickler.pop_mark", "pickle._Unpickler._instantiate"], "pickle._Unpickler.find_class": ["<builtin>.__import__", "sys.audit", "<builtin>.getattr", "pickle._getattribute"], "pickle._Unpickler.load_obj": ["pickle._Unpickler.pop_mark", "pickle._Unpickler._instantiate"], "pickle._Unpickler.load_newobj": [], "pickle._Unpickler.load_newobj_ex": [], "pickle._Unpickler.load_global": ["pickle._Unframer.readline", "pickle._Unpickler.find_class"], "pickle._Unpickler.load_stack_global": ["pickle._Unpickler.find_class", "<builtin>.type"], "pickle._Unpickler.load_ext1": ["pickle._Unframer.read", "pickle._Unpickler.get_extension"], "pickle._Unpickler.get_extension": ["pickle._Unpickler.find_class", "<builtin>.ValueError"], "pickle._Unpickler.load_ext2": ["pickle._Unframer.read", "pickle._Unpickler.get_extension"], "pickle._Unpickler.load_ext4": ["pickle._Unframer.read", "pickle._Unpickler.get_extension"], "pickle._Unpickler.load_reduce": [], "pickle._Unpickler.load_pop": ["pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_pop_mark": ["pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_dup": [], "pickle._Unpickler.load_get": ["pickle._Unframer.readline", "<builtin>.int"], "pickle._Unpickler.load_binget": ["pickle._Unframer.read"], "pickle._Unpickler.load_long_binget": ["pickle._Unframer.read"], "pickle._Unpickler.load_put": ["pickle._Unframer.readline", "<builtin>.int", "<builtin>.ValueError"], "pickle._Unpickler.load_binput": ["pickle._Unframer.read", "<builtin>.ValueError"], "pickle._Unpickler.load_long_binput": ["pickle._Unframer.read", "<builtin>.ValueError"], "pickle._Unpickler.load_memoize": ["<builtin>.len"], "pickle._Unpickler.load_append": [], "pickle._Unpickler.load_appends": ["pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_setitem": [], "pickle._Unpickler.load_setitems": ["<builtin>.len", "<builtin>.range", "pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_additems": ["<builtin>.isinstance", "pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_build": ["sys.intern", "<builtin>.isinstance", "<builtin>.type", "<builtin>.len", "<builtin>.getattr", "<builtin>.setattr"], "pickle._Unpickler.load_mark": [], "pickle._Unpickler.load_stop": ["pickle._Stop.__init__"], "pickle._dump": ["pickle._Pickler.__init__", "pickle._Pickler.dump"], "pickle._dumps": ["pickle._Pickler.__init__", "io.BytesIO", "<builtin>.isinstance", "pickle._Pickler.dump"], "pickle._load": ["pickle._Unpickler.__init__", "pickle._Unpickler.load"], "pickle._loads": ["pickle._Unpickler.__init__", "<builtin>.isinstance", "io.BytesIO", "<builtin>.TypeError", "pickle._Unpickler.load"], "doctest.testmod": ["inspect.ismodule", "doctest.DocTestFinder.__init__", "doctest.DocTestRunner.merge", "doctest.DocTestRunner.run", "doctest.DocTestFinder.find", "doctest.DebugRunner.run", "doctest.DocTestRunner.__init__", "<builtin>.TypeError", "sys.modules.get", "doctest.DocTestRunner.summarize"], "unittest.main.TestProgram._print_help": ["argparse.ArgumentParser.format_help", "<builtin>.print", "argparse.ArgumentParser.print_help", "unittest.main.TestProgram._print_help"], "pprint.pprint": ["pprint.PrettyPrinter.pprint", "pprint.PrettyPrinter.__init__"], "pprint.PrettyPrinter.__init__": ["<builtin>.int", "<builtin>.bool", "<builtin>.ValueError"], "pprint.PrettyPrinter.pprint": ["sys.stdout.write", "pprint.PrettyPrinter._format"], "pprint.pformat": ["pprint.PrettyPrinter.pformat", "pprint.PrettyPrinter.__init__"], "pprint.PrettyPrinter.pformat": ["_io.StringIO", "pprint.PrettyPrinter._format"], "pprint.pp": ["pprint.pprint"], "pprint.saferepr": ["pprint._safe_repr"], "pprint._safe_repr": ["<builtin>.issubclass", "pprint._recursion", "pprint._safe_repr", "<builtin>.type", "<builtin>.len", "<builtin>.getattr", "<builtin>.sorted", "<builtin>.repr", "<builtin>.id"], "pprint.isreadable": ["pprint._safe_repr"], "pprint.isrecursive": ["pprint._safe_repr"], "pprint._safe_key": [], "pprint._safe_key.__init__": [], "pprint._safe_key.__lt__": ["<builtin>.str", "<builtin>.type", "<builtin>.id"], "pprint._safe_tuple": ["pprint._safe_key.__init__"], "pprint.PrettyPrinter": [], "pprint.PrettyPrinter._format": ["pprint.PrettyPrinter._pprint_dict", "<builtin>.isinstance", "pprint._recursion", "<builtin>.type", "<builtin>.len", "pprint.PrettyPrinter._repr", "<builtin>.id", "sys.stdout.write"], "pprint.PrettyPrinter.isrecursive": ["pprint.PrettyPrinter.format"], "pprint.PrettyPrinter.format": ["pprint._safe_repr"], "pprint.PrettyPrinter.isreadable": ["pprint.PrettyPrinter.format"], "pprint._recursion": ["<builtin>.type", "<builtin>.id"], "pprint.PrettyPrinter._repr": ["pprint.PrettyPrinter.format"], "pprint.PrettyPrinter._pprint_dict": ["<builtin>.len", "pprint.PrettyPrinter._format_dict_items", "<builtin>.sorted", "sys.stdout.write"], "pprint.PrettyPrinter._format_dict_items": ["<builtin>.len", "<builtin>.enumerate", "pprint.PrettyPrinter._format", "pprint.PrettyPrinter._repr", "sys.stdout.write"], "pprint.PrettyPrinter._pprint_ordered_dict": ["<builtin>.len", "pprint.PrettyPrinter._format", "<builtin>.repr", "<builtin>.list"], "pprint.PrettyPrinter._pprint_list": ["pprint.PrettyPrinter._format_items"], "pprint.PrettyPrinter._format_items": ["<builtin>.next", "<builtin>.len", "<builtin>.iter", "pprint.PrettyPrinter._format", "pprint.PrettyPrinter._repr"], "pprint.PrettyPrinter._pprint_tuple": ["pprint.PrettyPrinter._format_items", "<builtin>.len"], "pprint.PrettyPrinter._pprint_set": ["pprint.PrettyPrinter._format_items", "<builtin>.len", "<builtin>.sorted", "<builtin>.repr"], "pprint.PrettyPrinter._pprint_str": ["<builtin>.len", "re.findall", "<builtin>.enumerate", "<builtin>.repr"], "pprint.PrettyPrinter._pprint_bytes": ["<builtin>.len", "pprint._wrap_bytes_repr", "<builtin>.repr"], "pprint._wrap_bytes_repr": ["<builtin>.len", "<builtin>.range", "<builtin>.repr"], "pprint.PrettyPrinter._pprint_bytearray": ["<builtin>.bytes", "pprint.PrettyPrinter._pprint_bytes"], "pprint.PrettyPrinter._pprint_mappingproxy": ["pprint.PrettyPrinter._format"], "pprint.PrettyPrinter._pprint_default_dict": ["pprint.PrettyPrinter._repr", "<builtin>.len", "pprint.PrettyPrinter._pprint_dict", "<builtin>.repr"], "pprint.PrettyPrinter._pprint_counter": ["<builtin>.len", "pprint.PrettyPrinter._format_dict_items", "<builtin>.repr"], "pprint.PrettyPrinter._pprint_chain_map": ["<builtin>.len", "<builtin>.enumerate", "pprint.PrettyPrinter._format", "<builtin>.repr"], "pprint.PrettyPrinter._pprint_deque": ["pprint.PrettyPrinter._format_items", "<builtin>.len", "<builtin>.repr", "pprint.PrettyPrinter._repr"], "pprint.PrettyPrinter._pprint_user_dict": ["pprint.PrettyPrinter._format"], "pprint.PrettyPrinter._pprint_user_list": ["pprint.PrettyPrinter._format"], "pprint.PrettyPrinter._pprint_user_string": ["pprint.PrettyPrinter._format"], "pprint._perfcheck": ["<builtin>.print", "pprint._safe_repr", "pprint.PrettyPrinter.__init__", "pprint.PrettyPrinter.pformat", "time.perf_counter"], "doctest.register_optionflag": ["<builtin>.len"], "doctest._extract_future_flags": ["<builtin>.getattr"], "doctest._normalize_module": ["<builtin>.locals", "inspect.ismodule", "<builtin>.__import__", "<builtin>.isinstance", "sys._getframe", "<builtin>.TypeError", "<builtin>.globals"], "inspect.ismodule": ["<builtin>.isinstance"], "doctest._newline_convert": [], "doctest._load_testfile": ["<builtin>.hasattr", "doctest._module_relative_path", "doctest._newline_convert", "<builtin>.getattr", "<builtin>.open", "doctest._normalize_module"], "doctest._module_relative_path": ["<builtin>.hasattr", "inspect.ismodule", "posixpath.join", "ntpath.join", "sys.path.split", "ntpath.split", "posixpath.split", "sys.base_prefix.startswith", "ntpath.exists", "sys.base_prefix.split", "<builtin>.ValueError", "posixpath.exists", "<builtin>.TypeError", "<builtin>.len", "sys.path.startswith"], "doctest._indent": ["re.sub"], "doctest._exception_traceback": ["_io.StringIO", "traceback.print_exception"], "doctest._SpoofOut": [], "doctest._SpoofOut.getvalue": ["_io.StringIO.getvalue"], "_io.StringIO.getvalue": [], "doctest._SpoofOut.truncate": ["_io.StringIO.seek", "_io.StringIO.truncate"], "_io.StringIO.seek": [], "_io.StringIO.truncate": [], "doctest._ellipsis_match": ["<builtin>.len"], "doctest._comment_line": [], "doctest._strip_exception_details": ["<builtin>.len"], "doctest._OutputRedirectingPdb": [], "doctest._OutputRedirectingPdb.__init__": ["pdb.Pdb.__init__"], "pdb.Pdb.__init__": [], "doctest._OutputRedirectingPdb.set_trace": ["pdb.Pdb.set_trace", "sys._getframe"], "pdb.Pdb.set_trace": [], "doctest._OutputRedirectingPdb.set_continue": ["pdb.Pdb.set_continue"], "pdb.Pdb.set_continue": [], "doctest._OutputRedirectingPdb.trace_dispatch": ["pdb.Pdb.trace_dispatch"], "pdb.Pdb.trace_dispatch": [], "doctest.Example": [], "doctest.Example.__init__": [], "doctest.Example.__eq__": ["<builtin>.type"], "doctest.Example.__hash__": ["<builtin>.hash"], "doctest.DocTest": [], "doctest.DocTest.__init__": ["<builtin>.isinstance"], "doctest.DocTest.__repr__": ["<builtin>.len"], "doctest.DocTest.__eq__": ["<builtin>.type"], "doctest.DocTest.__hash__": ["<builtin>.hash"], "doctest.DocTest.__lt__": ["<builtin>.isinstance", "<builtin>.id"], "doctest.DocTestParser": ["re.compile"], "doctest.DocTestParser.parse": ["<builtin>.len", "doctest.Example.__init__", "doctest.DocTestParser._min_indent", "doctest.DocTestParser._parse_example"], "doctest.DocTestParser._min_indent": ["<builtin>.len", "<builtin>.min"], "doctest.DocTestParser._parse_example": ["re.match", "doctest.DocTestParser._check_prefix", "<builtin>.len", "doctest.DocTestParser._check_prompt_blank", "doctest.DocTestParser._find_options"], "doctest.DocTestParser.get_doctest": ["doctest.DocTestParser.get_examples", "doctest.DocTest.__init__"], "doctest.DocTestParser.get_examples": ["<builtin>.isinstance", "doctest.DocTestParser.parse"], "doctest.DocTestParser._check_prompt_blank": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.ValueError"], "doctest.DocTestParser._check_prefix": ["<builtin>.enumerate", "<builtin>.ValueError"], "doctest.DocTestParser._find_options": ["<builtin>.ValueError"], "doctest.DocTestFinder": [], "doctest.DocTestFinder.__init__": [], "doctest.DocTestFinder.find": ["linecache.getlines", "<builtin>.type", "<builtin>.ValueError", "inspect.getsourcefile", "<builtin>.getattr", "inspect.getfile", "inspect.getmodule", "doctest.DocTestFinder._find"], "inspect.getmodule": ["<builtin>.hasattr", "inspect.ismodule", "sys.modules.copy", "inspect.getabsfile", "<builtin>.getattr", "ntpath.realpath", "sys.modules.get", "posixpath.realpath"], "inspect.getsourcefile": ["ntpath.exists", "ntpath.splitext", "<builtin>.any", "posixpath.exists", "posixpath.splitext", "inspect.getfile", "<builtin>.getattr", "inspect.getmodule"], "inspect.getfile": ["<builtin>.hasattr", "inspect.ismodule", "inspect.isfunction", "inspect.isclass", "inspect.istraceback", "<builtin>.type", "<builtin>.TypeError", "<builtin>.getattr", "inspect.iscode", "inspect.isframe", "inspect.ismethod", "sys.modules.get"], "doctest.DocTestFinder._find": ["inspect.ismodule", "doctest.DocTestFinder._get_test", "<builtin>.isinstance", "inspect.isclass", "inspect.unwrap", "<builtin>.print", "doctest.DocTestFinder._from_module", "<builtin>.type", "<builtin>.ValueError", "<builtin>.getattr", "inspect.isroutine", "doctest.DocTestFinder._find", "<builtin>.id"], "doctest.DocTestFinder._from_module": ["<builtin>.hasattr", "inspect.isfunction", "<builtin>.isinstance", "inspect.isclass", "inspect.ismethoddescriptor", "<builtin>.ValueError", "inspect.getmodule"], "inspect.isfunction": ["<builtin>.isinstance"], "inspect.ismethoddescriptor": ["<builtin>.hasattr", "inspect.isfunction", "inspect.isclass", "<builtin>.type", "inspect.ismethod"], "inspect.isclass": ["<builtin>.isinstance"], "doctest.DocTestFinder._get_test": ["doctest.DocTestFinder._find_lineno", "doctest.DocTestParser.get_doctest", "<builtin>.isinstance", "<builtin>.str", "<builtin>.getattr"], "inspect.unwrap": ["inspect.unwrap._is_wrapper", "<builtin>.ValueError", "<builtin>.len", "sys.getrecursionlimit", "<builtin>.id"], "inspect.isroutine": ["inspect.ismethoddescriptor", "inspect.isfunction", "inspect.isbuiltin", "inspect.ismethod"], "doctest.DocTestFinder._find_lineno": ["inspect.ismodule", "inspect.isfunction", "inspect.isclass", "inspect.istraceback", "re.compile", "<builtin>.len", "<builtin>.range", "<builtin>.enumerate", "<builtin>.getattr", "inspect.iscode", "inspect.isframe", "inspect.ismethod"], "inspect.ismethod": ["<builtin>.isinstance"], "inspect.istraceback": ["<builtin>.isinstance"], "inspect.isframe": ["<builtin>.isinstance"], "inspect.iscode": ["<builtin>.isinstance"], "doctest.DocTestRunner": ["re.compile"], "doctest.DocTestRunner.__init__": ["_io.StringIO.__init__", "io.StringIO.__init__"], "_io.StringIO.__init__": [], "io.StringIO.__init__": [], "doctest.DocTestRunner.report_start": ["doctest.SkipDocTestCase.__init__", "doctest._indent", "doctest.DocTest.__init__", "doctest.DocTestRunner.__init__", "sys.stdout.write"], "doctest.SkipDocTestCase.__init__": ["doctest.DocTestCase.__init__"], "doctest.DocTestRunner.report_success": ["doctest.DocTest.__init__", "sys.stdout.write", "doctest.SkipDocTestCase.__init__", "doctest.DocTestRunner.__init__"], "doctest.DocTestRunner.report_failure": ["doctest.SkipDocTestCase.__init__", "doctest.DocTest.__init__", "doctest.DocTestRunner.__init__", "doctest.DocTestRunner._failure_header", "sys.stdout.write"], "doctest.DocTestRunner._failure_header": ["doctest._indent"], "doctest.DocTestRunner.report_unexpected_exception": ["doctest.SkipDocTestCase.__init__", "doctest._indent", "doctest.DocTest.__init__", "doctest.DocTestRunner.__init__", "doctest.DocTestRunner._failure_header", "sys.stdout.write", "doctest._exception_traceback"], "doctest.DocTestRunner.__run": ["doctest.DebugRunner.report_unexpected_exception", "doctest._strip_exception_details", "traceback.format_exception_only", "<builtin>.compile", "<builtin>.exec", "doctest.DebugRunner.report_failure", "doctest.DocTestRunner.report_unexpected_exception", "doctest._SpoofOut.getvalue", "doctest._SpoofOut.truncate", "doctest.DocTestRunner.report_start", "doctest.DocTestRunner.__record_outcome", "<builtin>.range", "<builtin>.enumerate", "doctest.DocTestRunner.report_success", "doctest._OutputRedirectingPdb.set_continue", "doctest.DocTestRunner.report_failure", "sys.exc_info", "doctest._exception_traceback"], "doctest.DebugRunner.report_failure": ["doctest.DocTestFailure.__init__"], "doctest.DebugRunner.report_unexpected_exception": ["doctest.UnexpectedException.__init__"], "doctest.DocTestRunner.__record_outcome": [], "doctest.DocTestRunner.__patched_linecache_getlines": ["<builtin>.int", "linecache.getlines"], "doctest.DocTestRunner.run": ["doctest.DocTestRunner.__run", "doctest._extract_future_flags", "sys.stdout.encoding.lower", "doctest._OutputRedirectingPdb.__init__", "sys.settrace", "pdb.Pdb.reset", "sys.gettrace"], "sys.stdout.encoding.lower": [], "doctest.DocTestRunner.run.out": ["<builtin>.str", "sys.stdout.write"], "sys.gettrace": [], "pdb.Pdb.reset": [], "doctest.DocTestRunner.summarize": ["<builtin>.len", "<builtin>.print"], "doctest.DocTestRunner.merge": [], "doctest.OutputChecker": [], "doctest.OutputChecker._toAscii": ["<builtin>.str"], "doctest.OutputChecker.check_output": ["doctest.OutputChecker._toAscii", "re.sub", "re.escape", "doctest._ellipsis_match"], "doctest.OutputChecker._do_a_fancy_diff": [], "doctest.OutputChecker.output_difference": ["difflib.unified_diff", "re.sub", "doctest._indent", "difflib.context_diff", "difflib.Differ.__init__", "difflib.Differ.compare", "<builtin>.list", "doctest.OutputChecker._do_a_fancy_diff"], "difflib.unified_diff": ["difflib.SequenceMatcher.__init__", "difflib.SequenceMatcher.get_grouped_opcodes", "difflib._check_types", "difflib._format_range_unified"], "difflib.context_diff": ["<builtin>.dict", "difflib._format_range_context", "difflib.SequenceMatcher.get_grouped_opcodes", "<builtin>.any", "difflib._check_types", "difflib.SequenceMatcher.__init__"], "difflib.Differ.__init__": [], "difflib.Differ.compare": ["difflib.Differ._fancy_replace", "<builtin>.ValueError", "difflib.SequenceMatcher.get_opcodes", "difflib.SequenceMatcher.__init__", "difflib.Differ._dump"], "doctest.DocTestFailure": [], "doctest.DocTestFailure.__init__": [], "doctest.DocTestFailure.__str__": ["<builtin>.str"], "doctest.UnexpectedException": [], "doctest.UnexpectedException.__init__": [], "doctest.UnexpectedException.__str__": ["<builtin>.str"], "doctest.DebugRunner": [], "doctest.DebugRunner.run": ["doctest.DebugRunner.run", "doctest.DocTestRunner.run"], "doctest.testfile": ["doctest.DocTestParser.get_doctest", "doctest._load_testfile", "posixpath.basename", "doctest.DocTestRunner.merge", "doctest.DocTestRunner.run", "doctest.DebugRunner.run", "<builtin>.ValueError", "doctest.DocTestRunner.__init__", "ntpath.basename", "doctest.DocTestRunner.summarize"], "doctest.run_docstring_examples": ["doctest.DocTestFinder.__init__", "doctest.DocTestRunner.run", "doctest.DocTestFinder.find", "doctest.DebugRunner.run", "doctest.DocTestRunner.__init__"], "doctest.set_unittest_reportflags": ["<builtin>.ValueError"], "doctest.DocTestCase": [], "doctest.DocTestCase.__init__": ["unittest.case.TestCase.__init__"], "unittest.case.TestCase.__init__": ["unittest.case.TestCase.addTypeEqualityFunc", "<builtin>.getattr", "<builtin>.ValueError"], "doctest.DocTestCase.setUp": [], "doctest.DocTestCase.tearDown": [], "doctest.DocTestCase.runTest": ["_io.StringIO", "doctest.DocTestCase.format_failure", "doctest.DocTestRunner.run", "doctest.DebugRunner.run", "doctest.DocFileCase.format_failure", "doctest.DocTestRunner.__init__"], "doctest.DocTestCase.format_failure": [], "doctest.DocFileCase.format_failure": [], "doctest.DocTestCase.debug": ["doctest.DocTestCase.tearDown", "doctest.SkipDocTestCase.setUp", "doctest.DebugRunner.run", "doctest.DocTestRunner.__init__", "doctest.DocTestCase.setUp"], "doctest.SkipDocTestCase.setUp": ["unittest.case.TestCase.skipTest"], "doctest.DocTestCase.id": [], "doctest.DocTestCase.__eq__": ["<builtin>.type"], "doctest.DocTestCase.__hash__": ["<builtin>.hash"], "doctest.DocTestCase.__repr__": [], "doctest.DocTestCase.shortDescription": [], "doctest.SkipDocTestCase": [], "unittest.case.TestCase.skipTest": [], "doctest.SkipDocTestCase.test_skip": [], "doctest.SkipDocTestCase.shortDescription": [], "doctest._DocTestSuite": [], "doctest._DocTestSuite._removeTestAtIndex": [], "doctest.DocTestSuite": ["doctest.DocTestFinder.__init__", "doctest.SkipDocTestCase.__init__", "doctest.DocTestFinder.find", "<builtin>.len", "doctest._normalize_module", "doctest.DocTestCase.__init__", "unittest.suite.BaseTestSuite.addTest", "unittest.suite.BaseTestSuite.__init__"], "unittest.suite.BaseTestSuite.__init__": ["unittest.suite.BaseTestSuite.addTests"], "unittest.suite.BaseTestSuite.addTest": ["<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.TypeError", "<builtin>.repr"], "doctest.DocFileCase": [], "doctest.DocFileCase.id": [], "doctest.DocFileCase.__repr__": [], "doctest.DocFileTest": ["doctest.DocTestParser.get_doctest", "doctest._load_testfile", "posixpath.basename", "<builtin>.ValueError", "ntpath.basename", "doctest.DocTestCase.__init__"], "doctest.DocFileSuite": ["unittest.suite.BaseTestSuite.addTest", "doctest.DocFileTest", "doctest._normalize_module", "unittest.suite.BaseTestSuite.__init__"], "doctest.script_from_examples": ["doctest._comment_line", "<builtin>.isinstance", "doctest.DocTestParser.parse"], "doctest.testsource": ["doctest.DocTestFinder.__init__", "doctest.DocTestFinder.find", "<builtin>.ValueError", "doctest.script_from_examples", "doctest._normalize_module"], "doctest.debug_src": ["doctest.script_from_examples", "doctest.debug_script"], "doctest.debug_script": ["<builtin>.print", "pdb.Pdb", "sys.exc_info", "<builtin>.exec"], "pdb.Pdb": [], "doctest.debug": ["doctest.testsource", "doctest.debug_script", "doctest._normalize_module"], "doctest._TestClass": [], "doctest._TestClass.__init__": [], "doctest._TestClass.square": [], "doctest._TestClass.get": [], "sys.path.insert": [], "difflib._calculate_ratio": [], "difflib.SequenceMatcher": [], "difflib.SequenceMatcher.__init__": ["difflib.SequenceMatcher.set_seqs"], "difflib.SequenceMatcher.set_seqs": ["difflib.SequenceMatcher.set_seq2", "difflib.SequenceMatcher.set_seq1"], "difflib.SequenceMatcher.set_seq1": [], "difflib.SequenceMatcher.set_seq2": ["difflib.SequenceMatcher.__chain_b"], "difflib.SequenceMatcher.__chain_b": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.set", "difflib.IS_CHARACTER_JUNK"], "difflib.IS_CHARACTER_JUNK": [], "difflib.SequenceMatcher.find_longest_match": ["<builtin>.range"], "difflib.SequenceMatcher.get_matching_blocks": ["difflib.SequenceMatcher.find_longest_match", "<builtin>.len", "<builtin>.map", "<builtin>.list"], "difflib.SequenceMatcher.get_opcodes": ["difflib.SequenceMatcher.get_matching_blocks"], "difflib.SequenceMatcher.get_grouped_opcodes": ["<builtin>.max", "<builtin>.min", "<builtin>.len", "difflib.SequenceMatcher.get_opcodes"], "difflib.SequenceMatcher.ratio": ["difflib.SequenceMatcher.get_matching_blocks", "<builtin>.len", "difflib._calculate_ratio", "<builtin>.sum"], "difflib.SequenceMatcher.quick_ratio": ["<builtin>.len", "difflib._calculate_ratio"], "difflib.SequenceMatcher.real_quick_ratio": ["difflib._calculate_ratio", "<builtin>.len", "<builtin>.min"], "difflib.get_close_matches": ["difflib.SequenceMatcher.quick_ratio", "<builtin>.ValueError", "difflib.SequenceMatcher.real_quick_ratio", "difflib.SequenceMatcher.set_seq1", "heapq.nlargest", "difflib.SequenceMatcher.ratio", "difflib.SequenceMatcher.__init__", "difflib.SequenceMatcher.set_seq2"], "difflib._keep_original_ws": ["<builtin>.zip"], "difflib.Differ": [], "difflib.Differ._fancy_replace": ["difflib.Differ._fancy_helper", "difflib.SequenceMatcher.quick_ratio", "difflib.Differ._plain_replace", "difflib.SequenceMatcher.real_quick_ratio", "difflib.SequenceMatcher.set_seq1", "<builtin>.ValueError", "difflib.Differ._qformat", "<builtin>.range", "difflib.SequenceMatcher.ratio", "difflib.SequenceMatcher.set_seqs", "difflib.SequenceMatcher.get_opcodes", "difflib.SequenceMatcher.__init__", "difflib.SequenceMatcher.set_seq2"], "difflib.Differ._dump": ["<builtin>.range"], "difflib.Differ._plain_replace": ["difflib.Differ._dump"], "difflib.Differ._fancy_helper": ["difflib.Differ._dump", "difflib.Differ._fancy_replace"], "difflib.Differ._qformat": ["difflib._keep_original_ws"], "difflib.IS_LINE_JUNK": [], "difflib._format_range_unified": [], "difflib._check_types": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "difflib._format_range_context": [], "difflib.diff_bytes": ["difflib.diff_bytes.decode", "<builtin>.map", "<builtin>.list"], "difflib.diff_bytes.decode": ["<builtin>.TypeError", "<builtin>.type"], "difflib.ndiff": ["difflib.Differ.__init__", "difflib.Differ.compare"], "difflib._mdiff._make_line": ["<builtin>.reversed"], "difflib._mdiff._make_line.record_sub_info": [], "difflib._mdiff._line_iterator": ["difflib._mdiff._make_line", "<builtin>.len", "<builtin>.next"], "difflib._mdiff._line_pair_iterator": ["<builtin>.next", "<builtin>.len", "difflib._mdiff._line_iterator"], "difflib.HtmlDiff": [], "difflib.HtmlDiff.__init__": [], "difflib.HtmlDiff.make_file": ["<builtin>.dict", "difflib.HtmlDiff.make_table"], "difflib.HtmlDiff.make_table": ["<builtin>.dict", "difflib.HtmlDiff._line_wrapper", "difflib.HtmlDiff._make_prefix", "difflib.HtmlDiff._convert_flags", "difflib.HtmlDiff._tab_newline_replace", "<builtin>.len", "difflib.HtmlDiff._collect_lines", "<builtin>.range", "difflib._mdiff"], "difflib.HtmlDiff._tab_newline_replace": ["difflib.HtmlDiff._tab_newline_replace.expand_tabs"], "difflib.HtmlDiff._tab_newline_replace.expand_tabs": [], "difflib.HtmlDiff._split_line": ["<builtin>.len", "difflib.HtmlDiff._split_line"], "difflib.HtmlDiff._line_wrapper": ["difflib.HtmlDiff._split_line"], "difflib.HtmlDiff._collect_lines": ["difflib.HtmlDiff._format_line"], "difflib.HtmlDiff._format_line": [], "difflib.HtmlDiff._make_prefix": [], "difflib.HtmlDiff._convert_flags": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.max"], "difflib.restore": ["<builtin>.int", "<builtin>.ValueError"], "heapq.heappush": ["<builtin>.len", "heapq._siftdown"], "heapq._siftdown": [], "heapq.heappop": ["heapq._siftup"], "heapq._siftup": ["<builtin>.len", "heapq._siftdown"], "heapq.heapreplace": ["heapq._siftup"], "heapq.heappushpop": ["heapq._siftup"], "heapq.heapify": ["<builtin>.reversed", "<builtin>.len", "<builtin>.range", "heapq._siftup"], "heapq._heappop_max": ["heapq._siftup_max"], "heapq._siftup_max": ["<builtin>.len", "heapq._siftdown_max"], "heapq._heapreplace_max": ["heapq._siftup_max"], "heapq._heapify_max": ["<builtin>.reversed", "<builtin>.len", "<builtin>.range", "heapq._siftup_max"], "heapq._siftdown_max": [], "heapq.merge": ["heapq._heapreplace_max", "heapq.heapreplace", "heapq._heapify_max", "<builtin>.map", "heapq.heappop", "heapq._heappop_max", "<builtin>.len", "<builtin>.enumerate", "heapq.heapify"], "heapq.nsmallest": ["heapq._heapreplace_max", "<builtin>.min", "<builtin>.zip", "heapq._heapify_max", "<builtin>.len", "<builtin>.range", "<builtin>.iter", "<builtin>.sorted", "<builtin>.object"], "__future__._Feature": [], "__future__._Feature.__init__": [], "__future__._Feature.getOptionalRelease": [], "__future__._Feature.getMandatoryRelease": [], "__future__._Feature.__repr__": ["<builtin>.repr"], "inspect.isdatadescriptor": ["<builtin>.hasattr", "inspect.isfunction", "inspect.isclass", "<builtin>.type", "inspect.ismethod"], "inspect.ismemberdescriptor": ["<builtin>.isinstance"], "inspect.isgetsetdescriptor": ["<builtin>.isinstance"], "inspect._has_code_flag": ["inspect.isfunction", "functools._unwrap_partial", "<builtin>.bool", "inspect.ismethod"], "inspect.isgeneratorfunction": ["inspect._has_code_flag"], "inspect.iscoroutinefunction": ["inspect._has_code_flag"], "inspect.isasyncgenfunction": ["inspect._has_code_flag"], "inspect.isasyncgen": ["<builtin>.isinstance"], "inspect.isgenerator": ["<builtin>.isinstance"], "inspect.iscoroutine": ["<builtin>.isinstance"], "inspect.isawaitable": ["<builtin>.bool", "<builtin>.isinstance"], "inspect.isbuiltin": ["<builtin>.isinstance"], "inspect.isabstract": ["<builtin>.hasattr", "<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.type", "<builtin>.getattr"], "inspect.getmembers": ["<builtin>.dir", "<builtin>.isinstance", "inspect.isclass", "<builtin>.getattr", "<builtin>.set", "inspect.getmro"], "inspect.getmro": [], "inspect.getmembers.<lambda1>": [], "inspect.classify_class_attrs": ["<builtin>.dir", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.type", "<builtin>.getattr", "<builtin>.Exception", "<builtin>.set", "inspect.getmro", "inspect.isroutine"], "<builtin>.Exception": [], "inspect.unwrap._is_wrapper": ["<builtin>.hasattr", "inspect._signature_from_callable.<lambda1>"], "inspect._signature_from_callable.<lambda1>": ["<builtin>.hasattr"], "sys.getrecursionlimit": [], "inspect.indentsize": ["<builtin>.len"], "inspect._findclass": ["sys.modules.get", "<builtin>.getattr", "inspect.isclass"], "inspect._finddoc": ["inspect.isfunction", "<builtin>.isinstance", "inspect.isdatadescriptor", "inspect.isclass", "inspect.ismethoddescriptor", "inspect.ismemberdescriptor", "<builtin>.getattr", "inspect.ismethod", "inspect._findclass", "inspect.isbuiltin"], "inspect.getdoc": ["inspect.cleandoc", "<builtin>.isinstance", "inspect._finddoc"], "inspect.cleandoc": ["<builtin>.len", "<builtin>.range", "<builtin>.min"], "inspect.getmodulename": ["<builtin>.len", "posixpath.basename", "ntpath.basename"], "inspect.getabsfile": ["posixpath.abspath", "posixpath.normcase", "inspect.getsourcefile", "ntpath.normcase", "inspect.getfile", "ntpath.abspath"], "sys.modules.copy": [], "inspect.findsource": ["<builtin>.hasattr", "linecache.getlines", "inspect.ismodule", "inspect.isfunction", "inspect.isclass", "inspect.istraceback", "re.compile", "inspect.getsourcefile", "<builtin>.len", "<builtin>.range", "inspect.getfile", "inspect.ismethod", "inspect.iscode", "inspect.isframe", "inspect.getmodule", "linecache.checkcache", "<builtin>.OSError"], "inspect.getcomments": ["<builtin>.len", "inspect.ismodule", "inspect.indentsize", "inspect.findsource"], "inspect.EndOfBlock": [], "inspect.BlockFinder": [], "inspect.BlockFinder.__init__": [], "inspect.BlockFinder.tokeneater": [], "inspect.getblock": ["inspect.BlockFinder.tokeneater", "inspect.BlockFinder.__init__", "<builtin>.iter"], "inspect.getsourcelines": ["inspect.ismodule", "inspect.unwrap", "inspect.istraceback", "inspect.getblock", "inspect.isframe", "inspect.findsource"], "inspect.getsource": ["inspect.getsourcelines"], "inspect.walktree": ["inspect.walktree", "operator.attrgetter.__init__"], "inspect.getclasstree": ["inspect.walktree"], "inspect.getargs": ["<builtin>.TypeError", "inspect.iscode", "<builtin>.list"], "inspect.getargspec": ["inspect.getfullargspec", "warnings.warn", "<builtin>.ValueError"], "inspect.getfullargspec": ["<builtin>.TypeError", "inspect._signature_from_callable"], "inspect._signature_from_callable": ["inspect.isfunction", "inspect._signature_fromstr", "inspect._signature_from_callable", "<builtin>.isinstance", "inspect._signature_get_partial", "inspect._signature_is_builtin", "<builtin>.callable", "inspect.unwrap", "<builtin>.tuple", "inspect._signature_is_functionlike", "inspect._signature_from_function", "<builtin>.type", "inspect.Signature.from_callable", "<builtin>.ValueError", "<builtin>.TypeError", "inspect._signature_get_user_defined_method", "inspect._signature_bound_method", "inspect._signature_from_builtin"], "inspect.getargvalues": ["inspect.getargs"], "inspect.formatannotation": ["<builtin>.getattr", "<builtin>.isinstance", "<builtin>.repr"], "inspect.formatannotationrelativeto": ["<builtin>.getattr"], "inspect.formatannotationrelativeto._formatannotation": ["inspect.formatannotation"], "inspect.formatargspec.formatargandannotation": ["inspect.formatannotation"], "inspect.<lambda3>": [], "inspect.<lambda1>": [], "inspect.<lambda2>": [], "inspect.<lambda4>": [], "inspect.formatargvalues": ["inspect.<lambda5>", "inspect.<lambda7>", "inspect.formatargvalues.convert", "<builtin>.len", "<builtin>.range", "inspect.<lambda6>"], "inspect.formatargvalues.convert": ["inspect.<lambda7>"], "inspect.<lambda7>": [], "inspect.<lambda5>": [], "inspect.<lambda6>": [], "inspect._missing_arguments": ["<builtin>.TypeError", "<builtin>.len", "<builtin>.repr"], "inspect._too_many": ["<builtin>.TypeError", "<builtin>.len", "<builtin>.str"], "inspect.getcallargs": ["<builtin>.min", "<builtin>.tuple", "inspect._too_many", "inspect.getfullargspec", "<builtin>.len", "<builtin>.range", "<builtin>.TypeError", "inspect._missing_arguments", "<builtin>.set", "<builtin>.enumerate", "inspect.ismethod"], "inspect.getclosurevars": ["inspect.isfunction", "inspect.ismodule", "<builtin>.zip", "<builtin>.TypeError", "<builtin>.set", "inspect.ismethod"], "inspect.getframeinfo": ["<builtin>.max", "<builtin>.min", "inspect.istraceback", "inspect.getsourcefile", "<builtin>.TypeError", "<builtin>.len", "inspect.getfile", "inspect.isframe", "inspect.findsource"], "inspect.getlineno": [], "inspect.getouterframes": ["inspect.getframeinfo"], "inspect.getinnerframes": ["inspect.getframeinfo"], "inspect.currentframe": ["<builtin>.hasattr", "sys._getframe"], "inspect.stack": ["inspect.getouterframes", "sys._getframe"], "inspect.trace": ["inspect.getinnerframes", "sys.exc_info"], "inspect._static_getmro": [], "inspect._check_instance": [], "inspect._check_class": ["inspect._shadowed_dict", "inspect._static_getmro", "<builtin>.type"], "inspect._shadowed_dict": ["inspect._static_getmro", "<builtin>.type"], "inspect._is_type": ["inspect._static_getmro"], "inspect.getattr_static": ["inspect._static_getmro", "inspect._check_class", "inspect._is_type", "inspect._shadowed_dict", "<builtin>.type", "<builtin>.AttributeError", "inspect._check_instance"], "inspect.getgeneratorstate": [], "inspect.getgeneratorlocals": ["<builtin>.TypeError", "inspect.isgenerator", "<builtin>.getattr"], "inspect.getcoroutinestate": [], "inspect.getcoroutinelocals": ["<builtin>.getattr"], "inspect._signature_get_user_defined_method": ["<builtin>.getattr", "<builtin>.isinstance"], "inspect._signature_get_partial": ["_collections.OrderedDict.move_to_end", "<builtin>.ValueError", "_collections.OrderedDict", "_collections.OrderedDict.pop", "_collections.OrderedDict.values"], "_collections.OrderedDict.pop": [], "_collections.OrderedDict.move_to_end": [], "_collections.OrderedDict.values": [], "inspect._signature_bound_method": ["<builtin>.tuple", "<builtin>.ValueError"], "inspect._signature_is_builtin": ["inspect.ismethoddescriptor", "inspect.isbuiltin", "<builtin>.isinstance"], "inspect._signature_is_functionlike": ["<builtin>.callable", "<builtin>.getattr", "<builtin>.isinstance", "inspect.isclass"], "inspect._signature_get_bound_param": [], "inspect._signature_strip_non_python_syntax": ["<builtin>.next", "<builtin>.iter"], "ast.parse": ["<builtin>.compile", "<builtin>.isinstance"], "inspect._signature_fromstr.parse_name": ["<builtin>.ValueError", "<builtin>.isinstance"], "inspect._signature_fromstr.wrap_value": ["<builtin>.type", "<builtin>.RuntimeError", "<builtin>.isinstance", "<builtin>.eval"], "inspect._signature_fromstr.RewriteSymbolics": [], "inspect._signature_fromstr.RewriteSymbolics.visit_Attribute": ["<builtin>.reversed", "inspect._signature_fromstr.wrap_value", "<builtin>.RuntimeError", "<builtin>.isinstance"], "inspect._signature_fromstr.RewriteSymbolics.visit_Name": ["<builtin>.ValueError", "<builtin>.isinstance", "inspect._signature_fromstr.wrap_value"], "inspect._signature_fromstr.p": ["inspect._signature_fromstr.parse_name", "ast.NodeVisitor.visit", "inspect.Parameter.__init__", "ast.literal_eval"], "ast.NodeVisitor.visit": ["<builtin>.getattr"], "ast.literal_eval": ["ast.literal_eval._convert", "<builtin>.isinstance", "ast.parse"], "inspect.Parameter.__init__": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError"], "itertools.zip_longest": [], "inspect.Signature.__init__": ["_collections.OrderedDict", "<builtin>.enumerate", "<builtin>.ValueError"], "inspect._signature_from_builtin": ["inspect._signature_is_builtin", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.getattr", "inspect._signature_fromstr"], "inspect._signature_from_function": ["inspect.isfunction", "inspect.Parameter.__init__", "inspect._signature_is_functionlike", "<builtin>.TypeError", "<builtin>.len", "<builtin>.getattr", "<builtin>.enumerate", "inspect._signature_fromstr", "inspect.Signature.__init__"], "inspect.Signature.from_callable": ["inspect._signature_from_callable"], "inspect._void": [], "inspect._empty": [], "inspect._ParameterKind": [], "inspect._ParameterKind.__str__": [], "inspect._ParameterKind.description": [], "inspect.Parameter": [], "inspect.Parameter.__reduce__": ["<builtin>.type"], "inspect.Parameter.__setstate__": [], "inspect.Parameter.name": [], "inspect.Parameter.default": [], "inspect.Parameter.annotation": [], "inspect.Parameter.kind": [], "inspect.Parameter.replace": ["<builtin>.type"], "inspect.Parameter.__str__": ["inspect.formatannotation", "<builtin>.repr"], "inspect.Parameter.__repr__": [], "inspect.Parameter.__hash__": ["<builtin>.hash"], "inspect.Parameter.__eq__": ["<builtin>.isinstance"], "inspect.BoundArguments": [], "inspect.BoundArguments.__init__": [], "inspect.BoundArguments.signature": [], "inspect.BoundArguments.args": ["<builtin>.tuple"], "inspect.BoundArguments.kwargs": [], "inspect.BoundArguments.apply_defaults": ["_collections.OrderedDict"], "inspect.BoundArguments.__eq__": ["<builtin>.isinstance"], "inspect.BoundArguments.__setstate__": [], "inspect.BoundArguments.__getstate__": [], "inspect.BoundArguments.__repr__": ["_collections.OrderedDict.items"], "inspect.Signature": [], "inspect.Signature.from_function": ["inspect._signature_from_function", "warnings.warn"], "inspect.Signature.from_builtin": ["warnings.warn", "inspect._signature_from_builtin"], "inspect.Signature.parameters": [], "inspect.Signature.return_annotation": [], "inspect.Signature.replace": ["<builtin>.type"], "inspect.Signature._hash_basis": ["<builtin>.tuple"], "inspect.Signature.__hash__": ["<builtin>.frozenset", "<builtin>.hash", "inspect.Signature._hash_basis"], "inspect.Signature.__eq__": ["inspect.Signature._hash_basis", "<builtin>.isinstance"], "inspect.Signature._bind": ["<builtin>.tuple", "<builtin>.next", "inspect.BoundArguments.__init__", "_collections.OrderedDict", "<builtin>.TypeError", "itertools.chain", "<builtin>.iter"], "inspect.Signature.bind": [], "inspect.Signature.bind_partial": [], "inspect.Signature.__reduce__": ["<builtin>.tuple", "<builtin>.type"], "inspect.Signature.__setstate__": [], "inspect.Signature.__repr__": [], "inspect.Signature.__str__": ["<builtin>.str", "inspect.formatannotation"], "inspect.signature": ["inspect.Signature.from_callable"], "dis._try_compile": ["<builtin>.compile"], "dis.dis": ["<builtin>.hasattr", "dis.distb", "<builtin>.isinstance", "dis._disassemble_str", "<builtin>.print", "dis._disassemble_recursive", "<builtin>.type", "dis._disassemble_bytes", "<builtin>.TypeError", "<builtin>.sorted", "dis.dis"], "dis.distb": ["<builtin>.RuntimeError", "dis.disassemble"], "dis._disassemble_recursive": ["<builtin>.hasattr", "<builtin>.print", "dis._disassemble_recursive", "dis.disassemble"], "dis._disassemble_bytes": ["dis._get_instructions_bytes", "dis.Instruction._disassemble", "<builtin>.str", "<builtin>.print", "<builtin>.len", "<builtin>.max"], "dis._disassemble_str": ["dis._disassemble_recursive", "dis._try_compile"], "dis.disassemble": ["dis.findlinestarts", "<builtin>.dict", "dis._disassemble_bytes"], "dis.pretty_flags": ["<builtin>.range", "<builtin>.hex"], "dis._get_code_object": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError", "dis._try_compile"], "dis.code_info": ["dis._format_code_info", "dis._get_code_object"], "dis._format_code_info": ["<builtin>.enumerate", "dis.pretty_flags"], "dis.show_code": ["<builtin>.print", "dis.code_info"], "dis.Instruction": [], "dis.Instruction._disassemble": ["<builtin>.repr"], "dis.get_instructions": ["dis.findlinestarts", "dis._get_code_object", "<builtin>.dict", "dis._get_instructions_bytes"], "dis.findlinestarts": ["<builtin>.len", "<builtin>.zip"], "dis._get_instructions_bytes": ["dis._unpack_opargs", "dis._get_const_info", "dis._get_name_info", "<builtin>.enumerate", "<builtin>.bool", "<builtin>.repr", "dis.findlabels"], "dis._get_const_info": ["<builtin>.repr"], "dis._get_name_info": ["<builtin>.repr"], "dis.findlabels": ["dis._unpack_opargs"], "dis._unpack_opargs": ["<builtin>.len", "<builtin>.range"], "dis.Bytecode": [], "dis.Bytecode.__init__": ["dis.findlinestarts", "dis._get_code_object", "<builtin>.dict"], "dis.Bytecode.__iter__": ["dis._get_instructions_bytes"], "dis.Bytecode.__repr__": [], "dis.Bytecode.from_traceback": ["dis.Bytecode.__init__"], "dis.Bytecode.info": ["dis._format_code_info"], "dis.Bytecode.dis": ["dis._disassemble_bytes", "io.StringIO"], "opcode.def_op": [], "opcode.name_op": ["opcode.def_op"], "opcode.jrel_op": ["opcode.def_op"], "opcode.jabs_op": ["opcode.def_op"], "_frozen_importlib._setup": ["<builtin>.isinstance", "<builtin>.type", "_frozen_importlib._builtin_from_name", "_imp.is_frozen", "_frozen_importlib._spec_from_module", "sys.modules.items", "_frozen_importlib._init_module_attrs", "<builtin>.setattr"], "_bootstrap._setup": [], "_bootstrap_external._setup": [], "_frozen_importlib_external._setup": ["_frozen_importlib_external._make_relax_case", "_frozen_importlib._builtin_from_name", "_bootstrap._builtin_from_name", "_bootstrap._imp.extension_suffixes", "<builtin>.len", "<builtin>.all", "<builtin>.setattr"], "importlib.invalidate_caches": ["<builtin>.hasattr", "sys.meta_path.invalidate_caches"], "sys.meta_path.invalidate_caches": [], "importlib.find_loader": ["_frozen_importlib._find_spec", "warnings.warn", "<builtin>.ValueError", "<builtin>.ImportError", "_bootstrap._find_spec"], "_frozen_importlib._find_spec": ["_frozen_importlib._find_spec_legacy", "<builtin>.ImportError"], "_frozen_importlib._gcd_import": ["_frozen_importlib._sanity_check", "_frozen_importlib._find_and_load", "_frozen_importlib._resolve_name"], "_bootstrap._gcd_import": [], "importlib.reload": ["_frozen_importlib._find_spec", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ImportError", "<builtin>.ModuleNotFoundError", "_frozen_importlib._exec", "_bootstrap._find_spec", "sys.modules.get", "_bootstrap._exec"], "_bootstrap._exec": [], "_frozen_importlib._exec": ["<builtin>.hasattr", "_frozen_importlib.BuiltinImporter.exec_module", "_frozen_importlib.FrozenImporter.exec_module", "<builtin>.ImportError", "_frozen_importlib.FrozenImporter.load_module", "_frozen_importlib._ModuleLockManager.__init__", "_frozen_importlib._init_module_attrs"], "_frozen_importlib": ["_frozen_importlib._DummyModuleLock", "_frozen_importlib._ImportLockContext", "_frozen_importlib.ModuleSpec", "_frozen_importlib._DeadlockError", "_frozen_importlib._ModuleLock", "<builtin>.object", "_frozen_importlib._ModuleLockManager", "_frozen_importlib.FrozenImporter", "_frozen_importlib.BuiltinImporter"], "_frozen_importlib._wrap": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.setattr"], "_frozen_importlib._new_module": ["<builtin>.type"], "_frozen_importlib._DeadlockError": [], "_frozen_importlib._ModuleLock": [], "_frozen_importlib._ModuleLock.__init__": [], "_frozen_importlib._ModuleLock.has_deadlock": [], "_frozen_importlib._ModuleLock.acquire": ["_frozen_importlib._ModuleLock.has_deadlock"], "_frozen_importlib._ModuleLock.release": ["<builtin>.RuntimeError"], "_frozen_importlib._ModuleLock.__repr__": ["<builtin>.id"], "_frozen_importlib._DummyModuleLock": [], "_frozen_importlib._DummyModuleLock.__init__": [], "_frozen_importlib._DummyModuleLock.acquire": [], "_frozen_importlib._DummyModuleLock.release": ["<builtin>.RuntimeError"], "_frozen_importlib._DummyModuleLock.__repr__": ["<builtin>.id"], "_frozen_importlib._ModuleLockManager": [], "_frozen_importlib._ModuleLockManager.__init__": [], "_frozen_importlib._ModuleLockManager.__enter__": ["_frozen_importlib._get_module_lock", "_frozen_importlib._ModuleLock.acquire", "_frozen_importlib._DummyModuleLock.acquire"], "_frozen_importlib._get_module_lock": ["_frozen_importlib._ModuleLock.__init__", "_frozen_importlib._DummyModuleLock.__init__"], "_frozen_importlib._ModuleLockManager.__exit__": ["_frozen_importlib._DummyModuleLock.release", "_frozen_importlib._ModuleLock.release"], "_frozen_importlib._get_module_lock.cb": [], "_frozen_importlib._lock_unlock_module": ["_frozen_importlib._get_module_lock", "_frozen_importlib._DummyModuleLock.release", "_frozen_importlib._DummyModuleLock.acquire", "_frozen_importlib._ModuleLock.release", "_frozen_importlib._ModuleLock.acquire"], "_frozen_importlib._call_with_frames_removed": ["_frozen_importlib._gcd_import"], "_frozen_importlib._verbose_message": ["<builtin>.print"], "_frozen_importlib._requires_builtin": ["_frozen_importlib._wrap"], "_frozen_importlib._requires_builtin._requires_builtin_wrapper": ["_frozen_importlib.BuiltinImporter.get_code", "<builtin>.ImportError", "_frozen_importlib.BuiltinImporter.is_package", "_frozen_importlib.BuiltinImporter.get_source"], "_frozen_importlib.BuiltinImporter.get_source": [], "_frozen_importlib.BuiltinImporter.is_package": [], "_frozen_importlib.BuiltinImporter.get_code": [], "_frozen_importlib._requires_frozen": ["_frozen_importlib._wrap"], "_frozen_importlib._requires_frozen._requires_frozen_wrapper": ["_frozen_importlib.FrozenImporter.get_source", "<builtin>.ImportError", "_frozen_importlib.FrozenImporter.get_code", "_frozen_importlib.FrozenImporter.is_package"], "_frozen_importlib.FrozenImporter.get_source": [], "_frozen_importlib.FrozenImporter.get_code": [], "_frozen_importlib.FrozenImporter.is_package": [], "_frozen_importlib._load_module_shim": ["_frozen_importlib._load", "_frozen_importlib.spec_from_loader", "_frozen_importlib._exec"], "_frozen_importlib.spec_from_loader": ["<builtin>.hasattr", "_frozen_importlib.FrozenImporter.is_package", "_frozen_importlib.BuiltinImporter.is_package", "_frozen_importlib.ModuleSpec.__init__"], "_frozen_importlib._load": ["_frozen_importlib._load_unlocked", "_frozen_importlib._ModuleLockManager.__init__"], "_frozen_importlib._module_repr": ["<builtin>.hasattr", "<builtin>.getattr", "_frozen_importlib._module_repr_from_spec"], "_frozen_importlib._module_repr_from_spec": [], "_frozen_importlib.ModuleSpec": [], "_frozen_importlib.ModuleSpec.__init__": [], "_frozen_importlib.ModuleSpec.__repr__": [], "_frozen_importlib.ModuleSpec.__eq__": [], "_frozen_importlib.ModuleSpec.cached": [], "_frozen_importlib.ModuleSpec.parent": [], "_frozen_importlib.ModuleSpec.has_location": ["<builtin>.bool"], "_frozen_importlib._spec_from_module": ["_frozen_importlib.ModuleSpec.__init__", "<builtin>.list"], "_frozen_importlib._init_module_attrs": ["<builtin>.getattr"], "_frozen_importlib.module_from_spec": ["<builtin>.hasattr", "_frozen_importlib._init_module_attrs", "<builtin>.ImportError", "_frozen_importlib.FrozenImporter.create_module", "_frozen_importlib._new_module", "_frozen_importlib.BuiltinImporter.create_module"], "_frozen_importlib.BuiltinImporter.create_module": ["<builtin>.ImportError", "_frozen_importlib._call_with_frames_removed"], "_frozen_importlib.FrozenImporter.create_module": [], "_frozen_importlib.FrozenImporter.load_module": ["_frozen_importlib._load_module_shim"], "_frozen_importlib.FrozenImporter.exec_module": ["<builtin>.ImportError", "<builtin>.exec", "_frozen_importlib._call_with_frames_removed"], "_frozen_importlib.BuiltinImporter.exec_module": ["_frozen_importlib._call_with_frames_removed"], "_frozen_importlib._load_backward_compatible": ["_frozen_importlib.FrozenImporter.load_module", "<builtin>.getattr", "<builtin>.hasattr"], "_frozen_importlib._load_unlocked": ["<builtin>.hasattr", "_frozen_importlib.module_from_spec", "_frozen_importlib.BuiltinImporter.exec_module", "_frozen_importlib.FrozenImporter.exec_module", "_frozen_importlib._load_backward_compatible", "<builtin>.ImportError", "_frozen_importlib._verbose_message"], "_frozen_importlib.BuiltinImporter": ["_frozen_importlib._requires_builtin", "<builtin>.classmethod"], "_frozen_importlib.BuiltinImporter.module_repr": [], "_frozen_importlib.BuiltinImporter.find_spec": ["_frozen_importlib.spec_from_loader"], "_frozen_importlib.BuiltinImporter.find_module": ["_frozen_importlib.BuiltinImporter.find_spec"], "<builtin>.classmethod": [], "_frozen_importlib.FrozenImporter": ["_frozen_importlib._requires_frozen"], "_frozen_importlib.FrozenImporter.module_repr": [], "_frozen_importlib.FrozenImporter.find_spec": ["_frozen_importlib.spec_from_loader"], "_frozen_importlib.FrozenImporter.find_module": [], "_frozen_importlib._ImportLockContext": [], "_frozen_importlib._ImportLockContext.__enter__": [], "_frozen_importlib._ImportLockContext.__exit__": [], "_frozen_importlib._resolve_name": ["<builtin>.len", "<builtin>.ValueError"], "_frozen_importlib._find_spec_legacy": ["_frozen_importlib.spec_from_loader"], "_frozen_importlib._sanity_check": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.ImportError"], "_frozen_importlib._find_and_load_unlocked": ["_frozen_importlib._find_spec", "_frozen_importlib._call_with_frames_removed", "<builtin>.ModuleNotFoundError", "_frozen_importlib._load_unlocked", "<builtin>.setattr"], "_frozen_importlib._find_and_load": ["_frozen_importlib._find_and_load_unlocked", "_frozen_importlib._ModuleLockManager.__init__", "<builtin>.ModuleNotFoundError", "_frozen_importlib._lock_unlock_module"], "_frozen_importlib._handle_fromlist": ["<builtin>.hasattr", "_frozen_importlib._handle_fromlist", "<builtin>.isinstance", "_frozen_importlib._call_with_frames_removed", "<builtin>.type", "<builtin>.TypeError"], "_frozen_importlib._calc___package__": [], "_frozen_importlib.__import__": ["_frozen_importlib._gcd_import", "<builtin>.hasattr", "_frozen_importlib._handle_fromlist", "<builtin>.len", "_frozen_importlib._calc___package__"], "_frozen_importlib._builtin_from_name": ["_frozen_importlib.BuiltinImporter.find_spec", "<builtin>.ImportError", "_frozen_importlib._load_unlocked"], "_imp.is_frozen": [], "_frozen_importlib._install": ["_frozen_importlib._setup"], "_frozen_importlib_external": ["_frozen_importlib_external.FileFinder", "_frozen_importlib_external.PathFinder", "_frozen_importlib_external.SourceLoader", "_frozen_importlib_external._NamespacePath", "_frozen_importlib_external.FileLoader", "_frozen_importlib_external.SourcelessFileLoader", "<builtin>.type", "_frozen_importlib_external.SourceFileLoader", "_frozen_importlib_external._LoaderBasics", "_frozen_importlib_external._NamespaceLoader", "_frozen_importlib_external.WindowsRegistryFinder", "<builtin>.object", "_frozen_importlib_external.ExtensionFileLoader"], "_frozen_importlib_external._make_relax_case": [], "_frozen_importlib_external._make_relax_case._relax_case": [], "_frozen_importlib_external._pack_uint32": ["<builtin>.int"], "_frozen_importlib_external._unpack_uint32": ["<builtin>.len"], "_frozen_importlib_external._unpack_uint16": ["<builtin>.len"], "_frozen_importlib_external._path_join": [], "_frozen_importlib_external._path_split": ["<builtin>.reversed", "<builtin>.len"], "_frozen_importlib_external._path_stat": [], "_frozen_importlib_external._path_is_mode_type": ["_frozen_importlib_external._path_stat"], "_frozen_importlib_external._path_isfile": ["_frozen_importlib_external._path_is_mode_type"], "_frozen_importlib_external._path_isdir": ["_frozen_importlib_external._path_is_mode_type"], "_frozen_importlib_external._path_isabs": [], "_frozen_importlib_external._write_atomic": ["<builtin>.id"], "_frozen_importlib_external.cache_from_source": ["<builtin>.str", "_frozen_importlib_external._path_isabs", "_frozen_importlib_external._path_join", "<builtin>.ValueError", "<builtin>.NotImplementedError", "<builtin>.TypeError", "_frozen_importlib_external._path_split"], "_frozen_importlib_external.source_from_cache": ["_frozen_importlib_external._path_join", "<builtin>.ValueError", "<builtin>.NotImplementedError", "<builtin>.len", "_frozen_importlib_external._path_split"], "_frozen_importlib_external._get_sourcefile": ["<builtin>.len", "_frozen_importlib_external._path_isfile", "_frozen_importlib_external.source_from_cache"], "_frozen_importlib_external._get_cached": ["<builtin>.tuple", "_frozen_importlib_external.cache_from_source"], "_frozen_importlib_external._calc_mode": ["_frozen_importlib_external._path_stat"], "_frozen_importlib_external._check_name": ["_frozen_importlib_external._check_name._wrap"], "_frozen_importlib_external._check_name._check_name_wrapper": ["_frozen_importlib_external.FileLoader.get_filename", "_frozen_importlib_external.FileLoader.get_resource_reader", "_frozen_importlib_external.ExtensionFileLoader.get_filename", "_frozen_importlib_external.FileLoader.load_module", "<builtin>.ImportError"], "_frozen_importlib_external.FileLoader.load_module": ["<builtin>.super"], "_frozen_importlib_external.FileLoader.get_resource_reader": [], "_frozen_importlib_external.FileLoader.get_filename": [], "_frozen_importlib_external.ExtensionFileLoader.get_filename": [], "_frozen_importlib_external._check_name._wrap": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.setattr"], "_frozen_importlib_external._find_module_shim": ["<builtin>.len"], "_frozen_importlib_external._classify_pyc": ["<builtin>.len", "<builtin>.ImportError", "<builtin>.EOFError", "_frozen_importlib_external._unpack_uint32"], "_frozen_importlib_external._validate_timestamp_pyc": ["_frozen_importlib_external._unpack_uint32", "<builtin>.ImportError"], "_frozen_importlib_external._validate_hash_pyc": ["<builtin>.ImportError"], "_frozen_importlib_external._compile_bytecode": ["<builtin>.ImportError", "<builtin>.isinstance"], "_frozen_importlib_external._code_to_timestamp_pyc": ["<builtin>.bytearray", "_frozen_importlib_external._pack_uint32"], "_frozen_importlib_external._code_to_hash_pyc": ["<builtin>.bytearray", "<builtin>.len", "_frozen_importlib_external._pack_uint32"], "_frozen_importlib_external.spec_from_file_location": ["<builtin>.hasattr", "_frozen_importlib_external.FileLoader.get_filename", "_frozen_importlib_external._get_supported_file_loaders", "_frozen_importlib_external._LoaderBasics.is_package", "<builtin>.tuple", "_frozen_importlib_external._path_split"], "_frozen_importlib_external._get_supported_file_loaders": [], "_frozen_importlib_external._LoaderBasics.is_package": ["_frozen_importlib_external._path_split"], "_frozen_importlib_external.WindowsRegistryFinder": [], "_frozen_importlib_external.WindowsRegistryFinder._open_registry": [], "_frozen_importlib_external.WindowsRegistryFinder._search_registry": ["_frozen_importlib_external.WindowsRegistryFinder._open_registry"], "_frozen_importlib_external.WindowsRegistryFinder.find_spec": ["_frozen_importlib_external._get_supported_file_loaders", "_frozen_importlib_external.WindowsRegistryFinder._search_registry", "_frozen_importlib_external._path_stat", "<builtin>.tuple"], "_frozen_importlib_external.WindowsRegistryFinder.find_module": ["_frozen_importlib_external.WindowsRegistryFinder.find_spec"], "_frozen_importlib_external._LoaderBasics": [], "_frozen_importlib_external._LoaderBasics.create_module": [], "_frozen_importlib_external._LoaderBasics.exec_module": ["<builtin>.ImportError", "_frozen_importlib_external.SourcelessFileLoader.get_code"], "_frozen_importlib_external.SourcelessFileLoader.get_code": ["<builtin>.memoryview", "_frozen_importlib_external.FileLoader.get_data", "_frozen_importlib_external.FileLoader.get_filename", "_frozen_importlib_external._classify_pyc", "_frozen_importlib_external._compile_bytecode"], "_frozen_importlib_external._LoaderBasics.load_module": [], "_frozen_importlib_external.SourceLoader": [], "_frozen_importlib_external.SourceLoader.path_mtime": [], "_frozen_importlib_external.SourceLoader.path_stats": ["_frozen_importlib_external.SourceLoader.path_mtime"], "_frozen_importlib_external.SourceLoader._cache_bytecode": ["_frozen_importlib_external.SourceLoader.set_data", "_frozen_importlib_external.SourceFileLoader.set_data"], "_frozen_importlib_external.SourceLoader.set_data": [], "_frozen_importlib_external.SourceFileLoader.set_data": ["_frozen_importlib_external._write_atomic", "<builtin>.reversed", "_frozen_importlib_external._path_join", "_frozen_importlib_external._path_isdir", "_frozen_importlib_external._path_split"], "_frozen_importlib_external.SourceLoader.get_source": ["<builtin>.ImportError", "_frozen_importlib_external.decode_source"], "_frozen_importlib_external.SourceLoader.source_to_code": [], "_frozen_importlib_external.SourceLoader.get_code": ["<builtin>.memoryview", "_frozen_importlib_external.SourceLoader._cache_bytecode", "_frozen_importlib_external.SourceFileLoader.path_stats", "_frozen_importlib_external._code_to_timestamp_pyc", "_frozen_importlib_external.SourceLoader.path_stats", "<builtin>.int", "_frozen_importlib_external.SourceLoader.source_to_code", "_frozen_importlib_external._code_to_hash_pyc", "<builtin>.len", "_frozen_importlib_external.SourceFileLoader._cache_bytecode", "_frozen_importlib_external._validate_timestamp_pyc", "_frozen_importlib_external._validate_hash_pyc", "_frozen_importlib_external.cache_from_source", "_frozen_importlib_external._classify_pyc", "_frozen_importlib_external._compile_bytecode"], "_frozen_importlib_external.SourceFileLoader.path_stats": ["_frozen_importlib_external._path_stat"], "_frozen_importlib_external.SourceFileLoader._cache_bytecode": ["_frozen_importlib_external.SourceFileLoader.set_data", "_frozen_importlib_external._calc_mode"], "_frozen_importlib_external.FileLoader": ["_frozen_importlib_external._check_name"], "_frozen_importlib_external.FileLoader.__init__": [], "_frozen_importlib_external.FileLoader.__eq__": [], "_frozen_importlib_external.FileLoader.__hash__": ["<builtin>.hash"], "_frozen_importlib_external.FileLoader.get_data": ["<builtin>.str", "<builtin>.isinstance"], "_frozen_importlib_external.FileLoader.open_resource": ["_frozen_importlib_external._path_join", "_frozen_importlib_external._path_split"], "_frozen_importlib_external.FileLoader.resource_path": ["_frozen_importlib_external._path_join", "_frozen_importlib_external._path_split", "_frozen_importlib_external.FileLoader.is_resource"], "_frozen_importlib_external.FileLoader.is_resource": ["_frozen_importlib_external._path_join", "_frozen_importlib_external._path_split", "_frozen_importlib_external._path_isfile"], "_frozen_importlib_external.FileLoader.contents": ["_frozen_importlib_external._path_split", "<builtin>.iter"], "_frozen_importlib_external.SourceFileLoader": [], "_frozen_importlib_external.SourcelessFileLoader": [], "_frozen_importlib_external.SourcelessFileLoader.get_source": [], "_frozen_importlib_external.ExtensionFileLoader": ["_frozen_importlib_external._check_name"], "_frozen_importlib_external.ExtensionFileLoader.__init__": [], "_frozen_importlib_external.ExtensionFileLoader.__eq__": [], "_frozen_importlib_external.ExtensionFileLoader.__hash__": ["<builtin>.hash"], "_frozen_importlib_external.ExtensionFileLoader.create_module": [], "_frozen_importlib_external.ExtensionFileLoader.exec_module": [], "_frozen_importlib_external.ExtensionFileLoader.is_package": ["_frozen_importlib_external._path_split", "<builtin>.any"], "_frozen_importlib_external.ExtensionFileLoader.get_code": [], "_frozen_importlib_external.ExtensionFileLoader.get_source": [], "_frozen_importlib_external._NamespacePath": [], "_frozen_importlib_external._NamespacePath.__init__": ["<builtin>.tuple", "_frozen_importlib_external._NamespacePath._get_parent_path"], "_frozen_importlib_external._NamespacePath._get_parent_path": ["<builtin>.getattr", "_frozen_importlib_external._NamespacePath._find_parent_path_names"], "_frozen_importlib_external._NamespacePath._find_parent_path_names": [], "_frozen_importlib_external._NamespacePath._recalculate": ["<builtin>.tuple", "_frozen_importlib_external._NamespacePath._get_parent_path", "_frozen_importlib_external.PathFinder._get_spec"], "_frozen_importlib_external.PathFinder._get_spec": ["<builtin>.hasattr", "<builtin>.isinstance", "_frozen_importlib_external.PathFinder._path_importer_cache", "_frozen_importlib_external.PathFinder._legacy_get_spec", "<builtin>.ImportError"], "_frozen_importlib_external._NamespacePath.__iter__": ["<builtin>.iter", "_frozen_importlib_external._NamespacePath._recalculate"], "_frozen_importlib_external._NamespacePath.__getitem__": ["_frozen_importlib_external._NamespacePath._recalculate"], "_frozen_importlib_external._NamespacePath.__setitem__": [], "_frozen_importlib_external._NamespacePath.__len__": ["<builtin>.len", "_frozen_importlib_external._NamespacePath._recalculate"], "_frozen_importlib_external._NamespacePath.__repr__": [], "_frozen_importlib_external._NamespacePath.__contains__": ["_frozen_importlib_external._NamespacePath._recalculate"], "_frozen_importlib_external._NamespacePath.append": [], "_frozen_importlib_external._NamespaceLoader": [], "_frozen_importlib_external._NamespaceLoader.__init__": ["_frozen_importlib_external._NamespacePath.__init__"], "_frozen_importlib_external._NamespaceLoader.module_repr": [], "_frozen_importlib_external._NamespaceLoader.is_package": [], "_frozen_importlib_external._NamespaceLoader.get_source": [], "_frozen_importlib_external._NamespaceLoader.get_code": ["<builtin>.compile"], "_frozen_importlib_external._NamespaceLoader.create_module": [], "_frozen_importlib_external._NamespaceLoader.exec_module": [], "_frozen_importlib_external._NamespaceLoader.load_module": [], "_frozen_importlib_external.PathFinder": [], "_frozen_importlib_external.PathFinder.invalidate_caches": ["<builtin>.hasattr", "<builtin>.list"], "_frozen_importlib_external.PathFinder._path_hooks": [], "_frozen_importlib_external.PathFinder._path_importer_cache": ["_frozen_importlib_external.PathFinder._path_hooks"], "_frozen_importlib_external.PathFinder._legacy_get_spec": ["<builtin>.hasattr"], "_frozen_importlib_external.PathFinder.find_spec": ["_frozen_importlib_external.PathFinder._get_spec", "_frozen_importlib_external._NamespacePath.__init__"], "_frozen_importlib_external.PathFinder.find_module": ["_frozen_importlib_external.PathFinder.find_spec"], "_frozen_importlib_external.FileFinder": [], "_frozen_importlib_external.FileFinder.__init__": ["<builtin>.set"], "_frozen_importlib_external.FileFinder.invalidate_caches": [], "_frozen_importlib_external.FileFinder.find_loader": ["_frozen_importlib_external.FileFinder.find_spec"], "_frozen_importlib_external.FileFinder.find_spec": ["_frozen_importlib_external._path_join", "_frozen_importlib_external.FileFinder._fill_cache", "_frozen_importlib_external._path_stat", "_frozen_importlib_external._path_isfile", "_frozen_importlib_external.FileFinder._get_spec"], "_frozen_importlib_external.FileFinder._get_spec": ["_frozen_importlib_external.spec_from_file_location"], "_frozen_importlib_external.FileFinder._fill_cache": ["<builtin>.set"], "_frozen_importlib_external.FileFinder.path_hook": [], "_frozen_importlib_external.FileFinder.path_hook.path_hook_for_FileFinder": ["_frozen_importlib_external._path_isdir", "<builtin>.ImportError", "_frozen_importlib_external.FileFinder.__init__"], "_frozen_importlib_external.FileFinder.__repr__": [], "_frozen_importlib_external._fix_up_module": ["_frozen_importlib_external.spec_from_file_location", "_frozen_importlib_external.FileLoader.__init__"], "_bootstrap._builtin_from_name": [], "_bootstrap._imp.extension_suffixes": [], "_frozen_importlib_external._install": ["_frozen_importlib_external._get_supported_file_loaders", "_frozen_importlib_external._setup"], "ast.literal_eval._convert_num": ["<builtin>.ValueError", "<builtin>.type", "<builtin>.isinstance", "<builtin>.repr"], "ast.literal_eval._convert_signed_num": ["ast.literal_eval._convert_num", "<builtin>.isinstance"], "ast.literal_eval._convert": ["ast.literal_eval._convert_signed_num", "ast.literal_eval._convert_num", "<builtin>.isinstance", "<builtin>.zip", "<builtin>.dict", "<builtin>.tuple", "<builtin>.map", "<builtin>.list", "<builtin>.set"], "ast.dump": ["<builtin>.TypeError", "ast.dump._format", "<builtin>.isinstance"], "ast.dump._format": ["<builtin>.getattr", "ast.dump._format", "<builtin>.isinstance", "<builtin>.repr"], "ast.copy_location": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.setattr"], "ast.fix_missing_locations": ["ast.fix_missing_locations._fix"], "ast.fix_missing_locations._fix": ["<builtin>.hasattr", "ast.fix_missing_locations._fix", "ast.iter_child_nodes"], "ast.iter_child_nodes": ["<builtin>.isinstance", "ast.iter_fields"], "ast.increment_lineno": ["<builtin>.getattr", "ast.walk"], "ast.iter_fields": ["<builtin>.getattr"], "ast._splitlines_no_ff": ["<builtin>.len"], "ast._pad_whitespace": [], "ast.get_source_segment": ["ast._splitlines_no_ff", "ast._pad_whitespace"], "ast.NodeVisitor": [], "ast.NodeVisitor.generic_visit": ["ast.NodeVisitor.visit", "<builtin>.isinstance", "ast.iter_fields"], "ast.NodeTransformer": [], "ast.NodeTransformer.generic_visit": ["<builtin>.delattr", "<builtin>.isinstance", "ast.NodeVisitor.visit", "ast.iter_fields", "<builtin>.setattr"], "ast._getter": [], "ast._setter": [], "ast._ABC": [], "ast._ABC.__instancecheck__": ["<builtin>.isinstance"], "ast._new": [], "ast.Num": [], "ast.Str": [], "ast.Bytes": [], "ast.NameConstant": [], "ast.Ellipsis": [], "ast.Ellipsis.__new__": [], "token.ISTERMINAL": [], "token.ISNONTERMINAL": [], "token.ISEOF": [], "unittest.main._convert_name": ["ntpath.isabs", "sys.base_prefix.startswith", "posixpath.isfile", "ntpath.relpath", "ntpath.isfile", "sys.path.lower", "posixpath.relpath", "posixpath.isabs", "sys.path.startswith", "sys.base_prefix.lower"], "sys.base_prefix.lower": [], "sys.path.lower": [], "unittest.main._convert_names": ["unittest.main._convert_name"], "unittest.main._convert_select_pattern": [], "unittest.main.TestProgram": [], "unittest.main.TestProgram.__init__": ["<builtin>.__import__", "posixpath.basename", "<builtin>.isinstance", "<builtin>.getattr", "ntpath.basename", "unittest.main.TestProgram.parseArgs", "unittest.main.TestProgram.runTests"], "unittest.main.TestProgram.parseArgs": ["<builtin>.isinstance", "unittest.main._convert_names", "unittest.main.TestProgram._do_discovery", "unittest.main.TestProgram._initArgParsers", "unittest.main.TestProgram.createTests", "<builtin>.list", "argparse.ArgumentParser.parse_args", "<builtin>.len"], "unittest.main.TestProgram.runTests": ["<builtin>.isinstance", "unittest.runner.TextTestRunner.run", "sys.exit", "unittest.signals.installHandler", "unittest.runner.TextTestRunner.__init__", "unittest.result.TestResult.wasSuccessful"], "unittest.main.TestProgram.usageExit": ["<builtin>.print", "unittest.main.TestProgram._initArgParsers", "unittest.main.TestProgram._print_help", "sys.exit"], "unittest.main.TestProgram._initArgParsers": ["unittest.main.TestProgram._getParentArgParser", "unittest.main.TestProgram._getDiscoveryArgParser", "unittest.main.TestProgram._getMainArgParser"], "unittest.main.TestProgram._do_discovery": ["argparse.ArgumentParser.parse_args", "unittest.main.TestProgram._initArgParsers", "unittest.main.TestProgram.createTests"], "unittest.main.TestProgram.createTests": [], "unittest.main.TestProgram._getParentArgParser": ["argparse.ArgumentParser.__init__", "argparse._ActionsContainer.add_argument"], "unittest.main.TestProgram._getMainArgParser": ["argparse.ArgumentParser.__init__", "argparse._ActionsContainer.add_argument"], "unittest.main.TestProgram._getDiscoveryArgParser": ["argparse.ArgumentParser.__init__", "argparse._ActionsContainer.add_argument"], "unittest.signals.installHandler": ["unittest.signals._InterruptHandler.__init__"], "unittest.runner.TextTestRunner.__init__": ["unittest.runner._WritelnDecorator.__init__"], "unittest.runner.TextTestRunner.run": ["<builtin>.hasattr", "unittest.runner._WritelnDecorator.writeln", "<builtin>.map", "<builtin>.len", "<builtin>.getattr", "unittest.runner.TextTestResult.printErrors", "unittest.runner.TextTestRunner._makeResult", "unittest.signals.registerResult", "time.perf_counter", "unittest.result.TestResult.wasSuccessful"], "unittest.result.TestResult.wasSuccessful": ["<builtin>.hasattr", "<builtin>.len"], "unittest.runner._WritelnDecorator": [], "unittest.runner._WritelnDecorator.__init__": [], "unittest.runner._WritelnDecorator.__getattr__": ["<builtin>.AttributeError", "<builtin>.getattr"], "unittest.runner._WritelnDecorator.writeln": [], "unittest.runner.TextTestResult": [], "unittest.runner.TextTestResult.__init__": ["<builtin>.super"], "unittest.runner.TextTestResult.getDescription": ["<builtin>.str"], "unittest.runner.TextTestResult.startTest": ["unittest.runner.TextTestResult.getDescription", "<builtin>.super"], "unittest.runner.TextTestResult.addSuccess": ["<builtin>.super", "unittest.runner._WritelnDecorator.writeln"], "unittest.runner.TextTestResult.addError": ["<builtin>.super", "unittest.runner._WritelnDecorator.writeln"], "unittest.runner.TextTestResult.addFailure": ["<builtin>.super", "unittest.runner._WritelnDecorator.writeln"], "unittest.runner.TextTestResult.addSkip": ["<builtin>.super", "unittest.runner._WritelnDecorator.writeln"], "unittest.runner.TextTestResult.addExpectedFailure": ["<builtin>.super", "unittest.runner._WritelnDecorator.writeln"], "unittest.runner.TextTestResult.addUnexpectedSuccess": ["<builtin>.super", "unittest.runner._WritelnDecorator.writeln"], "unittest.runner.TextTestResult.printErrors": ["unittest.runner.TextTestResult.printErrorList", "unittest.runner._WritelnDecorator.writeln"], "unittest.runner.TextTestResult.printErrorList": ["unittest.runner.TextTestResult.getDescription", "unittest.runner._WritelnDecorator.writeln"], "unittest.runner.TextTestRunner": [], "unittest.runner.TextTestRunner._makeResult": ["unittest.runner.TextTestResult.__init__"], "unittest.signals.registerResult": [], "unittest.signals._InterruptHandler": [], "unittest.signals._InterruptHandler.__init__": ["<builtin>.TypeError", "<builtin>.isinstance"], "unittest.signals._InterruptHandler.__init__.default_handler": [], "unittest.signals._InterruptHandler.__call__": ["weakref.WeakKeyDictionary.keys"], "unittest.signals.removeResult": ["weakref.WeakKeyDictionary.pop", "<builtin>.bool"], "unittest.signals.removeHandler": ["functools.wraps", "_functools.partial"], "unittest.signals.removeHandler.inner": ["unittest.signals.removeHandler"], "unittest.async_case.IsolatedAsyncioTestCase": [], "unittest.async_case.IsolatedAsyncioTestCase.__init__": ["<builtin>.super"], "unittest.async_case.IsolatedAsyncioTestCase.asyncSetUp": [], "unittest.async_case.IsolatedAsyncioTestCase.asyncTearDown": [], "unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup": [], "unittest.async_case.IsolatedAsyncioTestCase._callSetUp": ["doctest.DocTestCase.setUp", "unittest.async_case.IsolatedAsyncioTestCase._callAsync", "unittest.case.TestCase.setUp", "doctest.SkipDocTestCase.setUp"], "unittest.case.TestCase.setUp": [], "unittest.async_case.IsolatedAsyncioTestCase._callAsync": ["inspect.isawaitable"], "unittest.async_case.IsolatedAsyncioTestCase._callTestMethod": ["unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"], "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync": ["inspect.isawaitable"], "unittest.async_case.IsolatedAsyncioTestCase._callTearDown": ["doctest.DocTestCase.tearDown", "unittest.async_case.IsolatedAsyncioTestCase._callAsync", "unittest.case.TestCase.tearDown"], "unittest.case.TestCase.tearDown": [], "unittest.async_case.IsolatedAsyncioTestCase._callCleanup": ["unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"], "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner": [], "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop": ["unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner"], "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop": [], "unittest.async_case.IsolatedAsyncioTestCase.run": ["unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop", "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop", "<builtin>.super"], "unittest.case.SkipTest": [], "unittest.case._ShouldStop": [], "unittest.case._UnexpectedSuccess": [], "unittest.case._Outcome": ["contextlib.contextmanager"], "unittest.case._Outcome.__init__": ["<builtin>.hasattr"], "unittest.case._Outcome.testPartExecutor": ["<builtin>.str", "sys.exc_info"], "unittest.case._id": [], "unittest.case.addModuleCleanup": [], "unittest.case.doModuleCleanups": [], "unittest.case.skip": ["unittest.case.skip.decorator", "<builtin>.isinstance"], "unittest.case.skip.decorator": ["functools.wraps", "<builtin>.isinstance", "_functools.partial"], "unittest.case.skip.decorator.skip_wrapper": [], "unittest.case.skipIf": ["unittest.case.skip"], "unittest.case.skipUnless": ["unittest.case.skip"], "unittest.case.expectedFailure": [], "unittest.case._is_subtype": ["<builtin>.issubclass", "unittest.case._is_subtype", "<builtin>.all", "<builtin>.isinstance"], "unittest.case._BaseTestCaseContext": [], "unittest.case._BaseTestCaseContext.__init__": [], "unittest.case._BaseTestCaseContext._raiseFailure": [], "unittest.case._AssertRaisesBaseContext": [], "unittest.case._AssertRaisesBaseContext.__init__": ["unittest.case._BaseTestCaseContext.__init__", "re.compile"], "unittest.case._AssertRaisesBaseContext.handle": ["unittest.case._is_subtype", "<builtin>.next", "<builtin>.str", "<builtin>.TypeError", "<builtin>.iter"], "unittest.case._AssertRaisesContext": [], "unittest.case._AssertRaisesContext.__enter__": [], "unittest.case._AssertRaisesContext.__exit__": ["<builtin>.issubclass", "<builtin>.str", "traceback.clear_frames", "unittest.case._BaseTestCaseContext._raiseFailure"], "unittest.case._AssertWarnsContext": [], "unittest.case._AssertWarnsContext.__enter__": ["warnings.catch_warnings.__enter__", "<builtin>.getattr", "sys.modules.values"], "sys.modules.values": [], "unittest.case._AssertWarnsContext.__exit__": ["<builtin>.str", "<builtin>.isinstance", "warnings.catch_warnings.__exit__", "unittest.case._BaseTestCaseContext._raiseFailure"], "unittest.case._CapturingHandler": [], "unittest.case._CapturingHandler.__init__": ["logging.Handler.__init__"], "unittest.case._CapturingHandler.flush": [], "unittest.case._AssertLogsContext": [], "unittest.case._AssertLogsContext.__init__": ["unittest.case._BaseTestCaseContext.__init__"], "unittest.case._AssertLogsContext.__enter__": ["<builtin>.isinstance", "logging.Logger.setLevel", "unittest.case._CapturingHandler.__init__", "logging.Handler.setFormatter", "logging.getLogger", "logging.Formatter.__init__"], "unittest.case._AssertLogsContext.__exit__": ["logging.Logger.setLevel", "<builtin>.len", "logging.getLevelName", "unittest.case._BaseTestCaseContext._raiseFailure"], "unittest.case._OrderedChainMap": [], "unittest.case._OrderedChainMap.__iter__": ["<builtin>.set"], "unittest.case.TestCase": ["contextlib.contextmanager", "unittest.case.TestCase._deprecate"], "unittest.case.TestCase.addTypeEqualityFunc": [], "unittest.case.TestCase.addClassCleanup": [], "unittest.case.TestCase.setUpClass": [], "unittest.case.TestCase.tearDownClass": [], "unittest.case.TestCase.countTestCases": [], "unittest.case.TestCase.defaultTestResult": ["unittest.result.TestResult.__init__"], "unittest.result.TestResult.__init__": [], "unittest.case.TestCase.shortDescription": [], "unittest.case.TestCase.id": ["unittest.util.strclass"], "unittest.util.strclass": [], "unittest.case.TestCase.__eq__": ["<builtin>.type"], "unittest.case.TestCase.__hash__": ["<builtin>.hash", "<builtin>.type"], "unittest.case.TestCase.__str__": ["unittest.util.strclass"], "unittest.case.TestCase.__repr__": ["unittest.util.strclass"], "unittest.case.TestCase._addSkip": ["warnings.warn", "<builtin>.getattr", "unittest.runner.TextTestResult.addSuccess", "unittest.result.TestResult.addSuccess"], "unittest.result.TestResult.addSuccess": [], "unittest.case.TestCase.subTest": ["unittest.case._Outcome.testPartExecutor", "collections.ChainMap.__init__", "collections.ChainMap.new_child", "unittest.case._SubTest.__init__"], "unittest.case._SubTest.__init__": ["<builtin>.super"], "unittest.case.TestCase._feedErrorsToResult": ["unittest.result.TestResult.addFailure", "<builtin>.issubclass", "unittest.result.TestResult.addError", "<builtin>.isinstance", "unittest.runner.TextTestResult.addFailure", "unittest.result.TestResult.addSubTest", "unittest.runner.TextTestResult.addError"], "unittest.result.TestResult.addSubTest": ["unittest.result.TestResult._exc_info_to_string", "<builtin>.issubclass", "<builtin>.getattr", "unittest.result.TestResult.stop"], "unittest.result.TestResult.addFailure": ["unittest.result.TestResult._exc_info_to_string"], "unittest.result.TestResult.addError": ["unittest.result.TestResult._exc_info_to_string"], "unittest.case.TestCase._addExpectedFailure": ["warnings.warn", "unittest.result.TestResult.addSuccess", "unittest.result.TestResult.addExpectedFailure", "unittest.runner.TextTestResult.addSuccess", "unittest.runner.TextTestResult.addExpectedFailure"], "unittest.result.TestResult.addExpectedFailure": ["unittest.result.TestResult._exc_info_to_string"], "unittest.case.TestCase._addUnexpectedSuccess": ["unittest.result.TestResult.addFailure", "unittest.runner.TextTestResult.addUnexpectedSuccess", "unittest.runner.TextTestResult.addFailure", "warnings.warn", "sys.exc_info", "unittest.result.TestResult.addUnexpectedSuccess"], "unittest.result.TestResult.addUnexpectedSuccess": [], "unittest.case.TestCase._callSetUp": ["doctest.DocTestCase.setUp", "unittest.case.TestCase.setUp", "doctest.SkipDocTestCase.setUp"], "unittest.case.TestCase._callTestMethod": [], "unittest.case.TestCase._callTearDown": ["doctest.DocTestCase.tearDown", "unittest.case.TestCase.tearDown"], "unittest.case.TestCase._callCleanup": [], "unittest.case.TestCase.run": ["unittest.case.TestCase._addSkip", "unittest.case.TestCase._callTestMethod", "unittest.result.TestResult.stopTest", "unittest.case.TestCase.doCleanups", "unittest.case.TestCase._callTearDown", "unittest.case.TestCase.defaultTestResult", "unittest.result.TestResult.startTest", "unittest.case.TestCase._feedErrorsToResult", "unittest.result.TestResult.addSuccess", "<builtin>.getattr", "unittest.case.TestCase._addExpectedFailure", "unittest.case.TestCase._addUnexpectedSuccess", "unittest.runner.TextTestResult.startTest", "unittest.case._Outcome.testPartExecutor", "unittest.case._Outcome.__init__", "unittest.runner.TextTestResult.addSuccess", "unittest.case.TestCase._callSetUp"], "unittest.result.TestResult.startTest": ["unittest.result.TestResult._setupStdout"], "unittest.result.TestResult.stopTest": ["unittest.result.TestResult._restoreStdout"], "unittest.case.TestCase.doCleanups": ["unittest.case._Outcome.__init__", "unittest.case.TestCase._callCleanup"], "unittest.case.TestCase.doClassCleanups": ["sys.exc_info"], "unittest.case.TestCase.__call__": ["unittest.case.TestCase.run"], "unittest.case.TestCase.debug": ["doctest.DocTestCase.tearDown", "unittest.case.TestCase.tearDown", "doctest.SkipDocTestCase.setUp", "unittest.case.TestCase.setUp", "<builtin>.getattr", "doctest.DocTestCase.setUp"], "unittest.case.TestCase.fail": [], "unittest.case.TestCase.assertFalse": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage"], "unittest.util.safe_repr": ["<builtin>.len", "<builtin>.repr"], "unittest.case.TestCase._formatMessage": ["unittest.util.safe_repr"], "unittest.case.TestCase.assertTrue": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage"], "unittest.case.TestCase.assertRaises": ["unittest.case._AssertRaisesBaseContext.handle", "unittest.case._AssertRaisesBaseContext.__init__"], "unittest.case.TestCase.assertWarns": ["unittest.case._AssertRaisesBaseContext.handle", "unittest.case._AssertRaisesBaseContext.__init__"], "unittest.case.TestCase.assertLogs": ["unittest.case._AssertLogsContext.__init__"], "unittest.case.TestCase._getAssertEqualityFunc": ["<builtin>.getattr", "<builtin>.type", "<builtin>.isinstance"], "unittest.case.TestCase._baseAssertEqual": ["unittest.case.TestCase._formatMessage", "unittest.util._common_shorten_repr"], "unittest.util._common_shorten_repr": ["unittest.util._shorten", "<builtin>.tuple", "<builtin>.map", "<builtin>.len", "<builtin>.max", "genericpath.commonprefix"], "unittest.case.TestCase.assertEqual": ["unittest.case.TestCase._getAssertEqualityFunc", "unittest.case.TestCase._baseAssertEqual"], "unittest.case.TestCase.assertNotEqual": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage"], "unittest.case.TestCase.assertAlmostEqual": ["<builtin>.round", "<builtin>.TypeError", "unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "<builtin>.abs"], "unittest.case.TestCase.assertNotAlmostEqual": ["<builtin>.round", "<builtin>.TypeError", "unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "<builtin>.abs"], "unittest.case.TestCase.assertSequenceEqual": ["<builtin>.min", "<builtin>.isinstance", "unittest.util.safe_repr", "<builtin>.len", "<builtin>.range", "unittest.case.TestCase._truncateMessage", "unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "difflib.ndiff", "unittest.util._common_shorten_repr"], "unittest.case.TestCase._truncateMessage": ["<builtin>.len"], "unittest.case.TestCase.assertListEqual": ["unittest.case.TestCase.assertSequenceEqual"], "unittest.case.TestCase.assertTupleEqual": ["unittest.case.TestCase.assertSequenceEqual"], "unittest.case.TestCase.assertSetEqual": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "<builtin>.repr"], "unittest.case.TestCase.assertIn": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertNotIn": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertIs": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertIsNot": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertDictEqual": ["unittest.case.TestCase.assertIsInstance", "unittest.case.TestCase._truncateMessage", "unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "difflib.ndiff", "unittest.util._common_shorten_repr"], "unittest.case.TestCase.assertIsInstance": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail", "<builtin>.isinstance"], "unittest.case.TestCase.assertDictContainsSubset": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "warnings.warn", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertCountEqual": ["collections.Counter.__init__", "<builtin>.list", "unittest.case.TestCase._truncateMessage", "unittest.case.TestCase.fail", "unittest.util._count_diff_all_purpose", "unittest.util._count_diff_hashable", "unittest.case.TestCase._formatMessage"], "unittest.util._count_diff_all_purpose": ["<builtin>.list", "<builtin>.len", "<builtin>.range", "<builtin>.enumerate", "<builtin>.object"], "unittest.util._count_diff_hashable": ["collections.Counter.__init__"], "unittest.case.TestCase.assertMultiLineEqual": ["unittest.case.TestCase.assertIsInstance", "<builtin>.len", "unittest.case.TestCase._truncateMessage", "unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase._baseAssertEqual", "difflib.ndiff", "unittest.util._common_shorten_repr"], "unittest.case.TestCase.assertLess": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertLessEqual": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertGreater": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertGreaterEqual": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertIsNone": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertIsNotNone": ["unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail"], "unittest.case.TestCase.assertNotIsInstance": ["unittest.util.safe_repr", "unittest.case.TestCase._formatMessage", "unittest.case.TestCase.fail", "<builtin>.isinstance"], "unittest.case.TestCase.assertRaisesRegex": ["unittest.case._AssertRaisesBaseContext.handle", "unittest.case._AssertRaisesBaseContext.__init__"], "unittest.case.TestCase.assertWarnsRegex": ["unittest.case._AssertRaisesBaseContext.handle", "unittest.case._AssertRaisesBaseContext.__init__"], "unittest.case.TestCase.assertRegex": ["unittest.case.TestCase._formatMessage", "<builtin>.isinstance", "re.compile"], "unittest.case.TestCase.assertNotRegex": ["unittest.case.TestCase._formatMessage", "<builtin>.isinstance", "re.compile"], "unittest.case.TestCase._deprecate": [], "unittest.case.TestCase._deprecate.deprecated_func": ["warnings.warn", "unittest.case.TestCase.__init__"], "unittest.case.FunctionTestCase": [], "unittest.case.FunctionTestCase.__init__": ["<builtin>.super"], "unittest.case.FunctionTestCase.setUp": [], "unittest.case.FunctionTestCase.tearDown": [], "unittest.case.FunctionTestCase.runTest": [], "unittest.case.FunctionTestCase.id": [], "unittest.case.FunctionTestCase.__eq__": ["<builtin>.isinstance"], "unittest.case.FunctionTestCase.__hash__": ["<builtin>.hash", "<builtin>.type"], "unittest.case.FunctionTestCase.__str__": ["unittest.util.strclass"], "unittest.case.FunctionTestCase.__repr__": ["unittest.util.strclass"], "unittest.case.FunctionTestCase.shortDescription": [], "unittest.case._SubTest": [], "unittest.case._SubTest.runTest": ["<builtin>.NotImplementedError"], "unittest.case._SubTest._subDescription": ["weakref.WeakKeyDictionary.items", "_collections_abc.Mapping.items", "weakref.WeakValueDictionary.items"], "unittest.case._SubTest.id": ["doctest.DocTestCase.id", "unittest.case._SubTest.id", "unittest.case.TestCase.id", "unittest.case._SubTest._subDescription", "doctest.DocFileCase.id"], "unittest.case._SubTest.shortDescription": ["unittest.case._SubTest.shortDescription", "doctest.DocTestCase.shortDescription", "doctest.SkipDocTestCase.shortDescription", "unittest.case.TestCase.shortDescription"], "unittest.case._SubTest.__str__": ["unittest.case._SubTest._subDescription"], "unittest.util._shorten": ["<builtin>.len"], "unittest.util.sorted_list_difference": [], "unittest.util.unorderable_list_difference": [], "unittest.util.three_way_cmp": [], "asyncio.windows_events._OverlappedFuture": [], "asyncio.windows_events._OverlappedFuture.__init__": ["<builtin>.super"], "asyncio.windows_events._OverlappedFuture._repr_info": ["<builtin>.super"], "asyncio.windows_events._OverlappedFuture._cancel_overlapped": ["futures.Future._loop.call_exception_handler"], "futures.Future._loop.call_exception_handler": [], "asyncio.windows_events._OverlappedFuture.cancel": ["asyncio.windows_events._OverlappedFuture._cancel_overlapped", "<builtin>.super"], "asyncio.windows_events._OverlappedFuture.set_exception": ["asyncio.windows_events._OverlappedFuture._cancel_overlapped", "<builtin>.super"], "asyncio.windows_events._OverlappedFuture.set_result": ["<builtin>.super"], "asyncio.windows_events._BaseWaitHandleFuture": [], "asyncio.windows_events._BaseWaitHandleFuture.__init__": ["<builtin>.super"], "asyncio.windows_events._BaseWaitHandleFuture._poll": ["_winapi.WaitForSingleObject"], "asyncio.windows_events._BaseWaitHandleFuture._repr_info": ["asyncio.windows_events._BaseWaitHandleFuture._poll", "<builtin>.super"], "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb": [], "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait": ["asyncio.windows_events._WaitHandleFuture._unregister_wait_cb", "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb", "futures.Future._loop.call_exception_handler", "_overlapped.UnregisterWait"], "_overlapped.UnregisterWait": [], "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb": ["_winapi.CloseHandle", "<builtin>.super", "asyncio.windows_events.IocpProactor._unregister"], "asyncio.windows_events._BaseWaitHandleFuture.cancel": ["asyncio.windows_events._BaseWaitHandleFuture._unregister_wait", "asyncio.windows_events._WaitHandleFuture._unregister_wait", "<builtin>.super"], "asyncio.windows_events._WaitHandleFuture._unregister_wait": ["asyncio.windows_events.IocpProactor._wait_cancel", "_overlapped.UnregisterWaitEx", "futures.Future._loop.call_exception_handler"], "asyncio.windows_events._BaseWaitHandleFuture.set_exception": ["asyncio.windows_events._BaseWaitHandleFuture._unregister_wait", "asyncio.windows_events._WaitHandleFuture._unregister_wait", "<builtin>.super"], "asyncio.windows_events._BaseWaitHandleFuture.set_result": ["asyncio.windows_events._BaseWaitHandleFuture._unregister_wait", "asyncio.windows_events._WaitHandleFuture._unregister_wait", "<builtin>.super"], "asyncio.windows_events._WaitCancelFuture": [], "asyncio.windows_events._WaitCancelFuture.__init__": ["<builtin>.super"], "asyncio.windows_events._WaitCancelFuture.cancel": ["<builtin>.RuntimeError"], "asyncio.windows_events._WaitCancelFuture.set_result": ["asyncio.windows_events._WaitHandleFuture._unregister_wait_cb", "<builtin>.super"], "asyncio.windows_events._WaitCancelFuture.set_exception": ["asyncio.windows_events._WaitHandleFuture._unregister_wait_cb", "<builtin>.super"], "asyncio.windows_events._WaitHandleFuture": [], "asyncio.windows_events._WaitHandleFuture.__init__": ["<builtin>.super", "_overlapped.CreateEvent"], "_overlapped.CreateEvent": [], "asyncio.windows_events.IocpProactor._unregister": ["asyncio.windows_events.IocpProactor._check_closed"], "_overlapped.UnregisterWaitEx": [], "asyncio.windows_events.IocpProactor._wait_cancel": ["asyncio.windows_events.IocpProactor._wait_for_handle"], "asyncio.windows_events.PipeServer": [], "asyncio.windows_events.PipeServer.__init__": ["asyncio.windows_events.PipeServer._server_pipe_handle"], "asyncio.windows_events.PipeServer._server_pipe_handle": ["_weakrefset.WeakSet.add", "asyncio.windows_utils.PipeHandle.__init__", "_winapi.CreateNamedPipe", "asyncio.windows_events.PipeServer.closed"], "asyncio.windows_events.PipeServer._get_unconnected_pipe": ["asyncio.windows_events.PipeServer._server_pipe_handle"], "asyncio.windows_events.PipeServer.closed": [], "_winapi.CreateNamedPipe": [], "asyncio.windows_utils.PipeHandle.__init__": [], "asyncio.windows_events.PipeServer.close": ["_weakrefset.WeakSet.__iter__", "_weakrefset.WeakSet.clear"], "asyncio.windows_events._WindowsSelectorEventLoop": [], "asyncio.windows_events.ProactorEventLoop": [], "asyncio.windows_events.ProactorEventLoop.__init__": ["asyncio.windows_events.IocpProactor.__init__", "<builtin>.super"], "asyncio.windows_events.IocpProactor.__init__": ["_overlapped.CreateIoCompletionPort"], "asyncio.windows_events.ProactorEventLoop.run_forever": ["base_events.BaseEventLoop.call_soon", "<builtin>.super"], "base_events.BaseEventLoop.call_soon": [], "asyncio.windows_events.ProactorEventLoop.create_pipe_connection": ["asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport"], "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport": ["asyncio.proactor_events._ProactorReadPipeTransport.__init__"], "asyncio.windows_events.ProactorEventLoop.start_serving_pipe": ["asyncio.windows_events.PipeServer.__init__", "base_events.BaseEventLoop.call_soon"], "asyncio.windows_events.ProactorEventLoop.start_serving_pipe.loop_accept_pipe": ["asyncio.windows_utils.PipeHandle.close", "_weakrefset.WeakSet.discard", "asyncio.windows_events.PipeServer._get_unconnected_pipe", "asyncio.windows_utils.PipeHandle.fileno", "base_events.BaseEventLoop.call_exception_handler", "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport", "asyncio.windows_events.PipeServer.closed", "log.logger.warning"], "asyncio.windows_utils.PipeHandle.fileno": ["<builtin>.ValueError"], "base_events.BaseEventLoop.call_exception_handler": [], "log.logger.warning": [], "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport": ["base_subprocess.BaseSubprocessTransport._wait", "base_subprocess.BaseSubprocessTransport.__init__", "base_subprocess.BaseSubprocessTransport.close", "base_events.BaseEventLoop.create_future"], "base_events.BaseEventLoop.create_future": [], "base_subprocess.BaseSubprocessTransport.__init__": [], "base_subprocess.BaseSubprocessTransport.close": [], "base_subprocess.BaseSubprocessTransport._wait": [], "asyncio.windows_events.IocpProactor": [], "_overlapped.CreateIoCompletionPort": [], "asyncio.windows_events.IocpProactor._check_closed": ["<builtin>.RuntimeError"], "asyncio.windows_events.IocpProactor.__repr__": ["<builtin>.len"], "asyncio.windows_events.IocpProactor.set_loop": [], "asyncio.windows_events.IocpProactor.select": ["asyncio.windows_events.IocpProactor._poll"], "asyncio.windows_events.IocpProactor._poll": ["_overlapped.GetQueuedCompletionStatus", "_winapi.CloseHandle", "<builtin>.ValueError"], "asyncio.windows_events.IocpProactor._result": [], "asyncio.windows_events.IocpProactor.recv": ["asyncio.windows_events.IocpProactor._result", "<builtin>.isinstance", "_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._register_with_iocp", "asyncio.windows_events.IocpProactor._register"], "asyncio.windows_events.IocpProactor._register_with_iocp": ["_weakrefset.WeakSet.add", "_overlapped.CreateIoCompletionPort"], "_overlapped.Overlapped": [], "asyncio.windows_events.IocpProactor.recv.finish_recv": ["<builtin>.ConnectionResetError"], "<builtin>.ConnectionResetError": [], "asyncio.windows_events.IocpProactor._register": ["asyncio.windows_events.IocpProactor.send.finish_send", "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe", "asyncio.windows_events.IocpProactor.accept.finish_accept", "asyncio.windows_events.IocpProactor.recv_into.finish_recv", "asyncio.windows_events.IocpProactor.connect.finish_connect", "asyncio.windows_events._OverlappedFuture.__init__", "asyncio.windows_events.IocpProactor._check_closed", "asyncio.windows_events.IocpProactor.recv.finish_recv", "asyncio.windows_events._OverlappedFuture.set_result", "asyncio.windows_events._OverlappedFuture.set_exception", "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile", "asyncio.windows_events.IocpProactor.sendto.finish_send", "asyncio.windows_events.IocpProactor.recvfrom.finish_recv"], "asyncio.windows_events.IocpProactor.recv_into": ["asyncio.windows_events.IocpProactor._result", "<builtin>.isinstance", "_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._register_with_iocp", "asyncio.windows_events.IocpProactor._register"], "asyncio.windows_events.IocpProactor.recv_into.finish_recv": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.recvfrom": ["asyncio.windows_events.IocpProactor._register_with_iocp", "asyncio.windows_events.IocpProactor._result", "asyncio.windows_events.IocpProactor._register", "_overlapped.Overlapped"], "asyncio.windows_events.IocpProactor.recvfrom.finish_recv": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.sendto": ["asyncio.windows_events.IocpProactor._register_with_iocp", "asyncio.windows_events.IocpProactor._register", "_overlapped.Overlapped"], "asyncio.windows_events.IocpProactor.sendto.finish_send": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.send": ["asyncio.windows_events.IocpProactor._register_with_iocp", "<builtin>.isinstance", "asyncio.windows_events.IocpProactor._register", "_overlapped.Overlapped"], "asyncio.windows_events.IocpProactor.send.finish_send": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.accept": ["asyncio.windows_events.IocpProactor._get_accept_socket", "tasks.ensure_future", "asyncio.windows_events.IocpProactor.accept.accept_coro", "_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._register_with_iocp", "asyncio.windows_events.IocpProactor._register"], "asyncio.windows_events.IocpProactor._get_accept_socket": [], "asyncio.windows_events.IocpProactor.accept.finish_accept": [], "asyncio.windows_events.IocpProactor.accept.accept_coro": [], "tasks.ensure_future": [], "asyncio.windows_events.IocpProactor.connect": ["_overlapped.WSAConnect", "_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._register_with_iocp", "asyncio.windows_events.IocpProactor._register", "_overlapped.BindLocal"], "_overlapped.WSAConnect": [], "_overlapped.BindLocal": [], "asyncio.windows_events.IocpProactor.connect.finish_connect": [], "asyncio.windows_events.IocpProactor.sendfile": ["asyncio.windows_events.IocpProactor._register_with_iocp", "msvcrt.get_osfhandle", "asyncio.windows_events.IocpProactor._register", "_overlapped.Overlapped"], "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.accept_pipe": ["asyncio.windows_events.IocpProactor._register_with_iocp", "asyncio.windows_events.IocpProactor._result", "asyncio.windows_events.IocpProactor._register", "_overlapped.Overlapped"], "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe": [], "asyncio.windows_events.IocpProactor.connect_pipe": ["tasks.sleep", "asyncio.windows_utils.PipeHandle.__init__", "<builtin>.min", "_overlapped.ConnectPipe"], "_overlapped.ConnectPipe": [], "tasks.sleep": [], "asyncio.windows_events.IocpProactor.wait_for_handle": ["asyncio.windows_events.IocpProactor._wait_for_handle"], "asyncio.windows_events.IocpProactor._wait_for_handle": ["asyncio.windows_events._WaitHandleFuture.__init__", "asyncio.windows_events.IocpProactor._check_closed", "_overlapped.Overlapped", "_overlapped.RegisterWaitWithQueue", "asyncio.windows_events._WaitCancelFuture.__init__"], "_overlapped.RegisterWaitWithQueue": [], "asyncio.windows_events.IocpProactor._wait_for_handle.finish_wait_for_handle": ["asyncio.windows_events._BaseWaitHandleFuture._poll"], "_overlapped.GetQueuedCompletionStatus": [], "asyncio.windows_events.IocpProactor._stop_serving": ["_weakrefset.WeakSet.add"], "asyncio.windows_events.IocpProactor.close": ["time.monotonic", "<builtin>.isinstance", "asyncio.windows_events.IocpProactor._poll", "log.logger.debug", "<builtin>.list", "_winapi.CloseHandle"], "log.logger.debug": [], "asyncio.windows_events.IocpProactor.__del__": ["asyncio.windows_events.IocpProactor.close"], "asyncio.windows_events._WindowsSubprocessTransport": [], "asyncio.windows_events._WindowsSubprocessTransport._start": ["<builtin>.int", "asyncio.windows_utils.Popen.__init__", "base_subprocess.BaseSubprocessTransport._loop._proactor.wait_for_handle"], "asyncio.windows_utils.Popen.__init__": ["asyncio.windows_utils.PipeHandle.__init__", "asyncio.windows_utils.pipe", "_winapi.CloseHandle", "<builtin>.super", "msvcrt.open_osfhandle"], "asyncio.windows_events._WindowsSubprocessTransport._start.callback": ["subprocess.Popen.poll", "base_subprocess.BaseSubprocessTransport._process_exited"], "base_subprocess.BaseSubprocessTransport._process_exited": [], "base_subprocess.BaseSubprocessTransport._loop._proactor.wait_for_handle": [], "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [], "asyncio.windows_events.WindowsProactorEventLoopPolicy": [], "asyncio.proactor_events._set_socket_extra": ["trsock.TransportSocket", "transports._FlowControlMixin._loop.get_debug", "log.logger.warning"], "trsock.TransportSocket": [], "transports._FlowControlMixin._loop.get_debug": [], "asyncio.proactor_events._ProactorBasePipeTransport": [], "asyncio.proactor_events._ProactorBasePipeTransport.__init__": ["transports._FlowControlMixin._loop.call_soon", "asyncio.proactor_events._ProactorDatagramTransport._set_extra", "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol", "<builtin>.super", "asyncio.proactor_events._ProactorSocketTransport._set_extra", "asyncio.proactor_events._ProactorBasePipeTransport._set_extra"], "asyncio.proactor_events._ProactorDatagramTransport._set_extra": ["asyncio.proactor_events._set_socket_extra"], "asyncio.proactor_events._ProactorBasePipeTransport._set_extra": [], "asyncio.proactor_events._ProactorSocketTransport._set_extra": ["asyncio.proactor_events._set_socket_extra"], "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol": [], "transports._FlowControlMixin._loop.call_soon": [], "asyncio.proactor_events._ProactorBasePipeTransport.__repr__": ["<builtin>.len"], "asyncio.proactor_events._ProactorBasePipeTransport.get_protocol": [], "asyncio.proactor_events._ProactorBasePipeTransport.is_closing": [], "asyncio.proactor_events._ProactorBasePipeTransport.close": ["transports._FlowControlMixin._loop.call_soon"], "asyncio.proactor_events._ProactorBasePipeTransport.__del__": ["asyncio.proactor_events._ProactorBasePipeTransport.close"], "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error": ["<builtin>.isinstance", "asyncio.proactor_events._ProactorBasePipeTransport._force_close", "log.logger.debug", "transports._FlowControlMixin._loop.get_debug", "transports._FlowControlMixin._loop.call_exception_handler"], "transports._FlowControlMixin._loop.call_exception_handler": [], "asyncio.proactor_events._ProactorBasePipeTransport._force_close": ["transports._FlowControlMixin._loop.call_soon"], "asyncio.proactor_events._ProactorBasePipeTransport._call_connection_lost": ["<builtin>.hasattr"], "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size": ["<builtin>.len"], "asyncio.proactor_events._ProactorReadPipeTransport": [], "asyncio.proactor_events._ProactorReadPipeTransport.__init__": ["transports._FlowControlMixin._loop.call_soon", "<builtin>.super"], "asyncio.proactor_events._ProactorReadPipeTransport.is_reading": [], "asyncio.proactor_events._ProactorReadPipeTransport.pause_reading": ["log.logger.debug", "transports._FlowControlMixin._loop.get_debug"], "asyncio.proactor_events._ProactorReadPipeTransport.resume_reading": ["transports._FlowControlMixin._loop.call_soon", "log.logger.debug", "transports._FlowControlMixin._loop.get_debug"], "asyncio.proactor_events._ProactorReadPipeTransport._eof_received": ["asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "asyncio.proactor_events._ProactorBasePipeTransport.close", "log.logger.debug", "transports._FlowControlMixin._loop.get_debug"], "asyncio.proactor_events._ProactorReadPipeTransport._data_received": ["asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "asyncio.proactor_events._ProactorReadPipeTransport._eof_received", "<builtin>.isinstance", "protocols._feed_data_to_buffered_proto"], "protocols._feed_data_to_buffered_proto": [], "asyncio.proactor_events._ProactorReadPipeTransport._loop_reading": ["asyncio.proactor_events._ProactorBasePipeTransport._force_close", "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "log.logger.debug", "transports._FlowControlMixin._loop.get_debug", "transports._FlowControlMixin._loop._proactor.recv", "asyncio.proactor_events._ProactorReadPipeTransport._data_received"], "transports._FlowControlMixin._loop._proactor.recv": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport.__init__": ["<builtin>.super"], "asyncio.proactor_events._ProactorBaseWritePipeTransport.write": ["<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.type", "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing", "<builtin>.TypeError", "<builtin>.bytearray", "<builtin>.bytes", "log.logger.warning", "transports._FlowControlMixin._maybe_pause_protocol"], "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing": ["transports._FlowControlMixin._loop.call_soon", "transports._FlowControlMixin._loop._proactor.send", "asyncio.proactor_events._ProactorBasePipeTransport._force_close", "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "<builtin>.len", "transports._FlowControlMixin._maybe_pause_protocol", "transports._FlowControlMixin._maybe_resume_protocol"], "transports._FlowControlMixin._maybe_pause_protocol": [], "transports._FlowControlMixin._maybe_resume_protocol": [], "transports._FlowControlMixin._loop._proactor.send": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport.can_write_eof": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport.write_eof": ["asyncio.proactor_events._ProactorBasePipeTransport.close"], "asyncio.proactor_events._ProactorBaseWritePipeTransport.abort": ["asyncio.proactor_events._ProactorBasePipeTransport._force_close"], "asyncio.proactor_events._ProactorBaseWritePipeTransport._make_empty_waiter": ["<builtin>.RuntimeError", "transports._FlowControlMixin._loop.create_future"], "transports._FlowControlMixin._loop.create_future": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport._reset_empty_waiter": [], "asyncio.proactor_events._ProactorWritePipeTransport": [], "asyncio.proactor_events._ProactorWritePipeTransport.__init__": ["transports._FlowControlMixin._loop._proactor.recv", "<builtin>.super"], "asyncio.proactor_events._ProactorWritePipeTransport._pipe_closed": ["asyncio.proactor_events._ProactorBasePipeTransport._force_close", "asyncio.proactor_events._ProactorBasePipeTransport.close", "<builtin>.BrokenPipeError"], "<builtin>.BrokenPipeError": [], "asyncio.proactor_events._ProactorDatagramTransport": [], "asyncio.proactor_events._ProactorDatagramTransport.__init__": ["transports._FlowControlMixin._loop.call_soon", "collections.deque", "<builtin>.super"], "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size": ["<builtin>.len", "<builtin>.sum"], "asyncio.proactor_events._ProactorDatagramTransport.abort": ["asyncio.proactor_events._ProactorBasePipeTransport._force_close"], "asyncio.proactor_events._ProactorDatagramTransport.sendto": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.bytes", "transports._FlowControlMixin._maybe_pause_protocol", "log.logger.warning", "asyncio.proactor_events._ProactorDatagramTransport._loop_writing"], "asyncio.proactor_events._ProactorDatagramTransport._loop_writing": ["transports._FlowControlMixin._loop.call_soon", "transports._FlowControlMixin._loop._proactor.send", "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "transports._FlowControlMixin._loop._proactor.sendto", "transports._FlowControlMixin._maybe_resume_protocol"], "transports._FlowControlMixin._loop._proactor.sendto": [], "asyncio.proactor_events._ProactorDatagramTransport._loop_reading": ["transports._FlowControlMixin._loop._proactor.recv", "transports._FlowControlMixin._loop._proactor.recvfrom"], "transports._FlowControlMixin._loop._proactor.recvfrom": [], "asyncio.proactor_events._ProactorDuplexPipeTransport": [], "asyncio.proactor_events._ProactorDuplexPipeTransport.can_write_eof": [], "asyncio.proactor_events._ProactorDuplexPipeTransport.write_eof": [], "asyncio.proactor_events._ProactorSocketTransport": [], "asyncio.proactor_events._ProactorSocketTransport.__init__": ["base_events._set_nodelay", "<builtin>.super"], "base_events._set_nodelay": [], "asyncio.proactor_events._ProactorSocketTransport.can_write_eof": [], "asyncio.proactor_events._ProactorSocketTransport.write_eof": [], "asyncio.proactor_events.BaseProactorEventLoop": [], "asyncio.proactor_events.BaseProactorEventLoop.__init__": ["threading.main_thread", "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe", "log.logger.debug", "threading.current_thread", "<builtin>.super"], "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe": [], "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport": ["asyncio.proactor_events._ProactorSocketTransport.__init__"], "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport": ["asyncio.proactor_events._ProactorSocketTransport.__init__", "sslproto.SSLProtocol"], "sslproto.SSLProtocol": [], "asyncio.proactor_events.BaseProactorEventLoop._make_datagram_transport": ["asyncio.proactor_events._ProactorDatagramTransport.__init__"], "asyncio.proactor_events.BaseProactorEventLoop._make_read_pipe_transport": ["asyncio.proactor_events._ProactorReadPipeTransport.__init__"], "asyncio.proactor_events.BaseProactorEventLoop._make_write_pipe_transport": ["asyncio.proactor_events._ProactorWritePipeTransport.__init__"], "asyncio.proactor_events.BaseProactorEventLoop.close": ["asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures", "threading.main_thread", "<builtin>.RuntimeError", "base_events.BaseEventLoop.is_running", "threading.current_thread", "<builtin>.super", "base_events.BaseEventLoop.is_closed", "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe"], "base_events.BaseEventLoop.is_running": [], "base_events.BaseEventLoop.is_closed": [], "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures": [], "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_recv": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_recv_into": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_sendall": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_connect": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_accept": [], "asyncio.proactor_events.BaseProactorEventLoop._sock_sendfile_native": ["<builtin>.min", "exceptions.SendfileNotAvailableError"], "exceptions.SendfileNotAvailableError": [], "asyncio.proactor_events.BaseProactorEventLoop._sendfile_native": ["base_events.BaseEventLoop.sock_sendfile"], "base_events.BaseEventLoop.sock_sendfile": [], "asyncio.proactor_events.BaseProactorEventLoop._loop_self_reading": ["base_events.BaseEventLoop.call_exception_handler"], "asyncio.proactor_events.BaseProactorEventLoop._write_to_self": ["log.logger.debug"], "asyncio.proactor_events.BaseProactorEventLoop._start_serving": ["base_events.BaseEventLoop.call_soon"], "asyncio.proactor_events.BaseProactorEventLoop._start_serving.loop": ["asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport", "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport", "log.logger.debug", "base_events.BaseEventLoop.call_exception_handler", "trsock.TransportSocket", "base_events.BaseEventLoop.is_closed"], "asyncio.proactor_events.BaseProactorEventLoop._process_events": [], "asyncio.proactor_events.BaseProactorEventLoop._stop_serving": [], "asyncio.windows_utils.pipe": ["_winapi.ConnectNamedPipe", "_winapi.CreateNamedPipe", "tempfile.mktemp", "<builtin>.next", "_winapi.CreateFile", "_winapi.CloseHandle"], "tempfile.mktemp": ["posixpath.join", "ntpath.join", "tempfile._get_candidate_names", "tempfile._exists", "<builtin>.next", "<builtin>.range", "<builtin>.FileExistsError", "tempfile.gettempdir"], "_winapi.CreateFile": [], "_winapi.ConnectNamedPipe": [], "asyncio.windows_utils.PipeHandle": [], "asyncio.windows_utils.PipeHandle.__repr__": [], "asyncio.windows_utils.PipeHandle.handle": [], "asyncio.windows_utils.PipeHandle.__del__": ["asyncio.windows_utils.PipeHandle.close"], "asyncio.windows_utils.PipeHandle.__enter__": [], "asyncio.windows_utils.PipeHandle.__exit__": ["asyncio.windows_utils.PipeHandle.close"], "asyncio.windows_utils.Popen": [], "tempfile._exists": [], "tempfile._infer_return_type": ["<builtin>.TypeError", "<builtin>.isinstance"], "tempfile._sanitize_params": ["tempfile.gettempdirb", "tempfile.gettempdir", "tempfile._infer_return_type"], "tempfile.gettempdir": ["tempfile._get_default_tempdir"], "tempfile.gettempdirb": ["tempfile.gettempdir"], "tempfile._RandomNameSequence": [], "tempfile._RandomNameSequence.rng": ["<builtin>.getattr", "random.Random.__init__"], "tempfile._RandomNameSequence.__iter__": [], "tempfile._RandomNameSequence.__next__": ["<builtin>.range"], "tempfile._candidate_tempdir_list": ["os.getenv"], "tempfile._get_default_tempdir": ["posixpath.abspath", "posixpath.join", "ntpath.join", "<builtin>.next", "ntpath.isdir", "posixpath.isdir", "<builtin>.range", "<builtin>.FileNotFoundError", "ntpath.abspath", "tempfile._candidate_tempdir_list", "io.open"], "tempfile._get_candidate_names": [], "tempfile._mkstemp_inner": ["posixpath.abspath", "posixpath.join", "ntpath.join", "tempfile._get_candidate_names", "<builtin>.next", "<builtin>.map", "ntpath.isdir", "posixpath.isdir", "<builtin>.range", "sys.audit", "ntpath.abspath", "<builtin>.FileExistsError"], "tempfile.gettempprefix": [], "tempfile.gettempprefixb": ["tempfile.gettempprefix"], "tempfile.mkstemp": ["tempfile._mkstemp_inner", "tempfile._sanitize_params"], "tempfile.mkdtemp": ["posixpath.join", "ntpath.join", "tempfile._get_candidate_names", "<builtin>.next", "<builtin>.map", "ntpath.isdir", "posixpath.isdir", "<builtin>.range", "sys.audit", "<builtin>.FileExistsError", "tempfile._sanitize_params"], "tempfile._TemporaryFileCloser": [], "tempfile._TemporaryFileCloser.__init__": [], "tempfile._TemporaryFileCloser.close": [], "tempfile._TemporaryFileCloser.__del__": ["tempfile._TemporaryFileCloser.close"], "tempfile._TemporaryFileWrapper": [], "tempfile._TemporaryFileWrapper.__init__": ["tempfile._TemporaryFileCloser.__init__"], "tempfile._TemporaryFileWrapper.__getattr__": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.getattr", "_functools.partial", "functools.wraps", "<builtin>.setattr"], "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper": ["tempfile._TemporaryFileWrapper.__getattr__.func_wrapper"], "tempfile._TemporaryFileWrapper.__enter__": [], "tempfile._TemporaryFileWrapper.__exit__": ["urllib.response.addclosehook.close", "tempfile._TemporaryFileWrapper.close"], "urllib.response.addclosehook.close": ["urllib.request.ftpwrapper.file_close", "<builtin>.super"], "tempfile._TemporaryFileWrapper.close": ["tempfile._TemporaryFileCloser.close"], "tempfile._TemporaryFileWrapper.__iter__": [], "tempfile.NamedTemporaryFile": ["io.open", "tempfile._TemporaryFileWrapper.__init__", "tempfile._mkstemp_inner", "tempfile._sanitize_params"], "tempfile.TemporaryFile": ["io.open", "tempfile._mkstemp_inner", "tempfile._sanitize_params"], "tempfile.SpooledTemporaryFile": [], "tempfile.SpooledTemporaryFile.__init__": ["io.TextIOWrapper", "io.BytesIO"], "tempfile.SpooledTemporaryFile._check": ["tempfile.SpooledTemporaryFile.rollover"], "tempfile.SpooledTemporaryFile.rollover": ["tempfile.NamedTemporaryFile", "<builtin>.hasattr"], "tempfile.SpooledTemporaryFile.__enter__": ["<builtin>.ValueError"], "tempfile.SpooledTemporaryFile.__exit__": [], "tempfile.SpooledTemporaryFile.__iter__": [], "tempfile.SpooledTemporaryFile.close": [], "tempfile.SpooledTemporaryFile.closed": [], "tempfile.SpooledTemporaryFile.encoding": [], "tempfile.SpooledTemporaryFile.errors": [], "tempfile.SpooledTemporaryFile.fileno": ["tempfile.SpooledTemporaryFile.rollover"], "tempfile.SpooledTemporaryFile.flush": [], "tempfile.SpooledTemporaryFile.isatty": [], "tempfile.SpooledTemporaryFile.mode": [], "tempfile.SpooledTemporaryFile.name": [], "tempfile.SpooledTemporaryFile.newlines": [], "tempfile.SpooledTemporaryFile.read": [], "tempfile.SpooledTemporaryFile.readline": [], "tempfile.SpooledTemporaryFile.readlines": [], "tempfile.SpooledTemporaryFile.seek": [], "tempfile.SpooledTemporaryFile.softspace": [], "tempfile.SpooledTemporaryFile.tell": [], "tempfile.SpooledTemporaryFile.truncate": ["tempfile.SpooledTemporaryFile.rollover"], "tempfile.SpooledTemporaryFile.write": ["tempfile.SpooledTemporaryFile._check"], "tempfile.SpooledTemporaryFile.writelines": ["tempfile.SpooledTemporaryFile._check"], "tempfile.TemporaryDirectory": [], "tempfile.TemporaryDirectory.__init__": ["weakref.finalize.__init__", "tempfile.mkdtemp"], "tempfile.TemporaryDirectory._rmtree": ["shutil.rmtree"], "tempfile.TemporaryDirectory._rmtree.onerror.resetperms": [], "tempfile.TemporaryDirectory._cleanup": ["warnings.warn", "tempfile.TemporaryDirectory._rmtree"], "tempfile.TemporaryDirectory.__repr__": [], "tempfile.TemporaryDirectory.__enter__": [], "tempfile.TemporaryDirectory.__exit__": ["tempfile.TemporaryDirectory.cleanup"], "tempfile.TemporaryDirectory.cleanup": ["tempfile.TemporaryDirectory._rmtree", "weakref.finalize.detach"], "unittest.suite._call_if_exists": ["<builtin>.getattr"], "unittest.suite._call_if_exists.<lambda1>": [], "unittest.suite.BaseTestSuite": [], "unittest.suite.BaseTestSuite.addTests": ["<builtin>.TypeError", "unittest.suite.BaseTestSuite.addTest", "<builtin>.isinstance"], "unittest.suite.BaseTestSuite.__repr__": ["unittest.util.strclass", "<builtin>.list"], "unittest.suite.BaseTestSuite.__eq__": ["<builtin>.isinstance", "<builtin>.list"], "unittest.suite.BaseTestSuite.__iter__": ["<builtin>.iter"], "unittest.suite.BaseTestSuite.countTestCases": ["unittest.suite.BaseTestSuite.countTestCases", "unittest.suite.BaseTestSuite.__iter__"], "unittest.suite.BaseTestSuite.run": ["<builtin>.enumerate", "unittest.suite.BaseTestSuite._removeTestAtIndex", "doctest._DocTestSuite._removeTestAtIndex"], "unittest.suite.BaseTestSuite._removeTestAtIndex": ["<builtin>.hasattr"], "unittest.suite.BaseTestSuite.__call__": ["unittest.suite.BaseTestSuite.run", "unittest.suite.TestSuite.run"], "unittest.suite.TestSuite.run": ["doctest._DocTestSuite._removeTestAtIndex", "unittest.suite.TestSuite._handleModuleTearDown", "unittest.suite.TestSuite._handleModuleFixture", "unittest.suite.TestSuite._tearDownPreviousClass", "<builtin>.enumerate", "<builtin>.getattr", "unittest.suite._isnotsuite", "unittest.suite.TestSuite._handleClassSetUp"], "unittest.suite.BaseTestSuite.debug": ["unittest.suite.BaseTestSuite.debug", "unittest.suite.TestSuite.debug", "unittest.suite.BaseTestSuite.__iter__"], "unittest.suite.TestSuite.debug": ["unittest.suite.TestSuite.run"], "unittest.suite.TestSuite": [], "unittest.suite._isnotsuite": ["<builtin>.iter"], "unittest.suite.TestSuite._tearDownPreviousClass": ["unittest.util.strclass", "<builtin>.isinstance", "<builtin>.len", "<builtin>.getattr", "unittest.suite._call_if_exists", "unittest.suite.TestSuite._createClassOrModuleLevelException"], "unittest.suite.TestSuite._handleModuleFixture": ["<builtin>.isinstance", "unittest.suite.TestSuite._handleModuleTearDown", "unittest.suite.TestSuite._get_previous_module", "unittest.case.doModuleCleanups", "<builtin>.getattr", "unittest.suite._call_if_exists", "unittest.suite.TestSuite._createClassOrModuleLevelException"], "unittest.suite.TestSuite._handleClassSetUp": ["unittest.util.strclass", "<builtin>.isinstance", "<builtin>.len", "<builtin>.getattr", "unittest.suite._call_if_exists", "unittest.suite.TestSuite._createClassOrModuleLevelException"], "unittest.suite.TestSuite._handleModuleTearDown": ["<builtin>.isinstance", "unittest.suite.TestSuite._get_previous_module", "unittest.case.doModuleCleanups", "<builtin>.getattr", "unittest.suite._call_if_exists", "unittest.suite.TestSuite._createClassOrModuleLevelException"], "unittest.suite.TestSuite._createClassOrModuleLevelException": ["unittest.suite.TestSuite._addClassOrModuleLevelException"], "unittest.suite.TestSuite._get_previous_module": ["<builtin>.getattr"], "unittest.suite.TestSuite._addClassOrModuleLevelException": ["<builtin>.isinstance", "<builtin>.str", "unittest.suite._ErrorHolder.__init__", "<builtin>.getattr", "sys.exc_info"], "unittest.suite._ErrorHolder.__init__": [], "unittest.suite._ErrorHolder": [], "unittest.suite._ErrorHolder.id": [], "unittest.suite._ErrorHolder.shortDescription": [], "unittest.suite._ErrorHolder.__repr__": [], "unittest.suite._ErrorHolder.__str__": ["unittest.suite._ErrorHolder.id"], "unittest.suite._ErrorHolder.run": [], "unittest.suite._ErrorHolder.__call__": ["unittest.suite._ErrorHolder.run"], "unittest.suite._ErrorHolder.countTestCases": [], "unittest.suite._DebugResult": [], "unittest.result.failfast": ["functools.wraps", "_functools.partial"], "unittest.result.failfast.inner": ["<builtin>.getattr"], "unittest.result.TestResult": ["unittest.main.TestProgram.__init__.failfast", "unittest.result.TestResult.failfast", "unittest.runner.TextTestRunner.failfast"], "unittest.result.TestResult.printErrors": [], "unittest.result.TestResult._setupStdout": ["io.StringIO"], "unittest.result.TestResult.startTestRun": [], "unittest.result.TestResult._restoreStdout": ["sys.stderr.getvalue", "sys.stderr.write", "sys.stdout.getvalue", "sys.stdout.write"], "sys.stdout.getvalue": [], "sys.stderr.getvalue": [], "unittest.result.TestResult.stopTestRun": [], "unittest.main.TestProgram.__init__.failfast": [], "unittest.result.TestResult.failfast": [], "unittest.runner.TextTestRunner.failfast": [], "unittest.result.TestResult._exc_info_to_string": ["traceback.TracebackException.__init__", "sys.stderr.getvalue", "unittest.result.TestResult._is_relevant_tb_level", "traceback.TracebackException.format", "<builtin>.list", "sys.stdout.getvalue", "unittest.result.TestResult._count_relevant_tb_levels"], "unittest.result.TestResult.stop": [], "unittest.result.TestResult.addSkip": [], "unittest.result.TestResult._is_relevant_tb_level": [], "unittest.result.TestResult._count_relevant_tb_levels": ["unittest.result.TestResult._is_relevant_tb_level"], "unittest.result.TestResult.__repr__": ["<builtin>.len", "unittest.util.strclass"], "unittest.loader._FailedTest": [], "unittest.loader._FailedTest.__init__": ["<builtin>.super"], "unittest.loader._FailedTest.__getattr__": ["<builtin>.super"], "unittest.loader._FailedTest.__getattr__.testFailure": [], "unittest.loader._make_failed_import_test": ["<builtin>.ImportError", "unittest.loader._make_failed_test", "traceback.format_exc"], "unittest.loader._make_failed_test": ["unittest.loader._FailedTest.__init__", "unittest.suite.BaseTestSuite.__init__"], "unittest.loader._make_failed_load_tests": ["unittest.loader._make_failed_test", "traceback.format_exc"], "unittest.loader._make_skipped_test": ["unittest.case.skip", "<builtin>.str", "unittest.case.skip.decorator", "unittest.case.skip.decorator.skip_wrapper", "unittest.case.skipIf.reason", "<builtin>.type", "unittest.case.skipUnless.reason", "unittest.suite.BaseTestSuite.__init__"], "unittest.case.skipIf.reason": [], "unittest.case.skipUnless.reason": [], "unittest.loader._make_skipped_test.testSkipped": [], "unittest.loader._jython_aware_splitext": ["posixpath.splitext", "ntpath.splitext", "sys.base_prefix.lower", "sys.path.lower"], "unittest.loader.TestLoader": ["<builtin>.staticmethod"], "<builtin>.staticmethod": [], "unittest.loader.TestLoader.__init__": ["<builtin>.set", "<builtin>.super"], "unittest.loader.TestLoader.loadTestsFromTestCase": ["<builtin>.hasattr", "<builtin>.issubclass", "<builtin>.map", "unittest.loader.TestLoader.getTestCaseNames", "<builtin>.TypeError", "unittest.suite.BaseTestSuite.__init__"], "unittest.loader.TestLoader.getTestCaseNames": ["<builtin>.filter", "<builtin>.dir", "functools.cmp_to_key", "<builtin>.list"], "unittest.loader.TestLoader.loadTestsFromModule": ["<builtin>.issubclass", "<builtin>.dir", "<builtin>.isinstance", "unittest.loader.TestLoader.loadTestsFromTestCase", "unittest.loader._make_failed_load_tests", "warnings.warn", "<builtin>.TypeError", "<builtin>.len", "<builtin>.getattr", "<builtin>.sorted", "unittest.suite.BaseTestSuite.__init__"], "unittest.loader.TestLoader.loadTestsFromName": ["<builtin>.issubclass", "<builtin>.__import__", "unittest.loader._make_failed_import_test", "traceback.format_exc", "<builtin>.isinstance", "unittest.loader.TestLoader.loadTestsFromTestCase", "<builtin>.callable", "unittest.loader.TestLoader.loadTestsFromModule", "<builtin>.TypeError", "<builtin>.getattr", "unittest.loader._make_failed_test", "unittest.suite.BaseTestSuite.__init__"], "unittest.loader.TestLoader.loadTestsFromNames": ["unittest.loader.TestLoader.loadTestsFromName", "unittest.suite.BaseTestSuite.__init__"], "unittest.loader.TestLoader.getTestCaseNames.shouldIncludeMethod": ["<builtin>.callable", "<builtin>.getattr", "<builtin>.any", "fnmatch.fnmatchcase"], "fnmatch.fnmatchcase": ["fnmatch._compile_pattern"], "unittest.loader.TestLoader.discover": ["posixpath.abspath", "posixpath.isfile", "ntpath.isdir", "<builtin>.TypeError", "posixpath.join", "ntpath.join", "posixpath.isdir", "ntpath.abspath", "ntpath.isfile", "unittest.loader.TestLoader._find_tests", "unittest.suite.BaseTestSuite.__init__", "<builtin>.__import__", "sys.path.remove", "ntpath.dirname", "sys.path.insert", "<builtin>.list", "posixpath.dirname", "<builtin>.ImportError", "unittest.loader.TestLoader._get_directory_containing_module"], "unittest.loader.TestLoader._find_tests": ["posixpath.join", "ntpath.join", "unittest.loader.TestLoader._get_name_from_path", "<builtin>.sorted", "unittest.loader.TestLoader._find_tests", "unittest.loader.TestLoader._find_test_path"], "unittest.loader.TestLoader._get_directory_containing_module": ["posixpath.abspath", "ntpath.dirname", "posixpath.basename", "posixpath.dirname", "ntpath.abspath", "ntpath.basename"], "sys.path.remove": [], "unittest.loader.TestLoader._get_name_from_path": ["ntpath.isabs", "sys.base_prefix.startswith", "unittest.loader._jython_aware_splitext", "posixpath.normpath", "sys.path.replace", "ntpath.relpath", "sys.base_prefix.replace", "posixpath.relpath", "posixpath.isabs", "sys.path.startswith", "ntpath.normpath"], "unittest.loader.TestLoader._get_module_from_name": ["<builtin>.__import__"], "unittest.loader.TestLoader._match_path": ["fnmatch.fnmatch"], "fnmatch.fnmatch": ["ntpath.normcase", "posixpath.normcase", "fnmatch.fnmatchcase"], "unittest.loader.TestLoader._find_test_path": ["posixpath.abspath", "unittest.loader._make_skipped_test", "posixpath.isfile", "ntpath.isdir", "unittest.loader.TestLoader.loadTestsFromModule", "<builtin>.getattr", "ntpath.basename", "posixpath.join", "posixpath.basename", "ntpath.join", "unittest.loader.TestLoader._match_path", "posixpath.isdir", "ntpath.abspath", "ntpath.isfile", "unittest.loader.TestLoader._get_module_from_name", "unittest.loader._make_failed_import_test", "unittest.loader.TestLoader._get_name_from_path", "ntpath.realpath", "ntpath.dirname", "unittest.loader._jython_aware_splitext", "posixpath.dirname", "<builtin>.ImportError", "posixpath.realpath"], "unittest.loader._makeLoader": ["unittest.loader.TestLoader.__init__"], "unittest.loader.getTestCaseNames": ["unittest.loader._makeLoader", "unittest.loader.TestLoader.getTestCaseNames"], "unittest.loader.makeSuite": ["unittest.loader.TestLoader.loadTestsFromTestCase", "unittest.loader._makeLoader"], "unittest.loader.findTestCases": ["unittest.loader.TestLoader.loadTestsFromModule", "unittest.loader._makeLoader"], "fnmatch._compile_pattern": ["<builtin>.isinstance", "<builtin>.str", "re.compile", "<builtin>.bytes", "fnmatch.translate"], "fnmatch.translate": ["<builtin>.len", "re.escape", "re.sub"], "fnmatch.filter": ["ntpath.normcase", "posixpath.normcase", "fnmatch._compile_pattern"], "bisect.insort_right": ["bisect.bisect_right"], "bisect.insort_left": ["bisect.bisect_left"], "bisect.bisect_left": ["<builtin>.len", "<builtin>.ValueError"], "urllib.parse.clear_cache": [], "urllib.parse._noop": [], "urllib.parse._encode_result": [], "urllib.parse._decode_args": ["<builtin>.tuple"], "urllib.parse._coerce_args": ["<builtin>.TypeError", "urllib.parse._decode_args", "<builtin>.isinstance"], "urllib.parse._ResultMixinStr": [], "urllib.parse._ResultMixinStr.encode": [], "urllib.parse._ResultMixinBytes": [], "urllib.parse._ResultMixinBytes.decode": [], "urllib.parse._NetlocResultMixinBase": [], "urllib.parse._NetlocResultMixinBase.username": [], "urllib.parse._NetlocResultMixinBase.password": [], "urllib.parse._NetlocResultMixinBase.hostname": ["<builtin>.isinstance"], "urllib.parse._NetlocResultMixinBase.port": ["<builtin>.int", "<builtin>.ValueError"], "urllib.parse._NetlocResultMixinStr": [], "urllib.parse._NetlocResultMixinStr._userinfo": [], "urllib.parse._NetlocResultMixinStr._hostinfo": [], "urllib.parse._NetlocResultMixinBytes": [], "urllib.parse._NetlocResultMixinBytes._userinfo": [], "urllib.parse._NetlocResultMixinBytes._hostinfo": [], "urllib.parse.DefragResult": [], "urllib.parse.DefragResult.geturl": [], "urllib.parse.SplitResult": [], "urllib.parse.SplitResult.geturl": ["urllib.parse.urlunsplit"], "urllib.parse.urlunsplit": ["urllib.parse._coerce_args"], "urllib.parse.ParseResult": [], "urllib.parse.ParseResult.geturl": ["urllib.parse.urlunparse"], "urllib.parse.urlunparse": ["urllib.parse._coerce_args", "urllib.parse.urlunsplit"], "urllib.parse.DefragResultBytes": [], "urllib.parse.DefragResultBytes.geturl": [], "urllib.parse.SplitResultBytes": [], "urllib.parse.SplitResultBytes.geturl": ["urllib.parse.urlunsplit"], "urllib.parse.ParseResultBytes": [], "urllib.parse.ParseResultBytes.geturl": ["urllib.parse.urlunparse"], "urllib.parse._fix_result_transcoding": [], "urllib.parse.urlparse": ["urllib.parse._coerce_args", "urllib.parse.urlsplit", "urllib.parse._splitparams"], "urllib.parse.urlsplit": ["urllib.parse._splitnetloc", "urllib.parse._coerce_args", "<builtin>.type", "<builtin>.ValueError", "<builtin>.len", "<builtin>.bool", "urllib.parse._checknetloc", "urllib.parse.clear_cache"], "urllib.parse._splitparams": [], "urllib.parse._splitnetloc": ["<builtin>.len", "<builtin>.min"], "urllib.parse.urljoin": ["urllib.parse._coerce_args", "urllib.parse.urlparse", "urllib.parse.urlunparse", "<builtin>.filter"], "urllib.parse.urldefrag": ["urllib.parse._coerce_args", "urllib.parse.urlparse", "urllib.parse.urlunparse"], "urllib.parse.unquote_to_bytes": ["<builtin>.len", "<builtin>.isinstance"], "urllib.parse.unquote": ["<builtin>.len", "<builtin>.range", "urllib.parse.unquote_to_bytes"], "urllib.parse.parse_qs": ["urllib.parse.parse_qsl"], "urllib.parse.parse_qsl": ["urllib.parse._coerce_args", "<builtin>.len", "urllib.parse.unquote", "<builtin>.ValueError"], "urllib.parse.unquote_plus": ["urllib.parse.unquote"], "urllib.parse.Quoter": [], "urllib.parse.Quoter.__init__": [], "urllib.parse.Quoter.__repr__": ["<builtin>.dict"], "urllib.parse.Quoter.__missing__": ["<builtin>.chr"], "urllib.parse.quote": ["<builtin>.TypeError", "urllib.parse.quote_from_bytes", "<builtin>.isinstance"], "urllib.parse.quote_from_bytes": ["<builtin>.isinstance", "_collections.defaultdict.__getitem__", "<builtin>.TypeError", "<builtin>.bytes", "urllib.parse.Quoter.__init__"], "urllib.parse.quote_plus": ["urllib.parse.quote", "<builtin>.isinstance"], "_collections.defaultdict.__getitem__": [], "urllib.parse.urlencode": ["<builtin>.hasattr", "urllib.parse.quote_plus", "<builtin>.isinstance", "<builtin>.str", "<builtin>.TypeError", "<builtin>.len", "sys.exc_info"], "urllib.parse.to_bytes": ["warnings.warn", "urllib.parse._to_bytes"], "urllib.parse._to_bytes": ["<builtin>.isinstance", "<builtin>.repr", "<builtin>.UnicodeError"], "<builtin>.UnicodeError": [], "urllib.parse.unwrap": ["<builtin>.str"], "urllib.parse.splittype": ["urllib.parse._splittype", "warnings.warn"], "urllib.parse._splittype": ["re.compile"], "urllib.parse.splithost": ["warnings.warn", "urllib.parse._splithost"], "urllib.parse._splithost": ["re.compile"], "urllib.parse.splituser": ["warnings.warn", "urllib.parse._splituser"], "urllib.parse._splituser": [], "urllib.parse.splitpasswd": ["warnings.warn", "urllib.parse._splitpasswd"], "urllib.parse._splitpasswd": [], "urllib.parse.splitport": ["warnings.warn", "urllib.parse._splitport"], "urllib.parse._splitport": ["re.compile"], "urllib.parse.splitnport": ["urllib.parse._splitnport", "warnings.warn"], "urllib.parse._splitnport": ["<builtin>.int"], "urllib.parse.splitquery": ["urllib.parse._splitquery", "warnings.warn"], "urllib.parse._splitquery": [], "urllib.parse.splittag": ["warnings.warn", "urllib.parse._splittag"], "urllib.parse._splittag": [], "urllib.parse.splitattr": ["warnings.warn", "urllib.parse._splitattr"], "urllib.parse._splitattr": [], "urllib.parse.splitvalue": ["urllib.parse._splitvalue", "warnings.warn"], "urllib.parse._splitvalue": [], "email._parseaddr.parsedate_tz": ["<builtin>.tuple", "email._parseaddr._parsedate_tz"], "email._parseaddr.parsedate": ["<builtin>.isinstance", "email._parseaddr.parsedate_tz"], "email._parseaddr.mktime_tz": ["time.mktime"], "email._parseaddr.AddrlistClass": [], "email._parseaddr.AddrlistClass.__init__": [], "email._parseaddr.AddrlistClass.gotonext": ["<builtin>.len", "email._parseaddr.AddrlistClass.getcomment"], "email._parseaddr.AddrlistClass.getcomment": ["email._parseaddr.AddrlistClass.getdelimited"], "email._parseaddr.AddrlistClass.getaddrlist": ["<builtin>.len", "email._parseaddr.AddrlistClass.getaddress"], "email._parseaddr.AddrlistClass.getaddress": ["email._parseaddr.AddrlistClass.getaddrspec", "email._parseaddr.AddrlistClass.getaddress", "email._parseaddr.AddrlistClass.getrouteaddr", "<builtin>.len", "email._parseaddr.AddrlistClass.getphraselist", "email._parseaddr.AddrlistClass.gotonext"], "email._parseaddr.AddrlistClass.getphraselist": ["email._parseaddr.AddrlistClass.getquote", "<builtin>.len", "email._parseaddr.AddrlistClass.getatom", "email._parseaddr.AddrlistClass.getcomment"], "email._parseaddr.AddrlistClass.getaddrspec": ["email._parseaddr.AddrlistClass.getquote", "<builtin>.len", "email._parseaddr.quote", "email._parseaddr.AddrlistClass.getatom", "email._parseaddr.AddrlistClass.gotonext", "email._parseaddr.AddrlistClass.getdomain"], "email._parseaddr.AddrlistClass.getrouteaddr": ["<builtin>.len", "email._parseaddr.AddrlistClass.gotonext", "email._parseaddr.AddrlistClass.getaddrspec", "email._parseaddr.AddrlistClass.getdomain"], "email._parseaddr.AddrlistClass.getdomain": ["email._parseaddr.AddrlistClass.getatom", "<builtin>.len", "email._parseaddr.AddrlistClass.getcomment", "email._parseaddr.AddrlistClass.getdomainliteral"], "email._parseaddr.AddrlistClass.getquote": ["email._parseaddr.AddrlistClass.getdelimited"], "email._parseaddr.AddrlistClass.getatom": ["<builtin>.len"], "email._parseaddr.AddrlistClass.getdomainliteral": ["email._parseaddr.AddrlistClass.getdelimited"], "email._parseaddr.AddrlistClass.getdelimited": ["<builtin>.len", "email._parseaddr.AddrlistClass.getcomment"], "email._parseaddr.AddressList": [], "email._parseaddr.AddressList.__len__": ["<builtin>.len"], "email._parseaddr.AddressList.__add__": ["email._parseaddr.AddressList.__init__"], "email._parseaddr.AddressList.__iadd__": [], "email._parseaddr.AddressList.__sub__": ["email._parseaddr.AddressList.__init__"], "email._parseaddr.AddressList.__isub__": [], "email._parseaddr.AddressList.__getitem__": [], "calendar.IllegalMonthError": [], "calendar.IllegalMonthError.__init__": [], "calendar.IllegalMonthError.__str__": [], "calendar.IllegalWeekdayError": [], "calendar.IllegalWeekdayError.__init__": [], "calendar.IllegalWeekdayError.__str__": [], "calendar._localized_month": ["datetime.datetime.date", "<builtin>.range"], "datetime.datetime.date": ["datetime.datetime.date"], "calendar._localized_month.<lambda1>": [], "calendar._localized_month.__init__": [], "calendar._localized_month.__getitem__": ["<builtin>.isinstance"], "calendar._localized_month.__len__": [], "calendar._localized_day": ["datetime.datetime.date", "<builtin>.range"], "calendar._localized_day.__init__": [], "calendar._localized_day.__getitem__": ["<builtin>.isinstance"], "calendar._localized_day.__len__": [], "calendar.isleap": [], "calendar.leapdays": [], "calendar.weekday": ["datetime.datetime.date"], "calendar.monthrange": ["calendar.isleap", "calendar.IllegalMonthError.__init__", "calendar.weekday"], "calendar._monthlen": ["calendar.isleap"], "calendar._prevmonth": [], "calendar._nextmonth": [], "calendar.Calendar": ["<builtin>.property"], "calendar.Calendar.__init__": [], "calendar.Calendar.getfirstweekday": [], "calendar.Calendar.setfirstweekday": [], "calendar.Calendar.iterweekdays": ["<builtin>.range"], "calendar.Calendar.itermonthdates": ["calendar.Calendar.itermonthdays3", "datetime.datetime.date"], "calendar.Calendar.itermonthdays3": ["calendar._prevmonth", "calendar._nextmonth", "<builtin>.range", "calendar._monthlen", "calendar.monthrange"], "calendar.Calendar.itermonthdays": ["itertools.repeat", "<builtin>.range", "calendar.monthrange"], "calendar.Calendar.itermonthdays2": ["<builtin>.enumerate", "calendar.Calendar.itermonthdays"], "calendar.Calendar.itermonthdays4": ["calendar.Calendar.itermonthdays3", "<builtin>.enumerate"], "calendar.Calendar.monthdatescalendar": ["<builtin>.len", "<builtin>.range", "calendar.Calendar.itermonthdates", "<builtin>.list"], "calendar.Calendar.monthdays2calendar": ["<builtin>.len", "<builtin>.range", "calendar.Calendar.itermonthdays2", "<builtin>.list"], "calendar.Calendar.monthdayscalendar": ["<builtin>.list", "<builtin>.range", "<builtin>.len", "calendar.Calendar.itermonthdays"], "calendar.Calendar.yeardatescalendar": ["calendar.Calendar.monthdatescalendar", "<builtin>.range", "<builtin>.len"], "calendar.Calendar.yeardays2calendar": ["calendar.Calendar.monthdays2calendar", "<builtin>.range", "<builtin>.len"], "calendar.Calendar.yeardayscalendar": ["<builtin>.len", "calendar.Calendar.monthdayscalendar", "<builtin>.range"], "calendar.TextCalendar": [], "calendar.TextCalendar.prweek": ["<builtin>.print", "calendar.TextCalendar.formatweek"], "calendar.TextCalendar.formatweek": ["calendar.TextCalendar.formatday"], "calendar.TextCalendar.formatday": [], "calendar.TextCalendar.formatweekday": [], "calendar.TextCalendar.formatweekheader": ["calendar.TextCalendar.formatweekday", "calendar.LocaleTextCalendar.formatweekday", "calendar.Calendar.iterweekdays"], "calendar.LocaleTextCalendar.formatweekday": ["calendar.different_locale.__init__"], "calendar.TextCalendar.formatmonthname": [], "calendar.TextCalendar.prmonth": ["<builtin>.print", "calendar.TextCalendar.formatmonth"], "calendar.TextCalendar.formatmonth": ["calendar.TextCalendar.formatweek", "calendar.Calendar.monthdays2calendar", "calendar.LocaleTextCalendar.formatmonthname", "<builtin>.max", "calendar.TextCalendar.formatweekheader", "calendar.TextCalendar.formatmonthname"], "calendar.LocaleTextCalendar.formatmonthname": ["calendar.different_locale.__init__"], "calendar.TextCalendar.formatyear": ["calendar.TextCalendar.formatweek", "<builtin>.min", "calendar.formatstring", "<builtin>.range", "<builtin>.enumerate", "calendar.LocaleTextCalendar.formatmonthname", "<builtin>.len", "<builtin>.repr", "<builtin>.max", "calendar.TextCalendar.formatweekheader", "calendar.Calendar.yeardays2calendar", "calendar.TextCalendar.formatmonthname"], "calendar.formatstring": [], "calendar.TextCalendar.pryear": ["calendar.TextCalendar.formatyear", "<builtin>.print"], "calendar.HTMLCalendar": [], "calendar.HTMLCalendar.formatday": [], "calendar.HTMLCalendar.formatweek": ["calendar.HTMLCalendar.formatday"], "calendar.HTMLCalendar.formatweekday": [], "calendar.HTMLCalendar.formatweekheader": ["calendar.LocaleHTMLCalendar.formatweekday", "calendar.HTMLCalendar.formatweekday", "calendar.Calendar.iterweekdays"], "calendar.LocaleHTMLCalendar.formatweekday": ["calendar.different_locale.__init__"], "calendar.HTMLCalendar.formatmonthname": [], "calendar.HTMLCalendar.formatmonth": ["calendar.HTMLCalendar.formatweekheader", "calendar.LocaleHTMLCalendar.formatmonthname", "calendar.HTMLCalendar.formatmonthname", "calendar.Calendar.monthdays2calendar", "calendar.HTMLCalendar.formatweek"], "calendar.LocaleHTMLCalendar.formatmonthname": ["calendar.different_locale.__init__"], "calendar.HTMLCalendar.formatyear": ["<builtin>.range", "calendar.HTMLCalendar.formatmonth", "<builtin>.min", "<builtin>.max"], "calendar.HTMLCalendar.formatyearpage": ["sys.getdefaultencoding", "calendar.HTMLCalendar.formatyear"], "sys.getdefaultencoding": [], "calendar.different_locale": [], "calendar.different_locale.__init__": [], "calendar.different_locale.__enter__": ["locale.setlocale", "locale.getlocale"], "calendar.different_locale.__exit__": ["locale.setlocale"], "calendar.LocaleTextCalendar": [], "calendar.LocaleTextCalendar.__init__": ["locale.getdefaultlocale", "calendar.Calendar.__init__"], "calendar.LocaleHTMLCalendar": [], "calendar.LocaleHTMLCalendar.__init__": ["locale.getdefaultlocale", "calendar.Calendar.__init__"], "calendar.setfirstweekday": ["calendar.IllegalWeekdayError.__init__"], "calendar.format": ["calendar.formatstring", "<builtin>.print"], "calendar.timegm": ["datetime.datetime.date"], "datetime._cmp": [], "datetime._is_leap": [], "datetime._days_before_year": [], "datetime._days_in_month": ["datetime._is_leap"], "datetime._days_before_month": ["datetime._is_leap"], "datetime._ymd2ord": ["datetime._days_before_month", "datetime._days_before_year", "datetime._days_in_month"], "datetime._ord2ymd": ["<builtin>.divmod", "datetime._days_in_month", "datetime._is_leap"], "datetime._build_struct_time": ["datetime._ymd2ord", "datetime._days_before_month", "time.struct_time"], "time.struct_time": [], "datetime._format_time": ["<builtin>.ValueError"], "datetime._format_offset": ["<builtin>.divmod"], "datetime._wrap_strftime": ["<builtin>.hasattr", "time.strftime", "datetime.time.utcoffset", "<builtin>.len", "<builtin>.getattr", "datetime.datetime.tzname", "datetime.datetime.utcoffset", "datetime.time.tzname", "<builtin>.divmod"], "datetime.datetime.utcoffset": ["datetime._check_utc_offset"], "datetime.time.utcoffset": ["datetime._check_utc_offset"], "datetime.time.tzname": ["datetime._check_tzname"], "datetime.datetime.tzname": ["datetime._check_tzname"], "datetime._parse_isoformat_date": ["<builtin>.int", "<builtin>.ValueError"], "datetime._parse_hh_mm_ss_ff": ["<builtin>.int", "<builtin>.len", "<builtin>.range", "<builtin>.ValueError"], "datetime._parse_isoformat_time": ["<builtin>.len", "datetime._parse_hh_mm_ss_ff", "<builtin>.ValueError", "<builtin>.all"], "datetime._check_tzname": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "datetime._check_utc_offset": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.type", "<builtin>.isinstance"], "datetime._check_date_fields": ["datetime._check_int_field", "<builtin>.ValueError", "datetime._days_in_month"], "datetime._check_time_fields": ["datetime._check_int_field", "<builtin>.ValueError"], "datetime._check_tzinfo_arg": ["<builtin>.TypeError", "<builtin>.isinstance"], "datetime._cmperror": ["<builtin>.TypeError", "<builtin>.type"], "datetime._divide_and_round": ["<builtin>.divmod"], "datetime.timedelta": [], "datetime.timedelta.__new__": ["<builtin>.isinstance", "<builtin>.int", "<builtin>.round", "<builtin>.OverflowError", "<builtin>.divmod", "<builtin>.abs"], "datetime.timedelta.__repr__": [], "datetime.timedelta.__str__": ["datetime.timedelta.__str__.plural", "<builtin>.divmod"], "datetime.timedelta.__str__.plural": ["<builtin>.abs"], "datetime.timedelta.total_seconds": [], "datetime.timedelta.days": [], "datetime.timedelta.seconds": [], "datetime.timedelta.microseconds": [], "datetime.timedelta.__add__": ["<builtin>.isinstance"], "datetime.timedelta.__sub__": ["<builtin>.isinstance"], "datetime.timedelta.__rsub__": ["<builtin>.isinstance"], "datetime.timedelta.__neg__": [], "datetime.timedelta.__pos__": [], "datetime.timedelta.__abs__": [], "datetime.timedelta.__mul__": ["datetime._divide_and_round", "<builtin>.isinstance", "datetime.timedelta._to_microseconds"], "datetime.timedelta._to_microseconds": [], "datetime.timedelta.__floordiv__": ["<builtin>.isinstance", "datetime.timedelta._to_microseconds"], "datetime.timedelta.__truediv__": ["datetime._divide_and_round", "<builtin>.isinstance", "datetime.timedelta._to_microseconds"], "datetime.timedelta.__mod__": ["<builtin>.isinstance", "datetime.timedelta._to_microseconds"], "datetime.timedelta.__divmod__": ["<builtin>.divmod", "<builtin>.isinstance", "datetime.timedelta._to_microseconds"], "datetime.timedelta.__eq__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta._cmp": ["datetime.timedelta._getstate", "<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta.__le__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta.__lt__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta.__ge__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta.__gt__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta._getstate": [], "datetime.timedelta.__hash__": ["datetime.timedelta._getstate", "<builtin>.hash"], "datetime.timedelta.__bool__": [], "datetime.timedelta.__reduce__": ["datetime.timedelta._getstate"], "datetime.date": [], "datetime.date.__new__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.ord", "<builtin>.len", "datetime._check_date_fields"], "datetime.date.fromtimestamp": ["time.localtime"], "datetime.date.today": ["time.time", "datetime.datetime.fromtimestamp", "datetime.date.fromtimestamp"], "datetime.datetime.fromtimestamp": ["datetime._check_tzinfo_arg", "datetime.datetime._fromtimestamp"], "datetime.date.fromordinal": ["datetime._ord2ymd"], "datetime.date.fromisoformat": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.len", "datetime._parse_isoformat_date"], "datetime.date.fromisocalendar": ["datetime._ymd2ord", "<builtin>.ValueError", "datetime._isoweek1monday", "datetime._ord2ymd", "datetime._is_leap"], "datetime._isoweek1monday": ["datetime._ymd2ord"], "datetime.date.__repr__": [], "datetime.date.ctime": ["datetime.date.toordinal"], "datetime.date.toordinal": ["datetime._ymd2ord"], "datetime.date.strftime": ["datetime.datetime.timetuple", "datetime._wrap_strftime", "datetime.date.timetuple"], "datetime.datetime.timetuple": ["datetime.datetime.dst", "datetime._build_struct_time"], "datetime.date.timetuple": ["datetime._build_struct_time"], "datetime.date.__format__": ["<builtin>.isinstance", "<builtin>.str", "<builtin>.type", "datetime.date.strftime", "<builtin>.TypeError", "<builtin>.len"], "datetime.date.isoformat": [], "datetime.date.year": [], "datetime.date.month": [], "datetime.date.day": [], "datetime.date.replace": ["<builtin>.type", "datetime.date.year"], "datetime.date.__eq__": ["datetime.datetime._cmp", "<builtin>.isinstance", "datetime.date._cmp"], "datetime.datetime._cmp": ["datetime.datetime.replace", "<builtin>.isinstance", "<builtin>.TypeError", "datetime.datetime.utcoffset", "datetime.datetime._cmp"], "datetime.date._cmp": ["datetime.datetime._cmp", "<builtin>.isinstance", "datetime.date._cmp"], "datetime.date.__le__": ["datetime.datetime._cmp", "<builtin>.isinstance", "datetime.date._cmp"], "datetime.date.__lt__": ["datetime.datetime._cmp", "<builtin>.isinstance", "datetime.date._cmp"], "datetime.date.__ge__": ["datetime.datetime._cmp", "<builtin>.isinstance", "datetime.date._cmp"], "datetime.date.__gt__": ["datetime.datetime._cmp", "<builtin>.isinstance", "datetime.date._cmp"], "datetime.date.__hash__": ["<builtin>.hash", "datetime.date._getstate", "datetime.datetime._getstate"], "datetime.date._getstate": ["<builtin>.bytes", "<builtin>.divmod"], "datetime.datetime._getstate": ["<builtin>.bytes", "<builtin>.divmod"], "datetime.date.__add__": ["datetime.date.toordinal", "<builtin>.type", "<builtin>.isinstance", "<builtin>.OverflowError"], "datetime.date.__sub__": ["datetime.date.toordinal", "<builtin>.isinstance"], "datetime.date.weekday": ["datetime.date.toordinal"], "datetime.date.isoweekday": ["datetime.date.toordinal"], "datetime.date.isocalendar": ["datetime._ymd2ord", "<builtin>.divmod", "datetime._isoweek1monday"], "datetime.date.__setstate": [], "datetime.date.__reduce__": ["datetime.date._getstate", "datetime.datetime._getstate"], "datetime.tzinfo": [], "datetime.tzinfo.tzname": ["<builtin>.NotImplementedError"], "datetime.tzinfo.utcoffset": ["<builtin>.NotImplementedError"], "datetime.tzinfo.dst": ["<builtin>.NotImplementedError"], "datetime.tzinfo.fromutc": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.isinstance"], "datetime.tzinfo.__reduce__": ["<builtin>.getattr"], "datetime.time": [], "datetime.time.__new__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.ord", "<builtin>.len", "datetime._check_time_fields", "datetime._check_tzinfo_arg"], "datetime.time.hour": [], "datetime.time.minute": [], "datetime.time.second": [], "datetime.time.microsecond": [], "datetime.time.tzinfo": [], "datetime.time.fold": [], "datetime.time.__eq__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time._cmp": ["<builtin>.TypeError", "datetime.time._cmp", "<builtin>.isinstance", "datetime.time.utcoffset"], "datetime.time.__le__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time.__lt__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time.__ge__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time.__gt__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time.__hash__": ["<builtin>.hash", "datetime.time.utcoffset", "datetime.time._getstate", "<builtin>.divmod", "datetime.time.replace"], "datetime.time.replace": ["<builtin>.type"], "datetime.time._getstate": ["<builtin>.bytes", "<builtin>.divmod"], "datetime.time._tzstr": ["datetime.time.utcoffset", "datetime._format_offset"], "datetime.time.__repr__": [], "datetime.time.isoformat": ["datetime.time._tzstr", "datetime._format_time"], "datetime.time.fromisoformat": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.isinstance", "datetime._parse_isoformat_time"], "datetime.time.strftime": ["datetime._wrap_strftime"], "datetime.time.__format__": ["datetime.time.strftime", "<builtin>.isinstance", "<builtin>.str", "<builtin>.type", "<builtin>.TypeError", "<builtin>.len"], "datetime.time.dst": ["datetime._check_utc_offset"], "datetime.time.__setstate": ["<builtin>.TypeError", "<builtin>.isinstance"], "datetime.time.__reduce_ex__": ["datetime.time._getstate"], "datetime.time.__reduce__": ["datetime.time.__reduce_ex__"], "datetime.datetime": [], "datetime.datetime.__new__": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.ord", "<builtin>.len", "<builtin>.bytes", "datetime._check_date_fields", "datetime._check_time_fields", "datetime._check_tzinfo_arg"], "datetime.datetime.hour": [], "datetime.datetime.minute": [], "datetime.datetime.second": [], "datetime.datetime.microsecond": [], "datetime.datetime.tzinfo": [], "datetime.datetime.fold": [], "datetime.datetime._fromtimestamp": ["<builtin>.round", "sys.platform.startswith"], "datetime.datetime.utcfromtimestamp": ["datetime.datetime._fromtimestamp"], "datetime.datetime.now": ["time.time", "datetime.datetime.fromtimestamp"], "datetime.datetime.utcnow": ["time.time", "datetime.datetime.utcfromtimestamp"], "datetime.datetime.combine": ["<builtin>.TypeError", "<builtin>.isinstance"], "datetime.datetime.fromisoformat": ["<builtin>.isinstance", "<builtin>.ValueError", "datetime._parse_isoformat_time", "<builtin>.TypeError", "datetime._parse_isoformat_date"], "datetime.datetime.dst": ["datetime._check_utc_offset"], "datetime.datetime._mktime": ["datetime.datetime._mktime.local"], "datetime.datetime._mktime.local": ["time.localtime"], "datetime.datetime.timestamp": ["datetime.datetime._mktime"], "datetime.datetime.utctimetuple": ["datetime.datetime.utcoffset", "datetime._build_struct_time"], "datetime.datetime.time": ["datetime.datetime.time"], "datetime.datetime.timetz": ["datetime.datetime.time"], "datetime.datetime.replace": ["<builtin>.type"], "datetime.datetime._local_timezone": ["datetime.datetime._mktime", "time.localtime"], "datetime.datetime.astimezone": ["<builtin>.isinstance", "datetime.timezone.fromutc", "datetime.timezone.utcoffset", "<builtin>.TypeError", "datetime.datetime._local_timezone", "datetime.datetime.replace"], "datetime.timezone.utcoffset": ["<builtin>.TypeError", "<builtin>.isinstance"], "datetime.timezone.fromutc": ["<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.isinstance"], "datetime.datetime.ctime": ["datetime.date.toordinal"], "datetime.datetime.isoformat": ["datetime.datetime.utcoffset", "datetime._format_time", "datetime._format_offset"], "datetime.datetime.__repr__": ["<builtin>.map"], "datetime.datetime.__str__": ["datetime.datetime.isoformat"], "datetime.datetime.__eq__": ["datetime.datetime._cmp", "<builtin>.isinstance"], "datetime.datetime.__le__": ["datetime._cmperror", "datetime.datetime._cmp", "<builtin>.isinstance"], "datetime.datetime.__lt__": ["datetime._cmperror", "datetime.datetime._cmp", "<builtin>.isinstance"], "datetime.datetime.__ge__": ["datetime._cmperror", "datetime.datetime._cmp", "<builtin>.isinstance"], "datetime.datetime.__gt__": ["datetime._cmperror", "datetime.datetime._cmp", "<builtin>.isinstance"], "datetime.datetime.__add__": ["datetime.date.toordinal", "<builtin>.isinstance", "<builtin>.type", "<builtin>.OverflowError", "datetime.datetime.time", "<builtin>.divmod"], "datetime.datetime.__sub__": ["datetime.datetime.utcoffset", "<builtin>.TypeError", "datetime.date.toordinal", "<builtin>.isinstance"], "datetime.datetime.__hash__": ["datetime._ymd2ord", "<builtin>.hash", "datetime.datetime.utcoffset", "datetime.datetime.replace", "datetime.datetime._getstate"], "datetime.datetime.__setstate": ["<builtin>.TypeError", "<builtin>.isinstance"], "datetime.datetime.__reduce_ex__": ["datetime.datetime._getstate"], "datetime.datetime.__reduce__": ["datetime.datetime.__reduce_ex__"], "datetime.timezone": ["<builtin>.object"], "datetime.timezone.__new__": ["<builtin>.TypeError", "<builtin>.ValueError", "datetime.timezone._create", "<builtin>.isinstance"], "datetime.timezone._create": ["datetime.timezone.__new__"], "datetime.timezone.__getinitargs__": [], "datetime.timezone.__eq__": ["<builtin>.isinstance"], "datetime.timezone.__hash__": ["<builtin>.hash"], "datetime.timezone.__repr__": [], "datetime.timezone.__str__": ["datetime.timezone.tzname"], "datetime.timezone.tzname": ["<builtin>.TypeError", "datetime.timezone._name_from_offset", "<builtin>.isinstance"], "datetime.timezone._name_from_offset": ["<builtin>.divmod"], "datetime.timezone.dst": ["<builtin>.TypeError", "<builtin>.isinstance"], "_strptime._getlang": ["locale.getlocale"], "_strptime.LocaleTime": [], "_strptime.LocaleTime.__init__": ["_strptime.LocaleTime.__calc_month", "_strptime.LocaleTime.__calc_weekday", "_strptime.LocaleTime.__calc_am_pm", "<builtin>.ValueError", "_strptime._getlang", "_strptime.LocaleTime.__calc_timezone", "_strptime.LocaleTime.__calc_date_time"], "_strptime.LocaleTime.__calc_weekday": ["<builtin>.range"], "_strptime.LocaleTime.__calc_month": ["<builtin>.range"], "_strptime.LocaleTime.__calc_am_pm": ["time.strftime", "time.struct_time"], "_strptime.LocaleTime.__calc_timezone": ["time.tzset", "<builtin>.frozenset"], "_strptime.LocaleTime.__calc_date_time": ["time.strftime", "time.struct_time"], "_strptime.TimeRE": [], "_strptime.TimeRE.__init__": ["_strptime.LocaleTime.__init__", "_strptime.TimeRE.pattern", "<builtin>.super"], "_strptime.TimeRE.pattern": ["re.compile"], "_strptime.TimeRE.__seqToRE": ["<builtin>.sorted", "re.escape"], "_strptime.TimeRE.compile": ["_strptime.TimeRE.pattern", "re.compile"], "_strptime._calc_julian_from_U_or_W": ["datetime.date.weekday"], "_strptime._calc_julian_from_V": ["datetime.date.toordinal", "datetime.date.isoweekday"], "_strptime._strptime": ["_strptime.TimeRE.compile", "datetime.date.toordinal", "<builtin>.isinstance", "_strptime.TimeRE.__init__", "<builtin>.int", "<builtin>.type", "<builtin>.ValueError", "_strptime._getlang", "<builtin>.TypeError", "<builtin>.len", "<builtin>.enumerate", "datetime.date.fromordinal", "datetime.date.weekday", "_strptime._calc_julian_from_V", "_strptime._calc_julian_from_U_or_W"], "_strptime._strptime_time": ["time.struct_time", "_strptime._strptime"], "_strptime._strptime_datetime": ["_strptime._strptime"], "email.header.decode_header": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.reversed", "<builtin>.str", "email.charset._encode", "<builtin>.AssertionError", "<builtin>.len", "<builtin>.enumerate", "<builtin>.bytes"], "email.header.make_header": ["email.charset.Charset.__init__", "email.header.Header.append", "<builtin>.isinstance", "email.header.Header.__init__"], "email.header.Header.append": ["email.charset.Charset.__init__", "<builtin>.isinstance"], "email.header.Header": [], "email.header.Header.__str__": ["email.header.Header._normalize", "email.header.Header._nonctext"], "email.header.Header._normalize": [], "email.header.Header._nonctext": [], "email.header.Header.__eq__": ["<builtin>.str"], "email.header._ValueFormatter.__init__": ["<builtin>.len", "email.header._Accumulator.__init__"], "email.header._ValueFormatter.add_transition": ["email.header._Accumulator.push"], "email.header._ValueFormatter.feed": ["email.header._Accumulator.push", "email.header._ValueFormatter._ascii_split", "email.header._ValueFormatter._maxlengths", "email.header._ValueFormatter._append_chunk", "email.header._ValueFormatter.newline"], "email.header._ValueFormatter.newline": ["email.header._Accumulator.is_onlyws", "<builtin>.str", "email.header._Accumulator.push", "<builtin>.len", "email.header._Accumulator.reset", "email.header._Accumulator.pop"], "email.header._ValueFormatter._str": ["email.header._ValueFormatter.newline"], "email.header._ValueFormatter": [], "email.header._Accumulator.__init__": ["<builtin>.super"], "email.header._ValueFormatter.__str__": ["email.header._ValueFormatter._str"], "email.header._Accumulator.pop": ["<builtin>.super", "email.header._Accumulator.part_count"], "email.header._Accumulator.push": [], "email.header._Accumulator.is_onlyws": ["<builtin>.str"], "email.header._Accumulator.reset": [], "email.header._ValueFormatter._ascii_split": ["re.split", "<builtin>.zip", "email.header._ValueFormatter._append_chunk"], "email.header._ValueFormatter._maxlengths": ["<builtin>.len"], "email.header._ValueFormatter._append_chunk": ["<builtin>.str", "email.header._Accumulator.push", "<builtin>.len", "<builtin>.range", "email.header._Accumulator.part_count", "email.header._Accumulator.reset", "email.header._Accumulator.pop_from"], "email.header._Accumulator.part_count": ["<builtin>.super"], "email.header._Accumulator.pop_from": [], "email.header._Accumulator": [], "email.header._Accumulator.__len__": ["<builtin>.len", "<builtin>.sum"], "email.header._Accumulator.__str__": [], "email.feedparser.BufferedSubFile": [], "email.feedparser.BufferedSubFile.__init__": ["_io.StringIO"], "email.feedparser.BufferedSubFile.push_eof_matcher": [], "email.feedparser.BufferedSubFile.pop_eof_matcher": [], "email.feedparser.BufferedSubFile.close": ["email.feedparser.BufferedSubFile.pushlines"], "email.feedparser.BufferedSubFile.pushlines": [], "email.feedparser.BufferedSubFile.readline": ["<builtin>.reversed"], "email.feedparser.BufferedSubFile.unreadline": [], "email.feedparser.BufferedSubFile.push": ["email.feedparser.BufferedSubFile.pushlines"], "email.feedparser.BufferedSubFile.__iter__": [], "email.feedparser.BufferedSubFile.__next__": ["email.feedparser.BufferedSubFile.readline"], "email.feedparser.FeedParser": [], "email.feedparser.FeedParser._parsegen": ["email.message.Message.set_payload", "email.message.Message.get_content_type", "email.message.Message.get", "<builtin>.str", "email.feedparser.BufferedSubFile.__next__", "email.message.Message.get_content_maintype", "<builtin>.len", "re.escape", "email.feedparser.FeedParser._pop_message", "email.feedparser.FeedParser._parse_headers", "email.feedparser.FeedParser._parsegen", "email.feedparser.BufferedSubFile.readline", "email.feedparser.BufferedSubFile.unreadline", "email.feedparser.FeedParser._new_message", "email.feedparser.BufferedSubFile.push_eof_matcher", "email.errors.MessageDefect.__init__", "email.feedparser.BufferedSubFile.pop_eof_matcher", "email.message.Message.get_boundary", "<builtin>.isinstance", "re.compile", "email._policybase.Policy.handle_defect", "email.feedparser.BufferedSubFile.__iter__"], "email.feedparser.FeedParser._call_parse": [], "email.feedparser.FeedParser._pop_message": [], "email.feedparser.FeedParser._new_message": ["email.message.Message.get_content_type", "email.message.Message.set_default_type", "email.message.MIMEPart.__init__", "email.message.Message.__init__"], "email.message.Message.get_content_type": ["<builtin>.object", "email.message.Message.get", "email.message.Message.get_default_type", "email.message._splitparam"], "email.message.Message.set_default_type": [], "email.feedparser.FeedParser._parse_headers": ["email.errors.MessageDefect.__init__", "email._policybase.Compat32.header_source_parse", "email.message.Message.set_unixfrom", "<builtin>.len", "email.message.Message.set_raw", "<builtin>.enumerate", "email.errors.HeaderDefect.__init__", "email.feedparser.BufferedSubFile.unreadline", "email._policybase.Policy.handle_defect"], "email.message.Message.set_payload": ["<builtin>.hasattr", "email.message.Message.set_charset", "email.charset.Charset.__init__", "<builtin>.isinstance"], "email.message.Message.get_content_maintype": ["email.message.Message.get_content_type"], "email.message.Message.get_boundary": ["<builtin>.object", "email.utils.collapse_rfc2231_value", "email.message.Message.get_param"], "email.message.Message.get": ["email._policybase.Compat32.header_fetch_parse"], "email.message.Message.set_raw": [], "email.message.Message.set_unixfrom": [], "email.feedparser.BytesFeedParser": [], "email.feedparser.BytesFeedParser.feed": ["<builtin>.super"], "email.message._splitparam": ["<builtin>.str"], "email.message._formatparam": ["<builtin>.len", "email.utils.encode_rfc2231", "<builtin>.isinstance", "email.utils.quote"], "email.utils.quote": [], "email.message._parseparam": ["<builtin>.str", "<builtin>.len"], "email.message._unquotevalue": ["email.utils.unquote", "<builtin>.isinstance"], "email.message.Message.__str__": ["email.message.Message.as_string"], "email.generator.Generator.__init__": [], "email.generator.Generator.flatten": ["time.time", "email.message.Message.get_unixfrom", "email.generator.Generator._encode", "email.generator.Generator._write", "email.generator.Generator.write", "email.generator.BytesGenerator.write", "email.generator.BytesGenerator._encode", "time.ctime"], "email.message.Message.__bytes__": ["email.message.Message.as_bytes"], "email.message.Message.is_multipart": ["<builtin>.isinstance"], "email.message.Message.get_unixfrom": [], "email.message.Message.attach": ["<builtin>.TypeError"], "email.message.Message.get_payload": ["email.message.Message.is_multipart", "<builtin>.isinstance", "uu.decode", "email.message.Message.get", "<builtin>.str", "email._encoded_words.decode_b", "<builtin>.type", "<builtin>.TypeError", "_io.BytesIO", "email.utils._has_surrogates", "quopri.decodestring", "email.message.Message.get_param", "email._policybase.Policy.handle_defect"], "email.message.Message.get_param": ["email.message.Message._get_params_preserve", "email.message._unquotevalue"], "email._encoded_words.decode_b": ["<builtin>.len", "email.errors.MessageDefect.__init__", "base64.b64decode"], "uu.decode": ["<builtin>.isinstance", "sys.stdin.buffer.readline", "<builtin>.int", "ntpath.exists", "sys.stderr.write", "posixpath.exists", "<builtin>.len", "sys.stdout.buffer.write", "<builtin>.open"], "email.message.Message.set_charset": ["email.charset.Charset.__init__", "<builtin>.isinstance", "email.message.Message.add_header", "email.message.Message.del_param", "email.message.Message.set_param"], "email.message.Message.del_param": ["email.message._formatparam", "email.message.Message.get", "email.message.Message.get_params"], "email.message.Message.add_header": ["email.message._formatparam"], "email.message.Message.set_param": ["<builtin>.isinstance", "email.message.Message.get", "email.message._formatparam", "email.message.Message.replace_header", "email.message.Message.get_param", "email.message.Message.get_params"], "email.message.Message.get_charset": [], "email.message.Message.__len__": ["<builtin>.len"], "email.message.Message.__getitem__": ["email.message.Message.get"], "email.message.Message.__setitem__": ["email.policy.EmailPolicy.header_max_count", "email._policybase.Compat32.header_store_parse", "email._policybase.Policy.header_max_count", "<builtin>.ValueError"], "email.policy.EmailPolicy.header_max_count": [], "email.message.Message.__delitem__": [], "email.message.Message.__contains__": [], "email.message.Message.__iter__": [], "email.message.Message.keys": [], "email.message.Message.values": ["email._policybase.Compat32.header_fetch_parse"], "email.message.Message.items": ["email._policybase.Compat32.header_fetch_parse"], "email.message.Message.raw_items": ["<builtin>.iter"], "email.message.Message.get_all": ["email._policybase.Compat32.header_fetch_parse"], "email.message.Message.replace_header": ["<builtin>.len", "<builtin>.range", "email._policybase.Compat32.header_store_parse", "<builtin>.zip"], "email.message.Message.get_default_type": [], "email.message.Message.get_content_subtype": ["email.message.Message.get_content_type"], "email.message.Message._get_params_preserve": ["<builtin>.object", "email.message.Message.get", "email.utils.decode_params", "email.message._parseparam"], "email.message.Message.get_params": ["<builtin>.object", "email.message.Message._get_params_preserve", "email.message._unquotevalue"], "email.message.Message.set_type": ["email.message.Message.set_param", "email.message.Message.get_params"], "email.message.Message.get_filename": ["<builtin>.object", "email.utils.collapse_rfc2231_value", "email.message.Message.get_param"], "email.message.Message.set_boundary": ["<builtin>.object", "email.message.Message._get_params_preserve", "email._policybase.Compat32.header_store_parse"], "email.message.Message.get_content_charset": ["<builtin>.object", "<builtin>.str", "<builtin>.isinstance", "email.message.Message.get_param"], "email.message.Message.get_charsets": ["email.iterators.walk", "email.message.Message.walk"], "email.iterators.walk": [], "email.message.Message.walk": [], "email.message.Message.get_content_disposition": ["email.message.Message.get", "email.message._splitparam"], "email.message.MIMEPart": [], "email.message.MIMEPart.as_string": ["<builtin>.super"], "email.message.MIMEPart.__str__": ["email.message.MIMEPart.as_string", "email._policybase._PolicyBase.clone"], "email.message.MIMEPart.is_attachment": ["email.message.Message.get"], "email.message.MIMEPart._find_body": ["email.message.MIMEPart._find_body"], "email.message.MIMEPart.get_body": ["<builtin>.len", "email.message.MIMEPart._find_body"], "email.message.MIMEPart.iter_attachments": ["email.message.Message.get_content_type", "email.message.Message.get_param", "email.message.Message.get_payload"], "email.message.MIMEPart.iter_parts": ["email.message.Message.get_content_maintype", "email.message.Message.get_payload"], "email.message.MIMEPart.get_content": ["email.contentmanager.ContentManager.get_content"], "email.contentmanager.ContentManager.get_content": ["<builtin>.KeyError"], "email.message.MIMEPart.set_content": ["email.contentmanager.ContentManager.set_content"], "email.contentmanager.ContentManager.set_content": ["<builtin>.TypeError", "email.contentmanager.ContentManager._find_set_handler"], "email.message.MIMEPart._make_multipart": ["<builtin>.type", "<builtin>.ValueError", "email.message.Message.get_content_maintype", "email.message.Message.get_content_subtype", "email.message.Message.set_param"], "email.message.MIMEPart.make_related": ["email.message.MIMEPart._make_multipart"], "email.message.MIMEPart.make_alternative": ["email.message.MIMEPart._make_multipart"], "email.message.MIMEPart.make_mixed": ["email.message.MIMEPart._make_multipart"], "email.message.MIMEPart._add_multipart": ["<builtin>.type", "email.message.Message.get_content_maintype", "<builtin>.getattr", "email.message.Message.get_content_subtype", "email.message.Message.attach"], "email.message.MIMEPart.add_related": ["email.message.MIMEPart._add_multipart"], "email.message.MIMEPart.add_alternative": ["email.message.MIMEPart._add_multipart"], "email.message.MIMEPart.add_attachment": ["email.message.MIMEPart._add_multipart"], "email.message.MIMEPart.clear": [], "email.message.MIMEPart.clear_content": [], "email.message.EmailMessage": [], "email.message.EmailMessage.set_content": ["<builtin>.super"], "email.iterators.body_line_iterator": ["_io.StringIO", "<builtin>.isinstance"], "email.iterators.typed_subpart_iterator": [], "email.iterators._structure": ["<builtin>.print", "email.iterators._structure"], "email._encoded_words.<lambda1>": [], "email._encoded_words.decode_q": ["_functools.partial"], "email._encoded_words._QByteMap": [], "email._encoded_words._QByteMap.__missing__": ["<builtin>.chr"], "email._encoded_words.encode_q": [], "email._encoded_words.len_q": ["<builtin>.len", "<builtin>.sum"], "email._encoded_words.encode_b": ["base64.b64encode"], "email._encoded_words.len_b": ["<builtin>.len", "<builtin>.divmod"], "email._encoded_words.decode": ["email.errors.MessageDefect.__init__"], "email._encoded_words.encode": [], "email.generator.Generator": [], "email.generator.Generator.write": ["email.generator.BytesGenerator.write", "email.generator.Generator.write"], "email.generator.BytesGenerator.write": ["email.generator.BytesGenerator.write", "email.generator.Generator.write"], "email.generator.BytesGenerator._encode": [], "email.generator.Generator._encode": [], "time.ctime": [], "email.generator.Generator._write": ["email.generator.BytesGenerator._write_headers", "email.generator.Generator._new_buffer", "email.generator.Generator._dispatch", "copy.deepcopy", "email.generator.Generator._write_headers", "email.generator.Generator.write", "email.message.Message.replace_header", "<builtin>.getattr", "email.generator.BytesGenerator.write", "email.generator.BytesGenerator._new_buffer"], "email.generator.Generator.clone": [], "email.generator.Generator._new_buffer": ["_io.StringIO"], "email.generator.Generator._write_lines": ["email.generator.BytesGenerator.write", "email.generator.Generator.write"], "email.generator.BytesGenerator._new_buffer": ["_io.BytesIO"], "email.generator.Generator._dispatch": ["email.generator.Generator._handle_text", "email.generator.BytesGenerator._handle_text", "email.message.Message.get_content_maintype", "<builtin>.getattr", "email.message.Message.get_content_subtype"], "email.generator.Generator._write_headers": ["email.message.Message.raw_items", "email.generator.BytesGenerator.write", "email.generator.Generator.write"], "email.generator.BytesGenerator._write_headers": ["email.message.Message.raw_items", "email.generator.BytesGenerator.write", "email.generator.Generator.write"], "email.generator.Generator._handle_text": ["email.message.Message.set_payload", "<builtin>.isinstance", "email.message.Message.get_payload", "copy.deepcopy", "<builtin>.type", "email.generator.Generator._write_lines", "<builtin>.TypeError", "email.utils._has_surrogates", "email.message.Message.get_param"], "email.generator.BytesGenerator._handle_text": ["email.utils._has_surrogates", "<builtin>.super", "email.generator.Generator._write_lines"], "email.generator.Generator._handle_multipart": ["email.generator.Generator._new_buffer", "<builtin>.isinstance", "email.generator.Generator._make_boundary", "email.generator.Generator.write", "email.generator.Generator._write_lines", "email.generator.BytesGenerator.write", "email.generator.BytesGenerator._new_buffer", "email.generator.Generator.clone"], "email.generator.Generator._make_boundary": ["email.generator.Generator._compile_re", "email.generator.BytesGenerator._compile_re", "re.escape", "<builtin>.str"], "email.generator.Generator._handle_multipart_signed": ["email.generator.Generator._handle_multipart"], "email.generator.Generator._handle_message_delivery_status": ["email.generator.Generator._new_buffer", "email.generator.Generator.write", "email.generator.BytesGenerator.write", "email.generator.BytesGenerator._new_buffer", "email.generator.Generator.clone"], "email.generator.Generator._handle_message": ["email.generator.Generator._new_buffer", "<builtin>.isinstance", "email.generator.Generator._encode", "email.generator.Generator.write", "email.generator.BytesGenerator.write", "email.generator.BytesGenerator._new_buffer", "email.generator.BytesGenerator._encode", "email.generator.Generator.clone"], "email.generator.Generator._compile_re": ["re.compile"], "email.generator.BytesGenerator._compile_re": ["re.compile"], "email.generator.BytesGenerator": [], "email.generator.DecodedGenerator": [], "email.generator.DecodedGenerator.__init__": ["email.generator.Generator.__init__"], "email.generator.DecodedGenerator._dispatch": ["<builtin>.print"], "email.policy.EmailPolicy": ["email.headerregistry.HeaderRegistry.__init__"], "email.headerregistry.HeaderRegistry.__init__": [], "email.policy.EmailPolicy.__init__": ["<builtin>.super", "email.headerregistry.HeaderRegistry.__init__"], "email.policy.EmailPolicy.header_source_parse": [], "email.policy.EmailPolicy.header_store_parse": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.len", "email.headerregistry.HeaderRegistry.__init__"], "email.policy.EmailPolicy.header_fetch_parse": ["<builtin>.hasattr", "email.headerregistry.HeaderRegistry.__init__"], "email.policy.EmailPolicy.fold": ["email.policy.EmailPolicy._fold"], "email.policy.EmailPolicy._fold": ["<builtin>.hasattr", "<builtin>.any", "<builtin>.len", "email.utils._has_surrogates", "email.headerregistry.HeaderRegistry.__init__"], "email.policy.EmailPolicy.fold_binary": ["email.policy.EmailPolicy._fold"], "email.contentmanager.ContentManager": [], "email.contentmanager.ContentManager.__init__": [], "email.contentmanager.ContentManager.add_get_handler": [], "email.contentmanager.ContentManager.add_set_handler": [], "email.contentmanager.ContentManager._find_set_handler": ["<builtin>.getattr", "<builtin>.type", "<builtin>.KeyError"], "email.contentmanager.get_text_content": [], "email.contentmanager.get_non_text_content": [], "email.contentmanager.get_message_content": [], "email.contentmanager.get_and_fixup_unknown_message_content": ["<builtin>.bytes"], "email.contentmanager._prepare_set": ["<builtin>.hasattr", "<builtin>.ValueError"], "email.contentmanager._finalize_set": [], "email.contentmanager._encode_base64": ["<builtin>.len", "<builtin>.range"], "email.contentmanager._encode_text": ["email.contentmanager._encode_text.embedded_body", "<builtin>.ValueError", "<builtin>.len", "email.contentmanager._encode_text.normal_body", "<builtin>.max", "email.quoprimime.body_encode", "email.contentmanager._encode_base64"], "email.contentmanager._encode_text.embedded_body": [], "email.contentmanager._encode_text.normal_body": [], "email.contentmanager.set_text_content": ["email.contentmanager._encode_text", "email.contentmanager._prepare_set", "email.contentmanager._finalize_set"], "email.contentmanager.set_message_content": ["email.contentmanager._prepare_set", "<builtin>.ValueError", "email.contentmanager._finalize_set"], "email.contentmanager.set_bytes_content": ["email.contentmanager._finalize_set", "email.contentmanager._prepare_set", "email.contentmanager._encode_base64"], "email.headerregistry.Address": [], "email.headerregistry.Address.__init__": ["<builtin>.TypeError", "<builtin>.ValueError", "email._header_value_parser.get_addr_spec"], "email._header_value_parser.get_addr_spec": ["email._header_value_parser.get_domain", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_local_part"], "email.headerregistry.Address.display_name": [], "email.headerregistry.Address.username": [], "email.headerregistry.Address.domain": [], "email.headerregistry.Address.addr_spec": ["<builtin>.len", "email._header_value_parser.quote_string", "<builtin>.set"], "email._header_value_parser.quote_string": ["<builtin>.str"], "email.headerregistry.Address.__repr__": [], "email.headerregistry.Address.__str__": ["<builtin>.len", "email._header_value_parser.quote_string", "<builtin>.set"], "email.headerregistry.Address.__eq__": ["<builtin>.type"], "email.headerregistry.Group": [], "email.headerregistry.Group.__init__": ["<builtin>.tuple"], "email.headerregistry.Group.display_name": [], "email.headerregistry.Group.addresses": [], "email.headerregistry.Group.__repr__": [], "email.headerregistry.Group.__str__": ["<builtin>.len", "email._header_value_parser.quote_string", "<builtin>.set", "<builtin>.str"], "email.headerregistry.Group.__eq__": ["<builtin>.type"], "email.headerregistry.BaseHeader": [], "email.headerregistry.BaseHeader.__new__": ["email.utils._sanitize", "email.utils._has_surrogates"], "email.headerregistry.BaseHeader.init": [], "email.headerregistry.BaseHeader.name": [], "email.headerregistry.BaseHeader.defects": ["<builtin>.tuple"], "email.headerregistry.BaseHeader.__reduce__": ["<builtin>.str"], "email.headerregistry.BaseHeader._reconstruct": [], "email.headerregistry.BaseHeader.fold": ["email._header_value_parser.TokenList.fold", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.MsgID.fold"], "email._header_value_parser.TokenList.__init__": ["<builtin>.super"], "email._header_value_parser.TokenList.fold": ["email._header_value_parser._refold_parse_tree"], "email._header_value_parser.MsgID.fold": ["<builtin>.str"], "email.headerregistry._reconstruct_header": ["<builtin>.type"], "email.headerregistry.UnstructuredHeader": ["<builtin>.staticmethod"], "email.headerregistry.UnstructuredHeader.parse": ["<builtin>.str"], "email.headerregistry.UniqueUnstructuredHeader": [], "email.headerregistry.DateHeader": ["<builtin>.staticmethod"], "email.headerregistry.DateHeader.parse": ["email._header_value_parser.TokenList.__init__", "<builtin>.isinstance", "email.utils.parsedate_to_datetime", "email.errors.HeaderDefect.__init__", "email.utils.format_datetime"], "email.headerregistry.DateHeader.init": ["<builtin>.super"], "email.headerregistry.DateHeader.datetime": [], "email.headerregistry.UniqueDateHeader": [], "email.headerregistry.AddressHeader": [], "email.headerregistry.AddressHeader.value_parser": ["email._header_value_parser.get_address_list"], "email._header_value_parser.get_address_list": ["email._header_value_parser.get_invalid_mailbox", "email._header_value_parser.TokenList.__init__", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_address", "email._header_value_parser.get_cfws"], "email.headerregistry.AddressHeader.parse": ["<builtin>.hasattr", "email.headerregistry.AddressHeader.value_parser", "email.headerregistry.Address.__init__", "<builtin>.isinstance", "email.headerregistry.Group.__init__", "<builtin>.str", "<builtin>.list"], "email.headerregistry.AddressHeader.init": ["<builtin>.tuple", "<builtin>.super"], "email.headerregistry.AddressHeader.groups": [], "email.headerregistry.AddressHeader.addresses": ["<builtin>.tuple"], "email.headerregistry.UniqueAddressHeader": [], "email.headerregistry.SingleAddressHeader": [], "email.headerregistry.SingleAddressHeader.address": ["<builtin>.len", "<builtin>.ValueError"], "email.headerregistry.UniqueSingleAddressHeader": [], "email.headerregistry.MIMEVersionHeader": ["<builtin>.staticmethod"], "email.headerregistry.MIMEVersionHeader.parse": ["<builtin>.str"], "email.headerregistry.MIMEVersionHeader.init": ["<builtin>.super"], "email.headerregistry.MIMEVersionHeader.major": [], "email.headerregistry.MIMEVersionHeader.minor": [], "email.headerregistry.MIMEVersionHeader.version": [], "email.headerregistry.ParameterizedMIMEHeader": [], "email.headerregistry.ParameterizedMIMEHeader.parse": ["email.utils._sanitize", "<builtin>.str"], "email.headerregistry.ParameterizedMIMEHeader.init": ["<builtin>.super"], "email.headerregistry.ParameterizedMIMEHeader.params": [], "email.headerregistry.ContentTypeHeader": ["<builtin>.staticmethod"], "email.headerregistry.ContentTypeHeader.init": ["email.utils._sanitize", "<builtin>.super"], "email.headerregistry.ContentTypeHeader.maintype": [], "email.headerregistry.ContentTypeHeader.subtype": [], "email.headerregistry.ContentTypeHeader.content_type": [], "email.headerregistry.ContentDispositionHeader": ["<builtin>.staticmethod"], "email.headerregistry.ContentDispositionHeader.init": ["email.utils._sanitize", "<builtin>.super"], "email.headerregistry.ContentDispositionHeader.content_disposition": [], "email.headerregistry.ContentTransferEncodingHeader": ["<builtin>.staticmethod"], "email.headerregistry.ContentTransferEncodingHeader.parse": ["<builtin>.str"], "email.headerregistry.ContentTransferEncodingHeader.init": ["email.utils._sanitize", "<builtin>.super"], "email.headerregistry.ContentTransferEncodingHeader.cte": [], "email.headerregistry.MessageIDHeader": ["<builtin>.staticmethod"], "email.headerregistry.MessageIDHeader.parse": ["<builtin>.str"], "email.headerregistry.HeaderRegistry": [], "email.headerregistry.HeaderRegistry.map_to_type": [], "email.headerregistry.HeaderRegistry.__getitem__": ["<builtin>.type"], "email.headerregistry.HeaderRegistry.__call__": [], "email._header_value_parser.TokenList": [], "email._header_value_parser.TokenList.__str__": ["<builtin>.str"], "email._header_value_parser.TokenList.__repr__": ["<builtin>.super"], "email._header_value_parser.TokenList.value": [], "email._header_value_parser.TokenList.all_defects": ["<builtin>.sum"], "email._header_value_parser.TokenList.startswith_fws": [], "email._header_value_parser.TokenList.as_ew_allowed": ["<builtin>.all"], "email._header_value_parser.TokenList.comments": [], "email._header_value_parser._refold_parse_tree": ["<builtin>.hasattr", "email._header_value_parser._fold_mime_parameters", "<builtin>.isinstance", "<builtin>.str", "email._header_value_parser._fold_as_ew", "<builtin>.any", "<builtin>.list", "email._header_value_parser._steal_trailing_WSP_if_exists", "<builtin>.len", "<builtin>.set"], "email._header_value_parser.TokenList.pprint": ["<builtin>.print", "email._header_value_parser.TokenList.ppstr"], "email._header_value_parser.TokenList.ppstr": ["email._header_value_parser.TokenList._pp"], "email._header_value_parser.TokenList._pp": ["<builtin>.hasattr", "email._header_value_parser.TokenList._pp"], "email._header_value_parser.WhiteSpaceTokenList": [], "email._header_value_parser.WhiteSpaceTokenList.value": [], "email._header_value_parser.WhiteSpaceTokenList.comments": [], "email._header_value_parser.UnstructuredTokenList": [], "email._header_value_parser.Phrase": [], "email._header_value_parser.Word": [], "email._header_value_parser.CFWSList": [], "email._header_value_parser.Atom": [], "email._header_value_parser.Token": [], "email._header_value_parser.EncodedWord": [], "email._header_value_parser.QuotedString": [], "email._header_value_parser.QuotedString.content": [], "email._header_value_parser.QuotedString.quoted_value": ["<builtin>.str"], "email._header_value_parser.QuotedString.stripped_value": [], "email._header_value_parser.BareQuotedString": [], "email._header_value_parser.BareQuotedString.__str__": ["<builtin>.str", "email._header_value_parser.quote_string"], "email._header_value_parser.BareQuotedString.value": ["<builtin>.str"], "email._header_value_parser.Comment": [], "email._header_value_parser.Comment.__str__": ["<builtin>.sum"], "email._header_value_parser.Comment.quote": ["<builtin>.str"], "email._header_value_parser.Comment.content": ["<builtin>.str"], "email._header_value_parser.Comment.comments": [], "email._header_value_parser.AddressList": [], "email._header_value_parser.AddressList.addresses": [], "email._header_value_parser.AddressList.mailboxes": ["<builtin>.sum"], "email._header_value_parser.AddressList.all_mailboxes": ["<builtin>.sum"], "email._header_value_parser.Address": [], "email._header_value_parser.Address.display_name": [], "email._header_value_parser.Address.mailboxes": [], "email._header_value_parser.Address.all_mailboxes": [], "email._header_value_parser.MailboxList": [], "email._header_value_parser.MailboxList.mailboxes": [], "email._header_value_parser.MailboxList.all_mailboxes": [], "email._header_value_parser.GroupList": [], "email._header_value_parser.GroupList.mailboxes": [], "email._header_value_parser.GroupList.all_mailboxes": [], "email._header_value_parser.Group": [], "email._header_value_parser.Group.mailboxes": [], "email._header_value_parser.Group.all_mailboxes": [], "email._header_value_parser.Group.display_name": [], "email._header_value_parser.NameAddr": [], "email._header_value_parser.NameAddr.display_name": ["<builtin>.len"], "email._header_value_parser.NameAddr.local_part": [], "email._header_value_parser.NameAddr.domain": [], "email._header_value_parser.NameAddr.route": [], "email._header_value_parser.NameAddr.addr_spec": [], "email._header_value_parser.AngleAddr": [], "email._header_value_parser.AngleAddr.local_part": [], "email._header_value_parser.AngleAddr.domain": [], "email._header_value_parser.AngleAddr.route": [], "email._header_value_parser.AngleAddr.addr_spec": ["email._header_value_parser.quote_string"], "email._header_value_parser.ObsRoute": [], "email._header_value_parser.ObsRoute.domains": [], "email._header_value_parser.Mailbox": [], "email._header_value_parser.Mailbox.display_name": [], "email._header_value_parser.Mailbox.local_part": [], "email._header_value_parser.Mailbox.domain": [], "email._header_value_parser.Mailbox.route": [], "email._header_value_parser.Mailbox.addr_spec": [], "email._header_value_parser.InvalidMailbox": [], "email._header_value_parser.InvalidMailbox.display_name": [], "email._header_value_parser.Domain": [], "email._header_value_parser.Domain.domain": ["<builtin>.super"], "email._header_value_parser.DotAtom": [], "email._header_value_parser.DotAtomText": [], "email._header_value_parser.NoFoldLiteral": [], "email._header_value_parser.AddrSpec": [], "email._header_value_parser.AddrSpec.local_part": [], "email._header_value_parser.AddrSpec.domain": ["<builtin>.len"], "email._header_value_parser.AddrSpec.value": ["<builtin>.len"], "email._header_value_parser.AddrSpec.addr_spec": ["<builtin>.len", "email._header_value_parser.quote_string", "<builtin>.set"], "email._header_value_parser.ObsLocalPart": [], "email._header_value_parser.DisplayName": [], "email._header_value_parser.DisplayName.display_name": ["<builtin>.len", "email._header_value_parser.TokenList.__init__"], "email._header_value_parser.DisplayName.value": ["<builtin>.len", "email._header_value_parser.quote_string", "<builtin>.super"], "email._header_value_parser.LocalPart": [], "email._header_value_parser.LocalPart.value": [], "email._header_value_parser.LocalPart.local_part": ["email._header_value_parser.TokenList.__init__", "<builtin>.isinstance"], "email._header_value_parser.DomainLiteral": [], "email._header_value_parser.DomainLiteral.domain": ["<builtin>.super"], "email._header_value_parser.DomainLiteral.ip": [], "email._header_value_parser.MIMEVersion": [], "email._header_value_parser.Parameter": [], "email._header_value_parser.Parameter.section_number": [], "email._header_value_parser.Parameter.param_value": [], "email._header_value_parser.InvalidParameter": [], "email._header_value_parser.Attribute": [], "email._header_value_parser.Attribute.stripped_value": [], "email._header_value_parser.Section": [], "email._header_value_parser.Value": [], "email._header_value_parser.Value.stripped_value": [], "email._header_value_parser.MimeParameters": [], "email._header_value_parser.MimeParameters.params": ["email.errors.MessageDefect.__init__", "<builtin>.len", "email.errors.HeaderDefect.__init__", "urllib.parse.unquote", "<builtin>.sorted", "email.utils._has_surrogates", "urllib.parse.unquote_to_bytes", "operator.itemgetter.__init__"], "email._header_value_parser.MimeParameters.__str__": ["email._header_value_parser.quote_string"], "email._header_value_parser.ParameterizedHeaderValue": [], "email._header_value_parser.ParameterizedHeaderValue.params": ["<builtin>.reversed"], "email._header_value_parser.ContentType": [], "email._header_value_parser.ContentDisposition": [], "email._header_value_parser.ContentTransferEncoding": [], "email._header_value_parser.HeaderLabel": [], "email._header_value_parser.MsgID": [], "email._header_value_parser.MessageID": [], "email._header_value_parser.InvalidMessageID": [], "email._header_value_parser.Header": [], "email._header_value_parser.Terminal": [], "email._header_value_parser.Terminal.__new__": ["<builtin>.super"], "email._header_value_parser.Terminal.__repr__": ["<builtin>.super"], "email._header_value_parser.Terminal.pprint": ["<builtin>.print"], "email._header_value_parser.Terminal.all_defects": ["<builtin>.list"], "email._header_value_parser.Terminal._pp": ["<builtin>.super"], "email._header_value_parser.Terminal.pop_trailing_ws": [], "email._header_value_parser.Terminal.comments": [], "email._header_value_parser.Terminal.__getnewargs__": ["<builtin>.str"], "email._header_value_parser.WhiteSpaceTerminal": [], "email._header_value_parser.WhiteSpaceTerminal.value": [], "email._header_value_parser.WhiteSpaceTerminal.startswith_fws": [], "email._header_value_parser.ValueTerminal": [], "email._header_value_parser.ValueTerminal.value": [], "email._header_value_parser.ValueTerminal.startswith_fws": [], "email._header_value_parser.EWWhiteSpaceTerminal": [], "email._header_value_parser.EWWhiteSpaceTerminal.value": [], "email._header_value_parser.EWWhiteSpaceTerminal.__str__": [], "email._header_value_parser._InvalidEwError": [], "email._header_value_parser._validate_xtext": ["email.utils._has_surrogates", "email.errors.MessageDefect.__init__", "email.errors.NonPrintableDefect.__init__"], "email._header_value_parser._get_ptext_to_endchars": ["<builtin>.len", "<builtin>.range"], "email._header_value_parser.get_fws": ["<builtin>.len"], "email._header_value_parser.get_encoded_word": ["email._header_value_parser.TokenList.__init__", "email._encoded_words.decode", "email._header_value_parser._validate_xtext", "<builtin>.len", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_fws"], "email._header_value_parser.get_unstructured": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser._validate_xtext", "<builtin>.len", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_fws", "email._header_value_parser.get_encoded_word"], "email._header_value_parser.get_qp_ctext": ["email._header_value_parser._get_ptext_to_endchars", "email._header_value_parser._validate_xtext"], "email._header_value_parser.get_qcontent": ["email._header_value_parser._get_ptext_to_endchars", "email._header_value_parser._validate_xtext"], "email._header_value_parser.get_atext": ["email._header_value_parser._validate_xtext", "<builtin>.len"], "email._header_value_parser.get_bare_quoted_string": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_qcontent", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_fws", "email._header_value_parser.get_encoded_word"], "email._header_value_parser.get_comment": ["email._header_value_parser.get_comment", "email._header_value_parser.TokenList.__init__", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_fws", "email._header_value_parser.get_qp_ctext"], "email._header_value_parser.get_cfws": ["email._header_value_parser.get_comment", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_fws"], "email._header_value_parser.get_quoted_string": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_bare_quoted_string"], "email._header_value_parser.get_atom": ["email._header_value_parser.get_atext", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_encoded_word"], "email._header_value_parser.get_dot_atom_text": ["email._header_value_parser.get_atext", "email._header_value_parser.TokenList.__init__"], "email._header_value_parser.get_dot_atom": ["email._header_value_parser.get_dot_atom_text", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_encoded_word"], "email._header_value_parser.get_word": ["email._header_value_parser.get_quoted_string", "email._header_value_parser.get_cfws", "email._header_value_parser.get_atom"], "email._header_value_parser.get_phrase": ["email._header_value_parser.get_word", "email._header_value_parser.TokenList.__init__", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_local_part": ["email._header_value_parser.get_obs_local_part", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "<builtin>.str", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_word", "email._header_value_parser.get_dot_atom"], "email._header_value_parser.get_obs_local_part": ["email._header_value_parser.get_word", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_dtext": ["email._header_value_parser._get_ptext_to_endchars", "email.errors.HeaderDefect.__init__", "email._header_value_parser._validate_xtext"], "email._header_value_parser._check_for_early_dl_end": ["email.errors.HeaderDefect.__init__"], "email._header_value_parser.get_domain_literal": ["email._header_value_parser.get_dtext", "email._header_value_parser._check_for_early_dl_end", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_fws", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_domain": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_atom", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_domain_literal", "email._header_value_parser.get_cfws", "email._header_value_parser.get_dot_atom"], "email._header_value_parser.get_obs_route": ["email._header_value_parser.get_domain", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_angle_addr": ["email._header_value_parser.get_addr_spec", "email._header_value_parser.get_obs_route", "email._header_value_parser.TokenList.__init__", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_display_name": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_phrase"], "email._header_value_parser.get_name_addr": ["email._header_value_parser.get_angle_addr", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_display_name"], "email._header_value_parser.get_mailbox": ["email._header_value_parser.get_addr_spec", "email._header_value_parser.TokenList.__init__", "<builtin>.isinstance", "<builtin>.any", "email._header_value_parser.get_name_addr"], "email._header_value_parser.get_invalid_mailbox": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_phrase"], "email._header_value_parser.get_mailbox_list": ["email._header_value_parser.get_invalid_mailbox", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_mailbox", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_group_list": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_mailbox_list", "<builtin>.len", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_group": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_group_list", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_display_name"], "email._header_value_parser.get_address": ["email._header_value_parser.get_mailbox", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_group"], "email._header_value_parser.get_no_fold_literal": ["email._header_value_parser.get_dtext", "email._header_value_parser.TokenList.__init__"], "email._header_value_parser.get_msg_id": ["email._header_value_parser.get_obs_local_part", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_dot_atom_text", "email._header_value_parser.get_domain", "email._header_value_parser.get_no_fold_literal", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.parse_message_id": ["email._header_value_parser.get_msg_id", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_unstructured"], "email._header_value_parser.parse_mime_version": ["<builtin>.int", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_invalid_parameter": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_phrase"], "email._header_value_parser.get_ttext": ["email._header_value_parser._validate_xtext", "<builtin>.len"], "email._header_value_parser.get_token": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_ttext"], "email._header_value_parser.get_attrtext": ["email._header_value_parser._validate_xtext", "<builtin>.len"], "email._header_value_parser.get_attribute": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_attrtext", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_extended_attrtext": ["email._header_value_parser._validate_xtext", "<builtin>.len"], "email._header_value_parser.get_extended_attribute": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_extended_attrtext"], "email._header_value_parser.get_section": ["<builtin>.int", "email._header_value_parser.TokenList.__init__"], "email._header_value_parser.get_value": ["email._header_value_parser.get_quoted_string", "email._header_value_parser.get_extended_attribute", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_parameter": ["email._header_value_parser.get_attribute", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_section", "email._header_value_parser.get_qcontent", "email._header_value_parser.get_extended_attrtext", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_attrtext", "email._header_value_parser.get_value", "email._header_value_parser.get_fws", "email._header_value_parser.get_quoted_string", "email._header_value_parser.get_cfws"], "email._header_value_parser.parse_mime_parameters": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_invalid_parameter", "email._header_value_parser.get_parameter", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser._find_mime_parameters": ["email._header_value_parser.get_phrase", "email._header_value_parser.parse_mime_parameters"], "email._header_value_parser.parse_content_type_header": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_token", "email._header_value_parser._find_mime_parameters", "email._header_value_parser.parse_mime_parameters", "email.errors.HeaderDefect.__init__"], "email._header_value_parser.parse_content_disposition_header": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_token", "email._header_value_parser._find_mime_parameters", "email._header_value_parser.parse_mime_parameters", "email.errors.HeaderDefect.__init__"], "email._header_value_parser.parse_content_transfer_encoding_header": ["email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_phrase", "email._header_value_parser.get_token"], "email._header_value_parser._steal_trailing_WSP_if_exists": [], "email._header_value_parser._fold_mime_parameters": ["<builtin>.str", "<builtin>.len", "email.utils._has_surrogates", "urllib.parse.quote", "email._header_value_parser.quote_string"], "email._header_value_parser._fold_as_ew": ["<builtin>.str", "email._header_value_parser.get_unstructured", "email._header_value_parser._steal_trailing_WSP_if_exists", "<builtin>.len", "email._encoded_words.encode"], "uu.Error": [], "uu.encode": ["posixpath.basename", "<builtin>.isinstance", "<builtin>.len", "sys.stdout.buffer.write", "ntpath.basename", "<builtin>.open", "sys.stdin.buffer.read"], "optparse.OptionParser.__init__": ["optparse.OptionParser._populate_option_list", "optparse.OptionParser._init_parsing_state", "optparse.HelpFormatter.set_parser", "optparse.OptionParser.set_usage", "optparse.OptionContainer.__init__", "optparse.IndentedHelpFormatter.__init__"], "optparse.OptionContainer.add_option": ["<builtin>.isinstance", "optparse.OptionGroup.__init__", "optparse.OptionContainer._check_conflict", "<builtin>.TypeError", "<builtin>.len", "optparse.OptionParser.__init__"], "optparse.OptionParser.parse_args": ["optparse.OptionParser._process_args", "<builtin>.str", "optparse.OptionParser._get_args", "optparse.OptionParser.error", "optparse.OptionParser.get_default_values", "optparse.OptionParser.check_values"], "optparse.OptionParser.error": ["optparse.OptionParser.exit", "optparse.OptionParser.get_prog_name", "optparse.OptionParser.print_usage"], "optparse._repr": ["<builtin>.id"], "optparse.gettext": [], "optparse.ngettext": [], "optparse.OptParseError": [], "optparse.OptParseError.__init__": [], "optparse.OptParseError.__str__": [], "optparse.OptionError": [], "optparse.OptionError.__init__": ["<builtin>.str"], "optparse.OptionError.__str__": [], "optparse.OptionConflictError": [], "optparse.OptionValueError": [], "optparse.BadOptionError": [], "optparse.BadOptionError.__init__": [], "optparse.BadOptionError.__str__": ["gettext.gettext"], "optparse.AmbiguousOptionError": [], "optparse.AmbiguousOptionError.__init__": ["optparse.BadOptionError.__init__"], "optparse.AmbiguousOptionError.__str__": ["gettext.gettext"], "optparse.HelpFormatter": [], "optparse.HelpFormatter.__init__": ["<builtin>.int", "<builtin>.min", "<builtin>.max"], "optparse.HelpFormatter.set_parser": [], "optparse.HelpFormatter.set_short_opt_delimiter": ["<builtin>.ValueError"], "optparse.HelpFormatter.set_long_opt_delimiter": ["<builtin>.ValueError"], "optparse.HelpFormatter.indent": [], "optparse.HelpFormatter.dedent": [], "optparse.HelpFormatter.format_usage": ["<builtin>.NotImplementedError"], "optparse.HelpFormatter.format_heading": ["<builtin>.NotImplementedError"], "optparse.HelpFormatter._format_text": ["textwrap.fill", "<builtin>.max"], "optparse.HelpFormatter.format_description": ["optparse.HelpFormatter._format_text"], "optparse.HelpFormatter.format_epilog": ["optparse.HelpFormatter._format_text"], "optparse.HelpFormatter.expand_default": ["<builtin>.str"], "optparse.HelpFormatter.format_option": ["<builtin>.len", "textwrap.wrap", "optparse.HelpFormatter.expand_default"], "optparse.HelpFormatter.store_option_strings": ["<builtin>.min", "optparse.HelpFormatter.dedent", "<builtin>.len", "<builtin>.max", "optparse.HelpFormatter.format_option_strings", "optparse.HelpFormatter.indent"], "optparse.HelpFormatter.format_option_strings": [], "optparse.IndentedHelpFormatter": [], "optparse.IndentedHelpFormatter.__init__": ["optparse.HelpFormatter.__init__"], "optparse.IndentedHelpFormatter.format_usage": ["gettext.gettext"], "optparse.IndentedHelpFormatter.format_heading": [], "optparse.TitledHelpFormatter": [], "optparse.TitledHelpFormatter.__init__": ["optparse.HelpFormatter.__init__"], "optparse.TitledHelpFormatter.format_usage": ["optparse.TitledHelpFormatter.format_heading", "gettext.gettext"], "optparse.TitledHelpFormatter.format_heading": ["<builtin>.len"], "optparse._parse_num": [], "optparse._parse_int": ["optparse._parse_num"], "optparse.check_builtin": ["optparse.OptParseError.__init__", "gettext.gettext"], "optparse.check_choice": ["optparse.OptParseError.__init__", "<builtin>.map", "gettext.gettext"], "optparse.Option": [], "optparse.Option.__init__": ["optparse.Option._set_opt_strings", "optparse.Option._set_attrs", "optparse.Option._check_opt_strings"], "optparse.Option._check_opt_strings": ["<builtin>.TypeError"], "optparse.Option._set_opt_strings": ["<builtin>.len", "optparse.OptionError.__init__"], "optparse.Option._set_attrs": ["<builtin>.sorted", "optparse.OptionError.__init__", "<builtin>.setattr"], "optparse.Option._check_action": ["optparse.OptionError.__init__"], "optparse.Option._check_type": ["<builtin>.isinstance", "optparse.OptionError.__init__"], "optparse.Option._check_choice": ["<builtin>.str", "<builtin>.isinstance", "optparse.OptionError.__init__"], "optparse.Option._check_dest": [], "optparse.Option._check_const": ["optparse.OptionError.__init__"], "optparse.Option._check_nargs": ["optparse.OptionError.__init__"], "optparse.Option._check_callback": ["<builtin>.callable", "<builtin>.isinstance", "optparse.OptionError.__init__"], "optparse.Option.__str__": [], "optparse.Option.takes_value": [], "optparse.Option.get_opt_string": [], "optparse.Option.check_value": [], "optparse.Option.convert_value": ["optparse.Option.check_value", "<builtin>.tuple"], "optparse.Option.process": ["optparse.Option.convert_value", "optparse.Option.take_action"], "optparse.Option.take_action": ["<builtin>.ValueError", "<builtin>.setattr"], "optparse.Values": [], "optparse.Values.__init__": ["<builtin>.setattr"], "optparse.Values.__str__": ["<builtin>.str"], "optparse.Values.__eq__": ["<builtin>.isinstance"], "optparse.Values._update_careful": ["<builtin>.dir", "<builtin>.setattr"], "optparse.Values._update_loose": [], "optparse.Values._update": ["optparse.Values._update_loose", "<builtin>.ValueError", "optparse.Values._update_careful"], "optparse.Values.read_module": ["<builtin>.__import__", "optparse.Values._update", "<builtin>.vars"], "optparse.Values.read_file": ["<builtin>.exec", "optparse.Values._update", "<builtin>.open"], "optparse.Values.ensure_value": ["<builtin>.hasattr", "<builtin>.getattr", "<builtin>.setattr"], "optparse.OptionContainer": [], "optparse.OptionContainer.__init__": ["optparse.OptionParser._create_option_list", "optparse.OptionContainer.set_conflict_handler", "optparse.OptionContainer.set_description", "optparse.OptionGroup._create_option_list"], "optparse.OptionParser._create_option_list": ["optparse.OptionContainer._create_option_mappings"], "optparse.OptionGroup._create_option_list": ["optparse.OptionContainer._share_option_mappings"], "optparse.OptionContainer.set_conflict_handler": ["<builtin>.ValueError"], "optparse.OptionContainer.set_description": [], "optparse.OptionContainer._create_option_mappings": [], "optparse.OptionContainer._share_option_mappings": [], "optparse.OptionContainer.get_description": [], "optparse.OptionContainer.destroy": [], "optparse.OptionContainer._check_conflict": ["optparse.OptionError.__init__"], "optparse.OptionGroup.__init__": ["optparse.OptionContainer.__init__"], "optparse.OptionContainer.add_options": ["optparse.OptionContainer.add_option"], "optparse.OptionContainer.get_option": [], "optparse.OptionContainer.has_option": [], "optparse.OptionContainer.remove_option": ["<builtin>.ValueError"], "optparse.OptionContainer.format_option_help": [], "optparse.OptionContainer.format_description": ["optparse.OptionParser.get_description", "optparse.OptionContainer.get_description"], "optparse.OptionParser.get_description": ["optparse.OptionParser.expand_prog_name"], "optparse.OptionContainer.format_help": ["optparse.OptionContainer.format_option_help", "optparse.OptionParser.format_option_help", "optparse.OptionContainer.format_description"], "optparse.OptionParser.format_option_help": ["optparse.OptionContainer.format_option_help", "gettext.gettext", "optparse.OptionParser.format_option_help", "optparse.HelpFormatter.dedent", "optparse.IndentedHelpFormatter.format_heading", "optparse.HelpFormatter.indent", "optparse.HelpFormatter.store_option_strings"], "optparse.OptionGroup": [], "optparse.OptionGroup.set_title": [], "optparse.OptionGroup.destroy": ["optparse.OptionContainer.destroy", "optparse.OptionGroup.destroy", "optparse.OptionParser.destroy"], "optparse.OptionParser.destroy": ["optparse.OptionContainer.destroy", "optparse.OptionGroup.destroy", "optparse.OptionParser.destroy"], "optparse.OptionGroup.format_help": ["optparse.OptionGroup.format_help", "optparse.OptionParser.format_help", "optparse.OptionContainer.format_help"], "optparse.OptionParser.format_help": ["optparse.OptionParser.format_option_help", "optparse.OptionParser.format_epilog", "optparse.OptionContainer.format_description", "optparse.OptionParser.get_usage"], "optparse.OptionParser": [], "optparse.OptionParser.set_usage": ["gettext.gettext"], "optparse.OptionParser._populate_option_list": ["optparse.OptionParser._add_help_option", "optparse.OptionContainer.add_options", "optparse.OptionParser._add_version_option"], "optparse.OptionParser._init_parsing_state": [], "optparse.OptionParser._add_help_option": ["optparse.OptionContainer.add_option", "gettext.gettext"], "optparse.OptionParser._add_version_option": ["optparse.OptionContainer.add_option", "gettext.gettext"], "optparse.OptionParser.enable_interspersed_args": [], "optparse.OptionParser.disable_interspersed_args": [], "optparse.OptionParser.set_process_default_values": [], "optparse.OptionParser.set_default": [], "optparse.OptionParser.set_defaults": [], "optparse.OptionParser._get_all_options": [], "optparse.OptionParser.get_default_values": ["optparse.OptionParser._get_all_options", "<builtin>.isinstance", "optparse.Values.__init__"], "optparse.OptionParser.add_option_group": ["<builtin>.isinstance", "optparse.OptionGroup.__init__", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.len"], "optparse.OptionParser.get_option_group": [], "optparse.OptionParser._get_args": [], "optparse.OptionParser._process_args": ["optparse.OptionParser._process_long_opt", "<builtin>.len", "optparse.OptionParser._process_short_opts"], "optparse.OptionParser.check_values": [], "optparse.OptionParser._process_long_opt": ["gettext.gettext", "optparse.OptionParser._match_long_opt", "<builtin>.tuple", "optparse.OptionParser.error", "<builtin>.len", "gettext.ngettext"], "optparse.OptionParser._process_short_opts": ["optparse.BadOptionError.__init__", "<builtin>.tuple", "optparse.OptionParser.error", "<builtin>.len", "gettext.ngettext"], "optparse.OptionParser._match_long_opt": ["optparse._match_abbrev"], "optparse._match_abbrev": ["<builtin>.len", "optparse.AmbiguousOptionError.__init__", "optparse.BadOptionError.__init__"], "optparse.OptionParser.get_prog_name": ["posixpath.basename", "ntpath.basename"], "optparse.OptionParser.expand_prog_name": ["optparse.OptionParser.get_prog_name"], "optparse.OptionParser.exit": ["sys.stderr.write", "sys.exit"], "optparse.OptionParser.print_usage": ["<builtin>.print", "optparse.OptionParser.get_usage"], "optparse.OptionParser.get_usage": ["optparse.OptionParser.expand_prog_name", "optparse.IndentedHelpFormatter.format_usage"], "optparse.OptionParser.get_version": ["optparse.OptionParser.expand_prog_name"], "optparse.OptionParser.print_version": ["<builtin>.print", "optparse.OptionParser.get_version"], "optparse.OptionParser.format_epilog": [], "optparse.OptionParser.print_help": ["optparse.OptionParser.format_help", "sys.stdout.write"], "csv.Dialect": [], "csv.Dialect.__init__": ["csv.Dialect._validate"], "csv.Dialect._validate": ["<builtin>.str"], "csv.excel": [], "csv.excel_tab": [], "csv.unix_dialect": [], "csv.DictReader": [], "csv.DictReader.__init__": [], "csv.DictReader.__iter__": [], "csv.DictReader.fieldnames": ["<builtin>.next"], "csv.DictReader.__next__": ["<builtin>.next", "<builtin>.zip", "<builtin>.dict", "<builtin>.len"], "csv.DictWriter": [], "csv.DictWriter.__init__": ["<builtin>.ValueError"], "csv.DictWriter.writeheader": ["csv.DictWriter.writerow", "<builtin>.zip", "<builtin>.dict"], "csv.DictWriter.writerow": ["csv.DictWriter._dict_to_list"], "csv.DictWriter._dict_to_list": ["<builtin>.ValueError", "<builtin>.repr"], "csv.DictWriter.writerows": ["<builtin>.map"], "csv.Sniffer": [], "csv.Sniffer.__init__": [], "csv.Sniffer.sniff": ["csv.Sniffer._guess_quote_and_delimiter", "csv.Sniffer.sniff.dialect", "csv.Sniffer._guess_delimiter"], "csv.Sniffer._guess_quote_and_delimiter": ["re.escape", "re.compile", "<builtin>.max"], "csv.Sniffer._guess_delimiter": ["<builtin>.min", "<builtin>.float", "<builtin>.list", "<builtin>.len", "<builtin>.range", "<builtin>.max", "<builtin>.filter", "<builtin>.chr", "<builtin>.sum"], "csv.Sniffer.sniff.dialect": [], "csv.Sniffer._guess_delimiter.<lambda1>": [], "csv.Sniffer.has_header": ["_io.StringIO", "csv.Sniffer.sniff", "<builtin>.next", "<builtin>.type", "<builtin>.list", "<builtin>.len", "<builtin>.range"], "pathlib._ignore_error": ["<builtin>.getattr"], "pathlib._is_wildcard_pattern": [], "pathlib._Flavour": [], "pathlib._Flavour.__init__": [], "pathlib._Flavour.parse_parts": ["<builtin>.reversed", "pathlib._WindowsFlavour.splitroot", "sys.intern", "pathlib._PosixFlavour.splitroot"], "pathlib._WindowsFlavour.splitroot": ["<builtin>.len", "pathlib._WindowsFlavour._split_extended_path"], "pathlib._PosixFlavour.splitroot": ["<builtin>.len"], "pathlib._Flavour.join_parsed_parts": ["pathlib._PosixFlavour.casefold", "pathlib._WindowsFlavour.casefold"], "pathlib._PosixFlavour.casefold": [], "pathlib._WindowsFlavour.casefold": [], "pathlib._WindowsFlavour": ["<builtin>.range", "<builtin>.set"], "pathlib._WindowsFlavour._split_extended_path": [], "pathlib._WindowsFlavour.casefold_parts": [], "pathlib._WindowsFlavour.compile_pattern": ["re.compile"], "pathlib._WindowsFlavour.resolve": ["pathlib._WindowsFlavour._ext_to_normal", "posixpath.join", "ntpath.join", "ntpath.split", "posixpath.split", "<builtin>.reversed", "<builtin>.str", "nt._getfinalpathname"], "pathlib._WindowsFlavour._ext_to_normal": ["pathlib._WindowsFlavour._split_extended_path"], "pathlib._WindowsFlavour.is_reserved": [], "pathlib._WindowsFlavour.make_uri": ["<builtin>.len", "urllib.parse.quote_from_bytes"], "pathlib._WindowsFlavour.gethomedir": ["pathlib._Flavour.parse_parts", "<builtin>.RuntimeError"], "pathlib._PosixFlavour": [], "pathlib._PosixFlavour.casefold_parts": [], "pathlib._PosixFlavour.compile_pattern": ["re.compile"], "pathlib._PosixFlavour.resolve": ["<builtin>.str", "pathlib._PosixFlavour.resolve._resolve"], "pathlib._PosixFlavour.resolve._resolve": ["pathlib._PosixFlavour.resolve._resolve", "<builtin>.RuntimeError"], "pathlib._PosixFlavour.is_reserved": [], "pathlib._PosixFlavour.make_uri": ["urllib.parse.quote_from_bytes", "<builtin>.bytes"], "pathlib._PosixFlavour.gethomedir": ["pwd.getpwuid", "pwd.getpwnam", "<builtin>.RuntimeError"], "pathlib._Accessor": [], "pathlib._NormalAccessor": ["<builtin>.hasattr"], "pathlib._NormalAccessor.lchmod": ["<builtin>.NotImplementedError"], "pathlib._NormalAccessor.link_to": ["<builtin>.NotImplementedError"], "pathlib._NormalAccessor.symlink": ["<builtin>.NotImplementedError"], "pathlib._NormalAccessor.readlink": [], "pathlib._make_selector": ["<builtin>.ValueError", "pathlib._is_wildcard_pattern", "pathlib._RecursiveWildcardSelector.__init__", "pathlib._WildcardSelector.__init__", "pathlib._PreciseSelector.__init__"], "pathlib._WildcardSelector.__init__": ["pathlib._Selector.__init__"], "pathlib._RecursiveWildcardSelector.__init__": ["pathlib._Selector.__init__"], "pathlib._PreciseSelector.__init__": ["pathlib._Selector.__init__"], "pathlib._Selector": [], "pathlib._Selector.__init__": ["pathlib._make_selector"], "pathlib._Selector.select_from": ["pathlib._RecursiveWildcardSelector._select_from", "pathlib._WildcardSelector._select_from", "<builtin>.type", "<builtin>.iter", "pathlib._PreciseSelector._select_from"], "pathlib._RecursiveWildcardSelector._select_from": ["pathlib._TerminatingSelector._select_from", "pathlib._RecursiveWildcardSelector._iterate_directories", "<builtin>.set"], "pathlib._WildcardSelector._select_from": ["pathlib._TerminatingSelector._select_from", "pathlib._ignore_error", "<builtin>.list"], "pathlib._PreciseSelector._select_from": ["pathlib._TerminatingSelector._select_from"], "pathlib._TerminatingSelector": [], "pathlib._TerminatingSelector._select_from": [], "pathlib._PreciseSelector": [], "pathlib._WildcardSelector": [], "pathlib._RecursiveWildcardSelector": [], "pathlib._RecursiveWildcardSelector._iterate_directories": ["pathlib._RecursiveWildcardSelector._iterate_directories", "pathlib._ignore_error", "<builtin>.list"], "pathlib._PathParents": [], "pathlib._PathParents.__init__": ["<builtin>.type"], "pathlib._PathParents.__len__": ["<builtin>.len"], "pathlib._PathParents.__getitem__": ["<builtin>.len", "<builtin>.IndexError"], "pathlib._PathParents.__repr__": [], "pathlib.PurePath": ["operator.attrgetter.__init__", "<builtin>.property"], "pathlib.PurePath.__new__": ["pathlib.PurePath._from_parts"], "pathlib.PurePath._from_parts": [], "pathlib.PurePath.__reduce__": ["<builtin>.tuple"], "pathlib.PurePath._parse_args": ["<builtin>.TypeError", "<builtin>.str", "<builtin>.type", "<builtin>.isinstance"], "pathlib.PurePath._from_parsed_parts": [], "pathlib.PurePath._format_parsed_parts": [], "pathlib.PurePath._init": [], "pathlib.PurePath._make_child": ["pathlib.PurePath._from_parsed_parts", "pathlib.PurePath._parse_args"], "pathlib.PurePath.__str__": ["pathlib.PurePath._format_parsed_parts"], "pathlib.PurePath.__fspath__": ["<builtin>.str"], "pathlib.PurePath.as_posix": ["<builtin>.str"], "pathlib.PurePath.__bytes__": [], "pathlib.PurePath.__repr__": ["pathlib.PurePath.as_posix"], "pathlib.PurePath.as_uri": ["pathlib.PurePath.is_absolute", "<builtin>.ValueError"], "pathlib.PurePath.is_absolute": ["<builtin>.bool"], "pathlib.PurePath._cparts": [], "pathlib.PurePath.__eq__": ["<builtin>.isinstance"], "pathlib.PurePath.__hash__": ["<builtin>.tuple"], "pathlib.PurePath.__lt__": ["<builtin>.isinstance"], "pathlib.PurePath.__le__": ["<builtin>.isinstance"], "pathlib.PurePath.__gt__": ["<builtin>.isinstance"], "pathlib.PurePath.__ge__": ["<builtin>.isinstance"], "pathlib.PurePath.anchor": [], "pathlib.PurePath.name": ["<builtin>.len"], "pathlib.PurePath.suffix": ["<builtin>.len"], "pathlib.PurePath.suffixes": [], "pathlib.PurePath.stem": ["<builtin>.len"], "pathlib.PurePath.with_name": ["<builtin>.len", "pathlib.PurePath._from_parsed_parts", "<builtin>.ValueError"], "pathlib.PurePath.with_suffix": ["<builtin>.len", "pathlib.PurePath._from_parsed_parts", "<builtin>.ValueError"], "pathlib.PurePath.relative_to": ["<builtin>.str", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.len", "pathlib.PurePath._from_parsed_parts", "pathlib.PurePath._format_parsed_parts", "pathlib.PurePath._parse_args"], "pathlib.PurePath.parts": ["<builtin>.tuple"], "pathlib.PurePath.__truediv__": ["pathlib.PurePath._make_child"], "pathlib.PurePath.__rtruediv__": ["pathlib.PurePath._from_parts"], "pathlib.PurePath.parent": ["<builtin>.len", "pathlib.PurePath._from_parsed_parts"], "pathlib.PurePath.parents": ["pathlib._PathParents.__init__"], "pathlib.PurePath.is_reserved": [], "pathlib.PurePath.match": ["<builtin>.reversed", "<builtin>.len", "<builtin>.zip", "<builtin>.ValueError"], "pathlib.PurePosixPath": [], "pathlib.PureWindowsPath": [], "pathlib.Path": [], "pathlib.Path.__new__": ["pathlib.PurePath._from_parts", "<builtin>.NotImplementedError"], "pathlib.Path._init": [], "pathlib.Path._make_child_relpath": ["pathlib.PurePath._from_parsed_parts"], "pathlib.Path.__enter__": ["pathlib.Path._raise_closed"], "pathlib.Path._raise_closed": ["<builtin>.ValueError"], "pathlib.Path.__exit__": [], "pathlib.Path._opener": [], "pathlib.Path._raw_open": ["pathlib.Path._raise_closed"], "pathlib.Path.cwd": [], "pathlib.Path.home": [], "pathlib.Path.samefile": ["posixpath.samestat", "ntpath.samestat", "pathlib.Path.stat"], "pathlib.Path.stat": [], "pathlib.Path.iterdir": ["pathlib.Path._make_child_relpath", "pathlib.Path._raise_closed"], "pathlib.Path.glob": ["<builtin>.tuple", "<builtin>.ValueError", "pathlib._make_selector", "<builtin>.NotImplementedError"], "pathlib.Path.rglob": ["<builtin>.tuple", "pathlib._make_selector", "<builtin>.NotImplementedError"], "pathlib.Path.absolute": ["pathlib.PurePath.is_absolute", "pathlib.PurePath._from_parts", "pathlib.Path._raise_closed"], "pathlib.Path.resolve": ["<builtin>.str", "pathlib.PurePath._from_parts", "pathlib.Path.absolute", "pathlib.Path.stat", "pathlib.Path._raise_closed"], "pathlib.Path.owner": ["pwd.getpwuid", "pathlib.Path.stat"], "pathlib.Path.open": ["io.open", "pathlib.Path._raise_closed"], "pathlib.Path.read_bytes": ["pathlib.Path.open"], "pathlib.Path.read_text": ["pathlib.Path.open"], "pathlib.Path.write_bytes": ["<builtin>.memoryview", "pathlib.Path.open"], "pathlib.Path.write_text": ["<builtin>.TypeError", "<builtin>.isinstance", "pathlib.Path.open"], "pathlib.Path.touch": ["pathlib.Path._raw_open", "pathlib.Path._raise_closed"], "pathlib.Path.mkdir": ["pathlib.Path.is_dir", "pathlib.Path.mkdir", "pathlib.Path._raise_closed"], "pathlib.Path.is_dir": ["stat.S_ISDIR", "pathlib.Path.stat", "pathlib._ignore_error"], "pathlib.Path.chmod": ["pathlib.Path._raise_closed"], "pathlib.Path.lchmod": ["pathlib._NormalAccessor.lchmod", "pathlib.Path._raise_closed"], "pathlib.Path.unlink": ["pathlib.Path._raise_closed"], "pathlib.Path.rmdir": ["pathlib.Path._raise_closed"], "pathlib.Path.lstat": ["pathlib.Path._raise_closed"], "pathlib.Path.link_to": ["pathlib._NormalAccessor.link_to", "pathlib.Path._raise_closed"], "pathlib.Path.rename": ["pathlib.Path._raise_closed"], "pathlib.Path.replace": ["pathlib.Path._raise_closed"], "pathlib.Path.symlink_to": ["pathlib._NormalAccessor.symlink", "pathlib.Path._raise_closed"], "pathlib.Path.exists": ["pathlib._ignore_error", "pathlib.Path.stat"], "pathlib.Path.is_file": ["pathlib._ignore_error", "pathlib.Path.stat", "stat.S_ISREG"], "pathlib.Path.is_mount": ["pathlib.Path.is_dir", "pathlib.Path.exists", "pathlib.Path.stat"], "pathlib.Path.is_symlink": ["stat.S_ISLNK", "pathlib._ignore_error", "pathlib.Path.lstat"], "pathlib.Path.is_block_device": ["stat.S_ISBLK", "pathlib._ignore_error", "pathlib.Path.stat"], "pathlib.Path.is_char_device": ["stat.S_ISCHR", "pathlib._ignore_error", "pathlib.Path.stat"], "pathlib.Path.is_fifo": ["stat.S_ISFIFO", "pathlib._ignore_error", "pathlib.Path.stat"], "pathlib.Path.is_socket": ["stat.S_ISSOCK", "pathlib._ignore_error", "pathlib.Path.stat"], "pathlib.Path.expanduser": ["pathlib.PurePath._from_parts"], "pathlib.PosixPath": [], "pathlib.WindowsPath": [], "pathlib.WindowsPath.owner": ["<builtin>.NotImplementedError"], "pathlib.WindowsPath.group": ["<builtin>.NotImplementedError"], "pathlib.WindowsPath.is_mount": ["<builtin>.NotImplementedError"], "importlib.abc._register": ["_bootstrap_external.FileLoader.register", "<builtin>.getattr", "_bootstrap_external.SourceLoader.register"], "_bootstrap_external.FileLoader.register": [], "_bootstrap_external.SourceLoader.register": [], "importlib.abc.Finder": ["abc.abstractmethod"], "importlib.abc.Finder.find_module": [], "importlib.abc.MetaPathFinder": [], "importlib.abc.MetaPathFinder.find_module": ["<builtin>.hasattr", "warnings.warn"], "importlib.abc.MetaPathFinder.invalidate_caches": [], "importlib.abc.PathEntryFinder": [], "importlib.abc.PathEntryFinder.find_loader": ["<builtin>.hasattr", "warnings.warn"], "importlib.abc.PathEntryFinder.invalidate_caches": [], "importlib.abc.Loader": [], "importlib.abc.Loader.create_module": [], "importlib.abc.Loader.load_module": ["<builtin>.hasattr", "_bootstrap._load_module_shim"], "_bootstrap._load_module_shim": [], "importlib.abc.Loader.module_repr": [], "importlib.abc.ResourceLoader": ["abc.abstractmethod"], "importlib.abc.ResourceLoader.get_data": [], "importlib.abc.InspectLoader": ["abc.abstractmethod"], "importlib.abc.InspectLoader.is_package": [], "importlib.abc.InspectLoader.get_code": ["importlib.abc.InspectLoader.get_source", "importlib.abc.InspectLoader.source_to_code"], "importlib.abc.InspectLoader.get_source": [], "importlib.abc.InspectLoader.source_to_code": ["<builtin>.compile"], "importlib.abc.ExecutionLoader": ["abc.abstractmethod"], "importlib.abc.ExecutionLoader.get_filename": [], "importlib.abc.ExecutionLoader.get_code": ["importlib.abc.ExecutionLoader.get_filename", "importlib.abc.InspectLoader.get_source", "importlib.abc.InspectLoader.source_to_code"], "importlib.abc.FileLoader": [], "importlib.abc.SourceLoader": [], "importlib.abc.SourceLoader.path_mtime": ["importlib.abc.SourceLoader.path_stats", "<builtin>.int"], "importlib.abc.SourceLoader.path_stats": ["importlib.abc.SourceLoader.path_mtime"], "importlib.abc.SourceLoader.set_data": [], "importlib.abc.ResourceReader": ["abc.abstractmethod"], "importlib.abc.ResourceReader.open_resource": [], "importlib.abc.ResourceReader.resource_path": [], "importlib.abc.ResourceReader.is_resource": [], "importlib.abc.ResourceReader.contents": [], "tracemalloc._format_size": ["<builtin>.abs"], "tracemalloc.Statistic": [], "tracemalloc.Statistic.__init__": [], "tracemalloc.Statistic.__hash__": ["<builtin>.hash"], "tracemalloc.Statistic.__eq__": [], "tracemalloc.Statistic.__str__": ["tracemalloc._format_size"], "tracemalloc.Statistic.__repr__": [], "tracemalloc.Statistic._sort_key": [], "tracemalloc.StatisticDiff": [], "tracemalloc.StatisticDiff.__init__": [], "tracemalloc.StatisticDiff.__hash__": ["<builtin>.hash"], "tracemalloc.StatisticDiff.__eq__": [], "tracemalloc.StatisticDiff.__str__": ["tracemalloc._format_size"], "tracemalloc.StatisticDiff.__repr__": [], "tracemalloc.StatisticDiff._sort_key": ["<builtin>.abs"], "tracemalloc._compare_grouped_stats": ["tracemalloc.StatisticDiff.__init__"], "tracemalloc.Frame": [], "tracemalloc.Frame.__init__": [], "tracemalloc.Frame.filename": [], "tracemalloc.Frame.lineno": [], "tracemalloc.Frame.__eq__": [], "tracemalloc.Frame.__lt__": [], "tracemalloc.Frame.__hash__": ["<builtin>.hash"], "tracemalloc.Frame.__str__": [], "tracemalloc.Frame.__repr__": [], "tracemalloc.Traceback": [], "tracemalloc.Traceback.__init__": ["<builtin>.reversed", "<builtin>.tuple"], "tracemalloc.Traceback.__len__": ["<builtin>.len"], "tracemalloc.Traceback.__getitem__": ["<builtin>.tuple", "tracemalloc.Frame.__init__", "<builtin>.isinstance"], "tracemalloc.Traceback.__contains__": [], "tracemalloc.Traceback.__hash__": ["<builtin>.hash"], "tracemalloc.Traceback.__eq__": [], "tracemalloc.Traceback.__lt__": [], "tracemalloc.Traceback.__str__": ["<builtin>.str"], "tracemalloc.Traceback.__repr__": ["<builtin>.tuple"], "tracemalloc.Traceback.format": ["<builtin>.reversed", "linecache.getline"], "_tracemalloc._get_object_traceback": [], "tracemalloc.Trace": [], "tracemalloc.Trace.__init__": [], "tracemalloc.Trace.domain": [], "tracemalloc.Trace.size": [], "tracemalloc.Trace.traceback": ["tracemalloc.Traceback.__init__"], "tracemalloc.Trace.__eq__": [], "tracemalloc.Trace.__hash__": ["<builtin>.hash"], "tracemalloc.Trace.__str__": ["tracemalloc._format_size"], "tracemalloc.Trace.__repr__": ["tracemalloc._format_size"], "tracemalloc._Traces": [], "tracemalloc._Traces.__init__": [], "tracemalloc._Traces.__len__": ["<builtin>.len"], "tracemalloc._Traces.__getitem__": ["<builtin>.tuple", "<builtin>.isinstance", "tracemalloc.Trace.__init__"], "tracemalloc._Traces.__contains__": [], "tracemalloc._Traces.__eq__": [], "tracemalloc._Traces.__repr__": ["<builtin>.len"], "tracemalloc._normalize_filename": [], "tracemalloc.BaseFilter": [], "tracemalloc.BaseFilter.__init__": [], "tracemalloc.BaseFilter._match": [], "tracemalloc.Filter": [], "tracemalloc.Filter.__init__": ["<builtin>.super", "tracemalloc._normalize_filename"], "tracemalloc.Filter.filename_pattern": [], "tracemalloc.Filter._match_frame_impl": ["tracemalloc._normalize_filename"], "tracemalloc.Filter._match_frame": ["tracemalloc.Filter._match_frame_impl"], "tracemalloc.Filter._match_traceback": ["tracemalloc.Filter._match_frame", "tracemalloc.Filter._match_frame_impl", "<builtin>.any"], "tracemalloc.Filter._match": ["tracemalloc.Filter._match_traceback"], "tracemalloc.DomainFilter": [], "tracemalloc.DomainFilter.__init__": ["<builtin>.super"], "tracemalloc.DomainFilter.domain": [], "tracemalloc.DomainFilter._match": [], "tracemalloc.Snapshot": [], "tracemalloc.Snapshot.__init__": ["tracemalloc._Traces.__init__"], "tracemalloc.Snapshot.dump": ["<builtin>.open"], "tracemalloc.Snapshot.load": ["<builtin>.open"], "tracemalloc.Snapshot._filter_trace": ["<builtin>.any"], "tracemalloc.Snapshot.filter_traces": ["tracemalloc.Snapshot.__init__", "tracemalloc.Snapshot._filter_trace", "<builtin>.isinstance", "<builtin>.type", "<builtin>.TypeError"], "tracemalloc.Snapshot._group_by": ["tracemalloc.Statistic.__init__", "tracemalloc.Traceback.__init__", "<builtin>.ValueError"], "tracemalloc.Snapshot.statistics": ["tracemalloc.Snapshot._group_by", "<builtin>.list"], "tracemalloc.Snapshot.compare_to": ["tracemalloc.Snapshot._group_by", "tracemalloc._compare_grouped_stats"], "tracemalloc.take_snapshot": ["tracemalloc.Snapshot.__init__", "_tracemalloc._get_traces", "<builtin>.RuntimeError"], "_tracemalloc._get_traces": [], "_threading_local._localimpl": [], "_threading_local._localimpl.__init__": ["<builtin>.str", "<builtin>.id"], "_threading_local._localimpl.get_dict": ["threading.current_thread", "<builtin>.id"], "_threading_local._localimpl.create_dict": ["threading.current_thread", "_weakref.ref", "<builtin>.id"], "_threading_local._localimpl.create_dict.local_deleted": [], "_threading_local._localimpl.create_dict.thread_deleted": [], "_threading_local._patch": [], "_threading_local.local": [], "_threading_local.local.__new__": ["<builtin>.TypeError", "_threading_local._localimpl.create_dict", "_threading_local._localimpl.__init__", "threading.RLock"], "_threading_local.local.__getattribute__": ["_threading_local._patch"], "_threading_local.local.__setattr__": ["<builtin>.AttributeError", "_threading_local._patch"], "_threading_local.local.__delattr__": ["<builtin>.AttributeError", "_threading_local._patch"], "ssl.create_default_context": ["<builtin>.TypeError", "<builtin>.hasattr", "ssl.SSLContext.load_default_certs", "<builtin>.isinstance"], "urllib.request.HTTPSHandler.__init__": ["urllib.request.AbstractHTTPHandler.__init__"], "urllib.request.build_opener": ["<builtin>.hasattr", "<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.set", "urllib.request.OpenerDirector.__init__", "urllib.request.OpenerDirector.add_handler"], "urllib.request.OpenerDirector.open": ["<builtin>.isinstance", "urllib.request.OpenerDirector._open", "urllib.request.Request.get_method", "sys.audit", "<builtin>.getattr", "urllib.request.Request.__init__"], "urllib.request.install_opener": [], "urllib.request.urlretrieve": ["tempfile.NamedTemporaryFile", "urllib.request.urlopen", "<builtin>.int", "posixpath.normpath", "urllib.parse._splittype", "contextlib.closing.__init__", "<builtin>.len", "<builtin>.open", "ntpath.normpath", "urllib.error.ContentTooShortError.__init__"], "urllib.error.ContentTooShortError.__init__": ["urllib.error.URLError.__init__"], "urllib.request.urlcleanup": [], "urllib.request.request_host": ["urllib.parse.urlparse", "urllib.request.Request.get_header"], "urllib.request.Request.get_header": [], "urllib.request.Request": [], "urllib.request.Request.__init__": ["urllib.request.Request.add_header", "urllib.request.request_host"], "urllib.request.Request.add_header": [], "urllib.request.Request.full_url": ["urllib.request.Request._parse", "urllib.parse.unwrap", "urllib.parse._splittag"], "urllib.request.Request._parse": ["urllib.parse.unquote", "urllib.parse._splittype", "<builtin>.ValueError", "urllib.parse._splithost"], "urllib.request.Request.data": ["urllib.request.Request.remove_header", "urllib.request.Request.has_header"], "urllib.request.Request.has_header": [], "urllib.request.Request.remove_header": [], "urllib.request.Request.get_method": ["<builtin>.getattr"], "urllib.request.Request.get_full_url": [], "urllib.request.Request.set_proxy": [], "urllib.request.Request.has_proxy": [], "urllib.request.Request.add_unredirected_header": [], "urllib.request.Request.header_items": ["<builtin>.list"], "urllib.request.OpenerDirector": [], "urllib.request.OpenerDirector.__init__": [], "urllib.request.OpenerDirector.add_handler": ["<builtin>.hasattr", "<builtin>.dir", "<builtin>.int", "<builtin>.type", "<builtin>.TypeError"], "urllib.request.OpenerDirector.close": [], "urllib.request.OpenerDirector._call_chain": ["<builtin>.getattr"], "urllib.request.OpenerDirector._open": ["urllib.request.OpenerDirector._call_chain"], "urllib.request.OpenerDirector.error": ["urllib.request.OpenerDirector._call_chain"], "urllib.request.BaseHandler": [], "urllib.request.BaseHandler.add_parent": [], "urllib.request.BaseHandler.close": [], "urllib.request.BaseHandler.__lt__": ["<builtin>.hasattr"], "urllib.request.HTTPErrorProcessor": [], "urllib.request.HTTPErrorProcessor.http_response": [], "urllib.request.HTTPDefaultErrorHandler": [], "urllib.request.HTTPDefaultErrorHandler.http_error_default": ["urllib.error.HTTPError.__init__"], "urllib.error.HTTPError.__init__": [], "urllib.request.HTTPRedirectHandler": [], "urllib.request.HTTPRedirectHandler.redirect_request": ["urllib.error.HTTPError.__init__", "urllib.request.Request.__init__"], "urllib.request.HTTPRedirectHandler.http_error_302": ["<builtin>.hasattr", "urllib.parse.urlparse", "urllib.request.HTTPRedirectHandler.redirect_request", "<builtin>.list", "urllib.error.HTTPError.__init__", "urllib.parse.urljoin", "<builtin>.len", "urllib.parse.urlunparse", "urllib.parse.quote"], "urllib.request._parse_proxy": ["urllib.parse._splittype", "urllib.parse._splituser", "<builtin>.ValueError", "urllib.parse._splitpasswd"], "urllib.request.ProxyHandler": [], "urllib.request.ProxyHandler.__init__": ["<builtin>.hasattr", "urllib.request.getproxies_environment", "<builtin>.setattr"], "urllib.request.getproxies_environment": [], "urllib.request.ProxyHandler.__init__.<lambda1>": [], "urllib.request.ProxyHandler.proxy_open": ["urllib.request.proxy_bypass_environment", "urllib.request._parse_proxy", "urllib.parse.unquote", "base64.b64encode"], "urllib.request.proxy_bypass_environment": ["urllib.request.getproxies_environment", "urllib.parse._splitport"], "urllib.request.HTTPPasswordMgr": [], "urllib.request.HTTPPasswordMgr.__init__": [], "urllib.request.HTTPPasswordMgr.add_password": ["<builtin>.tuple", "urllib.request.HTTPPasswordMgr.reduce_uri", "<builtin>.isinstance"], "urllib.request.HTTPPasswordMgr.reduce_uri": ["urllib.parse._splitport", "urllib.parse.urlsplit"], "urllib.request.HTTPPasswordMgr.find_user_password": ["urllib.request.HTTPPasswordMgr.reduce_uri", "urllib.request.HTTPPasswordMgr.is_suburi"], "urllib.request.HTTPPasswordMgr.is_suburi": ["<builtin>.len", "posixpath.commonprefix"], "posixpath.commonprefix": [], "urllib.request.HTTPPasswordMgrWithDefaultRealm": [], "urllib.request.HTTPPasswordMgrWithDefaultRealm.find_user_password": ["urllib.request.HTTPPasswordMgr.find_user_password"], "urllib.request.HTTPPasswordMgrWithPriorAuth": [], "urllib.request.HTTPPasswordMgrWithPriorAuth.__init__": ["<builtin>.super"], "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password": ["urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated", "<builtin>.super"], "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated": ["urllib.request.HTTPPasswordMgr.reduce_uri", "<builtin>.isinstance"], "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated": ["urllib.request.HTTPPasswordMgr.reduce_uri", "urllib.request.HTTPPasswordMgr.is_suburi"], "urllib.request.AbstractBasicAuthHandler": ["re.compile"], "urllib.request.AbstractBasicAuthHandler.__init__": ["urllib.request.HTTPPasswordMgr.__init__"], "urllib.request.AbstractBasicAuthHandler._parse_realm": ["warnings.warn"], "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed": ["urllib.request.AbstractBasicAuthHandler._parse_realm", "urllib.request.AbstractBasicAuthHandler.retry_http_basic_auth", "<builtin>.ValueError"], "urllib.request.AbstractBasicAuthHandler.retry_http_basic_auth": ["base64.b64encode", "urllib.request.HTTPPasswordMgr.find_user_password"], "urllib.request.AbstractBasicAuthHandler.http_request": ["<builtin>.hasattr", "urllib.request.HTTPPasswordMgr.find_user_password", "base64.standard_b64encode"], "urllib.request.AbstractBasicAuthHandler.http_response": ["<builtin>.hasattr"], "urllib.request.HTTPBasicAuthHandler": [], "urllib.request.HTTPBasicAuthHandler.http_error_401": ["urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"], "urllib.request.ProxyBasicAuthHandler": [], "urllib.request.ProxyBasicAuthHandler.http_error_407": ["urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"], "urllib.request.AbstractDigestAuthHandler": [], "urllib.request.AbstractDigestAuthHandler.__init__": ["urllib.request.HTTPPasswordMgr.__init__"], "urllib.request.AbstractDigestAuthHandler.reset_retry_count": [], "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed": ["urllib.error.HTTPError.__init__", "<builtin>.ValueError", "urllib.request.AbstractDigestAuthHandler.retry_http_digest_auth"], "urllib.request.AbstractDigestAuthHandler.retry_http_digest_auth": ["<builtin>.filter", "urllib.request.parse_keqv_list", "urllib.request.parse_http_list", "urllib.request.AbstractDigestAuthHandler.get_authorization"], "urllib.request.parse_http_list": [], "urllib.request.parse_keqv_list": [], "urllib.request.AbstractDigestAuthHandler.get_authorization": ["urllib.request.AbstractDigestAuthHandler.get_cnonce", "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls", "urllib.request.HTTPPasswordMgr.find_user_password", "urllib.request.AbstractDigestAuthHandler.get_entity_digest", "urllib.error.URLError.__init__"], "urllib.request.AbstractDigestAuthHandler.get_cnonce": ["time.ctime"], "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls": ["<builtin>.ValueError"], "urllib.request.AbstractDigestAuthHandler.get_entity_digest": [], "urllib.error.URLError.__init__": [], "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda1>": [], "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda2>": [], "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda3>": ["urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda2>", "urllib.request.AbstractDigestAuthHandler.get_algorithm_impls.<lambda1>"], "urllib.request.HTTPDigestAuthHandler": [], "urllib.request.HTTPDigestAuthHandler.http_error_401": ["urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed", "urllib.parse.urlparse", "urllib.request.AbstractDigestAuthHandler.reset_retry_count"], "urllib.request.ProxyDigestAuthHandler": [], "urllib.request.ProxyDigestAuthHandler.http_error_407": ["urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed", "urllib.request.AbstractDigestAuthHandler.reset_retry_count"], "urllib.request.AbstractHTTPHandler": [], "urllib.request.AbstractHTTPHandler.__init__": [], "urllib.request.AbstractHTTPHandler.set_http_debuglevel": [], "urllib.request.AbstractHTTPHandler._get_content_length": [], "urllib.request.AbstractHTTPHandler.do_request_": ["urllib.request.AbstractHTTPHandler._get_content_length", "<builtin>.isinstance", "<builtin>.str", "urllib.parse._splittype", "<builtin>.TypeError", "urllib.error.URLError.__init__", "urllib.parse._splithost"], "urllib.request.AbstractHTTPHandler.do_open": ["<builtin>.dict", "urllib.error.URLError.__init__"], "urllib.request.HTTPHandler": [], "urllib.request.HTTPHandler.http_open": ["urllib.request.AbstractHTTPHandler.do_open"], "urllib.request.HTTPSHandler": [], "urllib.request.HTTPSHandler.https_open": ["urllib.request.AbstractHTTPHandler.do_open"], "urllib.request.HTTPCookieProcessor": [], "urllib.request.HTTPCookieProcessor.http_request": [], "urllib.request.HTTPCookieProcessor.http_response": [], "urllib.request.UnknownHandler": [], "urllib.request.UnknownHandler.unknown_open": ["urllib.error.URLError.__init__"], "urllib.request.FileHandler": [], "urllib.request.FileHandler.file_open": ["urllib.request.FileHandler.open_local_file", "urllib.request.FileHandler.get_names", "urllib.error.URLError.__init__"], "urllib.request.FileHandler.get_names": ["<builtin>.tuple"], "mimetypes.guess_type": ["mimetypes.init"], "urllib.request._safe_gethostbyname": [], "urllib.response.addinfourl.__init__": ["<builtin>.super"], "urllib.request.FTPHandler": [], "urllib.request.FTPHandler.connect_ftp": ["urllib.request.ftpwrapper.__init__"], "urllib.request.ftpwrapper.__init__": ["urllib.request.ftpwrapper.init", "urllib.request.ftpwrapper.close"], "urllib.request.CacheFTPHandler": [], "urllib.request.CacheFTPHandler.__init__": [], "urllib.request.CacheFTPHandler.setTimeout": [], "urllib.request.CacheFTPHandler.setMaxConns": [], "urllib.request.CacheFTPHandler.connect_ftp": ["time.time", "urllib.request.ftpwrapper.__init__", "urllib.request.CacheFTPHandler.check_cache"], "urllib.request.CacheFTPHandler.check_cache": ["time.time", "<builtin>.len", "<builtin>.min", "<builtin>.list"], "urllib.request.CacheFTPHandler.clear_cache": [], "urllib.request.DataHandler": [], "urllib.request.DataHandler.data_open": ["urllib.response.addinfourl.__init__", "base64.decodebytes", "io.BytesIO", "email.message_from_string", "<builtin>.len", "urllib.parse.unquote_to_bytes"], "urllib.request.url2pathname": ["urllib.parse.unquote"], "urllib.request.pathname2url": ["urllib.parse.quote"], "urllib.request.URLopener": [], "urllib.request.URLopener.__init__": ["urllib.request.getproxies_environment", "warnings.warn", "<builtin>.hasattr"], "urllib.request.URLopener.__del__": ["urllib.request.URLopener.close"], "urllib.request.URLopener.close": ["urllib.request.URLopener.cleanup"], "urllib.request.URLopener.cleanup": [], "urllib.request.URLopener.addheader": [], "urllib.request.URLopener.open": ["<builtin>.hasattr", "urllib.parse.unwrap", "urllib.request.URLopener.open_unknown", "urllib.response.addinfourl.__init__", "urllib.request.URLopener.open", "urllib.parse._to_bytes", "urllib.parse._splittype", "<builtin>.getattr", "urllib.parse.quote", "urllib.request.URLopener.open_unknown_proxy", "urllib.parse._splithost", "<builtin>.OSError", "sys.exc_info"], "urllib.request.URLopener.open_unknown_proxy": ["urllib.parse._splittype", "<builtin>.OSError"], "urllib.request.URLopener.open_unknown": ["urllib.parse._splittype", "<builtin>.OSError"], "urllib.request.URLopener.retrieve": ["urllib.request.URLopener.open_local_file", "urllib.parse.unwrap", "tempfile._TemporaryFileWrapper.close", "urllib.request.URLopener.open", "<builtin>.len", "nturl2path.url2pathname", "tempfile.mkstemp", "urllib.response.addinfo.info", "urllib.response.addclosehook.close", "os.fdopen", "urllib.error.ContentTooShortError.__init__", "<builtin>.int", "urllib.parse._to_bytes", "urllib.parse._splitquery", "urllib.parse._splithost", "urllib.parse._splitattr", "urllib.parse._splittype", "ntpath.splitext", "posixpath.splitext"], "urllib.response.addinfo.info": [], "urllib.request.URLopener._open_generic_http": ["urllib.request.proxy_bypass_environment", "urllib.request.URLopener.http_error", "<builtin>.isinstance", "urllib.response.addinfourl.__init__", "urllib.parse._splittype", "base64.b64encode", "urllib.parse.unquote", "urllib.parse._splituser", "urllib.error.URLError.__init__", "urllib.request.URLopener._https_connection", "urllib.parse._splithost", "<builtin>.OSError"], "urllib.request.URLopener._https_connection": [], "urllib.request.URLopener.http_error": ["<builtin>.hasattr", "<builtin>.getattr", "urllib.request.URLopener.http_error_default"], "urllib.request.URLopener.open_http": ["urllib.request.URLopener._open_generic_http"], "urllib.request.URLopener.http_error_default": ["urllib.error.HTTPError.__init__"], "urllib.request.URLopener.open_https": ["urllib.request.URLopener._open_generic_http"], "urllib.request.URLopener.open_file": ["<builtin>.ValueError", "urllib.request.URLopener.open_local_file", "<builtin>.isinstance", "urllib.error.URLError.__init__"], "urllib.request.localhost": [], "urllib.request.thishost": ["<builtin>.tuple"], "urllib.request.URLopener.open_data": ["time.time", "<builtin>.isinstance", "time.gmtime", "urllib.response.addinfourl.__init__", "base64.decodebytes", "time.strftime", "email.message_from_string", "<builtin>.len", "urllib.parse.unquote", "urllib.error.URLError.__init__", "<builtin>.OSError", "io.StringIO"], "urllib.request.FancyURLopener": [], "urllib.request.FancyURLopener.__init__": ["urllib.request.URLopener.__init__"], "urllib.request.FancyURLopener.http_error_default": ["urllib.response.addinfourl.__init__"], "urllib.request.FancyURLopener.http_error_302": ["<builtin>.hasattr", "urllib.request.FancyURLopener.redirect_internal", "urllib.request.FancyURLopener.http_error_default"], "urllib.request.FancyURLopener.redirect_internal": ["urllib.parse.urljoin", "urllib.parse.urlparse", "urllib.request.URLopener.open", "urllib.error.HTTPError.__init__"], "urllib.request.FancyURLopener.http_error_301": ["urllib.request.FancyURLopener.http_error_302"], "urllib.request.FancyURLopener.http_error_303": ["urllib.request.FancyURLopener.http_error_302"], "urllib.request.FancyURLopener.http_error_307": ["urllib.request.FancyURLopener.http_error_302", "urllib.request.FancyURLopener.http_error_default"], "urllib.request.FancyURLopener.http_error_401": ["re.match", "<builtin>.getattr", "urllib.request.URLopener.http_error_default"], "urllib.request.FancyURLopener.http_error_407": ["re.match", "<builtin>.getattr", "urllib.request.URLopener.http_error_default"], "urllib.request.FancyURLopener.retry_proxy_http_basic_auth": ["urllib.parse._splittype", "urllib.request.URLopener.open", "urllib.parse.quote", "urllib.request.FancyURLopener.get_user_passwd", "urllib.parse._splithost"], "urllib.request.FancyURLopener.get_user_passwd": ["urllib.request.FancyURLopener.prompt_user_passwd"], "urllib.request.FancyURLopener.retry_proxy_https_basic_auth": ["urllib.parse._splittype", "urllib.request.URLopener.open", "urllib.parse.quote", "urllib.request.FancyURLopener.get_user_passwd", "urllib.parse._splithost"], "urllib.request.FancyURLopener.retry_http_basic_auth": ["urllib.parse._splithost", "urllib.parse.quote", "urllib.request.URLopener.open", "urllib.request.FancyURLopener.get_user_passwd"], "urllib.request.FancyURLopener.retry_https_basic_auth": ["urllib.parse._splithost", "urllib.parse.quote", "urllib.request.URLopener.open", "urllib.request.FancyURLopener.get_user_passwd"], "<builtin>.input": [], "urllib.request.noheaders": ["email.message_from_string"], "urllib.request.ftpwrapper": [], "urllib.request.ftpwrapper.close": ["urllib.request.ftpwrapper.real_close"], "ftplib.FTP.__init__": ["ftplib.FTP.connect", "ftplib.FTP.login"], "ftplib.FTP.connect": ["ftplib.FTP.getresp", "sys.audit"], "ftplib.FTP.login": ["ftplib.FTP.sendcmd"], "ftplib.FTP.cwd": ["ftplib.FTP.voidcmd"], "urllib.request.ftpwrapper.endtransfer": [], "ftplib.FTP.voidcmd": ["ftplib.FTP.putcmd", "ftplib.FTP.voidresp"], "ftplib.FTP.ntransfercmd": ["ftplib.FTP.sendcmd", "ftplib.FTP.getresp", "ftplib.FTP.makepasv", "ftplib.FTP.makeport", "ftplib.parse150"], "ftplib.FTP.pwd": ["ftplib.FTP.voidcmd", "ftplib.parse257"], "urllib.response.addclosehook.__init__": ["<builtin>.super"], "urllib.request.ftpwrapper.real_close": ["urllib.request.ftpwrapper.endtransfer", "ftplib.FTP.close", "urllib.request.ftperrors"], "urllib.request.ftpwrapper.file_close": ["urllib.request.ftpwrapper.real_close", "urllib.request.ftpwrapper.endtransfer"], "ftplib.FTP.close": [], "urllib.request._proxy_bypass_macosx_sysconf.ip2num": ["<builtin>.len", "<builtin>.map", "<builtin>.list"], "urllib.request.proxy_bypass_macosx_sysconf": ["urllib.request._proxy_bypass_macosx_sysconf"], "urllib.request.getproxies_macosx_sysconf": [], "urllib.request.proxy_bypass": ["urllib.request.proxy_bypass_environment", "urllib.request.getproxies_environment", "urllib.request.proxy_bypass_registry", "urllib.request.proxy_bypass_macosx_sysconf"], "urllib.request.getproxies": ["urllib.request.getproxies_environment", "urllib.request.getproxies_macosx_sysconf", "urllib.request.getproxies_registry"], "urllib.request.getproxies_registry": ["<builtin>.str", "winreg.QueryValueEx", "winreg.OpenKey", "re.match"], "winreg.OpenKey": [], "winreg.QueryValueEx": [], "urllib.request.proxy_bypass_registry": ["winreg.QueryValueEx", "<builtin>.str", "re.match", "winreg.OpenKey", "urllib.parse._splitport"], "getpass.GetPassWarning": [], "getpass.unix_getpass": ["<builtin>.hasattr", "io.TextIOWrapper", "contextlib._BaseExitStack.__init__", "sys.stderr.flush", "sys.stdin.flush", "sys.stdin.write", "sys.stderr.write", "getpass._raw_input", "getpass.fallback_getpass", "io.FileIO", "sys.stdin.fileno"], "io.FileIO": [], "getpass.fallback_getpass": ["<builtin>.print", "getpass._raw_input", "warnings.warn"], "getpass._raw_input": ["sys.stderr.flush", "sys.stdin.flush", "<builtin>.str", "sys.stderr.write", "sys.stdin.readline", "sys.stdin.write"], "sys.stdin.flush": [], "sys.stdin.write": [], "getpass.win_getpass": ["getpass.fallback_getpass", "msvcrt.putwch", "msvcrt.getwch"], "msvcrt.putwch": [], "msvcrt.getwch": [], "getpass.getuser": ["pwd.getpwuid"], "ssl.<lambda1>": [], "ssl.<lambda2>": [], "ssl.<lambda3>": [], "ssl.<lambda4>": [], "ssl.<lambda5>": [], "ssl.<lambda6>": [], "ssl.TLSVersion": [], "ssl._TLSContentType": [], "ssl._TLSAlertType": [], "ssl._TLSMessageType": [], "ssl._dnsname_match": [], "ssl._inet_paton": ["<builtin>.ValueError"], "ssl._ipaddress_match": ["ssl._inet_paton"], "ssl.match_hostname": ["ssl._inet_paton", "<builtin>.map", "<builtin>.ValueError", "ssl._ipaddress_match", "<builtin>.len", "ssl._dnsname_match"], "ssl.get_default_verify_paths": ["posixpath.isdir", "posixpath.isfile", "ntpath.isdir", "ntpath.isfile"], "ssl._ASN1Object": [], "ssl._ASN1Object.__new__": ["<builtin>.super"], "ssl._ASN1Object.fromnid": ["<builtin>.super"], "ssl._ASN1Object.fromname": ["<builtin>.super"], "ssl.Purpose": [], "ssl.SSLContext": ["<builtin>.hasattr"], "ssl.SSLContext.__new__": [], "ssl.SSLContext._encode_hostname": ["<builtin>.isinstance"], "ssl.SSLContext.wrap_socket": ["ssl.SSLSocket._create"], "ssl.SSLSocket._create": ["<builtin>.dict", "ssl.SSLContext._encode_hostname", "<builtin>.ValueError", "<builtin>.NotImplementedError", "<builtin>.super"], "ssl.SSLContext.wrap_bio": ["ssl.SSLContext._encode_hostname", "ssl.SSLObject._create"], "ssl.SSLObject._create": [], "ssl.SSLContext.set_npn_protocols": ["<builtin>.bytearray", "<builtin>.bytes", "<builtin>.len"], "ssl.SSLContext.set_servername_callback": ["<builtin>.callable", "<builtin>.TypeError"], "ssl.SSLContext.set_servername_callback.shim_cb": ["ssl.SSLContext._encode_hostname"], "ssl.SSLContext.set_alpn_protocols": ["<builtin>.bytearray", "<builtin>.bytes", "<builtin>.len"], "ssl.SSLContext._load_windows_store_certs": ["<builtin>.bytearray", "warnings.warn"], "ssl.SSLContext.load_default_certs": ["<builtin>.TypeError", "ssl.SSLContext._load_windows_store_certs", "<builtin>.isinstance"], "ssl.SSLContext.minimum_version": ["<builtin>.super"], "ssl.SSLContext.maximum_version": ["<builtin>.super"], "ssl.SSLContext.options": ["<builtin>.super"], "ssl.SSLContext.hostname_checks_common_name": [], "ssl.SSLContext._msg_callback": ["<builtin>.hasattr", "<builtin>.TypeError", "<builtin>.super"], "ssl.SSLContext._msg_callback.inner": [], "ssl.SSLContext.protocol": ["<builtin>.super"], "ssl.SSLContext.verify_flags": ["<builtin>.super"], "ssl.SSLContext.verify_mode": ["<builtin>.super"], "ssl._create_unverified_context": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "ssl.SSLContext.load_default_certs"], "ssl.SSLObject": [], "ssl.SSLObject.__init__": ["<builtin>.TypeError"], "ssl.SSLObject.context": [], "ssl.SSLObject.session": [], "ssl.SSLObject.session_reused": [], "ssl.SSLObject.server_side": [], "ssl.SSLObject.server_hostname": [], "ssl.SSLObject.read": [], "ssl.SSLObject.write": [], "ssl.SSLObject.getpeercert": [], "ssl.SSLObject.selected_npn_protocol": [], "ssl.SSLObject.selected_alpn_protocol": [], "ssl.SSLObject.cipher": [], "ssl.SSLObject.shared_ciphers": [], "ssl.SSLObject.compression": [], "ssl.SSLObject.pending": [], "ssl.SSLObject.do_handshake": [], "ssl.SSLObject.unwrap": [], "ssl.SSLObject.get_channel_binding": [], "ssl.SSLObject.version": [], "ssl.SSLObject.verify_client_post_handshake": [], "ssl._sslcopydoc": ["<builtin>.getattr"], "ssl.SSLSocket": ["ssl._sslcopydoc"], "ssl.SSLSocket.__init__": ["<builtin>.TypeError"], "ssl.SSLSocket.context": [], "ssl.SSLSocket.session": [], "ssl.SSLSocket.session_reused": [], "ssl.SSLSocket.dup": ["<builtin>.NotImplementedError"], "ssl.SSLSocket._checkClosed": [], "ssl.SSLSocket._check_connected": [], "ssl.SSLSocket.read": ["ssl.SSLSocket._checkClosed", "<builtin>.ValueError"], "ssl.SSLSocket.write": ["ssl.SSLSocket._checkClosed", "<builtin>.ValueError"], "ssl.SSLSocket.getpeercert": ["ssl.SSLSocket._checkClosed", "ssl.SSLSocket._check_connected"], "ssl.SSLSocket.selected_npn_protocol": ["ssl.SSLSocket._checkClosed"], "ssl.SSLSocket.selected_alpn_protocol": ["ssl.SSLSocket._checkClosed"], "ssl.SSLSocket.cipher": ["ssl.SSLSocket._checkClosed"], "ssl.SSLSocket.shared_ciphers": ["ssl.SSLSocket._checkClosed"], "ssl.SSLSocket.compression": ["ssl.SSLSocket._checkClosed"], "ssl.SSLSocket.send": ["ssl.SSLSocket._checkClosed", "<builtin>.ValueError", "<builtin>.super"], "ssl.SSLSocket.sendto": ["ssl.SSLSocket._checkClosed", "<builtin>.ValueError", "<builtin>.super"], "ssl.SSLSocket.sendmsg": ["<builtin>.NotImplementedError"], "ssl.SSLSocket.sendall": ["<builtin>.memoryview", "ssl.SSLSocket._checkClosed", "<builtin>.ValueError", "<builtin>.len", "ssl.SSLSocket.send", "<builtin>.super"], "ssl.SSLSocket.sendfile": ["<builtin>.super", "socket.socket._sendfile_use_send"], "ssl.SSLSocket.recv": ["ssl.SSLSocket._checkClosed", "ssl.SSLSocket.read", "<builtin>.ValueError", "<builtin>.super"], "ssl.SSLSocket.recv_into": ["ssl.SSLSocket.read", "ssl.SSLSocket._checkClosed", "<builtin>.ValueError", "<builtin>.len", "<builtin>.super"], "ssl.SSLSocket.recvfrom": ["ssl.SSLSocket._checkClosed", "<builtin>.ValueError", "<builtin>.super"], "ssl.SSLSocket.recvfrom_into": ["ssl.SSLSocket._checkClosed", "<builtin>.ValueError", "<builtin>.super"], "ssl.SSLSocket.recvmsg": ["<builtin>.NotImplementedError"], "ssl.SSLSocket.recvmsg_into": ["<builtin>.NotImplementedError"], "ssl.SSLSocket.pending": ["ssl.SSLSocket._checkClosed"], "ssl.SSLSocket.shutdown": ["ssl.SSLSocket._checkClosed", "<builtin>.super"], "ssl.SSLSocket.unwrap": ["<builtin>.str", "<builtin>.ValueError"], "ssl.SSLSocket.verify_client_post_handshake": ["<builtin>.str", "<builtin>.ValueError"], "ssl.SSLSocket._real_close": ["<builtin>.super"], "ssl.SSLSocket.do_handshake": ["ssl.SSLSocket._check_connected"], "ssl.SSLSocket._real_connect": ["<builtin>.ValueError", "<builtin>.super", "ssl.SSLSocket.do_handshake"], "ssl.SSLSocket.connect": ["ssl.SSLSocket._real_connect"], "ssl.SSLSocket.connect_ex": ["ssl.SSLSocket._real_connect"], "ssl.SSLSocket.accept": ["<builtin>.super"], "ssl.SSLSocket.get_channel_binding": ["<builtin>.ValueError"], "ssl.SSLSocket.version": [], "ssl.wrap_socket": ["ssl.SSLContext.wrap_socket", "<builtin>.ValueError"], "time.strptime": [], "ssl.DER_cert_to_PEM_cert": ["<builtin>.str", "<builtin>.range", "base64.standard_b64encode", "<builtin>.len"], "ssl.PEM_cert_to_DER_cert": ["<builtin>.len", "base64.decodebytes", "<builtin>.ValueError"], "ssl.get_server_certificate": ["ssl.DER_cert_to_PEM_cert", "ssl._create_unverified_context", "socket.create_connection"], "ssl.get_protocol_name": [], "http.client._encode": ["<builtin>.UnicodeEncodeError"], "<builtin>.UnicodeEncodeError": [], "http.client.HTTPMessage": [], "http.client.HTTPMessage.getallmatchingheaders": ["<builtin>.len"], "http.client.parse_headers": ["http.client.LineTooLong.__init__", "<builtin>.len"], "http.client.LineTooLong.__init__": [], "http.client.HTTPResponse": [], "http.client.HTTPResponse.__init__": [], "http.client.HTTPResponse._read_status": ["http.client.BadStatusLine.__init__", "http.client.RemoteDisconnected.__init__", "<builtin>.int", "<builtin>.str", "<builtin>.print", "http.client.LineTooLong.__init__", "<builtin>.len", "http.client.HTTPResponse._close_conn", "<builtin>.repr"], "http.client.RemoteDisconnected.__init__": ["http.client.BadStatusLine.__init__"], "http.client.HTTPResponse._close_conn": [], "http.client.BadStatusLine.__init__": ["<builtin>.repr"], "http.client.HTTPResponse.begin": ["<builtin>.int", "<builtin>.print", "http.client.UnknownProtocol.__init__", "http.client.LineTooLong.__init__", "<builtin>.len", "http.client.HTTPResponse._read_status", "http.client.parse_headers", "http.client.HTTPResponse._check_close"], "http.client.UnknownProtocol.__init__": [], "http.client.HTTPResponse._check_close": [], "http.client.HTTPResponse.readable": [], "http.client.HTTPResponse.isclosed": [], "http.client.HTTPResponse.readinto": ["http.client.HTTPResponse._close_conn", "<builtin>.len", "<builtin>.memoryview", "http.client.HTTPResponse._readinto_chunked"], "http.client.HTTPResponse._readall_chunked": ["http.client.HTTPResponse._safe_read", "http.client.HTTPResponse._get_chunk_left", "http.client.IncompleteRead.__init__"], "http.client.HTTPResponse._safe_read": ["<builtin>.len", "http.client.IncompleteRead.__init__"], "http.client.HTTPResponse._readinto_chunked": ["<builtin>.memoryview", "http.client.HTTPResponse._safe_readinto", "<builtin>.len", "http.client.HTTPResponse._get_chunk_left", "<builtin>.bytes", "http.client.IncompleteRead.__init__"], "http.client.HTTPResponse._read_next_chunk_size": ["http.client.LineTooLong.__init__", "<builtin>.len", "<builtin>.int", "http.client.HTTPResponse._close_conn"], "http.client.HTTPResponse._read_and_discard_trailer": ["http.client.LineTooLong.__init__", "<builtin>.len"], "http.client.HTTPResponse._get_chunk_left": ["http.client.HTTPResponse._close_conn", "http.client.HTTPResponse._safe_read", "http.client.HTTPResponse._read_next_chunk_size", "http.client.IncompleteRead.__init__", "http.client.HTTPResponse._read_and_discard_trailer"], "http.client.IncompleteRead.__init__": [], "http.client.HTTPResponse._safe_readinto": ["<builtin>.len", "<builtin>.bytes", "http.client.IncompleteRead.__init__"], "http.client.HTTPResponse.read1": ["http.client.HTTPResponse._close_conn", "<builtin>.len", "http.client.HTTPResponse._read1_chunked"], "http.client.HTTPResponse._read1_chunked": ["<builtin>.len", "http.client.HTTPResponse._get_chunk_left", "http.client.IncompleteRead.__init__"], "http.client.HTTPResponse.peek": ["http.client.HTTPResponse._peek_chunked"], "http.client.HTTPResponse._peek_chunked": ["http.client.HTTPResponse._get_chunk_left"], "http.client.HTTPResponse.fileno": [], "http.client.HTTPResponse.getheader": ["<builtin>.hasattr", "<builtin>.isinstance"], "http.client.HTTPResponse.getheaders": ["<builtin>.list"], "http.client.HTTPResponse.__iter__": [], "http.client.HTTPResponse.info": [], "http.client.HTTPResponse.geturl": [], "http.client.HTTPResponse.getcode": [], "http.client.HTTPConnection": [], "http.client.HTTPConnection._is_textIO": ["<builtin>.isinstance"], "http.client.HTTPConnection._get_content_length": ["<builtin>.hasattr", "<builtin>.len", "<builtin>.memoryview", "<builtin>.isinstance"], "http.client.HTTPConnection.__init__": ["http.client.HTTPConnection._validate_host", "http.client.HTTPConnection._get_hostport"], "http.client.HTTPConnection._get_hostport": ["<builtin>.int"], "http.client.HTTPConnection._validate_host": [], "http.client.HTTPConnection.set_tunnel": ["<builtin>.RuntimeError", "http.client.HTTPConnection._get_hostport"], "http.client.HTTPConnection.set_debuglevel": [], "http.client.HTTPConnection._tunnel": ["http.client.HTTPConnection.close", "<builtin>.print", "http.client.HTTPConnection.send", "http.client.HTTPResponse.__init__", "<builtin>.len", "http.client.LineTooLong.__init__", "http.client.HTTPResponse._read_status", "<builtin>.OSError"], "http.client.HTTPConnection.send": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.print", "http.client.HTTPConnection.connect", "<builtin>.type", "<builtin>.TypeError", "<builtin>.repr", "http.client.HTTPConnection._is_textIO"], "http.client.HTTPConnection.close": ["http.client.HTTPResponse.close"], "http.client.HTTPConnection.connect": ["http.client.HTTPConnection._tunnel"], "http.client.HTTPConnection._output": [], "http.client.HTTPConnection._read_readable": ["<builtin>.print", "http.client.HTTPConnection._is_textIO"], "http.client.HTTPConnection._send_output": ["<builtin>.hasattr", "<builtin>.memoryview", "<builtin>.print", "http.client.HTTPConnection._read_readable", "<builtin>.type", "http.client.HTTPConnection.send", "<builtin>.TypeError", "<builtin>.len", "<builtin>.iter"], "http.client.HTTPConnection.putrequest": ["http.client.HTTPConnection._validate_path", "urllib.parse.urlsplit", "http.client.HTTPConnection.putheader", "http.client.HTTPConnection._encode_request", "http.client.HTTPResponse.isclosed", "http.client.HTTPConnection._output"], "http.client.HTTPConnection._validate_path": [], "http.client.HTTPConnection._encode_request": [], "http.client.HTTPConnection.putheader": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.str", "<builtin>.ValueError", "<builtin>.list", "<builtin>.enumerate", "http.client.HTTPConnection._output"], "http.client.HTTPConnection.endheaders": ["http.client.HTTPConnection._send_output"], "http.client.HTTPConnection.request": ["http.client.HTTPConnection._send_request"], "http.client.HTTPConnection._send_request": ["http.client._encode", "http.client.HTTPConnection.endheaders", "<builtin>.isinstance", "<builtin>.print", "<builtin>.frozenset", "<builtin>.str", "http.client.HTTPConnection.putrequest", "http.client.HTTPConnection.putheader", "http.client.HTTPConnection._get_content_length"], "http.client.HTTPConnection.getresponse": ["http.client.HTTPConnection.close", "http.client.HTTPResponse.begin", "http.client.HTTPResponse.__init__", "http.client.HTTPResponse.isclosed", "http.client.HTTPResponse.close"], "http.client.HTTPSConnection": [], "http.client.HTTPSConnection.connect": ["<builtin>.super"], "http.client.HTTPException": [], "http.client.NotConnected": [], "http.client.InvalidURL": [], "http.client.UnknownProtocol": [], "http.client.UnknownTransferEncoding": [], "http.client.UnimplementedFileMode": [], "http.client.IncompleteRead": [], "http.client.IncompleteRead.__repr__": ["<builtin>.len"], "http.client.ImproperConnectionState": [], "http.client.CannotSendRequest": [], "http.client.CannotSendHeader": [], "http.client.ResponseNotReady": [], "http.client.BadStatusLine": [], "http.client.LineTooLong": [], "http.client.RemoteDisconnected": [], "http.HTTPStatus": [], "http.HTTPStatus.__new__": [], "mimetypes.MimeTypes": [], "mimetypes.MimeTypes.__init__": ["mimetypes.MimeTypes.read", "mimetypes.init", "mimetypes.MimeTypes.add_type"], "mimetypes.init": ["mimetypes.MimeTypes.read", "mimetypes.MimeTypes.read_windows_registry", "posixpath.isfile", "<builtin>.list", "mimetypes.MimeTypes.__init__", "ntpath.isfile"], "mimetypes.MimeTypes.add_type": [], "mimetypes.MimeTypes.read": ["<builtin>.open", "mimetypes.MimeTypes.readfp"], "mimetypes.MimeTypes.guess_type": ["posixpath.splitext"], "mimetypes.MimeTypes.guess_all_extensions": [], "mimetypes.MimeTypes.guess_extension": ["mimetypes.MimeTypes.guess_all_extensions"], "mimetypes.MimeTypes.readfp": ["<builtin>.len", "<builtin>.range", "mimetypes.MimeTypes.add_type"], "mimetypes.MimeTypes.read_windows_registry": ["mimetypes.MimeTypes.read_windows_registry.enum_types", "winreg.QueryValueEx", "mimetypes.MimeTypes.add_type", "winreg.OpenKey"], "mimetypes.MimeTypes.read_windows_registry.enum_types": ["winreg.EnumKey"], "winreg.EnumKey": [], "mimetypes.guess_all_extensions": ["mimetypes.init"], "mimetypes.guess_extension": ["mimetypes.init"], "mimetypes.add_type": ["mimetypes.init"], "mimetypes.read_mime_types": ["mimetypes.MimeTypes.__init__", "<builtin>.open", "mimetypes.MimeTypes.readfp"], "mimetypes._default_mime_types": [], "mimetypes._main.usage": ["<builtin>.print", "sys.exit"], "urllib.error.URLError": [], "urllib.error.URLError.__str__": [], "urllib.error.HTTPError": [], "urllib.error.HTTPError.__str__": [], "urllib.error.HTTPError.__repr__": [], "urllib.error.HTTPError.reason": [], "urllib.error.HTTPError.headers": [], "urllib.error.ContentTooShortError": [], "urllib.response.addbase": [], "urllib.response.addbase.__init__": ["<builtin>.super"], "urllib.response.addbase.__repr__": ["<builtin>.id"], "urllib.response.addbase.__enter__": ["<builtin>.ValueError"], "urllib.response.addbase.__exit__": ["urllib.response.addclosehook.close", "tempfile._TemporaryFileWrapper.close"], "urllib.response.addclosehook": [], "urllib.response.addinfo": [], "urllib.response.addinfo.__init__": ["<builtin>.super"], "urllib.response.addinfourl": [], "urllib.response.addinfourl.getcode": [], "urllib.response.addinfourl.geturl": [], "ftplib.Error": [], "ftplib.error_reply": [], "ftplib.error_temp": [], "ftplib.error_perm": [], "ftplib.error_proto": [], "ftplib.FTP": [], "ftplib.FTP.__enter__": [], "ftplib.FTP.__exit__": ["ftplib.FTP.close", "ftplib.FTP.quit"], "ftplib.FTP.quit": ["ftplib.FTP.voidcmd", "ftplib.FTP.close"], "ftplib.FTP.getresp": ["ftplib.FTP.getmultiline", "ftplib.FTP.sanitize", "<builtin>.print"], "ftplib.FTP.getwelcome": ["<builtin>.print", "ftplib.FTP.sanitize"], "ftplib.FTP.sanitize": ["<builtin>.len", "<builtin>.repr"], "ftplib.FTP.set_debuglevel": [], "ftplib.FTP.set_pasv": [], "ftplib.FTP.putline": ["<builtin>.print", "sys.audit", "<builtin>.ValueError", "ftplib.FTP.sanitize"], "ftplib.FTP.putcmd": ["<builtin>.print", "ftplib.FTP.sanitize", "ftplib.FTP.putline"], "ftplib.FTP.getline": ["<builtin>.len", "ftplib.FTP.sanitize", "<builtin>.print"], "ftplib.FTP.getmultiline": ["ftplib.FTP.getline"], "ftplib.FTP.voidresp": ["ftplib.FTP.getresp"], "ftplib.FTP.abort": ["ftplib.FTP.getmultiline", "<builtin>.print", "ftplib.FTP.sanitize"], "ftplib.FTP.sendcmd": ["ftplib.FTP.getresp", "ftplib.FTP.putcmd"], "ftplib.FTP.sendport": ["ftplib.FTP.voidcmd", "<builtin>.repr"], "ftplib.FTP.sendeprt": ["ftplib.FTP.voidcmd", "<builtin>.repr"], "ftplib.FTP.makeport": ["ftplib.FTP.sendport", "ftplib.FTP.sendeprt"], "ftplib.FTP.makepasv": ["ftplib.parse229", "ftplib.FTP.sendcmd", "ftplib.parse227"], "ftplib.parse229": ["<builtin>.int", "<builtin>.len"], "ftplib.FTP.transfercmd": ["ftplib.FTP.ntransfercmd"], "ftplib.FTP.retrbinary": ["<builtin>.isinstance", "ftplib.FTP.transfercmd", "ftplib.FTP.voidresp", "ftplib.FTP.voidcmd", "sys.stdout.write"], "ftplib.FTP.retrlines": ["ftplib.FTP.sendcmd", "<builtin>.isinstance", "<builtin>.print", "ftplib.FTP.transfercmd", "ftplib.FTP.voidresp", "<builtin>.len", "ftplib.print_line", "<builtin>.repr"], "ftplib.print_line": ["<builtin>.print"], "ftplib.FTP.storbinary": ["ftplib.FTP.voidcmd", "ftplib.FTP.transfercmd", "<builtin>.isinstance", "ftplib.FTP.voidresp"], "ftplib.FTP.storlines": ["<builtin>.isinstance", "ftplib.FTP.transfercmd", "ftplib.FTP.voidresp", "ftplib.FTP.voidcmd", "<builtin>.len"], "ftplib.FTP.acct": ["ftplib.FTP.voidcmd"], "ftplib.FTP.nlst": ["ftplib.FTP.retrlines"], "ftplib.FTP.dir": ["<builtin>.type", "ftplib.FTP.retrlines"], "ftplib.FTP.mlsd": ["ftplib.FTP.sendcmd", "ftplib.FTP.retrlines"], "ftplib.FTP.rename": ["ftplib.FTP.voidcmd", "ftplib.FTP.sendcmd"], "ftplib.FTP.delete": ["ftplib.FTP.sendcmd"], "ftplib.FTP.size": ["<builtin>.int", "ftplib.FTP.sendcmd"], "ftplib.FTP.mkd": ["ftplib.FTP.voidcmd", "ftplib.parse257"], "ftplib.parse257": ["<builtin>.len"], "ftplib.FTP.rmd": ["ftplib.FTP.voidcmd"], "ftplib.FTP_TLS": [], "ftplib.FTP_TLS.login": ["ftplib.FTP.login", "<builtin>.isinstance", "ftplib.FTP_TLS.auth"], "ftplib.FTP_TLS.auth": ["ftplib.FTP.voidcmd", "<builtin>.ValueError", "<builtin>.isinstance"], "ftplib.FTP_TLS.ccc": ["ftplib.FTP.voidcmd", "<builtin>.ValueError", "<builtin>.isinstance"], "ftplib.FTP_TLS.prot_p": ["ftplib.FTP.voidcmd"], "ftplib.FTP_TLS.prot_c": ["ftplib.FTP.voidcmd"], "ftplib.FTP_TLS.ntransfercmd": ["ftplib.FTP.ntransfercmd"], "ftplib.FTP_TLS.abort": ["ftplib.FTP.getmultiline"], "ftplib.ftpcp": ["ftplib.parse227"], "netrc.NetrcParseError": [], "netrc.NetrcParseError.__init__": [], "netrc.NetrcParseError.__str__": [], "netrc.netrc": [], "netrc.netrc.__init__": ["posixpath.join", "ntpath.join", "posixpath.expanduser", "netrc.netrc._parse", "ntpath.expanduser", "<builtin>.open"], "netrc.netrc._parse": ["pwd.getpwuid", "<builtin>.len", "netrc.NetrcParseError.__init__", "<builtin>.repr"], "netrc.netrc.authenticators": [], "netrc.netrc.__repr__": [], "shlex.shlex": [], "shlex.shlex.__init__": ["_io.StringIO", "_collections.deque", "<builtin>.isinstance"], "shlex.shlex.punctuation_chars": [], "shlex.shlex.push_token": ["<builtin>.print", "<builtin>.repr"], "shlex.shlex.push_source": ["_io.StringIO", "<builtin>.print", "<builtin>.isinstance"], "shlex.shlex.pop_source": ["<builtin>.print", "sys.stdin.close"], "shlex.shlex.get_token": ["shlex.shlex.push_source", "<builtin>.print", "shlex.shlex.get_token", "shlex.shlex.read_token", "<builtin>.repr", "shlex.shlex.pop_source", "shlex.shlex.sourcehook"], "shlex.shlex.read_token": ["<builtin>.print", "<builtin>.ValueError", "sys.stdin.readline", "<builtin>.repr", "sys.stdin.read"], "shlex.shlex.sourcehook": ["ntpath.dirname", "ntpath.isabs", "<builtin>.isinstance", "posixpath.join", "ntpath.join", "posixpath.dirname", "<builtin>.open", "posixpath.isabs"], "shlex.shlex.error_leader": [], "shlex.shlex.__iter__": [], "shlex.shlex.__next__": ["shlex.shlex.get_token"], "shlex.split": ["shlex.shlex.__init__", "<builtin>.list"], "shlex.join": ["shlex.quote"], "shlex.quote": [], "shlex._print_tokens": ["<builtin>.print", "shlex.shlex.get_token", "<builtin>.repr"], "http.cookiejar._timegm": ["calendar.timegm"], "http.cookiejar.time2isoz": [], "http.cookiejar.time2netscape": [], "http.cookiejar.offset_from_tz_string": ["<builtin>.int"], "http.cookiejar._str2time": ["time.time", "<builtin>.abs", "<builtin>.int", "time.localtime", "http.cookiejar.offset_from_tz_string", "http.cookiejar._timegm"], "http.cookiejar.http2time": ["<builtin>.int", "http.cookiejar._str2time", "<builtin>.float", "http.cookiejar._timegm"], "http.cookiejar.iso2time": ["http.cookiejar._str2time"], "http.cookiejar.unmatched": [], "http.cookiejar.split_header_words": ["http.cookiejar.unmatched", "re.subn", "<builtin>.isinstance"], "http.cookiejar.join_header_words": ["re.search"], "http.cookiejar.strip_quotes": [], "http.cookiejar.parse_ns_headers": ["http.cookiejar.http2time", "<builtin>.enumerate", "http.cookiejar.strip_quotes"], "http.cookiejar.is_HDN": [], "http.cookiejar.domain_match": ["http.cookiejar.is_HDN"], "http.cookiejar.liberal_is_HDN": [], "http.cookiejar.user_domain_match": ["http.cookiejar.liberal_is_HDN"], "http.cookiejar.request_host": [], "http.cookiejar.eff_request_host": ["http.cookiejar.request_host"], "http.cookiejar.request_path": ["http.cookiejar.escape_path"], "http.cookiejar.escape_path": [], "http.cookiejar.request_port": ["<builtin>.int", "http.cookiejar._debug"], "http.cookiejar.uppercase_escaped_char": [], "http.cookiejar.reach": ["http.cookiejar.is_HDN"], "http.cookiejar.is_third_party": ["http.cookiejar.reach", "http.cookiejar.domain_match", "http.cookiejar.request_host"], "http.cookiejar.Cookie": [], "http.cookiejar.Cookie.__init__": ["<builtin>.int", "<builtin>.ValueError", "<builtin>.float"], "http.cookiejar.Cookie.has_nonstandard_attr": [], "http.cookiejar.Cookie.get_nonstandard_attr": [], "http.cookiejar.Cookie.set_nonstandard_attr": [], "http.cookiejar.Cookie.is_expired": ["time.time"], "http.cookiejar.Cookie.__str__": [], "http.cookiejar.Cookie.__repr__": ["<builtin>.getattr", "<builtin>.repr"], "http.cookiejar.CookiePolicy": [], "http.cookiejar.CookiePolicy.set_ok": ["<builtin>.NotImplementedError"], "http.cookiejar.CookiePolicy.return_ok": ["<builtin>.NotImplementedError"], "http.cookiejar.CookiePolicy.domain_return_ok": [], "http.cookiejar.CookiePolicy.path_return_ok": [], "http.cookiejar.DefaultCookiePolicy": [], "http.cookiejar.DefaultCookiePolicy.__init__": ["<builtin>.tuple"], "http.cookiejar.DefaultCookiePolicy.blocked_domains": [], "http.cookiejar.DefaultCookiePolicy.set_blocked_domains": ["<builtin>.tuple"], "http.cookiejar.DefaultCookiePolicy.is_blocked": ["http.cookiejar.user_domain_match"], "http.cookiejar.DefaultCookiePolicy.allowed_domains": [], "http.cookiejar.DefaultCookiePolicy.set_allowed_domains": ["<builtin>.tuple"], "http.cookiejar.DefaultCookiePolicy.is_not_allowed": ["http.cookiejar.user_domain_match"], "http.cookiejar.DefaultCookiePolicy.set_ok": ["<builtin>.getattr", "http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.set_ok_version": ["http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.set_ok_verifiability": ["http.cookiejar.is_third_party", "http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.set_ok_name": ["http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.set_ok_path": ["http.cookiejar.DefaultCookiePolicy.path_return_ok", "http.cookiejar._debug", "http.cookiejar.request_path"], "http.cookiejar.DefaultCookiePolicy.path_return_ok": ["<builtin>.len", "http.cookiejar._debug", "http.cookiejar.request_path"], "http.cookiejar.DefaultCookiePolicy.set_ok_domain": ["http.cookiejar.DefaultCookiePolicy.is_not_allowed", "http.cookiejar.DefaultCookiePolicy.is_blocked", "<builtin>.len", "http.cookiejar.domain_match", "http.cookiejar._debug", "http.cookiejar.eff_request_host"], "http.cookiejar.DefaultCookiePolicy.set_ok_port": ["<builtin>.int", "<builtin>.str", "http.cookiejar.request_port", "http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.return_ok": ["<builtin>.getattr", "http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.return_ok_version": ["http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.return_ok_verifiability": ["http.cookiejar.is_third_party", "http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.return_ok_secure": ["http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.return_ok_expires": ["http.cookiejar._debug"], "http.cookiejar.DefaultCookiePolicy.return_ok_port": ["http.cookiejar.request_port"], "http.cookiejar.DefaultCookiePolicy.return_ok_domain": ["http.cookiejar.domain_match", "http.cookiejar._debug", "http.cookiejar.eff_request_host"], "http.cookiejar.DefaultCookiePolicy.domain_return_ok": ["http.cookiejar.DefaultCookiePolicy.is_blocked", "http.cookiejar.DefaultCookiePolicy.is_not_allowed", "http.cookiejar._debug", "http.cookiejar.eff_request_host"], "http.cookiejar.vals_sorted_by_key": ["<builtin>.map", "<builtin>.sorted"], "http.cookiejar.deepvalues": ["http.cookiejar.deepvalues", "http.cookiejar.vals_sorted_by_key"], "http.cookiejar.Absent": [], "http.cookiejar.CookieJar": ["re.compile"], "http.cookiejar.CookieJar.__init__": ["http.cookiejar.DefaultCookiePolicy.__init__", "threading.RLock"], "http.cookiejar.CookieJar.set_policy": [], "http.cookiejar.CookieJar._cookies_for_domain": ["http.cookiejar.DefaultCookiePolicy.path_return_ok", "http.cookiejar.DefaultCookiePolicy.return_ok", "http.cookiejar.DefaultCookiePolicy.domain_return_ok", "http.cookiejar._debug"], "http.cookiejar.CookieJar._cookies_for_request": ["http.cookiejar.CookieJar._cookies_for_domain"], "http.cookiejar.CookieJar._cookie_attrs": [], "http.cookiejar.CookieJar._cookie_attrs.<lambda1>": ["<builtin>.len"], "http.cookiejar.CookieJar.add_cookie_header": ["time.time", "http.cookiejar.CookieJar._cookie_attrs", "http.cookiejar.CookieJar.clear_expired_cookies", "<builtin>.int", "http.cookiejar._debug", "http.cookiejar.CookieJar._cookies_for_request"], "http.cookiejar.CookieJar.clear_expired_cookies": ["time.time", "http.cookiejar.CookieJar.clear", "http.cookiejar.CookieJar.__iter__"], "http.cookiejar.CookieJar._normalized_cookie_tuples": ["<builtin>.int", "http.cookiejar._debug"], "http.cookiejar.CookieJar._cookie_from_cookie_tuple": ["http.cookiejar.request_port", "http.cookiejar.request_path", "http.cookiejar.escape_path", "<builtin>.int", "re.sub", "http.cookiejar.CookieJar.clear", "<builtin>.len", "<builtin>.bool", "http.cookiejar.eff_request_host", "http.cookiejar._debug", "http.cookiejar.Cookie.__init__"], "http.cookiejar.CookieJar.clear": ["<builtin>.ValueError"], "http.cookiejar.CookieJar._cookies_from_attrs_set": ["http.cookiejar.CookieJar._cookie_from_cookie_tuple", "http.cookiejar.CookieJar._normalized_cookie_tuples"], "http.cookiejar.CookieJar._process_rfc2109_cookies": ["<builtin>.getattr"], "http.cookiejar.CookieJar.make_cookies": ["time.time", "http.cookiejar.CookieJar._cookies_from_attrs_set", "<builtin>.int", "http.cookiejar.CookieJar._process_rfc2109_cookies", "http.cookiejar.parse_ns_headers", "<builtin>.filter", "http.cookiejar._warn_unhandled_exception", "http.cookiejar.split_header_words"], "http.cookiejar.CookieJar.make_cookies.no_matching_rfc2965": [], "http.cookiejar.CookieJar.set_cookie_if_ok": ["time.time", "http.cookiejar.DefaultCookiePolicy.set_ok", "<builtin>.int", "http.cookiejar.CookieJar.set_cookie"], "http.cookiejar.CookieJar.set_cookie": [], "http.cookiejar.CookieJar.extract_cookies": ["http.cookiejar.DefaultCookiePolicy.set_ok", "http.cookiejar.CookieJar.make_cookies", "http.cookiejar.CookieJar.set_cookie", "http.cookiejar._debug"], "http.cookiejar.CookieJar.clear_session_cookies": ["http.cookiejar.CookieJar.clear", "http.cookiejar.CookieJar.__iter__"], "http.cookiejar.CookieJar.__iter__": ["http.cookiejar.deepvalues"], "http.cookiejar.CookieJar.__len__": ["http.cookiejar.CookieJar.__iter__"], "http.cookiejar.CookieJar.__repr__": ["http.cookiejar.CookieJar.__iter__", "<builtin>.repr"], "http.cookiejar.CookieJar.__str__": ["<builtin>.str", "http.cookiejar.CookieJar.__iter__"], "http.cookiejar.LoadError": [], "http.cookiejar.FileCookieJar": [], "http.cookiejar.FileCookieJar.__init__": ["http.cookiejar.CookieJar.__init__", "<builtin>.bool"], "http.cookiejar.FileCookieJar.save": ["<builtin>.NotImplementedError"], "http.cookiejar.FileCookieJar.load": ["<builtin>.open", "<builtin>.ValueError"], "http.cookiejar.FileCookieJar.revert": ["<builtin>.ValueError", "http.cookiejar.FileCookieJar.load"], "http.cookiejar.lwp_cookie_str": ["<builtin>.float", "<builtin>.str", "<builtin>.sorted", "http.cookiejar.join_header_words", "http.cookiejar.time2isoz"], "http.cookiejar.LWPCookieJar": [], "http.cookiejar.LWPCookieJar.as_lwp_str": ["time.time", "http.cookiejar.lwp_cookie_str"], "http.cookiejar.LWPCookieJar.save": ["http.cookiejar.LWPCookieJar.as_lwp_str", "<builtin>.open", "<builtin>.ValueError"], "http.cookiejar.LWPCookieJar._really_load": ["time.time", "http.cookiejar.CookieJar.set_cookie", "http.cookiejar.Cookie.__init__", "http.cookiejar.Cookie.is_expired", "<builtin>.len", "http.cookiejar.iso2time", "http.cookiejar._warn_unhandled_exception", "http.cookiejar.split_header_words"], "http.cookiejar.MozillaCookieJar": ["re.compile"], "http.cookiejar.MozillaCookieJar._really_load": ["time.time", "http.cookiejar.CookieJar.set_cookie", "http.cookiejar.Cookie.is_expired", "http.cookiejar._warn_unhandled_exception", "http.cookiejar.Cookie.__init__"], "http.cookiejar.MozillaCookieJar.save": ["time.time", "<builtin>.str", "<builtin>.open", "<builtin>.ValueError"], "psutil._ppid_map": ["psutil._psaix.Process.ppid", "psutil._pssunos.Process.__init__", "psutil._pslinux.Process.__init__", "psutil._pslinux.Process.ppid", "psutil.pids", "psutil._pswindows.Process.ppid", "psutil._pssunos.Process.ppid", "psutil._psbsd.Process.ppid", "psutil._pswindows.Process.__init__", "psutil._psaix.Process.__init__", "_psosx.Process", "psutil._psbsd.Process.__init__"], "psutil.pids": ["_psosx.pids", "psutil._psaix.pids", "psutil._psbsd.pids", "<builtin>.sorted", "psutil._pslinux.pids", "psutil._pssunos.pids"], "psutil._psaix.Process.__init__": ["_common.get_procfs_path"], "psutil._pswindows.Process.__init__": [], "_psosx.Process": [], "psutil._pssunos.Process.__init__": ["_common.get_procfs_path"], "psutil._pslinux.Process.__init__": ["_common.get_procfs_path"], "psutil._psbsd.Process.__init__": [], "psutil._psbsd.Process.ppid": ["psutil._psbsd.Process.oneshot"], "psutil._psaix.Process.ppid": ["psutil._psaix.Process._proc_basic_info"], "psutil._pslinux.Process.ppid": ["<builtin>.int", "psutil._pslinux.Process._parse_stat_file"], "psutil._pswindows.Process.ppid": ["_common.NoSuchProcess", "_psutil_windows.ppid_map"], "psutil._pssunos.Process.ppid": ["psutil._pssunos.Process._proc_basic_info"], "psutil._assert_pid_not_reused": ["functools.wraps", "_functools.partial"], "psutil._assert_pid_not_reused.wrapper": ["psutil.Process.children", "psutil.Process.kill", "psutil.Process.terminate", "psutil.Process.send_signal", "_common.NoSuchProcess", "psutil.Process.resume", "psutil.Process.suspend"], "_common.NoSuchProcess": [], "psutil.Process.resume": ["psutil._pswindows.Process.resume", "psutil.Process._send_signal"], "psutil.Process.children": ["_psosx.ppid_map", "_psutil_windows.ppid_map", "psutil._pslinux.ppid_map", "psutil.Process.create_time", "psutil.Process.__init__", "collections.defaultdict", "<builtin>.set"], "psutil.Process.kill": ["psutil._pswindows.Process.kill", "psutil.Process._send_signal"], "psutil.Process.suspend": ["psutil._pswindows.Process.suspend", "psutil.Process._send_signal"], "psutil.Process.terminate": ["psutil._pswindows.Process.kill", "psutil.Process._send_signal"], "psutil.Process.send_signal": ["psutil._pswindows.Process.send_signal", "psutil.Process._send_signal"], "psutil._pprint_secs": ["time.time", "<builtin>.int"], "psutil.Process": ["<builtin>.hasattr", "_common.memoize_when_activated", "contextlib.contextmanager", "_common.deprecated_method", "psutil._assert_pid_not_reused"], "psutil.Process._init": ["psutil._pssunos.Process.__init__", "<builtin>.isinstance", "threading.RLock", "psutil._pslinux.Process.__init__", "psutil.Process.create_time", "<builtin>.ValueError", "<builtin>.TypeError", "psutil._pswindows.Process.__init__", "psutil._psaix.Process.__init__", "_common.NoSuchProcess", "_psosx.Process", "psutil._psbsd.Process.__init__"], "psutil.Process.create_time": ["psutil._pslinux.Process.create_time", "psutil._psaix.Process.create_time", "psutil._pswindows.Process.create_time", "psutil._psbsd.Process.create_time", "psutil._pssunos.Process.create_time"], "psutil.Process.__str__": ["psutil._pprint_secs", "psutil.Process.oneshot", "psutil.Process.status", "collections.OrderedDict.__init__", "_collections.OrderedDict.items", "psutil.Process.name"], "psutil.Process.oneshot": ["<builtin>.hasattr", "psutil._pssunos.Process.oneshot_exit", "psutil._psaix.Process.oneshot_exit", "psutil._psbsd.Process.oneshot_enter", "psutil._psaix.Process.oneshot_enter", "psutil._psbsd.Process.oneshot_exit", "psutil._pswindows.Process.oneshot_enter", "psutil._pssunos.Process.oneshot_enter", "psutil._pswindows.Process.oneshot_exit", "psutil._pslinux.Process.oneshot_enter", "psutil._pslinux.Process.oneshot_exit"], "psutil.Process.status": ["psutil._pssunos.Process.status", "psutil._psbsd.Process.status", "psutil._pswindows.Process.status", "psutil._pslinux.Process.status", "psutil._psaix.Process.status"], "psutil.Process.__eq__": ["<builtin>.isinstance"], "psutil.Process.__ne__": [], "psutil.Process.__hash__": ["<builtin>.hash"], "psutil.Process.pid": [], "psutil._psbsd.Process.oneshot_enter": [], "psutil._pswindows.Process.oneshot_enter": [], "psutil._pssunos.Process.oneshot_enter": [], "psutil._pslinux.Process.oneshot_enter": [], "psutil._psaix.Process.oneshot_enter": [], "psutil._psbsd.Process.oneshot_exit": [], "psutil._pssunos.Process.oneshot_exit": [], "psutil._pswindows.Process.oneshot_exit": [], "psutil._psaix.Process.oneshot_exit": [], "psutil._pslinux.Process.oneshot_exit": [], "psutil.Process.ppid": ["psutil._psaix.Process.ppid", "psutil._pslinux.Process.ppid", "psutil._pswindows.Process.ppid", "psutil._pssunos.Process.ppid", "psutil._psbsd.Process.ppid"], "psutil.Process.parents": ["psutil.Process.parent"], "psutil.Process.is_running": ["psutil.Process.__init__"], "_common.memoize_when_activated": [], "psutil._psbsd.Process.name": ["_psutil_bsd.proc_name", "psutil._psbsd.Process.oneshot"], "psutil._pswindows.Process.name": ["psutil._pswindows.Process.exe", "posixpath.basename", "ntpath.basename"], "psutil._psaix.Process.name": ["_psutil_aix.proc_name"], "psutil._pssunos.Process.name": ["psutil._pssunos.Process._proc_name_and_args"], "psutil._pslinux.Process.name": ["_common.decode", "psutil._pslinux.Process._parse_stat_file"], "psutil.Process.cmdline": ["psutil._pswindows.Process.cmdline", "psutil._psaix.Process.cmdline", "psutil._pslinux.Process.cmdline", "psutil._pssunos.Process.cmdline", "psutil._psbsd.Process.cmdline"], "psutil.Process.exe": ["psutil._pswindows.Process.exe", "psutil._pslinux.Process.exe", "psutil._psbsd.Process.exe", "psutil._psaix.Process.exe", "psutil._pssunos.Process.exe", "psutil.Process.exe.guess_it"], "psutil.Process.exe.guess_it": ["<builtin>.hasattr", "logging.handlers.WatchedFileHandler.__init__", "ntpath.isabs", "<builtin>.isinstance", "psutil.Process.cmdline", "logging.handlers.BaseRotatingHandler.__init__", "tarfile.TarFile.__init__", "sys.base_prefix", "posixpath.isfile", "sys.path", "ntpath.isfile", "posixpath.isabs"], "logging.handlers.WatchedFileHandler.__init__": ["logging.FileHandler.__init__", "logging.handlers.WatchedFileHandler._statstream"], "sys.path": [], "sys.base_prefix": [], "logging.handlers.BaseRotatingHandler.__init__": ["logging.FileHandler.__init__"], "psutil._pswindows.Process.exe": ["_common.debug", "_common.AccessDenied", "psutil._pswindows.convert_dos_path", "sys.base_prefix.startswith", "psutil._pswindows.py2_strencode", "_psutil_windows.proc_exe", "sys.path.startswith"], "psutil._psaix.Process.exe": ["posixpath.abspath", "posixpath.join", "ntpath.isabs", "ntpath.join", "posixpath.basename", "posixpath.isfile", "psutil._psaix.Process.cmdline", "ntpath.abspath", "ntpath.basename", "ntpath.isfile", "posixpath.isabs", "psutil._psaix.Process.cwd"], "psutil._pslinux.Process.exe": ["_common.ZombieProcess", "_common.AccessDenied", "psutil._pslinux.pid_exists", "_common.NoSuchProcess", "psutil._pslinux.readlink", "ntpath.lexists", "posixpath.lexists"], "psutil._psbsd.Process.exe": ["_compat.which", "psutil._psbsd.wrap_exceptions_procfs", "psutil._psbsd.Process.cmdline", "_psutil_bsd.proc_exe"], "psutil._pssunos.Process.exe": ["psutil._pssunos.Process.cmdline"], "psutil._pswindows.Process.cmdline": ["_psutil_windows.proc_cmdline", "psutil._pswindows.py2_strencode", "psutil._pswindows.is_permission_err"], "psutil._pslinux.Process.cmdline": ["<builtin>.len", "_common.open_text"], "psutil._pssunos.Process.cmdline": ["psutil._pssunos.Process._proc_name_and_args"], "psutil._psbsd.Process.cmdline": ["_common.ZombieProcess", "_common.NoSuchProcess", "psutil._psbsd.is_zombie", "_psutil_bsd.proc_cmdline", "_psposix.pid_exists"], "psutil._psaix.Process.cmdline": ["_psutil_aix.proc_args"], "psutil._pswindows.Process.status": ["_psutil_windows.proc_is_suspended"], "psutil._pslinux.Process.status": ["psutil._pslinux.Process._parse_stat_file"], "psutil._pssunos.Process.status": ["psutil._pssunos.Process._proc_basic_info"], "psutil._psaix.Process.status": ["psutil._psaix.Process._proc_basic_info"], "psutil._psbsd.Process.status": ["psutil._psbsd.Process.oneshot"], "psutil.Process.username": ["psutil.Process.uids", "<builtin>.str", "psutil._pswindows.Process.username", "<builtin>.ImportError", "pwd.getpwuid"], "psutil.Process.uids": ["psutil._psbsd.Process.uids", "psutil._pssunos.Process.uids", "psutil._psaix.Process.uids", "psutil._pslinux.Process.uids"], "psutil._pswindows.Process.username": ["psutil._pswindows.py2_strencode", "_psutil_windows.proc_username"], "psutil._pslinux.Process.create_time": ["psutil._pslinux.boot_time", "<builtin>.float", "psutil._pslinux.Process._parse_stat_file"], "psutil._psaix.Process.create_time": ["psutil._psaix.Process._proc_basic_info"], "psutil._pswindows.Process.create_time": ["psutil._pswindows.Process._proc_info", "_psutil_windows.proc_times", "psutil._pswindows.is_permission_err"], "psutil._psbsd.Process.create_time": ["psutil._psbsd.Process.oneshot"], "psutil._pssunos.Process.create_time": ["psutil._pssunos.Process._proc_basic_info"], "psutil.Process.cwd": ["psutil._pssunos.Process.cwd", "psutil._psbsd.Process.cwd", "psutil._pslinux.Process.cwd", "psutil._pswindows.Process.cwd", "psutil._psaix.Process.cwd"], "psutil._pssunos.Process.cwd": [], "psutil._psbsd.Process.cwd": ["_psutil_bsd.proc_cwd", "<builtin>.NotImplementedError"], "psutil._psaix.Process.cwd": [], "psutil._pslinux.Process.cwd": ["psutil._pslinux.pid_exists", "_common.NoSuchProcess", "_common.ZombieProcess", "psutil._pslinux.readlink"], "psutil._pswindows.Process.cwd": ["_common.AccessDenied", "_psutil_windows.proc_cwd", "posixpath.normpath", "psutil._pswindows.py2_strencode", "ntpath.normpath"], "psutil.Process.nice": ["psutil._pssunos.Process.nice_get", "psutil.Process.is_running", "psutil._pssunos.Process.nice_set", "psutil._pslinux.Process.nice_get", "psutil._pswindows.Process.nice_get", "psutil._psaix.Process.nice_get", "psutil._pslinux.Process.nice_set", "psutil._pswindows.Process.nice_set", "_common.NoSuchProcess", "psutil._psbsd.Process.nice_get", "psutil._psaix.Process.nice_set", "psutil._psbsd.Process.nice_set"], "psutil._pssunos.Process.nice_get": ["psutil._pssunos.Process._proc_basic_info"], "psutil._pslinux.Process.nice_get": ["_psutil_posix.getpriority"], "psutil._pswindows.Process.nice_get": ["_psutil_windows.proc_priority_get"], "psutil._psbsd.Process.nice_get": ["_psutil_posix.getpriority"], "psutil._psaix.Process.nice_get": ["_psutil_posix.getpriority"], "psutil._pssunos.Process.nice_set": ["_common.AccessDenied", "_psutil_posix.setpriority"], "psutil._pslinux.Process.nice_set": ["_psutil_posix.setpriority"], "psutil._psaix.Process.nice_set": ["_psutil_posix.setpriority"], "psutil._pswindows.Process.nice_set": ["_psutil_windows.proc_priority_set"], "psutil._psbsd.Process.nice_set": ["_psutil_posix.setpriority"], "psutil._psbsd.Process.uids": ["psutil._psbsd.Process.oneshot", "_common.puids"], "psutil._pssunos.Process.uids": ["psutil._pssunos.Process._proc_basic_info", "_common.puids", "psutil._pssunos.Process._proc_cred"], "psutil._psaix.Process.uids": ["psutil._psaix.Process._proc_cred", "_common.puids"], "psutil._pslinux.Process.uids": ["<builtin>.int", "psutil._pslinux.Process._read_status_file", "_common.puids"], "psutil.Process.gids": ["psutil._pslinux.Process.gids", "psutil._psaix.Process.gids", "psutil._psbsd.Process.gids", "psutil._pssunos.Process.gids"], "psutil._psbsd.Process.gids": ["_common.pgids", "psutil._psbsd.Process.oneshot"], "psutil._psaix.Process.gids": ["psutil._psaix.Process._proc_cred", "_common.puids"], "psutil._pslinux.Process.gids": ["<builtin>.int", "psutil._pslinux.Process._read_status_file", "_common.pgids"], "psutil._pssunos.Process.gids": ["psutil._pssunos.Process._proc_basic_info", "_common.puids", "psutil._pssunos.Process._proc_cred"], "psutil.Process.terminal": ["psutil._psbsd.Process.terminal", "psutil._psaix.Process.terminal", "psutil._pslinux.Process.terminal", "psutil._pssunos.Process.terminal"], "psutil._psbsd.Process.terminal": ["_psposix.get_terminal_map", "psutil._psbsd.Process.oneshot"], "psutil._pslinux.Process.terminal": ["<builtin>.int", "_psposix.get_terminal_map", "psutil._pslinux.Process._parse_stat_file"], "psutil._pssunos.Process.terminal": ["psutil._pssunos.Process._assert_alive", "psutil._pssunos.wrap_exceptions", "psutil._pssunos.Process._proc_basic_info"], "psutil._psaix.Process.terminal": ["psutil._psaix.Process._proc_basic_info"], "psutil.Process.num_fds": ["psutil._pslinux.Process.num_fds", "psutil._psbsd.Process._not_implemented", "psutil._pssunos.Process.num_fds", "psutil._psaix.Process.num_fds", "psutil._psbsd.Process.num_fds"], "psutil._pslinux.Process.num_fds": ["<builtin>.len"], "psutil._psaix.Process.num_fds": ["<builtin>.len"], "psutil._psbsd.Process.num_fds": ["psutil._psbsd.Process._assert_alive", "_psutil_bsd.proc_num_fds"], "psutil._psbsd.Process._not_implemented": [], "psutil._pssunos.Process.num_fds": ["<builtin>.len"], "psutil.Process.io_counters": ["psutil._pslinux.Process.io_counters", "psutil._pswindows.Process.io_counters", "psutil._psaix.Process.io_counters", "psutil._psbsd.Process.io_counters"], "psutil._pslinux.Process.io_counters": ["<builtin>.int", "_common.open_binary", "<builtin>.RuntimeError", "<builtin>.ValueError"], "psutil._psaix.Process.io_counters": ["psutil._psaix.pid_exists", "_common.NoSuchProcess", "_psutil_aix.proc_io_counters", "_common.pio"], "psutil._psbsd.Process.io_counters": ["psutil._psbsd.Process.oneshot", "_common.pio"], "psutil._pswindows.Process.io_counters": ["psutil._pswindows.Process._proc_info", "_psutil_windows.proc_io_counters", "psutil._pswindows.is_permission_err"], "psutil.Process.ionice": ["psutil._pslinux.Process.ionice_set", "psutil._pswindows.Process.ionice_set", "psutil._pswindows.Process.ionice_get", "psutil._pslinux.Process.ionice_get", "<builtin>.ValueError"], "psutil._pswindows.Process.ionice_get": ["_psutil_windows.proc_io_priority_get"], "psutil._pslinux.Process.ionice_get": ["_psutil_linux.proc_ioprio_get", "_common.pionice"], "psutil._pswindows.Process.ionice_set": ["<builtin>.TypeError", "_psutil_windows.proc_io_priority_set", "<builtin>.ValueError"], "psutil._pslinux.Process.ionice_set": ["<builtin>.ValueError", "_psutil_linux.proc_ioprio_set"], "psutil.Process.rlimit": ["psutil._psbsd.Process.rlimit", "psutil._pslinux.Process.rlimit"], "psutil._psbsd.Process.rlimit": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.repr", "_psutil_bsd.proc_setrlimit", "_psutil_bsd.proc_getrlimit"], "psutil._pslinux.Process.rlimit": ["_common.ZombieProcess", "psutil._pslinux.prlimit", "psutil._pslinux.pid_exists", "<builtin>.ValueError", "<builtin>.len", "<builtin>.repr"], "psutil.Process.cpu_affinity": ["<builtin>.hasattr", "psutil._psbsd.Process.cpu_affinity_set", "psutil._psbsd.Process.cpu_affinity_get", "<builtin>.tuple", "psutil.Process.cpu_times", "psutil._pslinux.Process._get_eligible_cpus", "<builtin>.list", "<builtin>.len", "<builtin>.range", "<builtin>.sorted", "<builtin>.set", "psutil._pslinux.Process.cpu_affinity_get", "psutil._pslinux.Process.cpu_affinity_set", "psutil._pswindows.Process.cpu_affinity_get", "psutil._pswindows.Process.cpu_affinity_set"], "psutil._pswindows.Process.cpu_affinity_get": ["_psutil_windows.proc_cpu_affinity_get", "psutil._pswindows.Process.cpu_affinity_get.from_bitmask"], "psutil._psbsd.Process.cpu_affinity_get": ["_psutil_bsd.proc_cpu_affinity_get"], "psutil._pslinux.Process.cpu_affinity_get": ["_psutil_linux.proc_cpu_affinity_get"], "psutil._pslinux.Process._get_eligible_cpus": ["<builtin>.int", "<builtin>.list", "<builtin>.len", "<builtin>.range", "psutil._pslinux.per_cpu_times", "psutil._pslinux.Process._read_status_file"], "psutil.Process.cpu_times": ["psutil._pslinux.Process.cpu_times", "psutil._pswindows.Process.cpu_times", "psutil._psbsd.Process.cpu_times", "psutil._psaix.Process.cpu_times", "psutil._pssunos.Process.cpu_times"], "psutil._pslinux.Process.cpu_affinity_set": ["<builtin>.isinstance", "<builtin>.tuple", "psutil._pslinux.Process._get_eligible_cpus", "<builtin>.ValueError", "<builtin>.len", "<builtin>.range", "_psutil_linux.proc_cpu_affinity_set", "psutil._pslinux.per_cpu_times"], "psutil._pswindows.Process.cpu_affinity_set": ["psutil._pswindows.Process.cpu_affinity_set.to_bitmask", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.list", "psutil._pswindows.per_cpu_times", "<builtin>.len", "<builtin>.TypeError", "_psutil_windows.proc_cpu_affinity_set", "_compat.range"], "psutil._psbsd.Process.cpu_affinity_set": ["_psutil_bsd.proc_cpu_affinity_set", "<builtin>.tuple", "<builtin>.ValueError", "<builtin>.len", "<builtin>.range", "psutil._psbsd.per_cpu_times"], "psutil.Process.cpu_num": ["psutil._pssunos.Process.cpu_num", "psutil._pslinux.Process.cpu_num", "psutil._psbsd.Process.cpu_num"], "psutil._pssunos.Process.cpu_num": ["_psutil_sunos.proc_cpu_num"], "psutil._pslinux.Process.cpu_num": ["<builtin>.int", "psutil._pslinux.Process._parse_stat_file"], "psutil._psbsd.Process.cpu_num": ["psutil._psbsd.Process.oneshot"], "psutil.Process.environ": ["psutil._pslinux.Process.environ", "psutil._pswindows.Process.environ", "psutil._psaix.Process.environ", "psutil._pssunos.Process.environ", "psutil._psbsd.Process.environ"], "psutil._pssunos.Process.environ": ["_psutil_sunos.proc_environ"], "psutil._pslinux.Process.environ": ["_common.parse_environ_block", "_common.open_text"], "psutil._pswindows.Process.environ": ["<builtin>.isinstance", "_common.parse_environ_block", "<builtin>.type", "_psutil_windows.proc_environ", "psutil._pswindows.py2_strencode"], "psutil._psbsd.Process.environ": ["_psutil_bsd.proc_environ"], "psutil._psaix.Process.environ": ["_psutil_aix.proc_environ"], "psutil.Process.num_handles": ["psutil._pswindows.Process.num_handles"], "psutil._pswindows.Process.num_handles": ["psutil._pswindows.Process._proc_info", "psutil._pswindows.is_permission_err", "_psutil_windows.proc_num_handles"], "psutil.Process.num_ctx_switches": ["psutil._pssunos.Process.num_ctx_switches", "psutil._psbsd.Process.num_ctx_switches", "psutil._pswindows.Process.num_ctx_switches", "psutil._psaix.Process.num_ctx_switches", "psutil._pslinux.Process.num_ctx_switches"], "psutil._pssunos.Process.num_ctx_switches": ["_psutil_sunos.proc_num_ctx_switches", "_common.pctxsw"], "psutil._psaix.Process.num_ctx_switches": ["_psutil_aix.proc_num_ctx_switches", "_common.pctxsw"], "psutil._psbsd.Process.num_ctx_switches": ["psutil._psbsd.Process.oneshot", "_common.pctxsw"], "psutil._pswindows.Process.num_ctx_switches": ["psutil._pswindows.Process._proc_info", "_common.pctxsw"], "psutil._pslinux.Process.num_ctx_switches": ["<builtin>.int", "psutil._pslinux.Process._read_status_file", "_common.pctxsw", "<builtin>.NotImplementedError"], "psutil.Process.num_threads": ["psutil._pssunos.Process.num_threads", "psutil._pswindows.Process.num_threads", "psutil._psaix.Process.num_threads", "psutil._pslinux.Process.num_threads", "psutil._psbsd.Process.num_threads"], "psutil._pswindows.Process.num_threads": ["psutil._pswindows.Process._proc_info"], "psutil._pssunos.Process.num_threads": ["psutil._pssunos.Process._proc_basic_info"], "psutil._psaix.Process.num_threads": ["psutil._psaix.Process._proc_basic_info"], "psutil._pslinux.Process.num_threads": ["<builtin>.int", "psutil._pslinux.Process._read_status_file"], "psutil._psbsd.Process.num_threads": ["psutil._psbsd.Process.threads", "_psutil_bsd.proc_num_threads", "<builtin>.len"], "psutil.Process.threads": ["psutil._pssunos.Process.threads", "psutil._pslinux.Process.threads", "psutil._psbsd.Process.threads", "psutil._pswindows.Process.threads", "psutil._psaix.Process.threads"], "psutil._pswindows.Process.threads": ["_common.pthread", "_psutil_windows.proc_threads"], "psutil._psbsd.Process.threads": ["psutil._psbsd.Process._assert_alive", "_psutil_bsd.proc_threads", "_common.pthread"], "psutil._pssunos.Process.threads": ["<builtin>.int", "_psutil_sunos.query_process_thread", "_common.pthread", "psutil._pssunos.Process._assert_alive"], "psutil._pslinux.Process.threads": ["psutil._pslinux.Process._assert_alive", "<builtin>.float", "_common.pthread", "<builtin>.int", "_common.open_binary"], "psutil._psaix.Process.threads": ["_psutil_aix.proc_threads", "_common.pthread"], "_psosx.ppid_map": [], "_psutil_windows.ppid_map": [], "psutil._pslinux.ppid_map": ["<builtin>.int", "psutil._pslinux.pids", "_common.open_binary", "_common.get_procfs_path"], "collections.defaultdict": [], "psutil.Process.cpu_percent": ["psutil.Process.cpu_percent.timer", "psutil._pslinux.Process.cpu_times", "psutil._pswindows.Process.cpu_times", "psutil._psbsd.Process.cpu_times", "<builtin>.round", "psutil.cpu_count", "<builtin>.ValueError", "psutil._psaix.Process.cpu_times", "time.sleep", "psutil._pssunos.Process.cpu_times"], "psutil.Process.cpu_percent.timer": [], "psutil._psaix.Process.cpu_times": ["_psutil_aix.proc_cpu_times", "_common.pcputimes"], "psutil._pslinux.Process.cpu_times": ["<builtin>.float", "psutil._pslinux.Process._parse_stat_file"], "psutil._pswindows.Process.cpu_times": ["psutil._pswindows.Process._proc_info", "_common.pcputimes", "_psutil_windows.proc_times", "psutil._pswindows.is_permission_err"], "psutil._psbsd.Process.cpu_times": ["psutil._psbsd.Process.oneshot", "_common.pcputimes"], "psutil._pssunos.Process.cpu_times": ["_psutil_sunos.proc_cpu_times", "_common.pcputimes"], "psutil.Process.memory_info": ["psutil._pslinux.Process.memory_info", "psutil._psbsd.Process.memory_info", "psutil._pssunos.Process.memory_info", "psutil._psaix.Process.memory_info", "psutil._pswindows.Process.memory_info"], "psutil._pslinux.Process.memory_info": ["<builtin>.int", "_common.open_binary"], "psutil._psbsd.Process.memory_info": ["psutil._psbsd.Process.oneshot"], "psutil._pssunos.Process.memory_info": ["psutil._pssunos.Process._proc_basic_info"], "psutil._psaix.Process.memory_info": ["psutil._psaix.Process._proc_basic_info"], "psutil._pswindows.Process.memory_info": ["psutil._pswindows.Process._get_raw_meminfo"], "_common.deprecated_method": [], "psutil.Process.memory_info_ex": ["psutil.Process.memory_info"], "psutil.Process.memory_full_info": ["psutil._pslinux.Process.memory_info", "psutil._psbsd.Process.memory_info", "psutil._pssunos.Process.memory_info", "psutil._psaix.Process.memory_info", "psutil._pswindows.Process.memory_full_info", "psutil._pslinux.Process.memory_full_info"], "psutil._pswindows.Process.memory_full_info": ["psutil._pswindows.Process.memory_info", "psutil._pswindows.getpagesize", "_psutil_windows.proc_memory_uss"], "psutil._pslinux.Process.memory_full_info": ["psutil._pslinux.Process.memory_info", "psutil._pslinux.Process._parse_smaps_rollup", "psutil._pslinux.Process._parse_smaps"], "psutil.Process.memory_percent": ["<builtin>.float", "<builtin>.tuple", "psutil.virtual_memory", "<builtin>.ValueError", "<builtin>.list", "<builtin>.getattr"], "psutil.Process.memory_maps": ["psutil._pslinux.Process.memory_maps", "psutil._pssunos.Process.memory_maps", "<builtin>.map", "_psosx.pmmap_ext", "psutil._psbsd.Process.memory_maps", "_psosx.pmmap_grouped", "psutil._pswindows.Process.memory_maps"], "psutil._pslinux.Process.memory_maps": ["_common.path_exists_strict", "psutil._pslinux.Process._read_smaps_file", "psutil._pslinux.Process.memory_maps.get_blocks", "_common.decode"], "psutil._psbsd.Process.memory_maps": ["_psutil_bsd.proc_memory_maps"], "psutil._pssunos.Process.memory_maps": ["psutil._pssunos.Process.memory_maps.toaddr", "_psutil_sunos.proc_memory_maps", "psutil._pssunos.Process._assert_alive"], "psutil._pswindows.Process.memory_maps": ["psutil._pswindows.convert_dos_path", "psutil._pswindows.py2_strencode", "<builtin>.hex", "psutil._pswindows.convert_oserror", "_psutil_windows.proc_memory_maps"], "psutil.Process.memory_maps.<lambda1>": [], "_psosx.pmmap_grouped": [], "_psosx.pmmap_ext": [], "psutil.Process.open_files": ["psutil._pssunos.Process.open_files", "psutil._psbsd.Process._not_implemented", "psutil._psaix.Process.open_files", "psutil._psbsd.Process.open_files", "psutil._pslinux.Process.open_files", "psutil._pswindows.Process.open_files"], "psutil._psbsd.Process.open_files": ["_common.popenfile", "_psutil_bsd.proc_open_files"], "psutil._pslinux.Process.open_files": ["_common.debug", "psutil._pslinux.Process._assert_alive", "psutil._pslinux.file_flags_to_mode", "sys.base_prefix.startswith", "<builtin>.int", "psutil._pslinux.readlink", "sys.path.startswith", "_common.open_binary", "_common.isfile_strict"], "psutil._pssunos.Process.open_files": ["posixpath.join", "ntpath.join", "ntpath.islink", "<builtin>.int", "posixpath.islink", "psutil._pssunos.Process._assert_alive", "_common.popenfile", "_common.isfile_strict"], "psutil._psaix.Process.open_files": ["<builtin>.int", "<builtin>.str", "_common.NoSuchProcess", "_common.popenfile", "subprocess.Popen.__init__", "re.findall", "subprocess.Popen.communicate"], "psutil._pswindows.Process.open_files": ["_psutil_windows.proc_open_files", "psutil._pswindows.convert_dos_path", "<builtin>.list", "psutil._pswindows.py2_strencode", "_common.popenfile", "<builtin>.set", "_common.isfile_strict"], "psutil.Process.connections": ["psutil._psbsd.Process.connections", "psutil._pslinux.Process.connections", "psutil._psaix.Process.connections", "psutil._pssunos.Process.connections", "psutil._pswindows.Process.connections"], "psutil._pslinux.Process.connections": ["psutil._pslinux.Process._assert_alive", "psutil._pslinux.Connections.retrieve"], "psutil._psbsd.Process.connections": ["_psutil_bsd.net_connections", "<builtin>.ValueError", "_common.conn_to_ntuple", "<builtin>.list", "<builtin>.repr", "_psutil_bsd.proc_connections", "psutil._psbsd.Process._assert_alive"], "psutil._pssunos.Process.connections": ["psutil._pssunos.Process._get_unix_sockets", "_common.pconn", "psutil._pssunos.net_connections"], "psutil._pswindows.Process.connections": ["psutil._pswindows.net_connections"], "psutil._psaix.Process.connections": ["psutil._psaix.net_connections"], "psutil.Process._send_signal": ["_common.ZombieProcess", "_common.AccessDenied", "<builtin>.ValueError", "_common.NoSuchProcess", "psutil.pid_exists"], "_common.ZombieProcess": [], "_common.AccessDenied": [], "psutil._pswindows.Process.send_signal": ["<builtin>.object", "<builtin>.getattr", "<builtin>.ValueError", "_psutil_windows.proc_kill"], "psutil._pswindows.Process.suspend": ["_psutil_windows.proc_suspend_or_resume"], "psutil._pswindows.Process.resume": ["_psutil_windows.proc_suspend_or_resume"], "psutil._pswindows.Process.kill": ["_psutil_windows.proc_kill"], "psutil.Process.wait": ["psutil._pssunos.Process.wait", "psutil._pswindows.Process.wait", "<builtin>.ValueError", "psutil._psaix.Process.wait", "psutil._pslinux.Process.wait", "psutil._psbsd.Process.wait"], "psutil._psbsd.Process.wait": ["_psposix.wait_pid"], "psutil._psaix.Process.wait": ["_psposix.wait_pid"], "psutil._pslinux.Process.wait": ["_psposix.wait_pid"], "psutil._pssunos.Process.wait": ["_psposix.wait_pid"], "psutil._pswindows.Process.wait": ["_common.TimeoutExpired", "<builtin>.min", "<builtin>.int", "_psutil_windows.pid_exists", "<builtin>.getattr", "_psutil_windows.proc_wait", "time.sleep"], "psutil.Popen": [], "psutil.Popen.__init__": ["psutil.Process._init", "subprocess.Popen.__init__"], "psutil.Popen.__dir__": ["<builtin>.dir", "<builtin>.set", "<builtin>.sorted"], "psutil.Popen.__enter__": ["<builtin>.hasattr", "subprocess.Popen.__enter__"], "psutil.Popen.__exit__": ["<builtin>.hasattr", "subprocess.Popen.__exit__", "psutil.Popen.wait"], "psutil.Popen.wait": ["<builtin>.super"], "psutil.Popen.__getattribute__": ["<builtin>.AttributeError"], "_psosx.pids": [], "psutil._psaix.pids": ["<builtin>.int", "_common.get_procfs_path"], "psutil._psbsd.pids": ["psutil._psbsd._pid_0_exists", "_psutil_bsd.pids"], "psutil._pslinux.pids": ["<builtin>.int", "_compat.b", "_common.get_procfs_path"], "psutil._pssunos.pids": ["<builtin>.int", "_compat.b", "_common.get_procfs_path"], "_psosx.pid_exists": [], "psutil._psbsd.pid_exists": ["psutil._psbsd.pids", "_psposix.pid_exists"], "psutil._pslinux.pid_exists": ["<builtin>.int", "<builtin>.ValueError", "_common.get_procfs_path", "psutil._pslinux.pids", "_common.open_binary", "_psposix.pid_exists"], "psutil._psaix.pid_exists": ["posixpath.join", "ntpath.join", "ntpath.exists", "<builtin>.str", "_common.get_procfs_path", "posixpath.exists"], "psutil._pssunos.pid_exists": ["_psposix.pid_exists"], "psutil.process_iter.add": ["psutil.Process.__init__", "psutil.Process.as_dict"], "psutil.process_iter.remove": [], "psutil.wait_procs": ["<builtin>.min", "<builtin>.callable", "<builtin>.ValueError", "<builtin>.list", "<builtin>.TypeError", "<builtin>.len", "psutil.wait_procs.check_gone", "<builtin>.set"], "psutil.wait_procs.check_gone": [], "psutil._pswindows.cpu_count_logical": ["_psutil_windows.cpu_count_logical"], "psutil._psaix.cpu_count_logical": [], "psutil._pssunos.cpu_count_logical": [], "psutil._psbsd.cpu_count_logical": ["_psutil_bsd.cpu_count_logical"], "psutil._pslinux.cpu_count_logical": ["_common.open_text", "_common.open_binary", "_common.get_procfs_path", "re.compile"], "_psosx.cpu_count_logical": [], "psutil._pswindows.cpu_count_cores": ["_psutil_windows.cpu_count_cores"], "_psosx.cpu_count_cores": [], "psutil._psbsd.cpu_count_cores": ["<builtin>.len", "_psutil_bsd.cpu_topology", "psutil._psbsd.cpu_count_logical"], "psutil._pssunos.cpu_count_cores": ["_psutil_sunos.cpu_count_cores"], "psutil._pslinux.cpu_count_cores": ["<builtin>.int", "_common.get_procfs_path", "<builtin>.len", "<builtin>.set", "_common.open_binary", "<builtin>.sum"], "psutil._psaix.cpu_count_cores": ["<builtin>.len", "subprocess.Popen.communicate", "<builtin>.RuntimeError", "subprocess.Popen.__init__"], "psutil.cpu_times": ["psutil._pssunos.cpu_times", "psutil._psbsd.cpu_times", "psutil._psaix.cpu_times", "psutil._psaix.per_cpu_times", "psutil._pssunos.per_cpu_times", "psutil._pslinux.cpu_times", "psutil._pswindows.per_cpu_times", "psutil._pswindows.cpu_times", "_psosx.per_cpu_times", "_psosx.cpu_times", "psutil._pslinux.per_cpu_times", "psutil._psbsd.per_cpu_times"], "psutil._pssunos.cpu_times": ["_psutil_sunos.per_cpu_times", "<builtin>.zip", "<builtin>.sum"], "psutil._psbsd.cpu_times": ["_psutil_bsd.cpu_times"], "psutil._psaix.cpu_times": ["_psutil_aix.per_cpu_times", "<builtin>.zip", "<builtin>.sum"], "psutil._pslinux.cpu_times": ["<builtin>.float", "_common.get_procfs_path", "<builtin>.len", "psutil._pslinux.set_scputimes_ntuple", "_common.open_binary"], "psutil._pswindows.cpu_times": ["<builtin>.zip", "_psutil_windows.per_cpu_times", "_psutil_windows.cpu_times", "<builtin>.sum"], "_psosx.cpu_times": [], "psutil._psaix.per_cpu_times": ["_psutil_aix.per_cpu_times"], "psutil._pssunos.per_cpu_times": ["_psutil_sunos.per_cpu_times"], "psutil._pswindows.per_cpu_times": ["_psutil_windows.per_cpu_times"], "_psosx.per_cpu_times": [], "psutil._pslinux.per_cpu_times": ["<builtin>.float", "_common.get_procfs_path", "<builtin>.len", "psutil._pslinux.set_scputimes_ntuple", "_common.open_binary"], "psutil._psbsd.per_cpu_times": ["<builtin>.NotImplementedError", "psutil._psbsd.cpu_times", "psutil._psbsd.cpu_count_logical", "_psutil_bsd.per_cpu_times"], "psutil._cpu_tot_time": ["<builtin>.getattr", "<builtin>.sum"], "psutil._cpu_busy_time": ["psutil._cpu_tot_time", "<builtin>.getattr"], "psutil._cpu_times_deltas": ["<builtin>.getattr", "_psosx.scputimes", "<builtin>.max"], "_psosx.scputimes": [], "psutil.cpu_percent.calculate": ["psutil._cpu_busy_time", "psutil._cpu_times_deltas", "<builtin>.round", "psutil._cpu_tot_time"], "psutil.cpu_times_percent.calculate": ["psutil._cpu_tot_time", "<builtin>.min", "<builtin>.round", "psutil._cpu_times_deltas", "_psosx.scputimes", "<builtin>.max"], "psutil.cpu_stats": ["psutil._psbsd.cpu_stats", "_psosx.cpu_stats", "psutil._psaix.cpu_stats", "psutil._pssunos.cpu_stats", "psutil._pswindows.cpu_stats", "psutil._pslinux.cpu_stats"], "psutil._psbsd.cpu_stats": ["<builtin>.int", "_common.scpustats", "_psutil_bsd.cpu_stats", "<builtin>.open"], "_psosx.cpu_stats": [], "psutil._psaix.cpu_stats": ["_psutil_aix.cpu_stats", "_common.scpustats"], "psutil._pssunos.cpu_stats": ["_common.scpustats", "_psutil_sunos.cpu_stats"], "psutil._pswindows.cpu_stats": ["_common.scpustats", "_psutil_windows.cpu_stats"], "psutil._pslinux.cpu_stats": ["<builtin>.int", "_common.scpustats", "_common.open_binary", "_common.get_procfs_path"], "psutil._psbsd.cpu_freq": ["<builtin>.float", "<builtin>.int", "_common.scpufreq", "<builtin>.range", "_psutil_bsd.cpu_freq", "psutil._psbsd.cpu_count_logical"], "_psosx.cpu_freq": [], "psutil._pswindows.cpu_freq": ["_common.scpufreq", "<builtin>.float", "_psutil_windows.cpu_freq"], "psutil._pslinux.cpu_freq": ["posixpath.join", "ntpath.join", "psutil._pslinux._cpu_get_cpuinfo_freq", "<builtin>.int", "_common.scpufreq", "<builtin>.NotImplementedError", "<builtin>.len", "<builtin>.enumerate", "_common.bcat"], "_common.scpufreq": [], "_psosx.virtual_memory": [], "psutil._pswindows.virtual_memory": ["_common.usage_percent", "_psutil_windows.virtual_mem"], "psutil._psaix.virtual_memory": ["_psutil_aix.virtual_mem", "_common.usage_percent"], "psutil._psbsd.virtual_memory": ["<builtin>.int", "_common.usage_percent", "<builtin>.open", "_psutil_bsd.virtual_mem"], "psutil._pslinux.virtual_memory": ["<builtin>.int", "warnings.warn", "_common.get_procfs_path", "psutil._pslinux.calculate_avail_vmem", "_common.usage_percent", "<builtin>.len", "_common.open_binary"], "psutil._pssunos.virtual_memory": ["_common.usage_percent"], "psutil._pslinux.swap_memory": ["_common.sswap", "<builtin>.int", "<builtin>.str", "_psutil_linux.linux_sysinfo", "warnings.warn", "_common.get_procfs_path", "_common.usage_percent", "_common.open_binary"], "_psosx.swap_memory": [], "psutil._pswindows.swap_memory": ["_common.usage_percent", "_common.sswap", "<builtin>.min", "_psutil_windows.virtual_mem"], "psutil._pssunos.swap_memory": ["_common.sswap", "<builtin>.int", "<builtin>.RuntimeError", "_common.usage_percent", "subprocess.Popen.__init__", "_psutil_sunos.swap_mem", "subprocess.Popen.communicate"], "psutil._psbsd.swap_memory": ["_common.usage_percent", "_common.sswap", "_psutil_bsd.swap_mem"], "psutil._psaix.swap_memory": ["_common.usage_percent", "_common.sswap", "_psutil_aix.swap_mem"], "psutil._pswindows.disk_usage": ["_psutil_windows.disk_usage", "_common.sdiskusage", "_common.usage_percent", "<builtin>.isinstance"], "_psosx.disk_usage": [], "psutil.disk_partitions.pathconf": [], "psutil._psaix.disk_partitions": ["_common.sdiskpart", "_psutil_aix.disk_partitions", "_psposix.disk_usage"], "psutil._psbsd.disk_partitions": ["_common.sdiskpart", "_psutil_bsd.disk_partitions"], "psutil._pswindows.disk_partitions": ["_common.sdiskpart", "_psutil_windows.disk_partitions"], "_psosx.disk_partitions": [], "psutil._pslinux.disk_partitions": ["_psutil_linux.disk_partitions", "_common.open_text", "posixpath.isfile", "_common.get_procfs_path", "psutil._pslinux.RootFsDeviceFinder.find", "_common.sdiskpart", "<builtin>.set", "ntpath.isfile", "ntpath.realpath", "psutil._pslinux.RootFsDeviceFinder.__init__", "posixpath.realpath"], "psutil._pssunos.disk_partitions": ["_common.sdiskpart", "_common.debug", "_psutil_sunos.disk_partitions", "_psposix.disk_usage"], "_psosx.disk_io_counters": [], "psutil._pslinux.disk_io_counters": ["psutil._pslinux.disk_io_counters.read_sysfs", "ntpath.exists", "psutil._pslinux.disk_io_counters.read_procfs", "_common.get_procfs_path", "posixpath.exists", "<builtin>.NotImplementedError", "psutil._pslinux.is_storage_device"], "_common.wrap_numbers": [], "psutil._pslinux.net_io_counters": ["<builtin>.map", "_common.open_text", "_common.get_procfs_path", "<builtin>.repr"], "_psosx.net_io_counters": [], "psutil._pswindows.net_io_counters": ["psutil._pswindows.py2_strencode", "<builtin>.dict", "_psutil_windows.net_io_counters"], "_common.snetio": [], "psutil.net_connections": ["_psosx.net_connections", "psutil._psbsd.net_connections", "psutil._pssunos.net_connections", "psutil._pslinux.net_connections", "psutil._psaix.net_connections", "psutil._pswindows.net_connections"], "_psosx.net_connections": [], "psutil._psbsd.net_connections": ["_psutil_bsd.net_connections", "psutil._psbsd.Process.connections", "<builtin>.ValueError", "_common.conn_to_ntuple", "<builtin>.list", "psutil._psbsd.pids", "<builtin>.set", "<builtin>.repr", "_common.sconn", "psutil._psbsd.Process.__init__"], "psutil._pssunos.net_connections": ["_common.sockfam_to_enum", "_psutil_sunos.net_connections", "_common.addr", "<builtin>.ValueError", "_common.pconn", "<builtin>.list", "_common.socktype_to_enum", "<builtin>.set", "_common.conn_tmap.copy", "<builtin>.repr", "_common.sconn"], "psutil._pslinux.net_connections": ["psutil._pslinux.Connections.retrieve"], "psutil._psaix.net_connections": ["_common.conn_to_ntuple", "<builtin>.ValueError", "<builtin>.repr", "_psutil_aix.net_connections"], "psutil._pswindows.net_connections": ["_psutil_windows.net_connections", "<builtin>.ValueError", "_common.conn_to_ntuple", "<builtin>.list", "<builtin>.set", "<builtin>.repr"], "_psosx.net_if_addrs": [], "psutil._pswindows.net_if_addrs": ["<builtin>.list", "psutil._pswindows.py2_strencode", "_psutil_windows.net_if_addrs"], "psutil.net_if_addrs.<lambda1>": [], "_common.snicaddr": [], "psutil._pslinux.net_if_stats": ["_common.debug", "psutil._pslinux.net_io_counters", "_psutil_posix.net_if_is_running", "_psutil_posix.net_if_mtu", "_common.snicstats", "_psutil_linux.net_if_duplex_speed"], "psutil._psbsd.net_if_stats": ["<builtin>.hasattr", "_psutil_posix.net_if_is_running", "_psutil_posix.net_if_mtu", "_common.snicstats", "_psutil_posix.net_if_duplex_speed", "_psutil_bsd.net_io_counters", "_common.NicDuplex"], "_psosx.net_if_stats": [], "psutil._psaix.net_if_stats": ["re.search", "_psutil_posix.net_if_addrs", "<builtin>.int", "_common.snicstats", "_psutil_aix.net_if_stats", "subprocess.Popen.__init__", "<builtin>.set", "subprocess.Popen.communicate"], "psutil._pswindows.net_if_stats": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.type", "psutil._pswindows.py2_strencode", "_common.snicstats", "_psutil_windows.net_if_stats", "_common.NicDuplex"], "psutil._pssunos.net_if_stats": ["<builtin>.hasattr", "_common.snicstats", "_common.NicDuplex", "_psutil_sunos.net_if_stats"], "psutil.sensors_temperatures.convert": ["<builtin>.float"], "_psosx.sensors_temperatures": [], "psutil._pslinux.sensors_temperatures": ["_common.debug", "ntpath.dirname", "posixpath.join", "<builtin>.float", "ntpath.join", "posixpath.basename", "<builtin>.dict", "re.compile", "posixpath.dirname", "collections.defaultdict", "_common.cat", "<builtin>.sorted", "<builtin>.set", "ntpath.basename", "_common.bcat"], "psutil._psbsd.sensors_temperatures": ["_psutil_bsd.sensors_cpu_temperature", "_common.shwtemp", "_collections.defaultdict", "<builtin>.range", "psutil._psbsd.cpu_count_logical"], "_common.shwtemp": [], "psutil.sensors_fans": ["psutil._pslinux.sensors_fans", "_psosx.sensors_fans"], "_psosx.sensors_fans": [], "psutil._pslinux.sensors_fans": ["_common.debug", "ntpath.dirname", "posixpath.join", "ntpath.join", "<builtin>.dict", "<builtin>.int", "posixpath.dirname", "collections.defaultdict", "_common.cat", "<builtin>.sorted", "<builtin>.set", "_common.bcat", "_common.sfan"], "psutil._psbsd.sensors_battery": ["_psutil_bsd.sensors_battery", "_common.sbattery"], "psutil._pswindows.sensors_battery": ["_psutil_windows.sensors_battery", "<builtin>.bool", "_common.sbattery"], "_psosx.sensors_battery": [], "psutil._pslinux.sensors_battery": ["posixpath.join", "ntpath.join", "<builtin>.int", "_common.cat", "<builtin>.sorted", "psutil._pslinux.sensors_battery.multi_bcat", "<builtin>.object", "_common.sbattery"], "psutil._psbsd.boot_time": ["_psutil_bsd.boot_time"], "psutil._pssunos.boot_time": ["_psutil_sunos.boot_time"], "_psosx.boot_time": [], "psutil._pswindows.boot_time": ["<builtin>.float", "_psutil_windows.boot_time", "<builtin>.abs"], "psutil._psaix.boot_time": ["_psutil_aix.boot_time"], "psutil._pslinux.boot_time": ["_common.open_binary", "<builtin>.float", "_common.get_procfs_path", "<builtin>.RuntimeError"], "psutil.users": ["psutil._pswindows.users", "psutil._pslinux.users", "_psosx.users", "psutil._psbsd.users", "psutil._pssunos.users", "psutil._psaix.users"], "psutil._pswindows.users": ["_psutil_windows.users", "psutil._pswindows.py2_strencode", "_common.suser"], "psutil._pslinux.users": ["_common.suser", "_psutil_linux.users"], "_psosx.users": [], "psutil._psbsd.users": ["_common.suser", "_psutil_bsd.users"], "psutil._pssunos.users": ["_common.suser", "_psutil_sunos.users"], "psutil._psaix.users": ["_common.suser", "_psutil_aix.users"], "psutil.win_service_iter": ["_psosx.win_service_iter", "psutil._pswindows.win_service_iter"], "psutil._pswindows.win_service_iter": ["_psutil_windows.winservice_enumerate", "psutil._pswindows.py2_strencode", "psutil._pswindows.WindowsService.__init__"], "_psosx.win_service_iter": [], "psutil.win_service_get": ["_psosx.win_service_get", "psutil._pswindows.win_service_get"], "psutil._pswindows.win_service_get": ["psutil._pswindows.WindowsService._query_config", "psutil._pswindows.WindowsService.__init__"], "_psosx.win_service_get": [], "_psutil_windows.set_debug": [], "_psutil_aix.set_debug": [], "_psutil_bsd.set_debug": [], "_psutil_linux.set_debug": [], "_psutil_sunos.set_debug": [], "_psosx.cext.set_debug": [], "psutil._common.bytes2human": ["<builtin>.locals", "<builtin>.float", "<builtin>.dict", "<builtin>.reversed", "<builtin>.enumerate"], "_compat.get_terminal_size": [], "_psutil_posix.getpagesize": [], "_psutil_bsd.virtual_mem": [], "_common.usage_percent": [], "_psutil_bsd.swap_mem": [], "_common.sswap": [], "_psutil_bsd.cpu_times": [], "_psutil_bsd.per_cpu_times": [], "_psutil_bsd.cpu_count_logical": [], "_psutil_bsd.cpu_topology": [], "_psutil_bsd.cpu_stats": [], "_common.scpustats": [], "_psutil_bsd.cpu_freq": [], "_psutil_bsd.disk_partitions": [], "_common.sdiskpart": [], "_psutil_bsd.net_io_counters": [], "_psutil_posix.net_if_mtu": [], "_psutil_posix.net_if_is_running": [], "_psutil_posix.net_if_duplex_speed": [], "_common.NicDuplex": [], "_common.snicstats": [], "_common.sconn": [], "_psutil_bsd.net_connections": [], "_common.conn_to_ntuple": [], "_psutil_bsd.sensors_battery": [], "_common.sbattery": [], "_psutil_bsd.sensors_cpu_temperature": [], "_psutil_bsd.boot_time": [], "_psutil_bsd.users": [], "_common.suser": [], "_common.memoize": [], "psutil._psbsd._pid_0_exists": ["psutil._psbsd.Process.name", "psutil._psbsd.Process.__init__"], "_psutil_bsd.pids": [], "_psposix.pid_exists": [], "psutil._psbsd.is_zombie": ["_psutil_bsd.proc_oneshot_info"], "_psutil_bsd.proc_oneshot_info": [], "psutil._psbsd.wrap_exceptions": ["functools.wraps", "_functools.partial"], "psutil._psbsd.wrap_exceptions.wrapper": ["psutil._psbsd.Process.cpu_affinity_get", "psutil._psbsd.Process.exe", "psutil._psbsd.Process.cwd", "psutil._psbsd.Process._not_implemented", "psutil._psbsd.Process.ppid", "psutil._psbsd.Process.memory_maps", "psutil._psbsd.Process.gids", "psutil._psbsd.Process.io_counters", "psutil._psbsd.Process.wait", "psutil._psbsd.Process.environ", "psutil._psbsd.Process.cmdline", "psutil._psbsd.Process.num_threads", "psutil._psbsd.Process.nice_set", "psutil._psbsd.Process.memory_info", "_common.ZombieProcess", "_common.AccessDenied", "psutil._psbsd.Process.open_files", "psutil._psbsd.is_zombie", "psutil._psbsd.Process.num_fds", "psutil._psbsd.Process.terminal", "psutil._psbsd.Process.connections", "psutil._psbsd.Process.cpu_affinity_set", "psutil._psbsd.Process.cpu_num", "psutil._psbsd.Process.status", "psutil._psbsd.Process.threads", "psutil._psbsd.pids", "psutil._psbsd.Process.nice_get", "psutil._psbsd.Process.create_time", "psutil._psbsd.Process.rlimit", "psutil._psbsd.Process.name", "psutil._psbsd.Process.uids", "psutil._psbsd.Process.cpu_times", "psutil._psbsd.Process.num_ctx_switches", "_common.NoSuchProcess"], "psutil._psbsd.wrap_exceptions_procfs": ["_common.ZombieProcess", "_common.NoSuchProcess", "_common.AccessDenied", "psutil._psbsd.is_zombie"], "psutil._psbsd.Process": ["psutil._psbsd.wrap_exceptions", "_common.memoize_when_activated", "collections.namedtuple"], "psutil._psbsd.Process._assert_alive": ["_psutil_bsd.proc_name"], "_psutil_bsd.proc_name": [], "psutil._psbsd.Process.oneshot": ["<builtin>.len", "_psutil_bsd.proc_oneshot_info"], "_psutil_bsd.proc_exe": [], "_compat.which": [], "_psutil_bsd.proc_cmdline": [], "_psutil_bsd.proc_environ": [], "_psposix.get_terminal_map": [], "_common.puids": [], "_common.pgids": [], "_common.pcputimes": [], "_psutil_bsd.proc_num_threads": [], "_common.pctxsw": [], "_psutil_bsd.proc_threads": [], "_common.pthread": [], "_psutil_bsd.proc_connections": [], "_psposix.wait_pid": [], "_psutil_posix.getpriority": [], "_psutil_posix.setpriority": [], "_common.pio": [], "_psutil_bsd.proc_cwd": [], "_psutil_bsd.proc_open_files": [], "_common.popenfile": [], "_psutil_bsd.proc_num_fds": [], "_psutil_bsd.proc_cpu_affinity_get": [], "_psutil_bsd.proc_cpu_affinity_set": [], "_psutil_bsd.proc_memory_maps": [], "_psutil_bsd.proc_getrlimit": [], "_psutil_bsd.proc_setrlimit": [], "xml.etree": [], "xml.etree.ElementTree.ParseError": [], "xml.etree.ElementTree.iselement": ["<builtin>.hasattr"], "xml.etree.ElementTree.Element": [], "xml.etree.ElementTree.Element.__init__": ["<builtin>.TypeError", "<builtin>.isinstance"], "xml.etree.ElementTree.Element.__repr__": ["<builtin>.id"], "xml.etree.ElementTree.Element.makeelement": [], "xml.etree.ElementTree.Element.copy": ["xml.etree.ElementTree.Element.makeelement"], "xml.etree.ElementTree.Element.__len__": ["<builtin>.len"], "xml.etree.ElementTree.Element.__bool__": ["<builtin>.len", "warnings.warn"], "xml.etree.ElementTree.Element.__getitem__": [], "xml.etree.ElementTree.Element.__setitem__": ["xml.etree.ElementTree.Element._assert_is_element", "<builtin>.isinstance"], "xml.etree.ElementTree.Element._assert_is_element": ["<builtin>.TypeError", "<builtin>.type", "<builtin>.isinstance"], "xml.etree.ElementTree.Element.__delitem__": [], "xml.etree.ElementTree.Element.append": ["xml.etree.ElementTree.Element._assert_is_element"], "xml.etree.ElementTree.Element.extend": ["xml.etree.ElementTree.Element._assert_is_element"], "xml.etree.ElementTree.Element.insert": ["xml.etree.ElementTree.Element._assert_is_element"], "xml.etree.ElementTree.Element.remove": [], "xml.etree.ElementTree.Element.getchildren": ["warnings.warn"], "xml.etree.ElementTree.Element.find": ["xml.etree.ElementPath.find"], "xml.etree.ElementPath.find": ["<builtin>.next", "xml.etree.ElementPath.iterfind"], "xml.etree.ElementTree.Element.findtext": ["xml.etree.ElementPath.findtext"], "xml.etree.ElementPath.findtext": ["<builtin>.next", "xml.etree.ElementPath.iterfind"], "xml.etree.ElementTree.Element.findall": ["xml.etree.ElementPath.findall"], "xml.etree.ElementPath.findall": ["xml.etree.ElementPath.iterfind", "<builtin>.list"], "xml.etree.ElementTree.Element.iterfind": ["xml.etree.ElementPath.iterfind"], "xml.etree.ElementPath.iterfind": ["xml.etree.ElementPath._SelectorContext.__init__", "<builtin>.tuple", "<builtin>.SyntaxError", "xml.etree.ElementPath.xpath_tokenizer", "<builtin>.len", "<builtin>.sorted", "<builtin>.iter"], "xml.etree.ElementTree.Element.clear": [], "xml.etree.ElementTree.Element.get": [], "xml.etree.ElementTree.Element.set": [], "xml.etree.ElementTree.Element.keys": [], "xml.etree.ElementTree.Element.items": [], "xml.etree.ElementTree.Element.iter": [], "xml.etree.ElementTree.Element.getiterator": ["xml.etree.ElementTree.Element.iter", "warnings.warn", "<builtin>.list"], "xml.etree.ElementTree.Element.itertext": ["xml.etree.ElementTree.Element.itertext", "<builtin>.isinstance"], "xml.etree.ElementTree.SubElement": [], "xml.etree.ElementTree.Comment": ["xml.etree.ElementTree.Element.__init__"], "xml.etree.ElementTree.ProcessingInstruction": ["xml.etree.ElementTree.Element.__init__"], "xml.etree.ElementTree.QName": [], "xml.etree.ElementTree.QName.__init__": [], "xml.etree.ElementTree.QName.__str__": [], "xml.etree.ElementTree.QName.__repr__": [], "xml.etree.ElementTree.QName.__hash__": ["<builtin>.hash"], "xml.etree.ElementTree.QName.__le__": ["<builtin>.isinstance"], "xml.etree.ElementTree.QName.__lt__": ["<builtin>.isinstance"], "xml.etree.ElementTree.QName.__ge__": ["<builtin>.isinstance"], "xml.etree.ElementTree.QName.__gt__": ["<builtin>.isinstance"], "xml.etree.ElementTree.QName.__eq__": ["<builtin>.isinstance"], "xml.etree.ElementTree.ElementTree": [], "xml.etree.ElementTree.ElementTree.__init__": ["xml.etree.ElementTree.ElementTree.parse"], "xml.etree.ElementTree.ElementTree.parse": ["<builtin>.hasattr", "xml.etree.ElementTree.XMLParser.close", "<builtin>.open", "xml.etree.ElementTree.XMLParser.__init__", "xml.etree.ElementTree.XMLParser.feed"], "xml.etree.ElementTree.ElementTree.getroot": [], "xml.etree.ElementTree.ElementTree._setroot": [], "xml.etree.ElementTree.XMLParser.feed": ["xml.etree.ElementTree.XMLParser._raiseerror"], "xml.etree.ElementTree.XMLParser.close": ["xml.etree.ElementTree.TreeBuilder.close", "xml.etree.ElementTree.XMLParser._raiseerror"], "xml.etree.ElementTree.ElementTree.iter": ["xml.etree.ElementTree.ElementTree.iter"], "xml.etree.ElementTree.ElementTree.getiterator": ["warnings.warn", "xml.etree.ElementTree.ElementTree.iter", "<builtin>.list"], "xml.etree.ElementTree.ElementTree.find": ["warnings.warn", "xml.etree.ElementTree.ElementTree.find"], "xml.etree.ElementTree.ElementTree.findtext": ["warnings.warn", "xml.etree.ElementTree.ElementTree.findtext"], "xml.etree.ElementTree.ElementTree.findall": ["xml.etree.ElementTree.ElementTree.findall", "warnings.warn"], "xml.etree.ElementTree.ElementTree.iterfind": ["warnings.warn", "xml.etree.ElementTree.ElementTree.iterfind"], "xml.etree.ElementTree._get_writer": ["io.TextIOWrapper", "contextlib._BaseExitStack.__init__", "<builtin>.isinstance", "_io._IOBase.__init__", "<builtin>.open", "io.BufferedWriter"], "xml.etree.ElementTree._serialize_text": ["xml.etree.ElementTree.ElementTree.write"], "xml.etree.ElementTree._namespaces": ["xml.etree.ElementTree._namespaces.add_qname", "<builtin>.isinstance", "xml.etree.ElementTree.ElementTree.iter", "xml.etree.ElementTree._raise_serialization_error"], "xml.etree.ElementTree.ElementTree.write_c14n": ["xml.etree.ElementTree.ElementTree.write"], "_io._IOBase.__init__": [], "xml.etree.ElementTree._get_writer.<lambda1>": [], "xml.etree.ElementTree._namespaces.add_qname": ["xml.etree.ElementTree._raise_serialization_error", "<builtin>.len", "<builtin>.ValueError"], "xml.etree.ElementTree._raise_serialization_error": ["<builtin>.TypeError", "<builtin>.type"], "xml.etree.ElementTree._serialize_xml": ["<builtin>.isinstance", "xml.etree.ElementTree._serialize_xml", "<builtin>.list", "<builtin>.len", "xml.etree.ElementTree._escape_attrib", "<builtin>.sorted", "xml.etree.ElementTree._escape_cdata"], "xml.etree.ElementTree._escape_cdata": ["xml.etree.ElementTree._raise_serialization_error"], "xml.etree.ElementTree._serialize_xml.<lambda1>": [], "xml.etree.ElementTree._escape_attrib": ["xml.etree.ElementTree._raise_serialization_error"], "xml.etree.ElementTree._serialize_html": ["xml.etree.ElementTree._escape_attrib_html", "xml.etree.ElementTree._serialize_html", "<builtin>.isinstance", "<builtin>.list", "xml.etree.ElementTree._escape_attrib", "<builtin>.sorted", "xml.etree.ElementTree._escape_cdata"], "xml.etree.ElementTree._serialize_html.<lambda1>": [], "xml.etree.ElementTree._escape_attrib_html": ["xml.etree.ElementTree._raise_serialization_error"], "xml.etree.ElementTree.register_namespace": ["<builtin>.list", "<builtin>.ValueError", "re.match"], "xml.etree.ElementTree.tostring": ["io.BytesIO", "xml.etree.ElementTree.ElementTree.__init__", "xml.etree.ElementTree.ElementTree.write", "io.StringIO"], "xml.etree.ElementTree._ListDataStream": [], "xml.etree.ElementTree._ListDataStream.__init__": [], "xml.etree.ElementTree._ListDataStream.writable": [], "xml.etree.ElementTree._ListDataStream.seekable": [], "xml.etree.ElementTree._ListDataStream.tell": ["<builtin>.len"], "xml.etree.ElementTree.tostringlist": ["xml.etree.ElementTree._ListDataStream.__init__", "xml.etree.ElementTree.ElementTree.__init__", "xml.etree.ElementTree.ElementTree.write"], "xml.etree.ElementTree.dump": ["<builtin>.isinstance", "xml.etree.ElementTree.ElementTree.getroot", "xml.etree.ElementTree.ElementTree.__init__", "xml.etree.ElementTree.ElementTree.write", "sys.stdout.write"], "xml.etree.ElementTree.parse": ["xml.etree.ElementTree.ElementTree.parse", "xml.etree.ElementTree.ElementTree.__init__"], "xml.etree.ElementTree.iterparse": ["<builtin>.hasattr", "xml.etree.ElementTree.XMLPullParser.__init__", "<builtin>.open", "xml.etree.ElementTree.iterparse.IterParseIterator"], "xml.etree.ElementTree.XMLPullParser.__init__": ["xml.etree.ElementTree.TreeBuilder.__init__", "collections.deque", "xml.etree.ElementTree.XMLParser.__init__"], "xml.etree.ElementTree.iterparse.iterator": ["xml.etree.ElementTree.XMLPullParser.read_events", "xml.etree.ElementTree.XMLPullParser.feed", "xml.etree.ElementTree.XMLPullParser._close_and_return_root"], "xml.etree.ElementTree.XMLPullParser.read_events": ["<builtin>.isinstance"], "xml.etree.ElementTree.XMLPullParser.feed": ["<builtin>.ValueError"], "xml.etree.ElementTree.XMLPullParser._close_and_return_root": [], "xml.etree.ElementTree.iterparse.IterParseIterator": ["xml.etree.ElementTree.iterparse.iterator"], "xml.etree.ElementTree.XMLPullParser": [], "xml.etree.ElementTree.TreeBuilder.__init__": [], "xml.etree.ElementTree.XMLPullParser.close": ["xml.etree.ElementTree.XMLPullParser._close_and_return_root"], "xml.etree.ElementTree.XML": ["xml.etree.ElementTree.XMLParser.close", "xml.etree.ElementTree.TreeBuilder.__init__", "xml.etree.ElementTree.XMLParser.feed", "xml.etree.ElementTree.XMLParser.__init__"], "xml.etree.ElementTree.XMLID": ["xml.etree.ElementTree.XMLParser.close", "xml.etree.ElementTree.TreeBuilder.__init__", "xml.etree.ElementTree.XMLParser.feed", "xml.etree.ElementTree.XMLParser.__init__"], "xml.etree.ElementTree.fromstringlist": ["xml.etree.ElementTree.XMLParser.close", "xml.etree.ElementTree.TreeBuilder.__init__", "xml.etree.ElementTree.XMLParser.feed", "xml.etree.ElementTree.XMLParser.__init__"], "xml.etree.ElementTree.TreeBuilder": [], "xml.etree.ElementTree.TreeBuilder.close": ["<builtin>.len"], "xml.etree.ElementTree.TreeBuilder._flush": [], "xml.etree.ElementTree.TreeBuilder.data": [], "xml.etree.ElementTree.TreeBuilder.start": ["xml.etree.ElementTree.Element.__init__", "xml.etree.ElementTree.TreeBuilder._flush"], "xml.etree.ElementTree.TreeBuilder.end": ["xml.etree.ElementTree.TreeBuilder._flush"], "xml.etree.ElementTree.TreeBuilder.comment": ["xml.etree.ElementTree.TreeBuilder._handle_single"], "xml.etree.ElementTree.TreeBuilder._handle_single": ["xml.etree.ElementTree.ProcessingInstruction", "xml.etree.ElementTree.Comment", "xml.etree.ElementTree.TreeBuilder._flush"], "xml.etree.ElementTree.TreeBuilder.pi": ["xml.etree.ElementTree.TreeBuilder._handle_single"], "xml.etree.ElementTree.XMLParser": [], "xml.etree.ElementTree.XMLParser._setevents": ["<builtin>.hasattr", "<builtin>.ValueError"], "xml.etree.ElementTree.XMLParser._setevents.handler": ["xml.etree.ElementTree.C14NWriterTarget.pi", "xml.etree.ElementTree.TreeBuilder.comment", "xml.etree.ElementTree.C14NWriterTarget.comment", "xml.etree.ElementTree.TreeBuilder.pi"], "xml.etree.ElementTree.C14NWriterTarget.comment": ["xml.etree.ElementTree.C14NWriterTarget._flush", "xml.etree.ElementTree._escape_cdata_c14n"], "xml.etree.ElementTree.C14NWriterTarget.pi": ["xml.etree.ElementTree.C14NWriterTarget._flush", "xml.etree.ElementTree._escape_cdata_c14n"], "xml.etree.ElementTree.XMLParser._raiseerror": [], "xml.etree.ElementTree.XMLParser._fixname": [], "xml.etree.ElementTree.XMLParser._start_ns": ["xml.etree.ElementTree.C14NWriterTarget.start_ns"], "xml.etree.ElementTree.C14NWriterTarget.start_ns": ["xml.etree.ElementTree.C14NWriterTarget._flush"], "xml.etree.ElementTree.XMLParser._end_ns": [], "xml.etree.ElementTree.XMLParser._start": ["xml.etree.ElementTree.C14NWriterTarget.start", "xml.etree.ElementTree.TreeBuilder.start", "<builtin>.len", "<builtin>.range", "xml.etree.ElementTree.XMLParser._fixname"], "xml.etree.ElementTree.C14NWriterTarget.start": ["xml.etree.ElementTree.C14NWriterTarget._flush", "xml.etree.ElementTree.C14NWriterTarget._start"], "xml.etree.ElementTree.XMLParser._end": ["xml.etree.ElementTree.C14NWriterTarget.end", "xml.etree.ElementTree.XMLParser._fixname", "xml.etree.ElementTree.TreeBuilder.end"], "xml.etree.ElementTree.C14NWriterTarget.end": ["xml.etree.ElementTree.C14NWriterTarget._flush", "<builtin>.len", "xml.etree.ElementTree.C14NWriterTarget._qname"], "xml.etree.ElementTree.C14NWriterTarget.data": [], "xml.etree.ElementTree.canonicalize": ["xml.etree.ElementTree.parse", "xml.etree.ElementTree.XMLParser.close", "<builtin>.ValueError", "xml.etree.ElementTree.XMLParser.__init__", "xml.etree.ElementTree.C14NWriterTarget.__init__", "xml.etree.ElementTree.XMLParser.feed", "io.StringIO"], "xml.etree.ElementTree.C14NWriterTarget.__init__": ["<builtin>.set", "<builtin>.list"], "xml.etree.ElementTree.C14NWriterTarget": [], "xml.etree.ElementTree.C14NWriterTarget._iter_namespaces": [], "xml.etree.ElementTree.C14NWriterTarget._resolve_prefix_name": ["xml.etree.ElementTree.C14NWriterTarget._iter_namespaces", "<builtin>.ValueError"], "xml.etree.ElementTree.C14NWriterTarget._qname": ["xml.etree.ElementTree.C14NWriterTarget._iter_namespaces", "<builtin>.ValueError", "<builtin>.set", "<builtin>.len"], "xml.etree.ElementTree.C14NWriterTarget._flush": ["xml.etree.ElementTree.C14NWriterTarget._start", "xml.etree.ElementTree._escape_cdata_c14n"], "xml.etree.ElementTree.C14NWriterTarget._start": ["xml.etree.ElementTree.C14NWriterTarget._qname", "xml.etree.ElementTree._escape_cdata_c14n", "xml.etree.ElementTree.C14NWriterTarget._resolve_prefix_name", "xml.etree.ElementTree._escape_attrib_c14n", "<builtin>.sorted"], "xml.etree.ElementTree._escape_cdata_c14n": ["xml.etree.ElementTree._raise_serialization_error"], "xml.etree.ElementTree.C14NWriterTarget._start.<lambda1>": [], "xml.etree.ElementTree._escape_attrib_c14n": ["xml.etree.ElementTree._raise_serialization_error"], "xml.etree.ElementPath.xpath_tokenizer": ["<builtin>.SyntaxError"], "xml.etree.ElementPath.get_parent_map": [], "xml.etree.ElementPath._is_wildcard_tag": [], "xml.etree.ElementPath._prepare_tag": ["<builtin>.len", "<builtin>.RuntimeError", "<builtin>.slice"], "xml.etree.ElementPath._prepare_tag.select": [], "<builtin>.slice": [], "xml.etree.ElementPath.prepare_child": ["xml.etree.ElementPath._prepare_tag", "xml.etree.ElementPath._is_wildcard_tag"], "xml.etree.ElementPath.prepare_child.select": ["xml.etree.ElementPath.prepare_child.select.select_child", "xml.etree.ElementPath._prepare_tag.select"], "xml.etree.ElementPath.prepare_child.select.select_child": [], "xml.etree.ElementPath.prepare_star": [], "xml.etree.ElementPath.prepare_star.select": [], "xml.etree.ElementPath.prepare_self": [], "xml.etree.ElementPath.prepare_self.select": [], "xml.etree.ElementPath.prepare_descendant": ["<builtin>.SyntaxError", "xml.etree.ElementPath._prepare_tag", "xml.etree.ElementPath._is_wildcard_tag"], "xml.etree.ElementPath.prepare_descendant.select": ["xml.etree.ElementPath._prepare_tag.select", "xml.etree.ElementPath.prepare_descendant.select.select_child"], "xml.etree.ElementPath.prepare_descendant.select.select_child": [], "xml.etree.ElementPath.prepare_parent": [], "xml.etree.ElementPath.prepare_parent.select": ["xml.etree.ElementPath.get_parent_map"], "xml.etree.ElementPath.prepare_predicate": ["<builtin>.int", "<builtin>.SyntaxError", "re.match"], "xml.etree.ElementPath.prepare_predicate.select": ["xml.etree.ElementPath.get_parent_map", "<builtin>.list"], "xml.etree.ElementPath._SelectorContext": [], "xml.etree.ElementPath._SelectorContext.__init__": [], "psutil._pslinux.IOPriority": [], "psutil._pslinux.readlink": ["_common.path_exists_strict", "<builtin>.isinstance"], "_common.path_exists_strict": [], "psutil._pslinux.file_flags_to_mode": [], "psutil._pslinux.is_storage_device": [], "psutil._pslinux.set_scputimes_ntuple": ["<builtin>.len", "_common.open_binary", "collections.namedtuple"], "_common.open_binary": [], "ctypes.CDLL.__init__": ["nt._getfullpathname", "ctypes.CDLL.__init__._FuncPtr", "sys.platform.startswith"], "psutil._pslinux.prlimit": ["psutil._pslinux.prlimit.StructRlimit", "<builtin>.OSError"], "psutil._pslinux.prlimit.StructRlimit": [], "psutil._pslinux.calculate_avail_vmem": ["<builtin>.int", "<builtin>.min", "_common.open_binary", "_common.get_procfs_path"], "_common.get_procfs_path": [], "_psutil_linux.linux_sysinfo": [], "_common.open_text": [], "psutil._pslinux._cpu_get_cpuinfo_freq": ["_common.open_binary", "<builtin>.float", "_common.get_procfs_path"], "psutil._pslinux.cpu_freq.<lambda1>": ["<builtin>.int", "re.search"], "_common.bcat": [], "psutil._pslinux._Ipv6UnsupportedError": [], "psutil._pslinux.Connections": [], "psutil._pslinux.Connections.__init__": [], "psutil._pslinux.Connections.get_proc_inodes": ["<builtin>.int", "_common.debug", "psutil._pslinux.readlink", "_collections.defaultdict"], "_common.debug": [], "psutil._pslinux.Connections.get_all_inodes": ["psutil._pslinux.pids", "psutil._pslinux.Connections.get_proc_inodes"], "psutil._pslinux.Connections.decode_address": ["<builtin>.int", "base64.b16decode", "_common.addr", "_common.supports_ipv6"], "_common.supports_ipv6": [], "_common.addr": [], "psutil._pslinux.Connections.process_inet": ["_common.open_text", "ntpath.exists", "<builtin>.RuntimeError", "posixpath.exists", "<builtin>.enumerate", "psutil._pslinux.Connections.decode_address"], "psutil._pslinux.Connections.process_unix": ["_common.open_text", "<builtin>.int", "<builtin>.RuntimeError", "<builtin>.len", "_common.socktype_to_enum"], "_common.socktype_to_enum": [], "psutil._pslinux.Connections.retrieve": ["_common.get_procfs_path", "<builtin>.ValueError", "_common.pconn", "psutil._pslinux.Connections.process_inet", "psutil._pslinux.Connections.get_all_inodes", "<builtin>.list", "psutil._pslinux.Connections.process_unix", "<builtin>.set", "<builtin>.repr", "psutil._pslinux.Connections.get_proc_inodes", "_common.sconn"], "_common.pconn": [], "_psutil_linux.net_if_duplex_speed": [], "psutil._pslinux.disk_io_counters.read_procfs": ["_common.open_text", "<builtin>.int", "<builtin>.map", "_common.get_procfs_path", "<builtin>.ValueError", "<builtin>.len"], "psutil._pslinux.disk_io_counters.read_sysfs": ["_common.open_text", "posixpath.join", "ntpath.join", "posixpath.basename", "os.walk", "<builtin>.map", "ntpath.basename"], "psutil._pslinux.RootFsDeviceFinder": [], "psutil._pslinux.RootFsDeviceFinder.__init__": [], "psutil._pslinux.RootFsDeviceFinder.ask_proc_partitions": ["<builtin>.int", "<builtin>.len", "_common.open_text", "_common.get_procfs_path"], "psutil._pslinux.RootFsDeviceFinder.ask_sys_dev_block": ["_common.open_text"], "psutil._pslinux.RootFsDeviceFinder.ask_sys_class_block": ["_common.open_text", "ntpath.dirname", "posixpath.basename", "posixpath.dirname", "ntpath.basename"], "psutil._pslinux.RootFsDeviceFinder.find": ["_common.debug", "psutil._pslinux.RootFsDeviceFinder.ask_sys_class_block", "ntpath.exists", "psutil._pslinux.RootFsDeviceFinder.ask_sys_dev_block", "posixpath.exists", "psutil._pslinux.RootFsDeviceFinder.ask_proc_partitions"], "_psutil_linux.disk_partitions": [], "_common.cat": [], "_common.sfan": [], "psutil._pslinux.sensors_battery.multi_bcat": ["<builtin>.int", "_common.bcat"], "_psutil_linux.users": [], "_compat.b": [], "psutil._pslinux.wrap_exceptions": ["functools.wraps", "_functools.partial"], "psutil._pslinux.wrap_exceptions.wrapper": ["psutil._pslinux.Process.memory_info", "psutil._pslinux.Process.create_time", "psutil._pslinux.Process.environ", "psutil._pslinux.Process.cpu_num", "psutil._pslinux.Process.cpu_times", "psutil._pslinux.Process.ppid", "psutil._pslinux.Process.ionice_get", "posixpath.exists", "psutil._pslinux.Process._parse_smaps_rollup", "psutil._pslinux.Process.wait", "psutil._pslinux.Process.name", "psutil._pslinux.Process.cmdline", "psutil._pslinux.Process.num_ctx_switches", "_common.AccessDenied", "psutil._pslinux.Process.num_fds", "psutil._pslinux.Process.nice_set", "psutil._pslinux.Process.terminal", "psutil._pslinux.Process.open_files", "psutil._pslinux.Process.cpu_affinity_set", "psutil._pslinux.Process.gids", "psutil._pslinux.Process.num_threads", "psutil._pslinux.Process.io_counters", "ntpath.exists", "psutil._pslinux.Process.cwd", "psutil._pslinux.Process.rlimit", "psutil._pslinux.Process._parse_smaps", "psutil._pslinux.Process.memory_maps", "psutil._pslinux.Process.ionice_set", "psutil._pslinux.Process.connections", "psutil._pslinux.Process.threads", "psutil._pslinux.Process.uids", "_common.NoSuchProcess", "psutil._pslinux.Process.status", "psutil._pslinux.Process.cpu_affinity_get", "psutil._pslinux.Process.nice_get"], "psutil._pslinux.Process._parse_smaps_rollup": ["_common.ZombieProcess", "<builtin>.int", "psutil._pslinux.pid_exists", "_common.NoSuchProcess", "_common.open_binary"], "psutil._pslinux.Process._parse_smaps": ["psutil._pslinux.Process._read_smaps_file", "<builtin>.map", "<builtin>.sum"], "psutil._pslinux.Process": ["ntpath.exists", "psutil._pslinux.wrap_exceptions", "_common.memoize_when_activated", "posixpath.exists"], "psutil._pslinux.Process._assert_alive": [], "psutil._pslinux.Process._parse_stat_file": ["_common.bcat"], "psutil._pslinux.Process._read_status_file": ["_common.open_binary"], "psutil._pslinux.Process._read_smaps_file": ["_common.open_binary"], "_common.decode": [], "_common.parse_environ_block": [], "psutil._pslinux.Process.memory_maps.get_blocks": ["<builtin>.int", "<builtin>.ValueError"], "_psutil_linux.proc_cpu_affinity_get": [], "_psutil_linux.proc_cpu_affinity_set": [], "_psutil_linux.proc_ioprio_get": [], "_common.pionice": [], "_psutil_linux.proc_ioprio_set": [], "_common.isfile_strict": [], "glob.glob": ["glob.iglob", "<builtin>.list"], "glob.iglob": ["<builtin>.next", "sys.audit", "glob._isrecursive", "glob._iglob"], "glob._iglob": ["posixpath.join", "ntpath.join", "ntpath.split", "posixpath.split", "glob._glob1", "ntpath.isdir", "posixpath.isdir", "glob._iglob", "ntpath.lexists", "glob._glob2", "posixpath.lexists", "glob.has_magic", "glob._isrecursive", "tarfile.TarFile.__iter__", "glob._glob0"], "glob._isrecursive": ["<builtin>.isinstance"], "glob.has_magic": ["<builtin>.isinstance"], "glob._glob2": ["glob._rlistdir", "glob._isrecursive"], "glob._glob1": ["glob._iterdir", "glob._ishidden", "<builtin>.list"], "glob._glob0": ["posixpath.join", "ntpath.join", "ntpath.isdir", "posixpath.isdir", "ntpath.lexists", "posixpath.lexists"], "glob._iterdir": ["<builtin>.bytes", "<builtin>.isinstance"], "glob._ishidden": [], "glob.glob0": ["glob._glob0"], "glob.glob1": ["glob._glob1"], "glob._rlistdir": ["posixpath.join", "glob._iterdir", "glob._ishidden", "ntpath.join", "glob._rlistdir", "<builtin>.list", "tarfile.TarFile.__iter__"], "glob.escape": ["ntpath.splitdrive", "<builtin>.isinstance", "posixpath.splitdrive"], "ctypes.create_string_buffer": ["<builtin>.TypeError", "<builtin>.len", "sys.audit", "<builtin>.isinstance"], "ctypes.c_buffer": ["ctypes.create_string_buffer"], "ctypes.CFUNCTYPE": ["ctypes.CFUNCTYPE.CFunctionType", "<builtin>.ValueError"], "ctypes.CFUNCTYPE.CFunctionType": [], "ctypes.WINFUNCTYPE": ["ctypes.WINFUNCTYPE.WinFunctionType", "<builtin>.ValueError"], "ctypes.WINFUNCTYPE.WinFunctionType": [], "ctypes.py_object": [], "ctypes.py_object.__repr__": ["<builtin>.type", "<builtin>.super"], "ctypes.c_short": [], "ctypes.c_ushort": [], "ctypes.c_long": [], "ctypes.c_ulong": [], "ctypes.c_int": [], "ctypes.c_uint": [], "ctypes.c_float": [], "ctypes.c_double": [], "ctypes.c_longdouble": [], "ctypes.c_longlong": [], "ctypes.c_ulonglong": [], "ctypes.c_ubyte": [], "ctypes.c_byte": [], "ctypes.c_char": [], "ctypes.c_char_p": [], "ctypes.c_char_p.__repr__": [], "ctypes.c_void_p": [], "ctypes.c_bool": [], "ctypes.c_wchar_p": [], "ctypes.c_wchar_p.__repr__": [], "ctypes.c_wchar": [], "ctypes._reset_cache": [], "ctypes.create_unicode_buffer": ["<builtin>.isinstance", "<builtin>.ord", "<builtin>.len", "sys.audit", "<builtin>.TypeError", "<builtin>.sum"], "ctypes.SetPointerType": ["<builtin>.RuntimeError", "<builtin>.id"], "ctypes.ARRAY": [], "ctypes.CDLL": [], "ctypes.CDLL.__init__._FuncPtr": [], "ctypes.CDLL.__repr__": ["<builtin>.id"], "ctypes.CDLL.__getattr__": ["<builtin>.AttributeError", "ctypes.CDLL.__getitem__", "<builtin>.setattr"], "ctypes.CDLL.__getitem__": ["<builtin>.isinstance"], "ctypes.PyDLL": [], "ctypes.WinDLL": [], "ctypes.HRESULT": [], "ctypes.OleDLL": [], "ctypes.LibraryLoader": [], "ctypes.LibraryLoader.__init__": [], "ctypes.LibraryLoader.__getattr__": ["<builtin>.AttributeError", "<builtin>.setattr", "ctypes.CDLL.__init__"], "ctypes.LibraryLoader.__getitem__": ["<builtin>.getattr"], "ctypes.LibraryLoader.LoadLibrary": ["ctypes.CDLL.__init__"], "ctypes.WinError": ["<builtin>.OSError"], "ctypes.PYFUNCTYPE": ["ctypes.PYFUNCTYPE.CFunctionType"], "ctypes.PYFUNCTYPE.CFunctionType": [], "ctypes.cast": [], "ctypes.string_at": [], "ctypes.wstring_at": [], "ctypes.DllGetClassObject": ["<builtin>.locals", "<builtin>.globals", "<builtin>.__import__"], "ctypes.DllCanUnloadNow": ["<builtin>.locals", "<builtin>.globals", "<builtin>.__import__"], "ctypes._endian._other_endian": ["<builtin>.hasattr", "<builtin>.issubclass", "ctypes._endian._other_endian", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.getattr"], "ctypes._endian._swapped_meta": [], "ctypes._endian._swapped_meta.__setattr__": ["ctypes._endian._other_endian", "<builtin>.super"], "ctypes._endian.BigEndianStructure": [], "ctypes._endian.LittleEndianStructure": [], "psutil._pswindows.Priority": [], "psutil._pswindows.IOPriority": [], "_compat.lru_cache": [], "psutil._pswindows.convert_dos_path": ["posixpath.join", "ntpath.join", "sys.path.split", "_psutil_windows.QueryDosDevice", "sys.base_prefix.split", "<builtin>.len"], "_psutil_windows.QueryDosDevice": [], "psutil._pswindows.py2_strencode": ["sys.path.encode", "<builtin>.isinstance", "sys.base_prefix.encode"], "psutil._pswindows.getpagesize": ["_psutil_windows.getpagesize"], "_psutil_windows.getpagesize": [], "_psutil_windows.virtual_mem": [], "_psutil_windows.disk_usage": [], "_common.sdiskusage": [], "_psutil_windows.disk_partitions": [], "_psutil_windows.cpu_times": [], "_psutil_windows.per_cpu_times": [], "_psutil_windows.cpu_count_logical": [], "_psutil_windows.cpu_count_cores": [], "_psutil_windows.cpu_stats": [], "_psutil_windows.cpu_freq": [], "psutil._pswindows.getloadavg": ["<builtin>.round", "<builtin>.tuple", "_psutil_windows.init_loadavg_counter", "_psutil_windows.getloadavg"], "_psutil_windows.init_loadavg_counter": [], "_psutil_windows.getloadavg": [], "_psutil_windows.net_connections": [], "_psutil_windows.net_if_stats": [], "_psutil_windows.net_io_counters": [], "_psutil_windows.net_if_addrs": [], "_psutil_windows.sensors_battery": [], "_psutil_windows.boot_time": [], "_psutil_windows.users": [], "_psutil_windows.winservice_enumerate": [], "psutil._pswindows.WindowsService.__init__": [], "psutil._pswindows.WindowsService._query_config": ["_psutil_windows.winservice_query_config", "psutil._pswindows.py2_strencode", "<builtin>.dict", "psutil._pswindows.WindowsService._wrap_exceptions"], "psutil._pswindows.WindowsService": ["contextlib.contextmanager"], "psutil._pswindows.WindowsService.__str__": [], "psutil._pswindows.WindowsService.__repr__": ["<builtin>.id", "psutil._pswindows.WindowsService.__str__"], "psutil._pswindows.WindowsService.__eq__": ["<builtin>.isinstance"], "psutil._pswindows.WindowsService.__ne__": [], "psutil._pswindows.WindowsService._wrap_exceptions": ["_common.AccessDenied", "_common.NoSuchProcess", "psutil._pswindows.is_permission_err"], "_psutil_windows.winservice_query_config": [], "psutil._pswindows.WindowsService._query_status": ["_psutil_windows.winservice_query_status", "<builtin>.dict", "psutil._pswindows.WindowsService._wrap_exceptions"], "_psutil_windows.winservice_query_status": [], "psutil._pswindows.is_permission_err": ["<builtin>.getattr", "<builtin>.isinstance"], "psutil._pswindows.WindowsService.name": [], "psutil._pswindows.WindowsService.display_name": [], "psutil._pswindows.WindowsService.binpath": ["psutil._pswindows.WindowsService._query_config"], "psutil._pswindows.WindowsService.username": ["psutil._pswindows.WindowsService._query_config"], "psutil._pswindows.WindowsService.start_type": ["psutil._pswindows.WindowsService._query_config"], "psutil._pswindows.WindowsService.pid": ["psutil._pswindows.WindowsService._query_status"], "psutil._pswindows.WindowsService.status": ["psutil._pswindows.WindowsService._query_status"], "psutil._pswindows.WindowsService.description": ["psutil._pswindows.py2_strencode", "_psutil_windows.winservice_query_descr", "psutil._pswindows.WindowsService.name"], "_psutil_windows.winservice_query_descr": [], "psutil._pswindows.WindowsService.as_dict": ["psutil._pswindows.WindowsService.description", "psutil._pswindows.WindowsService.display_name", "psutil._pswindows.WindowsService.name", "psutil._pswindows.WindowsService._query_status", "psutil._pswindows.WindowsService._query_config"], "psutil._pswindows.convert_oserror": ["_common.AccessDenied", "_common.NoSuchProcess", "<builtin>.isinstance", "psutil._pswindows.is_permission_err"], "psutil._pswindows.wrap_exceptions": ["functools.wraps", "_functools.partial"], "psutil._pswindows.wrap_exceptions.wrapper": ["psutil._pswindows.Process.cpu_times", "psutil._pswindows.Process.ionice_set", "psutil._pswindows.Process.kill", "psutil._pswindows.Process.suspend", "psutil._pswindows.Process.wait", "psutil._pswindows.convert_oserror", "psutil._pswindows.Process.cpu_affinity_set", "psutil._pswindows.Process.nice_get", "psutil._pswindows.Process.io_counters", "psutil._pswindows.Process.username", "psutil._pswindows.Process.num_ctx_switches", "psutil._pswindows.Process.num_threads", "psutil._pswindows.Process.status", "psutil._pswindows.Process.threads", "psutil._pswindows.Process.open_files", "psutil._pswindows.Process.num_handles", "psutil._pswindows.Process.resume", "psutil._pswindows.Process.nice_set", "psutil._pswindows.Process.connections", "psutil._pswindows.Process.send_signal", "psutil._pswindows.retry_error_partial_copy.wrapper", "psutil._pswindows.Process.memory_info", "psutil._pswindows.Process.ionice_get", "psutil._pswindows.Process.memory_full_info", "psutil._pswindows.Process.cpu_affinity_get", "psutil._pswindows.Process.create_time"], "psutil._pswindows.retry_error_partial_copy.wrapper": ["<builtin>.min", "psutil._pswindows.Process.environ", "psutil._pswindows.Process.cwd", "time.sleep", "_compat.range", "psutil._pswindows.Process.cmdline"], "psutil._pswindows.retry_error_partial_copy": ["functools.wraps", "_functools.partial"], "_compat.range": [], "psutil._pswindows.Process": ["psutil._pswindows.retry_error_partial_copy", "_common.memoize_when_activated", "psutil._pswindows.wrap_exceptions"], "psutil._pswindows.Process._proc_info": ["<builtin>.len", "_psutil_windows.proc_info"], "_psutil_windows.proc_info": [], "_psutil_windows.proc_exe": [], "_psutil_windows.proc_cmdline": [], "_psutil_windows.proc_environ": [], "psutil._pswindows.Process._get_raw_meminfo": ["_psutil_windows.proc_memory_info", "psutil._pswindows.Process._proc_info", "psutil._pswindows.is_permission_err"], "_psutil_windows.proc_memory_info": [], "_psutil_windows.proc_memory_uss": [], "_psutil_windows.proc_memory_maps": [], "_psutil_windows.proc_kill": [], "_psutil_windows.proc_wait": [], "_common.TimeoutExpired": [], "_psutil_windows.pid_exists": [], "_psutil_windows.proc_username": [], "_psutil_windows.proc_times": [], "_psutil_windows.proc_threads": [], "_psutil_windows.proc_suspend_or_resume": [], "_psutil_windows.proc_cwd": [], "_psutil_windows.proc_open_files": [], "_psutil_windows.proc_priority_get": [], "_psutil_windows.proc_priority_set": [], "_psutil_windows.proc_io_priority_get": [], "_psutil_windows.proc_io_priority_set": [], "_psutil_windows.proc_io_counters": [], "_psutil_windows.proc_is_suspended": [], "psutil._pswindows.Process.cpu_affinity_get.from_bitmask": ["_compat.range"], "_psutil_windows.proc_cpu_affinity_get": [], "psutil._pswindows.Process.cpu_affinity_set.to_bitmask": ["<builtin>.ValueError"], "_psutil_windows.proc_cpu_affinity_set": [], "_psutil_windows.proc_num_handles": [], "_psutil_sunos.swap_mem": [], "_psutil_sunos.per_cpu_times": [], "_psutil_sunos.cpu_count_cores": [], "_psutil_sunos.cpu_stats": [], "_psutil_sunos.disk_partitions": [], "_psposix.disk_usage": [], "_common.conn_tmap.copy": [], "_psutil_sunos.net_connections": [], "_common.sockfam_to_enum": [], "_psutil_sunos.net_if_stats": [], "_psutil_sunos.boot_time": [], "_psutil_sunos.users": [], "psutil._pssunos.wrap_exceptions": ["functools.wraps", "_functools.partial"], "psutil._pssunos.wrap_exceptions.wrapper": ["psutil._pssunos.Process.nice_get", "psutil._pssunos.Process.terminal", "psutil._pssunos.Process.num_ctx_switches", "psutil._pssunos.Process.status", "psutil._pssunos.Process.environ", "psutil._pssunos.Process.cmdline", "psutil._pssunos.Process.gids", "psutil._pssunos.Process.wait", "_common.ZombieProcess", "psutil._pssunos.Process.nice_set", "psutil._pssunos.Process.memory_info", "psutil._pssunos.Process.threads", "_common.AccessDenied", "psutil._pssunos.Process.name", "psutil._pssunos.Process.open_files", "psutil._pssunos.Process.num_fds", "psutil._pssunos.Process.connections", "psutil._pssunos.Process.exe", "psutil._pssunos.Process.uids", "psutil._pssunos.Process.ppid", "psutil._pssunos.Process.cpu_num", "psutil._pssunos.Process.num_threads", "psutil._pssunos.Process.cwd", "_common.NoSuchProcess", "psutil._pssunos.pid_exists", "psutil._pssunos.Process.memory_maps", "psutil._pssunos.Process.cpu_times", "psutil._pssunos.pids", "psutil._pssunos.Process.create_time"], "psutil._pssunos.Process": ["_common.memoize_when_activated", "psutil._pssunos.wrap_exceptions", "collections.namedtuple"], "psutil._pssunos.Process._assert_alive": [], "psutil._pssunos.Process._proc_name_and_args": ["_psutil_sunos.proc_name_and_args"], "_psutil_sunos.proc_name_and_args": [], "psutil._pssunos.Process._proc_basic_info": ["_common.AccessDenied", "_psutil_sunos.proc_basic_info", "ntpath.exists", "posixpath.exists", "<builtin>.len"], "_psutil_sunos.proc_basic_info": [], "psutil._pssunos.Process._proc_cred": ["_psutil_sunos.proc_cred"], "_psutil_sunos.proc_cred": [], "_psutil_sunos.proc_environ": [], "_psutil_sunos.proc_cpu_times": [], "_psutil_sunos.proc_cpu_num": [], "_psutil_sunos.query_process_thread": [], "psutil._pssunos.Process._get_unix_sockets": ["_common.AccessDenied", "<builtin>.RuntimeError", "_common.NoSuchProcess", "<builtin>.enumerate", "subprocess.Popen.__init__", "subprocess.Popen.communicate"], "psutil._pssunos.Process.memory_maps.toaddr": ["<builtin>.hex"], "_psutil_sunos.proc_memory_maps": [], "_psutil_sunos.proc_num_ctx_switches": [], "psutil._common.NicDuplex": [], "psutil._common.BatteryTime": [], "psutil._common.Error": [], "psutil._common.Error._infodict": ["<builtin>.getattr", "collections.OrderedDict.__init__"], "psutil._common.Error.__str__": ["_collections.OrderedDict.items", "<builtin>.getattr", "psutil._common.Error._infodict"], "psutil._common.Error.__repr__": ["_collections.OrderedDict.items", "psutil._common.Error._infodict"], "psutil._common.NoSuchProcess": [], "psutil._common.NoSuchProcess.__init__": [], "psutil._common.ZombieProcess": [], "psutil._common.ZombieProcess.__init__": ["psutil._common.NoSuchProcess.__init__"], "psutil._common.AccessDenied": [], "psutil._common.AccessDenied.__init__": [], "psutil._common.TimeoutExpired": [], "psutil._common.TimeoutExpired.__init__": [], "psutil._common.usage_percent": ["<builtin>.round", "<builtin>.float"], "psutil._common.memoize": ["functools.wraps", "_functools.partial"], "psutil._common.memoize.wrapper": ["psutil._common.supports_ipv6", "<builtin>.frozenset", "<builtin>.sorted", "psutil._common.term_supports_colors"], "psutil._common.supports_ipv6": ["contextlib.closing.__init__"], "psutil._common.memoize.cache_clear": [], "psutil._common.memoize_when_activated": ["functools.wraps", "_functools.partial"], "psutil._common.memoize_when_activated.wrapper": [], "psutil._common.memoize_when_activated.cache_activate": [], "psutil._common.memoize_when_activated.cache_deactivate": [], "psutil._common.isfile_strict": ["stat.S_ISREG"], "psutil._common.path_exists_strict": [], "psutil._common.parse_environ_block": [], "psutil._common.sockfam_to_enum": [], "psutil._common.socktype_to_enum": [], "psutil._common.conn_to_ntuple": ["psutil._common.socktype_to_enum", "psutil._common.sockfam_to_enum"], "psutil._common.deprecated_method": [], "psutil._common.deprecated_method.outer": ["functools.wraps", "_functools.partial"], "psutil._common.deprecated_method.outer.inner": ["<builtin>.getattr", "warnings.warn"], "psutil._common._WrapNumbers": [], "psutil._common._WrapNumbers.__init__": [], "psutil._common._WrapNumbers._add_dict": ["collections.defaultdict"], "psutil._common._WrapNumbers._remove_dead_reminders": ["<builtin>.set"], "psutil._common._WrapNumbers.run": ["psutil._common._WrapNumbers._remove_dead_reminders", "<builtin>.tuple", "<builtin>.len", "<builtin>.range", "psutil._common._WrapNumbers._add_dict"], "psutil._common._WrapNumbers.cache_clear": [], "psutil._common._WrapNumbers.cache_info": [], "psutil._common.wrap_numbers": ["psutil._common._WrapNumbers.run"], "psutil._common.open_binary": ["<builtin>.open"], "psutil._common.open_text": ["<builtin>.open"], "psutil._common.cat": ["psutil._common.open_binary", "psutil._common.open_text"], "psutil._common.bcat": ["psutil._common.cat"], "psutil._common.get_procfs_path": [], "psutil._common.decode": [], "psutil._common.hilite": ["<builtin>.list", "<builtin>.ValueError", "<builtin>.dict", "psutil._common.term_supports_colors"], "curses.has_key.has_key": ["<builtin>.ord", "<builtin>.isinstance"], "_psutil_aix.virtual_mem": [], "_psutil_aix.swap_mem": [], "_psutil_aix.per_cpu_times": [], "_psutil_aix.cpu_stats": [], "_psutil_aix.disk_partitions": [], "_psutil_aix.net_connections": [], "_psutil_posix.net_if_addrs": [], "_psutil_aix.net_if_stats": [], "_psutil_aix.boot_time": [], "_psutil_aix.users": [], "psutil._psaix.wrap_exceptions": ["functools.wraps", "_functools.partial"], "psutil._psaix.wrap_exceptions.wrapper": ["psutil._psaix.Process.cpu_times", "psutil._psaix.Process.create_time", "psutil._psaix.Process.status", "psutil._psaix.Process.num_fds", "psutil._psaix.Process.terminal", "psutil._psaix.Process.ppid", "_common.ZombieProcess", "_common.AccessDenied", "psutil._psaix.Process.connections", "psutil._psaix.pid_exists", "psutil._psaix.Process.io_counters", "psutil._psaix.Process.uids", "psutil._psaix.Process.nice_set", "psutil._psaix.Process.nice_get", "psutil._psaix.Process.environ", "psutil._psaix.Process.wait", "psutil._psaix.Process.exe", "psutil._psaix.Process.num_ctx_switches", "psutil._psaix.Process.cwd", "psutil._psaix.Process.threads", "psutil._psaix.Process.name", "psutil._psaix.Process.memory_info", "psutil._psaix.Process.cmdline", "_common.NoSuchProcess", "psutil._psaix.Process.num_threads", "psutil._psaix.Process.gids"], "psutil._psaix.Process": ["psutil._psaix.wrap_exceptions", "_common.memoize_when_activated"], "psutil._psaix.Process._proc_basic_info": ["_psutil_aix.proc_basic_info"], "_psutil_aix.proc_basic_info": [], "psutil._psaix.Process._proc_cred": ["_psutil_aix.proc_cred"], "_psutil_aix.proc_cred": [], "_psutil_aix.proc_name": [], "_psutil_aix.proc_args": [], "_psutil_aix.proc_environ": [], "_psutil_aix.proc_threads": [], "_psutil_aix.proc_cpu_times": [], "_psutil_aix.proc_num_ctx_switches": [], "_psutil_aix.proc_io_counters": [], "tty.setraw": [], "logging.handlers.BaseRotatingHandler": [], "logging.handlers.BaseRotatingHandler.emit": ["logging.Handler.handleError", "logging.FileHandler.emit", "logging.handlers.RotatingFileHandler.doRollover", "logging.handlers.RotatingFileHandler.shouldRollover"], "logging.handlers.RotatingFileHandler.shouldRollover": ["<builtin>.len", "logging.FileHandler._open", "logging.Handler.format"], "logging.handlers.RotatingFileHandler.doRollover": ["ntpath.exists", "logging.handlers.BaseRotatingHandler.rotation_filename", "posixpath.exists", "<builtin>.range", "logging.FileHandler._open", "logging.handlers.BaseRotatingHandler.rotate"], "logging.handlers.BaseRotatingHandler.rotation_filename": ["<builtin>.callable"], "logging.handlers.BaseRotatingHandler.rotate": ["<builtin>.callable", "ntpath.exists", "posixpath.exists"], "logging.handlers.RotatingFileHandler": [], "logging.handlers.TimedRotatingFileHandler": [], "logging.handlers.TimedRotatingFileHandler.__init__": ["time.time", "logging.handlers.TimedRotatingFileHandler.computeRollover", "logging.handlers.BaseRotatingHandler.__init__", "<builtin>.int", "ntpath.exists", "<builtin>.ValueError", "re.compile", "posixpath.exists", "<builtin>.len"], "logging.handlers.TimedRotatingFileHandler.computeRollover": ["time.localtime", "time.gmtime"], "logging.handlers.TimedRotatingFileHandler.shouldRollover": ["time.time", "<builtin>.int"], "logging.handlers.TimedRotatingFileHandler.getFilesToDelete": ["posixpath.join", "ntpath.join", "ntpath.split", "posixpath.split", "<builtin>.len"], "logging.handlers.TimedRotatingFileHandler.doRollover": ["time.time", "logging.handlers.TimedRotatingFileHandler.computeRollover", "time.gmtime", "<builtin>.int", "logging.handlers.BaseRotatingHandler.rotation_filename", "ntpath.exists", "time.strftime", "logging.handlers.TimedRotatingFileHandler.getFilesToDelete", "time.localtime", "posixpath.exists", "logging.FileHandler._open", "logging.handlers.BaseRotatingHandler.rotate"], "logging.handlers.WatchedFileHandler": [], "logging.handlers.WatchedFileHandler._statstream": [], "logging.handlers.WatchedFileHandler.reopenIfNeeded": ["logging.FileHandler._open", "logging.handlers.WatchedFileHandler._statstream"], "logging.handlers.WatchedFileHandler.emit": ["logging.handlers.WatchedFileHandler.reopenIfNeeded", "logging.FileHandler.emit"], "logging.handlers.SocketHandler": [], "logging.handlers.SocketHandler.__init__": ["logging.Handler.__init__"], "logging.handlers.SocketHandler.makeSocket": [], "logging.handlers.SocketHandler.createSocket": ["time.time", "logging.handlers.SocketHandler.makeSocket"], "logging.handlers.SocketHandler.send": ["logging.handlers.SocketHandler.createSocket"], "logging.handlers.SocketHandler.makePickle": ["<builtin>.len", "logging.Handler.format", "<builtin>.dict"], "logging.handlers.SocketHandler.handleError": ["logging.Handler.handleError"], "logging.handlers.SocketHandler.emit": ["logging.handlers.SocketHandler.send", "logging.handlers.SocketHandler.handleError", "logging.handlers.SocketHandler.makePickle"], "logging.handlers.SocketHandler.close": ["logging.FileHandler.close", "logging.Handler.close", "logging.Handler.acquire", "logging.Handler.release"], "logging.handlers.DatagramHandler": [], "logging.handlers.DatagramHandler.__init__": ["logging.handlers.SocketHandler.__init__"], "logging.handlers.DatagramHandler.makeSocket": [], "logging.handlers.DatagramHandler.send": ["logging.handlers.SocketHandler.createSocket"], "logging.handlers.SysLogHandler": [], "logging.handlers.SysLogHandler.__init__": ["logging.handlers.SysLogHandler._connect_unixsocket", "<builtin>.OSError", "<builtin>.isinstance", "logging.Handler.__init__"], "logging.handlers.SysLogHandler._connect_unixsocket": [], "logging.handlers.SysLogHandler.encodePriority": ["<builtin>.isinstance"], "logging.handlers.SysLogHandler.close": ["logging.FileHandler.close", "logging.Handler.close", "logging.Handler.acquire", "logging.Handler.release"], "logging.handlers.SysLogHandler.mapPriority": [], "logging.handlers.SysLogHandler.emit": ["logging.handlers.SysLogHandler.mapPriority", "logging.Handler.format", "logging.Handler.handleError", "logging.handlers.SysLogHandler._connect_unixsocket", "logging.handlers.SysLogHandler.encodePriority"], "logging.handlers.SMTPHandler": [], "logging.handlers.SMTPHandler.__init__": ["<builtin>.isinstance", "logging.Handler.__init__"], "logging.handlers.SMTPHandler.getSubject": [], "smtplib.SMTP.__init__": ["smtplib.SMTPResponseException.__init__", "smtplib.SMTP.connect", "smtplib.SMTP.close"], "smtplib.SMTP.ehlo": ["<builtin>.isinstance", "smtplib.SMTP.close", "re.match", "<builtin>.len", "smtplib.SMTP.getreply", "<builtin>.repr", "smtplib.SMTP.putcmd"], "smtplib.SMTP.login": ["smtplib.SMTP.ehlo_or_helo_if_needed", "<builtin>.getattr", "smtplib.SMTP.has_extn", "smtplib.SMTP.auth"], "smtplib.SMTP.send_message": ["email.message.Message.get_all", "smtplib.SMTP.sendmail", "io.BytesIO", "<builtin>.ValueError", "email._policybase._PolicyBase.clone", "smtplib.SMTP.ehlo_or_helo_if_needed", "<builtin>.len", "smtplib.SMTP.has_extn"], "smtplib.SMTP.quit": ["smtplib.SMTP.docmd", "smtplib.SMTP.close"], "logging.handlers.NTEventLogHandler": [], "logging.handlers.NTEventLogHandler.__init__": ["posixpath.join", "ntpath.join", "ntpath.split", "posixpath.split", "<builtin>.print", "win32evtlogutil.AddSourceToRegistry", "logging.Handler.__init__"], "win32evtlogutil.AddSourceToRegistry": [], "logging.handlers.NTEventLogHandler.getMessageID": [], "logging.handlers.NTEventLogHandler.getEventCategory": [], "logging.handlers.NTEventLogHandler.getEventType": [], "logging.handlers.NTEventLogHandler.emit": ["win32evtlogutil.ReportEvent", "logging.handlers.NTEventLogHandler.getEventType", "logging.Handler.format", "logging.handlers.NTEventLogHandler.getMessageID", "logging.handlers.NTEventLogHandler.getEventCategory", "logging.Handler.handleError"], "win32evtlogutil.ReportEvent": [], "logging.handlers.NTEventLogHandler.close": ["logging.FileHandler.close", "logging.Handler.close"], "logging.handlers.HTTPHandler": [], "logging.handlers.HTTPHandler.__init__": ["<builtin>.ValueError", "logging.Handler.__init__"], "logging.handlers.HTTPHandler.mapLogRecord": [], "logging.handlers.BufferingHandler": [], "logging.handlers.BufferingHandler.__init__": ["logging.Handler.__init__"], "logging.handlers.BufferingHandler.shouldFlush": ["<builtin>.len"], "logging.handlers.BufferingHandler.emit": ["logging.handlers.BufferingHandler.shouldFlush", "logging.handlers.BufferingHandler.flush"], "logging.handlers.BufferingHandler.flush": ["logging.Handler.acquire", "logging.Handler.release"], "logging.handlers.BufferingHandler.close": ["logging.FileHandler.close", "logging.Handler.close", "logging.handlers.BufferingHandler.flush"], "logging.handlers.MemoryHandler": [], "logging.handlers.MemoryHandler.__init__": ["logging.handlers.BufferingHandler.__init__"], "logging.handlers.MemoryHandler.shouldFlush": ["<builtin>.len"], "logging.handlers.MemoryHandler.setTarget": [], "logging.handlers.MemoryHandler.flush": ["logging.Handler.acquire", "logging.Handler.release"], "logging.handlers.MemoryHandler.close": ["logging.handlers.BufferingHandler.close", "logging.handlers.MemoryHandler.flush", "logging.Handler.acquire", "logging.Handler.release"], "logging.handlers.QueueHandler": [], "logging.handlers.QueueHandler.__init__": ["logging.Handler.__init__"], "logging.handlers.QueueHandler.enqueue": [], "logging.handlers.QueueHandler.prepare": ["logging.Handler.format"], "logging.handlers.QueueHandler.emit": ["logging.handlers.QueueHandler.enqueue", "logging.handlers.QueueHandler.prepare", "logging.Handler.handleError"], "logging.handlers.QueueListener": [], "logging.handlers.QueueListener.__init__": [], "logging.handlers.QueueListener.dequeue": [], "logging.handlers.QueueListener.start": ["threading.Thread.start", "threading.Thread.__init__"], "logging.handlers.QueueListener.prepare": [], "logging.handlers.QueueListener.handle": ["logging.handlers.QueueListener.prepare"], "logging.handlers.QueueListener.enqueue_sentinel": [], "logging.handlers.QueueListener.stop": ["threading._DummyThread.join", "threading.Thread.join", "logging.handlers.QueueListener.enqueue_sentinel"], "smtplib.SMTPException": [], "smtplib.SMTPNotSupportedError": [], "smtplib.SMTPServerDisconnected": [], "smtplib.SMTPResponseException": [], "smtplib.SMTPResponseException.__init__": [], "smtplib.SMTPSenderRefused": [], "smtplib.SMTPSenderRefused.__init__": [], "smtplib.SMTPRecipientsRefused": [], "smtplib.SMTPRecipientsRefused.__init__": [], "smtplib.SMTPDataError": [], "smtplib.SMTPConnectError": [], "smtplib.SMTPHeloError": [], "smtplib.SMTPAuthenticationError": [], "smtplib.quoteaddr": [], "smtplib._addr_only": [], "smtplib.quotedata": ["re.sub"], "smtplib._quote_periods": ["re.sub"], "smtplib._fix_eols": ["re.sub"], "smtplib.SMTP": [], "smtplib.SMTP.connect": ["smtplib.SMTP._print_debug", "<builtin>.int", "smtplib.SMTP._get_socket", "sys.audit", "smtplib.SMTP.getreply", "<builtin>.repr", "<builtin>.OSError"], "smtplib.SMTP.close": [], "smtplib.SMTP.__enter__": [], "smtplib.SMTP.__exit__": ["smtplib.SMTP.docmd", "smtplib.SMTP.close", "smtplib.SMTPResponseException.__init__"], "smtplib.SMTP.docmd": ["smtplib.SMTP.getreply", "smtplib.SMTP.putcmd"], "smtplib.SMTP.set_debuglevel": [], "smtplib.SMTP._print_debug": ["<builtin>.print"], "smtplib.SMTP._get_socket": ["smtplib.SMTP._print_debug"], "smtplib.SMTP.getreply": ["smtplib.SMTP._print_debug", "<builtin>.int", "<builtin>.str", "smtplib.SMTPResponseException.__init__", "smtplib.SMTP.close", "<builtin>.len", "<builtin>.repr"], "smtplib.SMTP.send": ["smtplib.SMTP._print_debug", "<builtin>.isinstance", "smtplib.SMTP.close", "sys.audit", "<builtin>.repr"], "smtplib.SMTP.putcmd": ["smtplib.SMTP.send"], "smtplib.SMTP.helo": ["smtplib.SMTP.getreply", "smtplib.SMTP.putcmd"], "smtplib.SMTP.has_extn": [], "smtplib.SMTP.help": ["smtplib.SMTP.getreply", "smtplib.SMTP.putcmd"], "smtplib.SMTP.rset": ["smtplib.SMTP.docmd"], "smtplib.SMTP._rset": ["smtplib.SMTP.rset"], "smtplib.SMTP.noop": ["smtplib.SMTP.docmd"], "smtplib.SMTP.mail": ["smtplib.quoteaddr", "<builtin>.any", "smtplib.SMTP.getreply", "smtplib.SMTP.has_extn", "smtplib.SMTP.putcmd"], "smtplib.SMTP.rcpt": ["smtplib.quoteaddr", "smtplib.SMTP.getreply", "smtplib.SMTP.putcmd"], "smtplib.SMTP.data": ["smtplib.SMTP._print_debug", "<builtin>.isinstance", "smtplib.SMTPResponseException.__init__", "smtplib._quote_periods", "smtplib.SMTP.send", "smtplib._fix_eols", "smtplib.SMTP.getreply", "smtplib.SMTP.putcmd"], "smtplib.SMTP.verify": ["smtplib.SMTP.putcmd", "smtplib.SMTP.getreply", "smtplib._addr_only"], "smtplib.SMTP.expn": ["smtplib.SMTP.putcmd", "smtplib.SMTP.getreply", "smtplib._addr_only"], "smtplib.SMTP.ehlo_or_helo_if_needed": ["smtplib.SMTPResponseException.__init__", "smtplib.SMTP.ehlo", "smtplib.SMTP.helo"], "smtplib.SMTP.auth": ["base64.decodebytes", "smtplib.SMTP.docmd", "email.base64mime.body_encode", "smtplib.SMTPResponseException.__init__"], "smtplib.SMTP.auth_cram_md5": ["hmac.HMAC.__init__", "hmac.HMAC.hexdigest"], "hmac.HMAC.__init__": ["<builtin>.hasattr", "<builtin>.isinstance", "<builtin>.callable", "warnings.warn", "<builtin>.type", "hmac.HMAC.update", "<builtin>.TypeError", "<builtin>.len", "hmac.HMAC.__init__.<lambda1>", "hmac.HMAC.__init__.<lambda2>"], "hmac.HMAC.hexdigest": ["hmac.HMAC._current"], "smtplib.SMTP.auth_plain": [], "smtplib.SMTP.auth_login": [], "smtplib.SMTP.sendmail": ["smtplib.SMTP._rset", "<builtin>.isinstance", "smtplib.SMTPSenderRefused.__init__", "smtplib.SMTP.data", "smtplib.SMTP.rcpt", "smtplib.SMTP.close", "smtplib.SMTPResponseException.__init__", "smtplib.SMTP.ehlo_or_helo_if_needed", "<builtin>.len", "smtplib.SMTP.mail", "smtplib.SMTPRecipientsRefused.__init__", "smtplib._fix_eols", "smtplib.SMTP.has_extn"], "smtplib.SMTP_SSL": [], "smtplib.SMTP_SSL._get_socket": ["smtplib.SMTP._print_debug"], "smtplib.LMTP": [], "smtplib.LMTP.__init__": ["smtplib.SMTP.__init__"], "smtplib.LMTP.connect": ["smtplib.SMTP.connect", "smtplib.SMTP._print_debug", "smtplib.SMTP.getreply"], "smtplib.prompt": ["sys.stdout.flush", "sys.stdin.readline", "sys.stdout.write"], "hmac.HMAC": [], "hmac.HMAC.__init__.<lambda1>": [], "hmac.HMAC.__init__.<lambda2>": [], "hmac.HMAC.update": [], "hmac.HMAC.name": [], "hmac.HMAC.copy": [], "hmac.HMAC._current": [], "hmac.HMAC.digest": ["hmac.HMAC._current"], "hmac.new": ["hmac.HMAC.__init__"], "hmac.digest": ["hmac.digest.<lambda2>", "hmac.digest.<lambda1>", "<builtin>.isinstance", "<builtin>.callable", "<builtin>.len", "<builtin>.getattr"], "hmac.digest.<lambda1>": [], "hmac.digest.<lambda2>": [], "queue.Empty": [], "queue.Full": [], "queue.Queue": [], "queue.Queue.__init__": ["threading.Condition.__init__", "queue.Queue._init"], "queue.Queue._init": ["_collections.deque"], "queue.Queue.task_done": ["<builtin>.ValueError", "threading.Condition.notify_all"], "queue.Queue.join": ["threading.Condition.wait"], "queue.Queue.qsize": ["queue.Queue._qsize"], "queue.Queue._qsize": ["<builtin>.len"], "queue.Queue.empty": ["queue.Queue._qsize"], "queue.Queue.full": ["queue.Queue._qsize"], "queue.Queue.put": ["threading.Condition.wait", "time.monotonic", "queue.Queue._qsize", "queue.Queue._put", "<builtin>.ValueError", "threading.Condition.notify"], "queue.Queue._put": [], "queue.Queue.get": ["threading.Condition.wait", "time.monotonic", "queue.Queue._qsize", "queue.Queue._get", "<builtin>.ValueError", "threading.Condition.notify"], "queue.Queue._get": [], "queue.Queue.put_nowait": ["queue.Queue.put"], "queue.Queue.get_nowait": ["queue.Queue.get"], "queue.PriorityQueue": [], "queue.PriorityQueue._init": [], "queue.PriorityQueue._qsize": ["<builtin>.len"], "queue.PriorityQueue._put": ["heapq.heappush"], "queue.PriorityQueue._get": ["heapq.heappop"], "queue.LifoQueue": [], "queue.LifoQueue._init": [], "queue.LifoQueue._qsize": ["<builtin>.len"], "queue.LifoQueue._put": [], "queue.LifoQueue._get": [], "queue._PySimpleQueue": [], "queue._PySimpleQueue.__init__": ["threading.Semaphore.__init__", "_collections.deque"], "queue._PySimpleQueue.put": ["threading.Semaphore.release"], "queue._PySimpleQueue.get": ["threading.Semaphore.acquire", "<builtin>.ValueError"], "queue._PySimpleQueue.put_nowait": ["queue._PySimpleQueue.put"], "queue._PySimpleQueue.get_nowait": ["queue._PySimpleQueue.get"], "queue._PySimpleQueue.empty": ["<builtin>.len"], "queue._PySimpleQueue.qsize": ["<builtin>.len"]}