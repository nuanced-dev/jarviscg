{"_py_abc": ["_weakrefset", "_py_abc.ABCMeta"], "_weakrefset": ["_weakrefset._IterationGuard", "_weakrefset.WeakSet"], "abc": ["abc.abstractproperty", "abc.abstractclassmethod", "_py_abc", "abc.abstractstaticmethod", "abc.ABCMeta", "abc.ABC"], "functools": ["collections", "reprlib", "collections.namedtuple", "functools._HashedSeq", "abc", "functools.singledispatchmethod", "functools.cached_property", "functools.partialmethod", "functools.partial", "<builtin>.object"], "_collections_abc": ["_collections_abc.ItemsView", "abc", "_collections_abc.MutableSet", "_collections_abc.Set", "_collections_abc.MutableMapping", "<builtin>.range", "_collections_abc.MutableSequence", "_collections_abc.Sequence", "_collections_abc.Hashable", "_collections_abc.MappingView", "<builtin>.zip", "_collections_abc.ByteString", "<builtin>.iter", "_collections_abc.Sized", "_collections_abc.KeysView", "_collections_abc.AsyncIterable", "_collections_abc.AsyncGenerator", "_collections_abc.Callable", "_collections_abc.Container", "_collections_abc.Collection", "_collections_abc.Awaitable", "<builtin>.set", "_collections_abc.ValuesView", "_collections_abc.Mapping", "<builtin>.bytearray", "_collections_abc.Iterable", "_collections_abc.AsyncIterator", "_collections_abc.Generator", "_collections_abc.Coroutine", "_collections_abc.Reversible", "<builtin>.reversed", "<builtin>.type", "_collections_abc.Iterator"], "operator.methodcaller.__reduce__": ["_functools.partial", "functools"], "collections": ["_collections_abc.MutableSequence.register", "collections._OrderedDictItemsView", "collections.UserDict", "collections.UserList", "reprlib", "collections._OrderedDictKeysView", "collections._OrderedDictValuesView", "collections._Link", "keyword", "operator", "collections.Counter", "collections.ChainMap", "collections.UserString", "heapq", "collections.OrderedDict"], "operator": ["operator.itemgetter", "operator.attrgetter", "operator.methodcaller"], "keyword": ["<builtin>.frozenset"], "heapq": ["doctest", "<builtin>.print", "_heapq", "doctest.testmod"], "_heapq": [], "doctest": ["doctest.DocFileCase", "traceback", "difflib", "doctest.DocTestParser", "doctest.Example", "linecache", "doctest._TestClass", "collections", "re", "doctest._SpoofOut", "doctest.DocTestRunner", "doctest.SkipDocTestCase", "doctest.register_optionflag", "doctest.DocTestCase", "doctest.DocTest", "inspect", "unittest", "os", "doctest.DebugRunner", "__future__", "collections.namedtuple", "doctest._DocTestSuite", "doctest._OutputRedirectingPdb", "doctest.DocTestFailure", "sys.exit", "doctest.OutputChecker", "doctest.UnexpectedException", "doctest.DocTestFinder", "io", "doctest._test"], "__future__": ["__future__._Feature", "__future__._Feature.__init__"], "difflib": ["difflib.HtmlDiff", "collections", "re", "collections.namedtuple", "difflib.SequenceMatcher", "difflib.Differ", "difflib._test", "heapq"], "re": ["re.Scanner", "functools.lru_cache", "sre_parse", "enum", "copyreg.pickle", "<builtin>.globals", "<builtin>.type", "functools.lru_cache.decorating_function", "functools._lru_cache_wrapper.wrapper", "functools.update_wrapper.wrapper", "sre_compile.compile", "functools", "<builtin>.chr", "functools.singledispatchmethod.__get__._method", "functools.singledispatch.wrapper", "copyreg", "re.RegexFlag", "sre_compile"], "difflib._mdiff": ["<builtin>.next", "re", "difflib.ndiff", "difflib._mdiff._line_pair_iterator", "re.compile"], "difflib._test": ["doctest", "difflib", "doctest.testmod"], "inspect": ["inspect._empty", "abc", "inspect.Signature", "inspect.Parameter", "linecache", "<builtin>.hasattr", "<builtin>.object", "collections", "re", "token", "types", "inspect.EndOfBlock", "inspect._main", "inspect._void", "os", "tokenize", "inspect._ParameterKind", "enum", "collections.namedtuple", "collections.abc", "operator", "inspect.BlockFinder", "dis", "<builtin>.globals", "warnings", "functools", "inspect.BoundArguments", "<builtin>.type", "importlib.machinery"], "dis": ["collections", "collections.namedtuple", "types", "opcode", "io", "dis.Instruction", "dis._test", "dis.Bytecode"], "types": ["types._GeneratorWrapper", "<builtin>.object", "types.DynamicClassAttribute", "<builtin>.globals", "types._cell_factory", "types._g", "sys.exc_info", "<builtin>.type", "types._C"], "io": ["io.RawIOBase", "io.BufferedIOBase", "abc", "_io._RawIOBase.register", "_io._IOBase.register", "io.IOBase", "io.TextIOBase"], "opcode": ["opcode.def_op", "opcode.jabs_op", "opcode.name_op", "_opcode", "opcode.jrel_op", "<builtin>.range"], "_opcode": [], "os": ["os.PathLike", "os._createenviron", "<builtin>.ImportError", "os._fscodec", "posixpath", "os._get_exports_list", "abc", "os._Environ", "<builtin>.globals", "collections.abc", "stat", "os._add", "os._exists", "<builtin>.set", "os._wrap_close", "os._AddedDllDirectory", "os._Environ.__init__", "ntpath"], "stat": [], "posixpath": ["stat", "os", "genericpath"], "genericpath": ["stat", "os"], "posixpath.expandvars": ["re", "<builtin>.isinstance", "<builtin>.len", "re.compile", "<builtin>.getattr"], "ntpath": ["genericpath", "stat", "sys.getwindowsversion", "os", "<builtin>.hasattr"], "string": ["string.Formatter", "collections", "re", "string._TemplateMetaclass", "string.Template"], "ntpath.expandvars": ["<builtin>.bytes", "<builtin>.isinstance", "<builtin>.len", "string", "<builtin>.getattr"], "os.path": ["stat", "os", "genericpath"], "os.path.expandvars": ["re", "<builtin>.isinstance", "<builtin>.len", "re.compile", "<builtin>.getattr"], "linecache": ["tokenize", "os", "functools"], "encodings": ["codecs", "encodings.CodecRegistryError"], "codecs": ["codecs.IncrementalDecoder", "codecs.CodecInfo", "codecs.Codec", "codecs.StreamRecoder", "encodings", "codecs.StreamReaderWriter", "<builtin>.SystemError", "codecs.BufferedIncrementalDecoder", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.BufferedIncrementalEncoder", "codecs.EncodedFile"], "encodings.mbcs": ["encodings.mbcs.IncrementalDecoder", "encodings.mbcs.StreamReader", "encodings.mbcs.StreamWriter", "encodings.mbcs.IncrementalEncoder", "codecs"], "encodings._alias_mbcs": ["_winapi.GetACP", "encodings.mbcs", "encodings.mbcs.getregentry"], "tokenize": ["<builtin>.map", "tokenize.main", "collections", "re", "tokenize.group", "<builtin>.sorted", "token", "tokenize._all_string_prefixes", "tokenize.maybe", "tokenize.TokenError", "tokenize.StopTokenizing", "io", "tokenize.TokenInfo", "tokenize.any", "codecs", "tokenize.Untokenizer", "re.compile", "<builtin>.set"], "token": ["<builtin>.globals", "<builtin>.isinstance"], "tokenize.main": ["tokenize.main.error", "builtins.open", "argparse.ArgumentParser.__init__", "argparse", "tokenize.tokenize", "<builtin>.list", "argparse.ArgumentParser.parse_args", "<builtin>.print", "tokenize.main.perror", "argparse._ActionsContainer.add_argument", "tokenize._tokenize"], "argparse": ["gettext", "argparse._StoreConstAction", "argparse.Namespace", "argparse.ArgumentParser", "argparse._SubParsersAction", "re", "argparse.HelpFormatter", "argparse._MutuallyExclusiveGroup", "argparse._StoreFalseAction", "shutil", "os", "argparse._VersionAction", "argparse._StoreAction", "argparse._AppendConstAction", "argparse.MetavarTypeHelpFormatter", "argparse.ArgumentDefaultsHelpFormatter", "argparse.ArgumentError", "argparse._CountAction", "argparse._ActionsContainer", "argparse._AppendAction", "argparse._StoreTrueAction", "argparse.FileType", "argparse.RawDescriptionHelpFormatter", "argparse.Action", "argparse.RawTextHelpFormatter", "argparse._AttributeHolder", "argparse._ExtendAction", "argparse._ArgumentGroup", "argparse.ArgumentTypeError", "argparse._HelpAction"], "warnings._formatwarnmsg_impl": ["tracemalloc.get_object_traceback", "linecache.getline", "tracemalloc", "linecache"], "collections.abc": ["collections.abc"], "tracemalloc": ["pickle", "posixpath", "tracemalloc.StatisticDiff", "tracemalloc.Statistic", "tracemalloc.Filter", "collections.abc", "tracemalloc.Frame", "tracemalloc.Traceback", "tracemalloc.Trace", "tracemalloc.Snapshot", "functools", "tracemalloc.BaseFilter", "fnmatch", "tracemalloc._Traces", "tracemalloc.DomainFilter", "linecache"], "fnmatch": ["functools.lru_cache", "re", "posixpath", "functools.lru_cache.decorating_function", "functools._lru_cache_wrapper.wrapper", "functools.update_wrapper.wrapper", "functools", "functools.singledispatchmethod.__get__._method", "functools.singledispatch.wrapper", "os"], "pickle": ["_compat_pickle", "argparse.ArgumentParser.__init__", "pickle._Framer", "pickle._Pickler", "re.match", "<builtin>.dir", "re", "pickle.PicklingError", "_pickle", "types", "argparse.ArgumentParser.parse_args", "pickle._load", "argparse.FileType.__init__", "struct", "pickle._Unpickler", "pprint", "argparse", "pickle._test", "pickle._Unframer", "argparse.ArgumentParser.print_help", "copyreg", "pickle.UnpicklingError", "pickle.PickleError", "io", "functools", "codecs", "argparse._ActionsContainer.add_argument", "unittest.main.TestProgram._print_help", "pickle._Stop"], "copyreg": ["copyreg.pickle"], "struct": ["_struct"], "_struct": [], "_compat_pickle": ["<builtin>.dict", "<builtin>.len"], "_pickle": [], "pickle._test": ["doctest", "doctest.testmod"], "pprint": ["collections", "re", "<builtin>.frozenset", "types", "pprint.PrettyPrinter", "io", "pprint._safe_key", "pprint._perfcheck", "<builtin>.type"], "warnings.filterwarnings": ["re", "<builtin>.isinstance", "<builtin>.issubclass", "warnings._add_filter", "re.compile"], "warnings._setoption": ["re", "warnings._getcategory", "warnings._getaction", "re.escape", "<builtin>.int", "<builtin>.len", "warnings.filterwarnings", "sys.warnoptions.split"], "warnings.warn_explicit": ["_warnings._onceregistry.get", "<builtin>.int", "<builtin>.isinstance", "warnings.WarningMessage.__init__", "<builtin>.RuntimeError", "<builtin>.issubclass", "warnings._showwarnmsg", "linecache.getlines", "<builtin>.str", "linecache"], "warnings._warn_unawaited_coroutine": ["traceback.format_list", "<builtin>.list", "warnings._warn_unawaited_coroutine.extract", "_warnings.warn", "traceback", "linecache"], "traceback": ["collections", "traceback.FrameSummary", "traceback.TracebackException", "traceback.StackSummary", "linecache"], "os.get_exec_path": ["<builtin>.isinstance", "warnings", "warnings.catch_warnings.__init__", "<builtin>.ValueError", "warnings.simplefilter"], "warnings": ["warnings.catch_warnings", "warnings._OptionError", "warnings.filterwarnings", "warnings._processoptions", "warnings.WarningMessage", "warnings.simplefilter", "<builtin>.hasattr"], "subprocess": ["selectors", "subprocess.CalledProcessError", "subprocess.CompletedProcess", "subprocess.TimeoutExpired", "subprocess.Handle", "<builtin>.hasattr", "subprocess.Popen", "os", "select", "subprocess.SubprocessError", "contextlib", "threading", "_posixsubprocess", "signal", "subprocess._use_posix_spawn", "subprocess.STARTUPINFO", "warnings", "io", "<builtin>.getattr"], "signal": ["enum", "<builtin>.globals", "_functools.partial", "functools.wraps", "functools"], "enum": ["enum.Flag", "<builtin>.object", "enum.EnumMeta", "types", "enum.IntEnum", "enum.auto", "enum.IntFlag", "enum.Enum", "enum._EnumDict"], "threading": ["threading.Thread", "_threading_local", "_thread.allocate_lock", "itertools.count", "threading.BoundedSemaphore", "traceback", "<builtin>.hasattr", "collections", "threading.Timer", "_weakrefset", "threading.Condition", "threading.Semaphore", "os", "threading._RLock", "collections.namedtuple", "threading.Barrier", "_weakrefset.WeakSet.__init__", "threading._MainThread", "<builtin>.set", "threading.Event", "threading._DummyThread", "threading.BrokenBarrierError", "threading._MainThread.__init__"], "threading.Thread.isAlive": ["threading.Thread.is_alive", "threading._DummyThread.is_alive", "warnings", "warnings.warn"], "weakref": ["weakref.finalize", "_weakrefset", "weakref.WeakKeyDictionary", "collections.abc", "weakref.WeakMethod", "weakref.KeyedRef", "weakref.WeakValueDictionary"], "copy": ["copy.Error", "types", "<builtin>.getattr", "copyreg", "<builtin>.type", "weakref"], "weakref.WeakValueDictionary.__deepcopy__": ["copy", "copy.deepcopy", "_weakrefset._IterationGuard.__init__", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakKeyDictionary.__deepcopy__": ["copy", "copy.deepcopy", "_weakrefset._IterationGuard.__init__"], "weakref.finalize.__init__": ["<builtin>.tuple", "<builtin>.next", "_weakref.ref", "warnings", "warnings.warn", "<builtin>.len", "atexit.register", "<builtin>.TypeError"], "_threading_local": ["contextlib.contextmanager", "_threading_local._localimpl", "contextlib", "threading", "_threading_local.local", "weakref"], "contextlib": ["contextlib.AbstractAsyncContextManager", "contextlib.nullcontext", "contextlib.redirect_stderr", "abc", "contextlib._GeneratorContextManagerBase", "contextlib.closing", "contextlib._RedirectStream", "contextlib.ContextDecorator", "collections", "contextlib._BaseExitStack", "types", "contextlib.AbstractContextManager", "contextlib.AsyncExitStack", "contextlib._GeneratorContextManager", "contextlib._AsyncGeneratorContextManager", "collections.abc", "contextlib.suppress", "contextlib.ExitStack", "contextlib.redirect_stdout", "functools"], "contextlib._BaseExitStack.callback": ["warnings.warn", "<builtin>.TypeError", "warnings", "<builtin>.len"], "contextlib.AsyncExitStack.push_async_callback": ["warnings.warn", "<builtin>.TypeError", "warnings", "<builtin>.len"], "_posixsubprocess": [], "select": [], "selectors": ["selectors.PollSelector", "collections", "selectors._PollLikeSelector", "collections.namedtuple", "abc", "<builtin>.globals", "selectors.BaseSelector", "math", "collections.abc", "selectors.KqueueSelector", "selectors._BaseSelectorImpl", "selectors.DevpollSelector", "selectors.EpollSelector", "selectors.SelectSelector", "selectors._SelectorMapping", "select", "<builtin>.hasattr"], "math": [], "os.popen": ["os._wrap_close.__init__", "subprocess.Popen.__init__", "<builtin>.isinstance", "<builtin>.TypeError", "io.TextIOWrapper", "subprocess", "io", "<builtin>.ValueError", "<builtin>.type"], "os.fdopen": ["io.open", "<builtin>.isinstance", "<builtin>.TypeError", "io", "<builtin>.type"], "shutil": ["shutil.ReadError", "shutil._GiveupOnFastCopy", "collections", "grp", "collections.namedtuple", "lzma", "sys.platform.startswith", "shutil.RegistryError", "zlib", "shutil.SameFileError", "stat", "shutil.Error", "shutil.ExecError", "bz2", "fnmatch", "shutil.SpecialFileError", "os", "<builtin>.hasattr"], "zlib": [], "bz2": ["_bz2", "bz2.BZ2File", "warnings", "io", "_compression", "threading", "os", "<builtin>.object"], "_compression": ["_compression.DecompressReader", "io", "_compression.BaseStream"], "_bz2": [], "lzma": ["lzma.LZMAFile", "_lzma", "io", "_compression", "os"], "_lzma": [], "grp": [], "tarfile": ["tarfile.TarInfo", "tarfile.ExFileObject", "tarfile.StreamError", "tarfile.ExtractError", "stat", "tarfile.HeaderError", "tarfile.ReadError", "tarfile._LowLevelFile", "re", "grp", "tarfile._Stream", "sys.getfilesystemencoding", "tarfile.EmptyHeaderError", "tarfile.SubsequentHeaderError", "tarfile.EOFHeaderError", "shutil", "tarfile.InvalidHeaderError", "os", "struct", "tarfile.TarError", "tarfile._FileInFile", "tarfile.CompressionError", "tarfile.TarFile", "io", "tarfile._StreamProxy", "copy", "tarfile.TruncatedHeaderError", "tarfile.main"], "tarfile._Stream.__init__": ["tarfile._Stream._init_write_gz", "lzma", "zlib", "tarfile._StreamProxy.getcomptype", "tarfile._LowLevelFile.close", "tarfile._StreamProxy.close", "tarfile._Stream._init_read_gz", "bz2", "tarfile._StreamProxy.__init__", "tarfile._LowLevelFile.__init__"], "gzip": ["struct", "gzip.GzipFile", "zlib", "gzip.main", "io", "gzip._GzipReader", "_compression", "gzip._PaddedFile", "os", "gzip.BadGzipFile"], "gzip.GzipFile.filename": ["warnings", "warnings.warn"], "gzip.main": ["gzip.GzipFile.__init__", "argparse.ArgumentParser.__init__", "argparse._ActionsContainer.add_mutually_exclusive_group", "gzip.GzipFile.read", "gzip.GzipFile.write", "sys.stdout.buffer.close", "bz2.BZ2File.close", "bz2.BZ2File.write", "argparse.ArgumentParser.parse_args", "<builtin>.repr", "lzma.LZMAFile.close", "argparse._ActionsContainer.add_argument", "builtins.open", "argparse", "bz2.BZ2File.read", "sys.stdin.buffer.close", "<builtin>.print", "sys.stdin.buffer.read", "lzma.LZMAFile.read", "sys.stdout.buffer.write", "gzip.GzipFile.close", "lzma.LZMAFile.write", "gzip.open", "asyncio.windows_utils.PipeHandle.close"], "tarfile.TarFile.gzopen": ["gzip.GzipFile.__init__", "gzip.GzipFile.close", "tarfile.TarFile.taropen", "<builtin>.ValueError", "gzip"], "tarfile.TarFile.bz2open": ["bz2.BZ2File.close", "tarfile.TarFile.taropen", "bz2.BZ2File.__init__", "<builtin>.ValueError", "bz2"], "tarfile.TarFile.xzopen": ["lzma", "lzma.LZMAFile.__init__", "tarfile.TarFile.taropen", "<builtin>.ValueError", "lzma.LZMAFile.close"], "tarfile.main": ["tarfile.is_tarfile", "tarfile.TarFile.open", "argparse.ArgumentParser.exit", "argparse.ArgumentParser.__init__", "argparse", "argparse._ActionsContainer.add_mutually_exclusive_group", "argparse.ArgumentParser.parse_args", "<builtin>.len", "<builtin>.print", "argparse.ArgumentParser.format_help", "ntpath.splitext", "posixpath.splitext", "argparse._ActionsContainer.add_argument"], "shutil._make_tarball": ["shutil._get_uid", "ntpath.dirname", "posixpath.exists", "tarfile", "os.makedirs", "shutil._get_gid", "posixpath.dirname", "ntpath.exists", "<builtin>.ValueError"], "zipfile": ["zipfile.LZMADecompressor", "zipfile.Path", "posixpath", "zipfile.ZipFile", "zlib", "stat", "zipfile.ZipExtFile", "zipfile._Tellable", "shutil", "bz2", "os", "struct", "zipfile.LZMACompressor", "zipfile.ZipInfo", "binascii", "zipfile._SharedFile", "contextlib", "zipfile.PyZipFile", "importlib.util", "zipfile._ZipWriteFile", "threading", "zipfile.FastLookup", "zipfile.main", "zipfile.LargeZipFile", "lzma", "zipfile.CompleteDirs", "zipfile.BadZipFile", "io", "functools"], "binascii": [], "importlib.util": ["contextlib.contextmanager", "types", "warnings", "importlib.util.LazyLoader", "contextlib", "importlib.util._LazyModule", "functools"], "zipfile.ZipFile.comment": ["<builtin>.isinstance", "warnings", "<builtin>.TypeError", "<builtin>.len", "warnings.warn", "<builtin>.type"], "zipfile.ZipFile._writecheck": ["zipfile._check_compression", "warnings", "<builtin>.len", "warnings.warn", "<builtin>.ValueError"], "py_compile": ["sys.exit", "py_compile.main", "enum", "posixpath", "importlib.util", "py_compile.PyCompileError", "importlib._bootstrap_external", "py_compile.PycInvalidationMode", "traceback", "os", "importlib.machinery"], "importlib._bootstrap_external.decode_source": ["tokenize"], "importlib.metadata": ["posixpath", "abc", "importlib.metadata.PackageNotFoundError", "importlib.metadata.FastPath", "importlib.metadata.DistributionFinder", "collections", "re", "email", "zipfile", "pathlib", "os", "importlib.metadata.FileHash", "importlib.metadata.PathDistribution", "contextlib", "importlib", "operator", "importlib.metadata.PackagePath", "importlib.metadata.MetadataPathFinder", "importlib.metadata.Distribution", "importlib.metadata.EntryPoint", "configparser", "io", "csv", "functools", "importlib.metadata.Prepared", "importlib.abc"], "csv": ["csv.DictWriter", "re", "csv.Sniffer", "csv.excel_tab", "csv.unix_dialect", "csv.excel", "csv.Dialect", "_csv", "csv.DictReader", "io"], "_csv": [], "email.parser": ["email.parser.BytesParser", "email.parser.BytesHeaderParser", "email._policybase", "io", "email.parser.HeaderParser", "email.parser.Parser", "email.feedparser"], "email.feedparser": ["collections", "re", "email.feedparser.BytesFeedParser", "email._policybase", "email.feedparser.BufferedSubFile", "io", "email.errors", "email.feedparser.FeedParser", "re.compile", "<builtin>.object"], "email.errors": ["email.errors.NonASCIILocalPartDefect", "email.errors.ObsoleteHeaderDefect", "email.errors.BoundaryError", "email.errors.MessageParseError", "email.errors.UndecodableBytesDefect", "email.errors.HeaderDefect", "email.errors.InvalidHeaderDefect", "email.errors.NoBoundaryInMultipartDefect", "email.errors.CharsetError", "email.errors.MisplacedEnvelopeHeaderDefect", "email.errors.NonPrintableDefect", "email.errors.MessageDefect", "email.errors.MultipartConversionError", "email.errors.StartBoundaryNotFoundDefect", "email.errors.InvalidMultipartContentTransferEncodingDefect", "email.errors.InvalidBase64PaddingDefect", "email.errors.InvalidBase64LengthDefect", "email.errors.InvalidBase64CharactersDefect", "email.errors.HeaderMissingRequiredValue", "email.errors.MessageError", "email.errors.MissingHeaderBodySeparatorDefect", "email.errors.HeaderParseError", "email.errors.MultipartInvariantViolationDefect", "email.errors.FirstHeaderLineIsContinuationDefect", "email.errors.CloseBoundaryNotFoundDefect"], "email._policybase": ["email.charset", "abc", "email.header", "email._policybase.Policy", "email._policybase._PolicyBase.__init__", "email._policybase.Compat32", "email._policybase._PolicyBase", "email.utils"], "email.header": ["re", "email.charset", "email.header.Header", "email.quoprimime", "email.charset.Charset.__init__", "email.header._ValueFormatter", "binascii", "email.base64mime", "email.errors", "email.header._Accumulator", "re.compile"], "email.quoprimime": ["re", "<builtin>.ord", "<builtin>.chr", "<builtin>.range", "string"], "base64": ["base64.main", "struct", "re", "binascii"], "base64.encodestring": ["base64.encodebytes", "warnings", "warnings.warn"], "base64.decodestring": ["base64.decodebytes", "warnings", "warnings.warn"], "getopt": ["gettext", "getopt.getopt", "<builtin>.print", "os", "getopt.GetoptError"], "locale": ["locale._test", "re", "<builtin>.sorted", "locale._print_locale", "sys.platform.startswith", "encodings.aliases", "<builtin>.globals", "functools.wraps", "encodings", "<builtin>.print", "collections.abc", "_functools.partial", "functools", "re.compile", "<builtin>.hasattr"], "encodings.aliases": [], "locale.format": ["warnings", "<builtin>.repr", "<builtin>.len", "warnings.warn", "locale._format", "<builtin>.ValueError"], "locale.getdefaultlocale": ["<builtin>.int", "os", "locale._parse_localename", "_locale._getdefaultlocale"], "_bootlocale.getpreferredencoding": ["locale.getpreferredencoding", "locale", "_locale.nl_langinfo", "_locale._getdefaultlocale"], "locale.getpreferredencoding": ["_bootlocale", "locale.setlocale", "_bootlocale.getpreferredencoding", "locale.getdefaultlocale"], "_bootlocale": ["sys.platform.startswith", "<builtin>.hasattr"], "gettext": ["re", "gettext.GNUTranslations", "gettext.NullTranslations", "<builtin>.enumerate", "ntpath.join", "locale", "posixpath.join", "os", "re.compile"], "gettext._as_int": ["<builtin>.round", "<builtin>.TypeError", "warnings", "warnings.warn"], "gettext.NullTranslations.lgettext": ["warnings", "warnings.warn", "locale.getpreferredencoding", "warnings.filterwarnings", "warnings.catch_warnings.__init__"], "gettext.NullTranslations.lngettext": ["warnings", "warnings.warn", "locale.getpreferredencoding", "warnings.filterwarnings", "warnings.catch_warnings.__init__"], "gettext.NullTranslations.output_charset": ["warnings", "warnings.warn"], "gettext.NullTranslations.set_output_charset": ["warnings", "warnings.warn"], "gettext.GNUTranslations._parse": ["struct", "gettext.c2py", "<builtin>.enumerate", "<builtin>.OSError", "<builtin>.len", "gettext.GNUTranslations._get_versions", "<builtin>.range", "<builtin>.str", "<builtin>.getattr"], "gettext.GNUTranslations.lgettext": ["locale.getpreferredencoding", "<builtin>.object", "warnings", "warnings.warn"], "gettext.GNUTranslations.lngettext": ["locale.getpreferredencoding", "gettext.GNUTranslations._parse.<lambda1>", "warnings", "warnings.warn"], "gettext.translation": ["posixpath.abspath", "warnings", "gettext.find", "gettext.NullTranslations.__init__", "ntpath.abspath", "warnings.warn", "<builtin>.open", "warnings.filterwarnings", "warnings.catch_warnings.__init__", "<builtin>.FileNotFoundError", "copy"], "gettext.bind_textdomain_codeset": ["warnings", "warnings.warn"], "gettext.ldgettext": ["gettext.translation", "gettext.NullTranslations.lgettext", "warnings", "warnings.warn", "locale.getpreferredencoding", "warnings.filterwarnings", "warnings.catch_warnings.__init__"], "gettext.ldngettext": ["gettext.translation", "gettext.NullTranslations.lngettext", "warnings", "warnings.warn", "locale.getpreferredencoding", "warnings.filterwarnings", "warnings.catch_warnings.__init__"], "gettext.lgettext": ["gettext.ldgettext", "warnings", "warnings.warn", "warnings.filterwarnings", "warnings.catch_warnings.__init__"], "gettext.lngettext": ["warnings", "warnings.warn", "warnings.filterwarnings", "warnings.catch_warnings.__init__", "gettext.ldngettext"], "base64.main": ["sys.exit", "base64.decode", "base64.encode", "getopt", "base64.test", "<builtin>.print", "<builtin>.open"], "email.base64mime": ["binascii", "base64"], "email.charset": ["email.charset.Charset", "email.quoprimime", "email.base64mime", "email.errors", "functools", "email.encoders"], "email.encoders": ["quopri", "base64"], "quopri": ["quopri.main", "binascii"], "quopri.encodestring": ["io", "_io.BytesIO", "quopri.encode"], "quopri.decodestring": ["io", "_io.BytesIO", "quopri.decode"], "quopri.main": ["sys.exit", "sys.stderr.write", "getopt", "sys.stdin.buffer.close", "<builtin>.print", "<builtin>.open", "quopri.decode", "quopri.encode"], "email.utils": ["random", "re", "email.charset", "urllib.parse", "email._parseaddr", "socket", "datetime", "os", "re.compile"], "random": ["_random", "random.SystemRandom", "random.Random.__init__", "warnings", "bisect", "hashlib", "math", "random.Random", "collections.abc", "_sha512", "random._test", "os", "<builtin>.hasattr"], "bisect": ["_bisect"], "_bisect": [], "_sha512": [], "hashlib.__get_builtin_constructor": ["_sha1", "_md5", "_blake2", "_sha256", "<builtin>.ValueError", "_sha512", "_sha3"], "_sha1": [], "_md5": [], "_sha256": [], "_blake2": [], "_sha3": [], "hashlib": ["<builtin>.bytes", "hashlib.__get_openssl_constructor", "logging.exception", "<builtin>.globals", "logging", "hashlib.__get_builtin_constructor", "<builtin>.set", "_hashlib", "<builtin>.range"], "_hashlib": [], "logging": ["logging.StreamHandler", "logging.FileHandler", "logging._StderrHandler.__init__", "atexit.register", "logging.NullHandler", "posixpath.normcase", "logging.RootLogger", "traceback", "logging.Filter", "logging.LoggerAdapter", "<builtin>.hasattr", "re", "threading.RLock", "ntpath.normcase", "logging.Handler", "logging._StderrHandler", "logging.Formatter.__init__", "logging.Manager", "os", "weakref", "logging.PlaceHolder", "logging.Filterer", "logging.PercentStyle", "logging.BufferingFormatter", "collections.abc", "threading", "time.time", "weakref.WeakValueDictionary.__init__", "string", "logging.Manager.__init__", "logging.Formatter", "logging.StrFormatStyle", "logging.StringTemplateStyle", "warnings", "logging.LogRecord", "io", "logging.RootLogger.__init__", "logging.Logger"], "logging.Logger.__reduce__": ["pickle", "logging.getLogger"], "_random": [], "socket": ["socket._GiveupOnSendfile", "selectors", "socket.SocketIO", "<builtin>.object", "_socket", "enum", "os._get_exports_list", "socket.socket", "io", "sys.platform.lower", "<builtin>.hasattr", "os", "<builtin>.getattr"], "_socket": [], "datetime": ["datetime.datetime", "datetime.tzinfo", "datetime.timezone", "_datetime", "math", "datetime.time", "datetime._days_before_year", "datetime.timedelta", "datetime.date", "datetime.timezone._create"], "datetime._check_int_field": ["<builtin>.isinstance", "warnings", "<builtin>.TypeError", "warnings.warn", "<builtin>.type"], "_strptime": ["calendar", "re", "_strptime.TimeRE.__init__", "_strptime.LocaleTime", "_strptime.TimeRE", "locale", "datetime", "_thread.allocate_lock"], "calendar": ["calendar.LocaleHTMLCalendar", "calendar._localized_day", "calendar._localized_day.__init__", "calendar.different_locale", "calendar.TextCalendar", "calendar.HTMLCalendar", "calendar.Calendar.__init__", "calendar._localized_month", "calendar.IllegalWeekdayError", "datetime.datetime.date", "calendar.IllegalMonthError", "locale", "datetime", "calendar.LocaleTextCalendar", "calendar.main", "calendar._localized_month.__init__", "calendar.Calendar", "<builtin>.range"], "calendar.main": ["argparse.ArgumentParser.__init__", "calendar.HTMLCalendar.formatmonth", "argparse._ActionsContainer.add_argument_group", "<builtin>.dict", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.error", "sys.getdefaultencoding", "argparse", "calendar.TextCalendar.formatmonth", "calendar.LocaleHTMLCalendar.__init__", "sys.stdout.write", "calendar.TextCalendar.formatyear", "calendar.LocaleTextCalendar.__init__", "sys.exit", "sys.stdout.buffer.write", "calendar.Calendar.__init__", "calendar.HTMLCalendar.formatyearpage", "argparse._ActionsContainer.add_argument", "calendar.HTMLCalendar.formatyear"], "datetime.datetime.strptime": ["_strptime"], "_datetime": [], "urllib.parse": ["urllib.parse._fix_result_transcoding", "urllib.parse.SplitResultBytes", "urllib.parse.ParseResult", "urllib.parse._ResultMixinStr", "collections", "re", "urllib.parse._NetlocResultMixinBase", "urllib.parse._NetlocResultMixinBytes", "<builtin>.bytes", "urllib.parse.DefragResultBytes", "<builtin>.frozenset", "collections.namedtuple", "urllib.parse.SplitResult", "urllib.parse._NetlocResultMixinStr", "urllib.parse.ParseResultBytes", "urllib.parse.Quoter", "warnings", "urllib.parse._ResultMixinBytes", "urllib.parse.DefragResult", "re.compile"], "urllib.parse._checknetloc": ["unicodedata", "<builtin>.ValueError"], "unicodedata": [], "email._parseaddr": ["calendar", "email._parseaddr.AddressList", "email._parseaddr.AddrlistClass"], "email.message": ["re", "email.message.Message", "email.message.EmailMessage", "email.charset", "email._policybase", "email._encoded_words", "io", "email.errors", "uu", "email.message.MIMEPart", "quopri", "re.compile", "email.utils"], "uu": ["uu.Error", "os", "uu.test", "binascii"], "optparse": ["optparse.OptParseError", "optparse.OptionError", "optparse.BadOptionError", "optparse.Option", "optparse.AmbiguousOptionError", "optparse.HelpFormatter", "optparse.TitledHelpFormatter", "optparse.OptionGroup", "gettext", "optparse.OptionContainer", "textwrap", "optparse.OptionConflictError", "gettext.gettext", "optparse.OptionParser", "optparse.OptionValueError", "optparse.Values", "os", "optparse.IndentedHelpFormatter"], "textwrap": ["re", "<builtin>.print", "textwrap.TextWrapper", "textwrap.dedent", "re.compile"], "uu.test": ["sys.exit", "<builtin>.isinstance", "<builtin>.len", "optparse.OptionParser.parse_args", "optparse.OptionParser.error", "<builtin>.print", "optparse.OptionContainer.add_option", "<builtin>.open", "uu.decode", "uu.encode", "optparse.OptionParser.__init__", "optparse"], "email._encoded_words": ["re", "<builtin>.ord", "base64", "email._encoded_words._QByteMap", "binascii", "email.errors", "functools", "re.compile", "string"], "email.generator": ["random", "re", "email.generator.Generator", "<builtin>.repr", "<builtin>.len", "email.generator.BytesGenerator", "io", "email.generator.DecodedGenerator", "copy", "re.compile", "email.utils"], "email.message.Message.as_string": ["email.generator", "email.generator.Generator.flatten", "email.generator.Generator.__init__", "_io.StringIO"], "email.message.Message.as_bytes": ["email.generator", "email.generator.Generator.flatten", "_io.BytesIO", "email.generator.Generator.__init__"], "email.iterators": ["io"], "email.message.Message": ["email.iterators"], "email.policy": ["email._policybase._PolicyBase.clone", "email.headerregistry", "re", "email.message", "email.policy.EmailPolicy", "email._policybase", "email.utils", "email.policy.EmailPolicy.__init__", "re.compile", "email.contentmanager"], "email.headerregistry": ["email.headerregistry.ContentTypeHeader", "email.headerregistry.DateHeader", "email.headerregistry.UniqueUnstructuredHeader", "email.headerregistry.MIMEVersionHeader", "email._header_value_parser", "email.headerregistry.UnstructuredHeader", "email.headerregistry.UniqueAddressHeader", "types", "email.headerregistry.ContentDispositionHeader", "email.headerregistry.AddressHeader", "email.headerregistry.MessageIDHeader", "email.headerregistry.SingleAddressHeader", "email.headerregistry.UniqueDateHeader", "email.headerregistry.ContentTransferEncodingHeader", "email.headerregistry.HeaderRegistry", "email.headerregistry.BaseHeader", "email.headerregistry.Address", "email.headerregistry.Group", "email.errors", "email.headerregistry.ParameterizedMIMEHeader", "email.headerregistry.UniqueSingleAddressHeader", "email.utils"], "email._header_value_parser": ["email._header_value_parser.Header", "email._header_value_parser.CFWSList", "email._header_value_parser.Group", "email._header_value_parser.ContentTransferEncoding", "email._header_value_parser.HeaderLabel", "email._header_value_parser.AddressList", "email._header_value_parser.InvalidMessageID", "re.escape", "email._encoded_words", "email._header_value_parser.Phrase", "email._header_value_parser.ContentDisposition", "email._header_value_parser.QuotedString", "email._header_value_parser.UnstructuredTokenList", "email._header_value_parser.Address", "email._header_value_parser.ObsLocalPart", "email._header_value_parser.InvalidParameter", "email._header_value_parser.MessageID", "email._header_value_parser.Atom", "email._header_value_parser.EWWhiteSpaceTerminal", "re", "email._header_value_parser.Parameter", "email._header_value_parser.GroupList", "email._header_value_parser.MimeParameters", "email._header_value_parser.InvalidMailbox", "email._header_value_parser.ObsRoute", "email._header_value_parser.EncodedWord", "email._header_value_parser.DomainLiteral", "email._header_value_parser.ValueTerminal", "email._header_value_parser.Domain", "email._header_value_parser.AddrSpec", "email._header_value_parser.Token", "email._header_value_parser.WhiteSpaceTokenList", "email._header_value_parser.WhiteSpaceTerminal", "email._header_value_parser.Section", "operator", "email._header_value_parser.NameAddr", "email._header_value_parser.Mailbox", "<builtin>.set", "email._header_value_parser.BareQuotedString", "email._header_value_parser.DotAtom", "email._header_value_parser.Word", "email._header_value_parser.Attribute", "email._header_value_parser.MsgID", "email._header_value_parser.Terminal", "string", "email._header_value_parser.NoFoldLiteral", "email._header_value_parser.Comment", "email._header_value_parser.AngleAddr", "email._header_value_parser.ContentType", "email._header_value_parser.Value", "email._header_value_parser.DotAtomText", "email._header_value_parser.LocalPart", "email._header_value_parser.MailboxList", "email._header_value_parser.DisplayName", "urllib", "email._header_value_parser.ParameterizedHeaderValue", "email._header_value_parser._InvalidEwError", "email.errors", "email._header_value_parser.TokenList", "email._header_value_parser.MIMEVersion", "re.compile", "email.utils"], "urllib": [], "email.contentmanager": ["email.contentmanager.ContentManager", "email.contentmanager.ContentManager.add_set_handler", "email.message", "email.charset", "email.contentmanager.ContentManager.__init__", "email.quoprimime", "binascii", "email.contentmanager.ContentManager.add_get_handler", "email.errors"], "email.message.MIMEPart.__init__": ["email.message.Message.__init__", "email.policy"], "email.feedparser.FeedParser.__init__": ["email.feedparser.FeedParser._parsegen", "email.feedparser.BufferedSubFile.__init__", "email.message"], "email.message_from_string": ["email.parser.Parser.__init__", "email.parser.Parser.parsestr", "email.parser"], "email.message_from_bytes": ["email.parser.BytesParser.parsebytes", "email.parser.BytesParser.__init__", "email.parser"], "email.message_from_file": ["email.parser.Parser.__init__", "email.parser.Parser.parse", "email.parser"], "email.message_from_binary_file": ["email.parser.BytesParser.parse", "email.parser.BytesParser.__init__", "email.parser"], "email": [], "pathlib": ["pathlib._RecursiveWildcardSelector", "posixpath", "pathlib._PathParents", "stat", "pathlib._Accessor", "fnmatch", "pathlib.WindowsPath", "ntpath", "<builtin>.hasattr", "re", "pathlib._Flavour", "pathlib.PurePosixPath", "functools.lru_cache.decorating_function", "pathlib._WindowsFlavour", "pathlib._TerminatingSelector", "pathlib._PosixFlavour", "os", "functools", "functools.lru_cache", "urllib.parse", "pathlib._Selector", "pathlib.PureWindowsPath", "collections.abc", "operator", "pathlib.Path", "pathlib._NormalAccessor", "pathlib._WildcardSelector", "pathlib._Flavour.__init__", "pathlib.PosixPath", "pathlib.PurePath", "functools._lru_cache_wrapper.wrapper", "io", "sys.getwindowsversion", "functools.singledispatchmethod.__get__._method", "functools.singledispatch.wrapper", "pathlib._PreciseSelector"], "pathlib.Path.group": ["pathlib.Path.stat", "grp"], "configparser": ["configparser.DuplicateSectionError", "configparser.InterpolationMissingOptionError", "configparser.Interpolation", "configparser.InterpolationSyntaxError", "<builtin>.object", "configparser.DuplicateOptionError", "configparser.ExtendedInterpolation", "collections", "re", "configparser.NoSectionError", "configparser.ParsingError", "configparser.SectionProxy", "configparser.MissingSectionHeaderError", "configparser.NoOptionError", "configparser.Error", "os", "configparser.ConverterMapping", "configparser.LegacyInterpolation", "collections.abc", "configparser.ConfigParser", "configparser.BasicInterpolation", "configparser.InterpolationError", "configparser.RawConfigParser", "warnings", "io", "functools", "configparser.SafeConfigParser", "configparser.InterpolationDepthError"], "_frozen_importlib._install_external_importers": ["importlib._bootstrap_external"], "importlib._bootstrap_external": ["importlib._bootstrap_external._NamespaceLoader", "importlib._bootstrap_external._LoaderBasics", "importlib._bootstrap_external.ExtensionFileLoader", "importlib._bootstrap_external.PathFinder", "importlib._bootstrap_external.WindowsRegistryFinder", "importlib._bootstrap_external.SourcelessFileLoader", "importlib._bootstrap_external.FileFinder", "importlib._bootstrap_external.SourceFileLoader", "importlib._bootstrap_external._NamespacePath", "importlib._bootstrap_external.FileLoader", "importlib._bootstrap_external.SourceLoader", "<builtin>.type", "<builtin>.object"], "_frozen_importlib_external.decode_source": ["tokenize"], "_frozen_importlib_external.PathFinder.find_distributions": ["importlib.metadata", "importlib.metadata.MetadataPathFinder.find_distributions"], "importlib": ["_bootstrap_external._setup", "types", "warnings", "_frozen_importlib._setup", "_bootstrap._setup", "_frozen_importlib_external._setup", "importlib._bootstrap_external"], "importlib.abc": ["importlib.abc.FileLoader", "importlib.abc.ResourceReader", "importlib.abc.Finder", "importlib.abc.PathEntryFinder", "importlib.abc._register", "abc", "importlib.abc.ResourceLoader", "importlib.abc.InspectLoader", "warnings", "importlib.abc.SourceLoader", "importlib.abc.Loader", "importlib.abc.MetaPathFinder", "importlib._bootstrap_external", "importlib.abc.ExecutionLoader"], "importlib._bootstrap_external.PathFinder.find_distributions": ["importlib.metadata", "importlib.metadata.MetadataPathFinder.find_distributions"], "importlib.machinery": [], "zipfile.PyZipFile._get_codename._compile": ["<builtin>.print", "py_compile", "py_compile.compile"], "zipfile.main": ["ntpath.dirname", "ntpath.basename", "posixpath.basename", "argparse.ArgumentParser.__init__", "argparse", "argparse._ActionsContainer.add_mutually_exclusive_group", "argparse.ArgumentParser.parse_args", "<builtin>.print", "zipfile.main.addToZip", "posixpath.dirname", "zipfile.ZipFile.__init__", "argparse._ActionsContainer.add_argument"], "shutil._make_zipfile": ["posixpath.normpath", "ntpath.dirname", "posixpath.exists", "<builtin>.sorted", "os.walk", "zipfile", "posixpath.isfile", "os.makedirs", "ntpath.isfile", "ntpath.normpath", "ntpath.join", "posixpath.dirname", "ntpath.exists", "zipfile.ZipFile.__init__", "posixpath.join"], "shutil._unpack_zipfile": ["shutil._ensure_directory", "zipfile", "zipfile.ZipFile.infolist", "ntpath.join", "<builtin>.open", "zipfile.ZipFile.__init__", "zipfile.ZipFile.read", "posixpath.join", "zipfile.ZipFile.close", "zipfile.is_zipfile"], "shutil._unpack_tarfile": ["tarfile"], "argparse._copy_items": ["copy", "<builtin>.type"], "argparse.HelpFormatter._split_lines": ["textwrap.wrap", "textwrap"], "argparse.HelpFormatter._fill_text": ["textwrap.fill", "textwrap"], "argparse.ArgumentParser.parse_known_intermixed_args": ["argparse.ArgumentParser._get_optional_actions", "argparse.ArgumentParser._get_positional_actions", "warnings", "argparse.ArgumentParser.parse_known_args", "_warnings.warn", "<builtin>.getattr", "<builtin>.delattr", "argparse.ArgumentParser.format_usage", "<builtin>.TypeError", "<builtin>.hasattr"], "dis._test": ["<builtin>.compile", "argparse.ArgumentParser.__init__", "argparse", "argparse.ArgumentParser.parse_args", "argparse.FileType.__init__", "dis.dis", "argparse._ActionsContainer.add_argument"], "inspect.formatargspec": ["inspect.<lambda4>", "inspect.<lambda1>", "<builtin>.enumerate", "warnings", "<builtin>.len", "_warnings.warn", "inspect.formatargspec.formatargandannotation", "inspect.<lambda3>", "inspect.<lambda2>", "inspect.formatannotation"], "ast.get_docstring": ["inspect", "inspect.cleandoc", "<builtin>.isinstance", "<builtin>.TypeError"], "ast.walk": ["collections", "ast.iter_child_nodes"], "ast.NodeVisitor.visit_Constant": ["ast.NodeVisitor.generic_visit", "<builtin>.isinstance", "warnings", "warnings.warn", "<builtin>.type", "<builtin>.getattr"], "inspect._signature_fromstr": ["inspect.Signature.__init__", "inspect._signature_fromstr.p", "<builtin>.object", "sys.modules.copy", "inspect.ismodule", "<builtin>.zip", "sys.modules.get", "<builtin>.isinstance", "inspect._signature_strip_non_python_syntax", "<builtin>.list", "ast.parse", "itertools.zip_longest", "<builtin>.enumerate", "inspect._signature_fromstr.RewriteSymbolics", "<builtin>.ValueError", "<builtin>.reversed", "<builtin>.getattr", "ast"], "ast": ["ast.Bytes", "ast.NameConstant", "ast._ABC", "ast.Ellipsis", "<builtin>.property", "ast.NodeTransformer", "ast.NodeVisitor", "ast.Num", "ast.Str", "<builtin>.type"], "inspect._main": ["sys.exit", "inspect.getsource", "argparse.ArgumentParser.__init__", "argparse", "<builtin>.type", "inspect.getsourcefile", "argparse.ArgumentParser.parse_args", "<builtin>.repr", "<builtin>.print", "importlib", "importlib.import_module", "<builtin>.hasattr", "inspect.findsource", "argparse._ActionsContainer.add_argument", "<builtin>.getattr"], "unittest.result": ["unittest.util", "io", "unittest.result.TestResult", "functools", "traceback"], "unittest.util": ["posixpath", "collections", "collections.namedtuple"], "unittest": ["unittest.loader", "unittest.suite", "unittest.result", "unittest.main", "unittest.runner", "unittest.signals", "unittest.async_case", "unittest.case"], "asyncio.windows_events": ["asyncio.windows_events._WindowsSelectorEventLoop", "asyncio.windows_events.WindowsProactorEventLoopPolicy", "struct", "asyncio.windows_events._WaitHandleFuture", "asyncio.windows_events.IocpProactor", "asyncio.windows_events.ProactorEventLoop", "asyncio.proactor_events", "asyncio.windows_events._OverlappedFuture", "math", "asyncio.windows_events._WaitCancelFuture", "asyncio.windows_events._BaseWaitHandleFuture", "socket", "asyncio.windows_events._WindowsSubprocessTransport", "asyncio.windows_events.WindowsSelectorEventLoopPolicy", "asyncio.windows_utils", "asyncio.windows_events.PipeServer", "weakref"], "asyncio.proactor_events": ["signal", "asyncio.proactor_events._ProactorReadPipeTransport", "collections", "asyncio.proactor_events._ProactorBasePipeTransport", "asyncio.proactor_events._ProactorDatagramTransport", "asyncio.proactor_events._ProactorDuplexPipeTransport", "warnings", "asyncio.proactor_events._ProactorWritePipeTransport", "asyncio.proactor_events._ProactorBaseWritePipeTransport", "io", "socket", "asyncio.proactor_events.BaseProactorEventLoop", "threading", "asyncio.proactor_events._ProactorSocketTransport", "os"], "asyncio.windows_utils": ["<builtin>.ImportError", "asyncio.windows_utils.PipeHandle", "tempfile", "warnings", "subprocess", "itertools.count", "asyncio.windows_utils.Popen", "os"], "tempfile": ["random", "tempfile._TemporaryFileWrapper", "tempfile._RandomNameSequence", "warnings", "tempfile.SpooledTemporaryFile", "tempfile.TemporaryDirectory", "io", "tempfile._TemporaryFileCloser", "shutil", "_thread.allocate_lock", "functools", "<builtin>.hasattr", "os", "weakref"], "asyncio": ["asyncio.windows_events"], "unittest.async_case": ["inspect", "asyncio", "unittest.async_case.IsolatedAsyncioTestCase", "unittest.case"], "unittest.case": ["unittest.result", "unittest.case._SubTest", "unittest.case._AssertRaisesContext", "unittest.case.FunctionTestCase", "unittest.case._AssertLogsContext", "traceback", "difflib", "unittest.case._AssertWarnsContext", "<builtin>.object", "collections", "re", "unittest.case._Outcome", "unittest.case._UnexpectedSuccess", "types", "logging", "unittest.case._OrderedChainMap", "collections.namedtuple", "pprint", "unittest.case.SkipTest", "unittest.case._CapturingHandler", "unittest.util", "contextlib", "unittest.case.TestCase", "unittest.case._AssertRaisesBaseContext", "unittest.case._ShouldStop", "warnings", "unittest.case._BaseTestCaseContext", "functools"], "unittest.case.TestCase.addCleanup": ["<builtin>.tuple", "warnings", "warnings.warn", "<builtin>.len", "<builtin>.TypeError"], "unittest.suite": ["unittest.suite._DebugResult", "unittest.suite.TestSuite", "unittest.util", "unittest.suite.BaseTestSuite", "unittest.suite._ErrorHolder", "unittest.case"], "unittest.loader": ["unittest.suite", "unittest.loader.TestLoader", "re", "types", "warnings", "unittest.loader._FailedTest", "unittest.loader.TestLoader.__init__", "unittest.util", "functools", "traceback", "fnmatch", "os", "unittest.case", "re.compile"], "unittest.main": ["unittest.loader", "unittest.runner", "argparse", "unittest.main.TestProgram", "unittest.signals", "os"], "unittest.runner": ["unittest.result", "unittest.runner.TextTestRunner", "warnings", "unittest.runner.TextTestResult", "unittest.signals", "unittest.runner._WritelnDecorator"], "unittest.signals": ["signal", "unittest.signals._InterruptHandler", "functools", "weakref.WeakKeyDictionary.__init__", "weakref"], "unittest.load_tests": ["posixpath"], "doctest._test": ["doctest.testmod", "<builtin>.__import__", "doctest.testfile", "argparse.ArgumentParser.__init__", "argparse", "argparse.ArgumentParser.parse_args", "posixpath.split", "sys.path.insert", "ntpath.split", "argparse._ActionsContainer.add_argument"], "reprlib": ["reprlib.Repr.__init__", "reprlib.Repr"], "collections.__getattr__": ["<builtin>.AttributeError", "<builtin>.globals", "warnings", "warnings.warn", "<builtin>.getattr"], "collections.UserDict.__init__": ["warnings.warn", "<builtin>.TypeError", "warnings", "<builtin>.len"], "collections.UserDict.copy": ["collections.UserDict.__init__", "copy"], "functools.partialmethod.__init__": ["<builtin>.tuple", "<builtin>.callable", "<builtin>.isinstance", "warnings", "warnings.warn", "<builtin>.len", "<builtin>.TypeError", "<builtin>.hasattr"], "functools.singledispatch": ["<builtin>.getattr", "types", "weakref.WeakKeyDictionary.__init__", "weakref"], "typing": ["typing._SpecialForm.__init__", "abc", "typing.SupportsComplex", "typing.NamedTuple", "typing.NamedTupleMeta", "typing.Generic", "typing.SupportsRound", "typing._GenericAlias.__init__", "typing.SupportsFloat", "typing.TypeVar.__init__", "collections", "re", "typing._GenericAlias", "typing.SupportsAbs", "types", "typing.BinaryIO", "typing.SupportsIndex", "typing._Final", "typing.TypedDict", "typing.TextIO", "typing.Protocol", "typing._ProtocolMeta", "typing._SpecialForm", "typing.IO", "typing.re", "typing._VariadicGenericAlias", "typing.ForwardRef", "contextlib", "collections.abc", "typing._Immutable", "operator", "typing._TypingEmpty", "typing.SupportsInt", "typing.SupportsBytes", "typing._TypingEllipsis", "typing.io", "typing._TypedDictMeta", "typing.TypeVar", "functools", "typing._alias"], "typing.NamedTuple.__new__": ["typing._make_nmtuple", "warnings", "<builtin>.len", "warnings.warn", "<builtin>.TypeError"], "functools.singledispatch.register": ["_py_abc.get_cache_token", "<builtin>.next", "_collections_abc.MutableMapping.clear", "_abc.get_cache_token", "<builtin>.hasattr", "collections.ChainMap.clear", "<builtin>.isinstance", "typing.get_type_hints", "<builtin>.iter", "typing", "<builtin>.TypeError", "<builtin>.getattr"], "types.coroutine": ["<builtin>.callable", "functools.wraps", "collections.abc", "_functools.partial", "functools", "<builtin>.TypeError", "<builtin>.getattr"], "enum.EnumMeta._convert": ["enum.EnumMeta._convert_", "warnings", "warnings.warn"], "sre_parse": ["<builtin>.frozenset", "<builtin>.ord", "sre_parse.SubPattern", "sre_constants", "sre_parse.Tokenizer", "sre_parse.Verbose", "sre_parse.State"], "sre_constants": ["sre_constants.dump", "<builtin>.print", "sre_constants._NamedIntConstant", "<builtin>.open", "sre_constants._makecodes", "sre_constants.error"], "sre_parse._class_escape": ["<builtin>.ord", "sre_parse.Tokenizer.match", "sre_parse.Tokenizer.error", "unicodedata", "sre_parse.Tokenizer.getuntil", "<builtin>.len", "<builtin>.chr", "sre_parse.Tokenizer.getwhile", "<builtin>.int"], "sre_parse._escape": ["sre_parse.State.checkgroup", "<builtin>.ord", "sre_parse.Tokenizer.match", "sre_parse.Tokenizer.get", "sre_parse.Tokenizer.error", "unicodedata", "sre_parse.Tokenizer.getuntil", "<builtin>.len", "<builtin>.chr", "sre_parse.Tokenizer.getwhile", "<builtin>.int", "sre_parse.State.checklookbehindgroup"], "sre_parse._parse": ["sre_parse.State.opengroup", "sre_parse.SubPattern.append", "sre_parse._uniq", "<builtin>.range", "sre_parse.Tokenizer.seek", "sre_parse.Tokenizer.get", "<builtin>.AssertionError", "sre_parse.SubPattern.__init__", "sre_parse._class_escape", "sre_parse._escape", "warnings.warn", "<builtin>.len", "sre_parse.Tokenizer.tell", "<builtin>.int", "sre_parse._parse_flags", "sre_parse._parse", "sre_parse.State.checklookbehindgroup", "sre_parse.State.checkgroup", "sre_parse._parse_sub", "sre_parse.Tokenizer.match", "sre_parse.Tokenizer.error", "warnings", "sre_parse.State.closegroup", "<builtin>.OverflowError", "sre_parse.Tokenizer.getuntil"], "sre_compile": ["<builtin>.tuple", "sre_constants", "sre_parse"], "re.Scanner.__init__": ["sre_parse.State.opengroup", "sre_parse.parse", "<builtin>.isinstance", "sre_parse.SubPattern.append", "sre_constants", "sre_parse.State.__init__", "sre_parse.SubPattern.__init__", "sre_compile.compile", "sre_parse.State.closegroup"], "furl.furl": ["furl.common", "posixpath", "abc", "re.escape", "furl.furl.FragmentCompositionInterface", "furl.furl.URLPathCompositionInterface", "furl.compat", "six", "re", "furl.furl.FragmentPathCompositionInterface", "furl.furl.Fragment", "furl.furl.Path", "furl.omdict1D", "furl.furl.furl", "furl.furl.PathCompositionInterface", "furl.furl.Query", "furl.furl.static_vars", "furl.furl.static_vars.decorator", "furl.furl.QueryCompositionInterface", "warnings", "copy", "re.compile"], "six": ["operator.itemgetter.__init__", "six.Module_six_moves_urllib_robotparser", "<builtin>.isinstance", "six._MovedItems", "six.exec_", "sys.meta_path.append", "six._LazyModule", "<builtin>.setattr", "six._LazyModule.__init__", "types", "six._LazyDescr", "six.Module_six_moves_urllib_error", "six.MovedAttribute.__init__", "six.Iterator", "operator.attrgetter.__init__", "__future__", "struct", "six._SixMetaPathImporter._add_module", "<builtin>.enumerate", "six.MovedAttribute", "six.Module_six_moves_urllib_parse", "<builtin>.len", "six._SixMetaPathImporter.__init__", "six._SixMetaPathImporter", "importlib.util", "operator", "six.Module_six_moves_urllib_response", "six.Module_six_moves_urllib", "<builtin>.int", "sys.platform.startswith", "six.Module_six_moves_urllib_request", "<builtin>.globals", "six.MovedModule", "six.MovedModule.__init__", "six._add_doc", "io", "functools", "operator.methodcaller.__init__", "<builtin>.type", "six.X", "<builtin>.getattr"], "orderedmultidict": ["posixpath", "<builtin>.globals", "<builtin>.dict", "orderedmultidict.orderedmultidict", "<builtin>.exec", "<builtin>.open", "posixpath.dirname", "posixpath.join"], "orderedmultidict.orderedmultidict": ["six", "collections", "orderedmultidict.itemlist", "collections.abc", "orderedmultidict.orderedmultidict.omdict", "__future__", "<builtin>.object"], "orderedmultidict.itemlist": ["orderedmultidict.itemlist.itemlist", "orderedmultidict.itemlist.itemnode", "__future__", "<builtin>.object"], "furl.omdict1D": ["furl.common", "furl.omdict1D.omdict1D", "orderedmultidict"], "furl.compat": ["furl.compat.UnicodeMixin", "collections", "<builtin>.list"], "furl.common": ["furl.compat", "<builtin>.object"], "furl": ["<builtin>.globals", "furl.furl", "<builtin>.dict", "furl.__version__"], "furl.__version__": [], "<builtin>.dict": [], "<builtin>.globals": [], "furl.furl.<lambda1>": ["<builtin>.len"], "<builtin>.len": [], "furl.furl.lget": [], "furl.furl.attemptstr": ["<builtin>.str"], "<builtin>.str": [], "furl.furl.utf8": [], "furl.furl.non_string_iterable": ["furl.common.callable_attr", "<builtin>.isinstance"], "furl.common.callable_attr": ["<builtin>.callable", "<builtin>.getattr", "<builtin>.hasattr"], "<builtin>.isinstance": [], "furl.furl.idna_encode": ["furl.common.callable_attr", "<builtin>.str"], "furl.furl.idna_decode": ["furl.furl.utf8", "furl.common.callable_attr"], "furl.furl.is_valid_port": ["<builtin>.int", "<builtin>.str"], "<builtin>.int": [], "furl.furl.static_vars": [], "furl.furl.static_vars.decorator": ["<builtin>.setattr", "six.iteritems"], "six.iteritems": ["ordereddict.OrderedDict.items", "_collections.OrderedDict.items", "ordereddict.OrderedDict.iteritems", "<builtin>.iter", "_collections.OrderedDict.iteritems"], "<builtin>.setattr": [], "furl.furl.create_quote_fn": [], "furl.furl.create_quote_fn.quote_fn": ["<builtin>.set", "six.moves.urllib.parse.quote"], "<builtin>.set": [], "six.moves.urllib.parse.quote": [], "re.escape": ["<builtin>.str", "<builtin>.isinstance"], "re.compile": ["re._compile"], "furl.furl.is_valid_encoded_path_segment": [], "furl.furl.is_valid_encoded_query_key": [], "furl.furl.is_valid_encoded_query_value": [], "furl.furl.is_valid_scheme": [], "furl.furl.is_valid_host": [], "furl.furl.get_scheme": ["<builtin>.max", "furl.furl.is_valid_scheme"], "<builtin>.max": [], "furl.furl.strip_scheme": ["furl.furl.get_scheme", "<builtin>.len"], "furl.furl.set_scheme": ["furl.furl.strip_scheme"], "furl.furl.has_netloc": ["furl.furl.get_scheme"], "furl.furl.urlsplit": ["furl.furl.get_scheme", "furl.furl.set_scheme", "six.moves.urllib.parse.urlsplit", "six.moves.urllib.parse.SplitResult", "furl.furl.strip_scheme"], "six.moves.urllib.parse.urlsplit": [], "six.moves.urllib.parse.SplitResult": [], "furl.furl.urljoin": ["furl.furl.set_scheme", "six.moves.urllib.parse.urljoin", "furl.furl.has_netloc", "furl.furl.get_scheme"], "six.moves.urllib.parse.urljoin": [], "furl.furl.join_path_segments": ["<builtin>.len"], "furl.furl.remove_path_segments": ["<builtin>.list", "<builtin>.len"], "<builtin>.list": [], "furl.furl.quacks_like_a_path_with_segments": ["furl.common.is_iterable_but_not_string", "<builtin>.hasattr"], "<builtin>.hasattr": [], "furl.common.is_iterable_but_not_string": ["furl.common.callable_attr", "<builtin>.isinstance"], "furl.furl.Path": [], "furl.furl.Path.__init__": ["furl.furl.Path.load"], "furl.furl.Path.load": ["furl.furl.PathCompositionInterface._force_absolute", "furl.furl.quacks_like_a_path_with_segments", "furl.furl.Path.<lambda1>", "furl.common.is_iterable_but_not_string", "<builtin>.len", "email.message.Message.__init__", "furl.furl.Path.__init__", "furl.furl.Path._segments_from_path"], "furl.furl.Path._segments_from_path": ["six.moves.urllib.parse.unquote", "furl.furl.utf8", "<builtin>.isinstance", "warnings.warn", "furl.furl.is_valid_encoded_path_segment", "furl.furl.Path._path_from_segments", "six.moves.urllib.parse.quote"], "furl.furl.PathCompositionInterface._force_absolute": [], "furl.furl.Path.<lambda1>": [], "email.message.Message.__init__": [], "furl.furl.Path.add": ["furl.furl.quacks_like_a_path_with_segments", "furl.common.is_iterable_but_not_string", "furl.furl.Path._segments_from_path", "furl.furl.Path.load", "furl.furl.join_path_segments"], "furl.furl.Path.set": ["furl.furl.Path.load"], "furl.furl.Path.remove": ["furl.furl.remove_path_segments", "furl.furl.Path.load", "furl.furl.Path._segments_from_path", "furl.common.is_iterable_but_not_string"], "furl.furl.Path.normalize": ["posixpath.normpath", "furl.furl.Path.load", "<builtin>.str"], "posixpath.normpath": ["sys.path.split", "sys.base_prefix.split", "<builtin>.isinstance", "sys.base_prefix.startswith", "sys.path.startswith"], "furl.furl.Path.asdict": ["<builtin>.str"], "furl.furl.Path.isabsolute": ["furl.furl.PathCompositionInterface._force_absolute", "furl.furl.Path.<lambda1>", "<builtin>.AttributeError", "email.message.Message.__init__", "furl.furl.Path.__init__"], "<builtin>.AttributeError": [], "furl.furl.Path.isdir": [], "furl.furl.Path.isfile": [], "furl.furl.Path.__truediv__": ["furl.furl.Path.add", "copy.deepcopy"], "copy.deepcopy": ["<builtin>.id", "<builtin>.isinstance", "copy._deepcopy_atomic", "<builtin>.issubclass", "copy._reconstruct", "<builtin>.type", "copy._keep_alive", "<builtin>.getattr"], "furl.furl.Path.__eq__": ["<builtin>.str"], "furl.furl.Path.__ne__": [], "furl.furl.Path.__bool__": ["<builtin>.len"], "furl.furl.Path.__str__": ["furl.furl.Path._path_from_segments", "<builtin>.list"], "furl.furl.Path._path_from_segments": ["furl.furl.utf8", "furl.furl.attemptstr", "six.moves.urllib.parse.quote"], "furl.furl.Path.__repr__": ["<builtin>.str"], "warnings.warn": ["warnings._is_internal_frame", "_warnings.warn_explicit", "warnings._next_external_frame", "sys._getframe", "<builtin>.isinstance", "<builtin>.TypeError", "sys.__dict__.setdefault", "<builtin>.issubclass", "<builtin>.range", "<builtin>.type"], "six.moves.urllib.parse.unquote": [], "furl.furl.PathCompositionInterface": ["abc.abstractmethod"], "furl.furl.PathCompositionInterface.__init__": ["furl.furl.Path.__init__"], "furl.furl.PathCompositionInterface.path": [], "furl.furl.PathCompositionInterface.pathstr": ["<builtin>.str", "warnings.warn"], "abc.abstractmethod": [], "furl.furl.PathCompositionInterface.__setattr__": ["furl.furl.Path.load"], "furl.furl.URLPathCompositionInterface": [], "furl.furl.URLPathCompositionInterface.__init__": ["furl.furl.PathCompositionInterface.__init__"], "furl.furl.URLPathCompositionInterface._force_absolute": ["<builtin>.bool"], "<builtin>.bool": [], "furl.furl.FragmentPathCompositionInterface": [], "furl.furl.FragmentPathCompositionInterface.__init__": ["furl.furl.PathCompositionInterface.__init__"], "furl.furl.FragmentPathCompositionInterface._force_absolute": [], "furl.furl.Query": [], "furl.furl.Query.__init__": ["orderedmultidict.orderedmultidict.omdict.__init__", "furl.furl.Query.load"], "orderedmultidict.orderedmultidict.omdict.__init__": ["orderedmultidict.itemlist.itemlist.__init__", "_collections.OrderedDict", "ordereddict.OrderedDict", "orderedmultidict.orderedmultidict.omdict.load"], "furl.furl.Query.load": ["furl.furl.Query._items"], "furl.furl.Query._items": ["furl.common.callable_attr", "furl.furl.Query._extract_items_from_querystr", "<builtin>.isinstance", "<builtin>.list"], "furl.furl.Query.add": ["furl.furl.Query._items"], "furl.furl.Query.set": [], "furl.furl.Query.remove": ["furl.furl.Query.load", "furl.furl.non_string_iterable", "<builtin>.len", "furl.furl.Query._items", "furl.common.callable_attr"], "furl.furl.Query.params": ["orderedmultidict.orderedmultidict.omdict.clear", "furl.furl.Query._items", "furl.omdict1D.omdict1D.add"], "orderedmultidict.orderedmultidict.omdict.clear": ["_collections.OrderedDict.clear", "orderedmultidict.itemlist.itemlist.clear", "ordereddict.OrderedDict.clear"], "furl.omdict1D.omdict1D.add": ["ordereddict.OrderedDict.setdefault", "_collections.OrderedDict.setdefault", "furl.common.is_iterable_but_not_string", "<builtin>.list", "orderedmultidict.itemlist.itemlist.append"], "furl.furl.Query.encode": ["furl.furl.utf8", "furl.furl.create_quote_fn", "furl.furl.attemptstr", "furl.furl.create_quote_fn.quote_fn"], "furl.furl.Query.asdict": ["<builtin>.str"], "furl.furl.Query.__eq__": ["<builtin>.str"], "furl.furl.Query.__ne__": [], "furl.furl.Query.__bool__": ["<builtin>.len"], "furl.furl.Query.__str__": ["furl.furl.Query.encode"], "furl.furl.Query.__repr__": ["<builtin>.str"], "furl.furl.Query._extract_items_from_querystr": ["six.moves.urllib.parse.unquote", "six.moves.urllib.parse.urlencode", "furl.furl.is_valid_encoded_query_value", "warnings.warn", "furl.furl.is_valid_encoded_query_key", "furl.furl.lget"], "six.moves.urllib.parse.urlencode": [], "furl.furl.QueryCompositionInterface": [], "furl.furl.QueryCompositionInterface.__init__": ["furl.furl.Query.__init__"], "furl.furl.QueryCompositionInterface.query": [], "furl.furl.QueryCompositionInterface.querystr": ["<builtin>.str", "warnings.warn"], "furl.furl.QueryCompositionInterface.args": [], "furl.furl.QueryCompositionInterface.__setattr__": ["furl.furl.Query.load"], "furl.furl.Fragment": [], "furl.furl.Fragment.__init__": ["furl.furl.FragmentPathCompositionInterface.__init__", "furl.furl.QueryCompositionInterface.__init__", "furl.furl.Fragment.load"], "furl.furl.Fragment.load": ["furl.furl.Path.load", "furl.furl.Query.load", "<builtin>.len"], "furl.furl.Fragment.add": [], "furl.furl.Fragment.set": [], "furl.furl.Fragment.remove": ["furl.furl.Fragment.load"], "furl.furl.Fragment.asdict": ["<builtin>.str"], "furl.furl.Fragment.__eq__": ["<builtin>.str"], "furl.furl.Fragment.__ne__": [], "furl.furl.Fragment.__setattr__": ["furl.furl.PathCompositionInterface.__setattr__", "furl.furl.QueryCompositionInterface.__setattr__", "furl.furl.Fragment.__setattr__"], "furl.furl.Fragment.__bool__": ["<builtin>.bool"], "furl.furl.Fragment.__str__": ["<builtin>.str"], "furl.furl.Fragment.__repr__": ["<builtin>.str"], "furl.furl.FragmentCompositionInterface": [], "furl.furl.FragmentCompositionInterface.__init__": ["furl.furl.Fragment.__init__"], "furl.furl.FragmentCompositionInterface.fragment": [], "furl.furl.FragmentCompositionInterface.fragmentstr": ["<builtin>.str", "warnings.warn"], "furl.furl.FragmentCompositionInterface.__setattr__": [], "furl.furl.furl": [], "furl.furl.furl.__init__": ["furl.furl.furl.load", "furl.furl.FragmentCompositionInterface.__init__", "furl.furl.furl.set", "furl.furl.QueryCompositionInterface.__init__", "furl.furl.URLPathCompositionInterface.__init__"], "furl.furl.furl.load": ["<builtin>.str", "<builtin>.isinstance", "furl.furl.urlsplit"], "furl.furl.furl.set": ["furl.furl.furl.load", "<builtin>.any", "furl.furl.furl.set.present", "warnings.warn", "<builtin>.sum"], "furl.furl.furl.scheme": ["furl.common.callable_attr"], "furl.furl.furl.host": ["furl.furl.is_valid_host", "furl.furl.idna_decode", "six.moves.urllib.parse.urlsplit", "<builtin>.ValueError", "furl.furl.lget", "furl.common.callable_attr"], "<builtin>.ValueError": [], "furl.furl.furl.port": ["furl.furl.is_valid_port", "<builtin>.int", "<builtin>.str", "<builtin>.ValueError"], "furl.furl.furl.netloc": ["six.moves.urllib.parse.unquote", "furl.furl.utf8", "furl.furl.idna_encode", "six.moves.urllib.parse.urlsplit", "<builtin>.ValueError", "<builtin>.str", "six.moves.urllib.parse.quote"], "furl.furl.furl.origin": ["furl.furl.idna_encode", "<builtin>.len"], "furl.furl.furl.url": ["furl.furl.furl.tostr", "furl.furl.furl.load"], "furl.furl.furl.tostr": ["<builtin>.str", "six.moves.urllib.parse.urlunsplit", "furl.furl.strip_scheme"], "furl.furl.furl.add": ["warnings.warn"], "furl.furl.furl.set.present": [], "<builtin>.sum": [], "<builtin>.any": [], "furl.furl.furl.remove": [], "six.moves.urllib.parse.urlunsplit": [], "furl.furl.furl.join": ["furl.furl.urljoin", "<builtin>.str", "furl.furl.furl.load", "<builtin>.isinstance"], "furl.furl.furl.copy": [], "furl.furl.furl.asdict": ["furl.furl.idna_encode"], "furl.furl.furl.__truediv__": ["furl.furl.furl.copy"], "furl.furl.furl.__eq__": [], "furl.furl.furl.__ne__": [], "furl.furl.furl.__setattr__": ["furl.furl.FragmentCompositionInterface.__setattr__", "furl.furl.PathCompositionInterface.__setattr__", "furl.furl.QueryCompositionInterface.__setattr__", "furl.furl.Fragment.__setattr__"], "furl.furl.furl.__unicode__": ["furl.furl.furl.tostr"], "furl.furl.furl.__repr__": ["<builtin>.str"], "sys.platform.startswith": [], "six.X": [], "six.X.__len__": [], "six._add_doc": [], "six._import_module": ["<builtin>.__import__"], "<builtin>.__import__": [], "six._LazyDescr": [], "six._LazyDescr.__init__": [], "six._LazyDescr.__get__": ["<builtin>.setattr", "six.MovedModule._resolve", "six.MovedAttribute._resolve", "<builtin>.delattr"], "six.MovedModule._resolve": ["six._import_module"], "six.MovedAttribute._resolve": ["<builtin>.getattr", "six._import_module"], "<builtin>.delattr": [], "six.MovedModule": [], "six.MovedModule.__init__": ["<builtin>.super"], "<builtin>.super": [], "six.MovedModule.__getattr__": ["<builtin>.setattr", "six.MovedModule._resolve", "<builtin>.getattr"], "<builtin>.getattr": [], "six._LazyModule": [], "six._LazyModule.__init__": ["<builtin>.super"], "six._LazyModule.__dir__": [], "six.MovedAttribute": [], "six.MovedAttribute.__init__": ["<builtin>.super"], "six._SixMetaPathImporter": [], "six._SixMetaPathImporter.__init__": [], "six._SixMetaPathImporter._add_module": [], "six._SixMetaPathImporter._get_module": [], "six._SixMetaPathImporter.find_module": [], "six._SixMetaPathImporter.find_spec": ["_bootstrap.spec_from_loader"], "_bootstrap.spec_from_loader": [], "six._SixMetaPathImporter.__get_module": ["<builtin>.ImportError"], "<builtin>.ImportError": [], "six._SixMetaPathImporter.load_module": ["<builtin>.isinstance", "six._SixMetaPathImporter.__get_module"], "six._SixMetaPathImporter.is_package": ["six._SixMetaPathImporter.__get_module", "<builtin>.hasattr"], "six._SixMetaPathImporter.get_code": ["six._SixMetaPathImporter.__get_module"], "six._SixMetaPathImporter.create_module": ["six._SixMetaPathImporter.load_module"], "six._SixMetaPathImporter.exec_module": [], "six._MovedItems": [], "six.Module_six_moves_urllib_parse": [], "six.Module_six_moves_urllib_error": [], "six.Module_six_moves_urllib_request": [], "six.Module_six_moves_urllib_response": [], "six.Module_six_moves_urllib_robotparser": [], "six.Module_six_moves_urllib": ["six._SixMetaPathImporter._get_module"], "six.Module_six_moves_urllib.__dir__": [], "six.add_move": ["<builtin>.setattr"], "six.remove_move": ["<builtin>.AttributeError", "<builtin>.delattr"], "six.advance_iterator": [], "six.callable": ["<builtin>.type", "<builtin>.any"], "<builtin>.type": [], "six.get_unbound_function": [], "six.create_unbound_method": [], "six.create_bound_method": [], "six.Iterator": [], "six.Iterator.next": ["<builtin>.type"], "operator.attrgetter.__init__": ["<builtin>.map", "<builtin>.tuple", "<builtin>.isinstance", "<builtin>.TypeError"], "six.iterkeys": ["ordereddict.OrderedDict.iterkeys", "_collections.OrderedDict.iterkeys", "ordereddict.OrderedDict.keys", "_collections.OrderedDict.keys", "<builtin>.iter"], "_collections.OrderedDict.keys": [], "ordereddict.OrderedDict.keys": [], "<builtin>.iter": [], "six.itervalues": ["<builtin>.iter"], "ordereddict.OrderedDict.items": [], "_collections.OrderedDict.items": [], "six.iterlists": ["<builtin>.iter"], "operator.methodcaller.__init__": ["<builtin>.isinstance", "<builtin>.TypeError"], "ordereddict.OrderedDict.iterkeys": [], "_collections.OrderedDict.iterkeys": [], "_collections.OrderedDict.iteritems": [], "ordereddict.OrderedDict.iteritems": [], "six.b": [], "six.u": [], "operator.itemgetter.__init__": [], "six.byte2int": ["<builtin>.ord"], "<builtin>.ord": [], "six.indexbytes": ["<builtin>.ord"], "six.assertCountEqual": ["<builtin>.getattr"], "six.assertRaisesRegex": ["<builtin>.getattr"], "six.assertRegex": ["<builtin>.getattr"], "six.assertNotRegex": ["<builtin>.getattr"], "six.reraise": [], "six.exec_": ["<builtin>.exec", "sys._getframe"], "sys._getframe": [], "<builtin>.exec": [], "six.raise_from": [], "six.print_": ["six.print_.write", "six.print_", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.TypeError"], "six.print_.write": ["<builtin>.str", "<builtin>.isinstance", "<builtin>.getattr"], "<builtin>.TypeError": [], "<builtin>.enumerate": [], "six._update_wrapper": ["<builtin>.setattr", "<builtin>.getattr"], "six.wraps": [], "six.with_metaclass": ["six.with_metaclass.metaclass"], "six.with_metaclass.metaclass": [], "six.with_metaclass.metaclass.__new__": ["types.resolve_bases"], "types.resolve_bases": ["<builtin>.tuple", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "<builtin>.TypeError", "<builtin>.hasattr"], "six.with_metaclass.metaclass.__prepare__": [], "six.add_metaclass": [], "six.add_metaclass.wrapper": ["<builtin>.isinstance", "<builtin>.hasattr"], "six.ensure_binary": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "six.ensure_str": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "six.ensure_text": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "six.python_2_unicode_compatible": ["<builtin>.ValueError"], "six.python_2_unicode_compatible.<lambda1>": [], "sys.meta_path.append": [], "__future__._Feature": [], "__future__._Feature.__init__": [], "__future__._Feature.getOptionalRelease": [], "__future__._Feature.getMandatoryRelease": [], "__future__._Feature.__repr__": ["<builtin>.repr"], "<builtin>.repr": [], "types._f": [], "types.<lambda1>": [], "types._cell_factory": [], "types._cell_factory.f": [], "types._g": [], "types._c": [], "types._ag": [], "types._C": [], "types._C._m": [], "<builtin>.object": [], "sys.exc_info": [], "types.new_class": ["types.resolve_bases", "types.prepare_class"], "types.prepare_class": ["<builtin>.isinstance", "<builtin>.dict", "types._calculate_meta", "<builtin>.type", "<builtin>.hasattr"], "<builtin>.tuple": [], "types._calculate_meta": ["<builtin>.issubclass", "<builtin>.type", "<builtin>.TypeError"], "<builtin>.issubclass": [], "types.DynamicClassAttribute": [], "types.DynamicClassAttribute.__init__": ["<builtin>.bool", "<builtin>.getattr"], "types.DynamicClassAttribute.__get__": ["<builtin>.AttributeError"], "types.DynamicClassAttribute.__set__": ["<builtin>.AttributeError"], "types.DynamicClassAttribute.__delete__": ["<builtin>.AttributeError"], "types.DynamicClassAttribute.getter": ["<builtin>.type"], "types.DynamicClassAttribute.setter": ["<builtin>.type"], "types.DynamicClassAttribute.deleter": ["<builtin>.type"], "types._GeneratorWrapper": [], "types._GeneratorWrapper.__init__": ["<builtin>.getattr"], "types._GeneratorWrapper.send": [], "types._GeneratorWrapper.throw": [], "types._GeneratorWrapper.close": [], "types._GeneratorWrapper.gi_code": [], "types._GeneratorWrapper.gi_frame": [], "types._GeneratorWrapper.gi_running": [], "types._GeneratorWrapper.gi_yieldfrom": [], "types._GeneratorWrapper.__next__": ["<builtin>.next"], "<builtin>.next": [], "types._GeneratorWrapper.__iter__": [], "<builtin>.callable": [], "functools.wraps": ["_functools.partial"], "_functools.partial": [], "types.coroutine.wrapped": ["<builtin>.isinstance", "types._GeneratorWrapper.__init__"], "<builtin>.bytearray": [], "<builtin>.reversed": [], "<builtin>.range": [], "<builtin>.zip": [], "_collections_abc.<lambda1>": [], "_collections_abc._coro": [], "_collections_abc._ag": [], "_collections_abc._check_methods": [], "_collections_abc.Hashable": ["abc.abstractmethod"], "_collections_abc.Hashable.__hash__": [], "_collections_abc.Hashable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Awaitable": ["abc.abstractmethod"], "_collections_abc.Awaitable.__await__": [], "_collections_abc.Awaitable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Coroutine": ["abc.abstractmethod"], "_collections_abc.Coroutine.send": [], "_collections_abc.Coroutine.throw": [], "_collections_abc.Coroutine.close": ["_collections_abc.Coroutine.throw", "<builtin>.RuntimeError"], "<builtin>.RuntimeError": [], "_collections_abc.Coroutine.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.AsyncIterable": ["abc.abstractmethod"], "_collections_abc.AsyncIterable.__aiter__": [], "_collections_abc.AsyncIterable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.AsyncIterator": ["abc.abstractmethod"], "_collections_abc.AsyncIterator.__anext__": [], "_collections_abc.AsyncIterator.__aiter__": [], "_collections_abc.AsyncIterator.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.AsyncGenerator": ["abc.abstractmethod"], "_collections_abc.AsyncGenerator.__anext__": ["_collections_abc.AsyncGenerator.asend"], "_collections_abc.AsyncGenerator.asend": [], "_collections_abc.AsyncGenerator.athrow": [], "_collections_abc.AsyncGenerator.aclose": ["<builtin>.RuntimeError", "_collections_abc.AsyncGenerator.athrow"], "_collections_abc.AsyncGenerator.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Iterable": ["abc.abstractmethod"], "_collections_abc.Iterable.__iter__": [], "_collections_abc.Iterable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Iterator": ["abc.abstractmethod"], "_collections_abc.Iterator.__next__": [], "_collections_abc.Iterator.__iter__": [], "_collections_abc.Iterator.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Reversible": ["abc.abstractmethod"], "_collections_abc.Reversible.__reversed__": [], "_collections_abc.Reversible.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Generator": ["abc.abstractmethod"], "_collections_abc.Generator.__next__": ["_collections_abc.Generator.send"], "_collections_abc.Generator.send": [], "_collections_abc.Generator.throw": [], "_collections_abc.Generator.close": ["_collections_abc.Generator.throw", "<builtin>.RuntimeError"], "_collections_abc.Generator.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Sized": ["abc.abstractmethod"], "_collections_abc.Sized.__len__": [], "_collections_abc.Sized.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Container": ["abc.abstractmethod"], "_collections_abc.Container.__contains__": [], "_collections_abc.Container.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Collection": [], "_collections_abc.Collection.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Callable": ["abc.abstractmethod"], "_collections_abc.Callable.__call__": [], "_collections_abc.Callable.__subclasshook__": ["_collections_abc._check_methods"], "_collections_abc.Set": [], "_collections_abc.Set.__le__": ["_collections_abc.Set.__iter__", "<builtin>.isinstance", "<builtin>.len"], "_collections_abc.Set.__iter__": [], "_collections_abc.Set.__lt__": ["<builtin>.isinstance", "_collections_abc.Set.__le__", "<builtin>.len"], "_collections_abc.Set.__gt__": ["_collections_abc.Set.__ge__", "<builtin>.isinstance", "<builtin>.len"], "_collections_abc.Set.__ge__": ["<builtin>.isinstance", "<builtin>.len"], "_collections_abc.Set.__eq__": ["<builtin>.isinstance", "_collections_abc.Set.__le__", "<builtin>.len"], "_collections_abc.Set._from_iterable": [], "_collections_abc.Set.__and__": ["_collections_abc.ItemsView._from_iterable", "_collections_abc.KeysView._from_iterable", "<builtin>.isinstance", "_collections_abc.Set._from_iterable"], "_collections_abc.ItemsView._from_iterable": ["<builtin>.set"], "_collections_abc.KeysView._from_iterable": ["<builtin>.set"], "_collections_abc.Set.isdisjoint": [], "_collections_abc.Set.__or__": ["_collections_abc.ItemsView._from_iterable", "_collections_abc.KeysView._from_iterable", "<builtin>.isinstance", "_collections_abc.Set._from_iterable"], "_collections_abc.Set.__sub__": ["_collections_abc.ItemsView._from_iterable", "_collections_abc.KeysView._from_iterable", "<builtin>.isinstance", "_collections_abc.Set._from_iterable"], "_collections_abc.Set.__rsub__": ["_collections_abc.ItemsView._from_iterable", "_collections_abc.KeysView._from_iterable", "<builtin>.isinstance", "_collections_abc.Set._from_iterable"], "_collections_abc.Set.__xor__": ["_collections_abc.ItemsView._from_iterable", "_collections_abc.KeysView._from_iterable", "<builtin>.isinstance", "_collections_abc.Set._from_iterable"], "_collections_abc.Set._hash": ["_collections_abc.Set.__iter__", "<builtin>.hash", "<builtin>.len"], "<builtin>.hash": [], "_collections_abc.MutableSet": ["abc.abstractmethod"], "_collections_abc.MutableSet.add": [], "_collections_abc.MutableSet.discard": [], "_collections_abc.MutableSet.remove": ["<builtin>.KeyError", "_collections_abc.MutableSet.discard"], "<builtin>.KeyError": [], "_collections_abc.MutableSet.pop": ["<builtin>.iter", "<builtin>.next", "_collections_abc.MutableSet.discard"], "_collections_abc.MutableSet.clear": ["_collections_abc.MutableSet.pop"], "_collections_abc.MutableSet.__ior__": ["_collections_abc.MutableSet.add"], "_collections_abc.MutableSet.__iand__": ["_collections_abc.MutableSet.discard"], "_collections_abc.MutableSet.__ixor__": ["_collections_abc.MutableSet.add", "<builtin>.isinstance", "_collections_abc.KeysView._from_iterable", "_collections_abc.ItemsView._from_iterable", "_collections_abc.MutableSet.discard", "_collections_abc.MutableSet.clear", "_collections_abc.Set._from_iterable"], "_collections_abc.MutableSet.__isub__": ["_collections_abc.MutableSet.discard", "_collections_abc.MutableSet.clear"], "_collections_abc.Mapping": ["abc.abstractmethod"], "_collections_abc.Mapping.__getitem__": [], "_collections_abc.Mapping.get": [], "_collections_abc.Mapping.__contains__": [], "_collections_abc.Mapping.keys": ["_collections_abc.MappingView.__init__"], "_collections_abc.MappingView.__init__": [], "_collections_abc.Mapping.items": ["_collections_abc.MappingView.__init__"], "_collections_abc.Mapping.values": ["_collections_abc.MappingView.__init__"], "_collections_abc.Mapping.__eq__": ["weakref.WeakKeyDictionary.items", "weakref.WeakValueDictionary.items", "<builtin>.isinstance", "<builtin>.dict", "_collections_abc.Mapping.items"], "weakref.WeakKeyDictionary.items": ["_weakrefset._IterationGuard.__init__"], "weakref.WeakValueDictionary.items": ["_weakrefset._IterationGuard.__init__", "weakref.WeakValueDictionary._commit_removals"], "_collections_abc.MappingView": [], "_collections_abc.MappingView.__len__": ["<builtin>.len"], "_collections_abc.MappingView.__repr__": [], "_collections_abc.KeysView": [], "_collections_abc.KeysView.__contains__": [], "_collections_abc.KeysView.__iter__": [], "_collections_abc.ItemsView": [], "_collections_abc.ItemsView.__contains__": [], "_collections_abc.ItemsView.__iter__": [], "_collections_abc.ValuesView": [], "_collections_abc.ValuesView.__contains__": [], "_collections_abc.ValuesView.__iter__": [], "_collections_abc.MutableMapping": ["<builtin>.object", "abc.abstractmethod"], "_collections_abc.MutableMapping.__setitem__": [], "_collections_abc.MutableMapping.__delitem__": [], "_collections_abc.MutableMapping.pop": [], "_collections_abc.MutableMapping.popitem": ["<builtin>.iter", "<builtin>.next"], "_collections_abc.MutableMapping.clear": ["weakref.WeakValueDictionary.popitem", "weakref.WeakKeyDictionary.popitem", "_collections_abc.MutableMapping.popitem", "collections.ChainMap.popitem"], "weakref.WeakValueDictionary.popitem": ["weakref.WeakValueDictionary._commit_removals"], "weakref.WeakKeyDictionary.popitem": [], "collections.ChainMap.popitem": ["<builtin>.KeyError"], "_collections_abc.MutableMapping.update": ["<builtin>.isinstance", "<builtin>.hasattr"], "_collections_abc.MutableMapping.setdefault": [], "_collections_abc.Sequence": ["abc.abstractmethod"], "_collections_abc.Sequence.__getitem__": [], "_collections_abc.Sequence.__iter__": [], "_collections_abc.Sequence.__contains__": ["_collections_abc.Sequence.__iter__"], "_collections_abc.Sequence.__reversed__": ["<builtin>.reversed", "<builtin>.range", "<builtin>.len"], "_collections_abc.Sequence.index": ["<builtin>.max", "<builtin>.len"], "_collections_abc.Sequence.count": ["<builtin>.sum"], "_collections_abc.ByteString": [], "_collections_abc.MutableSequence": ["abc.abstractmethod"], "_collections_abc.MutableSequence.__setitem__": [], "_collections_abc.MutableSequence.__delitem__": [], "_collections_abc.MutableSequence.insert": [], "_collections_abc.MutableSequence.append": ["_collections_abc.MutableSequence.insert", "<builtin>.len"], "_collections_abc.MutableSequence.clear": ["_collections_abc.MutableSequence.pop"], "_collections_abc.MutableSequence.pop": [], "_collections_abc.MutableSequence.reverse": ["<builtin>.range", "<builtin>.len"], "_collections_abc.MutableSequence.extend": ["_collections_abc.MutableSequence.append", "<builtin>.list"], "_collections_abc.MutableSequence.remove": ["_collections_abc.Sequence.index"], "_collections_abc.MutableSequence.__iadd__": ["_collections_abc.MutableSequence.extend"], "abc.abstractclassmethod": [], "abc.abstractclassmethod.__init__": ["<builtin>.super"], "abc.abstractstaticmethod": [], "abc.abstractstaticmethod.__init__": ["<builtin>.super"], "abc.abstractproperty": [], "abc.ABCMeta": [], "abc.ABCMeta.__new__": ["<builtin>.super", "_abc._abc_init"], "_abc._abc_init": [], "abc.ABCMeta.register": ["_abc._abc_register"], "_abc._abc_register": [], "abc.ABCMeta.__instancecheck__": ["_abc._abc_instancecheck"], "_abc._abc_instancecheck": [], "abc.ABCMeta.__subclasscheck__": ["_abc._abc_subclasscheck"], "_abc._abc_subclasscheck": [], "abc.ABCMeta._dump_registry": ["_py_abc.get_cache_token", "<builtin>.print", "_abc._get_dump", "_abc.get_cache_token"], "<builtin>.print": [], "_abc.get_cache_token": [], "_py_abc.get_cache_token": [], "_abc._get_dump": [], "abc.ABCMeta._abc_registry_clear": ["_abc._reset_registry"], "_abc._reset_registry": [], "abc.ABCMeta._abc_caches_clear": ["_abc._reset_caches"], "_abc._reset_caches": [], "abc.ABC": [], "_py_abc.ABCMeta": [], "_py_abc.ABCMeta.__new__": ["<builtin>.frozenset", "<builtin>.super", "_weakrefset.WeakSet.__init__", "<builtin>.set", "<builtin>.getattr"], "<builtin>.frozenset": [], "_weakrefset.WeakSet.__init__": ["<builtin>.set", "weakref.WeakKeyDictionary.update", "_weakrefset.WeakSet.update"], "_py_abc.ABCMeta.register": ["<builtin>.RuntimeError", "<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.TypeError"], "_py_abc.ABCMeta._dump_registry": ["_py_abc.get_cache_token", "<builtin>.isinstance", "<builtin>.print", "<builtin>.set", "<builtin>.getattr"], "_py_abc.ABCMeta._abc_registry_clear": [], "_py_abc.ABCMeta._abc_caches_clear": ["_weakrefset.WeakSet.clear"], "_weakrefset.WeakSet.clear": ["_weakrefset.WeakSet._commit_removals"], "_py_abc.ABCMeta.__instancecheck__": ["<builtin>.type", "_py_abc.ABCMeta.__subclasscheck__", "<builtin>.any"], "_py_abc.ABCMeta.__subclasscheck__": ["<builtin>.isinstance", "_weakrefset.WeakSet.__init__", "<builtin>.issubclass", "_weakrefset.WeakSet.add", "<builtin>.TypeError", "<builtin>.getattr"], "_weakrefset.WeakSet.add": ["_weakref.ref", "_weakrefset.WeakSet._commit_removals"], "_weakrefset._IterationGuard": [], "_weakrefset._IterationGuard.__init__": ["_weakref.ref"], "_weakref.ref": [], "_weakrefset._IterationGuard.__enter__": [], "_weakrefset._IterationGuard.__exit__": [], "_weakrefset.WeakSet": [], "_weakrefset.WeakSet.__init__._remove": [], "weakref.WeakKeyDictionary.update": ["<builtin>.type", "_weakref.ref", "<builtin>.len", "<builtin>.hasattr"], "_weakrefset.WeakSet.update": ["_weakrefset.WeakSet.add", "_weakrefset.WeakSet._commit_removals"], "_weakrefset.WeakSet._commit_removals": [], "_weakrefset.WeakSet.__iter__": ["_weakrefset._IterationGuard.__init__"], "_weakrefset.WeakSet.__len__": ["<builtin>.len"], "_weakrefset.WeakSet.__contains__": ["_weakref.ref"], "_weakrefset.WeakSet.__reduce__": ["<builtin>.list", "<builtin>.getattr"], "_weakrefset.WeakSet.copy": [], "_weakrefset.WeakSet.pop": ["<builtin>.KeyError", "_weakrefset.WeakSet._commit_removals"], "_weakrefset.WeakSet.remove": ["_weakref.ref", "_weakrefset.WeakSet._commit_removals"], "_weakrefset.WeakSet.discard": ["_weakref.ref", "_weakrefset.WeakSet._commit_removals"], "_weakrefset.WeakSet.__ior__": ["_weakrefset.WeakSet.update"], "_weakrefset.WeakSet.difference": ["_weakrefset.WeakSet.copy"], "_weakrefset.WeakSet.difference_update": ["_weakrefset.WeakSet.__isub__"], "_weakrefset.WeakSet.__isub__": ["_weakref.ref", "_weakrefset.WeakSet._commit_removals"], "_weakrefset.WeakSet.intersection": [], "_weakrefset.WeakSet.intersection_update": ["_weakrefset.WeakSet.__iand__"], "_weakrefset.WeakSet.__iand__": ["_weakref.ref", "_weakrefset.WeakSet._commit_removals"], "_weakrefset.WeakSet.issubset": ["_weakref.ref"], "_weakrefset.WeakSet.__lt__": ["<builtin>.map", "<builtin>.set"], "<builtin>.map": [], "_weakrefset.WeakSet.issuperset": ["_weakref.ref"], "_weakrefset.WeakSet.__gt__": ["<builtin>.map", "<builtin>.set"], "_weakrefset.WeakSet.__eq__": ["<builtin>.map", "<builtin>.isinstance", "<builtin>.set"], "_weakrefset.WeakSet.symmetric_difference": ["_weakrefset.WeakSet.copy"], "_weakrefset.WeakSet.symmetric_difference_update": ["_weakrefset.WeakSet.__ixor__"], "_weakrefset.WeakSet.__ixor__": ["_weakref.ref", "_weakrefset.WeakSet._commit_removals"], "_weakrefset.WeakSet.union": [], "_weakrefset.WeakSet.isdisjoint": ["_weakrefset.WeakSet.intersection", "<builtin>.len"], "_weakrefset.WeakSet.__repr__": ["<builtin>.repr"], "functools.update_wrapper": ["<builtin>.setattr", "<builtin>.getattr"], "functools._gt_from_lt": [], "functools._le_from_lt": [], "functools._ge_from_lt": [], "functools._ge_from_le": [], "functools._lt_from_le": [], "functools._gt_from_le": [], "functools._lt_from_gt": [], "functools._ge_from_gt": [], "functools._le_from_gt": [], "functools._le_from_ge": [], "functools._gt_from_ge": [], "functools._lt_from_ge": [], "functools.total_ordering": ["<builtin>.setattr", "<builtin>.max", "<builtin>.ValueError", "<builtin>.getattr"], "functools.cmp_to_key": ["functools.cmp_to_key.K"], "functools.cmp_to_key.K": [], "functools.cmp_to_key.K.__init__": [], "functools.cmp_to_key.K.__lt__": [], "functools.cmp_to_key.K.__gt__": [], "functools.cmp_to_key.K.__eq__": [], "functools.cmp_to_key.K.__le__": [], "functools.cmp_to_key.K.__ge__": [], "functools.reduce": ["<builtin>.iter", "<builtin>.next", "<builtin>.TypeError"], "functools.partial": ["reprlib.recursive_repr", "reprlib.recursive_repr.decorating_function"], "functools.partial.__new__": ["<builtin>.callable", "<builtin>.super", "<builtin>.TypeError", "<builtin>.hasattr"], "functools.partial.__call__": [], "reprlib.recursive_repr": [], "reprlib.recursive_repr.decorating_function": ["<builtin>.set", "<builtin>.getattr"], "functools.partial.__repr__": ["_functools.partial.keywords.items", "<builtin>.type", "<builtin>.repr"], "_functools.partial.keywords.items": [], "functools.partial.__reduce__": ["<builtin>.type"], "functools.partial.__setstate__": ["<builtin>.tuple", "<builtin>.callable", "<builtin>.isinstance", "<builtin>.type", "<builtin>.dict", "<builtin>.len", "<builtin>.TypeError"], "functools.partialmethod": [], "functools.partialmethod.__repr__": ["<builtin>.map"], "functools.partialmethod._make_unbound_method": [], "functools.partialmethod._make_unbound_method._method": [], "functools.partialmethod.__get__": ["functools.partialmethod._make_unbound_method", "_functools.partial", "<builtin>.getattr"], "functools.partialmethod.__isabstractmethod__": ["<builtin>.getattr"], "functools._unwrap_partial": ["<builtin>.isinstance"], "collections.namedtuple": ["<builtin>.map", "sys._getframe", "<builtin>.isinstance", "<builtin>.ValueError", "_collections._tuplegetter", "<builtin>.TypeError", "<builtin>.zip", "collections.<lambda1>", "<builtin>.dict", "<builtin>.repr", "<builtin>.str", "<builtin>.enumerate", "<builtin>.list", "<builtin>.len", "<builtin>.set", "<builtin>.tuple", "sys.intern", "<builtin>.exec", "<builtin>.reversed", "<builtin>.type"], "functools._HashedSeq": [], "functools._HashedSeq.__init__": [], "functools._HashedSeq.__hash__": [], "functools._make_key": ["functools._HashedSeq.__init__"], "functools.lru_cache": ["<builtin>.callable", "<builtin>.isinstance", "<builtin>.TypeError", "_functools._lru_cache_wrapper"], "_functools._lru_cache_wrapper": [], "functools.lru_cache.decorating_function": ["_functools._lru_cache_wrapper"], "functools._lru_cache_wrapper": ["_thread.RLock", "<builtin>.object"], "_thread.RLock": [], "functools._lru_cache_wrapper.wrapper": ["functools._make_key"], "functools._lru_cache_wrapper.cache_info": [], "functools._lru_cache_wrapper.cache_clear": [], "functools._c3_merge": ["<builtin>.RuntimeError"], "functools._c3_mro": ["functools._c3_mro", "<builtin>.any", "<builtin>.enumerate", "<builtin>.list", "<builtin>.len", "<builtin>.issubclass", "<builtin>.reversed", "functools._c3_merge", "<builtin>.hasattr"], "functools._compose_mro": ["functools._c3_mro", "functools._compose_mro.is_related", "<builtin>.issubclass", "functools._compose_mro.is_strict_base", "<builtin>.set"], "functools._compose_mro.is_related": ["<builtin>.issubclass", "<builtin>.hasattr"], "functools._compose_mro.is_strict_base": [], "functools._find_impl": ["functools._compose_mro", "<builtin>.RuntimeError", "<builtin>.issubclass"], "weakref.WeakKeyDictionary.__init__": ["<builtin>.set", "weakref.WeakValueDictionary.update", "weakref.WeakKeyDictionary.update", "_weakrefset.WeakSet.update"], "functools.singledispatch.dispatch": ["_collections_abc.MutableMapping.clear", "_abc.get_cache_token", "functools._find_impl", "collections.ChainMap.clear", "_py_abc.get_cache_token"], "collections.ChainMap.clear": [], "functools.singledispatch.register.<lambda1>": ["functools.singledispatch.register"], "typing.get_type_hints": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.dict", "typing._eval_type", "typing._get_defaults", "typing.ForwardRef.__init__", "<builtin>.reversed", "<builtin>.hasattr", "<builtin>.type", "<builtin>.getattr"], "functools.singledispatch.wrapper": ["functools.singledispatch.dispatch", "<builtin>.TypeError"], "functools.singledispatchmethod": [], "functools.singledispatchmethod.__init__": ["functools.singledispatch", "<builtin>.callable", "<builtin>.TypeError", "<builtin>.hasattr"], "functools.singledispatchmethod.register": [], "functools.singledispatchmethod.__get__": [], "functools.singledispatchmethod.__get__._method": [], "functools.singledispatchmethod.__isabstractmethod__": ["<builtin>.getattr"], "functools.cached_property": [], "functools.cached_property.__init__": ["_thread.RLock"], "functools.cached_property.__set_name__": ["<builtin>.TypeError"], "functools.cached_property.__get__": ["<builtin>.type", "<builtin>.TypeError"], "_collections_abc.MutableSequence.register": [], "collections._OrderedDictKeysView": [], "collections._OrderedDictKeysView.__reversed__": ["<builtin>.reversed"], "collections._OrderedDictItemsView": [], "collections._OrderedDictItemsView.__reversed__": ["<builtin>.reversed"], "collections._OrderedDictValuesView": [], "collections._OrderedDictValuesView.__reversed__": ["<builtin>.reversed"], "collections._Link": [], "collections.OrderedDict": ["reprlib.recursive_repr", "reprlib.recursive_repr.decorating_function", "<builtin>.object"], "collections.OrderedDict.__init__": ["_weakref.proxy"], "_weakref.proxy": [], "collections.OrderedDict.__setitem__": ["_weakref.proxy"], "collections.OrderedDict.__delitem__": ["_collections.OrderedDict.__map.pop"], "_collections.OrderedDict.__map.pop": [], "collections.OrderedDict.__iter__": [], "collections.OrderedDict.__reversed__": [], "collections.OrderedDict.clear": ["_collections.OrderedDict.__map.clear"], "_collections.OrderedDict.__map.clear": [], "collections.OrderedDict.popitem": ["<builtin>.KeyError"], "collections.OrderedDict.move_to_end": [], "collections.OrderedDict.__sizeof__": ["sys.getsizeof", "<builtin>.len"], "sys.getsizeof": [], "collections.OrderedDict.keys": ["_collections_abc.MappingView.__init__"], "collections.OrderedDict.items": ["_collections_abc.MappingView.__init__"], "collections.OrderedDict.values": ["_collections_abc.MappingView.__init__"], "collections.OrderedDict.pop": ["<builtin>.KeyError"], "collections.OrderedDict.setdefault": [], "collections.OrderedDict.__repr__": ["<builtin>.list", "_collections.OrderedDict.items"], "collections.OrderedDict.__reduce__": ["<builtin>.iter", "<builtin>.vars", "_collections.OrderedDict", "_collections.OrderedDict.items"], "<builtin>.vars": [], "_collections.OrderedDict": [], "collections.OrderedDict.copy": ["_collections.OrderedDict.__class__"], "_collections.OrderedDict.__class__": [], "collections.OrderedDict.fromkeys": ["_collections.OrderedDict"], "collections.OrderedDict.__eq__": ["<builtin>.map", "<builtin>.all", "<builtin>.isinstance"], "<builtin>.all": [], "collections.<lambda1>": ["operator.itemgetter.__init__", "<builtin>.property"], "<builtin>.property": [], "sys.intern": [], "collections.namedtuple._make": ["<builtin>.TypeError", "<builtin>.len"], "collections.namedtuple._replace": ["<builtin>.list", "<builtin>.ValueError"], "collections.namedtuple.__repr__": [], "collections.namedtuple._asdict": [], "collections.namedtuple.__getnewargs__": [], "_collections._tuplegetter": [], "collections._count_elements": [], "collections.Counter": [], "collections.Counter.__init__": ["<builtin>.super"], "collections.Counter.__missing__": [], "collections.Counter.most_common": ["operator.itemgetter.__init__", "heapq.nlargest", "<builtin>.sorted"], "<builtin>.sorted": [], "heapq.nlargest": ["operator.itemgetter.__init__", "<builtin>.max", "<builtin>.sorted", "<builtin>.zip", "<builtin>.len", "heapq.heapify", "<builtin>.iter", "heapq.heapreplace", "<builtin>.range", "<builtin>.object"], "collections.Counter.elements": ["itertools.starmap", "itertools.chain.from_iterable"], "itertools.starmap": [], "itertools.chain.from_iterable": [], "collections.Counter.fromkeys": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "collections.Counter.update": ["_collections._count_elements", "<builtin>.super", "<builtin>.isinstance"], "_collections._count_elements": [], "collections.Counter.subtract": ["<builtin>.isinstance"], "collections.Counter.copy": [], "collections.Counter.__reduce__": ["<builtin>.dict"], "collections.Counter.__delitem__": ["<builtin>.super"], "collections.Counter.__repr__": ["<builtin>.map", "collections.Counter.most_common", "<builtin>.dict"], "collections.Counter.__add__": ["<builtin>.isinstance", "collections.Counter.__init__"], "collections.Counter.__sub__": ["<builtin>.isinstance", "collections.Counter.__init__"], "collections.Counter.__or__": ["<builtin>.isinstance", "collections.Counter.__init__"], "collections.Counter.__and__": ["<builtin>.isinstance", "collections.Counter.__init__"], "collections.Counter.__pos__": ["collections.Counter.__init__"], "collections.Counter.__neg__": ["collections.Counter.__init__"], "collections.Counter._keep_positive": [], "collections.Counter.__iadd__": ["collections.Counter._keep_positive"], "collections.Counter.__isub__": ["collections.Counter._keep_positive"], "collections.Counter.__ior__": ["collections.Counter._keep_positive"], "collections.Counter.__iand__": ["collections.Counter._keep_positive"], "collections.ChainMap": ["reprlib.recursive_repr", "reprlib.recursive_repr.decorating_function"], "collections.ChainMap.__init__": ["<builtin>.list"], "collections.ChainMap.__missing__": ["<builtin>.KeyError"], "collections.ChainMap.__getitem__": ["collections.ChainMap.__missing__"], "collections.ChainMap.get": [], "collections.ChainMap.__len__": ["<builtin>.set", "<builtin>.len"], "collections.ChainMap.__iter__": ["<builtin>.iter", "<builtin>.reversed"], "collections.ChainMap.__contains__": ["<builtin>.any"], "collections.ChainMap.__bool__": ["<builtin>.any"], "collections.ChainMap.__repr__": ["<builtin>.map"], "collections.ChainMap.fromkeys": ["collections.ChainMap.__init__"], "collections.ChainMap.copy": [], "collections.ChainMap.new_child": [], "collections.ChainMap.parents": [], "collections.ChainMap.__setitem__": [], "collections.ChainMap.__delitem__": ["<builtin>.KeyError"], "collections.ChainMap.pop": ["<builtin>.KeyError"], "collections.UserDict": [], "collections.UserDict.__len__": ["<builtin>.len"], "collections.UserDict.__getitem__": ["<builtin>.KeyError", "<builtin>.hasattr"], "collections.UserDict.__setitem__": [], "collections.UserDict.__delitem__": [], "collections.UserDict.__iter__": ["<builtin>.iter"], "collections.UserDict.__contains__": [], "collections.UserDict.__repr__": ["<builtin>.repr"], "collections.UserDict.__copy__": [], "collections.UserDict.fromkeys": ["collections.UserDict.__init__"], "collections.UserList": [], "collections.UserList.__init__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "collections.UserList.__repr__": ["<builtin>.repr"], "collections.UserList.__lt__": ["collections.UserList.__cast"], "collections.UserList.__cast": ["<builtin>.isinstance"], "collections.UserList.__le__": ["collections.UserList.__cast"], "collections.UserList.__eq__": ["collections.UserList.__cast"], "collections.UserList.__gt__": ["collections.UserList.__cast"], "collections.UserList.__ge__": ["collections.UserList.__cast"], "collections.UserList.__contains__": [], "collections.UserList.__len__": ["<builtin>.len"], "collections.UserList.__getitem__": ["<builtin>.isinstance"], "collections.UserList.__setitem__": [], "collections.UserList.__delitem__": [], "collections.UserList.__add__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "collections.UserList.__radd__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "collections.UserList.__iadd__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.list"], "collections.UserList.__mul__": [], "collections.UserList.__imul__": [], "collections.UserList.__copy__": [], "collections.UserList.append": [], "collections.UserList.insert": [], "collections.UserList.pop": [], "collections.UserList.remove": [], "collections.UserList.clear": [], "collections.UserList.copy": [], "collections.UserList.count": [], "collections.UserList.index": [], "collections.UserList.reverse": [], "collections.UserList.sort": [], "collections.UserList.extend": ["<builtin>.isinstance"], "collections.UserString": [], "collections.UserString.__init__": ["<builtin>.str", "<builtin>.isinstance"], "collections.UserString.__str__": ["<builtin>.str"], "collections.UserString.__repr__": ["<builtin>.repr"], "collections.UserString.__int__": ["<builtin>.int"], "collections.UserString.__float__": ["<builtin>.float"], "<builtin>.float": [], "collections.UserString.__complex__": ["<builtin>.complex"], "<builtin>.complex": [], "collections.UserString.__hash__": ["<builtin>.hash"], "collections.UserString.__getnewargs__": [], "collections.UserString.__eq__": ["<builtin>.isinstance"], "collections.UserString.__lt__": ["<builtin>.isinstance"], "collections.UserString.__le__": ["<builtin>.isinstance"], "collections.UserString.__gt__": ["<builtin>.isinstance"], "collections.UserString.__ge__": ["<builtin>.isinstance"], "collections.UserString.__contains__": ["<builtin>.isinstance"], "collections.UserString.__len__": ["<builtin>.len"], "collections.UserString.__getitem__": [], "collections.UserString.__add__": ["<builtin>.str", "<builtin>.isinstance"], "collections.UserString.__radd__": ["<builtin>.str", "<builtin>.isinstance"], "collections.UserString.__mul__": [], "collections.UserString.__mod__": [], "collections.UserString.__rmod__": ["<builtin>.str"], "collections.UserString.capitalize": [], "collections.UserString.casefold": [], "collections.UserString.center": [], "collections.UserString.count": ["<builtin>.isinstance"], "collections.UserString.encode": [], "collections.UserString.endswith": [], "collections.UserString.expandtabs": [], "collections.UserString.find": ["<builtin>.isinstance"], "collections.UserString.format": [], "collections.UserString.format_map": [], "collections.UserString.index": [], "collections.UserString.isalpha": [], "collections.UserString.isalnum": [], "collections.UserString.isascii": [], "collections.UserString.isdecimal": [], "collections.UserString.isdigit": [], "collections.UserString.isidentifier": [], "collections.UserString.islower": [], "collections.UserString.isnumeric": [], "collections.UserString.isprintable": [], "collections.UserString.isspace": [], "collections.UserString.istitle": [], "collections.UserString.isupper": [], "collections.UserString.join": [], "collections.UserString.ljust": [], "collections.UserString.lower": [], "collections.UserString.lstrip": [], "collections.UserString.partition": [], "collections.UserString.replace": ["<builtin>.isinstance"], "collections.UserString.rfind": ["<builtin>.isinstance"], "collections.UserString.rindex": [], "collections.UserString.rjust": [], "collections.UserString.rpartition": [], "collections.UserString.rstrip": [], "collections.UserString.split": [], "collections.UserString.rsplit": [], "collections.UserString.splitlines": [], "collections.UserString.startswith": [], "collections.UserString.strip": [], "collections.UserString.swapcase": [], "collections.UserString.title": [], "collections.UserString.translate": [], "collections.UserString.upper": [], "collections.UserString.zfill": [], "reprlib.recursive_repr.decorating_function.wrapper": ["_thread.get_ident", "<builtin>.id"], "<builtin>.id": [], "_thread.get_ident": [], "reprlib.Repr": [], "reprlib.Repr.__init__": [], "reprlib.Repr.repr": ["reprlib.Repr.repr1"], "reprlib.Repr.repr1": ["<builtin>.getattr", "<builtin>.type", "reprlib.Repr.repr_instance", "<builtin>.hasattr"], "reprlib.Repr.repr_instance": ["<builtin>.max", "builtins.repr", "<builtin>.id", "<builtin>.len"], "reprlib.Repr._repr_iterable": ["reprlib.Repr.repr1", "itertools.islice", "<builtin>.len"], "itertools.islice": [], "reprlib.Repr.repr_tuple": ["reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_list": ["reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_array": ["reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_set": ["reprlib.Repr._repr_iterable", "reprlib._possibly_sorted"], "reprlib._possibly_sorted": ["<builtin>.sorted", "<builtin>.list"], "reprlib.Repr.repr_frozenset": ["reprlib.Repr._repr_iterable", "reprlib._possibly_sorted"], "reprlib.Repr.repr_deque": ["reprlib.Repr._repr_iterable"], "reprlib.Repr.repr_dict": ["itertools.islice", "reprlib._possibly_sorted", "reprlib.Repr.repr1", "<builtin>.len"], "reprlib.Repr.repr_str": ["<builtin>.max", "builtins.repr", "<builtin>.len"], "builtins.repr": [], "reprlib.Repr.repr_int": ["<builtin>.max", "builtins.repr", "<builtin>.len"], "warnings.showwarning": ["warnings.WarningMessage.__init__", "warnings._showwarnmsg_impl"], "warnings.WarningMessage.__init__": [], "warnings._showwarnmsg_impl": ["warnings._formatwarnmsg", "sys.stderr.write"], "warnings.formatwarning": ["warnings.WarningMessage.__init__", "warnings._formatwarnmsg_impl"], "warnings._formatwarnmsg": ["warnings.formatwarning", "warnings._formatwarnmsg_impl"], "sys.stderr.write": [], "linecache.getline": ["linecache.getlines", "<builtin>.len"], "tracemalloc.get_object_traceback": ["tracemalloc.Traceback.__init__", "_tracemalloc._get_object_traceback"], "warnings._showwarnmsg": ["warnings.showwarning", "<builtin>.callable", "<builtin>.TypeError", "warnings._showwarnmsg_impl"], "warnings._add_filter": ["_warnings._filters_mutated", "_warnings.filters.remove", "_warnings.filters.append", "_warnings.filters.insert"], "warnings.simplefilter": ["warnings._add_filter", "<builtin>.isinstance"], "_warnings.filters.remove": [], "_warnings.filters.insert": [], "_warnings.filters.append": [], "_warnings._filters_mutated": [], "warnings.resetwarnings": ["_warnings._filters_mutated"], "warnings._OptionError": [], "warnings._processoptions": ["<builtin>.print", "warnings._setoption"], "sys.warnoptions.split": [], "warnings._getaction": [], "warnings._getcategory": ["<builtin>.issubclass", "<builtin>.__import__", "<builtin>.getattr"], "warnings._is_internal_frame": [], "warnings._next_external_frame": ["warnings._is_internal_frame"], "sys.__dict__.setdefault": [], "_warnings.warn_explicit": [], "linecache.getlines": ["linecache.clearcache", "linecache.updatecache", "<builtin>.len"], "_warnings._onceregistry.get": [], "warnings.WarningMessage": [], "warnings.WarningMessage.__str__": [], "warnings.catch_warnings": [], "warnings.catch_warnings.__init__": [], "warnings.catch_warnings.__repr__": ["<builtin>.type"], "warnings.catch_warnings.__enter__": ["<builtin>.RuntimeError"], "warnings.catch_warnings.__exit__": ["<builtin>.RuntimeError"], "warnings._warn_unawaited_coroutine.extract": ["linecache.getline", "<builtin>.reversed"], "traceback.format_list": ["traceback.StackSummary.from_list", "traceback.StackSummary.format"], "_warnings.warn": [], "warnings._filters_mutated": [], "re.RegexFlag": [], "re.RegexFlag.__repr__": ["<builtin>.hex", "<builtin>.len"], "<builtin>.hex": [], "re.match": ["re._compile"], "re._compile": ["<builtin>.next", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.len", "sre_compile.compile", "<builtin>.ValueError", "<builtin>.iter", "<builtin>.type", "sre_compile.isstring"], "re.fullmatch": ["re._compile"], "re.search": ["re._compile"], "re.sub": ["re._compile"], "re.subn": ["re._compile"], "re.split": ["re._compile"], "re.findall": ["re._compile"], "re.finditer": ["re._compile"], "re.purge": [], "re.template": ["re._compile"], "<builtin>.chr": [], "sre_compile.compile": ["<builtin>.tuple", "_sre.compile", "sre_compile.dis", "sre_parse.parse", "sre_compile._code", "<builtin>.print", "sre_compile.isstring"], "sre_compile.isstring": ["<builtin>.isinstance"], "functools.update_wrapper.wrapper": [], "re._compile_repl": ["sre_parse.parse_template"], "sre_parse.parse_template": ["sre_parse.Tokenizer.get", "sre_parse.Tokenizer.match", "<builtin>.IndexError", "sre_parse.Tokenizer.error", "<builtin>.isinstance", "<builtin>.len", "sre_parse.Tokenizer.__init__", "sre_parse.parse_template.addgroup", "sre_parse.Tokenizer.getuntil", "<builtin>.int", "<builtin>.chr"], "re._expand": ["sre_parse.parse_template", "sre_parse.expand_template"], "sre_parse.expand_template": ["sre_constants.error.__init__"], "re._subx": ["re._compile_repl", "<builtin>.len"], "re._subx.filter": ["sre_parse.expand_template"], "re._pickle": [], "copyreg.pickle": ["copyreg.constructor", "<builtin>.callable", "<builtin>.TypeError"], "re.Scanner": [], "sre_parse.State.__init__": [], "sre_parse.State.opengroup": ["sre_constants.error.__init__"], "sre_parse.parse": ["sre_parse.Tokenizer.seek", "sre_parse.Tokenizer.error", "sre_parse.Tokenizer.__init__", "sre_parse.State.__init__", "sre_parse.fix_flags", "sre_parse.SubPattern.dump", "sre_parse._parse_sub"], "sre_parse.SubPattern.__init__": [], "sre_parse.SubPattern.append": [], "sre_parse.State.closegroup": ["sre_parse.SubPattern.getwidth"], "re.Scanner.scan": ["<builtin>.callable"], "sre_parse.Verbose": [], "sre_parse.State": [], "sre_parse.State.groups": ["<builtin>.len"], "sre_constants.error.__init__": ["<builtin>.super", "<builtin>.isinstance"], "sre_parse.SubPattern.getwidth": ["<builtin>.max", "<builtin>.min"], "sre_parse.State.checkgroup": [], "sre_parse.State.checklookbehindgroup": ["sre_parse.State.checkgroup", "sre_parse.Tokenizer.error"], "sre_parse.Tokenizer.error": ["sre_parse.Tokenizer.error", "sre_parse.Tokenizer.tell"], "sre_parse.SubPattern": [], "sre_parse.SubPattern.dump": ["<builtin>.print", "<builtin>.enumerate", "<builtin>.str", "<builtin>.isinstance"], "sre_parse.SubPattern.__repr__": ["<builtin>.repr"], "sre_parse.SubPattern.__len__": ["<builtin>.len"], "sre_parse.SubPattern.__delitem__": [], "sre_parse.SubPattern.__getitem__": ["sre_parse.SubPattern.__init__", "<builtin>.isinstance"], "sre_parse.SubPattern.__setitem__": [], "sre_parse.SubPattern.insert": [], "<builtin>.min": [], "sre_parse.Tokenizer": [], "sre_parse.Tokenizer.__init__": ["<builtin>.str", "<builtin>.isinstance", "sre_parse.Tokenizer.__next"], "sre_parse.Tokenizer.__next": ["sre_parse.Tokenizer.error", "<builtin>.len"], "sre_parse.Tokenizer.match": ["sre_parse.Tokenizer.__next"], "sre_parse.Tokenizer.get": ["sre_parse.Tokenizer.__next"], "sre_parse.Tokenizer.getwhile": ["<builtin>.range", "sre_parse.Tokenizer.__next"], "sre_parse.Tokenizer.getuntil": ["sre_parse.Tokenizer.error", "<builtin>.len", "sre_parse.Tokenizer.__next"], "sre_parse.Tokenizer.pos": ["<builtin>.len"], "sre_parse.Tokenizer.tell": ["<builtin>.len"], "sre_parse.Tokenizer.seek": ["sre_parse.Tokenizer.__next"], "sre_parse._uniq": ["<builtin>.list"], "sre_parse._parse_sub": ["sre_parse.Tokenizer.match", "<builtin>.len", "sre_parse.SubPattern.append", "sre_parse.Tokenizer.tell", "sre_parse.SubPattern.__init__", "sre_parse._parse"], "<builtin>.OverflowError": [], "<builtin>.AssertionError": [], "sre_parse._parse_flags": ["sre_parse.Tokenizer.error", "sre_parse.Tokenizer.get", "<builtin>.len"], "sre_parse.fix_flags": ["<builtin>.isinstance", "<builtin>.ValueError"], "sre_parse.parse_template.addgroup": ["sre_parse.Tokenizer.error", "<builtin>.len"], "<builtin>.IndexError": [], "sre_constants.error": [], "sre_constants._NamedIntConstant": [], "sre_constants._NamedIntConstant.__new__": ["<builtin>.super"], "sre_constants._NamedIntConstant.__repr__": [], "sre_constants._makecodes": ["<builtin>.enumerate", "<builtin>.globals"], "sre_constants.dump": ["<builtin>.sorted"], "<builtin>.open": [], "enum._is_descriptor": ["<builtin>.hasattr"], "enum._is_dunder": ["<builtin>.len"], "enum._is_sunder": ["<builtin>.len"], "enum._make_class_unpicklable": [], "enum._make_class_unpicklable._break_on_call_reduce": ["<builtin>.TypeError"], "enum.auto": [], "enum._EnumDict": [], "enum._EnumDict.__init__": ["<builtin>.super"], "enum._EnumDict.__setitem__": ["enum._is_sunder", "<builtin>.setattr", "<builtin>.super", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "<builtin>.ValueError", "<builtin>.set", "enum._is_dunder", "<builtin>.TypeError", "enum._is_descriptor"], "enum.EnumMeta": [], "enum.EnumMeta.__prepare__": ["enum._EnumDict.__init__", "enum.EnumMeta._get_mixins_", "<builtin>.getattr"], "enum.EnumMeta._get_mixins_": ["enum.EnumMeta._get_mixins_._find_data_type", "<builtin>.issubclass", "<builtin>.TypeError"], "enum.EnumMeta.__new__": ["enum.EnumMeta._get_mixins_", "<builtin>.any", "<builtin>.setattr", "<builtin>.super", "<builtin>.isinstance", "enum.EnumMeta._find_new_", "<builtin>.ValueError", "enum._make_class_unpicklable", "<builtin>.set", "<builtin>.getattr", "<builtin>.TypeError", "<builtin>.hasattr"], "enum.EnumMeta._find_new_": ["<builtin>.getattr"], "enum.EnumMeta.__bool__": [], "enum.EnumMeta.__call__": ["enum.EnumMeta.__new__", "enum.EnumMeta._create_"], "enum.EnumMeta._create_": ["enum.EnumMeta._get_mixins_", "sys._getframe", "<builtin>.enumerate", "<builtin>.isinstance", "enum._make_class_unpicklable"], "enum.EnumMeta.__contains__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "enum.EnumMeta.__delattr__": ["<builtin>.AttributeError", "<builtin>.super"], "enum.EnumMeta.__dir__": [], "enum.EnumMeta.__getattr__": ["<builtin>.AttributeError", "enum._is_dunder"], "enum.EnumMeta.__getitem__": [], "enum.EnumMeta.__iter__": [], "enum.EnumMeta.__len__": ["<builtin>.len"], "enum.EnumMeta.__members__": [], "enum.EnumMeta.__repr__": [], "enum.EnumMeta.__reversed__": ["<builtin>.reversed"], "enum.EnumMeta.__setattr__": ["<builtin>.AttributeError", "<builtin>.super"], "enum.EnumMeta._convert_": ["<builtin>.vars"], "enum.EnumMeta._convert_.<lambda1>": [], "enum.EnumMeta._convert_.<lambda2>": [], "enum.EnumMeta._get_mixins_._find_data_type": ["<builtin>.issubclass"], "enum.Enum": ["types.DynamicClassAttribute"], "enum.Enum.__new__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.TypeError", "enum.Enum._missing_"], "enum.Enum._missing_": ["<builtin>.ValueError"], "enum.Enum._generate_next_value_": ["<builtin>.reversed"], "enum.Enum.__repr__": [], "enum.Enum.__str__": [], "enum.Enum.__dir__": [], "enum.Enum.__format__": ["<builtin>.str"], "enum.Enum.__hash__": ["<builtin>.hash"], "enum.Enum.__reduce_ex__": [], "enum.Enum.name": [], "enum.Enum.value": [], "enum.IntEnum": [], "enum._reduce_ex_by_name": [], "enum.Flag": [], "enum.Flag._generate_next_value_": ["enum._high_bit", "<builtin>.TypeError", "<builtin>.reversed"], "enum._high_bit": [], "enum.Flag._missing_": ["enum.Flag._create_pseudo_member_"], "enum.Flag._create_pseudo_member_": ["enum._decompose", "<builtin>.ValueError"], "enum._decompose": ["enum._power_of_two", "<builtin>.list", "<builtin>.len"], "enum.Flag.__contains__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "enum.Flag.__repr__": ["enum._decompose", "<builtin>.str"], "enum.Flag.__str__": ["enum._decompose", "<builtin>.str", "<builtin>.len"], "enum.Flag.__bool__": ["<builtin>.bool"], "enum.Flag.__or__": ["<builtin>.isinstance"], "enum.Flag.__and__": ["<builtin>.isinstance"], "enum.Flag.__xor__": ["<builtin>.isinstance"], "enum.Flag.__invert__": ["enum._decompose"], "enum.IntFlag": [], "enum.IntFlag._missing_": ["<builtin>.isinstance", "<builtin>.ValueError", "enum.IntFlag._create_pseudo_member_"], "enum.IntFlag._create_pseudo_member_": ["enum._decompose", "enum._high_bit", "<builtin>.reversed"], "enum.IntFlag.__or__": ["<builtin>.isinstance"], "enum.IntFlag.__and__": ["<builtin>.isinstance"], "enum.IntFlag.__xor__": ["<builtin>.isinstance"], "enum.IntFlag.__invert__": [], "enum.unique": ["<builtin>.ValueError"], "enum._power_of_two": ["enum._high_bit"], "enum._decompose.<lambda1>": [], "copyreg.constructor": ["<builtin>.callable", "<builtin>.TypeError"], "copyreg.pickle_complex": [], "copyreg._reconstructor": [], "copyreg._reduce_ex": ["<builtin>.getattr", "<builtin>.TypeError", "<builtin>.hasattr"], "copyreg.__newobj__": [], "copyreg.__newobj_ex__": [], "copyreg._slotnames": ["<builtin>.isinstance", "<builtin>.hasattr"], "copyreg.add_extension": ["<builtin>.int", "<builtin>.ValueError"], "copyreg.remove_extension": ["<builtin>.ValueError"], "copyreg.clear_extension_cache": [], "sre_compile._combine_flags": [], "sre_compile._compile": ["sre_compile._compile_charset", "_sre.ascii_tolower", "sre_compile._combine_flags", "sre_constants.error.__init__", "_sre.unicode_tolower", "_sre.ascii_iscased", "sre_compile._optimize_charset", "sre_compile._simple", "sre_compile._compile", "_sre.unicode_iscased"], "_sre.unicode_iscased": [], "_sre.ascii_iscased": [], "_sre.unicode_tolower": [], "_sre.ascii_tolower": [], "sre_compile._optimize_charset": ["<builtin>.map", "<builtin>.bytes", "sre_compile._bytes_to_codes", "<builtin>.any", "_sre.ascii_tolower", "<builtin>.bytearray", "<builtin>.len", "_sre.unicode_tolower", "sre_compile._mk_bitmap", "_sre.ascii_iscased", "<builtin>.range", "_sre.unicode_iscased"], "sre_compile._compile_charset": ["sre_constants.error.__init__"], "sre_compile._simple": ["sre_compile._simple", "<builtin>.len"], "sre_compile._mk_bitmap": ["<builtin>.range", "<builtin>.len"], "<builtin>.bytes": [], "sre_compile._bytes_to_codes": ["<builtin>.memoryview", "<builtin>.len"], "<builtin>.memoryview": [], "sre_compile._generate_overlap_table": ["<builtin>.range", "<builtin>.len"], "sre_compile._get_iscased": [], "sre_compile._get_literal_prefix": ["sre_compile._combine_flags", "<builtin>.len", "sre_compile._get_iscased", "_sre.ascii_iscased", "sre_compile._get_literal_prefix", "_sre.unicode_iscased"], "sre_compile._get_charset_prefix": ["<builtin>.map", "<builtin>.any", "sre_compile._combine_flags", "sre_compile._get_iscased", "_sre.ascii_iscased", "<builtin>.range", "_sre.unicode_iscased"], "sre_compile._compile_info": ["sre_compile._generate_overlap_table", "sre_compile._compile_charset", "sre_parse.SubPattern.getwidth", "<builtin>.len", "sre_compile._get_charset_prefix", "<builtin>.min", "sre_compile._optimize_charset", "sre_compile._get_literal_prefix"], "sre_compile._code": ["sre_compile._compile_info", "sre_compile._compile"], "sre_compile._hex_code": [], "sre_compile.dis": ["<builtin>.set", "sre_compile.dis.dis_", "<builtin>.str", "<builtin>.len"], "sre_compile.dis.dis_": ["sre_compile.dis.dis_", "<builtin>.map", "<builtin>.list", "sre_compile.dis.dis_.print_2", "sre_compile._hex_code", "<builtin>.ValueError", "<builtin>.chr", "<builtin>.range", "sre_compile.dis.dis_.print_", "<builtin>.str", "<builtin>.bin"], "sre_compile.dis.dis_.print_": ["<builtin>.print"], "sre_compile.dis.dis_.print_2": ["<builtin>.print"], "<builtin>.bin": [], "_sre.compile": [], "tracemalloc._format_size": ["<builtin>.abs"], "<builtin>.abs": [], "tracemalloc.Statistic": [], "tracemalloc.Statistic.__init__": [], "tracemalloc.Statistic.__hash__": ["<builtin>.hash"], "tracemalloc.Statistic.__eq__": [], "tracemalloc.Statistic.__str__": ["tracemalloc._format_size"], "tracemalloc.Statistic.__repr__": [], "tracemalloc.Statistic._sort_key": [], "tracemalloc.StatisticDiff": [], "tracemalloc.StatisticDiff.__init__": [], "tracemalloc.StatisticDiff.__hash__": ["<builtin>.hash"], "tracemalloc.StatisticDiff.__eq__": [], "tracemalloc.StatisticDiff.__str__": ["tracemalloc._format_size"], "tracemalloc.StatisticDiff.__repr__": [], "tracemalloc.StatisticDiff._sort_key": ["<builtin>.abs"], "tracemalloc._compare_grouped_stats": ["tracemalloc.StatisticDiff.__init__"], "tracemalloc.Frame": [], "tracemalloc.Frame.__init__": [], "tracemalloc.Frame.filename": [], "tracemalloc.Frame.lineno": [], "tracemalloc.Frame.__eq__": [], "tracemalloc.Frame.__lt__": [], "tracemalloc.Frame.__hash__": ["<builtin>.hash"], "tracemalloc.Frame.__str__": [], "tracemalloc.Frame.__repr__": [], "tracemalloc.Traceback": [], "tracemalloc.Traceback.__init__": ["<builtin>.tuple", "<builtin>.reversed"], "tracemalloc.Traceback.__len__": ["<builtin>.len"], "tracemalloc.Traceback.__getitem__": ["<builtin>.tuple", "tracemalloc.Frame.__init__", "<builtin>.isinstance"], "tracemalloc.Traceback.__contains__": [], "tracemalloc.Traceback.__hash__": ["<builtin>.hash"], "tracemalloc.Traceback.__eq__": [], "tracemalloc.Traceback.__lt__": [], "tracemalloc.Traceback.__str__": ["<builtin>.str"], "tracemalloc.Traceback.__repr__": ["<builtin>.tuple"], "tracemalloc.Traceback.format": ["linecache.getline", "<builtin>.reversed"], "_tracemalloc._get_object_traceback": [], "tracemalloc.Trace": [], "tracemalloc.Trace.__init__": [], "tracemalloc.Trace.domain": [], "tracemalloc.Trace.size": [], "tracemalloc.Trace.traceback": ["tracemalloc.Traceback.__init__"], "tracemalloc.Trace.__eq__": [], "tracemalloc.Trace.__hash__": ["<builtin>.hash"], "tracemalloc.Trace.__str__": ["tracemalloc._format_size"], "tracemalloc.Trace.__repr__": ["tracemalloc._format_size"], "tracemalloc._Traces": [], "tracemalloc._Traces.__init__": [], "tracemalloc._Traces.__len__": ["<builtin>.len"], "tracemalloc._Traces.__getitem__": ["<builtin>.tuple", "<builtin>.isinstance", "tracemalloc.Trace.__init__"], "tracemalloc._Traces.__contains__": [], "tracemalloc._Traces.__eq__": [], "tracemalloc._Traces.__repr__": ["<builtin>.len"], "tracemalloc._normalize_filename": [], "tracemalloc.BaseFilter": [], "tracemalloc.BaseFilter.__init__": [], "tracemalloc.BaseFilter._match": [], "tracemalloc.Filter": [], "tracemalloc.Filter.__init__": ["<builtin>.super", "tracemalloc._normalize_filename"], "tracemalloc.Filter.filename_pattern": [], "tracemalloc.Filter._match_frame_impl": ["tracemalloc._normalize_filename"], "tracemalloc.Filter._match_frame": ["tracemalloc.Filter._match_frame_impl"], "tracemalloc.Filter._match_traceback": ["tracemalloc.Filter._match_frame_impl", "<builtin>.any", "tracemalloc.Filter._match_frame"], "tracemalloc.Filter._match": ["tracemalloc.Filter._match_traceback"], "tracemalloc.DomainFilter": [], "tracemalloc.DomainFilter.__init__": ["<builtin>.super"], "tracemalloc.DomainFilter.domain": [], "tracemalloc.DomainFilter._match": [], "tracemalloc.Snapshot": [], "tracemalloc.Snapshot.__init__": ["tracemalloc._Traces.__init__"], "tracemalloc.Snapshot.dump": ["<builtin>.open"], "tracemalloc.Snapshot.load": ["<builtin>.open"], "tracemalloc.Snapshot._filter_trace": ["<builtin>.any"], "tracemalloc.Snapshot.filter_traces": ["tracemalloc.Snapshot.__init__", "tracemalloc.Snapshot._filter_trace", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type"], "tracemalloc.Snapshot._group_by": ["tracemalloc.Statistic.__init__", "tracemalloc.Traceback.__init__", "<builtin>.ValueError"], "tracemalloc.Snapshot.statistics": ["tracemalloc.Snapshot._group_by", "<builtin>.list"], "tracemalloc.Snapshot.compare_to": ["tracemalloc._compare_grouped_stats", "tracemalloc.Snapshot._group_by"], "tracemalloc.take_snapshot": ["<builtin>.RuntimeError", "tracemalloc.Snapshot.__init__", "_tracemalloc._get_traces"], "_tracemalloc._get_traces": [], "pickle.PickleError": [], "pickle.PicklingError": [], "pickle.UnpicklingError": [], "pickle._Stop": [], "pickle._Stop.__init__": [], "<builtin>.dir": [], "pickle._Framer": [], "pickle._Framer.__init__": [], "pickle._Framer.start_framing": ["io.BytesIO"], "io.BytesIO": [], "pickle._Framer.end_framing": ["pickle._Framer.commit_frame"], "pickle._Framer.commit_frame": ["io.BytesIO", "<builtin>.len"], "pickle._Framer.write": [], "pickle._Framer.write_large_bytes": ["pickle._Framer.commit_frame"], "pickle._Unframer": [], "pickle._Unframer.__init__": [], "pickle._Unframer.readinto": ["<builtin>.len"], "pickle._Unframer.read": ["<builtin>.len"], "pickle._Unframer.readline": [], "pickle._Unframer.load_frame": ["io.BytesIO"], "pickle._getattribute": ["<builtin>.AttributeError", "_functools.partial.__name__.split", "<builtin>.getattr"], "_functools.partial.__name__.split": [], "pickle.whichmodule": ["pickle._getattribute", "<builtin>.list", "sys.modules.items", "<builtin>.getattr"], "sys.modules.items": [], "pickle.encode_long": [], "pickle.decode_long": [], "pickle._Pickler": ["<builtin>.type"], "pickle._Pickler.__init__": ["pickle._Framer.__init__", "<builtin>.int", "<builtin>.TypeError", "<builtin>.ValueError"], "pickle._Pickler.clear_memo": [], "pickle._Pickler.dump": ["pickle._Pickler.save", "pickle._Framer.end_framing", "pickle._Framer.write", "pickle._Framer.start_framing", "<builtin>.hasattr"], "pickle._Pickler.save": ["pickle._Pickler.save_reduce", "<builtin>.id", "<builtin>.type", "pickle._Framer.write", "pickle._Pickler.persistent_id", "pickle._Pickler.save_global", "<builtin>.isinstance", "<builtin>.len", "<builtin>.issubclass", "pickle._Pickler.get", "pickle._Pickler.save_pers", "pickle._Framer.commit_frame", "<builtin>.getattr"], "pickle._Pickler.memoize": ["pickle._Pickler.put", "pickle._Framer.write", "<builtin>.id", "<builtin>.len"], "pickle._Pickler.put": ["<builtin>.repr"], "pickle._Pickler.get": ["<builtin>.repr"], "pickle._Pickler.persistent_id": [], "pickle._Pickler.save_pers": ["pickle._Pickler.save", "<builtin>.str", "pickle._Framer.write"], "pickle._Pickler.save_global": ["<builtin>.bytes", "pickle._Pickler.save", "<builtin>.__import__", "pickle._Pickler.save_reduce", "_functools.partial.__name__.rpartition", "pickle._Pickler.memoize", "pickle._Framer.write", "pickle._getattribute", "pickle.whichmodule", "<builtin>.getattr"], "pickle._Pickler.save_reduce": ["pickle._Pickler._batch_appends", "<builtin>.callable", "pickle._Pickler.save", "<builtin>.id", "pickle._Pickler.get", "pickle._Pickler.memoize", "<builtin>.isinstance", "pickle._Framer.write", "pickle._Pickler._batch_setitems", "_functools.partial", "<builtin>.getattr", "<builtin>.hasattr"], "pickle._Pickler._batch_appends": ["pickle._Pickler.save", "itertools.islice", "pickle._Framer.write", "<builtin>.list", "<builtin>.len", "<builtin>.iter"], "pickle._Pickler._batch_setitems": ["pickle._Pickler.save", "itertools.islice", "pickle._Framer.write", "<builtin>.list", "<builtin>.len", "<builtin>.iter"], "pickle._Pickler.save_none": ["pickle._Framer.write"], "pickle._Pickler.save_bool": ["pickle._Framer.write"], "pickle._Pickler.save_long": ["<builtin>.repr", "pickle.encode_long", "pickle._Framer.write", "<builtin>.len"], "pickle._Pickler.save_float": ["pickle._Framer.write", "<builtin>.repr"], "pickle._Pickler.save_bytes": ["pickle._Pickler.save_reduce", "pickle._Framer.write_large_bytes", "pickle._Pickler.memoize", "pickle._Framer.write", "<builtin>.len", "<builtin>.str"], "pickle._Pickler.save_bytearray": ["<builtin>.bytes", "pickle._Pickler.save_reduce", "pickle._Framer.write_large_bytes", "pickle._Framer.write", "<builtin>.len"], "pickle._Pickler.save_picklebuffer": ["pickle._Pickler.save_bytes", "pickle._Pickler.save_bytearray", "pickle._Framer.write", "<builtin>.bool"], "pickle._Pickler.save_str": ["pickle._Pickler.memoize", "pickle._Framer.write_large_bytes", "pickle._Framer.write", "<builtin>.len"], "pickle._Pickler.save_tuple": ["pickle._Pickler.save", "<builtin>.id", "pickle._Pickler.memoize", "pickle._Framer.write", "<builtin>.len", "pickle._Pickler.get"], "pickle._Pickler.save_list": ["pickle._Pickler.memoize", "pickle._Pickler._batch_appends", "pickle._Framer.write"], "pickle._Pickler.save_dict": ["pickle._Pickler.memoize", "pickle._Pickler._batch_setitems", "pickle._Framer.write"], "pickle._Pickler.save_set": ["pickle._Pickler.save", "pickle._Pickler.save_reduce", "pickle._Pickler.memoize", "itertools.islice", "pickle._Framer.write", "<builtin>.list", "<builtin>.len", "<builtin>.iter"], "pickle._Pickler.save_frozenset": ["pickle._Pickler.save", "pickle._Pickler.save_reduce", "<builtin>.id", "pickle._Pickler.memoize", "pickle._Framer.write", "<builtin>.list", "pickle._Pickler.get"], "_functools.partial.__name__.rpartition": [], "pickle._Pickler.save_type": ["pickle._Pickler.save_reduce", "<builtin>.type", "pickle._Pickler.save_global"], "pickle._Unpickler": [], "pickle._Unpickler.__init__": ["<builtin>.iter"], "pickle._Unpickler.load": ["pickle._Unframer.__init__", "pickle._Unframer.read", "<builtin>.isinstance", "<builtin>.hasattr"], "pickle._Unpickler.pop_mark": [], "pickle._Unpickler.persistent_load": [], "pickle._Unpickler.load_proto": ["pickle._Unframer.read", "<builtin>.ValueError"], "pickle._Unpickler.load_frame": ["pickle._Unframer.read", "<builtin>.ValueError", "pickle._Unframer.load_frame"], "pickle._Unpickler.load_persid": ["pickle._Unframer.readline", "pickle._Unpickler.persistent_load"], "pickle._Unpickler.load_binpersid": ["pickle._Unpickler.persistent_load"], "pickle._Unpickler.load_none": [], "pickle._Unpickler.load_false": [], "pickle._Unpickler.load_true": [], "pickle._Unpickler.load_int": ["pickle._Unframer.readline", "<builtin>.int"], "pickle._Unpickler.load_binint": ["pickle._Unframer.read"], "pickle._Unpickler.load_binint1": ["pickle._Unframer.read"], "pickle._Unpickler.load_binint2": ["pickle._Unframer.read"], "pickle._Unpickler.load_long": ["pickle._Unframer.readline", "<builtin>.int"], "pickle._Unpickler.load_long1": ["pickle._Unframer.read", "pickle.decode_long"], "pickle._Unpickler.load_long4": ["pickle._Unframer.read", "pickle.decode_long"], "pickle._Unpickler.load_float": ["pickle._Unframer.readline", "<builtin>.float"], "pickle._Unpickler.load_binfloat": ["pickle._Unframer.read"], "pickle._Unpickler._decode_string": [], "pickle._Unpickler.load_string": ["pickle._Unframer.readline", "pickle._Unpickler._decode_string", "<builtin>.len"], "pickle._Unpickler.load_binstring": ["pickle._Unframer.read", "pickle._Unpickler._decode_string"], "pickle._Unpickler.load_binbytes": ["pickle._Unframer.read"], "pickle._Unpickler.load_unicode": ["pickle._Unframer.readline", "<builtin>.str"], "pickle._Unpickler.load_binunicode": ["pickle._Unframer.read", "<builtin>.str"], "pickle._Unpickler.load_binunicode8": ["pickle._Unframer.read", "<builtin>.str"], "pickle._Unpickler.load_binbytes8": ["pickle._Unframer.read"], "pickle._Unpickler.load_bytearray8": ["pickle._Unframer.readinto", "<builtin>.bytearray", "pickle._Unframer.read"], "pickle._Unpickler.load_next_buffer": ["<builtin>.next"], "pickle._Unpickler.load_readonly_buffer": ["<builtin>.memoryview"], "pickle._Unpickler.load_short_binstring": ["pickle._Unframer.read", "pickle._Unpickler._decode_string"], "pickle._Unpickler.load_short_binbytes": ["pickle._Unframer.read"], "pickle._Unpickler.load_short_binunicode": ["pickle._Unframer.read", "<builtin>.str"], "pickle._Unpickler.load_tuple": ["<builtin>.tuple", "pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_empty_tuple": [], "pickle._Unpickler.load_tuple1": [], "pickle._Unpickler.load_tuple2": [], "pickle._Unpickler.load_tuple3": [], "pickle._Unpickler.load_empty_list": [], "pickle._Unpickler.load_empty_dictionary": [], "pickle._Unpickler.load_empty_set": ["<builtin>.set"], "pickle._Unpickler.load_frozenset": ["pickle._Unpickler.pop_mark", "<builtin>.frozenset"], "pickle._Unpickler.load_list": ["pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_dict": ["<builtin>.range", "pickle._Unpickler.pop_mark", "<builtin>.len"], "pickle._Unpickler._instantiate": ["<builtin>.isinstance", "<builtin>.TypeError", "sys.exc_info", "<builtin>.str", "<builtin>.hasattr"], "pickle._Unpickler.load_inst": ["pickle._Unframer.readline", "pickle._Unpickler._instantiate", "pickle._Unpickler.pop_mark", "pickle._Unpickler.find_class"], "pickle._Unpickler.find_class": ["pickle._getattribute", "<builtin>.getattr", "<builtin>.__import__", "sys.audit"], "pickle._Unpickler.load_obj": ["pickle._Unpickler.pop_mark", "pickle._Unpickler._instantiate"], "pickle._Unpickler.load_newobj": [], "pickle._Unpickler.load_newobj_ex": [], "pickle._Unpickler.load_global": ["pickle._Unframer.readline", "pickle._Unpickler.find_class"], "pickle._Unpickler.load_stack_global": ["pickle._Unpickler.find_class", "<builtin>.type"], "pickle._Unpickler.load_ext1": ["pickle._Unpickler.get_extension", "pickle._Unframer.read"], "pickle._Unpickler.get_extension": ["pickle._Unpickler.find_class", "<builtin>.ValueError"], "pickle._Unpickler.load_ext2": ["pickle._Unpickler.get_extension", "pickle._Unframer.read"], "pickle._Unpickler.load_ext4": ["pickle._Unpickler.get_extension", "pickle._Unframer.read"], "sys.audit": [], "pickle._Unpickler.load_reduce": [], "pickle._Unpickler.load_pop": ["pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_pop_mark": ["pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_dup": [], "pickle._Unpickler.load_get": ["pickle._Unframer.readline", "<builtin>.int"], "pickle._Unpickler.load_binget": ["pickle._Unframer.read"], "pickle._Unpickler.load_long_binget": ["pickle._Unframer.read"], "pickle._Unpickler.load_put": ["pickle._Unframer.readline", "<builtin>.int", "<builtin>.ValueError"], "pickle._Unpickler.load_binput": ["pickle._Unframer.read", "<builtin>.ValueError"], "pickle._Unpickler.load_long_binput": ["pickle._Unframer.read", "<builtin>.ValueError"], "pickle._Unpickler.load_memoize": ["<builtin>.len"], "pickle._Unpickler.load_append": [], "pickle._Unpickler.load_appends": ["pickle._Unpickler.pop_mark"], "pickle._Unpickler.load_setitem": [], "pickle._Unpickler.load_setitems": ["<builtin>.range", "pickle._Unpickler.pop_mark", "<builtin>.len"], "pickle._Unpickler.load_additems": ["pickle._Unpickler.pop_mark", "<builtin>.isinstance"], "pickle._Unpickler.load_build": ["sys.intern", "<builtin>.setattr", "<builtin>.isinstance", "<builtin>.len", "<builtin>.type", "<builtin>.getattr"], "pickle._Unpickler.load_mark": [], "pickle._Unpickler.load_stop": ["pickle._Stop.__init__"], "pickle._dump": ["pickle._Pickler.dump", "pickle._Pickler.__init__"], "pickle._dumps": ["io.BytesIO", "pickle._Pickler.dump", "<builtin>.isinstance", "pickle._Pickler.__init__"], "pickle._load": ["pickle._Unpickler.__init__", "pickle._Unpickler.load"], "pickle._loads": ["io.BytesIO", "<builtin>.isinstance", "pickle._Unpickler.__init__", "pickle._Unpickler.load", "<builtin>.TypeError"], "doctest.testmod": ["sys.modules.get", "doctest.DocTestRunner.summarize", "doctest.DocTestFinder.find", "doctest.DebugRunner.run", "doctest.DocTestRunner.__init__", "doctest.DocTestFinder.__init__", "doctest.DocTestRunner.merge", "<builtin>.TypeError", "doctest.DocTestRunner.run", "inspect.ismodule"], "argparse.ArgumentParser.__init__": ["ntpath.basename", "posixpath.basename", "<builtin>.super", "argparse._ActionsContainer.register", "gettext.gettext", "argparse._ActionsContainer._add_container_actions", "argparse._ActionsContainer.add_argument_group", "argparse._ActionsContainer.add_argument"], "argparse.FileType.__init__": [], "argparse._ActionsContainer.add_argument": ["<builtin>.callable", "argparse._ActionsContainer._registry_get", "argparse._ActionsContainer._add_action", "argparse._ActionsContainer._get_positional_kwargs", "argparse.ArgumentParser._add_action", "argparse._MutuallyExclusiveGroup._add_action", "argparse._ArgumentGroup._add_action", "<builtin>.len", "argparse._ActionsContainer._pop_action_class", "argparse._ActionsContainer._get_optional_kwargs", "argparse.ArgumentParser._get_formatter", "<builtin>.ValueError", "argparse.HelpFormatter._format_args", "<builtin>.hasattr"], "argparse.ArgumentParser.parse_args": ["argparse.ArgumentParser.error", "gettext.gettext", "argparse.ArgumentParser.parse_known_args"], "argparse.ArgumentParser.print_help": ["argparse.ArgumentParser._print_message", "argparse.ArgumentParser.format_help"], "unittest.main.TestProgram._print_help": ["<builtin>.print", "argparse.ArgumentParser.format_help", "argparse.ArgumentParser.print_help", "unittest.main.TestProgram._print_help"], "doctest.register_optionflag": ["<builtin>.len"], "doctest._extract_future_flags": ["<builtin>.getattr"], "doctest._normalize_module": ["<builtin>.__import__", "sys._getframe", "<builtin>.globals", "<builtin>.isinstance", "<builtin>.locals", "<builtin>.TypeError", "inspect.ismodule"], "inspect.ismodule": ["<builtin>.isinstance"], "<builtin>.locals": [], "doctest._newline_convert": [], "doctest._load_testfile": ["doctest._normalize_module", "<builtin>.open", "doctest._newline_convert", "doctest._module_relative_path", "<builtin>.getattr", "<builtin>.hasattr"], "doctest._module_relative_path": ["posixpath.exists", "inspect.ismodule", "sys.path.split", "sys.base_prefix.split", "<builtin>.len", "posixpath.split", "ntpath.join", "posixpath.join", "<builtin>.ValueError", "ntpath.exists", "<builtin>.hasattr", "ntpath.split", "<builtin>.TypeError", "sys.base_prefix.startswith", "sys.path.startswith"], "doctest._indent": ["re.sub"], "doctest._exception_traceback": ["_io.StringIO", "traceback.print_exception"], "_io.StringIO": [], "traceback.print_exception": ["<builtin>.print", "traceback.TracebackException.format", "traceback.TracebackException.__init__", "<builtin>.type"], "doctest._SpoofOut": [], "doctest._SpoofOut.getvalue": ["_io.StringIO.getvalue"], "_io.StringIO.getvalue": [], "doctest._SpoofOut.truncate": ["_io.StringIO.seek", "_io.StringIO.truncate"], "_io.StringIO.seek": [], "_io.StringIO.truncate": [], "doctest._ellipsis_match": ["<builtin>.len"], "doctest._comment_line": [], "doctest._strip_exception_details": ["<builtin>.len"], "doctest._OutputRedirectingPdb": [], "doctest._OutputRedirectingPdb.__init__": ["pdb.Pdb.__init__"], "pdb.Pdb.__init__": [], "doctest._OutputRedirectingPdb.set_trace": ["sys._getframe", "pdb.Pdb.set_trace"], "pdb.Pdb.set_trace": [], "doctest._OutputRedirectingPdb.set_continue": ["pdb.Pdb.set_continue"], "pdb.Pdb.set_continue": [], "doctest._OutputRedirectingPdb.trace_dispatch": ["pdb.Pdb.trace_dispatch"], "pdb.Pdb.trace_dispatch": [], "sys.base_prefix.startswith": [], "sys.path.startswith": [], "sys.path.split": [], "sys.base_prefix.split": [], "ntpath.join": ["<builtin>.map", "genericpath._check_arg_types", "<builtin>.isinstance", "ntpath.splitdrive"], "posixpath.join": ["<builtin>.map", "posixpath._get_sep", "genericpath._check_arg_types", "sys.base_prefix.endswith", "sys.path.endswith"], "posixpath.split": ["posixpath._get_sep", "sys.base_prefix.rfind", "sys.path.rfind", "<builtin>.len"], "ntpath.split": ["ntpath._get_bothseps", "ntpath.splitdrive", "<builtin>.len"], "ntpath.exists": [], "posixpath.exists": [], "doctest.Example": [], "doctest.Example.__init__": [], "doctest.Example.__eq__": ["<builtin>.type"], "doctest.Example.__hash__": ["<builtin>.hash"], "doctest.DocTest": [], "doctest.DocTest.__init__": ["<builtin>.isinstance"], "doctest.DocTest.__repr__": ["<builtin>.len"], "doctest.DocTest.__eq__": ["<builtin>.type"], "doctest.DocTest.__hash__": ["<builtin>.hash"], "doctest.DocTest.__lt__": ["<builtin>.isinstance", "<builtin>.id"], "doctest.DocTestParser": ["re.compile"], "doctest.DocTestParser.parse": ["doctest.DocTestParser._parse_example", "doctest.DocTestParser._min_indent", "doctest.Example.__init__", "<builtin>.len"], "doctest.DocTestParser._min_indent": ["<builtin>.min", "<builtin>.len"], "doctest.DocTestParser._parse_example": ["doctest.DocTestParser._find_options", "doctest.DocTestParser._check_prompt_blank", "<builtin>.len", "re.match", "doctest.DocTestParser._check_prefix"], "doctest.DocTestParser.get_doctest": ["doctest.DocTest.__init__", "doctest.DocTestParser.get_examples"], "doctest.DocTestParser.get_examples": ["doctest.DocTestParser.parse", "<builtin>.isinstance"], "doctest.DocTestParser._check_prompt_blank": ["<builtin>.enumerate", "<builtin>.ValueError", "<builtin>.len"], "doctest.DocTestParser._check_prefix": ["<builtin>.enumerate", "<builtin>.ValueError"], "doctest.DocTestParser._find_options": ["<builtin>.ValueError"], "doctest.DocTestFinder": [], "doctest.DocTestFinder.__init__": [], "doctest.DocTestFinder.find": ["inspect.getmodule", "inspect.getfile", "inspect.getsourcefile", "<builtin>.ValueError", "linecache.getlines", "<builtin>.type", "doctest.DocTestFinder._find", "<builtin>.getattr"], "inspect.getmodule": ["posixpath.realpath", "sys.modules.copy", "inspect.ismodule", "inspect.getabsfile", "sys.modules.get", "ntpath.realpath", "<builtin>.getattr", "<builtin>.hasattr"], "inspect.getsourcefile": ["inspect.getmodule", "inspect.getfile", "<builtin>.any", "posixpath.exists", "ntpath.exists", "ntpath.splitext", "posixpath.splitext", "<builtin>.getattr"], "inspect.getfile": ["inspect.isclass", "inspect.isfunction", "inspect.isframe", "inspect.ismethod", "inspect.ismodule", "inspect.istraceback", "sys.modules.get", "inspect.iscode", "<builtin>.type", "<builtin>.getattr", "<builtin>.TypeError", "<builtin>.hasattr"], "doctest.DocTestFinder._find": ["inspect.isroutine", "inspect.isclass", "<builtin>.id", "doctest.DocTestFinder._from_module", "doctest.DocTestFinder._get_test", "<builtin>.isinstance", "<builtin>.print", "inspect.unwrap", "<builtin>.ValueError", "<builtin>.getattr", "<builtin>.type", "doctest.DocTestFinder._find", "inspect.ismodule"], "doctest.DocTestFinder._from_module": ["inspect.getmodule", "inspect.isclass", "inspect.isfunction", "inspect.ismethoddescriptor", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.hasattr"], "inspect.isfunction": ["<builtin>.isinstance"], "inspect.ismethoddescriptor": ["inspect.isclass", "inspect.isfunction", "inspect.ismethod", "<builtin>.type", "<builtin>.hasattr"], "inspect.isclass": ["<builtin>.isinstance"], "doctest.DocTestFinder._get_test": ["doctest.DocTestParser.get_doctest", "<builtin>.isinstance", "doctest.DocTestFinder._find_lineno", "<builtin>.str", "<builtin>.getattr"], "inspect.unwrap": ["sys.getrecursionlimit", "<builtin>.id", "<builtin>.len", "inspect.unwrap._is_wrapper", "<builtin>.ValueError"], "inspect.isroutine": ["inspect.ismethoddescriptor", "inspect.isfunction", "inspect.isbuiltin", "inspect.ismethod"], "doctest.DocTestFinder._find_lineno": ["inspect.isclass", "inspect.isfunction", "inspect.isframe", "inspect.ismethod", "inspect.ismodule", "inspect.istraceback", "<builtin>.enumerate", "inspect.iscode", "<builtin>.len", "<builtin>.range", "re.compile", "<builtin>.getattr"], "inspect.ismethod": ["<builtin>.isinstance"], "inspect.istraceback": ["<builtin>.isinstance"], "inspect.isframe": ["<builtin>.isinstance"], "inspect.iscode": ["<builtin>.isinstance"], "doctest.DocTestRunner": ["re.compile"], "doctest.DocTestRunner.__init__": ["_io.StringIO.__init__", "io.StringIO.__init__"], "_io.StringIO.__init__": [], "io.StringIO.__init__": [], "doctest.DocTestRunner.report_start": ["doctest.DocTest.__init__", "doctest.SkipDocTestCase.__init__", "doctest.DocTestRunner.__init__", "sys.stdout.write", "doctest._indent"], "doctest.SkipDocTestCase.__init__": ["doctest.DocTestCase.__init__"], "sys.stdout.write": [], "doctest.DocTestRunner.report_success": ["doctest.DocTest.__init__", "doctest.SkipDocTestCase.__init__", "doctest.DocTestRunner.__init__", "sys.stdout.write"], "doctest.DocTestRunner.report_failure": ["sys.stdout.write", "doctest.DocTest.__init__", "doctest.DocTestRunner._failure_header", "doctest.DocTestRunner.__init__", "doctest.SkipDocTestCase.__init__"], "doctest.DocTestRunner._failure_header": ["doctest._indent"], "doctest.DocTestRunner.report_unexpected_exception": ["doctest._exception_traceback", "doctest.DocTest.__init__", "doctest.DocTestRunner._failure_header", "doctest.SkipDocTestCase.__init__", "sys.stdout.write", "doctest.DocTestRunner.__init__", "doctest._indent"], "doctest.DocTestRunner.__run": ["doctest._exception_traceback", "doctest.DebugRunner.report_failure", "doctest.DebugRunner.report_unexpected_exception", "<builtin>.compile", "doctest.DocTestRunner.report_unexpected_exception", "doctest.DocTestRunner.report_failure", "doctest._SpoofOut.getvalue", "<builtin>.enumerate", "doctest.DocTestRunner.report_success", "<builtin>.exec", "doctest.DocTestRunner.report_start", "doctest._strip_exception_details", "traceback.format_exception_only", "sys.exc_info", "doctest.DocTestRunner.__record_outcome", "<builtin>.range", "doctest._SpoofOut.truncate", "doctest._OutputRedirectingPdb.set_continue"], "<builtin>.compile": [], "traceback.format_exception_only": ["traceback.TracebackException.format_exception_only", "traceback.TracebackException.__init__", "<builtin>.list"], "doctest.DebugRunner.report_failure": ["doctest.DocTestFailure.__init__"], "doctest.DebugRunner.report_unexpected_exception": ["doctest.UnexpectedException.__init__"], "doctest.DocTestRunner.__record_outcome": [], "doctest.DocTestRunner.__patched_linecache_getlines": ["linecache.getlines", "<builtin>.int"], "doctest.DocTestRunner.run": ["doctest._extract_future_flags", "pdb.Pdb.reset", "sys.stdout.encoding.lower", "doctest.DocTestRunner.__run", "sys.gettrace", "doctest._OutputRedirectingPdb.__init__", "sys.settrace"], "sys.stdout.encoding.lower": [], "doctest.DocTestRunner.run.out": ["<builtin>.str", "sys.stdout.write"], "sys.gettrace": [], "pdb.Pdb.reset": [], "sys.settrace": [], "doctest.DocTestRunner.summarize": ["<builtin>.print", "<builtin>.len"], "doctest.DocTestRunner.merge": [], "doctest.OutputChecker": [], "doctest.OutputChecker._toAscii": ["<builtin>.str"], "doctest.OutputChecker.check_output": ["doctest.OutputChecker._toAscii", "re.escape", "re.sub", "doctest._ellipsis_match"], "doctest.OutputChecker._do_a_fancy_diff": [], "doctest.OutputChecker.output_difference": ["difflib.unified_diff", "re.sub", "difflib.Differ.compare", "<builtin>.list", "difflib.Differ.__init__", "doctest.OutputChecker._do_a_fancy_diff", "difflib.context_diff", "doctest._indent"], "difflib.unified_diff": ["difflib.SequenceMatcher.__init__", "difflib._format_range_unified", "difflib.SequenceMatcher.get_grouped_opcodes", "difflib._check_types"], "difflib.context_diff": ["<builtin>.any", "difflib.SequenceMatcher.__init__", "difflib.SequenceMatcher.get_grouped_opcodes", "<builtin>.dict", "difflib._check_types", "difflib._format_range_context"], "difflib.Differ.__init__": [], "difflib.Differ.compare": ["difflib.SequenceMatcher.__init__", "difflib.Differ._fancy_replace", "difflib.SequenceMatcher.get_opcodes", "difflib.Differ._dump", "<builtin>.ValueError"], "doctest.DocTestFailure": [], "doctest.DocTestFailure.__init__": [], "doctest.DocTestFailure.__str__": ["<builtin>.str"], "doctest.UnexpectedException": [], "doctest.UnexpectedException.__init__": [], "doctest.UnexpectedException.__str__": ["<builtin>.str"], "doctest.DebugRunner": [], "doctest.DebugRunner.run": ["doctest.DebugRunner.run", "doctest.DocTestRunner.run"], "sys.modules.get": [], "doctest.testfile": ["doctest.DocTestParser.get_doctest", "ntpath.basename", "posixpath.basename", "doctest.DocTestRunner.summarize", "doctest.DebugRunner.run", "doctest.DocTestRunner.__init__", "<builtin>.ValueError", "doctest.DocTestRunner.merge", "doctest._load_testfile", "doctest.DocTestRunner.run"], "ntpath.basename": ["ntpath.split"], "posixpath.basename": ["sys.stdin.buffer.rfind", "posixpath._get_sep", "sys.base_prefix.rfind", "sys.path.rfind"], "doctest.run_docstring_examples": ["doctest.DocTestFinder.find", "doctest.DebugRunner.run", "doctest.DocTestRunner.__init__", "doctest.DocTestFinder.__init__", "doctest.DocTestRunner.run"], "doctest.set_unittest_reportflags": ["<builtin>.ValueError"], "doctest.DocTestCase": [], "doctest.DocTestCase.__init__": ["unittest.case.TestCase.__init__"], "unittest.case.TestCase.__init__": ["unittest.case.TestCase.addTypeEqualityFunc", "<builtin>.ValueError", "<builtin>.getattr"], "doctest.DocTestCase.setUp": [], "doctest.DocTestCase.tearDown": [], "doctest.DocTestCase.runTest": ["doctest.DocFileCase.format_failure", "_io.StringIO", "doctest.DebugRunner.run", "doctest.DocTestCase.format_failure", "doctest.DocTestRunner.__init__", "doctest.DocTestRunner.run"], "doctest.DocTestCase.format_failure": [], "doctest.DocFileCase.format_failure": [], "doctest.DocTestCase.debug": ["doctest.DocTestCase.tearDown", "doctest.SkipDocTestCase.setUp", "doctest.DebugRunner.run", "doctest.DocTestCase.setUp", "doctest.DocTestRunner.__init__"], "doctest.SkipDocTestCase.setUp": ["unittest.case.TestCase.skipTest"], "doctest.DocTestCase.id": [], "doctest.DocTestCase.__eq__": ["<builtin>.type"], "doctest.DocTestCase.__hash__": ["<builtin>.hash"], "doctest.DocTestCase.__repr__": [], "doctest.DocTestCase.shortDescription": [], "doctest.SkipDocTestCase": [], "unittest.case.TestCase.skipTest": [], "doctest.SkipDocTestCase.test_skip": [], "doctest.SkipDocTestCase.shortDescription": [], "doctest._DocTestSuite": [], "doctest._DocTestSuite._removeTestAtIndex": [], "doctest.DocTestSuite": ["unittest.suite.BaseTestSuite.addTest", "unittest.suite.BaseTestSuite.__init__", "doctest.DocTestFinder.find", "doctest._normalize_module", "<builtin>.len", "doctest.DocTestCase.__init__", "doctest.SkipDocTestCase.__init__", "doctest.DocTestFinder.__init__"], "unittest.suite.BaseTestSuite.__init__": ["unittest.suite.BaseTestSuite.addTests"], "unittest.suite.BaseTestSuite.addTest": ["<builtin>.callable", "<builtin>.isinstance", "<builtin>.repr", "<builtin>.issubclass", "<builtin>.TypeError"], "doctest.DocFileCase": [], "doctest.DocFileCase.id": [], "doctest.DocFileCase.__repr__": [], "doctest.DocFileTest": ["doctest.DocTestParser.get_doctest", "ntpath.basename", "posixpath.basename", "doctest.DocTestCase.__init__", "<builtin>.ValueError", "doctest._load_testfile"], "doctest.DocFileSuite": ["unittest.suite.BaseTestSuite.__init__", "unittest.suite.BaseTestSuite.addTest", "doctest._normalize_module", "doctest.DocFileTest"], "doctest.script_from_examples": ["doctest._comment_line", "doctest.DocTestParser.parse", "<builtin>.isinstance"], "doctest.testsource": ["doctest.DocTestFinder.find", "doctest._normalize_module", "doctest.script_from_examples", "doctest.DocTestFinder.__init__", "<builtin>.ValueError"], "doctest.debug_src": ["doctest.script_from_examples", "doctest.debug_script"], "doctest.debug_script": ["<builtin>.print", "<builtin>.exec", "pdb.Pdb", "sys.exc_info"], "pdb.Pdb": [], "doctest.debug": ["doctest.debug_script", "doctest.testsource", "doctest._normalize_module"], "doctest._TestClass": [], "doctest._TestClass.__init__": [], "doctest._TestClass.square": [], "doctest._TestClass.get": [], "sys.path.insert": [], "sys.exit": [], "traceback.print_list": ["<builtin>.print", "traceback.StackSummary.from_list", "traceback.StackSummary.format"], "traceback.StackSummary.from_list": ["<builtin>.isinstance", "traceback.FrameSummary.__init__"], "traceback.StackSummary.format": ["<builtin>.sorted"], "traceback.print_tb": ["traceback.extract_tb", "traceback.print_list"], "traceback.extract_tb": ["traceback.StackSummary.extract", "traceback.walk_tb"], "traceback.format_tb": ["traceback.extract_tb"], "traceback.walk_tb": [], "traceback.StackSummary.extract": ["itertools.islice", "traceback.FrameSummary.__init__", "linecache.checkcache", "collections.deque", "linecache.lazycache", "<builtin>.set", "<builtin>.getattr"], "traceback.TracebackException.__init__": ["traceback.TracebackException._load_lines", "<builtin>.str", "<builtin>.id", "traceback.TracebackException.__init__", "<builtin>.issubclass", "traceback._some_str", "<builtin>.set", "traceback.StackSummary.extract", "<builtin>.type", "traceback.walk_tb"], "traceback.TracebackException.format": ["traceback.TracebackException.format", "traceback.TracebackException.format_exception_only"], "traceback.format_exception": ["traceback.TracebackException.format", "traceback.TracebackException.__init__", "<builtin>.type", "<builtin>.list"], "traceback.TracebackException.format_exception_only": ["<builtin>.len", "<builtin>.issubclass", "<builtin>.min", "traceback._format_final_exc_line", "<builtin>.str"], "traceback._format_final_exc_line": ["traceback._some_str"], "traceback._some_str": ["<builtin>.type", "<builtin>.str"], "traceback.print_exc": ["traceback.print_exception", "sys.exc_info"], "traceback.format_exc": ["traceback.format_exception", "sys.exc_info"], "traceback.print_last": ["traceback.print_exception", "<builtin>.ValueError", "<builtin>.hasattr"], "traceback.print_stack": ["traceback.extract_stack", "sys._getframe", "traceback.print_list"], "traceback.extract_stack": ["traceback.StackSummary.extract", "sys._getframe", "traceback.walk_stack"], "traceback.format_stack": ["traceback.extract_stack", "sys._getframe", "traceback.format_list"], "traceback.walk_stack": ["sys._getframe"], "traceback.clear_frames": [], "traceback.FrameSummary": [], "traceback.FrameSummary.__init__": ["<builtin>.repr"], "traceback.FrameSummary.__eq__": ["<builtin>.isinstance"], "traceback.FrameSummary.__getitem__": [], "traceback.FrameSummary.__iter__": ["<builtin>.iter"], "traceback.FrameSummary.__repr__": [], "traceback.FrameSummary.__len__": [], "traceback.FrameSummary.line": ["linecache.getline"], "traceback.StackSummary": [], "collections.deque": [], "linecache.lazycache": ["<builtin>.getattr", "<builtin>.len"], "linecache.checkcache": ["<builtin>.list", "<builtin>.len"], "traceback.TracebackException": [], "traceback.TracebackException._load_lines": ["traceback.TracebackException._load_lines"], "traceback.TracebackException.from_exception": ["traceback.TracebackException.__init__", "<builtin>.type"], "traceback.TracebackException.__eq__": [], "traceback.TracebackException.__str__": [], "linecache.clearcache": [], "linecache.updatecache": ["ntpath.isabs", "posixpath.isabs", "<builtin>.len", "ntpath.join", "linecache.lazycache", "posixpath.join"], "ntpath.isabs": ["ntpath.splitdrive", "ntpath._get_bothseps", "<builtin>.isinstance", "<builtin>.len", "sys.base_prefix.replace", "sys.path.replace"], "posixpath.isabs": ["posixpath._get_sep", "sys.base_prefix.startswith", "sys.path.startswith"], "tokenize.TokenInfo": [], "tokenize.TokenInfo.__repr__": [], "tokenize.TokenInfo.exact_type": [], "tokenize.group": [], "tokenize.any": ["tokenize.group"], "tokenize.maybe": ["tokenize.group"], "tokenize._all_string_prefixes": ["itertools.permutations", "itertools.product"], "itertools.permutations": [], "itertools.product": [], "tokenize._compile": ["re.compile"], "tokenize.TokenError": [], "tokenize.StopTokenizing": [], "tokenize.Untokenizer": [], "tokenize.Untokenizer.__init__": [], "tokenize.Untokenizer.add_whitespace": ["<builtin>.ValueError"], "tokenize.Untokenizer.untokenize": ["<builtin>.iter", "tokenize.Untokenizer.add_whitespace", "tokenize.Untokenizer.compat", "<builtin>.len"], "tokenize.Untokenizer.compat": ["itertools.chain"], "itertools.chain": [], "tokenize.untokenize": ["tokenize.Untokenizer.untokenize", "tokenize.Untokenizer.__init__"], "tokenize._get_normal_name": [], "tokenize.detect_encoding": ["tokenize.detect_encoding.find_cookie", "tokenize.detect_encoding.read_or_stop"], "tokenize.detect_encoding.read_or_stop": ["gzip.GzipFile.readline", "lzma.LZMAFile.readline", "bz2.BZ2File.readline"], "gzip.GzipFile.readline": ["_compression.BaseStream._check_not_closed"], "bz2.BZ2File.readline": ["_io._BufferedIOBase.__index__", "<builtin>.isinstance", "_compression.BaseStream._check_can_read", "<builtin>.TypeError", "<builtin>.hasattr"], "lzma.LZMAFile.readline": ["_compression.BaseStream._check_can_read"], "tokenize.detect_encoding.find_cookie": ["tokenize._get_normal_name", "<builtin>.SyntaxError"], "<builtin>.SyntaxError": [], "tokenize.open": ["builtins.open", "gzip.GzipFile.close", "bz2.BZ2File.close", "gzip.GzipFile.seek", "lzma.LZMAFile.seek", "tokenize.detect_encoding", "bz2.BZ2File.seek", "lzma.LZMAFile.close", "asyncio.windows_utils.PipeHandle.close", "_io.TextIOWrapper"], "builtins.open": [], "lzma.LZMAFile.seek": ["_compression.BaseStream._check_can_seek"], "bz2.BZ2File.seek": ["_compression.BaseStream._check_can_seek"], "gzip.GzipFile.seek": ["<builtin>.OSError", "<builtin>.ValueError", "gzip.GzipFile.write", "_compression.BaseStream._check_not_closed", "<builtin>.range"], "_io.TextIOWrapper": [], "gzip.GzipFile.close": ["sys.stdout.buffer.write", "sys.base_prefix.write", "sys.path.write", "sys.stdin.buffer.write", "gzip.write32u", "gzip.GzipFile.write"], "bz2.BZ2File.close": ["sys.base_prefix.write", "tarfile.TarFile.close", "sys.path.write", "sys.base_prefix.close", "sys.path.close"], "lzma.LZMAFile.close": ["sys.base_prefix.write", "tarfile.TarFile.close", "sys.path.write", "sys.base_prefix.close", "sys.path.close"], "asyncio.windows_utils.PipeHandle.close": [], "tokenize.tokenize": ["itertools.repeat", "tokenize.detect_encoding", "itertools.chain", "<builtin>.iter", "tokenize._tokenize"], "itertools.repeat": [], "tokenize._tokenize": ["<builtin>.IndentationError", "tokenize._compile", "sys.stdin.readline", "<builtin>.len"], "sys.stdin.readline": [], "<builtin>.IndentationError": [], "tokenize.generate_tokens": ["tokenize._tokenize"], "tokenize.main.perror": ["sys.stderr.write"], "tokenize.main.error": ["sys.exit", "tokenize.main.perror"], "token.ISTERMINAL": [], "token.ISNONTERMINAL": [], "token.ISEOF": [], "argparse._AttributeHolder": [], "argparse._AttributeHolder.__repr__": ["argparse._AttributeHolder._get_kwargs", "argparse._AttributeHolder._get_args", "argparse.ArgumentParser._get_kwargs", "<builtin>.repr"], "argparse._AttributeHolder._get_args": [], "argparse._AttributeHolder._get_kwargs": ["<builtin>.sorted"], "argparse.ArgumentParser._get_kwargs": ["<builtin>.getattr"], "argparse.HelpFormatter": ["argparse.HelpFormatter._Section"], "argparse.HelpFormatter.__init__": ["argparse.HelpFormatter._Section.__init__", "<builtin>.max", "shutil.get_terminal_size", "<builtin>.min", "re.compile"], "shutil.get_terminal_size": ["sys.__stdout__.fileno", "<builtin>.int"], "argparse.HelpFormatter._Section.__init__": [], "argparse.HelpFormatter._indent": [], "argparse.HelpFormatter._dedent": [], "argparse.HelpFormatter._Section": [], "argparse.HelpFormatter._Section.format_help": ["argparse.HelpFormatter._indent", "argparse.HelpFormatter._dedent", "argparse.HelpFormatter._join_parts"], "argparse.HelpFormatter._join_parts": [], "argparse.HelpFormatter._add_item": [], "argparse.HelpFormatter.start_section": ["argparse.HelpFormatter._indent", "argparse.HelpFormatter._Section.__init__", "argparse.HelpFormatter._add_item"], "argparse.HelpFormatter.end_section": ["argparse.HelpFormatter._dedent"], "argparse.HelpFormatter.add_text": ["argparse.HelpFormatter._add_item"], "argparse.HelpFormatter.add_usage": ["argparse.HelpFormatter._add_item"], "argparse.HelpFormatter.add_argument": ["<builtin>.max", "argparse.HelpFormatter._iter_indented_subactions", "argparse.HelpFormatter._add_item", "<builtin>.len", "argparse.HelpFormatter._format_action_invocation"], "argparse.HelpFormatter._format_action_invocation": ["argparse.HelpFormatter._get_default_metavar_for_optional", "argparse.HelpFormatter._metavar_formatter", "argparse.HelpFormatter._metavar_formatter.format", "argparse.HelpFormatter._format_args", "argparse.HelpFormatter._get_default_metavar_for_positional"], "argparse.HelpFormatter._iter_indented_subactions": ["argparse.HelpFormatter._indent", "argparse.HelpFormatter._dedent"], "argparse.HelpFormatter.add_arguments": ["argparse.HelpFormatter.add_argument"], "argparse.HelpFormatter.format_help": ["argparse.HelpFormatter._Section.format_help"], "argparse.HelpFormatter._format_usage": ["re.findall", "argparse.HelpFormatter._format_usage.get_lines", "gettext.gettext", "<builtin>.dict", "<builtin>.len", "argparse.HelpFormatter._format_actions_usage"], "gettext.gettext": ["gettext.dgettext"], "argparse.HelpFormatter._format_actions_usage": ["<builtin>.sorted", "<builtin>.enumerate", "argparse.HelpFormatter._get_default_metavar_for_optional", "re.sub", "<builtin>.len", "argparse.HelpFormatter._format_args", "<builtin>.set", "argparse.HelpFormatter._get_default_metavar_for_positional", "<builtin>.range"], "argparse.HelpFormatter._format_usage.get_lines": ["<builtin>.len"], "argparse.HelpFormatter._get_default_metavar_for_positional": [], "argparse.HelpFormatter._format_args": ["<builtin>.range", "argparse.HelpFormatter._metavar_formatter", "argparse.HelpFormatter._metavar_formatter.format", "<builtin>.ValueError"], "argparse.HelpFormatter._get_default_metavar_for_optional": [], "argparse.HelpFormatter._format_text": ["argparse.HelpFormatter._fill_text", "<builtin>.max", "<builtin>.dict"], "argparse.HelpFormatter._format_action": ["<builtin>.max", "argparse.HelpFormatter._expand_help", "argparse.HelpFormatter._iter_indented_subactions", "argparse.HelpFormatter._format_action", "<builtin>.len", "argparse.HelpFormatter._join_parts", "<builtin>.min", "argparse.HelpFormatter._split_lines", "argparse.HelpFormatter._format_action_invocation"], "argparse.HelpFormatter._expand_help": ["<builtin>.vars", "argparse.HelpFormatter._get_help_string", "<builtin>.list", "<builtin>.dict", "<builtin>.str", "<builtin>.hasattr"], "argparse.HelpFormatter._metavar_formatter": ["<builtin>.str"], "argparse.HelpFormatter._metavar_formatter.format": ["<builtin>.isinstance"], "argparse.HelpFormatter._get_help_string": [], "textwrap.wrap": ["textwrap.TextWrapper.__init__", "textwrap.TextWrapper.wrap"], "textwrap.fill": ["textwrap.TextWrapper.fill", "textwrap.TextWrapper.__init__"], "argparse.RawDescriptionHelpFormatter": [], "argparse.RawDescriptionHelpFormatter._fill_text": [], "argparse.RawTextHelpFormatter": [], "argparse.RawTextHelpFormatter._split_lines": [], "argparse.ArgumentDefaultsHelpFormatter": [], "argparse.ArgumentDefaultsHelpFormatter._get_help_string": [], "argparse.MetavarTypeHelpFormatter": [], "argparse.MetavarTypeHelpFormatter._get_default_metavar_for_optional": [], "argparse.MetavarTypeHelpFormatter._get_default_metavar_for_positional": [], "argparse._get_action_name": [], "argparse.ArgumentError": [], "argparse.ArgumentError.__init__": ["argparse._get_action_name"], "argparse.ArgumentError.__str__": ["<builtin>.dict"], "argparse.ArgumentTypeError": [], "argparse.Action": [], "argparse.Action.__init__": [], "argparse.Action._get_kwargs": ["<builtin>.getattr"], "argparse.Action.__call__": ["<builtin>.NotImplementedError", "gettext.gettext"], "argparse._StoreAction": [], "argparse._StoreAction.__init__": ["<builtin>.super", "<builtin>.ValueError"], "argparse._StoreAction.__call__": ["<builtin>.setattr"], "argparse._StoreConstAction": [], "argparse._StoreConstAction.__init__": ["<builtin>.super"], "argparse._StoreConstAction.__call__": ["<builtin>.setattr"], "argparse._StoreTrueAction": [], "argparse._StoreTrueAction.__init__": ["<builtin>.super"], "argparse._StoreFalseAction": [], "argparse._StoreFalseAction.__init__": ["<builtin>.super"], "argparse._AppendAction": [], "argparse._AppendAction.__init__": ["<builtin>.super", "<builtin>.ValueError"], "argparse._AppendAction.__call__": ["<builtin>.setattr", "argparse._copy_items", "<builtin>.getattr"], "argparse._AppendConstAction": [], "argparse._AppendConstAction.__init__": ["<builtin>.super"], "argparse._AppendConstAction.__call__": ["<builtin>.setattr", "argparse._copy_items", "<builtin>.getattr"], "argparse._CountAction": [], "argparse._CountAction.__init__": ["<builtin>.super"], "argparse._CountAction.__call__": ["<builtin>.setattr", "<builtin>.getattr"], "argparse._HelpAction": [], "argparse._HelpAction.__init__": ["<builtin>.super"], "argparse._HelpAction.__call__": [], "argparse._VersionAction": [], "argparse._VersionAction.__init__": ["<builtin>.super"], "argparse._VersionAction.__call__": [], "argparse._SubParsersAction": ["argparse._SubParsersAction._ChoicesPseudoAction"], "argparse._SubParsersAction._ChoicesPseudoAction": [], "argparse._SubParsersAction._ChoicesPseudoAction.__init__": ["<builtin>.super"], "argparse._SubParsersAction.__init__": ["<builtin>.super"], "argparse._SubParsersAction.add_parser": ["argparse._SubParsersAction._ChoicesPseudoAction.__init__"], "argparse._SubParsersAction._get_subactions": [], "argparse._SubParsersAction.__call__": ["<builtin>.vars", "argparse.ArgumentError.__init__", "<builtin>.setattr", "gettext.gettext", "<builtin>.getattr"], "argparse._ExtendAction": [], "argparse._ExtendAction.__call__": ["<builtin>.setattr", "argparse._copy_items", "<builtin>.getattr"], "argparse.FileType": [], "argparse.FileType.__call__": ["<builtin>.open", "gettext.gettext", "<builtin>.ValueError"], "argparse.FileType.__repr__": ["<builtin>.type", "<builtin>.repr"], "argparse.Namespace": [], "argparse.Namespace.__init__": ["<builtin>.setattr"], "argparse.Namespace.__eq__": ["<builtin>.vars", "<builtin>.isinstance"], "argparse.Namespace.__contains__": [], "argparse._ActionsContainer": [], "argparse._ActionsContainer.__init__": ["argparse._ActionsContainer._get_handler", "<builtin>.super", "argparse._ActionsContainer.register", "re.compile"], "argparse._ActionsContainer.register": [], "argparse._ActionsContainer._get_handler": ["gettext.gettext", "<builtin>.ValueError", "<builtin>.getattr"], "argparse._ActionsContainer._registry_get": [], "argparse._ActionsContainer.set_defaults": [], "argparse._ActionsContainer.get_default": [], "argparse._ActionsContainer._get_positional_kwargs": ["<builtin>.TypeError", "gettext.gettext", "<builtin>.dict"], "argparse._ActionsContainer._get_optional_kwargs": ["<builtin>.dict", "gettext.gettext", "<builtin>.ValueError", "<builtin>.len"], "argparse._ActionsContainer._pop_action_class": ["argparse._ActionsContainer._registry_get"], "argparse.ArgumentParser._get_formatter": ["argparse.HelpFormatter.__init__"], "argparse._ArgumentGroup._add_action": ["<builtin>.super"], "argparse._ActionsContainer._add_action": ["argparse._ActionsContainer._check_conflict"], "argparse.ArgumentParser._add_action": [], "argparse._MutuallyExclusiveGroup._add_action": ["argparse._ActionsContainer._add_action", "argparse.ArgumentParser._add_action", "argparse._MutuallyExclusiveGroup._add_action", "gettext.gettext", "argparse._ArgumentGroup._add_action", "<builtin>.ValueError"], "argparse._ActionsContainer.add_argument_group": ["argparse._ArgumentGroup.__init__"], "argparse._ArgumentGroup.__init__": ["<builtin>.super"], "argparse._ActionsContainer.add_mutually_exclusive_group": ["argparse._MutuallyExclusiveGroup.__init__"], "argparse._MutuallyExclusiveGroup.__init__": ["<builtin>.super"], "argparse._ActionsContainer._check_conflict": ["argparse._ActionsContainer._get_handler"], "argparse._ActionsContainer._remove_action": [], "argparse._ActionsContainer._add_container_actions": ["argparse._ActionsContainer.add_mutually_exclusive_group", "gettext.gettext", "<builtin>.ValueError", "argparse._ActionsContainer.add_argument_group"], "argparse._ActionsContainer._handle_conflict_error": ["argparse.ArgumentError.__init__", "gettext.ngettext", "<builtin>.len"], "gettext.ngettext": ["gettext.dngettext"], "argparse._ActionsContainer._handle_conflict_resolve": [], "argparse._ArgumentGroup": [], "argparse._ArgumentGroup._remove_action": ["<builtin>.super"], "argparse._MutuallyExclusiveGroup": [], "argparse._MutuallyExclusiveGroup._remove_action": ["argparse._MutuallyExclusiveGroup._remove_action", "argparse._ArgumentGroup._remove_action", "argparse._ActionsContainer._remove_action"], "argparse.ArgumentParser": [], "argparse.ArgumentParser.__init__.identity": [], "argparse.ArgumentParser.add_subparsers": ["argparse.HelpFormatter.add_usage", "argparse._MutuallyExclusiveGroup._add_action", "argparse.ArgumentParser._get_positional_actions", "gettext.gettext", "argparse._ArgumentGroup._add_action", "argparse._ActionsContainer.add_argument_group", "argparse.ArgumentParser.error", "argparse._ActionsContainer._pop_action_class", "argparse.ArgumentParser._get_formatter", "argparse.HelpFormatter.format_help", "<builtin>.type"], "argparse.ArgumentParser.error": ["argparse.ArgumentParser.exit", "gettext.gettext", "argparse.ArgumentParser.print_usage"], "argparse.ArgumentParser._get_positional_actions": [], "argparse.ArgumentParser._get_optional_actions": [], "argparse.ArgumentParser.parse_known_args": ["<builtin>.setattr", "argparse.ArgumentParser._parse_known_args", "<builtin>.list", "<builtin>.delattr", "argparse.Namespace.__init__", "argparse.ArgumentParser.error", "sys.exc_info", "<builtin>.getattr", "<builtin>.str", "<builtin>.hasattr"], "argparse.ArgumentParser._parse_known_args": ["argparse.ArgumentParser._parse_known_args.consume_positionals", "<builtin>.max", "<builtin>.hasattr", "argparse.ArgumentParser._read_args_from_files", "<builtin>.enumerate", "argparse.ArgumentParser._get_positional_actions", "argparse.ArgumentParser._parse_known_args.consume_optional", "<builtin>.isinstance", "<builtin>.setattr", "argparse.ArgumentParser._parse_optional", "gettext.gettext", "argparse.ArgumentParser.error", "argparse._get_action_name", "argparse.ArgumentParser._get_value", "<builtin>.min", "<builtin>.iter", "<builtin>.getattr", "<builtin>.set"], "argparse.ArgumentParser._read_args_from_files": ["argparse.ArgumentParser.convert_arg_line_to_args", "argparse.ArgumentParser._read_args_from_files", "argparse.ArgumentParser.error", "<builtin>.open", "sys.exc_info", "<builtin>.str"], "argparse.ArgumentParser._parse_optional": ["argparse.ArgumentParser.error", "argparse.ArgumentParser._get_option_tuples", "gettext.gettext", "<builtin>.len"], "argparse.ArgumentParser._parse_known_args.take_action": ["argparse.ArgumentParser._get_values", "argparse._get_action_name", "gettext.gettext", "argparse.ArgumentError.__init__"], "argparse.ArgumentParser._get_values": ["<builtin>.isinstance", "argparse.ArgumentParser._get_value", "argparse.ArgumentParser._check_value", "<builtin>.len"], "argparse.ArgumentParser._parse_known_args.consume_optional": ["argparse.ArgumentError.__init__", "argparse.ArgumentParser._match_argument", "gettext.gettext", "argparse.ArgumentParser._parse_known_args.take_action"], "argparse.ArgumentParser._match_argument": ["argparse.ArgumentError.__init__", "gettext.gettext", "gettext.ngettext", "<builtin>.len", "argparse.ArgumentParser._get_nargs_pattern", "re.match"], "argparse.ArgumentParser._parse_known_args.consume_positionals": ["<builtin>.zip", "argparse.ArgumentParser._match_arguments_partial", "<builtin>.len", "argparse.ArgumentParser._parse_known_args.take_action"], "argparse.ArgumentParser._match_arguments_partial": ["re.match", "argparse.ArgumentParser._get_nargs_pattern", "<builtin>.range", "<builtin>.len"], "argparse.ArgumentParser._get_value": ["argparse._ActionsContainer._registry_get", "<builtin>.callable", "argparse.ArgumentError.__init__", "gettext.gettext", "<builtin>.repr", "sys.exc_info", "<builtin>.str", "<builtin>.getattr"], "argparse.ArgumentParser.convert_arg_line_to_args": [], "argparse.ArgumentParser._get_nargs_pattern": [], "argparse.ArgumentParser._get_option_tuples": ["argparse.ArgumentParser.error", "gettext.gettext"], "argparse.ArgumentParser.parse_intermixed_args": ["argparse.ArgumentParser.error", "gettext.gettext", "argparse.ArgumentParser.parse_known_intermixed_args"], "argparse.ArgumentParser.format_usage": ["argparse.HelpFormatter.format_help", "argparse.ArgumentParser._get_formatter", "argparse.HelpFormatter.add_usage"], "argparse.ArgumentParser._check_value": ["<builtin>.map", "gettext.gettext", "argparse.ArgumentError.__init__"], "argparse.ArgumentParser.format_help": ["argparse.HelpFormatter.end_section", "argparse.HelpFormatter.add_usage", "argparse.HelpFormatter.add_text", "argparse.ArgumentParser._get_formatter", "argparse.HelpFormatter.start_section", "argparse.HelpFormatter.format_help", "argparse.HelpFormatter.add_arguments"], "argparse.ArgumentParser.print_usage": ["argparse.ArgumentParser._print_message", "argparse.ArgumentParser.format_usage"], "argparse.ArgumentParser._print_message": ["sys.stderr.write", "sys.stdout.write"], "argparse.ArgumentParser.exit": ["sys.exit", "argparse.ArgumentParser._print_message"], "gettext._tokenize": ["re.finditer", "<builtin>.ValueError"], "gettext._error": ["<builtin>.ValueError"], "gettext._parse": ["<builtin>.next", "gettext._error", "gettext._parse", "<builtin>.ValueError", "<builtin>.int"], "<builtin>.round": [], "gettext.c2py": ["gettext._error", "<builtin>.len", "gettext._tokenize", "<builtin>.exec", "gettext._parse", "<builtin>.ValueError"], "gettext._expand_lang": ["<builtin>.range", "locale.normalize"], "locale.normalize": ["locale._replace_encoding", "locale._append_modifier"], "gettext.NullTranslations": [], "gettext.NullTranslations.__init__": ["gettext.NullTranslations._parse"], "gettext.NullTranslations._parse": [], "gettext.NullTranslations.add_fallback": [], "gettext.NullTranslations.gettext": [], "gettext.NullTranslations.ngettext": [], "gettext.NullTranslations.pgettext": [], "gettext.NullTranslations.npgettext": [], "gettext.NullTranslations.info": [], "gettext.NullTranslations.charset": [], "gettext.NullTranslations.install": ["<builtin>.set", "<builtin>.getattr"], "gettext.GNUTranslations": [], "gettext.GNUTranslations._get_versions": [], "gettext.GNUTranslations._parse.<lambda1>": ["<builtin>.int"], "<builtin>.OSError": [], "gettext.GNUTranslations.gettext": ["<builtin>.object"], "gettext.GNUTranslations.ngettext": ["gettext.GNUTranslations._parse.<lambda1>"], "gettext.GNUTranslations.pgettext": ["<builtin>.object"], "gettext.GNUTranslations.npgettext": ["gettext.GNUTranslations._parse.<lambda1>"], "gettext.find": ["posixpath.exists", "gettext._expand_lang", "ntpath.join", "ntpath.exists", "posixpath.join"], "<builtin>.FileNotFoundError": [], "ntpath.abspath": ["ntpath.normpath", "ntpath._abspath_fallback", "nt._getfullpathname"], "posixpath.abspath": ["posixpath.isabs", "posixpath.join", "<builtin>.isinstance", "posixpath.normpath"], "gettext.install": ["gettext.translation", "gettext.NullTranslations.install"], "gettext.textdomain": [], "gettext.bindtextdomain": [], "gettext.dgettext": ["gettext.translation", "gettext.NullTranslations.gettext"], "gettext.dngettext": ["gettext.NullTranslations.ngettext", "gettext.translation"], "gettext.dpgettext": ["gettext.NullTranslations.pgettext", "gettext.translation"], "gettext.dnpgettext": ["gettext.NullTranslations.npgettext", "gettext.translation"], "gettext.pgettext": ["gettext.dpgettext"], "gettext.npgettext": ["gettext.dnpgettext"], "locale._strcoll": [], "locale._strxfrm": [], "locale.localeconv": ["locale.localeconv"], "locale.setlocale": ["locale._build_localename", "locale.setlocale", "<builtin>.isinstance", "locale.normalize"], "locale._grouping_intervals": ["<builtin>.ValueError"], "locale._group": ["locale.localeconv", "locale._grouping_intervals", "<builtin>.len"], "locale._strip_padding": ["<builtin>.len"], "locale._format": ["locale.localeconv", "locale._strip_padding", "locale._group"], "locale.format_string": ["<builtin>.tuple", "locale._format", "<builtin>.isinstance", "<builtin>.list"], "locale.currency": ["locale.localeconv", "<builtin>.abs", "locale._format", "<builtin>.ValueError"], "locale.str": ["locale._format"], "locale.delocalize": ["locale.localeconv"], "locale.atof": ["locale.delocalize"], "locale.atoi": ["locale.delocalize", "<builtin>.int"], "locale._test": ["locale.format_string", "locale.str", "locale.atoi", "<builtin>.print", "locale.setlocale", "locale.atof"], "locale._replace_encoding": ["encodings.normalize_encoding", "encodings.aliases.aliases.get"], "encodings.normalize_encoding": ["<builtin>.str", "<builtin>.isinstance"], "encodings.aliases.aliases.get": [], "locale._append_modifier": ["locale._replace_encoding"], "locale._parse_localename": ["<builtin>.tuple", "locale.normalize", "<builtin>.ValueError"], "locale._build_localename": ["<builtin>.TypeError"], "_locale._getdefaultlocale": [], "locale.getlocale": ["locale.setlocale", "<builtin>.TypeError", "locale._parse_localename"], "locale.resetlocale": ["locale._build_localename", "locale.setlocale", "locale.getdefaultlocale"], "locale._print_locale": ["locale.resetlocale", "locale._print_locale._init_categories", "<builtin>.print", "locale.setlocale", "locale.getlocale", "locale.getdefaultlocale"], "locale._print_locale._init_categories": ["<builtin>.globals"], "encodings.CodecRegistryError": [], "encodings.search_function": ["<builtin>.callable", "<builtin>.__import__", "encodings.normalize_encoding", "<builtin>.isinstance", "<builtin>.len"], "_winapi.GetACP": [], "encodings.mbcs.getregentry": [], "encodings.mbcs.decode": [], "encodings.mbcs.IncrementalEncoder": [], "encodings.mbcs.IncrementalEncoder.encode": [], "encodings.mbcs.IncrementalDecoder": [], "encodings.mbcs.StreamWriter": [], "encodings.mbcs.StreamReader": [], "<builtin>.SystemError": [], "codecs.CodecInfo": [], "codecs.CodecInfo.__new__": [], "codecs.CodecInfo.__repr__": ["<builtin>.id"], "codecs.Codec": [], "codecs.Codec.encode": [], "codecs.Codec.decode": [], "codecs.IncrementalEncoder": [], "codecs.IncrementalEncoder.__init__": [], "codecs.IncrementalEncoder.encode": [], "codecs.IncrementalEncoder.reset": [], "codecs.IncrementalEncoder.getstate": [], "codecs.IncrementalEncoder.setstate": [], "codecs.BufferedIncrementalEncoder": [], "codecs.BufferedIncrementalEncoder.__init__": ["codecs.IncrementalEncoder.__init__"], "codecs.BufferedIncrementalEncoder._buffer_encode": [], "codecs.BufferedIncrementalEncoder.encode": ["codecs.BufferedIncrementalEncoder._buffer_encode"], "codecs.BufferedIncrementalEncoder.reset": ["codecs.IncrementalEncoder.reset"], "codecs.BufferedIncrementalEncoder.getstate": [], "codecs.BufferedIncrementalEncoder.setstate": [], "codecs.IncrementalDecoder": [], "codecs.IncrementalDecoder.__init__": [], "codecs.IncrementalDecoder.decode": [], "codecs.IncrementalDecoder.reset": [], "codecs.IncrementalDecoder.getstate": [], "codecs.IncrementalDecoder.setstate": [], "codecs.BufferedIncrementalDecoder": [], "codecs.BufferedIncrementalDecoder.__init__": ["codecs.IncrementalDecoder.__init__"], "codecs.BufferedIncrementalDecoder._buffer_decode": [], "codecs.BufferedIncrementalDecoder.decode": ["codecs.BufferedIncrementalDecoder._buffer_decode"], "codecs.BufferedIncrementalDecoder.reset": ["codecs.IncrementalDecoder.reset"], "codecs.BufferedIncrementalDecoder.getstate": [], "codecs.BufferedIncrementalDecoder.setstate": [], "codecs.StreamWriter": [], "codecs.StreamWriter.__init__": [], "codecs.StreamWriter.write": ["codecs.Codec.encode"], "codecs.StreamWriter.writelines": ["codecs.StreamWriter.write"], "codecs.StreamWriter.reset": [], "codecs.StreamWriter.seek": ["codecs.StreamWriter.reset"], "codecs.StreamWriter.__getattr__": [], "codecs.StreamWriter.__enter__": [], "codecs.StreamWriter.__exit__": [], "codecs.StreamReader": [], "codecs.StreamReader.__init__": [], "codecs.StreamReader.decode": [], "codecs.StreamReader.read": ["codecs.StreamReader.decode", "<builtin>.len"], "codecs.StreamReader.readline": ["codecs.StreamReader.read", "<builtin>.isinstance", "<builtin>.len"], "codecs.StreamReader.readlines": ["codecs.StreamReader.read"], "codecs.StreamReader.reset": [], "codecs.StreamReader.seek": ["codecs.StreamReader.reset"], "codecs.StreamReader.__next__": ["codecs.StreamReader.readline"], "codecs.StreamReader.__iter__": [], "codecs.StreamReader.__getattr__": [], "codecs.StreamReader.__enter__": [], "codecs.StreamReader.__exit__": [], "codecs.StreamReaderWriter": [], "codecs.StreamReaderWriter.__init__": [], "codecs.StreamReaderWriter.read": [], "codecs.StreamReaderWriter.readline": [], "codecs.StreamReaderWriter.readlines": [], "codecs.StreamReaderWriter.__next__": ["<builtin>.next"], "codecs.StreamReaderWriter.__iter__": [], "codecs.StreamReaderWriter.write": [], "codecs.StreamReaderWriter.writelines": [], "codecs.StreamReaderWriter.reset": [], "codecs.StreamReaderWriter.seek": [], "codecs.StreamReaderWriter.__getattr__": [], "codecs.StreamReaderWriter.__enter__": [], "codecs.StreamReaderWriter.__exit__": [], "codecs.StreamRecoder": [], "codecs.StreamRecoder.__init__": [], "codecs.StreamRecoder.read": [], "codecs.StreamRecoder.readline": [], "codecs.StreamRecoder.readlines": [], "codecs.StreamRecoder.__next__": ["<builtin>.next"], "codecs.StreamRecoder.__iter__": [], "codecs.StreamRecoder.write": [], "codecs.StreamRecoder.writelines": [], "codecs.StreamRecoder.reset": [], "codecs.StreamRecoder.seek": [], "codecs.StreamRecoder.__getattr__": [], "codecs.StreamRecoder.__enter__": [], "codecs.StreamRecoder.__exit__": ["sys.stdout.close", "sys.stdin.close"], "sys.stdout.close": [], "sys.stdin.close": [], "codecs.open": ["builtins.open", "codecs.StreamReaderWriter.__init__"], "codecs.EncodedFile": ["codecs.StreamRecoder.__init__"], "codecs.getencoder": [], "codecs.getdecoder": [], "codecs.getincrementalencoder": ["<builtin>.LookupError"], "<builtin>.LookupError": [], "codecs.getincrementaldecoder": ["<builtin>.LookupError"], "codecs.getreader": [], "codecs.getwriter": [], "codecs.iterencode": ["codecs.getincrementalencoder"], "codecs.iterdecode": ["codecs.getincrementaldecoder"], "codecs.make_identity_dict": [], "codecs.make_encoding_map": [], "_locale.nl_langinfo": [], "os._exists": ["<builtin>.globals"], "os._get_exports_list": ["<builtin>.dir", "<builtin>.list"], "os._add": [], "os.makedirs": ["ntpath.isdir", "<builtin>.bytes", "posixpath.exists", "os.makedirs", "<builtin>.isinstance", "posixpath.split", "posixpath.isdir", "ntpath.exists", "ntpath.split"], "posixpath.isdir": [], "ntpath.isdir": [], "os.removedirs": ["posixpath.split", "ntpath.split"], "os.renames": ["posixpath.exists", "os.makedirs", "posixpath.split", "os.removedirs", "ntpath.exists", "ntpath.split"], "os.walk": ["os._fspath", "<builtin>.next", "posixpath.islink", "ntpath.islink", "os.walk", "ntpath.join", "posixpath.join"], "os._fspath": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.hasattr"], "posixpath.islink": ["stat.S_ISLNK"], "ntpath.islink": ["stat.S_ISLNK"], "os.fwalk": ["stat.S_ISDIR", "os._fspath", "posixpath.samestat", "<builtin>.isinstance", "ntpath.samestat", "<builtin>.open", "os._fwalk", "<builtin>.hasattr"], "stat.S_ISDIR": ["stat.S_IFMT"], "ntpath.samestat": [], "posixpath.samestat": [], "os._fwalk": ["posixpath.samestat", "<builtin>.zip", "ntpath.samestat", "ntpath.join", "<builtin>.open", "os._fwalk", "posixpath.join"], "os.execl": [], "os.execle": [], "os.execlp": ["os.execvp"], "os.execvp": ["os._execvpe"], "os.execlpe": ["os.execvpe"], "os.execvpe": ["os._execvpe"], "os._execvpe": ["<builtin>.map", "ntpath.dirname", "os.get_exec_path", "ntpath.join", "posixpath.dirname", "posixpath.join"], "posixpath.dirname": ["posixpath._get_sep", "sys.base_prefix.rfind", "sys.path.rfind", "<builtin>.len"], "ntpath.dirname": ["ntpath.split"], "os._Environ": [], "os._Environ.__init__": [], "os._Environ.__getitem__": ["<builtin>.KeyError", "os._check_bytes", "os._createenviron.check_str", "os._createenviron.decode"], "os._check_bytes": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "os._createenviron.check_str": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "os._createenviron.decode": [], "os._Environ.__setitem__": ["os._check_bytes", "os._createenviron.check_str", "os.<lambda1>"], "os.<lambda1>": [], "os._Environ.__delitem__": ["<builtin>.KeyError", "os._check_bytes", "os.<lambda2>", "os._createenviron.check_str"], "os.<lambda2>": ["os.<lambda1>"], "os._Environ.__iter__": ["<builtin>.list", "os._createenviron.decode"], "os._Environ.__len__": ["<builtin>.len"], "os._Environ.__repr__": ["os._createenviron.decode"], "os._Environ.copy": ["<builtin>.dict"], "os._Environ.setdefault": [], "os._createenviron": ["sys.getfilesystemencoding", "os._Environ.__init__", "os._createenviron.check_str"], "os._createenviron.encodekey": ["os._createenviron.check_str"], "sys.getfilesystemencoding": [], "os._createenviron.encode": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "os.getenv": [], "os.getenvb": [], "os._fscodec": ["sys.getfilesystemencoding", "sys.getfilesystemencodeerrors"], "sys.getfilesystemencodeerrors": [], "os._fscodec.fsencode": ["os._fspath", "<builtin>.isinstance"], "os._fscodec.fsdecode": ["os._fspath", "<builtin>.isinstance"], "os._spawnvef": ["os.execvpe", "os.execvp", "nt._exit", "<builtin>.isinstance", "<builtin>.OSError", "posix._exit", "<builtin>.ValueError", "<builtin>.TypeError"], "nt._exit": [], "posix._exit": [], "os.spawnv": ["os._spawnvef"], "os.spawnve": ["os._spawnvef"], "os.spawnvp": ["os._spawnvef"], "os.spawnvpe": ["os._spawnvef"], "os.spawnl": ["os.spawnv"], "os.spawnle": ["os.spawnve"], "os.spawnlp": ["os.spawnvp"], "os.spawnlpe": ["os.spawnvpe"], "subprocess.Popen.__init__": ["subprocess.Popen._get_handles", "io.open", "subprocess._cleanup", "<builtin>.isinstance", "warnings.warn", "msvcrt.open_osfhandle", "io.TextIOWrapper", "subprocess.Popen._execute_child", "<builtin>.ValueError", "<builtin>.filter", "<builtin>.TypeError", "<builtin>.bool", "<builtin>.hasattr"], "io.TextIOWrapper": [], "os._wrap_close.__init__": [], "os._wrap_close": [], "os._wrap_close.close": ["subprocess.Popen.wait"], "subprocess.Popen.wait": ["time.monotonic", "subprocess.Popen._wait", "subprocess.Popen._remaining_time", "<builtin>.min"], "os._wrap_close.__enter__": [], "os._wrap_close.__exit__": ["os._wrap_close.close"], "os._wrap_close.__getattr__": ["<builtin>.getattr"], "os._wrap_close.__iter__": ["<builtin>.iter"], "io.open": [], "os.PathLike": ["abc.abstractmethod"], "os.PathLike.__fspath__": [], "os.PathLike.__subclasshook__": ["_collections_abc._check_methods"], "os._AddedDllDirectory": [], "os._AddedDllDirectory.__init__": [], "os._AddedDllDirectory.close": ["nt._remove_dll_directory"], "nt._remove_dll_directory": [], "os._AddedDllDirectory.__enter__": [], "os._AddedDllDirectory.__exit__": ["os._AddedDllDirectory.close"], "os._AddedDllDirectory.__repr__": [], "os.add_dll_directory": ["nt._add_dll_directory", "os._AddedDllDirectory.__init__"], "nt._add_dll_directory": [], "posixpath._get_sep": ["<builtin>.isinstance"], "posixpath.normcase": [], "sys.path.endswith": [], "sys.base_prefix.endswith": [], "genericpath._check_arg_types": ["<builtin>.isinstance", "<builtin>.TypeError"], "sys.base_prefix.rfind": [], "sys.path.rfind": [], "posixpath.splitext": ["<builtin>.isinstance", "genericpath._splitext"], "genericpath._splitext": ["sys.base_prefix.rfind", "<builtin>.max", "sys.path.rfind"], "posixpath.splitdrive": [], "sys.stdin.buffer.rfind": [], "stat.S_ISLNK": ["stat.S_IFMT"], "posixpath.lexists": [], "posixpath.ismount": ["posixpath.realpath", "stat.S_ISLNK", "posixpath.join", "<builtin>.isinstance"], "posixpath.realpath": ["posixpath.abspath", "posixpath._joinrealpath"], "posixpath.expanduser": ["posixpath._get_sep", "<builtin>.isinstance", "<builtin>.len", "pwd.getpwnam", "pwd.getpwuid", "<builtin>.str"], "pwd.getpwuid": [], "pwd.getpwnam": [], "posixpath._joinrealpath": ["sys.base_prefix.partition", "posixpath.islink", "posixpath.isabs", "<builtin>.isinstance", "posixpath.split", "sys.path.partition", "posixpath.join", "posixpath._joinrealpath"], "sys.base_prefix.partition": [], "sys.path.partition": [], "posixpath.relpath": ["posixpath.abspath", "genericpath._check_arg_types", "<builtin>.isinstance", "<builtin>.len", "genericpath.commonprefix", "<builtin>.ValueError", "posixpath.join"], "genericpath.commonprefix": ["<builtin>.map", "<builtin>.tuple", "<builtin>.max", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.min"], "posixpath.commonpath": ["<builtin>.map", "<builtin>.tuple", "<builtin>.max", "<builtin>.enumerate", "<builtin>.isinstance", "genericpath._check_arg_types", "<builtin>.ValueError", "<builtin>.min", "<builtin>.set"], "stat.S_IMODE": [], "stat.S_IFMT": [], "stat.S_ISCHR": ["stat.S_IFMT"], "stat.S_ISBLK": ["stat.S_IFMT"], "stat.S_ISREG": ["stat.S_IFMT"], "stat.S_ISFIFO": ["stat.S_IFMT"], "stat.S_ISSOCK": ["stat.S_IFMT"], "stat.S_ISDOOR": [], "stat.S_ISPORT": [], "stat.S_ISWHT": [], "stat.filemode": [], "genericpath.exists": [], "genericpath.isfile": ["stat.S_ISREG"], "genericpath.isdir": ["stat.S_ISDIR"], "genericpath.getsize": [], "genericpath.getmtime": [], "genericpath.getatime": [], "genericpath.getctime": [], "genericpath.samestat": [], "genericpath.samefile": ["genericpath.samestat"], "genericpath.sameopenfile": ["genericpath.samestat"], "os.path._get_sep": ["<builtin>.isinstance"], "os.path.normcase": [], "os.path.isabs": ["os.path._get_sep"], "os.path.join": ["<builtin>.map", "genericpath._check_arg_types", "os.path._get_sep"], "os.path.split": ["os.path._get_sep", "<builtin>.len"], "os.path.splitext": ["<builtin>.isinstance", "genericpath._splitext"], "os.path.splitdrive": [], "os.path.basename": ["os.path._get_sep"], "os.path.dirname": ["os.path._get_sep", "<builtin>.len"], "os.path.islink": ["stat.S_ISLNK"], "os.path.lexists": [], "os.path.ismount": ["os.path.realpath", "stat.S_ISLNK", "<builtin>.isinstance", "os.path.join"], "os.path.realpath": ["os.path._joinrealpath", "os.path.abspath"], "os.path.expanduser": ["<builtin>.isinstance", "<builtin>.len", "pwd.getpwnam", "pwd.getpwuid", "os.path._get_sep", "<builtin>.str"], "os.path.normpath": ["posixpath.split", "ntpath.split", "<builtin>.isinstance"], "os.path.abspath": ["os.path.isabs", "os.path.normpath", "<builtin>.isinstance", "os.path.join"], "os.path._joinrealpath": ["<builtin>.isinstance", "os.path.join", "os.path.islink", "os.path._joinrealpath", "os.path.isabs", "os.path.split"], "os.path.relpath": ["os.path.abspath", "genericpath._check_arg_types", "<builtin>.isinstance", "os.path.join", "<builtin>.len", "genericpath.commonprefix", "<builtin>.ValueError"], "os.path.commonpath": ["<builtin>.map", "<builtin>.tuple", "<builtin>.max", "<builtin>.enumerate", "<builtin>.isinstance", "genericpath._check_arg_types", "posixpath.split", "<builtin>.ValueError", "<builtin>.min", "<builtin>.set", "ntpath.split"], "subprocess.SubprocessError": [], "subprocess.CalledProcessError": [], "subprocess.CalledProcessError.__init__": [], "subprocess.CalledProcessError.__str__": [], "subprocess.CalledProcessError.stdout": [], "subprocess.TimeoutExpired": [], "subprocess.TimeoutExpired.__init__": [], "subprocess.TimeoutExpired.__str__": [], "subprocess.TimeoutExpired.stdout": [], "subprocess.STARTUPINFO": [], "subprocess.STARTUPINFO.__init__": [], "subprocess.STARTUPINFO.copy": ["subprocess.STARTUPINFO.__init__", "<builtin>.list"], "subprocess.Handle": [], "subprocess.Handle.Close": [], "subprocess.Handle.Detach": ["<builtin>.int", "<builtin>.ValueError"], "subprocess.Handle.__repr__": ["<builtin>.int"], "subprocess._cleanup": [], "subprocess._optim_args_from_interpreter_flags": [], "subprocess._args_from_interpreter_flags": ["subprocess._optim_args_from_interpreter_flags", "<builtin>.getattr"], "subprocess.call": ["subprocess.Popen.__init__"], "subprocess.check_call": ["subprocess.CalledProcessError.__init__", "subprocess.call"], "subprocess.check_output": ["<builtin>.ValueError", "subprocess.run"], "subprocess.run": ["subprocess.Popen.__init__", "subprocess.CalledProcessError.__init__", "subprocess.CompletedProcess.__init__", "<builtin>.ValueError"], "subprocess.CompletedProcess": [], "subprocess.CompletedProcess.__init__": [], "subprocess.CompletedProcess.__repr__": ["<builtin>.type"], "subprocess.CompletedProcess.check_returncode": ["subprocess.CalledProcessError.__init__"], "subprocess.list2cmdline": ["<builtin>.map", "<builtin>.len"], "subprocess.getstatusoutput": ["subprocess.check_output"], "subprocess.getoutput": ["subprocess.getstatusoutput"], "subprocess._use_posix_spawn": ["<builtin>.map", "<builtin>.tuple", "<builtin>.len", "<builtin>.hasattr"], "subprocess.Popen": [], "subprocess.Popen._get_handles": ["_winapi.CloseHandle", "<builtin>.isinstance", "subprocess.Popen._make_inheritable", "_winapi.GetStdHandle", "_winapi.CreatePipe", "sys.__stdout__.fileno", "msvcrt.get_osfhandle", "subprocess.Popen._get_devnull"], "msvcrt.open_osfhandle": [], "subprocess.Popen._execute_child": ["<builtin>.map", "subprocess.STARTUPINFO.__init__", "subprocess.Popen._close_pipe_fds", "<builtin>.isinstance", "subprocess.Popen._posix_spawn", "<builtin>.issubclass", "<builtin>.ValueError", "_winapi.CreateProcess", "sys.audit", "subprocess.Popen._handle_exitstatus", "<builtin>.TypeError", "<builtin>.hasattr", "subprocess.list2cmdline", "_winapi.CloseHandle", "subprocess.STARTUPINFO.copy", "ntpath.dirname", "os.get_exec_path", "<builtin>.bytes", "<builtin>.list", "warnings.warn", "<builtin>.len", "ntpath.join", "<builtin>.set", "<builtin>.int", "posixpath.join", "<builtin>.tuple", "<builtin>.sorted", "<builtin>.bytearray", "posixpath.dirname", "subprocess.Popen._filter_handle_list", "<builtin>.bool", "<builtin>.getattr"], "<builtin>.filter": [], "subprocess.Popen.universal_newlines": ["<builtin>.bool"], "subprocess.Popen._translate_newlines": [], "subprocess.Popen.__enter__": [], "subprocess.Popen.__exit__": ["gzip.GzipFile.close", "bz2.BZ2File.close", "subprocess.Popen._wait", "lzma.LZMAFile.close", "subprocess.Popen.wait", "asyncio.windows_utils.PipeHandle.close"], "subprocess.Popen._wait": ["_winapi.GetExitCodeProcess", "time.monotonic", "subprocess.Popen._try_wait", "time.sleep", "subprocess.Popen._remaining_time", "<builtin>.min", "subprocess.TimeoutExpired.__init__", "subprocess.Popen._handle_exitstatus", "<builtin>.int", "_winapi.WaitForSingleObject"], "subprocess.Popen.__del__": ["subprocess.Popen._internal_poll"], "subprocess.Popen._internal_poll": ["subprocess.Popen._handle_exitstatus"], "subprocess.Popen._get_devnull": ["<builtin>.hasattr"], "subprocess.Popen._stdin_write": ["gzip.GzipFile.close", "lzma.LZMAFile.write", "bz2.BZ2File.close", "bz2.BZ2File.write", "lzma.LZMAFile.close", "gzip.GzipFile.write", "asyncio.windows_utils.PipeHandle.close"], "gzip.GzipFile.write": ["sys.stdout.buffer.write", "sys.base_prefix.write", "<builtin>.OSError", "<builtin>.isinstance", "<builtin>.len", "sys.path.write", "sys.stdin.buffer.write", "<builtin>.ValueError", "<builtin>.memoryview", "gzip.GzipFile.write", "_compression.BaseStream._check_not_closed"], "bz2.BZ2File.write": ["sys.base_prefix.write", "sys.path.write", "_compression.BaseStream._check_can_write", "<builtin>.len"], "lzma.LZMAFile.write": ["sys.base_prefix.write", "sys.path.write", "_compression.BaseStream._check_can_write", "<builtin>.len"], "subprocess.Popen.communicate": ["subprocess.Popen._stdin_write", "gzip.GzipFile.close", "bz2.BZ2File.close", "time.monotonic", "bz2.BZ2File.read", "subprocess.Popen._communicate", "gzip.GzipFile.read", "subprocess.Popen.wait", "<builtin>.ValueError", "lzma.LZMAFile.read", "lzma.LZMAFile.close", "subprocess.Popen._remaining_time", "<builtin>.min", "subprocess.Popen._wait", "asyncio.windows_utils.PipeHandle.close"], "gzip.GzipFile.read": ["_compression.BaseStream._check_not_closed", "<builtin>.OSError"], "bz2.BZ2File.read": ["_compression.BaseStream._check_can_read"], "lzma.LZMAFile.read": ["_compression.BaseStream._check_can_read"], "time.monotonic": [], "subprocess.Popen._communicate": ["subprocess.Popen._stdin_write", "_io._BufferedIOBase.flush", "<builtin>.hasattr", "threading.Thread.join", "bz2.BZ2File.close", "subprocess.Popen._translate_newlines", "threading.Thread.start", "lzma.LZMAFile.close", "subprocess.Popen._check_timeout", "gzip.GzipFile.flush", "threading._DummyThread.is_alive", "<builtin>.len", "threading.Thread.__init__", "subprocess.Popen._save_input", "_io._IOBase.flush", "<builtin>.memoryview", "threading._DummyThread.join", "gzip.GzipFile.close", "threading.Thread.is_alive", "<builtin>.RuntimeError", "selectors.SelectSelector.__init__", "subprocess.Popen.wait", "subprocess.Popen._remaining_time", "subprocess.TimeoutExpired.__init__", "asyncio.windows_utils.PipeHandle.close", "selectors._PollLikeSelector.__init__"], "subprocess.Popen._remaining_time": ["time.monotonic"], "subprocess.Popen.poll": ["subprocess.Popen._internal_poll"], "subprocess.Popen._check_timeout": ["time.monotonic", "subprocess.TimeoutExpired.__init__"], "subprocess.Popen._close_pipe_fds": ["contextlib._BaseExitStack.__init__", "<builtin>.getattr"], "contextlib._BaseExitStack.__init__": [], "_winapi.GetStdHandle": [], "_winapi.CreatePipe": [], "_winapi.CloseHandle": [], "msvcrt.get_osfhandle": [], "subprocess.Popen._make_inheritable": ["_winapi.GetCurrentProcess", "_winapi.DuplicateHandle"], "_winapi.GetCurrentProcess": [], "_winapi.DuplicateHandle": [], "subprocess.Popen._filter_handle_list": ["<builtin>.list", "_winapi.GetFileType"], "_winapi.GetFileType": [], "_winapi.CreateProcess": [], "_winapi.WaitForSingleObject": [], "_winapi.GetExitCodeProcess": [], "subprocess.Popen._readerthread": [], "threading.Thread.__init__": ["threading._newname", "threading._make_invoke_excepthook", "threading.Event.__init__", "_weakrefset.WeakSet.add", "threading.current_thread", "<builtin>.str"], "threading.Thread.start": ["threading.Event.is_set", "<builtin>.RuntimeError", "_thread.start_new_thread", "threading.Event.wait"], "threading.Thread.join": ["<builtin>.max", "threading.Event.is_set", "threading.Thread._wait_for_tstate_lock", "<builtin>.RuntimeError", "threading.current_thread"], "threading._DummyThread.join": [], "threading.Thread.is_alive": ["threading.Event.is_set", "threading.Thread._wait_for_tstate_lock"], "threading._DummyThread.is_alive": ["threading.Event.is_set"], "subprocess.Popen.send_signal": ["subprocess.Popen.terminate", "<builtin>.ValueError"], "subprocess.Popen.terminate": ["_winapi.TerminateProcess", "subprocess.Popen.send_signal", "_winapi.GetExitCodeProcess"], "_winapi.TerminateProcess": [], "sys.__stdout__.fileno": [], "subprocess.Popen._posix_spawn": ["subprocess.Popen._close_pipe_fds", "<builtin>.getattr"], "subprocess.Popen._handle_exitstatus": [], "subprocess.Popen._try_wait": [], "time.sleep": [], "gzip.GzipFile.flush": ["sys.stdout.buffer.write", "gzip.GzipFile.flush", "sys.base_prefix.write", "sys.stdin.buffer.flush", "sys.base_prefix.flush", "sys.path.write", "sys.stdin.buffer.write", "sys.path.flush", "sys.stdout.buffer.flush", "gzip.GzipFile.write", "_compression.BaseStream._check_not_closed"], "_io._BufferedIOBase.flush": [], "_io._IOBase.flush": [], "subprocess.Popen._save_input": [], "selectors.SelectSelector.__init__": ["<builtin>.set", "<builtin>.super"], "selectors._PollLikeSelector.__init__": ["<builtin>.super"], "subprocess.Popen.kill": ["subprocess.Popen.send_signal"], "signal.<lambda1>": [], "signal.<lambda2>": [], "signal.<lambda3>": [], "signal._int_to_enum": [], "signal._enum_to_int": ["<builtin>.int"], "signal.signal": ["_signal.signal", "signal._enum_to_int", "signal._int_to_enum"], "_signal.signal": [], "signal.getsignal": ["_signal.getsignal", "signal._int_to_enum"], "_signal.getsignal": [], "signal.pthread_sigmask": ["<builtin>.set", "_signal.pthread_sigmask", "signal._int_to_enum"], "_signal.pthread_sigmask": [], "signal.sigpending": ["_signal.sigpending", "signal._int_to_enum"], "_signal.sigpending": [], "signal.sigwait": ["_signal.sigwait", "signal._int_to_enum"], "_signal.sigwait": [], "signal.valid_signals": ["_signal.valid_signals", "signal._int_to_enum"], "_signal.valid_signals": [], "selectors._fileobj_to_fd": ["<builtin>.int", "<builtin>.isinstance", "<builtin>.ValueError"], "selectors._SelectorMapping": [], "selectors._SelectorMapping.__init__": [], "selectors._SelectorMapping.__len__": ["<builtin>.len"], "selectors._SelectorMapping.__getitem__": ["<builtin>.KeyError", "selectors._BaseSelectorImpl._fileobj_lookup"], "selectors._BaseSelectorImpl._fileobj_lookup": ["selectors._fileobj_to_fd"], "selectors._SelectorMapping.__iter__": ["<builtin>.iter"], "selectors.BaseSelector": ["abc.abstractmethod"], "selectors.BaseSelector.register": [], "selectors.BaseSelector.unregister": [], "selectors.BaseSelector.modify": ["selectors.SelectSelector.register", "selectors.BaseSelector.unregister", "selectors.SelectSelector.unregister", "selectors.BaseSelector.register"], "selectors.SelectSelector.unregister": ["<builtin>.super"], "selectors.SelectSelector.register": ["<builtin>.super"], "selectors.BaseSelector.select": [], "selectors.BaseSelector.close": [], "selectors.BaseSelector.get_key": ["<builtin>.KeyError", "<builtin>.RuntimeError", "selectors.BaseSelector.get_map"], "selectors.BaseSelector.get_map": [], "selectors.BaseSelector.__enter__": [], "selectors.BaseSelector.__exit__": ["selectors.BaseSelector.close"], "selectors._BaseSelectorImpl": [], "selectors._BaseSelectorImpl.__init__": ["selectors._SelectorMapping.__init__"], "selectors._BaseSelectorImpl.register": ["<builtin>.KeyError", "selectors._BaseSelectorImpl._fileobj_lookup", "<builtin>.ValueError"], "selectors._BaseSelectorImpl.unregister": ["<builtin>.KeyError", "selectors._BaseSelectorImpl._fileobj_lookup"], "selectors._BaseSelectorImpl.modify": ["<builtin>.KeyError", "selectors.SelectSelector.register", "selectors._BaseSelectorImpl.register", "selectors._BaseSelectorImpl._fileobj_lookup", "selectors.SelectSelector.unregister", "selectors._BaseSelectorImpl.unregister"], "selectors._BaseSelectorImpl.close": [], "selectors._BaseSelectorImpl.get_map": [], "selectors._BaseSelectorImpl._key_from_fd": [], "selectors.SelectSelector": [], "selectors.SelectSelector._select": [], "selectors.SelectSelector.select": ["<builtin>.set", "selectors.SelectSelector._select", "<builtin>.max", "selectors._BaseSelectorImpl._key_from_fd"], "selectors._PollLikeSelector": [], "selectors._PollLikeSelector.register": ["<builtin>.super"], "selectors._PollLikeSelector.unregister": ["<builtin>.super"], "selectors._PollLikeSelector.modify": ["<builtin>.KeyError", "<builtin>.super", "selectors._BaseSelectorImpl._fileobj_lookup"], "selectors._PollLikeSelector.select": ["selectors._BaseSelectorImpl._key_from_fd"], "selectors.PollSelector": [], "selectors.EpollSelector": [], "selectors.EpollSelector.fileno": [], "selectors.EpollSelector.select": ["selectors._BaseSelectorImpl._key_from_fd", "<builtin>.max", "<builtin>.len"], "selectors.EpollSelector.close": ["<builtin>.super"], "selectors.DevpollSelector": [], "selectors.DevpollSelector.fileno": [], "selectors.DevpollSelector.close": ["<builtin>.super"], "selectors.KqueueSelector": [], "selectors.KqueueSelector.__init__": ["<builtin>.super"], "selectors.KqueueSelector.fileno": [], "selectors.KqueueSelector.register": ["<builtin>.super"], "selectors.KqueueSelector.unregister": ["<builtin>.super"], "selectors.KqueueSelector.select": ["selectors._BaseSelectorImpl._key_from_fd", "<builtin>.max", "<builtin>.len"], "selectors.KqueueSelector.close": ["<builtin>.super"], "io.IOBase": [], "io.RawIOBase": [], "io.BufferedIOBase": [], "io.TextIOBase": [], "_io._RawIOBase.register": [], "_io._IOBase.register": [], "contextlib.AbstractContextManager": ["abc.abstractmethod"], "contextlib.AbstractContextManager.__enter__": [], "contextlib.AbstractContextManager.__exit__": [], "contextlib.AbstractContextManager.__subclasshook__": ["_collections_abc._check_methods"], "contextlib.AbstractAsyncContextManager": ["abc.abstractmethod"], "contextlib.AbstractAsyncContextManager.__aenter__": [], "contextlib.AbstractAsyncContextManager.__aexit__": [], "contextlib.AbstractAsyncContextManager.__subclasshook__": ["_collections_abc._check_methods"], "contextlib.ContextDecorator": [], "contextlib.ContextDecorator._recreate_cm": [], "contextlib.ContextDecorator.__call__": ["_functools.partial", "functools.wraps"], "contextlib.ContextDecorator.__call__.inner": ["contextlib._GeneratorContextManager._recreate_cm", "contextlib.ContextDecorator._recreate_cm"], "contextlib._GeneratorContextManager._recreate_cm": [], "contextlib._GeneratorContextManagerBase": [], "contextlib._GeneratorContextManagerBase.__init__": ["<builtin>.type", "<builtin>.getattr"], "contextlib._GeneratorContextManager": [], "contextlib._GeneratorContextManager.__enter__": ["<builtin>.next", "<builtin>.RuntimeError"], "contextlib._GeneratorContextManager.__exit__": ["<builtin>.next", "<builtin>.RuntimeError", "sys.exc_info"], "contextlib._AsyncGeneratorContextManager": [], "contextlib._AsyncGeneratorContextManager.__aenter__": ["<builtin>.RuntimeError"], "contextlib._AsyncGeneratorContextManager.__aexit__": ["<builtin>.RuntimeError", "<builtin>.isinstance"], "contextlib.contextmanager": ["_functools.partial", "functools.wraps"], "contextlib.contextmanager.helper": ["contextlib._GeneratorContextManagerBase.__init__"], "contextlib.asynccontextmanager": ["_functools.partial", "functools.wraps"], "contextlib.asynccontextmanager.helper": ["contextlib._GeneratorContextManagerBase.__init__"], "contextlib.closing": [], "contextlib.closing.__init__": [], "contextlib.closing.__enter__": [], "contextlib.closing.__exit__": [], "contextlib._RedirectStream": [], "contextlib._RedirectStream.__init__": [], "contextlib._RedirectStream.__enter__": ["<builtin>.setattr", "<builtin>.getattr"], "contextlib._RedirectStream.__exit__": ["<builtin>.setattr"], "contextlib.redirect_stdout": [], "contextlib.redirect_stderr": [], "contextlib.suppress": [], "contextlib.suppress.__init__": [], "contextlib.suppress.__enter__": [], "contextlib.suppress.__exit__": ["<builtin>.issubclass"], "contextlib._BaseExitStack": [], "contextlib._BaseExitStack._create_exit_wrapper": [], "contextlib._BaseExitStack._create_cb_wrapper": [], "contextlib._BaseExitStack._create_cb_wrapper._exit_wrapper": ["contextlib._BaseExitStack.callback"], "contextlib._BaseExitStack.pop_all": ["<builtin>.type"], "contextlib._BaseExitStack.push": ["<builtin>.type", "contextlib._BaseExitStack._push_cm_exit", "contextlib._BaseExitStack._push_exit_callback"], "contextlib._BaseExitStack._push_exit_callback": [], "contextlib._BaseExitStack._push_cm_exit": ["contextlib._BaseExitStack._create_exit_wrapper", "contextlib._BaseExitStack._push_exit_callback"], "contextlib._BaseExitStack.enter_context": ["<builtin>.type", "contextlib._BaseExitStack._push_cm_exit"], "contextlib.ExitStack": [], "contextlib.ExitStack.__enter__": [], "contextlib.ExitStack.__exit__": ["contextlib.ExitStack.__exit__._fix_exception_context", "sys.exc_info"], "contextlib.ExitStack.__exit__._fix_exception_context": [], "contextlib.ExitStack.close": ["contextlib.ExitStack.__exit__"], "contextlib.AsyncExitStack": [], "contextlib.AsyncExitStack._create_async_exit_wrapper": [], "contextlib.AsyncExitStack._create_async_cb_wrapper": [], "contextlib.AsyncExitStack._create_async_cb_wrapper._exit_wrapper": [], "contextlib.AsyncExitStack.enter_async_context": ["contextlib.AsyncExitStack._push_async_cm_exit", "<builtin>.type"], "contextlib.AsyncExitStack._push_async_cm_exit": ["contextlib.AsyncExitStack._create_async_exit_wrapper", "contextlib._BaseExitStack._push_exit_callback"], "contextlib.AsyncExitStack.push_async_exit": ["contextlib.AsyncExitStack._push_async_cm_exit", "<builtin>.type", "contextlib._BaseExitStack._push_exit_callback"], "contextlib.AsyncExitStack.aclose": ["contextlib.AsyncExitStack.__aexit__"], "contextlib.AsyncExitStack.__aexit__": ["contextlib.AsyncExitStack.__aexit__._fix_exception_context", "sys.exc_info"], "contextlib.AsyncExitStack.__aenter__": [], "contextlib.AsyncExitStack.__aexit__._fix_exception_context": [], "contextlib.nullcontext": [], "contextlib.nullcontext.__init__": [], "contextlib.nullcontext.__enter__": [], "contextlib.nullcontext.__exit__": [], "threading.setprofile": [], "threading.settrace": [], "threading.RLock": ["threading._RLock.__init__", "_thread.RLock"], "threading._RLock.__init__": ["_thread.allocate_lock"], "threading._RLock": [], "_thread.allocate_lock": [], "threading._RLock.__repr__": ["<builtin>.id", "<builtin>.hex"], "threading._RLock.acquire": ["_thread.get_ident"], "threading._RLock.release": ["_thread.get_ident", "<builtin>.RuntimeError"], "threading._RLock.__exit__": ["threading._RLock.release"], "threading._RLock._acquire_restore": [], "threading._RLock._release_save": ["<builtin>.RuntimeError"], "threading._RLock._is_owned": ["_thread.get_ident"], "threading.Condition": [], "threading.Condition.__init__": ["_collections.deque", "threading.RLock"], "_collections.deque": [], "threading.Condition.__enter__": [], "threading.Condition.__exit__": [], "threading.Condition.__repr__": ["<builtin>.len"], "threading.Condition._release_save": [], "threading.Condition._acquire_restore": [], "threading.Condition._is_owned": [], "threading.Condition.wait": ["threading.Condition._release_save", "threading.Condition._is_owned", "threading.Condition._acquire_restore", "<builtin>.RuntimeError", "_thread.allocate_lock"], "threading.Condition.wait_for": ["threading.Condition.wait", "time.monotonic"], "threading.Condition.notify": ["itertools.islice", "<builtin>.RuntimeError", "_collections.deque", "threading.Condition._is_owned"], "threading.Condition.notify_all": ["threading.Condition.notify", "<builtin>.len"], "threading.Semaphore": [], "threading.Semaphore.__init__": ["threading.Condition.__init__", "_thread.allocate_lock", "<builtin>.ValueError"], "threading.Semaphore.acquire": ["threading.Condition.wait", "time.monotonic", "<builtin>.ValueError"], "threading.Semaphore.release": ["threading.Condition.notify"], "threading.Semaphore.__exit__": ["threading.Semaphore.release"], "threading.BoundedSemaphore": [], "threading.BoundedSemaphore.__init__": ["threading.Semaphore.__init__"], "threading.BoundedSemaphore.release": ["threading.Condition.notify", "<builtin>.ValueError"], "threading.Event": [], "threading.Event.__init__": ["threading.Condition.__init__", "_thread.allocate_lock"], "threading.Event._reset_internal_locks": ["threading.Condition.__init__", "_thread.allocate_lock"], "threading.Event.is_set": [], "threading.Event.set": ["threading.Condition.notify_all"], "threading.Event.clear": [], "threading.Event.wait": ["threading.Condition.wait"], "threading.Barrier": [], "threading.Barrier.__init__": ["threading.Condition.__init__", "_thread.allocate_lock"], "threading.Barrier.wait": ["threading.Barrier._release", "threading.Barrier._enter", "threading.Barrier._exit", "threading.Barrier._wait"], "threading.Barrier._enter": ["threading.Condition.wait"], "threading.Barrier._release": ["threading.Barrier._break", "threading.Condition.notify_all"], "threading.Barrier._wait": ["threading.Condition.wait_for", "threading.Barrier._break"], "threading.Barrier._exit": ["threading.Condition.notify_all"], "threading.Barrier._break": ["threading.Condition.notify_all"], "threading.Barrier._wait.<lambda1>": [], "threading.Barrier.reset": ["threading.Condition.notify_all"], "threading.Barrier.abort": ["threading.Barrier._break"], "threading.Barrier.parties": [], "threading.Barrier.n_waiting": [], "threading.Barrier.broken": [], "threading.BrokenBarrierError": [], "itertools.count": [], "threading._newname": [], "threading.Thread": [], "threading.current_thread": ["_thread.get_ident", "threading._DummyThread.__init__"], "threading._make_invoke_excepthook": ["<builtin>.RuntimeError"], "threading.Thread._reset_internal_locks": ["threading.Event._reset_internal_locks", "threading.Thread._set_tstate_lock"], "threading.Thread._set_tstate_lock": ["_thread._set_sentinel"], "threading.Thread.__repr__": ["threading.Event.is_set", "threading.Thread.is_alive", "threading._DummyThread.is_alive"], "_thread.start_new_thread": [], "threading.Thread.run": ["subprocess.Popen._readerthread"], "threading.Thread._bootstrap": ["threading.Thread._bootstrap_inner"], "threading.Thread._bootstrap_inner": ["threading.Thread._set_ident", "threading.Thread._set_native_id", "threading.Event.set", "threading.Thread.run", "_thread.get_ident", "threading.Thread._set_tstate_lock", "threading._make_invoke_excepthook.invoke_excepthook", "sys.settrace", "sys.setprofile"], "threading.Thread._set_ident": ["_thread.get_ident"], "threading.Thread._set_native_id": ["_thread.get_native_id"], "_thread.get_native_id": [], "_thread._set_sentinel": [], "sys.setprofile": [], "threading._make_invoke_excepthook.invoke_excepthook": ["_thread._excepthook", "_thread._ExceptHookArgs", "sys.excepthook", "sys.exc_info"], "threading.Thread._stop": [], "threading.Thread._delete": ["_thread.get_ident"], "threading.Thread._wait_for_tstate_lock": ["threading._DummyThread._stop", "threading.Thread._stop"], "threading._DummyThread._stop": [], "threading.Thread.name": ["<builtin>.str"], "threading.Thread.ident": [], "threading.Thread.native_id": [], "threading.Thread.daemon": ["threading.Event.is_set", "<builtin>.RuntimeError"], "threading.Thread.isDaemon": [], "threading.Thread.setDaemon": [], "threading.Thread.getName": [], "threading.Thread.setName": [], "threading.ExceptHookArgs": [], "threading.excepthook": ["sys.stderr.flush", "<builtin>.print", "_thread.get_ident", "traceback.print_exception"], "sys.stderr.flush": [], "_thread._ExceptHookArgs": [], "_thread._excepthook": [], "sys.excepthook": [], "threading.Timer": [], "threading.Timer.__init__": ["threading.Thread.__init__", "threading.Event.__init__"], "threading.Timer.cancel": ["threading.Event.set"], "threading.Timer.run": ["threading.Event.is_set", "threading.Event.set", "threading.Event.wait"], "threading._MainThread": [], "threading._MainThread.__init__": ["threading.Thread._set_ident", "threading.Thread._set_native_id", "threading.Event.set", "threading.Thread._set_tstate_lock", "threading.Thread.__init__"], "threading._DummyThread": [], "threading._DummyThread.__init__": ["threading._newname", "threading.Thread._set_native_id", "threading.Thread._set_ident", "threading.Event.set", "threading.Thread.__init__"], "threading.active_count": ["<builtin>.len"], "threading._enumerate": ["<builtin>.list"], "threading.enumerate": ["<builtin>.list"], "threading._shutdown": ["threading._DummyThread._stop", "<builtin>.list", "threading.Thread._stop"], "threading.main_thread": [], "threading._after_fork": ["_thread.get_ident", "<builtin>.len", "threading._enumerate", "_thread.allocate_lock", "<builtin>.set", "threading._MainThread.__init__"], "_threading_local._localimpl": [], "_threading_local._localimpl.__init__": ["<builtin>.str", "<builtin>.id"], "_threading_local._localimpl.get_dict": ["threading.current_thread", "<builtin>.id"], "_threading_local._localimpl.create_dict": ["threading.current_thread", "_weakref.ref", "<builtin>.id"], "_threading_local._localimpl.create_dict.local_deleted": [], "_threading_local._localimpl.create_dict.thread_deleted": [], "_threading_local._patch": [], "_threading_local.local": [], "_threading_local.local.__new__": ["_threading_local._localimpl.create_dict", "_threading_local._localimpl.__init__", "<builtin>.TypeError", "threading.RLock"], "_threading_local.local.__getattribute__": ["_threading_local._patch"], "_threading_local.local.__setattr__": ["<builtin>.AttributeError", "_threading_local._patch"], "_threading_local.local.__delattr__": ["<builtin>.AttributeError", "_threading_local._patch"], "weakref.WeakMethod": [], "weakref.WeakMethod.__new__": ["_weakref.ref", "<builtin>.type", "<builtin>.TypeError", "_weakref.ref.__new__"], "weakref.WeakMethod.__new__._cb": [], "_weakref.ref.__new__": [], "weakref.WeakMethod.__call__": ["_weakref.ref._meth_type", "<builtin>.super", "_weakref.ref._func_ref"], "_weakref.ref._func_ref": [], "_weakref.ref._meth_type": [], "weakref.WeakMethod.__eq__": ["_weakref.ref.__eq__", "<builtin>.isinstance"], "_weakref.ref.__eq__": [], "weakref.WeakMethod.__ne__": ["<builtin>.isinstance", "_weakref.ref.__ne__"], "_weakref.ref.__ne__": [], "weakref.WeakValueDictionary": [], "weakref.WeakValueDictionary.__init__": ["<builtin>.set"], "weakref.WeakValueDictionary.__init__.remove": ["_weakref._remove_dead_weakref"], "_weakref._remove_dead_weakref": [], "weakref.WeakValueDictionary._commit_removals": ["_weakref._remove_dead_weakref"], "weakref.WeakValueDictionary.__getitem__": ["<builtin>.KeyError", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.__delitem__": ["weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.__len__": ["<builtin>.len", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.__contains__": ["weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.__repr__": ["<builtin>.id"], "weakref.WeakValueDictionary.__setitem__": ["weakref.KeyedRef.__init__", "weakref.WeakValueDictionary._commit_removals"], "weakref.KeyedRef.__init__": ["<builtin>.super"], "weakref.WeakValueDictionary.copy": ["weakref.WeakValueDictionary.__init__", "_weakrefset._IterationGuard.__init__", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.get": ["weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.keys": ["_weakrefset._IterationGuard.__init__", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.itervaluerefs": ["_weakrefset._IterationGuard.__init__", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.values": ["_weakrefset._IterationGuard.__init__", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.pop": ["<builtin>.KeyError", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.setdefault": ["weakref.KeyedRef.__init__", "weakref.WeakValueDictionary._commit_removals"], "weakref.WeakValueDictionary.update": ["weakref.KeyedRef.__init__", "<builtin>.dict", "<builtin>.hasattr"], "weakref.WeakValueDictionary.valuerefs": ["<builtin>.list", "weakref.WeakValueDictionary._commit_removals"], "weakref.KeyedRef": [], "weakref.KeyedRef.__new__": ["_weakref.ref.__new__"], "weakref.WeakKeyDictionary": [], "weakref.WeakKeyDictionary.__init__.remove": [], "weakref.WeakKeyDictionary._commit_removals": [], "weakref.WeakKeyDictionary._scrub_removals": [], "weakref.WeakKeyDictionary.__delitem__": ["_weakref.ref"], "weakref.WeakKeyDictionary.__getitem__": ["_weakref.ref"], "weakref.WeakKeyDictionary.__len__": ["<builtin>.len", "weakref.WeakKeyDictionary._scrub_removals"], "weakref.WeakKeyDictionary.__repr__": ["<builtin>.id"], "weakref.WeakKeyDictionary.__setitem__": ["_weakref.ref"], "weakref.WeakKeyDictionary.copy": ["_weakrefset._IterationGuard.__init__", "weakref.WeakKeyDictionary.__init__"], "weakref.WeakKeyDictionary.get": ["_weakref.ref"], "weakref.WeakKeyDictionary.__contains__": ["_weakref.ref"], "weakref.WeakKeyDictionary.keys": ["_weakrefset._IterationGuard.__init__"], "weakref.WeakKeyDictionary.values": ["_weakrefset._IterationGuard.__init__"], "weakref.WeakKeyDictionary.keyrefs": ["<builtin>.list"], "weakref.WeakKeyDictionary.pop": ["_weakref.ref"], "weakref.WeakKeyDictionary.setdefault": ["_weakref.ref"], "weakref.finalize": ["weakref.finalize._Info", "itertools.count"], "weakref.finalize._Info": [], "atexit.register": [], "weakref.finalize.__call__": [], "weakref.finalize.detach": [], "weakref.finalize.peek": [], "weakref.finalize.alive": [], "weakref.finalize.atexit": ["<builtin>.bool"], "weakref.finalize.__repr__": ["<builtin>.type", "<builtin>.id"], "weakref.finalize._select_for_exit": [], "weakref.finalize._select_for_exit.<lambda1>": [], "weakref.finalize._exitfunc": ["gc.enable", "sys.excepthook", "gc.disable", "weakref.finalize._select_for_exit", "sys.exc_info", "gc.isenabled"], "gc.isenabled": [], "gc.disable": [], "gc.enable": [], "copy.Error": [], "copy.copy": ["copy._copy_immutable", "<builtin>.isinstance", "<builtin>.issubclass", "copy._reconstruct", "<builtin>.type", "<builtin>.getattr"], "copy._copy_immutable": [], "copy._reconstruct": ["copy.deepcopy", "<builtin>.id", "<builtin>.setattr", "<builtin>.isinstance", "<builtin>.len", "<builtin>.hasattr"], "copy._deepcopy_atomic": [], "copy._keep_alive": ["<builtin>.id"], "copy._deepcopy_list": ["copy.deepcopy", "<builtin>.id"], "copy._deepcopy_tuple": ["<builtin>.tuple", "<builtin>.zip", "copy.deepcopy", "<builtin>.id"], "copy._deepcopy_dict": ["copy.deepcopy", "<builtin>.id"], "copy._deepcopy_method": ["<builtin>.type", "email.message.Message.__init__", "copy.deepcopy", "furl.furl.Path.__init__"], "ntpath._get_bothseps": ["<builtin>.isinstance"], "ntpath.normcase": ["<builtin>.isinstance", "sys.path.replace", "sys.base_prefix.replace"], "sys.base_prefix.replace": [], "sys.path.replace": [], "ntpath.splitdrive": ["<builtin>.isinstance", "sys.base_prefix.replace", "<builtin>.len", "sys.path.replace", "sys.stdin.buffer.replace"], "sys.stdin.buffer.replace": [], "ntpath.splitext": ["<builtin>.isinstance", "genericpath._splitext"], "ntpath.lexists": [], "ntpath.ismount": ["ntpath.splitdrive", "nt._getvolumepathname", "ntpath._get_bothseps", "ntpath._abspath_fallback"], "ntpath._abspath_fallback": ["ntpath.isabs", "ntpath.normpath", "ntpath.join", "<builtin>.isinstance"], "nt._getvolumepathname": [], "ntpath.expanduser": ["ntpath.dirname", "ntpath._get_bothseps", "<builtin>.isinstance", "<builtin>.len", "ntpath.join"], "ntpath.normpath": ["ntpath.splitdrive", "sys.path.split", "<builtin>.isinstance", "sys.base_prefix.lstrip", "sys.base_prefix.split", "sys.base_prefix.replace", "<builtin>.len", "sys.path.replace", "sys.path.lstrip", "sys.base_prefix.startswith", "sys.path.startswith"], "sys.path.lstrip": [], "sys.base_prefix.lstrip": [], "nt._getfullpathname": [], "ntpath._readlink_deep": ["ntpath.isabs", "ntpath.dirname", "ntpath.normcase", "ntpath.islink", "ntpath.normpath", "ntpath.join", "nt.readlink", "<builtin>.set"], "nt.readlink": [], "ntpath._getfinalpathname_nonstrict": ["ntpath._readlink_deep", "ntpath.join", "nt._getfinalpathname", "ntpath.split"], "nt._getfinalpathname": [], "ntpath.realpath": ["ntpath.isabs", "ntpath.normcase", "<builtin>.isinstance", "<builtin>.len", "ntpath.normpath", "ntpath.join", "ntpath._getfinalpathname_nonstrict", "nt._getfinalpathname", "sys.base_prefix.startswith", "sys.path.startswith"], "sys.getwindowsversion": [], "ntpath.relpath": ["ntpath.splitdrive", "ntpath._abspath_fallback", "ntpath.normcase", "<builtin>.zip", "genericpath._check_arg_types", "<builtin>.isinstance", "<builtin>.len", "ntpath.normpath", "ntpath.join", "<builtin>.ValueError"], "ntpath.commonpath": ["<builtin>.map", "<builtin>.tuple", "<builtin>.max", "ntpath.splitdrive", "<builtin>.enumerate", "<builtin>.isinstance", "genericpath._check_arg_types", "<builtin>.len", "<builtin>.ValueError", "<builtin>.min", "<builtin>.set"], "string.capwords": [], "string._TemplateMetaclass": [], "string._TemplateMetaclass.__init__": ["re.escape", "<builtin>.super", "re.compile"], "string.Template": [], "string.Template.__init__": [], "string.Template._invalid": ["<builtin>.ValueError", "<builtin>.len"], "string.Template.substitute": ["collections.ChainMap.__init__"], "string.Template.substitute.convert": ["<builtin>.str", "<builtin>.ValueError"], "string.Template.safe_substitute": ["collections.ChainMap.__init__"], "string.Template.safe_substitute.convert": ["<builtin>.str", "<builtin>.ValueError"], "string.Formatter": [], "string.Formatter.format": [], "string.Formatter.vformat": ["<builtin>.set", "string.Formatter._vformat", "string.Formatter.check_unused_args"], "string.Formatter._vformat": ["string.Formatter.parse", "string.Formatter.convert_field", "string.Formatter.get_field", "string.Formatter._vformat", "string.Formatter.format_field", "<builtin>.ValueError", "<builtin>.str"], "string.Formatter.check_unused_args": [], "string.Formatter.parse": ["_string.formatter_parser"], "string.Formatter.get_field": ["<builtin>.getattr", "string.Formatter.get_value", "_string.formatter_field_name_split"], "string.Formatter.convert_field": ["<builtin>.ascii", "<builtin>.str", "<builtin>.ValueError", "<builtin>.repr"], "string.Formatter.format_field": ["string.Formatter.format"], "string.Formatter.get_value": ["<builtin>.isinstance"], "<builtin>.ascii": [], "_string.formatter_parser": [], "_string.formatter_field_name_split": [], "textwrap.TextWrapper": ["re.escape", "<builtin>.ord", "re.compile"], "textwrap.TextWrapper.__init__": [], "textwrap.TextWrapper._munge_whitespace": [], "textwrap.TextWrapper._split": [], "textwrap.TextWrapper._fix_sentence_endings": ["<builtin>.len"], "textwrap.TextWrapper._handle_long_word": [], "textwrap.TextWrapper._wrap_chunks": ["<builtin>.map", "<builtin>.len", "<builtin>.sum", "<builtin>.ValueError", "textwrap.TextWrapper._handle_long_word"], "textwrap.TextWrapper._split_chunks": ["textwrap.TextWrapper._munge_whitespace", "textwrap.TextWrapper._split"], "textwrap.TextWrapper.wrap": ["textwrap.TextWrapper._fix_sentence_endings", "textwrap.TextWrapper._wrap_chunks", "textwrap.TextWrapper._split_chunks"], "textwrap.TextWrapper.fill": ["textwrap.TextWrapper.wrap"], "textwrap.shorten": ["textwrap.TextWrapper.fill", "textwrap.TextWrapper.__init__"], "textwrap.dedent": ["<builtin>.zip", "<builtin>.enumerate", "re.sub"], "textwrap.indent": ["textwrap.indent.prefixed_lines"], "textwrap.indent.predicate": [], "textwrap.indent.prefixed_lines": ["textwrap.indent.predicate"], "shutil.Error": [], "shutil.SameFileError": [], "shutil.SpecialFileError": [], "shutil.ExecError": [], "shutil.ReadError": [], "shutil.RegistryError": [], "shutil._GiveupOnFastCopy": [], "shutil._fastcopy_fcopyfile": ["posix._fcopyfile"], "posix._fcopyfile": [], "shutil._fastcopy_sendfile": ["<builtin>.max", "<builtin>.min"], "shutil._copyfileobj_readinto": ["<builtin>.memoryview", "<builtin>.bytearray"], "shutil.copyfileobj": ["tarfile._Stream.write", "lzma.LZMAFile.write", "tarfile._Stream.read", "bz2.BZ2File.write", "bz2.BZ2File.read", "gzip.GzipFile.read", "lzma.LZMAFile.read", "gzip.GzipFile.write"], "tarfile._Stream.read": ["tarfile._Stream._read", "<builtin>.len"], "tarfile._Stream.write": ["tarfile._Stream.__write", "<builtin>.len"], "shutil._samefile": ["posixpath.samestat", "ntpath.normcase", "posixpath.abspath", "<builtin>.isinstance", "ntpath.samestat", "ntpath.samefile", "ntpath.abspath", "posixpath.samefile", "posixpath.normcase", "<builtin>.hasattr"], "posixpath.samefile": [], "ntpath.samefile": [], "shutil._stat": ["<builtin>.isinstance"], "shutil._islink": ["posixpath.islink", "ntpath.islink", "<builtin>.isinstance"], "shutil.copyfile": ["stat.S_ISFIFO", "shutil._copyfileobj_readinto", "<builtin>.enumerate", "shutil._stat", "<builtin>.isinstance", "shutil._samefile", "<builtin>.open", "shutil._fastcopy_fcopyfile", "<builtin>.min", "sys.audit", "shutil._fastcopy_sendfile", "shutil.copyfileobj", "shutil._islink"], "shutil.copymode": ["posixpath.islink", "ntpath.islink", "shutil._stat", "stat.S_IMODE", "sys.audit", "shutil._islink", "<builtin>.hasattr"], "shutil._copyxattr": [], "shutil.copystat": ["posixpath.islink", "ntpath.islink", "<builtin>.isinstance", "stat.S_IMODE", "shutil._copyxattr", "shutil.copystat._nop", "sys.audit", "<builtin>.hasattr", "<builtin>.getattr", "shutil.copystat.lookup", "shutil._islink"], "shutil.copystat._nop": [], "shutil.copystat.lookup": ["<builtin>.getattr"], "shutil.copy": ["ntpath.isdir", "shutil.copyfile", "ntpath.basename", "posixpath.basename", "shutil.copymode", "posixpath.isdir", "ntpath.join", "posixpath.join"], "shutil.copy2": ["ntpath.isdir", "shutil.copyfile", "ntpath.basename", "posixpath.basename", "posixpath.isdir", "ntpath.join", "shutil.copystat", "posixpath.join"], "shutil.ignore_patterns": [], "shutil.ignore_patterns._ignore_patterns": ["<builtin>.set"], "shutil._copytree": ["<builtin>.str", "posixpath.exists", "shutil.copytree", "os.makedirs", "shutil.copy2", "ntpath.join", "ntpath.exists", "<builtin>.set", "shutil.copystat", "posixpath.join", "<builtin>.getattr"], "shutil.copytree": ["shutil._copytree", "<builtin>.list", "sys.audit"], "shutil._rmtree_isdir": ["stat.S_ISDIR"], "shutil._rmtree_islink": ["posixpath.islink", "stat.S_ISLNK", "ntpath.islink"], "shutil._rmtree_unsafe": ["shutil._rmtree_unsafe", "shutil._rmtree_isdir", "tempfile.TemporaryDirectory._rmtree.onerror", "<builtin>.OSError", "<builtin>.list", "sys.exc_info"], "tempfile.TemporaryDirectory._rmtree.onerror": ["ntpath.dirname", "tempfile.TemporaryDirectory._rmtree.onerror.resetperms", "<builtin>.issubclass", "posixpath.dirname", "tempfile.TemporaryDirectory._rmtree"], "shutil._rmtree_safe_fd": ["stat.S_ISDIR", "posixpath.samestat", "tempfile.TemporaryDirectory._rmtree.onerror", "<builtin>.OSError", "<builtin>.list", "ntpath.samestat", "shutil._rmtree_safe_fd", "ntpath.join", "sys.exc_info", "posixpath.join"], "shutil.rmtree": ["shutil._rmtree_unsafe", "shutil._rmtree_islink", "posixpath.samestat", "tempfile.TemporaryDirectory._rmtree.onerror", "<builtin>.isinstance", "<builtin>.OSError", "ntpath.samestat", "shutil._rmtree_safe_fd", "sys.exc_info", "sys.audit"], "shutil.rmtree.onerror": [], "shutil._basename": ["ntpath.basename", "posixpath.basename"], "shutil.move": ["ntpath.isdir", "shutil.rmtree", "posixpath.exists", "shutil._basename", "posixpath.islink", "ntpath.islink", "shutil.copytree", "shutil.copy2", "posixpath.isdir", "shutil._samefile", "ntpath.join", "shutil._destinsrc", "ntpath.exists", "sys.audit", "posixpath.join"], "shutil._destinsrc": ["ntpath.abspath", "posixpath.abspath"], "shutil._get_gid": [], "shutil._get_uid": ["pwd.getpwnam"], "shutil._make_tarball._set_uid_gid": [], "zipfile.ZipFile.__init__": ["threading.RLock", "io.open", "zipfile._check_compression", "zipfile._Tellable.__init__", "<builtin>.isinstance", "zipfile.ZipFile._fpclose", "zipfile._Tellable.tell", "<builtin>.ValueError", "zipfile.ZipFile._RealGetContents", "<builtin>.getattr"], "ntpath.isfile": [], "posixpath.isfile": [], "shutil.get_archive_formats": [], "shutil.register_archive_format": ["<builtin>.callable", "<builtin>.TypeError", "<builtin>.isinstance", "<builtin>.len"], "shutil.unregister_archive_format": [], "shutil.make_archive": ["ntpath.abspath", "posixpath.abspath", "<builtin>.ValueError", "sys.audit"], "shutil.get_unpack_formats": [], "shutil._check_unpack_options": ["<builtin>.callable", "<builtin>.TypeError"], "shutil.register_unpack_format": ["shutil._check_unpack_options"], "shutil.unregister_unpack_format": [], "shutil._ensure_directory": ["ntpath.isdir", "ntpath.dirname", "os.makedirs", "posixpath.isdir", "posixpath.dirname"], "zipfile.is_zipfile": ["<builtin>.open", "zipfile._check_zipfile", "<builtin>.hasattr"], "zipfile.ZipFile.infolist": [], "zipfile.ZipFile.read": ["zipfile.ZipFile.open", "zipfile.ZipFile.read"], "zipfile.ZipFile.close": ["zipfile.ZipFile._fpclose", "zipfile.ZipFile._write_end_record", "<builtin>.ValueError"], "shutil._find_unpack_format": [], "shutil.unpack_archive": ["shutil._find_unpack_format", "<builtin>.dict", "<builtin>.ValueError", "sys.audit"], "shutil.disk_usage": ["nt._getdiskusage"], "nt._getdiskusage": [], "shutil.chown": ["shutil._get_uid", "<builtin>.LookupError", "<builtin>.isinstance", "shutil._get_gid", "<builtin>.ValueError", "sys.audit"], "shutil._access_check": ["posixpath.exists", "ntpath.isdir", "ntpath.exists", "posixpath.isdir"], "shutil.which": ["<builtin>.any", "ntpath.dirname", "ntpath.normcase", "<builtin>.isinstance", "ntpath.join", "posixpath.dirname", "posixpath.normcase", "<builtin>.set", "posixpath.join", "shutil._access_check"], "lzma.LZMAFile": [], "lzma.LZMAFile.__init__": ["builtins.open", "<builtin>.isinstance", "_compression.DecompressReader.__init__", "io.BufferedReader", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.hasattr"], "_compression.DecompressReader.__init__": [], "io.BufferedReader": [], "sys.path.write": [], "sys.base_prefix.write": [], "tarfile.TarFile.close": ["tarfile._Stream.write", "gzip.GzipFile.close", "tarfile._Stream.close", "lzma.LZMAFile.write", "bz2.BZ2File.close", "bz2.BZ2File.write", "lzma.LZMAFile.close", "gzip.GzipFile.write", "<builtin>.divmod"], "sys.path.close": [], "sys.base_prefix.close": [], "lzma.LZMAFile.closed": [], "lzma.LZMAFile.fileno": ["sys.path.fileno", "_compression.BaseStream._check_not_closed", "sys.base_prefix.fileno"], "_compression.BaseStream._check_not_closed": ["<builtin>.ValueError"], "sys.path.fileno": [], "sys.base_prefix.fileno": [], "lzma.LZMAFile.seekable": ["lzma.LZMAFile.readable"], "lzma.LZMAFile.readable": ["_compression.BaseStream._check_not_closed"], "lzma.LZMAFile.writable": ["_compression.BaseStream._check_not_closed"], "lzma.LZMAFile.peek": ["_compression.BaseStream._check_can_read"], "_compression.BaseStream._check_can_read": ["gzip.GzipFile.readable", "lzma.LZMAFile.readable", "io.UnsupportedOperation", "bz2.BZ2File.readable"], "lzma.LZMAFile.read1": ["_compression.BaseStream._check_can_read"], "_compression.BaseStream._check_can_write": ["io.UnsupportedOperation", "gzip.GzipFile.writable", "lzma.LZMAFile.writable", "bz2.BZ2File.writable"], "_compression.BaseStream._check_can_seek": ["gzip.GzipFile.readable", "lzma.LZMAFile.readable", "lzma.LZMAFile.seekable", "bz2.BZ2File.seekable", "io.UnsupportedOperation", "gzip.GzipFile.seekable", "bz2.BZ2File.readable"], "lzma.LZMAFile.tell": ["_compression.BaseStream._check_not_closed"], "lzma.open": ["lzma.LZMAFile.__init__", "io.TextIOWrapper", "<builtin>.ValueError"], "lzma.compress": [], "lzma.decompress": [], "_compression.BaseStream": [], "gzip.GzipFile.readable": [], "bz2.BZ2File.readable": ["_compression.BaseStream._check_not_closed"], "io.UnsupportedOperation": [], "gzip.GzipFile.writable": [], "bz2.BZ2File.writable": ["_compression.BaseStream._check_not_closed"], "gzip.GzipFile.seekable": [], "bz2.BZ2File.seekable": ["bz2.BZ2File.readable"], "_compression.DecompressReader": [], "_compression.DecompressReader.readable": [], "_compression.DecompressReader.close": ["<builtin>.super"], "_compression.DecompressReader.seekable": ["sys.path.seekable", "sys.base_prefix.seekable"], "sys.path.seekable": [], "sys.base_prefix.seekable": [], "_compression.DecompressReader.readinto": ["<builtin>.memoryview", "gzip._GzipReader.read", "_compression.DecompressReader.read", "<builtin>.len"], "gzip._GzipReader.read": ["gzip._GzipReader._init_read", "gzip._GzipReader._add_read_data", "_io._RawIOBase.readall", "sys.path.read", "gzip._GzipReader._read_gzip_header", "<builtin>.len", "<builtin>.EOFError", "sys.path.prepend", "sys.base_prefix.read", "sys.base_prefix.prepend", "gzip._GzipReader._read_eof"], "_compression.DecompressReader.read": ["_io._RawIOBase.readall", "sys.path.read", "<builtin>.len", "<builtin>.EOFError", "sys.base_prefix.read"], "_io._RawIOBase.readall": [], "sys.path.read": [], "sys.base_prefix.read": [], "<builtin>.EOFError": [], "_compression.DecompressReader._rewind": ["sys.base_prefix.seek", "sys.path.seek"], "sys.base_prefix.seek": [], "sys.path.seek": [], "_compression.DecompressReader.seek": ["_compression.DecompressReader._rewind", "gzip._GzipReader.read", "_compression.DecompressReader.read", "<builtin>.len", "gzip._GzipReader._rewind", "<builtin>.ValueError", "<builtin>.min"], "gzip._GzipReader._rewind": ["<builtin>.super"], "_compression.DecompressReader.tell": [], "tarfile.stn": ["<builtin>.len"], "tarfile.nts": [], "tarfile.nti": ["<builtin>.int", "tarfile.nts", "<builtin>.range", "<builtin>.len"], "tarfile.itn": ["<builtin>.bytes", "<builtin>.bytearray", "<builtin>.int", "<builtin>.ValueError", "<builtin>.range"], "tarfile.calc_chksums": ["<builtin>.sum"], "tarfile.copyfileobj": ["tarfile._Stream.write", "lzma.LZMAFile.write", "tarfile._Stream.read", "bz2.BZ2File.write", "bz2.BZ2File.read", "<builtin>.len", "gzip.GzipFile.read", "lzma.LZMAFile.read", "gzip.GzipFile.write", "shutil.copyfileobj", "<builtin>.range", "<builtin>.divmod"], "<builtin>.divmod": [], "tarfile._safe_print": ["<builtin>.print", "<builtin>.getattr"], "tarfile.TarError": [], "tarfile.ExtractError": [], "tarfile.ReadError": [], "tarfile.CompressionError": [], "tarfile.StreamError": [], "tarfile.HeaderError": [], "tarfile.EmptyHeaderError": [], "tarfile.TruncatedHeaderError": [], "tarfile.EOFHeaderError": [], "tarfile.InvalidHeaderError": [], "tarfile.SubsequentHeaderError": [], "tarfile._LowLevelFile": [], "tarfile._LowLevelFile.__init__": ["<builtin>.hasattr"], "tarfile._LowLevelFile.close": [], "tarfile._LowLevelFile.read": [], "tarfile._LowLevelFile.write": [], "tarfile._Stream": [], "tarfile._StreamProxy.__init__": ["tarfile._LowLevelFile.read", "tarfile._StreamProxy.read"], "tarfile._StreamProxy.getcomptype": [], "tarfile._Stream._init_read_gz": ["tarfile._Stream.read", "tarfile._Stream.__read", "<builtin>.ord"], "tarfile._Stream._init_write_gz": ["time.time", "<builtin>.int", "tarfile._Stream.__write"], "tarfile._StreamProxy.close": ["tarfile._StreamProxy.close", "tarfile._LowLevelFile.close"], "tarfile._Stream.__del__": ["tarfile._Stream.close", "<builtin>.hasattr"], "tarfile._Stream.close": ["tarfile._StreamProxy.close", "tarfile._LowLevelFile.write", "tarfile._LowLevelFile.close"], "time.time": [], "tarfile._Stream.__write": ["tarfile._LowLevelFile.write", "<builtin>.len"], "tarfile._Stream.__read": ["tarfile._StreamProxy.read", "tarfile._LowLevelFile.read", "<builtin>.len"], "tarfile._Stream.tell": [], "tarfile._Stream.seek": ["tarfile._Stream.read", "<builtin>.range", "<builtin>.divmod"], "tarfile._Stream._read": ["tarfile._Stream.__read", "tarfile._StreamProxy.read", "tarfile._LowLevelFile.read", "<builtin>.len"], "tarfile._StreamProxy.read": [], "tarfile._StreamProxy": [], "tarfile._FileInFile": [], "tarfile._FileInFile.__init__": ["<builtin>.getattr"], "tarfile._FileInFile.flush": [], "tarfile._FileInFile.readable": [], "tarfile._FileInFile.writable": [], "tarfile._FileInFile.seekable": ["gzip.GzipFile.seekable", "lzma.LZMAFile.seekable", "bz2.BZ2File.seekable"], "tarfile._FileInFile.tell": [], "tarfile._FileInFile.seek": ["<builtin>.max", "<builtin>.min", "<builtin>.ValueError"], "tarfile._FileInFile.read": ["tarfile._Stream.read", "bz2.BZ2File.read", "<builtin>.len", "gzip.GzipFile.seek", "lzma.LZMAFile.seek", "tarfile._Stream.seek", "bz2.BZ2File.seek", "gzip.GzipFile.read", "<builtin>.min", "lzma.LZMAFile.read"], "tarfile._FileInFile.readinto": ["tarfile._FileInFile.read", "<builtin>.len"], "tarfile._FileInFile.close": [], "tarfile.ExFileObject": [], "tarfile.ExFileObject.__init__": ["tarfile._FileInFile.__init__", "<builtin>.super"], "tarfile.TarInfo": ["<builtin>.dict"], "tarfile.TarInfo.__init__": [], "tarfile.TarInfo.path": [], "tarfile.TarInfo.linkpath": [], "tarfile.TarInfo.__repr__": ["<builtin>.id"], "tarfile.TarInfo.get_info": [], "tarfile.TarInfo.tobuf": ["tarfile.TarInfo.create_pax_header", "tarfile.TarInfo.create_ustar_header", "tarfile.TarInfo.create_gnu_header", "<builtin>.ValueError", "tarfile.TarInfo.get_info"], "tarfile.TarInfo.create_ustar_header": ["tarfile.TarInfo._posix_split_name", "tarfile.TarInfo._create_header", "<builtin>.ValueError", "<builtin>.len"], "tarfile.TarInfo.create_gnu_header": ["tarfile.TarInfo._create_header", "tarfile.TarInfo._create_gnu_long_header", "<builtin>.len"], "tarfile.TarInfo.create_pax_header": ["<builtin>.isinstance", "<builtin>.len", "tarfile.TarInfo._create_pax_generic_header", "tarfile.TarInfo._create_header", "<builtin>.str"], "tarfile.TarInfo._posix_split_name": ["<builtin>.range", "<builtin>.len"], "tarfile.TarInfo._create_header": ["tarfile.itn", "<builtin>.bytes", "tarfile.calc_chksums", "tarfile.stn"], "tarfile.TarInfo._create_gnu_long_header": ["tarfile.TarInfo._create_header", "tarfile.TarInfo._create_payload", "<builtin>.len"], "tarfile.TarInfo._create_pax_generic_header": ["<builtin>.bytes", "tarfile.TarInfo._create_payload", "<builtin>.len", "tarfile.TarInfo._create_header", "<builtin>.str"], "tarfile.TarInfo.create_pax_global_header": ["tarfile.TarInfo._create_pax_generic_header"], "tarfile.TarInfo._create_payload": ["<builtin>.divmod", "<builtin>.len"], "tarfile.TarInfo.frombuf": ["tarfile.nts", "tarfile.TarInfo.__init__", "tarfile.calc_chksums", "<builtin>.len", "tarfile.nti", "<builtin>.range", "<builtin>.bool"], "tarfile.TarInfo.fromtarfile": ["bz2.BZ2File.tell", "tarfile._Stream.tell", "tarfile._Stream.read", "bz2.BZ2File.read", "lzma.LZMAFile.tell", "gzip.GzipFile.read", "lzma.LZMAFile.read", "tarfile.TarInfo.frombuf"], "bz2.BZ2File.tell": ["_compression.BaseStream._check_not_closed"], "tarfile.TarInfo._proc_member": ["tarfile.TarInfo._proc_gnulong", "tarfile.TarInfo._proc_sparse", "tarfile.TarInfo._proc_builtin", "tarfile.TarInfo._proc_pax"], "tarfile.TarInfo._proc_gnulong": ["tarfile.nts", "tarfile.TarInfo._block", "tarfile.TarInfo.fromtarfile"], "tarfile.TarInfo._proc_sparse": ["tarfile.nti", "<builtin>.range", "tarfile.TarInfo._block", "<builtin>.bool"], "tarfile.TarInfo._proc_pax": ["re.search", "tarfile.TarInfo._proc_gnusparse_01", "tarfile.TarInfo._proc_gnusparse_00", "<builtin>.int", "tarfile.TarInfo._proc_gnusparse_10", "re.compile", "tarfile.TarInfo._block", "tarfile.TarInfo._decode_pax_field", "tarfile.TarInfo.fromtarfile"], "tarfile.TarInfo._proc_builtin": ["tarfile.TarInfo.isreg", "tarfile.TarInfo._block", "tarfile.TarInfo._apply_pax_info"], "tarfile.TarInfo.isreg": [], "tarfile.TarInfo._block": ["<builtin>.divmod"], "tarfile.TarInfo._apply_pax_info": ["<builtin>.setattr", "<builtin>.int"], "tarfile.TarInfo._decode_pax_field": [], "tarfile.TarInfo._proc_gnusparse_01": ["<builtin>.zip", "<builtin>.int", "<builtin>.list"], "tarfile.TarInfo._proc_gnusparse_00": ["<builtin>.zip", "<builtin>.int", "re.finditer", "<builtin>.list"], "tarfile.TarInfo._proc_gnusparse_10": ["<builtin>.zip", "<builtin>.int", "<builtin>.list", "<builtin>.len"], "tarfile.TarInfo.isfile": ["tarfile.TarInfo.isreg"], "tarfile.TarInfo.isdir": [], "tarfile.TarInfo.issym": [], "tarfile.TarInfo.islnk": [], "tarfile.TarInfo.ischr": [], "tarfile.TarInfo.isblk": [], "tarfile.TarInfo.isfifo": [], "tarfile.TarInfo.issparse": [], "tarfile.TarInfo.isdev": [], "tarfile.TarFile": [], "tarfile.TarFile.__init__": ["<builtin>.isinstance", "lzma.LZMAFile.seek", "<builtin>.ValueError", "gzip.GzipFile.write", "tarfile.TarInfo.fromtarfile", "<builtin>.hasattr", "tarfile._Stream.write", "tarfile._Stream.tell", "posixpath.exists", "bz2.BZ2File.close", "posixpath.abspath", "bz2.BZ2File.write", "lzma.LZMAFile.tell", "ntpath.abspath", "tarfile.TarFile.next", "lzma.LZMAFile.close", "<builtin>.str", "builtins.open", "<builtin>.len", "tarfile.TarInfo.create_pax_global_header", "bz2.BZ2File.tell", "gzip.GzipFile.close", "tarfile._Stream.close", "lzma.LZMAFile.write", "gzip.GzipFile.seek", "tarfile._Stream.seek", "bz2.BZ2File.seek", "ntpath.exists"], "tarfile.TarFile.next": ["bz2.BZ2File.tell", "tarfile._Stream.tell", "tarfile._Stream.read", "bz2.BZ2File.read", "lzma.LZMAFile.tell", "gzip.GzipFile.seek", "lzma.LZMAFile.seek", "tarfile._Stream.seek", "bz2.BZ2File.seek", "gzip.GzipFile.read", "lzma.LZMAFile.read", "tarfile.TarFile._dbg", "tarfile.TarFile._check", "<builtin>.str", "tarfile.TarInfo.fromtarfile"], "tarfile.TarFile.open": ["tarfile._Stream.__init__", "gzip.GzipFile.close", "tarfile._Stream.close", "<builtin>.sorted", "bz2.BZ2File.close", "tarfile.TarFile.__init__", "tarfile.TarFile.taropen", "<builtin>.ValueError", "lzma.LZMAFile.close", "<builtin>.getattr"], "tarfile.TarFile.open.not_compressed": [], "tarfile.TarFile.taropen": ["tarfile.TarFile.__init__", "<builtin>.ValueError"], "gzip.GzipFile.__init__": ["builtins.open", "gzip.GzipFile._write_gzip_header", "<builtin>.isinstance", "gzip._GzipReader.__init__", "io.BufferedReader", "<builtin>.ValueError", "gzip.GzipFile._init_write", "<builtin>.getattr"], "bz2.BZ2File.__init__": ["builtins.open", "threading.RLock", "<builtin>.isinstance", "_compression.DecompressReader.__init__", "warnings.warn", "io.BufferedReader", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.hasattr"], "tarfile.TarFile.getmember": ["<builtin>.KeyError", "tarfile.TarFile._getmember"], "tarfile.TarFile._getmember": ["tarfile.TarFile.getmembers", "ntpath.normpath", "posixpath.normpath", "<builtin>.reversed"], "tarfile.TarFile.getmembers": ["tarfile.TarFile._load", "tarfile.TarFile._check"], "tarfile.TarFile._check": ["<builtin>.OSError"], "tarfile.TarFile._load": ["tarfile.TarFile.next"], "tarfile.TarFile.getnames": ["tarfile.TarFile.getmembers"], "tarfile.TarFile.gettarinfo": ["stat.S_ISDIR", "stat.S_ISFIFO", "ntpath.splitdrive", "tarfile.TarInfo.__init__", "stat.S_ISCHR", "sys.base_prefix.lstrip", "sys.base_prefix.replace", "posixpath.splitdrive", "stat.S_ISLNK", "stat.S_ISBLK", "pwd.getpwuid", "sys.path.replace", "sys.path.lstrip", "tarfile.TarFile._check", "stat.S_ISREG", "<builtin>.hasattr"], "tarfile.TarFile.list": ["stat.filemode", "tarfile._safe_print", "tarfile.TarFile.__iter__", "<builtin>.print", "tarfile.TarFile._check", "time.localtime"], "tarfile.TarFile.__iter__": ["tarfile.TarFile.next", "<builtin>.len"], "time.localtime": [], "tarfile.TarFile.add": ["tarfile.TarInfo.isreg", "builtins.open", "tarfile.TarInfo.isdir", "<builtin>.sorted", "tarfile.TarFile.gettarinfo", "posixpath.abspath", "ntpath.abspath", "ntpath.join", "tarfile.TarFile._dbg", "tarfile.TarFile.add", "tarfile.TarFile._check", "posixpath.join", "tarfile.TarFile.addfile"], "tarfile.TarFile._dbg": ["<builtin>.print"], "tarfile.TarFile.addfile": ["tarfile._Stream.write", "lzma.LZMAFile.write", "tarfile.TarInfo.tobuf", "bz2.BZ2File.write", "<builtin>.len", "tarfile.copyfileobj", "gzip.GzipFile.write", "tarfile.TarFile._check", "<builtin>.divmod"], "tarfile.TarFile.extractall": ["tarfile.TarFile.extract", "tarfile.TarFile.chmod", "tarfile.TarFile.__iter__", "ntpath.join", "tarfile.TarFile.utime", "tarfile.TarFile._dbg", "posixpath.join", "tarfile.TarFile.chown"], "tarfile.TarFile.extract": ["<builtin>.isinstance", "ntpath.join", "tarfile.TarFile._dbg", "tarfile.TarFile._extract_member", "tarfile.TarFile.getmember", "tarfile.TarFile._check", "posixpath.join"], "tarfile.TarFile.extractall.<lambda1>": [], "tarfile.TarFile.chown": ["pwd.getpwnam", "<builtin>.hasattr"], "tarfile.TarFile.utime": ["<builtin>.hasattr"], "tarfile.TarFile.chmod": [], "tarfile.TarFile._extract_member": ["tarfile.TarFile.makefifo", "tarfile.TarFile.makedir", "os.makedirs", "tarfile.TarFile.makelink", "tarfile.TarFile.chown", "ntpath.dirname", "posixpath.exists", "tarfile.TarFile.utime", "tarfile.TarFile.makefile", "sys.path.rstrip", "tarfile.TarFile.makedev", "tarfile.TarFile._dbg", "sys.path.replace", "sys.base_prefix.replace", "tarfile.TarFile.chmod", "tarfile.TarFile.makeunknown", "posixpath.dirname", "sys.base_prefix.rstrip", "ntpath.exists"], "tarfile.TarFile.extractfile": ["tarfile.TarFile.extractfile", "<builtin>.isinstance", "tarfile.TarFile._find_link_target", "tarfile.TarFile.getmember", "tarfile.TarFile._check", "tarfile.ExFileObject.__init__"], "tarfile.TarFile._find_link_target": ["<builtin>.KeyError", "ntpath.dirname", "tarfile.TarFile._getmember", "posixpath.dirname", "<builtin>.filter"], "sys.path.rstrip": [], "sys.base_prefix.rstrip": [], "tarfile.TarFile.makefile": ["builtins.open", "gzip.GzipFile.seek", "lzma.LZMAFile.seek", "tarfile._Stream.seek", "bz2.BZ2File.seek", "tarfile.copyfileobj"], "tarfile.TarFile.makedir": [], "tarfile.TarFile.makefifo": ["<builtin>.hasattr"], "tarfile.TarFile.makedev": ["<builtin>.hasattr"], "tarfile.TarFile.makelink": ["posixpath.exists", "tarfile.TarFile._find_link_target", "ntpath.exists", "tarfile.TarFile._extract_member"], "tarfile.TarFile.makeunknown": ["tarfile.TarFile._dbg", "tarfile.TarFile.makefile"], "tarfile.TarFile.__enter__": ["tarfile.TarFile._check"], "tarfile.TarFile.__exit__": ["gzip.GzipFile.close", "tarfile._Stream.close", "bz2.BZ2File.close", "tarfile.TarFile.close", "lzma.LZMAFile.close"], "tarfile.is_tarfile": ["tarfile.TarFile.open"], "gzip.open": ["gzip.GzipFile.__init__", "<builtin>.isinstance", "io.TextIOWrapper", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.hasattr"], "gzip.write32u": ["sys.stdout.buffer.write", "sys.base_prefix.write", "sys.path.write", "sys.stdin.buffer.write", "gzip.GzipFile.write"], "sys.stdout.buffer.write": [], "sys.stdin.buffer.write": [], "gzip._PaddedFile": [], "gzip._PaddedFile.__init__": ["<builtin>.len"], "gzip._PaddedFile.read": [], "gzip._PaddedFile.prepend": ["<builtin>.len"], "gzip._PaddedFile.seek": [], "gzip._PaddedFile.seekable": [], "gzip.BadGzipFile": [], "gzip.GzipFile": [], "gzip._GzipReader.__init__": ["<builtin>.super", "gzip._PaddedFile.__init__"], "gzip.GzipFile._init_write": [], "gzip.GzipFile._write_gzip_header": ["sys.stdout.buffer.write", "sys.base_prefix.write", "ntpath.basename", "posixpath.basename", "<builtin>.isinstance", "sys.path.write", "sys.stdin.buffer.write", "gzip.write32u", "<builtin>.chr", "gzip.GzipFile.write", "time.time", "<builtin>.int"], "gzip.GzipFile.mtime": [], "gzip.GzipFile.__repr__": ["<builtin>.id", "<builtin>.hex", "<builtin>.repr"], "gzip.GzipFile.read1": ["_compression.BaseStream._check_not_closed", "<builtin>.OSError"], "gzip.GzipFile.peek": ["_compression.BaseStream._check_not_closed", "<builtin>.OSError"], "gzip.GzipFile.closed": [], "sys.stdin.buffer.flush": [], "sys.base_prefix.flush": [], "sys.path.flush": [], "sys.stdout.buffer.flush": [], "gzip.GzipFile.fileno": ["sys.path.fileno", "sys.stdout.buffer.fileno", "sys.stdin.buffer.fileno", "gzip.GzipFile.fileno", "sys.base_prefix.fileno"], "sys.stdout.buffer.fileno": [], "sys.stdin.buffer.fileno": [], "gzip.GzipFile.rewind": ["<builtin>.OSError"], "gzip._GzipReader": [], "gzip._GzipReader._init_read": [], "gzip._GzipReader._read_exact": ["<builtin>.EOFError", "sys.path.read", "sys.base_prefix.read", "<builtin>.len"], "gzip._GzipReader._read_gzip_header": ["sys.path.read", "sys.base_prefix.read", "gzip._GzipReader._read_exact"], "gzip._GzipReader._read_eof": ["gzip._GzipReader._read_exact", "sys.path.read", "<builtin>.hex", "sys.path.prepend", "sys.base_prefix.prepend", "sys.base_prefix.read"], "sys.base_prefix.prepend": [], "sys.path.prepend": [], "gzip._GzipReader._add_read_data": ["<builtin>.len"], "gzip.compress": ["gzip.GzipFile.__init__", "io.BytesIO"], "gzip.decompress": ["gzip.GzipFile.__init__", "io.BytesIO"], "sys.stdin.buffer.read": [], "sys.stdout.buffer.close": [], "sys.stdin.buffer.close": [], "bz2.BZ2File": [], "bz2.BZ2File.closed": [], "bz2.BZ2File.fileno": ["sys.path.fileno", "_compression.BaseStream._check_not_closed", "sys.base_prefix.fileno"], "bz2.BZ2File.peek": ["_compression.BaseStream._check_can_read"], "bz2.BZ2File.read1": ["_compression.BaseStream._check_can_read"], "bz2.BZ2File.readinto": ["_compression.BaseStream._check_can_read"], "_io._BufferedIOBase.__index__": [], "bz2.BZ2File.readlines": ["_compression.BaseStream._check_can_read", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.hasattr"], "bz2.BZ2File.writelines": ["bz2.BZ2File.writelines", "_io._BufferedIOBase.writelines"], "_io._BufferedIOBase.writelines": [], "bz2.open": ["io.TextIOWrapper", "bz2.BZ2File.__init__", "<builtin>.ValueError"], "bz2.compress": [], "bz2.decompress": ["<builtin>.ValueError"], "zipfile.BadZipFile": [], "zipfile.LargeZipFile": [], "zipfile._strip_extra": ["<builtin>.len"], "zipfile._check_zipfile": ["zipfile._EndRecData"], "zipfile._EndRecData": ["<builtin>.max", "zipfile._EndRecData64", "<builtin>.list", "<builtin>.len", "zipfile._Tellable.tell", "zipfile.ZipFile.read"], "zipfile._EndRecData64": ["zipfile.ZipFile.read", "<builtin>.len"], "zipfile._Tellable.tell": [], "zipfile.ZipInfo": [], "zipfile.ZipInfo.__init__": ["sys.path.find", "sys.base_prefix.replace", "sys.base_prefix.find", "<builtin>.ValueError", "sys.path.replace", "<builtin>.chr"], "sys.base_prefix.find": [], "sys.path.find": [], "zipfile.ZipInfo.__repr__": ["stat.filemode", "zipfile.ZipInfo.is_dir"], "zipfile.ZipInfo.is_dir": [], "zipfile.ZipInfo.FileHeader": ["zipfile.ZipInfo._encodeFilenameFlags", "<builtin>.max", "<builtin>.len"], "zipfile.ZipInfo._encodeFilenameFlags": ["sys.base_prefix.encode", "sys.path.encode"], "sys.base_prefix.encode": [], "sys.path.encode": [], "zipfile.ZipInfo._decodeExtra": ["<builtin>.len"], "zipfile.ZipInfo.from_file": ["stat.S_ISDIR", "posixpath.normpath", "ntpath.splitdrive", "zipfile.ZipInfo.__init__", "<builtin>.isinstance", "ntpath.normpath", "posixpath.splitdrive", "time.localtime"], "zipfile._gen_crc": ["<builtin>.range"], "zipfile._ZipDecrypter": ["<builtin>.map", "zipfile._ZipDecrypter.update_keys", "<builtin>.range", "<builtin>.list"], "zipfile._ZipDecrypter.crc32": [], "zipfile._ZipDecrypter.update_keys": ["zipfile._ZipDecrypter.crc32"], "zipfile._ZipDecrypter.decrypter": ["<builtin>.bytearray", "zipfile._ZipDecrypter.update_keys", "<builtin>.bytes"], "zipfile.LZMACompressor": [], "zipfile.LZMACompressor.__init__": [], "zipfile.LZMACompressor._init": ["<builtin>.len"], "zipfile.LZMACompressor.compress": ["zipfile.LZMACompressor._init"], "zipfile.LZMACompressor.flush": ["zipfile.LZMACompressor._init"], "zipfile.LZMADecompressor": [], "zipfile.LZMADecompressor.__init__": [], "zipfile.LZMADecompressor.decompress": ["<builtin>.len"], "zipfile._check_compression": ["<builtin>.RuntimeError", "<builtin>.NotImplementedError"], "zipfile._get_compressor": ["zipfile.LZMACompressor.__init__"], "zipfile._get_decompressor": ["<builtin>.NotImplementedError", "zipfile.LZMADecompressor.__init__", "zipfile._check_compression"], "zipfile._SharedFile": [], "zipfile._SharedFile.__init__": [], "zipfile._SharedFile.seek": ["zipfile._Tellable.tell", "zipfile.ZipFile.open.<lambda1>", "<builtin>.ValueError"], "zipfile.ZipFile.open.<lambda1>": [], "zipfile._SharedFile.read": ["zipfile._Tellable.tell", "zipfile.ZipFile.read", "zipfile.ZipFile.open.<lambda1>", "<builtin>.ValueError"], "zipfile._SharedFile.close": ["zipfile.ZipFile._fpclose"], "zipfile.ZipFile._fpclose": ["zipfile.ZipFile.close", "zipfile._Tellable.close"], "zipfile._Tellable": [], "zipfile._Tellable.__init__": [], "zipfile._Tellable.write": ["zipfile._Tellable.write", "zipfile.ZipFile.write"], "zipfile.ZipFile.write": ["zipfile.ZipFile.write", "zipfile.ZipFile._writecheck", "zipfile.ZipFile.open", "shutil.copyfileobj", "zipfile._Tellable.write", "zipfile._Tellable.tell", "<builtin>.ValueError", "zipfile.ZipInfo.from_file"], "zipfile._Tellable.flush": ["zipfile._Tellable.flush"], "zipfile._Tellable.close": ["zipfile.ZipFile.close", "zipfile._Tellable.close"], "zipfile.ZipExtFile": [], "zipfile.ZipExtFile.__init__": ["zipfile.ZipExtFile._init_decrypter", "zipfile._Tellable.tell", "<builtin>.RuntimeError", "zipfile._get_decompressor", "<builtin>.hasattr"], "zipfile.ZipExtFile._init_decrypter": ["zipfile._SharedFile.read", "zipfile._ZipDecrypter", "zipfile._ZipDecrypter.decrypter"], "zipfile.ZipExtFile.__repr__": [], "zipfile.ZipExtFile.readline": ["bz2.BZ2File.readline", "zipfile.ZipExtFile.readline", "gzip.GzipFile.readline", "_io._BufferedIOBase.readline", "lzma.LZMAFile.readline", "_io._IOBase.readline"], "_io._BufferedIOBase.readline": [], "_io._IOBase.readline": [], "zipfile.ZipExtFile.peek": ["zipfile.ZipExtFile.read", "<builtin>.len"], "zipfile.ZipExtFile.read": ["zipfile.ZipExtFile._read1", "<builtin>.len"], "zipfile.ZipExtFile.readable": [], "zipfile.ZipExtFile._read1": ["<builtin>.max", "zipfile.ZipExtFile._read2", "<builtin>.len", "zipfile.LZMADecompressor.decompress", "zipfile.ZipExtFile._update_crc"], "zipfile.ZipExtFile._update_crc": [], "zipfile.ZipExtFile.read1": ["zipfile.ZipExtFile._read1", "<builtin>.len"], "zipfile.ZipExtFile._read2": ["zipfile._SharedFile.read", "<builtin>.max", "<builtin>.len", "<builtin>.min", "zipfile._ZipDecrypter.decrypter"], "zipfile.ZipExtFile.close": ["zipfile._SharedFile.close", "<builtin>.super"], "zipfile.ZipExtFile.seekable": [], "zipfile.ZipExtFile.seek": ["zipfile.ZipExtFile._init_decrypter", "zipfile.ZipExtFile.read", "<builtin>.len", "zipfile.ZipExtFile.tell", "zipfile._SharedFile.seek", "<builtin>.ValueError", "<builtin>.min", "io.UnsupportedOperation", "zipfile._get_decompressor"], "zipfile.ZipExtFile.tell": ["io.UnsupportedOperation", "<builtin>.len"], "zipfile._ZipWriteFile": [], "zipfile._ZipWriteFile.__init__": ["zipfile._get_compressor"], "zipfile._ZipWriteFile._fileobj": [], "zipfile._ZipWriteFile.writable": [], "zipfile._ZipWriteFile.write": ["zipfile.LZMACompressor.compress", "<builtin>.ValueError", "<builtin>.len"], "zipfile._ZipWriteFile.close": ["sys.base_prefix.FileHeader", "zipfile.ZipInfo.FileHeader", "<builtin>.super", "zipfile.LZMACompressor.flush", "sys.path.FileHeader", "<builtin>.len", "<builtin>.RuntimeError"], "sys.base_prefix.FileHeader": [], "sys.path.FileHeader": [], "zipfile.ZipFile": [], "zipfile.ZipFile._RealGetContents": ["zipfile.ZipInfo.__init__", "zipfile._EndRecData", "io.BytesIO", "zipfile.ZipInfo._decodeExtra", "<builtin>.len", "<builtin>.print", "<builtin>.NotImplementedError", "zipfile.ZipFile.read"], "zipfile.ZipFile.__enter__": [], "zipfile.ZipFile.__exit__": ["zipfile.ZipFile.close"], "zipfile.ZipFile.__repr__": [], "zipfile.ZipFile.namelist": [], "zipfile.ZipFile.printdir": ["<builtin>.print"], "zipfile.ZipFile.testzip": ["zipfile.ZipFile.open"], "zipfile.ZipFile.open": ["zipfile.ZipFile._open_to_write", "zipfile._SharedFile.__init__", "zipfile._SharedFile.read", "zipfile.ZipInfo.__init__", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.len", "zipfile.ZipFile.getinfo", "<builtin>.RuntimeError", "<builtin>.NotImplementedError", "zipfile.ZipExtFile.__init__", "zipfile._SharedFile.close", "<builtin>.ValueError", "<builtin>.type"], "zipfile.ZipFile.getinfo": ["<builtin>.KeyError"], "zipfile.ZipFile.setpassword": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "zipfile.ZipFile._open_to_write": ["zipfile.ZipFile.write", "zipfile.ZipFile._writecheck", "sys.base_prefix.FileHeader", "zipfile.ZipInfo.FileHeader", "sys.path.FileHeader", "zipfile._ZipWriteFile.__init__", "zipfile._Tellable.tell", "zipfile._Tellable.write", "<builtin>.ValueError", "<builtin>.hasattr"], "zipfile.ZipFile.extract": ["zipfile.ZipFile._extract_member"], "zipfile.ZipFile._extract_member": ["ntpath.isdir", "posixpath.normpath", "ntpath.splitdrive", "ntpath.dirname", "posixpath.exists", "zipfile.ZipFile.open", "os.makedirs", "<builtin>.isinstance", "posixpath.isdir", "zipfile.ZipFile.getinfo", "ntpath.join", "zipfile.ZipFile._sanitize_windows_name", "ntpath.normpath", "posixpath.dirname", "ntpath.exists", "posixpath.splitdrive", "shutil.copyfileobj", "posixpath.join"], "zipfile.ZipFile.extractall": ["zipfile.CompleteDirs.namelist", "zipfile.ZipFile._extract_member", "zipfile.ZipFile.namelist"], "zipfile.CompleteDirs.namelist": ["zipfile.CompleteDirs._implied_dirs", "<builtin>.super", "<builtin>.list"], "zipfile.ZipFile._sanitize_windows_name": ["<builtin>.len"], "zipfile.ZipFile.writestr": ["zipfile.ZipInfo.__init__", "zipfile.ZipFile.open", "<builtin>.isinstance", "<builtin>.len", "<builtin>.ValueError", "time.time", "time.localtime"], "zipfile.ZipFile.__del__": ["zipfile.ZipFile.close"], "zipfile.ZipFile._write_end_record": ["<builtin>.max", "zipfile.ZipFile.write", "<builtin>.len", "<builtin>.print", "zipfile._Tellable.write", "zipfile._Tellable.tell", "zipfile._Tellable.flush", "zipfile._strip_extra", "<builtin>.min"], "zipfile.PyZipFile": [], "zipfile.PyZipFile.__init__": ["zipfile.ZipFile.__init__"], "zipfile.PyZipFile.writepy": ["ntpath.isdir", "<builtin>.sorted", "zipfile.ZipFile.write", "posixpath.isfile", "ntpath.isfile", "posixpath.isdir", "<builtin>.print", "posixpath.split", "ntpath.join", "<builtin>.RuntimeError", "zipfile.PyZipFile._get_codename", "zipfile.PyZipFile.writepy", "ntpath.splitext", "posixpath.splitext", "ntpath.split", "posixpath.join"], "zipfile.PyZipFile._get_codename": ["ntpath.isfile", "posixpath.split", "zipfile.PyZipFile._get_codename._compile", "<builtin>.ValueError", "ntpath.split", "posixpath.isfile"], "py_compile.compile": ["py_compile._get_default_invalidation_mode", "sys.stderr.write", "posixpath.exists", "<builtin>.FileExistsError", "posixpath.islink", "ntpath.islink", "py_compile.PyCompileError.__init__", "ntpath.dirname", "ntpath.isfile", "os.makedirs", "posixpath.dirname", "ntpath.exists", "posixpath.isfile"], "zipfile._parents": ["itertools.islice", "zipfile._ancestry"], "zipfile._ancestry": ["posixpath.split"], "zipfile._difference": ["<builtin>.set", "itertools.filterfalse"], "itertools.filterfalse": [], "zipfile.CompleteDirs": [], "zipfile.CompleteDirs._implied_dirs": ["<builtin>.map", "zipfile._difference", "itertools.chain.from_iterable"], "zipfile.CompleteDirs._name_set": ["<builtin>.set", "zipfile.CompleteDirs.namelist"], "zipfile.CompleteDirs.resolve_dir": ["zipfile.CompleteDirs._name_set"], "zipfile.CompleteDirs.make": ["zipfile.ZipFile.__init__", "<builtin>.vars", "<builtin>.isinstance"], "zipfile.FastLookup": [], "zipfile.FastLookup.namelist": ["contextlib.suppress.__init__", "<builtin>.super"], "zipfile.FastLookup._name_set": ["contextlib.suppress.__init__", "<builtin>.super"], "zipfile.Path": [], "zipfile.Path.__init__": ["zipfile.CompleteDirs.make"], "zipfile.Path.open": [], "zipfile.Path.name": ["posixpath.basename"], "zipfile.Path.read_text": ["io.TextIOWrapper", "zipfile.Path.open"], "zipfile.Path.read_bytes": ["zipfile.Path.open"], "zipfile.Path._is_child": ["posixpath.dirname"], "zipfile.Path._next": ["zipfile.Path.__init__"], "zipfile.Path.is_dir": [], "zipfile.Path.is_file": ["zipfile.Path.is_dir"], "zipfile.Path.exists": [], "zipfile.Path.iterdir": ["<builtin>.map", "zipfile.Path.is_dir", "<builtin>.ValueError", "<builtin>.filter"], "zipfile.Path.__str__": ["posixpath.join"], "zipfile.Path.__repr__": [], "zipfile.Path.joinpath": ["zipfile.Path._next", "posixpath.join"], "zipfile.Path.parent": ["zipfile.Path._next", "posixpath.dirname"], "zipfile.main.addToZip": ["ntpath.isdir", "<builtin>.sorted", "ntpath.isfile", "posixpath.isdir", "ntpath.join", "posixpath.join", "zipfile.main.addToZip", "posixpath.isfile"], "importlib.util.source_hash": ["_imp.source_hash"], "_imp.source_hash": [], "importlib.util.resolve_name": ["_bootstrap._resolve_name", "<builtin>.ValueError", "<builtin>.repr"], "_bootstrap._resolve_name": [], "importlib.util._find_spec_from_path": ["_bootstrap._find_spec", "<builtin>.ValueError"], "_bootstrap._find_spec": [], "importlib.util.find_spec": ["<builtin>.__import__", "importlib.util.resolve_name", "<builtin>.ModuleNotFoundError", "_bootstrap._find_spec", "<builtin>.ValueError"], "<builtin>.ModuleNotFoundError": [], "importlib.util._module_to_load": ["sys.modules.get", "<builtin>.type"], "importlib.util.set_package": ["_functools.partial", "functools.wraps"], "importlib.util.set_package.set_package_wrapper": ["<builtin>.hasattr", "<builtin>.getattr", "warnings.warn"], "importlib.util.set_loader": ["_functools.partial", "functools.wraps"], "importlib.util.set_loader.set_loader_wrapper": ["<builtin>.getattr", "warnings.warn"], "importlib.util.module_for_loader": ["_functools.partial", "functools.wraps", "warnings.warn"], "importlib.util.module_for_loader.module_for_loader_wrapper": ["importlib.util._module_to_load"], "importlib.util._LazyModule": [], "importlib.util._LazyModule.__getattribute__": ["<builtin>.id", "<builtin>.ValueError", "<builtin>.getattr"], "importlib.util._LazyModule.__delattr__": ["<builtin>.delattr", "importlib.util._LazyModule.__getattribute__"], "importlib.util.LazyLoader": [], "importlib.util.LazyLoader.__check_eager_loader": ["<builtin>.TypeError", "<builtin>.hasattr"], "importlib.util.LazyLoader.factory": ["importlib.util.LazyLoader.__check_eager_loader"], "importlib.util.LazyLoader.factory.<lambda1>": ["importlib.util.LazyLoader.__init__"], "importlib.util.LazyLoader.__init__": ["importlib.util.LazyLoader.__check_eager_loader"], "importlib.util.LazyLoader.create_module": [], "importlib.util.LazyLoader.exec_module": [], "py_compile.PyCompileError": [], "py_compile.PyCompileError.__init__": ["traceback.format_exception_only"], "py_compile.PyCompileError.__str__": [], "py_compile.PycInvalidationMode": [], "py_compile._get_default_invalidation_mode": [], "<builtin>.FileExistsError": [], "py_compile.main": ["sys.stderr.write", "py_compile.compile", "sys.stdin.readline"], "importlib._bootstrap_external._make_relax_case": [], "importlib._bootstrap_external._make_relax_case._relax_case": [], "importlib._bootstrap_external._pack_uint32": ["<builtin>.int"], "importlib._bootstrap_external._unpack_uint32": ["<builtin>.len"], "importlib._bootstrap_external._unpack_uint16": ["<builtin>.len"], "importlib._bootstrap_external._path_join": [], "importlib._bootstrap_external._path_split": ["<builtin>.reversed", "<builtin>.len"], "importlib._bootstrap_external._path_stat": [], "importlib._bootstrap_external._path_is_mode_type": ["importlib._bootstrap_external._path_stat"], "importlib._bootstrap_external._path_isfile": ["importlib._bootstrap_external._path_is_mode_type"], "importlib._bootstrap_external._path_isdir": ["importlib._bootstrap_external._path_is_mode_type"], "importlib._bootstrap_external._path_isabs": [], "importlib._bootstrap_external._write_atomic": ["<builtin>.id"], "importlib._bootstrap_external.cache_from_source": ["<builtin>.TypeError", "<builtin>.NotImplementedError", "importlib._bootstrap_external._path_split", "<builtin>.ValueError", "importlib._bootstrap_external._path_isabs", "<builtin>.str", "importlib._bootstrap_external._path_join"], "importlib._bootstrap_external.source_from_cache": ["<builtin>.len", "<builtin>.NotImplementedError", "<builtin>.ValueError", "importlib._bootstrap_external._path_split", "importlib._bootstrap_external._path_join"], "importlib._bootstrap_external._get_sourcefile": ["importlib._bootstrap_external._path_isfile", "importlib._bootstrap_external.source_from_cache", "<builtin>.len"], "importlib._bootstrap_external._get_cached": ["<builtin>.tuple", "importlib._bootstrap_external.cache_from_source"], "importlib._bootstrap_external._calc_mode": ["importlib._bootstrap_external._path_stat"], "importlib._bootstrap_external._check_name": ["importlib._bootstrap_external._check_name._wrap"], "importlib._bootstrap_external._check_name._check_name_wrapper": ["importlib._bootstrap_external.ExtensionFileLoader.get_filename", "importlib._bootstrap_external.FileLoader.get_filename", "importlib._bootstrap_external.FileLoader.get_resource_reader", "<builtin>.ImportError", "importlib._bootstrap_external.FileLoader.load_module"], "importlib._bootstrap_external.ExtensionFileLoader.get_filename": [], "importlib._bootstrap_external.FileLoader.get_filename": [], "importlib._bootstrap_external.FileLoader.get_resource_reader": [], "importlib._bootstrap_external.FileLoader.load_module": ["<builtin>.super"], "importlib._bootstrap_external._check_name._wrap": ["<builtin>.setattr", "<builtin>.getattr", "<builtin>.hasattr"], "importlib._bootstrap_external._find_module_shim": ["<builtin>.len"], "importlib._bootstrap_external._classify_pyc": ["<builtin>.EOFError", "<builtin>.ImportError", "importlib._bootstrap_external._unpack_uint32", "<builtin>.len"], "importlib._bootstrap_external._validate_timestamp_pyc": ["<builtin>.ImportError", "importlib._bootstrap_external._unpack_uint32"], "importlib._bootstrap_external._validate_hash_pyc": ["<builtin>.ImportError"], "importlib._bootstrap_external._compile_bytecode": ["<builtin>.ImportError", "<builtin>.isinstance"], "importlib._bootstrap_external._code_to_timestamp_pyc": ["<builtin>.bytearray", "importlib._bootstrap_external._pack_uint32"], "importlib._bootstrap_external._code_to_hash_pyc": ["<builtin>.bytearray", "importlib._bootstrap_external._pack_uint32", "<builtin>.len"], "importlib._bootstrap_external.spec_from_file_location": ["<builtin>.tuple", "importlib._bootstrap_external.FileLoader.get_filename", "importlib._bootstrap_external._get_supported_file_loaders", "importlib._bootstrap_external._path_split", "importlib._bootstrap_external._LoaderBasics.is_package", "<builtin>.hasattr"], "importlib._bootstrap_external._get_supported_file_loaders": [], "importlib._bootstrap_external._LoaderBasics.is_package": ["importlib._bootstrap_external._path_split"], "importlib._bootstrap_external.WindowsRegistryFinder": [], "importlib._bootstrap_external.WindowsRegistryFinder._open_registry": [], "importlib._bootstrap_external.WindowsRegistryFinder._search_registry": ["importlib._bootstrap_external.WindowsRegistryFinder._open_registry"], "importlib._bootstrap_external.WindowsRegistryFinder.find_spec": ["<builtin>.tuple", "importlib._bootstrap_external._path_stat", "importlib._bootstrap_external._get_supported_file_loaders", "importlib._bootstrap_external.WindowsRegistryFinder._search_registry"], "importlib._bootstrap_external.WindowsRegistryFinder.find_module": ["importlib._bootstrap_external.WindowsRegistryFinder.find_spec"], "importlib._bootstrap_external._LoaderBasics": [], "importlib._bootstrap_external._LoaderBasics.create_module": [], "importlib._bootstrap_external._LoaderBasics.exec_module": ["importlib._bootstrap_external.SourcelessFileLoader.get_code", "<builtin>.ImportError"], "importlib._bootstrap_external.SourcelessFileLoader.get_code": ["importlib._bootstrap_external.FileLoader.get_filename", "importlib._bootstrap_external._compile_bytecode", "importlib._bootstrap_external._classify_pyc", "<builtin>.memoryview", "importlib._bootstrap_external.FileLoader.get_data"], "importlib._bootstrap_external._LoaderBasics.load_module": [], "importlib._bootstrap_external.SourceLoader": [], "importlib._bootstrap_external.SourceLoader.path_mtime": [], "importlib._bootstrap_external.SourceLoader.path_stats": ["importlib._bootstrap_external.SourceLoader.path_mtime"], "importlib._bootstrap_external.SourceLoader._cache_bytecode": ["importlib._bootstrap_external.SourceLoader.set_data", "importlib._bootstrap_external.SourceFileLoader.set_data"], "importlib._bootstrap_external.SourceLoader.set_data": [], "importlib._bootstrap_external.SourceFileLoader.set_data": ["importlib._bootstrap_external._write_atomic", "importlib._bootstrap_external._path_isdir", "importlib._bootstrap_external._path_split", "<builtin>.reversed", "importlib._bootstrap_external._path_join"], "importlib._bootstrap_external.SourceLoader.get_source": ["importlib._bootstrap_external.decode_source", "<builtin>.ImportError"], "importlib._bootstrap_external.SourceLoader.source_to_code": [], "importlib._bootstrap_external.SourceLoader.get_code": ["importlib._bootstrap_external.SourceLoader._cache_bytecode", "importlib._bootstrap_external._validate_timestamp_pyc", "importlib._bootstrap_external._compile_bytecode", "importlib._bootstrap_external._validate_hash_pyc", "importlib._bootstrap_external._code_to_timestamp_pyc", "importlib._bootstrap_external.SourceLoader.source_to_code", "importlib._bootstrap_external.SourceFileLoader._cache_bytecode", "importlib._bootstrap_external._classify_pyc", "importlib._bootstrap_external.SourceLoader.path_stats", "importlib._bootstrap_external._code_to_hash_pyc", "<builtin>.len", "<builtin>.memoryview", "<builtin>.int", "importlib._bootstrap_external.SourceFileLoader.path_stats", "importlib._bootstrap_external.cache_from_source"], "importlib._bootstrap_external.SourceFileLoader.path_stats": ["importlib._bootstrap_external._path_stat"], "importlib._bootstrap_external.SourceFileLoader._cache_bytecode": ["importlib._bootstrap_external.SourceFileLoader.set_data", "importlib._bootstrap_external._calc_mode"], "importlib._bootstrap_external.FileLoader": ["importlib._bootstrap_external._check_name"], "importlib._bootstrap_external.FileLoader.__init__": [], "importlib._bootstrap_external.FileLoader.__eq__": [], "importlib._bootstrap_external.FileLoader.__hash__": ["<builtin>.hash"], "importlib._bootstrap_external.FileLoader.get_data": ["<builtin>.str", "<builtin>.isinstance"], "importlib._bootstrap_external.FileLoader.open_resource": ["importlib._bootstrap_external._path_join", "importlib._bootstrap_external._path_split"], "importlib._bootstrap_external.FileLoader.resource_path": ["importlib._bootstrap_external.FileLoader.is_resource", "importlib._bootstrap_external._path_join", "importlib._bootstrap_external._path_split"], "importlib._bootstrap_external.FileLoader.is_resource": ["importlib._bootstrap_external._path_isfile", "importlib._bootstrap_external._path_join", "importlib._bootstrap_external._path_split"], "importlib._bootstrap_external.FileLoader.contents": ["<builtin>.iter", "importlib._bootstrap_external._path_split"], "importlib._bootstrap_external.SourceFileLoader": [], "importlib._bootstrap_external.SourcelessFileLoader": [], "importlib._bootstrap_external.SourcelessFileLoader.get_source": [], "importlib._bootstrap_external.ExtensionFileLoader": ["importlib._bootstrap_external._check_name"], "importlib._bootstrap_external.ExtensionFileLoader.__init__": [], "importlib._bootstrap_external.ExtensionFileLoader.__eq__": [], "importlib._bootstrap_external.ExtensionFileLoader.__hash__": ["<builtin>.hash"], "importlib._bootstrap_external.ExtensionFileLoader.create_module": [], "importlib._bootstrap_external.ExtensionFileLoader.exec_module": [], "importlib._bootstrap_external.ExtensionFileLoader.is_package": ["<builtin>.any", "importlib._bootstrap_external._path_split"], "importlib._bootstrap_external.ExtensionFileLoader.get_code": [], "importlib._bootstrap_external.ExtensionFileLoader.get_source": [], "importlib._bootstrap_external._NamespacePath": [], "importlib._bootstrap_external._NamespacePath.__init__": ["<builtin>.tuple", "importlib._bootstrap_external._NamespacePath._get_parent_path"], "importlib._bootstrap_external._NamespacePath._get_parent_path": ["importlib._bootstrap_external._NamespacePath._find_parent_path_names", "<builtin>.getattr"], "importlib._bootstrap_external._NamespacePath._find_parent_path_names": [], "importlib._bootstrap_external._NamespacePath._recalculate": ["<builtin>.tuple", "importlib._bootstrap_external._NamespacePath._get_parent_path", "importlib._bootstrap_external.PathFinder._get_spec"], "importlib._bootstrap_external.PathFinder._get_spec": ["<builtin>.ImportError", "importlib._bootstrap_external.PathFinder._path_importer_cache", "<builtin>.isinstance", "importlib._bootstrap_external.PathFinder._legacy_get_spec", "<builtin>.hasattr"], "importlib._bootstrap_external._NamespacePath.__iter__": ["<builtin>.iter", "importlib._bootstrap_external._NamespacePath._recalculate"], "importlib._bootstrap_external._NamespacePath.__getitem__": ["importlib._bootstrap_external._NamespacePath._recalculate"], "importlib._bootstrap_external._NamespacePath.__setitem__": [], "importlib._bootstrap_external._NamespacePath.__len__": ["importlib._bootstrap_external._NamespacePath._recalculate", "<builtin>.len"], "importlib._bootstrap_external._NamespacePath.__repr__": [], "importlib._bootstrap_external._NamespacePath.__contains__": ["importlib._bootstrap_external._NamespacePath._recalculate"], "importlib._bootstrap_external._NamespacePath.append": [], "importlib._bootstrap_external._NamespaceLoader": [], "importlib._bootstrap_external._NamespaceLoader.__init__": ["importlib._bootstrap_external._NamespacePath.__init__"], "importlib._bootstrap_external._NamespaceLoader.module_repr": [], "importlib._bootstrap_external._NamespaceLoader.is_package": [], "importlib._bootstrap_external._NamespaceLoader.get_source": [], "importlib._bootstrap_external._NamespaceLoader.get_code": ["<builtin>.compile"], "importlib._bootstrap_external._NamespaceLoader.create_module": [], "importlib._bootstrap_external._NamespaceLoader.exec_module": [], "importlib._bootstrap_external._NamespaceLoader.load_module": [], "importlib._bootstrap_external.PathFinder": [], "importlib._bootstrap_external.PathFinder.invalidate_caches": ["<builtin>.list", "<builtin>.hasattr"], "importlib._bootstrap_external.PathFinder._path_hooks": [], "importlib._bootstrap_external.PathFinder._path_importer_cache": ["importlib._bootstrap_external.PathFinder._path_hooks"], "importlib._bootstrap_external.PathFinder._legacy_get_spec": ["<builtin>.hasattr"], "importlib._bootstrap_external.PathFinder.find_spec": ["importlib._bootstrap_external._NamespacePath.__init__", "importlib._bootstrap_external.PathFinder._get_spec"], "importlib._bootstrap_external.PathFinder.find_module": ["importlib._bootstrap_external.PathFinder.find_spec"], "importlib.metadata.MetadataPathFinder.find_distributions": ["<builtin>.map", "importlib.metadata.MetadataPathFinder._search_paths"], "importlib._bootstrap_external.FileFinder": [], "importlib._bootstrap_external.FileFinder.__init__": ["<builtin>.set"], "importlib._bootstrap_external.FileFinder.invalidate_caches": [], "importlib._bootstrap_external.FileFinder.find_loader": ["importlib._bootstrap_external.FileFinder.find_spec"], "importlib._bootstrap_external.FileFinder.find_spec": ["importlib._bootstrap_external.FileFinder._fill_cache", "importlib._bootstrap_external._path_isfile", "importlib._bootstrap_external._path_stat", "importlib._bootstrap_external.FileFinder._get_spec", "importlib._bootstrap_external._path_join"], "importlib._bootstrap_external.FileFinder._get_spec": ["importlib._bootstrap_external.spec_from_file_location"], "importlib._bootstrap_external.FileFinder._fill_cache": ["<builtin>.set"], "importlib._bootstrap_external.FileFinder.path_hook": [], "importlib._bootstrap_external.FileFinder.path_hook.path_hook_for_FileFinder": ["importlib._bootstrap_external._path_isdir", "<builtin>.ImportError", "importlib._bootstrap_external.FileFinder.__init__"], "importlib._bootstrap_external.FileFinder.__repr__": [], "importlib._bootstrap_external._fix_up_module": ["importlib._bootstrap_external.spec_from_file_location", "importlib._bootstrap_external.FileLoader.__init__"], "importlib._bootstrap_external._setup": ["<builtin>.setattr", "<builtin>.all", "importlib._bootstrap_external._make_relax_case", "<builtin>.len"], "importlib._bootstrap_external._install": ["importlib._bootstrap_external._setup", "importlib._bootstrap_external._get_supported_file_loaders"], "importlib.metadata.PackageNotFoundError": [], "importlib.metadata.EntryPoint": ["re.compile"], "importlib.metadata.EntryPoint.load": ["functools.reduce", "importlib.import_module", "<builtin>.filter"], "importlib.import_module": ["_frozen_importlib._gcd_import", "<builtin>.TypeError", "_bootstrap._gcd_import"], "importlib.metadata.EntryPoint.extras": ["re.finditer", "<builtin>.list"], "importlib.metadata.EntryPoint._from_config": ["configparser.RawConfigParser.sections", "configparser.RawConfigParser.items"], "configparser.RawConfigParser.sections": ["<builtin>.list"], "configparser.RawConfigParser.items": ["configparser.RawConfigParser.items.<lambda1>", "configparser.NoSectionError.__init__", "<builtin>.super", "<builtin>.list", "configparser.RawConfigParser.optionxform", "configparser.RawConfigParser.items.<lambda2>"], "importlib.metadata.EntryPoint._from_text": ["configparser.RawConfigParser.__init__", "configparser.RawConfigParser.readfp", "io.StringIO", "importlib.metadata.EntryPoint._from_config", "configparser.RawConfigParser.read_string"], "configparser.RawConfigParser.__init__": ["<builtin>.tuple", "re.escape", "configparser.RawConfigParser._read_defaults", "configparser.ConverterMapping.__init__", "configparser.ConfigParser._read_defaults", "configparser.SectionProxy.__init__", "re.compile"], "configparser.RawConfigParser.read_string": ["configparser.RawConfigParser.read_file", "io.StringIO"], "io.StringIO": [], "configparser.RawConfigParser.readfp": ["configparser.RawConfigParser.read_file", "warnings.warn"], "importlib.metadata.EntryPoint.__iter__": ["<builtin>.iter"], "importlib.metadata.EntryPoint.__reduce__": [], "importlib.metadata.PackagePath": [], "importlib.metadata.PackagePath.read_text": ["importlib.metadata.PackagePath.locate"], "importlib.metadata.PackagePath.locate": ["importlib.metadata.Distribution.locate_file", "importlib.metadata.PathDistribution.locate_file"], "importlib.metadata.PackagePath.read_binary": ["importlib.metadata.PackagePath.locate"], "importlib.metadata.Distribution.locate_file": [], "importlib.metadata.PathDistribution.locate_file": [], "importlib.metadata.FileHash": [], "importlib.metadata.FileHash.__init__": [], "importlib.metadata.FileHash.__repr__": [], "importlib.metadata.Distribution": ["abc.abstractmethod"], "importlib.metadata.Distribution.read_text": [], "importlib.metadata.Distribution.from_name": ["importlib.metadata.DistributionFinder.Context.__init__", "importlib.metadata.Distribution._discover_resolvers", "<builtin>.next"], "importlib.metadata.Distribution._discover_resolvers": ["<builtin>.filter", "<builtin>.getattr"], "importlib.metadata.DistributionFinder.Context.__init__": ["<builtin>.vars"], "importlib.metadata.Distribution.discover": ["importlib.metadata.DistributionFinder.Context.__init__", "importlib.metadata.Distribution._discover_resolvers", "<builtin>.ValueError", "itertools.chain.from_iterable"], "importlib.metadata.Distribution.at": ["importlib.metadata.PathDistribution.__init__"], "importlib.metadata.PathDistribution.__init__": [], "importlib.metadata.Distribution.metadata": ["email.message_from_string", "importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text"], "importlib.metadata.PathDistribution.read_text": ["contextlib.suppress.__init__", "pathlib.PurePath.joinpath"], "importlib.metadata.Distribution.version": [], "importlib.metadata.Distribution.entry_points": ["importlib.metadata.EntryPoint._from_text", "importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text"], "importlib.metadata.Distribution.files": ["importlib.metadata.Distribution._read_files_egginfo", "itertools.starmap", "importlib.metadata.Distribution._read_files_distinfo", "<builtin>.list"], "importlib.metadata.Distribution._read_files_distinfo": ["importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text"], "importlib.metadata.Distribution._read_files_egginfo": ["<builtin>.map", "importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text"], "importlib.metadata.Distribution.files.make_file": ["importlib.metadata.FileHash.__init__", "<builtin>.int"], "importlib.metadata.Distribution.requires": ["<builtin>.list", "importlib.metadata.Distribution._read_dist_info_reqs", "importlib.metadata.Distribution._read_egg_info_reqs"], "importlib.metadata.Distribution._read_dist_info_reqs": [], "importlib.metadata.Distribution._read_egg_info_reqs": ["importlib.metadata.Distribution._deps_from_requires_text", "importlib.metadata.PathDistribution.read_text", "importlib.metadata.Distribution.read_text"], "importlib.metadata.Distribution._deps_from_requires_text": ["operator.itemgetter.__init__", "<builtin>.map", "importlib.metadata.Distribution._read_sections", "itertools.groupby", "<builtin>.list", "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs"], "importlib.metadata.Distribution._read_sections": ["re.match", "<builtin>.locals", "<builtin>.filter"], "itertools.groupby": [], "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs": ["importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition"], "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.make_condition": [], "importlib.metadata.Distribution._convert_egg_info_reqs_to_simple_reqs.parse_condition": ["<builtin>.list", "<builtin>.filter"], "importlib.metadata.DistributionFinder": ["importlib.metadata.DistributionFinder.Context", "abc.abstractmethod"], "importlib.metadata.DistributionFinder.Context": [], "importlib.metadata.DistributionFinder.Context.path": ["<builtin>.vars"], "importlib.metadata.DistributionFinder.find_distributions": [], "importlib.metadata.FastPath": [], "importlib.metadata.FastPath.__init__": ["ntpath.basename", "posixpath.basename"], "importlib.metadata.FastPath.joinpath": [], "importlib.metadata.FastPath.children": ["contextlib.suppress.__init__", "importlib.metadata.FastPath.zip_children"], "importlib.metadata.FastPath.zip_children": ["posixpath.split", "zipfile.Path.__init__"], "importlib.metadata.FastPath.is_egg": [], "importlib.metadata.FastPath.search": ["importlib.metadata.FastPath.children", "zipfile.Path.joinpath", "importlib.metadata.FastPath.is_egg"], "importlib.metadata.Prepared": [], "importlib.metadata.Prepared.__init__": [], "importlib.metadata.MetadataPathFinder": [], "importlib.metadata.MetadataPathFinder._search_paths": ["<builtin>.map", "importlib.metadata.Prepared.__init__", "itertools.chain.from_iterable"], "importlib.metadata.PathDistribution": [], "pathlib.PurePath.joinpath": ["pathlib.PurePath._make_child"], "importlib.metadata.distribution": ["importlib.metadata.Distribution.from_name"], "importlib.metadata.distributions": ["importlib.metadata.Distribution.discover"], "importlib.metadata.metadata": ["importlib.metadata.Distribution.from_name"], "importlib.metadata.version": ["importlib.metadata.distribution"], "importlib.metadata.entry_points": ["<builtin>.tuple", "<builtin>.sorted", "importlib.metadata.distributions", "itertools.chain.from_iterable", "itertools.groupby", "operator.attrgetter.__init__"], "importlib.metadata.files": ["importlib.metadata.distribution"], "importlib.metadata.requires": ["importlib.metadata.distribution"], "email.parser.Parser.__init__": [], "email.parser.Parser.parsestr": ["_io.StringIO", "email.parser.Parser.parse"], "email.parser.BytesParser.__init__": ["email.parser.Parser.__init__"], "email.parser.BytesParser.parsebytes": ["email.parser.Parser.parsestr"], "email.parser.Parser.parse": ["email.feedparser.FeedParser.feed", "email.feedparser.FeedParser.close", "email.feedparser.FeedParser._set_headersonly", "email.feedparser.FeedParser.__init__", "bz2.BZ2File.read", "gzip.GzipFile.read", "lzma.LZMAFile.read"], "email.parser.BytesParser.parse": ["_io._BufferedIOBase.detach", "email.parser.Parser.parse", "_io.TextIOWrapper"], "email.parser.Parser": [], "email.feedparser.FeedParser._set_headersonly": [], "email.feedparser.FeedParser.feed": ["email.feedparser.BufferedSubFile.push", "email.feedparser.FeedParser._call_parse"], "email.feedparser.FeedParser.close": ["email.errors.MessageDefect.__init__", "email.feedparser.BufferedSubFile.close", "email.feedparser.FeedParser._pop_message", "email.feedparser.FeedParser._call_parse", "email._policybase.Policy.handle_defect"], "email.parser.HeaderParser": [], "email.parser.HeaderParser.parse": ["email.parser.Parser.parse"], "email.parser.HeaderParser.parsestr": ["email.parser.Parser.parsestr"], "email.parser.BytesParser": [], "_io._BufferedIOBase.detach": [], "email.parser.BytesHeaderParser": [], "email.parser.BytesHeaderParser.parse": ["email.parser.BytesParser.parse"], "email.parser.BytesHeaderParser.parsebytes": ["email.parser.BytesParser.parsebytes"], "email._policybase._PolicyBase": [], "email._policybase._PolicyBase.__init__": ["<builtin>.super", "<builtin>.TypeError", "<builtin>.hasattr"], "email._policybase._PolicyBase.__repr__": [], "email._policybase._PolicyBase.clone": ["<builtin>.TypeError", "<builtin>.hasattr"], "email._policybase._PolicyBase.__setattr__": ["<builtin>.AttributeError", "<builtin>.hasattr"], "email._policybase._PolicyBase.__add__": ["email._policybase._PolicyBase.clone"], "email._policybase._append_doc": [], "email._policybase._extend_docstrings": ["email._policybase._append_doc", "<builtin>.getattr"], "email._policybase.Policy": ["abc.abstractmethod"], "email._policybase.Policy.handle_defect": ["email._policybase.Policy.register_defect", "email.errors.MessageDefect.__init__", "email.errors.HeaderDefect.__init__"], "email.errors.MessageDefect.__init__": ["<builtin>.super"], "email.errors.HeaderDefect.__init__": ["<builtin>.super"], "email._policybase.Policy.register_defect": [], "email._policybase.Policy.header_max_count": [], "email._policybase.Policy.header_source_parse": [], "email._policybase.Policy.header_store_parse": [], "email._policybase.Policy.header_fetch_parse": [], "email._policybase.Policy.fold": [], "email._policybase.Policy.fold_binary": [], "email._policybase.Compat32": [], "email._policybase.Compat32._sanitize_header": ["email.header.Header.__init__", "email.utils._has_surrogates", "<builtin>.isinstance"], "email.utils._has_surrogates": [], "email.header.Header.__init__": ["email.header.Header.append", "email.charset.Charset.__init__", "<builtin>.isinstance", "<builtin>.len"], "email._policybase.Compat32.header_source_parse": [], "email._policybase.Compat32.header_store_parse": [], "email._policybase.Compat32.header_fetch_parse": ["email._policybase.Compat32._sanitize_header"], "email._policybase.Compat32.fold": ["email._policybase.Compat32._fold"], "email._policybase.Compat32._fold": ["email.header.Header.__init__", "email.header.Header.encode", "email.utils._has_surrogates", "<builtin>.isinstance"], "email._policybase.Compat32.fold_binary": ["email._policybase.Compat32._fold"], "email.header.Header.encode": ["email.header._ValueFormatter.__init__", "email.header.Header._nonctext", "email.header._ValueFormatter.add_transition", "<builtin>.len", "email.header._ValueFormatter._str", "email.header._ValueFormatter.feed", "email.header._ValueFormatter.newline", "email.header.Header._normalize"], "email.utils._sanitize": [], "email.utils.formataddr": ["email.charset.Charset.__init__", "<builtin>.isinstance", "email.charset.Charset.header_encode"], "email.charset.Charset.__init__": ["<builtin>.str", "<builtin>.isinstance"], "email.charset.Charset.header_encode": ["email.charset._encode", "email.charset.Charset._get_encoder"], "email.utils.getaddresses": ["email._parseaddr.AddressList.__init__"], "email._parseaddr.AddressList.__init__": ["email._parseaddr.AddrlistClass.__init__", "email._parseaddr.AddrlistClass.getaddrlist"], "email.utils._format_timetuple_and_zone": [], "email.utils.formatdate": ["time.time", "email.utils.format_datetime"], "email.utils.format_datetime": ["email.utils._format_timetuple_and_zone", "<builtin>.ValueError"], "email.utils.make_msgid": ["time.time", "<builtin>.int"], "email.utils.parsedate_to_datetime": ["email._parseaddr._parsedate_tz"], "email._parseaddr._parsedate_tz": ["<builtin>.int", "<builtin>.len"], "email.utils.parseaddr": ["email._parseaddr.AddressList.__init__"], "email.utils.unquote": ["<builtin>.len"], "email.utils.decode_rfc2231": ["<builtin>.len"], "email.utils.encode_rfc2231": [], "email.utils.decode_params": ["email.utils.unquote", "email._parseaddr.quote", "<builtin>.int", "email.utils.decode_rfc2231"], "email._parseaddr.quote": [], "email.utils.collapse_rfc2231_value": ["email.utils.unquote", "<builtin>.bytes", "<builtin>.isinstance", "<builtin>.len", "<builtin>.str"], "email.utils.localtime": ["time.gmtime", "time.mktime", "time.localtime"], "time.mktime": [], "time.gmtime": [], "random.Random": [], "random.Random.__init__": ["random.Random.seed"], "random.Random.seed": ["<builtin>.map", "<builtin>.ord", "<builtin>.super", "<builtin>.isinstance", "<builtin>.len"], "random.Random.__init_subclass__": [], "random.Random.getstate": ["<builtin>.super"], "random.Random.setstate": ["<builtin>.tuple", "<builtin>.super", "<builtin>.ValueError"], "random.Random.__getstate__": ["random.Random.getstate"], "random.Random.__setstate__": ["random.Random.setstate"], "random.Random.__reduce__": ["random.Random.getstate"], "random.Random.randrange": ["random.Random._randbelow_with_getrandbits", "<builtin>.ValueError"], "random.Random._randbelow_with_getrandbits": [], "random.Random.randint": ["random.Random.randrange"], "random.Random._randbelow_without_getrandbits": ["_warnings.warn", "<builtin>.ValueError"], "random.Random.choice": ["random.Random._randbelow_with_getrandbits", "<builtin>.IndexError", "<builtin>.len"], "random.Random.shuffle": ["random.Random._randbelow_with_getrandbits", "<builtin>.reversed", "<builtin>.range", "<builtin>.len"], "random.Random.sample": ["<builtin>.tuple", "random.Random._randbelow_with_getrandbits", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "<builtin>.ValueError", "<builtin>.set", "<builtin>.range", "<builtin>.TypeError"], "random.Random.choices": ["itertools.repeat", "<builtin>.list", "<builtin>.len", "itertools.accumulate", "<builtin>.ValueError", "bisect.bisect_right", "<builtin>.TypeError"], "itertools.accumulate": [], "bisect.bisect_right": ["<builtin>.ValueError", "<builtin>.len"], "random.Random.uniform": [], "random.Random.triangular": [], "random.Random.normalvariate": [], "random.Random.lognormvariate": ["random.Random.normalvariate"], "random.Random.expovariate": [], "random.Random.vonmisesvariate": [], "random.Random.gammavariate": ["<builtin>.ValueError"], "random.Random.gauss": [], "random.Random.betavariate": ["random.Random.gammavariate"], "random.Random.paretovariate": [], "random.Random.weibullvariate": [], "random.SystemRandom": [], "random.SystemRandom.random": [], "random.SystemRandom.getrandbits": ["<builtin>.ValueError"], "random.SystemRandom.seed": [], "random.SystemRandom._notimplemented": ["<builtin>.NotImplementedError"], "random._test_generator": ["<builtin>.round", "time.perf_counter", "<builtin>.max", "random.Random.normalvariate", "random.Random.gammavariate", "<builtin>.print", "random.Random.gauss", "random.Random.lognormvariate", "random.Random.triangular", "<builtin>.min", "random.Random.vonmisesvariate", "random.Random.betavariate", "<builtin>.range"], "time.perf_counter": [], "random._test": ["random._test_generator"], "bisect.insort_right": ["bisect.bisect_right"], "bisect.insort_left": ["bisect.bisect_left"], "bisect.bisect_left": ["<builtin>.ValueError", "<builtin>.len"], "hashlib.__get_openssl_constructor": ["hashlib.__get_builtin_constructor", "<builtin>.getattr"], "hashlib.__py_new": ["hashlib.__get_builtin_constructor"], "hashlib.__hash_new": ["hashlib.__get_builtin_constructor"], "hashlib.pbkdf2_hmac": ["<builtin>.bytes", "hashlib.__hash_new", "hashlib.__py_new", "<builtin>.isinstance", "hashlib.pbkdf2_hmac.prf", "<builtin>.len", "<builtin>.ValueError", "<builtin>.memoryview", "<builtin>.range", "<builtin>.TypeError", "<builtin>.getattr"], "hashlib.pbkdf2_hmac.prf": [], "logging.exception": ["logging.error"], "logging.getLevelName": [], "logging.addLevelName": ["logging._releaseLock", "logging._acquireLock"], "logging._acquireLock": [], "logging._releaseLock": [], "logging.<lambda1>": ["sys._getframe"], "logging.currentframe": ["sys.exc_info"], "logging._checkLevel": ["<builtin>.str", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "logging._register_at_fork_reinit_lock": ["_weakrefset.WeakSet.add", "logging._releaseLock", "logging._acquireLock"], "logging._after_at_fork_child_reinit_locks": ["<builtin>.print", "_weakrefset.WeakSet.__iter__", "logging._releaseLock"], "logging.LogRecord": [], "logging.LogRecord.__init__": ["ntpath.basename", "posixpath.basename", "sys.modules.get", "<builtin>.isinstance", "threading.current_thread", "<builtin>.len", "ntpath.splitext", "posixpath.splitext", "time.time", "<builtin>.int", "logging.getLevelName", "<builtin>.hasattr"], "logging.LogRecord.__repr__": [], "logging.LogRecord.getMessage": ["<builtin>.str"], "logging.setLogRecordFactory": [], "logging.getLogRecordFactory": [], "logging.makeLogRecord": ["logging.LogRecord.__init__"], "logging.PercentStyle": ["re.compile"], "logging.PercentStyle.__init__": [], "logging.PercentStyle.usesTime": [], "logging.PercentStyle.validate": ["<builtin>.ValueError"], "logging.PercentStyle._format": [], "logging.PercentStyle.format": ["logging.PercentStyle._format", "<builtin>.ValueError"], "logging.StrFormatStyle": ["re.compile"], "logging.StrFormatStyle._format": [], "logging.StrFormatStyle.validate": ["<builtin>.set", "string.Formatter.parse", "<builtin>.ValueError"], "logging.StringTemplateStyle": [], "logging.StringTemplateStyle.__init__": ["string.Template.__init__"], "logging.StringTemplateStyle.usesTime": [], "logging.StringTemplateStyle.validate": ["<builtin>.set", "<builtin>.ValueError"], "logging.StringTemplateStyle._format": ["string.Template.substitute"], "logging.Formatter": [], "logging.Formatter.__init__": ["<builtin>.ValueError"], "logging.Formatter.formatTime": ["time.strftime", "time.localtime"], "time.strftime": [], "logging.Formatter.formatException": ["traceback.print_exception", "io.StringIO"], "logging.Formatter.usesTime": [], "logging.Formatter.formatMessage": [], "logging.Formatter.formatStack": [], "logging.Formatter.format": ["logging.Formatter.usesTime", "logging.Formatter.formatException", "logging.Formatter.formatTime", "logging.Formatter.formatMessage", "logging.Formatter.formatStack"], "logging.BufferingFormatter": [], "logging.BufferingFormatter.__init__": [], "logging.BufferingFormatter.formatHeader": [], "logging.BufferingFormatter.formatFooter": [], "logging.BufferingFormatter.format": ["logging.BufferingFormatter.formatFooter", "logging.Formatter.format", "logging.BufferingFormatter.formatHeader", "<builtin>.len"], "logging.Filter": [], "logging.Filter.__init__": ["<builtin>.len"], "logging.Filter.filter": [], "logging.Filterer": [], "logging.Filterer.__init__": [], "logging.Filterer.addFilter": [], "logging.Filterer.removeFilter": [], "logging.Filterer.filter": ["<builtin>.hasattr"], "logging._removeHandlerRef": ["logging._releaseLock", "logging._acquireLock"], "logging._addHandlerRef": ["logging._releaseLock", "weakref.ref", "logging._acquireLock"], "weakref.ref": [], "logging.Handler": ["<builtin>.property"], "logging.Handler.__init__": ["logging.Handler.createLock", "logging._checkLevel", "logging._addHandlerRef", "logging.Filterer.__init__", "logging.NullHandler.createLock"], "logging.Handler.createLock": ["logging._register_at_fork_reinit_lock", "threading.RLock"], "logging.NullHandler.createLock": [], "logging.Handler.get_name": [], "logging.Handler.set_name": ["logging._releaseLock", "logging._acquireLock"], "logging.Handler.acquire": [], "logging.Handler.release": [], "logging.Handler.setLevel": ["logging._checkLevel"], "logging.Handler.format": ["logging.Formatter.format"], "logging.Handler.emit": ["<builtin>.NotImplementedError"], "logging.Handler.handle": ["logging.Handler.acquire", "logging.FileHandler.emit", "logging.NullHandler.emit", "logging.Handler.emit", "logging.Handler.release", "logging.StreamHandler.emit", "logging.Filterer.filter", "unittest.case._CapturingHandler.emit"], "unittest.case._CapturingHandler.emit": ["logging.Handler.format"], "logging.FileHandler.emit": ["logging.StreamHandler.emit", "logging.FileHandler._open", "logging.FileHandler.emit"], "logging.StreamHandler.emit": ["logging.Handler.handleError", "sys.stderr.write", "logging.StreamHandler.flush", "logging.Handler.format"], "logging.NullHandler.emit": [], "logging.Handler.setFormatter": [], "logging.Handler.flush": [], "logging.Handler.close": ["logging._releaseLock", "logging._acquireLock"], "logging.Handler.handleError": ["traceback.print_stack", "sys.stderr.write", "ntpath.dirname", "traceback.print_exception", "posixpath.dirname", "sys.exc_info"], "logging.Handler.__repr__": ["logging.getLevelName"], "logging.StreamHandler": [], "logging.StreamHandler.__init__": ["logging.Handler.__init__"], "logging.StreamHandler.flush": ["logging.Handler.acquire", "sys.stderr.flush", "logging.Handler.release", "logging.StreamHandler.flush", "<builtin>.hasattr"], "logging.StreamHandler.setStream": ["logging.Handler.acquire", "logging.StreamHandler.flush", "logging.Handler.release"], "logging.StreamHandler.__repr__": ["<builtin>.str", "logging.getLevelName", "<builtin>.getattr"], "logging.FileHandler": [], "logging.FileHandler.__init__": ["logging.Handler.__init__", "posixpath.abspath", "logging.StreamHandler.__init__", "logging.FileHandler._open", "ntpath.abspath"], "logging.FileHandler._open": ["<builtin>.open"], "logging.FileHandler.close": ["logging.Handler.acquire", "logging.Handler.close", "logging.Handler.release", "logging.FileHandler.close", "logging.StreamHandler.flush", "<builtin>.hasattr"], "logging.FileHandler.__repr__": ["logging.getLevelName"], "logging._StderrHandler": [], "logging._StderrHandler.__init__": ["logging.Handler.__init__"], "logging._StderrHandler.stream": [], "logging.PlaceHolder": [], "logging.PlaceHolder.__init__": [], "logging.PlaceHolder.append": [], "logging.setLoggerClass": ["<builtin>.issubclass", "<builtin>.TypeError"], "logging.getLoggerClass": [], "logging.Manager": [], "logging.Manager.__init__": [], "logging.Manager.getLogger": ["<builtin>.isinstance", "logging.Manager._fixupChildren", "logging._acquireLock", "logging._releaseLock", "<builtin>.TypeError", "logging.Manager._fixupParents"], "logging.Manager._fixupChildren": ["<builtin>.len"], "logging.Manager._fixupParents": ["<builtin>.isinstance", "logging.PlaceHolder.__init__"], "logging.Manager.setLoggerClass": ["<builtin>.issubclass", "<builtin>.TypeError"], "logging.Manager.setLogRecordFactory": [], "logging.Manager._clear_cache": ["logging._releaseLock", "<builtin>.isinstance", "logging._acquireLock"], "logging.Logger": [], "logging.Logger.__init__": ["logging.Filterer.__init__", "logging._checkLevel"], "logging.Logger.setLevel": ["logging._checkLevel", "logging.Manager._clear_cache"], "logging.Logger.debug": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "logging.Logger.isEnabledFor": ["logging.Logger.getEffectiveLevel", "logging._releaseLock", "logging._acquireLock"], "logging.Logger._log": ["logging.Logger.findCaller", "<builtin>.isinstance", "logging.Logger.handle", "logging.Logger.makeRecord", "sys.exc_info", "<builtin>.type"], "logging.Logger.info": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "logging.Logger.warning": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "logging.Logger.warn": ["logging.Logger.warning", "warnings.warn"], "logging.Logger.error": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "logging.Logger.exception": ["logging.Logger.error"], "logging.Logger.critical": ["logging.Logger.isEnabledFor", "logging.Logger._log"], "logging.Logger.log": ["logging.Logger.isEnabledFor", "logging.Logger._log", "<builtin>.isinstance", "<builtin>.TypeError"], "logging.Logger.findCaller": ["traceback.print_stack", "ntpath.normcase", "io.StringIO", "posixpath.normcase", "logging.<lambda1>", "<builtin>.hasattr"], "logging.Logger.makeRecord": ["<builtin>.KeyError", "logging.LogRecord.__init__"], "logging.Logger.handle": ["logging.Filterer.filter", "logging.Logger.callHandlers"], "logging.Logger.callHandlers": ["logging.Handler.handle", "sys.stderr.write", "logging.NullHandler.handle"], "logging.Logger.addHandler": ["logging._releaseLock", "logging._acquireLock"], "logging.Logger.removeHandler": ["logging._releaseLock", "logging._acquireLock"], "logging.Logger.hasHandlers": [], "logging.NullHandler.handle": [], "logging.Logger.getEffectiveLevel": [], "logging.Logger.getChild": ["logging.Manager.getLogger"], "logging.Logger.__repr__": ["logging.Logger.getEffectiveLevel", "logging.getLevelName"], "logging.getLogger": ["logging.Manager.getLogger"], "logging.RootLogger": [], "logging.RootLogger.__init__": ["logging.Logger.__init__"], "logging.RootLogger.__reduce__": [], "logging.LoggerAdapter": [], "logging.LoggerAdapter.__init__": [], "logging.LoggerAdapter.process": [], "logging.LoggerAdapter.debug": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.log": ["logging.LoggerAdapter.process", "logging.LoggerAdapter.isEnabledFor"], "logging.LoggerAdapter.info": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.warning": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.warn": ["logging.LoggerAdapter.warning", "warnings.warn"], "logging.LoggerAdapter.error": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.exception": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.critical": ["logging.LoggerAdapter.log"], "logging.LoggerAdapter.isEnabledFor": [], "logging.LoggerAdapter.setLevel": [], "logging.LoggerAdapter.getEffectiveLevel": [], "logging.LoggerAdapter.hasHandlers": [], "logging.LoggerAdapter._log": [], "logging.LoggerAdapter.manager": [], "logging.LoggerAdapter.name": [], "logging.LoggerAdapter.__repr__": ["logging.getLevelName"], "logging.basicConfig": ["logging.Handler.close", "logging.StreamHandler.__init__", "logging.Handler.setFormatter", "logging.FileHandler.close", "<builtin>.len", "logging.Logger.removeHandler", "logging._acquireLock", "logging.FileHandler.__init__", "logging.Logger.addHandler", "logging.Formatter.__init__", "<builtin>.ValueError", "logging.Logger.setLevel", "logging._releaseLock"], "logging.critical": ["logging.basicConfig", "logging.Logger.critical", "<builtin>.len"], "logging.error": ["logging.basicConfig", "logging.Logger.error", "<builtin>.len"], "logging.warning": ["logging.basicConfig", "logging.Logger.warning", "<builtin>.len"], "logging.warn": ["logging.warning", "warnings.warn"], "logging.info": ["logging.basicConfig", "logging.Logger.info", "<builtin>.len"], "logging.debug": ["logging.basicConfig", "logging.Logger.debug", "<builtin>.len"], "logging.log": ["logging.basicConfig", "logging.Logger.log", "<builtin>.len"], "logging.disable": ["logging.Manager._clear_cache"], "logging.shutdown": ["<builtin>.reversed"], "logging.NullHandler": [], "logging._showwarning": ["logging.Handler.__init__", "logging.Logger.warning", "warnings.formatwarning", "logging.getLogger", "logging.Logger.addHandler"], "logging.captureWarnings": [], "email.charset.add_charset": ["<builtin>.ValueError"], "email.charset.add_alias": [], "email.charset.add_codec": [], "email.charset._encode": [], "email.charset.Charset": [], "email.charset.Charset.__repr__": [], "email.charset.Charset.__eq__": ["<builtin>.str"], "email.charset.Charset.get_body_encoding": [], "email.charset.Charset.get_output_charset": [], "email.charset.Charset._get_encoder": [], "email.charset.Charset.header_encode_lines": ["<builtin>.next", "email.charset._encode", "email.charset.Charset.get_output_charset", "<builtin>.len", "_functools.partial", "email.charset.Charset._get_encoder"], "email.charset.Charset.body_encode": ["<builtin>.isinstance"], "email.quoprimime.header_check": ["<builtin>.chr"], "email.quoprimime.body_check": ["<builtin>.chr"], "email.quoprimime.header_length": ["<builtin>.sum", "<builtin>.len"], "email.quoprimime.body_length": ["<builtin>.sum", "<builtin>.len"], "email.quoprimime._max_append": ["<builtin>.chr", "<builtin>.isinstance", "<builtin>.len"], "email.quoprimime.unquote": ["<builtin>.chr", "<builtin>.int"], "email.quoprimime.quote": ["<builtin>.ord"], "email.quoprimime.header_encode": [], "email.quoprimime.body_encode": ["email.quoprimime.quote", "<builtin>.ValueError", "<builtin>.len"], "email.quoprimime.decode": ["email.quoprimime.unquote", "<builtin>.len"], "email.quoprimime._unquote_match": ["email.quoprimime.unquote"], "email.quoprimime.header_decode": ["re.sub"], "email.base64mime.header_length": ["<builtin>.divmod", "<builtin>.len"], "email.base64mime.header_encode": ["<builtin>.isinstance", "base64.b64encode"], "base64.b64encode": ["<builtin>.repr", "<builtin>.len"], "email.base64mime.body_encode": ["<builtin>.range", "<builtin>.len"], "email.base64mime.decode": ["<builtin>.bytes", "<builtin>.isinstance"], "base64._bytes_from_decode_data": ["<builtin>.memoryview", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "base64.b64decode": ["re.fullmatch", "base64._bytes_from_decode_data", "<builtin>.repr", "<builtin>.len"], "base64.standard_b64encode": ["base64.b64encode"], "base64.standard_b64decode": ["base64.b64decode"], "base64.urlsafe_b64encode": ["base64.b64encode"], "base64.urlsafe_b64decode": ["base64._bytes_from_decode_data", "base64.b64decode"], "base64.b32encode": ["<builtin>.bytes", "<builtin>.bytearray", "<builtin>.isinstance", "<builtin>.len", "<builtin>.memoryview", "<builtin>.range"], "base64.b32decode": ["<builtin>.bytes", "base64._bytes_from_decode_data", "<builtin>.bytearray", "<builtin>.enumerate", "<builtin>.repr", "<builtin>.len", "<builtin>.range"], "base64.b16encode": [], "base64.b16decode": ["base64._bytes_from_decode_data", "re.search"], "base64._85encode": ["<builtin>.memoryview", "<builtin>.isinstance", "<builtin>.len"], "base64.a85encode": ["<builtin>.bytes", "<builtin>.max", "base64._85encode", "<builtin>.len", "<builtin>.range"], "base64.a85decode": ["base64._bytes_from_decode_data", "<builtin>.ValueError", "<builtin>.len"], "base64.b85encode": ["<builtin>.bytes", "base64._85encode"], "base64.b85decode": ["base64._bytes_from_decode_data", "<builtin>.enumerate", "<builtin>.len", "<builtin>.ValueError", "<builtin>.range"], "base64.encode": ["sys.stdout.buffer.write", "sys.stdin.buffer.read", "<builtin>.len"], "base64.decode": ["sys.stdin.buffer.readline", "sys.stdout.buffer.write"], "sys.stdin.buffer.readline": [], "base64._input_type_check": ["<builtin>.memoryview", "<builtin>.TypeError"], "base64.encodebytes": ["base64._input_type_check", "<builtin>.range", "<builtin>.len"], "base64.decodebytes": ["base64._input_type_check"], "base64.test": ["<builtin>.print", "base64.encodebytes", "base64.decodebytes", "<builtin>.repr"], "getopt._": [], "getopt.GetoptError": [], "getopt.GetoptError.__init__": [], "getopt.GetoptError.__str__": [], "getopt.getopt": ["<builtin>.type", "getopt.do_longs", "<builtin>.list", "getopt.do_shorts"], "getopt.do_longs": ["getopt.GetoptError.__init__", "getopt.long_has_args", "gettext.gettext"], "getopt.do_shorts": ["getopt.GetoptError.__init__", "getopt.short_has_arg", "gettext.gettext"], "getopt.gnu_getopt": ["<builtin>.isinstance", "getopt.do_longs", "<builtin>.list", "getopt.do_shorts"], "getopt.long_has_args": ["getopt.GetoptError.__init__", "gettext.gettext", "<builtin>.len"], "getopt.short_has_arg": ["getopt.GetoptError.__init__", "<builtin>.range", "gettext.gettext", "<builtin>.len"], "email.errors.MessageError": [], "email.errors.MessageParseError": [], "email.errors.HeaderParseError": [], "email.errors.BoundaryError": [], "email.errors.MultipartConversionError": [], "email.errors.CharsetError": [], "email.errors.MessageDefect": [], "email.errors.NoBoundaryInMultipartDefect": [], "email.errors.StartBoundaryNotFoundDefect": [], "email.errors.CloseBoundaryNotFoundDefect": [], "email.errors.FirstHeaderLineIsContinuationDefect": [], "email.errors.MisplacedEnvelopeHeaderDefect": [], "email.errors.MissingHeaderBodySeparatorDefect": [], "email.errors.MultipartInvariantViolationDefect": [], "email.errors.InvalidMultipartContentTransferEncodingDefect": [], "email.errors.UndecodableBytesDefect": [], "email.errors.InvalidBase64PaddingDefect": [], "email.errors.InvalidBase64CharactersDefect": [], "email.errors.InvalidBase64LengthDefect": [], "email.errors.HeaderDefect": [], "email.errors.InvalidHeaderDefect": [], "email.errors.HeaderMissingRequiredValue": [], "email.errors.NonPrintableDefect": [], "email.errors.NonPrintableDefect.__init__": ["<builtin>.super"], "email.errors.NonPrintableDefect.__str__": [], "email.errors.ObsoleteHeaderDefect": [], "email.errors.NonASCIILocalPartDefect": [], "email.encoders._qencode": ["quopri.encodestring"], "email.encoders.encode_base64": ["<builtin>.str", "base64.encodebytes"], "email.encoders.encode_quopri": ["email.encoders._qencode"], "email.encoders.encode_7or8bit": [], "email.encoders.encode_noop": [], "quopri.needsquoting": ["<builtin>.isinstance"], "quopri.quote": ["<builtin>.bytes", "<builtin>.isinstance", "<builtin>.ord", "<builtin>.len"], "quopri.encode": ["sys.stdout.buffer.write", "<builtin>.bytes", "quopri.needsquoting", "quopri.quote", "<builtin>.len", "sys.stdin.buffer.read", "sys.stdin.buffer.readline", "quopri.encode.write"], "quopri.encode.write": ["sys.stdout.buffer.write", "quopri.quote"], "_io.BytesIO": [], "quopri.decode": ["sys.stdout.buffer.write", "<builtin>.bytes", "quopri.ishex", "<builtin>.len", "quopri.unhex", "sys.stdin.buffer.read", "sys.stdin.buffer.readline"], "quopri.ishex": ["<builtin>.isinstance"], "quopri.unhex": ["<builtin>.bytes", "<builtin>.ord", "<builtin>.repr"], "urllib.parse.clear_cache": [], "urllib.parse._noop": [], "urllib.parse._encode_result": [], "urllib.parse._decode_args": ["<builtin>.tuple"], "urllib.parse._coerce_args": ["<builtin>.isinstance", "<builtin>.TypeError", "urllib.parse._decode_args"], "urllib.parse._ResultMixinStr": [], "urllib.parse._ResultMixinStr.encode": [], "urllib.parse._ResultMixinBytes": [], "urllib.parse._ResultMixinBytes.decode": [], "urllib.parse._NetlocResultMixinBase": [], "urllib.parse._NetlocResultMixinBase.username": [], "urllib.parse._NetlocResultMixinBase.password": [], "urllib.parse._NetlocResultMixinBase.hostname": ["<builtin>.isinstance"], "urllib.parse._NetlocResultMixinBase.port": ["<builtin>.int", "<builtin>.ValueError"], "urllib.parse._NetlocResultMixinStr": [], "urllib.parse._NetlocResultMixinStr._userinfo": [], "urllib.parse._NetlocResultMixinStr._hostinfo": [], "urllib.parse._NetlocResultMixinBytes": [], "urllib.parse._NetlocResultMixinBytes._userinfo": [], "urllib.parse._NetlocResultMixinBytes._hostinfo": [], "urllib.parse.DefragResult": [], "urllib.parse.DefragResult.geturl": [], "urllib.parse.SplitResult": [], "urllib.parse.SplitResult.geturl": ["urllib.parse.urlunsplit"], "urllib.parse.urlunsplit": ["urllib.parse._coerce_args"], "urllib.parse.ParseResult": [], "urllib.parse.ParseResult.geturl": ["urllib.parse.urlunparse"], "urllib.parse.urlunparse": ["urllib.parse.urlunsplit", "urllib.parse._coerce_args"], "urllib.parse.DefragResultBytes": [], "urllib.parse.DefragResultBytes.geturl": [], "urllib.parse.SplitResultBytes": [], "urllib.parse.SplitResultBytes.geturl": ["urllib.parse.urlunsplit"], "urllib.parse.ParseResultBytes": [], "urllib.parse.ParseResultBytes.geturl": ["urllib.parse.urlunparse"], "urllib.parse._fix_result_transcoding": [], "urllib.parse.urlparse": ["urllib.parse._splitparams", "urllib.parse._coerce_args", "urllib.parse.urlsplit"], "urllib.parse.urlsplit": ["urllib.parse._splitnetloc", "urllib.parse.clear_cache", "<builtin>.len", "<builtin>.ValueError", "urllib.parse._checknetloc", "<builtin>.type", "urllib.parse._coerce_args", "<builtin>.bool"], "urllib.parse._splitparams": [], "urllib.parse._splitnetloc": ["<builtin>.min", "<builtin>.len"], "urllib.parse.urljoin": ["urllib.parse.urlparse", "urllib.parse.urlunparse", "urllib.parse._coerce_args", "<builtin>.filter"], "urllib.parse.urldefrag": ["urllib.parse.urlparse", "urllib.parse.urlunparse", "urllib.parse._coerce_args"], "urllib.parse.unquote_to_bytes": ["<builtin>.isinstance", "<builtin>.len"], "urllib.parse.unquote": ["<builtin>.range", "urllib.parse.unquote_to_bytes", "<builtin>.len"], "urllib.parse.parse_qs": ["urllib.parse.parse_qsl"], "urllib.parse.parse_qsl": ["urllib.parse.unquote", "urllib.parse._coerce_args", "<builtin>.ValueError", "<builtin>.len"], "urllib.parse.unquote_plus": ["urllib.parse.unquote"], "urllib.parse.Quoter": [], "urllib.parse.Quoter.__init__": [], "urllib.parse.Quoter.__repr__": ["<builtin>.dict"], "urllib.parse.Quoter.__missing__": ["<builtin>.chr"], "urllib.parse.quote": ["urllib.parse.quote_from_bytes", "<builtin>.isinstance", "<builtin>.TypeError"], "urllib.parse.quote_from_bytes": ["<builtin>.bytes", "_collections.defaultdict.__getitem__", "<builtin>.isinstance", "urllib.parse.Quoter.__init__", "<builtin>.TypeError"], "urllib.parse.quote_plus": ["urllib.parse.quote", "<builtin>.isinstance"], "_collections.defaultdict.__getitem__": [], "urllib.parse.urlencode": ["<builtin>.str", "<builtin>.isinstance", "<builtin>.len", "urllib.parse.quote_plus", "sys.exc_info", "<builtin>.TypeError", "<builtin>.hasattr"], "urllib.parse.to_bytes": ["urllib.parse._to_bytes", "warnings.warn"], "urllib.parse._to_bytes": ["<builtin>.UnicodeError", "<builtin>.isinstance", "<builtin>.repr"], "<builtin>.UnicodeError": [], "urllib.parse.unwrap": ["<builtin>.str"], "urllib.parse.splittype": ["urllib.parse._splittype", "warnings.warn"], "urllib.parse._splittype": ["re.compile"], "urllib.parse.splithost": ["urllib.parse._splithost", "warnings.warn"], "urllib.parse._splithost": ["re.compile"], "urllib.parse.splituser": ["urllib.parse._splituser", "warnings.warn"], "urllib.parse._splituser": [], "urllib.parse.splitpasswd": ["urllib.parse._splitpasswd", "warnings.warn"], "urllib.parse._splitpasswd": [], "urllib.parse.splitport": ["urllib.parse._splitport", "warnings.warn"], "urllib.parse._splitport": ["re.compile"], "urllib.parse.splitnport": ["urllib.parse._splitnport", "warnings.warn"], "urllib.parse._splitnport": ["<builtin>.int"], "urllib.parse.splitquery": ["urllib.parse._splitquery", "warnings.warn"], "urllib.parse._splitquery": [], "urllib.parse.splittag": ["urllib.parse._splittag", "warnings.warn"], "urllib.parse._splittag": [], "urllib.parse.splitattr": ["urllib.parse._splitattr", "warnings.warn"], "urllib.parse._splitattr": [], "urllib.parse.splitvalue": ["urllib.parse._splitvalue", "warnings.warn"], "urllib.parse._splitvalue": [], "email._parseaddr.parsedate_tz": ["<builtin>.tuple", "email._parseaddr._parsedate_tz"], "email._parseaddr.parsedate": ["<builtin>.isinstance", "email._parseaddr.parsedate_tz"], "email._parseaddr.mktime_tz": ["time.mktime"], "email._parseaddr.AddrlistClass": [], "email._parseaddr.AddrlistClass.__init__": [], "email._parseaddr.AddrlistClass.gotonext": ["email._parseaddr.AddrlistClass.getcomment", "<builtin>.len"], "email._parseaddr.AddrlistClass.getcomment": ["email._parseaddr.AddrlistClass.getdelimited"], "email._parseaddr.AddrlistClass.getaddrlist": ["email._parseaddr.AddrlistClass.getaddress", "<builtin>.len"], "email._parseaddr.AddrlistClass.getaddress": ["email._parseaddr.AddrlistClass.getphraselist", "<builtin>.len", "email._parseaddr.AddrlistClass.getaddrspec", "email._parseaddr.AddrlistClass.getaddress", "email._parseaddr.AddrlistClass.gotonext", "email._parseaddr.AddrlistClass.getrouteaddr"], "email._parseaddr.AddrlistClass.getphraselist": ["email._parseaddr.AddrlistClass.getquote", "email._parseaddr.AddrlistClass.getcomment", "email._parseaddr.AddrlistClass.getatom", "<builtin>.len"], "email._parseaddr.AddrlistClass.getaddrspec": ["email._parseaddr.AddrlistClass.getdomain", "email._parseaddr.AddrlistClass.getquote", "<builtin>.len", "email._parseaddr.quote", "email._parseaddr.AddrlistClass.getatom", "email._parseaddr.AddrlistClass.gotonext"], "email._parseaddr.AddrlistClass.getrouteaddr": ["email._parseaddr.AddrlistClass.getaddrspec", "email._parseaddr.AddrlistClass.gotonext", "email._parseaddr.AddrlistClass.getdomain", "<builtin>.len"], "email._parseaddr.AddrlistClass.getdomain": ["email._parseaddr.AddrlistClass.getdomainliteral", "email._parseaddr.AddrlistClass.getcomment", "email._parseaddr.AddrlistClass.getatom", "<builtin>.len"], "email._parseaddr.AddrlistClass.getquote": ["email._parseaddr.AddrlistClass.getdelimited"], "email._parseaddr.AddrlistClass.getatom": ["<builtin>.len"], "email._parseaddr.AddrlistClass.getdomainliteral": ["email._parseaddr.AddrlistClass.getdelimited"], "email._parseaddr.AddrlistClass.getdelimited": ["email._parseaddr.AddrlistClass.getcomment", "<builtin>.len"], "email._parseaddr.AddressList": [], "email._parseaddr.AddressList.__len__": ["<builtin>.len"], "email._parseaddr.AddressList.__add__": ["email._parseaddr.AddressList.__init__"], "email._parseaddr.AddressList.__iadd__": [], "email._parseaddr.AddressList.__sub__": ["email._parseaddr.AddressList.__init__"], "email._parseaddr.AddressList.__isub__": [], "email._parseaddr.AddressList.__getitem__": [], "calendar.IllegalMonthError": [], "calendar.IllegalMonthError.__init__": [], "calendar.IllegalMonthError.__str__": [], "calendar.IllegalWeekdayError": [], "calendar.IllegalWeekdayError.__init__": [], "calendar.IllegalWeekdayError.__str__": [], "calendar._localized_month": ["datetime.datetime.date", "<builtin>.range"], "datetime.datetime.date": ["datetime.datetime.date"], "calendar._localized_month.<lambda1>": [], "calendar._localized_month.__init__": [], "calendar._localized_month.__getitem__": ["<builtin>.isinstance"], "calendar._localized_month.__len__": [], "calendar._localized_day": ["datetime.datetime.date", "<builtin>.range"], "calendar._localized_day.__init__": [], "calendar._localized_day.__getitem__": ["<builtin>.isinstance"], "calendar._localized_day.__len__": [], "calendar.isleap": [], "calendar.leapdays": [], "calendar.weekday": ["datetime.datetime.date"], "calendar.monthrange": ["calendar.IllegalMonthError.__init__", "calendar.isleap", "calendar.weekday"], "calendar._monthlen": ["calendar.isleap"], "calendar._prevmonth": [], "calendar._nextmonth": [], "calendar.Calendar": ["<builtin>.property"], "calendar.Calendar.__init__": [], "calendar.Calendar.getfirstweekday": [], "calendar.Calendar.setfirstweekday": [], "calendar.Calendar.iterweekdays": ["<builtin>.range"], "calendar.Calendar.itermonthdates": ["datetime.datetime.date", "calendar.Calendar.itermonthdays3"], "calendar.Calendar.itermonthdays3": ["calendar._nextmonth", "calendar._monthlen", "calendar._prevmonth", "calendar.monthrange", "<builtin>.range"], "calendar.Calendar.itermonthdays": ["itertools.repeat", "<builtin>.range", "calendar.monthrange"], "calendar.Calendar.itermonthdays2": ["<builtin>.enumerate", "calendar.Calendar.itermonthdays"], "calendar.Calendar.itermonthdays4": ["<builtin>.enumerate", "calendar.Calendar.itermonthdays3"], "calendar.Calendar.monthdatescalendar": ["<builtin>.list", "<builtin>.range", "calendar.Calendar.itermonthdates", "<builtin>.len"], "calendar.Calendar.monthdays2calendar": ["calendar.Calendar.itermonthdays2", "<builtin>.range", "<builtin>.list", "<builtin>.len"], "calendar.Calendar.monthdayscalendar": ["<builtin>.list", "<builtin>.range", "calendar.Calendar.itermonthdays", "<builtin>.len"], "calendar.Calendar.yeardatescalendar": ["calendar.Calendar.monthdatescalendar", "<builtin>.range", "<builtin>.len"], "calendar.Calendar.yeardays2calendar": ["<builtin>.range", "calendar.Calendar.monthdays2calendar", "<builtin>.len"], "calendar.Calendar.yeardayscalendar": ["<builtin>.range", "<builtin>.len", "calendar.Calendar.monthdayscalendar"], "calendar.TextCalendar": [], "calendar.TextCalendar.prweek": ["<builtin>.print", "calendar.TextCalendar.formatweek"], "calendar.TextCalendar.formatweek": ["calendar.TextCalendar.formatday"], "calendar.TextCalendar.formatday": [], "calendar.TextCalendar.formatweekday": [], "calendar.TextCalendar.formatweekheader": ["calendar.Calendar.iterweekdays", "calendar.TextCalendar.formatweekday", "calendar.LocaleTextCalendar.formatweekday"], "calendar.LocaleTextCalendar.formatweekday": ["calendar.different_locale.__init__"], "calendar.TextCalendar.formatmonthname": [], "calendar.TextCalendar.prmonth": ["<builtin>.print", "calendar.TextCalendar.formatmonth"], "calendar.TextCalendar.formatmonth": ["<builtin>.max", "calendar.Calendar.monthdays2calendar", "calendar.TextCalendar.formatweekheader", "calendar.LocaleTextCalendar.formatmonthname", "calendar.TextCalendar.formatmonthname", "calendar.TextCalendar.formatweek"], "calendar.LocaleTextCalendar.formatmonthname": ["calendar.different_locale.__init__"], "calendar.TextCalendar.formatyear": ["<builtin>.max", "calendar.TextCalendar.formatweekheader", "calendar.LocaleTextCalendar.formatmonthname", "calendar.formatstring", "calendar.TextCalendar.formatmonthname", "<builtin>.enumerate", "calendar.Calendar.yeardays2calendar", "<builtin>.repr", "<builtin>.len", "calendar.TextCalendar.formatweek", "<builtin>.min", "<builtin>.range"], "calendar.formatstring": [], "calendar.TextCalendar.pryear": ["<builtin>.print", "calendar.TextCalendar.formatyear"], "calendar.HTMLCalendar": [], "calendar.HTMLCalendar.formatday": [], "calendar.HTMLCalendar.formatweek": ["calendar.HTMLCalendar.formatday"], "calendar.HTMLCalendar.formatweekday": [], "calendar.HTMLCalendar.formatweekheader": ["calendar.Calendar.iterweekdays", "calendar.HTMLCalendar.formatweekday", "calendar.LocaleHTMLCalendar.formatweekday"], "calendar.LocaleHTMLCalendar.formatweekday": ["calendar.different_locale.__init__"], "calendar.HTMLCalendar.formatmonthname": [], "calendar.HTMLCalendar.formatmonth": ["calendar.LocaleHTMLCalendar.formatmonthname", "calendar.Calendar.monthdays2calendar", "calendar.HTMLCalendar.formatmonthname", "calendar.HTMLCalendar.formatweekheader", "calendar.HTMLCalendar.formatweek"], "calendar.LocaleHTMLCalendar.formatmonthname": ["calendar.different_locale.__init__"], "calendar.HTMLCalendar.formatyear": ["<builtin>.range", "<builtin>.max", "calendar.HTMLCalendar.formatmonth", "<builtin>.min"], "calendar.HTMLCalendar.formatyearpage": ["sys.getdefaultencoding", "calendar.HTMLCalendar.formatyear"], "sys.getdefaultencoding": [], "calendar.different_locale": [], "calendar.different_locale.__init__": [], "calendar.different_locale.__enter__": ["locale.setlocale", "locale.getlocale"], "calendar.different_locale.__exit__": ["locale.setlocale"], "calendar.LocaleTextCalendar": [], "calendar.LocaleTextCalendar.__init__": ["calendar.Calendar.__init__", "locale.getdefaultlocale"], "calendar.LocaleHTMLCalendar": [], "calendar.LocaleHTMLCalendar.__init__": ["calendar.Calendar.__init__", "locale.getdefaultlocale"], "calendar.setfirstweekday": ["calendar.IllegalWeekdayError.__init__"], "calendar.format": ["<builtin>.print", "calendar.formatstring"], "calendar.timegm": ["datetime.datetime.date"], "datetime._cmp": [], "datetime._is_leap": [], "datetime._days_before_year": [], "datetime._days_in_month": ["datetime._is_leap"], "datetime._days_before_month": ["datetime._is_leap"], "datetime._ymd2ord": ["datetime._days_in_month", "datetime._days_before_month", "datetime._days_before_year"], "datetime._ord2ymd": ["datetime._days_in_month", "datetime._is_leap", "<builtin>.divmod"], "datetime._build_struct_time": ["datetime._ymd2ord", "datetime._days_before_month", "time.struct_time"], "time.struct_time": [], "datetime._format_time": ["<builtin>.ValueError"], "datetime._format_offset": ["<builtin>.divmod"], "datetime._wrap_strftime": ["<builtin>.len", "datetime.datetime.tzname", "datetime.datetime.utcoffset", "datetime.time.tzname", "time.strftime", "<builtin>.getattr", "datetime.time.utcoffset", "<builtin>.divmod", "<builtin>.hasattr"], "datetime.time.utcoffset": ["datetime._check_utc_offset"], "datetime.datetime.utcoffset": ["datetime._check_utc_offset"], "datetime.time.tzname": ["datetime._check_tzname"], "datetime.datetime.tzname": ["datetime._check_tzname"], "datetime._parse_isoformat_date": ["<builtin>.int", "<builtin>.ValueError"], "datetime._parse_hh_mm_ss_ff": ["<builtin>.int", "<builtin>.range", "<builtin>.ValueError", "<builtin>.len"], "datetime._parse_isoformat_time": ["<builtin>.all", "datetime._parse_hh_mm_ss_ff", "<builtin>.ValueError", "<builtin>.len"], "datetime._check_tzname": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "datetime._check_utc_offset": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "datetime._check_date_fields": ["datetime._days_in_month", "datetime._check_int_field", "<builtin>.ValueError"], "datetime._check_time_fields": ["datetime._check_int_field", "<builtin>.ValueError"], "datetime._check_tzinfo_arg": ["<builtin>.isinstance", "<builtin>.TypeError"], "datetime._cmperror": ["<builtin>.type", "<builtin>.TypeError"], "datetime._divide_and_round": ["<builtin>.divmod"], "datetime.timedelta": [], "datetime.timedelta.__new__": ["<builtin>.round", "<builtin>.abs", "<builtin>.isinstance", "<builtin>.OverflowError", "<builtin>.int", "<builtin>.divmod"], "datetime.timedelta.__repr__": [], "datetime.timedelta.__str__": ["datetime.timedelta.__str__.plural", "<builtin>.divmod"], "datetime.timedelta.__str__.plural": ["<builtin>.abs"], "datetime.timedelta.total_seconds": [], "datetime.timedelta.days": [], "datetime.timedelta.seconds": [], "datetime.timedelta.microseconds": [], "datetime.timedelta.__add__": ["<builtin>.isinstance"], "datetime.timedelta.__sub__": ["<builtin>.isinstance"], "datetime.timedelta.__rsub__": ["<builtin>.isinstance"], "datetime.timedelta.__neg__": [], "datetime.timedelta.__pos__": [], "datetime.timedelta.__abs__": [], "datetime.timedelta.__mul__": ["<builtin>.isinstance", "datetime.timedelta._to_microseconds", "datetime._divide_and_round"], "datetime.timedelta._to_microseconds": [], "datetime.timedelta.__floordiv__": ["<builtin>.isinstance", "datetime.timedelta._to_microseconds"], "datetime.timedelta.__truediv__": ["<builtin>.isinstance", "datetime.timedelta._to_microseconds", "datetime._divide_and_round"], "datetime.timedelta.__mod__": ["<builtin>.isinstance", "datetime.timedelta._to_microseconds"], "datetime.timedelta.__divmod__": ["<builtin>.isinstance", "datetime.timedelta._to_microseconds", "<builtin>.divmod"], "datetime.timedelta.__eq__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta._cmp": ["datetime.timedelta._getstate", "<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta.__le__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta.__lt__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta.__ge__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta.__gt__": ["<builtin>.isinstance", "datetime.timedelta._cmp"], "datetime.timedelta._getstate": [], "datetime.timedelta.__hash__": ["datetime.timedelta._getstate", "<builtin>.hash"], "datetime.timedelta.__bool__": [], "datetime.timedelta.__reduce__": ["datetime.timedelta._getstate"], "datetime.date": [], "datetime.date.__new__": ["<builtin>.ord", "datetime._check_date_fields", "<builtin>.isinstance", "<builtin>.len", "<builtin>.ValueError"], "datetime.date.fromtimestamp": ["time.localtime"], "datetime.date.today": ["datetime.datetime.fromtimestamp", "time.time", "datetime.date.fromtimestamp"], "datetime.datetime.fromtimestamp": ["datetime.datetime._fromtimestamp", "datetime._check_tzinfo_arg"], "datetime.date.fromordinal": ["datetime._ord2ymd"], "datetime.date.fromisoformat": ["<builtin>.isinstance", "<builtin>.len", "<builtin>.ValueError", "datetime._parse_isoformat_date", "<builtin>.TypeError"], "datetime.date.fromisocalendar": ["datetime._is_leap", "datetime._isoweek1monday", "<builtin>.ValueError", "datetime._ord2ymd", "datetime._ymd2ord"], "datetime._isoweek1monday": ["datetime._ymd2ord"], "datetime.date.__repr__": [], "datetime.date.ctime": ["datetime.date.toordinal"], "datetime.date.toordinal": ["datetime._ymd2ord"], "datetime.date.strftime": ["datetime.datetime.timetuple", "datetime.date.timetuple", "datetime._wrap_strftime"], "datetime.datetime.timetuple": ["datetime._build_struct_time", "datetime.datetime.dst"], "datetime.date.timetuple": ["datetime._build_struct_time"], "datetime.date.__format__": ["<builtin>.str", "datetime.date.strftime", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.len", "<builtin>.type"], "datetime.date.isoformat": [], "datetime.date.year": [], "datetime.date.month": [], "datetime.date.day": [], "datetime.date.replace": ["<builtin>.type", "datetime.date.year"], "datetime.date.__eq__": ["datetime.date._cmp", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.date._cmp": ["datetime.date._cmp", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.datetime._cmp": ["<builtin>.isinstance", "datetime.datetime.replace", "datetime.datetime.utcoffset", "<builtin>.TypeError", "datetime.datetime._cmp"], "datetime.date.__le__": ["datetime.date._cmp", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.date.__lt__": ["datetime.date._cmp", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.date.__ge__": ["datetime.date._cmp", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.date.__gt__": ["datetime.date._cmp", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.date.__hash__": ["datetime.datetime._getstate", "datetime.date._getstate", "<builtin>.hash"], "datetime.datetime._getstate": ["<builtin>.bytes", "<builtin>.divmod"], "datetime.date._getstate": ["<builtin>.bytes", "<builtin>.divmod"], "datetime.date.__add__": ["<builtin>.OverflowError", "<builtin>.type", "<builtin>.isinstance", "datetime.date.toordinal"], "datetime.date.__sub__": ["<builtin>.isinstance", "datetime.date.toordinal"], "datetime.date.weekday": ["datetime.date.toordinal"], "datetime.date.isoweekday": ["datetime.date.toordinal"], "datetime.date.isocalendar": ["datetime._ymd2ord", "datetime._isoweek1monday", "<builtin>.divmod"], "datetime.date.__setstate": [], "datetime.date.__reduce__": ["datetime.datetime._getstate", "datetime.date._getstate"], "datetime.tzinfo": [], "datetime.tzinfo.tzname": ["<builtin>.NotImplementedError"], "datetime.tzinfo.utcoffset": ["<builtin>.NotImplementedError"], "datetime.tzinfo.dst": ["<builtin>.NotImplementedError"], "datetime.tzinfo.fromutc": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "datetime.tzinfo.__reduce__": ["<builtin>.getattr"], "datetime.time": [], "datetime.time.__new__": ["<builtin>.ord", "<builtin>.isinstance", "datetime._check_time_fields", "<builtin>.len", "<builtin>.ValueError", "datetime._check_tzinfo_arg"], "datetime.time.hour": [], "datetime.time.minute": [], "datetime.time.second": [], "datetime.time.microsecond": [], "datetime.time.tzinfo": [], "datetime.time.fold": [], "datetime.time.__eq__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time._cmp": ["datetime.time._cmp", "datetime.time.utcoffset", "<builtin>.isinstance", "<builtin>.TypeError"], "datetime.time.__le__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time.__lt__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time.__ge__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time.__gt__": ["datetime.time._cmp", "<builtin>.isinstance"], "datetime.time.__hash__": ["<builtin>.hash", "datetime.time._getstate", "datetime.time.replace", "datetime.time.utcoffset", "<builtin>.divmod"], "datetime.time.replace": ["<builtin>.type"], "datetime.time._getstate": ["<builtin>.bytes", "<builtin>.divmod"], "datetime.time._tzstr": ["datetime._format_offset", "datetime.time.utcoffset"], "datetime.time.__repr__": [], "datetime.time.isoformat": ["datetime._format_time", "datetime.time._tzstr"], "datetime.time.fromisoformat": ["datetime._parse_isoformat_time", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "datetime.time.strftime": ["datetime._wrap_strftime"], "datetime.time.__format__": ["datetime.time.strftime", "<builtin>.str", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.len", "<builtin>.type"], "datetime.time.dst": ["datetime._check_utc_offset"], "datetime.time.__setstate": ["<builtin>.isinstance", "<builtin>.TypeError"], "datetime.time.__reduce_ex__": ["datetime.time._getstate"], "datetime.time.__reduce__": ["datetime.time.__reduce_ex__"], "datetime.datetime": [], "datetime.datetime.__new__": ["<builtin>.bytes", "<builtin>.ord", "datetime._check_date_fields", "<builtin>.isinstance", "<builtin>.len", "datetime._check_time_fields", "<builtin>.ValueError", "datetime._check_tzinfo_arg"], "datetime.datetime.hour": [], "datetime.datetime.minute": [], "datetime.datetime.second": [], "datetime.datetime.microsecond": [], "datetime.datetime.tzinfo": [], "datetime.datetime.fold": [], "datetime.datetime._fromtimestamp": ["sys.platform.startswith", "<builtin>.round"], "datetime.datetime.utcfromtimestamp": ["datetime.datetime._fromtimestamp"], "datetime.datetime.now": ["datetime.datetime.fromtimestamp", "time.time"], "datetime.datetime.utcnow": ["time.time", "datetime.datetime.utcfromtimestamp"], "datetime.datetime.combine": ["<builtin>.isinstance", "<builtin>.TypeError"], "datetime.datetime.fromisoformat": ["datetime._parse_isoformat_time", "<builtin>.isinstance", "<builtin>.ValueError", "datetime._parse_isoformat_date", "<builtin>.TypeError"], "datetime.datetime.dst": ["datetime._check_utc_offset"], "datetime.datetime._mktime": ["datetime.datetime._mktime.local"], "datetime.datetime._mktime.local": ["time.localtime"], "datetime.datetime.timestamp": ["datetime.datetime._mktime"], "datetime.datetime.utctimetuple": ["datetime.datetime.utcoffset", "datetime._build_struct_time"], "datetime.datetime.time": ["datetime.datetime.time"], "datetime.datetime.timetz": ["datetime.datetime.time"], "datetime.datetime.replace": ["<builtin>.type"], "datetime.datetime._local_timezone": ["time.localtime", "datetime.datetime._mktime"], "datetime.datetime.astimezone": ["datetime.datetime._local_timezone", "datetime.timezone.utcoffset", "<builtin>.isinstance", "datetime.datetime.replace", "<builtin>.TypeError", "datetime.timezone.fromutc"], "datetime.timezone.utcoffset": ["<builtin>.isinstance", "<builtin>.TypeError"], "datetime.timezone.fromutc": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "datetime.datetime.ctime": ["datetime.date.toordinal"], "datetime.datetime.isoformat": ["datetime._format_offset", "datetime._format_time", "datetime.datetime.utcoffset"], "datetime.datetime.__repr__": ["<builtin>.map"], "datetime.datetime.__str__": ["datetime.datetime.isoformat"], "datetime.datetime.__eq__": ["<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.datetime.__le__": ["datetime._cmperror", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.datetime.__lt__": ["datetime._cmperror", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.datetime.__ge__": ["datetime._cmperror", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.datetime.__gt__": ["datetime._cmperror", "<builtin>.isinstance", "datetime.datetime._cmp"], "datetime.datetime.__add__": ["datetime.datetime.time", "datetime.date.toordinal", "<builtin>.isinstance", "<builtin>.OverflowError", "<builtin>.type", "<builtin>.divmod"], "datetime.datetime.__sub__": ["datetime.datetime.utcoffset", "<builtin>.isinstance", "datetime.date.toordinal", "<builtin>.TypeError"], "datetime.datetime.__hash__": ["datetime.datetime._getstate", "<builtin>.hash", "datetime.datetime.replace", "datetime.datetime.utcoffset", "datetime._ymd2ord"], "datetime.datetime.__setstate": ["<builtin>.isinstance", "<builtin>.TypeError"], "datetime.datetime.__reduce_ex__": ["datetime.datetime._getstate"], "datetime.datetime.__reduce__": ["datetime.datetime.__reduce_ex__"], "datetime.timezone": ["<builtin>.object"], "datetime.timezone.__new__": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError", "datetime.timezone._create"], "datetime.timezone._create": ["datetime.timezone.__new__"], "datetime.timezone.__getinitargs__": [], "datetime.timezone.__eq__": ["<builtin>.isinstance"], "datetime.timezone.__hash__": ["<builtin>.hash"], "datetime.timezone.__repr__": [], "datetime.timezone.__str__": ["datetime.timezone.tzname"], "datetime.timezone.tzname": ["datetime.timezone._name_from_offset", "<builtin>.isinstance", "<builtin>.TypeError"], "datetime.timezone._name_from_offset": ["<builtin>.divmod"], "datetime.timezone.dst": ["<builtin>.isinstance", "<builtin>.TypeError"], "_strptime._getlang": ["locale.getlocale"], "_strptime.LocaleTime": [], "_strptime.LocaleTime.__init__": ["_strptime.LocaleTime.__calc_am_pm", "_strptime.LocaleTime.__calc_timezone", "_strptime.LocaleTime.__calc_date_time", "_strptime._getlang", "_strptime.LocaleTime.__calc_weekday", "<builtin>.ValueError", "_strptime.LocaleTime.__calc_month"], "_strptime.LocaleTime.__calc_weekday": ["<builtin>.range"], "_strptime.LocaleTime.__calc_month": ["<builtin>.range"], "_strptime.LocaleTime.__calc_am_pm": ["time.strftime", "time.struct_time"], "_strptime.LocaleTime.__calc_timezone": ["<builtin>.frozenset", "time.tzset"], "_strptime.LocaleTime.__calc_date_time": ["time.strftime", "time.struct_time"], "time.tzset": [], "_strptime.TimeRE": [], "_strptime.TimeRE.__init__": ["_strptime.TimeRE.pattern", "<builtin>.super", "_strptime.LocaleTime.__init__"], "_strptime.TimeRE.pattern": ["re.compile"], "_strptime.TimeRE.__seqToRE": ["re.escape", "<builtin>.sorted"], "_strptime.TimeRE.compile": ["_strptime.TimeRE.pattern", "re.compile"], "_strptime._calc_julian_from_U_or_W": ["datetime.date.weekday"], "_strptime._calc_julian_from_V": ["datetime.date.toordinal", "datetime.date.isoweekday"], "_strptime._strptime": ["datetime.date.toordinal", "_strptime._calc_julian_from_V", "_strptime.TimeRE.__init__", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.int", "<builtin>.len", "_strptime.TimeRE.compile", "datetime.date.weekday", "_strptime._getlang", "<builtin>.ValueError", "datetime.date.fromordinal", "_strptime._calc_julian_from_U_or_W", "<builtin>.type"], "_strptime._strptime_time": ["time.struct_time", "_strptime._strptime"], "_strptime._strptime_datetime": ["_strptime._strptime"], "socket.<lambda1>": [], "socket.<lambda2>": [], "socket.<lambda3>": [], "socket.<lambda4>": [], "socket._intenum_converter": [], "sys.platform.lower": [], "socket._GiveupOnSendfile": [], "socket.socket": ["<builtin>.hasattr"], "socket.socket.__init__": [], "socket.socket.__enter__": [], "socket.socket.__exit__": ["socket.socket.close"], "socket.socket.close": ["socket.socket._real_close"], "socket.socket.__repr__": ["<builtin>.str", "<builtin>.getattr"], "socket.socket.__getstate__": ["<builtin>.TypeError"], "socket.socket.dup": ["socket.socket.dup"], "socket.socket.accept": ["socket.socket.__init__"], "socket.socket.makefile": ["io.TextIOWrapper", "io.BufferedReader", "io.BufferedRWPair", "io.BufferedWriter", "<builtin>.ValueError", "<builtin>.set", "socket.SocketIO.__init__"], "socket.SocketIO.__init__": ["_io._RawIOBase.__init__", "<builtin>.ValueError"], "io.BufferedRWPair": [], "io.BufferedWriter": [], "socket.socket._sendfile_use_sendfile": ["selectors._PollLikeSelector.select", "selectors.SelectSelector.select", "selectors.SelectSelector.register", "selectors._PollLikeSelector.register", "socket.socket._check_sendfile_params", "selectors.SelectSelector.__init__", "<builtin>.min", "<builtin>.ValueError", "selectors._PollLikeSelector.__init__", "<builtin>.hasattr"], "socket.socket._check_sendfile_params": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.getattr"], "socket.socket._sendfile_use_send": ["<builtin>.len", "socket.socket._check_sendfile_params", "<builtin>.ValueError", "<builtin>.min", "<builtin>.memoryview", "<builtin>.hasattr"], "socket.socket.sendfile": ["socket.socket._sendfile_use_send", "socket.socket._sendfile_use_sendfile"], "socket.socket._decref_socketios": ["socket.socket.close"], "socket.socket._real_close": [], "socket.socket.detach": ["<builtin>.super"], "socket.socket.family": ["<builtin>.super", "socket._intenum_converter"], "socket.socket.type": ["<builtin>.super", "socket._intenum_converter"], "socket.socket.get_inheritable": [], "socket.socket.set_inheritable": [], "socket.fromfd": ["socket.socket.__init__"], "socket.fromshare": ["socket.socket.__init__"], "socket.socketpair": ["socket.socket.detach", "socket.socket.close", "socket.socket.accept", "<builtin>.ValueError", "socket.socket.__init__"], "socket.SocketIO": [], "_io._RawIOBase.__init__": [], "socket.SocketIO.readinto": ["_io._RawIOBase._checkReadable", "_io._RawIOBase._checkClosed", "<builtin>.OSError"], "_io._RawIOBase._checkClosed": [], "_io._RawIOBase._checkReadable": [], "socket.SocketIO.write": ["_io._RawIOBase._checkClosed", "_io._RawIOBase._checkWritable"], "_io._RawIOBase._checkWritable": [], "socket.SocketIO.readable": ["<builtin>.ValueError"], "socket.SocketIO.writable": ["<builtin>.ValueError"], "socket.SocketIO.seekable": ["<builtin>.super", "<builtin>.ValueError"], "socket.SocketIO.fileno": ["_io._RawIOBase._checkClosed"], "socket.SocketIO.name": ["socket.SocketIO.fileno"], "socket.SocketIO.mode": [], "socket.SocketIO.close": ["_io._IOBase.close", "gzip.GzipFile.close", "bz2.BZ2File.close", "zipfile.ZipExtFile.close", "socket.SocketIO.close", "socket.socket._decref_socketios", "lzma.LZMAFile.close", "_compression.DecompressReader.close", "zipfile._ZipWriteFile.close"], "_io._IOBase.close": [], "socket.getfqdn": [], "socket.create_connection": ["socket.socket.close", "socket.getaddrinfo", "socket.socket.__init__"], "socket.getaddrinfo": ["socket._intenum_converter"], "socket.has_dualstack_ipv6": ["socket.socket.__init__", "<builtin>.hasattr"], "socket.create_server": ["socket.socket.close", "socket.socket.__init__", "<builtin>.ValueError", "socket.has_dualstack_ipv6", "<builtin>.hasattr"], "email.header.decode_header": ["<builtin>.bytes", "email.charset._encode", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.len", "<builtin>.AssertionError", "<builtin>.reversed", "<builtin>.str", "<builtin>.hasattr"], "email.header.make_header": ["email.header.Header.__init__", "email.header.Header.append", "email.charset.Charset.__init__", "<builtin>.isinstance"], "email.header.Header.append": ["email.charset.Charset.__init__", "<builtin>.isinstance"], "email.header.Header": [], "email.header.Header.__str__": ["email.header.Header._nonctext", "email.header.Header._normalize"], "email.header.Header._normalize": [], "email.header.Header._nonctext": [], "email.header.Header.__eq__": ["<builtin>.str"], "email.header._ValueFormatter.__init__": ["email.header._Accumulator.__init__", "<builtin>.len"], "email.header._ValueFormatter.add_transition": ["email.header._Accumulator.push"], "email.header._ValueFormatter.feed": ["email.header._ValueFormatter._ascii_split", "email.header._ValueFormatter._maxlengths", "email.header._ValueFormatter._append_chunk", "email.header._Accumulator.push", "email.header._ValueFormatter.newline"], "email.header._ValueFormatter.newline": ["email.header._Accumulator.push", "email.header._Accumulator.reset", "<builtin>.len", "email.header._Accumulator.pop", "<builtin>.str", "email.header._Accumulator.is_onlyws"], "email.header._ValueFormatter._str": ["email.header._ValueFormatter.newline"], "email.header._ValueFormatter": [], "email.header._Accumulator.__init__": ["<builtin>.super"], "email.header._ValueFormatter.__str__": ["email.header._ValueFormatter._str"], "email.header._Accumulator.pop": ["<builtin>.super", "email.header._Accumulator.part_count"], "email.header._Accumulator.push": [], "email.header._Accumulator.is_onlyws": ["<builtin>.str"], "email.header._Accumulator.reset": [], "email.header._ValueFormatter._ascii_split": ["email.header._ValueFormatter._append_chunk", "re.split", "<builtin>.zip"], "email.header._ValueFormatter._maxlengths": ["<builtin>.len"], "email.header._ValueFormatter._append_chunk": ["<builtin>.str", "email.header._Accumulator.pop_from", "email.header._Accumulator.push", "email.header._Accumulator.part_count", "email.header._Accumulator.reset", "<builtin>.len", "<builtin>.range"], "email.header._Accumulator.part_count": ["<builtin>.super"], "email.header._Accumulator.pop_from": [], "email.header._Accumulator": [], "email.header._Accumulator.__len__": ["<builtin>.sum", "<builtin>.len"], "email.header._Accumulator.__str__": [], "email.feedparser.BufferedSubFile": [], "email.feedparser.BufferedSubFile.__init__": ["_io.StringIO"], "email.feedparser.BufferedSubFile.push_eof_matcher": [], "email.feedparser.BufferedSubFile.pop_eof_matcher": [], "email.feedparser.BufferedSubFile.close": ["email.feedparser.BufferedSubFile.pushlines"], "email.feedparser.BufferedSubFile.pushlines": [], "email.feedparser.BufferedSubFile.readline": ["<builtin>.reversed"], "email.feedparser.BufferedSubFile.unreadline": [], "email.feedparser.BufferedSubFile.push": ["email.feedparser.BufferedSubFile.pushlines"], "email.feedparser.BufferedSubFile.__iter__": [], "email.feedparser.BufferedSubFile.__next__": ["email.feedparser.BufferedSubFile.readline"], "email.feedparser.FeedParser": [], "email.feedparser.FeedParser._parsegen": ["re.escape", "<builtin>.isinstance", "email.feedparser.BufferedSubFile.__next__", "email.feedparser.FeedParser._pop_message", "email.feedparser.BufferedSubFile.readline", "email.message.Message.get_boundary", "email.message.Message.get_content_maintype", "email.feedparser.BufferedSubFile.pop_eof_matcher", "email.feedparser.FeedParser._parse_headers", "email.message.Message.get_content_type", "<builtin>.str", "email.feedparser.BufferedSubFile.push_eof_matcher", "email.message.Message.get", "email.errors.MessageDefect.__init__", "email.feedparser.FeedParser._new_message", "email.feedparser.FeedParser._parsegen", "<builtin>.len", "email.message.Message.set_payload", "email._policybase.Policy.handle_defect", "email.feedparser.BufferedSubFile.__iter__", "email.feedparser.BufferedSubFile.unreadline", "re.compile"], "email.feedparser.FeedParser._call_parse": [], "email.feedparser.FeedParser._pop_message": [], "email.feedparser.FeedParser._new_message": ["email.message.MIMEPart.__init__", "email.message.Message.__init__", "email.message.Message.get_content_type", "email.message.Message.set_default_type"], "email.message.Message.get_content_type": ["email.message.Message.get", "email.message.Message.get_default_type", "email.message._splitparam", "<builtin>.object"], "email.message.Message.set_default_type": [], "email.feedparser.FeedParser._parse_headers": ["email.errors.MessageDefect.__init__", "<builtin>.enumerate", "<builtin>.len", "email.errors.HeaderDefect.__init__", "email.feedparser.BufferedSubFile.unreadline", "email.message.Message.set_unixfrom", "email.message.Message.set_raw", "email._policybase.Policy.handle_defect", "email._policybase.Compat32.header_source_parse"], "email.message.Message.set_payload": ["email.message.Message.set_charset", "email.charset.Charset.__init__", "<builtin>.isinstance", "<builtin>.hasattr"], "email.message.Message.get_content_maintype": ["email.message.Message.get_content_type"], "email.message.Message.get_boundary": ["email.utils.collapse_rfc2231_value", "email.message.Message.get_param", "<builtin>.object"], "email.message.Message.get": ["email._policybase.Compat32.header_fetch_parse"], "email.message.Message.set_raw": [], "email.message.Message.set_unixfrom": [], "email.feedparser.BytesFeedParser": [], "email.feedparser.BytesFeedParser.feed": ["<builtin>.super"], "email.message._splitparam": ["<builtin>.str"], "email.message._formatparam": ["email.utils.quote", "email.utils.encode_rfc2231", "<builtin>.isinstance", "<builtin>.len"], "email.utils.quote": [], "email.message._parseparam": ["<builtin>.str", "<builtin>.len"], "email.message._unquotevalue": ["email.utils.unquote", "<builtin>.isinstance"], "email.message.Message.__str__": ["email.message.Message.as_string"], "email.generator.Generator.__init__": [], "email.generator.Generator.flatten": ["email.generator.Generator._write", "email.generator.Generator._encode", "email.generator.BytesGenerator.write", "email.message.Message.get_unixfrom", "time.ctime", "email.generator.Generator.write", "time.time", "email.generator.BytesGenerator._encode"], "email.message.Message.__bytes__": ["email.message.Message.as_bytes"], "email.message.Message.is_multipart": ["<builtin>.isinstance"], "email.message.Message.get_unixfrom": [], "email.message.Message.attach": ["<builtin>.TypeError"], "email.message.Message.get_payload": ["email.message.Message.get", "<builtin>.str", "email.message.Message.get_param", "email._encoded_words.decode_b", "_io.BytesIO", "<builtin>.isinstance", "<builtin>.TypeError", "email.message.Message.is_multipart", "uu.decode", "email.utils._has_surrogates", "<builtin>.type", "quopri.decodestring", "email._policybase.Policy.handle_defect"], "email.message.Message.get_param": ["email.message._unquotevalue", "email.message.Message._get_params_preserve"], "email._encoded_words.decode_b": ["base64.b64decode", "email.errors.MessageDefect.__init__", "<builtin>.len"], "uu.decode": ["sys.stdout.buffer.write", "sys.stderr.write", "posixpath.exists", "<builtin>.isinstance", "<builtin>.len", "<builtin>.open", "ntpath.exists", "sys.stdin.buffer.readline", "<builtin>.int"], "email.message.Message.set_charset": ["email.charset.Charset.__init__", "<builtin>.isinstance", "email.message.Message.set_param", "email.message.Message.add_header", "email.message.Message.del_param"], "email.message.Message.del_param": ["email.message._formatparam", "email.message.Message.get", "email.message.Message.get_params"], "email.message.Message.add_header": ["email.message._formatparam"], "email.message.Message.set_param": ["email.message.Message.get", "email.message.Message.replace_header", "email.message.Message.get_param", "<builtin>.isinstance", "email.message._formatparam", "email.message.Message.get_params"], "email.message.Message.get_charset": [], "email.message.Message.__len__": ["<builtin>.len"], "email.message.Message.__getitem__": ["email.message.Message.get"], "email.message.Message.__setitem__": ["email._policybase.Compat32.header_store_parse", "email.policy.EmailPolicy.header_max_count", "email._policybase.Policy.header_max_count", "<builtin>.ValueError"], "email.policy.EmailPolicy.header_max_count": [], "email.message.Message.__delitem__": [], "email.message.Message.__contains__": [], "email.message.Message.__iter__": [], "email.message.Message.keys": [], "email.message.Message.values": ["email._policybase.Compat32.header_fetch_parse"], "email.message.Message.items": ["email._policybase.Compat32.header_fetch_parse"], "email.message.Message.raw_items": ["<builtin>.iter"], "email.message.Message.get_all": ["email._policybase.Compat32.header_fetch_parse"], "email.message.Message.replace_header": ["email._policybase.Compat32.header_store_parse", "<builtin>.zip", "<builtin>.range", "<builtin>.len"], "email.message.Message.get_default_type": [], "email.message.Message.get_content_subtype": ["email.message.Message.get_content_type"], "email.message.Message._get_params_preserve": ["email.message.Message.get", "email.utils.decode_params", "email.message._parseparam", "<builtin>.object"], "email.message.Message.get_params": ["email.message._unquotevalue", "email.message.Message._get_params_preserve", "<builtin>.object"], "email.message.Message.set_type": ["email.message.Message.get_params", "email.message.Message.set_param"], "email.message.Message.get_filename": ["email.utils.collapse_rfc2231_value", "email.message.Message.get_param", "<builtin>.object"], "email.message.Message.set_boundary": ["email._policybase.Compat32.header_store_parse", "email.message.Message._get_params_preserve", "<builtin>.object"], "email.message.Message.get_content_charset": ["email.message.Message.get_param", "<builtin>.isinstance", "<builtin>.str", "<builtin>.object"], "email.message.Message.get_charsets": ["email.iterators.walk", "email.message.Message.walk"], "email.iterators.walk": [], "email.message.Message.walk": [], "email.message.Message.get_content_disposition": ["email.message.Message.get", "email.message._splitparam"], "email.message.MIMEPart": [], "email.message.MIMEPart.as_string": ["<builtin>.super"], "email.message.MIMEPart.__str__": ["email.message.MIMEPart.as_string", "email._policybase._PolicyBase.clone"], "email.message.MIMEPart.is_attachment": ["email.message.Message.get"], "email.message.MIMEPart._find_body": ["email.message.MIMEPart._find_body"], "email.message.MIMEPart.get_body": ["email.message.MIMEPart._find_body", "<builtin>.len"], "email.message.MIMEPart.iter_attachments": ["email.message.Message.get_payload", "email.message.Message.get_content_type", "email.message.Message.get_param"], "email.message.MIMEPart.iter_parts": ["email.message.Message.get_content_maintype", "email.message.Message.get_payload"], "email.message.MIMEPart.get_content": ["email.contentmanager.ContentManager.get_content"], "email.contentmanager.ContentManager.get_content": ["<builtin>.KeyError"], "email.message.MIMEPart.set_content": ["email.contentmanager.ContentManager.set_content"], "email.contentmanager.ContentManager.set_content": ["<builtin>.TypeError", "email.contentmanager.ContentManager._find_set_handler"], "email.message.MIMEPart._make_multipart": ["email.message.Message.get_content_subtype", "email.message.Message.get_content_maintype", "email.message.Message.set_param", "<builtin>.ValueError", "<builtin>.type"], "email.message.MIMEPart.make_related": ["email.message.MIMEPart._make_multipart"], "email.message.MIMEPart.make_alternative": ["email.message.MIMEPart._make_multipart"], "email.message.MIMEPart.make_mixed": ["email.message.MIMEPart._make_multipart"], "email.message.MIMEPart._add_multipart": ["email.message.Message.get_content_subtype", "email.message.Message.get_content_maintype", "email.message.Message.attach", "<builtin>.type", "<builtin>.getattr"], "email.message.MIMEPart.add_related": ["email.message.MIMEPart._add_multipart"], "email.message.MIMEPart.add_alternative": ["email.message.MIMEPart._add_multipart"], "email.message.MIMEPart.add_attachment": ["email.message.MIMEPart._add_multipart"], "email.message.MIMEPart.clear": [], "email.message.MIMEPart.clear_content": [], "email.message.EmailMessage": [], "email.message.EmailMessage.set_content": ["<builtin>.super"], "email.policy.EmailPolicy": ["email.headerregistry.HeaderRegistry.__init__"], "email.headerregistry.HeaderRegistry.__init__": [], "email.policy.EmailPolicy.__init__": ["email.headerregistry.HeaderRegistry.__init__", "<builtin>.super"], "email.policy.EmailPolicy.header_source_parse": [], "email.policy.EmailPolicy.header_store_parse": ["<builtin>.isinstance", "<builtin>.len", "email.headerregistry.HeaderRegistry.__init__", "<builtin>.ValueError", "<builtin>.hasattr"], "email.policy.EmailPolicy.header_fetch_parse": ["email.headerregistry.HeaderRegistry.__init__", "<builtin>.hasattr"], "email.policy.EmailPolicy.fold": ["email.policy.EmailPolicy._fold"], "email.policy.EmailPolicy._fold": ["<builtin>.any", "<builtin>.len", "email.headerregistry.HeaderRegistry.__init__", "email.utils._has_surrogates", "<builtin>.hasattr"], "email.policy.EmailPolicy.fold_binary": ["email.policy.EmailPolicy._fold"], "email.headerregistry.Address": [], "email.headerregistry.Address.__init__": ["<builtin>.TypeError", "email._header_value_parser.get_addr_spec", "<builtin>.ValueError"], "email._header_value_parser.get_addr_spec": ["email._header_value_parser.get_domain", "email._header_value_parser.TokenList.__init__", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_local_part"], "email.headerregistry.Address.display_name": [], "email.headerregistry.Address.username": [], "email.headerregistry.Address.domain": [], "email.headerregistry.Address.addr_spec": ["<builtin>.set", "email._header_value_parser.quote_string", "<builtin>.len"], "email._header_value_parser.quote_string": ["<builtin>.str"], "email.headerregistry.Address.__repr__": [], "email.headerregistry.Address.__str__": ["<builtin>.set", "email._header_value_parser.quote_string", "<builtin>.len"], "email.headerregistry.Address.__eq__": ["<builtin>.type"], "email.headerregistry.Group": [], "email.headerregistry.Group.__init__": ["<builtin>.tuple"], "email.headerregistry.Group.display_name": [], "email.headerregistry.Group.addresses": [], "email.headerregistry.Group.__repr__": [], "email.headerregistry.Group.__str__": ["<builtin>.set", "email._header_value_parser.quote_string", "<builtin>.str", "<builtin>.len"], "email.headerregistry.Group.__eq__": ["<builtin>.type"], "email.headerregistry.BaseHeader": [], "email.headerregistry.BaseHeader.__new__": ["email.utils._sanitize", "email.utils._has_surrogates"], "email.headerregistry.BaseHeader.init": [], "email.headerregistry.BaseHeader.name": [], "email.headerregistry.BaseHeader.defects": ["<builtin>.tuple"], "email.headerregistry.BaseHeader.__reduce__": ["<builtin>.str"], "email.headerregistry.BaseHeader._reconstruct": [], "email.headerregistry.BaseHeader.fold": ["email._header_value_parser.MsgID.fold", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.TokenList.fold"], "email._header_value_parser.TokenList.__init__": ["<builtin>.super"], "email._header_value_parser.TokenList.fold": ["email._header_value_parser._refold_parse_tree"], "email._header_value_parser.MsgID.fold": ["<builtin>.str"], "email.headerregistry._reconstruct_header": ["<builtin>.type"], "email.headerregistry.UnstructuredHeader": ["<builtin>.staticmethod"], "<builtin>.staticmethod": [], "email.headerregistry.UnstructuredHeader.parse": ["<builtin>.str"], "email.headerregistry.UniqueUnstructuredHeader": [], "email.headerregistry.DateHeader": ["<builtin>.staticmethod"], "email.headerregistry.DateHeader.parse": ["email.utils.format_datetime", "<builtin>.isinstance", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email.utils.parsedate_to_datetime"], "email.headerregistry.DateHeader.init": ["<builtin>.super"], "email.headerregistry.DateHeader.datetime": [], "email.headerregistry.UniqueDateHeader": [], "email.headerregistry.AddressHeader": [], "email.headerregistry.AddressHeader.value_parser": ["email._header_value_parser.get_address_list"], "email._header_value_parser.get_address_list": ["email._header_value_parser.get_invalid_mailbox", "email._header_value_parser.get_address", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email.headerregistry.AddressHeader.parse": ["email.headerregistry.Address.__init__", "<builtin>.isinstance", "<builtin>.list", "email.headerregistry.Group.__init__", "email.headerregistry.AddressHeader.value_parser", "<builtin>.str", "<builtin>.hasattr"], "email.headerregistry.AddressHeader.init": ["<builtin>.tuple", "<builtin>.super"], "email.headerregistry.AddressHeader.groups": [], "email.headerregistry.AddressHeader.addresses": ["<builtin>.tuple"], "email.headerregistry.UniqueAddressHeader": [], "email.headerregistry.SingleAddressHeader": [], "email.headerregistry.SingleAddressHeader.address": ["<builtin>.ValueError", "<builtin>.len"], "email.headerregistry.UniqueSingleAddressHeader": [], "email.headerregistry.MIMEVersionHeader": ["<builtin>.staticmethod"], "email.headerregistry.MIMEVersionHeader.parse": ["<builtin>.str"], "email.headerregistry.MIMEVersionHeader.init": ["<builtin>.super"], "email.headerregistry.MIMEVersionHeader.major": [], "email.headerregistry.MIMEVersionHeader.minor": [], "email.headerregistry.MIMEVersionHeader.version": [], "email.headerregistry.ParameterizedMIMEHeader": [], "email.headerregistry.ParameterizedMIMEHeader.parse": ["email.utils._sanitize", "<builtin>.str"], "email.headerregistry.ParameterizedMIMEHeader.init": ["<builtin>.super"], "email.headerregistry.ParameterizedMIMEHeader.params": [], "email.headerregistry.ContentTypeHeader": ["<builtin>.staticmethod"], "email.headerregistry.ContentTypeHeader.init": ["<builtin>.super", "email.utils._sanitize"], "email.headerregistry.ContentTypeHeader.maintype": [], "email.headerregistry.ContentTypeHeader.subtype": [], "email.headerregistry.ContentTypeHeader.content_type": [], "email.headerregistry.ContentDispositionHeader": ["<builtin>.staticmethod"], "email.headerregistry.ContentDispositionHeader.init": ["<builtin>.super", "email.utils._sanitize"], "email.headerregistry.ContentDispositionHeader.content_disposition": [], "email.headerregistry.ContentTransferEncodingHeader": ["<builtin>.staticmethod"], "email.headerregistry.ContentTransferEncodingHeader.parse": ["<builtin>.str"], "email.headerregistry.ContentTransferEncodingHeader.init": ["<builtin>.super", "email.utils._sanitize"], "email.headerregistry.ContentTransferEncodingHeader.cte": [], "email.headerregistry.MessageIDHeader": ["<builtin>.staticmethod"], "email.headerregistry.MessageIDHeader.parse": ["<builtin>.str"], "email.headerregistry.HeaderRegistry": [], "email.headerregistry.HeaderRegistry.map_to_type": [], "email.headerregistry.HeaderRegistry.__getitem__": ["<builtin>.type"], "email.headerregistry.HeaderRegistry.__call__": [], "email._header_value_parser.TokenList": [], "email._header_value_parser.TokenList.__str__": ["<builtin>.str"], "email._header_value_parser.TokenList.__repr__": ["<builtin>.super"], "email._header_value_parser.TokenList.value": [], "email._header_value_parser.TokenList.all_defects": ["<builtin>.sum"], "email._header_value_parser.TokenList.startswith_fws": [], "email._header_value_parser.TokenList.as_ew_allowed": ["<builtin>.all"], "email._header_value_parser.TokenList.comments": [], "email._header_value_parser._refold_parse_tree": ["email._header_value_parser._fold_mime_parameters", "<builtin>.any", "email._header_value_parser._steal_trailing_WSP_if_exists", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "email._header_value_parser._fold_as_ew", "<builtin>.set", "<builtin>.str", "<builtin>.hasattr"], "email._header_value_parser.TokenList.pprint": ["email._header_value_parser.TokenList.ppstr", "<builtin>.print"], "email._header_value_parser.TokenList.ppstr": ["email._header_value_parser.TokenList._pp"], "email._header_value_parser.TokenList._pp": ["email._header_value_parser.TokenList._pp", "<builtin>.hasattr"], "email._header_value_parser.WhiteSpaceTokenList": [], "email._header_value_parser.WhiteSpaceTokenList.value": [], "email._header_value_parser.WhiteSpaceTokenList.comments": [], "email._header_value_parser.UnstructuredTokenList": [], "email._header_value_parser.Phrase": [], "email._header_value_parser.Word": [], "email._header_value_parser.CFWSList": [], "email._header_value_parser.Atom": [], "email._header_value_parser.Token": [], "email._header_value_parser.EncodedWord": [], "email._header_value_parser.QuotedString": [], "email._header_value_parser.QuotedString.content": [], "email._header_value_parser.QuotedString.quoted_value": ["<builtin>.str"], "email._header_value_parser.QuotedString.stripped_value": [], "email._header_value_parser.BareQuotedString": [], "email._header_value_parser.BareQuotedString.__str__": ["email._header_value_parser.quote_string", "<builtin>.str"], "email._header_value_parser.BareQuotedString.value": ["<builtin>.str"], "email._header_value_parser.Comment": [], "email._header_value_parser.Comment.__str__": ["<builtin>.sum"], "email._header_value_parser.Comment.quote": ["<builtin>.str"], "email._header_value_parser.Comment.content": ["<builtin>.str"], "email._header_value_parser.Comment.comments": [], "email._header_value_parser.AddressList": [], "email._header_value_parser.AddressList.addresses": [], "email._header_value_parser.AddressList.mailboxes": ["<builtin>.sum"], "email._header_value_parser.AddressList.all_mailboxes": ["<builtin>.sum"], "email._header_value_parser.Address": [], "email._header_value_parser.Address.display_name": [], "email._header_value_parser.Address.mailboxes": [], "email._header_value_parser.Address.all_mailboxes": [], "email._header_value_parser.MailboxList": [], "email._header_value_parser.MailboxList.mailboxes": [], "email._header_value_parser.MailboxList.all_mailboxes": [], "email._header_value_parser.GroupList": [], "email._header_value_parser.GroupList.mailboxes": [], "email._header_value_parser.GroupList.all_mailboxes": [], "email._header_value_parser.Group": [], "email._header_value_parser.Group.mailboxes": [], "email._header_value_parser.Group.all_mailboxes": [], "email._header_value_parser.Group.display_name": [], "email._header_value_parser.NameAddr": [], "email._header_value_parser.NameAddr.display_name": ["<builtin>.len"], "email._header_value_parser.NameAddr.local_part": [], "email._header_value_parser.NameAddr.domain": [], "email._header_value_parser.NameAddr.route": [], "email._header_value_parser.NameAddr.addr_spec": [], "email._header_value_parser.AngleAddr": [], "email._header_value_parser.AngleAddr.local_part": [], "email._header_value_parser.AngleAddr.domain": [], "email._header_value_parser.AngleAddr.route": [], "email._header_value_parser.AngleAddr.addr_spec": ["email._header_value_parser.quote_string"], "email._header_value_parser.ObsRoute": [], "email._header_value_parser.ObsRoute.domains": [], "email._header_value_parser.Mailbox": [], "email._header_value_parser.Mailbox.display_name": [], "email._header_value_parser.Mailbox.local_part": [], "email._header_value_parser.Mailbox.domain": [], "email._header_value_parser.Mailbox.route": [], "email._header_value_parser.Mailbox.addr_spec": [], "email._header_value_parser.InvalidMailbox": [], "email._header_value_parser.InvalidMailbox.display_name": [], "email._header_value_parser.Domain": [], "email._header_value_parser.Domain.domain": ["<builtin>.super"], "email._header_value_parser.DotAtom": [], "email._header_value_parser.DotAtomText": [], "email._header_value_parser.NoFoldLiteral": [], "email._header_value_parser.AddrSpec": [], "email._header_value_parser.AddrSpec.local_part": [], "email._header_value_parser.AddrSpec.domain": ["<builtin>.len"], "email._header_value_parser.AddrSpec.value": ["<builtin>.len"], "email._header_value_parser.AddrSpec.addr_spec": ["<builtin>.set", "email._header_value_parser.quote_string", "<builtin>.len"], "email._header_value_parser.ObsLocalPart": [], "email._header_value_parser.DisplayName": [], "email._header_value_parser.DisplayName.display_name": ["email._header_value_parser.TokenList.__init__", "<builtin>.len"], "email._header_value_parser.DisplayName.value": ["email._header_value_parser.quote_string", "<builtin>.super", "<builtin>.len"], "email._header_value_parser.LocalPart": [], "email._header_value_parser.LocalPart.value": [], "email._header_value_parser.LocalPart.local_part": ["email._header_value_parser.TokenList.__init__", "<builtin>.isinstance"], "email._header_value_parser.DomainLiteral": [], "email._header_value_parser.DomainLiteral.domain": ["<builtin>.super"], "email._header_value_parser.DomainLiteral.ip": [], "email._header_value_parser.MIMEVersion": [], "email._header_value_parser.Parameter": [], "email._header_value_parser.Parameter.section_number": [], "email._header_value_parser.Parameter.param_value": [], "email._header_value_parser.InvalidParameter": [], "email._header_value_parser.Attribute": [], "email._header_value_parser.Attribute.stripped_value": [], "email._header_value_parser.Section": [], "email._header_value_parser.Value": [], "email._header_value_parser.Value.stripped_value": [], "email._header_value_parser.MimeParameters": [], "email._header_value_parser.MimeParameters.params": ["operator.itemgetter.__init__", "email.errors.MessageDefect.__init__", "<builtin>.sorted", "email.errors.HeaderDefect.__init__", "<builtin>.len", "email.utils._has_surrogates", "urllib.parse.unquote", "urllib.parse.unquote_to_bytes"], "email._header_value_parser.MimeParameters.__str__": ["email._header_value_parser.quote_string"], "email._header_value_parser.ParameterizedHeaderValue": [], "email._header_value_parser.ParameterizedHeaderValue.params": ["<builtin>.reversed"], "email._header_value_parser.ContentType": [], "email._header_value_parser.ContentDisposition": [], "email._header_value_parser.ContentTransferEncoding": [], "email._header_value_parser.HeaderLabel": [], "email._header_value_parser.MsgID": [], "email._header_value_parser.MessageID": [], "email._header_value_parser.InvalidMessageID": [], "email._header_value_parser.Header": [], "email._header_value_parser.Terminal": [], "email._header_value_parser.Terminal.__new__": ["<builtin>.super"], "email._header_value_parser.Terminal.__repr__": ["<builtin>.super"], "email._header_value_parser.Terminal.pprint": ["<builtin>.print"], "email._header_value_parser.Terminal.all_defects": ["<builtin>.list"], "email._header_value_parser.Terminal._pp": ["<builtin>.super"], "email._header_value_parser.Terminal.pop_trailing_ws": [], "email._header_value_parser.Terminal.comments": [], "email._header_value_parser.Terminal.__getnewargs__": ["<builtin>.str"], "email._header_value_parser.WhiteSpaceTerminal": [], "email._header_value_parser.WhiteSpaceTerminal.value": [], "email._header_value_parser.WhiteSpaceTerminal.startswith_fws": [], "email._header_value_parser.ValueTerminal": [], "email._header_value_parser.ValueTerminal.value": [], "email._header_value_parser.ValueTerminal.startswith_fws": [], "email._header_value_parser.EWWhiteSpaceTerminal": [], "email._header_value_parser.EWWhiteSpaceTerminal.value": [], "email._header_value_parser.EWWhiteSpaceTerminal.__str__": [], "email._header_value_parser._InvalidEwError": [], "email._header_value_parser._validate_xtext": ["email.utils._has_surrogates", "email.errors.NonPrintableDefect.__init__", "email.errors.MessageDefect.__init__"], "email._header_value_parser._get_ptext_to_endchars": ["<builtin>.range", "<builtin>.len"], "email._header_value_parser.get_fws": ["<builtin>.len"], "email._header_value_parser.get_encoded_word": ["email._encoded_words.decode", "email._header_value_parser.get_fws", "email.errors.HeaderDefect.__init__", "<builtin>.len", "email._header_value_parser.TokenList.__init__", "email._header_value_parser._validate_xtext"], "email._encoded_words.decode": ["email.errors.MessageDefect.__init__"], "email._header_value_parser.get_unstructured": ["email._header_value_parser.get_fws", "email.errors.HeaderDefect.__init__", "<builtin>.len", "email._header_value_parser.get_encoded_word", "email._header_value_parser.TokenList.__init__", "email._header_value_parser._validate_xtext"], "email._header_value_parser.get_qp_ctext": ["email._header_value_parser._get_ptext_to_endchars", "email._header_value_parser._validate_xtext"], "email._header_value_parser.get_qcontent": ["email._header_value_parser._get_ptext_to_endchars", "email._header_value_parser._validate_xtext"], "email._header_value_parser.get_atext": ["email._header_value_parser._validate_xtext", "<builtin>.len"], "email._header_value_parser.get_bare_quoted_string": ["email._header_value_parser.get_fws", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_encoded_word", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_qcontent"], "email._header_value_parser.get_comment": ["email._header_value_parser.get_comment", "email._header_value_parser.get_fws", "email._header_value_parser.get_qp_ctext", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__"], "email._header_value_parser.get_cfws": ["email._header_value_parser.get_fws", "email._header_value_parser.get_comment", "email._header_value_parser.TokenList.__init__"], "email._header_value_parser.get_quoted_string": ["email._header_value_parser.get_bare_quoted_string", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_atom": ["email._header_value_parser.get_atext", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_encoded_word"], "email._header_value_parser.get_dot_atom_text": ["email._header_value_parser.get_atext", "email._header_value_parser.TokenList.__init__"], "email._header_value_parser.get_dot_atom": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_dot_atom_text", "email._header_value_parser.get_cfws", "email._header_value_parser.get_encoded_word"], "email._header_value_parser.get_word": ["email._header_value_parser.get_atom", "email._header_value_parser.get_quoted_string", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_phrase": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_word", "email._header_value_parser.get_cfws", "email.errors.HeaderDefect.__init__"], "email._header_value_parser.get_local_part": ["email._header_value_parser.get_obs_local_part", "email._header_value_parser.get_word", "email._header_value_parser.get_dot_atom", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "<builtin>.str", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_obs_local_part": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_word", "email._header_value_parser.get_cfws", "email.errors.HeaderDefect.__init__"], "email._header_value_parser.get_dtext": ["email._header_value_parser._validate_xtext", "email._header_value_parser._get_ptext_to_endchars", "email.errors.HeaderDefect.__init__"], "email._header_value_parser._check_for_early_dl_end": ["email.errors.HeaderDefect.__init__"], "email._header_value_parser.get_domain_literal": ["email._header_value_parser.get_fws", "email._header_value_parser.get_dtext", "email._header_value_parser.TokenList.__init__", "email._header_value_parser._check_for_early_dl_end", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_domain": ["email._header_value_parser.get_dot_atom", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_atom", "email._header_value_parser.get_domain_literal", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_obs_route": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_domain"], "email._header_value_parser.get_angle_addr": ["email._header_value_parser.get_addr_spec", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_obs_route", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_display_name": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_phrase"], "email._header_value_parser.get_name_addr": ["email._header_value_parser.get_angle_addr", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_display_name"], "email._header_value_parser.get_mailbox": ["<builtin>.any", "<builtin>.isinstance", "email._header_value_parser.get_addr_spec", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_name_addr"], "email._header_value_parser.get_invalid_mailbox": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_phrase"], "email._header_value_parser.get_mailbox_list": ["email._header_value_parser.get_invalid_mailbox", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_mailbox", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_group_list": ["email._header_value_parser.get_mailbox_list", "<builtin>.len", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_group": ["email._header_value_parser.get_group_list", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_display_name"], "email._header_value_parser.get_address": ["email._header_value_parser.get_mailbox", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_group"], "email._header_value_parser.get_no_fold_literal": ["email._header_value_parser.get_dtext", "email._header_value_parser.TokenList.__init__"], "email._header_value_parser.get_msg_id": ["email._header_value_parser.get_obs_local_part", "email._header_value_parser.get_domain", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_no_fold_literal", "email._header_value_parser.get_dot_atom_text", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.parse_message_id": ["email._header_value_parser.get_unstructured", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_msg_id", "email.errors.HeaderDefect.__init__"], "email._header_value_parser.parse_mime_version": ["email._header_value_parser.TokenList.__init__", "<builtin>.int", "email._header_value_parser.get_cfws", "email.errors.HeaderDefect.__init__"], "email._header_value_parser.get_invalid_parameter": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_phrase"], "email._header_value_parser.get_ttext": ["email._header_value_parser._validate_xtext", "<builtin>.len"], "email._header_value_parser.get_token": ["email._header_value_parser.get_ttext", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_attrtext": ["email._header_value_parser._validate_xtext", "<builtin>.len"], "email._header_value_parser.get_attribute": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws", "email._header_value_parser.get_attrtext"], "email._header_value_parser.get_extended_attrtext": ["email._header_value_parser._validate_xtext", "<builtin>.len"], "email._header_value_parser.get_extended_attribute": ["email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_extended_attrtext", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_section": ["email._header_value_parser.TokenList.__init__", "<builtin>.int"], "email._header_value_parser.get_value": ["email._header_value_parser.get_quoted_string", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_extended_attribute", "email._header_value_parser.get_cfws"], "email._header_value_parser.get_parameter": ["email._header_value_parser.get_quoted_string", "email._header_value_parser.get_attribute", "email._header_value_parser.get_fws", "email._header_value_parser.get_section", "email.errors.HeaderDefect.__init__", "email._header_value_parser.get_attrtext", "email._header_value_parser.get_value", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_extended_attrtext", "email._header_value_parser.get_cfws", "email._header_value_parser.get_qcontent"], "email._header_value_parser.parse_mime_parameters": ["email._header_value_parser.get_invalid_parameter", "email._header_value_parser.get_parameter", "email.errors.HeaderDefect.__init__", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_cfws"], "email._header_value_parser._find_mime_parameters": ["email._header_value_parser.parse_mime_parameters", "email._header_value_parser.get_phrase"], "email._header_value_parser.parse_content_type_header": ["email._header_value_parser.get_token", "email.errors.HeaderDefect.__init__", "email._header_value_parser._find_mime_parameters", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.parse_mime_parameters"], "email._header_value_parser.parse_content_disposition_header": ["email._header_value_parser.get_token", "email.errors.HeaderDefect.__init__", "email._header_value_parser._find_mime_parameters", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.parse_mime_parameters"], "email._header_value_parser.parse_content_transfer_encoding_header": ["email._header_value_parser.get_phrase", "email._header_value_parser.TokenList.__init__", "email._header_value_parser.get_token", "email.errors.HeaderDefect.__init__"], "email._header_value_parser._steal_trailing_WSP_if_exists": [], "email._header_value_parser._fold_mime_parameters": ["urllib.parse.quote", "email._header_value_parser.quote_string", "<builtin>.len", "email.utils._has_surrogates", "<builtin>.str"], "email._header_value_parser._fold_as_ew": ["email._encoded_words.encode", "email._header_value_parser.get_unstructured", "email._header_value_parser._steal_trailing_WSP_if_exists", "<builtin>.len", "<builtin>.str"], "email._encoded_words.encode": [], "email._encoded_words.<lambda1>": [], "email._encoded_words.decode_q": ["_functools.partial"], "email._encoded_words._QByteMap": [], "email._encoded_words._QByteMap.__missing__": ["<builtin>.chr"], "email._encoded_words.encode_q": [], "email._encoded_words.len_q": ["<builtin>.sum", "<builtin>.len"], "email._encoded_words.encode_b": ["base64.b64encode"], "email._encoded_words.len_b": ["<builtin>.divmod", "<builtin>.len"], "operator.lt": [], "operator.le": [], "operator.eq": [], "operator.ne": [], "operator.ge": [], "operator.gt": [], "operator.not_": [], "operator.truth": [], "operator.is_": [], "operator.is_not": [], "operator.abs": ["builtins.abs"], "builtins.abs": [], "operator.add": [], "operator.and_": [], "operator.floordiv": [], "operator.index": [], "operator.inv": [], "operator.lshift": [], "operator.mod": [], "operator.mul": [], "operator.matmul": [], "operator.neg": [], "operator.or_": [], "operator.pos": [], "operator.pow": [], "operator.rshift": [], "operator.sub": [], "operator.truediv": [], "operator.xor": [], "operator.concat": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.hasattr"], "operator.contains": [], "operator.countOf": [], "operator.delitem": [], "operator.getitem": [], "operator.indexOf": ["<builtin>.enumerate"], "operator.setitem": [], "operator.length_hint": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.len", "<builtin>.ValueError", "<builtin>.type"], "operator.attrgetter": [], "operator.attrgetter.__init__.func": ["<builtin>.tuple", "<builtin>.getattr"], "operator.attrgetter.__call__": ["operator.attrgetter.__init__.func"], "operator.attrgetter.__repr__": ["<builtin>.map"], "operator.attrgetter.__reduce__": [], "operator.itemgetter": [], "operator.itemgetter.__init__.func": ["<builtin>.tuple"], "operator.itemgetter.__call__": ["operator.itemgetter.__init__.func"], "operator.itemgetter.__repr__": ["<builtin>.map"], "operator.itemgetter.__reduce__": [], "operator.methodcaller": [], "operator.methodcaller.__call__": ["<builtin>.getattr"], "operator.methodcaller.__repr__": ["<builtin>.map", "<builtin>.repr"], "operator.iadd": [], "operator.iand": [], "operator.iconcat": ["<builtin>.type", "<builtin>.TypeError", "<builtin>.hasattr"], "operator.ifloordiv": [], "operator.ilshift": [], "operator.imod": [], "operator.imul": [], "operator.imatmul": [], "operator.ior": [], "operator.ipow": [], "operator.irshift": [], "operator.isub": [], "operator.itruediv": [], "operator.ixor": [], "email.contentmanager.ContentManager": [], "email.contentmanager.ContentManager.__init__": [], "email.contentmanager.ContentManager.add_get_handler": [], "email.contentmanager.ContentManager.add_set_handler": [], "email.contentmanager.ContentManager._find_set_handler": ["<builtin>.KeyError", "<builtin>.type", "<builtin>.getattr"], "email.contentmanager.get_text_content": [], "email.contentmanager.get_non_text_content": [], "email.contentmanager.get_message_content": [], "email.contentmanager.get_and_fixup_unknown_message_content": ["<builtin>.bytes"], "email.contentmanager._prepare_set": ["<builtin>.ValueError", "<builtin>.hasattr"], "email.contentmanager._finalize_set": [], "email.contentmanager._encode_base64": ["<builtin>.range", "<builtin>.len"], "email.contentmanager._encode_text": ["email.quoprimime.body_encode", "<builtin>.max", "email.contentmanager._encode_text.embedded_body", "email.contentmanager._encode_text.normal_body", "email.contentmanager._encode_base64", "<builtin>.len", "<builtin>.ValueError"], "email.contentmanager._encode_text.embedded_body": [], "email.contentmanager._encode_text.normal_body": [], "email.contentmanager.set_text_content": ["email.contentmanager._finalize_set", "email.contentmanager._encode_text", "email.contentmanager._prepare_set"], "email.contentmanager.set_message_content": ["email.contentmanager._finalize_set", "<builtin>.ValueError", "email.contentmanager._prepare_set"], "email.contentmanager.set_bytes_content": ["email.contentmanager._finalize_set", "email.contentmanager._encode_base64", "email.contentmanager._prepare_set"], "email.iterators.body_line_iterator": ["_io.StringIO", "<builtin>.isinstance"], "email.iterators.typed_subpart_iterator": [], "email.iterators._structure": ["<builtin>.print", "email.iterators._structure"], "email.generator.Generator": [], "email.generator.Generator.write": ["email.generator.Generator.write", "email.generator.BytesGenerator.write"], "email.generator.BytesGenerator.write": ["email.generator.Generator.write", "email.generator.BytesGenerator.write"], "email.generator.Generator._encode": [], "email.generator.BytesGenerator._encode": [], "time.ctime": [], "email.generator.Generator._write": ["email.generator.Generator._dispatch", "copy.deepcopy", "email.message.Message.replace_header", "email.generator.BytesGenerator.write", "email.generator.Generator._write_headers", "email.generator.BytesGenerator._write_headers", "email.generator.Generator.write", "email.generator.Generator._new_buffer", "email.generator.BytesGenerator._new_buffer", "<builtin>.getattr"], "email.generator.Generator.clone": [], "email.generator.Generator._new_buffer": ["_io.StringIO"], "email.generator.Generator._write_lines": ["email.generator.Generator.write", "email.generator.BytesGenerator.write"], "email.generator.BytesGenerator._new_buffer": ["_io.BytesIO"], "email.generator.Generator._dispatch": ["email.message.Message.get_content_subtype", "email.message.Message.get_content_maintype", "email.generator.BytesGenerator._handle_text", "email.generator.Generator._handle_text", "<builtin>.getattr"], "email.generator.BytesGenerator._write_headers": ["email.generator.Generator.write", "email.message.Message.raw_items", "email.generator.BytesGenerator.write"], "email.generator.Generator._write_headers": ["email.generator.Generator.write", "email.message.Message.raw_items", "email.generator.BytesGenerator.write"], "email.generator.Generator._handle_text": ["copy.deepcopy", "email.generator.Generator._write_lines", "email.message.Message.get_param", "<builtin>.isinstance", "<builtin>.TypeError", "email.utils._has_surrogates", "email.message.Message.set_payload", "<builtin>.type", "email.message.Message.get_payload"], "email.generator.BytesGenerator._handle_text": ["email.generator.Generator._write_lines", "email.utils._has_surrogates", "<builtin>.super"], "email.generator.Generator._handle_multipart": ["email.generator.Generator.clone", "<builtin>.isinstance", "email.generator.BytesGenerator.write", "email.generator.Generator._make_boundary", "email.generator.Generator.write", "email.generator.Generator._new_buffer", "email.generator.BytesGenerator._new_buffer", "email.generator.Generator._write_lines"], "email.generator.Generator._make_boundary": ["email.generator.Generator._compile_re", "re.escape", "<builtin>.str", "email.generator.BytesGenerator._compile_re"], "email.generator.Generator._handle_multipart_signed": ["email.generator.Generator._handle_multipart"], "email.generator.Generator._handle_message_delivery_status": ["email.generator.Generator.clone", "email.generator.BytesGenerator.write", "email.generator.Generator.write", "email.generator.Generator._new_buffer", "email.generator.BytesGenerator._new_buffer"], "email.generator.Generator._handle_message": ["email.generator.Generator.clone", "email.generator.Generator._encode", "<builtin>.isinstance", "email.generator.BytesGenerator.write", "email.generator.Generator.write", "email.generator.Generator._new_buffer", "email.generator.BytesGenerator._new_buffer", "email.generator.BytesGenerator._encode"], "email.generator.Generator._compile_re": ["re.compile"], "email.generator.BytesGenerator._compile_re": ["re.compile"], "email.generator.BytesGenerator": [], "email.generator.DecodedGenerator": [], "email.generator.DecodedGenerator.__init__": ["email.generator.Generator.__init__"], "email.generator.DecodedGenerator._dispatch": ["<builtin>.print"], "uu.Error": [], "uu.encode": ["sys.stdout.buffer.write", "ntpath.basename", "posixpath.basename", "<builtin>.isinstance", "<builtin>.len", "<builtin>.open", "sys.stdin.buffer.read"], "optparse.OptionParser.__init__": ["optparse.OptionParser._populate_option_list", "optparse.IndentedHelpFormatter.__init__", "optparse.OptionParser._init_parsing_state", "optparse.HelpFormatter.set_parser", "optparse.OptionContainer.__init__", "optparse.OptionParser.set_usage"], "optparse.OptionContainer.add_option": ["optparse.OptionContainer._check_conflict", "<builtin>.isinstance", "<builtin>.len", "optparse.OptionGroup.__init__", "optparse.OptionParser.__init__", "<builtin>.TypeError"], "optparse.OptionParser.parse_args": ["optparse.OptionParser.get_default_values", "optparse.OptionParser.check_values", "optparse.OptionParser.error", "optparse.OptionParser._process_args", "optparse.OptionParser._get_args", "<builtin>.str"], "optparse.OptionParser.error": ["optparse.OptionParser.get_prog_name", "optparse.OptionParser.exit", "optparse.OptionParser.print_usage"], "optparse._repr": ["<builtin>.id"], "optparse.gettext": [], "optparse.ngettext": [], "optparse.OptParseError": [], "optparse.OptParseError.__init__": [], "optparse.OptParseError.__str__": [], "optparse.OptionError": [], "optparse.OptionError.__init__": ["<builtin>.str"], "optparse.OptionError.__str__": [], "optparse.OptionConflictError": [], "optparse.OptionValueError": [], "optparse.BadOptionError": [], "optparse.BadOptionError.__init__": [], "optparse.BadOptionError.__str__": ["gettext.gettext"], "optparse.AmbiguousOptionError": [], "optparse.AmbiguousOptionError.__init__": ["optparse.BadOptionError.__init__"], "optparse.AmbiguousOptionError.__str__": ["gettext.gettext"], "optparse.HelpFormatter": [], "optparse.HelpFormatter.__init__": ["<builtin>.max", "<builtin>.int", "<builtin>.min"], "optparse.HelpFormatter.set_parser": [], "optparse.HelpFormatter.set_short_opt_delimiter": ["<builtin>.ValueError"], "optparse.HelpFormatter.set_long_opt_delimiter": ["<builtin>.ValueError"], "optparse.HelpFormatter.indent": [], "optparse.HelpFormatter.dedent": [], "optparse.HelpFormatter.format_usage": ["<builtin>.NotImplementedError"], "optparse.HelpFormatter.format_heading": ["<builtin>.NotImplementedError"], "optparse.HelpFormatter._format_text": ["textwrap.fill", "<builtin>.max"], "optparse.HelpFormatter.format_description": ["optparse.HelpFormatter._format_text"], "optparse.HelpFormatter.format_epilog": ["optparse.HelpFormatter._format_text"], "optparse.HelpFormatter.expand_default": ["<builtin>.str"], "optparse.HelpFormatter.format_option": ["optparse.HelpFormatter.expand_default", "textwrap.wrap", "<builtin>.len"], "optparse.HelpFormatter.store_option_strings": ["<builtin>.max", "optparse.HelpFormatter.format_option_strings", "<builtin>.len", "<builtin>.min", "optparse.HelpFormatter.indent", "optparse.HelpFormatter.dedent"], "optparse.HelpFormatter.format_option_strings": [], "optparse.IndentedHelpFormatter": [], "optparse.IndentedHelpFormatter.__init__": ["optparse.HelpFormatter.__init__"], "optparse.IndentedHelpFormatter.format_usage": ["gettext.gettext"], "optparse.IndentedHelpFormatter.format_heading": [], "optparse.TitledHelpFormatter": [], "optparse.TitledHelpFormatter.__init__": ["optparse.HelpFormatter.__init__"], "optparse.TitledHelpFormatter.format_usage": ["gettext.gettext", "optparse.TitledHelpFormatter.format_heading"], "optparse.TitledHelpFormatter.format_heading": ["<builtin>.len"], "optparse._parse_num": [], "optparse._parse_int": ["optparse._parse_num"], "optparse.check_builtin": ["optparse.OptParseError.__init__", "gettext.gettext"], "optparse.check_choice": ["<builtin>.map", "optparse.OptParseError.__init__", "gettext.gettext"], "optparse.Option": [], "optparse.Option.__init__": ["optparse.Option._check_opt_strings", "optparse.Option._set_opt_strings", "optparse.Option._set_attrs"], "optparse.Option._check_opt_strings": ["<builtin>.TypeError"], "optparse.Option._set_opt_strings": ["optparse.OptionError.__init__", "<builtin>.len"], "optparse.Option._set_attrs": ["<builtin>.setattr", "optparse.OptionError.__init__", "<builtin>.sorted"], "optparse.Option._check_action": ["optparse.OptionError.__init__"], "optparse.Option._check_type": ["optparse.OptionError.__init__", "<builtin>.isinstance"], "optparse.Option._check_choice": ["<builtin>.str", "optparse.OptionError.__init__", "<builtin>.isinstance"], "optparse.Option._check_dest": [], "optparse.Option._check_const": ["optparse.OptionError.__init__"], "optparse.Option._check_nargs": ["optparse.OptionError.__init__"], "optparse.Option._check_callback": ["<builtin>.callable", "optparse.OptionError.__init__", "<builtin>.isinstance"], "optparse.Option.__str__": [], "optparse.Option.takes_value": [], "optparse.Option.get_opt_string": [], "optparse.Option.check_value": [], "optparse.Option.convert_value": ["optparse.Option.check_value", "<builtin>.tuple"], "optparse.Option.process": ["optparse.Option.take_action", "optparse.Option.convert_value"], "optparse.Option.take_action": ["<builtin>.setattr", "<builtin>.ValueError"], "optparse.Values": [], "optparse.Values.__init__": ["<builtin>.setattr"], "optparse.Values.__str__": ["<builtin>.str"], "optparse.Values.__eq__": ["<builtin>.isinstance"], "optparse.Values._update_careful": ["<builtin>.setattr", "<builtin>.dir"], "optparse.Values._update_loose": [], "optparse.Values._update": ["optparse.Values._update_loose", "optparse.Values._update_careful", "<builtin>.ValueError"], "optparse.Values.read_module": ["<builtin>.vars", "<builtin>.__import__", "optparse.Values._update"], "optparse.Values.read_file": ["<builtin>.exec", "<builtin>.open", "optparse.Values._update"], "optparse.Values.ensure_value": ["<builtin>.setattr", "<builtin>.getattr", "<builtin>.hasattr"], "optparse.OptionContainer": [], "optparse.OptionContainer.__init__": ["optparse.OptionGroup._create_option_list", "optparse.OptionContainer.set_conflict_handler", "optparse.OptionContainer.set_description", "optparse.OptionParser._create_option_list"], "optparse.OptionGroup._create_option_list": ["optparse.OptionContainer._share_option_mappings"], "optparse.OptionParser._create_option_list": ["optparse.OptionContainer._create_option_mappings"], "optparse.OptionContainer.set_conflict_handler": ["<builtin>.ValueError"], "optparse.OptionContainer.set_description": [], "optparse.OptionContainer._create_option_mappings": [], "optparse.OptionContainer._share_option_mappings": [], "optparse.OptionContainer.get_description": [], "optparse.OptionContainer.destroy": [], "optparse.OptionContainer._check_conflict": ["optparse.OptionError.__init__"], "optparse.OptionGroup.__init__": ["optparse.OptionContainer.__init__"], "optparse.OptionContainer.add_options": ["optparse.OptionContainer.add_option"], "optparse.OptionContainer.get_option": [], "optparse.OptionContainer.has_option": [], "optparse.OptionContainer.remove_option": ["<builtin>.ValueError"], "optparse.OptionContainer.format_option_help": [], "optparse.OptionContainer.format_description": ["optparse.OptionContainer.get_description", "optparse.OptionParser.get_description"], "optparse.OptionParser.get_description": ["optparse.OptionParser.expand_prog_name"], "optparse.OptionContainer.format_help": ["optparse.OptionContainer.format_description", "optparse.OptionParser.format_option_help", "optparse.OptionContainer.format_option_help"], "optparse.OptionParser.format_option_help": ["optparse.OptionContainer.format_option_help", "optparse.HelpFormatter.store_option_strings", "gettext.gettext", "optparse.IndentedHelpFormatter.format_heading", "optparse.HelpFormatter.indent", "optparse.OptionParser.format_option_help", "optparse.HelpFormatter.dedent"], "optparse.OptionGroup": [], "optparse.OptionGroup.set_title": [], "optparse.OptionGroup.destroy": ["optparse.OptionParser.destroy", "optparse.OptionContainer.destroy", "optparse.OptionGroup.destroy"], "optparse.OptionParser.destroy": ["optparse.OptionParser.destroy", "optparse.OptionContainer.destroy", "optparse.OptionGroup.destroy"], "optparse.OptionGroup.format_help": ["optparse.OptionGroup.format_help", "optparse.OptionParser.format_help", "optparse.OptionContainer.format_help"], "optparse.OptionParser.format_help": ["optparse.OptionParser.get_usage", "optparse.OptionContainer.format_description", "optparse.OptionParser.format_option_help", "optparse.OptionParser.format_epilog"], "optparse.OptionParser": [], "optparse.OptionParser.set_usage": ["gettext.gettext"], "optparse.OptionParser._populate_option_list": ["optparse.OptionContainer.add_options", "optparse.OptionParser._add_version_option", "optparse.OptionParser._add_help_option"], "optparse.OptionParser._init_parsing_state": [], "optparse.OptionParser._add_help_option": ["optparse.OptionContainer.add_option", "gettext.gettext"], "optparse.OptionParser._add_version_option": ["optparse.OptionContainer.add_option", "gettext.gettext"], "optparse.OptionParser.enable_interspersed_args": [], "optparse.OptionParser.disable_interspersed_args": [], "optparse.OptionParser.set_process_default_values": [], "optparse.OptionParser.set_default": [], "optparse.OptionParser.set_defaults": [], "optparse.OptionParser._get_all_options": [], "optparse.OptionParser.get_default_values": ["optparse.OptionParser._get_all_options", "optparse.Values.__init__", "<builtin>.isinstance"], "optparse.OptionParser.add_option_group": ["<builtin>.isinstance", "<builtin>.len", "optparse.OptionGroup.__init__", "<builtin>.ValueError", "<builtin>.TypeError"], "optparse.OptionParser.get_option_group": [], "optparse.OptionParser._get_args": [], "optparse.OptionParser._process_args": ["optparse.OptionParser._process_short_opts", "optparse.OptionParser._process_long_opt", "<builtin>.len"], "optparse.OptionParser.check_values": [], "optparse.OptionParser._process_long_opt": ["<builtin>.tuple", "optparse.OptionParser._match_long_opt", "gettext.gettext", "gettext.ngettext", "<builtin>.len", "optparse.OptionParser.error"], "optparse.OptionParser._process_short_opts": ["<builtin>.tuple", "optparse.BadOptionError.__init__", "gettext.ngettext", "<builtin>.len", "optparse.OptionParser.error"], "optparse.OptionParser._match_long_opt": ["optparse._match_abbrev"], "optparse._match_abbrev": ["optparse.BadOptionError.__init__", "optparse.AmbiguousOptionError.__init__", "<builtin>.len"], "optparse.OptionParser.get_prog_name": ["ntpath.basename", "posixpath.basename"], "optparse.OptionParser.expand_prog_name": ["optparse.OptionParser.get_prog_name"], "optparse.OptionParser.exit": ["sys.exit", "sys.stderr.write"], "optparse.OptionParser.print_usage": ["<builtin>.print", "optparse.OptionParser.get_usage"], "optparse.OptionParser.get_usage": ["optparse.IndentedHelpFormatter.format_usage", "optparse.OptionParser.expand_prog_name"], "optparse.OptionParser.get_version": ["optparse.OptionParser.expand_prog_name"], "optparse.OptionParser.print_version": ["<builtin>.print", "optparse.OptionParser.get_version"], "optparse.OptionParser.format_epilog": [], "optparse.OptionParser.print_help": ["optparse.OptionParser.format_help", "sys.stdout.write"], "importlib.abc._register": ["_bootstrap_external.FileLoader.register", "_bootstrap_external.SourceLoader.register", "<builtin>.getattr"], "_bootstrap_external.FileLoader.register": [], "_bootstrap_external.SourceLoader.register": [], "importlib.abc.Finder": ["abc.abstractmethod"], "importlib.abc.Finder.find_module": [], "importlib.abc.MetaPathFinder": [], "importlib.abc.MetaPathFinder.find_module": ["<builtin>.hasattr", "warnings.warn"], "importlib.abc.MetaPathFinder.invalidate_caches": [], "importlib.abc.PathEntryFinder": [], "importlib.abc.PathEntryFinder.find_loader": ["<builtin>.hasattr", "warnings.warn"], "importlib.abc.PathEntryFinder.invalidate_caches": [], "importlib.abc.Loader": [], "importlib.abc.Loader.create_module": [], "importlib.abc.Loader.load_module": ["_bootstrap._load_module_shim", "<builtin>.hasattr"], "_bootstrap._load_module_shim": [], "importlib.abc.Loader.module_repr": [], "importlib.abc.ResourceLoader": ["abc.abstractmethod"], "importlib.abc.ResourceLoader.get_data": [], "importlib.abc.InspectLoader": ["abc.abstractmethod"], "importlib.abc.InspectLoader.is_package": [], "importlib.abc.InspectLoader.get_code": ["importlib.abc.InspectLoader.source_to_code", "importlib.abc.InspectLoader.get_source"], "importlib.abc.InspectLoader.get_source": [], "importlib.abc.InspectLoader.source_to_code": ["<builtin>.compile"], "importlib.abc.ExecutionLoader": ["abc.abstractmethod"], "importlib.abc.ExecutionLoader.get_filename": [], "importlib.abc.ExecutionLoader.get_code": ["importlib.abc.InspectLoader.source_to_code", "importlib.abc.ExecutionLoader.get_filename", "importlib.abc.InspectLoader.get_source"], "importlib.abc.FileLoader": [], "importlib.abc.SourceLoader": [], "importlib.abc.SourceLoader.path_mtime": ["importlib.abc.SourceLoader.path_stats", "<builtin>.int"], "importlib.abc.SourceLoader.path_stats": ["importlib.abc.SourceLoader.path_mtime"], "importlib.abc.SourceLoader.set_data": [], "importlib.abc.ResourceReader": ["abc.abstractmethod"], "importlib.abc.ResourceReader.open_resource": [], "importlib.abc.ResourceReader.resource_path": [], "importlib.abc.ResourceReader.is_resource": [], "importlib.abc.ResourceReader.contents": [], "_frozen_importlib": ["_frozen_importlib.FrozenImporter", "<builtin>.object", "_frozen_importlib._ModuleLockManager", "_frozen_importlib.ModuleSpec", "_frozen_importlib.BuiltinImporter", "_frozen_importlib._ModuleLock", "_frozen_importlib._DummyModuleLock", "_frozen_importlib._ImportLockContext", "_frozen_importlib._DeadlockError"], "_frozen_importlib._wrap": ["<builtin>.setattr", "<builtin>.getattr", "<builtin>.hasattr"], "_frozen_importlib._new_module": ["<builtin>.type"], "_frozen_importlib._DeadlockError": [], "_frozen_importlib._ModuleLock": [], "_frozen_importlib._ModuleLock.__init__": [], "_frozen_importlib._ModuleLock.has_deadlock": [], "_frozen_importlib._ModuleLock.acquire": ["_frozen_importlib._ModuleLock.has_deadlock"], "_frozen_importlib._ModuleLock.release": ["<builtin>.RuntimeError"], "_frozen_importlib._ModuleLock.__repr__": ["<builtin>.id"], "_frozen_importlib._DummyModuleLock": [], "_frozen_importlib._DummyModuleLock.__init__": [], "_frozen_importlib._DummyModuleLock.acquire": [], "_frozen_importlib._DummyModuleLock.release": ["<builtin>.RuntimeError"], "_frozen_importlib._DummyModuleLock.__repr__": ["<builtin>.id"], "_frozen_importlib._ModuleLockManager": [], "_frozen_importlib._ModuleLockManager.__init__": [], "_frozen_importlib._ModuleLockManager.__enter__": ["_frozen_importlib._ModuleLock.acquire", "_frozen_importlib._DummyModuleLock.acquire", "_frozen_importlib._get_module_lock"], "_frozen_importlib._get_module_lock": ["_frozen_importlib._DummyModuleLock.__init__", "_frozen_importlib._ModuleLock.__init__"], "_frozen_importlib._ModuleLockManager.__exit__": ["_frozen_importlib._ModuleLock.release", "_frozen_importlib._DummyModuleLock.release"], "_frozen_importlib._get_module_lock.cb": [], "_frozen_importlib._lock_unlock_module": ["_frozen_importlib._DummyModuleLock.release", "_frozen_importlib._DummyModuleLock.acquire", "_frozen_importlib._get_module_lock", "_frozen_importlib._ModuleLock.release", "_frozen_importlib._ModuleLock.acquire"], "_frozen_importlib._call_with_frames_removed": ["_frozen_importlib._gcd_import"], "_frozen_importlib._gcd_import": ["_frozen_importlib._resolve_name", "_frozen_importlib._sanity_check", "_frozen_importlib._find_and_load"], "_frozen_importlib._verbose_message": ["<builtin>.print"], "_frozen_importlib._requires_builtin": ["_frozen_importlib._wrap"], "_frozen_importlib._requires_builtin._requires_builtin_wrapper": ["_frozen_importlib.BuiltinImporter.get_code", "<builtin>.ImportError", "_frozen_importlib.BuiltinImporter.is_package", "_frozen_importlib.BuiltinImporter.get_source"], "_frozen_importlib.BuiltinImporter.get_code": [], "_frozen_importlib.BuiltinImporter.is_package": [], "_frozen_importlib.BuiltinImporter.get_source": [], "_frozen_importlib._requires_frozen": ["_frozen_importlib._wrap"], "_frozen_importlib._requires_frozen._requires_frozen_wrapper": ["_frozen_importlib.FrozenImporter.get_source", "<builtin>.ImportError", "_frozen_importlib.FrozenImporter.get_code", "_frozen_importlib.FrozenImporter.is_package"], "_frozen_importlib.FrozenImporter.get_source": [], "_frozen_importlib.FrozenImporter.is_package": [], "_frozen_importlib.FrozenImporter.get_code": [], "_frozen_importlib._load_module_shim": ["_frozen_importlib.spec_from_loader", "_frozen_importlib._load", "_frozen_importlib._exec"], "_frozen_importlib.spec_from_loader": ["_frozen_importlib.FrozenImporter.is_package", "_frozen_importlib.BuiltinImporter.is_package", "_frozen_importlib.ModuleSpec.__init__", "<builtin>.hasattr"], "_frozen_importlib._exec": ["<builtin>.ImportError", "_frozen_importlib.FrozenImporter.load_module", "_frozen_importlib._ModuleLockManager.__init__", "_frozen_importlib.FrozenImporter.exec_module", "_frozen_importlib._init_module_attrs", "_frozen_importlib.BuiltinImporter.exec_module", "<builtin>.hasattr"], "_frozen_importlib._load": ["_frozen_importlib._load_unlocked", "_frozen_importlib._ModuleLockManager.__init__"], "_frozen_importlib._module_repr": ["<builtin>.hasattr", "_frozen_importlib._module_repr_from_spec", "<builtin>.getattr"], "_frozen_importlib._module_repr_from_spec": [], "_frozen_importlib.ModuleSpec": [], "_frozen_importlib.ModuleSpec.__init__": [], "_frozen_importlib.ModuleSpec.__repr__": [], "_frozen_importlib.ModuleSpec.__eq__": [], "_frozen_importlib.ModuleSpec.cached": [], "_frozen_importlib.ModuleSpec.parent": [], "_frozen_importlib.ModuleSpec.has_location": ["<builtin>.bool"], "_frozen_importlib._spec_from_module": ["_frozen_importlib.ModuleSpec.__init__", "<builtin>.list"], "_frozen_importlib._init_module_attrs": ["<builtin>.getattr"], "_frozen_importlib.module_from_spec": ["<builtin>.ImportError", "_frozen_importlib._new_module", "_frozen_importlib.BuiltinImporter.create_module", "_frozen_importlib._init_module_attrs", "_frozen_importlib.FrozenImporter.create_module", "<builtin>.hasattr"], "_frozen_importlib.FrozenImporter.create_module": [], "_frozen_importlib.BuiltinImporter.create_module": ["<builtin>.ImportError", "_frozen_importlib._call_with_frames_removed"], "_frozen_importlib.FrozenImporter.load_module": ["_frozen_importlib._load_module_shim"], "_frozen_importlib.BuiltinImporter.exec_module": ["_frozen_importlib._call_with_frames_removed"], "_frozen_importlib.FrozenImporter.exec_module": ["<builtin>.exec", "<builtin>.ImportError", "_frozen_importlib._call_with_frames_removed"], "_frozen_importlib._load_backward_compatible": ["<builtin>.hasattr", "_frozen_importlib.FrozenImporter.load_module", "<builtin>.getattr"], "_frozen_importlib._load_unlocked": ["_frozen_importlib.module_from_spec", "<builtin>.ImportError", "_frozen_importlib._load_backward_compatible", "_frozen_importlib.FrozenImporter.exec_module", "_frozen_importlib._verbose_message", "_frozen_importlib.BuiltinImporter.exec_module", "<builtin>.hasattr"], "_frozen_importlib.BuiltinImporter": ["<builtin>.classmethod", "_frozen_importlib._requires_builtin"], "_frozen_importlib.BuiltinImporter.module_repr": [], "_frozen_importlib.BuiltinImporter.find_spec": ["_frozen_importlib.spec_from_loader"], "_frozen_importlib.BuiltinImporter.find_module": ["_frozen_importlib.BuiltinImporter.find_spec"], "<builtin>.classmethod": [], "_frozen_importlib.FrozenImporter": ["_frozen_importlib._requires_frozen"], "_frozen_importlib.FrozenImporter.module_repr": [], "_frozen_importlib.FrozenImporter.find_spec": ["_frozen_importlib.spec_from_loader"], "_frozen_importlib.FrozenImporter.find_module": [], "_frozen_importlib._ImportLockContext": [], "_frozen_importlib._ImportLockContext.__enter__": [], "_frozen_importlib._ImportLockContext.__exit__": [], "_frozen_importlib._resolve_name": ["<builtin>.ValueError", "<builtin>.len"], "_frozen_importlib._find_spec_legacy": ["_frozen_importlib.spec_from_loader"], "_frozen_importlib._find_spec": ["<builtin>.ImportError", "_frozen_importlib._find_spec_legacy"], "_frozen_importlib._sanity_check": ["<builtin>.ImportError", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError", "<builtin>.type"], "_frozen_importlib._find_and_load_unlocked": ["_frozen_importlib._call_with_frames_removed", "<builtin>.setattr", "<builtin>.ModuleNotFoundError", "_frozen_importlib._load_unlocked", "_frozen_importlib._find_spec"], "_frozen_importlib._find_and_load": ["<builtin>.ModuleNotFoundError", "_frozen_importlib._find_and_load_unlocked", "_frozen_importlib._ModuleLockManager.__init__", "_frozen_importlib._lock_unlock_module"], "_frozen_importlib._handle_fromlist": ["_frozen_importlib._handle_fromlist", "_frozen_importlib._call_with_frames_removed", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.type", "<builtin>.hasattr"], "_frozen_importlib._calc___package__": [], "_frozen_importlib.__import__": ["_frozen_importlib._handle_fromlist", "_frozen_importlib._calc___package__", "_frozen_importlib._gcd_import", "<builtin>.len", "<builtin>.hasattr"], "_frozen_importlib._builtin_from_name": ["_frozen_importlib._load_unlocked", "<builtin>.ImportError", "_frozen_importlib.BuiltinImporter.find_spec"], "_frozen_importlib._setup": ["_imp.is_frozen", "sys.modules.items", "<builtin>.setattr", "<builtin>.isinstance", "_frozen_importlib._init_module_attrs", "_frozen_importlib._spec_from_module", "<builtin>.type", "_frozen_importlib._builtin_from_name"], "_imp.is_frozen": [], "_frozen_importlib._install": ["_frozen_importlib._setup"], "_frozen_importlib_external": ["_frozen_importlib_external._LoaderBasics", "_frozen_importlib_external.SourcelessFileLoader", "_frozen_importlib_external.FileFinder", "_frozen_importlib_external.SourceFileLoader", "_frozen_importlib_external.FileLoader", "_frozen_importlib_external._NamespacePath", "_frozen_importlib_external._NamespaceLoader", "_frozen_importlib_external.PathFinder", "_frozen_importlib_external.SourceLoader", "_frozen_importlib_external.WindowsRegistryFinder", "<builtin>.type", "_frozen_importlib_external.ExtensionFileLoader", "<builtin>.object"], "_frozen_importlib_external._make_relax_case": [], "_frozen_importlib_external._make_relax_case._relax_case": [], "_frozen_importlib_external._pack_uint32": ["<builtin>.int"], "_frozen_importlib_external._unpack_uint32": ["<builtin>.len"], "_frozen_importlib_external._unpack_uint16": ["<builtin>.len"], "_frozen_importlib_external._path_join": [], "_frozen_importlib_external._path_split": ["<builtin>.reversed", "<builtin>.len"], "_frozen_importlib_external._path_stat": [], "_frozen_importlib_external._path_is_mode_type": ["_frozen_importlib_external._path_stat"], "_frozen_importlib_external._path_isfile": ["_frozen_importlib_external._path_is_mode_type"], "_frozen_importlib_external._path_isdir": ["_frozen_importlib_external._path_is_mode_type"], "_frozen_importlib_external._path_isabs": [], "_frozen_importlib_external._write_atomic": ["<builtin>.id"], "_frozen_importlib_external.cache_from_source": ["<builtin>.str", "_frozen_importlib_external._path_join", "_frozen_importlib_external._path_split", "<builtin>.NotImplementedError", "<builtin>.ValueError", "<builtin>.TypeError", "_frozen_importlib_external._path_isabs"], "_frozen_importlib_external.source_from_cache": ["_frozen_importlib_external._path_join", "<builtin>.len", "_frozen_importlib_external._path_split", "<builtin>.NotImplementedError", "<builtin>.ValueError"], "_frozen_importlib_external._get_sourcefile": ["_frozen_importlib_external.source_from_cache", "_frozen_importlib_external._path_isfile", "<builtin>.len"], "_frozen_importlib_external._get_cached": ["<builtin>.tuple", "_frozen_importlib_external.cache_from_source"], "_frozen_importlib_external._calc_mode": ["_frozen_importlib_external._path_stat"], "_frozen_importlib_external._check_name": ["_frozen_importlib_external._check_name._wrap"], "_frozen_importlib_external._check_name._check_name_wrapper": ["<builtin>.ImportError", "_frozen_importlib_external.ExtensionFileLoader.get_filename", "_frozen_importlib_external.FileLoader.get_filename", "_frozen_importlib_external.FileLoader.load_module", "_frozen_importlib_external.FileLoader.get_resource_reader"], "_frozen_importlib_external.FileLoader.get_filename": [], "_frozen_importlib_external.FileLoader.load_module": ["<builtin>.super"], "_frozen_importlib_external.ExtensionFileLoader.get_filename": [], "_frozen_importlib_external.FileLoader.get_resource_reader": [], "_frozen_importlib_external._check_name._wrap": ["<builtin>.setattr", "<builtin>.getattr", "<builtin>.hasattr"], "_frozen_importlib_external._find_module_shim": ["<builtin>.len"], "_frozen_importlib_external._classify_pyc": ["<builtin>.EOFError", "<builtin>.ImportError", "_frozen_importlib_external._unpack_uint32", "<builtin>.len"], "_frozen_importlib_external._validate_timestamp_pyc": ["<builtin>.ImportError", "_frozen_importlib_external._unpack_uint32"], "_frozen_importlib_external._validate_hash_pyc": ["<builtin>.ImportError"], "_frozen_importlib_external._compile_bytecode": ["<builtin>.ImportError", "<builtin>.isinstance"], "_frozen_importlib_external._code_to_timestamp_pyc": ["<builtin>.bytearray", "_frozen_importlib_external._pack_uint32"], "_frozen_importlib_external._code_to_hash_pyc": ["<builtin>.bytearray", "_frozen_importlib_external._pack_uint32", "<builtin>.len"], "_frozen_importlib_external.spec_from_file_location": ["<builtin>.tuple", "_frozen_importlib_external._LoaderBasics.is_package", "_frozen_importlib_external.FileLoader.get_filename", "_frozen_importlib_external._path_split", "_frozen_importlib_external._get_supported_file_loaders", "<builtin>.hasattr"], "_frozen_importlib_external._get_supported_file_loaders": [], "_frozen_importlib_external._LoaderBasics.is_package": ["_frozen_importlib_external._path_split"], "_frozen_importlib_external.WindowsRegistryFinder": [], "_frozen_importlib_external.WindowsRegistryFinder._open_registry": [], "_frozen_importlib_external.WindowsRegistryFinder._search_registry": ["_frozen_importlib_external.WindowsRegistryFinder._open_registry"], "_frozen_importlib_external.WindowsRegistryFinder.find_spec": ["<builtin>.tuple", "_frozen_importlib_external._get_supported_file_loaders", "_frozen_importlib_external._path_stat", "_frozen_importlib_external.WindowsRegistryFinder._search_registry"], "_frozen_importlib_external.WindowsRegistryFinder.find_module": ["_frozen_importlib_external.WindowsRegistryFinder.find_spec"], "_frozen_importlib_external._LoaderBasics": [], "_frozen_importlib_external._LoaderBasics.create_module": [], "_frozen_importlib_external._LoaderBasics.exec_module": ["<builtin>.ImportError", "_frozen_importlib_external.SourcelessFileLoader.get_code"], "_frozen_importlib_external.SourcelessFileLoader.get_code": ["_frozen_importlib_external.FileLoader.get_data", "_frozen_importlib_external.FileLoader.get_filename", "_frozen_importlib_external._compile_bytecode", "_frozen_importlib_external._classify_pyc", "<builtin>.memoryview"], "_frozen_importlib_external._LoaderBasics.load_module": [], "_frozen_importlib_external.SourceLoader": [], "_frozen_importlib_external.SourceLoader.path_mtime": [], "_frozen_importlib_external.SourceLoader.path_stats": ["_frozen_importlib_external.SourceLoader.path_mtime"], "_frozen_importlib_external.SourceLoader._cache_bytecode": ["_frozen_importlib_external.SourceLoader.set_data", "_frozen_importlib_external.SourceFileLoader.set_data"], "_frozen_importlib_external.SourceLoader.set_data": [], "_frozen_importlib_external.SourceFileLoader.set_data": ["_frozen_importlib_external._path_isdir", "_frozen_importlib_external._path_join", "_frozen_importlib_external._path_split", "<builtin>.reversed", "_frozen_importlib_external._write_atomic"], "_frozen_importlib_external.SourceLoader.get_source": ["<builtin>.ImportError", "_frozen_importlib_external.decode_source"], "_frozen_importlib_external.SourceLoader.source_to_code": [], "_frozen_importlib_external.SourceLoader.get_code": ["_frozen_importlib_external._validate_timestamp_pyc", "_frozen_importlib_external.SourceFileLoader.path_stats", "_frozen_importlib_external._validate_hash_pyc", "_frozen_importlib_external._code_to_hash_pyc", "_frozen_importlib_external._code_to_timestamp_pyc", "_frozen_importlib_external.SourceLoader._cache_bytecode", "_frozen_importlib_external.SourceLoader.source_to_code", "<builtin>.len", "_frozen_importlib_external._compile_bytecode", "_frozen_importlib_external.SourceFileLoader._cache_bytecode", "_frozen_importlib_external.SourceLoader.path_stats", "_frozen_importlib_external._classify_pyc", "_frozen_importlib_external.cache_from_source", "<builtin>.memoryview", "<builtin>.int"], "_frozen_importlib_external.SourceFileLoader.path_stats": ["_frozen_importlib_external._path_stat"], "_frozen_importlib_external.SourceFileLoader._cache_bytecode": ["_frozen_importlib_external.SourceFileLoader.set_data", "_frozen_importlib_external._calc_mode"], "_frozen_importlib_external.FileLoader": ["_frozen_importlib_external._check_name"], "_frozen_importlib_external.FileLoader.__init__": [], "_frozen_importlib_external.FileLoader.__eq__": [], "_frozen_importlib_external.FileLoader.__hash__": ["<builtin>.hash"], "_frozen_importlib_external.FileLoader.get_data": ["<builtin>.str", "<builtin>.isinstance"], "_frozen_importlib_external.FileLoader.open_resource": ["_frozen_importlib_external._path_split", "_frozen_importlib_external._path_join"], "_frozen_importlib_external.FileLoader.resource_path": ["_frozen_importlib_external._path_split", "_frozen_importlib_external.FileLoader.is_resource", "_frozen_importlib_external._path_join"], "_frozen_importlib_external.FileLoader.is_resource": ["_frozen_importlib_external._path_split", "_frozen_importlib_external._path_join", "_frozen_importlib_external._path_isfile"], "_frozen_importlib_external.FileLoader.contents": ["<builtin>.iter", "_frozen_importlib_external._path_split"], "_frozen_importlib_external.SourceFileLoader": [], "_frozen_importlib_external.SourcelessFileLoader": [], "_frozen_importlib_external.SourcelessFileLoader.get_source": [], "_frozen_importlib_external.ExtensionFileLoader": ["_frozen_importlib_external._check_name"], "_frozen_importlib_external.ExtensionFileLoader.__init__": [], "_frozen_importlib_external.ExtensionFileLoader.__eq__": [], "_frozen_importlib_external.ExtensionFileLoader.__hash__": ["<builtin>.hash"], "_frozen_importlib_external.ExtensionFileLoader.create_module": [], "_frozen_importlib_external.ExtensionFileLoader.exec_module": [], "_frozen_importlib_external.ExtensionFileLoader.is_package": ["_frozen_importlib_external._path_split", "<builtin>.any"], "_frozen_importlib_external.ExtensionFileLoader.get_code": [], "_frozen_importlib_external.ExtensionFileLoader.get_source": [], "_frozen_importlib_external._NamespacePath": [], "_frozen_importlib_external._NamespacePath.__init__": ["<builtin>.tuple", "_frozen_importlib_external._NamespacePath._get_parent_path"], "_frozen_importlib_external._NamespacePath._get_parent_path": ["_frozen_importlib_external._NamespacePath._find_parent_path_names", "<builtin>.getattr"], "_frozen_importlib_external._NamespacePath._find_parent_path_names": [], "_frozen_importlib_external._NamespacePath._recalculate": ["<builtin>.tuple", "_frozen_importlib_external.PathFinder._get_spec", "_frozen_importlib_external._NamespacePath._get_parent_path"], "_frozen_importlib_external.PathFinder._get_spec": ["<builtin>.ImportError", "_frozen_importlib_external.PathFinder._legacy_get_spec", "<builtin>.isinstance", "_frozen_importlib_external.PathFinder._path_importer_cache", "<builtin>.hasattr"], "_frozen_importlib_external._NamespacePath.__iter__": ["<builtin>.iter", "_frozen_importlib_external._NamespacePath._recalculate"], "_frozen_importlib_external._NamespacePath.__getitem__": ["_frozen_importlib_external._NamespacePath._recalculate"], "_frozen_importlib_external._NamespacePath.__setitem__": [], "_frozen_importlib_external._NamespacePath.__len__": ["_frozen_importlib_external._NamespacePath._recalculate", "<builtin>.len"], "_frozen_importlib_external._NamespacePath.__repr__": [], "_frozen_importlib_external._NamespacePath.__contains__": ["_frozen_importlib_external._NamespacePath._recalculate"], "_frozen_importlib_external._NamespacePath.append": [], "_frozen_importlib_external._NamespaceLoader": [], "_frozen_importlib_external._NamespaceLoader.__init__": ["_frozen_importlib_external._NamespacePath.__init__"], "_frozen_importlib_external._NamespaceLoader.module_repr": [], "_frozen_importlib_external._NamespaceLoader.is_package": [], "_frozen_importlib_external._NamespaceLoader.get_source": [], "_frozen_importlib_external._NamespaceLoader.get_code": ["<builtin>.compile"], "_frozen_importlib_external._NamespaceLoader.create_module": [], "_frozen_importlib_external._NamespaceLoader.exec_module": [], "_frozen_importlib_external._NamespaceLoader.load_module": [], "_frozen_importlib_external.PathFinder": [], "_frozen_importlib_external.PathFinder.invalidate_caches": ["<builtin>.list", "<builtin>.hasattr"], "_frozen_importlib_external.PathFinder._path_hooks": [], "_frozen_importlib_external.PathFinder._path_importer_cache": ["_frozen_importlib_external.PathFinder._path_hooks"], "_frozen_importlib_external.PathFinder._legacy_get_spec": ["<builtin>.hasattr"], "_frozen_importlib_external.PathFinder.find_spec": ["_frozen_importlib_external._NamespacePath.__init__", "_frozen_importlib_external.PathFinder._get_spec"], "_frozen_importlib_external.PathFinder.find_module": ["_frozen_importlib_external.PathFinder.find_spec"], "_frozen_importlib_external.FileFinder": [], "_frozen_importlib_external.FileFinder.__init__": ["<builtin>.set"], "_frozen_importlib_external.FileFinder.invalidate_caches": [], "_frozen_importlib_external.FileFinder.find_loader": ["_frozen_importlib_external.FileFinder.find_spec"], "_frozen_importlib_external.FileFinder.find_spec": ["_frozen_importlib_external.FileFinder._get_spec", "_frozen_importlib_external._path_join", "_frozen_importlib_external._path_isfile", "_frozen_importlib_external.FileFinder._fill_cache", "_frozen_importlib_external._path_stat"], "_frozen_importlib_external.FileFinder._get_spec": ["_frozen_importlib_external.spec_from_file_location"], "_frozen_importlib_external.FileFinder._fill_cache": ["<builtin>.set"], "_frozen_importlib_external.FileFinder.path_hook": [], "_frozen_importlib_external.FileFinder.path_hook.path_hook_for_FileFinder": ["_frozen_importlib_external.FileFinder.__init__", "<builtin>.ImportError", "_frozen_importlib_external._path_isdir"], "_frozen_importlib_external.FileFinder.__repr__": [], "_frozen_importlib_external._fix_up_module": ["_frozen_importlib_external.FileLoader.__init__", "_frozen_importlib_external.spec_from_file_location"], "_frozen_importlib_external._setup": ["<builtin>.all", "_bootstrap._builtin_from_name", "<builtin>.setattr", "<builtin>.len", "_bootstrap._imp.extension_suffixes", "_frozen_importlib._builtin_from_name", "_frozen_importlib_external._make_relax_case"], "_bootstrap._builtin_from_name": [], "_bootstrap._imp.extension_suffixes": [], "_frozen_importlib_external._install": ["_frozen_importlib_external._get_supported_file_loaders", "_frozen_importlib_external._setup"], "configparser.Error": [], "configparser.Error.__init__": [], "configparser.Error.__repr__": [], "configparser.NoSectionError": [], "configparser.NoSectionError.__init__": ["configparser.Error.__init__"], "configparser.DuplicateSectionError": [], "configparser.DuplicateSectionError.__init__": ["configparser.Error.__init__", "<builtin>.repr"], "configparser.DuplicateOptionError": [], "configparser.DuplicateOptionError.__init__": ["configparser.Error.__init__", "<builtin>.repr"], "configparser.NoOptionError": [], "configparser.NoOptionError.__init__": ["configparser.Error.__init__"], "configparser.InterpolationError": [], "configparser.InterpolationError.__init__": ["configparser.Error.__init__"], "configparser.InterpolationMissingOptionError": [], "configparser.InterpolationMissingOptionError.__init__": ["configparser.InterpolationError.__init__"], "configparser.InterpolationSyntaxError": [], "configparser.InterpolationDepthError": [], "configparser.InterpolationDepthError.__init__": ["configparser.InterpolationError.__init__"], "configparser.ParsingError": [], "configparser.ParsingError.__init__": ["configparser.Error.__init__", "<builtin>.ValueError"], "configparser.ParsingError.filename": ["warnings.warn"], "configparser.ParsingError.append": [], "configparser.MissingSectionHeaderError": [], "configparser.MissingSectionHeaderError.__init__": ["configparser.Error.__init__"], "configparser.Interpolation": [], "configparser.Interpolation.before_get": [], "configparser.Interpolation.before_set": [], "configparser.Interpolation.before_read": [], "configparser.Interpolation.before_write": [], "configparser.BasicInterpolation": ["re.compile"], "configparser.BasicInterpolation.before_get": ["configparser.BasicInterpolation._interpolate_some"], "configparser.BasicInterpolation._interpolate_some": ["configparser.InterpolationError.__init__", "configparser.BasicInterpolation._interpolate_some", "configparser.InterpolationMissingOptionError.__init__", "configparser.RawConfigParser.optionxform", "configparser.RawConfigParser.get", "configparser.InterpolationDepthError.__init__"], "configparser.BasicInterpolation.before_set": ["<builtin>.ValueError"], "configparser.RawConfigParser.get": ["configparser.RawConfigParser._unify_values", "configparser.NoOptionError.__init__", "configparser.BasicInterpolation.before_get", "configparser.Interpolation.before_get", "configparser.RawConfigParser.optionxform"], "configparser.RawConfigParser.optionxform": [], "configparser.ExtendedInterpolation": ["re.compile"], "configparser.ExtendedInterpolation.before_get": ["configparser.ExtendedInterpolation._interpolate_some"], "configparser.ExtendedInterpolation._interpolate_some": ["configparser.ExtendedInterpolation._interpolate_some", "configparser.InterpolationError.__init__", "<builtin>.dict", "<builtin>.len", "configparser.InterpolationMissingOptionError.__init__", "configparser.InterpolationDepthError.__init__"], "configparser.ExtendedInterpolation.before_set": ["<builtin>.ValueError"], "configparser.LegacyInterpolation": ["re.compile"], "configparser.LegacyInterpolation.before_get": ["configparser.InterpolationMissingOptionError.__init__", "configparser.InterpolationDepthError.__init__"], "configparser.LegacyInterpolation.before_set": [], "configparser.LegacyInterpolation._interpolation_replace": [], "configparser.RawConfigParser": ["re.compile"], "configparser.ConverterMapping.__init__": ["<builtin>.dir", "<builtin>.callable", "<builtin>.getattr"], "configparser.SectionProxy.__init__": ["<builtin>.setattr", "<builtin>.getattr"], "configparser.ConfigParser._read_defaults": ["configparser.RawConfigParser.read_dict"], "configparser.RawConfigParser._read_defaults": ["configparser.RawConfigParser.optionxform"], "configparser.RawConfigParser.defaults": [], "configparser.RawConfigParser.add_section": ["configparser.DuplicateSectionError.__init__", "configparser.SectionProxy.__init__", "<builtin>.ValueError"], "configparser.RawConfigParser.has_section": [], "configparser.RawConfigParser.options": ["configparser.NoSectionError.__init__", "<builtin>.list"], "configparser.RawConfigParser.read": ["configparser.RawConfigParser._read", "<builtin>.open", "<builtin>.isinstance"], "configparser.RawConfigParser._read": ["configparser.DuplicateOptionError.__init__", "configparser.RawConfigParser._handle_error", "configparser.RawConfigParser._join_multiline_values", "configparser.ParsingError.__init__", "<builtin>.enumerate", "configparser.RawConfigParser.set", "configparser.DuplicateSectionError.__init__", "configparser.MissingSectionHeaderError.__init__", "configparser.RawConfigParser.optionxform", "<builtin>.min", "configparser.ConfigParser.set", "configparser.SectionProxy.__init__"], "configparser.RawConfigParser.read_file": ["configparser.RawConfigParser._read"], "configparser.RawConfigParser.read_dict": ["configparser.DuplicateOptionError.__init__", "configparser.RawConfigParser.add_section", "configparser.RawConfigParser.set", "configparser.RawConfigParser.optionxform", "configparser.ConfigParser.set", "<builtin>.str", "configparser.ConfigParser.add_section"], "configparser.RawConfigParser.set": ["configparser.RawConfigParser.optionxform", "configparser.NoSectionError.__init__", "configparser.BasicInterpolation.before_set", "configparser.Interpolation.before_set"], "configparser.ConfigParser.set": ["<builtin>.super", "configparser.RawConfigParser._validate_value_types"], "configparser.ConfigParser.add_section": ["<builtin>.super", "configparser.RawConfigParser._validate_value_types"], "configparser.RawConfigParser._unify_values": ["<builtin>.str", "configparser.RawConfigParser.optionxform", "configparser.NoSectionError.__init__", "collections.ChainMap.__init__"], "configparser.RawConfigParser._get": ["configparser.RawConfigParser.get", "configparser.RawConfigParser._convert_to_boolean"], "configparser.RawConfigParser._convert_to_boolean": ["<builtin>.ValueError"], "configparser.RawConfigParser._get_conv": ["configparser.RawConfigParser._get"], "configparser.RawConfigParser.getint": ["configparser.RawConfigParser._get_conv"], "configparser.RawConfigParser.getfloat": ["configparser.RawConfigParser._get_conv"], "configparser.RawConfigParser.getboolean": ["configparser.RawConfigParser._get_conv"], "configparser.RawConfigParser.items.<lambda1>": ["configparser.BasicInterpolation.before_get", "configparser.Interpolation.before_get"], "configparser.RawConfigParser.items.<lambda2>": [], "configparser.RawConfigParser.popitem": ["configparser.RawConfigParser.sections"], "configparser.RawConfigParser.has_option": ["configparser.RawConfigParser.optionxform"], "configparser.RawConfigParser.write": ["configparser.RawConfigParser._write_section"], "configparser.RawConfigParser._write_section": ["configparser.Interpolation.before_write", "<builtin>.str"], "configparser.RawConfigParser.remove_option": ["configparser.RawConfigParser.optionxform", "configparser.NoSectionError.__init__"], "configparser.RawConfigParser.remove_section": [], "configparser.RawConfigParser.__getitem__": ["<builtin>.KeyError", "configparser.RawConfigParser.has_section"], "configparser.RawConfigParser.__setitem__": ["configparser.RawConfigParser.read_dict"], "configparser.RawConfigParser.__delitem__": ["<builtin>.KeyError", "configparser.RawConfigParser.remove_section", "configparser.RawConfigParser.has_section", "<builtin>.ValueError"], "configparser.RawConfigParser.__contains__": ["configparser.RawConfigParser.has_section"], "configparser.RawConfigParser.__len__": ["<builtin>.len"], "configparser.RawConfigParser.__iter__": ["itertools.chain"], "configparser.RawConfigParser._handle_error": ["configparser.ParsingError.append", "<builtin>.repr", "configparser.ParsingError.__init__"], "configparser.RawConfigParser._join_multiline_values": ["configparser.Interpolation.before_read", "itertools.chain", "<builtin>.isinstance"], "configparser.RawConfigParser._validate_value_types": ["<builtin>.isinstance", "<builtin>.TypeError"], "configparser.RawConfigParser.converters": [], "configparser.ConfigParser": [], "configparser.SafeConfigParser": [], "configparser.SafeConfigParser.__init__": ["<builtin>.super", "warnings.warn"], "configparser.SectionProxy": [], "configparser.SectionProxy.__repr__": [], "configparser.SectionProxy.__getitem__": ["<builtin>.KeyError", "configparser.RawConfigParser.get", "configparser.RawConfigParser.has_option"], "configparser.SectionProxy.__setitem__": ["configparser.ConfigParser.set", "configparser.RawConfigParser.set", "configparser.RawConfigParser._validate_value_types"], "configparser.SectionProxy.__delitem__": ["<builtin>.KeyError", "configparser.RawConfigParser.remove_option", "configparser.RawConfigParser.has_option"], "configparser.SectionProxy.__contains__": ["configparser.RawConfigParser.has_option"], "configparser.SectionProxy.__len__": ["configparser.SectionProxy._options", "<builtin>.len"], "configparser.SectionProxy._options": ["configparser.RawConfigParser.defaults", "configparser.RawConfigParser.options"], "configparser.SectionProxy.__iter__": ["configparser.SectionProxy._options"], "configparser.SectionProxy.parser": [], "configparser.SectionProxy.name": [], "configparser.SectionProxy.get": ["configparser.RawConfigParser.get"], "configparser.ConverterMapping": ["re.compile"], "configparser.ConverterMapping.__getitem__": [], "configparser.ConverterMapping.__setitem__": ["<builtin>.setattr", "<builtin>.type", "<builtin>.ValueError"], "configparser.ConverterMapping.__delitem__": ["<builtin>.KeyError", "itertools.chain", "<builtin>.delattr"], "configparser.ConverterMapping.__iter__": ["<builtin>.iter"], "configparser.ConverterMapping.__len__": ["<builtin>.len"], "pathlib._ignore_error": ["<builtin>.getattr"], "pathlib._is_wildcard_pattern": [], "pathlib._Flavour": [], "pathlib._Flavour.__init__": [], "pathlib._Flavour.parse_parts": ["pathlib._WindowsFlavour.splitroot", "pathlib._PosixFlavour.splitroot", "sys.intern", "<builtin>.reversed"], "pathlib._PosixFlavour.splitroot": ["<builtin>.len"], "pathlib._WindowsFlavour.splitroot": ["pathlib._WindowsFlavour._split_extended_path", "<builtin>.len"], "pathlib._Flavour.join_parsed_parts": ["pathlib._PosixFlavour.casefold", "pathlib._WindowsFlavour.casefold"], "pathlib._PosixFlavour.casefold": [], "pathlib._WindowsFlavour.casefold": [], "pathlib._WindowsFlavour": ["<builtin>.set", "<builtin>.range"], "pathlib._WindowsFlavour._split_extended_path": [], "pathlib._WindowsFlavour.casefold_parts": [], "pathlib._WindowsFlavour.compile_pattern": ["re.compile"], "pathlib._WindowsFlavour.resolve": ["pathlib._WindowsFlavour._ext_to_normal", "posixpath.split", "ntpath.join", "posixpath.join", "<builtin>.reversed", "nt._getfinalpathname", "ntpath.split", "<builtin>.str"], "pathlib._WindowsFlavour._ext_to_normal": ["pathlib._WindowsFlavour._split_extended_path"], "pathlib._WindowsFlavour.is_reserved": [], "pathlib._WindowsFlavour.make_uri": ["urllib.parse.quote_from_bytes", "<builtin>.len"], "pathlib._WindowsFlavour.gethomedir": ["<builtin>.RuntimeError", "pathlib._Flavour.parse_parts"], "pathlib._PosixFlavour": [], "pathlib._PosixFlavour.casefold_parts": [], "pathlib._PosixFlavour.compile_pattern": ["re.compile"], "pathlib._PosixFlavour.resolve": ["pathlib._PosixFlavour.resolve._resolve", "<builtin>.str"], "pathlib._PosixFlavour.resolve._resolve": ["pathlib._PosixFlavour.resolve._resolve", "<builtin>.RuntimeError"], "pathlib._PosixFlavour.is_reserved": [], "pathlib._PosixFlavour.make_uri": ["<builtin>.bytes", "urllib.parse.quote_from_bytes"], "pathlib._PosixFlavour.gethomedir": ["<builtin>.RuntimeError", "pwd.getpwuid", "pwd.getpwnam"], "pathlib._Accessor": [], "pathlib._NormalAccessor": ["<builtin>.hasattr"], "pathlib._NormalAccessor.lchmod": ["<builtin>.NotImplementedError"], "pathlib._NormalAccessor.link_to": ["<builtin>.NotImplementedError"], "pathlib._NormalAccessor.symlink": ["<builtin>.NotImplementedError"], "pathlib._NormalAccessor.readlink": [], "pathlib._make_selector": ["pathlib._PreciseSelector.__init__", "pathlib._is_wildcard_pattern", "pathlib._WildcardSelector.__init__", "<builtin>.ValueError", "pathlib._RecursiveWildcardSelector.__init__"], "pathlib._RecursiveWildcardSelector.__init__": ["pathlib._Selector.__init__"], "pathlib._WildcardSelector.__init__": ["pathlib._Selector.__init__"], "pathlib._PreciseSelector.__init__": ["pathlib._Selector.__init__"], "pathlib._Selector": [], "pathlib._Selector.__init__": ["pathlib._make_selector"], "pathlib._Selector.select_from": ["pathlib._RecursiveWildcardSelector._select_from", "pathlib._WildcardSelector._select_from", "pathlib._PreciseSelector._select_from", "<builtin>.iter", "<builtin>.type"], "pathlib._PreciseSelector._select_from": ["pathlib._TerminatingSelector._select_from"], "pathlib._RecursiveWildcardSelector._select_from": ["<builtin>.set", "pathlib._TerminatingSelector._select_from", "pathlib._RecursiveWildcardSelector._iterate_directories"], "pathlib._WildcardSelector._select_from": ["pathlib._ignore_error", "pathlib._TerminatingSelector._select_from", "<builtin>.list"], "pathlib._TerminatingSelector": [], "pathlib._TerminatingSelector._select_from": [], "pathlib._PreciseSelector": [], "pathlib._WildcardSelector": [], "pathlib._RecursiveWildcardSelector": [], "pathlib._RecursiveWildcardSelector._iterate_directories": ["pathlib._ignore_error", "pathlib._RecursiveWildcardSelector._iterate_directories", "<builtin>.list"], "pathlib._PathParents": [], "pathlib._PathParents.__init__": ["<builtin>.type"], "pathlib._PathParents.__len__": ["<builtin>.len"], "pathlib._PathParents.__getitem__": ["<builtin>.IndexError", "<builtin>.len"], "pathlib._PathParents.__repr__": [], "pathlib.PurePath": ["operator.attrgetter.__init__", "<builtin>.property"], "pathlib.PurePath.__new__": ["pathlib.PurePath._from_parts"], "pathlib.PurePath._from_parts": [], "pathlib.PurePath.__reduce__": ["<builtin>.tuple"], "pathlib.PurePath._parse_args": ["<builtin>.type", "<builtin>.str", "<builtin>.isinstance", "<builtin>.TypeError"], "pathlib.PurePath._from_parsed_parts": [], "pathlib.PurePath._format_parsed_parts": [], "pathlib.PurePath._init": [], "pathlib.PurePath._make_child": ["pathlib.PurePath._parse_args", "pathlib.PurePath._from_parsed_parts"], "pathlib.PurePath.__str__": ["pathlib.PurePath._format_parsed_parts"], "pathlib.PurePath.__fspath__": ["<builtin>.str"], "pathlib.PurePath.as_posix": ["<builtin>.str"], "pathlib.PurePath.__bytes__": [], "pathlib.PurePath.__repr__": ["pathlib.PurePath.as_posix"], "pathlib.PurePath.as_uri": ["pathlib.PurePath.is_absolute", "<builtin>.ValueError"], "pathlib.PurePath.is_absolute": ["<builtin>.bool"], "pathlib.PurePath._cparts": [], "pathlib.PurePath.__eq__": ["<builtin>.isinstance"], "pathlib.PurePath.__hash__": ["<builtin>.tuple"], "pathlib.PurePath.__lt__": ["<builtin>.isinstance"], "pathlib.PurePath.__le__": ["<builtin>.isinstance"], "pathlib.PurePath.__gt__": ["<builtin>.isinstance"], "pathlib.PurePath.__ge__": ["<builtin>.isinstance"], "pathlib.PurePath.anchor": [], "pathlib.PurePath.name": ["<builtin>.len"], "pathlib.PurePath.suffix": ["<builtin>.len"], "pathlib.PurePath.suffixes": [], "pathlib.PurePath.stem": ["<builtin>.len"], "pathlib.PurePath.with_name": ["pathlib.PurePath._from_parsed_parts", "<builtin>.ValueError", "<builtin>.len"], "pathlib.PurePath.with_suffix": ["pathlib.PurePath._from_parsed_parts", "<builtin>.ValueError", "<builtin>.len"], "pathlib.PurePath.relative_to": ["pathlib.PurePath._format_parsed_parts", "<builtin>.TypeError", "<builtin>.len", "pathlib.PurePath._parse_args", "pathlib.PurePath._from_parsed_parts", "<builtin>.ValueError", "<builtin>.str"], "pathlib.PurePath.parts": ["<builtin>.tuple"], "pathlib.PurePath.__truediv__": ["pathlib.PurePath._make_child"], "pathlib.PurePath.__rtruediv__": ["pathlib.PurePath._from_parts"], "pathlib.PurePath.parent": ["pathlib.PurePath._from_parsed_parts", "<builtin>.len"], "pathlib.PurePath.parents": ["pathlib._PathParents.__init__"], "pathlib.PurePath.is_reserved": [], "pathlib.PurePath.match": ["<builtin>.zip", "<builtin>.reversed", "<builtin>.ValueError", "<builtin>.len"], "pathlib.PurePosixPath": [], "pathlib.PureWindowsPath": [], "pathlib.Path": [], "pathlib.Path.__new__": ["<builtin>.NotImplementedError", "pathlib.PurePath._from_parts"], "pathlib.Path._init": [], "pathlib.Path._make_child_relpath": ["pathlib.PurePath._from_parsed_parts"], "pathlib.Path.__enter__": ["pathlib.Path._raise_closed"], "pathlib.Path._raise_closed": ["<builtin>.ValueError"], "pathlib.Path.__exit__": [], "pathlib.Path._opener": [], "pathlib.Path._raw_open": ["pathlib.Path._raise_closed"], "pathlib.Path.cwd": [], "pathlib.Path.home": [], "pathlib.Path.samefile": ["pathlib.Path.stat", "posixpath.samestat", "ntpath.samestat"], "pathlib.Path.stat": [], "pathlib.Path.iterdir": ["pathlib.Path._raise_closed", "pathlib.Path._make_child_relpath"], "pathlib.Path.glob": ["<builtin>.tuple", "<builtin>.NotImplementedError", "pathlib._make_selector", "<builtin>.ValueError"], "pathlib.Path.rglob": ["<builtin>.tuple", "<builtin>.NotImplementedError", "pathlib._make_selector"], "pathlib.Path.absolute": ["pathlib.PurePath.is_absolute", "pathlib.Path._raise_closed", "pathlib.PurePath._from_parts"], "pathlib.Path.resolve": ["pathlib.Path.stat", "pathlib.Path.absolute", "pathlib.Path._raise_closed", "pathlib.PurePath._from_parts", "<builtin>.str"], "pathlib.Path.owner": ["pathlib.Path.stat", "pwd.getpwuid"], "pathlib.Path.open": ["io.open", "pathlib.Path._raise_closed"], "pathlib.Path.read_bytes": ["pathlib.Path.open"], "pathlib.Path.read_text": ["pathlib.Path.open"], "pathlib.Path.write_bytes": ["<builtin>.memoryview", "pathlib.Path.open"], "pathlib.Path.write_text": ["pathlib.Path.open", "<builtin>.isinstance", "<builtin>.TypeError"], "pathlib.Path.touch": ["pathlib.Path._raise_closed", "pathlib.Path._raw_open"], "pathlib.Path.mkdir": ["pathlib.Path.mkdir", "pathlib.Path._raise_closed", "pathlib.Path.is_dir"], "pathlib.Path.is_dir": ["pathlib.Path.stat", "pathlib._ignore_error", "stat.S_ISDIR"], "pathlib.Path.chmod": ["pathlib.Path._raise_closed"], "pathlib.Path.lchmod": ["pathlib._NormalAccessor.lchmod", "pathlib.Path._raise_closed"], "pathlib.Path.unlink": ["pathlib.Path._raise_closed"], "pathlib.Path.rmdir": ["pathlib.Path._raise_closed"], "pathlib.Path.lstat": ["pathlib.Path._raise_closed"], "pathlib.Path.link_to": ["pathlib._NormalAccessor.link_to", "pathlib.Path._raise_closed"], "pathlib.Path.rename": ["pathlib.Path._raise_closed"], "pathlib.Path.replace": ["pathlib.Path._raise_closed"], "pathlib.Path.symlink_to": ["pathlib._NormalAccessor.symlink", "pathlib.Path._raise_closed"], "pathlib.Path.exists": ["pathlib.Path.stat", "pathlib._ignore_error"], "pathlib.Path.is_file": ["pathlib.Path.stat", "pathlib._ignore_error", "stat.S_ISREG"], "pathlib.Path.is_mount": ["pathlib.Path.stat", "pathlib.Path.is_dir", "pathlib.Path.exists"], "pathlib.Path.is_symlink": ["pathlib.Path.lstat", "pathlib._ignore_error", "stat.S_ISLNK"], "pathlib.Path.is_block_device": ["pathlib.Path.stat", "pathlib._ignore_error", "stat.S_ISBLK"], "pathlib.Path.is_char_device": ["pathlib.Path.stat", "pathlib._ignore_error", "stat.S_ISCHR"], "pathlib.Path.is_fifo": ["pathlib.Path.stat", "pathlib._ignore_error", "stat.S_ISFIFO"], "pathlib.Path.is_socket": ["pathlib.Path.stat", "pathlib._ignore_error", "stat.S_ISSOCK"], "pathlib.Path.expanduser": ["pathlib.PurePath._from_parts"], "pathlib.PosixPath": [], "pathlib.WindowsPath": [], "pathlib.WindowsPath.owner": ["<builtin>.NotImplementedError"], "pathlib.WindowsPath.group": ["<builtin>.NotImplementedError"], "pathlib.WindowsPath.is_mount": ["<builtin>.NotImplementedError"], "fnmatch.fnmatch": ["fnmatch.fnmatchcase", "posixpath.normcase", "ntpath.normcase"], "fnmatch.fnmatchcase": ["fnmatch._compile_pattern"], "fnmatch._compile_pattern": ["<builtin>.bytes", "fnmatch.translate", "<builtin>.isinstance", "<builtin>.str", "re.compile"], "fnmatch.translate": ["re.escape", "re.sub", "<builtin>.len"], "fnmatch.filter": ["fnmatch._compile_pattern", "posixpath.normcase", "ntpath.normcase"], "csv.Dialect": [], "csv.Dialect.__init__": ["csv.Dialect._validate"], "csv.Dialect._validate": ["<builtin>.str"], "csv.excel": [], "csv.excel_tab": [], "csv.unix_dialect": [], "csv.DictReader": [], "csv.DictReader.__init__": [], "csv.DictReader.__iter__": [], "csv.DictReader.fieldnames": ["<builtin>.next"], "csv.DictReader.__next__": ["<builtin>.next", "<builtin>.len", "<builtin>.dict", "<builtin>.zip"], "csv.DictWriter": [], "csv.DictWriter.__init__": ["<builtin>.ValueError"], "csv.DictWriter.writeheader": ["<builtin>.zip", "csv.DictWriter.writerow", "<builtin>.dict"], "csv.DictWriter.writerow": ["csv.DictWriter._dict_to_list"], "csv.DictWriter._dict_to_list": ["<builtin>.ValueError", "<builtin>.repr"], "csv.DictWriter.writerows": ["<builtin>.map"], "csv.Sniffer": [], "csv.Sniffer.__init__": [], "csv.Sniffer.sniff": ["csv.Sniffer.sniff.dialect", "csv.Sniffer._guess_delimiter", "csv.Sniffer._guess_quote_and_delimiter"], "csv.Sniffer._guess_quote_and_delimiter": ["re.escape", "<builtin>.max", "re.compile"], "csv.Sniffer._guess_delimiter": ["<builtin>.float", "<builtin>.max", "<builtin>.list", "<builtin>.len", "<builtin>.filter", "<builtin>.min", "<builtin>.chr", "<builtin>.sum", "<builtin>.range"], "csv.Sniffer.sniff.dialect": [], "csv.Sniffer._guess_delimiter.<lambda1>": [], "csv.Sniffer.has_header": ["<builtin>.next", "<builtin>.type", "<builtin>.list", "<builtin>.len", "_io.StringIO", "<builtin>.range", "csv.Sniffer.sniff"], "_bootstrap._setup": [], "_bootstrap_external._setup": [], "importlib.invalidate_caches": ["sys.meta_path.invalidate_caches", "<builtin>.hasattr"], "sys.meta_path.invalidate_caches": [], "importlib.find_loader": ["<builtin>.ImportError", "warnings.warn", "_bootstrap._find_spec", "<builtin>.ValueError", "_frozen_importlib._find_spec"], "_bootstrap._gcd_import": [], "importlib.reload": ["<builtin>.ImportError", "_bootstrap._exec", "sys.modules.get", "<builtin>.isinstance", "<builtin>.ModuleNotFoundError", "_bootstrap._find_spec", "_frozen_importlib._exec", "<builtin>.TypeError", "_frozen_importlib._find_spec"], "_bootstrap._exec": [], "importlib.machinery.all_suffixes": [], "difflib._calculate_ratio": [], "difflib.SequenceMatcher": [], "difflib.SequenceMatcher.__init__": ["difflib.SequenceMatcher.set_seqs"], "difflib.SequenceMatcher.set_seqs": ["difflib.SequenceMatcher.set_seq2", "difflib.SequenceMatcher.set_seq1"], "difflib.SequenceMatcher.set_seq1": [], "difflib.SequenceMatcher.set_seq2": ["difflib.SequenceMatcher.__chain_b"], "difflib.SequenceMatcher.__chain_b": ["<builtin>.set", "<builtin>.enumerate", "<builtin>.len", "difflib.IS_CHARACTER_JUNK"], "difflib.IS_CHARACTER_JUNK": [], "difflib.SequenceMatcher.find_longest_match": ["<builtin>.range"], "difflib.SequenceMatcher.get_matching_blocks": ["<builtin>.map", "difflib.SequenceMatcher.find_longest_match", "<builtin>.list", "<builtin>.len"], "difflib.SequenceMatcher.get_opcodes": ["difflib.SequenceMatcher.get_matching_blocks"], "difflib.SequenceMatcher.get_grouped_opcodes": ["<builtin>.len", "<builtin>.max", "<builtin>.min", "difflib.SequenceMatcher.get_opcodes"], "difflib.SequenceMatcher.ratio": ["difflib.SequenceMatcher.get_matching_blocks", "difflib._calculate_ratio", "<builtin>.sum", "<builtin>.len"], "difflib.SequenceMatcher.quick_ratio": ["difflib._calculate_ratio", "<builtin>.len"], "difflib.SequenceMatcher.real_quick_ratio": ["difflib._calculate_ratio", "<builtin>.min", "<builtin>.len"], "difflib.get_close_matches": ["difflib.SequenceMatcher.ratio", "difflib.SequenceMatcher.__init__", "difflib.SequenceMatcher.set_seq2", "difflib.SequenceMatcher.quick_ratio", "<builtin>.ValueError", "difflib.SequenceMatcher.set_seq1", "heapq.nlargest", "difflib.SequenceMatcher.real_quick_ratio"], "difflib._keep_original_ws": ["<builtin>.zip"], "difflib.Differ": [], "difflib.Differ._fancy_replace": ["difflib.SequenceMatcher.set_seqs", "difflib.SequenceMatcher.ratio", "difflib.Differ._plain_replace", "difflib.SequenceMatcher.__init__", "difflib.SequenceMatcher.set_seq2", "difflib.SequenceMatcher.get_opcodes", "difflib.Differ._qformat", "difflib.SequenceMatcher.quick_ratio", "<builtin>.ValueError", "difflib.SequenceMatcher.set_seq1", "difflib.Differ._fancy_helper", "<builtin>.range", "difflib.SequenceMatcher.real_quick_ratio"], "difflib.Differ._dump": ["<builtin>.range"], "difflib.Differ._plain_replace": ["difflib.Differ._dump"], "difflib.Differ._fancy_helper": ["difflib.Differ._dump", "difflib.Differ._fancy_replace"], "difflib.Differ._qformat": ["difflib._keep_original_ws"], "difflib.IS_LINE_JUNK": [], "difflib._format_range_unified": [], "difflib._check_types": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError"], "difflib._format_range_context": [], "difflib.diff_bytes": ["<builtin>.map", "difflib.diff_bytes.decode", "<builtin>.list"], "difflib.diff_bytes.decode": ["<builtin>.type", "<builtin>.TypeError"], "difflib.ndiff": ["difflib.Differ.__init__", "difflib.Differ.compare"], "difflib._mdiff._make_line": ["<builtin>.reversed"], "difflib._mdiff._make_line.record_sub_info": [], "difflib._mdiff._line_iterator": ["<builtin>.next", "difflib._mdiff._make_line", "<builtin>.len"], "difflib._mdiff._line_pair_iterator": ["difflib._mdiff._line_iterator", "<builtin>.next", "<builtin>.len"], "difflib.HtmlDiff": [], "difflib.HtmlDiff.__init__": [], "difflib.HtmlDiff.make_file": ["difflib.HtmlDiff.make_table", "<builtin>.dict"], "difflib.HtmlDiff.make_table": ["difflib.HtmlDiff._collect_lines", "difflib.HtmlDiff._convert_flags", "<builtin>.dict", "<builtin>.len", "difflib.HtmlDiff._line_wrapper", "difflib._mdiff", "<builtin>.range", "difflib.HtmlDiff._make_prefix", "difflib.HtmlDiff._tab_newline_replace"], "difflib.HtmlDiff._tab_newline_replace": ["difflib.HtmlDiff._tab_newline_replace.expand_tabs"], "difflib.HtmlDiff._tab_newline_replace.expand_tabs": [], "difflib.HtmlDiff._split_line": ["difflib.HtmlDiff._split_line", "<builtin>.len"], "difflib.HtmlDiff._line_wrapper": ["difflib.HtmlDiff._split_line"], "difflib.HtmlDiff._collect_lines": ["difflib.HtmlDiff._format_line"], "difflib.HtmlDiff._format_line": [], "difflib.HtmlDiff._make_prefix": [], "difflib.HtmlDiff._convert_flags": ["<builtin>.enumerate", "<builtin>.max", "<builtin>.len"], "difflib.restore": ["<builtin>.int", "<builtin>.ValueError"], "heapq.heappush": ["heapq._siftdown", "<builtin>.len"], "heapq._siftdown": [], "heapq.heappop": ["heapq._siftup"], "heapq._siftup": ["heapq._siftdown", "<builtin>.len"], "heapq.heapreplace": ["heapq._siftup"], "heapq.heappushpop": ["heapq._siftup"], "heapq.heapify": ["heapq._siftup", "<builtin>.reversed", "<builtin>.range", "<builtin>.len"], "heapq._heappop_max": ["heapq._siftup_max"], "heapq._siftup_max": ["heapq._siftdown_max", "<builtin>.len"], "heapq._heapreplace_max": ["heapq._siftup_max"], "heapq._heapify_max": ["<builtin>.reversed", "<builtin>.range", "heapq._siftup_max", "<builtin>.len"], "heapq._siftdown_max": [], "heapq.merge": ["<builtin>.map", "heapq._heapify_max", "heapq._heappop_max", "heapq.heappop", "<builtin>.enumerate", "<builtin>.len", "heapq.heapify", "heapq._heapreplace_max", "heapq.heapreplace"], "heapq.nsmallest": ["heapq._heapify_max", "<builtin>.sorted", "<builtin>.zip", "<builtin>.len", "<builtin>.min", "heapq._heapreplace_max", "<builtin>.iter", "<builtin>.range", "<builtin>.object"], "inspect.isdatadescriptor": ["inspect.isclass", "inspect.isfunction", "inspect.ismethod", "<builtin>.type", "<builtin>.hasattr"], "inspect.ismemberdescriptor": ["<builtin>.isinstance"], "inspect.isgetsetdescriptor": ["<builtin>.isinstance"], "inspect._has_code_flag": ["<builtin>.bool", "inspect.isfunction", "functools._unwrap_partial", "inspect.ismethod"], "inspect.isgeneratorfunction": ["inspect._has_code_flag"], "inspect.iscoroutinefunction": ["inspect._has_code_flag"], "inspect.isasyncgenfunction": ["inspect._has_code_flag"], "inspect.isasyncgen": ["<builtin>.isinstance"], "inspect.isgenerator": ["<builtin>.isinstance"], "inspect.iscoroutine": ["<builtin>.isinstance"], "inspect.isawaitable": ["<builtin>.isinstance", "<builtin>.bool"], "inspect.isbuiltin": ["<builtin>.isinstance"], "inspect.isabstract": ["<builtin>.isinstance", "<builtin>.issubclass", "<builtin>.hasattr", "<builtin>.type", "<builtin>.getattr"], "inspect.getmembers": ["<builtin>.dir", "inspect.getmro", "inspect.isclass", "<builtin>.isinstance", "<builtin>.set", "<builtin>.getattr"], "inspect.getmro": [], "inspect.getmembers.<lambda1>": [], "inspect.classify_class_attrs": ["<builtin>.tuple", "<builtin>.dir", "inspect.getmro", "inspect.isroutine", "<builtin>.isinstance", "<builtin>.set", "<builtin>.type", "<builtin>.Exception", "<builtin>.getattr"], "<builtin>.Exception": [], "inspect.unwrap._is_wrapper": ["inspect._signature_from_callable.<lambda1>", "<builtin>.hasattr"], "inspect._signature_from_callable.<lambda1>": ["<builtin>.hasattr"], "sys.getrecursionlimit": [], "inspect.indentsize": ["<builtin>.len"], "inspect._findclass": ["inspect.isclass", "sys.modules.get", "<builtin>.getattr"], "inspect._finddoc": ["inspect.isclass", "inspect.isfunction", "inspect.isbuiltin", "inspect.ismethod", "<builtin>.isinstance", "inspect.ismethoddescriptor", "inspect.ismemberdescriptor", "inspect._findclass", "inspect.isdatadescriptor", "<builtin>.getattr"], "inspect.getdoc": ["inspect._finddoc", "<builtin>.isinstance", "inspect.cleandoc"], "inspect.cleandoc": ["<builtin>.range", "<builtin>.min", "<builtin>.len"], "inspect.getmodulename": ["<builtin>.len", "ntpath.basename", "posixpath.basename"], "inspect.getabsfile": ["inspect.getfile", "ntpath.normcase", "posixpath.abspath", "inspect.getsourcefile", "ntpath.abspath", "posixpath.normcase"], "sys.modules.copy": [], "inspect.findsource": ["inspect.getmodule", "inspect.getfile", "inspect.isclass", "inspect.isfunction", "inspect.isframe", "inspect.ismethod", "inspect.istraceback", "<builtin>.OSError", "inspect.iscode", "inspect.getsourcefile", "<builtin>.len", "linecache.checkcache", "<builtin>.hasattr", "linecache.getlines", "<builtin>.range", "re.compile", "inspect.ismodule"], "inspect.getcomments": ["inspect.findsource", "inspect.indentsize", "<builtin>.len", "inspect.ismodule"], "inspect.EndOfBlock": [], "inspect.BlockFinder": [], "inspect.BlockFinder.__init__": [], "inspect.BlockFinder.tokeneater": [], "inspect.getblock": ["<builtin>.iter", "inspect.BlockFinder.tokeneater", "inspect.BlockFinder.__init__"], "inspect.getsourcelines": ["inspect.isframe", "inspect.istraceback", "inspect.unwrap", "inspect.findsource", "inspect.getblock", "inspect.ismodule"], "inspect.getsource": ["inspect.getsourcelines"], "inspect.walktree": ["inspect.walktree", "operator.attrgetter.__init__"], "inspect.getclasstree": ["inspect.walktree"], "inspect.getargs": ["inspect.iscode", "<builtin>.TypeError", "<builtin>.list"], "inspect.getargspec": ["inspect.getfullargspec", "<builtin>.ValueError", "warnings.warn"], "inspect.getfullargspec": ["<builtin>.TypeError", "inspect._signature_from_callable"], "inspect._signature_from_callable": ["<builtin>.tuple", "inspect._signature_fromstr", "<builtin>.callable", "inspect.isfunction", "inspect._signature_is_functionlike", "inspect._signature_from_builtin", "<builtin>.isinstance", "inspect._signature_from_function", "<builtin>.type", "inspect._signature_from_callable", "inspect.Signature.from_callable", "inspect.unwrap", "inspect._signature_get_partial", "<builtin>.ValueError", "inspect._signature_get_user_defined_method", "<builtin>.TypeError", "inspect._signature_is_builtin", "inspect._signature_bound_method"], "inspect.getargvalues": ["inspect.getargs"], "inspect.formatannotation": ["<builtin>.isinstance", "<builtin>.repr", "<builtin>.getattr"], "inspect.formatannotationrelativeto": ["<builtin>.getattr"], "inspect.formatannotationrelativeto._formatannotation": ["inspect.formatannotation"], "inspect.formatargspec.formatargandannotation": ["inspect.formatannotation"], "inspect.<lambda3>": [], "inspect.<lambda1>": [], "inspect.<lambda2>": [], "inspect.<lambda4>": [], "inspect.formatargvalues": ["inspect.<lambda7>", "<builtin>.len", "inspect.formatargvalues.convert", "inspect.<lambda6>", "<builtin>.range", "inspect.<lambda5>"], "inspect.formatargvalues.convert": ["inspect.<lambda7>"], "inspect.<lambda7>": [], "inspect.<lambda5>": [], "inspect.<lambda6>": [], "inspect._missing_arguments": ["<builtin>.TypeError", "<builtin>.len", "<builtin>.repr"], "inspect._too_many": ["<builtin>.str", "<builtin>.TypeError", "<builtin>.len"], "inspect.getcallargs": ["<builtin>.tuple", "inspect.getfullargspec", "inspect._missing_arguments", "inspect._too_many", "inspect.ismethod", "<builtin>.enumerate", "<builtin>.TypeError", "<builtin>.len", "<builtin>.min", "<builtin>.set", "<builtin>.range"], "inspect.getclosurevars": ["inspect.isfunction", "inspect.ismethod", "<builtin>.zip", "<builtin>.set", "<builtin>.TypeError", "inspect.ismodule"], "inspect.getframeinfo": ["inspect.getfile", "inspect.isframe", "<builtin>.max", "inspect.istraceback", "inspect.getsourcefile", "<builtin>.len", "<builtin>.min", "inspect.findsource", "<builtin>.TypeError"], "inspect.getlineno": [], "inspect.getouterframes": ["inspect.getframeinfo"], "inspect.getinnerframes": ["inspect.getframeinfo"], "inspect.currentframe": ["sys._getframe", "<builtin>.hasattr"], "inspect.stack": ["sys._getframe", "inspect.getouterframes"], "inspect.trace": ["inspect.getinnerframes", "sys.exc_info"], "inspect._static_getmro": [], "inspect._check_instance": [], "inspect._check_class": ["inspect._static_getmro", "<builtin>.type", "inspect._shadowed_dict"], "inspect._shadowed_dict": ["inspect._static_getmro", "<builtin>.type"], "inspect._is_type": ["inspect._static_getmro"], "inspect.getattr_static": ["inspect._check_class", "inspect._static_getmro", "<builtin>.AttributeError", "inspect._check_instance", "inspect._shadowed_dict", "inspect._is_type", "<builtin>.type"], "inspect.getgeneratorstate": [], "inspect.getgeneratorlocals": ["<builtin>.TypeError", "inspect.isgenerator", "<builtin>.getattr"], "inspect.getcoroutinestate": [], "inspect.getcoroutinelocals": ["<builtin>.getattr"], "inspect._signature_get_user_defined_method": ["<builtin>.isinstance", "<builtin>.getattr"], "inspect._signature_get_partial": ["_collections.OrderedDict.move_to_end", "_collections.OrderedDict.values", "_collections.OrderedDict.pop", "_collections.OrderedDict", "<builtin>.ValueError"], "_collections.OrderedDict.pop": [], "_collections.OrderedDict.move_to_end": [], "_collections.OrderedDict.values": [], "inspect._signature_bound_method": ["<builtin>.tuple", "<builtin>.ValueError"], "inspect._signature_is_builtin": ["<builtin>.isinstance", "inspect.ismethoddescriptor", "inspect.isbuiltin"], "inspect._signature_is_functionlike": ["<builtin>.callable", "inspect.isclass", "<builtin>.isinstance", "<builtin>.getattr"], "inspect._signature_get_bound_param": [], "inspect._signature_strip_non_python_syntax": ["<builtin>.iter", "<builtin>.next"], "ast.parse": ["<builtin>.isinstance", "<builtin>.compile"], "inspect._signature_fromstr.parse_name": ["<builtin>.isinstance", "<builtin>.ValueError"], "inspect._signature_fromstr.wrap_value": ["<builtin>.type", "<builtin>.RuntimeError", "<builtin>.eval", "<builtin>.isinstance"], "<builtin>.eval": [], "inspect._signature_fromstr.RewriteSymbolics": [], "inspect._signature_fromstr.RewriteSymbolics.visit_Attribute": ["<builtin>.RuntimeError", "<builtin>.isinstance", "inspect._signature_fromstr.wrap_value", "<builtin>.reversed"], "inspect._signature_fromstr.RewriteSymbolics.visit_Name": ["<builtin>.isinstance", "inspect._signature_fromstr.wrap_value", "<builtin>.ValueError"], "inspect._signature_fromstr.p": ["ast.literal_eval", "ast.NodeVisitor.visit", "inspect.Parameter.__init__", "inspect._signature_fromstr.parse_name"], "ast.NodeVisitor.visit": ["<builtin>.getattr"], "ast.literal_eval": ["ast.literal_eval._convert", "<builtin>.isinstance", "ast.parse"], "inspect.Parameter.__init__": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "itertools.zip_longest": [], "inspect.Signature.__init__": ["<builtin>.enumerate", "_collections.OrderedDict", "<builtin>.ValueError"], "inspect._signature_from_builtin": ["inspect._signature_fromstr", "<builtin>.ValueError", "<builtin>.TypeError", "inspect._signature_is_builtin", "<builtin>.getattr"], "inspect._signature_from_function": ["inspect._signature_fromstr", "inspect.Signature.__init__", "inspect._signature_is_functionlike", "inspect.isfunction", "<builtin>.enumerate", "<builtin>.len", "inspect.Parameter.__init__", "<builtin>.TypeError", "<builtin>.getattr"], "inspect.Signature.from_callable": ["inspect._signature_from_callable"], "inspect._void": [], "inspect._empty": [], "inspect._ParameterKind": [], "inspect._ParameterKind.__str__": [], "inspect._ParameterKind.description": [], "inspect.Parameter": [], "inspect.Parameter.__reduce__": ["<builtin>.type"], "inspect.Parameter.__setstate__": [], "inspect.Parameter.name": [], "inspect.Parameter.default": [], "inspect.Parameter.annotation": [], "inspect.Parameter.kind": [], "inspect.Parameter.replace": ["<builtin>.type"], "inspect.Parameter.__str__": ["inspect.formatannotation", "<builtin>.repr"], "inspect.Parameter.__repr__": [], "inspect.Parameter.__hash__": ["<builtin>.hash"], "inspect.Parameter.__eq__": ["<builtin>.isinstance"], "inspect.BoundArguments": [], "inspect.BoundArguments.__init__": [], "inspect.BoundArguments.signature": [], "inspect.BoundArguments.args": ["<builtin>.tuple"], "inspect.BoundArguments.kwargs": [], "inspect.BoundArguments.apply_defaults": ["_collections.OrderedDict"], "inspect.BoundArguments.__eq__": ["<builtin>.isinstance"], "inspect.BoundArguments.__setstate__": [], "inspect.BoundArguments.__getstate__": [], "inspect.BoundArguments.__repr__": ["_collections.OrderedDict.items"], "inspect.Signature": [], "inspect.Signature.from_function": ["inspect._signature_from_function", "warnings.warn"], "inspect.Signature.from_builtin": ["inspect._signature_from_builtin", "warnings.warn"], "inspect.Signature.parameters": [], "inspect.Signature.return_annotation": [], "inspect.Signature.replace": ["<builtin>.type"], "inspect.Signature._hash_basis": ["<builtin>.tuple"], "inspect.Signature.__hash__": ["<builtin>.hash", "<builtin>.frozenset", "inspect.Signature._hash_basis"], "inspect.Signature.__eq__": ["<builtin>.isinstance", "inspect.Signature._hash_basis"], "inspect.Signature._bind": ["<builtin>.tuple", "<builtin>.next", "_collections.OrderedDict", "itertools.chain", "<builtin>.iter", "<builtin>.TypeError", "inspect.BoundArguments.__init__"], "inspect.Signature.bind": [], "inspect.Signature.bind_partial": [], "inspect.Signature.__reduce__": ["<builtin>.tuple", "<builtin>.type"], "inspect.Signature.__setstate__": [], "inspect.Signature.__repr__": [], "inspect.Signature.__str__": ["<builtin>.str", "inspect.formatannotation"], "inspect.signature": ["inspect.Signature.from_callable"], "ast.literal_eval._convert_num": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.repr"], "ast.literal_eval._convert_signed_num": ["ast.literal_eval._convert_num", "<builtin>.isinstance"], "ast.literal_eval._convert": ["<builtin>.map", "<builtin>.tuple", "ast.literal_eval._convert_num", "<builtin>.zip", "<builtin>.isinstance", "<builtin>.list", "<builtin>.dict", "ast.literal_eval._convert_signed_num", "<builtin>.set"], "ast.dump": ["ast.dump._format", "<builtin>.isinstance", "<builtin>.TypeError"], "ast.dump._format": ["ast.dump._format", "<builtin>.isinstance", "<builtin>.repr", "<builtin>.getattr"], "ast.copy_location": ["<builtin>.setattr", "<builtin>.getattr", "<builtin>.hasattr"], "ast.fix_missing_locations": ["ast.fix_missing_locations._fix"], "ast.fix_missing_locations._fix": ["ast.fix_missing_locations._fix", "ast.iter_child_nodes", "<builtin>.hasattr"], "ast.iter_child_nodes": ["<builtin>.isinstance", "ast.iter_fields"], "ast.increment_lineno": ["ast.walk", "<builtin>.getattr"], "ast.iter_fields": ["<builtin>.getattr"], "ast._splitlines_no_ff": ["<builtin>.len"], "ast._pad_whitespace": [], "ast.get_source_segment": ["ast._pad_whitespace", "ast._splitlines_no_ff"], "ast.NodeVisitor": [], "ast.NodeVisitor.generic_visit": ["ast.NodeVisitor.visit", "<builtin>.isinstance", "ast.iter_fields"], "ast.NodeTransformer": [], "ast.NodeTransformer.generic_visit": ["ast.NodeVisitor.visit", "<builtin>.setattr", "<builtin>.isinstance", "ast.iter_fields", "<builtin>.delattr"], "ast._getter": [], "ast._setter": [], "ast._ABC": [], "ast._ABC.__instancecheck__": ["<builtin>.isinstance"], "ast._new": [], "ast.Num": [], "ast.Str": [], "ast.Bytes": [], "ast.NameConstant": [], "ast.Ellipsis": [], "ast.Ellipsis.__new__": [], "dis._try_compile": ["<builtin>.compile"], "dis.dis": ["<builtin>.sorted", "dis._disassemble_bytes", "<builtin>.isinstance", "dis.distb", "dis._disassemble_recursive", "<builtin>.TypeError", "<builtin>.print", "dis.dis", "dis._disassemble_str", "<builtin>.type", "<builtin>.hasattr"], "dis.distb": ["dis.disassemble", "<builtin>.RuntimeError"], "dis._disassemble_recursive": ["dis.disassemble", "<builtin>.print", "dis._disassemble_recursive", "<builtin>.hasattr"], "dis._disassemble_bytes": ["<builtin>.max", "<builtin>.len", "<builtin>.print", "dis.Instruction._disassemble", "<builtin>.str", "dis._get_instructions_bytes"], "dis._disassemble_str": ["dis._disassemble_recursive", "dis._try_compile"], "dis.disassemble": ["dis.findlinestarts", "dis._disassemble_bytes", "<builtin>.dict"], "dis.pretty_flags": ["<builtin>.range", "<builtin>.hex"], "dis._get_code_object": ["<builtin>.isinstance", "<builtin>.TypeError", "dis._try_compile", "<builtin>.type", "<builtin>.hasattr"], "dis.code_info": ["dis._format_code_info", "dis._get_code_object"], "dis._format_code_info": ["<builtin>.enumerate", "dis.pretty_flags"], "dis.show_code": ["<builtin>.print", "dis.code_info"], "dis.Instruction": [], "dis.Instruction._disassemble": ["<builtin>.repr"], "dis.get_instructions": ["dis.findlinestarts", "<builtin>.dict", "dis._get_instructions_bytes", "dis._get_code_object"], "dis.findlinestarts": ["<builtin>.zip", "<builtin>.len"], "dis._get_instructions_bytes": ["dis._get_name_info", "dis._unpack_opargs", "dis.findlabels", "<builtin>.enumerate", "<builtin>.repr", "<builtin>.bool", "dis._get_const_info"], "dis._get_const_info": ["<builtin>.repr"], "dis._get_name_info": ["<builtin>.repr"], "dis.findlabels": ["dis._unpack_opargs"], "dis._unpack_opargs": ["<builtin>.range", "<builtin>.len"], "dis.Bytecode": [], "dis.Bytecode.__init__": ["dis.findlinestarts", "<builtin>.dict", "dis._get_code_object"], "dis.Bytecode.__iter__": ["dis._get_instructions_bytes"], "dis.Bytecode.__repr__": [], "dis.Bytecode.from_traceback": ["dis.Bytecode.__init__"], "dis.Bytecode.info": ["dis._format_code_info"], "dis.Bytecode.dis": ["dis._disassemble_bytes", "io.StringIO"], "opcode.def_op": [], "opcode.name_op": ["opcode.def_op"], "opcode.jrel_op": ["opcode.def_op"], "opcode.jabs_op": ["opcode.def_op"], "unittest.loader._FailedTest": [], "unittest.loader._FailedTest.__init__": ["<builtin>.super"], "unittest.loader._FailedTest.__getattr__": ["<builtin>.super"], "unittest.loader._FailedTest.__getattr__.testFailure": [], "unittest.loader._make_failed_import_test": ["traceback.format_exc", "<builtin>.ImportError", "unittest.loader._make_failed_test"], "unittest.loader._make_failed_test": ["unittest.suite.BaseTestSuite.__init__", "unittest.loader._FailedTest.__init__"], "unittest.loader._make_failed_load_tests": ["traceback.format_exc", "unittest.loader._make_failed_test"], "unittest.loader._make_skipped_test": ["unittest.case.skip.decorator", "unittest.suite.BaseTestSuite.__init__", "unittest.case.skipUnless.reason", "<builtin>.type", "unittest.case.skip", "unittest.case.skip.decorator.skip_wrapper", "unittest.case.skipIf.reason", "<builtin>.str"], "unittest.case.skip": ["unittest.case.skip.decorator", "<builtin>.isinstance"], "unittest.case.skip.decorator": ["_functools.partial", "<builtin>.isinstance", "functools.wraps"], "unittest.case.skipIf.reason": [], "unittest.case.skipUnless.reason": [], "unittest.case.skip.decorator.skip_wrapper": [], "unittest.loader._make_skipped_test.testSkipped": [], "unittest.loader._jython_aware_splitext": ["sys.path.lower", "posixpath.splitext", "sys.base_prefix.lower", "ntpath.splitext"], "sys.path.lower": [], "sys.base_prefix.lower": [], "unittest.loader.TestLoader": ["<builtin>.staticmethod"], "unittest.loader.TestLoader.__init__": ["<builtin>.set", "<builtin>.super"], "unittest.loader.TestLoader.loadTestsFromTestCase": ["<builtin>.map", "unittest.loader.TestLoader.getTestCaseNames", "unittest.suite.BaseTestSuite.__init__", "<builtin>.issubclass", "<builtin>.TypeError", "<builtin>.hasattr"], "unittest.loader.TestLoader.getTestCaseNames": ["<builtin>.list", "<builtin>.dir", "<builtin>.filter", "functools.cmp_to_key"], "unittest.loader.TestLoader.loadTestsFromModule": ["<builtin>.dir", "unittest.loader._make_failed_load_tests", "<builtin>.sorted", "unittest.loader.TestLoader.loadTestsFromTestCase", "unittest.suite.BaseTestSuite.__init__", "<builtin>.isinstance", "warnings.warn", "<builtin>.len", "<builtin>.issubclass", "<builtin>.TypeError", "<builtin>.getattr"], "unittest.loader.TestLoader.loadTestsFromName": ["traceback.format_exc", "<builtin>.callable", "<builtin>.__import__", "unittest.loader.TestLoader.loadTestsFromTestCase", "unittest.loader._make_failed_test", "unittest.suite.BaseTestSuite.__init__", "unittest.loader.TestLoader.loadTestsFromModule", "<builtin>.isinstance", "<builtin>.issubclass", "unittest.loader._make_failed_import_test", "<builtin>.TypeError", "<builtin>.getattr"], "unittest.loader.TestLoader.loadTestsFromNames": ["unittest.suite.BaseTestSuite.__init__", "unittest.loader.TestLoader.loadTestsFromName"], "unittest.loader.TestLoader.getTestCaseNames.shouldIncludeMethod": ["<builtin>.callable", "<builtin>.any", "fnmatch.fnmatchcase", "<builtin>.getattr"], "unittest.loader.TestLoader.discover": ["<builtin>.__import__", "<builtin>.ImportError", "unittest.loader.TestLoader._find_tests", "<builtin>.TypeError", "ntpath.dirname", "unittest.suite.BaseTestSuite.__init__", "posixpath.abspath", "ntpath.abspath", "sys.path.insert", "sys.path.remove", "<builtin>.list", "posixpath.isdir", "ntpath.join", "posixpath.join", "ntpath.isdir", "ntpath.isfile", "unittest.loader.TestLoader._get_directory_containing_module", "posixpath.dirname", "posixpath.isfile"], "unittest.loader.TestLoader._find_tests": ["<builtin>.sorted", "ntpath.join", "unittest.loader.TestLoader._find_tests", "unittest.loader.TestLoader._find_test_path", "posixpath.join", "unittest.loader.TestLoader._get_name_from_path"], "unittest.loader.TestLoader._get_directory_containing_module": ["ntpath.dirname", "ntpath.basename", "posixpath.basename", "posixpath.abspath", "ntpath.abspath", "posixpath.dirname"], "sys.path.remove": [], "unittest.loader.TestLoader._get_name_from_path": ["ntpath.isabs", "posixpath.normpath", "unittest.loader._jython_aware_splitext", "posixpath.isabs", "sys.base_prefix.replace", "ntpath.relpath", "ntpath.normpath", "sys.path.replace", "posixpath.relpath", "sys.base_prefix.startswith", "sys.path.startswith"], "unittest.loader.TestLoader._get_module_from_name": ["<builtin>.__import__"], "unittest.loader.TestLoader._match_path": ["fnmatch.fnmatch"], "unittest.loader.TestLoader._find_test_path": ["unittest.loader.TestLoader._match_path", "<builtin>.ImportError", "posixpath.basename", "unittest.loader._make_skipped_test", "unittest.loader._make_failed_import_test", "ntpath.dirname", "ntpath.basename", "unittest.loader._jython_aware_splitext", "posixpath.abspath", "unittest.loader.TestLoader._get_module_from_name", "ntpath.abspath", "unittest.loader.TestLoader._get_name_from_path", "posixpath.realpath", "ntpath.realpath", "posixpath.isdir", "ntpath.join", "posixpath.join", "ntpath.isdir", "unittest.loader.TestLoader.loadTestsFromModule", "ntpath.isfile", "posixpath.dirname", "posixpath.isfile", "<builtin>.getattr"], "unittest.loader._makeLoader": ["unittest.loader.TestLoader.__init__"], "unittest.loader.getTestCaseNames": ["unittest.loader._makeLoader", "unittest.loader.TestLoader.getTestCaseNames"], "unittest.loader.makeSuite": ["unittest.loader._makeLoader", "unittest.loader.TestLoader.loadTestsFromTestCase"], "unittest.loader.findTestCases": ["unittest.loader._makeLoader", "unittest.loader.TestLoader.loadTestsFromModule"], "unittest.result.failfast": ["_functools.partial", "functools.wraps"], "unittest.result.failfast.inner": ["<builtin>.getattr"], "unittest.result.TestResult": ["unittest.runner.TextTestRunner.failfast", "unittest.result.TestResult.failfast", "unittest.main.TestProgram.__init__.failfast"], "unittest.result.TestResult.__init__": [], "unittest.result.TestResult.printErrors": [], "unittest.result.TestResult.startTest": ["unittest.result.TestResult._setupStdout"], "unittest.result.TestResult._setupStdout": ["io.StringIO"], "unittest.result.TestResult.startTestRun": [], "unittest.result.TestResult.stopTest": ["unittest.result.TestResult._restoreStdout"], "unittest.result.TestResult._restoreStdout": ["sys.stderr.getvalue", "sys.stderr.write", "sys.stdout.getvalue", "sys.stdout.write"], "sys.stdout.getvalue": [], "sys.stderr.getvalue": [], "unittest.result.TestResult.stopTestRun": [], "unittest.runner.TextTestRunner.failfast": [], "unittest.result.TestResult.failfast": [], "unittest.main.TestProgram.__init__.failfast": [], "unittest.result.TestResult.addError": ["unittest.result.TestResult._exc_info_to_string"], "unittest.result.TestResult._exc_info_to_string": ["unittest.result.TestResult._count_relevant_tb_levels", "traceback.TracebackException.format", "<builtin>.list", "traceback.TracebackException.__init__", "sys.stdout.getvalue", "sys.stderr.getvalue", "unittest.result.TestResult._is_relevant_tb_level"], "unittest.result.TestResult.addFailure": ["unittest.result.TestResult._exc_info_to_string"], "unittest.result.TestResult.addSubTest": ["<builtin>.issubclass", "unittest.result.TestResult.stop", "unittest.result.TestResult._exc_info_to_string", "<builtin>.getattr"], "unittest.result.TestResult.stop": [], "unittest.result.TestResult.addSuccess": [], "unittest.result.TestResult.addSkip": [], "unittest.result.TestResult.addExpectedFailure": ["unittest.result.TestResult._exc_info_to_string"], "unittest.result.TestResult.addUnexpectedSuccess": [], "unittest.result.TestResult.wasSuccessful": ["<builtin>.hasattr", "<builtin>.len"], "unittest.result.TestResult._is_relevant_tb_level": [], "unittest.result.TestResult._count_relevant_tb_levels": ["unittest.result.TestResult._is_relevant_tb_level"], "unittest.result.TestResult.__repr__": ["unittest.util.strclass", "<builtin>.len"], "unittest.util.strclass": [], "unittest.util._shorten": ["<builtin>.len"], "unittest.util._common_shorten_repr": ["<builtin>.map", "<builtin>.tuple", "<builtin>.max", "<builtin>.len", "genericpath.commonprefix", "unittest.util._shorten"], "unittest.util.safe_repr": ["<builtin>.len", "<builtin>.repr"], "unittest.util.sorted_list_difference": [], "unittest.util.unorderable_list_difference": [], "unittest.util.three_way_cmp": [], "unittest.util._count_diff_all_purpose": ["<builtin>.enumerate", "<builtin>.list", "<builtin>.len", "<builtin>.range", "<builtin>.object"], "unittest.util._count_diff_hashable": ["collections.Counter.__init__"], "unittest.suite._call_if_exists": ["<builtin>.getattr"], "unittest.suite._call_if_exists.<lambda1>": [], "unittest.suite.BaseTestSuite": [], "unittest.suite.BaseTestSuite.addTests": ["unittest.suite.BaseTestSuite.addTest", "<builtin>.isinstance", "<builtin>.TypeError"], "unittest.suite.BaseTestSuite.__repr__": ["unittest.util.strclass", "<builtin>.list"], "unittest.suite.BaseTestSuite.__eq__": ["<builtin>.isinstance", "<builtin>.list"], "unittest.suite.BaseTestSuite.__iter__": ["<builtin>.iter"], "unittest.suite.BaseTestSuite.countTestCases": ["unittest.suite.BaseTestSuite.countTestCases", "unittest.suite.BaseTestSuite.__iter__"], "unittest.suite.BaseTestSuite.run": ["<builtin>.enumerate", "unittest.suite.BaseTestSuite._removeTestAtIndex", "doctest._DocTestSuite._removeTestAtIndex"], "unittest.suite.BaseTestSuite._removeTestAtIndex": ["<builtin>.hasattr"], "unittest.suite.BaseTestSuite.__call__": ["unittest.suite.TestSuite.run", "unittest.suite.BaseTestSuite.run"], "unittest.suite.TestSuite.run": ["unittest.suite.TestSuite._tearDownPreviousClass", "<builtin>.enumerate", "doctest._DocTestSuite._removeTestAtIndex", "unittest.suite.TestSuite._handleModuleTearDown", "unittest.suite._isnotsuite", "unittest.suite.TestSuite._handleClassSetUp", "unittest.suite.TestSuite._handleModuleFixture", "<builtin>.getattr"], "unittest.suite.BaseTestSuite.debug": ["unittest.suite.BaseTestSuite.debug", "unittest.suite.TestSuite.debug", "unittest.suite.BaseTestSuite.__iter__"], "unittest.suite.TestSuite.debug": ["unittest.suite.TestSuite.run"], "unittest.suite.TestSuite": [], "unittest.suite._isnotsuite": ["<builtin>.iter"], "unittest.suite.TestSuite._tearDownPreviousClass": ["unittest.util.strclass", "<builtin>.isinstance", "<builtin>.len", "unittest.suite._call_if_exists", "unittest.suite.TestSuite._createClassOrModuleLevelException", "<builtin>.getattr"], "unittest.suite.TestSuite._handleModuleFixture": ["unittest.suite.TestSuite._get_previous_module", "<builtin>.isinstance", "unittest.case.doModuleCleanups", "unittest.suite._call_if_exists", "unittest.suite.TestSuite._createClassOrModuleLevelException", "unittest.suite.TestSuite._handleModuleTearDown", "<builtin>.getattr"], "unittest.suite.TestSuite._handleClassSetUp": ["unittest.util.strclass", "<builtin>.isinstance", "<builtin>.len", "unittest.suite._call_if_exists", "unittest.suite.TestSuite._createClassOrModuleLevelException", "<builtin>.getattr"], "unittest.suite.TestSuite._handleModuleTearDown": ["unittest.suite.TestSuite._get_previous_module", "<builtin>.isinstance", "unittest.case.doModuleCleanups", "unittest.suite._call_if_exists", "unittest.suite.TestSuite._createClassOrModuleLevelException", "<builtin>.getattr"], "unittest.suite.TestSuite._createClassOrModuleLevelException": ["unittest.suite.TestSuite._addClassOrModuleLevelException"], "unittest.suite.TestSuite._get_previous_module": ["<builtin>.getattr"], "unittest.case.doModuleCleanups": [], "unittest.suite.TestSuite._addClassOrModuleLevelException": ["<builtin>.isinstance", "sys.exc_info", "<builtin>.str", "unittest.suite._ErrorHolder.__init__", "<builtin>.getattr"], "unittest.suite._ErrorHolder.__init__": [], "unittest.suite._ErrorHolder": [], "unittest.suite._ErrorHolder.id": [], "unittest.suite._ErrorHolder.shortDescription": [], "unittest.suite._ErrorHolder.__repr__": [], "unittest.suite._ErrorHolder.__str__": ["unittest.suite._ErrorHolder.id"], "unittest.suite._ErrorHolder.run": [], "unittest.suite._ErrorHolder.__call__": ["unittest.suite._ErrorHolder.run"], "unittest.suite._ErrorHolder.countTestCases": [], "unittest.suite._DebugResult": [], "unittest.main._convert_name": ["ntpath.isabs", "posixpath.isabs", "ntpath.isfile", "ntpath.relpath", "sys.path.lower", "sys.base_prefix.lower", "posixpath.relpath", "posixpath.isfile", "sys.base_prefix.startswith", "sys.path.startswith"], "unittest.main._convert_names": ["unittest.main._convert_name"], "unittest.main._convert_select_pattern": [], "unittest.main.TestProgram": [], "unittest.main.TestProgram.__init__": ["<builtin>.__import__", "unittest.main.TestProgram.runTests", "posixpath.basename", "ntpath.basename", "<builtin>.isinstance", "unittest.main.TestProgram.parseArgs", "<builtin>.getattr"], "unittest.main.TestProgram.parseArgs": ["unittest.main.TestProgram._do_discovery", "unittest.main.TestProgram._initArgParsers", "<builtin>.isinstance", "<builtin>.list", "argparse.ArgumentParser.parse_args", "<builtin>.len", "unittest.main._convert_names", "unittest.main.TestProgram.createTests"], "unittest.main.TestProgram.runTests": ["sys.exit", "<builtin>.isinstance", "unittest.result.TestResult.wasSuccessful", "unittest.runner.TextTestRunner.__init__", "unittest.signals.installHandler", "unittest.runner.TextTestRunner.run"], "unittest.main.TestProgram.usageExit": ["sys.exit", "<builtin>.print", "unittest.main.TestProgram._initArgParsers", "unittest.main.TestProgram._print_help"], "unittest.main.TestProgram._initArgParsers": ["unittest.main.TestProgram._getDiscoveryArgParser", "unittest.main.TestProgram._getMainArgParser", "unittest.main.TestProgram._getParentArgParser"], "unittest.main.TestProgram._do_discovery": ["unittest.main.TestProgram._initArgParsers", "unittest.main.TestProgram.createTests", "argparse.ArgumentParser.parse_args"], "unittest.main.TestProgram.createTests": [], "unittest.main.TestProgram._getParentArgParser": ["argparse.ArgumentParser.__init__", "argparse._ActionsContainer.add_argument"], "unittest.main.TestProgram._getMainArgParser": ["argparse.ArgumentParser.__init__", "argparse._ActionsContainer.add_argument"], "unittest.main.TestProgram._getDiscoveryArgParser": ["argparse.ArgumentParser.__init__", "argparse._ActionsContainer.add_argument"], "unittest.signals.installHandler": ["unittest.signals._InterruptHandler.__init__"], "unittest.runner.TextTestRunner.__init__": ["unittest.runner._WritelnDecorator.__init__"], "unittest.runner.TextTestRunner.run": ["<builtin>.map", "unittest.signals.registerResult", "time.perf_counter", "<builtin>.hasattr", "unittest.result.TestResult.wasSuccessful", "<builtin>.len", "unittest.runner.TextTestResult.printErrors", "unittest.runner.TextTestRunner._makeResult", "unittest.runner._WritelnDecorator.writeln", "<builtin>.getattr"], "unittest.runner._WritelnDecorator": [], "unittest.runner._WritelnDecorator.__init__": [], "unittest.runner._WritelnDecorator.__getattr__": ["<builtin>.AttributeError", "<builtin>.getattr"], "unittest.runner._WritelnDecorator.writeln": [], "unittest.runner.TextTestResult": [], "unittest.runner.TextTestResult.__init__": ["<builtin>.super"], "unittest.runner.TextTestResult.getDescription": ["<builtin>.str"], "unittest.runner.TextTestResult.startTest": ["<builtin>.super", "unittest.runner.TextTestResult.getDescription"], "unittest.runner.TextTestResult.addSuccess": ["unittest.runner._WritelnDecorator.writeln", "<builtin>.super"], "unittest.runner.TextTestResult.addError": ["unittest.runner._WritelnDecorator.writeln", "<builtin>.super"], "unittest.runner.TextTestResult.addFailure": ["unittest.runner._WritelnDecorator.writeln", "<builtin>.super"], "unittest.runner.TextTestResult.addSkip": ["unittest.runner._WritelnDecorator.writeln", "<builtin>.super"], "unittest.runner.TextTestResult.addExpectedFailure": ["unittest.runner._WritelnDecorator.writeln", "<builtin>.super"], "unittest.runner.TextTestResult.addUnexpectedSuccess": ["unittest.runner._WritelnDecorator.writeln", "<builtin>.super"], "unittest.runner.TextTestResult.printErrors": ["unittest.runner._WritelnDecorator.writeln", "unittest.runner.TextTestResult.printErrorList"], "unittest.runner.TextTestResult.printErrorList": ["unittest.runner._WritelnDecorator.writeln", "unittest.runner.TextTestResult.getDescription"], "unittest.runner.TextTestRunner": [], "unittest.runner.TextTestRunner._makeResult": ["unittest.runner.TextTestResult.__init__"], "unittest.signals.registerResult": [], "unittest.signals._InterruptHandler": [], "unittest.signals._InterruptHandler.__init__": ["<builtin>.isinstance", "<builtin>.TypeError"], "unittest.signals._InterruptHandler.__init__.default_handler": [], "unittest.signals._InterruptHandler.__call__": ["weakref.WeakKeyDictionary.keys"], "unittest.signals.removeResult": ["weakref.WeakKeyDictionary.pop", "<builtin>.bool"], "unittest.signals.removeHandler": ["_functools.partial", "functools.wraps"], "unittest.signals.removeHandler.inner": ["unittest.signals.removeHandler"], "unittest.async_case.IsolatedAsyncioTestCase": [], "unittest.async_case.IsolatedAsyncioTestCase.__init__": ["<builtin>.super"], "unittest.async_case.IsolatedAsyncioTestCase.asyncSetUp": [], "unittest.async_case.IsolatedAsyncioTestCase.asyncTearDown": [], "unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup": [], "unittest.async_case.IsolatedAsyncioTestCase._callSetUp": ["unittest.case.TestCase.setUp", "doctest.DocTestCase.setUp", "doctest.SkipDocTestCase.setUp", "unittest.async_case.IsolatedAsyncioTestCase._callAsync"], "unittest.case.TestCase.setUp": [], "unittest.async_case.IsolatedAsyncioTestCase._callAsync": ["inspect.isawaitable"], "unittest.async_case.IsolatedAsyncioTestCase._callTestMethod": ["unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"], "unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync": ["inspect.isawaitable"], "unittest.async_case.IsolatedAsyncioTestCase._callTearDown": ["unittest.case.TestCase.tearDown", "doctest.DocTestCase.tearDown", "unittest.async_case.IsolatedAsyncioTestCase._callAsync"], "unittest.case.TestCase.tearDown": [], "unittest.async_case.IsolatedAsyncioTestCase._callCleanup": ["unittest.async_case.IsolatedAsyncioTestCase._callMaybeAsync"], "unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner": [], "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop": ["unittest.async_case.IsolatedAsyncioTestCase._asyncioLoopRunner"], "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop": [], "unittest.async_case.IsolatedAsyncioTestCase.run": ["<builtin>.super", "unittest.async_case.IsolatedAsyncioTestCase._setupAsyncioLoop", "unittest.async_case.IsolatedAsyncioTestCase._tearDownAsyncioLoop"], "asyncio.windows_events._OverlappedFuture": [], "asyncio.windows_events._OverlappedFuture.__init__": ["<builtin>.super"], "asyncio.windows_events._OverlappedFuture._repr_info": ["<builtin>.super"], "asyncio.windows_events._OverlappedFuture._cancel_overlapped": ["futures.Future._loop.call_exception_handler"], "futures.Future._loop.call_exception_handler": [], "asyncio.windows_events._OverlappedFuture.cancel": ["<builtin>.super", "asyncio.windows_events._OverlappedFuture._cancel_overlapped"], "asyncio.windows_events._OverlappedFuture.set_exception": ["<builtin>.super", "asyncio.windows_events._OverlappedFuture._cancel_overlapped"], "asyncio.windows_events._OverlappedFuture.set_result": ["<builtin>.super"], "asyncio.windows_events._BaseWaitHandleFuture": [], "asyncio.windows_events._BaseWaitHandleFuture.__init__": ["<builtin>.super"], "asyncio.windows_events._BaseWaitHandleFuture._poll": ["_winapi.WaitForSingleObject"], "asyncio.windows_events._BaseWaitHandleFuture._repr_info": ["asyncio.windows_events._BaseWaitHandleFuture._poll", "<builtin>.super"], "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb": [], "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait": ["futures.Future._loop.call_exception_handler", "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb", "_overlapped.UnregisterWait", "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait_cb"], "_overlapped.UnregisterWait": [], "asyncio.windows_events._WaitHandleFuture._unregister_wait_cb": ["asyncio.windows_events.IocpProactor._unregister", "_winapi.CloseHandle", "<builtin>.super"], "asyncio.windows_events._BaseWaitHandleFuture.cancel": ["<builtin>.super", "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait", "asyncio.windows_events._WaitHandleFuture._unregister_wait"], "asyncio.windows_events._WaitHandleFuture._unregister_wait": ["futures.Future._loop.call_exception_handler", "_overlapped.UnregisterWaitEx", "asyncio.windows_events.IocpProactor._wait_cancel"], "asyncio.windows_events._BaseWaitHandleFuture.set_exception": ["<builtin>.super", "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait", "asyncio.windows_events._WaitHandleFuture._unregister_wait"], "asyncio.windows_events._BaseWaitHandleFuture.set_result": ["<builtin>.super", "asyncio.windows_events._BaseWaitHandleFuture._unregister_wait", "asyncio.windows_events._WaitHandleFuture._unregister_wait"], "asyncio.windows_events._WaitCancelFuture": [], "asyncio.windows_events._WaitCancelFuture.__init__": ["<builtin>.super"], "asyncio.windows_events._WaitCancelFuture.cancel": ["<builtin>.RuntimeError"], "asyncio.windows_events._WaitCancelFuture.set_result": ["asyncio.windows_events._WaitHandleFuture._unregister_wait_cb", "<builtin>.super"], "asyncio.windows_events._WaitCancelFuture.set_exception": ["asyncio.windows_events._WaitHandleFuture._unregister_wait_cb", "<builtin>.super"], "asyncio.windows_events._WaitHandleFuture": [], "asyncio.windows_events._WaitHandleFuture.__init__": ["<builtin>.super", "_overlapped.CreateEvent"], "_overlapped.CreateEvent": [], "asyncio.windows_events.IocpProactor._unregister": ["asyncio.windows_events.IocpProactor._check_closed"], "_overlapped.UnregisterWaitEx": [], "asyncio.windows_events.IocpProactor._wait_cancel": ["asyncio.windows_events.IocpProactor._wait_for_handle"], "asyncio.windows_events.PipeServer": [], "asyncio.windows_events.PipeServer.__init__": ["asyncio.windows_events.PipeServer._server_pipe_handle"], "asyncio.windows_events.PipeServer._server_pipe_handle": ["asyncio.windows_utils.PipeHandle.__init__", "_weakrefset.WeakSet.add", "_winapi.CreateNamedPipe", "asyncio.windows_events.PipeServer.closed"], "asyncio.windows_events.PipeServer._get_unconnected_pipe": ["asyncio.windows_events.PipeServer._server_pipe_handle"], "asyncio.windows_events.PipeServer.closed": [], "_winapi.CreateNamedPipe": [], "asyncio.windows_utils.PipeHandle.__init__": [], "asyncio.windows_events.PipeServer.close": ["_weakrefset.WeakSet.__iter__", "_weakrefset.WeakSet.clear"], "asyncio.windows_events._WindowsSelectorEventLoop": [], "asyncio.windows_events.ProactorEventLoop": [], "asyncio.windows_events.ProactorEventLoop.__init__": ["<builtin>.super", "asyncio.windows_events.IocpProactor.__init__"], "asyncio.windows_events.IocpProactor.__init__": ["_overlapped.CreateIoCompletionPort"], "asyncio.windows_events.ProactorEventLoop.run_forever": ["base_events.BaseEventLoop.call_soon", "<builtin>.super"], "base_events.BaseEventLoop.call_soon": [], "asyncio.windows_events.ProactorEventLoop.create_pipe_connection": ["asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport"], "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport": ["asyncio.proactor_events._ProactorReadPipeTransport.__init__"], "asyncio.windows_events.ProactorEventLoop.start_serving_pipe": ["base_events.BaseEventLoop.call_soon", "asyncio.windows_events.PipeServer.__init__"], "asyncio.windows_events.ProactorEventLoop.start_serving_pipe.loop_accept_pipe": ["asyncio.windows_utils.PipeHandle.fileno", "asyncio.windows_events.PipeServer._get_unconnected_pipe", "_weakrefset.WeakSet.discard", "asyncio.proactor_events.BaseProactorEventLoop._make_duplex_pipe_transport", "asyncio.windows_events.PipeServer.closed", "base_events.BaseEventLoop.call_exception_handler", "log.logger.warning", "asyncio.windows_utils.PipeHandle.close"], "asyncio.windows_utils.PipeHandle.fileno": ["<builtin>.ValueError"], "base_events.BaseEventLoop.call_exception_handler": [], "log.logger.warning": [], "asyncio.windows_events.ProactorEventLoop._make_subprocess_transport": ["base_subprocess.BaseSubprocessTransport._wait", "base_subprocess.BaseSubprocessTransport.close", "base_events.BaseEventLoop.create_future", "base_subprocess.BaseSubprocessTransport.__init__"], "base_events.BaseEventLoop.create_future": [], "base_subprocess.BaseSubprocessTransport.__init__": [], "base_subprocess.BaseSubprocessTransport.close": [], "base_subprocess.BaseSubprocessTransport._wait": [], "asyncio.windows_events.IocpProactor": [], "_overlapped.CreateIoCompletionPort": [], "asyncio.windows_events.IocpProactor._check_closed": ["<builtin>.RuntimeError"], "asyncio.windows_events.IocpProactor.__repr__": ["<builtin>.len"], "asyncio.windows_events.IocpProactor.set_loop": [], "asyncio.windows_events.IocpProactor.select": ["asyncio.windows_events.IocpProactor._poll"], "asyncio.windows_events.IocpProactor._poll": ["_winapi.CloseHandle", "_overlapped.GetQueuedCompletionStatus", "<builtin>.ValueError"], "asyncio.windows_events.IocpProactor._result": [], "asyncio.windows_events.IocpProactor.recv": ["asyncio.windows_events.IocpProactor._result", "<builtin>.isinstance", "_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "asyncio.windows_events.IocpProactor._register_with_iocp": ["_weakrefset.WeakSet.add", "_overlapped.CreateIoCompletionPort"], "_overlapped.Overlapped": [], "asyncio.windows_events.IocpProactor.recv.finish_recv": ["<builtin>.ConnectionResetError"], "<builtin>.ConnectionResetError": [], "asyncio.windows_events.IocpProactor._register": ["asyncio.windows_events._OverlappedFuture.set_result", "asyncio.windows_events.IocpProactor.send.finish_send", "asyncio.windows_events.IocpProactor.recv.finish_recv", "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe", "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile", "asyncio.windows_events.IocpProactor.sendto.finish_send", "asyncio.windows_events.IocpProactor.accept.finish_accept", "asyncio.windows_events._OverlappedFuture.set_exception", "asyncio.windows_events.IocpProactor.recv_into.finish_recv", "asyncio.windows_events.IocpProactor._check_closed", "asyncio.windows_events.IocpProactor.connect.finish_connect", "asyncio.windows_events._OverlappedFuture.__init__", "asyncio.windows_events.IocpProactor.recvfrom.finish_recv"], "asyncio.windows_events.IocpProactor.recv_into": ["asyncio.windows_events.IocpProactor._result", "<builtin>.isinstance", "_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "asyncio.windows_events.IocpProactor.recv_into.finish_recv": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.recvfrom": ["_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._result", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "asyncio.windows_events.IocpProactor.recvfrom.finish_recv": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.sendto": ["_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "asyncio.windows_events.IocpProactor.sendto.finish_send": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.send": ["_overlapped.Overlapped", "<builtin>.isinstance", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "asyncio.windows_events.IocpProactor.send.finish_send": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.accept": ["tasks.ensure_future", "asyncio.windows_events.IocpProactor._get_accept_socket", "_overlapped.Overlapped", "asyncio.windows_events.IocpProactor.accept.accept_coro", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "asyncio.windows_events.IocpProactor._get_accept_socket": [], "asyncio.windows_events.IocpProactor.accept.finish_accept": [], "asyncio.windows_events.IocpProactor.accept.accept_coro": [], "tasks.ensure_future": [], "asyncio.windows_events.IocpProactor.connect": ["_overlapped.WSAConnect", "_overlapped.BindLocal", "_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "_overlapped.WSAConnect": [], "_overlapped.BindLocal": [], "asyncio.windows_events.IocpProactor.connect.finish_connect": [], "asyncio.windows_events.IocpProactor.sendfile": ["_overlapped.Overlapped", "msvcrt.get_osfhandle", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "asyncio.windows_events.IocpProactor.sendfile.finish_sendfile": ["<builtin>.ConnectionResetError"], "asyncio.windows_events.IocpProactor.accept_pipe": ["_overlapped.Overlapped", "asyncio.windows_events.IocpProactor._result", "asyncio.windows_events.IocpProactor._register", "asyncio.windows_events.IocpProactor._register_with_iocp"], "asyncio.windows_events.IocpProactor.accept_pipe.finish_accept_pipe": [], "asyncio.windows_events.IocpProactor.connect_pipe": ["asyncio.windows_utils.PipeHandle.__init__", "tasks.sleep", "_overlapped.ConnectPipe", "<builtin>.min"], "_overlapped.ConnectPipe": [], "tasks.sleep": [], "asyncio.windows_events.IocpProactor.wait_for_handle": ["asyncio.windows_events.IocpProactor._wait_for_handle"], "asyncio.windows_events.IocpProactor._wait_for_handle": ["asyncio.windows_events._WaitHandleFuture.__init__", "asyncio.windows_events._WaitCancelFuture.__init__", "_overlapped.RegisterWaitWithQueue", "asyncio.windows_events.IocpProactor._check_closed", "_overlapped.Overlapped"], "_overlapped.RegisterWaitWithQueue": [], "asyncio.windows_events.IocpProactor._wait_for_handle.finish_wait_for_handle": ["asyncio.windows_events._BaseWaitHandleFuture._poll"], "_overlapped.GetQueuedCompletionStatus": [], "asyncio.windows_events.IocpProactor._stop_serving": ["_weakrefset.WeakSet.add"], "asyncio.windows_events.IocpProactor.close": ["_winapi.CloseHandle", "asyncio.windows_events.IocpProactor._poll", "log.logger.debug", "time.monotonic", "<builtin>.isinstance", "<builtin>.list"], "log.logger.debug": [], "asyncio.windows_events.IocpProactor.__del__": ["asyncio.windows_events.IocpProactor.close"], "asyncio.windows_events._WindowsSubprocessTransport": [], "asyncio.windows_events._WindowsSubprocessTransport._start": ["<builtin>.int", "base_subprocess.BaseSubprocessTransport._loop._proactor.wait_for_handle", "asyncio.windows_utils.Popen.__init__"], "asyncio.windows_utils.Popen.__init__": ["_winapi.CloseHandle", "asyncio.windows_utils.pipe", "<builtin>.super", "msvcrt.open_osfhandle", "asyncio.windows_utils.PipeHandle.__init__"], "asyncio.windows_events._WindowsSubprocessTransport._start.callback": ["subprocess.Popen.poll", "base_subprocess.BaseSubprocessTransport._process_exited"], "base_subprocess.BaseSubprocessTransport._process_exited": [], "base_subprocess.BaseSubprocessTransport._loop._proactor.wait_for_handle": [], "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [], "asyncio.windows_events.WindowsProactorEventLoopPolicy": [], "asyncio.windows_utils.pipe": ["<builtin>.next", "_winapi.CloseHandle", "_winapi.ConnectNamedPipe", "tempfile.mktemp", "_winapi.CreateFile", "_winapi.CreateNamedPipe"], "tempfile.mktemp": ["tempfile._get_candidate_names", "<builtin>.next", "tempfile.gettempdir", "tempfile._exists", "<builtin>.FileExistsError", "ntpath.join", "posixpath.join", "<builtin>.range"], "_winapi.CreateFile": [], "_winapi.ConnectNamedPipe": [], "asyncio.windows_utils.PipeHandle": [], "asyncio.windows_utils.PipeHandle.__repr__": [], "asyncio.windows_utils.PipeHandle.handle": [], "asyncio.windows_utils.PipeHandle.__del__": ["asyncio.windows_utils.PipeHandle.close"], "asyncio.windows_utils.PipeHandle.__enter__": [], "asyncio.windows_utils.PipeHandle.__exit__": ["asyncio.windows_utils.PipeHandle.close"], "asyncio.windows_utils.Popen": [], "tempfile._exists": [], "tempfile._infer_return_type": ["<builtin>.isinstance", "<builtin>.TypeError"], "tempfile._sanitize_params": ["tempfile._infer_return_type", "tempfile.gettempdir", "tempfile.gettempdirb"], "tempfile.gettempdir": ["tempfile._get_default_tempdir"], "tempfile.gettempdirb": ["tempfile.gettempdir"], "tempfile._RandomNameSequence": [], "tempfile._RandomNameSequence.rng": ["random.Random.__init__", "<builtin>.getattr"], "tempfile._RandomNameSequence.__iter__": [], "tempfile._RandomNameSequence.__next__": ["<builtin>.range"], "tempfile._candidate_tempdir_list": ["os.getenv"], "tempfile._get_default_tempdir": ["ntpath.isdir", "<builtin>.next", "io.open", "posixpath.abspath", "ntpath.abspath", "posixpath.isdir", "ntpath.join", "posixpath.join", "tempfile._candidate_tempdir_list", "<builtin>.FileNotFoundError", "<builtin>.range"], "tempfile._get_candidate_names": [], "tempfile._mkstemp_inner": ["tempfile._get_candidate_names", "<builtin>.next", "<builtin>.map", "ntpath.isdir", "<builtin>.FileExistsError", "posixpath.abspath", "posixpath.isdir", "ntpath.abspath", "ntpath.join", "posixpath.join", "sys.audit", "<builtin>.range"], "tempfile.gettempprefix": [], "tempfile.gettempprefixb": ["tempfile.gettempprefix"], "tempfile.mkstemp": ["tempfile._sanitize_params", "tempfile._mkstemp_inner"], "tempfile.mkdtemp": ["tempfile._get_candidate_names", "tempfile._sanitize_params", "<builtin>.next", "<builtin>.map", "ntpath.isdir", "<builtin>.FileExistsError", "posixpath.isdir", "ntpath.join", "posixpath.join", "sys.audit", "<builtin>.range"], "tempfile._TemporaryFileCloser": [], "tempfile._TemporaryFileCloser.__init__": [], "tempfile._TemporaryFileCloser.close": [], "tempfile._TemporaryFileCloser.__del__": ["tempfile._TemporaryFileCloser.close"], "tempfile._TemporaryFileWrapper": [], "tempfile._TemporaryFileWrapper.__init__": ["tempfile._TemporaryFileCloser.__init__"], "tempfile._TemporaryFileWrapper.__getattr__": ["<builtin>.setattr", "<builtin>.isinstance", "_functools.partial", "functools.wraps", "<builtin>.getattr", "<builtin>.hasattr"], "tempfile._TemporaryFileWrapper.__getattr__.func_wrapper": ["tempfile._TemporaryFileWrapper.__getattr__.func_wrapper"], "tempfile._TemporaryFileWrapper.__enter__": [], "tempfile._TemporaryFileWrapper.__exit__": ["tempfile._TemporaryFileWrapper.close"], "tempfile._TemporaryFileWrapper.close": ["tempfile._TemporaryFileCloser.close"], "tempfile._TemporaryFileWrapper.__iter__": [], "tempfile.NamedTemporaryFile": ["tempfile._sanitize_params", "tempfile._TemporaryFileWrapper.__init__", "io.open", "tempfile._mkstemp_inner"], "tempfile.TemporaryFile": ["tempfile._sanitize_params", "io.open", "tempfile._mkstemp_inner"], "tempfile.SpooledTemporaryFile": [], "tempfile.SpooledTemporaryFile.__init__": ["io.TextIOWrapper", "io.BytesIO"], "tempfile.SpooledTemporaryFile._check": ["tempfile.SpooledTemporaryFile.rollover"], "tempfile.SpooledTemporaryFile.rollover": ["tempfile.NamedTemporaryFile", "<builtin>.hasattr"], "tempfile.SpooledTemporaryFile.__enter__": ["<builtin>.ValueError"], "tempfile.SpooledTemporaryFile.__exit__": [], "tempfile.SpooledTemporaryFile.__iter__": [], "tempfile.SpooledTemporaryFile.close": [], "tempfile.SpooledTemporaryFile.closed": [], "tempfile.SpooledTemporaryFile.encoding": [], "tempfile.SpooledTemporaryFile.errors": [], "tempfile.SpooledTemporaryFile.fileno": ["tempfile.SpooledTemporaryFile.rollover"], "tempfile.SpooledTemporaryFile.flush": [], "tempfile.SpooledTemporaryFile.isatty": [], "tempfile.SpooledTemporaryFile.mode": [], "tempfile.SpooledTemporaryFile.name": [], "tempfile.SpooledTemporaryFile.newlines": [], "tempfile.SpooledTemporaryFile.read": [], "tempfile.SpooledTemporaryFile.readline": [], "tempfile.SpooledTemporaryFile.readlines": [], "tempfile.SpooledTemporaryFile.seek": [], "tempfile.SpooledTemporaryFile.softspace": [], "tempfile.SpooledTemporaryFile.tell": [], "tempfile.SpooledTemporaryFile.truncate": ["tempfile.SpooledTemporaryFile.rollover"], "tempfile.SpooledTemporaryFile.write": ["tempfile.SpooledTemporaryFile._check"], "tempfile.SpooledTemporaryFile.writelines": ["tempfile.SpooledTemporaryFile._check"], "tempfile.TemporaryDirectory": [], "tempfile.TemporaryDirectory.__init__": ["weakref.finalize.__init__", "tempfile.mkdtemp"], "tempfile.TemporaryDirectory._rmtree": ["shutil.rmtree"], "tempfile.TemporaryDirectory._rmtree.onerror.resetperms": [], "tempfile.TemporaryDirectory._cleanup": ["tempfile.TemporaryDirectory._rmtree", "warnings.warn"], "tempfile.TemporaryDirectory.__repr__": [], "tempfile.TemporaryDirectory.__enter__": [], "tempfile.TemporaryDirectory.__exit__": ["tempfile.TemporaryDirectory.cleanup"], "tempfile.TemporaryDirectory.cleanup": ["tempfile.TemporaryDirectory._rmtree", "weakref.finalize.detach"], "asyncio.proactor_events._set_socket_extra": ["log.logger.warning", "trsock.TransportSocket", "transports._FlowControlMixin._loop.get_debug"], "trsock.TransportSocket": [], "transports._FlowControlMixin._loop.get_debug": [], "asyncio.proactor_events._ProactorBasePipeTransport": [], "asyncio.proactor_events._ProactorBasePipeTransport.__init__": ["transports._FlowControlMixin._loop.call_soon", "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol", "<builtin>.super", "asyncio.proactor_events._ProactorSocketTransport._set_extra", "asyncio.proactor_events._ProactorBasePipeTransport._set_extra", "asyncio.proactor_events._ProactorDatagramTransport._set_extra"], "asyncio.proactor_events._ProactorDatagramTransport._set_extra": ["asyncio.proactor_events._set_socket_extra"], "asyncio.proactor_events._ProactorSocketTransport._set_extra": ["asyncio.proactor_events._set_socket_extra"], "asyncio.proactor_events._ProactorBasePipeTransport._set_extra": [], "asyncio.proactor_events._ProactorBasePipeTransport.set_protocol": [], "transports._FlowControlMixin._loop.call_soon": [], "asyncio.proactor_events._ProactorBasePipeTransport.__repr__": ["<builtin>.len"], "asyncio.proactor_events._ProactorBasePipeTransport.get_protocol": [], "asyncio.proactor_events._ProactorBasePipeTransport.is_closing": [], "asyncio.proactor_events._ProactorBasePipeTransport.close": ["transports._FlowControlMixin._loop.call_soon"], "asyncio.proactor_events._ProactorBasePipeTransport.__del__": ["asyncio.proactor_events._ProactorBasePipeTransport.close"], "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error": ["log.logger.debug", "<builtin>.isinstance", "asyncio.proactor_events._ProactorBasePipeTransport._force_close", "transports._FlowControlMixin._loop.call_exception_handler", "transports._FlowControlMixin._loop.get_debug"], "transports._FlowControlMixin._loop.call_exception_handler": [], "asyncio.proactor_events._ProactorBasePipeTransport._force_close": ["transports._FlowControlMixin._loop.call_soon"], "asyncio.proactor_events._ProactorBasePipeTransport._call_connection_lost": ["<builtin>.hasattr"], "asyncio.proactor_events._ProactorBasePipeTransport.get_write_buffer_size": ["<builtin>.len"], "asyncio.proactor_events._ProactorReadPipeTransport": [], "asyncio.proactor_events._ProactorReadPipeTransport.__init__": ["<builtin>.super", "transports._FlowControlMixin._loop.call_soon"], "asyncio.proactor_events._ProactorReadPipeTransport.is_reading": [], "asyncio.proactor_events._ProactorReadPipeTransport.pause_reading": ["log.logger.debug", "transports._FlowControlMixin._loop.get_debug"], "asyncio.proactor_events._ProactorReadPipeTransport.resume_reading": ["log.logger.debug", "transports._FlowControlMixin._loop.get_debug", "transports._FlowControlMixin._loop.call_soon"], "asyncio.proactor_events._ProactorReadPipeTransport._eof_received": ["log.logger.debug", "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "transports._FlowControlMixin._loop.get_debug", "asyncio.proactor_events._ProactorBasePipeTransport.close"], "asyncio.proactor_events._ProactorReadPipeTransport._data_received": ["asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "asyncio.proactor_events._ProactorReadPipeTransport._eof_received", "<builtin>.isinstance", "protocols._feed_data_to_buffered_proto"], "protocols._feed_data_to_buffered_proto": [], "asyncio.proactor_events._ProactorReadPipeTransport._loop_reading": ["asyncio.proactor_events._ProactorReadPipeTransport._data_received", "log.logger.debug", "transports._FlowControlMixin._loop._proactor.recv", "asyncio.proactor_events._ProactorBasePipeTransport._force_close", "transports._FlowControlMixin._loop.get_debug", "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error"], "transports._FlowControlMixin._loop._proactor.recv": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport.__init__": ["<builtin>.super"], "asyncio.proactor_events._ProactorBaseWritePipeTransport.write": ["<builtin>.bytes", "<builtin>.bytearray", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.RuntimeError", "log.logger.warning", "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing", "transports._FlowControlMixin._maybe_pause_protocol", "<builtin>.type"], "asyncio.proactor_events._ProactorBaseWritePipeTransport._loop_writing": ["transports._FlowControlMixin._loop.call_soon", "<builtin>.len", "asyncio.proactor_events._ProactorBasePipeTransport._force_close", "transports._FlowControlMixin._maybe_resume_protocol", "transports._FlowControlMixin._maybe_pause_protocol", "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "transports._FlowControlMixin._loop._proactor.send"], "transports._FlowControlMixin._maybe_pause_protocol": [], "transports._FlowControlMixin._maybe_resume_protocol": [], "transports._FlowControlMixin._loop._proactor.send": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport.can_write_eof": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport.write_eof": ["asyncio.proactor_events._ProactorBasePipeTransport.close"], "asyncio.proactor_events._ProactorBaseWritePipeTransport.abort": ["asyncio.proactor_events._ProactorBasePipeTransport._force_close"], "asyncio.proactor_events._ProactorBaseWritePipeTransport._make_empty_waiter": ["transports._FlowControlMixin._loop.create_future", "<builtin>.RuntimeError"], "transports._FlowControlMixin._loop.create_future": [], "asyncio.proactor_events._ProactorBaseWritePipeTransport._reset_empty_waiter": [], "asyncio.proactor_events._ProactorWritePipeTransport": [], "asyncio.proactor_events._ProactorWritePipeTransport.__init__": ["<builtin>.super", "transports._FlowControlMixin._loop._proactor.recv"], "asyncio.proactor_events._ProactorWritePipeTransport._pipe_closed": ["asyncio.proactor_events._ProactorBasePipeTransport._force_close", "<builtin>.BrokenPipeError", "asyncio.proactor_events._ProactorBasePipeTransport.close"], "<builtin>.BrokenPipeError": [], "asyncio.proactor_events._ProactorDatagramTransport": [], "asyncio.proactor_events._ProactorDatagramTransport.__init__": ["collections.deque", "<builtin>.super", "transports._FlowControlMixin._loop.call_soon"], "asyncio.proactor_events._ProactorDatagramTransport.get_write_buffer_size": ["<builtin>.sum", "<builtin>.len"], "asyncio.proactor_events._ProactorDatagramTransport.abort": ["asyncio.proactor_events._ProactorBasePipeTransport._force_close"], "asyncio.proactor_events._ProactorDatagramTransport.sendto": ["<builtin>.bytes", "<builtin>.isinstance", "<builtin>.TypeError", "asyncio.proactor_events._ProactorDatagramTransport._loop_writing", "<builtin>.ValueError", "log.logger.warning", "transports._FlowControlMixin._maybe_pause_protocol", "<builtin>.type"], "asyncio.proactor_events._ProactorDatagramTransport._loop_writing": ["transports._FlowControlMixin._loop._proactor.sendto", "transports._FlowControlMixin._loop.call_soon", "transports._FlowControlMixin._maybe_resume_protocol", "asyncio.proactor_events._ProactorBasePipeTransport._fatal_error", "transports._FlowControlMixin._loop._proactor.send"], "transports._FlowControlMixin._loop._proactor.sendto": [], "asyncio.proactor_events._ProactorDatagramTransport._loop_reading": ["transports._FlowControlMixin._loop._proactor.recv", "transports._FlowControlMixin._loop._proactor.recvfrom"], "transports._FlowControlMixin._loop._proactor.recvfrom": [], "asyncio.proactor_events._ProactorDuplexPipeTransport": [], "asyncio.proactor_events._ProactorDuplexPipeTransport.can_write_eof": [], "asyncio.proactor_events._ProactorDuplexPipeTransport.write_eof": [], "asyncio.proactor_events._ProactorSocketTransport": [], "asyncio.proactor_events._ProactorSocketTransport.__init__": ["base_events._set_nodelay", "<builtin>.super"], "base_events._set_nodelay": [], "asyncio.proactor_events._ProactorSocketTransport.can_write_eof": [], "asyncio.proactor_events._ProactorSocketTransport.write_eof": [], "asyncio.proactor_events.BaseProactorEventLoop": [], "asyncio.proactor_events.BaseProactorEventLoop.__init__": ["asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe", "log.logger.debug", "threading.main_thread", "<builtin>.super", "threading.current_thread"], "asyncio.proactor_events.BaseProactorEventLoop._make_self_pipe": [], "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport": ["asyncio.proactor_events._ProactorSocketTransport.__init__"], "asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport": ["sslproto.SSLProtocol", "asyncio.proactor_events._ProactorSocketTransport.__init__"], "sslproto.SSLProtocol": [], "asyncio.proactor_events.BaseProactorEventLoop._make_datagram_transport": ["asyncio.proactor_events._ProactorDatagramTransport.__init__"], "asyncio.proactor_events.BaseProactorEventLoop._make_read_pipe_transport": ["asyncio.proactor_events._ProactorReadPipeTransport.__init__"], "asyncio.proactor_events.BaseProactorEventLoop._make_write_pipe_transport": ["asyncio.proactor_events._ProactorWritePipeTransport.__init__"], "asyncio.proactor_events.BaseProactorEventLoop.close": ["threading.main_thread", "base_events.BaseEventLoop.is_closed", "<builtin>.super", "<builtin>.RuntimeError", "base_events.BaseEventLoop.is_running", "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures", "threading.current_thread", "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe"], "base_events.BaseEventLoop.is_running": [], "base_events.BaseEventLoop.is_closed": [], "asyncio.proactor_events.BaseProactorEventLoop._stop_accept_futures": [], "asyncio.proactor_events.BaseProactorEventLoop._close_self_pipe": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_recv": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_recv_into": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_sendall": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_connect": [], "asyncio.proactor_events.BaseProactorEventLoop.sock_accept": [], "asyncio.proactor_events.BaseProactorEventLoop._sock_sendfile_native": ["exceptions.SendfileNotAvailableError", "<builtin>.min"], "exceptions.SendfileNotAvailableError": [], "asyncio.proactor_events.BaseProactorEventLoop._sendfile_native": ["base_events.BaseEventLoop.sock_sendfile"], "base_events.BaseEventLoop.sock_sendfile": [], "asyncio.proactor_events.BaseProactorEventLoop._loop_self_reading": ["base_events.BaseEventLoop.call_exception_handler"], "asyncio.proactor_events.BaseProactorEventLoop._write_to_self": ["log.logger.debug"], "asyncio.proactor_events.BaseProactorEventLoop._start_serving": ["base_events.BaseEventLoop.call_soon"], "asyncio.proactor_events.BaseProactorEventLoop._start_serving.loop": ["asyncio.proactor_events.BaseProactorEventLoop._make_ssl_transport", "log.logger.debug", "base_events.BaseEventLoop.is_closed", "asyncio.proactor_events.BaseProactorEventLoop._make_socket_transport", "base_events.BaseEventLoop.call_exception_handler", "trsock.TransportSocket"], "asyncio.proactor_events.BaseProactorEventLoop._process_events": [], "asyncio.proactor_events.BaseProactorEventLoop._stop_serving": [], "unittest.case.SkipTest": [], "unittest.case._ShouldStop": [], "unittest.case._UnexpectedSuccess": [], "unittest.case._Outcome": ["contextlib.contextmanager"], "unittest.case._Outcome.__init__": ["<builtin>.hasattr"], "unittest.case._Outcome.testPartExecutor": ["<builtin>.str", "sys.exc_info"], "unittest.case._id": [], "unittest.case.addModuleCleanup": [], "unittest.case.skipIf": ["unittest.case.skip"], "unittest.case.skipUnless": ["unittest.case.skip"], "unittest.case.expectedFailure": [], "unittest.case._is_subtype": ["<builtin>.all", "<builtin>.issubclass", "<builtin>.isinstance", "unittest.case._is_subtype"], "unittest.case._BaseTestCaseContext": [], "unittest.case._BaseTestCaseContext.__init__": [], "unittest.case._BaseTestCaseContext._raiseFailure": [], "unittest.case._AssertRaisesBaseContext": [], "unittest.case._AssertRaisesBaseContext.__init__": ["re.compile", "unittest.case._BaseTestCaseContext.__init__"], "unittest.case._AssertRaisesBaseContext.handle": ["<builtin>.next", "unittest.case._is_subtype", "<builtin>.TypeError", "<builtin>.iter", "<builtin>.str"], "unittest.case._AssertRaisesContext": [], "unittest.case._AssertRaisesContext.__enter__": [], "unittest.case._AssertRaisesContext.__exit__": ["<builtin>.issubclass", "<builtin>.str", "unittest.case._BaseTestCaseContext._raiseFailure", "traceback.clear_frames"], "unittest.case._AssertWarnsContext": [], "unittest.case._AssertWarnsContext.__enter__": ["warnings.catch_warnings.__enter__", "sys.modules.values", "<builtin>.getattr"], "sys.modules.values": [], "unittest.case._AssertWarnsContext.__exit__": ["warnings.catch_warnings.__exit__", "<builtin>.str", "<builtin>.isinstance", "unittest.case._BaseTestCaseContext._raiseFailure"], "unittest.case._CapturingHandler": [], "unittest.case._CapturingHandler.__init__": ["logging.Handler.__init__"], "unittest.case._CapturingHandler.flush": [], "unittest.case._AssertLogsContext": [], "unittest.case._AssertLogsContext.__init__": ["unittest.case._BaseTestCaseContext.__init__"], "unittest.case._AssertLogsContext.__enter__": ["logging.Handler.setFormatter", "<builtin>.isinstance", "logging.getLogger", "logging.Formatter.__init__", "logging.Logger.setLevel", "unittest.case._CapturingHandler.__init__"], "unittest.case._AssertLogsContext.__exit__": ["unittest.case._BaseTestCaseContext._raiseFailure", "logging.Logger.setLevel", "logging.getLevelName", "<builtin>.len"], "unittest.case._OrderedChainMap": [], "unittest.case._OrderedChainMap.__iter__": ["<builtin>.set"], "unittest.case.TestCase": ["contextlib.contextmanager", "unittest.case.TestCase._deprecate"], "unittest.case.TestCase.addTypeEqualityFunc": [], "unittest.case.TestCase.addClassCleanup": [], "unittest.case.TestCase.setUpClass": [], "unittest.case.TestCase.tearDownClass": [], "unittest.case.TestCase.countTestCases": [], "unittest.case.TestCase.defaultTestResult": ["unittest.result.TestResult.__init__"], "unittest.case.TestCase.shortDescription": [], "unittest.case.TestCase.id": ["unittest.util.strclass"], "unittest.case.TestCase.__eq__": ["<builtin>.type"], "unittest.case.TestCase.__hash__": ["<builtin>.type", "<builtin>.hash"], "unittest.case.TestCase.__str__": ["unittest.util.strclass"], "unittest.case.TestCase.__repr__": ["unittest.util.strclass"], "unittest.case.TestCase._addSkip": ["unittest.result.TestResult.addSuccess", "warnings.warn", "unittest.runner.TextTestResult.addSuccess", "<builtin>.getattr"], "unittest.case.TestCase.subTest": ["collections.ChainMap.new_child", "unittest.case._Outcome.testPartExecutor", "collections.ChainMap.__init__", "unittest.case._SubTest.__init__"], "unittest.case._SubTest.__init__": ["<builtin>.super"], "unittest.case.TestCase._feedErrorsToResult": ["unittest.result.TestResult.addFailure", "<builtin>.isinstance", "<builtin>.issubclass", "unittest.result.TestResult.addSubTest", "unittest.result.TestResult.addError", "unittest.runner.TextTestResult.addError", "unittest.runner.TextTestResult.addFailure"], "unittest.case.TestCase._addExpectedFailure": ["unittest.result.TestResult.addExpectedFailure", "unittest.result.TestResult.addSuccess", "unittest.runner.TextTestResult.addExpectedFailure", "warnings.warn", "unittest.runner.TextTestResult.addSuccess"], "unittest.case.TestCase._addUnexpectedSuccess": ["unittest.result.TestResult.addFailure", "warnings.warn", "unittest.result.TestResult.addUnexpectedSuccess", "sys.exc_info", "unittest.runner.TextTestResult.addUnexpectedSuccess", "unittest.runner.TextTestResult.addFailure"], "unittest.case.TestCase._callSetUp": ["unittest.case.TestCase.setUp", "doctest.DocTestCase.setUp", "doctest.SkipDocTestCase.setUp"], "unittest.case.TestCase._callTestMethod": [], "unittest.case.TestCase._callTearDown": ["doctest.DocTestCase.tearDown", "unittest.case.TestCase.tearDown"], "unittest.case.TestCase._callCleanup": [], "unittest.case.TestCase.run": ["unittest.result.TestResult.stopTest", "unittest.case.TestCase.doCleanups", "unittest.result.TestResult.startTest", "unittest.result.TestResult.addSuccess", "unittest.case._Outcome.testPartExecutor", "unittest.case.TestCase._callTearDown", "unittest.case.TestCase._addExpectedFailure", "unittest.case.TestCase._callSetUp", "unittest.case.TestCase._feedErrorsToResult", "unittest.runner.TextTestResult.addSuccess", "unittest.runner.TextTestResult.startTest", "unittest.case.TestCase._callTestMethod", "unittest.case.TestCase._addUnexpectedSuccess", "unittest.case.TestCase.defaultTestResult", "unittest.case._Outcome.__init__", "unittest.case.TestCase._addSkip", "<builtin>.getattr"], "unittest.case.TestCase.doCleanups": ["unittest.case._Outcome.__init__", "unittest.case.TestCase._callCleanup"], "unittest.case.TestCase.doClassCleanups": ["sys.exc_info"], "unittest.case.TestCase.__call__": ["unittest.case.TestCase.run"], "unittest.case.TestCase.debug": ["doctest.DocTestCase.tearDown", "unittest.case.TestCase.setUp", "doctest.SkipDocTestCase.setUp", "doctest.DocTestCase.setUp", "unittest.case.TestCase.tearDown", "<builtin>.getattr"], "unittest.case.TestCase.fail": [], "unittest.case.TestCase.assertFalse": ["unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase._formatMessage": ["unittest.util.safe_repr"], "unittest.case.TestCase.assertTrue": ["unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertRaises": ["unittest.case._AssertRaisesBaseContext.handle", "unittest.case._AssertRaisesBaseContext.__init__"], "unittest.case.TestCase.assertWarns": ["unittest.case._AssertRaisesBaseContext.handle", "unittest.case._AssertRaisesBaseContext.__init__"], "unittest.case.TestCase.assertLogs": ["unittest.case._AssertLogsContext.__init__"], "unittest.case.TestCase._getAssertEqualityFunc": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.getattr"], "unittest.case.TestCase._baseAssertEqual": ["unittest.util._common_shorten_repr", "unittest.case.TestCase._formatMessage"], "unittest.case.TestCase.assertEqual": ["unittest.case.TestCase._getAssertEqualityFunc", "unittest.case.TestCase._baseAssertEqual"], "unittest.case.TestCase.assertNotEqual": ["unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertAlmostEqual": ["<builtin>.round", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr", "<builtin>.abs", "<builtin>.TypeError"], "unittest.case.TestCase.assertNotAlmostEqual": ["<builtin>.round", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr", "<builtin>.abs", "<builtin>.TypeError"], "unittest.case.TestCase.assertSequenceEqual": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr", "difflib.ndiff", "unittest.util._common_shorten_repr", "<builtin>.isinstance", "<builtin>.len", "unittest.case.TestCase._truncateMessage", "<builtin>.min", "<builtin>.range"], "unittest.case.TestCase._truncateMessage": ["<builtin>.len"], "unittest.case.TestCase.assertListEqual": ["unittest.case.TestCase.assertSequenceEqual"], "unittest.case.TestCase.assertTupleEqual": ["unittest.case.TestCase.assertSequenceEqual"], "unittest.case.TestCase.assertSetEqual": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "<builtin>.repr"], "unittest.case.TestCase.assertIn": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertNotIn": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertIs": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertIsNot": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertDictEqual": ["unittest.case.TestCase.assertIsInstance", "unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "difflib.ndiff", "unittest.util._common_shorten_repr", "unittest.case.TestCase._truncateMessage"], "unittest.case.TestCase.assertIsInstance": ["unittest.case.TestCase.fail", "<builtin>.isinstance", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertDictContainsSubset": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr", "warnings.warn"], "unittest.case.TestCase.assertCountEqual": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "<builtin>.list", "unittest.case.TestCase._truncateMessage", "unittest.util._count_diff_hashable", "collections.Counter.__init__", "unittest.util._count_diff_all_purpose"], "unittest.case.TestCase.assertMultiLineEqual": ["unittest.case.TestCase.assertIsInstance", "unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "difflib.ndiff", "unittest.util._common_shorten_repr", "unittest.case.TestCase._baseAssertEqual", "<builtin>.len", "unittest.case.TestCase._truncateMessage"], "unittest.case.TestCase.assertLess": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertLessEqual": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertGreater": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertGreaterEqual": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertIsNone": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertIsNotNone": ["unittest.case.TestCase.fail", "unittest.case.TestCase._formatMessage"], "unittest.case.TestCase.assertNotIsInstance": ["unittest.case.TestCase.fail", "<builtin>.isinstance", "unittest.case.TestCase._formatMessage", "unittest.util.safe_repr"], "unittest.case.TestCase.assertRaisesRegex": ["unittest.case._AssertRaisesBaseContext.handle", "unittest.case._AssertRaisesBaseContext.__init__"], "unittest.case.TestCase.assertWarnsRegex": ["unittest.case._AssertRaisesBaseContext.handle", "unittest.case._AssertRaisesBaseContext.__init__"], "unittest.case.TestCase.assertRegex": ["<builtin>.isinstance", "unittest.case.TestCase._formatMessage", "re.compile"], "unittest.case.TestCase.assertNotRegex": ["<builtin>.isinstance", "unittest.case.TestCase._formatMessage", "re.compile"], "unittest.case.TestCase._deprecate": [], "unittest.case.TestCase._deprecate.deprecated_func": ["unittest.case.TestCase.__init__", "warnings.warn"], "unittest.case.FunctionTestCase": [], "unittest.case.FunctionTestCase.__init__": ["<builtin>.super"], "unittest.case.FunctionTestCase.setUp": [], "unittest.case.FunctionTestCase.tearDown": [], "unittest.case.FunctionTestCase.runTest": [], "unittest.case.FunctionTestCase.id": [], "unittest.case.FunctionTestCase.__eq__": ["<builtin>.isinstance"], "unittest.case.FunctionTestCase.__hash__": ["<builtin>.type", "<builtin>.hash"], "unittest.case.FunctionTestCase.__str__": ["unittest.util.strclass"], "unittest.case.FunctionTestCase.__repr__": ["unittest.util.strclass"], "unittest.case.FunctionTestCase.shortDescription": [], "unittest.case._SubTest": [], "unittest.case._SubTest.runTest": ["<builtin>.NotImplementedError"], "unittest.case._SubTest._subDescription": ["weakref.WeakKeyDictionary.items", "weakref.WeakValueDictionary.items", "_collections_abc.Mapping.items"], "unittest.case._SubTest.id": ["unittest.case._SubTest._subDescription", "unittest.case.TestCase.id", "unittest.case._SubTest.id", "doctest.DocFileCase.id", "doctest.DocTestCase.id"], "unittest.case._SubTest.shortDescription": ["unittest.case._SubTest.shortDescription", "unittest.case.TestCase.shortDescription", "doctest.DocTestCase.shortDescription", "doctest.SkipDocTestCase.shortDescription"], "unittest.case._SubTest.__str__": ["unittest.case._SubTest._subDescription"], "pprint.pprint": ["pprint.PrettyPrinter.__init__", "pprint.PrettyPrinter.pprint"], "pprint.PrettyPrinter.__init__": ["<builtin>.bool", "<builtin>.int", "<builtin>.ValueError"], "pprint.PrettyPrinter.pprint": ["pprint.PrettyPrinter._format", "sys.stdout.write"], "pprint.pformat": ["pprint.PrettyPrinter.__init__", "pprint.PrettyPrinter.pformat"], "pprint.PrettyPrinter.pformat": ["_io.StringIO", "pprint.PrettyPrinter._format"], "pprint.pp": ["pprint.pprint"], "pprint.saferepr": ["pprint._safe_repr"], "pprint._safe_repr": ["pprint._recursion", "<builtin>.id", "<builtin>.sorted", "<builtin>.repr", "<builtin>.len", "<builtin>.issubclass", "pprint._safe_repr", "<builtin>.type", "<builtin>.getattr"], "pprint.isreadable": ["pprint._safe_repr"], "pprint.isrecursive": ["pprint._safe_repr"], "pprint._safe_key": [], "pprint._safe_key.__init__": [], "pprint._safe_key.__lt__": ["<builtin>.str", "<builtin>.type", "<builtin>.id"], "pprint._safe_tuple": ["pprint._safe_key.__init__"], "pprint.PrettyPrinter": [], "pprint.PrettyPrinter._format": ["pprint._recursion", "<builtin>.id", "pprint.PrettyPrinter._pprint_dict", "<builtin>.isinstance", "<builtin>.len", "sys.stdout.write", "pprint.PrettyPrinter._repr", "<builtin>.type"], "pprint.PrettyPrinter.isrecursive": ["pprint.PrettyPrinter.format"], "pprint.PrettyPrinter.format": ["pprint._safe_repr"], "pprint.PrettyPrinter.isreadable": ["pprint.PrettyPrinter.format"], "pprint._recursion": ["<builtin>.type", "<builtin>.id"], "pprint.PrettyPrinter._repr": ["pprint.PrettyPrinter.format"], "pprint.PrettyPrinter._pprint_dict": ["pprint.PrettyPrinter._format_dict_items", "<builtin>.sorted", "<builtin>.len", "sys.stdout.write"], "pprint.PrettyPrinter._format_dict_items": ["<builtin>.enumerate", "<builtin>.len", "pprint.PrettyPrinter._format", "sys.stdout.write", "pprint.PrettyPrinter._repr"], "pprint.PrettyPrinter._pprint_ordered_dict": ["pprint.PrettyPrinter._format", "<builtin>.repr", "<builtin>.list", "<builtin>.len"], "pprint.PrettyPrinter._pprint_list": ["pprint.PrettyPrinter._format_items"], "pprint.PrettyPrinter._format_items": ["<builtin>.next", "<builtin>.len", "pprint.PrettyPrinter._format", "<builtin>.iter", "pprint.PrettyPrinter._repr"], "pprint.PrettyPrinter._pprint_tuple": ["pprint.PrettyPrinter._format_items", "<builtin>.len"], "pprint.PrettyPrinter._pprint_set": ["<builtin>.sorted", "<builtin>.repr", "pprint.PrettyPrinter._format_items", "<builtin>.len"], "pprint.PrettyPrinter._pprint_str": ["re.findall", "<builtin>.enumerate", "<builtin>.repr", "<builtin>.len"], "pprint.PrettyPrinter._pprint_bytes": ["pprint._wrap_bytes_repr", "<builtin>.repr", "<builtin>.len"], "pprint._wrap_bytes_repr": ["<builtin>.range", "<builtin>.repr", "<builtin>.len"], "pprint.PrettyPrinter._pprint_bytearray": ["pprint.PrettyPrinter._pprint_bytes", "<builtin>.bytes"], "pprint.PrettyPrinter._pprint_mappingproxy": ["pprint.PrettyPrinter._format"], "pprint.PrettyPrinter._pprint_default_dict": ["pprint.PrettyPrinter._repr", "pprint.PrettyPrinter._pprint_dict", "<builtin>.repr", "<builtin>.len"], "pprint.PrettyPrinter._pprint_counter": ["pprint.PrettyPrinter._format_dict_items", "<builtin>.repr", "<builtin>.len"], "pprint.PrettyPrinter._pprint_chain_map": ["pprint.PrettyPrinter._format", "<builtin>.enumerate", "<builtin>.repr", "<builtin>.len"], "pprint.PrettyPrinter._pprint_deque": ["pprint.PrettyPrinter._repr", "<builtin>.repr", "pprint.PrettyPrinter._format_items", "<builtin>.len"], "pprint.PrettyPrinter._pprint_user_dict": ["pprint.PrettyPrinter._format"], "pprint.PrettyPrinter._pprint_user_list": ["pprint.PrettyPrinter._format"], "pprint.PrettyPrinter._pprint_user_string": ["pprint.PrettyPrinter._format"], "pprint._perfcheck": ["time.perf_counter", "pprint.PrettyPrinter.__init__", "<builtin>.print", "pprint._safe_repr", "pprint.PrettyPrinter.pformat"], "typing._type_check": ["<builtin>.callable", "<builtin>.isinstance", "<builtin>.TypeError", "typing.ForwardRef.__init__", "<builtin>.type"], "typing.ForwardRef.__init__": ["<builtin>.SyntaxError", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.compile"], "typing._type_repr": ["<builtin>.isinstance", "<builtin>.repr"], "typing._collect_type_vars": ["<builtin>.tuple", "<builtin>.isinstance"], "typing._subs_tvars": ["<builtin>.tuple", "<builtin>.enumerate", "<builtin>.isinstance", "<builtin>.list", "typing._GenericAlias.copy_with", "typing._subs_tvars"], "typing._GenericAlias.copy_with": ["typing._GenericAlias.__init__"], "typing._check_generic": ["<builtin>.TypeError", "<builtin>.len"], "typing._remove_dups_flatten": ["<builtin>.set", "<builtin>.tuple", "<builtin>.isinstance", "<builtin>.len"], "typing._tp_cache": ["functools.lru_cache", "functools.lru_cache.decorating_function", "functools._lru_cache_wrapper.wrapper", "_functools.partial", "functools.wraps", "functools.singledispatchmethod.__get__._method", "functools.singledispatch.wrapper"], "typing._tp_cache.inner": ["typing._GenericAlias.__getitem__", "typing.Generic.__class_getitem__", "typing._SpecialForm.__getitem__", "typing._VariadicGenericAlias.__getitem_inner__", "typing._VariadicGenericAlias.__getitem__"], "typing._GenericAlias.__getitem__": ["<builtin>.tuple", "typing._type_check", "<builtin>.isinstance", "typing._check_generic", "typing._subs_tvars", "<builtin>.TypeError"], "typing._VariadicGenericAlias.__getitem_inner__": ["<builtin>.tuple", "typing._type_check", "<builtin>.super", "<builtin>.isinstance", "<builtin>.len", "typing._GenericAlias.copy_with"], "typing.Generic.__class_getitem__": ["<builtin>.tuple", "<builtin>.all", "typing._type_check", "<builtin>.isinstance", "<builtin>.len", "typing._check_generic", "<builtin>.set", "typing._GenericAlias.__init__", "<builtin>.TypeError"], "typing._VariadicGenericAlias.__getitem__": ["<builtin>.tuple", "<builtin>.isinstance", "<builtin>.len", "typing._VariadicGenericAlias.__getitem_inner__", "<builtin>.TypeError"], "typing._SpecialForm.__getitem__": ["<builtin>.tuple", "typing._type_check", "typing._remove_dups_flatten", "<builtin>.isinstance", "<builtin>.type", "<builtin>.len", "typing._GenericAlias.__init__", "<builtin>.TypeError"], "typing._eval_type": ["<builtin>.tuple", "<builtin>.isinstance", "typing._GenericAlias.copy_with", "typing.ForwardRef._evaluate", "typing._eval_type"], "typing.ForwardRef._evaluate": ["<builtin>.eval", "typing._type_check"], "typing._Final": [], "typing._Final.__init_subclass__": ["<builtin>.TypeError"], "typing._Immutable": [], "typing._Immutable.__copy__": [], "typing._Immutable.__deepcopy__": [], "typing._SpecialForm": ["typing._tp_cache"], "typing._SpecialForm.__new__": ["<builtin>.super", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.len"], "typing._SpecialForm.__init__": [], "typing._SpecialForm.__eq__": ["<builtin>.isinstance"], "typing._SpecialForm.__hash__": ["<builtin>.hash"], "typing._SpecialForm.__repr__": [], "typing._SpecialForm.__reduce__": [], "typing._SpecialForm.__call__": ["<builtin>.TypeError"], "typing._SpecialForm.__instancecheck__": ["<builtin>.TypeError"], "typing._SpecialForm.__subclasscheck__": ["<builtin>.TypeError"], "typing._GenericAlias.__init__": ["<builtin>.tuple", "<builtin>.isinstance", "typing._collect_type_vars"], "typing.ForwardRef": [], "typing.ForwardRef.__eq__": ["<builtin>.isinstance"], "typing.ForwardRef.__hash__": ["<builtin>.hash"], "typing.ForwardRef.__repr__": [], "typing.TypeVar": [], "typing.TypeVar.__init__": ["<builtin>.tuple", "typing._type_check", "sys._getframe", "<builtin>.len", "<builtin>.ValueError", "<builtin>.TypeError", "<builtin>.bool"], "typing.TypeVar.__repr__": [], "typing.TypeVar.__reduce__": [], "typing._is_dunder": [], "typing._GenericAlias": ["typing._tp_cache"], "typing._GenericAlias.__repr__": ["typing._type_repr", "<builtin>.len"], "typing._GenericAlias.__eq__": ["<builtin>.isinstance", "<builtin>.frozenset"], "typing._GenericAlias.__hash__": ["<builtin>.hash", "<builtin>.frozenset"], "typing._GenericAlias.__call__": ["_collections.deque", "typing._SpecialForm.__init__", "_collections.OrderedDict", "typing._no_init", "_collections.defaultdict", "<builtin>.TypeError", "collections.ChainMap.__init__", "collections.Counter.__init__"], "typing._no_init": ["<builtin>.type", "<builtin>.TypeError"], "_collections.defaultdict": [], "typing._GenericAlias.__mro_entries__": ["<builtin>.tuple", "<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.any"], "typing._GenericAlias.__getattr__": ["<builtin>.AttributeError", "typing._is_dunder", "<builtin>.getattr"], "typing._GenericAlias.__setattr__": ["<builtin>.setattr", "typing._is_dunder", "<builtin>.super"], "typing._GenericAlias.__instancecheck__": ["<builtin>.type", "typing._GenericAlias.__subclasscheck__"], "typing._GenericAlias.__subclasscheck__": ["<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.TypeError"], "typing._GenericAlias.__reduce__": ["<builtin>.tuple", "<builtin>.globals", "<builtin>.isinstance", "<builtin>.list", "<builtin>.len"], "typing._VariadicGenericAlias": ["typing._tp_cache"], "typing.Generic": ["typing._tp_cache"], "typing.Generic.__new__": ["<builtin>.super", "<builtin>.TypeError"], "typing.Generic.__init_subclass__": ["<builtin>.tuple", "<builtin>.str", "<builtin>.super", "<builtin>.isinstance", "typing._collect_type_vars", "<builtin>.set", "<builtin>.TypeError"], "typing._TypingEmpty": [], "typing._TypingEllipsis": [], "typing._get_protocol_attrs": ["<builtin>.set", "<builtin>.list", "<builtin>.getattr"], "typing._is_callable_members_only": ["<builtin>.all", "<builtin>.callable", "typing._get_protocol_attrs", "<builtin>.getattr"], "typing._allow_reckless_class_cheks": ["sys._getframe"], "typing._ProtocolMeta": [], "typing._ProtocolMeta.__instancecheck__": ["<builtin>.callable", "<builtin>.all", "<builtin>.super", "<builtin>.issubclass", "typing._is_callable_members_only", "typing._get_protocol_attrs", "<builtin>.getattr", "<builtin>.hasattr"], "typing.Protocol": [], "typing.Protocol.__init_subclass__": ["<builtin>.issubclass", "<builtin>.super", "<builtin>.any", "<builtin>.TypeError"], "typing.Protocol.__init_subclass__._proto_hook": ["<builtin>.isinstance", "<builtin>.issubclass", "typing._is_callable_members_only", "typing._get_protocol_attrs", "<builtin>.getattr", "<builtin>.TypeError", "typing._allow_reckless_class_cheks"], "typing.runtime_checkable": ["<builtin>.issubclass", "<builtin>.TypeError"], "typing.cast": [], "typing._get_defaults": ["<builtin>.zip", "<builtin>.dict", "<builtin>.len"], "typing.get_origin": ["<builtin>.isinstance"], "typing.get_args": ["<builtin>.list", "<builtin>.isinstance", "typing.get_origin"], "typing.no_type_check": ["typing.no_type_check", "<builtin>.isinstance"], "typing.no_type_check_decorator": ["_functools.partial", "functools.wraps"], "typing.no_type_check_decorator.wrapped_decorator": ["typing.no_type_check"], "typing._overload_dummy": ["<builtin>.NotImplementedError"], "typing.overload": [], "typing.final": [], "typing._alias": ["typing._GenericAlias.__init__"], "typing.SupportsInt": ["abc.abstractmethod"], "typing.SupportsInt.__int__": [], "typing.SupportsFloat": ["abc.abstractmethod"], "typing.SupportsFloat.__float__": [], "typing.SupportsComplex": ["abc.abstractmethod"], "typing.SupportsComplex.__complex__": [], "typing.SupportsBytes": ["abc.abstractmethod"], "typing.SupportsBytes.__bytes__": [], "typing.SupportsIndex": ["abc.abstractmethod"], "typing.SupportsIndex.__index__": [], "typing.SupportsAbs": ["abc.abstractmethod"], "typing.SupportsAbs.__abs__": [], "typing.SupportsRound": ["abc.abstractmethod"], "typing.SupportsRound.__round__": [], "typing._make_nmtuple": ["sys._getframe", "typing._type_check", "<builtin>.dict", "collections.namedtuple"], "typing.NamedTupleMeta": [], "typing.NamedTupleMeta.__new__": ["<builtin>.tuple", "<builtin>.AttributeError", "<builtin>.setattr", "<builtin>.super", "typing._make_nmtuple", "<builtin>.dict", "<builtin>.TypeError"], "typing.NamedTuple": [], "typing._dict_new": ["<builtin>.dict"], "typing._typeddict_new": ["sys._getframe", "<builtin>.TypeError", "<builtin>.dict"], "typing._check_fails": ["<builtin>.TypeError"], "typing._TypedDictMeta": [], "typing._TypedDictMeta.__new__": ["<builtin>.super", "typing._type_check", "<builtin>.hasattr"], "typing.TypedDict": [], "typing.NewType": [], "typing.NewType.new_type": [], "typing.IO": ["abc.abstractmethod"], "typing.IO.mode": [], "typing.IO.name": [], "typing.IO.close": [], "typing.IO.closed": [], "typing.IO.fileno": [], "typing.IO.flush": [], "typing.IO.isatty": [], "typing.IO.read": [], "typing.IO.readable": [], "typing.IO.readline": [], "typing.IO.readlines": [], "typing.IO.seek": [], "typing.IO.seekable": [], "typing.IO.tell": [], "typing.IO.truncate": [], "typing.IO.writable": [], "typing.IO.write": [], "typing.IO.writelines": [], "typing.IO.__enter__": [], "typing.IO.__exit__": [], "typing.BinaryIO": ["abc.abstractmethod"], "typing.BinaryIO.write": [], "typing.BinaryIO.__enter__": [], "typing.TextIO": ["abc.abstractmethod"], "typing.TextIO.buffer": [], "typing.TextIO.encoding": [], "typing.TextIO.errors": [], "typing.TextIO.line_buffering": [], "typing.TextIO.newlines": [], "typing.TextIO.__enter__": [], "typing.io": [], "typing.re": [], "furl.omdict1D.omdict1D": [], "ordereddict.OrderedDict.setdefault": [], "_collections.OrderedDict.setdefault": [], "orderedmultidict.itemlist.itemlist.append": ["orderedmultidict.itemlist.itemnode.__init__"], "furl.omdict1D.omdict1D.set": ["furl.omdict1D.omdict1D._set"], "furl.omdict1D.omdict1D._set": ["orderedmultidict.orderedmultidict.omdict.setlist", "furl.common.is_iterable_but_not_string"], "furl.omdict1D.omdict1D.__setitem__": ["furl.omdict1D.omdict1D._set"], "furl.omdict1D.omdict1D._bin_update_items": ["orderedmultidict.orderedmultidict.omdict.values", "furl.common.is_iterable_but_not_string", "<builtin>.len"], "orderedmultidict.orderedmultidict.omdict.values": ["orderedmultidict.orderedmultidict.omdict.getlist", "orderedmultidict.orderedmultidict.omdict.itervalues", "<builtin>.list"], "orderedmultidict.orderedmultidict.omdict.setlist": ["orderedmultidict.orderedmultidict.omdict.pop", "furl.omdict1D.omdict1D.add", "ordereddict.OrderedDict.get", "orderedmultidict.orderedmultidict.omdict.add", "<builtin>.list", "orderedmultidict.itemlist.itemlist.removenode", "_collections.OrderedDict.get", "six.moves.zip_longest"], "furl.compat.UnicodeMixin": [], "furl.compat.UnicodeMixin.__str__": [], "orderedmultidict.orderedmultidict.callable_attr": ["<builtin>.callable", "<builtin>.getattr", "<builtin>.hasattr"], "orderedmultidict.orderedmultidict.omdict": [], "orderedmultidict.itemlist.itemlist.__init__": ["orderedmultidict.itemlist.itemlist.append", "orderedmultidict.itemlist.itemnode.__init__"], "ordereddict.OrderedDict": [], "orderedmultidict.orderedmultidict.omdict.load": ["orderedmultidict.orderedmultidict.omdict.clear", "orderedmultidict.orderedmultidict.omdict.updateall"], "orderedmultidict.orderedmultidict.omdict.updateall": ["orderedmultidict.orderedmultidict.omdict._update_updateall"], "orderedmultidict.orderedmultidict.omdict.copy": ["orderedmultidict.orderedmultidict.omdict.allitems"], "orderedmultidict.orderedmultidict.omdict.allitems": ["orderedmultidict.orderedmultidict.omdict.iterallitems", "<builtin>.list"], "_collections.OrderedDict.clear": [], "ordereddict.OrderedDict.clear": [], "orderedmultidict.itemlist.itemlist.clear": ["orderedmultidict.itemlist.itemlist.__iter__", "orderedmultidict.itemlist.itemlist.removenode"], "orderedmultidict.orderedmultidict.omdict.size": ["<builtin>.len"], "orderedmultidict.orderedmultidict.omdict.fromkeys": ["orderedmultidict.orderedmultidict.omdict.__init__"], "orderedmultidict.orderedmultidict.omdict.has_key": [], "orderedmultidict.orderedmultidict.omdict.update": ["orderedmultidict.orderedmultidict.omdict._update_updateall"], "orderedmultidict.orderedmultidict.omdict._update_updateall": ["orderedmultidict.orderedmultidict.omdict._bin_update_items", "furl.omdict1D.omdict1D.add", "orderedmultidict.orderedmultidict.omdict.setlist", "orderedmultidict.orderedmultidict.omdict.add", "<builtin>.dict", "orderedmultidict.orderedmultidict.omdict._items_iterator", "itertools.chain", "furl.omdict1D.omdict1D._bin_update_items", "six.iteritems"], "orderedmultidict.orderedmultidict.omdict._items_iterator": ["<builtin>.iter", "orderedmultidict.orderedmultidict.callable_attr"], "orderedmultidict.orderedmultidict.omdict._bin_update_items": ["orderedmultidict.orderedmultidict.omdict.values", "<builtin>.len"], "orderedmultidict.orderedmultidict.omdict.add": ["orderedmultidict.itemlist.itemlist.append", "ordereddict.OrderedDict.setdefault", "_collections.OrderedDict.setdefault"], "orderedmultidict.orderedmultidict.omdict.get": [], "orderedmultidict.orderedmultidict.omdict.getlist": [], "orderedmultidict.orderedmultidict.omdict.setdefault": ["furl.omdict1D.omdict1D.add", "orderedmultidict.orderedmultidict.omdict.add"], "orderedmultidict.orderedmultidict.omdict.setdefaultlist": ["orderedmultidict.orderedmultidict.omdict.getlist", "orderedmultidict.orderedmultidict.omdict.addlist"], "orderedmultidict.orderedmultidict.omdict.addlist": ["furl.omdict1D.omdict1D.add", "orderedmultidict.orderedmultidict.omdict.add"], "orderedmultidict.orderedmultidict.omdict.set": [], "orderedmultidict.orderedmultidict.omdict.pop": ["<builtin>.KeyError", "orderedmultidict.orderedmultidict.omdict.poplist"], "_collections.OrderedDict.get": [], "ordereddict.OrderedDict.get": [], "six.moves.zip_longest": [], "orderedmultidict.itemlist.itemlist.removenode": [], "orderedmultidict.orderedmultidict.omdict.removevalues": ["orderedmultidict.orderedmultidict.omdict.getlist", "orderedmultidict.orderedmultidict.omdict.setlist"], "orderedmultidict.orderedmultidict.omdict.poplist": ["orderedmultidict.itemlist.itemlist.__iter__", "<builtin>.KeyError", "orderedmultidict.orderedmultidict.omdict.getlist", "orderedmultidict.itemlist.itemlist.removenode"], "orderedmultidict.itemlist.itemlist.__iter__": [], "orderedmultidict.orderedmultidict.omdict.popvalue": ["<builtin>.KeyError", "orderedmultidict.orderedmultidict.omdict.popvalue.pop_node_with_index", "<builtin>.len", "<builtin>.ValueError", "orderedmultidict.orderedmultidict.omdict.values"], "orderedmultidict.orderedmultidict.omdict.popvalue.pop_node_with_index": ["orderedmultidict.itemlist.itemlist.removenode"], "orderedmultidict.orderedmultidict.omdict.popitem": ["<builtin>.KeyError", "orderedmultidict.orderedmultidict.omdict.pop", "ordereddict.OrderedDict.keys", "<builtin>.list", "_collections.OrderedDict.keys", "orderedmultidict.orderedmultidict.omdict.popvalue"], "orderedmultidict.orderedmultidict.omdict.poplistitem": ["<builtin>.KeyError", "orderedmultidict.orderedmultidict.omdict.poplist", "orderedmultidict.orderedmultidict.omdict.keys"], "orderedmultidict.orderedmultidict.omdict.keys": ["<builtin>.list", "orderedmultidict.orderedmultidict.omdict.iterkeys"], "orderedmultidict.orderedmultidict.omdict.items": ["orderedmultidict.orderedmultidict.omdict.iteritems", "<builtin>.list"], "orderedmultidict.orderedmultidict.omdict.iteritems": ["<builtin>.iter", "<builtin>.KeyError", "six.iteritems"], "orderedmultidict.orderedmultidict.omdict.iterkeys": ["six.iterkeys"], "orderedmultidict.orderedmultidict.omdict.itervalues": ["<builtin>.iter", "<builtin>.KeyError", "six.itervalues"], "orderedmultidict.orderedmultidict.omdict.lists": ["<builtin>.list", "orderedmultidict.orderedmultidict.omdict.iterlists"], "orderedmultidict.orderedmultidict.omdict.iterlists": ["six.moves.map"], "orderedmultidict.orderedmultidict.omdict.listitems": ["orderedmultidict.orderedmultidict.omdict.iterlistitems", "<builtin>.list"], "orderedmultidict.orderedmultidict.omdict.iterlistitems": ["six.moves.map"], "orderedmultidict.orderedmultidict.omdict.iterallitems": ["orderedmultidict.itemlist.itemlist.iteritems", "orderedmultidict.orderedmultidict.omdict.iteritems"], "orderedmultidict.orderedmultidict.omdict.allkeys": ["orderedmultidict.orderedmultidict.omdict.iterallkeys", "<builtin>.list"], "orderedmultidict.orderedmultidict.omdict.iterallkeys": ["orderedmultidict.itemlist.itemlist.iterkeys"], "orderedmultidict.orderedmultidict.omdict.allvalues": ["orderedmultidict.orderedmultidict.omdict.iterallvalues", "<builtin>.list"], "orderedmultidict.orderedmultidict.omdict.iterallvalues": ["<builtin>.iter", "<builtin>.KeyError", "orderedmultidict.orderedmultidict.omdict.getlist", "orderedmultidict.itemlist.itemlist.itervalues"], "orderedmultidict.itemlist.itemlist.iteritems": ["orderedmultidict.itemlist.itemlist.__iter__"], "orderedmultidict.itemlist.itemlist.iterkeys": ["orderedmultidict.itemlist.itemlist.__iter__"], "orderedmultidict.itemlist.itemlist.itervalues": ["orderedmultidict.itemlist.itemlist.__iter__"], "orderedmultidict.orderedmultidict.omdict.iterlists.<lambda1>": ["orderedmultidict.orderedmultidict.omdict.getlist"], "six.moves.map": [], "orderedmultidict.orderedmultidict.omdict.iterlistitems.<lambda1>": ["orderedmultidict.orderedmultidict.omdict.getlist"], "orderedmultidict.orderedmultidict.omdict.reverse": ["orderedmultidict.itemlist.itemlist.reverse", "six.iterkeys"], "orderedmultidict.itemlist.itemlist.reverse": ["orderedmultidict.itemlist.itemlist.__iter__"], "orderedmultidict.orderedmultidict.omdict.__eq__": ["<builtin>.len", "orderedmultidict.orderedmultidict.omdict.iterallitems", "orderedmultidict.orderedmultidict.callable_attr", "six.iteritems", "six.moves.zip_longest", "orderedmultidict.orderedmultidict.omdict.get", "<builtin>.hasattr"], "orderedmultidict.orderedmultidict.omdict.__ne__": ["orderedmultidict.orderedmultidict.omdict.__eq__"], "orderedmultidict.orderedmultidict.omdict.__len__": ["<builtin>.len"], "orderedmultidict.orderedmultidict.omdict.__iter__": ["orderedmultidict.orderedmultidict.omdict.iterkeys"], "orderedmultidict.orderedmultidict.omdict.__contains__": [], "orderedmultidict.orderedmultidict.omdict.__getitem__": ["<builtin>.KeyError", "orderedmultidict.orderedmultidict.omdict.get"], "orderedmultidict.orderedmultidict.omdict.__setitem__": ["orderedmultidict.orderedmultidict.omdict.setlist"], "orderedmultidict.orderedmultidict.omdict.__delitem__": ["orderedmultidict.orderedmultidict.omdict.pop"], "orderedmultidict.orderedmultidict.omdict.__nonzero__": ["<builtin>.bool"], "orderedmultidict.orderedmultidict.omdict.__str__": ["orderedmultidict.orderedmultidict.omdict.iterallitems", "six.moves.map"], "orderedmultidict.orderedmultidict.omdict.__str__.<lambda1>": [], "orderedmultidict.orderedmultidict.omdict.__repr__": ["orderedmultidict.orderedmultidict.omdict.allitems"], "orderedmultidict.orderedmultidict.omdict.__or__": ["orderedmultidict.orderedmultidict._get_items", "itertools.chain"], "orderedmultidict.orderedmultidict._get_items": ["<builtin>.TypeError", "orderedmultidict.orderedmultidict.callable_attr", "<builtin>.getattr"], "orderedmultidict.orderedmultidict.omdict.__ior__": ["furl.omdict1D.omdict1D.add", "orderedmultidict.orderedmultidict._get_items", "orderedmultidict.orderedmultidict.omdict.add"], "orderedmultidict.itemlist.itemnode": [], "orderedmultidict.itemlist.itemnode.__init__": [], "orderedmultidict.itemlist.itemlist": [], "orderedmultidict.itemlist.itemlist.items": ["orderedmultidict.itemlist.itemlist.iteritems", "<builtin>.list"], "orderedmultidict.itemlist.itemlist.keys": ["orderedmultidict.itemlist.itemlist.iterkeys", "<builtin>.list"], "orderedmultidict.itemlist.itemlist.values": ["<builtin>.list", "orderedmultidict.itemlist.itemlist.itervalues"], "orderedmultidict.itemlist.itemlist.__len__": [], "orderedmultidict.itemlist.itemlist.__contains__": ["orderedmultidict.itemlist.itemlist.__iter__", "<builtin>.callable", "<builtin>.len", "<builtin>.hasattr"], "orderedmultidict.itemlist.itemlist.__getitem__": ["<builtin>.IndexError"], "orderedmultidict.itemlist.itemlist.__delitem__": ["orderedmultidict.itemlist.itemlist.removenode"], "orderedmultidict.itemlist.itemlist.__eq__": ["six.moves.zip_longest"], "orderedmultidict.itemlist.itemlist.__ne__": ["orderedmultidict.itemlist.itemlist.__eq__"], "orderedmultidict.itemlist.itemlist.__nonzero__": [], "orderedmultidict.itemlist.itemlist.__str__": ["orderedmultidict.itemlist.itemlist.items"]}